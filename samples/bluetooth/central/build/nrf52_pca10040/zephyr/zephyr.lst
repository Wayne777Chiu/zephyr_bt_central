
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d08 	.word	0x20002d08

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001b05 	.word	0x00001b05
       8:	00001b59 	.word	0x00001b59
       c:	0000199d 	.word	0x0000199d
      10:	0000199d 	.word	0x0000199d
      14:	0000199d 	.word	0x0000199d
      18:	0000199d 	.word	0x0000199d
      1c:	0000199d 	.word	0x0000199d
      20:	0000199d 	.word	0x0000199d
      24:	0000199d 	.word	0x0000199d
      28:	0000199d 	.word	0x0000199d
      2c:	000015a5 	.word	0x000015a5
      30:	0000199d 	.word	0x0000199d
      34:	0000199d 	.word	0x0000199d
      38:	00001561 	.word	0x00001561
      3c:	0000199d 	.word	0x0000199d

00000040 <_irq_vector_table>:
      40:	00001ac9 00010b67 00001ac9 00001ac9     ....g...........
      50:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      60:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      70:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      80:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      90:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      a0:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      b0:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      c0:	00001ac9 00001ac9 00001ac9 00001ac9     ................
      d0:	00001ac9 00001ac9 00001ac9              ............

000000dc <_sw_isr_table>:
      dc:	00000000 0000129d 00000000 00001915     ................
      ec:	00000000 00001915 00000000 00001915     ................
      fc:	00000000 00001915 00000000 00001915     ................
     10c:	00000000 00012a19 00000000 00001915     .....*..........
     11c:	00000000 00001915 00000000 00001915     ................
     12c:	00000000 00001915 00000000 00010b2d     ............-...
     13c:	00000000 00001915 20003ed8 00012d1d     .........>. .-..
     14c:	00000000 00001915 00000000 00001915     ................
     15c:	00000000 00001915 00000000 000013c5     ................
     16c:	00000000 00001915 00000000 00001915     ................
     17c:	00000000 00001915 00000000 00001915     ................
     18c:	00000000 00001915 00000000 00001915     ................
     19c:	00000000 00010b61 00000000 00001915     ....a...........
     1ac:	00000000 00001915 00000000 00001915     ................
     1bc:	00000000 00001915 00000000 00001915     ................
     1cc:	00000000 00001915 00000000 00001915     ................
     1dc:	00000000 00001915 00000000 00001915     ................
     1ec:	00000000 00001915 00000000 00001915     ................
     1fc:	00000000 00001915 00000000 00001915     ................
     20c:	00000000 00001915                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb28 	bl	1bbc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000142ad 	.word	0x000142ad
     5b0:	000142cf 	.word	0x000142cf
     5b4:	000142b4 	.word	0x000142b4
     5b8:	000142bb 	.word	0x000142bb
     5bc:	000142c5 	.word	0x000142c5
     5c0:	0001653e 	.word	0x0001653e

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fa72 	bl	4ab4 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 fb0b 	bl	4c14 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000142f2 	.word	0x000142f2
     604:	20000000 	.word	0x20000000
     608:	00014310 	.word	0x00014310

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fa4b 	bl	4ab4 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 f8c0 	bl	47b4 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fd1e 	bl	4088 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	0001433b 	.word	0x0001433b
     664:	00014250 	.word	0x00014250
     668:	00000671 	.word	0x00000671
     66c:	00014359 	.word	0x00014359

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fd49 	bl	412c <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 fa05 	bl	4ab8 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001431f 	.word	0x0001431f
     6bc:	00014256 	.word	0x00014256

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fc7e 	bl	3fc4 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fdd6 	bl	4290 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fcc8 	bl	4088 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	0001437c 	.word	0x0001437c
     70c:	0001439c 	.word	0x0001439c
     710:	20003a48 	.word	0x20003a48
     714:	0001425e 	.word	0x0001425e
     718:	00000671 	.word	0x00000671
     71c:	00014359 	.word	0x00014359
     720:	000143b3 	.word	0x000143b3

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a7c 	.word	0x20003a7c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f012 ff80 	bl	137a8 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8e8 	bl	1a7c <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a80 	.word	0x20003a80

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a80 	.word	0x20003a80

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     fe0:	b530      	push	{r4, r5, lr}
     fe2:	b085      	sub	sp, #20
     fe4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     fe6:	9001      	str	r0, [sp, #4]
     fe8:	9102      	str	r1, [sp, #8]
     fea:	2500      	movs	r5, #0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fec:	a901      	add	r1, sp, #4
     fee:	4805      	ldr	r0, [pc, #20]	; (1004 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     ff0:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ff2:	f7ff fe8b 	bl	d0c <_vprintk>

	if (ctx.count < ctx.max) {
     ff6:	9803      	ldr	r0, [sp, #12]
     ff8:	9b02      	ldr	r3, [sp, #8]
     ffa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     ffc:	bfb8      	it	lt
     ffe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1000:	b005      	add	sp, #20
    1002:	bd30      	pop	{r4, r5, pc}
    1004:	00000cd5 	.word	0x00000cd5

00001008 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
    1008:	4770      	bx	lr
	...

0000100c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    100c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    100e:	4c11      	ldr	r4, [pc, #68]	; (1054 <sys_rand32_get+0x48>)
    1010:	f3bf 8f5b 	dmb	ish
    1014:	6820      	ldr	r0, [r4, #0]
    1016:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    101a:	b960      	cbnz	r0, 1036 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    101c:	480e      	ldr	r0, [pc, #56]	; (1058 <sys_rand32_get+0x4c>)
    101e:	f011 feeb 	bl	12df8 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1022:	f3bf 8f5b 	dmb	ish
    1026:	e854 3f00 	ldrex	r3, [r4]
    102a:	e844 0200 	strex	r2, r0, [r4]
    102e:	2a00      	cmp	r2, #0
    1030:	d1f9      	bne.n	1026 <sys_rand32_get+0x1a>
    1032:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1036:	6843      	ldr	r3, [r0, #4]
    1038:	2204      	movs	r2, #4
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	eb0d 0102 	add.w	r1, sp, r2
    1040:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    1042:	2800      	cmp	r0, #0
    1044:	da02      	bge.n	104c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1046:	f000 fa37 	bl	14b8 <_timer_cycle_get_32>
    104a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    104c:	9801      	ldr	r0, [sp, #4]
    104e:	b002      	add	sp, #8
    1050:	bd10      	pop	{r4, pc}
    1052:	bf00      	nop
    1054:	20000004 	.word	0x20000004
    1058:	000143e1 	.word	0x000143e1

0000105c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    105c:	280a      	cmp	r0, #10
{
    105e:	b538      	push	{r3, r4, r5, lr}
    1060:	4604      	mov	r4, r0
    1062:	4d07      	ldr	r5, [pc, #28]	; (1080 <console_out+0x24>)
	if ('\n' == c) {
    1064:	d104      	bne.n	1070 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1066:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1068:	6843      	ldr	r3, [r0, #4]
    106a:	210d      	movs	r1, #13
    106c:	685b      	ldr	r3, [r3, #4]
    106e:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1070:	6828      	ldr	r0, [r5, #0]
    1072:	6843      	ldr	r3, [r0, #4]
    1074:	b2e1      	uxtb	r1, r4
    1076:	685b      	ldr	r3, [r3, #4]
    1078:	4798      	blx	r3

	return c;
}
    107a:	4620      	mov	r0, r4
    107c:	bd38      	pop	{r3, r4, r5, pc}
    107e:	bf00      	nop
    1080:	20000008 	.word	0x20000008

00001084 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1084:	4801      	ldr	r0, [pc, #4]	; (108c <uart_console_hook_install+0x8>)
    1086:	f7ff be3b 	b.w	d00 <__printk_hook_install>
    108a:	bf00      	nop
    108c:	0000105d 	.word	0x0000105d

00001090 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1090:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1092:	4804      	ldr	r0, [pc, #16]	; (10a4 <uart_console_init+0x14>)
    1094:	f011 feb0 	bl	12df8 <device_get_binding>
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <uart_console_init+0x18>)
    109a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    109c:	f7ff fff2 	bl	1084 <uart_console_hook_install>

	return 0;
}
    10a0:	2000      	movs	r0, #0
    10a2:	bd08      	pop	{r3, pc}
    10a4:	000143eb 	.word	0x000143eb
    10a8:	20000008 	.word	0x20000008

000010ac <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    10ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    10ae:	f04f 0320 	mov.w	r3, #32
    10b2:	f3ef 8211 	mrs	r2, BASEPRI
    10b6:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10ba:	4c11      	ldr	r4, [pc, #68]	; (1100 <_m16src_stop+0x54>)
    10bc:	7823      	ldrb	r3, [r4, #0]
    10be:	b923      	cbnz	r3, 10ca <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10c0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10c4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10c8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10ca:	3b01      	subs	r3, #1
    10cc:	b2db      	uxtb	r3, r3
    10ce:	7023      	strb	r3, [r4, #0]
    10d0:	b123      	cbz	r3, 10dc <_m16src_stop+0x30>
    10d2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10d6:	f06f 000f 	mvn.w	r0, #15
    10da:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <_m16src_stop+0x58>)
    10de:	7818      	ldrb	r0, [r3, #0]
    10e0:	2101      	movs	r1, #1
    10e2:	b128      	cbz	r0, 10f0 <_m16src_stop+0x44>
		m16src_ref++;
    10e4:	7021      	strb	r1, [r4, #0]
    10e6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10ea:	f06f 000a 	mvn.w	r0, #10
    10ee:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10f0:	7019      	strb	r1, [r3, #0]
    10f2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10fa:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10fc:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10fe:	bd10      	pop	{r4, pc}
    1100:	2000000e 	.word	0x2000000e
    1104:	2000000d 	.word	0x2000000d

00001108 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    1108:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    110a:	2200      	movs	r2, #0
    110c:	4610      	mov	r0, r2
    110e:	2101      	movs	r1, #1
    1110:	f000 fbe8 	bl	18e4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1114:	2000      	movs	r0, #0
    1116:	f000 fbb3 	bl	1880 <_arch_irq_enable>

	return 0;
}
    111a:	2000      	movs	r0, #0
    111c:	bd08      	pop	{r3, pc}
	...

00001120 <_m16src_start>:
{
    1120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1122:	f04f 0220 	mov.w	r2, #32
    1126:	f3ef 8311 	mrs	r3, BASEPRI
    112a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    112e:	4a25      	ldr	r2, [pc, #148]	; (11c4 <_m16src_start+0xa4>)
    1130:	7810      	ldrb	r0, [r2, #0]
    1132:	1c44      	adds	r4, r0, #1
    1134:	7014      	strb	r4, [r2, #0]
    1136:	b160      	cbz	r0, 1152 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1138:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1140:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1144:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1148:	bf14      	ite	ne
    114a:	2000      	movne	r0, #0
    114c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1152:	4d1d      	ldr	r5, [pc, #116]	; (11c8 <_m16src_start+0xa8>)
    1154:	782f      	ldrb	r7, [r5, #0]
    1156:	b12f      	cbz	r7, 1164 <_m16src_start+0x44>
		m16src_ref--;
    1158:	7010      	strb	r0, [r2, #0]
    115a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    115e:	f06f 000a 	mvn.w	r0, #10
    1162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1164:	2601      	movs	r6, #1
    1166:	702e      	strb	r6, [r5, #0]
    1168:	f383 8811 	msr	BASEPRI, r3
    116c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1170:	b319      	cbz	r1, 11ba <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1172:	4638      	mov	r0, r7
    1174:	f000 fb94 	bl	18a0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1178:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    117c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1180:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1184:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1186:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    118a:	b192      	cbz	r2, 11b2 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    118c:	2200      	movs	r2, #0
    118e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1192:	4a0e      	ldr	r2, [pc, #56]	; (11cc <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1194:	f013 0f01 	tst.w	r3, #1
    1198:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    119c:	bf08      	it	eq
    119e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    11a2:	2000      	movs	r0, #0
    11a4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    11a8:	f000 fb6a 	bl	1880 <_arch_irq_enable>
	m16src_grd = 0;
    11ac:	2300      	movs	r3, #0
    11ae:	702b      	strb	r3, [r5, #0]
    11b0:	e7c4      	b.n	113c <_m16src_start+0x1c>
			__WFE();
    11b2:	bf20      	wfe
			__SEV();
    11b4:	bf40      	sev
			__WFE();
    11b6:	bf20      	wfe
    11b8:	e7e5      	b.n	1186 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11be:	6026      	str	r6, [r4, #0]
    11c0:	e7f4      	b.n	11ac <_m16src_start+0x8c>
    11c2:	bf00      	nop
    11c4:	2000000e 	.word	0x2000000e
    11c8:	2000000d 	.word	0x2000000d
    11cc:	e000e100 	.word	0xe000e100

000011d0 <_k32src_start>:
{
    11d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d2:	4606      	mov	r6, r0
    11d4:	460c      	mov	r4, r1
	__asm__ volatile(
    11d6:	f04f 0220 	mov.w	r2, #32
    11da:	f3ef 8311 	mrs	r3, BASEPRI
    11de:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11e2:	4a2c      	ldr	r2, [pc, #176]	; (1294 <_k32src_start+0xc4>)
    11e4:	7815      	ldrb	r5, [r2, #0]
    11e6:	b165      	cbz	r5, 1202 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11e8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11f0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11f8:	bf0c      	ite	eq
    11fa:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11fe:	2000      	movne	r0, #0
    1200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1202:	2701      	movs	r7, #1
    1204:	7017      	strb	r7, [r2, #0]
    1206:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    120a:	4628      	mov	r0, r5
    120c:	f000 fb48 	bl	18a0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1214:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1216:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    121a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    121e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1222:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1226:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1228:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    122c:	b371      	cbz	r1, 128c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    122e:	0792      	lsls	r2, r2, #30
    1230:	4f19      	ldr	r7, [pc, #100]	; (1298 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1232:	bf58      	it	pl
    1234:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1236:	f04f 0100 	mov.w	r1, #0
    123a:	f04f 0501 	mov.w	r5, #1
    123e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1242:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1246:	bf58      	it	pl
    1248:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    124c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1250:	f000 fb16 	bl	1880 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1258:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    125a:	2218      	movs	r2, #24
    125c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1260:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1264:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1268:	f014 0103 	ands.w	r1, r4, #3
    126c:	d1be      	bne.n	11ec <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    126e:	2010      	movs	r0, #16
    1270:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1274:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1278:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    127a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    127e:	f7ff ff4f 	bl	1120 <_m16src_start>
		if (!err) {
    1282:	2800      	cmp	r0, #0
    1284:	d1b2      	bne.n	11ec <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1286:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    128a:	e7af      	b.n	11ec <_k32src_start+0x1c>
		__WFE();
    128c:	bf20      	wfe
		__SEV();
    128e:	bf40      	sev
		__WFE();
    1290:	bf20      	wfe
    1292:	e7c9      	b.n	1228 <_k32src_start+0x58>
    1294:	2000000c 	.word	0x2000000c
    1298:	e000e100 	.word	0xe000e100

0000129c <_power_clock_isr>:
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    129e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    12a2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    12a4:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    12a8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    12ac:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    12b0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    12b4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    12b8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    12bc:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    12c0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12c4:	f1be 0f00 	cmp.w	lr, #0
    12c8:	d003      	beq.n	12d2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12ca:	f04f 0e00 	mov.w	lr, #0
    12ce:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12d2:	b127      	cbz	r7, 12de <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d8:	2700      	movs	r7, #0
    12da:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12de:	b13a      	cbz	r2, 12f0 <_power_clock_isr+0x54>
    12e0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12e2:	bf41      	itttt	mi
    12e4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12e8:	2201      	movmi	r2, #1
    12ea:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ee:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12f0:	b120      	cbz	r0, 12fc <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f6:	2200      	movs	r2, #0
    12f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12fc:	b149      	cbz	r1, 1312 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12fe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1302:	2100      	movs	r1, #0
    1304:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1308:	4628      	mov	r0, r5
    130a:	f7ff fecf 	bl	10ac <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    130e:	2301      	movs	r3, #1
    1310:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1312:	b176      	cbz	r6, 1332 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1318:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    131a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    131c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1320:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1322:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1326:	f7ff fefb 	bl	1120 <_m16src_start>
		if (!err) {
    132a:	b910      	cbnz	r0, 1332 <_power_clock_isr+0x96>
    132c:	4b01      	ldr	r3, [pc, #4]	; (1334 <_power_clock_isr+0x98>)
    132e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1334:	e000e100 	.word	0xe000e100

00001338 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <rtc_compare_set+0x24>)
    133a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    133e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1342:	1ac0      	subs	r0, r0, r3
    1344:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1348:	4b05      	ldr	r3, [pc, #20]	; (1360 <rtc_compare_set+0x28>)
    134a:	3802      	subs	r0, #2
    134c:	4298      	cmp	r0, r3
    134e:	bf82      	ittt	hi
    1350:	4b04      	ldrhi	r3, [pc, #16]	; (1364 <rtc_compare_set+0x2c>)
    1352:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1356:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    135a:	4770      	bx	lr
    135c:	40011000 	.word	0x40011000
    1360:	007ffffd 	.word	0x007ffffd
    1364:	e000e100 	.word	0xe000e100

00001368 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1368:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    136a:	4b11      	ldr	r3, [pc, #68]	; (13b0 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    136c:	4c11      	ldr	r4, [pc, #68]	; (13b4 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    136e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1372:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1374:	4d10      	ldr	r5, [pc, #64]	; (13b8 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1376:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1378:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    137a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    137e:	4298      	cmp	r0, r3
    1380:	d30f      	bcc.n	13a2 <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    1382:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1386:	490d      	ldr	r1, [pc, #52]	; (13bc <rtc_announce_set_next+0x54>)
    1388:	6809      	ldr	r1, [r1, #0]
    138a:	4288      	cmp	r0, r1
    138c:	bf28      	it	cs
    138e:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1390:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1398:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    139a:	4b09      	ldr	r3, [pc, #36]	; (13c0 <rtc_announce_set_next+0x58>)
    139c:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    139e:	f012 fa7b 	bl	13898 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    13a2:	6820      	ldr	r0, [r4, #0]
    13a4:	682b      	ldr	r3, [r5, #0]
    13a6:	4418      	add	r0, r3
}
    13a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    13ac:	f7ff bfc4 	b.w	1338 <rtc_compare_set>
    13b0:	40011000 	.word	0x40011000
    13b4:	20000014 	.word	0x20000014
    13b8:	20003e98 	.word	0x20003e98
    13bc:	20000010 	.word	0x20000010
    13c0:	20003e94 	.word	0x20003e94

000013c4 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13c4:	4b02      	ldr	r3, [pc, #8]	; (13d0 <rtc1_nrf5_isr+0xc>)
    13c6:	2200      	movs	r2, #0
    13c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13cc:	f7ff bfcc 	b.w	1368 <rtc_announce_set_next>
    13d0:	40011000 	.word	0x40011000

000013d4 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13d4:	1e03      	subs	r3, r0, #0
    13d6:	4a0a      	ldr	r2, [pc, #40]	; (1400 <_timer_idle_enter+0x2c>)
    13d8:	480a      	ldr	r0, [pc, #40]	; (1404 <_timer_idle_enter+0x30>)
    13da:	db04      	blt.n	13e6 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13dc:	6811      	ldr	r1, [r2, #0]
    13de:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13e2:	428b      	cmp	r3, r1
    13e4:	dd02      	ble.n	13ec <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13e6:	6813      	ldr	r3, [r2, #0]
    13e8:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ec:	6810      	ldr	r0, [r2, #0]
    13ee:	4a06      	ldr	r2, [pc, #24]	; (1408 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13f0:	4906      	ldr	r1, [pc, #24]	; (140c <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13f2:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13f4:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13f6:	fb00 2003 	mla	r0, r0, r3, r2
    13fa:	f7ff bf9d 	b.w	1338 <rtc_compare_set>
    13fe:	bf00      	nop
    1400:	20003e98 	.word	0x20003e98
    1404:	007fffff 	.word	0x007fffff
    1408:	20000014 	.word	0x20000014
    140c:	20000010 	.word	0x20000010

00001410 <_timer_idle_exit>:
{
    1410:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1412:	4b07      	ldr	r3, [pc, #28]	; (1430 <_timer_idle_exit+0x20>)
    1414:	2200      	movs	r2, #0
    1416:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    141a:	4b06      	ldr	r3, [pc, #24]	; (1434 <_timer_idle_exit+0x24>)
    141c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1420:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1424:	f7ff ffa0 	bl	1368 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <_timer_idle_exit+0x28>)
    142a:	2201      	movs	r2, #1
    142c:	601a      	str	r2, [r3, #0]
    142e:	bd08      	pop	{r3, pc}
    1430:	40011000 	.word	0x40011000
    1434:	e000e100 	.word	0xe000e100
    1438:	20000010 	.word	0x20000010

0000143c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    143c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    143e:	4818      	ldr	r0, [pc, #96]	; (14a0 <_sys_clock_driver_init+0x64>)
    1440:	f011 fcda 	bl	12df8 <device_get_binding>
	if (!clock) {
    1444:	b348      	cbz	r0, 149a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1446:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1448:	4d16      	ldr	r5, [pc, #88]	; (14a4 <_sys_clock_driver_init+0x68>)
    144a:	681b      	ldr	r3, [r3, #0]
    144c:	2101      	movs	r1, #1
    144e:	4798      	blx	r3
	rtc_past = 0;
    1450:	4b15      	ldr	r3, [pc, #84]	; (14a8 <_sys_clock_driver_init+0x6c>)
    1452:	2400      	movs	r4, #0
    1454:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1456:	4b15      	ldr	r3, [pc, #84]	; (14ac <_sys_clock_driver_init+0x70>)
    1458:	2601      	movs	r6, #1
    145a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    145c:	4b14      	ldr	r3, [pc, #80]	; (14b0 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    145e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    146c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1470:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1474:	4b0f      	ldr	r3, [pc, #60]	; (14b4 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1476:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    147a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    147e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1482:	4631      	mov	r1, r6
    1484:	4622      	mov	r2, r4
    1486:	2011      	movs	r0, #17
    1488:	f000 fa2c 	bl	18e4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    148c:	2011      	movs	r0, #17
    148e:	f000 f9f7 	bl	1880 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1492:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1494:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1496:	602e      	str	r6, [r5, #0]
	return 0;
    1498:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    149a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    149e:	bd70      	pop	{r4, r5, r6, pc}
    14a0:	0001440c 	.word	0x0001440c
    14a4:	40011000 	.word	0x40011000
    14a8:	20000014 	.word	0x20000014
    14ac:	20000010 	.word	0x20000010
    14b0:	20003e98 	.word	0x20003e98
    14b4:	e000e100 	.word	0xe000e100

000014b8 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    14b8:	4a0a      	ldr	r2, [pc, #40]	; (14e4 <_timer_cycle_get_32+0x2c>)
{
    14ba:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    14bc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    14c0:	4d09      	ldr	r5, [pc, #36]	; (14e8 <_timer_cycle_get_32+0x30>)
    14c2:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14c6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14ca:	42a3      	cmp	r3, r4
    14cc:	d107      	bne.n	14de <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14ce:	4a07      	ldr	r2, [pc, #28]	; (14ec <_timer_cycle_get_32+0x34>)
    14d0:	6812      	ldr	r2, [r2, #0]
    14d2:	4350      	muls	r0, r2
    14d4:	1a1b      	subs	r3, r3, r0
    14d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14da:	4418      	add	r0, r3
    14dc:	bd30      	pop	{r4, r5, pc}
    14de:	4623      	mov	r3, r4
    14e0:	e7ef      	b.n	14c2 <_timer_cycle_get_32+0xa>
    14e2:	bf00      	nop
    14e4:	40011000 	.word	0x40011000
    14e8:	200019a8 	.word	0x200019a8
    14ec:	20003e98 	.word	0x20003e98

000014f0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14f0:	4807      	ldr	r0, [pc, #28]	; (1510 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14f2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14f4:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14f6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14f8:	d008      	beq.n	150c <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14fa:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14fc:	f012 f906 	bl	1370c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    1500:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1504:	4903      	ldr	r1, [pc, #12]	; (1514 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    1506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    150a:	600a      	str	r2, [r1, #0]

0000150c <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    150c:	4770      	bx	lr
    150e:	0000      	.short	0x0000
    ldr r0, =_kernel
    1510:	20001970 	.word	0x20001970
    ldr r1, =_SCS_ICSR
    1514:	e000ed04 	.word	0xe000ed04

00001518 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1518:	4804      	ldr	r0, [pc, #16]	; (152c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    151a:	2300      	movs	r3, #0
    151c:	2120      	movs	r1, #32
    151e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1520:	3301      	adds	r3, #1
    1522:	2b27      	cmp	r3, #39	; 0x27
    1524:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1528:	d1f9      	bne.n	151e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    152a:	4770      	bx	lr
    152c:	e000e100 	.word	0xe000e100

00001530 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1530:	4a08      	ldr	r2, [pc, #32]	; (1554 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1532:	4909      	ldr	r1, [pc, #36]	; (1558 <__swap+0x28>)
	_current->arch.basepri = key;
    1534:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1536:	6809      	ldr	r1, [r1, #0]
    1538:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    153a:	4908      	ldr	r1, [pc, #32]	; (155c <__swap+0x2c>)
	_current->arch.basepri = key;
    153c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    153e:	684b      	ldr	r3, [r1, #4]
    1540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1544:	604b      	str	r3, [r1, #4]
    1546:	2300      	movs	r3, #0
    1548:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    154c:	6893      	ldr	r3, [r2, #8]
}
    154e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	20001970 	.word	0x20001970
    1558:	00017974 	.word	0x00017974
    155c:	e000ed00 	.word	0xe000ed00

00001560 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1560:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1562:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1566:	490d      	ldr	r1, [pc, #52]	; (159c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1568:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    156a:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    156c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    156e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1572:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1576:	4f0a      	ldr	r7, [pc, #40]	; (15a0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1578:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    157c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    157e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1580:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1582:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1584:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1586:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1588:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    158c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1590:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1594:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1598:	4770      	bx	lr
    159a:	0000      	.short	0x0000
    ldr r1, =_kernel
    159c:	20001970 	.word	0x20001970
    ldr v4, =_SCS_ICSR
    15a0:	e000ed04 	.word	0xe000ed04

000015a4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    15a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15ae:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15b2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    15b4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    15b8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    15bc:	2902      	cmp	r1, #2
    beq _oops
    15be:	d0ff      	beq.n	15c0 <_oops>

000015c0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    15c0:	b500      	push	{lr}
    blx _do_kernel_oops
    15c2:	f000 fa2b 	bl	1a1c <_do_kernel_oops>
    pop {pc}
    15c6:	bd00      	pop	{pc}

000015c8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15c8:	b510      	push	{r4, lr}
    15ca:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15cc:	f012 f8ec 	bl	137a8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15d0:	6822      	ldr	r2, [r4, #0]
    15d2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15d8:	4801      	ldr	r0, [pc, #4]	; (15e0 <_FaultThreadShow.isra.2+0x18>)
    15da:	f7ff bcd7 	b.w	f8c <printk>
    15de:	bf00      	nop
    15e0:	00014565 	.word	0x00014565

000015e4 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15e4:	b538      	push	{r3, r4, r5, lr}
    15e6:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15e8:	481a      	ldr	r0, [pc, #104]	; (1654 <_MpuFault+0x70>)
{
    15ea:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15ec:	f7ff fcce 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15f0:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15f4:	4c18      	ldr	r4, [pc, #96]	; (1658 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15f6:	f7ff ffe7 	bl	15c8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fc:	06d9      	lsls	r1, r3, #27
    15fe:	d502      	bpl.n	1606 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    1600:	4816      	ldr	r0, [pc, #88]	; (165c <_MpuFault+0x78>)
    1602:	f7ff fcc3 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	071a      	lsls	r2, r3, #28
    160a:	d502      	bpl.n	1612 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    160c:	4814      	ldr	r0, [pc, #80]	; (1660 <_MpuFault+0x7c>)
    160e:	f7ff fcbd 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1614:	079b      	lsls	r3, r3, #30
    1616:	d50e      	bpl.n	1636 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    1618:	4812      	ldr	r0, [pc, #72]	; (1664 <_MpuFault+0x80>)
    161a:	f7ff fcb7 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    161e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1622:	0618      	lsls	r0, r3, #24
    1624:	d507      	bpl.n	1636 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1626:	4810      	ldr	r0, [pc, #64]	; (1668 <_MpuFault+0x84>)
    1628:	f7ff fcb0 	bl	f8c <printk>
			if (fromHardFault) {
    162c:	b11d      	cbz	r5, 1636 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    162e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1634:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1636:	4c08      	ldr	r4, [pc, #32]	; (1658 <_MpuFault+0x74>)
    1638:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    163a:	07d2      	lsls	r2, r2, #31
    163c:	d502      	bpl.n	1644 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    163e:	480b      	ldr	r0, [pc, #44]	; (166c <_MpuFault+0x88>)
    1640:	f7ff fca4 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1646:	069b      	lsls	r3, r3, #26
    1648:	d502      	bpl.n	1650 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    164a:	4809      	ldr	r0, [pc, #36]	; (1670 <_MpuFault+0x8c>)
    164c:	f7ff fc9e 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1650:	2000      	movs	r0, #0
    1652:	bd38      	pop	{r3, r4, r5, pc}
    1654:	000145af 	.word	0x000145af
    1658:	e000ed00 	.word	0xe000ed00
    165c:	000145c6 	.word	0x000145c6
    1660:	000145d8 	.word	0x000145d8
    1664:	000145ec 	.word	0x000145ec
    1668:	00014605 	.word	0x00014605
    166c:	00014616 	.word	0x00014616
    1670:	00014636 	.word	0x00014636

00001674 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1674:	b510      	push	{r4, lr}
    1676:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1678:	481a      	ldr	r0, [pc, #104]	; (16e4 <_UsageFault+0x70>)
    167a:	f7ff fc87 	bl	f8c <printk>

	_FaultThreadShow(esf);
    167e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1682:	4c19      	ldr	r4, [pc, #100]	; (16e8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1684:	f7ff ffa0 	bl	15c8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    168a:	019a      	lsls	r2, r3, #6
    168c:	d502      	bpl.n	1694 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    168e:	4817      	ldr	r0, [pc, #92]	; (16ec <_UsageFault+0x78>)
    1690:	f7ff fc7c 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1696:	01db      	lsls	r3, r3, #7
    1698:	d502      	bpl.n	16a0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    169a:	4815      	ldr	r0, [pc, #84]	; (16f0 <_UsageFault+0x7c>)
    169c:	f7ff fc76 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    16a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a2:	0318      	lsls	r0, r3, #12
    16a4:	d502      	bpl.n	16ac <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    16a6:	4813      	ldr	r0, [pc, #76]	; (16f4 <_UsageFault+0x80>)
    16a8:	f7ff fc70 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    16ac:	4c0e      	ldr	r4, [pc, #56]	; (16e8 <_UsageFault+0x74>)
    16ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16b0:	0359      	lsls	r1, r3, #13
    16b2:	d502      	bpl.n	16ba <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    16b4:	4810      	ldr	r0, [pc, #64]	; (16f8 <_UsageFault+0x84>)
    16b6:	f7ff fc69 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    16ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16bc:	039a      	lsls	r2, r3, #14
    16be:	d502      	bpl.n	16c6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    16c0:	480e      	ldr	r0, [pc, #56]	; (16fc <_UsageFault+0x88>)
    16c2:	f7ff fc63 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16c8:	03db      	lsls	r3, r3, #15
    16ca:	d502      	bpl.n	16d2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16cc:	480c      	ldr	r0, [pc, #48]	; (1700 <_UsageFault+0x8c>)
    16ce:	f7ff fc5d 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16d2:	4a05      	ldr	r2, [pc, #20]	; (16e8 <_UsageFault+0x74>)
    16d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16d6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16da:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16de:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16e0:	2000      	movs	r0, #0
    16e2:	bd10      	pop	{r4, pc}
    16e4:	00014666 	.word	0x00014666
    16e8:	e000ed00 	.word	0xe000ed00
    16ec:	0001467f 	.word	0x0001467f
    16f0:	00014693 	.word	0x00014693
    16f4:	000146ae 	.word	0x000146ae
    16f8:	000146cd 	.word	0x000146cd
    16fc:	000146f3 	.word	0x000146f3
    1700:	0001470e 	.word	0x0001470e

00001704 <_BusFault>:
{
    1704:	b538      	push	{r3, r4, r5, lr}
    1706:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    1708:	481d      	ldr	r0, [pc, #116]	; (1780 <_BusFault+0x7c>)
{
    170a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    170c:	f7ff fc3e 	bl	f8c <printk>
	_FaultThreadShow(esf);
    1710:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1714:	4c1b      	ldr	r4, [pc, #108]	; (1784 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1716:	f7ff ff57 	bl	15c8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	04d8      	lsls	r0, r3, #19
    171e:	d504      	bpl.n	172a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1720:	4819      	ldr	r0, [pc, #100]	; (1788 <_BusFault+0x84>)
}
    1722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1726:	f7ff bc31 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    172a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172c:	0519      	lsls	r1, r3, #20
    172e:	d501      	bpl.n	1734 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1730:	4816      	ldr	r0, [pc, #88]	; (178c <_BusFault+0x88>)
    1732:	e7f6      	b.n	1722 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1736:	059a      	lsls	r2, r3, #22
    1738:	d514      	bpl.n	1764 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    173a:	4815      	ldr	r0, [pc, #84]	; (1790 <_BusFault+0x8c>)
    173c:	f7ff fc26 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1740:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	041b      	lsls	r3, r3, #16
    1746:	d507      	bpl.n	1758 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1748:	4812      	ldr	r0, [pc, #72]	; (1794 <_BusFault+0x90>)
    174a:	f7ff fc1f 	bl	f8c <printk>
			if (fromHardFault) {
    174e:	b11d      	cbz	r5, 1758 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1756:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1758:	4b0a      	ldr	r3, [pc, #40]	; (1784 <_BusFault+0x80>)
    175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    175c:	0558      	lsls	r0, r3, #21
    175e:	d50e      	bpl.n	177e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1760:	480d      	ldr	r0, [pc, #52]	; (1798 <_BusFault+0x94>)
    1762:	e7de      	b.n	1722 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1766:	0559      	lsls	r1, r3, #21
    1768:	d4fa      	bmi.n	1760 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    176a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    176c:	05da      	lsls	r2, r3, #23
    176e:	d501      	bpl.n	1774 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1770:	480a      	ldr	r0, [pc, #40]	; (179c <_BusFault+0x98>)
    1772:	e7d6      	b.n	1722 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1776:	049b      	lsls	r3, r3, #18
    1778:	d501      	bpl.n	177e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    177a:	4809      	ldr	r0, [pc, #36]	; (17a0 <_BusFault+0x9c>)
    177c:	e7d1      	b.n	1722 <_BusFault+0x1e>
    177e:	bd38      	pop	{r3, r4, r5, pc}
    1780:	0001442c 	.word	0x0001442c
    1784:	e000ed00 	.word	0xe000ed00
    1788:	000145c6 	.word	0x000145c6
    178c:	000145d8 	.word	0x000145d8
    1790:	00014443 	.word	0x00014443
    1794:	00014605 	.word	0x00014605
    1798:	0001445d 	.word	0x0001445d
    179c:	00014479 	.word	0x00014479
    17a0:	00014636 	.word	0x00014636

000017a4 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    17a4:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17a6:	4c27      	ldr	r4, [pc, #156]	; (1844 <_Fault+0xa0>)
    17a8:	6863      	ldr	r3, [r4, #4]
    17aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    17ae:	1eda      	subs	r2, r3, #3
{
    17b0:	4605      	mov	r5, r0
	switch (fault) {
    17b2:	2a09      	cmp	r2, #9
    17b4:	d83b      	bhi.n	182e <_Fault+0x8a>
    17b6:	e8df f002 	tbb	[pc, r2]
    17ba:	3405      	.short	0x3405
    17bc:	3a3a3036 	.word	0x3a3a3036
    17c0:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17c4:	4820      	ldr	r0, [pc, #128]	; (1848 <_Fault+0xa4>)
    17c6:	f7ff fbe1 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17cc:	079a      	lsls	r2, r3, #30
    17ce:	d503      	bpl.n	17d8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17d0:	481e      	ldr	r0, [pc, #120]	; (184c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17d2:	f7ff fbdb 	bl	f8c <printk>
    17d6:	e002      	b.n	17de <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17da:	005b      	lsls	r3, r3, #1
    17dc:	d401      	bmi.n	17e2 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17de:	2000      	movs	r0, #0
    17e0:	e009      	b.n	17f6 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17e2:	481b      	ldr	r0, [pc, #108]	; (1850 <_Fault+0xac>)
    17e4:	f7ff fbd2 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17e8:	4b1a      	ldr	r3, [pc, #104]	; (1854 <_Fault+0xb0>)
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	b143      	cbz	r3, 1800 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17ee:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17f0:	4628      	mov	r0, r5
    17f2:	f7ff fef7 	bl	15e4 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17f6:	4629      	mov	r1, r5
}
    17f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17fc:	f000 b912 	b.w	1a24 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    1800:	4b15      	ldr	r3, [pc, #84]	; (1858 <_Fault+0xb4>)
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	b123      	cbz	r3, 1810 <_Fault+0x6c>
			_BusFault(esf, 1);
    1806:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1808:	4628      	mov	r0, r5
    180a:	f7ff ff7b 	bl	1704 <_BusFault>
    180e:	e7e6      	b.n	17de <_Fault+0x3a>
		} else if (SCB_UFSR) {
    1810:	4b12      	ldr	r3, [pc, #72]	; (185c <_Fault+0xb8>)
    1812:	881b      	ldrh	r3, [r3, #0]
    1814:	b29b      	uxth	r3, r3
    1816:	2b00      	cmp	r3, #0
    1818:	d0e1      	beq.n	17de <_Fault+0x3a>
		reason = _UsageFault(esf);
    181a:	4628      	mov	r0, r5
    181c:	f7ff ff2a 	bl	1674 <_UsageFault>
    1820:	e7e9      	b.n	17f6 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1822:	2100      	movs	r1, #0
    1824:	e7e4      	b.n	17f0 <_Fault+0x4c>
		_BusFault(esf, 0);
    1826:	2100      	movs	r1, #0
    1828:	e7ee      	b.n	1808 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    182a:	480d      	ldr	r0, [pc, #52]	; (1860 <_Fault+0xbc>)
    182c:	e7d1      	b.n	17d2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    182e:	480d      	ldr	r0, [pc, #52]	; (1864 <_Fault+0xc0>)
    1830:	490d      	ldr	r1, [pc, #52]	; (1868 <_Fault+0xc4>)
    1832:	f1a3 0210 	sub.w	r2, r3, #16
    1836:	2b0f      	cmp	r3, #15
    1838:	bfd8      	it	le
    183a:	4601      	movle	r1, r0
    183c:	480b      	ldr	r0, [pc, #44]	; (186c <_Fault+0xc8>)
    183e:	f7ff fba5 	bl	f8c <printk>
    1842:	e7cc      	b.n	17de <_Fault+0x3a>
    1844:	e000ed00 	.word	0xe000ed00
    1848:	000144c0 	.word	0x000144c0
    184c:	000144d8 	.word	0x000144d8
    1850:	000144fa 	.word	0x000144fa
    1854:	e000ed28 	.word	0xe000ed28
    1858:	e000ed29 	.word	0xe000ed29
    185c:	e000ed2a 	.word	0xe000ed2a
    1860:	0001451a 	.word	0x0001451a
    1864:	00014492 	.word	0x00014492
    1868:	000144a7 	.word	0x000144a7
    186c:	00014551 	.word	0x00014551

00001870 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1870:	4a02      	ldr	r2, [pc, #8]	; (187c <_FaultInit+0xc>)
    1872:	6953      	ldr	r3, [r2, #20]
    1874:	f043 0310 	orr.w	r3, r3, #16
    1878:	6153      	str	r3, [r2, #20]
    187a:	4770      	bx	lr
    187c:	e000ed00 	.word	0xe000ed00

00001880 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1880:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1882:	2b00      	cmp	r3, #0
    1884:	db08      	blt.n	1898 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1886:	2201      	movs	r2, #1
    1888:	f000 001f 	and.w	r0, r0, #31
    188c:	fa02 f000 	lsl.w	r0, r2, r0
    1890:	095b      	lsrs	r3, r3, #5
    1892:	4a02      	ldr	r2, [pc, #8]	; (189c <_arch_irq_enable+0x1c>)
    1894:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    18a0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18a2:	2b00      	cmp	r3, #0
    18a4:	db0d      	blt.n	18c2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18a6:	2201      	movs	r2, #1
    18a8:	095b      	lsrs	r3, r3, #5
    18aa:	f000 001f 	and.w	r0, r0, #31
    18ae:	fa02 f000 	lsl.w	r0, r2, r0
    18b2:	3320      	adds	r3, #32
    18b4:	4a03      	ldr	r2, [pc, #12]	; (18c4 <_arch_irq_disable+0x24>)
    18b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    18ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18be:	f3bf 8f6f 	isb	sy
    18c2:	4770      	bx	lr
    18c4:	e000e100 	.word	0xe000e100

000018c8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18c8:	0942      	lsrs	r2, r0, #5
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <_arch_irq_is_enabled+0x18>)
    18cc:	f000 001f 	and.w	r0, r0, #31
    18d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18d4:	2301      	movs	r3, #1
    18d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    18da:	4010      	ands	r0, r2
    18dc:	4770      	bx	lr
    18de:	bf00      	nop
    18e0:	e000e100 	.word	0xe000e100

000018e4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18e4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18e6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	bfa8      	it	ge
    18ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18ee:	f101 0101 	add.w	r1, r1, #1
    18f2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18f6:	bfad      	iteet	ge
    18f8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18fc:	f000 000f 	andlt.w	r0, r0, #15
    1900:	4b03      	ldrlt	r3, [pc, #12]	; (1910 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1902:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1904:	bfb6      	itet	lt
    1906:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1908:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    190c:	5419      	strblt	r1, [r3, r0]
    190e:	4770      	bx	lr
    1910:	e000ed14 	.word	0xe000ed14

00001914 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1914:	f000 b842 	b.w	199c <__bus_fault>

00001918 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1918:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    191a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    191c:	4b04      	ldr	r3, [pc, #16]	; (1930 <_arch_isr_direct_pm+0x18>)
    191e:	69d8      	ldr	r0, [r3, #28]
    1920:	b118      	cbz	r0, 192a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1922:	2200      	movs	r2, #0
    1924:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1926:	f011 fa8d 	bl	12e44 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    192a:	b662      	cpsie	i
    192c:	bd08      	pop	{r3, pc}
    192e:	bf00      	nop
    1930:	20001970 	.word	0x20001970

00001934 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1936:	460c      	mov	r4, r1
    1938:	4616      	mov	r6, r2
    193a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    193c:	2204      	movs	r2, #4
    193e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1940:	9909      	ldr	r1, [sp, #36]	; 0x24
    1942:	4605      	mov	r5, r0
    1944:	f012 f9c4 	bl	13cd0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1948:	f1a6 0120 	sub.w	r1, r6, #32
    194c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    194e:	4a0c      	ldr	r2, [pc, #48]	; (1980 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1950:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1952:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1956:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1958:	f022 0201 	bic.w	r2, r2, #1
    195c:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    195e:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1960:	662e      	str	r6, [r5, #96]	; 0x60
    1962:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1964:	9a06      	ldr	r2, [sp, #24]
    1966:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1968:	9a07      	ldr	r2, [sp, #28]
    196a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    196c:	9a08      	ldr	r2, [sp, #32]
    196e:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1970:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1972:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1976:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1978:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    197a:	66ab      	str	r3, [r5, #104]	; 0x68
    197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    197e:	bf00      	nop
    1980:	00000899 	.word	0x00000899

00001984 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1984:	4901      	ldr	r1, [pc, #4]	; (198c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1986:	2210      	movs	r2, #16
	str r2, [r1]
    1988:	600a      	str	r2, [r1, #0]
	bx lr
    198a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    198c:	e000ed10 	.word	0xe000ed10

00001990 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1990:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1992:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1996:	bf30      	wfi

	bx lr
    1998:	4770      	bx	lr
    199a:	bf00      	nop

0000199c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    199c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    199e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    19a2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19c0 <__bus_fault+0x24>
	ldr ip, [ip]
    19a6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    19aa:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    19ae:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    19b0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    19b4:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19b8:	b500      	push	{lr}
	bl _Fault
    19ba:	f7ff fef3 	bl	17a4 <_Fault>

	pop {pc}
    19be:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19c0:	e000ed04 	.word	0xe000ed04

000019c4 <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    19c4:	2804      	cmp	r0, #4
{
    19c6:	b538      	push	{r3, r4, r5, lr}
    19c8:	4604      	mov	r4, r0
    19ca:	460d      	mov	r5, r1
	switch (reason) {
    19cc:	d013      	beq.n	19f6 <_NanoFatalErrorHandler+0x32>
    19ce:	2805      	cmp	r0, #5
    19d0:	d013      	beq.n	19fa <_NanoFatalErrorHandler+0x36>
    19d2:	2803      	cmp	r0, #3
    19d4:	d113      	bne.n	19fe <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19d6:	480c      	ldr	r0, [pc, #48]	; (1a08 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19d8:	f7ff fad8 	bl	f8c <printk>
    19dc:	f011 fee4 	bl	137a8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19e0:	69aa      	ldr	r2, [r5, #24]
    19e2:	4601      	mov	r1, r0
    19e4:	4809      	ldr	r0, [pc, #36]	; (1a0c <_NanoFatalErrorHandler+0x48>)
    19e6:	f7ff fad1 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19ea:	4629      	mov	r1, r5
    19ec:	4620      	mov	r0, r4
}
    19ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19f2:	f000 b817 	b.w	1a24 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19f6:	4806      	ldr	r0, [pc, #24]	; (1a10 <_NanoFatalErrorHandler+0x4c>)
    19f8:	e7ee      	b.n	19d8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19fa:	4806      	ldr	r0, [pc, #24]	; (1a14 <_NanoFatalErrorHandler+0x50>)
    19fc:	e7ec      	b.n	19d8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19fe:	4601      	mov	r1, r0
    1a00:	4805      	ldr	r0, [pc, #20]	; (1a18 <_NanoFatalErrorHandler+0x54>)
    1a02:	f7ff fac3 	bl	f8c <printk>
		break;
    1a06:	e7e9      	b.n	19dc <_NanoFatalErrorHandler+0x18>
    1a08:	0001473a 	.word	0x0001473a
    1a0c:	000147b8 	.word	0x000147b8
    1a10:	00014760 	.word	0x00014760
    1a14:	0001477a 	.word	0x0001477a
    1a18:	00014795 	.word	0x00014795

00001a1c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a1c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a1e:	6800      	ldr	r0, [r0, #0]
    1a20:	f7ff bfd0 	b.w	19c4 <_NanoFatalErrorHandler>

00001a24 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a24:	2805      	cmp	r0, #5
{
    1a26:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a28:	d00c      	beq.n	1a44 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a2a:	f012 f87f 	bl	13b2c <k_is_in_isr>
    1a2e:	b160      	cbz	r0, 1a4a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a30:	f012 f87c 	bl	13b2c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a34:	4b0c      	ldr	r3, [pc, #48]	; (1a68 <_SysFatalErrorHandler+0x44>)
    1a36:	490d      	ldr	r1, [pc, #52]	; (1a6c <_SysFatalErrorHandler+0x48>)
    1a38:	2800      	cmp	r0, #0
    1a3a:	bf08      	it	eq
    1a3c:	4619      	moveq	r1, r3
    1a3e:	480c      	ldr	r0, [pc, #48]	; (1a70 <_SysFatalErrorHandler+0x4c>)
    1a40:	f7ff faa4 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a44:	f7ff ffa4 	bl	1990 <k_cpu_idle>
    1a48:	e7fc      	b.n	1a44 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a4a:	f012 f87f 	bl	13b4c <_is_thread_essential>
    1a4e:	2800      	cmp	r0, #0
    1a50:	d1ee      	bne.n	1a30 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a52:	4c08      	ldr	r4, [pc, #32]	; (1a74 <_SysFatalErrorHandler+0x50>)
    1a54:	4808      	ldr	r0, [pc, #32]	; (1a78 <_SysFatalErrorHandler+0x54>)
    1a56:	68a1      	ldr	r1, [r4, #8]
    1a58:	f7ff fa98 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a5c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a62:	f000 b80b 	b.w	1a7c <_impl_k_thread_abort>
    1a66:	bf00      	nop
    1a68:	000147f8 	.word	0x000147f8
    1a6c:	000147f4 	.word	0x000147f4
    1a70:	00014809 	.word	0x00014809
    1a74:	20001970 	.word	0x20001970
    1a78:	00014829 	.word	0x00014829

00001a7c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a7c:	b538      	push	{r3, r4, r5, lr}
    1a7e:	4605      	mov	r5, r0
	__asm__ volatile(
    1a80:	f04f 0320 	mov.w	r3, #32
    1a84:	f3ef 8411 	mrs	r4, BASEPRI
    1a88:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a8c:	f012 f8b6 	bl	13bfc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a90:	4b0b      	ldr	r3, [pc, #44]	; (1ac0 <_impl_k_thread_abort+0x44>)
    1a92:	689b      	ldr	r3, [r3, #8]
    1a94:	429d      	cmp	r5, r3
    1a96:	d10d      	bne.n	1ab4 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a98:	4b0a      	ldr	r3, [pc, #40]	; (1ac4 <_impl_k_thread_abort+0x48>)
    1a9a:	685a      	ldr	r2, [r3, #4]
    1a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1aa0:	b922      	cbnz	r2, 1aac <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1aa2:	f011 fe33 	bl	1370c <_update_time_slice_before_swap>

	return __swap(key);
    1aa6:	4620      	mov	r0, r4
    1aa8:	f7ff fd42 	bl	1530 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aac:	685a      	ldr	r2, [r3, #4]
    1aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1ab2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1ab4:	4620      	mov	r0, r4
}
    1ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1aba:	f011 bce1 	b.w	13480 <_reschedule>
    1abe:	bf00      	nop
    1ac0:	20001970 	.word	0x20001970
    1ac4:	e000ed00 	.word	0xe000ed00

00001ac8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1ac8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aca:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1acc:	4a0b      	ldr	r2, [pc, #44]	; (1afc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1ace:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1ad0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ad2:	bf1e      	ittt	ne
	movne	r1, #0
    1ad4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ad6:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ad8:	f011 f9b4 	blne	12e44 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1adc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ade:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ae2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ae6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1aea:	4905      	ldr	r1, [pc, #20]	; (1b00 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1aec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aee:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1af0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1af2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1af6:	f7ff bcfb 	b.w	14f0 <_ExcExit>
    1afa:	0000      	.short	0x0000
	ldr r2, =_kernel
    1afc:	20001970 	.word	0x20001970
	ldr r1, =_sw_isr_table
    1b00:	000000dc 	.word	0x000000dc

00001b04 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b04:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b06:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1b0a:	4806      	ldr	r0, [pc, #24]	; (1b24 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b10:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b12:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b16:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b18:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b1c:	f3bf 8f6f 	isb	sy

    b _PrepC
    1b20:	f000 b806 	b.w	1b30 <_PrepC>
    ldr r0, =_interrupt_stack
    1b24:	20002e48 	.word	0x20002e48

00001b28 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b28:	bf30      	wfi
    b _SysNmiOnReset
    1b2a:	f7ff bffd 	b.w	1b28 <_SysNmiOnReset>
    1b2e:	bf00      	nop

00001b30 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b30:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b32:	4b07      	ldr	r3, [pc, #28]	; (1b50 <_PrepC+0x20>)
    1b34:	4a07      	ldr	r2, [pc, #28]	; (1b54 <_PrepC+0x24>)
    1b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b3a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b40:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b44:	f011 f9ae 	bl	12ea4 <_bss_zero>
	_data_copy();
    1b48:	f011 f9b6 	bl	12eb8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b4c:	f011 f9d8 	bl	12f00 <_Cstart>
    1b50:	00000000 	.word	0x00000000
    1b54:	e000ed00 	.word	0xe000ed00

00001b58 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b58:	b508      	push	{r3, lr}
	handler();
    1b5a:	f7ff ffe5 	bl	1b28 <_SysNmiOnReset>
	_ExcExit();
}
    1b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b62:	f7ff bcc5 	b.w	14f0 <_ExcExit>
	...

00001b68 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b68:	4912      	ldr	r1, [pc, #72]	; (1bb4 <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b6a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b6c:	680d      	ldr	r5, [r1, #0]
    1b6e:	2d08      	cmp	r5, #8
    1b70:	d80d      	bhi.n	1b8e <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b72:	4a11      	ldr	r2, [pc, #68]	; (1bb8 <arm_mpu_init+0x50>)
    1b74:	6848      	ldr	r0, [r1, #4]
    1b76:	2300      	movs	r3, #0
    1b78:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b7a:	429d      	cmp	r5, r3
    1b7c:	f100 000c 	add.w	r0, r0, #12
    1b80:	d107      	bne.n	1b92 <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b82:	2305      	movs	r3, #5
    1b84:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b8a:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b8e:	2000      	movs	r0, #0
    1b90:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b92:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b96:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b9a:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b9c:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1ba0:	f041 0110 	orr.w	r1, r1, #16
    1ba4:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1ba6:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1baa:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1bac:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1bae:	6114      	str	r4, [r2, #16]
    1bb0:	e7e3      	b.n	1b7a <arm_mpu_init+0x12>
    1bb2:	bf00      	nop
    1bb4:	20003a5c 	.word	0x20003a5c
    1bb8:	e000ed90 	.word	0xe000ed90

00001bbc <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1bbc:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1bbe:	4603      	mov	r3, r0
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	b90a      	cbnz	r2, 1bca <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bc6:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bc8:	4770      	bx	lr
		*d = *s;
    1bca:	f803 2b01 	strb.w	r2, [r3], #1
    1bce:	e7f7      	b.n	1bc0 <strcpy+0x4>

00001bd0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    1bd0:	b510      	push	{r4, lr}
    1bd2:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    1bd4:	4603      	mov	r3, r0
    1bd6:	b13a      	cbz	r2, 1be8 <strncpy+0x18>
    1bd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1bdc:	b92c      	cbnz	r4, 1bea <strncpy+0x1a>
    1bde:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    1be0:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    1be4:	4293      	cmp	r3, r2
    1be6:	d1fb      	bne.n	1be0 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
    1be8:	bd10      	pop	{r4, pc}
		*d = *s;
    1bea:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    1bee:	3a01      	subs	r2, #1
    1bf0:	e7f1      	b.n	1bd6 <strncpy+0x6>

00001bf2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bf2:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bf4:	4603      	mov	r3, r0
    1bf6:	1a98      	subs	r0, r3, r2
    1bf8:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bfc:	2900      	cmp	r1, #0
    1bfe:	d1fa      	bne.n	1bf6 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1c00:	4770      	bx	lr

00001c02 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1c02:	3801      	subs	r0, #1
    1c04:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1c06:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1c0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1c0e:	4293      	cmp	r3, r2
    1c10:	d102      	bne.n	1c18 <strcmp+0x16>
    1c12:	2b00      	cmp	r3, #0
    1c14:	d1f7      	bne.n	1c06 <strcmp+0x4>
    1c16:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1c18:	1a98      	subs	r0, r3, r2
    1c1a:	4770      	bx	lr

00001c1c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1c1e:	b182      	cbz	r2, 1c42 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1c20:	3a01      	subs	r2, #1
    1c22:	460c      	mov	r4, r1
    1c24:	4603      	mov	r3, r0
    1c26:	d103      	bne.n	1c30 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c28:	781a      	ldrb	r2, [r3, #0]
    1c2a:	7820      	ldrb	r0, [r4, #0]
    1c2c:	1a10      	subs	r0, r2, r0
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c30:	781e      	ldrb	r6, [r3, #0]
    1c32:	7825      	ldrb	r5, [r4, #0]
    1c34:	42ae      	cmp	r6, r5
    1c36:	f100 0001 	add.w	r0, r0, #1
    1c3a:	f101 0101 	add.w	r1, r1, #1
    1c3e:	d0ef      	beq.n	1c20 <memcmp+0x4>
    1c40:	e7f2      	b.n	1c28 <memcmp+0xc>
		return 0;
    1c42:	4610      	mov	r0, r2
}
    1c44:	bd70      	pop	{r4, r5, r6, pc}

00001c46 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c46:	ea81 0300 	eor.w	r3, r1, r0
    1c4a:	f013 0f03 	tst.w	r3, #3
{
    1c4e:	b570      	push	{r4, r5, r6, lr}
    1c50:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c52:	d00b      	beq.n	1c6c <memcpy+0x26>
    1c54:	3b01      	subs	r3, #1
    1c56:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c58:	4291      	cmp	r1, r2
    1c5a:	d11b      	bne.n	1c94 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c5c:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c5e:	2a00      	cmp	r2, #0
    1c60:	d0fc      	beq.n	1c5c <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c62:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c66:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c6a:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c6c:	079c      	lsls	r4, r3, #30
    1c6e:	d1f6      	bne.n	1c5e <memcpy+0x18>
    1c70:	1f1e      	subs	r6, r3, #4
    1c72:	460d      	mov	r5, r1
    1c74:	1b54      	subs	r4, r2, r5
    1c76:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c78:	2c03      	cmp	r4, #3
    1c7a:	d806      	bhi.n	1c8a <memcpy+0x44>
    1c7c:	f022 0403 	bic.w	r4, r2, #3
    1c80:	4421      	add	r1, r4
    1c82:	4423      	add	r3, r4
    1c84:	f002 0203 	and.w	r2, r2, #3
    1c88:	e7e4      	b.n	1c54 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c8a:	f855 4b04 	ldr.w	r4, [r5], #4
    1c8e:	f846 4f04 	str.w	r4, [r6, #4]!
    1c92:	e7ef      	b.n	1c74 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c94:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c98:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c9c:	e7dc      	b.n	1c58 <memcpy+0x12>

00001c9e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c9e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1ca0:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1ca2:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1ca4:	079c      	lsls	r4, r3, #30
    1ca6:	d111      	bne.n	1ccc <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1ca8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1cac:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1cb0:	461e      	mov	r6, r3
    1cb2:	1b95      	subs	r5, r2, r6
    1cb4:	441d      	add	r5, r3
    1cb6:	2d03      	cmp	r5, #3
    1cb8:	d80e      	bhi.n	1cd8 <memset+0x3a>
    1cba:	f022 0403 	bic.w	r4, r2, #3
    1cbe:	4423      	add	r3, r4
    1cc0:	f002 0203 	and.w	r2, r2, #3
    1cc4:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1cc6:	4293      	cmp	r3, r2
    1cc8:	d109      	bne.n	1cde <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1cca:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1ccc:	2a00      	cmp	r2, #0
    1cce:	d0fc      	beq.n	1cca <memset+0x2c>
		*(d_byte++) = c_byte;
    1cd0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cd4:	3a01      	subs	r2, #1
    1cd6:	e7e5      	b.n	1ca4 <memset+0x6>
		*(d_word++) = c_word;
    1cd8:	f846 4b04 	str.w	r4, [r6], #4
    1cdc:	e7e9      	b.n	1cb2 <memset+0x14>
		*(d_byte++) = c_byte;
    1cde:	f803 1b01 	strb.w	r1, [r3], #1
    1ce2:	e7f0      	b.n	1cc6 <memset+0x28>

00001ce4 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1ce4:	b570      	push	{r4, r5, r6, lr}
    1ce6:	f04f 0320 	mov.w	r3, #32
    1cea:	f3ef 8511 	mrs	r5, BASEPRI
    1cee:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cf2:	4c14      	ldr	r4, [pc, #80]	; (1d44 <bt_hex+0x60>)
    1cf4:	4e14      	ldr	r6, [pc, #80]	; (1d48 <bt_hex+0x64>)
    1cf6:	7823      	ldrb	r3, [r4, #0]
    1cf8:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cfc:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cfe:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1d02:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1d04:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d06:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1d0a:	2940      	cmp	r1, #64	; 0x40
    1d0c:	bf28      	it	cs
    1d0e:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1d10:	4d0e      	ldr	r5, [pc, #56]	; (1d4c <bt_hex+0x68>)
    1d12:	3801      	subs	r0, #1
    1d14:	4613      	mov	r3, r2
    1d16:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1d1a:	42b3      	cmp	r3, r6
    1d1c:	d104      	bne.n	1d28 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1d1e:	2300      	movs	r3, #0
    1d20:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d24:	4610      	mov	r0, r2
    1d26:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1d28:	7844      	ldrb	r4, [r0, #1]
    1d2a:	0924      	lsrs	r4, r4, #4
    1d2c:	3302      	adds	r3, #2
    1d2e:	5d2c      	ldrb	r4, [r5, r4]
    1d30:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d34:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d38:	f004 040f 	and.w	r4, r4, #15
    1d3c:	5d2c      	ldrb	r4, [r5, r4]
    1d3e:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d42:	e7ea      	b.n	1d1a <bt_hex+0x36>
    1d44:	20000074 	.word	0x20000074
    1d48:	20000075 	.word	0x20000075
    1d4c:	0001486c 	.word	0x0001486c

00001d50 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d50:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d52:	4a0f      	ldr	r2, [pc, #60]	; (1d90 <bt_addr_str+0x40>)
    1d54:	4c0f      	ldr	r4, [pc, #60]	; (1d94 <bt_addr_str+0x44>)
    1d56:	7813      	ldrb	r3, [r2, #0]
    1d58:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d5c:	3301      	adds	r3, #1
{
    1d5e:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d60:	f003 0301 	and.w	r3, r3, #1
    1d64:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d66:	7802      	ldrb	r2, [r0, #0]
    1d68:	7943      	ldrb	r3, [r0, #5]
    1d6a:	9204      	str	r2, [sp, #16]
    1d6c:	7842      	ldrb	r2, [r0, #1]
    1d6e:	9203      	str	r2, [sp, #12]
    1d70:	7882      	ldrb	r2, [r0, #2]
    1d72:	9202      	str	r2, [sp, #8]
    1d74:	78c2      	ldrb	r2, [r0, #3]
    1d76:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d78:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d7c:	7902      	ldrb	r2, [r0, #4]
    1d7e:	9200      	str	r2, [sp, #0]
    1d80:	2112      	movs	r1, #18
    1d82:	4a05      	ldr	r2, [pc, #20]	; (1d98 <bt_addr_str+0x48>)
    1d84:	4620      	mov	r0, r4
    1d86:	f7ff f90f 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d8a:	4620      	mov	r0, r4
    1d8c:	b006      	add	sp, #24
    1d8e:	bd10      	pop	{r4, pc}
    1d90:	20000072 	.word	0x20000072
    1d94:	20000018 	.word	0x20000018
    1d98:	0001484e 	.word	0x0001484e

00001d9c <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d9c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d9e:	4a1d      	ldr	r2, [pc, #116]	; (1e14 <bt_addr_le_str+0x78>)
    1da0:	491d      	ldr	r1, [pc, #116]	; (1e18 <bt_addr_le_str+0x7c>)
    1da2:	7813      	ldrb	r3, [r2, #0]
    1da4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1da8:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1daa:	f003 0301 	and.w	r3, r3, #1
    1dae:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1db0:	7803      	ldrb	r3, [r0, #0]
{
    1db2:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1db4:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1db8:	4604      	mov	r4, r0
	str = bufs[cur++];
    1dba:	440e      	add	r6, r1
    1dbc:	ad07      	add	r5, sp, #28
    1dbe:	2b03      	cmp	r3, #3
    1dc0:	d821      	bhi.n	1e06 <bt_addr_le_str+0x6a>
    1dc2:	e8df f003 	tbb	[pc, r3]
    1dc6:	1a02      	.short	0x1a02
    1dc8:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1dca:	4914      	ldr	r1, [pc, #80]	; (1e1c <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1dcc:	4628      	mov	r0, r5
    1dce:	f7ff fef5 	bl	1bbc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1dd2:	7862      	ldrb	r2, [r4, #1]
    1dd4:	9204      	str	r2, [sp, #16]
    1dd6:	78a2      	ldrb	r2, [r4, #2]
    1dd8:	9203      	str	r2, [sp, #12]
    1dda:	78e2      	ldrb	r2, [r4, #3]
    1ddc:	9202      	str	r2, [sp, #8]
    1dde:	7922      	ldrb	r2, [r4, #4]
    1de0:	9201      	str	r2, [sp, #4]
    1de2:	7962      	ldrb	r2, [r4, #5]
    1de4:	9200      	str	r2, [sp, #0]
    1de6:	79a3      	ldrb	r3, [r4, #6]
    1de8:	9505      	str	r5, [sp, #20]
    1dea:	4a0d      	ldr	r2, [pc, #52]	; (1e20 <bt_addr_le_str+0x84>)
    1dec:	211b      	movs	r1, #27
    1dee:	4630      	mov	r0, r6
    1df0:	f7ff f8da 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1df4:	4630      	mov	r0, r6
    1df6:	b00a      	add	sp, #40	; 0x28
    1df8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dfa:	490a      	ldr	r1, [pc, #40]	; (1e24 <bt_addr_le_str+0x88>)
    1dfc:	e7e6      	b.n	1dcc <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1dfe:	490a      	ldr	r1, [pc, #40]	; (1e28 <bt_addr_le_str+0x8c>)
    1e00:	e7e4      	b.n	1dcc <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1e02:	490a      	ldr	r1, [pc, #40]	; (1e2c <bt_addr_le_str+0x90>)
    1e04:	e7e2      	b.n	1dcc <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1e06:	4a0a      	ldr	r2, [pc, #40]	; (1e30 <bt_addr_le_str+0x94>)
    1e08:	210a      	movs	r1, #10
    1e0a:	4628      	mov	r0, r5
    1e0c:	f7ff f8cc 	bl	fa8 <snprintk>
    1e10:	e7df      	b.n	1dd2 <bt_addr_le_str+0x36>
    1e12:	bf00      	nop
    1e14:	20000073 	.word	0x20000073
    1e18:	2000003c 	.word	0x2000003c
    1e1c:	000142ad 	.word	0x000142ad
    1e20:	000142cf 	.word	0x000142cf
    1e24:	000142b4 	.word	0x000142b4
    1e28:	000142bb 	.word	0x000142bb
    1e2c:	000142c5 	.word	0x000142c5
    1e30:	0001653e 	.word	0x0001653e

00001e34 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e34:	b530      	push	{r4, r5, lr}
    1e36:	b085      	sub	sp, #20
    1e38:	4604      	mov	r4, r0
    1e3a:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e3c:	4668      	mov	r0, sp
    1e3e:	2203      	movs	r2, #3
    1e40:	f7ff ff01 	bl	1c46 <memcpy>
	memset(res + 3, 0, 13);
    1e44:	220d      	movs	r2, #13
    1e46:	2100      	movs	r1, #0
    1e48:	f10d 0003 	add.w	r0, sp, #3
    1e4c:	f7ff ff27 	bl	1c9e <memset>

	err = bt_encrypt_le(irk, res, res);
    1e50:	4620      	mov	r0, r4
    1e52:	466a      	mov	r2, sp
    1e54:	4669      	mov	r1, sp
    1e56:	f006 fa69 	bl	832c <bt_encrypt_le>
	if (err) {
    1e5a:	4604      	mov	r4, r0
    1e5c:	b920      	cbnz	r0, 1e68 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e5e:	2203      	movs	r2, #3
    1e60:	4669      	mov	r1, sp
    1e62:	4628      	mov	r0, r5
    1e64:	f7ff feef 	bl	1c46 <memcpy>

	return 0;
}
    1e68:	4620      	mov	r0, r4
    1e6a:	b005      	add	sp, #20
    1e6c:	bd30      	pop	{r4, r5, pc}

00001e6e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e6e:	b513      	push	{r0, r1, r4, lr}
    1e70:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e72:	aa01      	add	r2, sp, #4
    1e74:	3103      	adds	r1, #3
    1e76:	f7ff ffdd 	bl	1e34 <ah>
	if (err) {
    1e7a:	b948      	cbnz	r0, 1e90 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e7c:	2203      	movs	r2, #3
    1e7e:	a901      	add	r1, sp, #4
    1e80:	4620      	mov	r0, r4
    1e82:	f7ff fecb 	bl	1c1c <memcmp>
    1e86:	fab0 f080 	clz	r0, r0
    1e8a:	0940      	lsrs	r0, r0, #5
}
    1e8c:	b002      	add	sp, #8
    1e8e:	bd10      	pop	{r4, pc}
		return false;
    1e90:	2000      	movs	r0, #0
    1e92:	e7fb      	b.n	1e8c <bt_rpa_irk_matches+0x1e>

00001e94 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e94:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e96:	1ccd      	adds	r5, r1, #3
{
    1e98:	4606      	mov	r6, r0
    1e9a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e9c:	4628      	mov	r0, r5
    1e9e:	2103      	movs	r1, #3
    1ea0:	f006 fa28 	bl	82f4 <bt_rand>
	if (err) {
    1ea4:	b960      	cbnz	r0, 1ec0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1ea6:	7963      	ldrb	r3, [r4, #5]
    1ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1eb0:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1eb2:	4622      	mov	r2, r4
    1eb4:	4629      	mov	r1, r5
    1eb6:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1ebc:	f7ff bfba 	b.w	1e34 <ah>
}
    1ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ec4 <bt_monitor_init>:
#if defined(CONFIG_HAS_DTS) && !defined(CONFIG_BT_MONITOR_ON_DEV_NAME)
#define CONFIG_BT_MONITOR_ON_DEV_NAME CONFIG_UART_CONSOLE_ON_DEV_NAME
#endif

static int bt_monitor_init(struct device *d)
{
    1ec4:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    1ec6:	4803      	ldr	r0, [pc, #12]	; (1ed4 <bt_monitor_init+0x10>)
    1ec8:	f010 ff96 	bl	12df8 <device_get_binding>
    1ecc:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <bt_monitor_init+0x14>)
    1ece:	6018      	str	r0, [r3, #0]
	__printk_hook_install(monitor_console_out);
	__stdout_hook_install(monitor_console_out);
#endif

	return 0;
}
    1ed0:	2000      	movs	r0, #0
    1ed2:	bd08      	pop	{r3, pc}
    1ed4:	000143eb 	.word	0x000143eb
    1ed8:	20000294 	.word	0x20000294

00001edc <encode_drops>:
{
    1edc:	b510      	push	{r4, lr}
    1ede:	2300      	movs	r3, #0
    1ee0:	f3bf 8f5b 	dmb	ish
    1ee4:	e852 4f00 	ldrex	r4, [r2]
    1ee8:	e842 3e00 	strex	lr, r3, [r2]
    1eec:	f1be 0f00 	cmp.w	lr, #0
    1ef0:	d1f8      	bne.n	1ee4 <encode_drops+0x8>
    1ef2:	f3bf 8f5b 	dmb	ish
	if (count) {
    1ef6:	b16c      	cbz	r4, 1f14 <encode_drops+0x38>
		hdr->ext[hdr->hdr_len++] = type;
    1ef8:	7943      	ldrb	r3, [r0, #5]
    1efa:	18c2      	adds	r2, r0, r3
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    1efc:	2cff      	cmp	r4, #255	; 0xff
		hdr->ext[hdr->hdr_len++] = type;
    1efe:	7191      	strb	r1, [r2, #6]
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    1f00:	f103 0202 	add.w	r2, r3, #2
		hdr->ext[hdr->hdr_len++] = type;
    1f04:	f103 0301 	add.w	r3, r3, #1
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    1f08:	7142      	strb	r2, [r0, #5]
    1f0a:	fa50 f083 	uxtab	r0, r0, r3
    1f0e:	bfa8      	it	ge
    1f10:	24ff      	movge	r4, #255	; 0xff
    1f12:	7184      	strb	r4, [r0, #6]
    1f14:	bd10      	pop	{r4, pc}
	...

00001f18 <encode_hdr>:
	hdr->flags    = 0;
    1f18:	2300      	movs	r3, #0
{
    1f1a:	b570      	push	{r4, r5, r6, lr}
	hdr->flags    = 0;
    1f1c:	7103      	strb	r3, [r0, #4]
	ts->type = BT_MONITOR_TS32;
    1f1e:	2308      	movs	r3, #8
    1f20:	7183      	strb	r3, [r0, #6]
	hdr->opcode   = sys_cpu_to_le16(opcode);
    1f22:	8041      	strh	r1, [r0, #2]
{
    1f24:	4604      	mov	r4, r0
    1f26:	4616      	mov	r6, r2

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_TIMER_USER_DATA_SET, k_timer_user_data_set, struct k_timer *, timer, void *, user_data);

K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_USER_DATA_GET, k_timer_user_data_get, void *, struct k_timer *, timer);

K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    1f28:	f011 fcaa 	bl	13880 <_impl_k_uptime_get>
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    1f2c:	4d13      	ldr	r5, [pc, #76]	; (1f7c <encode_hdr+0x64>)
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    1f2e:	230a      	movs	r3, #10
    1f30:	4358      	muls	r0, r3
	hdr->hdr_len = sizeof(*ts);
    1f32:	2305      	movs	r3, #5
    1f34:	7163      	strb	r3, [r4, #5]
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    1f36:	f8c4 0007 	str.w	r0, [r4, #7]
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    1f3a:	462a      	mov	r2, r5
    1f3c:	2101      	movs	r1, #1
    1f3e:	4620      	mov	r0, r4
    1f40:	f7ff ffcc 	bl	1edc <encode_drops>
	encode_drops(hdr, BT_MONITOR_EVENT_DROPS, &drops.evt);
    1f44:	1d2a      	adds	r2, r5, #4
    1f46:	2102      	movs	r1, #2
    1f48:	4620      	mov	r0, r4
    1f4a:	f7ff ffc7 	bl	1edc <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_TX_DROPS, &drops.acl_tx);
    1f4e:	f105 0208 	add.w	r2, r5, #8
    1f52:	2104      	movs	r1, #4
    1f54:	4620      	mov	r0, r4
    1f56:	f7ff ffc1 	bl	1edc <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_RX_DROPS, &drops.acl_rx);
    1f5a:	f105 020c 	add.w	r2, r5, #12
    1f5e:	2103      	movs	r1, #3
    1f60:	4620      	mov	r0, r4
    1f62:	f7ff ffbb 	bl	1edc <encode_drops>
	encode_drops(hdr, BT_MONITOR_OTHER_DROPS, &drops.other);
    1f66:	f105 0210 	add.w	r2, r5, #16
    1f6a:	2107      	movs	r1, #7
    1f6c:	4620      	mov	r0, r4
    1f6e:	f7ff ffb5 	bl	1edc <encode_drops>
	hdr->data_len = sys_cpu_to_le16(4 + hdr->hdr_len + len);
    1f72:	7962      	ldrb	r2, [r4, #5]
    1f74:	3604      	adds	r6, #4
    1f76:	4432      	add	r2, r6
    1f78:	8022      	strh	r2, [r4, #0]
    1f7a:	bd70      	pop	{r4, r5, r6, pc}
    1f7c:	2000027c 	.word	0x2000027c

00001f80 <atomic_inc>:
}
    1f80:	f3bf 8f5b 	dmb	ish
    1f84:	e850 3f00 	ldrex	r3, [r0]
    1f88:	1c5a      	adds	r2, r3, #1
    1f8a:	e840 2100 	strex	r1, r2, [r0]
    1f8e:	2900      	cmp	r1, #0
    1f90:	d1f8      	bne.n	1f84 <atomic_inc+0x4>
    1f92:	f3bf 8f5b 	dmb	ish
    1f96:	4618      	mov	r0, r3
    1f98:	4770      	bx	lr
	...

00001f9c <monitor_send>:
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
		uart_poll_out(monitor_dev, *buf++);
    1f9e:	4e06      	ldr	r6, [pc, #24]	; (1fb8 <monitor_send+0x1c>)
    1fa0:	1845      	adds	r5, r0, r1
	const u8_t *buf = data;
    1fa2:	4604      	mov	r4, r0
	while (len--) {
    1fa4:	42ac      	cmp	r4, r5
    1fa6:	d100      	bne.n	1faa <monitor_send+0xe>
}
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(monitor_dev, *buf++);
    1faa:	6830      	ldr	r0, [r6, #0]
    1fac:	f814 1b01 	ldrb.w	r1, [r4], #1
    1fb0:	6843      	ldr	r3, [r0, #4]
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	4798      	blx	r3
    1fb6:	e7f5      	b.n	1fa4 <monitor_send+0x8>
    1fb8:	20000294 	.word	0x20000294

00001fbc <log_out>:
{
    1fbc:	b508      	push	{r3, lr}
	uart_poll_out(monitor_dev, c);
    1fbe:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <log_out+0x14>)
    1fc0:	681b      	ldr	r3, [r3, #0]
    1fc2:	685a      	ldr	r2, [r3, #4]
    1fc4:	b2c1      	uxtb	r1, r0
    1fc6:	6852      	ldr	r2, [r2, #4]
    1fc8:	4618      	mov	r0, r3
    1fca:	4790      	blx	r2
}
    1fcc:	2000      	movs	r0, #0
    1fce:	bd08      	pop	{r3, pc}
    1fd0:	20000294 	.word	0x20000294

00001fd4 <bt_log>:
{
    1fd4:	b40e      	push	{r1, r2, r3}
    1fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fda:	b08b      	sub	sp, #44	; 0x2c
    1fdc:	ac11      	add	r4, sp, #68	; 0x44
	const char id[] = "bt";
    1fde:	4b2f      	ldr	r3, [pc, #188]	; (209c <bt_log+0xc8>)
{
    1fe0:	f854 8b04 	ldr.w	r8, [r4], #4
	const char id[] = "bt";
    1fe4:	881a      	ldrh	r2, [r3, #0]
    1fe6:	789b      	ldrb	r3, [r3, #2]
    1fe8:	f8ad 2008 	strh.w	r2, [sp, #8]
	len = vsnprintk(NULL, 0, fmt, ap);
    1fec:	2100      	movs	r1, #0
	const char id[] = "bt";
    1fee:	f88d 300a 	strb.w	r3, [sp, #10]
	len = vsnprintk(NULL, 0, fmt, ap);
    1ff2:	4642      	mov	r2, r8
{
    1ff4:	4605      	mov	r5, r0
	len = vsnprintk(NULL, 0, fmt, ap);
    1ff6:	4623      	mov	r3, r4
    1ff8:	4608      	mov	r0, r1
	va_start(ap, fmt);
    1ffa:	9403      	str	r4, [sp, #12]
	len = vsnprintk(NULL, 0, fmt, ap);
    1ffc:	f7fe fff0 	bl	fe0 <vsnprintk>
	if (len < 0) {
    2000:	1e02      	subs	r2, r0, #0
    2002:	db17      	blt.n	2034 <bt_log+0x60>
	log.priority = prio;
    2004:	f88d 5004 	strb.w	r5, [sp, #4]
	log.ident_len = sizeof(id);
    2008:	2703      	movs	r7, #3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    200a:	4d25      	ldr	r5, [pc, #148]	; (20a0 <bt_log+0xcc>)
    200c:	f88d 7005 	strb.w	r7, [sp, #5]
    2010:	f3bf 8f5b 	dmb	ish
    2014:	e855 6f00 	ldrex	r6, [r5]
    2018:	f046 0301 	orr.w	r3, r6, #1
    201c:	e845 3100 	strex	r1, r3, [r5]
    2020:	2900      	cmp	r1, #0
    2022:	d1f7      	bne.n	2014 <bt_log+0x40>
    2024:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    2028:	f016 0601 	ands.w	r6, r6, #1
    202c:	d007      	beq.n	203e <bt_log+0x6a>
		atomic_inc(&drops.other);
    202e:	481d      	ldr	r0, [pc, #116]	; (20a4 <bt_log+0xd0>)
    2030:	f7ff ffa6 	bl	1f80 <atomic_inc>
}
    2034:	b00b      	add	sp, #44	; 0x2c
    2036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    203a:	b003      	add	sp, #12
    203c:	4770      	bx	lr
	encode_hdr(&hdr, BT_MONITOR_USER_LOGGING,
    203e:	3206      	adds	r2, #6
    2040:	b292      	uxth	r2, r2
    2042:	210d      	movs	r1, #13
    2044:	a804      	add	r0, sp, #16
    2046:	f7ff ff67 	bl	1f18 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    204a:	f89d 1015 	ldrb.w	r1, [sp, #21]
    204e:	a804      	add	r0, sp, #16
    2050:	3106      	adds	r1, #6
    2052:	f7ff ffa3 	bl	1f9c <monitor_send>
	monitor_send(&log, sizeof(log));
    2056:	2102      	movs	r1, #2
    2058:	a801      	add	r0, sp, #4
    205a:	f7ff ff9f 	bl	1f9c <monitor_send>
	monitor_send(id, sizeof(id));
    205e:	4639      	mov	r1, r7
    2060:	a802      	add	r0, sp, #8
    2062:	f7ff ff9b 	bl	1f9c <monitor_send>
	_vprintk(log_out, NULL, fmt, ap);
    2066:	4623      	mov	r3, r4
    2068:	4642      	mov	r2, r8
    206a:	4631      	mov	r1, r6
    206c:	480e      	ldr	r0, [pc, #56]	; (20a8 <bt_log+0xd4>)
	va_start(ap, fmt);
    206e:	9403      	str	r4, [sp, #12]
	_vprintk(log_out, NULL, fmt, ap);
    2070:	f7fe fe4c 	bl	d0c <_vprintk>
	uart_poll_out(monitor_dev, '\0');
    2074:	4b0d      	ldr	r3, [pc, #52]	; (20ac <bt_log+0xd8>)
    2076:	6818      	ldr	r0, [r3, #0]
    2078:	6843      	ldr	r3, [r0, #4]
    207a:	4631      	mov	r1, r6
    207c:	685b      	ldr	r3, [r3, #4]
    207e:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2080:	f3bf 8f5b 	dmb	ish
    2084:	e855 3f00 	ldrex	r3, [r5]
    2088:	f023 0301 	bic.w	r3, r3, #1
    208c:	e845 3200 	strex	r2, r3, [r5]
    2090:	2a00      	cmp	r2, #0
    2092:	d1f7      	bne.n	2084 <bt_log+0xb0>
    2094:	f3bf 8f5b 	dmb	ish
    2098:	e7cc      	b.n	2034 <bt_log+0x60>
    209a:	bf00      	nop
    209c:	0001487d 	.word	0x0001487d
    20a0:	20000290 	.word	0x20000290
    20a4:	2000028c 	.word	0x2000028c
    20a8:	00001fbd 	.word	0x00001fbd
    20ac:	20000294 	.word	0x20000294

000020b0 <bt_monitor_send>:
{
    20b0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    20b2:	4c21      	ldr	r4, [pc, #132]	; (2138 <bt_monitor_send+0x88>)
    20b4:	f3bf 8f5b 	dmb	ish
    20b8:	b086      	sub	sp, #24
    20ba:	460e      	mov	r6, r1
    20bc:	4615      	mov	r5, r2
    20be:	e854 3f00 	ldrex	r3, [r4]
    20c2:	f043 0201 	orr.w	r2, r3, #1
    20c6:	e844 2100 	strex	r1, r2, [r4]
    20ca:	2900      	cmp	r1, #0
    20cc:	d1f7      	bne.n	20be <bt_monitor_send+0xe>
    20ce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    20d2:	07db      	lsls	r3, r3, #31
    20d4:	d513      	bpl.n	20fe <bt_monitor_send+0x4e>
	switch (opcode) {
    20d6:	3802      	subs	r0, #2
    20d8:	2803      	cmp	r0, #3
    20da:	d80e      	bhi.n	20fa <bt_monitor_send+0x4a>
    20dc:	e8df f000 	tbb	[pc, r0]
    20e0:	0b090702 	.word	0x0b090702
		atomic_inc(&drops.cmd);
    20e4:	4815      	ldr	r0, [pc, #84]	; (213c <bt_monitor_send+0x8c>)
		atomic_inc(&drops.other);
    20e6:	f7ff ff4b 	bl	1f80 <atomic_inc>
}
    20ea:	b006      	add	sp, #24
    20ec:	bd70      	pop	{r4, r5, r6, pc}
		atomic_inc(&drops.evt);
    20ee:	4814      	ldr	r0, [pc, #80]	; (2140 <bt_monitor_send+0x90>)
    20f0:	e7f9      	b.n	20e6 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_tx);
    20f2:	4814      	ldr	r0, [pc, #80]	; (2144 <bt_monitor_send+0x94>)
    20f4:	e7f7      	b.n	20e6 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_rx);
    20f6:	4814      	ldr	r0, [pc, #80]	; (2148 <bt_monitor_send+0x98>)
    20f8:	e7f5      	b.n	20e6 <bt_monitor_send+0x36>
		atomic_inc(&drops.other);
    20fa:	4814      	ldr	r0, [pc, #80]	; (214c <bt_monitor_send+0x9c>)
    20fc:	e7f3      	b.n	20e6 <bt_monitor_send+0x36>
	encode_hdr(&hdr, opcode, len);
    20fe:	b2aa      	uxth	r2, r5
    2100:	4601      	mov	r1, r0
    2102:	4668      	mov	r0, sp
    2104:	f7ff ff08 	bl	1f18 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2108:	f89d 1005 	ldrb.w	r1, [sp, #5]
    210c:	4668      	mov	r0, sp
    210e:	3106      	adds	r1, #6
    2110:	f7ff ff44 	bl	1f9c <monitor_send>
	monitor_send(data, len);
    2114:	4629      	mov	r1, r5
    2116:	4630      	mov	r0, r6
    2118:	f7ff ff40 	bl	1f9c <monitor_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    211c:	f3bf 8f5b 	dmb	ish
    2120:	e854 3f00 	ldrex	r3, [r4]
    2124:	f023 0301 	bic.w	r3, r3, #1
    2128:	e844 3200 	strex	r2, r3, [r4]
    212c:	2a00      	cmp	r2, #0
    212e:	d1f7      	bne.n	2120 <bt_monitor_send+0x70>
    2130:	f3bf 8f5b 	dmb	ish
    2134:	e7d9      	b.n	20ea <bt_monitor_send+0x3a>
    2136:	bf00      	nop
    2138:	20000290 	.word	0x20000290
    213c:	2000027c 	.word	0x2000027c
    2140:	20000280 	.word	0x20000280
    2144:	20000284 	.word	0x20000284
    2148:	20000288 	.word	0x20000288
    214c:	2000028c 	.word	0x2000028c

00002150 <bt_monitor_new_index>:
{
    2150:	b530      	push	{r4, r5, lr}
    2152:	b085      	sub	sp, #20
    2154:	4615      	mov	r5, r2
    2156:	461c      	mov	r4, r3
	pkt.type = type;
    2158:	f88d 0000 	strb.w	r0, [sp]
	pkt.bus = bus;
    215c:	f88d 1001 	strb.w	r1, [sp, #1]
	memcpy(pkt.bdaddr, addr, 6);
    2160:	2206      	movs	r2, #6
    2162:	4629      	mov	r1, r5
    2164:	f10d 0002 	add.w	r0, sp, #2
    2168:	f7ff fd6d 	bl	1c46 <memcpy>
	strncpy(pkt.name, name, sizeof(pkt.name) - 1);
    216c:	4621      	mov	r1, r4
    216e:	2207      	movs	r2, #7
    2170:	a802      	add	r0, sp, #8
    2172:	f7ff fd2d 	bl	1bd0 <strncpy>
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    2176:	2000      	movs	r0, #0
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2178:	2210      	movs	r2, #16
    217a:	4669      	mov	r1, sp
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    217c:	f88d 000f 	strb.w	r0, [sp, #15]
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2180:	f7ff ff96 	bl	20b0 <bt_monitor_send>
}
    2184:	b005      	add	sp, #20
    2186:	bd30      	pop	{r4, r5, pc}

00002188 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2188:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    218a:	7802      	ldrb	r2, [r0, #0]
    218c:	2a01      	cmp	r2, #1
{
    218e:	4604      	mov	r4, r0
    2190:	460b      	mov	r3, r1
	switch (src->type) {
    2192:	d017      	beq.n	21c4 <uuid_to_uuid128+0x3c>
    2194:	d303      	bcc.n	219e <uuid_to_uuid128+0x16>
    2196:	2a02      	cmp	r2, #2
    2198:	d02c      	beq.n	21f4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    219a:	bcf0      	pop	{r4, r5, r6, r7}
    219c:	4770      	bx	lr
		*dst = uuid128_base;
    219e:	4a18      	ldr	r2, [pc, #96]	; (2200 <uuid_to_uuid128+0x78>)
    21a0:	460d      	mov	r5, r1
    21a2:	f102 0710 	add.w	r7, r2, #16
    21a6:	6810      	ldr	r0, [r2, #0]
    21a8:	6851      	ldr	r1, [r2, #4]
    21aa:	462e      	mov	r6, r5
    21ac:	c603      	stmia	r6!, {r0, r1}
    21ae:	3208      	adds	r2, #8
    21b0:	42ba      	cmp	r2, r7
    21b2:	4635      	mov	r5, r6
    21b4:	d1f7      	bne.n	21a6 <uuid_to_uuid128+0x1e>
    21b6:	7812      	ldrb	r2, [r2, #0]
    21b8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    21ba:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    21bc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    21be:	0a12      	lsrs	r2, r2, #8
    21c0:	739a      	strb	r2, [r3, #14]
    21c2:	e7ea      	b.n	219a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    21c4:	4a0e      	ldr	r2, [pc, #56]	; (2200 <uuid_to_uuid128+0x78>)
    21c6:	460d      	mov	r5, r1
    21c8:	f102 0710 	add.w	r7, r2, #16
    21cc:	6810      	ldr	r0, [r2, #0]
    21ce:	6851      	ldr	r1, [r2, #4]
    21d0:	462e      	mov	r6, r5
    21d2:	c603      	stmia	r6!, {r0, r1}
    21d4:	3208      	adds	r2, #8
    21d6:	42ba      	cmp	r2, r7
    21d8:	4635      	mov	r5, r6
    21da:	d1f7      	bne.n	21cc <uuid_to_uuid128+0x44>
    21dc:	7812      	ldrb	r2, [r2, #0]
    21de:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    21e0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    21e2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    21e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    21e8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    21ea:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    21ec:	0a12      	lsrs	r2, r2, #8
    21ee:	7399      	strb	r1, [r3, #14]
    21f0:	741a      	strb	r2, [r3, #16]
    21f2:	e7d2      	b.n	219a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    21f4:	4601      	mov	r1, r0
    21f6:	2211      	movs	r2, #17
    21f8:	4618      	mov	r0, r3
}
    21fa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    21fc:	f7ff bd23 	b.w	1c46 <memcpy>
    2200:	00014880 	.word	0x00014880

00002204 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    2204:	b510      	push	{r4, lr}
    2206:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2208:	7801      	ldrb	r1, [r0, #0]
    220a:	7822      	ldrb	r2, [r4, #0]
    220c:	428a      	cmp	r2, r1
{
    220e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    2210:	d00e      	beq.n	2230 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    2212:	4669      	mov	r1, sp
    2214:	f7ff ffb8 	bl	2188 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2218:	a905      	add	r1, sp, #20
    221a:	4620      	mov	r0, r4
    221c:	f7ff ffb4 	bl	2188 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    2220:	2210      	movs	r2, #16
    2222:	f10d 0115 	add.w	r1, sp, #21
    2226:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    222a:	f7ff fcf7 	bl	1c1c <memcmp>
    222e:	e00a      	b.n	2246 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    2230:	2a01      	cmp	r2, #1
    2232:	d00a      	beq.n	224a <bt_uuid_cmp+0x46>
    2234:	d304      	bcc.n	2240 <bt_uuid_cmp+0x3c>
    2236:	2a02      	cmp	r2, #2
    2238:	d00a      	beq.n	2250 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    223a:	f06f 0015 	mvn.w	r0, #21
    223e:	e002      	b.n	2246 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    2240:	8840      	ldrh	r0, [r0, #2]
    2242:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2244:	1ac0      	subs	r0, r0, r3
}
    2246:	b00a      	add	sp, #40	; 0x28
    2248:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    224a:	6840      	ldr	r0, [r0, #4]
    224c:	6863      	ldr	r3, [r4, #4]
    224e:	e7f9      	b.n	2244 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2250:	2210      	movs	r2, #16
    2252:	1c61      	adds	r1, r4, #1
    2254:	3001      	adds	r0, #1
    2256:	e7e8      	b.n	222a <bt_uuid_cmp+0x26>

00002258 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    2258:	4770      	bx	lr
	...

0000225c <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    225c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    225e:	4d0b      	ldr	r5, [pc, #44]	; (228c <ver_str+0x30>)
{
    2260:	4606      	mov	r6, r0
	const char * const str[] = {
    2262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2264:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    2266:	466c      	mov	r4, sp
    2268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    226e:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2272:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2274:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2278:	bf9b      	ittet	ls
    227a:	ab0a      	addls	r3, sp, #40	; 0x28
    227c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2280:	4803      	ldrhi	r0, [pc, #12]	; (2290 <ver_str+0x34>)
		return str[ver];
    2282:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    2286:	b00a      	add	sp, #40	; 0x28
    2288:	bd70      	pop	{r4, r5, r6, pc}
    228a:	bf00      	nop
    228c:	00014264 	.word	0x00014264
    2290:	000157a0 	.word	0x000157a0

00002294 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2294:	2207      	movs	r2, #7
    2296:	f7ff bcd6 	b.w	1c46 <memcpy>

0000229a <atomic_or>:
{
    229a:	b500      	push	{lr}
}
    229c:	f3bf 8f5b 	dmb	ish
    22a0:	e850 3f00 	ldrex	r3, [r0]
    22a4:	ea43 0201 	orr.w	r2, r3, r1
    22a8:	e840 2e00 	strex	lr, r2, [r0]
    22ac:	f1be 0f00 	cmp.w	lr, #0
    22b0:	d1f6      	bne.n	22a0 <atomic_or+0x6>
    22b2:	f3bf 8f5b 	dmb	ish
    22b6:	4618      	mov	r0, r3
    22b8:	f85d fb04 	ldr.w	pc, [sp], #4

000022bc <atomic_and>:
{
    22bc:	b500      	push	{lr}
}
    22be:	f3bf 8f5b 	dmb	ish
    22c2:	e850 3f00 	ldrex	r3, [r0]
    22c6:	ea03 0201 	and.w	r2, r3, r1
    22ca:	e840 2e00 	strex	lr, r2, [r0]
    22ce:	f1be 0f00 	cmp.w	lr, #0
    22d2:	d1f6      	bne.n	22c2 <atomic_and+0x6>
    22d4:	f3bf 8f5b 	dmb	ish
    22d8:	4618      	mov	r0, r3
    22da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000022e0 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    22e0:	78c3      	ldrb	r3, [r0, #3]
    22e2:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    22e4:	f241 3288 	movw	r2, #5000	; 0x1388
    22e8:	f100 0170 	add.w	r1, r0, #112	; 0x70
    22ec:	bf08      	it	eq
    22ee:	2200      	moveq	r2, #0
    22f0:	4801      	ldr	r0, [pc, #4]	; (22f8 <update_conn_param+0x18>)
    22f2:	f011 bdc3 	b.w	13e7c <k_delayed_work_submit_to_queue>
    22f6:	bf00      	nop
    22f8:	200019b0 	.word	0x200019b0

000022fc <hci_cmd_done>:
{
    22fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2300:	4615      	mov	r5, r2
    2302:	460f      	mov	r7, r1
    2304:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2306:	f011 fa4f 	bl	137a8 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    230a:	4a27      	ldr	r2, [pc, #156]	; (23a8 <hci_cmd_done+0xac>)
    230c:	4927      	ldr	r1, [pc, #156]	; (23ac <hci_cmd_done+0xb0>)
    230e:	9502      	str	r5, [sp, #8]
    2310:	4603      	mov	r3, r0
    2312:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2316:	2007      	movs	r0, #7
    2318:	f7ff fe5c 	bl	1fd4 <bt_log>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    231c:	79a8      	ldrb	r0, [r5, #6]
    231e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23bc <hci_cmd_done+0xc0>
    2322:	f010 f8f5 	bl	12510 <net_buf_pool_get>
    2326:	4580      	cmp	r8, r0
    2328:	d010      	beq.n	234c <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    232a:	79ac      	ldrb	r4, [r5, #6]
    232c:	4620      	mov	r0, r4
    232e:	f010 f8ef 	bl	12510 <net_buf_pool_get>
    2332:	f8cd 8008 	str.w	r8, [sp, #8]
    2336:	9001      	str	r0, [sp, #4]
    2338:	9400      	str	r4, [sp, #0]
    233a:	4633      	mov	r3, r6
    233c:	4a1a      	ldr	r2, [pc, #104]	; (23a8 <hci_cmd_done+0xac>)
    233e:	491c      	ldr	r1, [pc, #112]	; (23b0 <hci_cmd_done+0xb4>)
    2340:	2004      	movs	r0, #4
    2342:	f7ff fe47 	bl	1fd4 <bt_log>
}
    2346:	b004      	add	sp, #16
    2348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    234c:	4628      	mov	r0, r5
    234e:	f010 f8e5 	bl	1251c <net_buf_id>
    2352:	4c18      	ldr	r4, [pc, #96]	; (23b4 <hci_cmd_done+0xb8>)
    2354:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2358:	8843      	ldrh	r3, [r0, #2]
    235a:	42b3      	cmp	r3, r6
    235c:	d00c      	beq.n	2378 <hci_cmd_done+0x7c>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    235e:	4628      	mov	r0, r5
    2360:	f010 f8dc 	bl	1251c <net_buf_id>
    2364:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2368:	4a0f      	ldr	r2, [pc, #60]	; (23a8 <hci_cmd_done+0xac>)
    236a:	8843      	ldrh	r3, [r0, #2]
    236c:	9300      	str	r3, [sp, #0]
    236e:	4912      	ldr	r1, [pc, #72]	; (23b8 <hci_cmd_done+0xbc>)
    2370:	4633      	mov	r3, r6
    2372:	2004      	movs	r0, #4
    2374:	f7ff fe2e 	bl	1fd4 <bt_log>
	if (cmd(buf)->sync) {
    2378:	4628      	mov	r0, r5
    237a:	f010 f8cf 	bl	1251c <net_buf_id>
    237e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2382:	6843      	ldr	r3, [r0, #4]
    2384:	2b00      	cmp	r3, #0
    2386:	d0de      	beq.n	2346 <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    2388:	4628      	mov	r0, r5
    238a:	f010 f8c7 	bl	1251c <net_buf_id>
    238e:	f804 7030 	strb.w	r7, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2392:	4628      	mov	r0, r5
    2394:	f010 f8c2 	bl	1251c <net_buf_id>
    2398:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    239c:	6840      	ldr	r0, [r0, #4]
}
    239e:	b004      	add	sp, #16
    23a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    23a4:	f011 ba0f 	b.w	137c6 <_impl_k_sem_give>
    23a8:	000149e5 	.word	0x000149e5
    23ac:	00015441 	.word	0x00015441
    23b0:	0001546d 	.word	0x0001546d
    23b4:	20000298 	.word	0x20000298
    23b8:	000154a6 	.word	0x000154a6
    23bc:	20003fa0 	.word	0x20003fa0

000023c0 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    23c0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    23c2:	f3bf 8f5b 	dmb	ish
    23c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    23ca:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    23ce:	f001 011f 	and.w	r1, r1, #31
    23d2:	4108      	asrs	r0, r1
}
    23d4:	f000 0001 	and.w	r0, r0, #1
    23d8:	4770      	bx	lr
	...

000023dc <bt_hci_cmd_create>:
{
    23dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    23e0:	4606      	mov	r6, r0
    23e2:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    23e4:	f011 f9e0 	bl	137a8 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    23e8:	4d1c      	ldr	r5, [pc, #112]	; (245c <bt_hci_cmd_create+0x80>)
    23ea:	491d      	ldr	r1, [pc, #116]	; (2460 <bt_hci_cmd_create+0x84>)
    23ec:	4603      	mov	r3, r0
    23ee:	462a      	mov	r2, r5
    23f0:	e88d 00c0 	stmia.w	sp, {r6, r7}
    23f4:	2007      	movs	r0, #7
    23f6:	f7ff fded 	bl	1fd4 <bt_log>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    23fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    23fe:	4819      	ldr	r0, [pc, #100]	; (2464 <bt_hci_cmd_create+0x88>)
    2400:	f010 f91a 	bl	12638 <net_buf_alloc_fixed>
    2404:	4604      	mov	r4, r0
    2406:	f011 f9cf 	bl	137a8 <_impl_k_current_get>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    240a:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    240e:	4603      	mov	r3, r0
    2410:	462a      	mov	r2, r5
    2412:	9400      	str	r4, [sp, #0]
    2414:	4914      	ldr	r1, [pc, #80]	; (2468 <bt_hci_cmd_create+0x8c>)
	cmd(buf)->opcode = opcode;
    2416:	4d15      	ldr	r5, [pc, #84]	; (246c <bt_hci_cmd_create+0x90>)
	BT_DBG("buf %p", buf);
    2418:	2007      	movs	r0, #7
    241a:	f7ff fddb 	bl	1fd4 <bt_log>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    241e:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2422:	2100      	movs	r1, #0
    2424:	4640      	mov	r0, r8
    2426:	f010 f926 	bl	12676 <net_buf_simple_reserve>
    242a:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    242e:	4620      	mov	r0, r4
    2430:	f010 f874 	bl	1251c <net_buf_id>
    2434:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2438:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    243a:	4620      	mov	r0, r4
    243c:	f010 f86e 	bl	1251c <net_buf_id>
    2440:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2444:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2446:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    244a:	4640      	mov	r0, r8
    244c:	f010 f956 	bl	126fc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    2450:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    2452:	7087      	strb	r7, [r0, #2]
}
    2454:	4620      	mov	r0, r4
    2456:	b002      	add	sp, #8
    2458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    245c:	00014895 	.word	0x00014895
    2460:	00014c93 	.word	0x00014c93
    2464:	20003fa0 	.word	0x20003fa0
    2468:	00014cb7 	.word	0x00014cb7
    246c:	20000298 	.word	0x20000298

00002470 <bt_hci_cmd_send_sync>:
{
    2470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2474:	4680      	mov	r8, r0
    2476:	b08a      	sub	sp, #40	; 0x28
    2478:	4615      	mov	r5, r2
	if (!buf) {
    247a:	460c      	mov	r4, r1
    247c:	b921      	cbnz	r1, 2488 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    247e:	f7ff ffad 	bl	23dc <bt_hci_cmd_create>
		if (!buf) {
    2482:	4604      	mov	r4, r0
    2484:	2800      	cmp	r0, #0
    2486:	d04b      	beq.n	2520 <bt_hci_cmd_send_sync+0xb0>
    2488:	f011 f98e 	bl	137a8 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    248c:	89a3      	ldrh	r3, [r4, #12]
    248e:	9302      	str	r3, [sp, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2490:	af04      	add	r7, sp, #16
    2492:	4603      	mov	r3, r0
    2494:	4a24      	ldr	r2, [pc, #144]	; (2528 <bt_hci_cmd_send_sync+0xb8>)
    2496:	4925      	ldr	r1, [pc, #148]	; (252c <bt_hci_cmd_send_sync+0xbc>)
	cmd(buf)->sync = &sync_sem;
    2498:	4e25      	ldr	r6, [pc, #148]	; (2530 <bt_hci_cmd_send_sync+0xc0>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    249a:	2007      	movs	r0, #7
    249c:	e88d 0110 	stmia.w	sp, {r4, r8}
    24a0:	f7ff fd98 	bl	1fd4 <bt_log>
    24a4:	2201      	movs	r2, #1
    24a6:	2100      	movs	r1, #0
    24a8:	4638      	mov	r0, r7
    24aa:	f011 f983 	bl	137b4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    24ae:	4620      	mov	r0, r4
    24b0:	f010 f834 	bl	1251c <net_buf_id>
    24b4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    24b8:	6047      	str	r7, [r0, #4]
	net_buf_ref(buf);
    24ba:	4620      	mov	r0, r4
    24bc:	f010 f91a 	bl	126f4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    24c0:	4621      	mov	r1, r4
    24c2:	481c      	ldr	r0, [pc, #112]	; (2534 <bt_hci_cmd_send_sync+0xc4>)
    24c4:	f010 f8db 	bl	1267e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    24c8:	f242 7110 	movw	r1, #10000	; 0x2710
    24cc:	4638      	mov	r0, r7
    24ce:	f011 f9a2 	bl	13816 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    24d2:	f011 f969 	bl	137a8 <_impl_k_current_get>
    24d6:	4607      	mov	r7, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    24d8:	4620      	mov	r0, r4
    24da:	f010 f81f 	bl	1251c <net_buf_id>
    24de:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    24e2:	9301      	str	r3, [sp, #4]
    24e4:	4a10      	ldr	r2, [pc, #64]	; (2528 <bt_hci_cmd_send_sync+0xb8>)
    24e6:	4914      	ldr	r1, [pc, #80]	; (2538 <bt_hci_cmd_send_sync+0xc8>)
    24e8:	f8cd 8000 	str.w	r8, [sp]
    24ec:	463b      	mov	r3, r7
    24ee:	2007      	movs	r0, #7
    24f0:	f7ff fd70 	bl	1fd4 <bt_log>
	if (cmd(buf)->status) {
    24f4:	4620      	mov	r0, r4
    24f6:	f010 f811 	bl	1251c <net_buf_id>
    24fa:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    24fe:	b138      	cbz	r0, 2510 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    2500:	4620      	mov	r0, r4
    2502:	f010 f8c9 	bl	12698 <net_buf_unref>
		err = -EIO;
    2506:	f06f 0004 	mvn.w	r0, #4
}
    250a:	b00a      	add	sp, #40	; 0x28
    250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rsp) {
    2510:	b10d      	cbz	r5, 2516 <bt_hci_cmd_send_sync+0xa6>
			*rsp = buf;
    2512:	602c      	str	r4, [r5, #0]
    2514:	e7f9      	b.n	250a <bt_hci_cmd_send_sync+0x9a>
			net_buf_unref(buf);
    2516:	4620      	mov	r0, r4
    2518:	f010 f8be 	bl	12698 <net_buf_unref>
		err = 0;
    251c:	4628      	mov	r0, r5
    251e:	e7f4      	b.n	250a <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
    2520:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2524:	e7f1      	b.n	250a <bt_hci_cmd_send_sync+0x9a>
    2526:	bf00      	nop
    2528:	000148b7 	.word	0x000148b7
    252c:	00014d0b 	.word	0x00014d0b
    2530:	20000298 	.word	0x20000298
    2534:	20003b4c 	.word	0x20003b4c
    2538:	00014d30 	.word	0x00014d30

0000253c <set_le_scan_enable>:
{
    253c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    253e:	2102      	movs	r1, #2
{
    2540:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2542:	f242 000c 	movw	r0, #8204	; 0x200c
    2546:	f7ff ff49 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    254a:	4604      	mov	r4, r0
    254c:	b330      	cbz	r0, 259c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    254e:	2102      	movs	r1, #2
    2550:	3008      	adds	r0, #8
    2552:	f010 f8d3 	bl	126fc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2556:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2558:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    255a:	d116      	bne.n	258a <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    255c:	210b      	movs	r1, #11
    255e:	4811      	ldr	r0, [pc, #68]	; (25a4 <set_le_scan_enable+0x68>)
    2560:	f7ff ff2e 	bl	23c0 <atomic_test_bit>
    2564:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2566:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2568:	4621      	mov	r1, r4
    256a:	2200      	movs	r2, #0
    256c:	f242 000c 	movw	r0, #8204	; 0x200c
    2570:	f7ff ff7e 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2574:	4604      	mov	r4, r0
    2576:	b930      	cbnz	r0, 2586 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2578:	2d01      	cmp	r5, #1
    257a:	d109      	bne.n	2590 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    257c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2580:	4808      	ldr	r0, [pc, #32]	; (25a4 <set_le_scan_enable+0x68>)
    2582:	f7ff fe8a 	bl	229a <atomic_or>
}
    2586:	4620      	mov	r0, r4
    2588:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    258a:	2300      	movs	r3, #0
    258c:	7043      	strb	r3, [r0, #1]
    258e:	e7ea      	b.n	2566 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2590:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2594:	4803      	ldr	r0, [pc, #12]	; (25a4 <set_le_scan_enable+0x68>)
    2596:	f7ff fe91 	bl	22bc <atomic_and>
    259a:	e7f4      	b.n	2586 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    259c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    25a0:	e7f1      	b.n	2586 <set_le_scan_enable+0x4a>
    25a2:	bf00      	nop
    25a4:	20003af8 	.word	0x20003af8

000025a8 <set_random_address>:
{
    25a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    25aa:	4605      	mov	r5, r0
    25ac:	f011 f8fc 	bl	137a8 <_impl_k_current_get>
    25b0:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    25b2:	4628      	mov	r0, r5
    25b4:	f7ff fbcc 	bl	1d50 <bt_addr_str>
	return memcmp(a, b, sizeof(*a));
    25b8:	4e18      	ldr	r6, [pc, #96]	; (261c <set_random_address+0x74>)
    25ba:	9000      	str	r0, [sp, #0]
    25bc:	4623      	mov	r3, r4
    25be:	4a18      	ldr	r2, [pc, #96]	; (2620 <set_random_address+0x78>)
    25c0:	4918      	ldr	r1, [pc, #96]	; (2624 <set_random_address+0x7c>)
    25c2:	2007      	movs	r0, #7
    25c4:	f7ff fd06 	bl	1fd4 <bt_log>
    25c8:	2206      	movs	r2, #6
    25ca:	f106 0108 	add.w	r1, r6, #8
    25ce:	4628      	mov	r0, r5
    25d0:	f7ff fb24 	bl	1c1c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    25d4:	4604      	mov	r4, r0
    25d6:	b1d8      	cbz	r0, 2610 <set_random_address+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    25d8:	2106      	movs	r1, #6
    25da:	f242 0005 	movw	r0, #8197	; 0x2005
    25de:	f7ff fefd 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    25e2:	4604      	mov	r4, r0
    25e4:	b1b8      	cbz	r0, 2616 <set_random_address+0x6e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    25e6:	2206      	movs	r2, #6
    25e8:	4629      	mov	r1, r5
    25ea:	3008      	adds	r0, #8
    25ec:	f010 f88c 	bl	12708 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    25f0:	4621      	mov	r1, r4
    25f2:	2200      	movs	r2, #0
    25f4:	f242 0005 	movw	r0, #8197	; 0x2005
    25f8:	f7ff ff3a 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    25fc:	4604      	mov	r4, r0
    25fe:	b938      	cbnz	r0, 2610 <set_random_address+0x68>
	memcpy(dst, src, sizeof(*dst));
    2600:	2206      	movs	r2, #6
    2602:	4629      	mov	r1, r5
    2604:	f106 0008 	add.w	r0, r6, #8
    2608:	f7ff fb1d 	bl	1c46 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    260c:	2301      	movs	r3, #1
    260e:	71f3      	strb	r3, [r6, #7]
}
    2610:	4620      	mov	r0, r4
    2612:	b002      	add	sp, #8
    2614:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2616:	f06f 0436 	mvn.w	r4, #54	; 0x36
    261a:	e7f9      	b.n	2610 <set_random_address+0x68>
    261c:	20003a88 	.word	0x20003a88
    2620:	000148cc 	.word	0x000148cc
    2624:	000156b4 	.word	0x000156b4

00002628 <set_advertise_enable>:
{
    2628:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    262a:	2101      	movs	r1, #1
{
    262c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    262e:	f242 000a 	movw	r0, #8202	; 0x200a
    2632:	f7ff fed3 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    2636:	4604      	mov	r4, r0
    2638:	b1d8      	cbz	r0, 2672 <set_advertise_enable+0x4a>
    263a:	3008      	adds	r0, #8
	if (enable) {
    263c:	b18d      	cbz	r5, 2662 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    263e:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2640:	f010 f86b 	bl	1271a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2644:	4621      	mov	r1, r4
    2646:	2200      	movs	r2, #0
    2648:	f242 000a 	movw	r0, #8202	; 0x200a
    264c:	f7ff ff10 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2650:	4604      	mov	r4, r0
    2652:	b920      	cbnz	r0, 265e <set_advertise_enable+0x36>
	if (enable) {
    2654:	b13d      	cbz	r5, 2666 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2656:	2140      	movs	r1, #64	; 0x40
    2658:	4807      	ldr	r0, [pc, #28]	; (2678 <set_advertise_enable+0x50>)
    265a:	f7ff fe1e 	bl	229a <atomic_or>
}
    265e:	4620      	mov	r0, r4
    2660:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2662:	4629      	mov	r1, r5
    2664:	e7ec      	b.n	2640 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2666:	f06f 0140 	mvn.w	r1, #64	; 0x40
    266a:	4803      	ldr	r0, [pc, #12]	; (2678 <set_advertise_enable+0x50>)
    266c:	f7ff fe26 	bl	22bc <atomic_and>
    2670:	e7f5      	b.n	265e <set_advertise_enable+0x36>
		return -ENOBUFS;
    2672:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2676:	e7f2      	b.n	265e <set_advertise_enable+0x36>
    2678:	20003af8 	.word	0x20003af8

0000267c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    267c:	8802      	ldrh	r2, [r0, #0]
    267e:	8843      	ldrh	r3, [r0, #2]
    2680:	429a      	cmp	r2, r3
{
    2682:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2684:	d818      	bhi.n	26b8 <bt_le_conn_params_valid+0x3c>
    2686:	2a05      	cmp	r2, #5
    2688:	d916      	bls.n	26b8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    268a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    268e:	d813      	bhi.n	26b8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2690:	8884      	ldrh	r4, [r0, #4]
    2692:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2696:	d20f      	bcs.n	26b8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2698:	88c1      	ldrh	r1, [r0, #6]
    269a:	f1a1 020a 	sub.w	r2, r1, #10
    269e:	b292      	uxth	r2, r2
    26a0:	f640 4076 	movw	r0, #3190	; 0xc76
    26a4:	4282      	cmp	r2, r0
    26a6:	d807      	bhi.n	26b8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    26a8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    26ac:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    26b0:	bfb4      	ite	lt
    26b2:	2001      	movlt	r0, #1
    26b4:	2000      	movge	r0, #0
    26b6:	bd10      	pop	{r4, pc}
		return false;
    26b8:	2000      	movs	r0, #0
}
    26ba:	bd10      	pop	{r4, pc}

000026bc <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    26bc:	2301      	movs	r3, #1
{
    26be:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    26c0:	2106      	movs	r1, #6
{
    26c2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    26c4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    26c8:	f005 fe14 	bl	82f4 <bt_rand>
	if (err) {
    26cc:	b918      	cbnz	r0, 26d6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    26ce:	79a3      	ldrb	r3, [r4, #6]
    26d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    26d4:	71a3      	strb	r3, [r4, #6]
}
    26d6:	bd10      	pop	{r4, pc}

000026d8 <bt_set_static_addr>:
{
    26d8:	b538      	push	{r3, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    26da:	4c0f      	ldr	r4, [pc, #60]	; (2718 <bt_set_static_addr+0x40>)
    26dc:	7823      	ldrb	r3, [r4, #0]
    26de:	2b01      	cmp	r3, #1
    26e0:	d104      	bne.n	26ec <bt_set_static_addr+0x14>
    26e2:	79a3      	ldrb	r3, [r4, #6]
    26e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    26e8:	2bc0      	cmp	r3, #192	; 0xc0
    26ea:	d008      	beq.n	26fe <bt_set_static_addr+0x26>
		BT_ERR("Only static random address supported as identity");
    26ec:	4a0b      	ldr	r2, [pc, #44]	; (271c <bt_set_static_addr+0x44>)
    26ee:	490c      	ldr	r1, [pc, #48]	; (2720 <bt_set_static_addr+0x48>)
    26f0:	2003      	movs	r0, #3
    26f2:	f7ff fc6f 	bl	1fd4 <bt_log>
    26f6:	f06f 0515 	mvn.w	r5, #21
}
    26fa:	4628      	mov	r0, r5
    26fc:	bd38      	pop	{r3, r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    26fe:	1c60      	adds	r0, r4, #1
    2700:	f7ff ff52 	bl	25a8 <set_random_address>
	if (err) {
    2704:	4605      	mov	r5, r0
    2706:	2800      	cmp	r0, #0
    2708:	d1f7      	bne.n	26fa <bt_set_static_addr+0x22>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    270a:	2104      	movs	r1, #4
    270c:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2710:	f7ff fdc3 	bl	229a <atomic_or>
	return 0;
    2714:	e7f1      	b.n	26fa <bt_set_static_addr+0x22>
    2716:	bf00      	nop
    2718:	20003a88 	.word	0x20003a88
    271c:	00014b43 	.word	0x00014b43
    2720:	0001540c 	.word	0x0001540c

00002724 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2724:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2726:	4c12      	ldr	r4, [pc, #72]	; (2770 <bt_dev_show_info+0x4c>)
    2728:	4620      	mov	r0, r4
    272a:	f7ff fb37 	bl	1d9c <bt_addr_le_str>
    272e:	4911      	ldr	r1, [pc, #68]	; (2774 <bt_dev_show_info+0x50>)
    2730:	4602      	mov	r2, r0
    2732:	2006      	movs	r0, #6
    2734:	f7ff fc4e 	bl	1fd4 <bt_log>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2738:	7ba5      	ldrb	r5, [r4, #14]
    273a:	4628      	mov	r0, r5
    273c:	f7ff fd8e 	bl	225c <ver_str>
    2740:	8aa3      	ldrh	r3, [r4, #20]
    2742:	9301      	str	r3, [sp, #4]
    2744:	8a23      	ldrh	r3, [r4, #16]
    2746:	9300      	str	r3, [sp, #0]
    2748:	4602      	mov	r2, r0
    274a:	462b      	mov	r3, r5
    274c:	490a      	ldr	r1, [pc, #40]	; (2778 <bt_dev_show_info+0x54>)
    274e:	2006      	movs	r0, #6
    2750:	f7ff fc40 	bl	1fd4 <bt_log>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2754:	7be5      	ldrb	r5, [r4, #15]
    2756:	4628      	mov	r0, r5
    2758:	f7ff fd80 	bl	225c <ver_str>
    275c:	8a63      	ldrh	r3, [r4, #18]
    275e:	9300      	str	r3, [sp, #0]
    2760:	4602      	mov	r2, r0
    2762:	462b      	mov	r3, r5
    2764:	4905      	ldr	r1, [pc, #20]	; (277c <bt_dev_show_info+0x58>)
    2766:	2006      	movs	r0, #6
    2768:	f7ff fc34 	bl	1fd4 <bt_log>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    276c:	b003      	add	sp, #12
    276e:	bd30      	pop	{r4, r5, pc}
    2770:	20003a88 	.word	0x20003a88
    2774:	00014be4 	.word	0x00014be4
    2778:	00014bf1 	.word	0x00014bf1
    277c:	00014c2f 	.word	0x00014c2f

00002780 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2782:	4604      	mov	r4, r0
    2784:	f011 f810 	bl	137a8 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2788:	7d23      	ldrb	r3, [r4, #20]
    278a:	9302      	str	r3, [sp, #8]
    278c:	89a3      	ldrh	r3, [r4, #12]
    278e:	4a0d      	ldr	r2, [pc, #52]	; (27c4 <bt_send+0x44>)
    2790:	9301      	str	r3, [sp, #4]
    2792:	9400      	str	r4, [sp, #0]
    2794:	4603      	mov	r3, r0
    2796:	490c      	ldr	r1, [pc, #48]	; (27c8 <bt_send+0x48>)
    2798:	2007      	movs	r0, #7
    279a:	f7ff fc1b 	bl	1fd4 <bt_log>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    279e:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    27a0:	68a1      	ldr	r1, [r4, #8]
    27a2:	2b03      	cmp	r3, #3
    27a4:	bf96      	itet	ls
    27a6:	4a09      	ldrls	r2, [pc, #36]	; (27cc <bt_send+0x4c>)
    27a8:	20ff      	movhi	r0, #255	; 0xff
    27aa:	5cd0      	ldrbls	r0, [r2, r3]
    27ac:	89a2      	ldrh	r2, [r4, #12]
    27ae:	f7ff fc7f 	bl	20b0 <bt_monitor_send>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    27b2:	4b07      	ldr	r3, [pc, #28]	; (27d0 <bt_send+0x50>)
    27b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    27b8:	691b      	ldr	r3, [r3, #16]
    27ba:	4620      	mov	r0, r4
}
    27bc:	b004      	add	sp, #16
    27be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    27c2:	4718      	bx	r3
    27c4:	00014b79 	.word	0x00014b79
    27c8:	000153ed 	.word	0x000153ed
    27cc:	00014891 	.word	0x00014891
    27d0:	20003a88 	.word	0x20003a88

000027d4 <bt_hci_cmd_send>:
{
    27d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    27d6:	4605      	mov	r5, r0
	if (!buf) {
    27d8:	460c      	mov	r4, r1
    27da:	b919      	cbnz	r1, 27e4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    27dc:	f7ff fdfe 	bl	23dc <bt_hci_cmd_create>
		if (!buf) {
    27e0:	4604      	mov	r4, r0
    27e2:	b328      	cbz	r0, 2830 <bt_hci_cmd_send+0x5c>
    27e4:	f010 ffe0 	bl	137a8 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    27e8:	89a3      	ldrh	r3, [r4, #12]
    27ea:	9301      	str	r3, [sp, #4]
    27ec:	9500      	str	r5, [sp, #0]
    27ee:	4603      	mov	r3, r0
    27f0:	4a11      	ldr	r2, [pc, #68]	; (2838 <bt_hci_cmd_send+0x64>)
    27f2:	4912      	ldr	r1, [pc, #72]	; (283c <bt_hci_cmd_send+0x68>)
    27f4:	2007      	movs	r0, #7
    27f6:	f7ff fbed 	bl	1fd4 <bt_log>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    27fa:	f640 4335 	movw	r3, #3125	; 0xc35
    27fe:	429d      	cmp	r5, r3
    2800:	d110      	bne.n	2824 <bt_hci_cmd_send+0x50>
		err = bt_send(buf);
    2802:	4620      	mov	r0, r4
    2804:	f7ff ffbc 	bl	2780 <bt_send>
		if (err) {
    2808:	4605      	mov	r5, r0
    280a:	b140      	cbz	r0, 281e <bt_hci_cmd_send+0x4a>
			BT_ERR("Unable to send to driver (err %d)", err);
    280c:	4603      	mov	r3, r0
    280e:	4a0a      	ldr	r2, [pc, #40]	; (2838 <bt_hci_cmd_send+0x64>)
    2810:	490b      	ldr	r1, [pc, #44]	; (2840 <bt_hci_cmd_send+0x6c>)
    2812:	2003      	movs	r0, #3
    2814:	f7ff fbde 	bl	1fd4 <bt_log>
			net_buf_unref(buf);
    2818:	4620      	mov	r0, r4
    281a:	f00f ff3d 	bl	12698 <net_buf_unref>
}
    281e:	4628      	mov	r0, r5
    2820:	b003      	add	sp, #12
    2822:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2824:	4621      	mov	r1, r4
    2826:	4807      	ldr	r0, [pc, #28]	; (2844 <bt_hci_cmd_send+0x70>)
    2828:	f00f ff29 	bl	1267e <net_buf_put>
	return 0;
    282c:	2500      	movs	r5, #0
    282e:	e7f6      	b.n	281e <bt_hci_cmd_send+0x4a>
			return -ENOBUFS;
    2830:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2834:	e7f3      	b.n	281e <bt_hci_cmd_send+0x4a>
    2836:	bf00      	nop
    2838:	000148a7 	.word	0x000148a7
    283c:	00014cc7 	.word	0x00014cc7
    2840:	00014ce5 	.word	0x00014ce5
    2844:	20003b4c 	.word	0x20003b4c

00002848 <start_le_scan>:
{
    2848:	b573      	push	{r0, r1, r4, r5, r6, lr}
    284a:	460d      	mov	r5, r1
    284c:	4614      	mov	r4, r2
    284e:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    2850:	2207      	movs	r2, #7
    2852:	2100      	movs	r1, #0
    2854:	4668      	mov	r0, sp
    2856:	f7ff fa22 	bl	1c9e <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    285a:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    285e:	4d1b      	ldr	r5, [pc, #108]	; (28cc <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    2860:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    2864:	2300      	movs	r3, #0
    2866:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    286a:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    286c:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    286e:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2872:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    2876:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    287a:	f7ff fdaf 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    287e:	4604      	mov	r4, r0
    2880:	b300      	cbz	r0, 28c4 <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2882:	2207      	movs	r2, #7
    2884:	4669      	mov	r1, sp
    2886:	3008      	adds	r0, #8
    2888:	f00f ff3e 	bl	12708 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    288c:	4621      	mov	r1, r4
    288e:	f242 000b 	movw	r0, #8203	; 0x200b
    2892:	f7ff ff9f 	bl	27d4 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2896:	2001      	movs	r0, #1
    2898:	f7ff fe50 	bl	253c <set_le_scan_enable>
	if (err) {
    289c:	4604      	mov	r4, r0
    289e:	b938      	cbnz	r0, 28b0 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    28a0:	2e01      	cmp	r6, #1
    28a2:	d108      	bne.n	28b6 <start_le_scan+0x6e>
    28a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    28a8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    28ac:	f7ff fcf5 	bl	229a <atomic_or>
}
    28b0:	4620      	mov	r0, r4
    28b2:	b002      	add	sp, #8
    28b4:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28b6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    28ba:	f105 0070 	add.w	r0, r5, #112	; 0x70
    28be:	f7ff fcfd 	bl	22bc <atomic_and>
    28c2:	e7f5      	b.n	28b0 <start_le_scan+0x68>
		return -ENOBUFS;
    28c4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    28c8:	e7f2      	b.n	28b0 <start_le_scan+0x68>
    28ca:	bf00      	nop
    28cc:	20003a88 	.word	0x20003a88

000028d0 <bt_le_scan_update>:
{
    28d0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    28d2:	2109      	movs	r1, #9
{
    28d4:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    28d6:	4816      	ldr	r0, [pc, #88]	; (2930 <bt_le_scan_update+0x60>)
    28d8:	f7ff fd72 	bl	23c0 <atomic_test_bit>
    28dc:	4602      	mov	r2, r0
    28de:	b108      	cbz	r0, 28e4 <bt_le_scan_update+0x14>
		return 0;
    28e0:	2000      	movs	r0, #0
    28e2:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    28e4:	2108      	movs	r1, #8
    28e6:	4812      	ldr	r0, [pc, #72]	; (2930 <bt_le_scan_update+0x60>)
    28e8:	f7ff fd6a 	bl	23c0 <atomic_test_bit>
    28ec:	b9d0      	cbnz	r0, 2924 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    28ee:	2101      	movs	r1, #1
    28f0:	2000      	movs	r0, #0
    28f2:	f001 ff41 	bl	4778 <bt_conn_lookup_state_le>
		if (!conn) {
    28f6:	4604      	mov	r4, r0
    28f8:	2800      	cmp	r0, #0
    28fa:	d0f1      	beq.n	28e0 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    28fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2900:	480b      	ldr	r0, [pc, #44]	; (2930 <bt_le_scan_update+0x60>)
    2902:	f7ff fcca 	bl	229a <atomic_or>
		bt_conn_unref(conn);
    2906:	4620      	mov	r0, r4
    2908:	f001 ff54 	bl	47b4 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    290c:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    290e:	bf15      	itete	ne
    2910:	2230      	movne	r2, #48	; 0x30
    2912:	2212      	moveq	r2, #18
    2914:	2160      	movne	r1, #96	; 0x60
    2916:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    291a:	2000      	movs	r0, #0
}
    291c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2920:	f7ff bf92 	b.w	2848 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2924:	4610      	mov	r0, r2
    2926:	f7ff fe09 	bl	253c <set_le_scan_enable>
		if (err) {
    292a:	2800      	cmp	r0, #0
    292c:	d0df      	beq.n	28ee <bt_le_scan_update+0x1e>
    292e:	bd38      	pop	{r3, r4, r5, pc}
    2930:	20003af8 	.word	0x20003af8

00002934 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2938:	4d67      	ldr	r5, [pc, #412]	; (2ad8 <bt_init+0x1a4>)
    293a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    293e:	6899      	ldr	r1, [r3, #8]
    2940:	f011 0101 	ands.w	r1, r1, #1
{
    2944:	b08a      	sub	sp, #40	; 0x28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2946:	d12d      	bne.n	29a4 <bt_init+0x70>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2948:	aa08      	add	r2, sp, #32
    294a:	f640 4003 	movw	r0, #3075	; 0xc03
    294e:	f7ff fd8f 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2952:	4604      	mov	r4, r0
    2954:	2800      	cmp	r0, #0
    2956:	f040 80ba 	bne.w	2ace <bt_init+0x19a>
	u8_t status = buf->data[0];
    295a:	9b08      	ldr	r3, [sp, #32]
    295c:	689b      	ldr	r3, [r3, #8]
    295e:	781c      	ldrb	r4, [r3, #0]
    2960:	f010 ff22 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", status);
    2964:	9400      	str	r4, [sp, #0]
    2966:	4603      	mov	r3, r0
    2968:	4a5c      	ldr	r2, [pc, #368]	; (2adc <bt_init+0x1a8>)
    296a:	495d      	ldr	r1, [pc, #372]	; (2ae0 <bt_init+0x1ac>)
    296c:	2007      	movs	r0, #7
    296e:	f7ff fb31 	bl	1fd4 <bt_log>
	if (status) {
    2972:	b9a4      	cbnz	r4, 299e <bt_init+0x6a>
	scan_dev_found_cb = NULL;
    2974:	4b5b      	ldr	r3, [pc, #364]	; (2ae4 <bt_init+0x1b0>)
    2976:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2978:	462b      	mov	r3, r5
    297a:	f3bf 8f5b 	dmb	ish
    297e:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2982:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2986:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    298a:	f3bf 8f5b 	dmb	ish
    298e:	e853 1f00 	ldrex	r1, [r3]
    2992:	e843 2000 	strex	r0, r2, [r3]
    2996:	2800      	cmp	r0, #0
    2998:	d1f9      	bne.n	298e <bt_init+0x5a>
    299a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    299e:	9808      	ldr	r0, [sp, #32]
    29a0:	f00f fe7a 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    29a4:	aa08      	add	r2, sp, #32
    29a6:	2100      	movs	r1, #0
    29a8:	f241 0003 	movw	r0, #4099	; 0x1003
    29ac:	f7ff fd60 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    29b0:	4604      	mov	r4, r0
    29b2:	2800      	cmp	r0, #0
    29b4:	f040 808b 	bne.w	2ace <bt_init+0x19a>
    29b8:	9b08      	ldr	r3, [sp, #32]
    29ba:	689e      	ldr	r6, [r3, #8]
    29bc:	f010 fef4 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29c0:	f816 3b01 	ldrb.w	r3, [r6], #1
    29c4:	9300      	str	r3, [sp, #0]
    29c6:	4a48      	ldr	r2, [pc, #288]	; (2ae8 <bt_init+0x1b4>)
    29c8:	4945      	ldr	r1, [pc, #276]	; (2ae0 <bt_init+0x1ac>)
    29ca:	4603      	mov	r3, r0
    29cc:	2007      	movs	r0, #7
    29ce:	f7ff fb01 	bl	1fd4 <bt_log>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    29d2:	2208      	movs	r2, #8
    29d4:	4631      	mov	r1, r6
    29d6:	4845      	ldr	r0, [pc, #276]	; (2aec <bt_init+0x1b8>)
    29d8:	f7ff f935 	bl	1c46 <memcpy>
	net_buf_unref(rsp);
    29dc:	9808      	ldr	r0, [sp, #32]
    29de:	f00f fe5b 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    29e2:	4621      	mov	r1, r4
    29e4:	aa08      	add	r2, sp, #32
    29e6:	f241 0001 	movw	r0, #4097	; 0x1001
    29ea:	f7ff fd41 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    29ee:	4604      	mov	r4, r0
    29f0:	2800      	cmp	r0, #0
    29f2:	d16c      	bne.n	2ace <bt_init+0x19a>
    29f4:	9b08      	ldr	r3, [sp, #32]
    29f6:	689c      	ldr	r4, [r3, #8]
    29f8:	f010 fed6 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29fc:	7823      	ldrb	r3, [r4, #0]
    29fe:	4938      	ldr	r1, [pc, #224]	; (2ae0 <bt_init+0x1ac>)
    2a00:	9300      	str	r3, [sp, #0]
    2a02:	4a3b      	ldr	r2, [pc, #236]	; (2af0 <bt_init+0x1bc>)
    2a04:	4603      	mov	r3, r0
    2a06:	2007      	movs	r0, #7
    2a08:	f7ff fae4 	bl	1fd4 <bt_log>
	bt_dev.hci_version = rp->hci_version;
    2a0c:	7863      	ldrb	r3, [r4, #1]
    2a0e:	73ab      	strb	r3, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a10:	78e2      	ldrb	r2, [r4, #3]
    2a12:	78a3      	ldrb	r3, [r4, #2]
	net_buf_unref(rsp);
    2a14:	9808      	ldr	r0, [sp, #32]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a1a:	822b      	strh	r3, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2a1c:	7923      	ldrb	r3, [r4, #4]
    2a1e:	73eb      	strb	r3, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2a20:	7a22      	ldrb	r2, [r4, #8]
    2a22:	79e3      	ldrb	r3, [r4, #7]
    2a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a28:	826b      	strh	r3, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2a2a:	79a2      	ldrb	r2, [r4, #6]
    2a2c:	7963      	ldrb	r3, [r4, #5]
    2a2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a32:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2a34:	f00f fe30 	bl	12698 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2a38:	2103      	movs	r1, #3
    2a3a:	482e      	ldr	r0, [pc, #184]	; (2af4 <bt_init+0x1c0>)
    2a3c:	f7ff fcc0 	bl	23c0 <atomic_test_bit>
    2a40:	4601      	mov	r1, r0
    2a42:	b9e8      	cbnz	r0, 2a80 <bt_init+0x14c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2a44:	aa08      	add	r2, sp, #32
    2a46:	f241 0009 	movw	r0, #4105	; 0x1009
    2a4a:	f7ff fd11 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2a4e:	4604      	mov	r4, r0
    2a50:	2800      	cmp	r0, #0
    2a52:	d13c      	bne.n	2ace <bt_init+0x19a>
    2a54:	9b08      	ldr	r3, [sp, #32]
    2a56:	689e      	ldr	r6, [r3, #8]
    2a58:	f010 fea6 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a5c:	f816 3b01 	ldrb.w	r3, [r6], #1
    2a60:	9300      	str	r3, [sp, #0]
    2a62:	4a25      	ldr	r2, [pc, #148]	; (2af8 <bt_init+0x1c4>)
    2a64:	491e      	ldr	r1, [pc, #120]	; (2ae0 <bt_init+0x1ac>)
    2a66:	4603      	mov	r3, r0
    2a68:	2007      	movs	r0, #7
    2a6a:	f7ff fab3 	bl	1fd4 <bt_log>
    2a6e:	2206      	movs	r2, #6
    2a70:	4631      	mov	r1, r6
    2a72:	4822      	ldr	r0, [pc, #136]	; (2afc <bt_init+0x1c8>)
    2a74:	f7ff f8e7 	bl	1c46 <memcpy>
		net_buf_unref(rsp);
    2a78:	9808      	ldr	r0, [sp, #32]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2a7a:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    2a7c:	f00f fe0c 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2a80:	aa08      	add	r2, sp, #32
    2a82:	2100      	movs	r1, #0
    2a84:	f241 0002 	movw	r0, #4098	; 0x1002
    2a88:	f7ff fcf2 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2a8c:	4604      	mov	r4, r0
    2a8e:	b9f0      	cbnz	r0, 2ace <bt_init+0x19a>
    2a90:	9b08      	ldr	r3, [sp, #32]
    2a92:	689e      	ldr	r6, [r3, #8]
    2a94:	f010 fe88 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a98:	f816 3b01 	ldrb.w	r3, [r6], #1
    2a9c:	9300      	str	r3, [sp, #0]
    2a9e:	4a18      	ldr	r2, [pc, #96]	; (2b00 <bt_init+0x1cc>)
    2aa0:	490f      	ldr	r1, [pc, #60]	; (2ae0 <bt_init+0x1ac>)
    2aa2:	4603      	mov	r3, r0
    2aa4:	2007      	movs	r0, #7
    2aa6:	f7ff fa95 	bl	1fd4 <bt_log>
	memcpy(bt_dev.supported_commands, rp->commands,
    2aaa:	2240      	movs	r2, #64	; 0x40
    2aac:	4631      	mov	r1, r6
    2aae:	4815      	ldr	r0, [pc, #84]	; (2b04 <bt_init+0x1d0>)
    2ab0:	f7ff f8c9 	bl	1c46 <memcpy>
	net_buf_unref(rsp);
    2ab4:	9808      	ldr	r0, [sp, #32]
    2ab6:	f00f fdef 	bl	12698 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2aba:	7eab      	ldrb	r3, [r5, #26]
    2abc:	065a      	lsls	r2, r3, #25
    2abe:	d427      	bmi.n	2b10 <bt_init+0x1dc>
		BT_ERR("Non-LE capable controller detected!");
    2ac0:	4a11      	ldr	r2, [pc, #68]	; (2b08 <bt_init+0x1d4>)
    2ac2:	4912      	ldr	r1, [pc, #72]	; (2b0c <bt_init+0x1d8>)
    2ac4:	2003      	movs	r0, #3
    2ac6:	f7ff fa85 	bl	1fd4 <bt_log>
		return -ENODEV;
    2aca:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2ace:	4620      	mov	r0, r4
    2ad0:	b00a      	add	sp, #40	; 0x28
    2ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ad6:	bf00      	nop
    2ad8:	20003a88 	.word	0x20003a88
    2adc:	000149d2 	.word	0x000149d2
    2ae0:	00014d70 	.word	0x00014d70
    2ae4:	200002f4 	.word	0x200002f4
    2ae8:	00014b01 	.word	0x00014b01
    2aec:	20003a9e 	.word	0x20003a9e
    2af0:	00014a62 	.word	0x00014a62
    2af4:	20003af8 	.word	0x20003af8
    2af8:	00014a7a 	.word	0x00014a7a
    2afc:	20003a89 	.word	0x20003a89
    2b00:	00014ae0 	.word	0x00014ae0
    2b04:	20003aa6 	.word	0x20003aa6
    2b08:	00014b3b 	.word	0x00014b3b
    2b0c:	00014d83 	.word	0x00014d83
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2b10:	4621      	mov	r1, r4
    2b12:	aa08      	add	r2, sp, #32
    2b14:	f242 0003 	movw	r0, #8195	; 0x2003
    2b18:	f7ff fcaa 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2b1c:	4604      	mov	r4, r0
    2b1e:	2800      	cmp	r0, #0
    2b20:	d1d5      	bne.n	2ace <bt_init+0x19a>
    2b22:	9b08      	ldr	r3, [sp, #32]
    2b24:	689e      	ldr	r6, [r3, #8]
    2b26:	f010 fe3f 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b2a:	f816 3b01 	ldrb.w	r3, [r6], #1
    2b2e:	9300      	str	r3, [sp, #0]
    2b30:	4abc      	ldr	r2, [pc, #752]	; (2e24 <bt_init+0x4f0>)
    2b32:	49bd      	ldr	r1, [pc, #756]	; (2e28 <bt_init+0x4f4>)
    2b34:	4603      	mov	r3, r0
    2b36:	2007      	movs	r0, #7
    2b38:	f7ff fa4c 	bl	1fd4 <bt_log>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2b3c:	2208      	movs	r2, #8
    2b3e:	4631      	mov	r1, r6
    2b40:	48ba      	ldr	r0, [pc, #744]	; (2e2c <bt_init+0x4f8>)
    2b42:	f7ff f880 	bl	1c46 <memcpy>
	net_buf_unref(rsp);
    2b46:	9808      	ldr	r0, [sp, #32]
    2b48:	f00f fda6 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2b4c:	4621      	mov	r1, r4
    2b4e:	aa08      	add	r2, sp, #32
    2b50:	f242 0002 	movw	r0, #8194	; 0x2002
    2b54:	f7ff fc8c 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2b58:	4604      	mov	r4, r0
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d1b7      	bne.n	2ace <bt_init+0x19a>
    2b5e:	9b08      	ldr	r3, [sp, #32]
    2b60:	689c      	ldr	r4, [r3, #8]
    2b62:	f010 fe21 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b66:	7823      	ldrb	r3, [r4, #0]
    2b68:	9300      	str	r3, [sp, #0]
    2b6a:	4ab1      	ldr	r2, [pc, #708]	; (2e30 <bt_init+0x4fc>)
    2b6c:	49ae      	ldr	r1, [pc, #696]	; (2e28 <bt_init+0x4f4>)
    2b6e:	4603      	mov	r3, r0
    2b70:	2007      	movs	r0, #7
    2b72:	f7ff fa2f 	bl	1fd4 <bt_log>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2b76:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2b7a:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2b7e:	b1a3      	cbz	r3, 2baa <bt_init+0x276>
    2b80:	f010 fe12 	bl	137a8 <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2b84:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2b88:	9301      	str	r3, [sp, #4]
    2b8a:	78e3      	ldrb	r3, [r4, #3]
    2b8c:	9300      	str	r3, [sp, #0]
    2b8e:	4aa8      	ldr	r2, [pc, #672]	; (2e30 <bt_init+0x4fc>)
    2b90:	49a8      	ldr	r1, [pc, #672]	; (2e34 <bt_init+0x500>)
    2b92:	4603      	mov	r3, r0
    2b94:	2007      	movs	r0, #7
    2b96:	f7ff fa1d 	bl	1fd4 <bt_log>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2b9a:	78e2      	ldrb	r2, [r4, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2b9c:	48a6      	ldr	r0, [pc, #664]	; (2e38 <bt_init+0x504>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2b9e:	2a02      	cmp	r2, #2
    2ba0:	bf28      	it	cs
    2ba2:	2202      	movcs	r2, #2
    2ba4:	4611      	mov	r1, r2
    2ba6:	f010 fe05 	bl	137b4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2baa:	9808      	ldr	r0, [sp, #32]
    2bac:	f00f fd74 	bl	12698 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2bb0:	7eac      	ldrb	r4, [r5, #26]
    2bb2:	f014 0420 	ands.w	r4, r4, #32
    2bb6:	f000 80ed 	beq.w	2d94 <bt_init+0x460>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2bba:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2bbe:	071b      	lsls	r3, r3, #28
    2bc0:	d520      	bpl.n	2c04 <bt_init+0x2d0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2bc2:	aa08      	add	r2, sp, #32
    2bc4:	2100      	movs	r1, #0
    2bc6:	f242 001c 	movw	r0, #8220	; 0x201c
    2bca:	f7ff fc51 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2bce:	4604      	mov	r4, r0
    2bd0:	2800      	cmp	r0, #0
    2bd2:	f47f af7c 	bne.w	2ace <bt_init+0x19a>
    2bd6:	9b08      	ldr	r3, [sp, #32]
    2bd8:	689c      	ldr	r4, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2bda:	f010 fde5 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2bde:	7823      	ldrb	r3, [r4, #0]
    2be0:	9300      	str	r3, [sp, #0]
    2be2:	4a96      	ldr	r2, [pc, #600]	; (2e3c <bt_init+0x508>)
    2be4:	4990      	ldr	r1, [pc, #576]	; (2e28 <bt_init+0x4f4>)
    2be6:	4603      	mov	r3, r0
    2be8:	2007      	movs	r0, #7
    2bea:	f7ff f9f3 	bl	1fd4 <bt_log>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2bee:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2bf0:	9808      	ldr	r0, [sp, #32]
    2bf2:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2bf6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2bf8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2bfc:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2c00:	f00f fd4a 	bl	12698 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2c04:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2c08:	069f      	lsls	r7, r3, #26
    2c0a:	f100 80df 	bmi.w	2dcc <bt_init+0x498>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2c0e:	2108      	movs	r1, #8
    2c10:	f242 0001 	movw	r0, #8193	; 0x2001
    2c14:	f7ff fbe2 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    2c18:	4604      	mov	r4, r0
    2c1a:	2800      	cmp	r0, #0
    2c1c:	f000 80c1 	beq.w	2da2 <bt_init+0x46e>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2c20:	2108      	movs	r1, #8
    2c22:	4408      	add	r0, r1
    2c24:	f00f fd6a 	bl	126fc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2c28:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2c2c:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2c2e:	bf4c      	ite	mi
    2c30:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2c32:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2c34:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2c36:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2c3a:	bf48      	it	mi
    2c3c:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2c40:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2c44:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    2c48:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2c4c:	bf18      	it	ne
    2c4e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2c52:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2c54:	bf08      	it	eq
    2c56:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2c5a:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2c5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2c60:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2c62:	2200      	movs	r2, #0
    2c64:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2c66:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2c68:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2c6a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2c6c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2c6e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2c70:	4621      	mov	r1, r4
    2c72:	f242 0001 	movw	r0, #8193	; 0x2001
    2c76:	f7ff fbfb 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2c7a:	4604      	mov	r4, r0
    2c7c:	2800      	cmp	r0, #0
    2c7e:	f47f af26 	bne.w	2ace <bt_init+0x19a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2c82:	7eab      	ldrb	r3, [r5, #26]
    2c84:	069a      	lsls	r2, r3, #26
    2c86:	d439      	bmi.n	2cfc <bt_init+0x3c8>
	if (bt_dev.le.mtu) {
    2c88:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2c8c:	2900      	cmp	r1, #0
    2c8e:	d135      	bne.n	2cfc <bt_init+0x3c8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2c90:	aa08      	add	r2, sp, #32
    2c92:	f241 0005 	movw	r0, #4101	; 0x1005
    2c96:	f7ff fbeb 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2c9a:	4604      	mov	r4, r0
    2c9c:	2800      	cmp	r0, #0
    2c9e:	f47f af16 	bne.w	2ace <bt_init+0x19a>
    2ca2:	9b08      	ldr	r3, [sp, #32]
    2ca4:	689c      	ldr	r4, [r3, #8]
    2ca6:	f010 fd7f 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2caa:	7823      	ldrb	r3, [r4, #0]
    2cac:	9300      	str	r3, [sp, #0]
    2cae:	4a64      	ldr	r2, [pc, #400]	; (2e40 <bt_init+0x50c>)
    2cb0:	495d      	ldr	r1, [pc, #372]	; (2e28 <bt_init+0x4f4>)
    2cb2:	4603      	mov	r3, r0
    2cb4:	2007      	movs	r0, #7
    2cb6:	f7ff f98d 	bl	1fd4 <bt_log>
	if (bt_dev.le.mtu) {
    2cba:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2cbe:	b9d3      	cbnz	r3, 2cf6 <bt_init+0x3c2>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2cc0:	78a2      	ldrb	r2, [r4, #2]
    2cc2:	7863      	ldrb	r3, [r4, #1]
    2cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2cc8:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2ccc:	88a4      	ldrh	r4, [r4, #4]
    2cce:	f010 fd6b 	bl	137a8 <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2cd2:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2cd6:	9301      	str	r3, [sp, #4]
    2cd8:	4a59      	ldr	r2, [pc, #356]	; (2e40 <bt_init+0x50c>)
    2cda:	495a      	ldr	r1, [pc, #360]	; (2e44 <bt_init+0x510>)
    2cdc:	9400      	str	r4, [sp, #0]
    2cde:	4603      	mov	r3, r0
    2ce0:	2007      	movs	r0, #7
    2ce2:	f7ff f977 	bl	1fd4 <bt_log>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2ce6:	2c02      	cmp	r4, #2
    2ce8:	4622      	mov	r2, r4
    2cea:	bf28      	it	cs
    2cec:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2cee:	4611      	mov	r1, r2
    2cf0:	4851      	ldr	r0, [pc, #324]	; (2e38 <bt_init+0x504>)
    2cf2:	f010 fd5f 	bl	137b4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2cf6:	9808      	ldr	r0, [sp, #32]
    2cf8:	f00f fcce 	bl	12698 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2cfc:	2108      	movs	r1, #8
    2cfe:	f640 4001 	movw	r0, #3073	; 0xc01
    2d02:	f7ff fb6b 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    2d06:	4604      	mov	r4, r0
    2d08:	2800      	cmp	r0, #0
    2d0a:	d04a      	beq.n	2da2 <bt_init+0x46e>
	ev = net_buf_add(buf, sizeof(*ev));
    2d0c:	2108      	movs	r1, #8
    2d0e:	4408      	add	r0, r1
    2d10:	f00f fcf4 	bl	126fc <net_buf_simple_add>
	dst[0] = val;
    2d14:	2310      	movs	r3, #16
    2d16:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2d18:	2388      	movs	r3, #136	; 0x88
    2d1a:	7043      	strb	r3, [r0, #1]
    2d1c:	2302      	movs	r3, #2
	dst[0] = val;
    2d1e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2d20:	70c3      	strb	r3, [r0, #3]
    2d22:	2320      	movs	r3, #32
	dst[0] = val;
    2d24:	7082      	strb	r2, [r0, #2]
    2d26:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2d28:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2d2a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2d2c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2d2e:	4621      	mov	r1, r4
    2d30:	f640 4001 	movw	r0, #3073	; 0xc01
    2d34:	f7ff fb9c 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2d38:	4604      	mov	r4, r0
    2d3a:	2800      	cmp	r0, #0
    2d3c:	f47f aec7 	bne.w	2ace <bt_init+0x19a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2d40:	4601      	mov	r1, r0
    2d42:	aa08      	add	r2, sp, #32
    2d44:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2d48:	f7ff fb92 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2d4c:	2800      	cmp	r0, #0
    2d4e:	f000 8089 	beq.w	2e64 <bt_init+0x530>
		BT_WARN("Vendor HCI extensions not available");
    2d52:	4a3d      	ldr	r2, [pc, #244]	; (2e48 <bt_init+0x514>)
    2d54:	493d      	ldr	r1, [pc, #244]	; (2e4c <bt_init+0x518>)
		BT_WARN("Failed to read supported vendor commands");
    2d56:	2004      	movs	r0, #4
    2d58:	f7ff f93c 	bl	1fd4 <bt_log>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2d5c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2d5e:	2207      	movs	r2, #7
    2d60:	a908      	add	r1, sp, #32
    2d62:	483b      	ldr	r0, [pc, #236]	; (2e50 <bt_init+0x51c>)
    2d64:	9308      	str	r3, [sp, #32]
    2d66:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    2d6a:	f7fe ff57 	bl	1c1c <memcmp>
    2d6e:	2800      	cmp	r0, #0
    2d70:	f040 80d8 	bne.w	2f24 <bt_init+0x5f0>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2d74:	f010 fd18 	bl	137a8 <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2d78:	4a36      	ldr	r2, [pc, #216]	; (2e54 <bt_init+0x520>)
    2d7a:	4937      	ldr	r1, [pc, #220]	; (2e58 <bt_init+0x524>)
    2d7c:	4603      	mov	r3, r0
    2d7e:	2007      	movs	r0, #7
    2d80:	f7ff f928 	bl	1fd4 <bt_log>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2d84:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2d88:	07db      	lsls	r3, r3, #31
    2d8a:	f100 80f1 	bmi.w	2f70 <bt_init+0x63c>
		BT_WARN("Read Static Addresses command not available");
    2d8e:	4a33      	ldr	r2, [pc, #204]	; (2e5c <bt_init+0x528>)
    2d90:	4933      	ldr	r1, [pc, #204]	; (2e60 <bt_init+0x52c>)
    2d92:	e0f6      	b.n	2f82 <bt_init+0x64e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2d94:	2102      	movs	r1, #2
    2d96:	f640 406d 	movw	r0, #3181	; 0xc6d
    2d9a:	f7ff fb1f 	bl	23dc <bt_hci_cmd_create>
		if (!buf) {
    2d9e:	4606      	mov	r6, r0
    2da0:	b910      	cbnz	r0, 2da8 <bt_init+0x474>
		return -ENOBUFS;
    2da2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2da6:	e692      	b.n	2ace <bt_init+0x19a>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2da8:	2102      	movs	r1, #2
    2daa:	3008      	adds	r0, #8
    2dac:	f00f fca6 	bl	126fc <net_buf_simple_add>
		cp_le->le = 0x01;
    2db0:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2db2:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2db4:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2db6:	4622      	mov	r2, r4
    2db8:	4631      	mov	r1, r6
    2dba:	f640 406d 	movw	r0, #3181	; 0xc6d
    2dbe:	f7ff fb57 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2dc2:	4604      	mov	r4, r0
    2dc4:	2800      	cmp	r0, #0
    2dc6:	f43f aef8 	beq.w	2bba <bt_init+0x286>
    2dca:	e680      	b.n	2ace <bt_init+0x19a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2dcc:	aa08      	add	r2, sp, #32
    2dce:	2100      	movs	r1, #0
    2dd0:	f242 002f 	movw	r0, #8239	; 0x202f
    2dd4:	f7ff fb4c 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2dd8:	4604      	mov	r4, r0
    2dda:	2800      	cmp	r0, #0
    2ddc:	f47f ae77 	bne.w	2ace <bt_init+0x19a>
		rp = (void *)rsp->data;
    2de0:	9808      	ldr	r0, [sp, #32]
    2de2:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2de4:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2de8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    2dec:	f00f fc54 	bl	12698 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2df0:	2104      	movs	r1, #4
    2df2:	f242 0024 	movw	r0, #8228	; 0x2024
    2df6:	f7ff faf1 	bl	23dc <bt_hci_cmd_create>
		if (!buf) {
    2dfa:	4606      	mov	r6, r0
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d0d0      	beq.n	2da2 <bt_init+0x46e>
		cp = net_buf_add(buf, sizeof(*cp));
    2e00:	2104      	movs	r1, #4
    2e02:	3008      	adds	r0, #8
    2e04:	f00f fc7a 	bl	126fc <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2e08:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2e0a:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2e0e:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2e10:	4631      	mov	r1, r6
    2e12:	f242 0024 	movw	r0, #8228	; 0x2024
    2e16:	f7ff fb2b 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2e1a:	4604      	mov	r4, r0
    2e1c:	2800      	cmp	r0, #0
    2e1e:	f43f aef6 	beq.w	2c0e <bt_init+0x2da>
    2e22:	e654      	b.n	2ace <bt_init+0x19a>
    2e24:	00014a8f 	.word	0x00014a8f
    2e28:	00014d70 	.word	0x00014d70
    2e2c:	20003b00 	.word	0x20003b00
    2e30:	00014ac3 	.word	0x00014ac3
    2e34:	00014dab 	.word	0x00014dab
    2e38:	20003b14 	.word	0x20003b14
    2e3c:	00014b1e 	.word	0x00014b1e
    2e40:	00014aa9 	.word	0x00014aa9
    2e44:	00014dd3 	.word	0x00014dd3
    2e48:	00014b64 	.word	0x00014b64
    2e4c:	00014dff 	.word	0x00014dff
    2e50:	20003a88 	.word	0x20003a88
    2e54:	00014b70 	.word	0x00014b70
    2e58:	00014edf 	.word	0x00014edf
    2e5c:	00014b56 	.word	0x00014b56
    2e60:	00014f69 	.word	0x00014f69
	rp.info = (void *)rsp->data;
    2e64:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    2e66:	4961      	ldr	r1, [pc, #388]	; (2fec <bt_init+0x6b8>)
	rp.info = (void *)rsp->data;
    2e68:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2e6a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    2e6e:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2e70:	bf96      	itet	ls
    2e72:	4a5f      	ldrls	r2, [pc, #380]	; (2ff0 <bt_init+0x6bc>)
	return "unknown";
    2e74:	4a5f      	ldrhi	r2, [pc, #380]	; (2ff4 <bt_init+0x6c0>)
		return plat_str[platform];
    2e76:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2e7a:	2006      	movs	r0, #6
    2e7c:	f7ff f8aa 	bl	1fd4 <bt_log>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2e80:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2e84:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2e88:	2a02      	cmp	r2, #2
    2e8a:	d12a      	bne.n	2ee2 <bt_init+0x5ae>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2e8c:	2b02      	cmp	r3, #2
    2e8e:	d828      	bhi.n	2ee2 <bt_init+0x5ae>
		return nordic_str[variant];
    2e90:	4a59      	ldr	r2, [pc, #356]	; (2ff8 <bt_init+0x6c4>)
    2e92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2e96:	4959      	ldr	r1, [pc, #356]	; (2ffc <bt_init+0x6c8>)
    2e98:	2006      	movs	r0, #6
    2e9a:	f7ff f89b 	bl	1fd4 <bt_log>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2e9e:	7963      	ldrb	r3, [r4, #5]
    2ea0:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2ea4:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
    2ea6:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2ea8:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2eac:	bf98      	it	ls
    2eae:	4a54      	ldrls	r2, [pc, #336]	; (3000 <bt_init+0x6cc>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2eb0:	9101      	str	r1, [sp, #4]
    2eb2:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2eb4:	bf94      	ite	ls
    2eb6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2eba:	4a4e      	ldrhi	r2, [pc, #312]	; (2ff4 <bt_init+0x6c0>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2ebc:	9100      	str	r1, [sp, #0]
    2ebe:	2006      	movs	r0, #6
    2ec0:	4950      	ldr	r1, [pc, #320]	; (3004 <bt_init+0x6d0>)
    2ec2:	f7ff f887 	bl	1fd4 <bt_log>
	net_buf_unref(rsp);
    2ec6:	9808      	ldr	r0, [sp, #32]
    2ec8:	f00f fbe6 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2ecc:	aa08      	add	r2, sp, #32
    2ece:	2100      	movs	r1, #0
    2ed0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2ed4:	f7ff facc 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2ed8:	4604      	mov	r4, r0
    2eda:	b120      	cbz	r0, 2ee6 <bt_init+0x5b2>
		BT_WARN("Failed to read supported vendor features");
    2edc:	4a4a      	ldr	r2, [pc, #296]	; (3008 <bt_init+0x6d4>)
    2ede:	494b      	ldr	r1, [pc, #300]	; (300c <bt_init+0x6d8>)
    2ee0:	e739      	b.n	2d56 <bt_init+0x422>
		return "unknown";
    2ee2:	4a44      	ldr	r2, [pc, #272]	; (2ff4 <bt_init+0x6c0>)
    2ee4:	e7d7      	b.n	2e96 <bt_init+0x562>
	rp.cmds = (void *)rsp->data;
    2ee6:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2ee8:	4849      	ldr	r0, [pc, #292]	; (3010 <bt_init+0x6dc>)
    2eea:	6899      	ldr	r1, [r3, #8]
    2eec:	2202      	movs	r2, #2
    2eee:	3101      	adds	r1, #1
    2ef0:	f7fe fea9 	bl	1c46 <memcpy>
	net_buf_unref(rsp);
    2ef4:	9808      	ldr	r0, [sp, #32]
    2ef6:	f00f fbcf 	bl	12698 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2efa:	aa08      	add	r2, sp, #32
    2efc:	4621      	mov	r1, r4
    2efe:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2f02:	f7ff fab5 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    2f06:	b110      	cbz	r0, 2f0e <bt_init+0x5da>
		BT_WARN("Failed to read supported vendor commands");
    2f08:	4a3f      	ldr	r2, [pc, #252]	; (3008 <bt_init+0x6d4>)
    2f0a:	4942      	ldr	r1, [pc, #264]	; (3014 <bt_init+0x6e0>)
    2f0c:	e723      	b.n	2d56 <bt_init+0x422>
	rp.feat = (void *)rsp->data;
    2f0e:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2f10:	4841      	ldr	r0, [pc, #260]	; (3018 <bt_init+0x6e4>)
    2f12:	6899      	ldr	r1, [r3, #8]
    2f14:	2201      	movs	r2, #1
    2f16:	4411      	add	r1, r2
    2f18:	f7fe fe95 	bl	1c46 <memcpy>
	net_buf_unref(rsp);
    2f1c:	9808      	ldr	r0, [sp, #32]
    2f1e:	f00f fbbb 	bl	12698 <net_buf_unref>
    2f22:	e71b      	b.n	2d5c <bt_init+0x428>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2f24:	4b3d      	ldr	r3, [pc, #244]	; (301c <bt_init+0x6e8>)
    2f26:	6818      	ldr	r0, [r3, #0]
    2f28:	889a      	ldrh	r2, [r3, #4]
    2f2a:	9006      	str	r0, [sp, #24]
    2f2c:	799b      	ldrb	r3, [r3, #6]
    2f2e:	f8ad 201c 	strh.w	r2, [sp, #28]
    2f32:	a906      	add	r1, sp, #24
    2f34:	2207      	movs	r2, #7
    2f36:	483a      	ldr	r0, [pc, #232]	; (3020 <bt_init+0x6ec>)
    2f38:	f88d 301e 	strb.w	r3, [sp, #30]
    2f3c:	f7fe fe6e 	bl	1c1c <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2f40:	2800      	cmp	r0, #0
    2f42:	f43f af17 	beq.w	2d74 <bt_init+0x440>
		bt_dev_show_info();
    2f46:	f7ff fbed 	bl	2724 <bt_dev_show_info>
		err = bt_conn_init();
    2f4a:	f002 f82b 	bl	4fa4 <bt_conn_init>
		if (err) {
    2f4e:	4604      	mov	r4, r0
    2f50:	2800      	cmp	r0, #0
    2f52:	f47f adbc 	bne.w	2ace <bt_init+0x19a>
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
    2f56:	4602      	mov	r2, r0
    2f58:	4601      	mov	r1, r0
    2f5a:	2008      	movs	r0, #8
    2f5c:	f7ff f8a8 	bl	20b0 <bt_monitor_send>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f60:	2102      	movs	r1, #2
    2f62:	4830      	ldr	r0, [pc, #192]	; (3024 <bt_init+0x6f0>)
    2f64:	f7ff f999 	bl	229a <atomic_or>
	bt_le_scan_update(false);
    2f68:	4620      	mov	r0, r4
    2f6a:	f7ff fcb1 	bl	28d0 <bt_le_scan_update>
    2f6e:	e5ae      	b.n	2ace <bt_init+0x19a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2f70:	aa05      	add	r2, sp, #20
    2f72:	2100      	movs	r1, #0
    2f74:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2f78:	f7ff fa7a 	bl	2470 <bt_hci_cmd_send_sync>
		if (err) {
    2f7c:	b128      	cbz	r0, 2f8a <bt_init+0x656>
			BT_WARN("Failed to read static addresses");
    2f7e:	4a2a      	ldr	r2, [pc, #168]	; (3028 <bt_init+0x6f4>)
    2f80:	492a      	ldr	r1, [pc, #168]	; (302c <bt_init+0x6f8>)
		BT_WARN("Read Static Addresses command not available");
    2f82:	2004      	movs	r0, #4
    2f84:	f7ff f826 	bl	1fd4 <bt_log>
    2f88:	e020      	b.n	2fcc <bt_init+0x698>
		rp = (void *)rsp->data;
    2f8a:	9b05      	ldr	r3, [sp, #20]
    2f8c:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2f8e:	784b      	ldrb	r3, [r1, #1]
    2f90:	b1a3      	cbz	r3, 2fbc <bt_init+0x688>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2f92:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2f94:	2206      	movs	r2, #6
    2f96:	3102      	adds	r1, #2
    2f98:	4825      	ldr	r0, [pc, #148]	; (3030 <bt_init+0x6fc>)
    2f9a:	702b      	strb	r3, [r5, #0]
    2f9c:	f7fe fe53 	bl	1c46 <memcpy>
			net_buf_unref(rsp);
    2fa0:	9805      	ldr	r0, [sp, #20]
    2fa2:	f00f fb79 	bl	12698 <net_buf_unref>
		return bt_set_static_addr();
    2fa6:	f7ff fb97 	bl	26d8 <bt_set_static_addr>
    2faa:	4604      	mov	r4, r0
		if (err) {
    2fac:	2800      	cmp	r0, #0
    2fae:	d0ca      	beq.n	2f46 <bt_init+0x612>
			BT_ERR("Unable to set identity address");
    2fb0:	4a20      	ldr	r2, [pc, #128]	; (3034 <bt_init+0x700>)
    2fb2:	4921      	ldr	r1, [pc, #132]	; (3038 <bt_init+0x704>)
    2fb4:	2003      	movs	r0, #3
    2fb6:	f7ff f80d 	bl	1fd4 <bt_log>
    2fba:	e588      	b.n	2ace <bt_init+0x19a>
		BT_WARN("No static addresses stored in controller");
    2fbc:	2004      	movs	r0, #4
    2fbe:	4a1a      	ldr	r2, [pc, #104]	; (3028 <bt_init+0x6f4>)
    2fc0:	491e      	ldr	r1, [pc, #120]	; (303c <bt_init+0x708>)
    2fc2:	f7ff f807 	bl	1fd4 <bt_log>
		net_buf_unref(rsp);
    2fc6:	9805      	ldr	r0, [sp, #20]
    2fc8:	f00f fb66 	bl	12698 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2fcc:	4814      	ldr	r0, [pc, #80]	; (3020 <bt_init+0x6ec>)
    2fce:	f7ff fb75 	bl	26bc <bt_addr_le_create_static>
		if (err) {
    2fd2:	4604      	mov	r4, r0
    2fd4:	2800      	cmp	r0, #0
    2fd6:	d1eb      	bne.n	2fb0 <bt_init+0x67c>
		BT_WARN("Using temporary static random address %s",
    2fd8:	4815      	ldr	r0, [pc, #84]	; (3030 <bt_init+0x6fc>)
    2fda:	f7fe feb9 	bl	1d50 <bt_addr_str>
    2fde:	4a12      	ldr	r2, [pc, #72]	; (3028 <bt_init+0x6f4>)
    2fe0:	4917      	ldr	r1, [pc, #92]	; (3040 <bt_init+0x70c>)
    2fe2:	4603      	mov	r3, r0
    2fe4:	2004      	movs	r0, #4
    2fe6:	f7fe fff5 	bl	1fd4 <bt_log>
    2fea:	e7dc      	b.n	2fa6 <bt_init+0x672>
    2fec:	00014e27 	.word	0x00014e27
    2ff0:	000156a4 	.word	0x000156a4
    2ff4:	000157a0 	.word	0x000157a0
    2ff8:	00015698 	.word	0x00015698
    2ffc:	00014e40 	.word	0x00014e40
    3000:	00015790 	.word	0x00015790
    3004:	00014e58 	.word	0x00014e58
    3008:	00014b64 	.word	0x00014b64
    300c:	00014e85 	.word	0x00014e85
    3010:	20003ae7 	.word	0x20003ae7
    3014:	00014eb2 	.word	0x00014eb2
    3018:	20003ae6 	.word	0x20003ae6
    301c:	0001428c 	.word	0x0001428c
    3020:	20003a88 	.word	0x20003a88
    3024:	20003af8 	.word	0x20003af8
    3028:	00014b56 	.word	0x00014b56
    302c:	00014f18 	.word	0x00014f18
    3030:	20003a89 	.word	0x20003a89
    3034:	00014b70 	.word	0x00014b70
    3038:	00014fc6 	.word	0x00014fc6
    303c:	00014f3c 	.word	0x00014f3c
    3040:	00014f99 	.word	0x00014f99

00003044 <init_work>:

static void init_work(struct k_work *work)
{
    3044:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    3046:	f7ff fc75 	bl	2934 <bt_init>
	if (ready_cb) {
    304a:	4b03      	ldr	r3, [pc, #12]	; (3058 <init_work+0x14>)
    304c:	681b      	ldr	r3, [r3, #0]
    304e:	b113      	cbz	r3, 3056 <init_work+0x12>
		ready_cb(err);
	}
}
    3050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3054:	4718      	bx	r3
    3056:	bd10      	pop	{r4, pc}
    3058:	200002f0 	.word	0x200002f0

0000305c <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    305c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    305e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3060:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3062:	f242 0032 	movw	r0, #8242	; 0x2032
    3066:	f7ff f9b9 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    306a:	4605      	mov	r5, r0
    306c:	b198      	cbz	r0, 3096 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    306e:	2107      	movs	r1, #7
    3070:	3008      	adds	r0, #8
    3072:	f00f fb43 	bl	126fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3076:	8823      	ldrh	r3, [r4, #0]
    3078:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    307a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    307c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    307e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3080:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3082:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    3084:	7144      	strb	r4, [r0, #5]
    3086:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    3088:	4629      	mov	r1, r5
    308a:	f242 0032 	movw	r0, #8242	; 0x2032
    308e:	f7ff fba1 	bl	27d4 <bt_hci_cmd_send>
	return 0;
    3092:	4620      	mov	r0, r4
    3094:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    3096:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    309a:	bd38      	pop	{r3, r4, r5, pc}

0000309c <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    309e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    30a0:	aa01      	add	r2, sp, #4
    30a2:	2100      	movs	r1, #0
    30a4:	f242 002f 	movw	r0, #8239	; 0x202f
    30a8:	f7ff f9e2 	bl	2470 <bt_hci_cmd_send_sync>
	if (err) {
    30ac:	b9d8      	cbnz	r0, 30e6 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    30ae:	9801      	ldr	r0, [sp, #4]
    30b0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    30b2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    30b6:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    30ba:	f00f faed 	bl	12698 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    30be:	2106      	movs	r1, #6
    30c0:	f242 0022 	movw	r0, #8226	; 0x2022
    30c4:	f7ff f98a 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    30c8:	4604      	mov	r4, r0
    30ca:	b170      	cbz	r0, 30ea <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    30cc:	2106      	movs	r1, #6
    30ce:	3008      	adds	r0, #8
    30d0:	f00f fb14 	bl	126fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    30d4:	883b      	ldrh	r3, [r7, #0]
    30d6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    30d8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    30da:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    30dc:	4621      	mov	r1, r4
    30de:	f242 0022 	movw	r0, #8226	; 0x2022
    30e2:	f7ff fb77 	bl	27d4 <bt_hci_cmd_send>
}
    30e6:	b003      	add	sp, #12
    30e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    30ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
    30ee:	e7fa      	b.n	30e6 <hci_le_set_data_len.isra.29+0x4a>

000030f0 <le_enh_conn_complete>:
{
    30f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30f4:	b088      	sub	sp, #32
    30f6:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30f8:	f8b0 6001 	ldrh.w	r6, [r0, #1]
    30fc:	f010 fb54 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3100:	1d2c      	adds	r4, r5, #4
    3102:	4680      	mov	r8, r0
    3104:	4620      	mov	r0, r4
    3106:	f895 9000 	ldrb.w	r9, [r5]
    310a:	f895 a003 	ldrb.w	sl, [r5, #3]
    310e:	f7fe fe45 	bl	1d9c <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3112:	b2b7      	uxth	r7, r6
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3114:	9003      	str	r0, [sp, #12]
    3116:	4643      	mov	r3, r8
    3118:	f8cd a008 	str.w	sl, [sp, #8]
    311c:	9701      	str	r7, [sp, #4]
    311e:	f8cd 9000 	str.w	r9, [sp]
    3122:	4a64      	ldr	r2, [pc, #400]	; (32b4 <le_enh_conn_complete+0x1c4>)
    3124:	4964      	ldr	r1, [pc, #400]	; (32b8 <le_enh_conn_complete+0x1c8>)
    3126:	2007      	movs	r0, #7
    3128:	f7fe ff54 	bl	1fd4 <bt_log>
	if (evt->status) {
    312c:	782b      	ldrb	r3, [r5, #0]
    312e:	b183      	cbz	r3, 3152 <le_enh_conn_complete+0x62>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3130:	2102      	movs	r1, #2
    3132:	2000      	movs	r0, #0
    3134:	f001 fb20 	bl	4778 <bt_conn_lookup_state_le>
		if (!conn) {
    3138:	4604      	mov	r4, r0
    313a:	b138      	cbz	r0, 314c <le_enh_conn_complete+0x5c>
		conn->err = evt->status;
    313c:	782b      	ldrb	r3, [r5, #0]
    313e:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3140:	2100      	movs	r1, #0
    3142:	f001 fbd3 	bl	48ec <bt_conn_set_state>
		bt_conn_unref(conn);
    3146:	4620      	mov	r0, r4
    3148:	f001 fb34 	bl	47b4 <bt_conn_unref>
}
    314c:	b008      	add	sp, #32
    314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3152:	4621      	mov	r1, r4
    3154:	a806      	add	r0, sp, #24
    3156:	f7ff f89d 	bl	2294 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    315a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    315e:	3b02      	subs	r3, #2
    3160:	b2db      	uxtb	r3, r3
    3162:	2b01      	cmp	r3, #1
    3164:	d825      	bhi.n	31b2 <le_enh_conn_complete+0xc2>
    3166:	2206      	movs	r2, #6
    3168:	f105 0111 	add.w	r1, r5, #17
    316c:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3170:	f88d 3018 	strb.w	r3, [sp, #24]
    3174:	f7fe fd67 	bl	1c46 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3178:	2301      	movs	r3, #1
    317a:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    317e:	2102      	movs	r1, #2
    3180:	a806      	add	r0, sp, #24
    3182:	f001 faf9 	bl	4778 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3186:	78eb      	ldrb	r3, [r5, #3]
    3188:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    318a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    318c:	d109      	bne.n	31a2 <le_enh_conn_complete+0xb2>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    318e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    3192:	484a      	ldr	r0, [pc, #296]	; (32bc <le_enh_conn_complete+0x1cc>)
    3194:	f7ff f892 	bl	22bc <atomic_and>
		if (!conn) {
    3198:	b984      	cbnz	r4, 31bc <le_enh_conn_complete+0xcc>
			conn = bt_conn_add_le(&id_addr);
    319a:	a806      	add	r0, sp, #24
    319c:	f001 fa4c 	bl	4638 <bt_conn_add_le>
    31a0:	4604      	mov	r4, r0
	if (!conn) {
    31a2:	b95c      	cbnz	r4, 31bc <le_enh_conn_complete+0xcc>
		BT_ERR("Unable to add new conn for handle %u", handle);
    31a4:	463b      	mov	r3, r7
    31a6:	4a43      	ldr	r2, [pc, #268]	; (32b4 <le_enh_conn_complete+0x1c4>)
    31a8:	4945      	ldr	r1, [pc, #276]	; (32c0 <le_enh_conn_complete+0x1d0>)
    31aa:	2003      	movs	r0, #3
    31ac:	f7fe ff12 	bl	1fd4 <bt_log>
		return;
    31b0:	e7cc      	b.n	314c <le_enh_conn_complete+0x5c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    31b2:	4621      	mov	r1, r4
    31b4:	a804      	add	r0, sp, #16
    31b6:	f7ff f86d 	bl	2294 <bt_addr_le_copy>
    31ba:	e7e0      	b.n	317e <le_enh_conn_complete+0x8e>
	conn->handle   = handle;
    31bc:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    31be:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    31c0:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    31c4:	f7ff f866 	bl	2294 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    31c8:	7e2a      	ldrb	r2, [r5, #24]
    31ca:	7deb      	ldrb	r3, [r5, #23]
    31cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    31d4:	7eaa      	ldrb	r2, [r5, #26]
    31d6:	7e6b      	ldrb	r3, [r5, #25]
    31d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31dc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    31e0:	7eeb      	ldrb	r3, [r5, #27]
    31e2:	7f2a      	ldrb	r2, [r5, #28]
    31e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    31e8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    31ec:	78ee      	ldrb	r6, [r5, #3]
    31ee:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    31f0:	2e01      	cmp	r6, #1
    31f2:	d11a      	bne.n	322a <le_enh_conn_complete+0x13a>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    31f4:	4f33      	ldr	r7, [pc, #204]	; (32c4 <le_enh_conn_complete+0x1d4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    31f6:	a904      	add	r1, sp, #16
    31f8:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    31fc:	f7ff f84a 	bl	2294 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3200:	4639      	mov	r1, r7
    3202:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3206:	f7ff f845 	bl	2294 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    320a:	2107      	movs	r1, #7
    320c:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3210:	f7ff f8d6 	bl	23c0 <atomic_test_bit>
    3214:	b148      	cbz	r0, 322a <le_enh_conn_complete+0x13a>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3216:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    321a:	2200      	movs	r2, #0
    321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3220:	4313      	orrs	r3, r2
    3222:	d002      	beq.n	322a <le_enh_conn_complete+0x13a>
			set_advertise_enable(true);
    3224:	4630      	mov	r0, r6
    3226:	f7ff f9ff 	bl	2628 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    322a:	2103      	movs	r1, #3
    322c:	4620      	mov	r0, r4
    322e:	f001 fb5d 	bl	48ec <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    3232:	7a63      	ldrb	r3, [r4, #9]
    3234:	2b03      	cmp	r3, #3
    3236:	d118      	bne.n	326a <le_enh_conn_complete+0x17a>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3238:	78eb      	ldrb	r3, [r5, #3]
    323a:	b123      	cbz	r3, 3246 <le_enh_conn_complete+0x156>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    323c:	4b21      	ldr	r3, [pc, #132]	; (32c4 <le_enh_conn_complete+0x1d4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    323e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3242:	0719      	lsls	r1, r3, #28
    3244:	d518      	bpl.n	3278 <le_enh_conn_complete+0x188>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3246:	2102      	movs	r1, #2
    3248:	f242 0016 	movw	r0, #8214	; 0x2016
    324c:	f7ff f8c6 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    3250:	4605      	mov	r5, r0
    3252:	b188      	cbz	r0, 3278 <le_enh_conn_complete+0x188>
	cp = net_buf_add(buf, sizeof(*cp));
    3254:	2102      	movs	r1, #2
    3256:	3008      	adds	r0, #8
    3258:	f00f fa50 	bl	126fc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    325c:	8823      	ldrh	r3, [r4, #0]
    325e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3260:	4629      	mov	r1, r5
    3262:	f242 0016 	movw	r0, #8214	; 0x2016
    3266:	f7ff fab5 	bl	27d4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    326a:	4620      	mov	r0, r4
    326c:	f001 faa2 	bl	47b4 <bt_conn_unref>
	bt_le_scan_update(false);
    3270:	2000      	movs	r0, #0
    3272:	f7ff fb2d 	bl	28d0 <bt_le_scan_update>
    3276:	e769      	b.n	314c <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    3278:	4d12      	ldr	r5, [pc, #72]	; (32c4 <le_enh_conn_complete+0x1d4>)
    327a:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    327e:	07d2      	lsls	r2, r2, #31
    3280:	d508      	bpl.n	3294 <le_enh_conn_complete+0x1a4>
		err = hci_le_set_phy(conn);
    3282:	4620      	mov	r0, r4
    3284:	f7ff feea 	bl	305c <hci_le_set_phy.isra.28>
		if (!err) {
    3288:	b920      	cbnz	r0, 3294 <le_enh_conn_complete+0x1a4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    328a:	2180      	movs	r1, #128	; 0x80
    328c:	1d20      	adds	r0, r4, #4
    328e:	f7ff f804 	bl	229a <atomic_or>
    3292:	e7ea      	b.n	326a <le_enh_conn_complete+0x17a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3294:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3298:	069b      	lsls	r3, r3, #26
    329a:	d506      	bpl.n	32aa <le_enh_conn_complete+0x1ba>
		err = hci_le_set_data_len(conn);
    329c:	4620      	mov	r0, r4
    329e:	f7ff fefd 	bl	309c <hci_le_set_data_len.isra.29>
		if (!err) {
    32a2:	b910      	cbnz	r0, 32aa <le_enh_conn_complete+0x1ba>
    32a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    32a8:	e7f0      	b.n	328c <le_enh_conn_complete+0x19c>
	update_conn_param(conn);
    32aa:	4620      	mov	r0, r4
    32ac:	f7ff f818 	bl	22e0 <update_conn_param>
    32b0:	e7db      	b.n	326a <le_enh_conn_complete+0x17a>
    32b2:	bf00      	nop
    32b4:	00014916 	.word	0x00014916
    32b8:	00015627 	.word	0x00015627
    32bc:	20003af8 	.word	0x20003af8
    32c0:	0001564f 	.word	0x0001564f
    32c4:	20003a88 	.word	0x20003a88

000032c8 <le_conn_param_neg_reply>:
{
    32c8:	b570      	push	{r4, r5, r6, lr}
    32ca:	4606      	mov	r6, r0
    32cc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    32ce:	f242 0021 	movw	r0, #8225	; 0x2021
    32d2:	2103      	movs	r1, #3
    32d4:	f7ff f882 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    32d8:	4604      	mov	r4, r0
    32da:	b160      	cbz	r0, 32f6 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    32dc:	2103      	movs	r1, #3
    32de:	3008      	adds	r0, #8
    32e0:	f00f fa0c 	bl	126fc <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    32e4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    32e6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    32e8:	4621      	mov	r1, r4
    32ea:	f242 0021 	movw	r0, #8225	; 0x2021
}
    32ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    32f2:	f7ff ba6f 	b.w	27d4 <bt_hci_cmd_send>
}
    32f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    32fa:	bd70      	pop	{r4, r5, r6, pc}

000032fc <hci_tx_thread>:
{
    32fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3300:	b085      	sub	sp, #20
    3302:	f010 fa51 	bl	137a8 <_impl_k_current_get>
	BT_DBG("Started");
    3306:	4a6a      	ldr	r2, [pc, #424]	; (34b0 <hci_tx_thread+0x1b4>)
    3308:	496a      	ldr	r1, [pc, #424]	; (34b4 <hci_tx_thread+0x1b8>)
		events[0].state = K_POLL_STATE_NOT_READY;
    330a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 34c0 <hci_tx_thread+0x1c4>
	BT_DBG("Started");
    330e:	4603      	mov	r3, r0
    3310:	2007      	movs	r0, #7
    3312:	f7fe fe5f 	bl	1fd4 <bt_log>
		events[0].state = K_POLL_STATE_NOT_READY;
    3316:	f899 300d 	ldrb.w	r3, [r9, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    331a:	4867      	ldr	r0, [pc, #412]	; (34b8 <hci_tx_thread+0x1bc>)
		events[0].state = K_POLL_STATE_NOT_READY;
    331c:	f36f 1307 	bfc	r3, #4, #4
    3320:	f889 300d 	strb.w	r3, [r9, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3324:	f001 fa82 	bl	482c <bt_conn_prepare_events>
    3328:	1c47      	adds	r7, r0, #1
    332a:	f010 fa3d 	bl	137a8 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    332e:	4a60      	ldr	r2, [pc, #384]	; (34b0 <hci_tx_thread+0x1b4>)
    3330:	4962      	ldr	r1, [pc, #392]	; (34bc <hci_tx_thread+0x1c0>)
    3332:	9700      	str	r7, [sp, #0]
    3334:	4603      	mov	r3, r0
    3336:	2007      	movs	r0, #7
    3338:	f7fe fe4c 	bl	1fd4 <bt_log>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    333c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3340:	4639      	mov	r1, r7
    3342:	485f      	ldr	r0, [pc, #380]	; (34c0 <hci_tx_thread+0x1c4>)
    3344:	f010 fe80 	bl	14048 <_impl_k_poll>
		BT_ASSERT(err == 0);
    3348:	b150      	cbz	r0, 3360 <hci_tx_thread+0x64>
    334a:	4a59      	ldr	r2, [pc, #356]	; (34b0 <hci_tx_thread+0x1b4>)
    334c:	495d      	ldr	r1, [pc, #372]	; (34c4 <hci_tx_thread+0x1c8>)
	BT_ASSERT(buf);
    334e:	2003      	movs	r0, #3
    3350:	f7fe fe40 	bl	1fd4 <bt_log>
    3354:	4040      	eors	r0, r0
    3356:	f380 8811 	msr	BASEPRI, r0
    335a:	f04f 0004 	mov.w	r0, #4
    335e:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3360:	f010 fa22 	bl	137a8 <_impl_k_current_get>
	BT_DBG("count %d", count);
    3364:	9700      	str	r7, [sp, #0]
    3366:	4603      	mov	r3, r0
    3368:	4a57      	ldr	r2, [pc, #348]	; (34c8 <hci_tx_thread+0x1cc>)
    336a:	4958      	ldr	r1, [pc, #352]	; (34cc <hci_tx_thread+0x1d0>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    336c:	4d58      	ldr	r5, [pc, #352]	; (34d0 <hci_tx_thread+0x1d4>)
	BT_DBG("count %d", count);
    336e:	4c54      	ldr	r4, [pc, #336]	; (34c0 <hci_tx_thread+0x1c4>)
		BT_DBG("ev->state %u", ev->state);
    3370:	f8df a154 	ldr.w	sl, [pc, #340]	; 34c8 <hci_tx_thread+0x1cc>
	BT_DBG("count %d", count);
    3374:	2007      	movs	r0, #7
    3376:	f7fe fe2d 	bl	1fd4 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    337a:	f105 0bc4 	add.w	fp, r5, #196	; 0xc4
	for (; count; ev++, count--) {
    337e:	b917      	cbnz	r7, 3386 <hci_tx_thread+0x8a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3380:	f010 f9e2 	bl	13748 <_impl_k_yield>
    3384:	e7c7      	b.n	3316 <hci_tx_thread+0x1a>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3386:	f010 fa0f 	bl	137a8 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    338a:	7b63      	ldrb	r3, [r4, #13]
    338c:	4951      	ldr	r1, [pc, #324]	; (34d4 <hci_tx_thread+0x1d8>)
    338e:	091b      	lsrs	r3, r3, #4
    3390:	9300      	str	r3, [sp, #0]
    3392:	4652      	mov	r2, sl
    3394:	4603      	mov	r3, r0
    3396:	2007      	movs	r0, #7
    3398:	f7fe fe1c 	bl	1fd4 <bt_log>
		switch (ev->state) {
    339c:	7b63      	ldrb	r3, [r4, #13]
    339e:	091b      	lsrs	r3, r3, #4
    33a0:	2b01      	cmp	r3, #1
    33a2:	d96b      	bls.n	347c <hci_tx_thread+0x180>
    33a4:	2b04      	cmp	r3, #4
    33a6:	d17c      	bne.n	34a2 <hci_tx_thread+0x1a6>
			if (ev->tag == BT_EVENT_CMD_TX) {
    33a8:	f894 800c 	ldrb.w	r8, [r4, #12]
    33ac:	f1b8 0f00 	cmp.w	r8, #0
    33b0:	d167      	bne.n	3482 <hci_tx_thread+0x186>
    33b2:	f010 f9f9 	bl	137a8 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    33b6:	4a48      	ldr	r2, [pc, #288]	; (34d8 <hci_tx_thread+0x1dc>)
    33b8:	4948      	ldr	r1, [pc, #288]	; (34dc <hci_tx_thread+0x1e0>)
    33ba:	4603      	mov	r3, r0
    33bc:	2007      	movs	r0, #7
    33be:	f7fe fe09 	bl	1fd4 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    33c2:	4641      	mov	r1, r8
    33c4:	4658      	mov	r0, fp
    33c6:	f00f f93d 	bl	12644 <net_buf_get>
	BT_ASSERT(buf);
    33ca:	4606      	mov	r6, r0
    33cc:	b910      	cbnz	r0, 33d4 <hci_tx_thread+0xd8>
    33ce:	4a42      	ldr	r2, [pc, #264]	; (34d8 <hci_tx_thread+0x1dc>)
    33d0:	4943      	ldr	r1, [pc, #268]	; (34e0 <hci_tx_thread+0x1e4>)
    33d2:	e7bc      	b.n	334e <hci_tx_thread+0x52>
    33d4:	f010 f9e8 	bl	137a8 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    33d8:	4a3f      	ldr	r2, [pc, #252]	; (34d8 <hci_tx_thread+0x1dc>)
    33da:	4942      	ldr	r1, [pc, #264]	; (34e4 <hci_tx_thread+0x1e8>)
    33dc:	4603      	mov	r3, r0
    33de:	2007      	movs	r0, #7
    33e0:	f7fe fdf8 	bl	1fd4 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    33e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33e8:	483f      	ldr	r0, [pc, #252]	; (34e8 <hci_tx_thread+0x1ec>)
    33ea:	f010 fa14 	bl	13816 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    33ee:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    33f2:	b153      	cbz	r3, 340a <hci_tx_thread+0x10e>
		BT_ERR("Uncleared pending sent_cmd");
    33f4:	4a38      	ldr	r2, [pc, #224]	; (34d8 <hci_tx_thread+0x1dc>)
    33f6:	493d      	ldr	r1, [pc, #244]	; (34ec <hci_tx_thread+0x1f0>)
    33f8:	2003      	movs	r0, #3
    33fa:	f7fe fdeb 	bl	1fd4 <bt_log>
		net_buf_unref(bt_dev.sent_cmd);
    33fe:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    3402:	f00f f949 	bl	12698 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3406:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    340a:	4630      	mov	r0, r6
    340c:	f00f f972 	bl	126f4 <net_buf_ref>
    3410:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3414:	f010 f9c8 	bl	137a8 <_impl_k_current_get>
    3418:	9003      	str	r0, [sp, #12]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    341a:	4630      	mov	r0, r6
    341c:	f00f f87e 	bl	1251c <net_buf_id>
    3420:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 34fc <hci_tx_thread+0x200>
    3424:	9601      	str	r6, [sp, #4]
    3426:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    342a:	9b03      	ldr	r3, [sp, #12]
    342c:	8842      	ldrh	r2, [r0, #2]
    342e:	9200      	str	r2, [sp, #0]
    3430:	492f      	ldr	r1, [pc, #188]	; (34f0 <hci_tx_thread+0x1f4>)
    3432:	4a29      	ldr	r2, [pc, #164]	; (34d8 <hci_tx_thread+0x1dc>)
    3434:	2007      	movs	r0, #7
    3436:	f7fe fdcd 	bl	1fd4 <bt_log>
	err = bt_send(buf);
    343a:	4630      	mov	r0, r6
    343c:	f7ff f9a0 	bl	2780 <bt_send>
	if (err) {
    3440:	4603      	mov	r3, r0
    3442:	b1d8      	cbz	r0, 347c <hci_tx_thread+0x180>
		BT_ERR("Unable to send to driver (err %d)", err);
    3444:	4a24      	ldr	r2, [pc, #144]	; (34d8 <hci_tx_thread+0x1dc>)
    3446:	492b      	ldr	r1, [pc, #172]	; (34f4 <hci_tx_thread+0x1f8>)
    3448:	2003      	movs	r0, #3
    344a:	f7fe fdc3 	bl	1fd4 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    344e:	4826      	ldr	r0, [pc, #152]	; (34e8 <hci_tx_thread+0x1ec>)
    3450:	f010 f9b9 	bl	137c6 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3454:	4630      	mov	r0, r6
    3456:	f00f f861 	bl	1251c <net_buf_id>
    345a:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
    345e:	2200      	movs	r2, #0
    3460:	211f      	movs	r1, #31
    3462:	8840      	ldrh	r0, [r0, #2]
    3464:	f7fe ff4a 	bl	22fc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3468:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    346c:	f00f f914 	bl	12698 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3470:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3472:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    3474:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    3478:	f00f f90e 	bl	12698 <net_buf_unref>
	for (; count; ev++, count--) {
    347c:	3414      	adds	r4, #20
    347e:	3f01      	subs	r7, #1
    3480:	e77d      	b.n	337e <hci_tx_thread+0x82>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3482:	f1b8 0f01 	cmp.w	r8, #1
    3486:	d104      	bne.n	3492 <hci_tx_thread+0x196>
					conn = CONTAINER_OF(ev->fifo,
    3488:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    348a:	3818      	subs	r0, #24
    348c:	f000 fff2 	bl	4474 <bt_conn_notify_tx>
    3490:	e7f4      	b.n	347c <hci_tx_thread+0x180>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3492:	f1b8 0f02 	cmp.w	r8, #2
    3496:	d1f1      	bne.n	347c <hci_tx_thread+0x180>
					conn = CONTAINER_OF(ev->fifo,
    3498:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    349a:	3828      	subs	r0, #40	; 0x28
    349c:	f001 fce6 	bl	4e6c <bt_conn_process_tx>
    34a0:	e7ec      	b.n	347c <hci_tx_thread+0x180>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    34a2:	4652      	mov	r2, sl
    34a4:	4914      	ldr	r1, [pc, #80]	; (34f8 <hci_tx_thread+0x1fc>)
    34a6:	2004      	movs	r0, #4
    34a8:	f7fe fd94 	bl	1fd4 <bt_log>
    34ac:	e7e6      	b.n	347c <hci_tx_thread+0x180>
    34ae:	bf00      	nop
    34b0:	00014a54 	.word	0x00014a54
    34b4:	000154dd 	.word	0x000154dd
    34b8:	20003b74 	.word	0x20003b74
    34bc:	000154ee 	.word	0x000154ee
    34c0:	20003b60 	.word	0x20003b60
    34c4:	00015515 	.word	0x00015515
    34c8:	00014a45 	.word	0x00014a45
    34cc:	00015533 	.word	0x00015533
    34d0:	20003a88 	.word	0x20003a88
    34d4:	00015545 	.word	0x00015545
    34d8:	00014a3c 	.word	0x00014a3c
    34dc:	0001555b 	.word	0x0001555b
    34e0:	00015578 	.word	0x00015578
    34e4:	00015591 	.word	0x00015591
    34e8:	20003b30 	.word	0x20003b30
    34ec:	000155b0 	.word	0x000155b0
    34f0:	000155cf 	.word	0x000155cf
    34f4:	00014ce5 	.word	0x00014ce5
    34f8:	00015602 	.word	0x00015602
    34fc:	20000298 	.word	0x20000298

00003500 <bt_recv>:
{
    3500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3504:	7d03      	ldrb	r3, [r0, #20]
    3506:	2b03      	cmp	r3, #3
    3508:	4604      	mov	r4, r0
    350a:	bf98      	it	ls
    350c:	4aab      	ldrls	r2, [pc, #684]	; (37bc <bt_recv+0x2bc>)
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    350e:	68a1      	ldr	r1, [r4, #8]
    3510:	bf98      	it	ls
    3512:	5cd0      	ldrbls	r0, [r2, r3]
    3514:	89a2      	ldrh	r2, [r4, #12]
{
    3516:	b093      	sub	sp, #76	; 0x4c
    3518:	bf88      	it	hi
    351a:	20ff      	movhi	r0, #255	; 0xff
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    351c:	f7fe fdc8 	bl	20b0 <bt_monitor_send>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3520:	f010 f942 	bl	137a8 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3524:	89a3      	ldrh	r3, [r4, #12]
    3526:	9301      	str	r3, [sp, #4]
    3528:	9400      	str	r4, [sp, #0]
    352a:	4603      	mov	r3, r0
    352c:	4aa4      	ldr	r2, [pc, #656]	; (37c0 <bt_recv+0x2c0>)
    352e:	49a5      	ldr	r1, [pc, #660]	; (37c4 <bt_recv+0x2c4>)
    3530:	2007      	movs	r0, #7
    3532:	f7fe fd4f 	bl	1fd4 <bt_log>
    3536:	7d26      	ldrb	r6, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    3538:	2e01      	cmp	r6, #1
    353a:	d04d      	beq.n	35d8 <bt_recv+0xd8>
    353c:	2e03      	cmp	r6, #3
    353e:	f040 83c5 	bne.w	3ccc <bt_recv+0x7cc>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3542:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3544:	887d      	ldrh	r5, [r7, #2]
    3546:	f010 f92f 	bl	137a8 <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    354a:	4a9f      	ldr	r2, [pc, #636]	; (37c8 <bt_recv+0x2c8>)
    354c:	499f      	ldr	r1, [pc, #636]	; (37cc <bt_recv+0x2cc>)
    354e:	9400      	str	r4, [sp, #0]
    3550:	4603      	mov	r3, r0
    3552:	2007      	movs	r0, #7
    3554:	f7fe fd3e 	bl	1fd4 <bt_log>
	handle = sys_le16_to_cpu(hdr->handle);
    3558:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    355a:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3560:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3562:	23ff      	movs	r3, #255	; 0xff
    3564:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3566:	2104      	movs	r1, #4
    3568:	f104 0008 	add.w	r0, r4, #8
    356c:	f00f f8f4 	bl	12758 <net_buf_simple_pull>
    3570:	f010 f91a 	bl	137a8 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    3574:	8ae3      	ldrh	r3, [r4, #22]
    3576:	9300      	str	r3, [sp, #0]
    3578:	9702      	str	r7, [sp, #8]
    357a:	4603      	mov	r3, r0
    357c:	9501      	str	r5, [sp, #4]
    357e:	4a92      	ldr	r2, [pc, #584]	; (37c8 <bt_recv+0x2c8>)
    3580:	4993      	ldr	r1, [pc, #588]	; (37d0 <bt_recv+0x2d0>)
    3582:	2007      	movs	r0, #7
    3584:	f7fe fd26 	bl	1fd4 <bt_log>
	if (buf->len != len) {
    3588:	89a3      	ldrh	r3, [r4, #12]
    358a:	429d      	cmp	r5, r3
    358c:	d009      	beq.n	35a2 <bt_recv+0xa2>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    358e:	9500      	str	r5, [sp, #0]
    3590:	4a8d      	ldr	r2, [pc, #564]	; (37c8 <bt_recv+0x2c8>)
    3592:	4990      	ldr	r1, [pc, #576]	; (37d4 <bt_recv+0x2d4>)
    3594:	4630      	mov	r0, r6
    3596:	f7fe fd1d 	bl	1fd4 <bt_log>
	net_buf_unref(buf);
    359a:	4620      	mov	r0, r4
    359c:	f00f f87c 	bl	12698 <net_buf_unref>
    35a0:	e016      	b.n	35d0 <bt_recv+0xd0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    35a2:	8ae0      	ldrh	r0, [r4, #22]
    35a4:	f001 f8b8 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    35a8:	4605      	mov	r5, r0
    35aa:	b930      	cbnz	r0, 35ba <bt_recv+0xba>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    35ac:	8ae3      	ldrh	r3, [r4, #22]
    35ae:	4a86      	ldr	r2, [pc, #536]	; (37c8 <bt_recv+0x2c8>)
    35b0:	4989      	ldr	r1, [pc, #548]	; (37d8 <bt_recv+0x2d8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    35b2:	2003      	movs	r0, #3
    35b4:	f7fe fd0e 	bl	1fd4 <bt_log>
    35b8:	e7ef      	b.n	359a <bt_recv+0x9a>
	acl(buf)->id = bt_conn_get_id(conn);
    35ba:	f001 fce7 	bl	4f8c <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    35be:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    35c0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    35c2:	4621      	mov	r1, r4
    35c4:	4628      	mov	r0, r5
    35c6:	f000 fe6b 	bl	42a0 <bt_conn_recv>
	bt_conn_unref(conn);
    35ca:	4628      	mov	r0, r5
    35cc:	f001 f8f2 	bl	47b4 <bt_conn_unref>
		return 0;
    35d0:	2000      	movs	r0, #0
}
    35d2:	b013      	add	sp, #76	; 0x4c
    35d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    35d8:	68a5      	ldr	r5, [r4, #8]
    35da:	f010 f8e5 	bl	137a8 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    35de:	782b      	ldrb	r3, [r5, #0]
    35e0:	9300      	str	r3, [sp, #0]
    35e2:	4a7e      	ldr	r2, [pc, #504]	; (37dc <bt_recv+0x2dc>)
    35e4:	497e      	ldr	r1, [pc, #504]	; (37e0 <bt_recv+0x2e0>)
    35e6:	4603      	mov	r3, r0
    35e8:	2007      	movs	r0, #7
    35ea:	f7fe fcf3 	bl	1fd4 <bt_log>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    35ee:	782b      	ldrb	r3, [r5, #0]
    35f0:	2b13      	cmp	r3, #19
    35f2:	f200 8377 	bhi.w	3ce4 <bt_recv+0x7e4>
    35f6:	409e      	lsls	r6, r3
    35f8:	f416 2f0c 	tst.w	r6, #573440	; 0x8c000
    35fc:	f000 8372 	beq.w	3ce4 <bt_recv+0x7e4>
    3600:	4a76      	ldr	r2, [pc, #472]	; (37dc <bt_recv+0x2dc>)
    3602:	4978      	ldr	r1, [pc, #480]	; (37e4 <bt_recv+0x2e4>)
    3604:	2003      	movs	r0, #3
    3606:	f7fe fce5 	bl	1fd4 <bt_log>
    360a:	4040      	eors	r0, r0
    360c:	f380 8811 	msr	BASEPRI, r0
    3610:	f04f 0004 	mov.w	r0, #4
    3614:	df02      	svc	2
    3616:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3618:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    361c:	f010 f8c4 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    3620:	78f3      	ldrb	r3, [r6, #3]
    3622:	9302      	str	r3, [sp, #8]
    3624:	f8cd 8004 	str.w	r8, [sp, #4]
    3628:	7833      	ldrb	r3, [r6, #0]
    362a:	9300      	str	r3, [sp, #0]
    362c:	4a6e      	ldr	r2, [pc, #440]	; (37e8 <bt_recv+0x2e8>)
    362e:	496f      	ldr	r1, [pc, #444]	; (37ec <bt_recv+0x2ec>)
    3630:	4603      	mov	r3, r0
    3632:	2007      	movs	r0, #7
    3634:	f7fe fcce 	bl	1fd4 <bt_log>
	if (evt->status) {
    3638:	7837      	ldrb	r7, [r6, #0]
    363a:	2f00      	cmp	r7, #0
    363c:	d1ad      	bne.n	359a <bt_recv+0x9a>
	conn = bt_conn_lookup_handle(handle);
    363e:	4640      	mov	r0, r8
    3640:	f001 f86a 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    3644:	4605      	mov	r5, r0
    3646:	b9a8      	cbnz	r0, 3674 <bt_recv+0x174>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3648:	4643      	mov	r3, r8
    364a:	4a67      	ldr	r2, [pc, #412]	; (37e8 <bt_recv+0x2e8>)
    364c:	4968      	ldr	r1, [pc, #416]	; (37f0 <bt_recv+0x2f0>)
    364e:	2003      	movs	r0, #3
    3650:	f7fe fcc0 	bl	1fd4 <bt_log>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3654:	2107      	movs	r1, #7
    3656:	4867      	ldr	r0, [pc, #412]	; (37f4 <bt_recv+0x2f4>)
    3658:	f7fe feb2 	bl	23c0 <atomic_test_bit>
    365c:	2800      	cmp	r0, #0
    365e:	d09c      	beq.n	359a <bt_recv+0x9a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3660:	2106      	movs	r1, #6
    3662:	4864      	ldr	r0, [pc, #400]	; (37f4 <bt_recv+0x2f4>)
    3664:	f7fe feac 	bl	23c0 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3668:	2800      	cmp	r0, #0
    366a:	d196      	bne.n	359a <bt_recv+0x9a>
		set_advertise_enable(true);
    366c:	2001      	movs	r0, #1
    366e:	f7fe ffdb 	bl	2628 <set_advertise_enable>
    3672:	e792      	b.n	359a <bt_recv+0x9a>
	conn->err = evt->reason;
    3674:	78f3      	ldrb	r3, [r6, #3]
    3676:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3678:	495f      	ldr	r1, [pc, #380]	; (37f8 <bt_recv+0x2f8>)
    367a:	4860      	ldr	r0, [pc, #384]	; (37fc <bt_recv+0x2fc>)
    367c:	f010 fa54 	bl	13b28 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3680:	4639      	mov	r1, r7
    3682:	4628      	mov	r0, r5
    3684:	f001 f932 	bl	48ec <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    3688:	78ae      	ldrb	r6, [r5, #2]
	conn->handle = 0;
    368a:	802f      	strh	r7, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    368c:	b10e      	cbz	r6, 3692 <bt_recv+0x192>
	bt_conn_unref(conn);
    368e:	4628      	mov	r0, r5
    3690:	e0db      	b.n	384a <bt_recv+0x34a>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3692:	4631      	mov	r1, r6
    3694:	1d28      	adds	r0, r5, #4
    3696:	f7fe fe93 	bl	23c0 <atomic_test_bit>
    369a:	b130      	cbz	r0, 36aa <bt_recv+0x1aa>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    369c:	4628      	mov	r0, r5
    369e:	2101      	movs	r1, #1
    36a0:	f001 f924 	bl	48ec <bt_conn_set_state>
		bt_le_scan_update(false);
    36a4:	4630      	mov	r0, r6
    36a6:	f7ff f913 	bl	28d0 <bt_le_scan_update>
	bt_conn_unref(conn);
    36aa:	4628      	mov	r0, r5
    36ac:	f001 f882 	bl	47b4 <bt_conn_unref>
    36b0:	e7d0      	b.n	3654 <bt_recv+0x154>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    36b2:	68a5      	ldr	r5, [r4, #8]
    36b4:	f010 f878 	bl	137a8 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    36b8:	782b      	ldrb	r3, [r5, #0]
    36ba:	9300      	str	r3, [sp, #0]
    36bc:	4a50      	ldr	r2, [pc, #320]	; (3800 <bt_recv+0x300>)
    36be:	4951      	ldr	r1, [pc, #324]	; (3804 <bt_recv+0x304>)
    36c0:	4603      	mov	r3, r0
    36c2:	2007      	movs	r0, #7
    36c4:	f7fe fc86 	bl	1fd4 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    36c8:	2101      	movs	r1, #1
    36ca:	4630      	mov	r0, r6
    36cc:	f00f f844 	bl	12758 <net_buf_simple_pull>
	switch (evt->subevent) {
    36d0:	782d      	ldrb	r5, [r5, #0]
    36d2:	1e6b      	subs	r3, r5, #1
    36d4:	2b0b      	cmp	r3, #11
    36d6:	f200 82eb 	bhi.w	3cb0 <bt_recv+0x7b0>
    36da:	e8df f013 	tbh	[pc, r3, lsl #1]
    36de:	000c      	.short	0x000c
    36e0:	00570205 	.word	0x00570205
    36e4:	02e900b9 	.word	0x02e900b9
    36e8:	014800ef 	.word	0x014800ef
    36ec:	01cd01a3 	.word	0x01cd01a3
    36f0:	02e90055 	.word	0x02e90055
    36f4:	016f      	.short	0x016f
    36f6:	68a5      	ldr	r5, [r4, #8]
    36f8:	f010 f856 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    36fc:	1d2e      	adds	r6, r5, #4
    36fe:	4607      	mov	r7, r0
    3700:	4630      	mov	r0, r6
    3702:	f895 8000 	ldrb.w	r8, [r5]
    3706:	f895 9003 	ldrb.w	r9, [r5, #3]
    370a:	f7fe fb47 	bl	1d9c <bt_addr_le_str>
    370e:	4a3e      	ldr	r2, [pc, #248]	; (3808 <bt_recv+0x308>)
    3710:	9002      	str	r0, [sp, #8]
    3712:	463b      	mov	r3, r7
    3714:	493d      	ldr	r1, [pc, #244]	; (380c <bt_recv+0x30c>)
    3716:	2007      	movs	r0, #7
    3718:	e88d 0300 	stmia.w	sp, {r8, r9}
    371c:	f7fe fc5a 	bl	1fd4 <bt_log>
	enh.status         = evt->status;
    3720:	782b      	ldrb	r3, [r5, #0]
    3722:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	enh.handle         = evt->handle;
    3726:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    372a:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.role           = evt->role;
    372e:	78eb      	ldrb	r3, [r5, #3]
    3730:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	enh.interval       = evt->interval;
    3734:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    3738:	f8ad 303f 	strh.w	r3, [sp, #63]	; 0x3f
	enh.latency        = evt->latency;
    373c:	f8b5 300d 	ldrh.w	r3, [r5, #13]
    3740:	f8ad 3041 	strh.w	r3, [sp, #65]	; 0x41
	enh.supv_timeout   = evt->supv_timeout;
    3744:	f8b5 300f 	ldrh.w	r3, [r5, #15]
    3748:	f8ad 3043 	strh.w	r3, [sp, #67]	; 0x43
	enh.clock_accuracy = evt->clock_accuracy;
    374c:	7c6b      	ldrb	r3, [r5, #17]
    374e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3752:	4631      	mov	r1, r6
    3754:	a80b      	add	r0, sp, #44	; 0x2c
    3756:	f7fe fd9d 	bl	2294 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    375a:	2500      	movs	r5, #0
    375c:	2206      	movs	r2, #6
    375e:	a906      	add	r1, sp, #24
    3760:	f10d 0033 	add.w	r0, sp, #51	; 0x33
    3764:	9506      	str	r5, [sp, #24]
    3766:	f8ad 501c 	strh.w	r5, [sp, #28]
    376a:	f7fe fa6c 	bl	1c46 <memcpy>
    376e:	2206      	movs	r2, #6
    3770:	a908      	add	r1, sp, #32
    3772:	f10d 0039 	add.w	r0, sp, #57	; 0x39
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    3776:	9508      	str	r5, [sp, #32]
    3778:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    377c:	f7fe fa63 	bl	1c46 <memcpy>
	le_enh_conn_complete(&enh);
    3780:	a80a      	add	r0, sp, #40	; 0x28
		le_enh_conn_complete((void *)buf->data);
    3782:	f7ff fcb5 	bl	30f0 <le_enh_conn_complete>
    3786:	e708      	b.n	359a <bt_recv+0x9a>
    3788:	68a0      	ldr	r0, [r4, #8]
    378a:	e7fa      	b.n	3782 <bt_recv+0x282>
    378c:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    378e:	f8b5 7001 	ldrh.w	r7, [r5, #1]
    3792:	f010 f809 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    3796:	9701      	str	r7, [sp, #4]
    3798:	782b      	ldrb	r3, [r5, #0]
    379a:	9300      	str	r3, [sp, #0]
    379c:	4a1c      	ldr	r2, [pc, #112]	; (3810 <bt_recv+0x310>)
    379e:	491d      	ldr	r1, [pc, #116]	; (3814 <bt_recv+0x314>)
    37a0:	4603      	mov	r3, r0
    37a2:	2007      	movs	r0, #7
    37a4:	f7fe fc16 	bl	1fd4 <bt_log>
	conn = bt_conn_lookup_handle(handle);
    37a8:	4638      	mov	r0, r7
    37aa:	f000 ffb5 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    37ae:	4606      	mov	r6, r0
    37b0:	bba0      	cbnz	r0, 381c <bt_recv+0x31c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37b2:	4a17      	ldr	r2, [pc, #92]	; (3810 <bt_recv+0x310>)
    37b4:	463b      	mov	r3, r7
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37b6:	4918      	ldr	r1, [pc, #96]	; (3818 <bt_recv+0x318>)
    37b8:	e6fb      	b.n	35b2 <bt_recv+0xb2>
    37ba:	bf00      	nop
    37bc:	00014891 	.word	0x00014891
    37c0:	00014b81 	.word	0x00014b81
    37c4:	00014fe9 	.word	0x00014fe9
    37c8:	000148df 	.word	0x000148df
    37cc:	00014cb7 	.word	0x00014cb7
    37d0:	00015000 	.word	0x00015000
    37d4:	00015023 	.word	0x00015023
    37d8:	0001504b 	.word	0x0001504b
    37dc:	00014a32 	.word	0x00014a32
    37e0:	00015071 	.word	0x00015071
    37e4:	00015285 	.word	0x00015285
    37e8:	00014901 	.word	0x00014901
    37ec:	00015087 	.word	0x00015087
    37f0:	000150ae 	.word	0x000150ae
    37f4:	20003af8 	.word	0x20003af8
    37f8:	000150d8 	.word	0x000150d8
    37fc:	00002259 	.word	0x00002259
    3800:	00014a20 	.word	0x00014a20
    3804:	000150dc 	.word	0x000150dc
    3808:	0001492b 	.word	0x0001492b
    380c:	000150f5 	.word	0x000150f5
    3810:	00014997 	.word	0x00014997
    3814:	00015113 	.word	0x00015113
    3818:	00015131 	.word	0x00015131
	if (!evt->status) {
    381c:	782b      	ldrb	r3, [r5, #0]
    381e:	b99b      	cbnz	r3, 3848 <bt_recv+0x348>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3820:	792a      	ldrb	r2, [r5, #4]
    3822:	78eb      	ldrb	r3, [r5, #3]
    3824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3828:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    382c:	79aa      	ldrb	r2, [r5, #6]
    382e:	796b      	ldrb	r3, [r5, #5]
    3830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3834:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3838:	79eb      	ldrb	r3, [r5, #7]
    383a:	7a2a      	ldrb	r2, [r5, #8]
    383c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3840:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    3844:	f000 fcf0 	bl	4228 <notify_le_param_updated>
	bt_conn_unref(conn);
    3848:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    384a:	f000 ffb3 	bl	47b4 <bt_conn_unref>
    384e:	e6a4      	b.n	359a <bt_recv+0x9a>
    3850:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3852:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3856:	4638      	mov	r0, r7
    3858:	f000 ff5e 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    385c:	4605      	mov	r5, r0
    385e:	b910      	cbnz	r0, 3866 <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3860:	463b      	mov	r3, r7
    3862:	4a92      	ldr	r2, [pc, #584]	; (3aac <bt_recv+0x5ac>)
    3864:	e7a7      	b.n	37b6 <bt_recv+0x2b6>
	if (!evt->status) {
    3866:	7833      	ldrb	r3, [r6, #0]
    3868:	b923      	cbnz	r3, 3874 <bt_recv+0x374>
		memcpy(conn->le.features, evt->features,
    386a:	2208      	movs	r2, #8
    386c:	1cf1      	adds	r1, r6, #3
    386e:	3064      	adds	r0, #100	; 0x64
    3870:	f7fe f9e9 	bl	1c46 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3874:	4e8e      	ldr	r6, [pc, #568]	; (3ab0 <bt_recv+0x5b0>)
    3876:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    387a:	07d2      	lsls	r2, r2, #31
    387c:	d50c      	bpl.n	3898 <bt_recv+0x398>
    387e:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    3882:	07db      	lsls	r3, r3, #31
    3884:	d508      	bpl.n	3898 <bt_recv+0x398>
		err = hci_le_set_phy(conn);
    3886:	4628      	mov	r0, r5
    3888:	f7ff fbe8 	bl	305c <hci_le_set_phy.isra.28>
		if (!err) {
    388c:	b920      	cbnz	r0, 3898 <bt_recv+0x398>
    388e:	2180      	movs	r1, #128	; 0x80
    3890:	1d28      	adds	r0, r5, #4
    3892:	f7fe fd02 	bl	229a <atomic_or>
    3896:	e6fa      	b.n	368e <bt_recv+0x18e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3898:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    389c:	069f      	lsls	r7, r3, #26
    389e:	f140 8089 	bpl.w	39b4 <bt_recv+0x4b4>
    38a2:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    38a6:	069e      	lsls	r6, r3, #26
    38a8:	f140 8084 	bpl.w	39b4 <bt_recv+0x4b4>
		err = hci_le_set_data_len(conn);
    38ac:	4628      	mov	r0, r5
    38ae:	f7ff fbf5 	bl	309c <hci_le_set_data_len.isra.29>
		if (!err) {
    38b2:	2800      	cmp	r0, #0
    38b4:	d17e      	bne.n	39b4 <bt_recv+0x4b4>
    38b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    38ba:	e7e9      	b.n	3890 <bt_recv+0x390>
    38bc:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    38be:	78d9      	ldrb	r1, [r3, #3]
    38c0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    38c2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    38c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38c8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    38cc:	7959      	ldrb	r1, [r3, #5]
    38ce:	791a      	ldrb	r2, [r3, #4]
    38d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38d4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	param.latency = sys_le16_to_cpu(evt->latency);
    38d8:	799a      	ldrb	r2, [r3, #6]
    38da:	79d9      	ldrb	r1, [r3, #7]
    38dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38e0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38e4:	7a1a      	ldrb	r2, [r3, #8]
    38e6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    38e8:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38ea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    38ee:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38f0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	conn = bt_conn_lookup_handle(handle);
    38f4:	f000 ff10 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    38f8:	4680      	mov	r8, r0
    38fa:	b950      	cbnz	r0, 3912 <bt_recv+0x412>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38fc:	462b      	mov	r3, r5
    38fe:	4a6d      	ldr	r2, [pc, #436]	; (3ab4 <bt_recv+0x5b4>)
    3900:	496d      	ldr	r1, [pc, #436]	; (3ab8 <bt_recv+0x5b8>)
    3902:	2003      	movs	r0, #3
    3904:	f7fe fb66 	bl	1fd4 <bt_log>
		return le_conn_param_neg_reply(handle,
    3908:	2102      	movs	r1, #2
    390a:	4628      	mov	r0, r5
    390c:	f7ff fcdc 	bl	32c8 <le_conn_param_neg_reply>
    3910:	e643      	b.n	359a <bt_recv+0x9a>
	if (!le_param_req(conn, &param)) {
    3912:	a90a      	add	r1, sp, #40	; 0x28
    3914:	f000 fc9c 	bl	4250 <le_param_req>
    3918:	b928      	cbnz	r0, 3926 <bt_recv+0x426>
		err = le_conn_param_neg_reply(handle,
    391a:	211e      	movs	r1, #30
    391c:	4628      	mov	r0, r5
    391e:	f7ff fcd3 	bl	32c8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3922:	4640      	mov	r0, r8
    3924:	e791      	b.n	384a <bt_recv+0x34a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3926:	210e      	movs	r1, #14
    3928:	f242 0020 	movw	r0, #8224	; 0x2020
    392c:	f7fe fd56 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    3930:	4606      	mov	r6, r0
    3932:	2800      	cmp	r0, #0
    3934:	d0f5      	beq.n	3922 <bt_recv+0x422>
	cp = net_buf_add(buf, sizeof(*cp));
    3936:	210e      	movs	r1, #14
    3938:	3008      	adds	r0, #8
    393a:	f00e fedf 	bl	126fc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    393e:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    3940:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3942:	2100      	movs	r1, #0
    3944:	f7fe f9ab 	bl	1c9e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3948:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    394c:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    394e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    3952:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3954:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3958:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    395a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	cp->handle = sys_cpu_to_le16(handle);
    395e:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3960:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3962:	4631      	mov	r1, r6
    3964:	f242 0020 	movw	r0, #8224	; 0x2020
    3968:	f7fe ff34 	bl	27d4 <bt_hci_cmd_send>
    396c:	e7d9      	b.n	3922 <bt_recv+0x422>
    396e:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3970:	881e      	ldrh	r6, [r3, #0]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3972:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3974:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    3978:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    397c:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    3980:	4630      	mov	r0, r6
    3982:	f000 fec9 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    3986:	4605      	mov	r5, r0
    3988:	b910      	cbnz	r0, 3990 <bt_recv+0x490>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    398a:	4633      	mov	r3, r6
    398c:	4a4b      	ldr	r2, [pc, #300]	; (3abc <bt_recv+0x5bc>)
    398e:	e712      	b.n	37b6 <bt_recv+0x2b6>
    3990:	f00f ff0a 	bl	137a8 <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    3994:	4a49      	ldr	r2, [pc, #292]	; (3abc <bt_recv+0x5bc>)
    3996:	494a      	ldr	r1, [pc, #296]	; (3ac0 <bt_recv+0x5c0>)
    3998:	4603      	mov	r3, r0
    399a:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
    399e:	2007      	movs	r0, #7
    39a0:	f7fe fb18 	bl	1fd4 <bt_log>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39a4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    39a8:	1d28      	adds	r0, r5, #4
    39aa:	f7fe fc87 	bl	22bc <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    39ae:	05c0      	lsls	r0, r0, #23
    39b0:	f57f ae6d 	bpl.w	368e <bt_recv+0x18e>
	update_conn_param(conn);
    39b4:	4628      	mov	r0, r5
    39b6:	f7fe fc93 	bl	22e0 <update_conn_param>
    39ba:	e668      	b.n	368e <bt_recv+0x18e>
    39bc:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    39be:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    39c2:	4638      	mov	r0, r7
    39c4:	f000 fea8 	bl	4718 <bt_conn_lookup_handle>
	if (!conn) {
    39c8:	4605      	mov	r5, r0
    39ca:	b910      	cbnz	r0, 39d2 <bt_recv+0x4d2>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    39cc:	463b      	mov	r3, r7
    39ce:	4a3d      	ldr	r2, [pc, #244]	; (3ac4 <bt_recv+0x5c4>)
    39d0:	e6f1      	b.n	37b6 <bt_recv+0x2b6>
    39d2:	f00f fee9 	bl	137a8 <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    39d6:	7933      	ldrb	r3, [r6, #4]
    39d8:	9302      	str	r3, [sp, #8]
    39da:	78f3      	ldrb	r3, [r6, #3]
    39dc:	9301      	str	r3, [sp, #4]
    39de:	7833      	ldrb	r3, [r6, #0]
    39e0:	9300      	str	r3, [sp, #0]
    39e2:	4a38      	ldr	r2, [pc, #224]	; (3ac4 <bt_recv+0x5c4>)
    39e4:	4938      	ldr	r1, [pc, #224]	; (3ac8 <bt_recv+0x5c8>)
    39e6:	4603      	mov	r3, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    39e8:	1d2e      	adds	r6, r5, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    39ea:	2007      	movs	r0, #7
    39ec:	f7fe faf2 	bl	1fd4 <bt_log>
    39f0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    39f4:	4630      	mov	r0, r6
    39f6:	f7fe fc61 	bl	22bc <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    39fa:	0601      	lsls	r1, r0, #24
    39fc:	f57f ae47 	bpl.w	368e <bt_recv+0x18e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3a00:	4b2b      	ldr	r3, [pc, #172]	; (3ab0 <bt_recv+0x5b0>)
    3a02:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3a06:	069a      	lsls	r2, r3, #26
    3a08:	d5d4      	bpl.n	39b4 <bt_recv+0x4b4>
    3a0a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3a0e:	069b      	lsls	r3, r3, #26
    3a10:	d5d0      	bpl.n	39b4 <bt_recv+0x4b4>
		err = hci_le_set_data_len(conn);
    3a12:	4628      	mov	r0, r5
    3a14:	f7ff fb42 	bl	309c <hci_le_set_data_len.isra.29>
		if (!err) {
    3a18:	2800      	cmp	r0, #0
    3a1a:	d1cb      	bne.n	39b4 <bt_recv+0x4b4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3a20:	4630      	mov	r0, r6
    3a22:	e736      	b.n	3892 <bt_recv+0x392>
    3a24:	68a5      	ldr	r5, [r4, #8]
    3a26:	f00f febf 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3a2a:	782b      	ldrb	r3, [r5, #0]
    3a2c:	9300      	str	r3, [sp, #0]
    3a2e:	4a27      	ldr	r2, [pc, #156]	; (3acc <bt_recv+0x5cc>)
    3a30:	4927      	ldr	r1, [pc, #156]	; (3ad0 <bt_recv+0x5d0>)
    3a32:	4603      	mov	r3, r0
    3a34:	2007      	movs	r0, #7
    3a36:	f7fe facd 	bl	1fd4 <bt_log>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a3a:	f06f 0120 	mvn.w	r1, #32
    3a3e:	4825      	ldr	r0, [pc, #148]	; (3ad4 <bt_recv+0x5d4>)
    3a40:	f7fe fc3c 	bl	22bc <atomic_and>
	if (!evt->status) {
    3a44:	782b      	ldrb	r3, [r5, #0]
    3a46:	b943      	cbnz	r3, 3a5a <bt_recv+0x55a>
		memcpy(pub_key, evt->key, 64);
    3a48:	1c69      	adds	r1, r5, #1
    3a4a:	2240      	movs	r2, #64	; 0x40
    3a4c:	4822      	ldr	r0, [pc, #136]	; (3ad8 <bt_recv+0x5d8>)
    3a4e:	f7fe f8fa 	bl	1c46 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a52:	2110      	movs	r1, #16
    3a54:	481f      	ldr	r0, [pc, #124]	; (3ad4 <bt_recv+0x5d4>)
    3a56:	f7fe fc20 	bl	229a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a5a:	4b20      	ldr	r3, [pc, #128]	; (3adc <bt_recv+0x5dc>)
    3a5c:	681e      	ldr	r6, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3a5e:	1c6f      	adds	r7, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a60:	2e00      	cmp	r6, #0
    3a62:	f43f ad9a 	beq.w	359a <bt_recv+0x9a>
		cb->func(evt->status ? NULL : evt->key);
    3a66:	782a      	ldrb	r2, [r5, #0]
    3a68:	6833      	ldr	r3, [r6, #0]
    3a6a:	2a00      	cmp	r2, #0
    3a6c:	bf0c      	ite	eq
    3a6e:	4638      	moveq	r0, r7
    3a70:	2000      	movne	r0, #0
    3a72:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a74:	6876      	ldr	r6, [r6, #4]
    3a76:	e7f3      	b.n	3a60 <bt_recv+0x560>
    3a78:	68a5      	ldr	r5, [r4, #8]
	if (dh_key_cb) {
    3a7a:	4e19      	ldr	r6, [pc, #100]	; (3ae0 <bt_recv+0x5e0>)
    3a7c:	f00f fe94 	bl	137a8 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3a80:	782b      	ldrb	r3, [r5, #0]
    3a82:	9300      	str	r3, [sp, #0]
    3a84:	4a17      	ldr	r2, [pc, #92]	; (3ae4 <bt_recv+0x5e4>)
    3a86:	4912      	ldr	r1, [pc, #72]	; (3ad0 <bt_recv+0x5d0>)
    3a88:	4603      	mov	r3, r0
    3a8a:	2007      	movs	r0, #7
    3a8c:	f7fe faa2 	bl	1fd4 <bt_log>
	if (dh_key_cb) {
    3a90:	6832      	ldr	r2, [r6, #0]
    3a92:	2a00      	cmp	r2, #0
    3a94:	f43f ad81 	beq.w	359a <bt_recv+0x9a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3a98:	782b      	ldrb	r3, [r5, #0]
    3a9a:	b923      	cbnz	r3, 3aa6 <bt_recv+0x5a6>
    3a9c:	1c68      	adds	r0, r5, #1
    3a9e:	4790      	blx	r2
		dh_key_cb = NULL;
    3aa0:	2300      	movs	r3, #0
    3aa2:	6033      	str	r3, [r6, #0]
    3aa4:	e579      	b.n	359a <bt_recv+0x9a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3aa6:	2000      	movs	r0, #0
    3aa8:	e7f9      	b.n	3a9e <bt_recv+0x59e>
    3aaa:	bf00      	nop
    3aac:	00014943 	.word	0x00014943
    3ab0:	20003a88 	.word	0x20003a88
    3ab4:	00014985 	.word	0x00014985
    3ab8:	00015131 	.word	0x00015131
    3abc:	0001495b 	.word	0x0001495b
    3ac0:	00015159 	.word	0x00015159
    3ac4:	0001496e 	.word	0x0001496e
    3ac8:	00015189 	.word	0x00015189
    3acc:	000149af 	.word	0x000149af
    3ad0:	000151bc 	.word	0x000151bc
    3ad4:	20003af8 	.word	0x20003af8
    3ad8:	200002ac 	.word	0x200002ac
    3adc:	200002ec 	.word	0x200002ec
    3ae0:	200002a8 	.word	0x200002a8
    3ae4:	000149c0 	.word	0x000149c0
	u8_t num_reports = net_buf_pull_u8(buf);
    3ae8:	4630      	mov	r0, r6
    3aea:	f00e fe3d 	bl	12768 <net_buf_simple_pull_u8>
    3aee:	4680      	mov	r8, r0
    3af0:	f00f fe5a 	bl	137a8 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3af4:	f8cd 8000 	str.w	r8, [sp]
    3af8:	4603      	mov	r3, r0
    3afa:	4a86      	ldr	r2, [pc, #536]	; (3d14 <bt_recv+0x814>)
    3afc:	4986      	ldr	r1, [pc, #536]	; (3d18 <bt_recv+0x818>)
    3afe:	2007      	movs	r0, #7
    3b00:	f7fe fa68 	bl	1fd4 <bt_log>
	while (num_reports--) {
    3b04:	f1b8 0f00 	cmp.w	r8, #0
    3b08:	f43f ad47 	beq.w	359a <bt_recv+0x9a>
		info = (void *)buf->data;
    3b0c:	68a5      	ldr	r5, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3b0e:	2109      	movs	r1, #9
    3b10:	4630      	mov	r0, r6
    3b12:	f00e fe21 	bl	12758 <net_buf_simple_pull>
		rssi = info->data[info->length];
    3b16:	7a2b      	ldrb	r3, [r5, #8]
    3b18:	442b      	add	r3, r5
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3b1a:	f105 0901 	add.w	r9, r5, #1
		rssi = info->data[info->length];
    3b1e:	f993 b009 	ldrsb.w	fp, [r3, #9]
    3b22:	f00f fe41 	bl	137a8 <_impl_k_current_get>
    3b26:	4607      	mov	r7, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3b28:	4648      	mov	r0, r9
    3b2a:	f7fe f937 	bl	1d9c <bt_addr_le_str>
    3b2e:	f8cd b00c 	str.w	fp, [sp, #12]
    3b32:	7a2b      	ldrb	r3, [r5, #8]
    3b34:	9302      	str	r3, [sp, #8]
    3b36:	782b      	ldrb	r3, [r5, #0]
    3b38:	4978      	ldr	r1, [pc, #480]	; (3d1c <bt_recv+0x81c>)
    3b3a:	4a76      	ldr	r2, [pc, #472]	; (3d14 <bt_recv+0x814>)
    3b3c:	e88d 0009 	stmia.w	sp, {r0, r3}
    3b40:	463b      	mov	r3, r7
    3b42:	2007      	movs	r0, #7
    3b44:	f7fe fa46 	bl	1fd4 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b48:	786b      	ldrb	r3, [r5, #1]
    3b4a:	3b02      	subs	r3, #2
    3b4c:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3b4e:	4649      	mov	r1, r9
    3b50:	a80a      	add	r0, sp, #40	; 0x28
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b52:	f200 8098 	bhi.w	3c86 <bt_recv+0x786>
			bt_addr_le_copy(&id_addr, &info->addr);
    3b56:	f7fe fb9d 	bl	2294 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3b5a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3b5e:	3b02      	subs	r3, #2
    3b60:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		if (scan_dev_found_cb) {
    3b64:	4b6e      	ldr	r3, [pc, #440]	; (3d20 <bt_recv+0x820>)
    3b66:	681b      	ldr	r3, [r3, #0]
    3b68:	b1b3      	cbz	r3, 3b98 <bt_recv+0x698>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3b6a:	4630      	mov	r0, r6
    3b6c:	f00e fe0c 	bl	12788 <net_buf_simple_headroom>
	state->len = buf->len;
    3b70:	89a3      	ldrh	r3, [r4, #12]
    3b72:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    3b74:	7a2b      	ldrb	r3, [r5, #8]
    3b76:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3b78:	4b69      	ldr	r3, [pc, #420]	; (3d20 <bt_recv+0x820>)
    3b7a:	782a      	ldrb	r2, [r5, #0]
    3b7c:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    3b7e:	4682      	mov	sl, r0
    3b80:	461f      	mov	r7, r3
    3b82:	4659      	mov	r1, fp
    3b84:	4633      	mov	r3, r6
    3b86:	a80a      	add	r0, sp, #40	; 0x28
    3b88:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3b8a:	6923      	ldr	r3, [r4, #16]
    3b8c:	fa13 f38a 	uxtah	r3, r3, sl
    3b90:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3b92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3b96:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b98:	2109      	movs	r1, #9
    3b9a:	4862      	ldr	r0, [pc, #392]	; (3d24 <bt_recv+0x824>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3b9c:	782a      	ldrb	r2, [r5, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b9e:	f7fe fc0f 	bl	23c0 <atomic_test_bit>
    3ba2:	4682      	mov	sl, r0
    3ba4:	2800      	cmp	r0, #0
    3ba6:	d164      	bne.n	3c72 <bt_recv+0x772>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3ba8:	2a01      	cmp	r2, #1
    3baa:	d862      	bhi.n	3c72 <bt_recv+0x772>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3bac:	2101      	movs	r1, #1
    3bae:	a80a      	add	r0, sp, #40	; 0x28
    3bb0:	f000 fde2 	bl	4778 <bt_conn_lookup_state_le>
	if (!conn) {
    3bb4:	4607      	mov	r7, r0
    3bb6:	2800      	cmp	r0, #0
    3bb8:	d05b      	beq.n	3c72 <bt_recv+0x772>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3bba:	2108      	movs	r1, #8
    3bbc:	4859      	ldr	r0, [pc, #356]	; (3d24 <bt_recv+0x824>)
    3bbe:	f7fe fbff 	bl	23c0 <atomic_test_bit>
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d162      	bne.n	3c8c <bt_recv+0x78c>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3bc6:	2102      	movs	r1, #2
    3bc8:	4856      	ldr	r0, [pc, #344]	; (3d24 <bt_recv+0x824>)
    3bca:	f7fe fbf9 	bl	23c0 <atomic_test_bit>
    3bce:	b110      	cbz	r0, 3bd6 <bt_recv+0x6d6>
			set_random_address(&bt_dev.id_addr.a);
    3bd0:	4855      	ldr	r0, [pc, #340]	; (3d28 <bt_recv+0x828>)
    3bd2:	f7fe fce9 	bl	25a8 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3bd6:	4955      	ldr	r1, [pc, #340]	; (3d2c <bt_recv+0x82c>)
    3bd8:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3bdc:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3be0:	f7fe fb58 	bl	2294 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3be4:	4649      	mov	r1, r9
    3be6:	4650      	mov	r0, sl
    3be8:	f7fe fb54 	bl	2294 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3bec:	2119      	movs	r1, #25
    3bee:	f242 000d 	movw	r0, #8205	; 0x200d
    3bf2:	f7fe fbf3 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    3bf6:	4683      	mov	fp, r0
    3bf8:	2800      	cmp	r0, #0
    3bfa:	d04c      	beq.n	3c96 <bt_recv+0x796>
	cp = net_buf_add(buf, sizeof(*cp));
    3bfc:	2119      	movs	r1, #25
    3bfe:	3008      	adds	r0, #8
    3c00:	f00e fd7c 	bl	126fc <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3c04:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3c06:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3c08:	2100      	movs	r1, #0
    3c0a:	f7fe f848 	bl	1c9e <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3c0e:	2200      	movs	r2, #0
    3c10:	2360      	movs	r3, #96	; 0x60
    3c12:	f889 3000 	strb.w	r3, [r9]
    3c16:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3c1a:	f889 3002 	strb.w	r3, [r9, #2]
    3c1e:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c22:	4651      	mov	r1, sl
    3c24:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3c28:	9205      	str	r2, [sp, #20]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c2a:	f7fe fb33 	bl	2294 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3c2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    3c32:	f889 300c 	strb.w	r3, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3c36:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    3c3a:	f8a9 300d 	strh.w	r3, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3c3e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    3c42:	f8a9 300f 	strh.w	r3, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3c46:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    3c4a:	f8a9 3011 	strh.w	r3, [r9, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3c4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    3c52:	f8a9 3013 	strh.w	r3, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3c56:	9a05      	ldr	r2, [sp, #20]
    3c58:	4659      	mov	r1, fp
    3c5a:	f242 000d 	movw	r0, #8205	; 0x200d
    3c5e:	f7fe fc07 	bl	2470 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3c62:	b9c0      	cbnz	r0, 3c96 <bt_recv+0x796>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3c64:	4638      	mov	r0, r7
    3c66:	2102      	movs	r1, #2
    3c68:	f000 fe40 	bl	48ec <bt_conn_set_state>
	bt_conn_unref(conn);
    3c6c:	4638      	mov	r0, r7
    3c6e:	f000 fda1 	bl	47b4 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3c72:	7a29      	ldrb	r1, [r5, #8]
    3c74:	4630      	mov	r0, r6
    3c76:	3101      	adds	r1, #1
    3c78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3c7c:	f00e fd6c 	bl	12758 <net_buf_simple_pull>
    3c80:	fa5f f888 	uxtb.w	r8, r8
    3c84:	e73e      	b.n	3b04 <bt_recv+0x604>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3c86:	f7fe fb05 	bl	2294 <bt_addr_le_copy>
    3c8a:	e76b      	b.n	3b64 <bt_recv+0x664>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3c8c:	4650      	mov	r0, sl
    3c8e:	f7fe fc55 	bl	253c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3c92:	2800      	cmp	r0, #0
    3c94:	d097      	beq.n	3bc6 <bt_recv+0x6c6>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3c96:	231f      	movs	r3, #31
    3c98:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3c9a:	2100      	movs	r1, #0
    3c9c:	4638      	mov	r0, r7
    3c9e:	f000 fe25 	bl	48ec <bt_conn_set_state>
	bt_conn_unref(conn);
    3ca2:	4638      	mov	r0, r7
    3ca4:	f000 fd86 	bl	47b4 <bt_conn_unref>
	bt_le_scan_update(false);
    3ca8:	2000      	movs	r0, #0
    3caa:	f7fe fe11 	bl	28d0 <bt_le_scan_update>
    3cae:	e7e0      	b.n	3c72 <bt_recv+0x772>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3cb0:	89a6      	ldrh	r6, [r4, #12]
    3cb2:	68a0      	ldr	r0, [r4, #8]
    3cb4:	4631      	mov	r1, r6
    3cb6:	f7fe f815 	bl	1ce4 <bt_hex>
    3cba:	4a1d      	ldr	r2, [pc, #116]	; (3d30 <bt_recv+0x830>)
    3cbc:	491d      	ldr	r1, [pc, #116]	; (3d34 <bt_recv+0x834>)
    3cbe:	9001      	str	r0, [sp, #4]
    3cc0:	9600      	str	r6, [sp, #0]
    3cc2:	462b      	mov	r3, r5
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3cc4:	2004      	movs	r0, #4
    3cc6:	f7fe f985 	bl	1fd4 <bt_log>
    3cca:	e466      	b.n	359a <bt_recv+0x9a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3ccc:	4633      	mov	r3, r6
    3cce:	4a1a      	ldr	r2, [pc, #104]	; (3d38 <bt_recv+0x838>)
    3cd0:	491a      	ldr	r1, [pc, #104]	; (3d3c <bt_recv+0x83c>)
    3cd2:	2003      	movs	r0, #3
    3cd4:	f7fe f97e 	bl	1fd4 <bt_log>
		net_buf_unref(buf);
    3cd8:	4620      	mov	r0, r4
    3cda:	f00e fcdd 	bl	12698 <net_buf_unref>
		return -EINVAL;
    3cde:	f06f 0015 	mvn.w	r0, #21
    3ce2:	e476      	b.n	35d2 <bt_recv+0xd2>
	net_buf_pull(buf, sizeof(*hdr));
    3ce4:	f104 0608 	add.w	r6, r4, #8
    3ce8:	2102      	movs	r1, #2
    3cea:	4630      	mov	r0, r6
    3cec:	f00e fd34 	bl	12758 <net_buf_simple_pull>
	switch (hdr->evt) {
    3cf0:	782d      	ldrb	r5, [r5, #0]
    3cf2:	2d05      	cmp	r5, #5
    3cf4:	f43f ac8f 	beq.w	3616 <bt_recv+0x116>
    3cf8:	2d3e      	cmp	r5, #62	; 0x3e
    3cfa:	f43f acda 	beq.w	36b2 <bt_recv+0x1b2>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3cfe:	89a6      	ldrh	r6, [r4, #12]
    3d00:	68a0      	ldr	r0, [r4, #8]
    3d02:	4631      	mov	r1, r6
    3d04:	f7fd ffee 	bl	1ce4 <bt_hex>
    3d08:	9600      	str	r6, [sp, #0]
    3d0a:	9001      	str	r0, [sp, #4]
    3d0c:	462b      	mov	r3, r5
    3d0e:	4a0c      	ldr	r2, [pc, #48]	; (3d40 <bt_recv+0x840>)
    3d10:	490c      	ldr	r1, [pc, #48]	; (3d44 <bt_recv+0x844>)
    3d12:	e7d7      	b.n	3cc4 <bt_recv+0x7c4>
    3d14:	00014a12 	.word	0x00014a12
    3d18:	000151d2 	.word	0x000151d2
    3d1c:	000151f4 	.word	0x000151f4
    3d20:	200002f4 	.word	0x200002f4
    3d24:	20003af8 	.word	0x20003af8
    3d28:	20003a89 	.word	0x20003a89
    3d2c:	20003a88 	.word	0x20003a88
    3d30:	00014a20 	.word	0x00014a20
    3d34:	0001521e 	.word	0x0001521e
    3d38:	00014b81 	.word	0x00014b81
    3d3c:	0001526d 	.word	0x0001526d
    3d40:	00014a32 	.word	0x00014a32
    3d44:	00015247 	.word	0x00015247

00003d48 <bt_recv_prio>:
{
    3d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d4c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3d4e:	6886      	ldr	r6, [r0, #8]
    3d50:	2b03      	cmp	r3, #3
{
    3d52:	4604      	mov	r4, r0
    3d54:	bf96      	itet	ls
    3d56:	4a6e      	ldrls	r2, [pc, #440]	; (3f10 <bt_recv_prio+0x1c8>)
    3d58:	20ff      	movhi	r0, #255	; 0xff
    3d5a:	5cd0      	ldrbls	r0, [r2, r3]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3d5c:	89a2      	ldrh	r2, [r4, #12]
    3d5e:	4631      	mov	r1, r6
    3d60:	f7fe f9a6 	bl	20b0 <bt_monitor_send>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3d64:	7d23      	ldrb	r3, [r4, #20]
    3d66:	2b01      	cmp	r3, #1
    3d68:	d00a      	beq.n	3d80 <bt_recv_prio+0x38>
    3d6a:	4a6a      	ldr	r2, [pc, #424]	; (3f14 <bt_recv_prio+0x1cc>)
    3d6c:	496a      	ldr	r1, [pc, #424]	; (3f18 <bt_recv_prio+0x1d0>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3d6e:	2003      	movs	r0, #3
    3d70:	f7fe f930 	bl	1fd4 <bt_log>
    3d74:	4040      	eors	r0, r0
    3d76:	f380 8811 	msr	BASEPRI, r0
    3d7a:	f04f 0004 	mov.w	r0, #4
    3d7e:	df02      	svc	2
    3d80:	89a2      	ldrh	r2, [r4, #12]
    3d82:	2a01      	cmp	r2, #1
    3d84:	d802      	bhi.n	3d8c <bt_recv_prio+0x44>
    3d86:	4a63      	ldr	r2, [pc, #396]	; (3f14 <bt_recv_prio+0x1cc>)
    3d88:	4964      	ldr	r1, [pc, #400]	; (3f1c <bt_recv_prio+0x1d4>)
    3d8a:	e7f0      	b.n	3d6e <bt_recv_prio+0x26>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3d8c:	7832      	ldrb	r2, [r6, #0]
    3d8e:	2a13      	cmp	r2, #19
    3d90:	f200 80ba 	bhi.w	3f08 <bt_recv_prio+0x1c0>
    3d94:	4093      	lsls	r3, r2
    3d96:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3d9a:	f000 80b5 	beq.w	3f08 <bt_recv_prio+0x1c0>
	net_buf_pull(buf, sizeof(*hdr));
    3d9e:	f104 0508 	add.w	r5, r4, #8
    3da2:	2102      	movs	r1, #2
    3da4:	4628      	mov	r0, r5
    3da6:	f00e fcd7 	bl	12758 <net_buf_simple_pull>
	switch (hdr->evt) {
    3daa:	7833      	ldrb	r3, [r6, #0]
    3dac:	2b0f      	cmp	r3, #15
    3dae:	d026      	beq.n	3dfe <bt_recv_prio+0xb6>
    3db0:	2b13      	cmp	r3, #19
    3db2:	d03e      	beq.n	3e32 <bt_recv_prio+0xea>
    3db4:	2b0e      	cmp	r3, #14
    3db6:	f040 80a1 	bne.w	3efc <bt_recv_prio+0x1b4>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3dba:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3dbc:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3dc0:	781f      	ldrb	r7, [r3, #0]
    3dc2:	f00f fcf1 	bl	137a8 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3dc6:	4a56      	ldr	r2, [pc, #344]	; (3f20 <bt_recv_prio+0x1d8>)
    3dc8:	4956      	ldr	r1, [pc, #344]	; (3f24 <bt_recv_prio+0x1dc>)
    3dca:	9600      	str	r6, [sp, #0]
    3dcc:	4603      	mov	r3, r0
    3dce:	2007      	movs	r0, #7
    3dd0:	f7fe f900 	bl	1fd4 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    3dd4:	2103      	movs	r1, #3
    3dd6:	4628      	mov	r0, r5
    3dd8:	f00e fcbe 	bl	12758 <net_buf_simple_pull>
	status = buf->data[0];
    3ddc:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3dde:	4622      	mov	r2, r4
    3de0:	7819      	ldrb	r1, [r3, #0]
    3de2:	4630      	mov	r0, r6
    3de4:	f7fe fa8a 	bl	22fc <hci_cmd_done>
	if (ncmd) {
    3de8:	b117      	cbz	r7, 3df0 <bt_recv_prio+0xa8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3dea:	484f      	ldr	r0, [pc, #316]	; (3f28 <bt_recv_prio+0x1e0>)
    3dec:	f00f fceb 	bl	137c6 <_impl_k_sem_give>
	net_buf_unref(buf);
    3df0:	4620      	mov	r0, r4
    3df2:	f00e fc51 	bl	12698 <net_buf_unref>
}
    3df6:	2000      	movs	r0, #0
    3df8:	b003      	add	sp, #12
    3dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3dfe:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3e00:	8877      	ldrh	r7, [r6, #2]
	u8_t ncmd = evt->ncmd;
    3e02:	f896 8001 	ldrb.w	r8, [r6, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3e06:	f00f fccf 	bl	137a8 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3e0a:	4a48      	ldr	r2, [pc, #288]	; (3f2c <bt_recv_prio+0x1e4>)
    3e0c:	4945      	ldr	r1, [pc, #276]	; (3f24 <bt_recv_prio+0x1dc>)
    3e0e:	9700      	str	r7, [sp, #0]
    3e10:	4603      	mov	r3, r0
    3e12:	2007      	movs	r0, #7
    3e14:	f7fe f8de 	bl	1fd4 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    3e18:	2104      	movs	r1, #4
    3e1a:	4628      	mov	r0, r5
    3e1c:	f00e fc9c 	bl	12758 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3e20:	4622      	mov	r2, r4
    3e22:	7831      	ldrb	r1, [r6, #0]
    3e24:	4638      	mov	r0, r7
    3e26:	f7fe fa69 	bl	22fc <hci_cmd_done>
	if (ncmd) {
    3e2a:	f1b8 0f00 	cmp.w	r8, #0
    3e2e:	d0df      	beq.n	3df0 <bt_recv_prio+0xa8>
    3e30:	e7db      	b.n	3dea <bt_recv_prio+0xa2>
    3e32:	68a7      	ldr	r7, [r4, #8]
		BT_DBG("handle %u count %u", handle, count);
    3e34:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 3f30 <bt_recv_prio+0x1e8>
    3e38:	f00f fcb6 	bl	137a8 <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    3e3c:	783b      	ldrb	r3, [r7, #0]
    3e3e:	9300      	str	r3, [sp, #0]
    3e40:	4a3b      	ldr	r2, [pc, #236]	; (3f30 <bt_recv_prio+0x1e8>)
    3e42:	493c      	ldr	r1, [pc, #240]	; (3f34 <bt_recv_prio+0x1ec>)
    3e44:	4603      	mov	r3, r0
    3e46:	2007      	movs	r0, #7
    3e48:	f7fe f8c4 	bl	1fd4 <bt_log>
	for (i = 0; i < evt->num_handles; i++) {
    3e4c:	2600      	movs	r6, #0
    3e4e:	783b      	ldrb	r3, [r7, #0]
    3e50:	429e      	cmp	r6, r3
    3e52:	dacd      	bge.n	3df0 <bt_recv_prio+0xa8>
    3e54:	eb07 0386 	add.w	r3, r7, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3e58:	f8b3 9001 	ldrh.w	r9, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3e5c:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    3e60:	f00f fca2 	bl	137a8 <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    3e64:	9501      	str	r5, [sp, #4]
    3e66:	4603      	mov	r3, r0
    3e68:	f8cd 9000 	str.w	r9, [sp]
    3e6c:	4642      	mov	r2, r8
    3e6e:	4932      	ldr	r1, [pc, #200]	; (3f38 <bt_recv_prio+0x1f0>)
    3e70:	2007      	movs	r0, #7
    3e72:	f7fe f8af 	bl	1fd4 <bt_log>
	__asm__ volatile(
    3e76:	f04f 0320 	mov.w	r3, #32
    3e7a:	f3ef 8a11 	mrs	sl, BASEPRI
    3e7e:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3e82:	4648      	mov	r0, r9
    3e84:	f000 fc48 	bl	4718 <bt_conn_lookup_handle>
		if (!conn) {
    3e88:	4683      	mov	fp, r0
    3e8a:	b948      	cbnz	r0, 3ea0 <bt_recv_prio+0x158>
			BT_ERR("No connection for handle %u", handle);
    3e8c:	464b      	mov	r3, r9
    3e8e:	4642      	mov	r2, r8
    3e90:	492a      	ldr	r1, [pc, #168]	; (3f3c <bt_recv_prio+0x1f4>)
    3e92:	2003      	movs	r0, #3
    3e94:	f7fe f89e 	bl	1fd4 <bt_log>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e98:	f38a 8811 	msr	BASEPRI, sl
	for (i = 0; i < evt->num_handles; i++) {
    3e9c:	3601      	adds	r6, #1
    3e9e:	e7d6      	b.n	3e4e <bt_recv_prio+0x106>
    3ea0:	f38a 8811 	msr	BASEPRI, sl
			k_fifo_put(&conn->tx_notify, node);
    3ea4:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
    3ea8:	b1dd      	cbz	r5, 3ee2 <bt_recv_prio+0x19a>
	__asm__ volatile(
    3eaa:	f04f 0220 	mov.w	r2, #32
    3eae:	f3ef 8e11 	mrs	lr, BASEPRI
    3eb2:	f382 8811 	msr	BASEPRI, r2
    3eb6:	f8db 1010 	ldr.w	r1, [fp, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3eba:	b141      	cbz	r1, 3ece <bt_recv_prio+0x186>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3ebc:	f8db 2014 	ldr.w	r2, [fp, #20]
	return node->next;
    3ec0:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3ec2:	f8cb 0010 	str.w	r0, [fp, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3ec6:	4291      	cmp	r1, r2
	list->tail = node;
    3ec8:	bf08      	it	eq
    3eca:	f8cb 0014 	streq.w	r0, [fp, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3ece:	f38e 8811 	msr	BASEPRI, lr
    3ed2:	3d01      	subs	r5, #1
    3ed4:	b2ad      	uxth	r5, r5
			if (!node) {
    3ed6:	b941      	cbnz	r1, 3eea <bt_recv_prio+0x1a2>
				BT_ERR("packets count mismatch");
    3ed8:	4642      	mov	r2, r8
    3eda:	4919      	ldr	r1, [pc, #100]	; (3f40 <bt_recv_prio+0x1f8>)
    3edc:	2003      	movs	r0, #3
    3ede:	f7fe f879 	bl	1fd4 <bt_log>
		bt_conn_unref(conn);
    3ee2:	4658      	mov	r0, fp
    3ee4:	f000 fc66 	bl	47b4 <bt_conn_unref>
    3ee8:	e7d8      	b.n	3e9c <bt_recv_prio+0x154>
			k_fifo_put(&conn->tx_notify, node);
    3eea:	4648      	mov	r0, r9
    3eec:	f00f f9a6 	bl	1323c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3ef0:	4658      	mov	r0, fp
    3ef2:	f000 f995 	bl	4220 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ef6:	f00f fc66 	bl	137c6 <_impl_k_sem_give>
    3efa:	e7d5      	b.n	3ea8 <bt_recv_prio+0x160>
		net_buf_unref(buf);
    3efc:	4620      	mov	r0, r4
    3efe:	f00e fbcb 	bl	12698 <net_buf_unref>
		BT_ASSERT(0);
    3f02:	4a04      	ldr	r2, [pc, #16]	; (3f14 <bt_recv_prio+0x1cc>)
    3f04:	490f      	ldr	r1, [pc, #60]	; (3f44 <bt_recv_prio+0x1fc>)
    3f06:	e732      	b.n	3d6e <bt_recv_prio+0x26>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3f08:	4a02      	ldr	r2, [pc, #8]	; (3f14 <bt_recv_prio+0x1cc>)
    3f0a:	490f      	ldr	r1, [pc, #60]	; (3f48 <bt_recv_prio+0x200>)
    3f0c:	e72f      	b.n	3d6e <bt_recv_prio+0x26>
    3f0e:	bf00      	nop
    3f10:	00014891 	.word	0x00014891
    3f14:	00014b89 	.word	0x00014b89
    3f18:	000152b8 	.word	0x000152b8
    3f1c:	000152f0 	.word	0x000152f0
    3f20:	000149f2 	.word	0x000149f2
    3f24:	0001531e 	.word	0x0001531e
    3f28:	20003b30 	.word	0x20003b30
    3f2c:	00014a03 	.word	0x00014a03
    3f30:	000148e7 	.word	0x000148e7
    3f34:	00015335 	.word	0x00015335
    3f38:	0001534d 	.word	0x0001534d
    3f3c:	00015369 	.word	0x00015369
    3f40:	00015389 	.word	0x00015389
    3f44:	000153a4 	.word	0x000153a4
    3f48:	000153bb 	.word	0x000153bb

00003f4c <bt_hci_driver_register>:
{
    3f4c:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    3f4e:	4b18      	ldr	r3, [pc, #96]	; (3fb0 <bt_hci_driver_register+0x64>)
    3f50:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    3f54:	b085      	sub	sp, #20
    3f56:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    3f58:	bb1c      	cbnz	r4, 3fa2 <bt_hci_driver_register+0x56>
	if (!drv->open || !drv->send) {
    3f5a:	68c2      	ldr	r2, [r0, #12]
    3f5c:	b322      	cbz	r2, 3fa8 <bt_hci_driver_register+0x5c>
    3f5e:	6902      	ldr	r2, [r0, #16]
    3f60:	b312      	cbz	r2, 3fa8 <bt_hci_driver_register+0x5c>
	bt_dev.drv = drv;
    3f62:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3f66:	f00f fc1f 	bl	137a8 <_impl_k_current_get>
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    3f6a:	682b      	ldr	r3, [r5, #0]
    3f6c:	4a11      	ldr	r2, [pc, #68]	; (3fb4 <bt_hci_driver_register+0x68>)
    3f6e:	4912      	ldr	r1, [pc, #72]	; (3fb8 <bt_hci_driver_register+0x6c>)
    3f70:	2b00      	cmp	r3, #0
    3f72:	bf08      	it	eq
    3f74:	4613      	moveq	r3, r2
    3f76:	9300      	str	r3, [sp, #0]
    3f78:	4a10      	ldr	r2, [pc, #64]	; (3fbc <bt_hci_driver_register+0x70>)
    3f7a:	4603      	mov	r3, r0
    3f7c:	2007      	movs	r0, #7
    3f7e:	f7fe f829 	bl	1fd4 <bt_log>
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3f82:	682b      	ldr	r3, [r5, #0]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3f84:	4a0e      	ldr	r2, [pc, #56]	; (3fc0 <bt_hci_driver_register+0x74>)
    3f86:	7929      	ldrb	r1, [r5, #4]
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3f88:	9402      	str	r4, [sp, #8]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	bf08      	it	eq
    3f8e:	4613      	moveq	r3, r2
    3f90:	4620      	mov	r0, r4
    3f92:	aa02      	add	r2, sp, #8
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3f94:	f8ad 400c 	strh.w	r4, [sp, #12]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3f98:	f7fe f8da 	bl	2150 <bt_monitor_new_index>
	return 0;
    3f9c:	4620      	mov	r0, r4
}
    3f9e:	b005      	add	sp, #20
    3fa0:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    3fa2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3fa6:	e7fa      	b.n	3f9e <bt_hci_driver_register+0x52>
		return -EINVAL;
    3fa8:	f06f 0015 	mvn.w	r0, #21
    3fac:	e7f7      	b.n	3f9e <bt_hci_driver_register+0x52>
    3fae:	bf00      	nop
    3fb0:	20003a88 	.word	0x20003a88
    3fb4:	0001433a 	.word	0x0001433a
    3fb8:	00014d59 	.word	0x00014d59
    3fbc:	00014b96 	.word	0x00014b96
    3fc0:	00014d55 	.word	0x00014d55

00003fc4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3fc4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3fc6:	4d26      	ldr	r5, [pc, #152]	; (4060 <bt_enable+0x9c>)
    3fc8:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3fcc:	b086      	sub	sp, #24
    3fce:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3fd0:	b94b      	cbnz	r3, 3fe6 <bt_enable+0x22>
		BT_ERR("No HCI driver registered");
    3fd2:	4a24      	ldr	r2, [pc, #144]	; (4064 <bt_enable+0xa0>)
    3fd4:	4924      	ldr	r1, [pc, #144]	; (4068 <bt_enable+0xa4>)
    3fd6:	2003      	movs	r0, #3
    3fd8:	f7fd fffc 	bl	1fd4 <bt_log>
		return -ENODEV;
    3fdc:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3fe0:	4620      	mov	r0, r4
    3fe2:	b006      	add	sp, #24
    3fe4:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3fe6:	2101      	movs	r1, #1
    3fe8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3fec:	f7fe f955 	bl	229a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3ff0:	f010 0001 	ands.w	r0, r0, #1
    3ff4:	d130      	bne.n	4058 <bt_enable+0x94>
	ready_cb = cb;
    3ff6:	4b1d      	ldr	r3, [pc, #116]	; (406c <bt_enable+0xa8>)

    3ff8:	491d      	ldr	r1, [pc, #116]	; (4070 <bt_enable+0xac>)
    3ffa:	601e      	str	r6, [r3, #0]
    3ffc:	f06f 0308 	mvn.w	r3, #8
    4000:	9005      	str	r0, [sp, #20]
    4002:	9004      	str	r0, [sp, #16]
    4004:	9303      	str	r3, [sp, #12]
    4006:	9002      	str	r0, [sp, #8]
    4008:	9001      	str	r0, [sp, #4]
    400a:	9000      	str	r0, [sp, #0]
    400c:	4b19      	ldr	r3, [pc, #100]	; (4074 <bt_enable+0xb0>)
    400e:	481a      	ldr	r0, [pc, #104]	; (4078 <bt_enable+0xb4>)
    4010:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4014:	f00f fdd4 	bl	13bc0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    4018:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    401c:	68db      	ldr	r3, [r3, #12]
    401e:	4798      	blx	r3
	if (err) {
    4020:	4604      	mov	r4, r0
    4022:	b130      	cbz	r0, 4032 <bt_enable+0x6e>
		BT_ERR("HCI driver open failed (%d)", err);
    4024:	4603      	mov	r3, r0
    4026:	4a0f      	ldr	r2, [pc, #60]	; (4064 <bt_enable+0xa0>)
    4028:	4914      	ldr	r1, [pc, #80]	; (407c <bt_enable+0xb8>)
    402a:	2003      	movs	r0, #3
    402c:	f7fd ffd2 	bl	1fd4 <bt_log>
		return err;
    4030:	e7d6      	b.n	3fe0 <bt_enable+0x1c>
	if (!cb) {
    4032:	b926      	cbnz	r6, 403e <bt_enable+0x7a>
}
    4034:	b006      	add	sp, #24
    4036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    403a:	f7fe bc7b 	b.w	2934 <bt_init>
    403e:	2101      	movs	r1, #1
    4040:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    4044:	f7fe f929 	bl	229a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4048:	07c3      	lsls	r3, r0, #31
    404a:	d4c9      	bmi.n	3fe0 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    404c:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4050:	480b      	ldr	r0, [pc, #44]	; (4080 <bt_enable+0xbc>)
    4052:	f00f f8f3 	bl	1323c <k_queue_append>
    4056:	e7c3      	b.n	3fe0 <bt_enable+0x1c>
		return -EALREADY;
    4058:	f06f 0444 	mvn.w	r4, #68	; 0x44
    405c:	e7c0      	b.n	3fe0 <bt_enable+0x1c>
    405e:	bf00      	nop
    4060:	20003a88 	.word	0x20003a88
    4064:	00014bad 	.word	0x00014bad
    4068:	00014c56 	.word	0x00014c56
    406c:	200002f0 	.word	0x200002f0
    4070:	20001a30 	.word	0x20001a30
    4074:	000032fd 	.word	0x000032fd
    4078:	200002f8 	.word	0x200002f8
    407c:	00014c73 	.word	0x00014c73
    4080:	200019b0 	.word	0x200019b0

00004084 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    4084:	2000      	movs	r0, #0
    4086:	4770      	bx	lr

00004088 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4088:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    408a:	7803      	ldrb	r3, [r0, #0]
    408c:	2b01      	cmp	r3, #1
{
    408e:	4605      	mov	r5, r0
    4090:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4092:	d810      	bhi.n	40b6 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4094:	7843      	ldrb	r3, [r0, #1]
    4096:	2b01      	cmp	r3, #1
    4098:	d80d      	bhi.n	40b6 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    409a:	8841      	ldrh	r1, [r0, #2]
    409c:	1f0b      	subs	r3, r1, #4
    409e:	b29b      	uxth	r3, r3
    40a0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    40a4:	4283      	cmp	r3, r0
    40a6:	d806      	bhi.n	40b6 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    40a8:	88aa      	ldrh	r2, [r5, #4]
    40aa:	1f13      	subs	r3, r2, #4
    40ac:	b29b      	uxth	r3, r3
    40ae:	4283      	cmp	r3, r0
    40b0:	d801      	bhi.n	40b6 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    40b2:	4291      	cmp	r1, r2
    40b4:	d22b      	bcs.n	410e <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    40b6:	f06f 0415 	mvn.w	r4, #21
    40ba:	e00e      	b.n	40da <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    40bc:	2108      	movs	r1, #8
    40be:	4819      	ldr	r0, [pc, #100]	; (4124 <bt_le_scan_start+0x9c>)
    40c0:	f7fe f97e 	bl	23c0 <atomic_test_bit>
    40c4:	b158      	cbz	r0, 40de <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    40c6:	4610      	mov	r0, r2
    40c8:	f7fe fa38 	bl	253c <set_le_scan_enable>
		if (err) {
    40cc:	4604      	mov	r4, r0
    40ce:	b130      	cbz	r0, 40de <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    40d0:	f46f 7100 	mvn.w	r1, #512	; 0x200
    40d4:	4813      	ldr	r0, [pc, #76]	; (4124 <bt_le_scan_start+0x9c>)
    40d6:	f7fe f8f1 	bl	22bc <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    40da:	4620      	mov	r0, r4
    40dc:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    40de:	786b      	ldrb	r3, [r5, #1]
    40e0:	b17b      	cbz	r3, 4102 <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    40e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    40e6:	480f      	ldr	r0, [pc, #60]	; (4124 <bt_le_scan_start+0x9c>)
    40e8:	f7fe f8d7 	bl	229a <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    40ec:	88aa      	ldrh	r2, [r5, #4]
    40ee:	8869      	ldrh	r1, [r5, #2]
    40f0:	7828      	ldrb	r0, [r5, #0]
    40f2:	f7fe fba9 	bl	2848 <start_le_scan>
	if (err) {
    40f6:	4604      	mov	r4, r0
    40f8:	2800      	cmp	r0, #0
    40fa:	d1e9      	bne.n	40d0 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    40fc:	4b0a      	ldr	r3, [pc, #40]	; (4128 <bt_le_scan_start+0xa0>)
    40fe:	601e      	str	r6, [r3, #0]
	return 0;
    4100:	e7eb      	b.n	40da <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4102:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    4106:	4807      	ldr	r0, [pc, #28]	; (4124 <bt_le_scan_start+0x9c>)
    4108:	f7fe f8d8 	bl	22bc <atomic_and>
    410c:	e7ee      	b.n	40ec <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    410e:	f44f 7100 	mov.w	r1, #512	; 0x200
    4112:	4804      	ldr	r0, [pc, #16]	; (4124 <bt_le_scan_start+0x9c>)
    4114:	f7fe f8c1 	bl	229a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4118:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    411c:	d0ce      	beq.n	40bc <bt_le_scan_start+0x34>
		return -EALREADY;
    411e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4122:	e7da      	b.n	40da <bt_le_scan_start+0x52>
    4124:	20003af8 	.word	0x20003af8
    4128:	200002f4 	.word	0x200002f4

0000412c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    412c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    412e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    4132:	4807      	ldr	r0, [pc, #28]	; (4150 <bt_le_scan_stop+0x24>)
    4134:	f7fe f8c2 	bl	22bc <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4138:	0583      	lsls	r3, r0, #22
    413a:	d506      	bpl.n	414a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    413c:	4b05      	ldr	r3, [pc, #20]	; (4154 <bt_le_scan_stop+0x28>)
    413e:	2000      	movs	r0, #0
    4140:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    4142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    4146:	f7fe bbc3 	b.w	28d0 <bt_le_scan_update>
}
    414a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    414e:	bd08      	pop	{r3, pc}
    4150:	20003af8 	.word	0x20003af8
    4154:	200002f4 	.word	0x200002f4

00004158 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4158:	b538      	push	{r3, r4, r5, lr}
    415a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    415c:	4805      	ldr	r0, [pc, #20]	; (4174 <bt_buf_get_rx+0x1c>)
    415e:	f00e fa6b 	bl	12638 <net_buf_alloc_fixed>
#endif

	if (buf) {
    4162:	4604      	mov	r4, r0
    4164:	b120      	cbz	r0, 4170 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4166:	2100      	movs	r1, #0
    4168:	3008      	adds	r0, #8
    416a:	f00e fa84 	bl	12676 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    416e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4170:	4620      	mov	r0, r4
    4172:	bd38      	pop	{r3, r4, r5, pc}
    4174:	20003fc0 	.word	0x20003fc0

00004178 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4178:	b573      	push	{r0, r1, r4, r5, r6, lr}
    417a:	4606      	mov	r6, r0
	__asm__ volatile(
    417c:	f04f 0320 	mov.w	r3, #32
    4180:	f3ef 8211 	mrs	r2, BASEPRI
    4184:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4188:	4b11      	ldr	r3, [pc, #68]	; (41d0 <bt_buf_get_cmd_complete+0x58>)
	bt_dev.sent_cmd = NULL;
    418a:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    418c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    4190:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4194:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4198:	f00f fb06 	bl	137a8 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    419c:	9400      	str	r4, [sp, #0]
    419e:	4603      	mov	r3, r0
    41a0:	4a0c      	ldr	r2, [pc, #48]	; (41d4 <bt_buf_get_cmd_complete+0x5c>)
    41a2:	490d      	ldr	r1, [pc, #52]	; (41d8 <bt_buf_get_cmd_complete+0x60>)
    41a4:	2007      	movs	r0, #7
    41a6:	f7fd ff15 	bl	1fd4 <bt_log>

	if (buf) {
    41aa:	b934      	cbnz	r4, 41ba <bt_buf_get_cmd_complete+0x42>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    41ac:	4631      	mov	r1, r6
    41ae:	2001      	movs	r0, #1
}
    41b0:	b002      	add	sp, #8
    41b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    41b6:	f7ff bfcf 	b.w	4158 <bt_buf_get_rx>
    41ba:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    41bc:	f104 0008 	add.w	r0, r4, #8
    41c0:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    41c2:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    41c4:	4629      	mov	r1, r5
    41c6:	f00e fa56 	bl	12676 <net_buf_simple_reserve>
}
    41ca:	4620      	mov	r0, r4
    41cc:	b002      	add	sp, #8
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	20003a88 	.word	0x20003a88
    41d4:	00014bb7 	.word	0x00014bb7
    41d8:	00014bcf 	.word	0x00014bcf

000041dc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    41dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    41de:	4b06      	ldr	r3, [pc, #24]	; (41f8 <notify_connected+0x1c>)
    41e0:	681c      	ldr	r4, [r3, #0]
{
    41e2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    41e4:	b904      	cbnz	r4, 41e8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    41e6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    41e8:	6823      	ldr	r3, [r4, #0]
    41ea:	b113      	cbz	r3, 41f2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    41ec:	7a29      	ldrb	r1, [r5, #8]
    41ee:	4628      	mov	r0, r5
    41f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    41f2:	6924      	ldr	r4, [r4, #16]
    41f4:	e7f6      	b.n	41e4 <notify_connected+0x8>
    41f6:	bf00      	nop
    41f8:	20000368 	.word	0x20000368

000041fc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    41fc:	f3bf 8f5b 	dmb	ish
    4200:	6800      	ldr	r0, [r0, #0]
    4202:	f3bf 8f5b 	dmb	ish
}
    4206:	4770      	bx	lr

00004208 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4208:	8943      	ldrh	r3, [r0, #10]
{
    420a:	b510      	push	{r4, lr}
    420c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    420e:	b12b      	cbz	r3, 421c <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    4210:	68c0      	ldr	r0, [r0, #12]
    4212:	f00e fa41 	bl	12698 <net_buf_unref>
	conn->rx = NULL;
    4216:	2300      	movs	r3, #0
    4218:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    421a:	8163      	strh	r3, [r4, #10]
    421c:	bd10      	pop	{r4, pc}
	...

00004220 <bt_conn_get_pkts>:
}
    4220:	4800      	ldr	r0, [pc, #0]	; (4224 <bt_conn_get_pkts+0x4>)
    4222:	4770      	bx	lr
    4224:	20003b14 	.word	0x20003b14

00004228 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    4228:	4b08      	ldr	r3, [pc, #32]	; (424c <notify_le_param_updated+0x24>)
{
    422a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    422c:	681c      	ldr	r4, [r3, #0]
{
    422e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4230:	b904      	cbnz	r4, 4234 <notify_le_param_updated+0xc>
}
    4232:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4234:	68e6      	ldr	r6, [r4, #12]
    4236:	b13e      	cbz	r6, 4248 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    4238:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    423c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    4240:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    4244:	4628      	mov	r0, r5
    4246:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4248:	6924      	ldr	r4, [r4, #16]
    424a:	e7f1      	b.n	4230 <notify_le_param_updated+0x8>
    424c:	20000368 	.word	0x20000368

00004250 <le_param_req>:
{
    4250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4252:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    4254:	4608      	mov	r0, r1
{
    4256:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    4258:	f7fe fa10 	bl	267c <bt_le_conn_params_valid>
    425c:	4605      	mov	r5, r0
    425e:	b910      	cbnz	r0, 4266 <le_param_req+0x16>
		return false;
    4260:	2500      	movs	r5, #0
}
    4262:	4628      	mov	r0, r5
    4264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    4266:	4b09      	ldr	r3, [pc, #36]	; (428c <le_param_req+0x3c>)
    4268:	681c      	ldr	r4, [r3, #0]
    426a:	2c00      	cmp	r4, #0
    426c:	d0f9      	beq.n	4262 <le_param_req+0x12>
		if (!cb->le_param_req) {
    426e:	68a3      	ldr	r3, [r4, #8]
    4270:	b90b      	cbnz	r3, 4276 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    4272:	6924      	ldr	r4, [r4, #16]
    4274:	e7f9      	b.n	426a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    4276:	4631      	mov	r1, r6
    4278:	4638      	mov	r0, r7
    427a:	4798      	blx	r3
    427c:	2800      	cmp	r0, #0
    427e:	d0ef      	beq.n	4260 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    4280:	4630      	mov	r0, r6
    4282:	f7fe f9fb 	bl	267c <bt_le_conn_params_valid>
    4286:	2800      	cmp	r0, #0
    4288:	d1f3      	bne.n	4272 <le_param_req+0x22>
    428a:	e7e9      	b.n	4260 <le_param_req+0x10>
    428c:	20000368 	.word	0x20000368

00004290 <bt_conn_cb_register>:
	cb->_next = callback_list;
    4290:	4b02      	ldr	r3, [pc, #8]	; (429c <bt_conn_cb_register+0xc>)
    4292:	681a      	ldr	r2, [r3, #0]
    4294:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    4296:	6018      	str	r0, [r3, #0]
    4298:	4770      	bx	lr
    429a:	bf00      	nop
    429c:	20000368 	.word	0x20000368

000042a0 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    42a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    42a2:	4616      	mov	r6, r2
    42a4:	460d      	mov	r5, r1
    42a6:	4604      	mov	r4, r0
    42a8:	f00f fa7e 	bl	137a8 <_impl_k_current_get>
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    42ac:	9602      	str	r6, [sp, #8]
    42ae:	89ab      	ldrh	r3, [r5, #12]
    42b0:	9301      	str	r3, [sp, #4]
    42b2:	8823      	ldrh	r3, [r4, #0]
    42b4:	9300      	str	r3, [sp, #0]
    42b6:	4a4c      	ldr	r2, [pc, #304]	; (43e8 <bt_conn_recv+0x148>)
    42b8:	494c      	ldr	r1, [pc, #304]	; (43ec <bt_conn_recv+0x14c>)
    42ba:	4603      	mov	r3, r0
    42bc:	2007      	movs	r0, #7
    42be:	f7fd fe89 	bl	1fd4 <bt_log>

	/* Check packet boundary flags */
	switch (flags) {
    42c2:	2e01      	cmp	r6, #1
    42c4:	d02c      	beq.n	4320 <bt_conn_recv+0x80>
    42c6:	2e02      	cmp	r6, #2
    42c8:	d176      	bne.n	43b8 <bt_conn_recv+0x118>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    42ca:	68ab      	ldr	r3, [r5, #8]
    42cc:	881e      	ldrh	r6, [r3, #0]
    42ce:	f00f fa6b 	bl	137a8 <_impl_k_current_get>

		BT_DBG("First, len %u final %u", buf->len, len);
    42d2:	9601      	str	r6, [sp, #4]
    42d4:	89ab      	ldrh	r3, [r5, #12]
    42d6:	9300      	str	r3, [sp, #0]
    42d8:	4a43      	ldr	r2, [pc, #268]	; (43e8 <bt_conn_recv+0x148>)
    42da:	4945      	ldr	r1, [pc, #276]	; (43f0 <bt_conn_recv+0x150>)
    42dc:	4603      	mov	r3, r0
    42de:	2007      	movs	r0, #7
    42e0:	f7fd fe78 	bl	1fd4 <bt_log>

		if (conn->rx_len) {
    42e4:	8963      	ldrh	r3, [r4, #10]
    42e6:	b13b      	cbz	r3, 42f8 <bt_conn_recv+0x58>
			BT_ERR("Unexpected first L2CAP frame");
    42e8:	2003      	movs	r0, #3
    42ea:	4a3f      	ldr	r2, [pc, #252]	; (43e8 <bt_conn_recv+0x148>)
    42ec:	4941      	ldr	r1, [pc, #260]	; (43f4 <bt_conn_recv+0x154>)
    42ee:	f7fd fe71 	bl	1fd4 <bt_log>
			bt_conn_reset_rx_state(conn);
    42f2:	4620      	mov	r0, r4
    42f4:	f7ff ff88 	bl	4208 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    42f8:	89ab      	ldrh	r3, [r5, #12]
    42fa:	1af6      	subs	r6, r6, r3
    42fc:	3604      	adds	r6, #4
    42fe:	8166      	strh	r6, [r4, #10]
    4300:	f00f fa52 	bl	137a8 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    4304:	8963      	ldrh	r3, [r4, #10]
    4306:	9300      	str	r3, [sp, #0]
    4308:	4a37      	ldr	r2, [pc, #220]	; (43e8 <bt_conn_recv+0x148>)
    430a:	493b      	ldr	r1, [pc, #236]	; (43f8 <bt_conn_recv+0x158>)
    430c:	4603      	mov	r3, r0
    430e:	2007      	movs	r0, #7
    4310:	f7fd fe60 	bl	1fd4 <bt_log>
		if (conn->rx_len) {
    4314:	8963      	ldrh	r3, [r4, #10]
    4316:	2b00      	cmp	r3, #0
    4318:	d041      	beq.n	439e <bt_conn_recv+0xfe>
			conn->rx = buf;
    431a:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    431c:	b004      	add	sp, #16
    431e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    4320:	8963      	ldrh	r3, [r4, #10]
    4322:	b96b      	cbnz	r3, 4340 <bt_conn_recv+0xa0>
			BT_ERR("Unexpected L2CAP continuation");
    4324:	4a30      	ldr	r2, [pc, #192]	; (43e8 <bt_conn_recv+0x148>)
    4326:	4935      	ldr	r1, [pc, #212]	; (43fc <bt_conn_recv+0x15c>)
			BT_ERR("L2CAP data overflow");
    4328:	2003      	movs	r0, #3
    432a:	f7fd fe53 	bl	1fd4 <bt_log>
			bt_conn_reset_rx_state(conn);
    432e:	4620      	mov	r0, r4
    4330:	f7ff ff6a 	bl	4208 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    4334:	4628      	mov	r0, r5
}
    4336:	b004      	add	sp, #16
    4338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    433c:	f00e b9ac 	b.w	12698 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    4340:	89aa      	ldrh	r2, [r5, #12]
    4342:	429a      	cmp	r2, r3
    4344:	d902      	bls.n	434c <bt_conn_recv+0xac>
			BT_ERR("L2CAP data overflow");
    4346:	4a28      	ldr	r2, [pc, #160]	; (43e8 <bt_conn_recv+0x148>)
    4348:	492d      	ldr	r1, [pc, #180]	; (4400 <bt_conn_recv+0x160>)
    434a:	e7ed      	b.n	4328 <bt_conn_recv+0x88>
    434c:	f00f fa2c 	bl	137a8 <_impl_k_current_get>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    4350:	8963      	ldrh	r3, [r4, #10]
    4352:	9301      	str	r3, [sp, #4]
    4354:	89ab      	ldrh	r3, [r5, #12]
    4356:	9300      	str	r3, [sp, #0]
    4358:	4a23      	ldr	r2, [pc, #140]	; (43e8 <bt_conn_recv+0x148>)
    435a:	492a      	ldr	r1, [pc, #168]	; (4404 <bt_conn_recv+0x164>)
    435c:	4603      	mov	r3, r0
    435e:	2007      	movs	r0, #7
    4360:	f7fd fe38 	bl	1fd4 <bt_log>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    4364:	68e0      	ldr	r0, [r4, #12]
    4366:	89ae      	ldrh	r6, [r5, #12]
    4368:	3008      	adds	r0, #8
    436a:	f00e fa11 	bl	12790 <net_buf_simple_tailroom>
    436e:	4286      	cmp	r6, r0
    4370:	d902      	bls.n	4378 <bt_conn_recv+0xd8>
			BT_ERR("Not enough buffer space for L2CAP data");
    4372:	4a1d      	ldr	r2, [pc, #116]	; (43e8 <bt_conn_recv+0x148>)
    4374:	4924      	ldr	r1, [pc, #144]	; (4408 <bt_conn_recv+0x168>)
    4376:	e7d7      	b.n	4328 <bt_conn_recv+0x88>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    4378:	68e0      	ldr	r0, [r4, #12]
    437a:	89aa      	ldrh	r2, [r5, #12]
    437c:	68a9      	ldr	r1, [r5, #8]
    437e:	3008      	adds	r0, #8
    4380:	f00e f9c2 	bl	12708 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    4384:	8963      	ldrh	r3, [r4, #10]
    4386:	89aa      	ldrh	r2, [r5, #12]
    4388:	1a9b      	subs	r3, r3, r2
    438a:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    438c:	4628      	mov	r0, r5
    438e:	f00e f983 	bl	12698 <net_buf_unref>
		if (conn->rx_len) {
    4392:	8963      	ldrh	r3, [r4, #10]
    4394:	2b00      	cmp	r3, #0
    4396:	d1c1      	bne.n	431c <bt_conn_recv+0x7c>
		buf = conn->rx;
    4398:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    439a:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    439c:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    439e:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    43a0:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    43a2:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    43a4:	1d19      	adds	r1, r3, #4
    43a6:	4291      	cmp	r1, r2
    43a8:	d00d      	beq.n	43c6 <bt_conn_recv+0x126>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    43aa:	9200      	str	r2, [sp, #0]
    43ac:	4917      	ldr	r1, [pc, #92]	; (440c <bt_conn_recv+0x16c>)
    43ae:	4a0e      	ldr	r2, [pc, #56]	; (43e8 <bt_conn_recv+0x148>)
    43b0:	2003      	movs	r0, #3
    43b2:	f7fd fe0f 	bl	1fd4 <bt_log>
    43b6:	e7bd      	b.n	4334 <bt_conn_recv+0x94>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    43b8:	4633      	mov	r3, r6
    43ba:	4a0b      	ldr	r2, [pc, #44]	; (43e8 <bt_conn_recv+0x148>)
    43bc:	4914      	ldr	r1, [pc, #80]	; (4410 <bt_conn_recv+0x170>)
    43be:	2003      	movs	r0, #3
    43c0:	f7fd fe08 	bl	1fd4 <bt_log>
    43c4:	e7b3      	b.n	432e <bt_conn_recv+0x8e>
    43c6:	f00f f9ef 	bl	137a8 <_impl_k_current_get>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    43ca:	89ab      	ldrh	r3, [r5, #12]
    43cc:	9300      	str	r3, [sp, #0]
    43ce:	4a06      	ldr	r2, [pc, #24]	; (43e8 <bt_conn_recv+0x148>)
    43d0:	4910      	ldr	r1, [pc, #64]	; (4414 <bt_conn_recv+0x174>)
    43d2:	4603      	mov	r3, r0
    43d4:	2007      	movs	r0, #7
    43d6:	f7fd fdfd 	bl	1fd4 <bt_log>
	bt_l2cap_recv(conn, buf);
    43da:	4629      	mov	r1, r5
    43dc:	4620      	mov	r0, r4
}
    43de:	b004      	add	sp, #16
    43e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    43e4:	f000 bfd8 	b.w	5398 <bt_l2cap_recv>
    43e8:	000157bc 	.word	0x000157bc
    43ec:	0001593e 	.word	0x0001593e
    43f0:	00015963 	.word	0x00015963
    43f4:	00015983 	.word	0x00015983
    43f8:	000159a4 	.word	0x000159a4
    43fc:	000159b7 	.word	0x000159b7
    4400:	000159d9 	.word	0x000159d9
    4404:	000159f1 	.word	0x000159f1
    4408:	00015a11 	.word	0x00015a11
    440c:	00015a5e 	.word	0x00015a5e
    4410:	00015a3c 	.word	0x00015a3c
    4414:	00015a7e 	.word	0x00015a7e

00004418 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    441a:	460c      	mov	r4, r1
    441c:	4605      	mov	r5, r0
    441e:	4616      	mov	r6, r2
    4420:	f00f f9c2 	bl	137a8 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    4424:	89a3      	ldrh	r3, [r4, #12]
    4426:	9301      	str	r3, [sp, #4]
    4428:	882b      	ldrh	r3, [r5, #0]
    442a:	9300      	str	r3, [sp, #0]
    442c:	9602      	str	r6, [sp, #8]
    442e:	4603      	mov	r3, r0
    4430:	4a0d      	ldr	r2, [pc, #52]	; (4468 <bt_conn_send_cb+0x50>)
    4432:	490e      	ldr	r1, [pc, #56]	; (446c <bt_conn_send_cb+0x54>)
    4434:	2007      	movs	r0, #7
    4436:	f7fd fdcd 	bl	1fd4 <bt_log>

	if (conn->state != BT_CONN_CONNECTED) {
    443a:	7a6b      	ldrb	r3, [r5, #9]
    443c:	2b03      	cmp	r3, #3
    443e:	d00b      	beq.n	4458 <bt_conn_send_cb+0x40>
		BT_ERR("not connected!");
    4440:	4a09      	ldr	r2, [pc, #36]	; (4468 <bt_conn_send_cb+0x50>)
    4442:	490b      	ldr	r1, [pc, #44]	; (4470 <bt_conn_send_cb+0x58>)
    4444:	2003      	movs	r0, #3
    4446:	f7fd fdc5 	bl	1fd4 <bt_log>
		net_buf_unref(buf);
    444a:	4620      	mov	r0, r4
    444c:	f00e f924 	bl	12698 <net_buf_unref>
		return -ENOTCONN;
    4450:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    4454:	b004      	add	sp, #16
    4456:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&conn->tx_queue, buf);
    4458:	f105 0028 	add.w	r0, r5, #40	; 0x28
	conn_tx(buf)->cb = cb;
    445c:	6166      	str	r6, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    445e:	4621      	mov	r1, r4
    4460:	f00e f90d 	bl	1267e <net_buf_put>
	return 0;
    4464:	2000      	movs	r0, #0
    4466:	e7f5      	b.n	4454 <bt_conn_send_cb+0x3c>
    4468:	000157c9 	.word	0x000157c9
    446c:	00015aca 	.word	0x00015aca
    4470:	00015af3 	.word	0x00015af3

00004474 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4478:	4606      	mov	r6, r0
    447a:	f00f f995 	bl	137a8 <_impl_k_current_get>
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    447e:	9600      	str	r6, [sp, #0]
    4480:	4603      	mov	r3, r0
    4482:	4a10      	ldr	r2, [pc, #64]	; (44c4 <bt_conn_notify_tx+0x50>)
    4484:	4910      	ldr	r1, [pc, #64]	; (44c8 <bt_conn_notify_tx+0x54>)
    4486:	4d11      	ldr	r5, [pc, #68]	; (44cc <bt_conn_notify_tx+0x58>)
    4488:	2007      	movs	r0, #7
    448a:	f7fd fda3 	bl	1fd4 <bt_log>

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    448e:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4492:	f04f 0800 	mov.w	r8, #0
    4496:	2100      	movs	r1, #0
    4498:	4638      	mov	r0, r7
    449a:	f00e fef3 	bl	13284 <_impl_k_queue_get>
    449e:	4604      	mov	r4, r0
    44a0:	b910      	cbnz	r0, 44a8 <bt_conn_notify_tx+0x34>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    44a2:	b002      	add	sp, #8
    44a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    44a8:	6863      	ldr	r3, [r4, #4]
    44aa:	b10b      	cbz	r3, 44b0 <bt_conn_notify_tx+0x3c>
			tx->cb(conn);
    44ac:	4630      	mov	r0, r6
    44ae:	4798      	blx	r3
    44b0:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    44b2:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    44b4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    44b6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    44ba:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    44bc:	2b00      	cmp	r3, #0
    44be:	d1ea      	bne.n	4496 <bt_conn_notify_tx+0x22>
	list->tail = node;
    44c0:	606c      	str	r4, [r5, #4]
    44c2:	e7e6      	b.n	4492 <bt_conn_notify_tx+0x1e>
    44c4:	000157d9 	.word	0x000157d9
    44c8:	000158b1 	.word	0x000158b1
    44cc:	20000414 	.word	0x20000414

000044d0 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    44d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44d4:	b085      	sub	sp, #20
    44d6:	460f      	mov	r7, r1
    44d8:	4614      	mov	r4, r2
    44da:	4605      	mov	r5, r0
    44dc:	4698      	mov	r8, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    44de:	f00f f963 	bl	137a8 <_impl_k_current_get>
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    44e2:	9403      	str	r4, [sp, #12]
    44e4:	89bb      	ldrh	r3, [r7, #12]
    44e6:	9302      	str	r3, [sp, #8]
    44e8:	4a4b      	ldr	r2, [pc, #300]	; (4618 <send_frag+0x148>)
    44ea:	494c      	ldr	r1, [pc, #304]	; (461c <send_frag+0x14c>)
    44ec:	4603      	mov	r3, r0
    44ee:	e88d 00a0 	stmia.w	sp, {r5, r7}
    44f2:	2007      	movs	r0, #7
    44f4:	f7fd fd6e 	bl	1fd4 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    44f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    44fc:	4848      	ldr	r0, [pc, #288]	; (4620 <send_frag+0x150>)
    44fe:	f00f f98a 	bl	13816 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    4502:	4b48      	ldr	r3, [pc, #288]	; (4624 <send_frag+0x154>)
    4504:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4508:	f7ff fe78 	bl	41fc <atomic_get>
    450c:	b130      	cbz	r0, 451c <send_frag+0x4c>
		if (conns[i].state == BT_CONN_CONNECTED ||
    450e:	7a5a      	ldrb	r2, [r3, #9]
    4510:	3a03      	subs	r2, #3
    4512:	2a01      	cmp	r2, #1
    4514:	d802      	bhi.n	451c <send_frag+0x4c>
			bt_conn_notify_tx(&conns[i]);
    4516:	4618      	mov	r0, r3
    4518:	f7ff ffac 	bl	4474 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    451c:	7a6b      	ldrb	r3, [r5, #9]
    451e:	2b03      	cmp	r3, #3
    4520:	d15b      	bne.n	45da <send_frag+0x10a>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4522:	2104      	movs	r1, #4
    4524:	f107 0008 	add.w	r0, r7, #8
    4528:	f00e f90e 	bl	12748 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    452c:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    452e:	f8d7 9014 	ldr.w	r9, [r7, #20]
    4532:	4e3d      	ldr	r6, [pc, #244]	; (4628 <send_frag+0x158>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4534:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    4538:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    453a:	89bb      	ldrh	r3, [r7, #12]
    453c:	3b04      	subs	r3, #4
    453e:	8043      	strh	r3, [r0, #2]
    4540:	2302      	movs	r3, #2
    4542:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4544:	f00f f930 	bl	137a8 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    4548:	e88d 0220 	stmia.w	sp, {r5, r9}
    454c:	4603      	mov	r3, r0
    454e:	4a37      	ldr	r2, [pc, #220]	; (462c <send_frag+0x15c>)
    4550:	4937      	ldr	r1, [pc, #220]	; (4630 <send_frag+0x160>)
    4552:	2007      	movs	r0, #7
    4554:	f7fd fd3e 	bl	1fd4 <bt_log>
    4558:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    455a:	6872      	ldr	r2, [r6, #4]
	return node->next;
    455c:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    455e:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4560:	4294      	cmp	r4, r2
	list->tail = node;
    4562:	bf08      	it	eq
    4564:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    4566:	f8c4 9004 	str.w	r9, [r4, #4]
	__asm__ volatile(
    456a:	f04f 0320 	mov.w	r3, #32
    456e:	f3ef 8211 	mrs	r2, BASEPRI
    4572:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    4576:	2300      	movs	r3, #0
    4578:	6023      	str	r3, [r4, #0]
    457a:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    457c:	2b00      	cmp	r3, #0
    457e:	d13b      	bne.n	45f8 <send_frag+0x128>
	list->tail = node;
    4580:	616c      	str	r4, [r5, #20]
	list->head = node;
    4582:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4584:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    4588:	4638      	mov	r0, r7
    458a:	f7fe f8f9 	bl	2780 <bt_send>
	if (err) {
    458e:	4603      	mov	r3, r0
    4590:	2800      	cmp	r0, #0
    4592:	d03d      	beq.n	4610 <send_frag+0x140>
		BT_ERR("Unable to send to driver (err %d)", err);
    4594:	4a20      	ldr	r2, [pc, #128]	; (4618 <send_frag+0x148>)
    4596:	4927      	ldr	r1, [pc, #156]	; (4634 <send_frag+0x164>)
    4598:	2003      	movs	r0, #3
    459a:	f7fd fd1b 	bl	1fd4 <bt_log>
	__asm__ volatile(
    459e:	f04f 0320 	mov.w	r3, #32
    45a2:	f3ef 8111 	mrs	r1, BASEPRI
    45a6:	f383 8811 	msr	BASEPRI, r3
    45aa:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    45ac:	2200      	movs	r2, #0
    45ae:	b153      	cbz	r3, 45c6 <send_frag+0xf6>
    45b0:	429c      	cmp	r4, r3
    45b2:	d12a      	bne.n	460a <send_frag+0x13a>
    45b4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    45b6:	bb12      	cbnz	r2, 45fe <send_frag+0x12e>
    45b8:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    45ba:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    45bc:	4294      	cmp	r4, r2
    45be:	d100      	bne.n	45c2 <send_frag+0xf2>
	list->tail = node;
    45c0:	616b      	str	r3, [r5, #20]
	parent->next = child;
    45c2:	2300      	movs	r3, #0
    45c4:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    45c6:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    45ca:	2300      	movs	r3, #0
    45cc:	6063      	str	r3, [r4, #4]
    45ce:	6833      	ldr	r3, [r6, #0]
    45d0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    45d2:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    45d4:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    45d6:	b903      	cbnz	r3, 45da <send_frag+0x10a>
	list->tail = node;
    45d8:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    45da:	4811      	ldr	r0, [pc, #68]	; (4620 <send_frag+0x150>)
    45dc:	f00f f8f3 	bl	137c6 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    45e0:	f1b8 0f00 	cmp.w	r8, #0
    45e4:	d004      	beq.n	45f0 <send_frag+0x120>
		net_buf_unref(buf);
    45e6:	4638      	mov	r0, r7
    45e8:	f00e f856 	bl	12698 <net_buf_unref>
	}
	return false;
    45ec:	f04f 0800 	mov.w	r8, #0
}
    45f0:	4640      	mov	r0, r8
    45f2:	b005      	add	sp, #20
    45f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	parent->next = child;
    45f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    45fa:	616c      	str	r4, [r5, #20]
    45fc:	e7c2      	b.n	4584 <send_frag+0xb4>
	parent->next = child;
    45fe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4600:	696b      	ldr	r3, [r5, #20]
    4602:	429c      	cmp	r4, r3
	list->tail = node;
    4604:	bf08      	it	eq
    4606:	616a      	streq	r2, [r5, #20]
    4608:	e7db      	b.n	45c2 <send_frag+0xf2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    460a:	461a      	mov	r2, r3
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	e7ce      	b.n	45ae <send_frag+0xde>
	return true;
    4610:	f04f 0801 	mov.w	r8, #1
    4614:	e7ec      	b.n	45f0 <send_frag+0x120>
    4616:	bf00      	nop
    4618:	000157fa 	.word	0x000157fa
    461c:	00015b74 	.word	0x00015b74
    4620:	20003b14 	.word	0x20003b14
    4624:	2000037c 	.word	0x2000037c
    4628:	20000414 	.word	0x20000414
    462c:	000157eb 	.word	0x000157eb
    4630:	00015ba0 	.word	0x00015ba0
    4634:	00014ce5 	.word	0x00014ce5

00004638 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    463a:	4c17      	ldr	r4, [pc, #92]	; (4698 <bt_conn_add_le+0x60>)
    463c:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4640:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    4642:	4630      	mov	r0, r6
    4644:	f7ff fdda 	bl	41fc <atomic_get>
    4648:	4605      	mov	r5, r0
    464a:	b108      	cbz	r0, 4650 <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    464c:	2000      	movs	r0, #0
    464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4650:	4601      	mov	r1, r0
    4652:	2298      	movs	r2, #152	; 0x98
    4654:	4620      	mov	r0, r4
    4656:	f7fd fb22 	bl	1c9e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    465a:	f3bf 8f5b 	dmb	ish
    465e:	2301      	movs	r3, #1
    4660:	e856 2f00 	ldrex	r2, [r6]
    4664:	e846 3100 	strex	r1, r3, [r6]
    4668:	2900      	cmp	r1, #0
    466a:	d1f9      	bne.n	4660 <bt_conn_add_le+0x28>
    466c:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4670:	2207      	movs	r2, #7
    4672:	4639      	mov	r1, r7
    4674:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4678:	f7fd fae5 	bl	1c46 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    467c:	2318      	movs	r3, #24
    467e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4682:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4684:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4688:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    468a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    468e:	4903      	ldr	r1, [pc, #12]	; (469c <bt_conn_add_le+0x64>)
    4690:	f00f fb80 	bl	13d94 <k_delayed_work_init>
			conn = &conns[i];
    4694:	4620      	mov	r0, r4

	return conn;
}
    4696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4698:	2000037c 	.word	0x2000037c
    469c:	00004d95 	.word	0x00004d95

000046a0 <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    46a0:	b538      	push	{r3, r4, r5, lr}
    46a2:	460d      	mov	r5, r1
    46a4:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    46a6:	f100 0144 	add.w	r1, r0, #68	; 0x44
    46aa:	2207      	movs	r2, #7
    46ac:	4628      	mov	r0, r5
    46ae:	f7fd fab5 	bl	1c1c <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    46b2:	b160      	cbz	r0, 46ce <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    46b4:	78e3      	ldrb	r3, [r4, #3]
    46b6:	2207      	movs	r2, #7
    46b8:	b933      	cbnz	r3, 46c8 <bt_conn_addr_le_cmp+0x28>
    46ba:	f104 0152 	add.w	r1, r4, #82	; 0x52
    46be:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    46c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    46c4:	f7fd baaa 	b.w	1c1c <memcmp>
    46c8:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    46cc:	e7f7      	b.n	46be <bt_conn_addr_le_cmp+0x1e>
    46ce:	bd38      	pop	{r3, r4, r5, pc}

000046d0 <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    46d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46d2:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    46d4:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    46d8:	f3bf 8f5b 	dmb	ish
    46dc:	e855 3f00 	ldrex	r3, [r5]
    46e0:	3301      	adds	r3, #1
    46e2:	e845 3200 	strex	r2, r3, [r5]
    46e6:	2a00      	cmp	r2, #0
    46e8:	d1f8      	bne.n	46dc <bt_conn_ref+0xc>
    46ea:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    46ee:	f00f f85b 	bl	137a8 <_impl_k_current_get>
    46f2:	4603      	mov	r3, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    46f4:	4628      	mov	r0, r5
    46f6:	8822      	ldrh	r2, [r4, #0]
    46f8:	f7ff fd80 	bl	41fc <atomic_get>
    46fc:	4904      	ldr	r1, [pc, #16]	; (4710 <bt_conn_ref+0x40>)
    46fe:	9001      	str	r0, [sp, #4]
    4700:	9200      	str	r2, [sp, #0]
    4702:	2007      	movs	r0, #7
    4704:	4a03      	ldr	r2, [pc, #12]	; (4714 <bt_conn_ref+0x44>)
    4706:	f7fd fc65 	bl	1fd4 <bt_log>

	return conn;
}
    470a:	4620      	mov	r0, r4
    470c:	b003      	add	sp, #12
    470e:	bd30      	pop	{r4, r5, pc}
    4710:	00015ab0 	.word	0x00015ab0
    4714:	00015849 	.word	0x00015849

00004718 <bt_conn_lookup_handle>:
{
    4718:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    471a:	4b0a      	ldr	r3, [pc, #40]	; (4744 <bt_conn_lookup_handle+0x2c>)
{
    471c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    471e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4722:	f7ff fd6b 	bl	41fc <atomic_get>
    4726:	b158      	cbz	r0, 4740 <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4728:	7a5a      	ldrb	r2, [r3, #9]
    472a:	3a03      	subs	r2, #3
    472c:	2a01      	cmp	r2, #1
    472e:	d807      	bhi.n	4740 <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    4730:	881a      	ldrh	r2, [r3, #0]
    4732:	428a      	cmp	r2, r1
    4734:	d104      	bne.n	4740 <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    4736:	4618      	mov	r0, r3
}
    4738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    473c:	f7ff bfc8 	b.w	46d0 <bt_conn_ref>
}
    4740:	2000      	movs	r0, #0
    4742:	bd08      	pop	{r3, pc}
    4744:	2000037c 	.word	0x2000037c

00004748 <bt_conn_lookup_addr_le>:
{
    4748:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    474a:	4c0a      	ldr	r4, [pc, #40]	; (4774 <bt_conn_lookup_addr_le+0x2c>)
{
    474c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    474e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4752:	f7ff fd53 	bl	41fc <atomic_get>
    4756:	b150      	cbz	r0, 476e <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4758:	78a3      	ldrb	r3, [r4, #2]
    475a:	b943      	cbnz	r3, 476e <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    475c:	4620      	mov	r0, r4
    475e:	f7ff ff9f 	bl	46a0 <bt_conn_addr_le_cmp>
    4762:	b920      	cbnz	r0, 476e <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    4764:	4620      	mov	r0, r4
}
    4766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    476a:	f7ff bfb1 	b.w	46d0 <bt_conn_ref>
}
    476e:	2000      	movs	r0, #0
    4770:	bd10      	pop	{r4, pc}
    4772:	bf00      	nop
    4774:	2000037c 	.word	0x2000037c

00004778 <bt_conn_lookup_state_le>:
{
    4778:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    477a:	4c0d      	ldr	r4, [pc, #52]	; (47b0 <bt_conn_lookup_state_le+0x38>)
{
    477c:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    477e:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4782:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4784:	f7ff fd3a 	bl	41fc <atomic_get>
    4788:	b180      	cbz	r0, 47ac <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    478a:	78a2      	ldrb	r2, [r4, #2]
    478c:	b972      	cbnz	r2, 47ac <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    478e:	b93b      	cbnz	r3, 47a0 <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    4790:	7a63      	ldrb	r3, [r4, #9]
    4792:	42ab      	cmp	r3, r5
    4794:	d10a      	bne.n	47ac <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4796:	4806      	ldr	r0, [pc, #24]	; (47b0 <bt_conn_lookup_state_le+0x38>)
}
    4798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    479c:	f7ff bf98 	b.w	46d0 <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    47a0:	4619      	mov	r1, r3
    47a2:	4620      	mov	r0, r4
    47a4:	f7ff ff7c 	bl	46a0 <bt_conn_addr_le_cmp>
    47a8:	2800      	cmp	r0, #0
    47aa:	d0f1      	beq.n	4790 <bt_conn_lookup_state_le+0x18>
}
    47ac:	2000      	movs	r0, #0
    47ae:	bd38      	pop	{r3, r4, r5, pc}
    47b0:	2000037c 	.word	0x2000037c

000047b4 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    47b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    47b6:	4605      	mov	r5, r0
	atomic_dec(&conn->ref);
    47b8:	f100 0440 	add.w	r4, r0, #64	; 0x40
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    47bc:	f3bf 8f5b 	dmb	ish
    47c0:	e854 3f00 	ldrex	r3, [r4]
    47c4:	3b01      	subs	r3, #1
    47c6:	e844 3200 	strex	r2, r3, [r4]
    47ca:	2a00      	cmp	r2, #0
    47cc:	d1f8      	bne.n	47c0 <bt_conn_unref+0xc>
    47ce:	f3bf 8f5b 	dmb	ish
    47d2:	f00e ffe9 	bl	137a8 <_impl_k_current_get>
    47d6:	4603      	mov	r3, r0

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    47d8:	4620      	mov	r0, r4
    47da:	882a      	ldrh	r2, [r5, #0]
    47dc:	f7ff fd0e 	bl	41fc <atomic_get>
    47e0:	4904      	ldr	r1, [pc, #16]	; (47f4 <bt_conn_unref+0x40>)
    47e2:	9001      	str	r0, [sp, #4]
    47e4:	9200      	str	r2, [sp, #0]
    47e6:	2007      	movs	r0, #7
    47e8:	4a03      	ldr	r2, [pc, #12]	; (47f8 <bt_conn_unref+0x44>)
    47ea:	f7fd fbf3 	bl	1fd4 <bt_log>
}
    47ee:	b003      	add	sp, #12
    47f0:	bd30      	pop	{r4, r5, pc}
    47f2:	bf00      	nop
    47f4:	00015ab0 	.word	0x00015ab0
    47f8:	00015855 	.word	0x00015855

000047fc <conn_cleanup>:
{
    47fc:	b538      	push	{r3, r4, r5, lr}
    47fe:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    4800:	f100 0528 	add.w	r5, r0, #40	; 0x28
    4804:	2100      	movs	r1, #0
    4806:	4628      	mov	r0, r5
    4808:	f00d ff1c 	bl	12644 <net_buf_get>
    480c:	b950      	cbnz	r0, 4824 <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    480e:	4620      	mov	r0, r4
    4810:	f7ff fe30 	bl	4474 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    4814:	4620      	mov	r0, r4
    4816:	f7ff fcf7 	bl	4208 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    481a:	4620      	mov	r0, r4
}
    481c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4820:	f7ff bfc8 	b.w	47b4 <bt_conn_unref>
		net_buf_unref(buf);
    4824:	f00d ff38 	bl	12698 <net_buf_unref>
    4828:	e7ec      	b.n	4804 <conn_cleanup+0x8>
	...

0000482c <bt_conn_prepare_events>:
{
    482c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    482e:	4605      	mov	r5, r0
    4830:	f00e ffba 	bl	137a8 <_impl_k_current_get>
	BT_DBG("");
    4834:	4a26      	ldr	r2, [pc, #152]	; (48d0 <bt_conn_prepare_events+0xa4>)
    4836:	4927      	ldr	r1, [pc, #156]	; (48d4 <bt_conn_prepare_events+0xa8>)
    4838:	4603      	mov	r3, r0
    483a:	2007      	movs	r0, #7
    483c:	f7fd fbca 	bl	1fd4 <bt_log>
	conn_change.signaled = 0;
    4840:	4b25      	ldr	r3, [pc, #148]	; (48d8 <bt_conn_prepare_events+0xac>)
    4842:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4844:	2101      	movs	r1, #1
    4846:	4628      	mov	r0, r5
	conn_change.signaled = 0;
    4848:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    484a:	f00f fbea 	bl	14022 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    484e:	4b23      	ldr	r3, [pc, #140]	; (48dc <bt_conn_prepare_events+0xb0>)
    4850:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4854:	f7ff fcd2 	bl	41fc <atomic_get>
    4858:	461e      	mov	r6, r3
    485a:	b910      	cbnz	r0, 4862 <bt_conn_prepare_events+0x36>
			continue;
    485c:	2001      	movs	r0, #1
}
    485e:	b002      	add	sp, #8
    4860:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4862:	7a5a      	ldrb	r2, [r3, #9]
    4864:	b992      	cbnz	r2, 488c <bt_conn_prepare_events+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4866:	f3bf 8f5b 	dmb	ish
    486a:	1d1a      	adds	r2, r3, #4
    486c:	e852 1f00 	ldrex	r1, [r2]
    4870:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    4874:	e842 0400 	strex	r4, r0, [r2]
    4878:	2c00      	cmp	r4, #0
    487a:	d1f7      	bne.n	486c <bt_conn_prepare_events+0x40>
    487c:	f3bf 8f5b 	dmb	ish
    4880:	064a      	lsls	r2, r1, #25
    4882:	d503      	bpl.n	488c <bt_conn_prepare_events+0x60>
			conn_cleanup(conn);
    4884:	4618      	mov	r0, r3
    4886:	f7ff ffb9 	bl	47fc <conn_cleanup>
    488a:	e7e7      	b.n	485c <bt_conn_prepare_events+0x30>
		if (conn->state != BT_CONN_CONNECTED) {
    488c:	7a74      	ldrb	r4, [r6, #9]
    488e:	2c03      	cmp	r4, #3
    4890:	d1e4      	bne.n	485c <bt_conn_prepare_events+0x30>
    4892:	f00e ff89 	bl	137a8 <_impl_k_current_get>
		BT_DBG("Adding conn %p to poll list", conn);
    4896:	4a0e      	ldr	r2, [pc, #56]	; (48d0 <bt_conn_prepare_events+0xa4>)
    4898:	4911      	ldr	r1, [pc, #68]	; (48e0 <bt_conn_prepare_events+0xb4>)
    489a:	9600      	str	r6, [sp, #0]
    489c:	4603      	mov	r3, r0
    489e:	2007      	movs	r0, #7
    48a0:	f7fd fb98 	bl	1fd4 <bt_log>
		k_poll_event_init(&events[ev_count],
    48a4:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <bt_conn_prepare_events+0xb8>)
    48a6:	2200      	movs	r2, #0
    48a8:	2104      	movs	r1, #4
    48aa:	f105 0014 	add.w	r0, r5, #20
    48ae:	f00f fbb8 	bl	14022 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    48b2:	2301      	movs	r3, #1
    48b4:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    48b8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    48bc:	4b0a      	ldr	r3, [pc, #40]	; (48e8 <bt_conn_prepare_events+0xbc>)
    48be:	2200      	movs	r2, #0
    48c0:	2104      	movs	r1, #4
    48c2:	f00f fbae 	bl	14022 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    48c6:	2302      	movs	r3, #2
    48c8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    48cc:	4620      	mov	r0, r4
	return ev_count;
    48ce:	e7c6      	b.n	485e <bt_conn_prepare_events+0x32>
    48d0:	0001580d 	.word	0x0001580d
    48d4:	000158c2 	.word	0x000158c2
    48d8:	20003bb0 	.word	0x20003bb0
    48dc:	2000037c 	.word	0x2000037c
    48e0:	000158cc 	.word	0x000158cc
    48e4:	20000394 	.word	0x20000394
    48e8:	200003a4 	.word	0x200003a4

000048ec <bt_conn_set_state>:
{
    48ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48ee:	4604      	mov	r4, r0
    48f0:	460e      	mov	r6, r1
    48f2:	f00e ff59 	bl	137a8 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    48f6:	7a62      	ldrb	r2, [r4, #9]
    48f8:	2a04      	cmp	r2, #4
    48fa:	bf96      	itet	ls
    48fc:	4962      	ldrls	r1, [pc, #392]	; (4a88 <bt_conn_set_state+0x19c>)
    48fe:	4a63      	ldrhi	r2, [pc, #396]	; (4a8c <bt_conn_set_state+0x1a0>)
    4900:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
    4904:	9200      	str	r2, [sp, #0]
    4906:	2e04      	cmp	r6, #4
    4908:	bf96      	itet	ls
    490a:	495f      	ldrls	r1, [pc, #380]	; (4a88 <bt_conn_set_state+0x19c>)
    490c:	495f      	ldrhi	r1, [pc, #380]	; (4a8c <bt_conn_set_state+0x1a0>)
    490e:	f851 1026 	ldrls.w	r1, [r1, r6, lsl #2]
    4912:	9101      	str	r1, [sp, #4]
    4914:	4603      	mov	r3, r0
    4916:	4a5e      	ldr	r2, [pc, #376]	; (4a90 <bt_conn_set_state+0x1a4>)
    4918:	495e      	ldr	r1, [pc, #376]	; (4a94 <bt_conn_set_state+0x1a8>)
    491a:	2007      	movs	r0, #7
    491c:	f7fd fb5a 	bl	1fd4 <bt_log>
	if (conn->state == state) {
    4920:	7a65      	ldrb	r5, [r4, #9]
    4922:	42ae      	cmp	r6, r5
    4924:	d107      	bne.n	4936 <bt_conn_set_state+0x4a>
		BT_WARN("no transition");
    4926:	4a5a      	ldr	r2, [pc, #360]	; (4a90 <bt_conn_set_state+0x1a4>)
    4928:	495b      	ldr	r1, [pc, #364]	; (4a98 <bt_conn_set_state+0x1ac>)
    492a:	2004      	movs	r0, #4
}
    492c:	b003      	add	sp, #12
    492e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("no transition");
    4932:	f7fd bb4f 	b.w	1fd4 <bt_log>
	conn->state = state;
    4936:	7266      	strb	r6, [r4, #9]
	switch (old_state) {
    4938:	b155      	cbz	r5, 4950 <bt_conn_set_state+0x64>
    493a:	2d02      	cmp	r5, #2
    493c:	d00c      	beq.n	4958 <bt_conn_set_state+0x6c>
	switch (conn->state) {
    493e:	7a63      	ldrb	r3, [r4, #9]
    4940:	2b04      	cmp	r3, #4
    4942:	f200 8096 	bhi.w	4a72 <bt_conn_set_state+0x186>
    4946:	e8df f003 	tbb	[pc, r3]
    494a:	9d2b      	.short	0x9d2b
    494c:	0f88      	.short	0x0f88
    494e:	9d          	.byte	0x9d
    494f:	00          	.byte	0x00
		bt_conn_ref(conn);
    4950:	4620      	mov	r0, r4
    4952:	f7ff febd 	bl	46d0 <bt_conn_ref>
		break;
    4956:	e7f2      	b.n	493e <bt_conn_set_state+0x52>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4958:	78a3      	ldrb	r3, [r4, #2]
    495a:	2b00      	cmp	r3, #0
    495c:	d1ef      	bne.n	493e <bt_conn_set_state+0x52>
			k_delayed_work_cancel(&conn->le.update_work);
    495e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4962:	f00f fa27 	bl	13db4 <k_delayed_work_cancel>
    4966:	e7ea      	b.n	493e <bt_conn_set_state+0x52>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4968:	78a3      	ldrb	r3, [r4, #2]
    496a:	2b02      	cmp	r3, #2
    496c:	f000 808a 	beq.w	4a84 <bt_conn_set_state+0x198>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4970:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4974:	f00e fc5a 	bl	1322c <_impl_k_queue_init>
    4978:	f104 0018 	add.w	r0, r4, #24
    497c:	f00e fc56 	bl	1322c <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4980:	2100      	movs	r1, #0
    4982:	4846      	ldr	r0, [pc, #280]	; (4a9c <bt_conn_set_state+0x1b0>)
    4984:	f00f fbf0 	bl	14168 <_impl_k_poll_signal>
	list->head = NULL;
    4988:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    498a:	4620      	mov	r0, r4
    498c:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    498e:	63e3      	str	r3, [r4, #60]	; 0x3c
    4990:	f000 fbc6 	bl	5120 <bt_l2cap_connected>
		notify_connected(conn);
    4994:	4620      	mov	r0, r4
}
    4996:	b003      	add	sp, #12
    4998:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    499c:	f7ff bc1e 	b.w	41dc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    49a0:	78a3      	ldrb	r3, [r4, #2]
    49a2:	2b02      	cmp	r3, #2
    49a4:	d105      	bne.n	49b2 <bt_conn_set_state+0xc6>
			bt_conn_unref(conn);
    49a6:	4620      	mov	r0, r4
}
    49a8:	b003      	add	sp, #12
    49aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			bt_conn_unref(conn);
    49ae:	f7ff bf01 	b.w	47b4 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    49b2:	1eeb      	subs	r3, r5, #3
    49b4:	2b01      	cmp	r3, #1
    49b6:	d844      	bhi.n	4a42 <bt_conn_set_state+0x156>
			bt_l2cap_disconnected(conn);
    49b8:	4620      	mov	r0, r4
    49ba:	f000 fbeb 	bl	5194 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    49be:	4b38      	ldr	r3, [pc, #224]	; (4aa0 <bt_conn_set_state+0x1b4>)
    49c0:	681d      	ldr	r5, [r3, #0]
    49c2:	b9ed      	cbnz	r5, 4a00 <bt_conn_set_state+0x114>
    49c4:	4e37      	ldr	r6, [pc, #220]	; (4aa4 <bt_conn_set_state+0x1b8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    49c6:	4f38      	ldr	r7, [pc, #224]	; (4aa8 <bt_conn_set_state+0x1bc>)
	__asm__ volatile(
    49c8:	f04f 0320 	mov.w	r3, #32
    49cc:	f3ef 8111 	mrs	r1, BASEPRI
    49d0:	f383 8811 	msr	BASEPRI, r3
    49d4:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    49d6:	b12b      	cbz	r3, 49e4 <bt_conn_set_state+0xf8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    49d8:	6960      	ldr	r0, [r4, #20]
	return node->next;
    49da:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    49dc:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    49de:	4283      	cmp	r3, r0
	list->tail = node;
    49e0:	bf08      	it	eq
    49e2:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    49e4:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    49e8:	b18b      	cbz	r3, 4a0e <bt_conn_set_state+0x122>
    49ea:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    49ec:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    49ee:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    49f0:	605d      	str	r5, [r3, #4]
	list->head = node;
    49f2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    49f4:	b902      	cbnz	r2, 49f8 <bt_conn_set_state+0x10c>
	list->tail = node;
    49f6:	6073      	str	r3, [r6, #4]
    49f8:	4638      	mov	r0, r7
    49fa:	f00e fee4 	bl	137c6 <_impl_k_sem_give>
    49fe:	e7e3      	b.n	49c8 <bt_conn_set_state+0xdc>
		if (cb->disconnected) {
    4a00:	686b      	ldr	r3, [r5, #4]
    4a02:	b113      	cbz	r3, 4a0a <bt_conn_set_state+0x11e>
			cb->disconnected(conn, conn->err);
    4a04:	7a21      	ldrb	r1, [r4, #8]
    4a06:	4620      	mov	r0, r4
    4a08:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4a0a:	692d      	ldr	r5, [r5, #16]
    4a0c:	e7d9      	b.n	49c2 <bt_conn_set_state+0xd6>
			if (conn->type == BT_CONN_TYPE_LE) {
    4a0e:	78a3      	ldrb	r3, [r4, #2]
    4a10:	b91b      	cbnz	r3, 4a1a <bt_conn_set_state+0x12e>
				k_delayed_work_cancel(&conn->le.update_work);
    4a12:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4a16:	f00f f9cd 	bl	13db4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a1a:	f3bf 8f5b 	dmb	ish
    4a1e:	3404      	adds	r4, #4
    4a20:	e854 3f00 	ldrex	r3, [r4]
    4a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4a28:	e844 3200 	strex	r2, r3, [r4]
    4a2c:	2a00      	cmp	r2, #0
    4a2e:	d1f7      	bne.n	4a20 <bt_conn_set_state+0x134>
    4a30:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4a34:	4819      	ldr	r0, [pc, #100]	; (4a9c <bt_conn_set_state+0x1b0>)
    4a36:	2100      	movs	r1, #0
}
    4a38:	b003      	add	sp, #12
    4a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4a3e:	f00f bb93 	b.w	14168 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4a42:	2d02      	cmp	r5, #2
    4a44:	d103      	bne.n	4a4e <bt_conn_set_state+0x162>
			notify_connected(conn);
    4a46:	4620      	mov	r0, r4
    4a48:	f7ff fbc8 	bl	41dc <notify_connected>
    4a4c:	e7ab      	b.n	49a6 <bt_conn_set_state+0xba>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4a4e:	2d01      	cmp	r5, #1
    4a50:	d118      	bne.n	4a84 <bt_conn_set_state+0x198>
			if (conn->err) {
    4a52:	7a23      	ldrb	r3, [r4, #8]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d0a6      	beq.n	49a6 <bt_conn_set_state+0xba>
    4a58:	e7f5      	b.n	4a46 <bt_conn_set_state+0x15a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4a5a:	78a3      	ldrb	r3, [r4, #2]
    4a5c:	b993      	cbnz	r3, 4a84 <bt_conn_set_state+0x198>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4a5e:	4813      	ldr	r0, [pc, #76]	; (4aac <bt_conn_set_state+0x1c0>)
    4a60:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4a64:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4a68:	b003      	add	sp, #12
    4a6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4a6e:	f00f ba05 	b.w	13e7c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    4a72:	4a07      	ldr	r2, [pc, #28]	; (4a90 <bt_conn_set_state+0x1a4>)
    4a74:	490e      	ldr	r1, [pc, #56]	; (4ab0 <bt_conn_set_state+0x1c4>)
    4a76:	4633      	mov	r3, r6
    4a78:	2004      	movs	r0, #4
}
    4a7a:	b003      	add	sp, #12
    4a7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("no valid (%u) state was set", state);
    4a80:	f7fd baa8 	b.w	1fd4 <bt_log>
}
    4a84:	b003      	add	sp, #12
    4a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a88:	000157a8 	.word	0x000157a8
    4a8c:	00015b06 	.word	0x00015b06
    4a90:	00015837 	.word	0x00015837
    4a94:	00015b10 	.word	0x00015b10
    4a98:	00015b22 	.word	0x00015b22
    4a9c:	20003bb0 	.word	0x20003bb0
    4aa0:	20000368 	.word	0x20000368
    4aa4:	20000414 	.word	0x20000414
    4aa8:	20003b14 	.word	0x20003b14
    4aac:	200019b0 	.word	0x200019b0
    4ab0:	00015b34 	.word	0x00015b34

00004ab4 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4ab4:	3044      	adds	r0, #68	; 0x44
    4ab6:	4770      	bx	lr

00004ab8 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4ab8:	b570      	push	{r4, r5, r6, lr}
    4aba:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4abc:	4608      	mov	r0, r1
{
    4abe:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4ac0:	f7fd fddc 	bl	267c <bt_le_conn_params_valid>
    4ac4:	b908      	cbnz	r0, 4aca <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4ac6:	2400      	movs	r4, #0
    4ac8:	e01c      	b.n	4b04 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4aca:	481d      	ldr	r0, [pc, #116]	; (4b40 <bt_conn_create_le+0x88>)
    4acc:	f7ff fb96 	bl	41fc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4ad0:	0583      	lsls	r3, r0, #22
    4ad2:	d4f8      	bmi.n	4ac6 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4ad4:	4630      	mov	r0, r6
    4ad6:	f7ff fe37 	bl	4748 <bt_conn_lookup_addr_le>
	if (conn) {
    4ada:	4604      	mov	r4, r0
    4adc:	b1a0      	cbz	r0, 4b08 <bt_conn_create_le+0x50>
		switch (conn->state) {
    4ade:	7a43      	ldrb	r3, [r0, #9]
    4ae0:	2b01      	cmp	r3, #1
    4ae2:	d006      	beq.n	4af2 <bt_conn_create_le+0x3a>
    4ae4:	d301      	bcc.n	4aea <bt_conn_create_le+0x32>
    4ae6:	2b03      	cmp	r3, #3
    4ae8:	d90c      	bls.n	4b04 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    4aea:	4620      	mov	r0, r4
    4aec:	f7ff fe62 	bl	47b4 <bt_conn_unref>
    4af0:	e7e9      	b.n	4ac6 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4af2:	886b      	ldrh	r3, [r5, #2]
    4af4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4af8:	88ab      	ldrh	r3, [r5, #4]
    4afa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4afe:	88eb      	ldrh	r3, [r5, #6]
    4b00:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4b04:	4620      	mov	r0, r4
    4b06:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4b08:	4630      	mov	r0, r6
    4b0a:	f7ff fd95 	bl	4638 <bt_conn_add_le>
	if (!conn) {
    4b0e:	4604      	mov	r4, r0
    4b10:	2800      	cmp	r0, #0
    4b12:	d0f7      	beq.n	4b04 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4b14:	2207      	movs	r2, #7
    4b16:	4631      	mov	r1, r6
    4b18:	3052      	adds	r0, #82	; 0x52
    4b1a:	f7fd f894 	bl	1c46 <memcpy>
	conn->le.interval_max = param->interval_max;
    4b1e:	886b      	ldrh	r3, [r5, #2]
    4b20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4b24:	88ab      	ldrh	r3, [r5, #4]
    4b26:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4b2a:	88eb      	ldrh	r3, [r5, #6]
    4b2c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4b30:	4620      	mov	r0, r4
    4b32:	2101      	movs	r1, #1
    4b34:	f7ff feda 	bl	48ec <bt_conn_set_state>
	bt_le_scan_update(true);
    4b38:	2001      	movs	r0, #1
    4b3a:	f7fd fec9 	bl	28d0 <bt_le_scan_update>
	return conn;
    4b3e:	e7e1      	b.n	4b04 <bt_conn_create_le+0x4c>
    4b40:	20003af8 	.word	0x20003af8

00004b44 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4b44:	b570      	push	{r4, r5, r6, lr}
    4b46:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4b48:	460d      	mov	r5, r1
    4b4a:	2900      	cmp	r1, #0
    4b4c:	d13b      	bne.n	4bc6 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4b4e:	4630      	mov	r0, r6
    4b50:	f7ff fdfa 	bl	4748 <bt_conn_lookup_addr_le>
	if (!conn) {
    4b54:	4604      	mov	r4, r0
    4b56:	b928      	cbnz	r0, 4b64 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4b58:	4630      	mov	r0, r6
    4b5a:	f7ff fd6d 	bl	4638 <bt_conn_add_le>
		if (!conn) {
    4b5e:	4604      	mov	r4, r0
    4b60:	2800      	cmp	r0, #0
    4b62:	d051      	beq.n	4c08 <bt_le_set_auto_conn+0xc4>
    4b64:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4b66:	2d00      	cmp	r5, #0
    4b68:	d035      	beq.n	4bd6 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    4b6a:	886a      	ldrh	r2, [r5, #2]
    4b6c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4b70:	88aa      	ldrh	r2, [r5, #4]
    4b72:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4b76:	88ea      	ldrh	r2, [r5, #6]
    4b78:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4b7c:	f3bf 8f5b 	dmb	ish
    4b80:	e853 2f00 	ldrex	r2, [r3]
    4b84:	f042 0101 	orr.w	r1, r2, #1
    4b88:	e843 1000 	strex	r0, r1, [r3]
    4b8c:	2800      	cmp	r0, #0
    4b8e:	d1f7      	bne.n	4b80 <bt_le_set_auto_conn+0x3c>
    4b90:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4b94:	07d1      	lsls	r1, r2, #31
    4b96:	d402      	bmi.n	4b9e <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    4b98:	4620      	mov	r0, r4
    4b9a:	f7ff fd99 	bl	46d0 <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4b9e:	7a63      	ldrb	r3, [r4, #9]
    4ba0:	b963      	cbnz	r3, 4bbc <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4ba2:	481b      	ldr	r0, [pc, #108]	; (4c10 <bt_le_set_auto_conn+0xcc>)
    4ba4:	f7ff fb2a 	bl	41fc <atomic_get>
    4ba8:	0783      	lsls	r3, r0, #30
    4baa:	d507      	bpl.n	4bbc <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4bac:	b11d      	cbz	r5, 4bb6 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4bae:	2101      	movs	r1, #1
    4bb0:	4620      	mov	r0, r4
    4bb2:	f7ff fe9b 	bl	48ec <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4bb6:	2000      	movs	r0, #0
    4bb8:	f7fd fe8a 	bl	28d0 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    4bbc:	4620      	mov	r0, r4
    4bbe:	f7ff fdf9 	bl	47b4 <bt_conn_unref>

	return 0;
    4bc2:	2000      	movs	r0, #0
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4bc6:	4608      	mov	r0, r1
    4bc8:	f7fd fd58 	bl	267c <bt_le_conn_params_valid>
    4bcc:	2800      	cmp	r0, #0
    4bce:	d1be      	bne.n	4b4e <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4bd0:	f06f 0015 	mvn.w	r0, #21
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4bd6:	f3bf 8f5b 	dmb	ish
    4bda:	e853 2f00 	ldrex	r2, [r3]
    4bde:	f022 0101 	bic.w	r1, r2, #1
    4be2:	e843 1000 	strex	r0, r1, [r3]
    4be6:	2800      	cmp	r0, #0
    4be8:	d1f7      	bne.n	4bda <bt_le_set_auto_conn+0x96>
    4bea:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4bee:	07d2      	lsls	r2, r2, #31
    4bf0:	d5d5      	bpl.n	4b9e <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4bf2:	4620      	mov	r0, r4
    4bf4:	f7ff fdde 	bl	47b4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4bf8:	7a63      	ldrb	r3, [r4, #9]
    4bfa:	2b01      	cmp	r3, #1
    4bfc:	d1cf      	bne.n	4b9e <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4bfe:	4629      	mov	r1, r5
    4c00:	4620      	mov	r0, r4
    4c02:	f7ff fe73 	bl	48ec <bt_conn_set_state>
    4c06:	e7ca      	b.n	4b9e <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4c08:	f06f 000b 	mvn.w	r0, #11
}
    4c0c:	bd70      	pop	{r4, r5, r6, pc}
    4c0e:	bf00      	nop
    4c10:	20003af8 	.word	0x20003af8

00004c14 <bt_conn_disconnect>:
{
    4c14:	b570      	push	{r4, r5, r6, lr}
    4c16:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4c18:	7881      	ldrb	r1, [r0, #2]
{
    4c1a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4c1c:	b911      	cbnz	r1, 4c24 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4c1e:	3044      	adds	r0, #68	; 0x44
    4c20:	f7ff ff90 	bl	4b44 <bt_le_set_auto_conn>
	switch (conn->state) {
    4c24:	7a63      	ldrb	r3, [r4, #9]
    4c26:	3b01      	subs	r3, #1
    4c28:	2b03      	cmp	r3, #3
    4c2a:	d803      	bhi.n	4c34 <bt_conn_disconnect+0x20>
    4c2c:	e8df f003 	tbb	[pc, r3]
    4c30:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4c34:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4c38:	4628      	mov	r0, r5
    4c3a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c3c:	4620      	mov	r0, r4
		conn->err = reason;
    4c3e:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c40:	2100      	movs	r1, #0
    4c42:	f7ff fe53 	bl	48ec <bt_conn_set_state>
		bt_le_scan_update(false);
    4c46:	2000      	movs	r0, #0
    4c48:	f7fd fe42 	bl	28d0 <bt_le_scan_update>
		return 0;
    4c4c:	2500      	movs	r5, #0
    4c4e:	e7f3      	b.n	4c38 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4c50:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4c54:	f00f f8ae 	bl	13db4 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4c58:	2100      	movs	r1, #0
    4c5a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4c62:	f7fd bdb7 	b.w	27d4 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4c66:	2103      	movs	r1, #3
    4c68:	f240 4006 	movw	r0, #1030	; 0x406
    4c6c:	f7fd fbb6 	bl	23dc <bt_hci_cmd_create>
	if (!buf) {
    4c70:	4605      	mov	r5, r0
    4c72:	b198      	cbz	r0, 4c9c <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4c74:	2103      	movs	r1, #3
    4c76:	3008      	adds	r0, #8
    4c78:	f00d fd40 	bl	126fc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4c7c:	8823      	ldrh	r3, [r4, #0]
    4c7e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4c80:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4c82:	4629      	mov	r1, r5
    4c84:	f240 4006 	movw	r0, #1030	; 0x406
    4c88:	f7fd fda4 	bl	27d4 <bt_hci_cmd_send>
	if (err) {
    4c8c:	4605      	mov	r5, r0
    4c8e:	2800      	cmp	r0, #0
    4c90:	d1d2      	bne.n	4c38 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4c92:	2104      	movs	r1, #4
    4c94:	4620      	mov	r0, r4
    4c96:	f7ff fe29 	bl	48ec <bt_conn_set_state>
    4c9a:	e7cd      	b.n	4c38 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4c9c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4ca0:	e7ca      	b.n	4c38 <bt_conn_disconnect+0x24>

00004ca2 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ca4:	4607      	mov	r7, r0
    4ca6:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4ca8:	f242 0013 	movw	r0, #8211	; 0x2013
    4cac:	210e      	movs	r1, #14
    4cae:	f7fd fb95 	bl	23dc <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4cb2:	4606      	mov	r6, r0
    4cb4:	b1c8      	cbz	r0, 4cea <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4cb6:	210e      	movs	r1, #14
    4cb8:	3008      	adds	r0, #8
    4cba:	f00d fd1f 	bl	126fc <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4cbe:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4cc0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4cc2:	220e      	movs	r2, #14
    4cc4:	f7fc ffeb 	bl	1c9e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4cc8:	883b      	ldrh	r3, [r7, #0]
    4cca:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4ccc:	882b      	ldrh	r3, [r5, #0]
    4cce:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4cd0:	886b      	ldrh	r3, [r5, #2]
    4cd2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4cd4:	88ab      	ldrh	r3, [r5, #4]
    4cd6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4cd8:	88eb      	ldrh	r3, [r5, #6]
    4cda:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4cdc:	4631      	mov	r1, r6
    4cde:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4ce6:	f7fd bd75 	b.w	27d4 <bt_hci_cmd_send>
}
    4cea:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004cf0 <bt_conn_le_param_update>:
{
    4cf0:	b530      	push	{r4, r5, lr}
    4cf2:	460d      	mov	r5, r1
    4cf4:	b087      	sub	sp, #28
    4cf6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4cf8:	f00e fd56 	bl	137a8 <_impl_k_current_get>
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4cfc:	88eb      	ldrh	r3, [r5, #6]
    4cfe:	9305      	str	r3, [sp, #20]
    4d00:	88ab      	ldrh	r3, [r5, #4]
    4d02:	9304      	str	r3, [sp, #16]
    4d04:	886b      	ldrh	r3, [r5, #2]
    4d06:	9303      	str	r3, [sp, #12]
    4d08:	882b      	ldrh	r3, [r5, #0]
    4d0a:	9302      	str	r3, [sp, #8]
    4d0c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4d10:	9301      	str	r3, [sp, #4]
    4d12:	4a1d      	ldr	r2, [pc, #116]	; (4d88 <bt_conn_le_param_update+0x98>)
    4d14:	9400      	str	r4, [sp, #0]
    4d16:	4603      	mov	r3, r0
    4d18:	491c      	ldr	r1, [pc, #112]	; (4d8c <bt_conn_le_param_update+0x9c>)
    4d1a:	2007      	movs	r0, #7
    4d1c:	f7fd f95a 	bl	1fd4 <bt_log>
	if (conn->le.interval >= param->interval_min &&
    4d20:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    4d24:	882a      	ldrh	r2, [r5, #0]
    4d26:	429a      	cmp	r2, r3
    4d28:	d80c      	bhi.n	4d44 <bt_conn_le_param_update+0x54>
    4d2a:	886a      	ldrh	r2, [r5, #2]
    4d2c:	429a      	cmp	r2, r3
    4d2e:	d309      	bcc.n	4d44 <bt_conn_le_param_update+0x54>
	    conn->le.interval <= param->interval_max &&
    4d30:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    4d34:	88ab      	ldrh	r3, [r5, #4]
    4d36:	429a      	cmp	r2, r3
    4d38:	d104      	bne.n	4d44 <bt_conn_le_param_update+0x54>
	    conn->le.latency == param->latency &&
    4d3a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    4d3e:	88eb      	ldrh	r3, [r5, #6]
    4d40:	429a      	cmp	r2, r3
    4d42:	d01c      	beq.n	4d7e <bt_conn_le_param_update+0x8e>
	k_delayed_work_cancel(&conn->le.update_work);
    4d44:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4d48:	f00f f834 	bl	13db4 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4d4c:	4b10      	ldr	r3, [pc, #64]	; (4d90 <bt_conn_le_param_update+0xa0>)
    4d4e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4d52:	079a      	lsls	r2, r3, #30
    4d54:	d503      	bpl.n	4d5e <bt_conn_le_param_update+0x6e>
    4d56:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4d5a:	079b      	lsls	r3, r3, #30
    4d5c:	d401      	bmi.n	4d62 <bt_conn_le_param_update+0x72>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4d5e:	78e3      	ldrb	r3, [r4, #3]
    4d60:	b933      	cbnz	r3, 4d70 <bt_conn_le_param_update+0x80>
		return bt_conn_le_conn_update(conn, param);
    4d62:	4629      	mov	r1, r5
    4d64:	4620      	mov	r0, r4
}
    4d66:	b007      	add	sp, #28
    4d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4d6c:	f7ff bf99 	b.w	4ca2 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4d70:	4629      	mov	r1, r5
    4d72:	4620      	mov	r0, r4
}
    4d74:	b007      	add	sp, #28
    4d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4d7a:	f000 bb3b 	b.w	53f4 <bt_l2cap_update_conn_param>
}
    4d7e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4d82:	b007      	add	sp, #28
    4d84:	bd30      	pop	{r4, r5, pc}
    4d86:	bf00      	nop
    4d88:	00015863 	.word	0x00015863
    4d8c:	0001587b 	.word	0x0001587b
    4d90:	20003a88 	.word	0x20003a88

00004d94 <le_conn_update>:
{
    4d94:	4603      	mov	r3, r0
    4d96:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d98:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4d9c:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4d9e:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4da2:	d105      	bne.n	4db0 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4da4:	2113      	movs	r1, #19
    4da6:	f7ff ff35 	bl	4c14 <bt_conn_disconnect>
}
    4daa:	b003      	add	sp, #12
    4dac:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4db0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4db4:	f8ad 2000 	strh.w	r2, [sp]
    4db8:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4dbc:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    4dc0:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4dc2:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4dc6:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4dca:	f8ad 2004 	strh.w	r2, [sp, #4]
    4dce:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4dd2:	f7ff ff8d 	bl	4cf0 <bt_conn_le_param_update>
    4dd6:	e7e8      	b.n	4daa <le_conn_update+0x16>

00004dd8 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4dd8:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4dda:	4b08      	ldr	r3, [pc, #32]	; (4dfc <bt_conn_create_pdu+0x24>)
{
    4ddc:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4dde:	2800      	cmp	r0, #0
    4de0:	bf08      	it	eq
    4de2:	4618      	moveq	r0, r3
    4de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4de8:	f00d fc26 	bl	12638 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4dec:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4dee:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4df0:	3008      	adds	r0, #8
    4df2:	f00d fc40 	bl	12676 <net_buf_simple_reserve>

	return buf;
}
    4df6:	4620      	mov	r0, r4
    4df8:	bd38      	pop	{r3, r4, r5, pc}
    4dfa:	bf00      	nop
    4dfc:	20003f60 	.word	0x20003f60

00004e00 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e04:	4606      	mov	r6, r0
    4e06:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4e08:	4816      	ldr	r0, [pc, #88]	; (4e64 <create_frag.isra.8+0x64>)
    4e0a:	2100      	movs	r1, #0
    4e0c:	f7ff ffe4 	bl	4dd8 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4e10:	7833      	ldrb	r3, [r6, #0]
    4e12:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4e14:	4605      	mov	r5, r0
    4e16:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4e1a:	d005      	beq.n	4e28 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4e1c:	f00d fc3c 	bl	12698 <net_buf_unref>
		return NULL;
    4e20:	4635      	mov	r5, r6
}
    4e22:	4628      	mov	r0, r5
    4e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    4e28:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4e2a:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4e2e:	4e0e      	ldr	r6, [pc, #56]	; (4e68 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4e30:	4638      	mov	r0, r7
    4e32:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    4e36:	f00d fcab 	bl	12790 <net_buf_simple_tailroom>
    4e3a:	4580      	cmp	r8, r0
    4e3c:	d20c      	bcs.n	4e58 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4e3e:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4e42:	f854 1f08 	ldr.w	r1, [r4, #8]!
    4e46:	4632      	mov	r2, r6
    4e48:	4638      	mov	r0, r7
    4e4a:	f00d fc5d 	bl	12708 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4e4e:	4631      	mov	r1, r6
    4e50:	4620      	mov	r0, r4
    4e52:	f00d fc81 	bl	12758 <net_buf_simple_pull>
    4e56:	e7e4      	b.n	4e22 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4e58:	4638      	mov	r0, r7
    4e5a:	f00d fc99 	bl	12790 <net_buf_simple_tailroom>
    4e5e:	b286      	uxth	r6, r0
    4e60:	e7ef      	b.n	4e42 <create_frag.isra.8+0x42>
    4e62:	bf00      	nop
    4e64:	20003f80 	.word	0x20003f80
    4e68:	20003a88 	.word	0x20003a88

00004e6c <bt_conn_process_tx>:
{
    4e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6e:	b085      	sub	sp, #20
    4e70:	4604      	mov	r4, r0
    4e72:	f00e fc99 	bl	137a8 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    4e76:	9400      	str	r4, [sp, #0]
    4e78:	4603      	mov	r3, r0
    4e7a:	4a3d      	ldr	r2, [pc, #244]	; (4f70 <bt_conn_process_tx+0x104>)
    4e7c:	493d      	ldr	r1, [pc, #244]	; (4f74 <bt_conn_process_tx+0x108>)
    4e7e:	2007      	movs	r0, #7
    4e80:	f7fd f8a8 	bl	1fd4 <bt_log>
	if (conn->state == BT_CONN_DISCONNECTED &&
    4e84:	7a63      	ldrb	r3, [r4, #9]
    4e86:	b9f3      	cbnz	r3, 4ec6 <bt_conn_process_tx+0x5a>
    4e88:	f3bf 8f5b 	dmb	ish
    4e8c:	1d23      	adds	r3, r4, #4
    4e8e:	e853 2f00 	ldrex	r2, [r3]
    4e92:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4e96:	e843 1000 	strex	r0, r1, [r3]
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d1f7      	bne.n	4e8e <bt_conn_process_tx+0x22>
    4e9e:	f3bf 8f5b 	dmb	ish
    4ea2:	0653      	lsls	r3, r2, #25
    4ea4:	d50f      	bpl.n	4ec6 <bt_conn_process_tx+0x5a>
    4ea6:	f00e fc7f 	bl	137a8 <_impl_k_current_get>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4eaa:	8823      	ldrh	r3, [r4, #0]
    4eac:	9300      	str	r3, [sp, #0]
    4eae:	4a30      	ldr	r2, [pc, #192]	; (4f70 <bt_conn_process_tx+0x104>)
    4eb0:	4931      	ldr	r1, [pc, #196]	; (4f78 <bt_conn_process_tx+0x10c>)
    4eb2:	4603      	mov	r3, r0
    4eb4:	2007      	movs	r0, #7
    4eb6:	f7fd f88d 	bl	1fd4 <bt_log>
		conn_cleanup(conn);
    4eba:	4620      	mov	r0, r4
}
    4ebc:	b005      	add	sp, #20
    4ebe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    4ec2:	f7ff bc9b 	b.w	47fc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4ec6:	2100      	movs	r1, #0
    4ec8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4ecc:	f00d fbba 	bl	12644 <net_buf_get>
	BT_ASSERT(buf);
    4ed0:	4605      	mov	r5, r0
    4ed2:	b950      	cbnz	r0, 4eea <bt_conn_process_tx+0x7e>
    4ed4:	4a26      	ldr	r2, [pc, #152]	; (4f70 <bt_conn_process_tx+0x104>)
    4ed6:	4929      	ldr	r1, [pc, #164]	; (4f7c <bt_conn_process_tx+0x110>)
    4ed8:	2003      	movs	r0, #3
    4eda:	f7fd f87b 	bl	1fd4 <bt_log>
    4ede:	4040      	eors	r0, r0
    4ee0:	f380 8811 	msr	BASEPRI, r0
    4ee4:	f04f 0004 	mov.w	r0, #4
    4ee8:	df02      	svc	2
    4eea:	f00e fc5d 	bl	137a8 <_impl_k_current_get>
	return bt_dev.le.mtu;
    4eee:	4e24      	ldr	r6, [pc, #144]	; (4f80 <bt_conn_process_tx+0x114>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4ef0:	89ab      	ldrh	r3, [r5, #12]
    4ef2:	9302      	str	r3, [sp, #8]
    4ef4:	4a23      	ldr	r2, [pc, #140]	; (4f84 <bt_conn_process_tx+0x118>)
    4ef6:	4924      	ldr	r1, [pc, #144]	; (4f88 <bt_conn_process_tx+0x11c>)
    4ef8:	4603      	mov	r3, r0
    4efa:	e88d 0030 	stmia.w	sp, {r4, r5}
    4efe:	2007      	movs	r0, #7
    4f00:	f7fd f868 	bl	1fd4 <bt_log>
	if (buf->len <= conn_mtu(conn)) {
    4f04:	89a9      	ldrh	r1, [r5, #12]
    4f06:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4f0a:	4291      	cmp	r1, r2
    4f0c:	d808      	bhi.n	4f20 <bt_conn_process_tx+0xb4>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4f0e:	2300      	movs	r3, #0
    4f10:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4f12:	4629      	mov	r1, r5
    4f14:	4620      	mov	r0, r4
    4f16:	f7ff fadb 	bl	44d0 <send_frag>
	if (!send_buf(conn, buf)) {
    4f1a:	b148      	cbz	r0, 4f30 <bt_conn_process_tx+0xc4>
}
    4f1c:	b005      	add	sp, #20
    4f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f20:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4f24:	4629      	mov	r1, r5
    4f26:	4638      	mov	r0, r7
    4f28:	f7ff ff6a 	bl	4e00 <create_frag.isra.8>
	if (!frag) {
    4f2c:	4601      	mov	r1, r0
    4f2e:	b928      	cbnz	r0, 4f3c <bt_conn_process_tx+0xd0>
		net_buf_unref(buf);
    4f30:	4628      	mov	r0, r5
}
    4f32:	b005      	add	sp, #20
    4f34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    4f38:	f00d bbae 	b.w	12698 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4f3c:	2301      	movs	r3, #1
    4f3e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4f40:	4620      	mov	r0, r4
    4f42:	f7ff fac5 	bl	44d0 <send_frag>
    4f46:	2800      	cmp	r0, #0
    4f48:	d0f2      	beq.n	4f30 <bt_conn_process_tx+0xc4>
	while (buf->len > conn_mtu(conn)) {
    4f4a:	89aa      	ldrh	r2, [r5, #12]
    4f4c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4f50:	429a      	cmp	r2, r3
    4f52:	d802      	bhi.n	4f5a <bt_conn_process_tx+0xee>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4f54:	2300      	movs	r3, #0
    4f56:	2201      	movs	r2, #1
    4f58:	e7db      	b.n	4f12 <bt_conn_process_tx+0xa6>
		frag = create_frag(conn, buf);
    4f5a:	4629      	mov	r1, r5
    4f5c:	4638      	mov	r0, r7
    4f5e:	f7ff ff4f 	bl	4e00 <create_frag.isra.8>
		if (!frag) {
    4f62:	4601      	mov	r1, r0
    4f64:	2800      	cmp	r0, #0
    4f66:	d0e3      	beq.n	4f30 <bt_conn_process_tx+0xc4>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4f68:	2301      	movs	r3, #1
    4f6a:	461a      	mov	r2, r3
    4f6c:	e7e8      	b.n	4f40 <bt_conn_process_tx+0xd4>
    4f6e:	bf00      	nop
    4f70:	00015824 	.word	0x00015824
    4f74:	000158b1 	.word	0x000158b1
    4f78:	000158f1 	.word	0x000158f1
    4f7c:	00015578 	.word	0x00015578
    4f80:	20003a88 	.word	0x20003a88
    4f84:	00015804 	.word	0x00015804
    4f88:	0001591f 	.word	0x0001591f

00004f8c <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4f8c:	4b03      	ldr	r3, [pc, #12]	; (4f9c <bt_conn_get_id+0x10>)
    4f8e:	1ac0      	subs	r0, r0, r3
    4f90:	4b03      	ldr	r3, [pc, #12]	; (4fa0 <bt_conn_get_id+0x14>)
    4f92:	10c0      	asrs	r0, r0, #3
    4f94:	4358      	muls	r0, r3
}
    4f96:	b2c0      	uxtb	r0, r0
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop
    4f9c:	2000037c 	.word	0x2000037c
    4fa0:	286bca1b 	.word	0x286bca1b

00004fa4 <bt_conn_init>:
	parent->next = child;
    4fa4:	4b12      	ldr	r3, [pc, #72]	; (4ff0 <bt_conn_init+0x4c>)
    4fa6:	4a13      	ldr	r2, [pc, #76]	; (4ff4 <bt_conn_init+0x50>)
    4fa8:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4faa:	b510      	push	{r4, lr}
    4fac:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4fae:	6859      	ldr	r1, [r3, #4]
    4fb0:	b901      	cbnz	r1, 4fb4 <bt_conn_init+0x10>
	list->tail = node;
    4fb2:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4fb4:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4fb6:	6092      	str	r2, [r2, #8]
	list->head = node;
    4fb8:	4a0f      	ldr	r2, [pc, #60]	; (4ff8 <bt_conn_init+0x54>)
    4fba:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4fbc:	b901      	cbnz	r1, 4fc0 <bt_conn_init+0x1c>
	list->tail = node;
    4fbe:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4fc0:	f001 fa9e 	bl	6500 <bt_att_init>

	err = bt_smp_init();
    4fc4:	f002 f93a 	bl	723c <bt_smp_init>
	if (err) {
    4fc8:	4604      	mov	r4, r0
    4fca:	b970      	cbnz	r0, 4fea <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4fcc:	f000 fa3a 	bl	5444 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4fd0:	480a      	ldr	r0, [pc, #40]	; (4ffc <bt_conn_init+0x58>)
    4fd2:	f7ff f913 	bl	41fc <atomic_get>
    4fd6:	b140      	cbz	r0, 4fea <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4fd8:	4809      	ldr	r0, [pc, #36]	; (5000 <bt_conn_init+0x5c>)
    4fda:	f7ff f90f 	bl	41fc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4fde:	07c3      	lsls	r3, r0, #31
    4fe0:	d503      	bpl.n	4fea <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4fe2:	2101      	movs	r1, #1
    4fe4:	4807      	ldr	r0, [pc, #28]	; (5004 <bt_conn_init+0x60>)
    4fe6:	f7ff fc81 	bl	48ec <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4fea:	4620      	mov	r0, r4
    4fec:	bd10      	pop	{r4, pc}
    4fee:	bf00      	nop
    4ff0:	20000414 	.word	0x20000414
    4ff4:	2000036c 	.word	0x2000036c
    4ff8:	20000374 	.word	0x20000374
    4ffc:	200003bc 	.word	0x200003bc
    5000:	20000380 	.word	0x20000380
    5004:	2000037c 	.word	0x2000037c

00005008 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    5008:	4770      	bx	lr
	...

0000500c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    500c:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    500e:	4c08      	ldr	r4, [pc, #32]	; (5030 <l2cap_accept+0x24>)
{
    5010:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    5012:	6820      	ldr	r0, [r4, #0]
    5014:	b918      	cbnz	r0, 501e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <l2cap_accept+0x28>)
    5018:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
    501a:	600c      	str	r4, [r1, #0]

		return 0;
    501c:	bd10      	pop	{r4, pc}
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    501e:	4a06      	ldr	r2, [pc, #24]	; (5038 <l2cap_accept+0x2c>)
    5020:	4906      	ldr	r1, [pc, #24]	; (503c <l2cap_accept+0x30>)
    5022:	2003      	movs	r0, #3
    5024:	f7fc ffd6 	bl	1fd4 <bt_log>

	return -ENOMEM;
    5028:	f06f 000b 	mvn.w	r0, #11
}
    502c:	bd10      	pop	{r4, pc}
    502e:	bf00      	nop
    5030:	2000041c 	.word	0x2000041c
    5034:	20003bcc 	.word	0x20003bcc
    5038:	00015c25 	.word	0x00015c25
    503c:	00015c7c 	.word	0x00015c7c

00005040 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5042:	4607      	mov	r7, r0
    5044:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5046:	2000      	movs	r0, #0
    5048:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    504a:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    504c:	f7ff fec4 	bl	4dd8 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5050:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5052:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5054:	3008      	adds	r0, #8
    5056:	f00d fb51 	bl	126fc <net_buf_simple_add>
	hdr->code = code;
    505a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    505c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    505e:	8045      	strh	r5, [r0, #2]
}
    5060:	4620      	mov	r0, r4
    5062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005064 <l2cap_connected>:
    5064:	4770      	bx	lr
	...

00005068 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    5068:	2300      	movs	r3, #0
    506a:	6083      	str	r3, [r0, #8]
    506c:	4b05      	ldr	r3, [pc, #20]	; (5084 <bt_l2cap_le_fixed_chan_register+0x1c>)
    506e:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    5070:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    5074:	b911      	cbnz	r1, 507c <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    5076:	605a      	str	r2, [r3, #4]
	list->head = node;
    5078:	601a      	str	r2, [r3, #0]
    507a:	4770      	bx	lr
	parent->next = child;
    507c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    507e:	605a      	str	r2, [r3, #4]
    5080:	4770      	bx	lr
    5082:	bf00      	nop
    5084:	200004b4 	.word	0x200004b4

00005088 <bt_l2cap_chan_remove>:
{
    5088:	6b83      	ldr	r3, [r0, #56]	; 0x38
    508a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    508c:	b113      	cbz	r3, 5094 <bt_l2cap_chan_remove+0xc>
    508e:	3b08      	subs	r3, #8
    5090:	2200      	movs	r2, #0
    5092:	b903      	cbnz	r3, 5096 <bt_l2cap_chan_remove+0xe>
    5094:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    5096:	428b      	cmp	r3, r1
    5098:	f103 0408 	add.w	r4, r3, #8
    509c:	d10f      	bne.n	50be <bt_l2cap_chan_remove+0x36>
    509e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    50a0:	b93a      	cbnz	r2, 50b2 <bt_l2cap_chan_remove+0x2a>
    50a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    50a4:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    50a6:	4294      	cmp	r4, r2
    50a8:	d100      	bne.n	50ac <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    50aa:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    50ac:	2200      	movs	r2, #0
    50ae:	609a      	str	r2, [r3, #8]
    50b0:	bd10      	pop	{r4, pc}
    50b2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    50b4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    50b6:	428c      	cmp	r4, r1
	list->tail = node;
    50b8:	bf08      	it	eq
    50ba:	63c2      	streq	r2, [r0, #60]	; 0x3c
    50bc:	e7f6      	b.n	50ac <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    50be:	4622      	mov	r2, r4
    50c0:	2c00      	cmp	r4, #0
    50c2:	d0e7      	beq.n	5094 <bt_l2cap_chan_remove+0xc>
	return node->next;
    50c4:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    50c6:	2b00      	cmp	r3, #0
    50c8:	d0e4      	beq.n	5094 <bt_l2cap_chan_remove+0xc>
    50ca:	3b08      	subs	r3, #8
    50cc:	e7e1      	b.n	5092 <bt_l2cap_chan_remove+0xa>

000050ce <bt_l2cap_chan_del>:
	if (!chan->conn) {
    50ce:	6803      	ldr	r3, [r0, #0]
{
    50d0:	b510      	push	{r4, lr}
    50d2:	4604      	mov	r4, r0
	if (!chan->conn) {
    50d4:	b12b      	cbz	r3, 50e2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    50d6:	6843      	ldr	r3, [r0, #4]
    50d8:	685b      	ldr	r3, [r3, #4]
    50da:	b103      	cbz	r3, 50de <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    50dc:	4798      	blx	r3
	chan->conn = NULL;
    50de:	2300      	movs	r3, #0
    50e0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    50e2:	68e3      	ldr	r3, [r4, #12]
    50e4:	b11b      	cbz	r3, 50ee <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    50e6:	4620      	mov	r0, r4
}
    50e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    50ec:	4718      	bx	r3
    50ee:	bd10      	pop	{r4, pc}

000050f0 <l2cap_rtx_timeout>:
{
    50f0:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    50f2:	f1a0 0410 	sub.w	r4, r0, #16
{
    50f6:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    50f8:	4623      	mov	r3, r4
    50fa:	4a07      	ldr	r2, [pc, #28]	; (5118 <l2cap_rtx_timeout+0x28>)
    50fc:	4907      	ldr	r1, [pc, #28]	; (511c <l2cap_rtx_timeout+0x2c>)
    50fe:	2003      	movs	r0, #3
    5100:	f7fc ff68 	bl	1fd4 <bt_log>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5104:	f855 0c10 	ldr.w	r0, [r5, #-16]
    5108:	4621      	mov	r1, r4
    510a:	f7ff ffbd 	bl	5088 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    510e:	4620      	mov	r0, r4
}
    5110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    5114:	f7ff bfdb 	b.w	50ce <bt_l2cap_chan_del>
    5118:	00015bcf 	.word	0x00015bcf
    511c:	00015d7c 	.word	0x00015d7c

00005120 <bt_l2cap_connected>:
{
    5120:	4b1a      	ldr	r3, [pc, #104]	; (518c <bt_l2cap_connected+0x6c>)
    5122:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5126:	681c      	ldr	r4, [r3, #0]
    5128:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    512a:	b12c      	cbz	r4, 5138 <bt_l2cap_connected+0x18>
	parent->next = child;
    512c:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    512e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5190 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5132:	3c08      	subs	r4, #8
    5134:	46b9      	mov	r9, r7
    5136:	b914      	cbnz	r4, 513e <bt_l2cap_connected+0x1e>
}
    5138:	b003      	add	sp, #12
    513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    513e:	6863      	ldr	r3, [r4, #4]
    5140:	a901      	add	r1, sp, #4
    5142:	4630      	mov	r0, r6
    5144:	4798      	blx	r3
    5146:	2800      	cmp	r0, #0
    5148:	db18      	blt.n	517c <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    514a:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    514c:	8823      	ldrh	r3, [r4, #0]
    514e:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5150:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5154:	4641      	mov	r1, r8
    5156:	f105 0010 	add.w	r0, r5, #16
    515a:	f00e fe1b 	bl	13d94 <k_delayed_work_init>
    515e:	60af      	str	r7, [r5, #8]
    5160:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    5162:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    5166:	b972      	cbnz	r2, 5186 <bt_l2cap_connected+0x66>
	list->tail = node;
    5168:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    516a:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    516c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    516e:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5170:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    5172:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    5176:	681b      	ldr	r3, [r3, #0]
    5178:	b103      	cbz	r3, 517c <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    517a:	4798      	blx	r3
	return node->next;
    517c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    517e:	2c00      	cmp	r4, #0
    5180:	d0da      	beq.n	5138 <bt_l2cap_connected+0x18>
    5182:	3c08      	subs	r4, #8
    5184:	e7d7      	b.n	5136 <bt_l2cap_connected+0x16>
	parent->next = child;
    5186:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5188:	63f3      	str	r3, [r6, #60]	; 0x3c
    518a:	e7ef      	b.n	516c <bt_l2cap_connected+0x4c>
    518c:	200004b4 	.word	0x200004b4
    5190:	000050f1 	.word	0x000050f1

00005194 <bt_l2cap_disconnected>:
{
    5194:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5196:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5198:	b1a3      	cbz	r3, 51c4 <bt_l2cap_disconnected+0x30>
    519a:	f1b3 0008 	subs.w	r0, r3, #8
    519e:	d10a      	bne.n	51b6 <bt_l2cap_disconnected+0x22>
    51a0:	bd10      	pop	{r4, pc}
    51a2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    51a4:	f7ff ff93 	bl	50ce <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    51a8:	b164      	cbz	r4, 51c4 <bt_l2cap_disconnected+0x30>
	return node->next;
    51aa:	68a3      	ldr	r3, [r4, #8]
    51ac:	b103      	cbz	r3, 51b0 <bt_l2cap_disconnected+0x1c>
    51ae:	3b08      	subs	r3, #8
{
    51b0:	4620      	mov	r0, r4
    51b2:	461c      	mov	r4, r3
    51b4:	e7f6      	b.n	51a4 <bt_l2cap_disconnected+0x10>
    51b6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    51b8:	2c00      	cmp	r4, #0
    51ba:	d1f2      	bne.n	51a2 <bt_l2cap_disconnected+0xe>
}
    51bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    51c0:	f7ff bf85 	b.w	50ce <bt_l2cap_chan_del>
    51c4:	bd10      	pop	{r4, pc}

000051c6 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    51c6:	3104      	adds	r1, #4
    51c8:	f7ff be06 	b.w	4dd8 <bt_conn_create_pdu>

000051cc <bt_l2cap_send_cb>:
{
    51cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ce:	4614      	mov	r4, r2
    51d0:	4605      	mov	r5, r0
    51d2:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    51d4:	f102 0008 	add.w	r0, r2, #8
    51d8:	2104      	movs	r1, #4
{
    51da:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    51dc:	f00d fab4 	bl	12748 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    51e0:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    51e2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    51e4:	3904      	subs	r1, #4
    51e6:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    51e8:	4632      	mov	r2, r6
    51ea:	4621      	mov	r1, r4
    51ec:	4628      	mov	r0, r5
}
    51ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    51f2:	f7ff b911 	b.w	4418 <bt_conn_send_cb>
	...

000051f8 <l2cap_recv>:
{
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    51fa:	898b      	ldrh	r3, [r1, #12]
    51fc:	2b03      	cmp	r3, #3
{
    51fe:	b085      	sub	sp, #20
    5200:	4607      	mov	r7, r0
    5202:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5204:	d805      	bhi.n	5212 <l2cap_recv+0x1a>
		BT_ERR("Too small L2CAP signaling PDU");
    5206:	4a4b      	ldr	r2, [pc, #300]	; (5334 <l2cap_recv+0x13c>)
    5208:	494b      	ldr	r1, [pc, #300]	; (5338 <l2cap_recv+0x140>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    520a:	2003      	movs	r0, #3
    520c:	f7fc fee2 	bl	1fd4 <bt_log>
		return;
    5210:	e00f      	b.n	5232 <l2cap_recv+0x3a>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5212:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5214:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5216:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    521a:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    521c:	f00d fa9c 	bl	12758 <net_buf_simple_pull>
	if (buf->len != len) {
    5220:	89ab      	ldrh	r3, [r5, #12]
    5222:	429e      	cmp	r6, r3
    5224:	d007      	beq.n	5236 <l2cap_recv+0x3e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5226:	9600      	str	r6, [sp, #0]
    5228:	4a42      	ldr	r2, [pc, #264]	; (5334 <l2cap_recv+0x13c>)
    522a:	4944      	ldr	r1, [pc, #272]	; (533c <l2cap_recv+0x144>)
    522c:	2003      	movs	r0, #3
    522e:	f7fc fed1 	bl	1fd4 <bt_log>
}
    5232:	b005      	add	sp, #20
    5234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    5236:	7861      	ldrb	r1, [r4, #1]
    5238:	b911      	cbnz	r1, 5240 <l2cap_recv+0x48>
		BT_ERR("Invalid ident value in L2CAP PDU");
    523a:	4a3e      	ldr	r2, [pc, #248]	; (5334 <l2cap_recv+0x13c>)
    523c:	4940      	ldr	r1, [pc, #256]	; (5340 <l2cap_recv+0x148>)
    523e:	e7e4      	b.n	520a <l2cap_recv+0x12>
	switch (hdr->code) {
    5240:	7823      	ldrb	r3, [r4, #0]
    5242:	2b12      	cmp	r3, #18
    5244:	d01f      	beq.n	5286 <l2cap_recv+0x8e>
    5246:	2b13      	cmp	r3, #19
    5248:	d018      	beq.n	527c <l2cap_recv+0x84>
    524a:	2b01      	cmp	r3, #1
    524c:	d0f1      	beq.n	5232 <l2cap_recv+0x3a>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    524e:	4a39      	ldr	r2, [pc, #228]	; (5334 <l2cap_recv+0x13c>)
    5250:	493c      	ldr	r1, [pc, #240]	; (5344 <l2cap_recv+0x14c>)
    5252:	2004      	movs	r0, #4
    5254:	f7fc febe 	bl	1fd4 <bt_log>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5258:	2202      	movs	r2, #2
    525a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    525c:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    525e:	2001      	movs	r0, #1
    5260:	f7ff feee 	bl	5040 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5264:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5266:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    5268:	3008      	adds	r0, #8
    526a:	f00d fa47 	bl	126fc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    526e:	2300      	movs	r3, #0
    5270:	7003      	strb	r3, [r0, #0]
    5272:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5274:	4622      	mov	r2, r4
    5276:	2105      	movs	r1, #5
    5278:	4628      	mov	r0, r5
    527a:	e01b      	b.n	52b4 <l2cap_recv+0xbc>
	if (buf->len < sizeof(*rsp)) {
    527c:	2e01      	cmp	r6, #1
    527e:	d8d8      	bhi.n	5232 <l2cap_recv+0x3a>
		BT_ERR("Too small LE conn param rsp");
    5280:	4a31      	ldr	r2, [pc, #196]	; (5348 <l2cap_recv+0x150>)
    5282:	4932      	ldr	r1, [pc, #200]	; (534c <l2cap_recv+0x154>)
    5284:	e7c1      	b.n	520a <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
    5286:	2e07      	cmp	r6, #7
    5288:	d802      	bhi.n	5290 <l2cap_recv+0x98>
		BT_ERR("Too small LE conn update param req");
    528a:	4a31      	ldr	r2, [pc, #196]	; (5350 <l2cap_recv+0x158>)
    528c:	4931      	ldr	r1, [pc, #196]	; (5354 <l2cap_recv+0x15c>)
    528e:	e7bc      	b.n	520a <l2cap_recv+0x12>
    5290:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    5292:	78e6      	ldrb	r6, [r4, #3]
    5294:	b18e      	cbz	r6, 52ba <l2cap_recv+0xc2>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5296:	2202      	movs	r2, #2
    5298:	2001      	movs	r0, #1
    529a:	f7ff fed1 	bl	5040 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    529e:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    52a0:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    52a2:	3008      	adds	r0, #8
    52a4:	f00d fa2a 	bl	126fc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    52a8:	2300      	movs	r3, #0
    52aa:	7003      	strb	r3, [r0, #0]
    52ac:	7043      	strb	r3, [r0, #1]
    52ae:	462a      	mov	r2, r5
    52b0:	2105      	movs	r1, #5
    52b2:	4620      	mov	r0, r4
    52b4:	f7ff ff8a 	bl	51cc <bt_l2cap_send_cb>
    52b8:	e7bb      	b.n	5232 <l2cap_recv+0x3a>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    52ba:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    52bc:	7858      	ldrb	r0, [r3, #1]
    52be:	781a      	ldrb	r2, [r3, #0]
    52c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52c4:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    52c8:	78d8      	ldrb	r0, [r3, #3]
    52ca:	789a      	ldrb	r2, [r3, #2]
    52cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52d0:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    52d4:	7958      	ldrb	r0, [r3, #5]
    52d6:	791a      	ldrb	r2, [r3, #4]
    52d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    52dc:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    52e0:	799a      	ldrb	r2, [r3, #6]
    52e2:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52e4:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    52e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52ea:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    52ec:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52f0:	f7ff fea6 	bl	5040 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    52f4:	a902      	add	r1, sp, #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52f6:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    52f8:	4620      	mov	r0, r4
    52fa:	f7fe ffa9 	bl	4250 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    52fe:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    5300:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    5302:	f107 0008 	add.w	r0, r7, #8
    5306:	f00d f9f9 	bl	126fc <net_buf_simple_add>
	if (accepted) {
    530a:	b175      	cbz	r5, 532a <l2cap_recv+0x132>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    530c:	7006      	strb	r6, [r0, #0]
    530e:	7046      	strb	r6, [r0, #1]
    5310:	2300      	movs	r3, #0
    5312:	463a      	mov	r2, r7
    5314:	2105      	movs	r1, #5
    5316:	4620      	mov	r0, r4
    5318:	f7ff ff58 	bl	51cc <bt_l2cap_send_cb>
	if (accepted) {
    531c:	2d00      	cmp	r5, #0
    531e:	d088      	beq.n	5232 <l2cap_recv+0x3a>
		bt_conn_le_conn_update(conn, &param);
    5320:	a902      	add	r1, sp, #8
    5322:	4620      	mov	r0, r4
    5324:	f7ff fcbd 	bl	4ca2 <bt_conn_le_conn_update>
    5328:	e783      	b.n	5232 <l2cap_recv+0x3a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    532a:	2301      	movs	r3, #1
    532c:	7003      	strb	r3, [r0, #0]
    532e:	7045      	strb	r5, [r0, #1]
    5330:	e7ee      	b.n	5310 <l2cap_recv+0x118>
    5332:	bf00      	nop
    5334:	00015c0c 	.word	0x00015c0c
    5338:	00015ca7 	.word	0x00015ca7
    533c:	00015cc9 	.word	0x00015cc9
    5340:	00015cee 	.word	0x00015cee
    5344:	00015d5a 	.word	0x00015d5a
    5348:	00015be1 	.word	0x00015be1
    534c:	00015d13 	.word	0x00015d13
    5350:	00015bf3 	.word	0x00015bf3
    5354:	00015d33 	.word	0x00015d33

00005358 <bt_l2cap_le_lookup_tx_cid>:
{
    5358:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    535a:	b100      	cbz	r0, 535e <bt_l2cap_le_lookup_tx_cid+0x6>
    535c:	3808      	subs	r0, #8
    535e:	b900      	cbnz	r0, 5362 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5360:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5362:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5366:	428b      	cmp	r3, r1
    5368:	d0fa      	beq.n	5360 <bt_l2cap_le_lookup_tx_cid+0x8>
    536a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    536c:	2000      	movs	r0, #0
    536e:	2b00      	cmp	r3, #0
    5370:	d0f6      	beq.n	5360 <bt_l2cap_le_lookup_tx_cid+0x8>
    5372:	f1a3 0008 	sub.w	r0, r3, #8
    5376:	e7f2      	b.n	535e <bt_l2cap_le_lookup_tx_cid+0x6>

00005378 <bt_l2cap_le_lookup_rx_cid>:
{
    5378:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    537a:	b100      	cbz	r0, 537e <bt_l2cap_le_lookup_rx_cid+0x6>
    537c:	3808      	subs	r0, #8
    537e:	b900      	cbnz	r0, 5382 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    5380:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    5382:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5384:	428b      	cmp	r3, r1
    5386:	d0fb      	beq.n	5380 <bt_l2cap_le_lookup_rx_cid+0x8>
    5388:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    538a:	2000      	movs	r0, #0
    538c:	2b00      	cmp	r3, #0
    538e:	d0f7      	beq.n	5380 <bt_l2cap_le_lookup_rx_cid+0x8>
    5390:	f1a3 0008 	sub.w	r0, r3, #8
    5394:	e7f3      	b.n	537e <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00005398 <bt_l2cap_recv>:
{
    5398:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    539a:	898b      	ldrh	r3, [r1, #12]
    539c:	2b03      	cmp	r3, #3
{
    539e:	4606      	mov	r6, r0
    53a0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    53a2:	d809      	bhi.n	53b8 <bt_l2cap_recv+0x20>
		BT_ERR("Too small L2CAP PDU received");
    53a4:	4a10      	ldr	r2, [pc, #64]	; (53e8 <bt_l2cap_recv+0x50>)
    53a6:	4911      	ldr	r1, [pc, #68]	; (53ec <bt_l2cap_recv+0x54>)
    53a8:	2003      	movs	r0, #3
    53aa:	f7fc fe13 	bl	1fd4 <bt_log>
	net_buf_unref(buf);
    53ae:	4620      	mov	r0, r4
}
    53b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    53b4:	f00d b970 	b.w	12698 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    53b8:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    53ba:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    53bc:	f850 3f08 	ldr.w	r3, [r0, #8]!
    53c0:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    53c2:	f00d f9c9 	bl	12758 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    53c6:	4629      	mov	r1, r5
    53c8:	4630      	mov	r0, r6
    53ca:	f7ff ffd5 	bl	5378 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    53ce:	b930      	cbnz	r0, 53de <bt_l2cap_recv+0x46>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    53d0:	462b      	mov	r3, r5
    53d2:	4a05      	ldr	r2, [pc, #20]	; (53e8 <bt_l2cap_recv+0x50>)
    53d4:	4906      	ldr	r1, [pc, #24]	; (53f0 <bt_l2cap_recv+0x58>)
    53d6:	2004      	movs	r0, #4
    53d8:	f7fc fdfc 	bl	1fd4 <bt_log>
    53dc:	e7e7      	b.n	53ae <bt_l2cap_recv+0x16>
	chan->ops->recv(chan, buf);
    53de:	6843      	ldr	r3, [r0, #4]
    53e0:	4621      	mov	r1, r4
    53e2:	691b      	ldr	r3, [r3, #16]
    53e4:	4798      	blx	r3
    53e6:	e7e2      	b.n	53ae <bt_l2cap_recv+0x16>
    53e8:	00015c17 	.word	0x00015c17
    53ec:	00015c32 	.word	0x00015c32
    53f0:	00015c53 	.word	0x00015c53

000053f4 <bt_l2cap_update_conn_param>:
{
    53f4:	b570      	push	{r4, r5, r6, lr}
	ident++;
    53f6:	4b12      	ldr	r3, [pc, #72]	; (5440 <bt_l2cap_update_conn_param+0x4c>)
    53f8:	781a      	ldrb	r2, [r3, #0]
    53fa:	3201      	adds	r2, #1
	if (!ident) {
    53fc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5400:	bf08      	it	eq
    5402:	2201      	moveq	r2, #1
    5404:	701a      	strb	r2, [r3, #0]
{
    5406:	460c      	mov	r4, r1
    5408:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    540a:	7819      	ldrb	r1, [r3, #0]
    540c:	2208      	movs	r2, #8
    540e:	2012      	movs	r0, #18
    5410:	f7ff fe16 	bl	5040 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5414:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5416:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5418:	4408      	add	r0, r1
    541a:	f00d f96f 	bl	126fc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    541e:	8823      	ldrh	r3, [r4, #0]
    5420:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5422:	8863      	ldrh	r3, [r4, #2]
    5424:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5426:	88a3      	ldrh	r3, [r4, #4]
    5428:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    542a:	88e3      	ldrh	r3, [r4, #6]
    542c:	80c3      	strh	r3, [r0, #6]
    542e:	4632      	mov	r2, r6
    5430:	4628      	mov	r0, r5
    5432:	2300      	movs	r3, #0
    5434:	2105      	movs	r1, #5
    5436:	f7ff fec9 	bl	51cc <bt_l2cap_send_cb>
}
    543a:	2000      	movs	r0, #0
    543c:	bd70      	pop	{r4, r5, r6, pc}
    543e:	bf00      	nop
    5440:	200004b0 	.word	0x200004b0

00005444 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5444:	4801      	ldr	r0, [pc, #4]	; (544c <bt_l2cap_init+0x8>)
    5446:	f7ff be0f 	b.w	5068 <bt_l2cap_le_fixed_chan_register>
    544a:	bf00      	nop
    544c:	20003bc0 	.word	0x20003bc0

00005450 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5450:	2006      	movs	r0, #6
    5452:	4770      	bx	lr

00005454 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5454:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5456:	4a0a      	ldr	r2, [pc, #40]	; (5480 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5458:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    545a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    545e:	4284      	cmp	r4, r0
    5460:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5464:	d102      	bne.n	546c <att_op_get_type+0x18>
			return handlers[i].type;
    5466:	440a      	add	r2, r1
    5468:	7890      	ldrb	r0, [r2, #2]
    546a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    546c:	3301      	adds	r3, #1
    546e:	2b1b      	cmp	r3, #27
    5470:	d1f3      	bne.n	545a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5472:	f010 0f40 	tst.w	r0, #64	; 0x40
    5476:	bf14      	ite	ne
    5478:	2000      	movne	r0, #0
    547a:	2006      	moveq	r0, #6
}
    547c:	bd10      	pop	{r4, pc}
    547e:	bf00      	nop
    5480:	00015fe0 	.word	0x00015fe0

00005484 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5484:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5486:	4d0e      	ldr	r5, [pc, #56]	; (54c0 <bt_att_accept+0x3c>)
    5488:	682c      	ldr	r4, [r5, #0]
{
    548a:	4603      	mov	r3, r0
    548c:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    548e:	b97c      	cbnz	r4, 54b0 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    5490:	4621      	mov	r1, r4
    5492:	22e4      	movs	r2, #228	; 0xe4
    5494:	4628      	mov	r0, r5
    5496:	f7fc fc02 	bl	1c9e <memset>
		att->chan.chan.ops = &ops;
    549a:	4b0a      	ldr	r3, [pc, #40]	; (54c4 <bt_att_accept+0x40>)
    549c:	606b      	str	r3, [r5, #4]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    549e:	2202      	movs	r2, #2
    54a0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    54a4:	4611      	mov	r1, r2
    54a6:	f00e f985 	bl	137b4 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    54aa:	6035      	str	r5, [r6, #0]

		return 0;
    54ac:	4620      	mov	r0, r4
    54ae:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);
    54b0:	4a05      	ldr	r2, [pc, #20]	; (54c8 <bt_att_accept+0x44>)
    54b2:	4906      	ldr	r1, [pc, #24]	; (54cc <bt_att_accept+0x48>)
    54b4:	2003      	movs	r0, #3
    54b6:	f7fc fd8d 	bl	1fd4 <bt_log>

	return -ENOMEM;
    54ba:	f06f 000b 	mvn.w	r0, #11
}
    54be:	bd70      	pop	{r4, r5, r6, pc}
    54c0:	200004bc 	.word	0x200004bc
    54c4:	20003bec 	.word	0x20003bec
    54c8:	00015e0c 	.word	0x00015e0c
    54cc:	00015ed4 	.word	0x00015ed4

000054d0 <att_req_destroy>:
{
    54d0:	b510      	push	{r4, lr}
    54d2:	4604      	mov	r4, r0
	if (req->buf) {
    54d4:	6900      	ldr	r0, [r0, #16]
    54d6:	b108      	cbz	r0, 54dc <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    54d8:	f00d f8de 	bl	12698 <net_buf_unref>
	if (req->destroy) {
    54dc:	68a3      	ldr	r3, [r4, #8]
    54de:	b10b      	cbz	r3, 54e4 <att_req_destroy+0x14>
		req->destroy(req);
    54e0:	4620      	mov	r0, r4
    54e2:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    54e4:	4620      	mov	r0, r4
    54e6:	2214      	movs	r2, #20
    54e8:	2100      	movs	r1, #0
}
    54ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    54ee:	f7fc bbd6 	b.w	1c9e <memset>

000054f2 <att_notify>:
{
    54f2:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    54f4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    54f6:	f101 0008 	add.w	r0, r1, #8
{
    54fa:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    54fc:	f00d f93c 	bl	12778 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    5500:	89a3      	ldrh	r3, [r4, #12]
    5502:	68a2      	ldr	r2, [r4, #8]
    5504:	4601      	mov	r1, r0
    5506:	4628      	mov	r0, r5
    5508:	f001 fdaa 	bl	7060 <bt_gatt_notification>
}
    550c:	2000      	movs	r0, #0
    550e:	bd38      	pop	{r3, r4, r5, pc}

00005510 <read_group_cb>:
{
    5510:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5514:	680d      	ldr	r5, [r1, #0]
{
    5516:	4606      	mov	r6, r0
    5518:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    551a:	f04f 0800 	mov.w	r8, #0
    551e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5522:	a902      	add	r1, sp, #8
    5524:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5526:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5528:	f88d 8008 	strb.w	r8, [sp, #8]
    552c:	f8ad 300a 	strh.w	r3, [sp, #10]
    5530:	f7fc fe68 	bl	2204 <bt_uuid_cmp>
    5534:	b198      	cbz	r0, 555e <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5536:	f642 0301 	movw	r3, #10241	; 0x2801
    553a:	a903      	add	r1, sp, #12
    553c:	6830      	ldr	r0, [r6, #0]
    553e:	f88d 800c 	strb.w	r8, [sp, #12]
    5542:	f8ad 300e 	strh.w	r3, [sp, #14]
    5546:	f7fc fe5d 	bl	2204 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    554a:	b140      	cbz	r0, 555e <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    554c:	6923      	ldr	r3, [r4, #16]
    554e:	b123      	cbz	r3, 555a <read_group_cb+0x4a>
    5550:	8a32      	ldrh	r2, [r6, #16]
    5552:	8859      	ldrh	r1, [r3, #2]
    5554:	4291      	cmp	r1, r2
    5556:	d200      	bcs.n	555a <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5558:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    555a:	2001      	movs	r0, #1
    555c:	e012      	b.n	5584 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    555e:	6861      	ldr	r1, [r4, #4]
    5560:	6830      	ldr	r0, [r6, #0]
    5562:	f7fc fe4f 	bl	2204 <bt_uuid_cmp>
    5566:	b110      	cbz	r0, 556e <read_group_cb+0x5e>
		data->group = NULL;
    5568:	2300      	movs	r3, #0
    556a:	6123      	str	r3, [r4, #16]
    556c:	e7f5      	b.n	555a <read_group_cb+0x4a>
	if (data->rsp->len &&
    556e:	68e3      	ldr	r3, [r4, #12]
    5570:	68a0      	ldr	r0, [r4, #8]
    5572:	781a      	ldrb	r2, [r3, #0]
    5574:	b14a      	cbz	r2, 558a <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5576:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    557a:	8981      	ldrh	r1, [r0, #12]
    557c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    557e:	4293      	cmp	r3, r2
    5580:	da03      	bge.n	558a <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    5582:	2000      	movs	r0, #0
}
    5584:	b004      	add	sp, #16
    5586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    558a:	2104      	movs	r1, #4
    558c:	3008      	adds	r0, #8
    558e:	f00d f8b5 	bl	126fc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5592:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5594:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5596:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5598:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    559a:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    559c:	898a      	ldrh	r2, [r1, #12]
    559e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    55a2:	6889      	ldr	r1, [r1, #8]
    55a4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    55a8:	1a9b      	subs	r3, r3, r2
    55aa:	2500      	movs	r5, #0
    55ac:	440a      	add	r2, r1
    55ae:	9500      	str	r5, [sp, #0]
    55b0:	4631      	mov	r1, r6
    55b2:	b29b      	uxth	r3, r3
    55b4:	4638      	mov	r0, r7
    55b6:	47c0      	blx	r8
	if (read < 0) {
    55b8:	1e01      	subs	r1, r0, #0
    55ba:	dbe2      	blt.n	5582 <read_group_cb+0x72>
	if (!data->rsp->len) {
    55bc:	68e0      	ldr	r0, [r4, #12]
    55be:	7802      	ldrb	r2, [r0, #0]
    55c0:	1d0b      	adds	r3, r1, #4
    55c2:	b92a      	cbnz	r2, 55d0 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    55c4:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    55c6:	68a0      	ldr	r0, [r4, #8]
    55c8:	3008      	adds	r0, #8
    55ca:	f00d f897 	bl	126fc <net_buf_simple_add>
    55ce:	e7c4      	b.n	555a <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    55d0:	429a      	cmp	r2, r3
    55d2:	d0f8      	beq.n	55c6 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    55d4:	68a2      	ldr	r2, [r4, #8]
    55d6:	8993      	ldrh	r3, [r2, #12]
    55d8:	3b04      	subs	r3, #4
    55da:	8193      	strh	r3, [r2, #12]
    55dc:	e7d1      	b.n	5582 <read_group_cb+0x72>

000055de <find_info_cb>:
	if (!data->rsp) {
    55de:	688b      	ldr	r3, [r1, #8]
{
    55e0:	b570      	push	{r4, r5, r6, lr}
    55e2:	4605      	mov	r5, r0
    55e4:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    55e6:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    55e8:	b963      	cbnz	r3, 5604 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    55ea:	6848      	ldr	r0, [r1, #4]
    55ec:	2101      	movs	r1, #1
    55ee:	3008      	adds	r0, #8
    55f0:	f00d f884 	bl	126fc <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    55f4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    55f6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    55f8:	781b      	ldrb	r3, [r3, #0]
    55fa:	2b00      	cmp	r3, #0
    55fc:	bf0c      	ite	eq
    55fe:	2301      	moveq	r3, #1
    5600:	2302      	movne	r3, #2
    5602:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5604:	68a3      	ldr	r3, [r4, #8]
    5606:	781b      	ldrb	r3, [r3, #0]
    5608:	2b01      	cmp	r3, #1
    560a:	d003      	beq.n	5614 <find_info_cb+0x36>
    560c:	2b02      	cmp	r3, #2
    560e:	d01a      	beq.n	5646 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5610:	2000      	movs	r0, #0
}
    5612:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5614:	682b      	ldr	r3, [r5, #0]
    5616:	781b      	ldrb	r3, [r3, #0]
    5618:	2b00      	cmp	r3, #0
    561a:	d1f9      	bne.n	5610 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    561c:	6860      	ldr	r0, [r4, #4]
    561e:	2104      	movs	r1, #4
    5620:	3008      	adds	r0, #8
    5622:	f00d f86b 	bl	126fc <net_buf_simple_add>
    5626:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5628:	8a2b      	ldrh	r3, [r5, #16]
    562a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    562c:	682b      	ldr	r3, [r5, #0]
    562e:	885b      	ldrh	r3, [r3, #2]
    5630:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5632:	6863      	ldr	r3, [r4, #4]
    5634:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5638:	899b      	ldrh	r3, [r3, #12]
    563a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    563c:	2804      	cmp	r0, #4
    563e:	bf94      	ite	ls
    5640:	2000      	movls	r0, #0
    5642:	2001      	movhi	r0, #1
    5644:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5646:	682b      	ldr	r3, [r5, #0]
    5648:	781b      	ldrb	r3, [r3, #0]
    564a:	2b02      	cmp	r3, #2
    564c:	d1e0      	bne.n	5610 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    564e:	6860      	ldr	r0, [r4, #4]
    5650:	2112      	movs	r1, #18
    5652:	3008      	adds	r0, #8
    5654:	f00d f852 	bl	126fc <net_buf_simple_add>
    5658:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    565a:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    565c:	8a2b      	ldrh	r3, [r5, #16]
    565e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5662:	2210      	movs	r2, #16
    5664:	3101      	adds	r1, #1
    5666:	f7fc faee 	bl	1c46 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    566a:	6863      	ldr	r3, [r4, #4]
    566c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5670:	899b      	ldrh	r3, [r3, #12]
    5672:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5674:	2812      	cmp	r0, #18
    5676:	e7e2      	b.n	563e <find_info_cb+0x60>

00005678 <find_type_cb>:
{
    5678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    567c:	680e      	ldr	r6, [r1, #0]
{
    567e:	b088      	sub	sp, #32
    5680:	4605      	mov	r5, r0
    5682:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5684:	2700      	movs	r7, #0
    5686:	f642 0301 	movw	r3, #10241	; 0x2801
    568a:	a902      	add	r1, sp, #8
    568c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    568e:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5692:	f88d 7008 	strb.w	r7, [sp, #8]
    5696:	f8ad 300a 	strh.w	r3, [sp, #10]
    569a:	f7fc fdb3 	bl	2204 <bt_uuid_cmp>
    569e:	b928      	cbnz	r0, 56ac <find_type_cb+0x34>
		data->group = NULL;
    56a0:	2300      	movs	r3, #0
    56a2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    56a4:	2001      	movs	r0, #1
}
    56a6:	b008      	add	sp, #32
    56a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    56ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    56b0:	a903      	add	r1, sp, #12
    56b2:	6828      	ldr	r0, [r5, #0]
    56b4:	f88d 700c 	strb.w	r7, [sp, #12]
    56b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    56bc:	f7fc fda2 	bl	2204 <bt_uuid_cmp>
    56c0:	b140      	cbz	r0, 56d4 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    56c2:	68a3      	ldr	r3, [r4, #8]
    56c4:	2b00      	cmp	r3, #0
    56c6:	d0ed      	beq.n	56a4 <find_type_cb+0x2c>
    56c8:	8a2a      	ldrh	r2, [r5, #16]
    56ca:	8859      	ldrh	r1, [r3, #2]
    56cc:	4291      	cmp	r1, r2
    56ce:	d2e9      	bcs.n	56a4 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    56d0:	805a      	strh	r2, [r3, #2]
    56d2:	e7e7      	b.n	56a4 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    56d4:	6862      	ldr	r2, [r4, #4]
    56d6:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    56da:	8992      	ldrh	r2, [r2, #12]
    56dc:	1a9b      	subs	r3, r3, r2
    56de:	2b03      	cmp	r3, #3
    56e0:	d9e1      	bls.n	56a6 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    56e2:	2310      	movs	r3, #16
    56e4:	9000      	str	r0, [sp, #0]
    56e6:	eb0d 0203 	add.w	r2, sp, r3
    56ea:	686e      	ldr	r6, [r5, #4]
    56ec:	4629      	mov	r1, r5
    56ee:	4640      	mov	r0, r8
    56f0:	47b0      	blx	r6
	if (read < 0) {
    56f2:	1e02      	subs	r2, r0, #0
    56f4:	dbd4      	blt.n	56a0 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    56f6:	7c23      	ldrb	r3, [r4, #16]
    56f8:	429a      	cmp	r2, r3
    56fa:	d1d1      	bne.n	56a0 <find_type_cb+0x28>
    56fc:	a904      	add	r1, sp, #16
    56fe:	68e0      	ldr	r0, [r4, #12]
    5700:	f7fc fa8c 	bl	1c1c <memcmp>
    5704:	2800      	cmp	r0, #0
    5706:	d1cb      	bne.n	56a0 <find_type_cb+0x28>
	data->err = 0x00;
    5708:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    570a:	6860      	ldr	r0, [r4, #4]
    570c:	2104      	movs	r1, #4
    570e:	3008      	adds	r0, #8
    5710:	f00c fff4 	bl	126fc <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5714:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5716:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5718:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    571a:	8043      	strh	r3, [r0, #2]
    571c:	e7c2      	b.n	56a4 <find_type_cb+0x2c>
	...

00005720 <bt_att_connected>:
{
    5720:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5722:	2317      	movs	r3, #23
{
    5724:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5726:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    572a:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    572c:	4906      	ldr	r1, [pc, #24]	; (5748 <bt_att_connected+0x28>)
    572e:	30a4      	adds	r0, #164	; 0xa4
    5730:	f00e fb30 	bl	13d94 <k_delayed_work_init>
	list->head = NULL;
    5734:	2300      	movs	r3, #0
    5736:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    573a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    573e:	6820      	ldr	r0, [r4, #0]
}
    5740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5744:	f001 bcc0 	b.w	70c8 <bt_gatt_connected>
    5748:	00005c15 	.word	0x00005c15

0000574c <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    574c:	f011 0f01 	tst.w	r1, #1
    5750:	7c83      	ldrb	r3, [r0, #18]
    5752:	d004      	beq.n	575e <check_perm.isra.4+0x12>
    5754:	f013 0f15 	tst.w	r3, #21
    5758:	d012      	beq.n	5780 <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    575a:	6842      	ldr	r2, [r0, #4]
    575c:	b182      	cbz	r2, 5780 <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    575e:	078a      	lsls	r2, r1, #30
    5760:	d504      	bpl.n	576c <check_perm.isra.4+0x20>
    5762:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    5766:	d00d      	beq.n	5784 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5768:	6882      	ldr	r2, [r0, #8]
    576a:	b15a      	cbz	r2, 5784 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    576c:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    576e:	f011 0f30 	tst.w	r1, #48	; 0x30
    5772:	d109      	bne.n	5788 <check_perm.isra.4+0x3c>
	return 0;
    5774:	f011 0f0c 	tst.w	r1, #12
    5778:	bf14      	ite	ne
    577a:	200f      	movne	r0, #15
    577c:	2000      	moveq	r0, #0
    577e:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5780:	2002      	movs	r0, #2
    5782:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    5784:	2003      	movs	r0, #3
    5786:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5788:	2005      	movs	r0, #5
}
    578a:	4770      	bx	lr

0000578c <read_type_cb>:
{
    578c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5790:	680f      	ldr	r7, [r1, #0]
{
    5792:	4606      	mov	r6, r0
    5794:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5796:	6800      	ldr	r0, [r0, #0]
    5798:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    579a:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    579e:	f7fc fd31 	bl	2204 <bt_uuid_cmp>
    57a2:	4680      	mov	r8, r0
    57a4:	2800      	cmp	r0, #0
    57a6:	d14d      	bne.n	5844 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    57a8:	2115      	movs	r1, #21
    57aa:	4630      	mov	r0, r6
    57ac:	f7ff ffce 	bl	574c <check_perm.isra.4>
    57b0:	4605      	mov	r5, r0
    57b2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    57b4:	b148      	cbz	r0, 57ca <read_type_cb+0x3e>
		if (data->rsp->len) {
    57b6:	68e3      	ldr	r3, [r4, #12]
    57b8:	781d      	ldrb	r5, [r3, #0]
    57ba:	b115      	cbz	r5, 57c2 <read_type_cb+0x36>
			data->err = 0x00;
    57bc:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    57c0:	4645      	mov	r5, r8
}
    57c2:	4628      	mov	r0, r5
    57c4:	b003      	add	sp, #12
    57c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    57ca:	68a0      	ldr	r0, [r4, #8]
    57cc:	2102      	movs	r1, #2
    57ce:	3008      	adds	r0, #8
    57d0:	f00c ff94 	bl	126fc <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    57d4:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57d6:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    57d8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    57da:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57dc:	898a      	ldrh	r2, [r1, #12]
    57de:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    57e2:	6889      	ldr	r1, [r1, #8]
    57e4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    57e8:	9500      	str	r5, [sp, #0]
    57ea:	1a9b      	subs	r3, r3, r2
    57ec:	b29b      	uxth	r3, r3
    57ee:	440a      	add	r2, r1
    57f0:	4648      	mov	r0, r9
    57f2:	4631      	mov	r1, r6
    57f4:	47c0      	blx	r8
	if (read < 0) {
    57f6:	1e01      	subs	r1, r0, #0
    57f8:	da08      	bge.n	580c <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    57fa:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    57fe:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5800:	bf9a      	itte	ls
    5802:	4249      	negls	r1, r1
    5804:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5806:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5808:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    580a:	e7da      	b.n	57c2 <read_type_cb+0x36>
	if (!data->rsp->len) {
    580c:	68e0      	ldr	r0, [r4, #12]
    580e:	7802      	ldrb	r2, [r0, #0]
    5810:	1c8b      	adds	r3, r1, #2
    5812:	b982      	cbnz	r2, 5836 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5814:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5816:	68a0      	ldr	r0, [r4, #8]
    5818:	3008      	adds	r0, #8
    581a:	f00c ff6f 	bl	126fc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    581e:	68a3      	ldr	r3, [r4, #8]
    5820:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5824:	899b      	ldrh	r3, [r3, #12]
    5826:	1aed      	subs	r5, r5, r3
    5828:	68e3      	ldr	r3, [r4, #12]
    582a:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    582c:	429d      	cmp	r5, r3
    582e:	bfd4      	ite	le
    5830:	2500      	movle	r5, #0
    5832:	2501      	movgt	r5, #1
    5834:	e7c5      	b.n	57c2 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5836:	429a      	cmp	r2, r3
    5838:	d0ed      	beq.n	5816 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    583a:	68a2      	ldr	r2, [r4, #8]
    583c:	8993      	ldrh	r3, [r2, #12]
    583e:	3b02      	subs	r3, #2
    5840:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5842:	e7be      	b.n	57c2 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5844:	2501      	movs	r5, #1
    5846:	e7bc      	b.n	57c2 <read_type_cb+0x36>

00005848 <uuid_create>:
{
    5848:	b510      	push	{r4, lr}
	switch (buf->len) {
    584a:	898a      	ldrh	r2, [r1, #12]
    584c:	2a02      	cmp	r2, #2
{
    584e:	4604      	mov	r4, r0
	switch (buf->len) {
    5850:	d003      	beq.n	585a <uuid_create+0x12>
    5852:	2a10      	cmp	r2, #16
    5854:	d00a      	beq.n	586c <uuid_create+0x24>
	return false;
    5856:	2000      	movs	r0, #0
}
    5858:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    585a:	2300      	movs	r3, #0
    585c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    585e:	f101 0008 	add.w	r0, r1, #8
    5862:	f00c ff89 	bl	12778 <net_buf_simple_pull_le16>
    5866:	8060      	strh	r0, [r4, #2]
		return true;
    5868:	2001      	movs	r0, #1
    586a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    586c:	2302      	movs	r3, #2
    586e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5872:	6889      	ldr	r1, [r1, #8]
    5874:	f7fc f9e7 	bl	1c46 <memcpy>
    5878:	e7f6      	b.n	5868 <uuid_create+0x20>
	...

0000587c <att_req_sent>:
{
    587c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    587e:	2104      	movs	r1, #4
    5880:	f7ff fd6a 	bl	5358 <bt_l2cap_le_lookup_tx_cid>
    5884:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5886:	30cc      	adds	r0, #204	; 0xcc
    5888:	f00d ff9d 	bl	137c6 <_impl_k_sem_give>
	if (att->req) {
    588c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5890:	b143      	cbz	r3, 58a4 <att_req_sent+0x28>
    5892:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    5896:	f247 5230 	movw	r2, #30000	; 0x7530
    589a:	4803      	ldr	r0, [pc, #12]	; (58a8 <att_req_sent+0x2c>)
}
    589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58a0:	f00e baec 	b.w	13e7c <k_delayed_work_submit_to_queue>
    58a4:	bd10      	pop	{r4, pc}
    58a6:	bf00      	nop
    58a8:	200019b0 	.word	0x200019b0

000058ac <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    58ac:	6803      	ldr	r3, [r0, #0]
    58ae:	7a5b      	ldrb	r3, [r3, #9]
    58b0:	2b03      	cmp	r3, #3
    58b2:	d10a      	bne.n	58ca <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58b4:	f3bf 8f5b 	dmb	ish
    58b8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    58bc:	f3bf 8f5b 	dmb	ish
    58c0:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    58c4:	f000 0001 	and.w	r0, r0, #1
    58c8:	4770      	bx	lr
    58ca:	2001      	movs	r0, #1
}
    58cc:	4770      	bx	lr

000058ce <att_prepare_write_req>:
    58ce:	2006      	movs	r0, #6
    58d0:	4770      	bx	lr

000058d2 <att_pdu_sent>:
{
    58d2:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    58d4:	2104      	movs	r1, #4
    58d6:	f7ff fd3f 	bl	5358 <bt_l2cap_le_lookup_tx_cid>
}
    58da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58de:	30cc      	adds	r0, #204	; 0xcc
    58e0:	f00d bf71 	b.w	137c6 <_impl_k_sem_give>

000058e4 <att_rsp_sent>:
{
    58e4:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    58e6:	2104      	movs	r1, #4
    58e8:	f7ff fd36 	bl	5358 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58ec:	f3bf 8f5b 	dmb	ish
    58f0:	f100 0394 	add.w	r3, r0, #148	; 0x94
    58f4:	e853 2f00 	ldrex	r2, [r3]
    58f8:	f022 0201 	bic.w	r2, r2, #1
    58fc:	e843 2100 	strex	r1, r2, [r3]
    5900:	2900      	cmp	r1, #0
    5902:	d1f7      	bne.n	58f4 <att_rsp_sent+0x10>
    5904:	f3bf 8f5b 	dmb	ish
    5908:	30cc      	adds	r0, #204	; 0xcc
}
    590a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    590e:	f00d bf5a 	b.w	137c6 <_impl_k_sem_give>

00005912 <att_cfm_sent>:
{
    5912:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5914:	2104      	movs	r1, #4
    5916:	f7ff fd1f 	bl	5358 <bt_l2cap_le_lookup_tx_cid>
    591a:	f3bf 8f5b 	dmb	ish
    591e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5922:	e853 2f00 	ldrex	r2, [r3]
    5926:	f022 0202 	bic.w	r2, r2, #2
    592a:	e843 2100 	strex	r1, r2, [r3]
    592e:	2900      	cmp	r1, #0
    5930:	d1f7      	bne.n	5922 <att_cfm_sent+0x10>
    5932:	f3bf 8f5b 	dmb	ish
    5936:	30cc      	adds	r0, #204	; 0xcc
}
    5938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    593c:	f00d bf43 	b.w	137c6 <_impl_k_sem_give>

00005940 <att_chan_get>:
{
    5940:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5942:	7a45      	ldrb	r5, [r0, #9]
    5944:	2d03      	cmp	r5, #3
    5946:	d006      	beq.n	5956 <att_chan_get+0x16>
		BT_WARN("Not connected");
    5948:	4a0e      	ldr	r2, [pc, #56]	; (5984 <att_chan_get+0x44>)
    594a:	490f      	ldr	r1, [pc, #60]	; (5988 <att_chan_get+0x48>)
		BT_WARN("ATT context flagged as disconnected");
    594c:	2004      	movs	r0, #4
    594e:	f7fc fb41 	bl	1fd4 <bt_log>
		return NULL;
    5952:	2000      	movs	r0, #0
    5954:	bd38      	pop	{r3, r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5956:	2104      	movs	r1, #4
    5958:	f7ff fd0e 	bl	5378 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    595c:	4604      	mov	r4, r0
    595e:	b930      	cbnz	r0, 596e <att_chan_get+0x2e>
		BT_ERR("Unable to find ATT channel");
    5960:	4a08      	ldr	r2, [pc, #32]	; (5984 <att_chan_get+0x44>)
    5962:	490a      	ldr	r1, [pc, #40]	; (598c <att_chan_get+0x4c>)
    5964:	4628      	mov	r0, r5
    5966:	f7fc fb35 	bl	1fd4 <bt_log>
    596a:	4620      	mov	r0, r4
}
    596c:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    596e:	f3bf 8f5b 	dmb	ish
    5972:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5976:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    597a:	075b      	lsls	r3, r3, #29
    597c:	d5f5      	bpl.n	596a <att_chan_get+0x2a>
		BT_WARN("ATT context flagged as disconnected");
    597e:	4a01      	ldr	r2, [pc, #4]	; (5984 <att_chan_get+0x44>)
    5980:	4903      	ldr	r1, [pc, #12]	; (5990 <att_chan_get+0x50>)
    5982:	e7e3      	b.n	594c <att_chan_get+0xc>
    5984:	00015de1 	.word	0x00015de1
    5988:	00015e26 	.word	0x00015e26
    598c:	00015e38 	.word	0x00015e38
    5990:	00015e57 	.word	0x00015e57

00005994 <write_cb>:
{
    5994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5998:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    599a:	f8d1 8000 	ldr.w	r8, [r1]
    599e:	212a      	movs	r1, #42	; 0x2a
{
    59a0:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    59a2:	f7ff fed3 	bl	574c <check_perm.isra.4>
    59a6:	4605      	mov	r5, r0
    59a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    59aa:	b9e0      	cbnz	r0, 59e6 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    59ac:	8a62      	ldrh	r2, [r4, #18]
    59ae:	9001      	str	r0, [sp, #4]
    59b0:	9200      	str	r2, [sp, #0]
    59b2:	7c23      	ldrb	r3, [r4, #16]
    59b4:	68b7      	ldr	r7, [r6, #8]
    59b6:	68e2      	ldr	r2, [r4, #12]
    59b8:	4631      	mov	r1, r6
    59ba:	4640      	mov	r0, r8
    59bc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    59be:	2800      	cmp	r0, #0
    59c0:	db02      	blt.n	59c8 <write_cb+0x34>
    59c2:	7c23      	ldrb	r3, [r4, #16]
    59c4:	4298      	cmp	r0, r3
    59c6:	d00b      	beq.n	59e0 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    59c8:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    59cc:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    59ce:	bf9a      	itte	ls
    59d0:	4240      	negls	r0, r0
    59d2:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    59d4:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    59d6:	7520      	strb	r0, [r4, #20]
}
    59d8:	4628      	mov	r0, r5
    59da:	b002      	add	sp, #8
    59dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    59e0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    59e2:	2501      	movs	r5, #1
    59e4:	e7f8      	b.n	59d8 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    59e6:	2500      	movs	r5, #0
    59e8:	e7f6      	b.n	59d8 <write_cb+0x44>
	...

000059ec <att_send_req>:
{
    59ec:	b570      	push	{r4, r5, r6, lr}
    59ee:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    59f0:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    59f4:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    59f8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    59fa:	4630      	mov	r0, r6
    59fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a00:	f00d ff09 	bl	13816 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5a04:	4628      	mov	r0, r5
    5a06:	f7ff ff51 	bl	58ac <att_is_connected>
    5a0a:	b950      	cbnz	r0, 5a22 <att_send_req+0x36>
		BT_WARN("Disconnected");
    5a0c:	4a15      	ldr	r2, [pc, #84]	; (5a64 <att_send_req+0x78>)
    5a0e:	4916      	ldr	r1, [pc, #88]	; (5a68 <att_send_req+0x7c>)
    5a10:	2004      	movs	r0, #4
    5a12:	f7fc fadf 	bl	1fd4 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5a16:	4630      	mov	r0, r6
    5a18:	f00d fed5 	bl	137c6 <_impl_k_sem_give>
		return -ENOTCONN;
    5a1c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5a20:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5a22:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5a24:	f106 0008 	add.w	r0, r6, #8
    5a28:	f00c feae 	bl	12788 <net_buf_simple_headroom>
	state->len = buf->len;
    5a2c:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5a2e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5a30:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a32:	6920      	ldr	r0, [r4, #16]
    5a34:	682d      	ldr	r5, [r5, #0]
    5a36:	f00c fe5d 	bl	126f4 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5a3a:	6923      	ldr	r3, [r4, #16]
    5a3c:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a3e:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5a40:	7818      	ldrb	r0, [r3, #0]
    5a42:	f7ff fd07 	bl	5454 <att_op_get_type>
    5a46:	3801      	subs	r0, #1
    5a48:	b2c0      	uxtb	r0, r0
    5a4a:	2804      	cmp	r0, #4
    5a4c:	bf96      	itet	ls
    5a4e:	4b07      	ldrls	r3, [pc, #28]	; (5a6c <att_send_req+0x80>)
    5a50:	4b07      	ldrhi	r3, [pc, #28]	; (5a70 <att_send_req+0x84>)
    5a52:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a56:	4632      	mov	r2, r6
    5a58:	4628      	mov	r0, r5
    5a5a:	2104      	movs	r1, #4
    5a5c:	f7ff fbb6 	bl	51cc <bt_l2cap_send_cb>
	return 0;
    5a60:	2000      	movs	r0, #0
}
    5a62:	bd70      	pop	{r4, r5, r6, pc}
    5a64:	00015da4 	.word	0x00015da4
    5a68:	00015e9a 	.word	0x00015e9a
    5a6c:	00015d90 	.word	0x00015d90
    5a70:	000058d3 	.word	0x000058d3

00005a74 <att_handle_rsp>:
{
    5a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5a78:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5a7a:	30a4      	adds	r0, #164	; 0xa4
{
    5a7c:	461e      	mov	r6, r3
    5a7e:	460f      	mov	r7, r1
    5a80:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5a82:	f00e f997 	bl	13db4 <k_delayed_work_cancel>
	if (!att->req) {
    5a86:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5a8a:	b9bb      	cbnz	r3, 5abc <att_handle_rsp+0x48>
		BT_WARN("No pending ATT request");
    5a8c:	4a1a      	ldr	r2, [pc, #104]	; (5af8 <att_handle_rsp+0x84>)
    5a8e:	491b      	ldr	r1, [pc, #108]	; (5afc <att_handle_rsp+0x88>)
    5a90:	2004      	movs	r0, #4
    5a92:	f7fc fa9f 	bl	1fd4 <bt_log>
    5a96:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5a9a:	b159      	cbz	r1, 5ab4 <att_handle_rsp+0x40>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5a9c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5aa0:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5aa2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5aa6:	4291      	cmp	r1, r2
	list->tail = node;
    5aa8:	bf08      	it	eq
    5aaa:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5aae:	4620      	mov	r0, r4
    5ab0:	f7ff ff9c 	bl	59ec <att_send_req>
}
    5ab4:	2000      	movs	r0, #0
    5ab6:	b003      	add	sp, #12
    5ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5abc:	6918      	ldr	r0, [r3, #16]
    5abe:	b128      	cbz	r0, 5acc <att_handle_rsp+0x58>
		net_buf_unref(att->req->buf);
    5ac0:	f00c fdea 	bl	12698 <net_buf_unref>
		att->req->buf = NULL;
    5ac4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5ac8:	2200      	movs	r2, #0
    5aca:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5acc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5ad0:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5ad2:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5ad6:	2500      	movs	r5, #0
    5ad8:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5ada:	463a      	mov	r2, r7
    5adc:	9300      	str	r3, [sp, #0]
    5ade:	4631      	mov	r1, r6
    5ae0:	4643      	mov	r3, r8
    5ae2:	47c8      	blx	r9
	if (!att->req->func) {
    5ae4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5ae8:	6843      	ldr	r3, [r0, #4]
    5aea:	b90b      	cbnz	r3, 5af0 <att_handle_rsp+0x7c>
		att_req_destroy(att->req);
    5aec:	f7ff fcf0 	bl	54d0 <att_req_destroy>
	att->req = NULL;
    5af0:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5af4:	e7cf      	b.n	5a96 <att_handle_rsp+0x22>
    5af6:	bf00      	nop
    5af8:	00015db1 	.word	0x00015db1
    5afc:	00015e7f 	.word	0x00015e7f

00005b00 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5b00:	898a      	ldrh	r2, [r1, #12]
    5b02:	6889      	ldr	r1, [r1, #8]
    5b04:	2300      	movs	r3, #0
    5b06:	f7ff bfb5 	b.w	5a74 <att_handle_rsp>

00005b0a <att_handle_exec_write_rsp>:
    5b0a:	f7ff bff9 	b.w	5b00 <att_confirm>

00005b0e <att_handle_prepare_write_rsp>:
    5b0e:	f7ff bff7 	b.w	5b00 <att_confirm>

00005b12 <att_handle_write_rsp>:
    5b12:	f7ff bff5 	b.w	5b00 <att_confirm>

00005b16 <att_handle_read_mult_rsp>:
    5b16:	f7ff bff3 	b.w	5b00 <att_confirm>

00005b1a <att_handle_read_blob_rsp>:
    5b1a:	f7ff bff1 	b.w	5b00 <att_confirm>

00005b1e <att_handle_read_rsp>:
    5b1e:	f7ff bfef 	b.w	5b00 <att_confirm>

00005b22 <att_handle_read_type_rsp>:
    5b22:	f7ff bfed 	b.w	5b00 <att_confirm>

00005b26 <att_handle_find_type_rsp>:
    5b26:	f7ff bfeb 	b.w	5b00 <att_confirm>

00005b2a <att_handle_find_info_rsp>:
    5b2a:	f7ff bfe9 	b.w	5b00 <att_confirm>

00005b2e <att_mtu_rsp>:
{
    5b2e:	b410      	push	{r4}
    5b30:	460a      	mov	r2, r1
	if (!att) {
    5b32:	4603      	mov	r3, r0
    5b34:	b180      	cbz	r0, 5b58 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5b36:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5b38:	880c      	ldrh	r4, [r1, #0]
    5b3a:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5b3c:	bf83      	ittte	hi
    5b3e:	2417      	movhi	r4, #23
    5b40:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5b42:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5b46:	2200      	movls	r2, #0
    5b48:	bf99      	ittee	ls
    5b4a:	2304      	movls	r3, #4
    5b4c:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5b4e:	2300      	movhi	r3, #0
    5b50:	8992      	ldrhhi	r2, [r2, #12]
}
    5b52:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5b54:	f7ff bf8e 	b.w	5a74 <att_handle_rsp>
}
    5b58:	bc10      	pop	{r4}
    5b5a:	4770      	bx	lr

00005b5c <att_error_rsp>:
{
    5b5c:	b430      	push	{r4, r5}
	if (!att->req) {
    5b5e:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5b62:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5b64:	b16a      	cbz	r2, 5b82 <att_error_rsp+0x26>
	if (att->req->buf) {
    5b66:	6913      	ldr	r3, [r2, #16]
    5b68:	b12b      	cbz	r3, 5b76 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5b6a:	8995      	ldrh	r5, [r2, #12]
    5b6c:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5b6e:	89d2      	ldrh	r2, [r2, #14]
    5b70:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5b72:	4429      	add	r1, r5
    5b74:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5b76:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5b78:	2200      	movs	r2, #0
    5b7a:	4611      	mov	r1, r2
}
    5b7c:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5b7e:	f7ff bf79 	b.w	5a74 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5b82:	230e      	movs	r3, #14
    5b84:	e7f8      	b.n	5b78 <att_error_rsp+0x1c>

00005b86 <att_reset>:
{
    5b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b88:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5b8c:	4605      	mov	r5, r0
    5b8e:	f3bf 8f5b 	dmb	ish
    5b92:	e853 2f00 	ldrex	r2, [r3]
    5b96:	f042 0204 	orr.w	r2, r2, #4
    5b9a:	e843 2100 	strex	r1, r2, [r3]
    5b9e:	2900      	cmp	r1, #0
    5ba0:	d1f7      	bne.n	5b92 <att_reset+0xc>
    5ba2:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5ba6:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5baa:	4620      	mov	r0, r4
    5bac:	f00d fe0b 	bl	137c6 <_impl_k_sem_give>
    5bb0:	4620      	mov	r0, r4
    5bb2:	f00d fe08 	bl	137c6 <_impl_k_sem_give>
    5bb6:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5bba:	b98c      	cbnz	r4, 5be0 <att_reset+0x5a>
	if (!att->req) {
    5bbc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5bc0:	2200      	movs	r2, #0
    5bc2:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    5bc6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5bca:	b90b      	cbnz	r3, 5bd0 <att_reset+0x4a>
}
    5bcc:	b003      	add	sp, #12
    5bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5bd0:	230e      	movs	r3, #14
    5bd2:	4611      	mov	r1, r2
    5bd4:	4628      	mov	r0, r5
}
    5bd6:	b003      	add	sp, #12
    5bd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5bdc:	f7ff bf4a 	b.w	5a74 <att_handle_rsp>
	return node->next;
    5be0:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5be2:	6867      	ldr	r7, [r4, #4]
    5be4:	b12f      	cbz	r7, 5bf2 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5be6:	2300      	movs	r3, #0
    5be8:	9400      	str	r4, [sp, #0]
    5bea:	461a      	mov	r2, r3
    5bec:	210e      	movs	r1, #14
    5bee:	4618      	mov	r0, r3
    5bf0:	47b8      	blx	r7
		att_req_destroy(req);
    5bf2:	4620      	mov	r0, r4
    5bf4:	f7ff fc6c 	bl	54d0 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5bf8:	2e00      	cmp	r6, #0
    5bfa:	d0df      	beq.n	5bbc <att_reset+0x36>
    5bfc:	4634      	mov	r4, r6
    5bfe:	6836      	ldr	r6, [r6, #0]
    5c00:	e7ef      	b.n	5be2 <att_reset+0x5c>

00005c02 <bt_att_disconnected>:
{
    5c02:	b510      	push	{r4, lr}
    5c04:	4604      	mov	r4, r0
	att_reset(att);
    5c06:	f7ff ffbe 	bl	5b86 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5c0a:	6820      	ldr	r0, [r4, #0]
}
    5c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    5c10:	f001 ba7c 	b.w	710c <bt_gatt_disconnected>

00005c14 <att_timeout>:
{
    5c14:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
    5c16:	4a09      	ldr	r2, [pc, #36]	; (5c3c <att_timeout+0x28>)
    5c18:	4909      	ldr	r1, [pc, #36]	; (5c40 <att_timeout+0x2c>)
{
    5c1a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5c1c:	2003      	movs	r0, #3
    5c1e:	f7fc f9d9 	bl	1fd4 <bt_log>
	att_reset(att);
    5c22:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    5c26:	f7ff ffae 	bl	5b86 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5c2a:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5c2e:	f001 fa6d 	bl	710c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5c32:	2300      	movs	r3, #0
    5c34:	f844 3ca4 	str.w	r3, [r4, #-164]
    5c38:	bd10      	pop	{r4, pc}
    5c3a:	bf00      	nop
    5c3c:	00015e00 	.word	0x00015e00
    5c40:	00015ec4 	.word	0x00015ec4

00005c44 <read_cb>:
{
    5c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5c48:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c4a:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5c4c:	f8d1 9000 	ldr.w	r9, [r1]
{
    5c50:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c52:	3008      	adds	r0, #8
    5c54:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5c56:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c5a:	f00c fd4f 	bl	126fc <net_buf_simple_add>
	data->err = 0x00;
    5c5e:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c60:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5c62:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5c64:	2115      	movs	r1, #21
    5c66:	4630      	mov	r0, r6
    5c68:	f7ff fd70 	bl	574c <check_perm.isra.4>
    5c6c:	4605      	mov	r5, r0
    5c6e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5c70:	bb08      	cbnz	r0, 5cb6 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5c72:	68a1      	ldr	r1, [r4, #8]
    5c74:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5c78:	898a      	ldrh	r2, [r1, #12]
    5c7a:	6889      	ldr	r1, [r1, #8]
    5c7c:	88a0      	ldrh	r0, [r4, #4]
    5c7e:	9000      	str	r0, [sp, #0]
    5c80:	1a9b      	subs	r3, r3, r2
    5c82:	6877      	ldr	r7, [r6, #4]
    5c84:	440a      	add	r2, r1
    5c86:	b29b      	uxth	r3, r3
    5c88:	4631      	mov	r1, r6
    5c8a:	4640      	mov	r0, r8
    5c8c:	47b8      	blx	r7
	if (read < 0) {
    5c8e:	1e01      	subs	r1, r0, #0
    5c90:	da0b      	bge.n	5caa <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5c92:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5c96:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5c98:	bf9a      	itte	ls
    5c9a:	4249      	negls	r1, r1
    5c9c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5c9e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5ca0:	7421      	strb	r1, [r4, #16]
}
    5ca2:	4628      	mov	r0, r5
    5ca4:	b003      	add	sp, #12
    5ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5caa:	68a0      	ldr	r0, [r4, #8]
    5cac:	3008      	adds	r0, #8
    5cae:	f00c fd25 	bl	126fc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5cb2:	2501      	movs	r5, #1
    5cb4:	e7f5      	b.n	5ca2 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5cb6:	463d      	mov	r5, r7
    5cb8:	e7f3      	b.n	5ca2 <read_cb+0x5e>
	...

00005cbc <bt_att_create_pdu>:
{
    5cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5cbe:	460d      	mov	r5, r1
    5cc0:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5cc2:	f7ff fe3d 	bl	5940 <att_chan_get>
	if (!att) {
    5cc6:	b1c8      	cbz	r0, 5cfc <bt_att_create_pdu+0x40>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    5cc8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    5ccc:	3401      	adds	r4, #1
    5cce:	429c      	cmp	r4, r3
    5cd0:	d909      	bls.n	5ce6 <bt_att_create_pdu+0x2a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5cd2:	9400      	str	r4, [sp, #0]
    5cd4:	4a0a      	ldr	r2, [pc, #40]	; (5d00 <bt_att_create_pdu+0x44>)
    5cd6:	490b      	ldr	r1, [pc, #44]	; (5d04 <bt_att_create_pdu+0x48>)
    5cd8:	2004      	movs	r0, #4
    5cda:	f7fc f97b 	bl	1fd4 <bt_log>
		return NULL;
    5cde:	2400      	movs	r4, #0
}
    5ce0:	4620      	mov	r0, r4
    5ce2:	b003      	add	sp, #12
    5ce4:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    5ce6:	2100      	movs	r1, #0
    5ce8:	4608      	mov	r0, r1
    5cea:	f7ff fa6c 	bl	51c6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5cee:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5cf0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5cf2:	3008      	adds	r0, #8
    5cf4:	f00c fd02 	bl	126fc <net_buf_simple_add>
	hdr->code = op;
    5cf8:	7005      	strb	r5, [r0, #0]
	return buf;
    5cfa:	e7f1      	b.n	5ce0 <bt_att_create_pdu+0x24>
		return NULL;
    5cfc:	4604      	mov	r4, r0
    5cfe:	e7ef      	b.n	5ce0 <bt_att_create_pdu+0x24>
    5d00:	00015dee 	.word	0x00015dee
    5d04:	00015efd 	.word	0x00015efd

00005d08 <att_indicate>:
{
    5d08:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5d0a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5d0c:	f101 0008 	add.w	r0, r1, #8
{
    5d10:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    5d12:	f00c fd31 	bl	12778 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    5d16:	89ab      	ldrh	r3, [r5, #12]
    5d18:	68aa      	ldr	r2, [r5, #8]
    5d1a:	4601      	mov	r1, r0
    5d1c:	4620      	mov	r0, r4
    5d1e:	f001 f99f 	bl	7060 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5d22:	2200      	movs	r2, #0
    5d24:	211e      	movs	r1, #30
    5d26:	4620      	mov	r0, r4
    5d28:	f7ff ffc8 	bl	5cbc <bt_att_create_pdu>
	if (!buf) {
    5d2c:	4602      	mov	r2, r0
    5d2e:	b120      	cbz	r0, 5d3a <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5d30:	4b03      	ldr	r3, [pc, #12]	; (5d40 <att_indicate+0x38>)
    5d32:	2104      	movs	r1, #4
    5d34:	4620      	mov	r0, r4
    5d36:	f7ff fa49 	bl	51cc <bt_l2cap_send_cb>
}
    5d3a:	2000      	movs	r0, #0
    5d3c:	bd38      	pop	{r3, r4, r5, pc}
    5d3e:	bf00      	nop
    5d40:	00005913 	.word	0x00005913

00005d44 <att_mtu_req>:
{
    5d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5d48:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5d4a:	881b      	ldrh	r3, [r3, #0]
    5d4c:	2b16      	cmp	r3, #22
{
    5d4e:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5d50:	d91c      	bls.n	5d8c <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5d52:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5d56:	2202      	movs	r2, #2
    5d58:	2103      	movs	r1, #3
    5d5a:	4640      	mov	r0, r8
    5d5c:	f7ff ffae 	bl	5cbc <bt_att_create_pdu>
	if (!pdu) {
    5d60:	4607      	mov	r7, r0
    5d62:	b1b0      	cbz	r0, 5d92 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5d64:	2102      	movs	r1, #2
    5d66:	3008      	adds	r0, #8
    5d68:	f00c fcc8 	bl	126fc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5d6c:	2617      	movs	r6, #23
    5d6e:	2400      	movs	r4, #0
    5d70:	7006      	strb	r6, [r0, #0]
    5d72:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5d74:	4b08      	ldr	r3, [pc, #32]	; (5d98 <att_mtu_req+0x54>)
    5d76:	4640      	mov	r0, r8
    5d78:	463a      	mov	r2, r7
    5d7a:	2104      	movs	r1, #4
    5d7c:	f7ff fa26 	bl	51cc <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5d80:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5d82:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    5d86:	4620      	mov	r0, r4
    5d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5d8c:	2004      	movs	r0, #4
    5d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5d92:	200e      	movs	r0, #14
}
    5d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d98:	000058e5 	.word	0x000058e5

00005d9c <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5da0:	4688      	mov	r8, r1
    5da2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5da4:	2101      	movs	r1, #1
    5da6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5da8:	4605      	mov	r5, r0
    5daa:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5dac:	f7ff ff86 	bl	5cbc <bt_att_create_pdu>
	if (!buf) {
    5db0:	4604      	mov	r4, r0
    5db2:	b180      	cbz	r0, 5dd6 <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5db4:	2104      	movs	r1, #4
    5db6:	3008      	adds	r0, #8
    5db8:	f00c fca0 	bl	126fc <net_buf_simple_add>
	rsp->request = req;
    5dbc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5dc0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5dc2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5dc6:	4622      	mov	r2, r4
    5dc8:	4628      	mov	r0, r5
    5dca:	4b04      	ldr	r3, [pc, #16]	; (5ddc <send_err_rsp.part.10+0x40>)
    5dcc:	2104      	movs	r1, #4
}
    5dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5dd2:	f7ff b9fb 	b.w	51cc <bt_l2cap_send_cb>
    5dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dda:	bf00      	nop
    5ddc:	000058e5 	.word	0x000058e5

00005de0 <bt_att_recv>:
{
    5de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5de2:	898b      	ldrh	r3, [r1, #12]
{
    5de4:	4604      	mov	r4, r0
    5de6:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5de8:	b93b      	cbnz	r3, 5dfa <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
    5dea:	4a40      	ldr	r2, [pc, #256]	; (5eec <bt_att_recv+0x10c>)
    5dec:	4940      	ldr	r1, [pc, #256]	; (5ef0 <bt_att_recv+0x110>)
    5dee:	2003      	movs	r0, #3
}
    5df0:	b003      	add	sp, #12
    5df2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Ignoring unexpected request");
    5df6:	f7fc b8ed 	b.w	1fd4 <bt_log>
	struct bt_att_hdr *hdr = (void *)buf->data;
    5dfa:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5dfc:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5dfe:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5e02:	f00c fca9 	bl	12758 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5e06:	493b      	ldr	r1, [pc, #236]	; (5ef4 <bt_att_recv+0x114>)
    5e08:	782b      	ldrb	r3, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e0a:	2200      	movs	r2, #0
    5e0c:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    5e0e:	f811 6032 	ldrb.w	r6, [r1, r2, lsl #3]
    5e12:	429e      	cmp	r6, r3
    5e14:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
    5e18:	d118      	bne.n	5e4c <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    5e1a:	4471      	add	r1, lr
    5e1c:	788e      	ldrb	r6, [r1, #2]
    5e1e:	2e01      	cmp	r6, #1
    5e20:	d12e      	bne.n	5e80 <bt_att_recv+0xa0>
    5e22:	f3bf 8f5b 	dmb	ish
    5e26:	f104 0394 	add.w	r3, r4, #148	; 0x94
    5e2a:	e853 2f00 	ldrex	r2, [r3]
    5e2e:	f042 0101 	orr.w	r1, r2, #1
    5e32:	e843 1c00 	strex	ip, r1, [r3]
    5e36:	f1bc 0f00 	cmp.w	ip, #0
    5e3a:	d1f6      	bne.n	5e2a <bt_att_recv+0x4a>
    5e3c:	f3bf 8f5b 	dmb	ish
    5e40:	07d2      	lsls	r2, r2, #31
    5e42:	d533      	bpl.n	5eac <bt_att_recv+0xcc>
			BT_WARN("Ignoring unexpected request");
    5e44:	4a29      	ldr	r2, [pc, #164]	; (5eec <bt_att_recv+0x10c>)
    5e46:	492c      	ldr	r1, [pc, #176]	; (5ef8 <bt_att_recv+0x118>)
    5e48:	2004      	movs	r0, #4
    5e4a:	e7d1      	b.n	5df0 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e4c:	3201      	adds	r2, #1
    5e4e:	2a1b      	cmp	r2, #27
    5e50:	d1dd      	bne.n	5e0e <bt_att_recv+0x2e>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5e52:	2004      	movs	r0, #4
    5e54:	4a25      	ldr	r2, [pc, #148]	; (5eec <bt_att_recv+0x10c>)
    5e56:	4929      	ldr	r1, [pc, #164]	; (5efc <bt_att_recv+0x11c>)
    5e58:	f7fc f8bc 	bl	1fd4 <bt_log>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5e5c:	782d      	ldrb	r5, [r5, #0]
    5e5e:	4628      	mov	r0, r5
    5e60:	f7ff faf8 	bl	5454 <att_op_get_type>
    5e64:	b908      	cbnz	r0, 5e6a <bt_att_recv+0x8a>
}
    5e66:	b003      	add	sp, #12
    5e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!req) {
    5e6a:	2d00      	cmp	r5, #0
    5e6c:	d0fb      	beq.n	5e66 <bt_att_recv+0x86>
    5e6e:	2306      	movs	r3, #6
    5e70:	2200      	movs	r2, #0
    5e72:	4629      	mov	r1, r5
    5e74:	6820      	ldr	r0, [r4, #0]
}
    5e76:	b003      	add	sp, #12
    5e78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5e7c:	f7ff bf8e 	b.w	5d9c <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    5e80:	2e05      	cmp	r6, #5
    5e82:	d113      	bne.n	5eac <bt_att_recv+0xcc>
    5e84:	f3bf 8f5b 	dmb	ish
    5e88:	f104 0394 	add.w	r3, r4, #148	; 0x94
    5e8c:	e853 2f00 	ldrex	r2, [r3]
    5e90:	f042 0102 	orr.w	r1, r2, #2
    5e94:	e843 1c00 	strex	ip, r1, [r3]
    5e98:	f1bc 0f00 	cmp.w	ip, #0
    5e9c:	d1f6      	bne.n	5e8c <bt_att_recv+0xac>
    5e9e:	f3bf 8f5b 	dmb	ish
    5ea2:	0793      	lsls	r3, r2, #30
    5ea4:	d502      	bpl.n	5eac <bt_att_recv+0xcc>
			BT_WARN("Ignoring unexpected indication");
    5ea6:	4a11      	ldr	r2, [pc, #68]	; (5eec <bt_att_recv+0x10c>)
    5ea8:	4915      	ldr	r1, [pc, #84]	; (5f00 <bt_att_recv+0x120>)
    5eaa:	e7cd      	b.n	5e48 <bt_att_recv+0x68>
	if (buf->len < handler->expect_len) {
    5eac:	eb00 020e 	add.w	r2, r0, lr
    5eb0:	89bb      	ldrh	r3, [r7, #12]
    5eb2:	7851      	ldrb	r1, [r2, #1]
    5eb4:	4299      	cmp	r1, r3
    5eb6:	d90a      	bls.n	5ece <bt_att_recv+0xee>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5eb8:	782a      	ldrb	r2, [r5, #0]
    5eba:	9200      	str	r2, [sp, #0]
    5ebc:	4911      	ldr	r1, [pc, #68]	; (5f04 <bt_att_recv+0x124>)
    5ebe:	4a0b      	ldr	r2, [pc, #44]	; (5eec <bt_att_recv+0x10c>)
    5ec0:	2003      	movs	r0, #3
    5ec2:	f7fc f887 	bl	1fd4 <bt_log>
	if (handler->type == ATT_REQUEST && err) {
    5ec6:	2e01      	cmp	r6, #1
    5ec8:	d1cd      	bne.n	5e66 <bt_att_recv+0x86>
		err = BT_ATT_ERR_INVALID_PDU;
    5eca:	2304      	movs	r3, #4
    5ecc:	e008      	b.n	5ee0 <bt_att_recv+0x100>
		err = handler->func(att, buf);
    5ece:	6853      	ldr	r3, [r2, #4]
    5ed0:	4639      	mov	r1, r7
    5ed2:	4620      	mov	r0, r4
    5ed4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5ed6:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5ed8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5eda:	d1c4      	bne.n	5e66 <bt_att_recv+0x86>
    5edc:	2800      	cmp	r0, #0
    5ede:	d0c2      	beq.n	5e66 <bt_att_recv+0x86>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5ee0:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5ee2:	2900      	cmp	r1, #0
    5ee4:	d0bf      	beq.n	5e66 <bt_att_recv+0x86>
    5ee6:	2200      	movs	r2, #0
    5ee8:	e7c4      	b.n	5e74 <bt_att_recv+0x94>
    5eea:	bf00      	nop
    5eec:	00015dd5 	.word	0x00015dd5
    5ef0:	00015f26 	.word	0x00015f26
    5ef4:	00015fe0 	.word	0x00015fe0
    5ef8:	00015f45 	.word	0x00015f45
    5efc:	00015fab 	.word	0x00015fab
    5f00:	00015f65 	.word	0x00015f65
    5f04:	00015f88 	.word	0x00015f88

00005f08 <att_read_group_req>:
{
    5f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f0c:	898b      	ldrh	r3, [r1, #12]
    5f0e:	2b06      	cmp	r3, #6
{
    5f10:	b08d      	sub	sp, #52	; 0x34
    5f12:	4680      	mov	r8, r0
    5f14:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f16:	d001      	beq.n	5f1c <att_read_group_req+0x14>
    5f18:	2b14      	cmp	r3, #20
    5f1a:	d168      	bne.n	5fee <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5f1c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5f1e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5f20:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5f24:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5f28:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f2a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5f2c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5f2e:	f00c fc13 	bl	12758 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5f32:	4621      	mov	r1, r4
    5f34:	4638      	mov	r0, r7
    5f36:	f7ff fc87 	bl	5848 <uuid_create>
    5f3a:	2800      	cmp	r0, #0
    5f3c:	d059      	beq.n	5ff2 <att_read_group_req+0xea>
	if (!start || !end) {
    5f3e:	2d00      	cmp	r5, #0
    5f40:	d05a      	beq.n	5ff8 <att_read_group_req+0xf0>
    5f42:	2400      	movs	r4, #0
    5f44:	2e00      	cmp	r6, #0
    5f46:	d056      	beq.n	5ff6 <att_read_group_req+0xee>
	if (start > end) {
    5f48:	42b5      	cmp	r5, r6
    5f4a:	d855      	bhi.n	5ff8 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5f4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5f50:	4669      	mov	r1, sp
    5f52:	4638      	mov	r0, r7
    5f54:	f88d 4000 	strb.w	r4, [sp]
    5f58:	f8ad 3002 	strh.w	r3, [sp, #2]
    5f5c:	f7fc f952 	bl	2204 <bt_uuid_cmp>
    5f60:	bb38      	cbnz	r0, 5fb2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5f62:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5f66:	2214      	movs	r2, #20
    5f68:	2100      	movs	r1, #0
    5f6a:	a807      	add	r0, sp, #28
    5f6c:	f7fb fe97 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5f70:	2201      	movs	r2, #1
    5f72:	2111      	movs	r1, #17
    5f74:	4648      	mov	r0, r9
    5f76:	f7ff fea1 	bl	5cbc <bt_att_create_pdu>
    5f7a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5f7c:	2800      	cmp	r0, #0
    5f7e:	d038      	beq.n	5ff2 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5f80:	2101      	movs	r1, #1
    5f82:	3008      	adds	r0, #8
	data.uuid = uuid;
    5f84:	9708      	str	r7, [sp, #32]
	data.att = att;
    5f86:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5f8a:	f00c fbb7 	bl	126fc <net_buf_simple_add>
	data.rsp->len = 0;
    5f8e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5f90:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5f92:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5f94:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5f96:	4a1c      	ldr	r2, [pc, #112]	; (6008 <att_read_group_req+0x100>)
	data.group = NULL;
    5f98:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5f9a:	4631      	mov	r1, r6
    5f9c:	4628      	mov	r0, r5
    5f9e:	f000 ff23 	bl	6de8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5fa4:	781c      	ldrb	r4, [r3, #0]
    5fa6:	b9d4      	cbnz	r4, 5fde <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
    5faa:	f00c fb75 	bl	12698 <net_buf_unref>
    5fae:	230a      	movs	r3, #10
    5fb0:	e00c      	b.n	5fcc <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5fb2:	f642 0301 	movw	r3, #10241	; 0x2801
    5fb6:	a901      	add	r1, sp, #4
    5fb8:	4638      	mov	r0, r7
    5fba:	f88d 4004 	strb.w	r4, [sp, #4]
    5fbe:	f8ad 3006 	strh.w	r3, [sp, #6]
    5fc2:	f7fc f91f 	bl	2204 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d0cb      	beq.n	5f62 <att_read_group_req+0x5a>
    5fca:	2310      	movs	r3, #16
    5fcc:	462a      	mov	r2, r5
    5fce:	2110      	movs	r1, #16
    5fd0:	4648      	mov	r0, r9
    5fd2:	f7ff fee3 	bl	5d9c <send_err_rsp.part.10>
}
    5fd6:	4620      	mov	r0, r4
    5fd8:	b00d      	add	sp, #52	; 0x34
    5fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5fde:	4b0b      	ldr	r3, [pc, #44]	; (600c <att_read_group_req+0x104>)
    5fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5fe2:	2104      	movs	r1, #4
    5fe4:	4648      	mov	r0, r9
    5fe6:	f7ff f8f1 	bl	51cc <bt_l2cap_send_cb>
		return 0;
    5fea:	2400      	movs	r4, #0
    5fec:	e7f3      	b.n	5fd6 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5fee:	2404      	movs	r4, #4
    5ff0:	e7f1      	b.n	5fd6 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5ff2:	240e      	movs	r4, #14
    5ff4:	e7ef      	b.n	5fd6 <att_read_group_req+0xce>
			*err = 0;
    5ff6:	4635      	mov	r5, r6
    5ff8:	2301      	movs	r3, #1
    5ffa:	462a      	mov	r2, r5
    5ffc:	2110      	movs	r1, #16
    5ffe:	4648      	mov	r0, r9
    6000:	f7ff fecc 	bl	5d9c <send_err_rsp.part.10>
    6004:	e7f1      	b.n	5fea <att_read_group_req+0xe2>
    6006:	bf00      	nop
    6008:	00005511 	.word	0x00005511
    600c:	000058e5 	.word	0x000058e5

00006010 <att_read_mult_req>:
{
    6010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6014:	6804      	ldr	r4, [r0, #0]
{
    6016:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    6018:	2214      	movs	r2, #20
{
    601a:	4606      	mov	r6, r0
    601c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    601e:	a801      	add	r0, sp, #4
    6020:	2100      	movs	r1, #0
    6022:	f7fb fe3c 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6026:	2200      	movs	r2, #0
    6028:	210f      	movs	r1, #15
    602a:	4620      	mov	r0, r4
    602c:	f7ff fe46 	bl	5cbc <bt_att_create_pdu>
    6030:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6032:	b368      	cbz	r0, 6090 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6034:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6098 <att_read_mult_req+0x88>
	data.att = att;
    6038:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    603a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    603e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    6042:	89ab      	ldrh	r3, [r5, #12]
    6044:	2b01      	cmp	r3, #1
    6046:	d806      	bhi.n	6056 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6048:	4b12      	ldr	r3, [pc, #72]	; (6094 <att_read_mult_req+0x84>)
    604a:	9a03      	ldr	r2, [sp, #12]
    604c:	2104      	movs	r1, #4
    604e:	4620      	mov	r0, r4
    6050:	f7ff f8bc 	bl	51cc <bt_l2cap_send_cb>
    6054:	e018      	b.n	6088 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    6056:	4638      	mov	r0, r7
    6058:	f00c fb8e 	bl	12778 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    605c:	ab01      	add	r3, sp, #4
    605e:	464a      	mov	r2, r9
    6060:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    6062:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6064:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6068:	f000 febe 	bl	6de8 <bt_gatt_foreach_attr>
		if (data.err) {
    606c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6070:	2b00      	cmp	r3, #0
    6072:	d0e6      	beq.n	6042 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    6074:	9803      	ldr	r0, [sp, #12]
    6076:	f00c fb0f 	bl	12698 <net_buf_unref>
    607a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    607e:	4632      	mov	r2, r6
    6080:	210e      	movs	r1, #14
    6082:	4620      	mov	r0, r4
    6084:	f7ff fe8a 	bl	5d9c <send_err_rsp.part.10>
	return 0;
    6088:	2000      	movs	r0, #0
}
    608a:	b007      	add	sp, #28
    608c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    6090:	200e      	movs	r0, #14
    6092:	e7fa      	b.n	608a <att_read_mult_req+0x7a>
    6094:	000058e5 	.word	0x000058e5
    6098:	00005c45 	.word	0x00005c45

0000609c <att_read_rsp>:
{
    609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60a0:	4607      	mov	r7, r0
    60a2:	b086      	sub	sp, #24
    60a4:	460c      	mov	r4, r1
    60a6:	4690      	mov	r8, r2
	if (!handle) {
    60a8:	461d      	mov	r5, r3
    60aa:	b3a3      	cbz	r3, 6116 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    60ac:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    60ae:	2214      	movs	r2, #20
    60b0:	2100      	movs	r1, #0
    60b2:	a801      	add	r0, sp, #4
    60b4:	f7fb fdf3 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    60b8:	2200      	movs	r2, #0
    60ba:	4641      	mov	r1, r8
    60bc:	4630      	mov	r0, r6
    60be:	f7ff fdfd 	bl	5cbc <bt_att_create_pdu>
    60c2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    60c4:	b348      	cbz	r0, 611a <att_read_rsp+0x7e>
	data.offset = offset;
    60c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    60ca:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    60ce:	2301      	movs	r3, #1
    60d0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    60d4:	4a12      	ldr	r2, [pc, #72]	; (6120 <att_read_rsp+0x84>)
	data.att = att;
    60d6:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    60d8:	ab01      	add	r3, sp, #4
    60da:	4629      	mov	r1, r5
    60dc:	4628      	mov	r0, r5
    60de:	f000 fe83 	bl	6de8 <bt_gatt_foreach_attr>
	if (data.err) {
    60e2:	f89d 7014 	ldrb.w	r7, [sp, #20]
    60e6:	b17f      	cbz	r7, 6108 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    60e8:	9803      	ldr	r0, [sp, #12]
    60ea:	f00c fad5 	bl	12698 <net_buf_unref>
	if (!req) {
    60ee:	b13c      	cbz	r4, 6100 <att_read_rsp+0x64>
    60f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    60f4:	462a      	mov	r2, r5
    60f6:	4621      	mov	r1, r4
    60f8:	4630      	mov	r0, r6
    60fa:	f7ff fe4f 	bl	5d9c <send_err_rsp.part.10>
		return 0;
    60fe:	2400      	movs	r4, #0
}
    6100:	4620      	mov	r0, r4
    6102:	b006      	add	sp, #24
    6104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6108:	4b06      	ldr	r3, [pc, #24]	; (6124 <att_read_rsp+0x88>)
    610a:	9a03      	ldr	r2, [sp, #12]
    610c:	2104      	movs	r1, #4
    610e:	4630      	mov	r0, r6
    6110:	f7ff f85c 	bl	51cc <bt_l2cap_send_cb>
    6114:	e7f3      	b.n	60fe <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    6116:	2401      	movs	r4, #1
    6118:	e7f2      	b.n	6100 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    611a:	240e      	movs	r4, #14
    611c:	e7f0      	b.n	6100 <att_read_rsp+0x64>
    611e:	bf00      	nop
    6120:	00005c45 	.word	0x00005c45
    6124:	000058e5 	.word	0x000058e5

00006128 <att_read_blob_req>:
{
    6128:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    612a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    612c:	8813      	ldrh	r3, [r2, #0]
    612e:	8852      	ldrh	r2, [r2, #2]
    6130:	9200      	str	r2, [sp, #0]
    6132:	210c      	movs	r1, #12
    6134:	220d      	movs	r2, #13
    6136:	f7ff ffb1 	bl	609c <att_read_rsp>
}
    613a:	b003      	add	sp, #12
    613c:	f85d fb04 	ldr.w	pc, [sp], #4

00006140 <att_read_req>:
{
    6140:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    6142:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    6144:	2200      	movs	r2, #0
    6146:	881b      	ldrh	r3, [r3, #0]
    6148:	9200      	str	r2, [sp, #0]
    614a:	210a      	movs	r1, #10
    614c:	220b      	movs	r2, #11
    614e:	f7ff ffa5 	bl	609c <att_read_rsp>
}
    6152:	b003      	add	sp, #12
    6154:	f85d fb04 	ldr.w	pc, [sp], #4

00006158 <att_read_type_req>:
{
    6158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    615c:	898b      	ldrh	r3, [r1, #12]
    615e:	2b06      	cmp	r3, #6
{
    6160:	b08d      	sub	sp, #52	; 0x34
    6162:	4607      	mov	r7, r0
    6164:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6166:	d001      	beq.n	616c <att_read_type_req+0x14>
    6168:	2b14      	cmp	r3, #20
    616a:	d152      	bne.n	6212 <att_read_type_req+0xba>
	req = (void *)buf->data;
    616c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    616e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6170:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6174:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6178:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    617a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    617c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    6180:	f00c faea 	bl	12758 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6184:	4631      	mov	r1, r6
    6186:	4640      	mov	r0, r8
    6188:	f7ff fb5e 	bl	5848 <uuid_create>
    618c:	b198      	cbz	r0, 61b6 <att_read_type_req+0x5e>
	if (!start || !end) {
    618e:	2d00      	cmp	r5, #0
    6190:	d042      	beq.n	6218 <att_read_type_req+0xc0>
    6192:	2c00      	cmp	r4, #0
    6194:	d03f      	beq.n	6216 <att_read_type_req+0xbe>
	if (start > end) {
    6196:	42a5      	cmp	r5, r4
    6198:	d83e      	bhi.n	6218 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    619a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    619c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    619e:	2100      	movs	r1, #0
    61a0:	eb0d 0002 	add.w	r0, sp, r2
    61a4:	f7fb fd7b 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    61a8:	2201      	movs	r2, #1
    61aa:	2109      	movs	r1, #9
    61ac:	4630      	mov	r0, r6
    61ae:	f7ff fd85 	bl	5cbc <bt_att_create_pdu>
    61b2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    61b4:	b908      	cbnz	r0, 61ba <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    61b6:	240e      	movs	r4, #14
    61b8:	e027      	b.n	620a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    61ba:	2101      	movs	r1, #1
    61bc:	3008      	adds	r0, #8
	data.att = att;
    61be:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    61c0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    61c4:	f00c fa9a 	bl	126fc <net_buf_simple_add>
	data.rsp->len = 0;
    61c8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    61ca:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    61cc:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    61ce:	4621      	mov	r1, r4
	data.rsp->len = 0;
    61d0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    61d2:	4a14      	ldr	r2, [pc, #80]	; (6224 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    61d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    61d8:	4628      	mov	r0, r5
    61da:	ab06      	add	r3, sp, #24
    61dc:	f000 fe04 	bl	6de8 <bt_gatt_foreach_attr>
	if (data.err) {
    61e0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    61e4:	b15c      	cbz	r4, 61fe <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    61e6:	9808      	ldr	r0, [sp, #32]
    61e8:	f00c fa56 	bl	12698 <net_buf_unref>
    61ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    61f0:	462a      	mov	r2, r5
    61f2:	2108      	movs	r1, #8
    61f4:	4630      	mov	r0, r6
    61f6:	f7ff fdd1 	bl	5d9c <send_err_rsp.part.10>
		return 0;
    61fa:	2400      	movs	r4, #0
    61fc:	e005      	b.n	620a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    61fe:	4b0a      	ldr	r3, [pc, #40]	; (6228 <att_read_type_req+0xd0>)
    6200:	9a08      	ldr	r2, [sp, #32]
    6202:	2104      	movs	r1, #4
    6204:	4630      	mov	r0, r6
    6206:	f7fe ffe1 	bl	51cc <bt_l2cap_send_cb>
}
    620a:	4620      	mov	r0, r4
    620c:	b00d      	add	sp, #52	; 0x34
    620e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6212:	2404      	movs	r4, #4
    6214:	e7f9      	b.n	620a <att_read_type_req+0xb2>
			*err = 0;
    6216:	4625      	mov	r5, r4
    6218:	2301      	movs	r3, #1
    621a:	462a      	mov	r2, r5
    621c:	2108      	movs	r1, #8
    621e:	4648      	mov	r0, r9
    6220:	e7e9      	b.n	61f6 <att_read_type_req+0x9e>
    6222:	bf00      	nop
    6224:	0000578d 	.word	0x0000578d
    6228:	000058e5 	.word	0x000058e5

0000622c <att_find_type_req>:
{
    622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6230:	f8d0 9000 	ldr.w	r9, [r0]
{
    6234:	4680      	mov	r8, r0
	req = (void *)buf->data;
    6236:	4608      	mov	r0, r1
{
    6238:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    623a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    623e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    6240:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    6242:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6244:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    6246:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    6248:	f00c fa86 	bl	12758 <net_buf_simple_pull>
    624c:	4682      	mov	sl, r0
	if (!start || !end) {
    624e:	2d00      	cmp	r5, #0
    6250:	d057      	beq.n	6302 <att_find_type_req+0xd6>
    6252:	2400      	movs	r4, #0
    6254:	2f00      	cmp	r7, #0
    6256:	d053      	beq.n	6300 <att_find_type_req+0xd4>
	if (start > end) {
    6258:	42bd      	cmp	r5, r7
    625a:	d852      	bhi.n	6302 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    625c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6260:	a902      	add	r1, sp, #8
    6262:	a801      	add	r0, sp, #4
    6264:	f8ad 6006 	strh.w	r6, [sp, #6]
    6268:	f88d 4004 	strb.w	r4, [sp, #4]
    626c:	f88d 4008 	strb.w	r4, [sp, #8]
    6270:	f8ad 300a 	strh.w	r3, [sp, #10]
    6274:	f7fb ffc6 	bl	2204 <bt_uuid_cmp>
    6278:	4606      	mov	r6, r0
    627a:	b148      	cbz	r0, 6290 <att_find_type_req+0x64>
    627c:	230a      	movs	r3, #10
    627e:	462a      	mov	r2, r5
    6280:	2106      	movs	r1, #6
    6282:	4648      	mov	r0, r9
    6284:	f7ff fd8a 	bl	5d9c <send_err_rsp.part.10>
}
    6288:	4620      	mov	r0, r4
    628a:	b009      	add	sp, #36	; 0x24
    628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    6290:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    6294:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    6298:	2214      	movs	r2, #20
    629a:	4631      	mov	r1, r6
    629c:	a803      	add	r0, sp, #12
    629e:	f7fb fcfe 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    62a2:	4632      	mov	r2, r6
    62a4:	2107      	movs	r1, #7
    62a6:	4648      	mov	r0, r9
    62a8:	f7ff fd08 	bl	5cbc <bt_att_create_pdu>
    62ac:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    62ae:	b328      	cbz	r0, 62fc <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    62b0:	230a      	movs	r3, #10
    62b2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    62b6:	4a14      	ldr	r2, [pc, #80]	; (6308 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    62b8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    62bc:	ab03      	add	r3, sp, #12
    62be:	4639      	mov	r1, r7
    62c0:	4628      	mov	r0, r5
	data.att = att;
    62c2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    62c6:	9605      	str	r6, [sp, #20]
	data.value = value;
    62c8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    62cc:	f000 fd8c 	bl	6de8 <bt_gatt_foreach_attr>
	if (data.err) {
    62d0:	f89d 401d 	ldrb.w	r4, [sp, #29]
    62d4:	b15c      	cbz	r4, 62ee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    62d6:	9804      	ldr	r0, [sp, #16]
    62d8:	f00c f9de 	bl	12698 <net_buf_unref>
    62dc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    62e0:	462a      	mov	r2, r5
    62e2:	2106      	movs	r1, #6
    62e4:	4648      	mov	r0, r9
    62e6:	f7ff fd59 	bl	5d9c <send_err_rsp.part.10>
		return 0;
    62ea:	2400      	movs	r4, #0
    62ec:	e7cc      	b.n	6288 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    62ee:	4b07      	ldr	r3, [pc, #28]	; (630c <att_find_type_req+0xe0>)
    62f0:	9a04      	ldr	r2, [sp, #16]
    62f2:	2104      	movs	r1, #4
    62f4:	4648      	mov	r0, r9
    62f6:	f7fe ff69 	bl	51cc <bt_l2cap_send_cb>
    62fa:	e7c5      	b.n	6288 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    62fc:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    62fe:	e7c3      	b.n	6288 <att_find_type_req+0x5c>
			*err = 0;
    6300:	463d      	mov	r5, r7
    6302:	2301      	movs	r3, #1
    6304:	e7ec      	b.n	62e0 <att_find_type_req+0xb4>
    6306:	bf00      	nop
    6308:	00005679 	.word	0x00005679
    630c:	000058e5 	.word	0x000058e5

00006310 <att_find_info_req>:
{
    6310:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6312:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6314:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6316:	881d      	ldrh	r5, [r3, #0]
{
    6318:	b085      	sub	sp, #20
    631a:	4607      	mov	r7, r0
	if (!start || !end) {
    631c:	b375      	cbz	r5, 637c <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    631e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6320:	b35c      	cbz	r4, 637a <att_find_info_req+0x6a>
	if (start > end) {
    6322:	42a5      	cmp	r5, r4
    6324:	d82a      	bhi.n	637c <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6326:	2210      	movs	r2, #16
    6328:	2100      	movs	r1, #0
    632a:	4668      	mov	r0, sp
    632c:	f7fb fcb7 	bl	1c9e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6330:	2200      	movs	r2, #0
    6332:	2105      	movs	r1, #5
    6334:	4630      	mov	r0, r6
    6336:	f7ff fcc1 	bl	5cbc <bt_att_create_pdu>
    633a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    633c:	b910      	cbnz	r0, 6344 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    633e:	200e      	movs	r0, #14
}
    6340:	b005      	add	sp, #20
    6342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6344:	4621      	mov	r1, r4
    6346:	466b      	mov	r3, sp
    6348:	4a0d      	ldr	r2, [pc, #52]	; (6380 <att_find_info_req+0x70>)
	data.att = att;
    634a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    634c:	4628      	mov	r0, r5
    634e:	f000 fd4b 	bl	6de8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6352:	9c02      	ldr	r4, [sp, #8]
    6354:	b94c      	cbnz	r4, 636a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    6356:	9801      	ldr	r0, [sp, #4]
    6358:	f00c f99e 	bl	12698 <net_buf_unref>
    635c:	230a      	movs	r3, #10
    635e:	462a      	mov	r2, r5
    6360:	2104      	movs	r1, #4
    6362:	4630      	mov	r0, r6
    6364:	f7ff fd1a 	bl	5d9c <send_err_rsp.part.10>
    6368:	e005      	b.n	6376 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    636a:	4b06      	ldr	r3, [pc, #24]	; (6384 <att_find_info_req+0x74>)
    636c:	9a01      	ldr	r2, [sp, #4]
    636e:	2104      	movs	r1, #4
    6370:	4630      	mov	r0, r6
    6372:	f7fe ff2b 	bl	51cc <bt_l2cap_send_cb>
		return 0;
    6376:	2000      	movs	r0, #0
    6378:	e7e2      	b.n	6340 <att_find_info_req+0x30>
			*err = 0;
    637a:	4625      	mov	r5, r4
    637c:	2301      	movs	r3, #1
    637e:	e7ee      	b.n	635e <att_find_info_req+0x4e>
    6380:	000055df 	.word	0x000055df
    6384:	000058e5 	.word	0x000058e5

00006388 <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    638c:	b086      	sub	sp, #24
    638e:	4690      	mov	r8, r2
    6390:	4605      	mov	r5, r0
    6392:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6394:	2218      	movs	r2, #24
    6396:	2100      	movs	r1, #0
    6398:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    639a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    639c:	f7fb fc7f 	bl	1c9e <memset>
	if (rsp) {
    63a0:	f1b8 0f00 	cmp.w	r8, #0
    63a4:	d11f      	bne.n	63e6 <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    63a6:	2300      	movs	r3, #0
    63a8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    63ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    63ae:	9303      	str	r3, [sp, #12]
	data.len = len;
    63b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    63b4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    63b8:	2301      	movs	r3, #1
    63ba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63be:	4a1b      	ldr	r2, [pc, #108]	; (642c <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    63c0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63c2:	466b      	mov	r3, sp
    63c4:	4639      	mov	r1, r7
    63c6:	4638      	mov	r0, r7
	data.op = op;
    63c8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    63cc:	f000 fd0c 	bl	6de8 <bt_gatt_foreach_attr>
	if (data.err) {
    63d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    63d4:	b98c      	cbnz	r4, 63fa <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    63d6:	9a01      	ldr	r2, [sp, #4]
    63d8:	b1b2      	cbz	r2, 6408 <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    63da:	4b15      	ldr	r3, [pc, #84]	; (6430 <att_write_rsp.part.11.constprop.17+0xa8>)
    63dc:	2104      	movs	r1, #4
    63de:	4628      	mov	r0, r5
    63e0:	f7fe fef4 	bl	51cc <bt_l2cap_send_cb>
    63e4:	e011      	b.n	640a <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    63e6:	2200      	movs	r2, #0
    63e8:	4641      	mov	r1, r8
    63ea:	4628      	mov	r0, r5
    63ec:	f7ff fc66 	bl	5cbc <bt_att_create_pdu>
    63f0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    63f2:	2800      	cmp	r0, #0
    63f4:	d1d7      	bne.n	63a6 <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    63f6:	240e      	movs	r4, #14
    63f8:	e007      	b.n	640a <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    63fa:	f1b8 0f00 	cmp.w	r8, #0
    63fe:	d00f      	beq.n	6420 <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    6400:	9801      	ldr	r0, [sp, #4]
    6402:	f00c f949 	bl	12698 <net_buf_unref>
	if (!req) {
    6406:	b926      	cbnz	r6, 6412 <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6408:	2400      	movs	r4, #0
}
    640a:	4620      	mov	r0, r4
    640c:	b006      	add	sp, #24
    640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6412:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6416:	463a      	mov	r2, r7
    6418:	4631      	mov	r1, r6
    641a:	4628      	mov	r0, r5
    641c:	f7ff fcbe 	bl	5d9c <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6420:	2e18      	cmp	r6, #24
    6422:	d1f1      	bne.n	6408 <att_write_rsp.part.11.constprop.17+0x80>
    6424:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6428:	e7ef      	b.n	640a <att_write_rsp.part.11.constprop.17+0x82>
    642a:	bf00      	nop
    642c:	00005995 	.word	0x00005995
    6430:	000058e5 	.word	0x000058e5

00006434 <att_signed_write_cmd>:
{
    6434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6438:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    643a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    643c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6440:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6442:	4620      	mov	r0, r4
    6444:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6446:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    644a:	f00c f97d 	bl	12748 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    644e:	4629      	mov	r1, r5
    6450:	4630      	mov	r0, r6
    6452:	f000 feec 	bl	722e <bt_smp_sign_verify>
	if (err) {
    6456:	4607      	mov	r7, r0
    6458:	b140      	cbz	r0, 646c <att_signed_write_cmd+0x38>
		BT_ERR("Error verifying data");
    645a:	2003      	movs	r0, #3
    645c:	4a10      	ldr	r2, [pc, #64]	; (64a0 <att_signed_write_cmd+0x6c>)
    645e:	4911      	ldr	r1, [pc, #68]	; (64a4 <att_signed_write_cmd+0x70>)
    6460:	f7fb fdb8 	bl	1fd4 <bt_log>
    6464:	2000      	movs	r0, #0
}
    6466:	b002      	add	sp, #8
    6468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    646c:	2101      	movs	r1, #1
    646e:	4620      	mov	r0, r4
    6470:	f00c f972 	bl	12758 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6474:	2102      	movs	r1, #2
    6476:	4620      	mov	r0, r4
    6478:	f00c f96e 	bl	12758 <net_buf_simple_pull>
	if (!handle) {
    647c:	f1b8 0f00 	cmp.w	r8, #0
    6480:	d00c      	beq.n	649c <att_signed_write_cmd+0x68>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6482:	7b2b      	ldrb	r3, [r5, #12]
    6484:	3b0c      	subs	r3, #12
    6486:	b2db      	uxtb	r3, r3
    6488:	9301      	str	r3, [sp, #4]
    648a:	68ab      	ldr	r3, [r5, #8]
    648c:	9300      	str	r3, [sp, #0]
    648e:	463a      	mov	r2, r7
    6490:	4643      	mov	r3, r8
    6492:	4639      	mov	r1, r7
    6494:	4630      	mov	r0, r6
    6496:	f7ff ff77 	bl	6388 <att_write_rsp.part.11.constprop.17>
    649a:	e7e4      	b.n	6466 <att_signed_write_cmd+0x32>
		return BT_ATT_ERR_INVALID_HANDLE;
    649c:	2001      	movs	r0, #1
    649e:	e7e2      	b.n	6466 <att_signed_write_cmd+0x32>
    64a0:	00015dc0 	.word	0x00015dc0
    64a4:	00015eab 	.word	0x00015eab

000064a8 <att_write_cmd>:
{
    64a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    64aa:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    64ac:	f101 0008 	add.w	r0, r1, #8
{
    64b0:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    64b2:	f00c f961 	bl	12778 <net_buf_simple_pull_le16>
	if (!handle) {
    64b6:	4603      	mov	r3, r0
    64b8:	b150      	cbz	r0, 64d0 <att_write_cmd+0x28>
    64ba:	7b22      	ldrb	r2, [r4, #12]
    64bc:	9201      	str	r2, [sp, #4]
    64be:	68a2      	ldr	r2, [r4, #8]
    64c0:	9200      	str	r2, [sp, #0]
    64c2:	2200      	movs	r2, #0
    64c4:	4611      	mov	r1, r2
    64c6:	4628      	mov	r0, r5
    64c8:	f7ff ff5e 	bl	6388 <att_write_rsp.part.11.constprop.17>
}
    64cc:	b003      	add	sp, #12
    64ce:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    64d0:	2001      	movs	r0, #1
    64d2:	e7fb      	b.n	64cc <att_write_cmd+0x24>

000064d4 <att_write_req>:
{
    64d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    64d6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    64d8:	f101 0008 	add.w	r0, r1, #8
{
    64dc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    64de:	f00c f94b 	bl	12778 <net_buf_simple_pull_le16>
	if (!handle) {
    64e2:	4603      	mov	r3, r0
    64e4:	b150      	cbz	r0, 64fc <att_write_req+0x28>
    64e6:	7b22      	ldrb	r2, [r4, #12]
    64e8:	9201      	str	r2, [sp, #4]
    64ea:	68a2      	ldr	r2, [r4, #8]
    64ec:	9200      	str	r2, [sp, #0]
    64ee:	2112      	movs	r1, #18
    64f0:	2213      	movs	r2, #19
    64f2:	4628      	mov	r0, r5
    64f4:	f7ff ff48 	bl	6388 <att_write_rsp.part.11.constprop.17>
}
    64f8:	b003      	add	sp, #12
    64fa:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    64fc:	2001      	movs	r0, #1
    64fe:	e7fb      	b.n	64f8 <att_write_req+0x24>

00006500 <bt_att_init>:

void bt_att_init(void)
{
    6500:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6502:	4803      	ldr	r0, [pc, #12]	; (6510 <bt_att_init+0x10>)
    6504:	f7fe fdb0 	bl	5068 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    650c:	f000 bc56 	b.w	6dbc <bt_gatt_init>
    6510:	20003be0 	.word	0x20003be0

00006514 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    6514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6516:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    6518:	4607      	mov	r7, r0
    651a:	2800      	cmp	r0, #0
    651c:	d042      	beq.n	65a4 <bt_att_send+0x90>
    651e:	2900      	cmp	r1, #0
    6520:	d040      	beq.n	65a4 <bt_att_send+0x90>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6522:	f7ff fa0d 	bl	5940 <att_chan_get>
	if (!att) {
    6526:	4604      	mov	r4, r0
    6528:	b190      	cbz	r0, 6550 <bt_att_send+0x3c>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    652a:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    652e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6532:	4630      	mov	r0, r6
    6534:	f00d f96f 	bl	13816 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    6538:	4620      	mov	r0, r4
    653a:	f7ff f9b7 	bl	58ac <att_is_connected>
    653e:	b950      	cbnz	r0, 6556 <bt_att_send+0x42>
		BT_WARN("Disconnected");
    6540:	2004      	movs	r0, #4
    6542:	4a1a      	ldr	r2, [pc, #104]	; (65ac <bt_att_send+0x98>)
    6544:	491a      	ldr	r1, [pc, #104]	; (65b0 <bt_att_send+0x9c>)
    6546:	f7fb fd45 	bl	1fd4 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    654a:	4630      	mov	r0, r6
    654c:	f00d f93b 	bl	137c6 <_impl_k_sem_give>
		return -ENOTCONN;
    6550:	f06f 0438 	mvn.w	r4, #56	; 0x38
    6554:	e011      	b.n	657a <bt_att_send+0x66>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    6556:	68ab      	ldr	r3, [r5, #8]
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	2bd2      	cmp	r3, #210	; 0xd2
    655c:	d10f      	bne.n	657e <bt_att_send+0x6a>
		int err;

		err = bt_smp_sign(conn, buf);
    655e:	4629      	mov	r1, r5
    6560:	4638      	mov	r0, r7
    6562:	f000 fe67 	bl	7234 <bt_smp_sign>
		if (err) {
    6566:	4604      	mov	r4, r0
    6568:	b148      	cbz	r0, 657e <bt_att_send+0x6a>
			BT_ERR("Error signing data");
    656a:	2003      	movs	r0, #3
    656c:	4a0f      	ldr	r2, [pc, #60]	; (65ac <bt_att_send+0x98>)
    656e:	4911      	ldr	r1, [pc, #68]	; (65b4 <bt_att_send+0xa0>)
    6570:	f7fb fd30 	bl	1fd4 <bt_log>
    6574:	4630      	mov	r0, r6
    6576:	f00d f926 	bl	137c6 <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    657a:	4620      	mov	r0, r4
    657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    657e:	68ab      	ldr	r3, [r5, #8]
    6580:	7818      	ldrb	r0, [r3, #0]
    6582:	f7fe ff67 	bl	5454 <att_op_get_type>
    6586:	3801      	subs	r0, #1
    6588:	b2c0      	uxtb	r0, r0
    658a:	2804      	cmp	r0, #4
    658c:	bf96      	itet	ls
    658e:	4b0a      	ldrls	r3, [pc, #40]	; (65b8 <bt_att_send+0xa4>)
    6590:	4b0a      	ldrhi	r3, [pc, #40]	; (65bc <bt_att_send+0xa8>)
    6592:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    6596:	462a      	mov	r2, r5
    6598:	2104      	movs	r1, #4
    659a:	4638      	mov	r0, r7
    659c:	f7fe fe16 	bl	51cc <bt_l2cap_send_cb>
	return 0;
    65a0:	2400      	movs	r4, #0
    65a2:	e7ea      	b.n	657a <bt_att_send+0x66>
		return -EINVAL;
    65a4:	f06f 0415 	mvn.w	r4, #21
    65a8:	e7e7      	b.n	657a <bt_att_send+0x66>
    65aa:	bf00      	nop
    65ac:	00015e1a 	.word	0x00015e1a
    65b0:	00015e9a 	.word	0x00015e9a
    65b4:	00015fc7 	.word	0x00015fc7
    65b8:	00015d90 	.word	0x00015d90
    65bc:	000058d3 	.word	0x000058d3

000065c0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    65c0:	b510      	push	{r4, lr}
    65c2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    65c4:	b1d8      	cbz	r0, 65fe <bt_att_req_send+0x3e>
    65c6:	b1d1      	cbz	r1, 65fe <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    65c8:	f7ff f9ba 	bl	5940 <att_chan_get>
	if (!att) {
    65cc:	4603      	mov	r3, r0
    65ce:	b1c8      	cbz	r0, 6604 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    65d0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    65d4:	b172      	cbz	r2, 65f4 <bt_att_req_send+0x34>
	parent->next = child;
    65d6:	2000      	movs	r0, #0
    65d8:	6020      	str	r0, [r4, #0]
    65da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    65de:	b92a      	cbnz	r2, 65ec <bt_att_req_send+0x2c>
	list->tail = node;
    65e0:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    65e4:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    65e8:	4610      	mov	r0, r2
    65ea:	bd10      	pop	{r4, pc}
	parent->next = child;
    65ec:	6014      	str	r4, [r2, #0]
	list->tail = node;
    65ee:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    65f2:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    65f4:	4621      	mov	r1, r4
}
    65f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    65fa:	f7ff b9f7 	b.w	59ec <att_send_req>
		return -EINVAL;
    65fe:	f06f 0015 	mvn.w	r0, #21
    6602:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6604:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6608:	bd10      	pop	{r4, pc}

0000660a <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    660a:	6813      	ldr	r3, [r2, #0]
    660c:	b939      	cbnz	r1, 661e <sys_slist_remove+0x14>
    660e:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    6610:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    6612:	428a      	cmp	r2, r1
    6614:	d100      	bne.n	6618 <sys_slist_remove+0xe>
	list->tail = node;
    6616:	6043      	str	r3, [r0, #4]
	parent->next = child;
    6618:	2300      	movs	r3, #0
    661a:	6013      	str	r3, [r2, #0]
    661c:	4770      	bx	lr
    661e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    6620:	6843      	ldr	r3, [r0, #4]
    6622:	429a      	cmp	r2, r3
	list->tail = node;
    6624:	bf08      	it	eq
    6626:	6041      	streq	r1, [r0, #4]
    6628:	e7f6      	b.n	6618 <sys_slist_remove+0xe>

0000662a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    662a:	4770      	bx	lr

0000662c <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    662c:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    662e:	2000      	movs	r0, #0
    6630:	4770      	bx	lr

00006632 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6632:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6634:	2300      	movs	r3, #0
    6636:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6638:	461a      	mov	r2, r3
    663a:	42aa      	cmp	r2, r5
    663c:	d107      	bne.n	664e <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    663e:	890a      	ldrh	r2, [r1, #8]
    6640:	429a      	cmp	r2, r3
    6642:	d00d      	beq.n	6660 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6644:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6646:	68ca      	ldr	r2, [r1, #12]
	}
}
    6648:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    664a:	4619      	mov	r1, r3
    664c:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    664e:	680c      	ldr	r4, [r1, #0]
    6650:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6654:	3201      	adds	r2, #1
    6656:	8924      	ldrh	r4, [r4, #8]
    6658:	42a3      	cmp	r3, r4
    665a:	bf38      	it	cc
    665c:	4623      	movcc	r3, r4
    665e:	e7ec      	b.n	663a <gatt_ccc_changed+0x8>
}
    6660:	bc30      	pop	{r4, r5}
    6662:	4770      	bx	lr

00006664 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6664:	b410      	push	{r4}
    6666:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6668:	699c      	ldr	r4, [r3, #24]
    666a:	460a      	mov	r2, r1
    666c:	6959      	ldr	r1, [r3, #20]
    666e:	4623      	mov	r3, r4
}
    6670:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6672:	4718      	bx	r3

00006674 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    6674:	b570      	push	{r4, r5, r6, lr}
    6676:	4614      	mov	r4, r2
    6678:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    667a:	3228      	adds	r2, #40	; 0x28
    667c:	4805      	ldr	r0, [pc, #20]	; (6694 <gatt_subscription_remove+0x20>)
    667e:	f7ff ffc4 	bl	660a <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    6682:	69e5      	ldr	r5, [r4, #28]
    6684:	2300      	movs	r3, #0
    6686:	4621      	mov	r1, r4
    6688:	4630      	mov	r0, r6
    668a:	46ac      	mov	ip, r5
    668c:	461a      	mov	r2, r3
}
    668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    6692:	4760      	bx	ip
    6694:	2000060c 	.word	0x2000060c

00006698 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    6698:	b430      	push	{r4, r5}
    669a:	9c02      	ldr	r4, [sp, #8]
    669c:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    669e:	b181      	cbz	r1, 66c2 <gatt_write_ccc_rsp+0x2a>
    66a0:	4b0d      	ldr	r3, [pc, #52]	; (66d8 <gatt_write_ccc_rsp+0x40>)
    66a2:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    66a4:	b1ab      	cbz	r3, 66d2 <gatt_write_ccc_rsp+0x3a>
	return node->next;
    66a6:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    66a8:	f104 0228 	add.w	r2, r4, #40	; 0x28
    66ac:	4293      	cmp	r3, r2
    66ae:	d104      	bne.n	66ba <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    66b0:	4622      	mov	r2, r4
    66b2:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    66b4:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    66b6:	f7ff bfdd 	b.w	6674 <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    66ba:	b151      	cbz	r1, 66d2 <gatt_write_ccc_rsp+0x3a>
    66bc:	460b      	mov	r3, r1
    66be:	6809      	ldr	r1, [r1, #0]
    66c0:	e7f4      	b.n	66ac <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    66c2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    66c4:	b92b      	cbnz	r3, 66d2 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    66c6:	69e5      	ldr	r5, [r4, #28]
    66c8:	4621      	mov	r1, r4
    66ca:	46ac      	mov	ip, r5
    66cc:	461a      	mov	r2, r3
}
    66ce:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    66d0:	4760      	bx	ip
}
    66d2:	bc30      	pop	{r4, r5}
    66d4:	4770      	bx	lr
    66d6:	bf00      	nop
    66d8:	2000060c 	.word	0x2000060c

000066dc <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    66dc:	491c      	ldr	r1, [pc, #112]	; (6750 <gatt_register+0x74>)
    66de:	680a      	ldr	r2, [r1, #0]
{
    66e0:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    66e2:	e890 0030 	ldmia.w	r0, {r4, r5}
	if (sys_slist_is_empty(&db)) {
    66e6:	b152      	cbz	r2, 66fe <gatt_register+0x22>
    66e8:	684b      	ldr	r3, [r1, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    66ea:	b373      	cbz	r3, 674a <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    66ec:	f853 2c04 	ldr.w	r2, [r3, #-4]
    66f0:	f853 3c08 	ldr.w	r3, [r3, #-8]
    66f4:	2614      	movs	r6, #20
    66f6:	fb06 3302 	mla	r3, r6, r2, r3
    66fa:	f833 2c04 	ldrh.w	r2, [r3, #-4]
    66fe:	b2ad      	uxth	r5, r5
    6700:	2314      	movs	r3, #20
    6702:	fb03 4505 	mla	r5, r3, r5, r4
	for (; attrs && count; attrs++, count--) {
    6706:	b10c      	cbz	r4, 670c <gatt_register+0x30>
    6708:	42ac      	cmp	r4, r5
    670a:	d108      	bne.n	671e <gatt_register+0x42>
	parent->next = child;
    670c:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    670e:	f100 0208 	add.w	r2, r0, #8
    6712:	6083      	str	r3, [r0, #8]
    6714:	6848      	ldr	r0, [r1, #4]
Z_GENLIST_APPEND(slist, snode);
    6716:	b9a0      	cbnz	r0, 6742 <gatt_register+0x66>
	list->tail = node;
    6718:	604a      	str	r2, [r1, #4]
	list->head = node;
    671a:	600a      	str	r2, [r1, #0]
    671c:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    671e:	8a23      	ldrh	r3, [r4, #16]
    6720:	b92b      	cbnz	r3, 672e <gatt_register+0x52>
			attrs->handle = ++handle;
    6722:	3201      	adds	r2, #1
    6724:	b293      	uxth	r3, r2
    6726:	8223      	strh	r3, [r4, #16]
	for (; attrs && count; attrs++, count--) {
    6728:	3414      	adds	r4, #20
    672a:	461a      	mov	r2, r3
    672c:	e7eb      	b.n	6706 <gatt_register+0x2a>
		} else if (attrs->handle > handle) {
    672e:	429a      	cmp	r2, r3
    6730:	d3fa      	bcc.n	6728 <gatt_register+0x4c>
			BT_ERR("Unable to register handle 0x%04x",
    6732:	4a08      	ldr	r2, [pc, #32]	; (6754 <gatt_register+0x78>)
    6734:	4908      	ldr	r1, [pc, #32]	; (6758 <gatt_register+0x7c>)
    6736:	2003      	movs	r0, #3
    6738:	f7fb fc4c 	bl	1fd4 <bt_log>
			return -EINVAL;
    673c:	f06f 0015 	mvn.w	r0, #21
    6740:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6742:	6002      	str	r2, [r0, #0]
	list->tail = node;
    6744:	604a      	str	r2, [r1, #4]
	return 0;
    6746:	4618      	mov	r0, r3
    6748:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    674a:	681b      	ldr	r3, [r3, #0]
    674c:	deff      	udf	#255	; 0xff
    674e:	bf00      	nop
    6750:	200005a0 	.word	0x200005a0
    6754:	000160b8 	.word	0x000160b8
    6758:	000161b8 	.word	0x000161b8

0000675c <gatt_notify>:
{
    675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6760:	468a      	mov	sl, r1
    6762:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6764:	211b      	movs	r1, #27
    6766:	1c9a      	adds	r2, r3, #2
{
    6768:	4680      	mov	r8, r0
    676a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    676c:	f7ff faa6 	bl	5cbc <bt_att_create_pdu>
	if (!buf) {
    6770:	4604      	mov	r4, r0
    6772:	b940      	cbnz	r0, 6786 <gatt_notify+0x2a>
		BT_WARN("No buffer available to send notification");
    6774:	4a11      	ldr	r2, [pc, #68]	; (67bc <gatt_notify+0x60>)
    6776:	4912      	ldr	r1, [pc, #72]	; (67c0 <gatt_notify+0x64>)
    6778:	2004      	movs	r0, #4
    677a:	f7fb fc2b 	bl	1fd4 <bt_log>
    677e:	f06f 000b 	mvn.w	r0, #11
    6782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6786:	f100 0708 	add.w	r7, r0, #8
    678a:	2102      	movs	r1, #2
    678c:	4638      	mov	r0, r7
    678e:	f00b ffb5 	bl	126fc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6792:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6794:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6796:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    679a:	4638      	mov	r0, r7
    679c:	f00b ffae 	bl	126fc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    67a0:	4632      	mov	r2, r6
    67a2:	4649      	mov	r1, r9
    67a4:	4628      	mov	r0, r5
    67a6:	f7fb fa4e 	bl	1c46 <memcpy>
    67aa:	4640      	mov	r0, r8
    67ac:	2300      	movs	r3, #0
    67ae:	4622      	mov	r2, r4
    67b0:	2104      	movs	r1, #4
    67b2:	f7fe fd0b 	bl	51cc <bt_l2cap_send_cb>
	return 0;
    67b6:	2000      	movs	r0, #0
}
    67b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67bc:	000160f4 	.word	0x000160f4
    67c0:	0001618b 	.word	0x0001618b

000067c4 <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    67c4:	b538      	push	{r3, r4, r5, lr}
    67c6:	460d      	mov	r5, r1
	if (params) {
    67c8:	b19b      	cbz	r3, 67f2 <gatt_send.constprop.29+0x2e>
		req->func = func;
    67ca:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    67cc:	2200      	movs	r2, #0
		req->buf = buf;
    67ce:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    67d0:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    67d2:	4619      	mov	r1, r3
    67d4:	f7ff fef4 	bl	65c0 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    67d8:	4604      	mov	r4, r0
	if (err) {
    67da:	b140      	cbz	r0, 67ee <gatt_send.constprop.29+0x2a>
		BT_ERR("Error sending ATT PDU: %d", err);
    67dc:	4603      	mov	r3, r0
    67de:	4a06      	ldr	r2, [pc, #24]	; (67f8 <gatt_send.constprop.29+0x34>)
    67e0:	4906      	ldr	r1, [pc, #24]	; (67fc <gatt_send.constprop.29+0x38>)
    67e2:	2003      	movs	r0, #3
    67e4:	f7fb fbf6 	bl	1fd4 <bt_log>
		net_buf_unref(buf);
    67e8:	4628      	mov	r0, r5
    67ea:	f00b ff55 	bl	12698 <net_buf_unref>
}
    67ee:	4620      	mov	r0, r4
    67f0:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    67f2:	f7ff fe8f 	bl	6514 <bt_att_send>
    67f6:	e7ef      	b.n	67d8 <gatt_send.constprop.29+0x14>
    67f8:	00016100 	.word	0x00016100
    67fc:	000161dd 	.word	0x000161dd

00006800 <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6804:	4689      	mov	r9, r1
    6806:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6808:	2112      	movs	r1, #18
    680a:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    680c:	4606      	mov	r6, r0
    680e:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    6810:	f7ff fa54 	bl	5cbc <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    6814:	4604      	mov	r4, r0
    6816:	b198      	cbz	r0, 6840 <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    6818:	f100 0508 	add.w	r5, r0, #8
    681c:	2102      	movs	r1, #2
    681e:	4628      	mov	r0, r5
    6820:	f00b ff6c 	bl	126fc <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    6824:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    6826:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    682a:	4628      	mov	r0, r5
    682c:	f00b ff7d 	bl	1272a <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    6830:	463b      	mov	r3, r7
    6832:	4621      	mov	r1, r4
    6834:	4630      	mov	r0, r6
    6836:	4a04      	ldr	r2, [pc, #16]	; (6848 <gatt_write_ccc.constprop.19+0x48>)
}
    6838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    683c:	f7ff bfc2 	b.w	67c4 <gatt_send.constprop.29>
}
    6840:	f06f 000b 	mvn.w	r0, #11
    6844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6848:	00006699 	.word	0x00006699

0000684c <gatt_indicate>:
{
    684c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    6850:	694b      	ldr	r3, [r1, #20]
{
    6852:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    6854:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6856:	6818      	ldr	r0, [r3, #0]
    6858:	2300      	movs	r3, #0
{
    685a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    685c:	f88d 3004 	strb.w	r3, [sp, #4]
    6860:	a901      	add	r1, sp, #4
    6862:	f642 0303 	movw	r3, #10243	; 0x2803
    6866:	f8ad 3006 	strh.w	r3, [sp, #6]
    686a:	f7fb fccb 	bl	2204 <bt_uuid_cmp>
    686e:	b930      	cbnz	r0, 687e <gatt_indicate+0x32>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    6870:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    6872:	68db      	ldr	r3, [r3, #12]
    6874:	791b      	ldrb	r3, [r3, #4]
    6876:	069b      	lsls	r3, r3, #26
    6878:	d52c      	bpl.n	68d4 <gatt_indicate+0x88>
		value_handle += 1;
    687a:	3501      	adds	r5, #1
    687c:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    687e:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6880:	211d      	movs	r1, #29
    6882:	3202      	adds	r2, #2
    6884:	4640      	mov	r0, r8
    6886:	f7ff fa19 	bl	5cbc <bt_att_create_pdu>
	if (!buf) {
    688a:	4606      	mov	r6, r0
    688c:	b948      	cbnz	r0, 68a2 <gatt_indicate+0x56>
		BT_WARN("No buffer available to send indication");
    688e:	2004      	movs	r0, #4
    6890:	4a12      	ldr	r2, [pc, #72]	; (68dc <gatt_indicate+0x90>)
    6892:	4913      	ldr	r1, [pc, #76]	; (68e0 <gatt_indicate+0x94>)
    6894:	f7fb fb9e 	bl	1fd4 <bt_log>
		return -ENOMEM;
    6898:	f06f 000b 	mvn.w	r0, #11
}
    689c:	b003      	add	sp, #12
    689e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    68a2:	f100 0908 	add.w	r9, r0, #8
    68a6:	2102      	movs	r1, #2
    68a8:	4648      	mov	r0, r9
    68aa:	f00b ff27 	bl	126fc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    68ae:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    68b0:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    68b2:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    68b6:	4648      	mov	r0, r9
    68b8:	f00b ff20 	bl	126fc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    68bc:	8c22      	ldrh	r2, [r4, #32]
    68be:	69e1      	ldr	r1, [r4, #28]
    68c0:	4638      	mov	r0, r7
    68c2:	f7fb f9c0 	bl	1c46 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    68c6:	4623      	mov	r3, r4
    68c8:	4a06      	ldr	r2, [pc, #24]	; (68e4 <gatt_indicate+0x98>)
    68ca:	4631      	mov	r1, r6
    68cc:	4640      	mov	r0, r8
    68ce:	f7ff ff79 	bl	67c4 <gatt_send.constprop.29>
    68d2:	e7e3      	b.n	689c <gatt_indicate+0x50>
			return -EINVAL;
    68d4:	f06f 0015 	mvn.w	r0, #21
    68d8:	e7e0      	b.n	689c <gatt_indicate+0x50>
    68da:	bf00      	nop
    68dc:	0001610a 	.word	0x0001610a
    68e0:	00016160 	.word	0x00016160
    68e4:	00006665 	.word	0x00006665

000068e8 <sc_indicate.constprop.24>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    68e8:	b510      	push	{r4, lr}
    68ea:	4b17      	ldr	r3, [pc, #92]	; (6948 <sc_indicate.constprop.24+0x60>)
    68ec:	f3bf 8f5b 	dmb	ish
    68f0:	f103 0250 	add.w	r2, r3, #80	; 0x50
    68f4:	e852 4f00 	ldrex	r4, [r2]
    68f8:	f044 0e01 	orr.w	lr, r4, #1
    68fc:	e842 ec00 	strex	ip, lr, [r2]
    6900:	f1bc 0f00 	cmp.w	ip, #0
    6904:	d1f6      	bne.n	68f4 <sc_indicate.constprop.24+0xc>
    6906:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    690a:	07e2      	lsls	r2, r4, #31
    690c:	d402      	bmi.n	6914 <sc_indicate.constprop.24+0x2c>
		sc->start = start;
    690e:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6910:	84d9      	strh	r1, [r3, #38]	; 0x26
    6912:	e00a      	b.n	692a <sc_indicate.constprop.24+0x42>
	if (new_start >= *start && new_end <= *end) {
    6914:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6916:	4282      	cmp	r2, r0
    6918:	d803      	bhi.n	6922 <sc_indicate.constprop.24+0x3a>
    691a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    691c:	428a      	cmp	r2, r1
    691e:	d301      	bcc.n	6924 <sc_indicate.constprop.24+0x3c>
    6920:	bd10      	pop	{r4, pc}
		*start = new_start;
    6922:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6924:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6926:	428a      	cmp	r2, r1
    6928:	d3f2      	bcc.n	6910 <sc_indicate.constprop.24+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    692a:	f3bf 8f5b 	dmb	ish
    692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6930:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    6934:	079b      	lsls	r3, r3, #30
    6936:	d406      	bmi.n	6946 <sc_indicate.constprop.24+0x5e>
    6938:	220a      	movs	r2, #10
    693a:	4904      	ldr	r1, [pc, #16]	; (694c <sc_indicate.constprop.24+0x64>)
    693c:	4804      	ldr	r0, [pc, #16]	; (6950 <sc_indicate.constprop.24+0x68>)
}
    693e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6942:	f00d ba9b 	b.w	13e7c <k_delayed_work_submit_to_queue>
    6946:	bd10      	pop	{r4, pc}
    6948:	200005a8 	.word	0x200005a8
    694c:	200005d0 	.word	0x200005d0
    6950:	200019b0 	.word	0x200019b0

00006954 <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6954:	6882      	ldr	r2, [r0, #8]
    6956:	4b19      	ldr	r3, [pc, #100]	; (69bc <connected_cb+0x68>)
    6958:	429a      	cmp	r2, r3
{
    695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    695e:	4607      	mov	r7, r0
    6960:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6962:	d125      	bne.n	69b0 <connected_cb+0x5c>
	ccc = attr->user_data;
    6964:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6966:	2600      	movs	r6, #0
    6968:	686b      	ldr	r3, [r5, #4]
    696a:	429e      	cmp	r6, r3
    696c:	d220      	bcs.n	69b0 <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    696e:	6829      	ldr	r1, [r5, #0]
    6970:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6974:	4441      	add	r1, r8
    6976:	4620      	mov	r0, r4
    6978:	f7fd fe92 	bl	46a0 <bt_conn_addr_le_cmp>
    697c:	b9d8      	cbnz	r0, 69b6 <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    697e:	682b      	ldr	r3, [r5, #0]
    6980:	4443      	add	r3, r8
    6982:	891b      	ldrh	r3, [r3, #8]
    6984:	b1bb      	cbz	r3, 69b6 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6986:	4629      	mov	r1, r5
    6988:	4638      	mov	r0, r7
    698a:	f7ff fe52 	bl	6632 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    698e:	682c      	ldr	r4, [r5, #0]
    6990:	4b0b      	ldr	r3, [pc, #44]	; (69c0 <connected_cb+0x6c>)
    6992:	429c      	cmp	r4, r3
    6994:	d10c      	bne.n	69b0 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6996:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6998:	89a0      	ldrh	r0, [r4, #12]
    699a:	89e1      	ldrh	r1, [r4, #14]
    699c:	b900      	cbnz	r0, 69a0 <connected_cb+0x4c>
    699e:	b139      	cbz	r1, 69b0 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    69a0:	f7ff ffa2 	bl	68e8 <sc_indicate.constprop.24>
	memset(cfg->data, 0, sizeof(cfg->data));
    69a4:	2204      	movs	r2, #4
    69a6:	2100      	movs	r1, #0
    69a8:	f104 000c 	add.w	r0, r4, #12
    69ac:	f7fb f977 	bl	1c9e <memset>
}
    69b0:	2001      	movs	r0, #1
    69b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    69b6:	3601      	adds	r6, #1
    69b8:	e7d6      	b.n	6968 <connected_cb+0x14>
    69ba:	bf00      	nop
    69bc:	00006b8d 	.word	0x00006b8d
    69c0:	200005fc 	.word	0x200005fc

000069c4 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    69c4:	490d      	ldr	r1, [pc, #52]	; (69fc <sc_indicate_rsp+0x38>)
    69c6:	f3bf 8f5b 	dmb	ish
    69ca:	f101 0350 	add.w	r3, r1, #80	; 0x50
    69ce:	e853 2f00 	ldrex	r2, [r3]
    69d2:	f022 0202 	bic.w	r2, r2, #2
    69d6:	e843 2000 	strex	r0, r2, [r3]
    69da:	2800      	cmp	r0, #0
    69dc:	d1f7      	bne.n	69ce <sc_indicate_rsp+0xa>
    69de:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    69e2:	f3bf 8f5b 	dmb	ish
    69e6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    69e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    69ec:	07db      	lsls	r3, r3, #31
    69ee:	d504      	bpl.n	69fa <sc_indicate_rsp+0x36>
    69f0:	2200      	movs	r2, #0
    69f2:	3128      	adds	r1, #40	; 0x28
    69f4:	4802      	ldr	r0, [pc, #8]	; (6a00 <sc_indicate_rsp+0x3c>)
    69f6:	f00d ba41 	b.w	13e7c <k_delayed_work_submit_to_queue>
    69fa:	4770      	bx	lr
    69fc:	200005a8 	.word	0x200005a8
    6a00:	200019b0 	.word	0x200019b0

00006a04 <read_appearance>:
{
    6a04:	b513      	push	{r0, r1, r4, lr}
    6a06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6a0a:	4610      	mov	r0, r2
	if (offset > value_len) {
    6a0c:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6a0e:	f04f 0200 	mov.w	r2, #0
    6a12:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6a16:	d80d      	bhi.n	6a34 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    6a18:	f1c1 0402 	rsb	r4, r1, #2
    6a1c:	429c      	cmp	r4, r3
    6a1e:	bfa8      	it	ge
    6a20:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6a22:	f10d 0306 	add.w	r3, sp, #6
    6a26:	4622      	mov	r2, r4
    6a28:	4419      	add	r1, r3
    6a2a:	f7fb f90c 	bl	1c46 <memcpy>
}
    6a2e:	4620      	mov	r0, r4
    6a30:	b002      	add	sp, #8
    6a32:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6a34:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6a38:	e7f9      	b.n	6a2e <read_appearance+0x2a>
	...

00006a3c <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a3c:	6882      	ldr	r2, [r0, #8]
    6a3e:	4b27      	ldr	r3, [pc, #156]	; (6adc <disconnected_cb+0xa0>)
    6a40:	429a      	cmp	r2, r3
{
    6a42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6a46:	4680      	mov	r8, r0
    6a48:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a4a:	d127      	bne.n	6a9c <disconnected_cb+0x60>
	ccc = attr->user_data;
    6a4c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    6a4e:	8923      	ldrh	r3, [r4, #8]
    6a50:	b323      	cbz	r3, 6a9c <disconnected_cb+0x60>
    6a52:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6a54:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6a58:	6863      	ldr	r3, [r4, #4]
    6a5a:	429e      	cmp	r6, r3
    6a5c:	d30b      	bcc.n	6a76 <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    6a5e:	2202      	movs	r2, #2
    6a60:	2100      	movs	r1, #0
    6a62:	f104 0008 	add.w	r0, r4, #8
    6a66:	f7fb f91a 	bl	1c9e <memset>
	if (ccc->cfg_changed) {
    6a6a:	68e3      	ldr	r3, [r4, #12]
    6a6c:	b1b3      	cbz	r3, 6a9c <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6a6e:	8921      	ldrh	r1, [r4, #8]
    6a70:	4640      	mov	r0, r8
    6a72:	4798      	blx	r3
    6a74:	e012      	b.n	6a9c <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6a76:	6821      	ldr	r1, [r4, #0]
    6a78:	0135      	lsls	r5, r6, #4
    6a7a:	4429      	add	r1, r5
    6a7c:	890b      	ldrh	r3, [r1, #8]
    6a7e:	b19b      	cbz	r3, 6aa8 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6a80:	4648      	mov	r0, r9
    6a82:	f7fd fe0d 	bl	46a0 <bt_conn_addr_le_cmp>
    6a86:	b188      	cbz	r0, 6aac <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6a88:	6820      	ldr	r0, [r4, #0]
    6a8a:	4428      	add	r0, r5
    6a8c:	f7fd fe5c 	bl	4748 <bt_conn_lookup_addr_le>
			if (tmp) {
    6a90:	b150      	cbz	r0, 6aa8 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6a92:	7a43      	ldrb	r3, [r0, #9]
    6a94:	2b03      	cmp	r3, #3
    6a96:	d105      	bne.n	6aa4 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6a98:	f7fd fe8c 	bl	47b4 <bt_conn_unref>
}
    6a9c:	2001      	movs	r0, #1
    6a9e:	b002      	add	sp, #8
    6aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6aa4:	f7fd fe86 	bl	47b4 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6aa8:	3601      	adds	r6, #1
    6aaa:	e7d5      	b.n	6a58 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6aac:	4650      	mov	r0, sl
    6aae:	f7fd fae9 	bl	4084 <bt_addr_le_is_bonded>
    6ab2:	4607      	mov	r7, r0
    6ab4:	6820      	ldr	r0, [r4, #0]
    6ab6:	b95f      	cbnz	r7, 6ad0 <disconnected_cb+0x94>
    6ab8:	4428      	add	r0, r5
    6aba:	2207      	movs	r2, #7
    6abc:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6abe:	9700      	str	r7, [sp, #0]
    6ac0:	f8cd 7003 	str.w	r7, [sp, #3]
    6ac4:	f7fb f8bf 	bl	1c46 <memcpy>
				ccc->cfg[i].value = 0;
    6ac8:	6823      	ldr	r3, [r4, #0]
    6aca:	441d      	add	r5, r3
    6acc:	812f      	strh	r7, [r5, #8]
    6ace:	e7eb      	b.n	6aa8 <disconnected_cb+0x6c>
    6ad0:	2207      	movs	r2, #7
    6ad2:	4651      	mov	r1, sl
    6ad4:	4428      	add	r0, r5
    6ad6:	f7fb f8b6 	bl	1c46 <memcpy>
    6ada:	e7e5      	b.n	6aa8 <disconnected_cb+0x6c>
    6adc:	00006b8d 	.word	0x00006b8d

00006ae0 <read_name>:
{
    6ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6ae4:	4e0d      	ldr	r6, [pc, #52]	; (6b1c <read_name+0x3c>)
{
    6ae6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6aea:	4630      	mov	r0, r6
{
    6aec:	4698      	mov	r8, r3
    6aee:	4617      	mov	r7, r2
				 strlen(gap_name));
    6af0:	f7fb f87f 	bl	1bf2 <strlen>
	if (offset > value_len) {
    6af4:	b283      	uxth	r3, r0
    6af6:	42ab      	cmp	r3, r5
    6af8:	d30d      	bcc.n	6b16 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6afa:	1b5c      	subs	r4, r3, r5
    6afc:	4544      	cmp	r4, r8
    6afe:	4623      	mov	r3, r4
    6b00:	bfa8      	it	ge
    6b02:	4643      	movge	r3, r8
    6b04:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6b06:	4622      	mov	r2, r4
    6b08:	1971      	adds	r1, r6, r5
    6b0a:	4638      	mov	r0, r7
    6b0c:	f7fb f89b 	bl	1c46 <memcpy>
}
    6b10:	4620      	mov	r0, r4
    6b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b16:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6b1a:	e7f9      	b.n	6b10 <read_name+0x30>
    6b1c:	000161fb 	.word	0x000161fb

00006b20 <bt_gatt_attr_read_ccc>:
{
    6b20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6b24:	68ce      	ldr	r6, [r1, #12]
{
    6b26:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6b2a:	4604      	mov	r4, r0
    6b2c:	4690      	mov	r8, r2
    6b2e:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6b30:	2500      	movs	r5, #0
    6b32:	6873      	ldr	r3, [r6, #4]
    6b34:	429d      	cmp	r5, r3
    6b36:	d20e      	bcs.n	6b56 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6b38:	6831      	ldr	r1, [r6, #0]
    6b3a:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6b3e:	4449      	add	r1, r9
    6b40:	4620      	mov	r0, r4
    6b42:	f7fd fdad 	bl	46a0 <bt_conn_addr_le_cmp>
    6b46:	b108      	cbz	r0, 6b4c <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6b48:	3501      	adds	r5, #1
    6b4a:	e7f2      	b.n	6b32 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6b4c:	6832      	ldr	r2, [r6, #0]
    6b4e:	444a      	add	r2, r9
    6b50:	8913      	ldrh	r3, [r2, #8]
    6b52:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6b56:	6873      	ldr	r3, [r6, #4]
    6b58:	429d      	cmp	r5, r3
		value = 0x0000;
    6b5a:	bf04      	itt	eq
    6b5c:	2300      	moveq	r3, #0
    6b5e:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    6b62:	2f02      	cmp	r7, #2
    6b64:	d80f      	bhi.n	6b86 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6b66:	f1c7 0402 	rsb	r4, r7, #2
    6b6a:	4554      	cmp	r4, sl
    6b6c:	bfa8      	it	ge
    6b6e:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6b70:	f10d 0306 	add.w	r3, sp, #6
    6b74:	4622      	mov	r2, r4
    6b76:	19d9      	adds	r1, r3, r7
    6b78:	4640      	mov	r0, r8
    6b7a:	f7fb f864 	bl	1c46 <memcpy>
}
    6b7e:	4620      	mov	r0, r4
    6b80:	b002      	add	sp, #8
    6b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6b8a:	e7f8      	b.n	6b7e <bt_gatt_attr_read_ccc+0x5e>

00006b8c <bt_gatt_attr_write_ccc>:
{
    6b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b90:	b085      	sub	sp, #20
    6b92:	4688      	mov	r8, r1
    6b94:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6b98:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    6b9c:	2902      	cmp	r1, #2
{
    6b9e:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    6ba0:	d85b      	bhi.n	6c5a <bt_gatt_attr_write_ccc+0xce>
	if (offset + len > sizeof(u16_t)) {
    6ba2:	4419      	add	r1, r3
    6ba4:	2902      	cmp	r1, #2
    6ba6:	461f      	mov	r7, r3
    6ba8:	dc5a      	bgt.n	6c60 <bt_gatt_attr_write_ccc+0xd4>
	return ((u16_t)src[1] << 8) | src[0];
    6baa:	7853      	ldrb	r3, [r2, #1]
    6bac:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    6bae:	2400      	movs	r4, #0
    6bb0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    6bb4:	686b      	ldr	r3, [r5, #4]
    6bb6:	429c      	cmp	r4, r3
    6bb8:	d206      	bcs.n	6bc8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6bba:	6829      	ldr	r1, [r5, #0]
    6bbc:	4648      	mov	r0, r9
    6bbe:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    6bc2:	f7fd fd6d 	bl	46a0 <bt_conn_addr_le_cmp>
    6bc6:	b9b8      	cbnz	r0, 6bf8 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6bc8:	686b      	ldr	r3, [r5, #4]
    6bca:	429c      	cmp	r4, r3
    6bcc:	d12b      	bne.n	6c26 <bt_gatt_attr_write_ccc+0x9a>
		if (!value) {
    6bce:	b336      	cbz	r6, 6c1e <bt_gatt_attr_write_ccc+0x92>
    6bd0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6bd2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    6bd4:	686b      	ldr	r3, [r5, #4]
    6bd6:	429c      	cmp	r4, r3
    6bd8:	d217      	bcs.n	6c0a <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6bda:	6828      	ldr	r0, [r5, #0]
    6bdc:	f8cd a000 	str.w	sl, [sp]
    6be0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6be4:	2207      	movs	r2, #7
    6be6:	4669      	mov	r1, sp
    6be8:	4458      	add	r0, fp
    6bea:	f8cd a003 	str.w	sl, [sp, #3]
    6bee:	f7fb f815 	bl	1c1c <memcmp>
    6bf2:	b118      	cbz	r0, 6bfc <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6bf4:	3401      	adds	r4, #1
    6bf6:	e7ed      	b.n	6bd4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6bf8:	3401      	adds	r4, #1
    6bfa:	e7db      	b.n	6bb4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6bfc:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    6bfe:	2207      	movs	r2, #7
    6c00:	f109 0144 	add.w	r1, r9, #68	; 0x44
    6c04:	4458      	add	r0, fp
    6c06:	f7fb f81e 	bl	1c46 <memcpy>
		if (i == ccc->cfg_len) {
    6c0a:	686b      	ldr	r3, [r5, #4]
    6c0c:	429c      	cmp	r4, r3
    6c0e:	d10a      	bne.n	6c26 <bt_gatt_attr_write_ccc+0x9a>
			BT_WARN("No space to store CCC cfg");
    6c10:	4a15      	ldr	r2, [pc, #84]	; (6c68 <bt_gatt_attr_write_ccc+0xdc>)
    6c12:	4916      	ldr	r1, [pc, #88]	; (6c6c <bt_gatt_attr_write_ccc+0xe0>)
    6c14:	2004      	movs	r0, #4
    6c16:	f7fb f9dd 	bl	1fd4 <bt_log>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6c1a:	f06f 0710 	mvn.w	r7, #16
}
    6c1e:	4638      	mov	r0, r7
    6c20:	b005      	add	sp, #20
    6c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    6c26:	682b      	ldr	r3, [r5, #0]
    6c28:	0124      	lsls	r4, r4, #4
    6c2a:	4423      	add	r3, r4
    6c2c:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6c2e:	892b      	ldrh	r3, [r5, #8]
    6c30:	42b3      	cmp	r3, r6
    6c32:	d003      	beq.n	6c3c <bt_gatt_attr_write_ccc+0xb0>
		gatt_ccc_changed(attr, ccc);
    6c34:	4629      	mov	r1, r5
    6c36:	4640      	mov	r0, r8
    6c38:	f7ff fcfb 	bl	6632 <gatt_ccc_changed>
	if (!value) {
    6c3c:	2e00      	cmp	r6, #0
    6c3e:	d1ee      	bne.n	6c1e <bt_gatt_attr_write_ccc+0x92>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6c40:	6828      	ldr	r0, [r5, #0]
    6c42:	9602      	str	r6, [sp, #8]
    6c44:	4420      	add	r0, r4
    6c46:	2207      	movs	r2, #7
    6c48:	a902      	add	r1, sp, #8
    6c4a:	f8cd 600b 	str.w	r6, [sp, #11]
    6c4e:	f7fa fffa 	bl	1c46 <memcpy>
		ccc->cfg[i].value = 0;
    6c52:	682b      	ldr	r3, [r5, #0]
    6c54:	441c      	add	r4, r3
    6c56:	8126      	strh	r6, [r4, #8]
    6c58:	e7e1      	b.n	6c1e <bt_gatt_attr_write_ccc+0x92>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6c5a:	f06f 0706 	mvn.w	r7, #6
    6c5e:	e7de      	b.n	6c1e <bt_gatt_attr_write_ccc+0x92>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6c60:	f06f 070c 	mvn.w	r7, #12
    6c64:	e7db      	b.n	6c1e <bt_gatt_attr_write_ccc+0x92>
    6c66:	bf00      	nop
    6c68:	000160dd 	.word	0x000160dd
    6c6c:	00016142 	.word	0x00016142

00006c70 <bt_gatt_attr_read_service>:
{
    6c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6c72:	68c9      	ldr	r1, [r1, #12]
{
    6c74:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6c78:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6c7a:	780a      	ldrb	r2, [r1, #0]
    6c7c:	b992      	cbnz	r2, 6ca4 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6c7e:	884a      	ldrh	r2, [r1, #2]
    6c80:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6c84:	2d02      	cmp	r5, #2
    6c86:	d819      	bhi.n	6cbc <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6c88:	f1c5 0402 	rsb	r4, r5, #2
    6c8c:	429c      	cmp	r4, r3
    6c8e:	bfa8      	it	ge
    6c90:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6c92:	f10d 0306 	add.w	r3, sp, #6
    6c96:	4622      	mov	r2, r4
    6c98:	1959      	adds	r1, r3, r5
    6c9a:	f7fa ffd4 	bl	1c46 <memcpy>
}
    6c9e:	4620      	mov	r0, r4
    6ca0:	b003      	add	sp, #12
    6ca2:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6ca4:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6ca6:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6caa:	d807      	bhi.n	6cbc <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6cac:	f1c5 0410 	rsb	r4, r5, #16
    6cb0:	429c      	cmp	r4, r3
    6cb2:	bfa8      	it	ge
    6cb4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6cb6:	4622      	mov	r2, r4
    6cb8:	4429      	add	r1, r5
    6cba:	e7ee      	b.n	6c9a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6cbc:	f06f 0406 	mvn.w	r4, #6
    6cc0:	e7ed      	b.n	6c9e <bt_gatt_attr_read_service+0x2e>
	...

00006cc4 <notify_cb>:
{
    6cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6cc8:	f642 1302 	movw	r3, #10498	; 0x2902
{
    6ccc:	4605      	mov	r5, r0
    6cce:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6cd0:	2400      	movs	r4, #0
    6cd2:	4669      	mov	r1, sp
    6cd4:	6800      	ldr	r0, [r0, #0]
    6cd6:	f88d 4000 	strb.w	r4, [sp]
    6cda:	f8ad 3002 	strh.w	r3, [sp, #2]
    6cde:	f7fb fa91 	bl	2204 <bt_uuid_cmp>
    6ce2:	b178      	cbz	r0, 6d04 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6ce4:	f642 0303 	movw	r3, #10243	; 0x2803
    6ce8:	6828      	ldr	r0, [r5, #0]
    6cea:	f88d 4004 	strb.w	r4, [sp, #4]
    6cee:	a901      	add	r1, sp, #4
    6cf0:	f8ad 3006 	strh.w	r3, [sp, #6]
    6cf4:	f7fb fa86 	bl	2204 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6cf8:	1b00      	subs	r0, r0, r4
    6cfa:	bf18      	it	ne
    6cfc:	2001      	movne	r0, #1
}
    6cfe:	b003      	add	sp, #12
    6d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6d04:	68aa      	ldr	r2, [r5, #8]
    6d06:	4b2b      	ldr	r3, [pc, #172]	; (6db4 <notify_cb+0xf0>)
    6d08:	429a      	cmp	r2, r3
    6d0a:	d001      	beq.n	6d10 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6d0c:	2001      	movs	r0, #1
    6d0e:	e7f6      	b.n	6cfe <notify_cb+0x3a>
	ccc = attr->user_data;
    6d10:	68ef      	ldr	r7, [r5, #12]
    6d12:	4d29      	ldr	r5, [pc, #164]	; (6db8 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    6d14:	4604      	mov	r4, r0
    6d16:	46a8      	mov	r8, r5
    6d18:	4681      	mov	r9, r0
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	429c      	cmp	r4, r3
    6d1e:	d2f5      	bcs.n	6d0c <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6d20:	6838      	ldr	r0, [r7, #0]
    6d22:	88b3      	ldrh	r3, [r6, #4]
    6d24:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6d28:	8902      	ldrh	r2, [r0, #8]
    6d2a:	429a      	cmp	r2, r3
    6d2c:	d114      	bne.n	6d58 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6d2e:	f7fd fd0b 	bl	4748 <bt_conn_lookup_addr_le>
		if (!conn) {
    6d32:	4683      	mov	fp, r0
    6d34:	b9f8      	cbnz	r0, 6d76 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6d36:	683b      	ldr	r3, [r7, #0]
    6d38:	4543      	cmp	r3, r8
    6d3a:	d10d      	bne.n	6d58 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6d3c:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    6d3e:	a801      	add	r0, sp, #4
    6d40:	8c1a      	ldrh	r2, [r3, #32]
    6d42:	69d9      	ldr	r1, [r3, #28]
    6d44:	f7fa ff7f 	bl	1c46 <memcpy>
	if (!stored->start && !stored->end) {
    6d48:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6d4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6d4e:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6d50:	b928      	cbnz	r0, 6d5e <notify_cb+0x9a>
    6d52:	b942      	cbnz	r2, 6d66 <notify_cb+0xa2>
		*stored = data;
    6d54:	9801      	ldr	r0, [sp, #4]
    6d56:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6d58:	3401      	adds	r4, #1
    6d5a:	3510      	adds	r5, #16
    6d5c:	e7dd      	b.n	6d1a <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    6d5e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6d62:	4281      	cmp	r1, r0
    6d64:	d305      	bcc.n	6d72 <notify_cb+0xae>
    6d66:	429a      	cmp	r2, r3
    6d68:	d2f6      	bcs.n	6d58 <notify_cb+0x94>
	if (*end < new_end) {
    6d6a:	429a      	cmp	r2, r3
    6d6c:	d2f4      	bcs.n	6d58 <notify_cb+0x94>
		*end = new_end;
    6d6e:	81eb      	strh	r3, [r5, #14]
    6d70:	e7f2      	b.n	6d58 <notify_cb+0x94>
		*start = new_start;
    6d72:	81a9      	strh	r1, [r5, #12]
    6d74:	e7f9      	b.n	6d6a <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6d76:	7a43      	ldrb	r3, [r0, #9]
    6d78:	2b03      	cmp	r3, #3
    6d7a:	d002      	beq.n	6d82 <notify_cb+0xbe>
			bt_conn_unref(conn);
    6d7c:	f7fd fd1a 	bl	47b4 <bt_conn_unref>
    6d80:	e7ea      	b.n	6d58 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6d82:	88b3      	ldrh	r3, [r6, #4]
    6d84:	2b02      	cmp	r3, #2
    6d86:	d10c      	bne.n	6da2 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6d88:	6971      	ldr	r1, [r6, #20]
    6d8a:	f7ff fd5f 	bl	684c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    6d8e:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6d90:	4658      	mov	r0, fp
    6d92:	f7fd fd0f 	bl	47b4 <bt_conn_unref>
		if (err < 0) {
    6d96:	f1ba 0f00 	cmp.w	sl, #0
    6d9a:	db09      	blt.n	6db0 <notify_cb+0xec>
		data->err = 0;
    6d9c:	f8c6 9000 	str.w	r9, [r6]
    6da0:	e7da      	b.n	6d58 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6da2:	68b1      	ldr	r1, [r6, #8]
    6da4:	8a33      	ldrh	r3, [r6, #16]
    6da6:	68f2      	ldr	r2, [r6, #12]
    6da8:	8a09      	ldrh	r1, [r1, #16]
    6daa:	f7ff fcd7 	bl	675c <gatt_notify>
    6dae:	e7ee      	b.n	6d8e <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6db0:	2000      	movs	r0, #0
    6db2:	e7a4      	b.n	6cfe <notify_cb+0x3a>
    6db4:	00006b8d 	.word	0x00006b8d
    6db8:	200005fc 	.word	0x200005fc

00006dbc <bt_gatt_init>:
{
    6dbc:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6dbe:	4806      	ldr	r0, [pc, #24]	; (6dd8 <bt_gatt_init+0x1c>)
    6dc0:	f7ff fc8c 	bl	66dc <gatt_register>
	gatt_register(&gatt_svc);
    6dc4:	4805      	ldr	r0, [pc, #20]	; (6ddc <bt_gatt_init+0x20>)
    6dc6:	f7ff fc89 	bl	66dc <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6dca:	4905      	ldr	r1, [pc, #20]	; (6de0 <bt_gatt_init+0x24>)
    6dcc:	4805      	ldr	r0, [pc, #20]	; (6de4 <bt_gatt_init+0x28>)
}
    6dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6dd2:	f00c bfdf 	b.w	13d94 <k_delayed_work_init>
    6dd6:	bf00      	nop
    6dd8:	20003cc4 	.word	0x20003cc4
    6ddc:	20003d20 	.word	0x20003d20
    6de0:	00006e69 	.word	0x00006e69
    6de4:	200005d0 	.word	0x200005d0

00006de8 <bt_gatt_foreach_attr>:
{
    6de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dec:	4699      	mov	r9, r3
    6dee:	4b12      	ldr	r3, [pc, #72]	; (6e38 <bt_gatt_foreach_attr+0x50>)
    6df0:	681c      	ldr	r4, [r3, #0]
    6df2:	4606      	mov	r6, r0
    6df4:	460f      	mov	r7, r1
    6df6:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6df8:	b1dc      	cbz	r4, 6e32 <bt_gatt_foreach_attr+0x4a>
    6dfa:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6dfc:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6e00:	b1bc      	cbz	r4, 6e32 <bt_gatt_foreach_attr+0x4a>
    6e02:	2500      	movs	r5, #0
    6e04:	e006      	b.n	6e14 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6e06:	6820      	ldr	r0, [r4, #0]
    6e08:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6e0c:	8a03      	ldrh	r3, [r0, #16]
    6e0e:	42b3      	cmp	r3, r6
    6e10:	d207      	bcs.n	6e22 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    6e12:	3501      	adds	r5, #1
    6e14:	6863      	ldr	r3, [r4, #4]
    6e16:	42ab      	cmp	r3, r5
    6e18:	d8f5      	bhi.n	6e06 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6e1a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6e1c:	b14c      	cbz	r4, 6e32 <bt_gatt_foreach_attr+0x4a>
    6e1e:	3c08      	subs	r4, #8
    6e20:	e7ee      	b.n	6e00 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6e22:	42bb      	cmp	r3, r7
    6e24:	d8f5      	bhi.n	6e12 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6e26:	4649      	mov	r1, r9
    6e28:	47c0      	blx	r8
    6e2a:	2800      	cmp	r0, #0
    6e2c:	d1f1      	bne.n	6e12 <bt_gatt_foreach_attr+0x2a>
    6e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e36:	bf00      	nop
    6e38:	200005a0 	.word	0x200005a0

00006e3c <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    6e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6e3e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6e42:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6e44:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6e46:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6e48:	2302      	movs	r3, #2
    6e4a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6e4e:	4a05      	ldr	r2, [pc, #20]	; (6e64 <bt_gatt_indicate.part.12+0x28>)
    6e50:	8a00      	ldrh	r0, [r0, #16]
    6e52:	466b      	mov	r3, sp
    6e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e58:	f7ff ffc6 	bl	6de8 <bt_gatt_foreach_attr>
}
    6e5c:	9800      	ldr	r0, [sp, #0]
    6e5e:	b007      	add	sp, #28
    6e60:	f85d fb04 	ldr.w	pc, [sp], #4
    6e64:	00006cc5 	.word	0x00006cc5

00006e68 <sc_process>:
{
    6e68:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6e6a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6e6e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6e72:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6e74:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6e78:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6e7c:	3828      	subs	r0, #40	; 0x28
    6e7e:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e82:	f3bf 8f5b 	dmb	ish
    6e86:	e854 2f00 	ldrex	r2, [r4]
    6e8a:	f022 0201 	bic.w	r2, r2, #1
    6e8e:	e844 2100 	strex	r1, r2, [r4]
    6e92:	2900      	cmp	r1, #0
    6e94:	d1f7      	bne.n	6e86 <sc_process+0x1e>
    6e96:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6e9a:	2200      	movs	r2, #0
    6e9c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6ea0:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6ea4:	4a0e      	ldr	r2, [pc, #56]	; (6ee0 <sc_process+0x78>)
    6ea6:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6eaa:	4a0e      	ldr	r2, [pc, #56]	; (6ee4 <sc_process+0x7c>)
    6eac:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6eb0:	aa01      	add	r2, sp, #4
    6eb2:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6eb6:	2204      	movs	r2, #4
    6eb8:	f823 2c08 	strh.w	r2, [r3, #-8]
    6ebc:	f7ff ffbe 	bl	6e3c <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6ec0:	b958      	cbnz	r0, 6eda <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ec2:	f3bf 8f5b 	dmb	ish
    6ec6:	e854 3f00 	ldrex	r3, [r4]
    6eca:	f043 0302 	orr.w	r3, r3, #2
    6ece:	e844 3200 	strex	r2, r3, [r4]
    6ed2:	2a00      	cmp	r2, #0
    6ed4:	d1f7      	bne.n	6ec6 <sc_process+0x5e>
    6ed6:	f3bf 8f5b 	dmb	ish
}
    6eda:	b002      	add	sp, #8
    6edc:	bd10      	pop	{r4, pc}
    6ede:	bf00      	nop
    6ee0:	20003cf8 	.word	0x20003cf8
    6ee4:	000069c5 	.word	0x000069c5

00006ee8 <bt_gatt_attr_next>:
{
    6ee8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6eea:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6eec:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6eee:	3101      	adds	r1, #1
    6ef0:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6ef2:	2200      	movs	r2, #0
    6ef4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6ef8:	4608      	mov	r0, r1
    6efa:	4a03      	ldr	r2, [pc, #12]	; (6f08 <bt_gatt_attr_next+0x20>)
    6efc:	f7ff ff74 	bl	6de8 <bt_gatt_foreach_attr>
}
    6f00:	9801      	ldr	r0, [sp, #4]
    6f02:	b003      	add	sp, #12
    6f04:	f85d fb04 	ldr.w	pc, [sp], #4
    6f08:	0000662d 	.word	0x0000662d

00006f0c <bt_gatt_attr_read_chrc>:
{
    6f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6f10:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6f14:	b087      	sub	sp, #28
    6f16:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6f18:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6f1a:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6f1e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
	pdu.properties = chrc->properties;
    6f22:	f88d 3004 	strb.w	r3, [sp, #4]
{
    6f26:	4688      	mov	r8, r1
    6f28:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6f2a:	f7ff ffdd 	bl	6ee8 <bt_gatt_attr_next>
	if (!next) {
    6f2e:	4605      	mov	r5, r0
    6f30:	bb18      	cbnz	r0, 6f7a <bt_gatt_attr_read_chrc+0x6e>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6f32:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    6f36:	4a18      	ldr	r2, [pc, #96]	; (6f98 <bt_gatt_attr_read_chrc+0x8c>)
    6f38:	4918      	ldr	r1, [pc, #96]	; (6f9c <bt_gatt_attr_read_chrc+0x90>)
    6f3a:	2004      	movs	r0, #4
    6f3c:	f7fb f84a 	bl	1fd4 <bt_log>
		pdu.value_handle = 0x0000;
    6f40:	f88d 5005 	strb.w	r5, [sp, #5]
    6f44:	f88d 5006 	strb.w	r5, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6f48:	f8d9 1000 	ldr.w	r1, [r9]
    6f4c:	780b      	ldrb	r3, [r1, #0]
    6f4e:	b9c3      	cbnz	r3, 6f82 <bt_gatt_attr_read_chrc+0x76>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6f50:	884b      	ldrh	r3, [r1, #2]
    6f52:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    6f56:	2305      	movs	r3, #5
	if (offset > value_len) {
    6f58:	42b3      	cmp	r3, r6
    6f5a:	d31a      	bcc.n	6f92 <bt_gatt_attr_read_chrc+0x86>
	len = min(buf_len, value_len - offset);
    6f5c:	1b9b      	subs	r3, r3, r6
    6f5e:	42a3      	cmp	r3, r4
    6f60:	bfa8      	it	ge
    6f62:	4623      	movge	r3, r4
    6f64:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6f66:	ab01      	add	r3, sp, #4
    6f68:	4622      	mov	r2, r4
    6f6a:	1999      	adds	r1, r3, r6
    6f6c:	4638      	mov	r0, r7
    6f6e:	f7fa fe6a 	bl	1c46 <memcpy>
}
    6f72:	4620      	mov	r0, r4
    6f74:	b007      	add	sp, #28
    6f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6f7a:	8a03      	ldrh	r3, [r0, #16]
    6f7c:	f8ad 3005 	strh.w	r3, [sp, #5]
    6f80:	e7e2      	b.n	6f48 <bt_gatt_attr_read_chrc+0x3c>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6f82:	2210      	movs	r2, #16
    6f84:	3101      	adds	r1, #1
    6f86:	f10d 0007 	add.w	r0, sp, #7
    6f8a:	f7fa fe5c 	bl	1c46 <memcpy>
		value_len += 16;
    6f8e:	2313      	movs	r3, #19
    6f90:	e7e2      	b.n	6f58 <bt_gatt_attr_read_chrc+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6f96:	e7ec      	b.n	6f72 <bt_gatt_attr_read_chrc+0x66>
    6f98:	000160c6 	.word	0x000160c6
    6f9c:	00016118 	.word	0x00016118

00006fa0 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    6fa0:	7a43      	ldrb	r3, [r0, #9]
    6fa2:	2b03      	cmp	r3, #3
{
    6fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fa8:	4680      	mov	r8, r0
    6faa:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    6fac:	d144      	bne.n	7038 <bt_gatt_unsubscribe+0x98>
    6fae:	4b2b      	ldr	r3, [pc, #172]	; (705c <bt_gatt_unsubscribe+0xbc>)
    6fb0:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6fb2:	b1cc      	cbz	r4, 6fe8 <bt_gatt_unsubscribe+0x48>
    6fb4:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    6fb8:	d144      	bne.n	7044 <bt_gatt_unsubscribe+0xa4>
    6fba:	462c      	mov	r4, r5
    6fbc:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6fc0:	f8df a098 	ldr.w	sl, [pc, #152]	; 705c <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6fc4:	465a      	mov	r2, fp
    6fc6:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6fc8:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6fcc:	b975      	cbnz	r5, 6fec <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    6fce:	2a00      	cmp	r2, #0
    6fd0:	d035      	beq.n	703e <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    6fd2:	b33f      	cbz	r7, 7024 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    6fd4:	69f4      	ldr	r4, [r6, #28]
    6fd6:	462b      	mov	r3, r5
    6fd8:	462a      	mov	r2, r5
    6fda:	4631      	mov	r1, r6
    6fdc:	4640      	mov	r0, r8
    6fde:	47a0      	blx	r4
		return 0;
    6fe0:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    6fe2:	b003      	add	sp, #12
    6fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fe8:	4625      	mov	r5, r4
    6fea:	e7e7      	b.n	6fbc <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    6fec:	42b5      	cmp	r5, r6
    6fee:	d108      	bne.n	7002 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6ff0:	464a      	mov	r2, r9
    6ff2:	4659      	mov	r1, fp
    6ff4:	4650      	mov	r0, sl
    6ff6:	f7ff fb08 	bl	660a <sys_slist_remove>
			found = true;
    6ffa:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6ffc:	bb3c      	cbnz	r4, 704e <bt_gatt_unsubscribe+0xae>
    6ffe:	4623      	mov	r3, r4
    7000:	e028      	b.n	7054 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    7002:	f105 0114 	add.w	r1, r5, #20
    7006:	4640      	mov	r0, r8
    7008:	9201      	str	r2, [sp, #4]
    700a:	f7fd fb49 	bl	46a0 <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    700e:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    7012:	9a01      	ldr	r2, [sp, #4]
    7014:	2800      	cmp	r0, #0
    7016:	d1f1      	bne.n	6ffc <bt_gatt_unsubscribe+0x5c>
    7018:	8c29      	ldrh	r1, [r5, #32]
    701a:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    701c:	4299      	cmp	r1, r3
    701e:	bf08      	it	eq
    7020:	2701      	moveq	r7, #1
    7022:	e7eb      	b.n	6ffc <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7024:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    7026:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7028:	4633      	mov	r3, r6
    702a:	463a      	mov	r2, r7
    702c:	4640      	mov	r0, r8
}
    702e:	b003      	add	sp, #12
    7030:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    7034:	f7ff bbe4 	b.w	6800 <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    7038:	f06f 0038 	mvn.w	r0, #56	; 0x38
    703c:	e7d1      	b.n	6fe2 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    703e:	f06f 0015 	mvn.w	r0, #21
    7042:	e7ce      	b.n	6fe2 <bt_gatt_unsubscribe+0x42>
    7044:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    7046:	2c00      	cmp	r4, #0
    7048:	d0b8      	beq.n	6fbc <bt_gatt_unsubscribe+0x1c>
    704a:	3c28      	subs	r4, #40	; 0x28
    704c:	e7b6      	b.n	6fbc <bt_gatt_unsubscribe+0x1c>
    704e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7050:	b103      	cbz	r3, 7054 <bt_gatt_unsubscribe+0xb4>
    7052:	3b28      	subs	r3, #40	; 0x28
    7054:	4625      	mov	r5, r4
    7056:	461c      	mov	r4, r3
    7058:	e7b8      	b.n	6fcc <bt_gatt_unsubscribe+0x2c>
    705a:	bf00      	nop
    705c:	2000060c 	.word	0x2000060c

00007060 <bt_gatt_notification>:
{
    7060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7064:	4699      	mov	r9, r3
    7066:	4b17      	ldr	r3, [pc, #92]	; (70c4 <bt_gatt_notification+0x64>)
    7068:	681b      	ldr	r3, [r3, #0]
    706a:	4605      	mov	r5, r0
    706c:	460e      	mov	r6, r1
    706e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7070:	b333      	cbz	r3, 70c0 <bt_gatt_notification+0x60>
    7072:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    7076:	d101      	bne.n	707c <bt_gatt_notification+0x1c>
    7078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    707c:	681c      	ldr	r4, [r3, #0]
    707e:	b104      	cbz	r4, 7082 <bt_gatt_notification+0x22>
    7080:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    7082:	f10a 0114 	add.w	r1, sl, #20
    7086:	4628      	mov	r0, r5
    7088:	f7fd fb0a 	bl	46a0 <bt_conn_addr_le_cmp>
    708c:	b978      	cbnz	r0, 70ae <bt_gatt_notification+0x4e>
    708e:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    7092:	42b3      	cmp	r3, r6
    7094:	d10b      	bne.n	70ae <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    7096:	f8da 701c 	ldr.w	r7, [sl, #28]
    709a:	464b      	mov	r3, r9
    709c:	4642      	mov	r2, r8
    709e:	4651      	mov	r1, sl
    70a0:	4628      	mov	r0, r5
    70a2:	47b8      	blx	r7
    70a4:	b918      	cbnz	r0, 70ae <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    70a6:	4651      	mov	r1, sl
    70a8:	4628      	mov	r0, r5
    70aa:	f7ff ff79 	bl	6fa0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    70ae:	b90c      	cbnz	r4, 70b4 <bt_gatt_notification+0x54>
    70b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    70b6:	b103      	cbz	r3, 70ba <bt_gatt_notification+0x5a>
    70b8:	3b28      	subs	r3, #40	; 0x28
    70ba:	46a2      	mov	sl, r4
    70bc:	461c      	mov	r4, r3
    70be:	e7e0      	b.n	7082 <bt_gatt_notification+0x22>
    70c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70c4:	2000060c 	.word	0x2000060c

000070c8 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    70c8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    70ca:	4a0e      	ldr	r2, [pc, #56]	; (7104 <bt_gatt_connected+0x3c>)
    70cc:	4603      	mov	r3, r0
{
    70ce:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    70d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70d4:	2001      	movs	r0, #1
    70d6:	f7ff fe87 	bl	6de8 <bt_gatt_foreach_attr>
    70da:	4b0b      	ldr	r3, [pc, #44]	; (7108 <bt_gatt_connected+0x40>)
    70dc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    70de:	b10c      	cbz	r4, 70e4 <bt_gatt_connected+0x1c>
    70e0:	3c28      	subs	r4, #40	; 0x28
    70e2:	b904      	cbnz	r4, 70e6 <bt_gatt_connected+0x1e>
    70e4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    70e6:	f104 0114 	add.w	r1, r4, #20
    70ea:	4628      	mov	r0, r5
    70ec:	f7fd fad8 	bl	46a0 <bt_conn_addr_le_cmp>
    70f0:	b928      	cbnz	r0, 70fe <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    70f2:	4623      	mov	r3, r4
    70f4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    70f6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    70f8:	4628      	mov	r0, r5
    70fa:	f7ff fb81 	bl	6800 <gatt_write_ccc.constprop.19>
    70fe:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    7100:	e7ed      	b.n	70de <bt_gatt_connected+0x16>
    7102:	bf00      	nop
    7104:	00006955 	.word	0x00006955
    7108:	2000060c 	.word	0x2000060c

0000710c <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    710c:	4603      	mov	r3, r0
{
    710e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7112:	4a21      	ldr	r2, [pc, #132]	; (7198 <bt_gatt_disconnected+0x8c>)
{
    7114:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7116:	f64f 71ff 	movw	r1, #65535	; 0xffff
    711a:	2001      	movs	r0, #1
    711c:	f7ff fe64 	bl	6de8 <bt_gatt_foreach_attr>
    7120:	4b1e      	ldr	r3, [pc, #120]	; (719c <bt_gatt_disconnected+0x90>)
    7122:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7124:	b3b3      	cbz	r3, 7194 <bt_gatt_disconnected+0x88>
    7126:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    712a:	d11b      	bne.n	7164 <bt_gatt_disconnected+0x58>
    712c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    7130:	4640      	mov	r0, r8
    7132:	f7fc ffa7 	bl	4084 <bt_addr_le_is_bonded>
    7136:	b118      	cbz	r0, 7140 <bt_gatt_disconnected+0x34>
    7138:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    713c:	07db      	lsls	r3, r3, #31
    713e:	d509      	bpl.n	7154 <bt_gatt_disconnected+0x48>
			params->value = 0;
    7140:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    7144:	4632      	mov	r2, r6
    7146:	4629      	mov	r1, r5
    7148:	4638      	mov	r0, r7
    714a:	f7ff fa93 	bl	6674 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    714e:	b9dc      	cbnz	r4, 7188 <bt_gatt_disconnected+0x7c>
    7150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    7154:	7d33      	ldrb	r3, [r6, #20]
    7156:	b1a3      	cbz	r3, 7182 <bt_gatt_disconnected+0x76>
    7158:	2207      	movs	r2, #7
    715a:	4641      	mov	r1, r8
    715c:	4650      	mov	r0, sl
    715e:	f7fa fd72 	bl	1c46 <memcpy>
    7162:	e00e      	b.n	7182 <bt_gatt_disconnected+0x76>
    7164:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    7166:	b104      	cbz	r4, 716a <bt_gatt_disconnected+0x5e>
    7168:	3c28      	subs	r4, #40	; 0x28
    716a:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    716c:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    7170:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    7172:	f106 0a14 	add.w	sl, r6, #20
    7176:	4651      	mov	r1, sl
    7178:	4638      	mov	r0, r7
    717a:	f7fd fa91 	bl	46a0 <bt_conn_addr_le_cmp>
    717e:	2800      	cmp	r0, #0
    7180:	d0d6      	beq.n	7130 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    7182:	f106 0528 	add.w	r5, r6, #40	; 0x28
    7186:	e7e2      	b.n	714e <bt_gatt_disconnected+0x42>
    7188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    718a:	b103      	cbz	r3, 718e <bt_gatt_disconnected+0x82>
    718c:	3b28      	subs	r3, #40	; 0x28
    718e:	4626      	mov	r6, r4
    7190:	461c      	mov	r4, r3
    7192:	e7ee      	b.n	7172 <bt_gatt_disconnected+0x66>
    7194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7198:	00006a3d 	.word	0x00006a3d
    719c:	2000060c 	.word	0x2000060c

000071a0 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    71a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    71a2:	4604      	mov	r4, r0
    71a4:	460d      	mov	r5, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    71a6:	f00c faff 	bl	137a8 <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    71aa:	8823      	ldrh	r3, [r4, #0]
    71ac:	9301      	str	r3, [sp, #4]
    71ae:	9400      	str	r4, [sp, #0]
    71b0:	4603      	mov	r3, r0
    71b2:	4a0b      	ldr	r2, [pc, #44]	; (71e0 <bt_smp_accept+0x40>)
    71b4:	490b      	ldr	r1, [pc, #44]	; (71e4 <bt_smp_accept+0x44>)
    71b6:	2007      	movs	r0, #7
    71b8:	f7fa ff0c 	bl	1fd4 <bt_log>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    71bc:	4b0a      	ldr	r3, [pc, #40]	; (71e8 <bt_smp_accept+0x48>)
    71be:	6818      	ldr	r0, [r3, #0]
    71c0:	b920      	cbnz	r0, 71cc <bt_smp_accept+0x2c>
			continue;
		}

		smp->chan.ops = &ops;
    71c2:	4a0a      	ldr	r2, [pc, #40]	; (71ec <bt_smp_accept+0x4c>)
    71c4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    71c6:	602b      	str	r3, [r5, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    71c8:	b003      	add	sp, #12
    71ca:	bd30      	pop	{r4, r5, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    71cc:	2003      	movs	r0, #3
    71ce:	4623      	mov	r3, r4
    71d0:	4a03      	ldr	r2, [pc, #12]	; (71e0 <bt_smp_accept+0x40>)
    71d2:	4907      	ldr	r1, [pc, #28]	; (71f0 <bt_smp_accept+0x50>)
    71d4:	f7fa fefe 	bl	1fd4 <bt_log>
	return -ENOMEM;
    71d8:	f06f 000b 	mvn.w	r0, #11
    71dc:	e7f4      	b.n	71c8 <bt_smp_accept+0x28>
    71de:	bf00      	nop
    71e0:	00016202 	.word	0x00016202
    71e4:	00016210 	.word	0x00016210
    71e8:	20000614 	.word	0x20000614
    71ec:	20003d38 	.word	0x20003d38
    71f0:	0001622b 	.word	0x0001622b

000071f4 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    71f4:	2100      	movs	r1, #0
{
    71f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    71fa:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    71fc:	4608      	mov	r0, r1
    71fe:	f7fd ffe2 	bl	51c6 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7202:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7206:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7208:	2101      	movs	r1, #1
    720a:	4630      	mov	r0, r6
    720c:	f00b fa76 	bl	126fc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    7210:	2505      	movs	r5, #5
    7212:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7214:	2101      	movs	r1, #1
    7216:	4630      	mov	r0, r6
    7218:	f00b fa70 	bl	126fc <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    721c:	7005      	strb	r5, [r0, #0]
    721e:	4622      	mov	r2, r4
    7220:	4638      	mov	r0, r7
    7222:	2300      	movs	r3, #0
    7224:	2106      	movs	r1, #6
}
    7226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    722a:	f7fd bfcf 	b.w	51cc <bt_l2cap_send_cb>

0000722e <bt_smp_sign_verify>:
    722e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7232:	4770      	bx	lr

00007234 <bt_smp_sign>:
}
    7234:	f06f 0022 	mvn.w	r0, #34	; 0x22
    7238:	4770      	bx	lr
	...

0000723c <bt_smp_init>:

int bt_smp_init(void)
{
    723c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    723e:	4802      	ldr	r0, [pc, #8]	; (7248 <bt_smp_init+0xc>)
    7240:	f7fd ff12 	bl	5068 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    7244:	2000      	movs	r0, #0
    7246:	bd08      	pop	{r3, pc}
    7248:	20003d2c 	.word	0x20003d2c

0000724c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    724c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    724e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7250:	1dc3      	adds	r3, r0, #7
{
    7252:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7254:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7258:	1e50      	subs	r0, r2, #1
{
    725a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    725c:	b280      	uxth	r0, r0
{
    725e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7260:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7262:	2100      	movs	r1, #0
    7264:	2204      	movs	r2, #4
    7266:	fb06 5000 	mla	r0, r6, r0, r5
    726a:	f7fa fd18 	bl	1c9e <memset>
    726e:	3c02      	subs	r4, #2
    7270:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    7272:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7276:	42bc      	cmp	r4, r7
    7278:	d101      	bne.n	727e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    727a:	b003      	add	sp, #12
    727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    727e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    7282:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7284:	2204      	movs	r2, #4
    7286:	1b80      	subs	r0, r0, r6
    7288:	eb0d 0102 	add.w	r1, sp, r2
    728c:	4428      	add	r0, r5
    728e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7290:	9301      	str	r3, [sp, #4]
    7292:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7294:	f7fa fcd7 	bl	1c46 <memcpy>
    7298:	e7ed      	b.n	7276 <mem_init+0x2a>

0000729a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    729a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    729c:	6805      	ldr	r5, [r0, #0]
{
    729e:	4606      	mov	r6, r0
	if (*mem_head) {
    72a0:	b195      	cbz	r5, 72c8 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    72a2:	1deb      	adds	r3, r5, #7
    72a4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    72a8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    72aa:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    72ac:	4629      	mov	r1, r5
    72ae:	eb0d 0002 	add.w	r0, sp, r2
    72b2:	f7fa fcc8 	bl	1c46 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    72b6:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    72b8:	3c01      	subs	r4, #1
    72ba:	b2a4      	uxth	r4, r4
		if (head) {
    72bc:	b11b      	cbz	r3, 72c6 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    72be:	1dda      	adds	r2, r3, #7
    72c0:	f022 0203 	bic.w	r2, r2, #3
    72c4:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    72c6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    72c8:	4628      	mov	r0, r5
    72ca:	b002      	add	sp, #8
    72cc:	bd70      	pop	{r4, r5, r6, pc}

000072ce <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    72ce:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    72d0:	680c      	ldr	r4, [r1, #0]
{
    72d2:	4606      	mov	r6, r0
    72d4:	460d      	mov	r5, r1
	if (*mem_head) {
    72d6:	b11c      	cbz	r4, 72e0 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    72d8:	1de3      	adds	r3, r4, #7
    72da:	f023 0303 	bic.w	r3, r3, #3
    72de:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    72e0:	2204      	movs	r2, #4
    72e2:	4629      	mov	r1, r5
    72e4:	4630      	mov	r0, r6
    72e6:	f7fa fcae 	bl	1c46 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    72ea:	1df2      	adds	r2, r6, #7
    72ec:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    72f0:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    72f2:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    72f4:	602e      	str	r6, [r5, #0]
    72f6:	bd70      	pop	{r4, r5, r6, pc}

000072f8 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    72f8:	b118      	cbz	r0, 7302 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    72fa:	3007      	adds	r0, #7
    72fc:	f020 0003 	bic.w	r0, r0, #3
    7300:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    7302:	4770      	bx	lr

00007304 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    7304:	fb02 0001 	mla	r0, r2, r1, r0
    7308:	4770      	bx	lr

0000730a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    730a:	1a40      	subs	r0, r0, r1
    730c:	b280      	uxth	r0, r0
}
    730e:	fbb0 f0f2 	udiv	r0, r0, r2
    7312:	4770      	bx	lr

00007314 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7314:	b510      	push	{r4, lr}
	src += len;
    7316:	4411      	add	r1, r2
    7318:	3801      	subs	r0, #1
	while (len--) {
    731a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    731e:	3a01      	subs	r2, #1
    7320:	b292      	uxth	r2, r2
    7322:	429a      	cmp	r2, r3
    7324:	d100      	bne.n	7328 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7326:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7328:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    732c:	f800 4f01 	strb.w	r4, [r0, #1]!
    7330:	e7f5      	b.n	731e <mem_rcopy+0xa>

00007332 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7332:	4401      	add	r1, r0
	while (len--) {
    7334:	4288      	cmp	r0, r1
    7336:	d101      	bne.n	733c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7338:	2000      	movs	r0, #0
    733a:	4770      	bx	lr
		if (*src++) {
    733c:	f810 3b01 	ldrb.w	r3, [r0], #1
    7340:	2b00      	cmp	r3, #0
    7342:	d0f7      	beq.n	7334 <mem_nz+0x2>
			return 1;
    7344:	2001      	movs	r0, #1
}
    7346:	4770      	bx	lr

00007348 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7348:	6010      	str	r0, [r2, #0]
    734a:	6008      	str	r0, [r1, #0]

	return link;
}
    734c:	4770      	bx	lr

0000734e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    734e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7350:	6814      	ldr	r4, [r2, #0]
    7352:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7354:	6814      	ldr	r4, [r2, #0]
    7356:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7358:	6010      	str	r0, [r2, #0]

	return link;
}
    735a:	bd10      	pop	{r4, pc}

0000735c <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    735c:	4288      	cmp	r0, r1
    735e:	d003      	beq.n	7368 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7360:	b11a      	cbz	r2, 736a <memq_peek+0xe>
		*mem = head->mem;
    7362:	6843      	ldr	r3, [r0, #4]
    7364:	6013      	str	r3, [r2, #0]
    7366:	4770      	bx	lr
		return NULL;
    7368:	2000      	movs	r0, #0
	}

	return head;
}
    736a:	4770      	bx	lr

0000736c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    736c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    736e:	4283      	cmp	r3, r0
    7370:	d009      	beq.n	7386 <memq_dequeue+0x1a>
	if (mem) {
    7372:	b122      	cbz	r2, 737e <memq_dequeue+0x12>
		*mem = head->mem;
    7374:	6858      	ldr	r0, [r3, #4]
    7376:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7378:	681a      	ldr	r2, [r3, #0]
    737a:	600a      	str	r2, [r1, #0]

	return link;
    737c:	e001      	b.n	7382 <memq_dequeue+0x16>
	if (!link) {
    737e:	2b00      	cmp	r3, #0
    7380:	d1fa      	bne.n	7378 <memq_dequeue+0xc>
}
    7382:	4618      	mov	r0, r3
    7384:	4770      	bx	lr
		return NULL;
    7386:	2300      	movs	r3, #0
    7388:	e7fb      	b.n	7382 <memq_dequeue+0x16>
	...

0000738c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7390:	4f11      	ldr	r7, [pc, #68]	; (73d8 <mayfly_init+0x4c>)
    7392:	f8df 9048 	ldr.w	r9, [pc, #72]	; 73dc <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7396:	2604      	movs	r6, #4
	while (callee_id--) {
    7398:	3e01      	subs	r6, #1
    739a:	b2f6      	uxtb	r6, r6
    739c:	2eff      	cmp	r6, #255	; 0xff
    739e:	d019      	beq.n	73d4 <mayfly_init+0x48>
    73a0:	b233      	sxth	r3, r6
    73a2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    73a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    73aa:	011d      	lsls	r5, r3, #4
    73ac:	2404      	movs	r4, #4
    73ae:	f04f 0a0c 	mov.w	sl, #12
    73b2:	e00a      	b.n	73ca <mayfly_init+0x3e>
    73b4:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    73b8:	1d0a      	adds	r2, r1, #4
    73ba:	eb04 0008 	add.w	r0, r4, r8
    73be:	443a      	add	r2, r7
    73c0:	4439      	add	r1, r7
    73c2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    73c6:	f7ff ffbf 	bl	7348 <memq_init>
		while (caller_id--) {
    73ca:	3c01      	subs	r4, #1
    73cc:	b2e4      	uxtb	r4, r4
    73ce:	2cff      	cmp	r4, #255	; 0xff
    73d0:	d1f0      	bne.n	73b4 <mayfly_init+0x28>
    73d2:	e7e1      	b.n	7398 <mayfly_init+0xc>
    73d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73d8:	20000728 	.word	0x20000728
    73dc:	200006a8 	.word	0x200006a8

000073e0 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    73e0:	b4f0      	push	{r4, r5, r6, r7}
    73e2:	4b12      	ldr	r3, [pc, #72]	; (742c <mayfly_enable+0x4c>)
    73e4:	4605      	mov	r5, r0
    73e6:	460f      	mov	r7, r1
    73e8:	260c      	movs	r6, #12
    73ea:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    73ec:	b172      	cbz	r2, 740c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    73ee:	4361      	muls	r1, r4
    73f0:	fb06 1400 	mla	r4, r6, r0, r1
    73f4:	4423      	add	r3, r4
    73f6:	7a59      	ldrb	r1, [r3, #9]
    73f8:	7a18      	ldrb	r0, [r3, #8]
    73fa:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    73fc:	bf04      	itt	eq
    73fe:	3101      	addeq	r1, #1
    7400:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    7402:	4628      	mov	r0, r5
    7404:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    7406:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7408:	f00a bfb2 	b.w	12370 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    740c:	434c      	muls	r4, r1
    740e:	fb06 4400 	mla	r4, r6, r0, r4
    7412:	4423      	add	r3, r4
    7414:	7a9c      	ldrb	r4, [r3, #10]
    7416:	7ada      	ldrb	r2, [r3, #11]
    7418:	42a2      	cmp	r2, r4
    741a:	d104      	bne.n	7426 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    741c:	3201      	adds	r2, #1
    741e:	729a      	strb	r2, [r3, #10]
}
    7420:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7422:	f00a bfed 	b.w	12400 <mayfly_pend>
}
    7426:	bcf0      	pop	{r4, r5, r6, r7}
    7428:	4770      	bx	lr
    742a:	bf00      	nop
    742c:	20000728 	.word	0x20000728

00007430 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7432:	4605      	mov	r5, r0
    7434:	460e      	mov	r6, r1
    7436:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7438:	b18a      	cbz	r2, 745e <mayfly_enqueue+0x2e>
    743a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    743c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    743e:	7820      	ldrb	r0, [r4, #0]
    7440:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    7442:	f010 0703 	ands.w	r7, r0, #3
    7446:	d029      	beq.n	749c <mayfly_enqueue+0x6c>
		if (chain) {
    7448:	b303      	cbz	r3, 748c <mayfly_enqueue+0x5c>
			if (state != 1) {
    744a:	2f01      	cmp	r7, #1
    744c:	d039      	beq.n	74c2 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    744e:	3201      	adds	r2, #1
    7450:	b2d2      	uxtb	r2, r2
    7452:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7454:	4631      	mov	r1, r6
    7456:	4628      	mov	r0, r5
    7458:	f00a ffd2 	bl	12400 <mayfly_pend>
    745c:	e01c      	b.n	7498 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    745e:	f00a ffbd 	bl	123dc <mayfly_prio_is_equal>
    7462:	2800      	cmp	r0, #0
    7464:	d0e9      	beq.n	743a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7466:	4631      	mov	r1, r6
    7468:	4628      	mov	r0, r5
    746a:	f00a ff9d 	bl	123a8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    746e:	2800      	cmp	r0, #0
    7470:	d0e3      	beq.n	743a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7472:	2330      	movs	r3, #48	; 0x30
    7474:	220c      	movs	r2, #12
    7476:	4373      	muls	r3, r6
    7478:	fb02 3305 	mla	r3, r2, r5, r3
    747c:	4a12      	ldr	r2, [pc, #72]	; (74c8 <mayfly_enqueue+0x98>)
    747e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7480:	7a93      	ldrb	r3, [r2, #10]
    7482:	7ad2      	ldrb	r2, [r2, #11]
    7484:	1a9b      	subs	r3, r3, r2
    7486:	bf18      	it	ne
    7488:	2301      	movne	r3, #1
    748a:	e7d7      	b.n	743c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    748c:	3202      	adds	r2, #2
    748e:	b2d2      	uxtb	r2, r2
    7490:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7492:	68e3      	ldr	r3, [r4, #12]
    7494:	68a0      	ldr	r0, [r4, #8]
    7496:	4798      	blx	r3
		return 0;
    7498:	2000      	movs	r0, #0
    749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    749c:	2b00      	cmp	r3, #0
    749e:	d0f8      	beq.n	7492 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    74a0:	3201      	adds	r2, #1
    74a2:	b2d2      	uxtb	r2, r2
    74a4:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    74a6:	2304      	movs	r3, #4
    74a8:	2230      	movs	r2, #48	; 0x30
    74aa:	fb12 3206 	smlabb	r2, r2, r6, r3
    74ae:	230c      	movs	r3, #12
    74b0:	fb13 2305 	smlabb	r3, r3, r5, r2
    74b4:	4a04      	ldr	r2, [pc, #16]	; (74c8 <mayfly_enqueue+0x98>)
    74b6:	6860      	ldr	r0, [r4, #4]
    74b8:	441a      	add	r2, r3
    74ba:	4621      	mov	r1, r4
    74bc:	f7ff ff47 	bl	734e <memq_enqueue>
    74c0:	e7c8      	b.n	7454 <mayfly_enqueue+0x24>
			return 1;
    74c2:	4638      	mov	r0, r7

	return 0;
}
    74c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74c6:	bf00      	nop
    74c8:	20000728 	.word	0x20000728

000074cc <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    74cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    74d4:	b089      	sub	sp, #36	; 0x24
    74d6:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    74d8:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    74dc:	4e43      	ldr	r6, [pc, #268]	; (75ec <mayfly_run+0x120>)
    74de:	9304      	str	r3, [sp, #16]
{
    74e0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    74e2:	2404      	movs	r4, #4
	u8_t disable = 0;
    74e4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    74e8:	3c01      	subs	r4, #1
    74ea:	b2e4      	uxtb	r4, r4
    74ec:	2cff      	cmp	r4, #255	; 0xff
    74ee:	d10b      	bne.n	7508 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    74f0:	9b01      	ldr	r3, [sp, #4]
    74f2:	2b00      	cmp	r3, #0
    74f4:	d076      	beq.n	75e4 <mayfly_run+0x118>
    74f6:	f1b8 0f00 	cmp.w	r8, #0
    74fa:	d173      	bne.n	75e4 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    74fc:	4642      	mov	r2, r8
    74fe:	4629      	mov	r1, r5
    7500:	4628      	mov	r0, r5
    7502:	f00a ff35 	bl	12370 <mayfly_enable_cb>
    7506:	e06d      	b.n	75e4 <mayfly_run+0x118>
		struct mayfly *m = 0;
    7508:	f10d 0b20 	add.w	fp, sp, #32
    750c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    750e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    7510:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7514:	f04f 0930 	mov.w	r9, #48	; 0x30
    7518:	fb07 f304 	mul.w	r3, r7, r4
    751c:	fb09 3005 	mla	r0, r9, r5, r3
    7520:	1831      	adds	r1, r6, r0
    7522:	465a      	mov	r2, fp
    7524:	6849      	ldr	r1, [r1, #4]
    7526:	5830      	ldr	r0, [r6, r0]
    7528:	9302      	str	r3, [sp, #8]
    752a:	f7ff ff17 	bl	735c <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    752e:	9b04      	ldr	r3, [sp, #16]
    7530:	fb17 3704 	smlabb	r7, r7, r4, r3
    7534:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7536:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7538:	9303      	str	r3, [sp, #12]
		while (link) {
    753a:	f1ba 0f00 	cmp.w	sl, #0
    753e:	d119      	bne.n	7574 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7540:	2230      	movs	r2, #48	; 0x30
    7542:	230c      	movs	r3, #12
    7544:	436a      	muls	r2, r5
    7546:	fb03 2204 	mla	r2, r3, r4, r2
    754a:	4432      	add	r2, r6
    754c:	7a91      	ldrb	r1, [r2, #10]
    754e:	7ad0      	ldrb	r0, [r2, #11]
    7550:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7552:	bf1e      	ittt	ne
    7554:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7556:	2201      	movne	r2, #1
    7558:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    755a:	2230      	movs	r2, #48	; 0x30
    755c:	436a      	muls	r2, r5
    755e:	fb03 2304 	mla	r3, r3, r4, r2
    7562:	4433      	add	r3, r6
    7564:	7a1a      	ldrb	r2, [r3, #8]
    7566:	7a59      	ldrb	r1, [r3, #9]
    7568:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    756a:	bf1c      	itt	ne
    756c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    756e:	f04f 0801 	movne.w	r8, #1
    7572:	e7b9      	b.n	74e8 <mayfly_run+0x1c>
			req = m->_req;
    7574:	9b07      	ldr	r3, [sp, #28]
    7576:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7578:	785a      	ldrb	r2, [r3, #1]
    757a:	1abf      	subs	r7, r7, r2
    757c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7580:	2f01      	cmp	r7, #1
    7582:	d104      	bne.n	758e <mayfly_run+0xc2>
				m->_ack--;
    7584:	3a01      	subs	r2, #1
    7586:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7588:	6898      	ldr	r0, [r3, #8]
    758a:	68da      	ldr	r2, [r3, #12]
    758c:	4790      	blx	r2
			req = m->_req;
    758e:	9a07      	ldr	r2, [sp, #28]
    7590:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7592:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7594:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7596:	1a9a      	subs	r2, r3, r2
    7598:	f002 0203 	and.w	r2, r2, #3
    759c:	2a01      	cmp	r2, #1
    759e:	9305      	str	r3, [sp, #20]
    75a0:	d00d      	beq.n	75be <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    75a2:	9b02      	ldr	r3, [sp, #8]
    75a4:	9903      	ldr	r1, [sp, #12]
    75a6:	fb09 3005 	mla	r0, r9, r5, r3
    75aa:	4430      	add	r0, r6
    75ac:	2200      	movs	r2, #0
    75ae:	6840      	ldr	r0, [r0, #4]
    75b0:	f7ff fedc 	bl	736c <memq_dequeue>
				m->_link = link;
    75b4:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    75b6:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    75b8:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    75bc:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    75be:	9b02      	ldr	r3, [sp, #8]
    75c0:	fb09 3305 	mla	r3, r9, r5, r3
    75c4:	18f1      	adds	r1, r6, r3
    75c6:	465a      	mov	r2, fp
    75c8:	6849      	ldr	r1, [r1, #4]
    75ca:	58f0      	ldr	r0, [r6, r3]
    75cc:	f7ff fec6 	bl	735c <memq_peek>
			if (state == 1) {
    75d0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    75d2:	4682      	mov	sl, r0
			if (state == 1) {
    75d4:	d1b1      	bne.n	753a <mayfly_run+0x6e>
				if (caller_id || link) {
    75d6:	b90c      	cbnz	r4, 75dc <mayfly_run+0x110>
    75d8:	2800      	cmp	r0, #0
    75da:	d0b1      	beq.n	7540 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    75dc:	4629      	mov	r1, r5
    75de:	4628      	mov	r0, r5
    75e0:	f00a ff0e 	bl	12400 <mayfly_pend>
	}
}
    75e4:	b009      	add	sp, #36	; 0x24
    75e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75ea:	bf00      	nop
    75ec:	20000728 	.word	0x20000728

000075f0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    75f0:	b510      	push	{r4, lr}
    75f2:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    75f4:	2000      	movs	r0, #0

	while (octets_len--) {
    75f6:	3901      	subs	r1, #1
    75f8:	b2c9      	uxtb	r1, r1
    75fa:	29ff      	cmp	r1, #255	; 0xff
    75fc:	d100      	bne.n	7600 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    75fe:	bd10      	pop	{r4, pc}
		bite = *octets;
    7600:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7604:	2b00      	cmp	r3, #0
    7606:	d0f6      	beq.n	75f6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7608:	1e5c      	subs	r4, r3, #1
			one_count++;
    760a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    760c:	4023      	ands	r3, r4
			one_count++;
    760e:	b2c0      	uxtb	r0, r0
    7610:	e7f8      	b.n	7604 <util_ones_count_get+0x14>

00007612 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7612:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7614:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7616:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7618:	461a      	mov	r2, r3
	total = 0;
    761a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    761c:	2aff      	cmp	r2, #255	; 0xff
    761e:	d101      	bne.n	7624 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7620:	2000      	movs	r0, #0
    7622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7624:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7628:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    762a:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    762e:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7632:	d004      	beq.n	763e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7634:	68b3      	ldr	r3, [r6, #8]
    7636:	441c      	add	r4, r3
		current = ticker_current->next;
    7638:	4613      	mov	r3, r2
    763a:	463a      	mov	r2, r7
    763c:	e7ee      	b.n	761c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    763e:	4293      	cmp	r3, r2
    7640:	d100      	bne.n	7644 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7642:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7644:	b21b      	sxth	r3, r3
    7646:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    764a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    764c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    764e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7652:	7833      	ldrb	r3, [r6, #0]
    7654:	2bff      	cmp	r3, #255	; 0xff
    7656:	d006      	beq.n	7666 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    765c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7660:	689a      	ldr	r2, [r3, #8]
    7662:	4402      	add	r2, r0
    7664:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7666:	4420      	add	r0, r4
    7668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000766a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    766a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    766c:	1a55      	subs	r5, r2, r1
    766e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7672:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7674:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7676:	d109      	bne.n	768c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7678:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    767c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    767e:	42a2      	cmp	r2, r4
    7680:	d90e      	bls.n	76a0 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7682:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7684:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7686:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7688:	6144      	str	r4, [r0, #20]
    768a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    768c:	1a8a      	subs	r2, r1, r2
    768e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7692:	4293      	cmp	r3, r2
    7694:	d901      	bls.n	769a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7696:	1a9a      	subs	r2, r3, r2
    7698:	e7f1      	b.n	767e <ticks_to_expire_prep+0x14>
    769a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    769c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    769e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    76a0:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    76a2:	2200      	movs	r2, #0
    76a4:	e7ef      	b.n	7686 <ticks_to_expire_prep+0x1c>

000076a6 <ticker_job_op_cb>:
{
    76a6:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    76a8:	2200      	movs	r2, #0
    76aa:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    76ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    76ae:	6259      	str	r1, [r3, #36]	; 0x24
{
    76b0:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    76b2:	b10a      	cbz	r2, 76b8 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    76b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    76b6:	4710      	bx	r2
    76b8:	4770      	bx	lr

000076ba <ticker_worker>:
{
    76ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    76be:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    76c0:	2301      	movs	r3, #1
{
    76c2:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    76c4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    76c6:	2d00      	cmp	r5, #0
    76c8:	d14c      	bne.n	7764 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    76ca:	7f43      	ldrb	r3, [r0, #29]
    76cc:	2bff      	cmp	r3, #255	; 0xff
    76ce:	d102      	bne.n	76d6 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    76d0:	77c5      	strb	r5, [r0, #31]
		return;
    76d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    76d6:	f00a f9b5 	bl	11a44 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    76da:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    76dc:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    76de:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    76e2:	1bc7      	subs	r7, r0, r7
    76e4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    76e8:	2eff      	cmp	r6, #255	; 0xff
    76ea:	d006      	beq.n	76fa <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    76ec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    76f0:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    76f4:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    76f6:	429f      	cmp	r7, r3
    76f8:	d218      	bcs.n	772c <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    76fa:	7aa2      	ldrb	r2, [r4, #10]
    76fc:	7ae3      	ldrb	r3, [r4, #11]
    76fe:	4293      	cmp	r3, r2
    7700:	d105      	bne.n	770e <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7702:	3301      	adds	r3, #1
    7704:	b2db      	uxtb	r3, r3
			last = 0;
    7706:	2b02      	cmp	r3, #2
    7708:	bf08      	it	eq
    770a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    770c:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    770e:	7ae3      	ldrb	r3, [r4, #11]
    7710:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7714:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7716:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7718:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    771a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    771c:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    771e:	46ac      	mov	ip, r5
    7720:	4623      	mov	r3, r4
    7722:	2104      	movs	r1, #4
    7724:	2003      	movs	r0, #3
}
    7726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    772a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    772c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    772e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7730:	788a      	ldrb	r2, [r1, #2]
    7732:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7734:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7738:	1a9b      	subs	r3, r3, r2
    773a:	b2db      	uxtb	r3, r3
    773c:	2b01      	cmp	r3, #1
    773e:	d1d3      	bne.n	76e8 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7740:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7744:	3a01      	subs	r2, #1
    7746:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7748:	f1b9 0f00 	cmp.w	r9, #0
    774c:	d0cc      	beq.n	76e8 <ticker_worker+0x2e>
					   ticks_expired -
    774e:	6948      	ldr	r0, [r1, #20]
    7750:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7752:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7754:	1a28      	subs	r0, r5, r0
    7756:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7758:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    775c:	690b      	ldr	r3, [r1, #16]
    775e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7760:	47c8      	blx	r9
    7762:	e7c1      	b.n	76e8 <ticker_worker+0x2e>
    7764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007768 <ticker_job>:
{
    7768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    776c:	7fc2      	ldrb	r2, [r0, #31]
{
    776e:	b093      	sub	sp, #76	; 0x4c
    7770:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7772:	2a00      	cmp	r2, #0
    7774:	f040 83ba 	bne.w	7eec <ticker_job+0x784>
	ticks_previous = instance->ticks_current;
    7778:	6943      	ldr	r3, [r0, #20]
    777a:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    777c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    777e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7780:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7782:	7ac0      	ldrb	r0, [r0, #11]
    7784:	4298      	cmp	r0, r3
    7786:	f000 808f 	beq.w	78a8 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    778a:	440b      	add	r3, r1
    778c:	b2db      	uxtb	r3, r3
			first = 0;
    778e:	2b02      	cmp	r3, #2
    7790:	bf08      	it	eq
    7792:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7794:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7798:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    779c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    779e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    77a2:	9b05      	ldr	r3, [sp, #20]
    77a4:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    77a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    77aa:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    77ae:	f89b 301d 	ldrb.w	r3, [fp, #29]
    77b2:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    77b4:	f8db 3000 	ldr.w	r3, [fp]
    77b8:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    77ba:	f8db 3004 	ldr.w	r3, [fp, #4]
    77be:	930b      	str	r3, [sp, #44]	; 0x2c
    77c0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    77c4:	3b01      	subs	r3, #1
    77c6:	b2db      	uxtb	r3, r3
    77c8:	9302      	str	r3, [sp, #8]
	pending = 0;
    77ca:	2300      	movs	r3, #0
    77cc:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    77ce:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    77d2:	9b02      	ldr	r3, [sp, #8]
    77d4:	2bff      	cmp	r3, #255	; 0xff
    77d6:	d16a      	bne.n	78ae <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    77d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    77dc:	9a03      	ldr	r2, [sp, #12]
    77de:	1a9b      	subs	r3, r3, r2
    77e0:	bf18      	it	ne
    77e2:	2301      	movne	r3, #1
    77e4:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	b1e3      	cbz	r3, 7824 <ticker_job+0xbc>
	node = &instance->node[0];
    77ea:	f8db 3000 	ldr.w	r3, [fp]
    77ee:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    77f0:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    77f4:	f89b 601d 	ldrb.w	r6, [fp, #29]
    77f8:	2eff      	cmp	r6, #255	; 0xff
    77fa:	d00c      	beq.n	7816 <ticker_job+0xae>
		ticker = &node[id_expired];
    77fc:	b237      	sxth	r7, r6
    77fe:	9b04      	ldr	r3, [sp, #16]
    7800:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7804:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7808:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    780a:	4545      	cmp	r5, r8
    780c:	f240 8136 	bls.w	7a7c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7810:	eba5 0508 	sub.w	r5, r5, r8
    7814:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7816:	9b02      	ldr	r3, [sp, #8]
    7818:	9a01      	ldr	r2, [sp, #4]
    781a:	9903      	ldr	r1, [sp, #12]
    781c:	42b1      	cmp	r1, r6
    781e:	bf18      	it	ne
    7820:	4613      	movne	r3, r2
    7822:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    7824:	f8db 3000 	ldr.w	r3, [fp]
    7828:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    782a:	f8db 3004 	ldr.w	r3, [fp, #4]
    782e:	9310      	str	r3, [sp, #64]	; 0x40
    7830:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7834:	3b01      	subs	r3, #1
    7836:	b2db      	uxtb	r3, r3
    7838:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    783a:	9b01      	ldr	r3, [sp, #4]
    783c:	2bff      	cmp	r3, #255	; 0xff
    783e:	f040 8170 	bne.w	7b22 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7842:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7846:	9a03      	ldr	r2, [sp, #12]
    7848:	4293      	cmp	r3, r2
	if (!pending) {
    784a:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    784c:	f040 8345 	bne.w	7eda <ticker_job+0x772>
	if (!pending) {
    7850:	b95b      	cbnz	r3, 786a <ticker_job+0x102>
    7852:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7856:	f8db 3004 	ldr.w	r3, [fp, #4]
    785a:	9301      	str	r3, [sp, #4]
    785c:	3c01      	subs	r4, #1
    785e:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7860:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7864:	2cff      	cmp	r4, #255	; 0xff
    7866:	f040 82a0 	bne.w	7daa <ticker_job+0x642>
	instance->job_guard = 0;
    786a:	2300      	movs	r3, #0
    786c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7870:	9b02      	ldr	r3, [sp, #8]
    7872:	b14b      	cbz	r3, 7888 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7874:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7878:	2bff      	cmp	r3, #255	; 0xff
    787a:	f040 82e9 	bne.w	7e50 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    787e:	f00a f8bf 	bl	11a00 <cntr_stop>
    7882:	b908      	cbnz	r0, 7888 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7884:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7888:	f89b 301f 	ldrb.w	r3, [fp, #31]
    788c:	2b00      	cmp	r3, #0
    788e:	f000 832d 	beq.w	7eec <ticker_job+0x784>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7892:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7896:	465b      	mov	r3, fp
    7898:	2201      	movs	r2, #1
    789a:	2103      	movs	r1, #3
    789c:	2004      	movs	r0, #4
    789e:	46a4      	mov	ip, r4
}
    78a0:	b013      	add	sp, #76	; 0x4c
    78a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    78a6:	4760      	bx	ip
		flag_elapsed = 0;
    78a8:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    78aa:	4690      	mov	r8, r2
    78ac:	e77f      	b.n	77ae <ticker_job+0x46>
		user = &users[count_user];
    78ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    78b0:	9a02      	ldr	r2, [sp, #8]
    78b2:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    78ba:	78f9      	ldrb	r1, [r7, #3]
    78bc:	78be      	ldrb	r6, [r7, #2]
    78be:	428e      	cmp	r6, r1
    78c0:	f000 80d7 	beq.w	7a72 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    78c4:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    78c6:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    78c8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    78cc:	0112      	lsls	r2, r2, #4
    78ce:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    78d0:	1c73      	adds	r3, r6, #1
    78d2:	b2db      	uxtb	r3, r3
				middle = 0;
    78d4:	4298      	cmp	r0, r3
    78d6:	bf08      	it	eq
    78d8:	2300      	moveq	r3, #0
			user->middle = middle;
    78da:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    78dc:	9b06      	ldr	r3, [sp, #24]
    78de:	5c9a      	ldrb	r2, [r3, r2]
    78e0:	2a03      	cmp	r2, #3
    78e2:	d9eb      	bls.n	78bc <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    78e4:	2a05      	cmp	r2, #5
    78e6:	d817      	bhi.n	7918 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    78e8:	7869      	ldrb	r1, [r5, #1]
    78ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    78ee:	930a      	str	r3, [sp, #40]	; 0x28
    78f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    78f2:	9b04      	ldr	r3, [sp, #16]
    78f4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    78f8:	7863      	ldrb	r3, [r4, #1]
    78fa:	78a0      	ldrb	r0, [r4, #2]
    78fc:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    78fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7902:	d009      	beq.n	7918 <ticker_job+0x1b0>
			    (state == 0) ||
    7904:	2a04      	cmp	r2, #4
    7906:	d10c      	bne.n	7922 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7908:	686a      	ldr	r2, [r5, #4]
    790a:	b952      	cbnz	r2, 7922 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    790c:	68aa      	ldr	r2, [r5, #8]
    790e:	b942      	cbnz	r2, 7922 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7910:	68ea      	ldr	r2, [r5, #12]
    7912:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7916:	d104      	bne.n	7922 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7918:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    791a:	4628      	mov	r0, r5
    791c:	f7ff fec3 	bl	76a6 <ticker_job_op_cb>
    7920:	e7cb      	b.n	78ba <ticker_job+0x152>
			if (state == 1) {
    7922:	2b01      	cmp	r3, #1
    7924:	f040 809b 	bne.w	7a5e <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7928:	4658      	mov	r0, fp
    792a:	f7ff fe72 	bl	7612 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    792e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7930:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7932:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7934:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7936:	f040 8084 	bne.w	7a42 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    793a:	f8db 3014 	ldr.w	r3, [fp, #20]
    793e:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    7940:	f00a f880 	bl	11a44 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7944:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    7946:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7948:	1ac3      	subs	r3, r0, r3
    794a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    794e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7950:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7952:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7954:	bf9e      	ittt	ls
    7956:	6962      	ldrls	r2, [r4, #20]
    7958:	1b92      	subls	r2, r2, r6
    795a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    795c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    795e:	bf96      	itet	ls
    7960:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7962:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7964:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7966:	b18a      	cbz	r2, 798c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7968:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    796a:	b179      	cbz	r1, 798c <ticker_job+0x224>
		user_op->params.update.lazy--;
    796c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7970:	fa1f fe8e 	uxth.w	lr, lr
    7974:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7978:	429a      	cmp	r2, r3
    797a:	d32b      	bcc.n	79d4 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    797c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7ca4 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7980:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7984:	45e6      	cmp	lr, ip
    7986:	d847      	bhi.n	7a18 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7988:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    798c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    798e:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    7990:	4413      	add	r3, r2
    7992:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7994:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7996:	6963      	ldr	r3, [r4, #20]
    7998:	4413      	add	r3, r2
    799a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    799c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    799e:	4620      	mov	r0, r4
    79a0:	f7ff fe63 	bl	766a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    79a4:	69a2      	ldr	r2, [r4, #24]
    79a6:	892b      	ldrh	r3, [r5, #8]
    79a8:	4413      	add	r3, r2
    79aa:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    79ac:	896a      	ldrh	r2, [r5, #10]
    79ae:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    79b0:	bf8c      	ite	hi
    79b2:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    79b4:	2300      	movls	r3, #0
    79b6:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    79b8:	7bab      	ldrb	r3, [r5, #14]
    79ba:	b103      	cbz	r3, 79be <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    79bc:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    79be:	9b04      	ldr	r3, [sp, #16]
    79c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    79c2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    79c6:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    79c8:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    79cc:	3301      	adds	r3, #1
    79ce:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    79d0:	2100      	movs	r1, #0
    79d2:	e7a2      	b.n	791a <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    79d4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    79d8:	45e6      	cmp	lr, ip
    79da:	d2cf      	bcs.n	797c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    79dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79de:	4eaf      	ldr	r6, [pc, #700]	; (7c9c <ticker_job+0x534>)
    79e0:	48af      	ldr	r0, [pc, #700]	; (7ca0 <ticker_job+0x538>)
    79e2:	198e      	adds	r6, r1, r6
    79e4:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    79e6:	bf81      	itttt	hi
    79e8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    79ec:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    79f0:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    79f4:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    79f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    79f8:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    79fa:	bf8c      	ite	hi
    79fc:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7a00:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7a04:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7a06:	4491      	add	r9, r2
			ticker->lazy_current--;
    7a08:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7a0c:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7a0e:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7a12:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7a16:	e7af      	b.n	7978 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7a18:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7a1a:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7a1c:	48a0      	ldr	r0, [pc, #640]	; (7ca0 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    7a1e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7a20:	499e      	ldr	r1, [pc, #632]	; (7c9c <ticker_job+0x534>)
    7a22:	1871      	adds	r1, r6, r1
    7a24:	4281      	cmp	r1, r0
	return 0;
    7a26:	bf8e      	itee	hi
    7a28:	2100      	movhi	r1, #0
		return 1;
    7a2a:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7a2c:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7a2e:	4411      	add	r1, r2
			ticker->lazy_current++;
    7a30:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7a34:	bf8c      	ite	hi
    7a36:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7a38:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7a3a:	440b      	add	r3, r1
			ticker->lazy_current++;
    7a3c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7a40:	e79e      	b.n	7980 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7a42:	78a3      	ldrb	r3, [r4, #2]
    7a44:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7a46:	786b      	ldrb	r3, [r5, #1]
    7a48:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7a4c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7a4e:	bf01      	itttt	eq
    7a50:	23ff      	moveq	r3, #255	; 0xff
    7a52:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7a56:	2300      	moveq	r3, #0
    7a58:	f8cb 3018 	streq.w	r3, [fp, #24]
    7a5c:	e7b8      	b.n	79d0 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7a5e:	2104      	movs	r1, #4
    7a60:	465b      	mov	r3, fp
    7a62:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7a66:	2201      	movs	r2, #1
    7a68:	4608      	mov	r0, r1
    7a6a:	47a0      	blx	r4
				pending = 1;
    7a6c:	2301      	movs	r3, #1
				user->middle = prev;
    7a6e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7a70:	9307      	str	r3, [sp, #28]
    7a72:	9b02      	ldr	r3, [sp, #8]
    7a74:	3b01      	subs	r3, #1
    7a76:	b2db      	uxtb	r3, r3
    7a78:	9302      	str	r3, [sp, #8]
    7a7a:	e6aa      	b.n	77d2 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7a7c:	f8db 3018 	ldr.w	r3, [fp, #24]
    7a80:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7a82:	bf29      	itett	cs
    7a84:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7a86:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7a88:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7a8c:	2300      	movcs	r3, #0
    7a8e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7a92:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7a94:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7a96:	b11b      	cbz	r3, 7aa0 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7a98:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7a9c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7aa0:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7aa2:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    7aa4:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7aa6:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7aaa:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    7aae:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7ab2:	f1be 0f00 	cmp.w	lr, #0
    7ab6:	d030      	beq.n	7b1a <ticker_job+0x3b2>
    7ab8:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7aba:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7ca0 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    7abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ac0:	6a21      	ldr	r1, [r4, #32]
    7ac2:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7ac4:	4975      	ldr	r1, [pc, #468]	; (7c9c <ticker_job+0x534>)
    7ac6:	1859      	adds	r1, r3, r1
    7ac8:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7aca:	bf9f      	itttt	ls
    7acc:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    7ad0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7ad4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7ad8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7ada:	bf92      	itee	ls
    7adc:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    7ade:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    7ae0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    7ae2:	4473      	add	r3, lr
			while (count--) {
    7ae4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7ae8:	441a      	add	r2, r3
			while (count--) {
    7aea:	d2e8      	bcs.n	7abe <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7aec:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    7aee:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7af0:	f8db 1014 	ldr.w	r1, [fp, #20]
    7af4:	eb03 0209 	add.w	r2, r3, r9
    7af8:	4620      	mov	r0, r4
    7afa:	f7ff fdb6 	bl	766a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7afe:	8ba3      	ldrh	r3, [r4, #28]
    7b00:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7b02:	2300      	movs	r3, #0
    7b04:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7b06:	9b04      	ldr	r3, [sp, #16]
    7b08:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7b0c:	7863      	ldrb	r3, [r4, #1]
    7b0e:	3301      	adds	r3, #1
    7b10:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7b12:	eba8 0805 	sub.w	r8, r8, r5
    7b16:	46b2      	mov	sl, r6
    7b18:	e66c      	b.n	77f4 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7b1a:	78a3      	ldrb	r3, [r4, #2]
    7b1c:	7063      	strb	r3, [r4, #1]
    7b1e:	4656      	mov	r6, sl
    7b20:	e7f7      	b.n	7b12 <ticker_job+0x3aa>
		user = &users[count_user];
    7b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b24:	9a01      	ldr	r2, [sp, #4]
    7b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7b2a:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    7b2c:	685b      	ldr	r3, [r3, #4]
    7b2e:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    7b30:	9b04      	ldr	r3, [sp, #16]
    7b32:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7b36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    7b3a:	f000 808e 	beq.w	7c5a <ticker_job+0x4f2>
				ticker = &node[id_insert];
    7b3e:	fa0f f38a 	sxth.w	r3, sl
    7b42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b46:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    7b48:	46d0      	mov	r8, sl
    7b4a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    7b4e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7b52:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7b54:	f8db 3000 	ldr.w	r3, [fp]
    7b58:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    7b5a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7b5c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    7b5e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7b60:	8be3      	ldrh	r3, [r4, #30]
    7b62:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7b64:	bf86      	itte	hi
    7b66:	1a9b      	subhi	r3, r3, r2
    7b68:	b29b      	uxthhi	r3, r3
		skip = 0;
    7b6a:	2300      	movls	r3, #0
    7b6c:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    7b6e:	fa0f f388 	sxth.w	r3, r8
    7b72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b76:	00db      	lsls	r3, r3, #3
    7b78:	9311      	str	r3, [sp, #68]	; 0x44
    7b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    7b7c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7b80:	f8db 0018 	ldr.w	r0, [fp, #24]
    7b84:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    7b86:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    7b8a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    7b8c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7b90:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7b94:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    7b96:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    7b98:	2bff      	cmp	r3, #255	; 0xff
    7b9a:	d007      	beq.n	7bac <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7b9c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7ba0:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7ba4:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7ba6:	4281      	cmp	r1, r0
    7ba8:	f200 80a9 	bhi.w	7cfe <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    7bac:	f8de 0018 	ldr.w	r0, [lr, #24]
    7bb0:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    7bb2:	eb01 0c00 	add.w	ip, r1, r0
    7bb6:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7bb8:	2eff      	cmp	r6, #255	; 0xff
    7bba:	f040 80ae 	bne.w	7d1a <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    7bbe:	980d      	ldr	r0, [sp, #52]	; 0x34
    7bc0:	b130      	cbz	r0, 7bd0 <ticker_job+0x468>
    7bc2:	9805      	ldr	r0, [sp, #20]
    7bc4:	4281      	cmp	r1, r0
    7bc6:	f0c0 80bf 	bcc.w	7d48 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7bca:	2eff      	cmp	r6, #255	; 0xff
    7bcc:	f040 818a 	bne.w	7ee4 <ticker_job+0x77c>
		if (previous == current) {
    7bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    7bd2:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    7bd6:	4283      	cmp	r3, r0
			node[previous].next = id;
    7bd8:	bf18      	it	ne
    7bda:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    7bde:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    7be2:	bf16      	itet	ne
    7be4:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7be8:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7bec:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    7bf0:	2bff      	cmp	r3, #255	; 0xff
    7bf2:	d006      	beq.n	7c02 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7bf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7bf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7bfc:	689a      	ldr	r2, [r3, #8]
    7bfe:	1a51      	subs	r1, r2, r1
    7c00:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    7c02:	78a3      	ldrb	r3, [r4, #2]
    7c04:	3301      	adds	r3, #1
    7c06:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7c08:	2100      	movs	r1, #0
			if (user_op) {
    7c0a:	2d00      	cmp	r5, #0
    7c0c:	d093      	beq.n	7b36 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    7c0e:	4628      	mov	r0, r5
    7c10:	f7ff fd49 	bl	76a6 <ticker_job_op_cb>
    7c14:	e78f      	b.n	7b36 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7c16:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c1c:	011b      	lsls	r3, r3, #4
    7c1e:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7c20:	f109 0201 	add.w	r2, r9, #1
    7c24:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7c28:	9a04      	ldr	r2, [sp, #16]
    7c2a:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7c2c:	454a      	cmp	r2, r9
    7c2e:	bf08      	it	eq
    7c30:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c36:	5cd3      	ldrb	r3, [r2, r3]
    7c38:	2b03      	cmp	r3, #3
    7c3a:	d10e      	bne.n	7c5a <ticker_job+0x4f2>
				id_insert = user_op->id;
    7c3c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7c40:	9b08      	ldr	r3, [sp, #32]
    7c42:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7c46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7c4a:	7862      	ldrb	r2, [r4, #1]
    7c4c:	78a3      	ldrb	r3, [r4, #2]
    7c4e:	429a      	cmp	r2, r3
    7c50:	d009      	beq.n	7c66 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7c52:	2101      	movs	r1, #1
    7c54:	4628      	mov	r0, r5
    7c56:	f7ff fd26 	bl	76a6 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    7c5a:	9b04      	ldr	r3, [sp, #16]
    7c5c:	789b      	ldrb	r3, [r3, #2]
    7c5e:	454b      	cmp	r3, r9
    7c60:	d1d9      	bne.n	7c16 <ticker_job+0x4ae>
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	e5e6      	b.n	7834 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7c66:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7c68:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    7c6c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7c6e:	692b      	ldr	r3, [r5, #16]
    7c70:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7c72:	8aab      	ldrh	r3, [r5, #20]
    7c74:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7c76:	69ab      	ldr	r3, [r5, #24]
    7c78:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7c7a:	69eb      	ldr	r3, [r5, #28]
    7c7c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7c7e:	6a2b      	ldr	r3, [r5, #32]
    7c80:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7c82:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7c84:	68ab      	ldr	r3, [r5, #8]
    7c86:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7c88:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7c8a:	686a      	ldr	r2, [r5, #4]
    7c8c:	4620      	mov	r0, r4
    7c8e:	f7ff fcec 	bl	766a <ticks_to_expire_prep>
	ticker->force = 1;
    7c92:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    7c94:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    7c96:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7c98:	70e3      	strb	r3, [r4, #3]
    7c9a:	e75b      	b.n	7b54 <ticker_job+0x3ec>
    7c9c:	ff172b5a 	.word	0xff172b5a
    7ca0:	7f172b59 	.word	0x7f172b59
    7ca4:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7ca8:	6860      	ldr	r0, [r4, #4]
    7caa:	2800      	cmp	r0, #0
    7cac:	d07b      	beq.n	7da6 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    7cae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7cb0:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7cb2:	4b90      	ldr	r3, [pc, #576]	; (7ef4 <ticker_job+0x78c>)
	ticker->remainder_current += ticker->remainder_periodic;
    7cb4:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7cb6:	4990      	ldr	r1, [pc, #576]	; (7ef8 <ticker_job+0x790>)
    7cb8:	18d3      	adds	r3, r2, r3
    7cba:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7cbc:	bf9c      	itt	ls
    7cbe:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    7cc2:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7cc6:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7cc8:	bf8b      	itete	hi
    7cca:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7ccc:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    7cd0:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    7cd2:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7cd4:	4403      	add	r3, r0
		return 1;
    7cd6:	bf98      	it	ls
    7cd8:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7cda:	4413      	add	r3, r2
			ticker->lazy_current++;
    7cdc:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7cde:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    7ce0:	3201      	adds	r2, #1
    7ce2:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    7ce4:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    7ce6:	4293      	cmp	r3, r2
    7ce8:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7cec:	bf89      	itett	hi
    7cee:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7cf0:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    7cf2:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7cf4:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7cf6:	bf9c      	itt	ls
    7cf8:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7cfa:	60a1      	strls	r1, [r4, #8]
    7cfc:	e73d      	b.n	7b7a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    7cfe:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7d00:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    7d02:	b946      	cbnz	r6, 7d16 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7d04:	9f05      	ldr	r7, [sp, #20]
    7d06:	42b8      	cmp	r0, r7
    7d08:	d200      	bcs.n	7d0c <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7d0a:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7d0c:	9309      	str	r3, [sp, #36]	; 0x24
    7d0e:	9605      	str	r6, [sp, #20]
    7d10:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7d14:	e740      	b.n	7b98 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7d16:	9306      	str	r3, [sp, #24]
    7d18:	e7f8      	b.n	7d0c <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7d1a:	b230      	sxth	r0, r6
    7d1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7d20:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7d24:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    7d26:	68bf      	ldr	r7, [r7, #8]
    7d28:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    7d2a:	4567      	cmp	r7, ip
    7d2c:	d20a      	bcs.n	7d44 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    7d2e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7d30:	69bf      	ldr	r7, [r7, #24]
    7d32:	2f00      	cmp	r7, #0
    7d34:	f47f af43 	bne.w	7bbe <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7d38:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7d3a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    7d3e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7d42:	e739      	b.n	7bb8 <ticker_job+0x450>
			return TICKER_NULL;
    7d44:	26ff      	movs	r6, #255	; 0xff
    7d46:	e73a      	b.n	7bbe <ticker_job+0x456>
	while (id_insert !=
    7d48:	9b06      	ldr	r3, [sp, #24]
    7d4a:	4598      	cmp	r8, r3
    7d4c:	f43f af59 	beq.w	7c02 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7d50:	9b06      	ldr	r3, [sp, #24]
    7d52:	2bff      	cmp	r3, #255	; 0xff
    7d54:	d0a8      	beq.n	7ca8 <ticker_job+0x540>
    7d56:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7d58:	b233      	sxth	r3, r6
    7d5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7d5e:	9305      	str	r3, [sp, #20]
    7d60:	9a05      	ldr	r2, [sp, #20]
    7d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d64:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7d68:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    7d6a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    7d6c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    7d6e:	bf88      	it	hi
    7d70:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7d72:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7d74:	bf8c      	ite	hi
    7d76:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7d78:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    7d7a:	2a00      	cmp	r2, #0
    7d7c:	d094      	beq.n	7ca8 <ticker_job+0x540>
    7d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7d80:	4293      	cmp	r3, r2
    7d82:	d891      	bhi.n	7ca8 <ticker_job+0x540>
			    skip_collide <= skip &&
    7d84:	78fa      	ldrb	r2, [r7, #3]
    7d86:	78e3      	ldrb	r3, [r4, #3]
    7d88:	429a      	cmp	r2, r3
    7d8a:	d28d      	bcs.n	7ca8 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    7d8c:	4631      	mov	r1, r6
    7d8e:	4658      	mov	r0, fp
    7d90:	f7ff fc3f 	bl	7612 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7d94:	78bb      	ldrb	r3, [r7, #2]
    7d96:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7d98:	9a05      	ldr	r2, [sp, #20]
    7d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    7d9c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    7d9e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    7da2:	46b2      	mov	sl, r6
    7da4:	e6e9      	b.n	7b7a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7da6:	2101      	movs	r1, #1
    7da8:	e72f      	b.n	7c0a <ticker_job+0x4a2>
		user = &users[count_user];
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7db0:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    7db2:	786b      	ldrb	r3, [r5, #1]
    7db4:	78ea      	ldrb	r2, [r5, #3]
    7db6:	429a      	cmp	r2, r3
    7db8:	d102      	bne.n	7dc0 <ticker_job+0x658>
    7dba:	3c01      	subs	r4, #1
    7dbc:	b2e4      	uxtb	r4, r4
    7dbe:	e551      	b.n	7864 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7dc4:	011b      	lsls	r3, r3, #4
    7dc6:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7dc8:	5cf3      	ldrb	r3, [r6, r3]
    7dca:	2b01      	cmp	r3, #1
    7dcc:	d025      	beq.n	7e1a <ticker_job+0x6b2>
    7dce:	2b02      	cmp	r3, #2
    7dd0:	d12a      	bne.n	7e28 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    7dd2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7dd6:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7dd8:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7ddc:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    7de0:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7de4:	28ff      	cmp	r0, #255	; 0xff
    7de6:	d004      	beq.n	7df2 <ticker_job+0x68a>
    7de8:	6819      	ldr	r1, [r3, #0]
    7dea:	f8db 7014 	ldr.w	r7, [fp, #20]
    7dee:	42b9      	cmp	r1, r7
    7df0:	d023      	beq.n	7e3a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7df2:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7df6:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7dfa:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7dfc:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    7dfe:	29ff      	cmp	r1, #255	; 0xff
    7e00:	d007      	beq.n	7e12 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7e02:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7e06:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7e0a:	6987      	ldr	r7, [r0, #24]
    7e0c:	6880      	ldr	r0, [r0, #8]
    7e0e:	b1df      	cbz	r7, 7e48 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7e10:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7e12:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7e16:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7e1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7e1c:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7e20:	b113      	cbz	r3, 7e28 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7e22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7e24:	2000      	movs	r0, #0
    7e26:	4798      	blx	r3
			first = user->first + 1;
    7e28:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7e2a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7e2c:	3301      	adds	r3, #1
    7e2e:	b2db      	uxtb	r3, r3
				first = 0;
    7e30:	429a      	cmp	r2, r3
    7e32:	bf08      	it	eq
    7e34:	2300      	moveq	r3, #0
			user->first = first;
    7e36:	706b      	strb	r3, [r5, #1]
    7e38:	e7bb      	b.n	7db2 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    7e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    7e3e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7e42:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7e46:	e7da      	b.n	7dfe <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7e48:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    7e4a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    7e4e:	e7d6      	b.n	7dfe <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7e50:	9b03      	ldr	r3, [sp, #12]
    7e52:	2bff      	cmp	r3, #255	; 0xff
    7e54:	d107      	bne.n	7e66 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7e56:	f009 fdf5 	bl	11a44 <cntr_cnt_get>
    7e5a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7e5c:	f009 fdc2 	bl	119e4 <cntr_start>
    7e60:	b908      	cbnz	r0, 7e66 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7e62:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7e66:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    7e6a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    7e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7e72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7e76:	260a      	movs	r6, #10
    7e78:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    7e7a:	f009 fde3 	bl	11a44 <cntr_cnt_get>
		cc = instance->ticks_current;
    7e7e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e82:	1b03      	subs	r3, r0, r4
    7e84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7e88:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    7e8a:	42ab      	cmp	r3, r5
    7e8c:	bf2c      	ite	cs
    7e8e:	18e4      	addcs	r4, r4, r3
    7e90:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    7e92:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7e96:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7e98:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7e9c:	4620      	mov	r0, r4
    7e9e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7ea0:	f009 fdd0 	bl	11a44 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7ea4:	1bc0      	subs	r0, r0, r7
    7ea6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7eaa:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7eac:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7eae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7eb2:	42a0      	cmp	r0, r4
    7eb4:	f67f ace8 	bls.w	7888 <ticker_job+0x120>
		LL_ASSERT(i);
    7eb8:	3e01      	subs	r6, #1
    7eba:	d1de      	bne.n	7e7a <ticker_job+0x712>
    7ebc:	4a0f      	ldr	r2, [pc, #60]	; (7efc <ticker_job+0x794>)
    7ebe:	4910      	ldr	r1, [pc, #64]	; (7f00 <ticker_job+0x798>)
    7ec0:	2003      	movs	r0, #3
    7ec2:	f7fa f887 	bl	1fd4 <bt_log>
    7ec6:	4040      	eors	r0, r0
    7ec8:	f380 8811 	msr	BASEPRI, r0
    7ecc:	f04f 0004 	mov.w	r0, #4
    7ed0:	df02      	svc	2
	instance->job_guard = 0;
    7ed2:	2300      	movs	r3, #0
    7ed4:	f88b 301e 	strb.w	r3, [fp, #30]
    7ed8:	e4cc      	b.n	7874 <ticker_job+0x10c>
	if (!pending) {
    7eda:	2b00      	cmp	r3, #0
    7edc:	d1f9      	bne.n	7ed2 <ticker_job+0x76a>
		flag_compare_update = 1;
    7ede:	2301      	movs	r3, #1
    7ee0:	9302      	str	r3, [sp, #8]
    7ee2:	e4b6      	b.n	7852 <ticker_job+0xea>
	while (id_insert !=
    7ee4:	45b0      	cmp	r8, r6
    7ee6:	f47f af37 	bne.w	7d58 <ticker_job+0x5f0>
    7eea:	e68a      	b.n	7c02 <ticker_job+0x49a>
}
    7eec:	b013      	add	sp, #76	; 0x4c
    7eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ef2:	bf00      	nop
    7ef4:	ff172b5a 	.word	0xff172b5a
    7ef8:	7f172b59 	.word	0x7f172b59
    7efc:	00016254 	.word	0x00016254
    7f00:	0001626e 	.word	0x0001626e

00007f04 <ticker_init>:
{
    7f04:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7f06:	4d1a      	ldr	r5, [pc, #104]	; (7f70 <ticker_init+0x6c>)
{
    7f08:	9f05      	ldr	r7, [sp, #20]
    7f0a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7f0e:	262c      	movs	r6, #44	; 0x2c
    7f10:	4346      	muls	r6, r0
    7f12:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7f16:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7f18:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7f1c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7f1e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7f22:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7f26:	3b01      	subs	r3, #1
    7f28:	b2db      	uxtb	r3, r3
    7f2a:	2bff      	cmp	r3, #255	; 0xff
    7f2c:	d111      	bne.n	7f52 <ticker_init+0x4e>
	if (count_op) {
    7f2e:	b9ec      	cbnz	r4, 7f6c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7f30:	222c      	movs	r2, #44	; 0x2c
    7f32:	fb02 5200 	mla	r2, r2, r0, r5
    7f36:	9908      	ldr	r1, [sp, #32]
    7f38:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    7f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f3c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7f3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7f40:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7f42:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7f44:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    7f46:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    7f48:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    7f4a:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7f4c:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7f4e:	4620      	mov	r0, r4
    7f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7f52:	b21a      	sxth	r2, r3
    7f54:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7f58:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7f5a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7f5e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7f62:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7f64:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7f68:	b2e4      	uxtb	r4, r4
    7f6a:	e7dc      	b.n	7f26 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7f6c:	2001      	movs	r0, #1
}
    7f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f70:	200007e8 	.word	0x200007e8

00007f74 <ticker_trigger>:
	instance = &_instance[instance_index];
    7f74:	4a07      	ldr	r2, [pc, #28]	; (7f94 <ticker_trigger+0x20>)
    7f76:	212c      	movs	r1, #44	; 0x2c
    7f78:	fb00 2301 	mla	r3, r0, r1, r2
{
    7f7c:	b410      	push	{r4}
	if (instance->sched_cb) {
    7f7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7f80:	b12c      	cbz	r4, 7f8e <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7f82:	46a4      	mov	ip, r4
    7f84:	2201      	movs	r2, #1
    7f86:	2103      	movs	r1, #3
    7f88:	2002      	movs	r0, #2
}
    7f8a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7f8c:	4760      	bx	ip
}
    7f8e:	bc10      	pop	{r4}
    7f90:	4770      	bx	lr
    7f92:	bf00      	nop
    7f94:	200007e8 	.word	0x200007e8

00007f98 <ticker_start>:
{
    7f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7f9c:	4f25      	ldr	r7, [pc, #148]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7f9e:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7fa2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7fa4:	fb08 7000 	mla	r0, r8, r0, r7
    7fa8:	fa0f fc81 	sxth.w	ip, r1
    7fac:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7fb0:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7fb4:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7fb8:	78f4      	ldrb	r4, [r6, #3]
    7fba:	1c65      	adds	r5, r4, #1
    7fbc:	b2ed      	uxtb	r5, r5
		last = 0;
    7fbe:	45ae      	cmp	lr, r5
    7fc0:	bf98      	it	ls
    7fc2:	2500      	movls	r5, #0
	if (last == user->first) {
    7fc4:	f896 e001 	ldrb.w	lr, [r6, #1]
    7fc8:	45ae      	cmp	lr, r5
    7fca:	d02f      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
	user_op = &user->user_op[user->last];
    7fcc:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7fd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7fd4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7fd8:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7fdc:	f04f 0a03 	mov.w	sl, #3
    7fe0:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7fe4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7fe6:	9b08      	ldr	r3, [sp, #32]
    7fe8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7fec:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ff0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ff4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7ff6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7ffa:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ffe:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    8000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8002:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8004:	2302      	movs	r3, #2
    8006:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    800a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    800e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8010:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8012:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8014:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8016:	6a03      	ldr	r3, [r0, #32]
    8018:	4608      	mov	r0, r1
    801a:	4798      	blx	r3
    801c:	fb09 7308 	mla	r3, r9, r8, r7
    8020:	2200      	movs	r2, #0
    8022:	2104      	movs	r1, #4
    8024:	47a8      	blx	r5
	return user_op->status;
    8026:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    802c:	2001      	movs	r0, #1
}
    802e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8032:	bf00      	nop
    8034:	200007e8 	.word	0x200007e8

00008038 <ticker_update>:
{
    8038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    803c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80d0 <ticker_update+0x98>
    8040:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    8044:	fb0a 8e00 	mla	lr, sl, r0, r8
    8048:	b20f      	sxth	r7, r1
    804a:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    804e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8050:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    8054:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    8058:	78c4      	ldrb	r4, [r0, #3]
    805a:	1c66      	adds	r6, r4, #1
    805c:	b2f6      	uxtb	r6, r6
		last = 0;
    805e:	42b5      	cmp	r5, r6
    8060:	bf98      	it	ls
    8062:	2600      	movls	r6, #0
	if (last == user->first) {
    8064:	7845      	ldrb	r5, [r0, #1]
    8066:	42b5      	cmp	r5, r6
    8068:	d02f      	beq.n	80ca <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    806a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    806e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8072:	0125      	lsls	r5, r4, #4
    8074:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8078:	2704      	movs	r7, #4
    807a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    807e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8080:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8084:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8086:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    808a:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    808c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8090:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    8092:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8096:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    8098:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    809c:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    809e:	2302      	movs	r3, #2
    80a0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    80a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80a4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    80a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    80a8:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    80aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    80ac:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    80ae:	f8de 3020 	ldr.w	r3, [lr, #32]
    80b2:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    80b6:	4608      	mov	r0, r1
    80b8:	4798      	blx	r3
    80ba:	fb09 830a 	mla	r3, r9, sl, r8
    80be:	2200      	movs	r2, #0
    80c0:	4639      	mov	r1, r7
    80c2:	47a8      	blx	r5
	return user_op->status;
    80c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    80ca:	2001      	movs	r0, #1
}
    80cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80d0:	200007e8 	.word	0x200007e8

000080d4 <ticker_stop>:
{
    80d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    80d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8148 <ticker_stop+0x74>
    80dc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    80e0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    80e4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    80e6:	f8de 0004 	ldr.w	r0, [lr, #4]
    80ea:	b20e      	sxth	r6, r1
    80ec:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    80f0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    80f4:	78fc      	ldrb	r4, [r7, #3]
    80f6:	1c65      	adds	r5, r4, #1
    80f8:	b2ed      	uxtb	r5, r5
		last = 0;
    80fa:	42a8      	cmp	r0, r5
    80fc:	bf98      	it	ls
    80fe:	2500      	movls	r5, #0
	if (last == user->first) {
    8100:	7878      	ldrb	r0, [r7, #1]
    8102:	42a8      	cmp	r0, r5
    8104:	d01d      	beq.n	8142 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    8106:	6878      	ldr	r0, [r7, #4]
    8108:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    810c:	0124      	lsls	r4, r4, #4
    810e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8110:	f04f 0c05 	mov.w	ip, #5
    8114:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    8118:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    811a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    811c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    811e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    8120:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    8122:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8124:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8126:	f8de 3020 	ldr.w	r3, [lr, #32]
    812a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    812e:	4608      	mov	r0, r1
    8130:	4798      	blx	r3
    8132:	fb08 930a 	mla	r3, r8, sl, r9
    8136:	2200      	movs	r2, #0
    8138:	2104      	movs	r1, #4
    813a:	47a0      	blx	r4
	return user_op->status;
    813c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8142:	2001      	movs	r0, #1
}
    8144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8148:	200007e8 	.word	0x200007e8

0000814c <ticker_next_slot_get>:
{
    814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8150:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81cc <ticker_next_slot_get+0x80>
    8154:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8158:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    815a:	fb0a 8000 	mla	r0, sl, r0, r8
    815e:	fa0f fe81 	sxth.w	lr, r1
    8162:	6845      	ldr	r5, [r0, #4]
    8164:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8168:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    816c:	78fc      	ldrb	r4, [r7, #3]
    816e:	1c66      	adds	r6, r4, #1
    8170:	b2f6      	uxtb	r6, r6
		last = 0;
    8172:	42b5      	cmp	r5, r6
    8174:	bf98      	it	ls
    8176:	2600      	movls	r6, #0
	if (last == user->first) {
    8178:	787d      	ldrb	r5, [r7, #1]
    817a:	42b5      	cmp	r5, r6
    817c:	d023      	beq.n	81c6 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    817e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    8182:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8186:	0125      	lsls	r5, r4, #4
    8188:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    818c:	f04f 0e02 	mov.w	lr, #2
    8190:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    8194:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    8196:	9b08      	ldr	r3, [sp, #32]
    8198:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    819c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    819e:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    81a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    81a2:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    81a4:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    81a6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    81aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    81ac:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    81ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
    81b0:	6a03      	ldr	r3, [r0, #32]
    81b2:	4608      	mov	r0, r1
    81b4:	4798      	blx	r3
    81b6:	fb09 830a 	mla	r3, r9, sl, r8
    81ba:	2200      	movs	r2, #0
    81bc:	2104      	movs	r1, #4
    81be:	47a8      	blx	r5
	return user_op->status;
    81c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    81c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    81c6:	2001      	movs	r0, #1
}
    81c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81cc:	200007e8 	.word	0x200007e8

000081d0 <ticker_job_idle_get>:
{
    81d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    81d4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8244 <ticker_job_idle_get+0x74>
    81d8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    81dc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    81e0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    81e2:	f8de 0004 	ldr.w	r0, [lr, #4]
    81e6:	b20e      	sxth	r6, r1
    81e8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    81ec:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    81f0:	78fc      	ldrb	r4, [r7, #3]
    81f2:	1c65      	adds	r5, r4, #1
    81f4:	b2ed      	uxtb	r5, r5
		last = 0;
    81f6:	42a8      	cmp	r0, r5
    81f8:	bf98      	it	ls
    81fa:	2500      	movls	r5, #0
	if (last == user->first) {
    81fc:	7878      	ldrb	r0, [r7, #1]
    81fe:	42a8      	cmp	r0, r5
    8200:	d01d      	beq.n	823e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    8202:	6878      	ldr	r0, [r7, #4]
    8204:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8208:	0124      	lsls	r4, r4, #4
    820a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    820c:	f04f 0c01 	mov.w	ip, #1
    8210:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    8214:	20ff      	movs	r0, #255	; 0xff
    8216:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8218:	2002      	movs	r0, #2
    821a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    821c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    821e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8220:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8222:	f8de 3020 	ldr.w	r3, [lr, #32]
    8226:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    822a:	4608      	mov	r0, r1
    822c:	4798      	blx	r3
    822e:	fb08 930a 	mla	r3, r8, sl, r9
    8232:	2200      	movs	r2, #0
    8234:	2104      	movs	r1, #4
    8236:	47a0      	blx	r4
	return user_op->status;
    8238:	6a70      	ldr	r0, [r6, #36]	; 0x24
    823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    823e:	2001      	movs	r0, #1
}
    8240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8244:	200007e8 	.word	0x200007e8

00008248 <ticker_job_sched>:
{
    8248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    824c:	4c08      	ldr	r4, [pc, #32]	; (8270 <ticker_job_sched+0x28>)
    824e:	252c      	movs	r5, #44	; 0x2c
    8250:	fb05 4300 	mla	r3, r5, r0, r4
{
    8254:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8256:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8258:	6a1b      	ldr	r3, [r3, #32]
    825a:	4608      	mov	r0, r1
    825c:	4798      	blx	r3
    825e:	fb06 4305 	mla	r3, r6, r5, r4
    8262:	46bc      	mov	ip, r7
    8264:	2200      	movs	r2, #0
    8266:	2104      	movs	r1, #4
}
    8268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    826c:	4760      	bx	ip
    826e:	bf00      	nop
    8270:	200007e8 	.word	0x200007e8

00008274 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8274:	f009 bbe6 	b.w	11a44 <cntr_cnt_get>

00008278 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8278:	1a40      	subs	r0, r0, r1
}
    827a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    827e:	4770      	bx	lr

00008280 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8280:	b508      	push	{r3, lr}
    8282:	4603      	mov	r3, r0
	if (addr_type > 1) {
    8284:	2b01      	cmp	r3, #1
{
    8286:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8288:	d80e      	bhi.n	82a8 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    828a:	b133      	cbz	r3, 829a <ll_addr_get+0x1a>
		if (bdaddr) {
    828c:	b119      	cbz	r1, 8296 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    828e:	2206      	movs	r2, #6
    8290:	4906      	ldr	r1, [pc, #24]	; (82ac <ll_addr_get+0x2c>)
    8292:	f7f9 fcd8 	bl	1c46 <memcpy>
		}

		return rnd_addr;
    8296:	4805      	ldr	r0, [pc, #20]	; (82ac <ll_addr_get+0x2c>)
    8298:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    829a:	b119      	cbz	r1, 82a4 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    829c:	2206      	movs	r2, #6
    829e:	4904      	ldr	r1, [pc, #16]	; (82b0 <ll_addr_get+0x30>)
    82a0:	f7f9 fcd1 	bl	1c46 <memcpy>
	}

	return pub_addr;
    82a4:	4802      	ldr	r0, [pc, #8]	; (82b0 <ll_addr_get+0x30>)
}
    82a6:	bd08      	pop	{r3, pc}
		return NULL;
    82a8:	2000      	movs	r0, #0
    82aa:	bd08      	pop	{r3, pc}
    82ac:	20000846 	.word	0x20000846
    82b0:	20000840 	.word	0x20000840

000082b4 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    82b4:	b570      	push	{r4, r5, r6, lr}
    82b6:	4606      	mov	r6, r0
    82b8:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    82ba:	f007 fd1f 	bl	fcfc <ll_adv_is_enabled>
    82be:	4604      	mov	r4, r0
    82c0:	b110      	cbz	r0, 82c8 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    82c2:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    82c4:	4620      	mov	r0, r4
    82c6:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    82c8:	f007 fd2c 	bl	fd24 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    82cc:	f010 0f06 	tst.w	r0, #6
    82d0:	d1f7      	bne.n	82c2 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    82d2:	2206      	movs	r2, #6
    82d4:	4629      	mov	r1, r5
	if (addr_type) {
    82d6:	b11e      	cbz	r6, 82e0 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    82d8:	4802      	ldr	r0, [pc, #8]	; (82e4 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    82da:	f7f9 fcb4 	bl	1c46 <memcpy>
    82de:	e7f1      	b.n	82c4 <ll_addr_set+0x10>
    82e0:	4801      	ldr	r0, [pc, #4]	; (82e8 <ll_addr_set+0x34>)
    82e2:	e7fa      	b.n	82da <ll_addr_set+0x26>
    82e4:	20000846 	.word	0x20000846
    82e8:	20000840 	.word	0x20000840

000082ec <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    82ec:	2300      	movs	r3, #0
    82ee:	7003      	strb	r3, [r0, #0]
	*max = 0;
    82f0:	700b      	strb	r3, [r1, #0]
    82f2:	4770      	bx	lr

000082f4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    82f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    82f6:	4607      	mov	r7, r0
    82f8:	460e      	mov	r6, r1
	while (len) {
    82fa:	460c      	mov	r4, r1
    82fc:	1b35      	subs	r5, r6, r4
    82fe:	443d      	add	r5, r7
    8300:	b18c      	cbz	r4, 8326 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    8302:	f7f8 fe83 	bl	100c <sys_rand32_get>

		if (len >= sizeof(v)) {
    8306:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    8308:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    830a:	d907      	bls.n	831c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    830c:	2204      	movs	r2, #4
    830e:	eb0d 0102 	add.w	r1, sp, r2
    8312:	4628      	mov	r0, r5
    8314:	f7f9 fc97 	bl	1c46 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    8318:	3c04      	subs	r4, #4
    831a:	e7ef      	b.n	82fc <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    831c:	4622      	mov	r2, r4
    831e:	a901      	add	r1, sp, #4
    8320:	4628      	mov	r0, r5
    8322:	f7f9 fc90 	bl	1c46 <memcpy>
			break;
		}
	}

	return 0;
}
    8326:	2000      	movs	r0, #0
    8328:	b003      	add	sp, #12
    832a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000832c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    832c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    832e:	2300      	movs	r3, #0
    8330:	f009 fbbc 	bl	11aac <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8334:	2000      	movs	r0, #0
    8336:	bd08      	pop	{r3, pc}

00008338 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8338:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    833a:	4802      	ldr	r0, [pc, #8]	; (8344 <_hci_driver_init+0xc>)
    833c:	f7fb fe06 	bl	3f4c <bt_hci_driver_register>

	return 0;
}
    8340:	2000      	movs	r0, #0
    8342:	bd08      	pop	{r3, pc}
    8344:	000162b4 	.word	0x000162b4

00008348 <recv_thread>:
{
    8348:	b573      	push	{r0, r1, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    834a:	4d26      	ldr	r5, [pc, #152]	; (83e4 <recv_thread+0x9c>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    834c:	2600      	movs	r6, #0
    834e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8352:	4628      	mov	r0, r5
    8354:	f00a ff96 	bl	13284 <_impl_k_queue_get>
		if (node_rx && !buf) {
    8358:	4604      	mov	r4, r0
    835a:	2800      	cmp	r0, #0
    835c:	d032      	beq.n	83c4 <recv_thread+0x7c>
	s8_t class = hci_get_class(node_rx);
    835e:	f001 fc6f 	bl	9c40 <hci_get_class>
	switch (class) {
    8362:	1e03      	subs	r3, r0, #0
    8364:	9401      	str	r4, [sp, #4]
    8366:	db03      	blt.n	8370 <recv_thread+0x28>
    8368:	2b02      	cmp	r3, #2
    836a:	dd0c      	ble.n	8386 <recv_thread+0x3e>
    836c:	2b03      	cmp	r3, #3
    836e:	d02c      	beq.n	83ca <recv_thread+0x82>
		LL_ASSERT(0);
    8370:	4a1d      	ldr	r2, [pc, #116]	; (83e8 <recv_thread+0xa0>)
    8372:	491e      	ldr	r1, [pc, #120]	; (83ec <recv_thread+0xa4>)
    8374:	2003      	movs	r0, #3
    8376:	f7f9 fe2d 	bl	1fd4 <bt_log>
    837a:	4040      	eors	r0, r0
    837c:	f380 8811 	msr	BASEPRI, r0
    8380:	f04f 0004 	mov.w	r0, #4
    8384:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8386:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8388:	bf0e      	itee	eq
    838a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    838c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8390:	2001      	movne	r0, #1
    8392:	f7fb fee1 	bl	4158 <bt_buf_get_rx>
    8396:	4604      	mov	r4, r0
		if (buf) {
    8398:	b118      	cbz	r0, 83a2 <recv_thread+0x5a>
			hci_evt_encode(node_rx, buf);
    839a:	4601      	mov	r1, r0
    839c:	9801      	ldr	r0, [sp, #4]
    839e:	f001 f8cd 	bl	953c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    83a2:	9b01      	ldr	r3, [sp, #4]
    83a4:	2100      	movs	r1, #0
    83a6:	88d8      	ldrh	r0, [r3, #6]
    83a8:	f008 f912 	bl	105d0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    83ac:	a802      	add	r0, sp, #8
    83ae:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    83b2:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    83b4:	f008 f8a2 	bl	104fc <ll_rx_mem_release>
		if (buf) {
    83b8:	b124      	cbz	r4, 83c4 <recv_thread+0x7c>
			if (buf->len) {
    83ba:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    83bc:	4620      	mov	r0, r4
			if (buf->len) {
    83be:	b173      	cbz	r3, 83de <recv_thread+0x96>
				bt_recv(buf);
    83c0:	f7fb f89e 	bl	3500 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    83c4:	f00b f9c0 	bl	13748 <_impl_k_yield>
    83c8:	e7c1      	b.n	834e <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    83ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    83ce:	f7fb fec3 	bl	4158 <bt_buf_get_rx>
    83d2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    83d4:	4601      	mov	r1, r0
    83d6:	9801      	ldr	r0, [sp, #4]
    83d8:	f001 f87c 	bl	94d4 <hci_acl_encode>
    83dc:	e7e1      	b.n	83a2 <recv_thread+0x5a>
				net_buf_unref(buf);
    83de:	f00a f95b 	bl	12698 <net_buf_unref>
    83e2:	e7ef      	b.n	83c4 <recv_thread+0x7c>
    83e4:	20003f50 	.word	0x20003f50
    83e8:	00016285 	.word	0x00016285
    83ec:	000153a4 	.word	0x000153a4

000083f0 <hci_driver_send>:
{
    83f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    83f2:	8983      	ldrh	r3, [r0, #12]
{
    83f4:	4605      	mov	r5, r0
	if (!buf->len) {
    83f6:	b94b      	cbnz	r3, 840c <hci_driver_send+0x1c>
		BT_ERR("Empty HCI packet");
    83f8:	4a1b      	ldr	r2, [pc, #108]	; (8468 <hci_driver_send+0x78>)
    83fa:	491c      	ldr	r1, [pc, #112]	; (846c <hci_driver_send+0x7c>)
    83fc:	2003      	movs	r0, #3
    83fe:	f7f9 fde9 	bl	1fd4 <bt_log>
		return -EINVAL;
    8402:	f06f 0415 	mvn.w	r4, #21
}
    8406:	4620      	mov	r0, r4
    8408:	b003      	add	sp, #12
    840a:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    840c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    840e:	b183      	cbz	r3, 8432 <hci_driver_send+0x42>
    8410:	2b02      	cmp	r3, #2
    8412:	d11f      	bne.n	8454 <hci_driver_send+0x64>
	err = hci_acl_handle(buf, &evt);
    8414:	a901      	add	r1, sp, #4
    8416:	f000 ffe3 	bl	93e0 <hci_acl_handle>
    841a:	4604      	mov	r4, r0
	if (evt) {
    841c:	9801      	ldr	r0, [sp, #4]
    841e:	b108      	cbz	r0, 8424 <hci_driver_send+0x34>
		bt_recv_prio(evt);
    8420:	f7fb fc92 	bl	3d48 <bt_recv_prio>
	if (!err) {
    8424:	2c00      	cmp	r4, #0
    8426:	d1ee      	bne.n	8406 <hci_driver_send+0x16>
		net_buf_unref(buf);
    8428:	4628      	mov	r0, r5
    842a:	f00a f935 	bl	12698 <net_buf_unref>
    842e:	2400      	movs	r4, #0
    8430:	e7e9      	b.n	8406 <hci_driver_send+0x16>
	evt = hci_cmd_handle(buf);
    8432:	f000 fa7d 	bl	8930 <hci_cmd_handle>
	if (evt) {
    8436:	4602      	mov	r2, r0
    8438:	2800      	cmp	r0, #0
    843a:	d0f5      	beq.n	8428 <hci_driver_send+0x38>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    843c:	6883      	ldr	r3, [r0, #8]
    843e:	7819      	ldrb	r1, [r3, #0]
    8440:	2913      	cmp	r1, #19
    8442:	d80d      	bhi.n	8460 <hci_driver_send+0x70>
    8444:	2301      	movs	r3, #1
    8446:	408b      	lsls	r3, r1
    8448:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    844c:	d008      	beq.n	8460 <hci_driver_send+0x70>
			bt_recv_prio(evt);
    844e:	f7fb fc7b 	bl	3d48 <bt_recv_prio>
    8452:	e7e9      	b.n	8428 <hci_driver_send+0x38>
		BT_ERR("Unknown HCI type %u", type);
    8454:	4a04      	ldr	r2, [pc, #16]	; (8468 <hci_driver_send+0x78>)
    8456:	4906      	ldr	r1, [pc, #24]	; (8470 <hci_driver_send+0x80>)
    8458:	2003      	movs	r0, #3
    845a:	f7f9 fdbb 	bl	1fd4 <bt_log>
    845e:	e7d0      	b.n	8402 <hci_driver_send+0x12>
			bt_recv(evt);
    8460:	4610      	mov	r0, r2
    8462:	f7fb f84d 	bl	3500 <bt_recv>
    8466:	e7df      	b.n	8428 <hci_driver_send+0x38>
    8468:	00016291 	.word	0x00016291
    846c:	000162e9 	.word	0x000162e9
    8470:	000162fe 	.word	0x000162fe

00008474 <prio_recv_thread>:
{
    8474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8476:	4d14      	ldr	r5, [pc, #80]	; (84c8 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    8478:	4e14      	ldr	r6, [pc, #80]	; (84cc <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    847a:	f10d 0102 	add.w	r1, sp, #2
    847e:	a801      	add	r0, sp, #4
    8480:	f008 f804 	bl	1048c <ll_rx_get>
    8484:	4604      	mov	r4, r0
    8486:	b940      	cbnz	r0, 849a <prio_recv_thread+0x26>
		if (node_rx) {
    8488:	9b01      	ldr	r3, [sp, #4]
    848a:	b1bb      	cbz	r3, 84bc <prio_recv_thread+0x48>
			ll_rx_dequeue();
    848c:	f008 fac2 	bl	10a14 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    8490:	9901      	ldr	r1, [sp, #4]
    8492:	4630      	mov	r0, r6
    8494:	f00a fed2 	bl	1323c <k_queue_append>
    8498:	e7ef      	b.n	847a <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    849a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    849e:	2001      	movs	r0, #1
    84a0:	f7fb fe5a 	bl	4158 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    84a4:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    84a6:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    84a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    84ac:	f001 fbb4 	bl	9c18 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    84b0:	4638      	mov	r0, r7
    84b2:	f7fb fc49 	bl	3d48 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    84b6:	f00b f947 	bl	13748 <_impl_k_yield>
    84ba:	e7de      	b.n	847a <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    84bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    84c0:	4628      	mov	r0, r5
    84c2:	f00b f9a8 	bl	13816 <_impl_k_sem_take>
    84c6:	e7d8      	b.n	847a <prio_recv_thread+0x6>
    84c8:	20003f38 	.word	0x20003f38
    84cc:	20003f50 	.word	0x20003f50

000084d0 <hci_driver_open>:
{
    84d0:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    84d2:	4818      	ldr	r0, [pc, #96]	; (8534 <hci_driver_open+0x64>)
{
    84d4:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    84d6:	f008 fb5d 	bl	10b94 <ll_init>
	if (err) {
    84da:	4604      	mov	r4, r0
    84dc:	b140      	cbz	r0, 84f0 <hci_driver_open+0x20>
		BT_ERR("LL initialization failed: %u", err);
    84de:	4603      	mov	r3, r0
    84e0:	4a15      	ldr	r2, [pc, #84]	; (8538 <hci_driver_open+0x68>)
    84e2:	4916      	ldr	r1, [pc, #88]	; (853c <hci_driver_open+0x6c>)
    84e4:	2003      	movs	r0, #3
    84e6:	f7f9 fd75 	bl	1fd4 <bt_log>
}
    84ea:	4620      	mov	r0, r4
    84ec:	b006      	add	sp, #24
    84ee:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    84f0:	f001 fbbe 	bl	9c70 <hci_init>

    84f4:	f06f 0309 	mvn.w	r3, #9
    84f8:	9303      	str	r3, [sp, #12]
    84fa:	9405      	str	r4, [sp, #20]
    84fc:	9404      	str	r4, [sp, #16]
    84fe:	9402      	str	r4, [sp, #8]
    8500:	9401      	str	r4, [sp, #4]
    8502:	9400      	str	r4, [sp, #0]
    8504:	4b0e      	ldr	r3, [pc, #56]	; (8540 <hci_driver_open+0x70>)
    8506:	490f      	ldr	r1, [pc, #60]	; (8544 <hci_driver_open+0x74>)
    8508:	480f      	ldr	r0, [pc, #60]	; (8548 <hci_driver_open+0x78>)
    850a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    850e:	f00b fb57 	bl	13bc0 <_impl_k_thread_create>
    8512:	f06f 0307 	mvn.w	r3, #7
    8516:	9303      	str	r3, [sp, #12]
    8518:	9405      	str	r4, [sp, #20]
    851a:	9404      	str	r4, [sp, #16]
    851c:	9402      	str	r4, [sp, #8]
    851e:	9401      	str	r4, [sp, #4]
    8520:	9400      	str	r4, [sp, #0]
    8522:	4b0a      	ldr	r3, [pc, #40]	; (854c <hci_driver_open+0x7c>)
    8524:	490a      	ldr	r1, [pc, #40]	; (8550 <hci_driver_open+0x80>)
    8526:	480b      	ldr	r0, [pc, #44]	; (8554 <hci_driver_open+0x84>)
    8528:	f240 522c 	movw	r2, #1324	; 0x52c
    852c:	f00b fb48 	bl	13bc0 <_impl_k_thread_create>
    8530:	e7db      	b.n	84ea <hci_driver_open+0x1a>
    8532:	bf00      	nop
    8534:	20003f38 	.word	0x20003f38
    8538:	000162a1 	.word	0x000162a1
    853c:	000162c8 	.word	0x000162c8
    8540:	00008475 	.word	0x00008475
    8544:	200020e8 	.word	0x200020e8
    8548:	200018c8 	.word	0x200018c8
    854c:	00008349 	.word	0x00008349
    8550:	200023d8 	.word	0x200023d8
    8554:	20001858 	.word	0x20001858

00008558 <sys_put_le32>:
	dst[1] = val >> 8;
    8558:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    855c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    855e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    8560:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    8562:	0a00      	lsrs	r0, r0, #8
    8564:	704b      	strb	r3, [r1, #1]
    8566:	70c8      	strb	r0, [r1, #3]
    8568:	4770      	bx	lr

0000856a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    856a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    856c:	3008      	adds	r0, #8
{
    856e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    8570:	2102      	movs	r1, #2
{
    8572:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8574:	f00a f8c2 	bl	126fc <net_buf_simple_add>
	hdr->evt = evt;
    8578:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    857a:	7044      	strb	r4, [r0, #1]
    857c:	bd38      	pop	{r3, r4, r5, pc}
	...

00008580 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    8580:	b538      	push	{r3, r4, r5, lr}
    8582:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8588:	f7fb fdf6 	bl	4178 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    858c:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    858e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8590:	210f      	movs	r1, #15
    8592:	f7ff ffea 	bl	856a <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8596:	2104      	movs	r1, #4
    8598:	f104 0008 	add.w	r0, r4, #8
    859c:	f00a f8ae 	bl	126fc <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    85a0:	2301      	movs	r3, #1
    85a2:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    85a4:	4b02      	ldr	r3, [pc, #8]	; (85b0 <cmd_status+0x30>)
	cs->status = status;
    85a6:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    85a8:	881b      	ldrh	r3, [r3, #0]
    85aa:	8043      	strh	r3, [r0, #2]

	return buf;
}
    85ac:	4620      	mov	r0, r4
    85ae:	bd38      	pop	{r3, r4, r5, pc}
    85b0:	2000084c 	.word	0x2000084c

000085b4 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    85b4:	b570      	push	{r4, r5, r6, lr}
    85b6:	4604      	mov	r4, r0
    85b8:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    85ba:	3201      	adds	r2, #1
{
    85bc:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    85be:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    85c0:	b2d2      	uxtb	r2, r2
    85c2:	213e      	movs	r1, #62	; 0x3e
    85c4:	f7ff ffd1 	bl	856a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    85c8:	2101      	movs	r1, #1
    85ca:	4620      	mov	r0, r4
    85cc:	f00a f896 	bl	126fc <net_buf_simple_add>
	me->subevent = subevt;
    85d0:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    85d2:	4629      	mov	r1, r5
    85d4:	4620      	mov	r0, r4
}
    85d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    85da:	f00a b88f 	b.w	126fc <net_buf_simple_add>
	...

000085e0 <cmd_complete>:
{
    85e0:	b538      	push	{r3, r4, r5, lr}
    85e2:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    85e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    85e8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    85ea:	f7fb fdc5 	bl	4178 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    85ee:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    85f0:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    85f2:	b2d2      	uxtb	r2, r2
    85f4:	210e      	movs	r1, #14
    85f6:	f7ff ffb8 	bl	856a <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    85fa:	6820      	ldr	r0, [r4, #0]
    85fc:	2103      	movs	r1, #3
    85fe:	3008      	adds	r0, #8
    8600:	f00a f87c 	bl	126fc <net_buf_simple_add>
	cc->ncmd = 1;
    8604:	2301      	movs	r3, #1
    8606:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8608:	4b05      	ldr	r3, [pc, #20]	; (8620 <cmd_complete+0x40>)
    860a:	881b      	ldrh	r3, [r3, #0]
    860c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8610:	6820      	ldr	r0, [r4, #0]
    8612:	4629      	mov	r1, r5
    8614:	3008      	adds	r0, #8
}
    8616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    861a:	f00a b86f 	b.w	126fc <net_buf_simple_add>
    861e:	bf00      	nop
    8620:	2000084c 	.word	0x2000084c

00008624 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8624:	4b0e      	ldr	r3, [pc, #56]	; (8660 <encrypt_change+0x3c>)
{
    8626:	b570      	push	{r4, r5, r6, lr}
    8628:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    862a:	e9d3 2300 	ldrd	r2, r3, [r3]
    862e:	2300      	movs	r3, #0
    8630:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8634:	4313      	orrs	r3, r2
{
    8636:	4604      	mov	r4, r0
    8638:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    863a:	d010      	beq.n	865e <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    863c:	2204      	movs	r2, #4
    863e:	2108      	movs	r1, #8
    8640:	4628      	mov	r0, r5
    8642:	f7ff ff92 	bl	856a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8646:	2104      	movs	r1, #4
    8648:	f105 0008 	add.w	r0, r5, #8
    864c:	f00a f856 	bl	126fc <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8650:	fab4 f384 	clz	r3, r4
    8654:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8656:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8658:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    865c:	70c3      	strb	r3, [r0, #3]
    865e:	bd70      	pop	{r4, r5, r6, pc}
    8660:	20003d50 	.word	0x20003d50

00008664 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8664:	b570      	push	{r4, r5, r6, lr}
    8666:	4604      	mov	r4, r0
    8668:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    866a:	4b13      	ldr	r3, [pc, #76]	; (86b8 <le_remote_feat_complete+0x54>)
{
    866c:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    866e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8672:	2200      	movs	r2, #0
    8674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8678:	4313      	orrs	r3, r2
{
    867a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    867c:	d01b      	beq.n	86b6 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    867e:	4b0f      	ldr	r3, [pc, #60]	; (86bc <le_remote_feat_complete+0x58>)
    8680:	e9d3 2300 	ldrd	r2, r3, [r3]
    8684:	2300      	movs	r3, #0
    8686:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    868a:	4313      	orrs	r3, r2
    868c:	d013      	beq.n	86b6 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    868e:	220b      	movs	r2, #11
    8690:	2104      	movs	r1, #4
    8692:	f7ff ff8f 	bl	85b4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8696:	2208      	movs	r2, #8
	sep->status = status;
    8698:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    869a:	f8a0 6001 	strh.w	r6, [r0, #1]
    869e:	3003      	adds	r0, #3
	if (!status) {
    86a0:	b924      	cbnz	r4, 86ac <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    86a2:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    86a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    86a8:	f7f9 bacd 	b.w	1c46 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    86ac:	2100      	movs	r1, #0
}
    86ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    86b2:	f7f9 baf4 	b.w	1c9e <memset>
    86b6:	bd70      	pop	{r4, r5, r6, pc}
    86b8:	20003d50 	.word	0x20003d50
    86bc:	20003d58 	.word	0x20003d58

000086c0 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    86c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c4:	4605      	mov	r5, r0
    86c6:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    86c8:	4b46      	ldr	r3, [pc, #280]	; (87e4 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    86ca:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    86cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    86d0:	f240 2801 	movw	r8, #513	; 0x201
    86d4:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    86d8:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    86dc:	ea03 0309 	and.w	r3, r3, r9
    86e0:	ea02 0208 	and.w	r2, r2, r8
    86e4:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    86e6:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    86e8:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    86ec:	d077      	beq.n	87de <le_conn_complete.part.39+0x11e>
	if (!status) {
    86ee:	2d00      	cmp	r5, #0
    86f0:	d150      	bne.n	8794 <le_conn_complete.part.39+0xd4>
		conn_count++;
    86f2:	4a3d      	ldr	r2, [pc, #244]	; (87e8 <le_conn_complete.part.39+0x128>)
    86f4:	6813      	ldr	r3, [r2, #0]
    86f6:	3301      	adds	r3, #1
    86f8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    86fa:	ea5a 030b 	orrs.w	r3, sl, fp
    86fe:	f101 0803 	add.w	r8, r1, #3
    8702:	d151      	bne.n	87a8 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8704:	2212      	movs	r2, #18
    8706:	2101      	movs	r1, #1
    8708:	f7ff ff54 	bl	85b4 <meta_evt>
	lecc->status = 0x00;
    870c:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    870e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    8712:	7863      	ldrb	r3, [r4, #1]
    8714:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8716:	78a3      	ldrb	r3, [r4, #2]
    8718:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    871a:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    871c:	2206      	movs	r2, #6
    871e:	4641      	mov	r1, r8
    8720:	3005      	adds	r0, #5
    8722:	f7f9 fa90 	bl	1c46 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8726:	8ae3      	ldrh	r3, [r4, #22]
    8728:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    872c:	8b23      	ldrh	r3, [r4, #24]
    872e:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8732:	8b63      	ldrh	r3, [r4, #26]
    8734:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8738:	7f23      	ldrb	r3, [r4, #28]
    873a:	747b      	strb	r3, [r7, #17]
    873c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8740:	221e      	movs	r2, #30
    8742:	210a      	movs	r1, #10
    8744:	f7ff ff36 	bl	85b4 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8748:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    874a:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    874c:	2100      	movs	r1, #0
    874e:	f7f9 faa6 	bl	1c9e <memset>
		lecc->status = status;
    8752:	7025      	strb	r5, [r4, #0]
    8754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8758:	7d63      	ldrb	r3, [r4, #21]
    875a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    875e:	2b40      	cmp	r3, #64	; 0x40
    8760:	d138      	bne.n	87d4 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    8762:	2206      	movs	r2, #6
    8764:	f104 0110 	add.w	r1, r4, #16
    8768:	f7f9 fa6d 	bl	1c46 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    876c:	2206      	movs	r2, #6
    876e:	f104 0109 	add.w	r1, r4, #9
    8772:	f107 0011 	add.w	r0, r7, #17
    8776:	f7f9 fa66 	bl	1c46 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    877a:	8ae3      	ldrh	r3, [r4, #22]
    877c:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8780:	8b23      	ldrh	r3, [r4, #24]
    8782:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8786:	8b63      	ldrh	r3, [r4, #26]
    8788:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    878c:	7f23      	ldrb	r3, [r4, #28]
    878e:	777b      	strb	r3, [r7, #29]
    8790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8794:	ea5a 030b 	orrs.w	r3, sl, fp
    8798:	d1d2      	bne.n	8740 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    879a:	2212      	movs	r2, #18
    879c:	2101      	movs	r1, #1
    879e:	f7ff ff09 	bl	85b4 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    87a2:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    87a4:	4604      	mov	r4, r0
    87a6:	e7d1      	b.n	874c <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    87a8:	221e      	movs	r2, #30
    87aa:	210a      	movs	r1, #10
    87ac:	f7ff ff02 	bl	85b4 <meta_evt>
		leecc->status = 0x00;
    87b0:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    87b2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    87b6:	7863      	ldrb	r3, [r4, #1]
    87b8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    87ba:	78a3      	ldrb	r3, [r4, #2]
    87bc:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    87be:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    87c0:	2206      	movs	r2, #6
    87c2:	4641      	mov	r1, r8
    87c4:	3005      	adds	r0, #5
    87c6:	f7f9 fa3e 	bl	1c46 <memcpy>
		if ((radio_cc->own_addr_type) &&
    87ca:	7be3      	ldrb	r3, [r4, #15]
    87cc:	f107 000b 	add.w	r0, r7, #11
    87d0:	2b00      	cmp	r3, #0
    87d2:	d1c1      	bne.n	8758 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    87d4:	2206      	movs	r2, #6
    87d6:	2100      	movs	r1, #0
    87d8:	f7f9 fa61 	bl	1c9e <memset>
    87dc:	e7c6      	b.n	876c <le_conn_complete.part.39+0xac>
    87de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87e2:	bf00      	nop
    87e4:	20003d58 	.word	0x20003d58
    87e8:	20000850 	.word	0x20000850

000087ec <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    87ec:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    87ee:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    87f0:	b08a      	sub	sp, #40	; 0x28
    87f2:	4604      	mov	r4, r0
    87f4:	460e      	mov	r6, r1
    87f6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    87f8:	2b03      	cmp	r3, #3
    87fa:	d820      	bhi.n	883e <bt_addr_le_to_str.constprop.70+0x52>
    87fc:	e8df f003 	tbb	[pc, r3]
    8800:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8804:	4911      	ldr	r1, [pc, #68]	; (884c <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8806:	4628      	mov	r0, r5
    8808:	f7f9 f9d8 	bl	1bbc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    880c:	7862      	ldrb	r2, [r4, #1]
    880e:	9204      	str	r2, [sp, #16]
    8810:	78a2      	ldrb	r2, [r4, #2]
    8812:	9203      	str	r2, [sp, #12]
    8814:	78e2      	ldrb	r2, [r4, #3]
    8816:	9202      	str	r2, [sp, #8]
    8818:	7922      	ldrb	r2, [r4, #4]
    881a:	9201      	str	r2, [sp, #4]
    881c:	7962      	ldrb	r2, [r4, #5]
    881e:	9200      	str	r2, [sp, #0]
    8820:	79a3      	ldrb	r3, [r4, #6]
    8822:	9505      	str	r5, [sp, #20]
    8824:	4a0a      	ldr	r2, [pc, #40]	; (8850 <bt_addr_le_to_str.constprop.70+0x64>)
    8826:	211b      	movs	r1, #27
    8828:	4630      	mov	r0, r6
    882a:	f7f8 fbbd 	bl	fa8 <snprintk>
}
    882e:	b00a      	add	sp, #40	; 0x28
    8830:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8832:	4908      	ldr	r1, [pc, #32]	; (8854 <bt_addr_le_to_str.constprop.70+0x68>)
    8834:	e7e7      	b.n	8806 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    8836:	4908      	ldr	r1, [pc, #32]	; (8858 <bt_addr_le_to_str.constprop.70+0x6c>)
    8838:	e7e5      	b.n	8806 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    883a:	4908      	ldr	r1, [pc, #32]	; (885c <bt_addr_le_to_str.constprop.70+0x70>)
    883c:	e7e3      	b.n	8806 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    883e:	4a08      	ldr	r2, [pc, #32]	; (8860 <bt_addr_le_to_str.constprop.70+0x74>)
    8840:	210a      	movs	r1, #10
    8842:	4628      	mov	r0, r5
    8844:	f7f8 fbb0 	bl	fa8 <snprintk>
    8848:	e7e0      	b.n	880c <bt_addr_le_to_str.constprop.70+0x20>
    884a:	bf00      	nop
    884c:	000142ad 	.word	0x000142ad
    8850:	000142cf 	.word	0x000142cf
    8854:	000142b4 	.word	0x000142b4
    8858:	000142bb 	.word	0x000142bb
    885c:	000142c5 	.word	0x000142c5
    8860:	0001653e 	.word	0x0001653e

00008864 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8864:	b570      	push	{r4, r5, r6, lr}
    8866:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    8868:	7840      	ldrb	r0, [r0, #1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    886a:	4401      	add	r1, r0
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    886c:	b090      	sub	sp, #64	; 0x40
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    886e:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8870:	9001      	str	r0, [sp, #4]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8872:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8874:	b25b      	sxtb	r3, r3
    8876:	9304      	str	r3, [sp, #16]
    8878:	7823      	ldrb	r3, [r4, #0]
    887a:	09d9      	lsrs	r1, r3, #7
    887c:	9103      	str	r1, [sp, #12]
    887e:	f3c3 1180 	ubfx	r1, r3, #6, #1
    8882:	f003 030f 	and.w	r3, r3, #15
    8886:	9102      	str	r1, [sp, #8]
    8888:	9300      	str	r3, [sp, #0]
    888a:	4922      	ldr	r1, [pc, #136]	; (8914 <le_adv_ext_report.isra.66+0xb0>)
    888c:	4613      	mov	r3, r2
    888e:	2004      	movs	r0, #4
    8890:	4a21      	ldr	r2, [pc, #132]	; (8918 <le_adv_ext_report.isra.66+0xb4>)
    8892:	f7f9 fb9f 	bl	1fd4 <bt_log>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8896:	7823      	ldrb	r3, [r4, #0]
    8898:	f003 030f 	and.w	r3, r3, #15
    889c:	2b07      	cmp	r3, #7
    889e:	d136      	bne.n	890e <le_adv_ext_report.isra.66+0xaa>
    88a0:	7863      	ldrb	r3, [r4, #1]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d033      	beq.n	890e <le_adv_ext_report.isra.66+0xaa>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    88a6:	78a3      	ldrb	r3, [r4, #2]
    88a8:	491c      	ldr	r1, [pc, #112]	; (891c <le_adv_ext_report.isra.66+0xb8>)
    88aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    88ae:	9200      	str	r2, [sp, #0]
    88b0:	099b      	lsrs	r3, r3, #6
    88b2:	4a19      	ldr	r2, [pc, #100]	; (8918 <le_adv_ext_report.isra.66+0xb4>)
    88b4:	2004      	movs	r0, #4
    88b6:	f7f9 fb8d 	bl	1fd4 <bt_log>
		if (!p->ext_hdr_len) {
    88ba:	78a3      	ldrb	r3, [r4, #2]
    88bc:	0699      	lsls	r1, r3, #26
    88be:	d026      	beq.n	890e <le_adv_ext_report.isra.66+0xaa>
		if (h->adv_addr) {
    88c0:	78e3      	ldrb	r3, [r4, #3]
    88c2:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    88c4:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    88c8:	d517      	bpl.n	88fa <le_adv_ext_report.isra.66+0x96>
			addr.type = adv->tx_addr;
    88ca:	7823      	ldrb	r3, [r4, #0]
    88cc:	ae10      	add	r6, sp, #64	; 0x40
    88ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
    88d2:	f806 3d24 	strb.w	r3, [r6, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    88d6:	2206      	movs	r2, #6
    88d8:	4629      	mov	r1, r5
    88da:	f10d 001d 	add.w	r0, sp, #29
    88de:	f7f9 f9b2 	bl	1c46 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    88e2:	a909      	add	r1, sp, #36	; 0x24
    88e4:	4630      	mov	r0, r6
    88e6:	f7ff ff81 	bl	87ec <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    88ea:	ab09      	add	r3, sp, #36	; 0x24
    88ec:	4a0a      	ldr	r2, [pc, #40]	; (8918 <le_adv_ext_report.isra.66+0xb4>)
    88ee:	490c      	ldr	r1, [pc, #48]	; (8920 <le_adv_ext_report.isra.66+0xbc>)
    88f0:	2004      	movs	r0, #4
			ptr += BDADDR_SIZE;
    88f2:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    88f6:	f7f9 fb6d 	bl	1fd4 <bt_log>
		if (h->tx_pwr) {
    88fa:	78e3      	ldrb	r3, [r4, #3]
    88fc:	065b      	lsls	r3, r3, #25
    88fe:	d506      	bpl.n	890e <le_adv_ext_report.isra.66+0xaa>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8900:	f995 3000 	ldrsb.w	r3, [r5]
    8904:	4a04      	ldr	r2, [pc, #16]	; (8918 <le_adv_ext_report.isra.66+0xb4>)
    8906:	4907      	ldr	r1, [pc, #28]	; (8924 <le_adv_ext_report.isra.66+0xc0>)
    8908:	2004      	movs	r0, #4
    890a:	f7f9 fb63 	bl	1fd4 <bt_log>
}
    890e:	b010      	add	sp, #64	; 0x40
    8910:	bd70      	pop	{r4, r5, r6, pc}
    8912:	bf00      	nop
    8914:	00016545 	.word	0x00016545
    8918:	00016360 	.word	0x00016360
    891c:	00016586 	.word	0x00016586
    8920:	000165ab 	.word	0x000165ab
    8924:	000165b8 	.word	0x000165b8

00008928 <sys_get_le64>:
{
    8928:	4603      	mov	r3, r0
}
    892a:	6800      	ldr	r0, [r0, #0]
    892c:	6859      	ldr	r1, [r3, #4]
    892e:	4770      	bx	lr

00008930 <hci_cmd_handle>:
{
    8930:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    8932:	8981      	ldrh	r1, [r0, #12]
{
    8934:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    8936:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8938:	2902      	cmp	r1, #2
{
    893a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    893c:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    893e:	d807      	bhi.n	8950 <hci_cmd_handle+0x20>
		BT_ERR("No HCI Command header");
    8940:	4ac0      	ldr	r2, [pc, #768]	; (8c44 <hci_cmd_handle+0x314>)
    8942:	49c1      	ldr	r1, [pc, #772]	; (8c48 <hci_cmd_handle+0x318>)
		BT_ERR("Invalid HCI CMD packet length");
    8944:	2003      	movs	r0, #3
    8946:	f7f9 fb45 	bl	1fd4 <bt_log>
		return NULL;
    894a:	4628      	mov	r0, r5
}
    894c:	b013      	add	sp, #76	; 0x4c
    894e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    8950:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8952:	4ebe      	ldr	r6, [pc, #760]	; (8c4c <hci_cmd_handle+0x31c>)
    8954:	781a      	ldrb	r2, [r3, #0]
    8956:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8958:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    895a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    895e:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8960:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8962:	d902      	bls.n	896a <hci_cmd_handle+0x3a>
		BT_ERR("Invalid HCI CMD packet length");
    8964:	4ab7      	ldr	r2, [pc, #732]	; (8c44 <hci_cmd_handle+0x314>)
    8966:	49ba      	ldr	r1, [pc, #744]	; (8c50 <hci_cmd_handle+0x320>)
    8968:	e7ec      	b.n	8944 <hci_cmd_handle+0x14>
	net_buf_pull(cmd, sizeof(*chdr));
    896a:	2103      	movs	r1, #3
    896c:	f104 0008 	add.w	r0, r4, #8
    8970:	f009 fef2 	bl	12758 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    8974:	8833      	ldrh	r3, [r6, #0]
    8976:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    897a:	0a9b      	lsrs	r3, r3, #10
    897c:	2b04      	cmp	r3, #4
    897e:	f000 80bd 	beq.w	8afc <hci_cmd_handle+0x1cc>
    8982:	d809      	bhi.n	8998 <hci_cmd_handle+0x68>
    8984:	2b01      	cmp	r3, #1
    8986:	d027      	beq.n	89d8 <hci_cmd_handle+0xa8>
    8988:	2b03      	cmp	r3, #3
    898a:	d03c      	beq.n	8a06 <hci_cmd_handle+0xd6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    898c:	2101      	movs	r1, #1
    898e:	a807      	add	r0, sp, #28
    8990:	f7ff fe26 	bl	85e0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8994:	2301      	movs	r3, #1
    8996:	e293      	b.n	8ec0 <hci_cmd_handle+0x590>
	switch (BT_OGF(_opcode)) {
    8998:	2b08      	cmp	r3, #8
    899a:	f000 8163 	beq.w	8c64 <hci_cmd_handle+0x334>
    899e:	2b3f      	cmp	r3, #63	; 0x3f
    89a0:	d1f4      	bne.n	898c <hci_cmd_handle+0x5c>
	switch (ocf) {
    89a2:	3a01      	subs	r2, #1
    89a4:	2a09      	cmp	r2, #9
    89a6:	d8f1      	bhi.n	898c <hci_cmd_handle+0x5c>
    89a8:	a301      	add	r3, pc, #4	; (adr r3, 89b0 <hci_cmd_handle+0x80>)
    89aa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    89ae:	bf00      	nop
    89b0:	000091f7 	.word	0x000091f7
    89b4:	00009227 	.word	0x00009227
    89b8:	00009251 	.word	0x00009251
    89bc:	0000898d 	.word	0x0000898d
    89c0:	0000898d 	.word	0x0000898d
    89c4:	00009297 	.word	0x00009297
    89c8:	0000898d 	.word	0x0000898d
    89cc:	00009269 	.word	0x00009269
    89d0:	000092a3 	.word	0x000092a3
    89d4:	00009311 	.word	0x00009311
	switch (ocf) {
    89d8:	2a06      	cmp	r2, #6
    89da:	d006      	beq.n	89ea <hci_cmd_handle+0xba>
    89dc:	2a1d      	cmp	r2, #29
    89de:	d1d5      	bne.n	898c <hci_cmd_handle+0x5c>
	handle = sys_le16_to_cpu(cmd->handle);
    89e0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    89e2:	8818      	ldrh	r0, [r3, #0]
    89e4:	f007 fc67 	bl	102b6 <ll_version_ind_send>
    89e8:	e004      	b.n	89f4 <hci_cmd_handle+0xc4>
    89ea:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    89ec:	7899      	ldrb	r1, [r3, #2]
    89ee:	8818      	ldrh	r0, [r3, #0]
    89f0:	f007 fc75 	bl	102de <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    89f4:	2800      	cmp	r0, #0
    89f6:	bf14      	ite	ne
    89f8:	200c      	movne	r0, #12
    89fa:	2000      	moveq	r0, #0
    89fc:	f7ff fdc0 	bl	8580 <cmd_status>
    8a00:	9007      	str	r0, [sp, #28]
	return evt;
    8a02:	9807      	ldr	r0, [sp, #28]
    8a04:	e7a2      	b.n	894c <hci_cmd_handle+0x1c>
	switch (ocf) {
    8a06:	2a2d      	cmp	r2, #45	; 0x2d
    8a08:	d03a      	beq.n	8a80 <hci_cmd_handle+0x150>
    8a0a:	d820      	bhi.n	8a4e <hci_cmd_handle+0x11e>
    8a0c:	2a01      	cmp	r2, #1
    8a0e:	d02b      	beq.n	8a68 <hci_cmd_handle+0x138>
    8a10:	2a03      	cmp	r2, #3
    8a12:	d1bb      	bne.n	898c <hci_cmd_handle+0x5c>
	dup_count = -1;
    8a14:	4b8f      	ldr	r3, [pc, #572]	; (8c54 <hci_cmd_handle+0x324>)
    8a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8a1a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8a1c:	4b8e      	ldr	r3, [pc, #568]	; (8c58 <hci_cmd_handle+0x328>)
    8a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8a22:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8a26:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8a2a:	4b8c      	ldr	r3, [pc, #560]	; (8c5c <hci_cmd_handle+0x32c>)
    8a2c:	2000      	movs	r0, #0
    8a2e:	2100      	movs	r1, #0
    8a30:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8a34:	4b8a      	ldr	r3, [pc, #552]	; (8c60 <hci_cmd_handle+0x330>)
    8a36:	201f      	movs	r0, #31
    8a38:	2100      	movs	r1, #0
    8a3a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8a3e:	f007 f90d 	bl	fc5c <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a42:	2101      	movs	r1, #1
    8a44:	a807      	add	r0, sp, #28
    8a46:	f7ff fdcb 	bl	85e0 <cmd_complete>
	ccst->status = 0x00;
    8a4a:	2300      	movs	r3, #0
    8a4c:	e238      	b.n	8ec0 <hci_cmd_handle+0x590>
	switch (ocf) {
    8a4e:	2a7b      	cmp	r2, #123	; 0x7b
    8a50:	d02c      	beq.n	8aac <hci_cmd_handle+0x17c>
    8a52:	2a7c      	cmp	r2, #124	; 0x7c
    8a54:	d041      	beq.n	8ada <hci_cmd_handle+0x1aa>
    8a56:	2a63      	cmp	r2, #99	; 0x63
    8a58:	d198      	bne.n	898c <hci_cmd_handle+0x5c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8a5a:	68a0      	ldr	r0, [r4, #8]
    8a5c:	f7ff ff64 	bl	8928 <sys_get_le64>
    8a60:	4b7e      	ldr	r3, [pc, #504]	; (8c5c <hci_cmd_handle+0x32c>)
	le_event_mask = sys_get_le64(cmd->events);
    8a62:	e9c3 0100 	strd	r0, r1, [r3]
    8a66:	e7ec      	b.n	8a42 <hci_cmd_handle+0x112>
	event_mask = sys_get_le64(cmd->events);
    8a68:	68a0      	ldr	r0, [r4, #8]
    8a6a:	f7ff ff5d 	bl	8928 <sys_get_le64>
    8a6e:	4b7a      	ldr	r3, [pc, #488]	; (8c58 <hci_cmd_handle+0x328>)
    8a70:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a74:	4611      	mov	r1, r2
    8a76:	a807      	add	r0, sp, #28
    8a78:	f7ff fdb2 	bl	85e0 <cmd_complete>
	ccst->status = 0x00;
    8a7c:	7005      	strb	r5, [r0, #0]
    8a7e:	e7c0      	b.n	8a02 <hci_cmd_handle+0xd2>
    8a80:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8a82:	2104      	movs	r1, #4
    8a84:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8a86:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8a88:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8a8a:	f7ff fda9 	bl	85e0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8a8e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8a90:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8a92:	1cc2      	adds	r2, r0, #3
    8a94:	4639      	mov	r1, r7
    8a96:	4630      	mov	r0, r6
    8a98:	f007 fc35 	bl	10306 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8a9c:	2800      	cmp	r0, #0
    8a9e:	bf14      	ite	ne
    8aa0:	2302      	movne	r3, #2
    8aa2:	2300      	moveq	r3, #0
    8aa4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8aa6:	f8a4 5001 	strh.w	r5, [r4, #1]
    8aaa:	e7aa      	b.n	8a02 <hci_cmd_handle+0xd2>
	handle = sys_le16_to_cpu(cmd->handle);
    8aac:	68a3      	ldr	r3, [r4, #8]
    8aae:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8ab0:	a908      	add	r1, sp, #32
    8ab2:	b2a0      	uxth	r0, r4
    8ab4:	f007 fc31 	bl	1031a <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8ab8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8aba:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8abc:	a807      	add	r0, sp, #28
    8abe:	f7ff fd8f 	bl	85e0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8ac2:	2d00      	cmp	r5, #0
    8ac4:	bf14      	ite	ne
    8ac6:	230c      	movne	r3, #12
    8ac8:	2300      	moveq	r3, #0
    8aca:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8acc:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8ad0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8ad4:	f8a0 3003 	strh.w	r3, [r0, #3]
    8ad8:	e793      	b.n	8a02 <hci_cmd_handle+0xd2>
    8ada:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8adc:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8ade:	8859      	ldrh	r1, [r3, #2]
    8ae0:	b2a0      	uxth	r0, r4
    8ae2:	f007 fc2e 	bl	10342 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8ae6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8ae8:	2103      	movs	r1, #3
    8aea:	a807      	add	r0, sp, #28
    8aec:	f7ff fd78 	bl	85e0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8af0:	2d00      	cmp	r5, #0
    8af2:	bf14      	ite	ne
    8af4:	230c      	movne	r3, #12
    8af6:	2300      	moveq	r3, #0
    8af8:	7003      	strb	r3, [r0, #0]
    8afa:	e277      	b.n	8fec <hci_cmd_handle+0x6bc>
	switch (ocf) {
    8afc:	3a01      	subs	r2, #1
    8afe:	2a08      	cmp	r2, #8
    8b00:	f63f af44 	bhi.w	898c <hci_cmd_handle+0x5c>
    8b04:	a301      	add	r3, pc, #4	; (adr r3, 8b0c <hci_cmd_handle+0x1dc>)
    8b06:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8b0a:	bf00      	nop
    8b0c:	00008b31 	.word	0x00008b31
    8b10:	00008b5b 	.word	0x00008b5b
    8b14:	00008c0f 	.word	0x00008c0f
    8b18:	0000898d 	.word	0x0000898d
    8b1c:	0000898d 	.word	0x0000898d
    8b20:	0000898d 	.word	0x0000898d
    8b24:	0000898d 	.word	0x0000898d
    8b28:	0000898d 	.word	0x0000898d
    8b2c:	00008c2b 	.word	0x00008c2b
	rp = cmd_complete(evt, sizeof(*rp));
    8b30:	2109      	movs	r1, #9
    8b32:	a807      	add	r0, sp, #28
    8b34:	f7ff fd54 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8b38:	2300      	movs	r3, #0
    8b3a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    8b3c:	7083      	strb	r3, [r0, #2]
    8b3e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8b40:	f06f 030e 	mvn.w	r3, #14
    8b44:	7143      	strb	r3, [r0, #5]
    8b46:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8b48:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8b4a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8b50:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8b52:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8b54:	71c3      	strb	r3, [r0, #7]
    8b56:	7203      	strb	r3, [r0, #8]
    8b58:	e753      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8b5a:	2141      	movs	r1, #65	; 0x41
    8b5c:	a807      	add	r0, sp, #28
    8b5e:	f7ff fd3f 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8b62:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8b64:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8b66:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8b68:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8b6c:	f7f9 f897 	bl	1c9e <memset>
	rp->commands[2] |= BIT(7);
    8b70:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    8b72:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    8b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b78:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    8b7a:	79a3      	ldrb	r3, [r4, #6]
    8b7c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8b80:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    8b82:	7ae3      	ldrb	r3, [r4, #11]
    8b84:	f043 0304 	orr.w	r3, r3, #4
    8b88:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8b8a:	7be3      	ldrb	r3, [r4, #15]
    8b8c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8b90:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    8b92:	7c23      	ldrb	r3, [r4, #16]
    8b94:	f043 0302 	orr.w	r3, r3, #2
    8b98:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8b9a:	7de3      	ldrb	r3, [r4, #23]
    8b9c:	f043 0304 	orr.w	r3, r3, #4
    8ba0:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    8ba2:	7ea3      	ldrb	r3, [r4, #26]
    8ba4:	f043 0317 	orr.w	r3, r3, #23
    8ba8:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    8baa:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8bac:	f043 0309 	orr.w	r3, r3, #9
    8bb0:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8bb2:	7863      	ldrb	r3, [r4, #1]
    8bb4:	f043 0320 	orr.w	r3, r3, #32
    8bb8:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8bba:	23ff      	movs	r3, #255	; 0xff
    8bbc:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    8bbe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    8bc2:	f063 030f 	orn	r3, r3, #15
    8bc6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    8bca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8bce:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8bd2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    8bd6:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8bd8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8bdc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8be0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8be4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8be8:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8bec:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8bf0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8bf4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8bf8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8bfc:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8c04:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8c08:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    8c0c:	e6f9      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c0e:	2109      	movs	r1, #9
    8c10:	a807      	add	r0, sp, #28
    8c12:	f7ff fce5 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8c16:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8c18:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8c1a:	2208      	movs	r2, #8
	rp->status = 0x00;
    8c1c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8c20:	f7f9 f83d 	bl	1c9e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8c24:	2360      	movs	r3, #96	; 0x60
    8c26:	7163      	strb	r3, [r4, #5]
    8c28:	e6eb      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c2a:	2107      	movs	r1, #7
    8c2c:	a807      	add	r0, sp, #28
    8c2e:	f7ff fcd7 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8c32:	4601      	mov	r1, r0
    8c34:	2300      	movs	r3, #0
    8c36:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8c3a:	4618      	mov	r0, r3
    8c3c:	f7ff fb20 	bl	8280 <ll_addr_get>
    8c40:	e6df      	b.n	8a02 <hci_cmd_handle+0xd2>
    8c42:	bf00      	nop
    8c44:	0001632c 	.word	0x0001632c
    8c48:	0001643f 	.word	0x0001643f
    8c4c:	2000084c 	.word	0x2000084c
    8c50:	00016459 	.word	0x00016459
    8c54:	20000854 	.word	0x20000854
    8c58:	20003d50 	.word	0x20003d50
    8c5c:	200008e0 	.word	0x200008e0
    8c60:	20003d58 	.word	0x20003d58
	switch (ocf) {
    8c64:	3a01      	subs	r2, #1
    8c66:	2a4d      	cmp	r2, #77	; 0x4d
    8c68:	f63f ae90 	bhi.w	898c <hci_cmd_handle+0x5c>
    8c6c:	a301      	add	r3, pc, #4	; (adr r3, 8c74 <hci_cmd_handle+0x344>)
    8c6e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8c72:	bf00      	nop
    8c74:	00008dad 	.word	0x00008dad
    8c78:	00008db7 	.word	0x00008db7
    8c7c:	00008dcf 	.word	0x00008dcf
    8c80:	0000898d 	.word	0x0000898d
    8c84:	00008df3 	.word	0x00008df3
    8c88:	0000898d 	.word	0x0000898d
    8c8c:	0000898d 	.word	0x0000898d
    8c90:	0000898d 	.word	0x0000898d
    8c94:	0000898d 	.word	0x0000898d
    8c98:	0000898d 	.word	0x0000898d
    8c9c:	00008e97 	.word	0x00008e97
    8ca0:	00008ec5 	.word	0x00008ec5
    8ca4:	00008ee5 	.word	0x00008ee5
    8ca8:	00008f0f 	.word	0x00008f0f
    8cac:	00008dff 	.word	0x00008dff
    8cb0:	00008e15 	.word	0x00008e15
    8cb4:	00008e27 	.word	0x00008e27
    8cb8:	00008e2f 	.word	0x00008e2f
    8cbc:	00008faf 	.word	0x00008faf
    8cc0:	00008f6f 	.word	0x00008f6f
    8cc4:	00008f8b 	.word	0x00008f8b
    8cc8:	00008fa5 	.word	0x00008fa5
    8ccc:	00008e37 	.word	0x00008e37
    8cd0:	00008e5d 	.word	0x00008e5d
    8cd4:	00008f77 	.word	0x00008f77
    8cd8:	0000898d 	.word	0x0000898d
    8cdc:	0000898d 	.word	0x0000898d
    8ce0:	00008e73 	.word	0x00008e73
    8ce4:	0000898d 	.word	0x0000898d
    8ce8:	0000898d 	.word	0x0000898d
    8cec:	0000898d 	.word	0x0000898d
    8cf0:	00008fc9 	.word	0x00008fc9
    8cf4:	00008ff3 	.word	0x00008ff3
    8cf8:	00009001 	.word	0x00009001
    8cfc:	00009011 	.word	0x00009011
    8d00:	00009029 	.word	0x00009029
    8d04:	0000898d 	.word	0x0000898d
    8d08:	0000898d 	.word	0x0000898d
    8d0c:	00009141 	.word	0x00009141
    8d10:	0000914f 	.word	0x0000914f
    8d14:	00009157 	.word	0x00009157
    8d18:	00009167 	.word	0x00009167
    8d1c:	00009179 	.word	0x00009179
    8d20:	00009197 	.word	0x00009197
    8d24:	000091b5 	.word	0x000091b5
    8d28:	000091cb 	.word	0x000091cb
    8d2c:	00009045 	.word	0x00009045
    8d30:	00009071 	.word	0x00009071
    8d34:	000090c7 	.word	0x000090c7
    8d38:	000090e5 	.word	0x000090e5
    8d3c:	0000898d 	.word	0x0000898d
    8d40:	0000898d 	.word	0x0000898d
    8d44:	0000898d 	.word	0x0000898d
    8d48:	0000898d 	.word	0x0000898d
    8d4c:	0000898d 	.word	0x0000898d
    8d50:	0000898d 	.word	0x0000898d
    8d54:	0000898d 	.word	0x0000898d
    8d58:	0000898d 	.word	0x0000898d
    8d5c:	0000898d 	.word	0x0000898d
    8d60:	0000898d 	.word	0x0000898d
    8d64:	0000898d 	.word	0x0000898d
    8d68:	0000898d 	.word	0x0000898d
    8d6c:	0000898d 	.word	0x0000898d
    8d70:	0000898d 	.word	0x0000898d
    8d74:	0000898d 	.word	0x0000898d
    8d78:	0000898d 	.word	0x0000898d
    8d7c:	0000898d 	.word	0x0000898d
    8d80:	0000898d 	.word	0x0000898d
    8d84:	0000898d 	.word	0x0000898d
    8d88:	0000898d 	.word	0x0000898d
    8d8c:	0000898d 	.word	0x0000898d
    8d90:	0000898d 	.word	0x0000898d
    8d94:	0000898d 	.word	0x0000898d
    8d98:	0000898d 	.word	0x0000898d
    8d9c:	000091df 	.word	0x000091df
    8da0:	0000898d 	.word	0x0000898d
    8da4:	0000898d 	.word	0x0000898d
    8da8:	000091d5 	.word	0x000091d5
	le_event_mask = sys_get_le64(cmd->events);
    8dac:	68a0      	ldr	r0, [r4, #8]
    8dae:	f7ff fdbb 	bl	8928 <sys_get_le64>
    8db2:	4baa      	ldr	r3, [pc, #680]	; (905c <hci_cmd_handle+0x72c>)
    8db4:	e655      	b.n	8a62 <hci_cmd_handle+0x132>
	rp = cmd_complete(evt, sizeof(*rp));
    8db6:	2104      	movs	r1, #4
    8db8:	a807      	add	r0, sp, #28
    8dba:	f7ff fc11 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8dbe:	2300      	movs	r3, #0
    8dc0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8dc2:	221b      	movs	r2, #27
    8dc4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8dc6:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8dc8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8dca:	70c3      	strb	r3, [r0, #3]
    8dcc:	e619      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8dce:	2109      	movs	r1, #9
    8dd0:	a807      	add	r0, sp, #28
    8dd2:	f7ff fc05 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8dd6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8dd8:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8dda:	2208      	movs	r2, #8
	rp->status = 0x00;
    8ddc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8de0:	f7f8 ff5d 	bl	1c9e <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8de4:	23ff      	movs	r3, #255	; 0xff
    8de6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8de8:	2341      	movs	r3, #65	; 0x41
    8dea:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8dec:	2301      	movs	r3, #1
    8dee:	70e3      	strb	r3, [r4, #3]
    8df0:	e607      	b.n	8a02 <hci_cmd_handle+0xd2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8df2:	68a1      	ldr	r1, [r4, #8]
    8df4:	2001      	movs	r0, #1
    8df6:	f7ff fa5d 	bl	82b4 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8dfa:	4604      	mov	r4, r0
    8dfc:	e0af      	b.n	8f5e <hci_cmd_handle+0x62e>
	rp = cmd_complete(evt, sizeof(*rp));
    8dfe:	2102      	movs	r1, #2
    8e00:	a807      	add	r0, sp, #28
    8e02:	f7ff fbed 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8e06:	2300      	movs	r3, #0
    8e08:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8e0a:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8e0c:	f008 f958 	bl	110c0 <ll_wl_size_get>
    8e10:	7060      	strb	r0, [r4, #1]
    8e12:	e5f6      	b.n	8a02 <hci_cmd_handle+0xd2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8e14:	2101      	movs	r1, #1
    8e16:	a807      	add	r0, sp, #28
    8e18:	f7ff fbe2 	bl	85e0 <cmd_complete>
    8e1c:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8e1e:	f008 f951 	bl	110c4 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8e22:	7020      	strb	r0, [r4, #0]
    8e24:	e5ed      	b.n	8a02 <hci_cmd_handle+0xd2>
	status = ll_wl_add(&cmd->addr);
    8e26:	68a0      	ldr	r0, [r4, #8]
    8e28:	f008 f9f8 	bl	1121c <ll_wl_add>
    8e2c:	e7e5      	b.n	8dfa <hci_cmd_handle+0x4ca>
	status = ll_wl_remove(&cmd->addr);
    8e2e:	68a0      	ldr	r0, [r4, #8]
    8e30:	f008 f968 	bl	11104 <ll_wl_remove>
    8e34:	e7e1      	b.n	8dfa <hci_cmd_handle+0x4ca>
    8e36:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8e38:	2300      	movs	r3, #0
    8e3a:	aa08      	add	r2, sp, #32
    8e3c:	f100 0110 	add.w	r1, r0, #16
    8e40:	f008 fe34 	bl	11aac <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8e44:	2111      	movs	r1, #17
    8e46:	a807      	add	r0, sp, #28
    8e48:	f7ff fbca 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8e4c:	2300      	movs	r3, #0
    8e4e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8e52:	2210      	movs	r2, #16
    8e54:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8e56:	f7f8 fef6 	bl	1c46 <memcpy>
    8e5a:	e5d2      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8e5c:	2109      	movs	r1, #9
    8e5e:	a807      	add	r0, sp, #28
    8e60:	f7ff fbbe 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8e64:	2300      	movs	r3, #0
    8e66:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8e6a:	2108      	movs	r1, #8
    8e6c:	f7ff fa42 	bl	82f4 <bt_rand>
    8e70:	e5c7      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    8e72:	2109      	movs	r1, #9
    8e74:	a807      	add	r0, sp, #28
    8e76:	f7ff fbb3 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    8e7a:	4601      	mov	r1, r0
    8e7c:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8e7e:	4602      	mov	r2, r0
	rp->status = 0x00;
    8e80:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8e84:	4876      	ldr	r0, [pc, #472]	; (9060 <hci_cmd_handle+0x730>)
    8e86:	f7ff fb67 	bl	8558 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8e8a:	f240 203f 	movw	r0, #575	; 0x23f
    8e8e:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8e90:	f7ff fb62 	bl	8558 <sys_put_le32>
    8e94:	e5b5      	b.n	8a02 <hci_cmd_handle+0xd2>
    8e96:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8e98:	7963      	ldrb	r3, [r4, #5]
    8e9a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8e9e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8ea2:	7820      	ldrb	r0, [r4, #0]
    8ea4:	79a4      	ldrb	r4, [r4, #6]
    8ea6:	9400      	str	r4, [sp, #0]
    8ea8:	f007 ff0c 	bl	10cc4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8eac:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8eae:	2101      	movs	r1, #1
    8eb0:	a807      	add	r0, sp, #28
    8eb2:	f7ff fb95 	bl	85e0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8eb6:	2c00      	cmp	r4, #0
    8eb8:	bf18      	it	ne
    8eba:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8ebc:	bf08      	it	eq
    8ebe:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8ec0:	7003      	strb	r3, [r0, #0]
    8ec2:	e59e      	b.n	8a02 <hci_cmd_handle+0xd2>
    8ec4:	68a2      	ldr	r2, [r4, #8]
    8ec6:	4b67      	ldr	r3, [pc, #412]	; (9064 <hci_cmd_handle+0x734>)
	if (cmd->enable && cmd->filter_dup) {
    8ec8:	7810      	ldrb	r0, [r2, #0]
    8eca:	b140      	cbz	r0, 8ede <hci_cmd_handle+0x5ae>
    8ecc:	7852      	ldrb	r2, [r2, #1]
    8ece:	b132      	cbz	r2, 8ede <hci_cmd_handle+0x5ae>
		dup_count = 0;
    8ed0:	2200      	movs	r2, #0
    8ed2:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8ed4:	4b64      	ldr	r3, [pc, #400]	; (9068 <hci_cmd_handle+0x738>)
		dup_count = -1;
    8ed6:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8ed8:	f007 ff14 	bl	10d04 <ll_scan_enable>
    8edc:	e7e6      	b.n	8eac <hci_cmd_handle+0x57c>
		dup_count = -1;
    8ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ee2:	e7f8      	b.n	8ed6 <hci_cmd_handle+0x5a6>
    8ee4:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8ee6:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8eea:	7963      	ldrb	r3, [r4, #5]
    8eec:	7922      	ldrb	r2, [r4, #4]
    8eee:	8861      	ldrh	r1, [r4, #2]
    8ef0:	8820      	ldrh	r0, [r4, #0]
    8ef2:	9504      	str	r5, [sp, #16]
    8ef4:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8ef8:	9503      	str	r5, [sp, #12]
    8efa:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8efe:	9502      	str	r5, [sp, #8]
    8f00:	7b25      	ldrb	r5, [r4, #12]
    8f02:	9501      	str	r5, [sp, #4]
    8f04:	3406      	adds	r4, #6
    8f06:	9400      	str	r4, [sp, #0]
    8f08:	f007 ff36 	bl	10d78 <ll_create_connection>
    8f0c:	e572      	b.n	89f4 <hci_cmd_handle+0xc4>
	status = ll_connect_disable();
    8f0e:	f007 fd77 	bl	10a00 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8f12:	4606      	mov	r6, r0
    8f14:	bb48      	cbnz	r0, 8f6a <hci_cmd_handle+0x63a>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f1a:	2001      	movs	r0, #1
    8f1c:	f7fb f91c 	bl	4158 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f20:	4a52      	ldr	r2, [pc, #328]	; (906c <hci_cmd_handle+0x73c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f22:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f24:	e9d2 4500 	ldrd	r4, r5, [r2]
    8f28:	2400      	movs	r4, #0
    8f2a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8f2e:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8f32:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8f34:	d004      	beq.n	8f40 <hci_cmd_handle+0x610>
    8f36:	4632      	mov	r2, r6
    8f38:	4631      	mov	r1, r6
    8f3a:	2002      	movs	r0, #2
    8f3c:	f7ff fbc0 	bl	86c0 <le_conn_complete.part.39>
		if ((*evt)->len) {
    8f40:	9807      	ldr	r0, [sp, #28]
    8f42:	8984      	ldrh	r4, [r0, #12]
    8f44:	b14c      	cbz	r4, 8f5a <hci_cmd_handle+0x62a>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8f46:	2101      	movs	r1, #1
    8f48:	a808      	add	r0, sp, #32
    8f4a:	f7ff fb49 	bl	85e0 <cmd_complete>
			ccst->status = cmd_status;
    8f4e:	2300      	movs	r3, #0
    8f50:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8f52:	9808      	ldr	r0, [sp, #32]
    8f54:	f7fa fef8 	bl	3d48 <bt_recv_prio>
    8f58:	e553      	b.n	8a02 <hci_cmd_handle+0xd2>
			net_buf_unref(*evt);
    8f5a:	f009 fb9d 	bl	12698 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f5e:	2101      	movs	r1, #1
    8f60:	a807      	add	r0, sp, #28
    8f62:	f7ff fb3d 	bl	85e0 <cmd_complete>
	ccst->status = status;
    8f66:	7004      	strb	r4, [r0, #0]
    8f68:	e54b      	b.n	8a02 <hci_cmd_handle+0xd2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8f6a:	240c      	movs	r4, #12
    8f6c:	e7f7      	b.n	8f5e <hci_cmd_handle+0x62e>
	status = ll_chm_update(&cmd->ch_map[0]);
    8f6e:	68a0      	ldr	r0, [r4, #8]
    8f70:	f007 f936 	bl	101e0 <ll_chm_update>
    8f74:	e79a      	b.n	8eac <hci_cmd_handle+0x57c>
    8f76:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8f78:	f100 030c 	add.w	r3, r0, #12
    8f7c:	f100 020a 	add.w	r2, r0, #10
    8f80:	1c81      	adds	r1, r0, #2
    8f82:	8800      	ldrh	r0, [r0, #0]
    8f84:	f007 fbc4 	bl	10710 <ll_enc_req_send>
    8f88:	e534      	b.n	89f4 <hci_cmd_handle+0xc4>
	handle = sys_le16_to_cpu(cmd->handle);
    8f8a:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8f8c:	2108      	movs	r1, #8
    8f8e:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8f90:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8f92:	f7ff fb25 	bl	85e0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8f96:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8f98:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8f9a:	1cc1      	adds	r1, r0, #3
    8f9c:	4630      	mov	r0, r6
    8f9e:	f007 f961 	bl	10264 <ll_chm_get>
    8fa2:	e57b      	b.n	8a9c <hci_cmd_handle+0x16c>
	handle = sys_le16_to_cpu(cmd->handle);
    8fa4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8fa6:	8818      	ldrh	r0, [r3, #0]
    8fa8:	f007 f971 	bl	1028e <ll_feature_req_send>
    8fac:	e522      	b.n	89f4 <hci_cmd_handle+0xc4>
    8fae:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8fb0:	8911      	ldrh	r1, [r2, #8]
    8fb2:	8893      	ldrh	r3, [r2, #4]
    8fb4:	8810      	ldrh	r0, [r2, #0]
    8fb6:	9101      	str	r1, [sp, #4]
    8fb8:	88d2      	ldrh	r2, [r2, #6]
    8fba:	9200      	str	r2, [sp, #0]
    8fbc:	2200      	movs	r2, #0
    8fbe:	4611      	mov	r1, r2
    8fc0:	f007 f896 	bl	100f0 <ll_conn_update>
	*evt = cmd_status(status);
    8fc4:	b2c0      	uxtb	r0, r0
    8fc6:	e519      	b.n	89fc <hci_cmd_handle+0xcc>
    8fc8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fca:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8fcc:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fce:	8893      	ldrh	r3, [r2, #4]
    8fd0:	9101      	str	r1, [sp, #4]
    8fd2:	88d2      	ldrh	r2, [r2, #6]
    8fd4:	9200      	str	r2, [sp, #0]
    8fd6:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8fd8:	2102      	movs	r1, #2
    8fda:	b2a0      	uxth	r0, r4
    8fdc:	f007 f888 	bl	100f0 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8fe0:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8fe2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8fe4:	a807      	add	r0, sp, #28
    8fe6:	f7ff fafb 	bl	85e0 <cmd_complete>
	rp->status = status;
    8fea:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8fec:	f8a0 4001 	strh.w	r4, [r0, #1]
    8ff0:	e507      	b.n	8a02 <hci_cmd_handle+0xd2>
    8ff2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8ff4:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8ff6:	789a      	ldrb	r2, [r3, #2]
    8ff8:	2300      	movs	r3, #0
    8ffa:	9301      	str	r3, [sp, #4]
    8ffc:	9300      	str	r3, [sp, #0]
    8ffe:	e7eb      	b.n	8fd8 <hci_cmd_handle+0x6a8>
    9000:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    9002:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    9004:	889a      	ldrh	r2, [r3, #4]
    9006:	8859      	ldrh	r1, [r3, #2]
    9008:	b2a0      	uxth	r0, r4
    900a:	f007 f9b0 	bl	1036e <ll_length_req_send>
    900e:	e56a      	b.n	8ae6 <hci_cmd_handle+0x1b6>
	rp = cmd_complete(evt, sizeof(*rp));
    9010:	2105      	movs	r1, #5
    9012:	a807      	add	r0, sp, #28
    9014:	f7ff fae4 	bl	85e0 <cmd_complete>
    9018:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    901a:	1cc1      	adds	r1, r0, #3
    901c:	3001      	adds	r0, #1
    901e:	f007 f9c9 	bl	103b4 <ll_length_default_get>
	rp->status = 0x00;
    9022:	2300      	movs	r3, #0
    9024:	7023      	strb	r3, [r4, #0]
    9026:	e4ec      	b.n	8a02 <hci_cmd_handle+0xd2>
    9028:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    902a:	8859      	ldrh	r1, [r3, #2]
    902c:	8818      	ldrh	r0, [r3, #0]
    902e:	f007 f9cb 	bl	103c8 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    9032:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9034:	2101      	movs	r1, #1
    9036:	a807      	add	r0, sp, #28
    9038:	f7ff fad2 	bl	85e0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    903c:	2c00      	cmp	r4, #0
    903e:	bf18      	it	ne
    9040:	231e      	movne	r3, #30
    9042:	e73b      	b.n	8ebc <hci_cmd_handle+0x58c>
	rp = cmd_complete(evt, sizeof(*rp));
    9044:	2109      	movs	r1, #9
    9046:	a807      	add	r0, sp, #28
    9048:	f7ff faca 	bl	85e0 <cmd_complete>
    904c:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    904e:	1dc3      	adds	r3, r0, #7
    9050:	1d42      	adds	r2, r0, #5
    9052:	1cc1      	adds	r1, r0, #3
    9054:	3001      	adds	r0, #1
    9056:	f007 f9c1 	bl	103dc <ll_length_max_get>
    905a:	e7e2      	b.n	9022 <hci_cmd_handle+0x6f2>
    905c:	20003d58 	.word	0x20003d58
    9060:	130f3370 	.word	0x130f3370
    9064:	20000854 	.word	0x20000854
    9068:	20000858 	.word	0x20000858
    906c:	20003d50 	.word	0x20003d50
	handle = sys_le16_to_cpu(cmd->handle);
    9070:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9072:	2105      	movs	r1, #5
    9074:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    9076:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9078:	f7ff fab2 	bl	85e0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    907c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    907e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9080:	1d02      	adds	r2, r0, #4
    9082:	1cc1      	adds	r1, r0, #3
    9084:	4630      	mov	r0, r6
    9086:	f007 f9b2 	bl	103ee <ll_phy_get>
	return __builtin_ffs(op);
    908a:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    908c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9090:	2800      	cmp	r0, #0
    9092:	bf14      	ite	ne
    9094:	230c      	movne	r3, #12
    9096:	2300      	moveq	r3, #0
    9098:	7023      	strb	r3, [r4, #0]
    909a:	2a00      	cmp	r2, #0
    909c:	fa92 f3a2 	rbit	r3, r2
    90a0:	fab3 f383 	clz	r3, r3
    90a4:	7922      	ldrb	r2, [r4, #4]
    90a6:	bf08      	it	eq
    90a8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    90ac:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    90ae:	70e3      	strb	r3, [r4, #3]
    90b0:	2a00      	cmp	r2, #0
    90b2:	fa92 f3a2 	rbit	r3, r2
    90b6:	fab3 f383 	clz	r3, r3
    90ba:	bf08      	it	eq
    90bc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    90c0:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    90c2:	7123      	strb	r3, [r4, #4]
    90c4:	e49d      	b.n	8a02 <hci_cmd_handle+0xd2>
    90c6:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90c8:	781a      	ldrb	r2, [r3, #0]
    90ca:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    90cc:	bf44      	itt	mi
    90ce:	2107      	movmi	r1, #7
    90d0:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    90d2:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    90d4:	bf44      	itt	mi
    90d6:	2207      	movmi	r2, #7
    90d8:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    90da:	7899      	ldrb	r1, [r3, #2]
    90dc:	7858      	ldrb	r0, [r3, #1]
    90de:	f007 f99b 	bl	10418 <ll_phy_default_set>
    90e2:	e7a6      	b.n	9032 <hci_cmd_handle+0x702>
    90e4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90e6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    90e8:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    90ea:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    90ee:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    90f0:	bf44      	itt	mi
    90f2:	2103      	movmi	r1, #3
    90f4:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    90f6:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    90f8:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    90fa:	bf44      	itt	mi
    90fc:	2203      	movmi	r2, #3
    90fe:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9100:	074d      	lsls	r5, r1, #29
    9102:	d002      	beq.n	910a <hci_cmd_handle+0x7da>
	    !(cmd->rx_phys & 0x07)) {
    9104:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    9106:	075a      	lsls	r2, r3, #29
    9108:	d105      	bne.n	9116 <hci_cmd_handle+0x7e6>
		ccst = cmd_complete(evt, sizeof(*ccst));
    910a:	2101      	movs	r1, #1
    910c:	a807      	add	r0, sp, #28
    910e:	f7ff fa67 	bl	85e0 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    9112:	2312      	movs	r3, #18
    9114:	e6d4      	b.n	8ec0 <hci_cmd_handle+0x590>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9116:	ea41 0203 	orr.w	r2, r1, r3
    911a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    911e:	d005      	beq.n	912c <hci_cmd_handle+0x7fc>
		ccst = cmd_complete(evt, sizeof(*ccst));
    9120:	2101      	movs	r1, #1
    9122:	a807      	add	r0, sp, #28
    9124:	f7ff fa5c 	bl	85e0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9128:	2311      	movs	r3, #17
    912a:	e6c9      	b.n	8ec0 <hci_cmd_handle+0x590>
	if (phy_opts & 0x03) {
    912c:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    9130:	bf1c      	itt	ne
    9132:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9136:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    913a:	f007 f977 	bl	1042c <ll_phy_req_send>
    913e:	e459      	b.n	89f4 <hci_cmd_handle+0xc4>
    9140:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9142:	f100 0217 	add.w	r2, r0, #23
    9146:	1dc1      	adds	r1, r0, #7
    9148:	f008 fa4c 	bl	115e4 <ll_rl_add>
    914c:	e655      	b.n	8dfa <hci_cmd_handle+0x4ca>
	status = ll_rl_remove(&cmd->peer_id_addr);
    914e:	68a0      	ldr	r0, [r4, #8]
    9150:	f008 faea 	bl	11728 <ll_rl_remove>
    9154:	e651      	b.n	8dfa <hci_cmd_handle+0x4ca>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9156:	2101      	movs	r1, #1
    9158:	a807      	add	r0, sp, #28
    915a:	f7ff fa41 	bl	85e0 <cmd_complete>
    915e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    9160:	f008 fa26 	bl	115b0 <ll_rl_clear>
    9164:	e65d      	b.n	8e22 <hci_cmd_handle+0x4f2>
	rp = cmd_complete(evt, sizeof(*rp));
    9166:	2102      	movs	r1, #2
    9168:	a807      	add	r0, sp, #28
    916a:	f7ff fa39 	bl	85e0 <cmd_complete>
    916e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    9170:	f008 fa1c 	bl	115ac <ll_rl_size_get>
    9174:	7060      	strb	r0, [r4, #1]
    9176:	e754      	b.n	9022 <hci_cmd_handle+0x6f2>
    9178:	2207      	movs	r2, #7
    917a:	68a1      	ldr	r1, [r4, #8]
    917c:	a808      	add	r0, sp, #32
    917e:	f7f8 fd62 	bl	1c46 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9182:	2107      	movs	r1, #7
    9184:	a807      	add	r0, sp, #28
    9186:	f7ff fa2b 	bl	85e0 <cmd_complete>
    918a:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    918c:	1c41      	adds	r1, r0, #1
    918e:	a808      	add	r0, sp, #32
    9190:	f008 fb58 	bl	11844 <ll_rl_crpa_get>
    9194:	e645      	b.n	8e22 <hci_cmd_handle+0x4f2>
    9196:	2207      	movs	r2, #7
    9198:	68a1      	ldr	r1, [r4, #8]
    919a:	a808      	add	r0, sp, #32
    919c:	f7f8 fd53 	bl	1c46 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    91a0:	2107      	movs	r1, #7
    91a2:	a807      	add	r0, sp, #28
    91a4:	f7ff fa1c 	bl	85e0 <cmd_complete>
    91a8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    91aa:	1c41      	adds	r1, r0, #1
    91ac:	a808      	add	r0, sp, #32
    91ae:	f008 fb69 	bl	11884 <ll_rl_lrpa_get>
    91b2:	e636      	b.n	8e22 <hci_cmd_handle+0x4f2>
	u8_t enable = cmd->enable;
    91b4:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    91b6:	2101      	movs	r1, #1
    91b8:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    91ba:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    91bc:	f7ff fa10 	bl	85e0 <cmd_complete>
    91c0:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    91c2:	4628      	mov	r0, r5
    91c4:	f008 fb76 	bl	118b4 <ll_rl_enable>
    91c8:	e62b      	b.n	8e22 <hci_cmd_handle+0x4f2>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    91ca:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    91cc:	8818      	ldrh	r0, [r3, #0]
    91ce:	f008 fb83 	bl	118d8 <ll_rl_timeout_set>
    91d2:	e436      	b.n	8a42 <hci_cmd_handle+0x112>
    91d4:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    91d6:	79c1      	ldrb	r1, [r0, #7]
    91d8:	f008 fb86 	bl	118e8 <ll_priv_mode_set>
    91dc:	e60d      	b.n	8dfa <hci_cmd_handle+0x4ca>
	rp = cmd_complete(evt, sizeof(*rp));
    91de:	2103      	movs	r1, #3
    91e0:	a807      	add	r0, sp, #28
    91e2:	f7ff f9fd 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    91e6:	4601      	mov	r1, r0
    91e8:	2300      	movs	r3, #0
    91ea:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    91ee:	3001      	adds	r0, #1
    91f0:	f7ff f87c 	bl	82ec <ll_tx_pwr_get>
    91f4:	e405      	b.n	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    91f6:	210d      	movs	r1, #13
    91f8:	a807      	add	r0, sp, #28
    91fa:	f7ff f9f1 	bl	85e0 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    91fe:	2202      	movs	r2, #2
    9200:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9202:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    9204:	2201      	movs	r2, #1
    9206:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9208:	220c      	movs	r2, #12
	rp->status = 0x00;
    920a:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    920c:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    920e:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    9210:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9212:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9214:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9216:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9218:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    921a:	7242      	strb	r2, [r0, #9]
    921c:	7283      	strb	r3, [r0, #10]
    921e:	72c3      	strb	r3, [r0, #11]
    9220:	7303      	strb	r3, [r0, #12]
    9222:	f7ff bbee 	b.w	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    9226:	2141      	movs	r1, #65	; 0x41
    9228:	a807      	add	r0, sp, #28
    922a:	f7ff f9d9 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    922e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9230:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9232:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9234:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9238:	f7f8 fd31 	bl	1c9e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    923c:	7863      	ldrb	r3, [r4, #1]
    923e:	f063 0358 	orn	r3, r3, #88	; 0x58
    9242:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9244:	78a3      	ldrb	r3, [r4, #2]
    9246:	f043 0303 	orr.w	r3, r3, #3
    924a:	70a3      	strb	r3, [r4, #2]
    924c:	f7ff bbd9 	b.w	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    9250:	2109      	movs	r1, #9
    9252:	a807      	add	r0, sp, #28
    9254:	f7ff f9c4 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    9258:	2100      	movs	r1, #0
    925a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    925e:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    9260:	f7f8 fd1d 	bl	1c9e <memset>
    9264:	f7ff bbcd 	b.w	8a02 <hci_cmd_handle+0xd2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9268:	4b5c      	ldr	r3, [pc, #368]	; (93dc <hci_cmd_handle+0xaac>)
    926a:	aa08      	add	r2, sp, #32
    926c:	f103 0628 	add.w	r6, r3, #40	; 0x28
    9270:	4615      	mov	r5, r2
    9272:	6818      	ldr	r0, [r3, #0]
    9274:	6859      	ldr	r1, [r3, #4]
    9276:	4614      	mov	r4, r2
    9278:	c403      	stmia	r4!, {r0, r1}
    927a:	3308      	adds	r3, #8
    927c:	42b3      	cmp	r3, r6
    927e:	4622      	mov	r2, r4
    9280:	d1f7      	bne.n	9272 <hci_cmd_handle+0x942>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9282:	2129      	movs	r1, #41	; 0x29
    9284:	a807      	add	r0, sp, #28
    9286:	f7ff f9ab 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    928a:	2300      	movs	r3, #0
    928c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    9290:	2228      	movs	r2, #40	; 0x28
    9292:	4629      	mov	r1, r5
    9294:	e5df      	b.n	8e56 <hci_cmd_handle+0x526>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9296:	68a1      	ldr	r1, [r4, #8]
    9298:	2000      	movs	r0, #0
    929a:	f7ff f80b 	bl	82b4 <ll_addr_set>
    929e:	f7ff bbd0 	b.w	8a42 <hci_cmd_handle+0x112>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    92a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    92a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    92aa:	3201      	adds	r2, #1
    92ac:	d106      	bne.n	92bc <hci_cmd_handle+0x98c>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    92ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    92b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    92b6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    92b8:	4293      	cmp	r3, r2
    92ba:	d020      	beq.n	92fe <hci_cmd_handle+0x9ce>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    92bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    92c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    92c4:	07db      	lsls	r3, r3, #31
    92c6:	d51a      	bpl.n	92fe <hci_cmd_handle+0x9ce>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    92c8:	2118      	movs	r1, #24
    92ca:	a807      	add	r0, sp, #28
    92cc:	f7ff f988 	bl	85e0 <cmd_complete>
		rp->status = 0x00;
    92d0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    92d2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    92d4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    92d6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    92d8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    92da:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    92de:	1ca1      	adds	r1, r4, #2
    92e0:	f7ff f93a 	bl	8558 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    92e4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    92e8:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    92ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    92ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
    92f2:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    92f4:	2210      	movs	r2, #16
    92f6:	4631      	mov	r1, r6
    92f8:	f104 0008 	add.w	r0, r4, #8
    92fc:	e7b0      	b.n	9260 <hci_cmd_handle+0x930>
	rp = cmd_complete(evt, sizeof(*rp));
    92fe:	2102      	movs	r1, #2
    9300:	a807      	add	r0, sp, #28
    9302:	f7ff f96d 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    9306:	2300      	movs	r3, #0
    9308:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    930a:	7043      	strb	r3, [r0, #1]
    930c:	f7ff bb79 	b.w	8a02 <hci_cmd_handle+0xd2>
	rp = cmd_complete(evt, sizeof(*rp));
    9310:	2121      	movs	r1, #33	; 0x21
    9312:	a807      	add	r0, sp, #28
    9314:	f7ff f964 	bl	85e0 <cmd_complete>
	rp->status = 0x00;
    9318:	4603      	mov	r3, r0
    931a:	2200      	movs	r2, #0
    931c:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9324:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9326:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    932a:	3101      	adds	r1, #1
    932c:	d04b      	beq.n	93c6 <hci_cmd_handle+0xa96>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    932e:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9332:	3101      	adds	r1, #1
    9334:	d047      	beq.n	93c6 <hci_cmd_handle+0xa96>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9336:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    933a:	3101      	adds	r1, #1
    933c:	d043      	beq.n	93c6 <hci_cmd_handle+0xa96>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    933e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9342:	3101      	adds	r1, #1
    9344:	d03f      	beq.n	93c6 <hci_cmd_handle+0xa96>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9346:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    934a:	4619      	mov	r1, r3
    934c:	f7ff f904 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    9350:	1d61      	adds	r1, r4, #5
    9352:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9356:	f7ff f8ff 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    935a:	f104 0109 	add.w	r1, r4, #9
    935e:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    9362:	f7ff f8f9 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9366:	f104 010d 	add.w	r1, r4, #13
    936a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    936e:	f7ff f8f3 	bl	8558 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9376:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    937a:	3301      	adds	r3, #1
    937c:	f104 0311 	add.w	r3, r4, #17
    9380:	d027      	beq.n	93d2 <hci_cmd_handle+0xaa2>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9382:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9386:	3101      	adds	r1, #1
    9388:	d023      	beq.n	93d2 <hci_cmd_handle+0xaa2>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    938a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    938e:	3101      	adds	r1, #1
    9390:	d01f      	beq.n	93d2 <hci_cmd_handle+0xaa2>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    9392:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9396:	3101      	adds	r1, #1
    9398:	d01b      	beq.n	93d2 <hci_cmd_handle+0xaa2>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    939a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    939e:	4619      	mov	r1, r3
    93a0:	f7ff f8da 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    93a4:	f104 0115 	add.w	r1, r4, #21
    93a8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    93ac:	f7ff f8d4 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    93b0:	f104 0119 	add.w	r1, r4, #25
    93b4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    93b8:	f7ff f8ce 	bl	8558 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    93bc:	f104 011d 	add.w	r1, r4, #29
    93c0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    93c4:	e564      	b.n	8e90 <hci_cmd_handle+0x560>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    93c6:	2210      	movs	r2, #16
    93c8:	2100      	movs	r1, #0
    93ca:	4618      	mov	r0, r3
    93cc:	f7f8 fc67 	bl	1c9e <memset>
    93d0:	e7cf      	b.n	9372 <hci_cmd_handle+0xa42>
		memset(rp->er, 0x00, sizeof(rp->er));
    93d2:	2210      	movs	r2, #16
    93d4:	2100      	movs	r1, #0
    93d6:	4618      	mov	r0, r3
    93d8:	e742      	b.n	9260 <hci_cmd_handle+0x930>
    93da:	bf00      	nop
    93dc:	0001647b 	.word	0x0001647b

000093e0 <hci_acl_handle>:
{
    93e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    93e4:	2300      	movs	r3, #0
    93e6:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    93e8:	8983      	ldrh	r3, [r0, #12]
    93ea:	2b03      	cmp	r3, #3
{
    93ec:	4606      	mov	r6, r0
    93ee:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    93f0:	d808      	bhi.n	9404 <hci_acl_handle+0x24>
		BT_ERR("No HCI ACL header");
    93f2:	4a32      	ldr	r2, [pc, #200]	; (94bc <hci_acl_handle+0xdc>)
    93f4:	4932      	ldr	r1, [pc, #200]	; (94c0 <hci_acl_handle+0xe0>)
		BT_ERR("Invalid HCI ACL packet length");
    93f6:	2003      	movs	r0, #3
    93f8:	f7f8 fdec 	bl	1fd4 <bt_log>
		return -EINVAL;
    93fc:	f06f 0015 	mvn.w	r0, #21
    9400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9404:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9408:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    940a:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    940c:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    940e:	f009 f9a3 	bl	12758 <net_buf_simple_pull>
	if (buf->len < len) {
    9412:	89b3      	ldrh	r3, [r6, #12]
    9414:	42bb      	cmp	r3, r7
    9416:	d202      	bcs.n	941e <hci_acl_handle+0x3e>
		BT_ERR("Invalid HCI ACL packet length");
    9418:	4a28      	ldr	r2, [pc, #160]	; (94bc <hci_acl_handle+0xdc>)
    941a:	492a      	ldr	r1, [pc, #168]	; (94c4 <hci_acl_handle+0xe4>)
    941c:	e7eb      	b.n	93f6 <hci_acl_handle+0x16>
	node_tx = ll_tx_mem_acquire();
    941e:	f007 f903 	bl	10628 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    9422:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9426:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9428:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    942c:	bb18      	cbnz	r0, 9476 <hci_acl_handle+0x96>
		BT_ERR("Tx Buffer Overflow");
    942e:	4a23      	ldr	r2, [pc, #140]	; (94bc <hci_acl_handle+0xdc>)
    9430:	4925      	ldr	r1, [pc, #148]	; (94c8 <hci_acl_handle+0xe8>)
    9432:	2003      	movs	r0, #3
    9434:	f7f8 fdce 	bl	1fd4 <bt_log>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    9438:	4b24      	ldr	r3, [pc, #144]	; (94cc <hci_acl_handle+0xec>)
    943a:	e9d3 2300 	ldrd	r2, r3, [r3]
    943e:	2300      	movs	r3, #0
    9440:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9444:	4313      	orrs	r3, r2
    9446:	d012      	beq.n	946e <hci_acl_handle+0x8e>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    944c:	2001      	movs	r0, #1
    944e:	f7fa fe83 	bl	4158 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9452:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9454:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9458:	211a      	movs	r1, #26
    945a:	f7ff f886 	bl	856a <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    945e:	f8d8 0000 	ldr.w	r0, [r8]
    9462:	2101      	movs	r1, #1
    9464:	3008      	adds	r0, #8
    9466:	f009 f949 	bl	126fc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    946a:	2301      	movs	r3, #1
    946c:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    946e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9476:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    9478:	f1b9 0f00 	cmp.w	r9, #0
    947c:	d002      	beq.n	9484 <hci_acl_handle+0xa4>
    947e:	f1b9 0f02 	cmp.w	r9, #2
    9482:	d118      	bne.n	94b6 <hci_acl_handle+0xd6>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9484:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9486:	f362 0301 	bfi	r3, r2, #0, #2
    948a:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    948c:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    948e:	68b1      	ldr	r1, [r6, #8]
    9490:	463a      	mov	r2, r7
    9492:	1de0      	adds	r0, r4, #7
    9494:	f7f8 fbd7 	bl	1c46 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    9498:	4621      	mov	r1, r4
    949a:	4628      	mov	r0, r5
    949c:	f007 f8d0 	bl	10640 <ll_tx_mem_enqueue>
    94a0:	2800      	cmp	r0, #0
    94a2:	d0e6      	beq.n	9472 <hci_acl_handle+0x92>
		BT_ERR("Invalid Tx Enqueue");
    94a4:	4a05      	ldr	r2, [pc, #20]	; (94bc <hci_acl_handle+0xdc>)
    94a6:	490a      	ldr	r1, [pc, #40]	; (94d0 <hci_acl_handle+0xf0>)
    94a8:	2003      	movs	r0, #3
    94aa:	f7f8 fd93 	bl	1fd4 <bt_log>
		ll_tx_mem_release(node_tx);
    94ae:	4620      	mov	r0, r4
    94b0:	f007 f8c0 	bl	10634 <ll_tx_mem_release>
    94b4:	e7a2      	b.n	93fc <hci_acl_handle+0x1c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    94b6:	2201      	movs	r2, #1
    94b8:	e7e5      	b.n	9486 <hci_acl_handle+0xa6>
    94ba:	bf00      	nop
    94bc:	0001633b 	.word	0x0001633b
    94c0:	000163d9 	.word	0x000163d9
    94c4:	000163ef 	.word	0x000163ef
    94c8:	00016411 	.word	0x00016411
    94cc:	20003d50 	.word	0x20003d50
    94d0:	00016428 	.word	0x00016428

000094d4 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    94d4:	7a03      	ldrb	r3, [r0, #8]
    94d6:	f003 0303 	and.w	r3, r3, #3
    94da:	3b01      	subs	r3, #1
    94dc:	2b01      	cmp	r3, #1
{
    94de:	b570      	push	{r4, r5, r6, lr}
    94e0:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    94e2:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    94e4:	d81b      	bhi.n	951e <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    94e6:	f101 0608 	add.w	r6, r1, #8
    94ea:	4630      	mov	r0, r6
    94ec:	2104      	movs	r1, #4
    94ee:	f009 f905 	bl	126fc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    94f2:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    94f4:	7a61      	ldrb	r1, [r4, #9]
    94f6:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    94f8:	f003 0303 	and.w	r3, r3, #3
    94fc:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    94fe:	bf0c      	ite	eq
    9500:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9504:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9508:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    950a:	4630      	mov	r0, r6
    950c:	f009 f8f6 	bl	126fc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9510:	7a62      	ldrb	r2, [r4, #9]
    9512:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    9516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    951a:	f7f8 bb94 	b.w	1c46 <memcpy>
		LL_ASSERT(0);
    951e:	4a05      	ldr	r2, [pc, #20]	; (9534 <hci_acl_encode+0x60>)
    9520:	4905      	ldr	r1, [pc, #20]	; (9538 <hci_acl_encode+0x64>)
    9522:	2003      	movs	r0, #3
    9524:	f7f8 fd56 	bl	1fd4 <bt_log>
    9528:	4040      	eors	r0, r0
    952a:	f380 8811 	msr	BASEPRI, r0
    952e:	f04f 0004 	mov.w	r0, #4
    9532:	df02      	svc	2
    9534:	000163ca 	.word	0x000163ca
    9538:	000153a4 	.word	0x000153a4

0000953c <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9540:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    9542:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9544:	2b01      	cmp	r3, #1
{
    9546:	b091      	sub	sp, #68	; 0x44
    9548:	4604      	mov	r4, r0
    954a:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    954c:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9550:	f000 828f 	beq.w	9a72 <hci_evt_encode+0x536>
	switch (node_rx->hdr.type) {
    9554:	3b02      	subs	r3, #2
    9556:	2b0a      	cmp	r3, #10
    9558:	f200 8288 	bhi.w	9a6c <hci_evt_encode+0x530>
    955c:	e8df f013 	tbh	[pc, r3, lsl #1]
    9560:	0130000b 	.word	0x0130000b
    9564:	01380136 	.word	0x01380136
    9568:	0195017a 	.word	0x0195017a
    956c:	01ef01ca 	.word	0x01ef01ca
    9570:	021c0207 	.word	0x021c0207
    9574:	0237      	.short	0x0237
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9576:	2301      	movs	r3, #1
    9578:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    957c:	2303      	movs	r3, #3
    957e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9582:	23ff      	movs	r3, #255	; 0xff
    9584:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    958c:	2302      	movs	r3, #2
    958e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9592:	7a43      	ldrb	r3, [r0, #9]
    9594:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9596:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9598:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    959c:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    959e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    95a2:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    95a4:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    95a6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	if (adv->tx_addr) {
    95aa:	d505      	bpl.n	95b8 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    95ac:	f104 030a 	add.w	r3, r4, #10
    95b0:	464a      	mov	r2, r9
    95b2:	4608      	mov	r0, r1
    95b4:	f008 f924 	bl	11800 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    95b8:	4bc3      	ldr	r3, [pc, #780]	; (98c8 <hci_evt_encode+0x38c>)
    95ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    95be:	2200      	movs	r2, #0
    95c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95c4:	4313      	orrs	r3, r2
    95c6:	f000 80b5 	beq.w	9734 <hci_evt_encode+0x1f8>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    95ca:	7a63      	ldrb	r3, [r4, #9]
    95cc:	4423      	add	r3, r4
    95ce:	f893 a00c 	ldrb.w	sl, [r3, #12]
    95d2:	4bbe      	ldr	r3, [pc, #760]	; (98cc <hci_evt_encode+0x390>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    95d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    95d8:	f1ba 0f00 	cmp.w	sl, #0
    95dc:	d13d      	bne.n	965a <hci_evt_encode+0x11e>
    95de:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    95e2:	2300      	movs	r3, #0
    95e4:	4313      	orrs	r3, r2
    95e6:	f000 80a5 	beq.w	9734 <hci_evt_encode+0x1f8>
	if (dup_count >= 0) {
    95ea:	4bb9      	ldr	r3, [pc, #740]	; (98d0 <hci_evt_encode+0x394>)
    95ec:	681a      	ldr	r2, [r3, #0]
    95ee:	2a00      	cmp	r2, #0
    95f0:	4698      	mov	r8, r3
    95f2:	db54      	blt.n	969e <hci_evt_encode+0x162>
    95f4:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 98f0 <hci_evt_encode+0x3b4>
    95f8:	2600      	movs	r6, #0
    95fa:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    95fe:	f8d8 2000 	ldr.w	r2, [r8]
    9602:	4296      	cmp	r6, r2
    9604:	db2c      	blt.n	9660 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    9606:	4eb3      	ldr	r6, [pc, #716]	; (98d4 <hci_evt_encode+0x398>)
    9608:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 98d8 <hci_evt_encode+0x39c>
    960c:	6830      	ldr	r0, [r6, #0]
    960e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    9612:	4619      	mov	r1, r3
    9614:	2206      	movs	r2, #6
    9616:	3002      	adds	r0, #2
    9618:	f7f8 fb15 	bl	1c46 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    961c:	6832      	ldr	r2, [r6, #0]
    961e:	7a23      	ldrb	r3, [r4, #8]
    9620:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    9624:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9628:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    962a:	7a23      	ldrb	r3, [r4, #8]
    962c:	f003 010f 	and.w	r1, r3, #15
    9630:	2301      	movs	r3, #1
    9632:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9634:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9638:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    963c:	290f      	cmp	r1, #15
			dup_count++;
    963e:	bfd5      	itete	le
    9640:	3101      	addle	r1, #1
			dup_curr++;
    9642:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9644:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    9646:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9648:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    964a:	bfd8      	it	le
    964c:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9650:	2a10      	cmp	r2, #16
    9652:	d124      	bne.n	969e <hci_evt_encode+0x162>
			dup_curr = 0;
    9654:	2200      	movs	r2, #0
    9656:	6032      	str	r2, [r6, #0]
    9658:	e021      	b.n	969e <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    965a:	f002 020b 	and.w	r2, r2, #11
    965e:	e7c0      	b.n	95e2 <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    9660:	4618      	mov	r0, r3
    9662:	2206      	movs	r2, #6
    9664:	4659      	mov	r1, fp
    9666:	9305      	str	r3, [sp, #20]
    9668:	f7f8 fad8 	bl	1c1c <memcmp>
    966c:	9b05      	ldr	r3, [sp, #20]
    966e:	bb00      	cbnz	r0, 96b2 <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9670:	7a21      	ldrb	r1, [r4, #8]
    9672:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    9676:	460a      	mov	r2, r1
    9678:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    967c:	4281      	cmp	r1, r0
    967e:	d118      	bne.n	96b2 <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9680:	4895      	ldr	r0, [pc, #596]	; (98d8 <hci_evt_encode+0x39c>)
    9682:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    9686:	f002 020f 	and.w	r2, r2, #15
    968a:	fa23 f102 	lsr.w	r1, r3, r2
    968e:	07c9      	lsls	r1, r1, #31
    9690:	d450      	bmi.n	9734 <hci_evt_encode+0x1f8>
				dup_filter[i].mask |= BIT(adv->type);
    9692:	2101      	movs	r1, #1
    9694:	fa01 f202 	lsl.w	r2, r1, r2
    9698:	4313      	orrs	r3, r2
    969a:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    969e:	f894 b008 	ldrb.w	fp, [r4, #8]
    96a2:	7a63      	ldrb	r3, [r4, #9]
    96a4:	f00b 0b0f 	and.w	fp, fp, #15
    96a8:	f1bb 0f01 	cmp.w	fp, #1
    96ac:	d105      	bne.n	96ba <hci_evt_encode+0x17e>
		data_len = 0;
    96ae:	2600      	movs	r6, #0
    96b0:	e005      	b.n	96be <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    96b2:	3601      	adds	r6, #1
    96b4:	f10b 0b08 	add.w	fp, fp, #8
    96b8:	e7a1      	b.n	95fe <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    96ba:	1f9e      	subs	r6, r3, #6
    96bc:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    96be:	4423      	add	r3, r4
    96c0:	f893 800a 	ldrb.w	r8, [r3, #10]
    96c4:	f1c8 0800 	rsb	r8, r8, #0
    96c8:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    96cc:	f1ba 0f00 	cmp.w	sl, #0
    96d0:	d03d      	beq.n	974e <hci_evt_encode+0x212>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    96d2:	f1bb 0f01 	cmp.w	fp, #1
    96d6:	d00a      	beq.n	96ee <hci_evt_encode+0x1b2>
    96d8:	4a80      	ldr	r2, [pc, #512]	; (98dc <hci_evt_encode+0x3a0>)
    96da:	4981      	ldr	r1, [pc, #516]	; (98e0 <hci_evt_encode+0x3a4>)
		LL_ASSERT(0);
    96dc:	2003      	movs	r0, #3
    96de:	f7f8 fc79 	bl	1fd4 <bt_log>
    96e2:	4040      	eors	r0, r0
    96e4:	f380 8811 	msr	BASEPRI, r0
    96e8:	f04f 0004 	mov.w	r0, #4
    96ec:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    96ee:	2211      	movs	r2, #17
    96f0:	210b      	movs	r1, #11
    96f2:	4628      	mov	r0, r5
    96f4:	f7fe ff5e 	bl	85b4 <meta_evt>
		drp->num_reports = 1;
    96f8:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    96fc:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9700:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    9702:	f007 ff53 	bl	115ac <ll_rl_size_get>
    9706:	4581      	cmp	r9, r0
    9708:	f105 0003 	add.w	r0, r5, #3
    970c:	d215      	bcs.n	973a <hci_evt_encode+0x1fe>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    970e:	4602      	mov	r2, r0
    9710:	1ca9      	adds	r1, r5, #2
    9712:	4648      	mov	r0, r9
    9714:	f007 fe02 	bl	1131c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    9718:	78ab      	ldrb	r3, [r5, #2]
    971a:	3302      	adds	r3, #2
    971c:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    971e:	2301      	movs	r3, #1
    9720:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    9722:	2206      	movs	r2, #6
    9724:	f107 0108 	add.w	r1, r7, #8
    9728:	f105 000a 	add.w	r0, r5, #10
    972c:	f7f8 fa8b 	bl	1c46 <memcpy>
		dir_info->rssi = rssi;
    9730:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9734:	b011      	add	sp, #68	; 0x44
    9736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    973a:	7a23      	ldrb	r3, [r4, #8]
    973c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9740:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9742:	2206      	movs	r2, #6
    9744:	f104 010a 	add.w	r1, r4, #10
    9748:	f7f8 fa7d 	bl	1c46 <memcpy>
    974c:	e7e7      	b.n	971e <hci_evt_encode+0x1e2>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    974e:	f106 020b 	add.w	r2, r6, #11
    9752:	b2d2      	uxtb	r2, r2
    9754:	2102      	movs	r1, #2
    9756:	4628      	mov	r0, r5
    9758:	f7fe ff2c 	bl	85b4 <meta_evt>
	sep->num_reports = 1;
    975c:	2301      	movs	r3, #1
    975e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9760:	7a23      	ldrb	r3, [r4, #8]
    9762:	aa10      	add	r2, sp, #64	; 0x40
    9764:	f003 030f 	and.w	r3, r3, #15
    9768:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    976a:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    976c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9770:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9772:	7a63      	ldrb	r3, [r4, #9]
    9774:	4423      	add	r3, r4
    9776:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    977a:	f007 ff17 	bl	115ac <ll_rl_size_get>
    977e:	4581      	cmp	r9, r0
    9780:	f105 0003 	add.w	r0, r5, #3
    9784:	d212      	bcs.n	97ac <hci_evt_encode+0x270>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9786:	4602      	mov	r2, r0
    9788:	1ca9      	adds	r1, r5, #2
    978a:	4648      	mov	r0, r9
    978c:	f007 fdc6 	bl	1131c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9790:	78ab      	ldrb	r3, [r5, #2]
    9792:	3302      	adds	r3, #2
    9794:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9796:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    9798:	350a      	adds	r5, #10
    979a:	4632      	mov	r2, r6
    979c:	f107 0108 	add.w	r1, r7, #8
    97a0:	4628      	mov	r0, r5
    97a2:	f7f8 fa50 	bl	1c46 <memcpy>
	*prssi = rssi;
    97a6:	f805 8006 	strb.w	r8, [r5, r6]
    97aa:	e7c3      	b.n	9734 <hci_evt_encode+0x1f8>
		adv_info->addr.type = adv->tx_addr;
    97ac:	7a23      	ldrb	r3, [r4, #8]
    97ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
    97b2:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    97b4:	2206      	movs	r2, #6
    97b6:	f104 010a 	add.w	r1, r4, #10
    97ba:	f7f8 fa44 	bl	1c46 <memcpy>
    97be:	e7ea      	b.n	9796 <hci_evt_encode+0x25a>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    97c0:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    97c2:	4621      	mov	r1, r4
    97c4:	4638      	mov	r0, r7
    97c6:	f7ff f84d 	bl	8864 <le_adv_ext_report.isra.66>
    97ca:	e7b3      	b.n	9734 <hci_evt_encode+0x1f8>
    97cc:	2204      	movs	r2, #4
    97ce:	e7f8      	b.n	97c2 <hci_evt_encode+0x286>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97d0:	4b3d      	ldr	r3, [pc, #244]	; (98c8 <hci_evt_encode+0x38c>)
    97d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    97d6:	2200      	movs	r2, #0
    97d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    97dc:	4313      	orrs	r3, r2
    97de:	f100 060a 	add.w	r6, r0, #10
    97e2:	d007      	beq.n	97f4 <hci_evt_encode+0x2b8>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    97e4:	4b39      	ldr	r3, [pc, #228]	; (98cc <hci_evt_encode+0x390>)
    97e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    97ea:	2300      	movs	r3, #0
    97ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97f0:	4313      	orrs	r3, r2
    97f2:	d11e      	bne.n	9832 <hci_evt_encode+0x2f6>
		addr.type = adv->tx_addr;
    97f4:	7a23      	ldrb	r3, [r4, #8]
    97f6:	ad10      	add	r5, sp, #64	; 0x40
    97f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    97fc:	2206      	movs	r2, #6
    97fe:	4631      	mov	r1, r6
    9800:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    9804:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9808:	f7f8 fa1d 	bl	1c46 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    980c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    980e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9810:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9812:	7aa4      	ldrb	r4, [r4, #10]
    9814:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9816:	4631      	mov	r1, r6
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9818:	b264      	sxtb	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    981a:	4628      	mov	r0, r5
    981c:	f7fe ffe6 	bl	87ec <bt_addr_le_to_str.constprop.70>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    9820:	9401      	str	r4, [sp, #4]
    9822:	9600      	str	r6, [sp, #0]
    9824:	2300      	movs	r3, #0
    9826:	4a2f      	ldr	r2, [pc, #188]	; (98e4 <hci_evt_encode+0x3a8>)
    9828:	492f      	ldr	r1, [pc, #188]	; (98e8 <hci_evt_encode+0x3ac>)
    982a:	2004      	movs	r0, #4
    982c:	f7f8 fbd2 	bl	1fd4 <bt_log>
    9830:	e780      	b.n	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9832:	2208      	movs	r2, #8
    9834:	2113      	movs	r1, #19
    9836:	4628      	mov	r0, r5
    9838:	f7fe febc 	bl	85b4 <meta_evt>
	sep->handle = 0;
    983c:	2300      	movs	r3, #0
    983e:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9840:	7a23      	ldrb	r3, [r4, #8]
    9842:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9846:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9848:	2206      	movs	r2, #6
    984a:	4631      	mov	r1, r6
    984c:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    984e:	f7f8 f9fa 	bl	1c46 <memcpy>
    9852:	e76f      	b.n	9734 <hci_evt_encode+0x1f8>
			le_conn_complete(cc->status, cc, handle, buf);
    9854:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9856:	b93f      	cbnz	r7, 9868 <hci_evt_encode+0x32c>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9858:	f100 0314 	add.w	r3, r0, #20
    985c:	f100 010e 	add.w	r1, r0, #14
    9860:	22ff      	movs	r2, #255	; 0xff
    9862:	7b40      	ldrb	r0, [r0, #13]
    9864:	f007 ffcc 	bl	11800 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9868:	4b17      	ldr	r3, [pc, #92]	; (98c8 <hci_evt_encode+0x38c>)
    986a:	e9d3 2300 	ldrd	r2, r3, [r3]
    986e:	2200      	movs	r2, #0
    9870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9874:	4313      	orrs	r3, r2
    9876:	f43f af5d 	beq.w	9734 <hci_evt_encode+0x1f8>
    987a:	462b      	mov	r3, r5
    987c:	4632      	mov	r2, r6
    987e:	f104 010b 	add.w	r1, r4, #11
    9882:	4638      	mov	r0, r7
    9884:	f7fe ff1c 	bl	86c0 <le_conn_complete.part.39>
    9888:	e754      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    988a:	4b0f      	ldr	r3, [pc, #60]	; (98c8 <hci_evt_encode+0x38c>)
    988c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9890:	2300      	movs	r3, #0
    9892:	f002 0210 	and.w	r2, r2, #16
    9896:	4313      	orrs	r3, r2
    9898:	f43f af4c 	beq.w	9734 <hci_evt_encode+0x1f8>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    989c:	2204      	movs	r2, #4
    989e:	2105      	movs	r1, #5
    98a0:	4628      	mov	r0, r5
    98a2:	f7fe fe62 	bl	856a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    98a6:	2104      	movs	r1, #4
    98a8:	f105 0008 	add.w	r0, r5, #8
    98ac:	f008 ff26 	bl	126fc <net_buf_simple_add>
	ep->status = 0x00;
    98b0:	2300      	movs	r3, #0
	conn_count--;
    98b2:	4a0e      	ldr	r2, [pc, #56]	; (98ec <hci_evt_encode+0x3b0>)
	ep->status = 0x00;
    98b4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    98b6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    98ba:	7a23      	ldrb	r3, [r4, #8]
    98bc:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    98be:	6813      	ldr	r3, [r2, #0]
    98c0:	3b01      	subs	r3, #1
    98c2:	6013      	str	r3, [r2, #0]
    98c4:	e736      	b.n	9734 <hci_evt_encode+0x1f8>
    98c6:	bf00      	nop
    98c8:	20003d50 	.word	0x20003d50
    98cc:	20003d58 	.word	0x20003d58
    98d0:	20000854 	.word	0x20000854
    98d4:	20000858 	.word	0x20000858
    98d8:	2000085c 	.word	0x2000085c
    98dc:	0001634a 	.word	0x0001634a
    98e0:	000164a3 	.word	0x000164a3
    98e4:	00016372 	.word	0x00016372
    98e8:	000164dd 	.word	0x000164dd
    98ec:	20000850 	.word	0x20000850
    98f0:	2000085e 	.word	0x2000085e
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98f4:	4bba      	ldr	r3, [pc, #744]	; (9be0 <hci_evt_encode+0x6a4>)
    98f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    98fa:	2200      	movs	r2, #0
    98fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9900:	4313      	orrs	r3, r2
    9902:	f43f af17 	beq.w	9734 <hci_evt_encode+0x1f8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9906:	4bb7      	ldr	r3, [pc, #732]	; (9be4 <hci_evt_encode+0x6a8>)
    9908:	e9d3 2300 	ldrd	r2, r3, [r3]
    990c:	2300      	movs	r3, #0
    990e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9912:	4313      	orrs	r3, r2
    9914:	f43f af0e 	beq.w	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9918:	2209      	movs	r2, #9
    991a:	2103      	movs	r1, #3
    991c:	4628      	mov	r0, r5
    991e:	f7fe fe49 	bl	85b4 <meta_evt>
	sep->status = radio_cu->status;
    9922:	7ae3      	ldrb	r3, [r4, #11]
    9924:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9926:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9928:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    992c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9930:	89e3      	ldrh	r3, [r4, #14]
    9932:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9936:	8a23      	ldrh	r3, [r4, #16]
    9938:	f8a0 3007 	strh.w	r3, [r0, #7]
    993c:	e6fa      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    993e:	4ba8      	ldr	r3, [pc, #672]	; (9be0 <hci_evt_encode+0x6a4>)
    9940:	e9d3 2300 	ldrd	r2, r3, [r3]
    9944:	2200      	movs	r2, #0
    9946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    994a:	4313      	orrs	r3, r2
    994c:	f43f aef2 	beq.w	9734 <hci_evt_encode+0x1f8>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9950:	2203      	movs	r2, #3
    9952:	2130      	movs	r1, #48	; 0x30
    9954:	4628      	mov	r0, r5
    9956:	f7fe fe08 	bl	856a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    995a:	2103      	movs	r1, #3
    995c:	f105 0008 	add.w	r0, r5, #8
    9960:	f008 fecc 	bl	126fc <net_buf_simple_add>
	ep->status = 0x00;
    9964:	2300      	movs	r3, #0
    9966:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9968:	f8a0 6001 	strh.w	r6, [r0, #1]
    996c:	e6e2      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    996e:	4b9e      	ldr	r3, [pc, #632]	; (9be8 <hci_evt_encode+0x6ac>)
    9970:	e9d3 2300 	ldrd	r2, r3, [r3]
    9974:	2300      	movs	r3, #0
    9976:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    997a:	4313      	orrs	r3, r2
    997c:	f43f aeda 	beq.w	9734 <hci_evt_encode+0x1f8>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9980:	2202      	movs	r2, #2
    9982:	2157      	movs	r1, #87	; 0x57
    9984:	4628      	mov	r0, r5
    9986:	f7fe fdf0 	bl	856a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    998a:	2102      	movs	r1, #2
    998c:	f105 0008 	add.w	r0, r5, #8
    9990:	f008 feb4 	bl	126fc <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9994:	8006      	strh	r6, [r0, #0]
    9996:	e6cd      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9998:	4b91      	ldr	r3, [pc, #580]	; (9be0 <hci_evt_encode+0x6a4>)
    999a:	e9d3 2300 	ldrd	r2, r3, [r3]
    999e:	2200      	movs	r2, #0
    99a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    99a4:	4313      	orrs	r3, r2
    99a6:	f43f aec5 	beq.w	9734 <hci_evt_encode+0x1f8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    99aa:	4b8e      	ldr	r3, [pc, #568]	; (9be4 <hci_evt_encode+0x6a8>)
    99ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    99b0:	2300      	movs	r3, #0
    99b2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99b6:	4313      	orrs	r3, r2
    99b8:	f43f aebc 	beq.w	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    99bc:	2203      	movs	r2, #3
    99be:	2114      	movs	r1, #20
    99c0:	4628      	mov	r0, r5
    99c2:	f7fe fdf7 	bl	85b4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    99c6:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    99c8:	7ae3      	ldrb	r3, [r4, #11]
    99ca:	7083      	strb	r3, [r0, #2]
    99cc:	e6b2      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99ce:	4b84      	ldr	r3, [pc, #528]	; (9be0 <hci_evt_encode+0x6a4>)
    99d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    99d4:	2200      	movs	r2, #0
    99d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    99da:	4313      	orrs	r3, r2
    99dc:	d007      	beq.n	99ee <hci_evt_encode+0x4b2>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    99de:	4b81      	ldr	r3, [pc, #516]	; (9be4 <hci_evt_encode+0x6a8>)
    99e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    99e4:	2300      	movs	r3, #0
    99e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99ea:	4313      	orrs	r3, r2
    99ec:	d11e      	bne.n	9a2c <hci_evt_encode+0x4f0>
    99ee:	7b22      	ldrb	r2, [r4, #12]
    99f0:	7b61      	ldrb	r1, [r4, #13]
    99f2:	2a00      	cmp	r2, #0
    99f4:	fa92 f3a2 	rbit	r3, r2
    99f8:	fab3 f383 	clz	r3, r3
    99fc:	fa91 f2a1 	rbit	r2, r1
    9a00:	bf08      	it	eq
    9a02:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9a06:	2900      	cmp	r1, #0
    9a08:	fab2 f282 	clz	r2, r2
    9a0c:	bf08      	it	eq
    9a0e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    9a12:	3301      	adds	r3, #1
    9a14:	3201      	adds	r2, #1
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9a16:	9202      	str	r2, [sp, #8]
    9a18:	9301      	str	r3, [sp, #4]
    9a1a:	7ae3      	ldrb	r3, [r4, #11]
    9a1c:	9300      	str	r3, [sp, #0]
    9a1e:	4a73      	ldr	r2, [pc, #460]	; (9bec <hci_evt_encode+0x6b0>)
    9a20:	4973      	ldr	r1, [pc, #460]	; (9bf0 <hci_evt_encode+0x6b4>)
    9a22:	4633      	mov	r3, r6
    9a24:	2004      	movs	r0, #4
    9a26:	f7f8 fad5 	bl	1fd4 <bt_log>
    9a2a:	e683      	b.n	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9a2c:	2205      	movs	r2, #5
    9a2e:	210c      	movs	r1, #12
    9a30:	4628      	mov	r0, r5
    9a32:	f7fe fdbf 	bl	85b4 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9a36:	7ae3      	ldrb	r3, [r4, #11]
    9a38:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9a3a:	f8a0 6001 	strh.w	r6, [r0, #1]
    9a3e:	7b22      	ldrb	r2, [r4, #12]
    9a40:	2a00      	cmp	r2, #0
    9a42:	fa92 f3a2 	rbit	r3, r2
    9a46:	fab3 f383 	clz	r3, r3
    9a4a:	bf08      	it	eq
    9a4c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9a50:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9a52:	70c3      	strb	r3, [r0, #3]
    9a54:	7b62      	ldrb	r2, [r4, #13]
    9a56:	fa92 f3a2 	rbit	r3, r2
    9a5a:	2a00      	cmp	r2, #0
    9a5c:	fab3 f383 	clz	r3, r3
    9a60:	bf08      	it	eq
    9a62:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9a66:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9a68:	7103      	strb	r3, [r0, #4]
    9a6a:	e663      	b.n	9734 <hci_evt_encode+0x1f8>
		LL_ASSERT(0);
    9a6c:	4a61      	ldr	r2, [pc, #388]	; (9bf4 <hci_evt_encode+0x6b8>)
    9a6e:	4962      	ldr	r1, [pc, #392]	; (9bf8 <hci_evt_encode+0x6bc>)
    9a70:	e634      	b.n	96dc <hci_evt_encode+0x1a0>
	switch (pdu_data->llctrl.opcode) {
    9a72:	7ac3      	ldrb	r3, [r0, #11]
    9a74:	3b03      	subs	r3, #3
    9a76:	2b12      	cmp	r3, #18
    9a78:	f200 80c6 	bhi.w	9c08 <hci_evt_encode+0x6cc>
    9a7c:	e8df f003 	tbb	[pc, r3]
    9a80:	2fc4c40a 	.word	0x2fc4c40a
    9a84:	c435c4a7 	.word	0xc435c4a7
    9a88:	c45b3cc4 	.word	0xc45b3cc4
    9a8c:	c4c4c45f 	.word	0xc4c4c45f
    9a90:	87c4      	.short	0x87c4
    9a92:	87          	.byte	0x87
    9a93:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a94:	4b52      	ldr	r3, [pc, #328]	; (9be0 <hci_evt_encode+0x6a4>)
    9a96:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a9a:	2200      	movs	r2, #0
    9a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9aa0:	4313      	orrs	r3, r2
    9aa2:	f43f ae47 	beq.w	9734 <hci_evt_encode+0x1f8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9aa6:	4b4f      	ldr	r3, [pc, #316]	; (9be4 <hci_evt_encode+0x6a8>)
    9aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9aac:	2300      	movs	r3, #0
    9aae:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ab2:	4313      	orrs	r3, r2
    9ab4:	f43f ae3e 	beq.w	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9ab8:	220c      	movs	r2, #12
    9aba:	2105      	movs	r1, #5
    9abc:	4628      	mov	r0, r5
    9abe:	f7fe fd79 	bl	85b4 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9ac2:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9ac4:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9ac6:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    9aca:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9ace:	f7f8 f8ba 	bl	1c46 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9ad2:	2202      	movs	r2, #2
    9ad4:	f104 0114 	add.w	r1, r4, #20
    9ad8:	f105 000a 	add.w	r0, r5, #10
    9adc:	e6b7      	b.n	984e <hci_evt_encode+0x312>
		encrypt_change(0x00, handle, buf);
    9ade:	460a      	mov	r2, r1
    9ae0:	2000      	movs	r0, #0
    9ae2:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9ae4:	f7fe fd9e 	bl	8624 <encrypt_change>
    9ae8:	e624      	b.n	9734 <hci_evt_encode+0x1f8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9aea:	460b      	mov	r3, r1
    9aec:	4632      	mov	r2, r6
    9aee:	4639      	mov	r1, r7
    9af0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9af2:	f7fe fdb7 	bl	8664 <le_remote_feat_complete>
    9af6:	e61d      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    9af8:	4b39      	ldr	r3, [pc, #228]	; (9be0 <hci_evt_encode+0x6a4>)
    9afa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9afe:	2300      	movs	r3, #0
    9b00:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    9b04:	4313      	orrs	r3, r2
    9b06:	f43f ae15 	beq.w	9734 <hci_evt_encode+0x1f8>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9b0a:	2208      	movs	r2, #8
    9b0c:	210c      	movs	r1, #12
    9b0e:	4628      	mov	r0, r5
    9b10:	f7fe fd2b 	bl	856a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9b14:	2108      	movs	r1, #8
    9b16:	1868      	adds	r0, r5, r1
    9b18:	f008 fdf0 	bl	126fc <net_buf_simple_add>
	ep->status = 0x00;
    9b1c:	2300      	movs	r3, #0
    9b1e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9b20:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9b24:	7b23      	ldrb	r3, [r4, #12]
    9b26:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9b28:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9b2c:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9b2e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9b32:	80c3      	strh	r3, [r0, #6]
    9b34:	e5fe      	b.n	9734 <hci_evt_encode+0x1f8>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9b36:	460a      	mov	r2, r1
    9b38:	7b00      	ldrb	r0, [r0, #12]
    9b3a:	4631      	mov	r1, r6
    9b3c:	e7d2      	b.n	9ae4 <hci_evt_encode+0x5a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9b3e:	4b28      	ldr	r3, [pc, #160]	; (9be0 <hci_evt_encode+0x6a4>)
    9b40:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b44:	2200      	movs	r2, #0
    9b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9b4a:	4313      	orrs	r3, r2
    9b4c:	d007      	beq.n	9b5e <hci_evt_encode+0x622>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9b4e:	4b25      	ldr	r3, [pc, #148]	; (9be4 <hci_evt_encode+0x6a8>)
    9b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b54:	2300      	movs	r3, #0
    9b56:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9b5a:	4313      	orrs	r3, r2
    9b5c:	d108      	bne.n	9b70 <hci_evt_encode+0x634>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9b5e:	2300      	movs	r3, #0
    9b60:	9301      	str	r3, [sp, #4]
    9b62:	9300      	str	r3, [sp, #0]
    9b64:	221a      	movs	r2, #26
    9b66:	2102      	movs	r1, #2
    9b68:	4630      	mov	r0, r6
    9b6a:	f006 fac1 	bl	100f0 <ll_conn_update>
    9b6e:	e5e1      	b.n	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9b70:	220a      	movs	r2, #10
    9b72:	2106      	movs	r1, #6
    9b74:	4628      	mov	r0, r5
    9b76:	f7fe fd1d 	bl	85b4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9b7a:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9b7c:	89a3      	ldrh	r3, [r4, #12]
    9b7e:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9b80:	89e3      	ldrh	r3, [r4, #14]
    9b82:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9b84:	8a23      	ldrh	r3, [r4, #16]
    9b86:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    9b88:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9b8a:	8103      	strh	r3, [r0, #8]
    9b8c:	e5d2      	b.n	9734 <hci_evt_encode+0x1f8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9b8e:	4b14      	ldr	r3, [pc, #80]	; (9be0 <hci_evt_encode+0x6a4>)
    9b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b94:	2200      	movs	r2, #0
    9b96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9b9a:	4313      	orrs	r3, r2
    9b9c:	f43f adca 	beq.w	9734 <hci_evt_encode+0x1f8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9ba0:	4b10      	ldr	r3, [pc, #64]	; (9be4 <hci_evt_encode+0x6a8>)
    9ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ba6:	2300      	movs	r3, #0
    9ba8:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bac:	4313      	orrs	r3, r2
    9bae:	f43f adc1 	beq.w	9734 <hci_evt_encode+0x1f8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9bb2:	220a      	movs	r2, #10
    9bb4:	2107      	movs	r1, #7
    9bb6:	4628      	mov	r0, r5
    9bb8:	f7fe fcfc 	bl	85b4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9bbc:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9bbe:	8a23      	ldrh	r3, [r4, #16]
    9bc0:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9bc2:	8a63      	ldrh	r3, [r4, #18]
    9bc4:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9bc6:	89a3      	ldrh	r3, [r4, #12]
    9bc8:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9bca:	89e3      	ldrh	r3, [r4, #14]
    9bcc:	e7dd      	b.n	9b8a <hci_evt_encode+0x64e>
    9bce:	7b03      	ldrb	r3, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9bd0:	2b0e      	cmp	r3, #14
    9bd2:	d113      	bne.n	9bfc <hci_evt_encode+0x6c0>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9bd4:	460b      	mov	r3, r1
    9bd6:	4632      	mov	r2, r6
    9bd8:	2100      	movs	r1, #0
    9bda:	201a      	movs	r0, #26
    9bdc:	e789      	b.n	9af2 <hci_evt_encode+0x5b6>
    9bde:	bf00      	nop
    9be0:	20003d50 	.word	0x20003d50
    9be4:	20003d58 	.word	0x20003d58
    9be8:	200008e0 	.word	0x200008e0
    9bec:	00016387 	.word	0x00016387
    9bf0:	00016504 	.word	0x00016504
    9bf4:	0001639b 	.word	0x0001639b
    9bf8:	000153a4 	.word	0x000153a4
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9bfc:	4a03      	ldr	r2, [pc, #12]	; (9c0c <hci_evt_encode+0x6d0>)
    9bfe:	4904      	ldr	r1, [pc, #16]	; (9c10 <hci_evt_encode+0x6d4>)
    9c00:	2004      	movs	r0, #4
    9c02:	f7f8 f9e7 	bl	1fd4 <bt_log>
    9c06:	e595      	b.n	9734 <hci_evt_encode+0x1f8>
		LL_ASSERT(0);
    9c08:	4a02      	ldr	r2, [pc, #8]	; (9c14 <hci_evt_encode+0x6d8>)
    9c0a:	e730      	b.n	9a6e <hci_evt_encode+0x532>
    9c0c:	000163aa 	.word	0x000163aa
    9c10:	00016534 	.word	0x00016534
    9c14:	000163b9 	.word	0x000163b9

00009c18 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9c18:	b570      	push	{r4, r5, r6, lr}
    9c1a:	4606      	mov	r6, r0
    9c1c:	460d      	mov	r5, r1
    9c1e:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9c20:	2113      	movs	r1, #19
    9c22:	2205      	movs	r2, #5
    9c24:	f7fe fca1 	bl	856a <evt_create>

	ep = net_buf_add(buf, len);
    9c28:	2105      	movs	r1, #5
    9c2a:	f106 0008 	add.w	r0, r6, #8
    9c2e:	f008 fd65 	bl	126fc <net_buf_simple_add>
	ep->num_handles = num_handles;
    9c32:	2301      	movs	r3, #1
    9c34:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9c36:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9c3a:	f8a0 4003 	strh.w	r4, [r0, #3]
    9c3e:	bd70      	pop	{r4, r5, r6, pc}

00009c40 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9c40:	7903      	ldrb	r3, [r0, #4]
    9c42:	2b01      	cmp	r3, #1
    9c44:	d006      	beq.n	9c54 <hci_get_class+0x14>
    9c46:	3b02      	subs	r3, #2
    9c48:	b2db      	uxtb	r3, r3
    9c4a:	2b0a      	cmp	r3, #10
    9c4c:	d80a      	bhi.n	9c64 <hci_get_class+0x24>
    9c4e:	4a07      	ldr	r2, [pc, #28]	; (9c6c <hci_get_class+0x2c>)
    9c50:	56d0      	ldrsb	r0, [r2, r3]
    9c52:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9c54:	7a03      	ldrb	r3, [r0, #8]
    9c56:	f003 0303 	and.w	r3, r3, #3
    9c5a:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9c5c:	bf0c      	ite	eq
    9c5e:	2002      	moveq	r0, #2
    9c60:	2003      	movne	r0, #3
    9c62:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9c68:	4770      	bx	lr
    9c6a:	bf00      	nop
    9c6c:	00016321 	.word	0x00016321

00009c70 <hci_init>:
	dup_count = -1;
    9c70:	4b0a      	ldr	r3, [pc, #40]	; (9c9c <hci_init+0x2c>)
    9c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9c76:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9c78:	4b09      	ldr	r3, [pc, #36]	; (9ca0 <hci_init+0x30>)
    9c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c7e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9c82:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9c86:	4b07      	ldr	r3, [pc, #28]	; (9ca4 <hci_init+0x34>)
    9c88:	2000      	movs	r0, #0
    9c8a:	2100      	movs	r1, #0
    9c8c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9c90:	4b05      	ldr	r3, [pc, #20]	; (9ca8 <hci_init+0x38>)
    9c92:	201f      	movs	r0, #31
    9c94:	2100      	movs	r1, #0
    9c96:	e9c3 0100 	strd	r0, r1, [r3]
    9c9a:	4770      	bx	lr
    9c9c:	20000854 	.word	0x20000854
    9ca0:	20003d50 	.word	0x20003d50
    9ca4:	200008e0 	.word	0x200008e0
    9ca8:	20003d58 	.word	0x20003d58

00009cac <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9cac:	bf20      	wfe
	__SEV();
    9cae:	bf40      	sev
	__WFE();
    9cb0:	bf20      	wfe
    9cb2:	4770      	bx	lr

00009cb4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9cb6:	4b0d      	ldr	r3, [pc, #52]	; (9cec <pdu_len_cmp+0x38>)
{
    9cb8:	b089      	sub	sp, #36	; 0x24
    9cba:	4605      	mov	r5, r0
    9cbc:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9cbe:	aa01      	add	r2, sp, #4
    9cc0:	f103 0718 	add.w	r7, r3, #24
    9cc4:	6818      	ldr	r0, [r3, #0]
    9cc6:	6859      	ldr	r1, [r3, #4]
    9cc8:	4614      	mov	r4, r2
    9cca:	c403      	stmia	r4!, {r0, r1}
    9ccc:	3308      	adds	r3, #8
    9cce:	42bb      	cmp	r3, r7
    9cd0:	4622      	mov	r2, r4
    9cd2:	d1f7      	bne.n	9cc4 <pdu_len_cmp+0x10>
    9cd4:	881b      	ldrh	r3, [r3, #0]
    9cd6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9cd8:	ab08      	add	r3, sp, #32
    9cda:	441d      	add	r5, r3
    9cdc:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9ce0:	1b83      	subs	r3, r0, r6
    9ce2:	4258      	negs	r0, r3
    9ce4:	4158      	adcs	r0, r3
    9ce6:	b009      	add	sp, #36	; 0x24
    9ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cea:	bf00      	nop
    9cec:	00014293 	.word	0x00014293

00009cf0 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9cf0:	6008      	str	r0, [r1, #0]
    9cf2:	4770      	bx	lr

00009cf4 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9cf4:	b918      	cbnz	r0, 9cfe <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9cf6:	680b      	ldr	r3, [r1, #0]
    9cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9cfc:	600b      	str	r3, [r1, #0]
    9cfe:	4770      	bx	lr

00009d00 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9d00:	b918      	cbnz	r0, 9d0a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9d02:	680b      	ldr	r3, [r1, #0]
    9d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9d08:	600b      	str	r3, [r1, #0]
    9d0a:	4770      	bx	lr

00009d0c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9d0c:	b570      	push	{r4, r5, r6, lr}
    9d0e:	1d03      	adds	r3, r0, #4
    9d10:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9d12:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9d14:	429d      	cmp	r5, r3
    9d16:	d101      	bne.n	9d1c <chan_sel_remap+0x10>
    9d18:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9d1a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9d1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9d20:	2200      	movs	r2, #0
    9d22:	18a0      	adds	r0, r4, r2
    9d24:	2a08      	cmp	r2, #8
    9d26:	b2c0      	uxtb	r0, r0
    9d28:	d101      	bne.n	9d2e <chan_sel_remap+0x22>
    9d2a:	4604      	mov	r4, r0
    9d2c:	e7f2      	b.n	9d14 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9d2e:	f016 0f01 	tst.w	r6, #1
    9d32:	d003      	beq.n	9d3c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9d34:	2900      	cmp	r1, #0
    9d36:	d0f0      	beq.n	9d1a <chan_sel_remap+0xe>
				chan_index--;
    9d38:	3901      	subs	r1, #1
    9d3a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9d3c:	0876      	lsrs	r6, r6, #1
    9d3e:	3201      	adds	r2, #1
    9d40:	e7ef      	b.n	9d22 <chan_sel_remap+0x16>
	...

00009d44 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9d44:	4b09      	ldr	r3, [pc, #36]	; (9d6c <packet_rx_acquired_count_get+0x28>)
    9d46:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9d4a:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9d4e:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9d50:	bf3b      	ittet	cc
    9d52:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9d56:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9d5a:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9d5e:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9d60:	bf2c      	ite	cs
    9d62:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9d64:	1a80      	subcc	r0, r0, r2
    9d66:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9d68:	4770      	bx	lr
    9d6a:	bf00      	nop
    9d6c:	200008e8 	.word	0x200008e8

00009d70 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9d70:	b508      	push	{r3, lr}
    9d72:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9d74:	f7ff ffe6 	bl	9d44 <packet_rx_acquired_count_get>
    9d78:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9d7a:	bf21      	itttt	cs
    9d7c:	4b04      	ldrcs	r3, [pc, #16]	; (9d90 <packet_rx_reserve_get+0x20>)
    9d7e:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9d82:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9d86:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9d8a:	bf38      	it	cc
    9d8c:	2000      	movcc	r0, #0
}
    9d8e:	bd08      	pop	{r3, pc}
    9d90:	200008e8 	.word	0x200008e8

00009d94 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9d94:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9d96:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9d9a:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9d9e:	429c      	cmp	r4, r3
    9da0:	d15a      	bne.n	9e58 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9da2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9da6:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9daa:	428b      	cmp	r3, r1
    9dac:	d154      	bne.n	9e58 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9dae:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9db2:	2b00      	cmp	r3, #0
    9db4:	db25      	blt.n	9e02 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9db6:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9db8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9dba:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9dbe:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9dc0:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9dc4:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9dc6:	227d      	movs	r2, #125	; 0x7d
    9dc8:	434a      	muls	r2, r1
					      125 / 1000;
    9dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9dce:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9dd2:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9dd6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9dda:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9ddc:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9de0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9de2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9de4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9de8:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9dea:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9dee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9df2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9df6:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9dfa:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9dfe:	4618      	mov	r0, r3
    9e00:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9e02:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9e06:	06dc      	lsls	r4, r3, #27
    9e08:	d428      	bmi.n	9e5c <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9e0a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9e0e:	069a      	lsls	r2, r3, #26
    9e10:	d503      	bpl.n	9e1a <conn_update_req+0x86>
		    (conn->llcp_features &
    9e12:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9e16:	079b      	lsls	r3, r3, #30
    9e18:	d520      	bpl.n	9e5c <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9e1a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9e1c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9e1e:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9e22:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9e24:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9e28:	4354      	muls	r4, r2
						conn->supervision_reload *
    9e2a:	227d      	movs	r2, #125	; 0x7d
    9e2c:	4362      	muls	r2, r4
						125 / 1000;
    9e2e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9e32:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9e36:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9e3a:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9e3e:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9e40:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9e44:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9e48:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9e4a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9e4e:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9e52:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9e56:	e7d2      	b.n	9dfe <conn_update_req+0x6a>
		return 1;
    9e58:	2001      	movs	r0, #1
    9e5a:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9e5c:	2002      	movs	r0, #2
}
    9e5e:	bd30      	pop	{r4, r5, pc}

00009e60 <packet_rx_allocate>:
{
    9e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9e64:	4d22      	ldr	r5, [pc, #136]	; (9ef0 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9e66:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9e6a:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9e6e:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9e72:	3401      	adds	r4, #1
    9e74:	4581      	cmp	r9, r0
    9e76:	b2e4      	uxtb	r4, r4
    9e78:	bf28      	it	cs
    9e7a:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9e7c:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9e80:	42a3      	cmp	r3, r4
    9e82:	bf08      	it	eq
    9e84:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9e86:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9e8a:	f1b9 0f00 	cmp.w	r9, #0
    9e8e:	d003      	beq.n	9e98 <packet_rx_allocate+0x38>
    9e90:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9e94:	429c      	cmp	r4, r3
    9e96:	d101      	bne.n	9e9c <packet_rx_allocate+0x3c>
    9e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9e9c:	4638      	mov	r0, r7
    9e9e:	f7fd f9fc 	bl	729a <mem_acquire>
		if (!link) {
    9ea2:	4606      	mov	r6, r0
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d0f7      	beq.n	9e98 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9ea8:	4640      	mov	r0, r8
    9eaa:	f7fd f9f6 	bl	729a <mem_acquire>
		if (!node_rx) {
    9eae:	b928      	cbnz	r0, 9ebc <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9eb0:	4630      	mov	r0, r6
    9eb2:	4910      	ldr	r1, [pc, #64]	; (9ef4 <packet_rx_allocate+0x94>)
}
    9eb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9eb8:	f7fd ba09 	b.w	72ce <mem_release>
		node_rx->hdr.onion.link = link;
    9ebc:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9ebe:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9ec2:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9ec6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9eca:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9ece:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9ed2:	3401      	adds	r4, #1
    9ed4:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9ed6:	42a3      	cmp	r3, r4
    9ed8:	bf08      	it	eq
    9eda:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9edc:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9ee0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9ee4:	3b01      	subs	r3, #1
    9ee6:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9eea:	fa5f f989 	uxtb.w	r9, r9
    9eee:	e7cc      	b.n	9e8a <packet_rx_allocate+0x2a>
    9ef0:	200008e8 	.word	0x200008e8
    9ef4:	20000a30 	.word	0x20000a30

00009ef8 <common_init>:
{
    9ef8:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    9efa:	4c37      	ldr	r4, [pc, #220]	; (9fd8 <common_init+0xe0>)
    9efc:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9f00:	2a00      	cmp	r2, #0
    9f02:	d03c      	beq.n	9f7e <common_init+0x86>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9f04:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9f08:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9f0c:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9f10:	f7fd f99c 	bl	724c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9f14:	4b31      	ldr	r3, [pc, #196]	; (9fdc <common_init+0xe4>)
    9f16:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9f1a:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9f1e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9f22:	f7fd f993 	bl	724c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9f26:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9f2a:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9f2e:	4b2c      	ldr	r3, [pc, #176]	; (9fe0 <common_init+0xe8>)
    9f30:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9f34:	440a      	add	r2, r1
    9f36:	2108      	movs	r1, #8
    9f38:	f7fd f988 	bl	724c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9f3c:	4b29      	ldr	r3, [pc, #164]	; (9fe4 <common_init+0xec>)
    9f3e:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9f42:	2202      	movs	r2, #2
    9f44:	2124      	movs	r1, #36	; 0x24
    9f46:	f7fd f981 	bl	724c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9f4a:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9f4e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9f52:	4b25      	ldr	r3, [pc, #148]	; (9fe8 <common_init+0xf0>)
    9f54:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9f58:	3a01      	subs	r2, #1
    9f5a:	b292      	uxth	r2, r2
    9f5c:	f7fd f976 	bl	724c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9f60:	481f      	ldr	r0, [pc, #124]	; (9fe0 <common_init+0xe8>)
    9f62:	f7fd f99a 	bl	729a <mem_acquire>
	LL_ASSERT(link);
    9f66:	b968      	cbnz	r0, 9f84 <common_init+0x8c>
    9f68:	4a20      	ldr	r2, [pc, #128]	; (9fec <common_init+0xf4>)
    9f6a:	4921      	ldr	r1, [pc, #132]	; (9ff0 <common_init+0xf8>)
    9f6c:	2003      	movs	r0, #3
    9f6e:	f7f8 f831 	bl	1fd4 <bt_log>
    9f72:	4040      	eors	r0, r0
    9f74:	f380 8811 	msr	BASEPRI, r0
    9f78:	f04f 0004 	mov.w	r0, #4
    9f7c:	df02      	svc	2
		_radio.conn_free = NULL;
    9f7e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9f82:	e7c7      	b.n	9f14 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9f84:	4a1b      	ldr	r2, [pc, #108]	; (9ff4 <common_init+0xfc>)
    9f86:	1f11      	subs	r1, r2, #4
    9f88:	f7fd f9de 	bl	7348 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9f8c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9f90:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9f94:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9f98:	231f      	movs	r3, #31
    9f9a:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9f9e:	2325      	movs	r3, #37	; 0x25
    9fa0:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9fa4:	231b      	movs	r3, #27
    9fa6:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9faa:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9fae:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9fb0:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9fb4:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9fb6:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9fba:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9fbe:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9fc2:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9fc6:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9fca:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9fd2:	f7ff bf45 	b.w	9e60 <packet_rx_allocate>
    9fd6:	bf00      	nop
    9fd8:	200008e8 	.word	0x200008e8
    9fdc:	20000a18 	.word	0x20000a18
    9fe0:	20000a30 	.word	0x20000a30
    9fe4:	20000a44 	.word	0x20000a44
    9fe8:	20000a4c 	.word	0x20000a4c
    9fec:	000165ca 	.word	0x000165ca
    9ff0:	00016a47 	.word	0x00016a47
    9ff4:	20000a38 	.word	0x20000a38

00009ff8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9ffc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9ffe:	4294      	cmp	r4, r2
{
    a000:	4681      	mov	r9, r0
    a002:	460f      	mov	r7, r1
    a004:	4690      	mov	r8, r2
	if (_first == last) {
    a006:	d03d      	beq.n	a084 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    a008:	4e1f      	ldr	r6, [pc, #124]	; (a088 <tx_cmplt_get+0x90>)
    a00a:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    a00e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    a012:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    a014:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    a016:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a01a:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    a01e:	b222      	sxth	r2, r4
    a020:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    a024:	f8b9 e000 	ldrh.w	lr, [r9]
    a028:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a02c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    a030:	4596      	cmp	lr, r2
    a032:	d120      	bne.n	a076 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    a034:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    a036:	2801      	cmp	r0, #1
    a038:	f020 0303 	bic.w	r3, r0, #3
    a03c:	d90a      	bls.n	a054 <tx_cmplt_get+0x5c>
    a03e:	b1f3      	cbz	r3, a07e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    a040:	1d02      	adds	r2, r0, #4
    a042:	d01c      	beq.n	a07e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a044:	7942      	ldrb	r2, [r0, #5]
    a046:	b1d2      	cbz	r2, a07e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    a048:	7902      	ldrb	r2, [r0, #4]
    a04a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a04e:	3a01      	subs	r2, #1
    a050:	2a01      	cmp	r2, #1
    a052:	d814      	bhi.n	a07e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    a054:	2201      	movs	r2, #1
			cmplt++;
    a056:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    a058:	604a      	str	r2, [r1, #4]
			cmplt++;
    a05a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    a05c:	b113      	cbz	r3, a064 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a05e:	4651      	mov	r1, sl
    a060:	f7fd f935 	bl	72ce <mem_release>
		}

		_first = _first + 1;
    a064:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    a066:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    a06a:	b2e4      	uxtb	r4, r4
			_first = 0;
    a06c:	42a2      	cmp	r2, r4
    a06e:	bf08      	it	eq
    a070:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    a072:	4544      	cmp	r4, r8
    a074:	d1d3      	bne.n	a01e <tx_cmplt_get+0x26>

	*first = _first;
    a076:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    a078:	4628      	mov	r0, r5
    a07a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    a07e:	f8c1 b004 	str.w	fp, [r1, #4]
    a082:	e7eb      	b.n	a05c <tx_cmplt_get+0x64>
		return 0;
    a084:	2500      	movs	r5, #0
    a086:	e7f7      	b.n	a078 <tx_cmplt_get+0x80>
    a088:	200008e8 	.word	0x200008e8

0000a08c <connection_get>:
{
    a08c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    a08e:	4b09      	ldr	r3, [pc, #36]	; (a0b4 <connection_get+0x28>)
    a090:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    a094:	4282      	cmp	r2, r0
{
    a096:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    a098:	d90a      	bls.n	a0b0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    a09a:	4602      	mov	r2, r0
    a09c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a0a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a0a4:	f7fd f92e 	bl	7304 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    a0a8:	b110      	cbz	r0, a0b0 <connection_get+0x24>
    a0aa:	8c03      	ldrh	r3, [r0, #32]
    a0ac:	42a3      	cmp	r3, r4
    a0ae:	d000      	beq.n	a0b2 <connection_get+0x26>
	return 0;
    a0b0:	2000      	movs	r0, #0
}
    a0b2:	bd10      	pop	{r4, pc}
    a0b4:	200008e8 	.word	0x200008e8

0000a0b8 <role_disable>:
{
    a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0bc:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a0be:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a0c0:	2805      	cmp	r0, #5
{
    a0c2:	4605      	mov	r5, r0
    a0c4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a0c6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a0c8:	d00c      	beq.n	a0e4 <role_disable+0x2c>
    a0ca:	2806      	cmp	r0, #6
    a0cc:	d036      	beq.n	a13c <role_disable+0x84>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a0ce:	d93b      	bls.n	a148 <role_disable+0x90>
			conn_handle = ticker_id_primary -
    a0d0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a0d2:	b280      	uxth	r0, r0
    a0d4:	f7ff ffda 	bl	a08c <connection_get>
			if (!conn) {
    a0d8:	2800      	cmp	r0, #0
    a0da:	f000 80f3 	beq.w	a2c4 <role_disable+0x20c>
			ticks_active_to_start =
    a0de:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a0e2:	e00f      	b.n	a104 <role_disable+0x4c>
		ticks_xtal_to_start =
    a0e4:	4b78      	ldr	r3, [pc, #480]	; (a2c8 <role_disable+0x210>)
    a0e6:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a0e8:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0ec:	ab02      	add	r3, sp, #8
    a0ee:	9300      	str	r3, [sp, #0]
    a0f0:	460a      	mov	r2, r1
    a0f2:	4b76      	ldr	r3, [pc, #472]	; (a2cc <role_disable+0x214>)
    a0f4:	2103      	movs	r1, #3
    a0f6:	2000      	movs	r0, #0
    a0f8:	f7fd ffec 	bl	80d4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a0fc:	2802      	cmp	r0, #2
    a0fe:	d00b      	beq.n	a118 <role_disable+0x60>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a100:	9b02      	ldr	r3, [sp, #8]
    a102:	b96b      	cbnz	r3, a120 <role_disable+0x68>
	LL_ASSERT(!_radio.ticker_id_stop);
    a104:	4c70      	ldr	r4, [pc, #448]	; (a2c8 <role_disable+0x210>)
    a106:	7ca3      	ldrb	r3, [r4, #18]
    a108:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a10c:	b1fb      	cbz	r3, a14e <role_disable+0x96>
    a10e:	4a70      	ldr	r2, [pc, #448]	; (a2d0 <role_disable+0x218>)
    a110:	4970      	ldr	r1, [pc, #448]	; (a2d4 <role_disable+0x21c>)
    a112:	e00a      	b.n	a12a <role_disable+0x72>
				cpu_sleep();
    a114:	f7ff fdca 	bl	9cac <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a118:	9b02      	ldr	r3, [sp, #8]
    a11a:	2b02      	cmp	r3, #2
    a11c:	d0fa      	beq.n	a114 <role_disable+0x5c>
    a11e:	e7ef      	b.n	a100 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a120:	9b02      	ldr	r3, [sp, #8]
    a122:	2b01      	cmp	r3, #1
    a124:	d0ee      	beq.n	a104 <role_disable+0x4c>
    a126:	4a6a      	ldr	r2, [pc, #424]	; (a2d0 <role_disable+0x218>)
    a128:	496b      	ldr	r1, [pc, #428]	; (a2d8 <role_disable+0x220>)
			LL_ASSERT(0);
    a12a:	2003      	movs	r0, #3
    a12c:	f7f7 ff52 	bl	1fd4 <bt_log>
    a130:	4040      	eors	r0, r0
    a132:	f380 8811 	msr	BASEPRI, r0
    a136:	f04f 0004 	mov.w	r0, #4
    a13a:	df02      	svc	2
		ticks_xtal_to_start =
    a13c:	4b62      	ldr	r3, [pc, #392]	; (a2c8 <role_disable+0x210>)
    a13e:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    a142:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    a146:	e7dd      	b.n	a104 <role_disable+0x4c>
			LL_ASSERT(0);
    a148:	4a61      	ldr	r2, [pc, #388]	; (a2d0 <role_disable+0x218>)
    a14a:	4964      	ldr	r1, [pc, #400]	; (a2dc <role_disable+0x224>)
    a14c:	e7ed      	b.n	a12a <role_disable+0x72>
	ret_cb = TICKER_STATUS_BUSY;
    a14e:	ab06      	add	r3, sp, #24
    a150:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a152:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a154:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a158:	2103      	movs	r1, #3
    a15a:	9300      	str	r3, [sp, #0]
    a15c:	462a      	mov	r2, r5
    a15e:	4b5b      	ldr	r3, [pc, #364]	; (a2cc <role_disable+0x214>)
    a160:	f7fd ffb8 	bl	80d4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a164:	2802      	cmp	r0, #2
    a166:	d020      	beq.n	a1aa <role_disable+0xf2>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a168:	9b02      	ldr	r3, [sp, #8]
    a16a:	2b00      	cmp	r3, #0
    a16c:	d15a      	bne.n	a224 <role_disable+0x16c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a16e:	7c23      	ldrb	r3, [r4, #16]
    a170:	429d      	cmp	r5, r3
    a172:	d002      	beq.n	a17a <role_disable+0xc2>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a174:	7c63      	ldrb	r3, [r4, #17]
    a176:	429d      	cmp	r5, r3
    a178:	d150      	bne.n	a21c <role_disable+0x164>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a17a:	ab06      	add	r3, sp, #24
    a17c:	2202      	movs	r2, #2
    a17e:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a182:	2200      	movs	r2, #0
    a184:	9300      	str	r3, [sp, #0]
    a186:	2103      	movs	r1, #3
    a188:	4b50      	ldr	r3, [pc, #320]	; (a2cc <role_disable+0x214>)
    a18a:	4610      	mov	r0, r2
    a18c:	f7fd ffa2 	bl	80d4 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a190:	2802      	cmp	r0, #2
    a192:	d118      	bne.n	a1c6 <role_disable+0x10e>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a194:	2201      	movs	r2, #1
    a196:	4611      	mov	r1, r2
    a198:	2003      	movs	r0, #3
    a19a:	f7fd f921 	bl	73e0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a19e:	9b03      	ldr	r3, [sp, #12]
    a1a0:	2b02      	cmp	r3, #2
    a1a2:	d110      	bne.n	a1c6 <role_disable+0x10e>
    a1a4:	4a4e      	ldr	r2, [pc, #312]	; (a2e0 <role_disable+0x228>)
    a1a6:	494f      	ldr	r1, [pc, #316]	; (a2e4 <role_disable+0x22c>)
    a1a8:	e7bf      	b.n	a12a <role_disable+0x72>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a1aa:	7c63      	ldrb	r3, [r4, #17]
    a1ac:	429d      	cmp	r5, r3
    a1ae:	d104      	bne.n	a1ba <role_disable+0x102>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a1b0:	2201      	movs	r2, #1
    a1b2:	4611      	mov	r1, r2
    a1b4:	2003      	movs	r0, #3
    a1b6:	f7fd f913 	bl	73e0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a1ba:	9b02      	ldr	r3, [sp, #8]
    a1bc:	2b02      	cmp	r3, #2
    a1be:	d1d3      	bne.n	a168 <role_disable+0xb0>
			cpu_sleep();
    a1c0:	f7ff fd74 	bl	9cac <cpu_sleep>
    a1c4:	e7f9      	b.n	a1ba <role_disable+0x102>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a1c6:	9803      	ldr	r0, [sp, #12]
    a1c8:	2800      	cmp	r0, #0
    a1ca:	d141      	bne.n	a250 <role_disable+0x198>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a1cc:	2302      	movs	r3, #2
    a1ce:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a1d0:	7c23      	ldrb	r3, [r4, #16]
    a1d2:	b913      	cbnz	r3, a1da <role_disable+0x122>
    a1d4:	4a42      	ldr	r2, [pc, #264]	; (a2e0 <role_disable+0x228>)
    a1d6:	4944      	ldr	r1, [pc, #272]	; (a2e8 <role_disable+0x230>)
    a1d8:	e7a7      	b.n	a12a <role_disable+0x72>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1da:	ab04      	add	r3, sp, #16
    a1dc:	9300      	str	r3, [sp, #0]
    a1de:	2201      	movs	r2, #1
    a1e0:	4b3a      	ldr	r3, [pc, #232]	; (a2cc <role_disable+0x214>)
		_radio.ticker_id_prepare = 0;
    a1e2:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1e4:	2103      	movs	r1, #3
    a1e6:	f7fd ff75 	bl	80d4 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a1ea:	2802      	cmp	r0, #2
    a1ec:	d10a      	bne.n	a204 <role_disable+0x14c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a1ee:	2201      	movs	r2, #1
    a1f0:	4611      	mov	r1, r2
    a1f2:	2003      	movs	r0, #3
    a1f4:	f7fd f8f4 	bl	73e0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a1f8:	9b04      	ldr	r3, [sp, #16]
    a1fa:	2b02      	cmp	r3, #2
    a1fc:	d102      	bne.n	a204 <role_disable+0x14c>
    a1fe:	4a38      	ldr	r2, [pc, #224]	; (a2e0 <role_disable+0x228>)
    a200:	493a      	ldr	r1, [pc, #232]	; (a2ec <role_disable+0x234>)
    a202:	e792      	b.n	a12a <role_disable+0x72>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a204:	9a04      	ldr	r2, [sp, #16]
    a206:	b99a      	cbnz	r2, a230 <role_disable+0x178>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a208:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a20c:	45b0      	cmp	r8, r6
    a20e:	d91d      	bls.n	a24c <role_disable+0x194>
				ret = mayfly_enqueue(
    a210:	4b37      	ldr	r3, [pc, #220]	; (a2f0 <role_disable+0x238>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a212:	4611      	mov	r1, r2
    a214:	2003      	movs	r0, #3
    a216:	f7fd f90b 	bl	7430 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a21a:	b9a0      	cbnz	r0, a246 <role_disable+0x18e>
	if (!_radio.ticker_id_stop) {
    a21c:	7ca3      	ldrb	r3, [r4, #18]
    a21e:	b90b      	cbnz	r3, a224 <role_disable+0x16c>
		ret_cb = TICKER_STATUS_FAILURE;
    a220:	2301      	movs	r3, #1
    a222:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a224:	2300      	movs	r3, #0
    a226:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a228:	9802      	ldr	r0, [sp, #8]
}
    a22a:	b006      	add	sp, #24
    a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a230:	9b04      	ldr	r3, [sp, #16]
    a232:	2b01      	cmp	r3, #1
    a234:	d144      	bne.n	a2c0 <role_disable+0x208>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a236:	2200      	movs	r2, #0
    a238:	4611      	mov	r1, r2
    a23a:	4b2d      	ldr	r3, [pc, #180]	; (a2f0 <role_disable+0x238>)
    a23c:	2003      	movs	r0, #3
    a23e:	f7fd f8f7 	bl	7430 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a242:	4602      	mov	r2, r0
    a244:	b110      	cbz	r0, a24c <role_disable+0x194>
			LL_ASSERT(!ret);
    a246:	4a26      	ldr	r2, [pc, #152]	; (a2e0 <role_disable+0x228>)
    a248:	492a      	ldr	r1, [pc, #168]	; (a2f4 <role_disable+0x23c>)
    a24a:	e76e      	b.n	a12a <role_disable+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a24c:	4b2a      	ldr	r3, [pc, #168]	; (a2f8 <role_disable+0x240>)
    a24e:	e7e0      	b.n	a212 <role_disable+0x15a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a250:	9d03      	ldr	r5, [sp, #12]
    a252:	2d01      	cmp	r5, #1
    a254:	d134      	bne.n	a2c0 <role_disable+0x208>
		if (ticker_id_stop != TICKER_NULL) {
    a256:	2fff      	cmp	r7, #255	; 0xff
    a258:	d01f      	beq.n	a29a <role_disable+0x1e2>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a25a:	ab06      	add	r3, sp, #24
    a25c:	2202      	movs	r2, #2
    a25e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a262:	2103      	movs	r1, #3
    a264:	9300      	str	r3, [sp, #0]
    a266:	463a      	mov	r2, r7
    a268:	4b18      	ldr	r3, [pc, #96]	; (a2cc <role_disable+0x214>)
    a26a:	2000      	movs	r0, #0
    a26c:	f7fd ff32 	bl	80d4 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a270:	2802      	cmp	r0, #2
    a272:	d10a      	bne.n	a28a <role_disable+0x1d2>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a274:	462a      	mov	r2, r5
    a276:	4629      	mov	r1, r5
    a278:	2003      	movs	r0, #3
    a27a:	f7fd f8b1 	bl	73e0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a27e:	9b05      	ldr	r3, [sp, #20]
    a280:	2b02      	cmp	r3, #2
    a282:	d102      	bne.n	a28a <role_disable+0x1d2>
    a284:	4a16      	ldr	r2, [pc, #88]	; (a2e0 <role_disable+0x228>)
    a286:	491d      	ldr	r1, [pc, #116]	; (a2fc <role_disable+0x244>)
    a288:	e74f      	b.n	a12a <role_disable+0x72>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a28a:	9b05      	ldr	r3, [sp, #20]
    a28c:	b12b      	cbz	r3, a29a <role_disable+0x1e2>
    a28e:	9b05      	ldr	r3, [sp, #20]
    a290:	2b01      	cmp	r3, #1
    a292:	d002      	beq.n	a29a <role_disable+0x1e2>
    a294:	4a12      	ldr	r2, [pc, #72]	; (a2e0 <role_disable+0x228>)
    a296:	491a      	ldr	r1, [pc, #104]	; (a300 <role_disable+0x248>)
    a298:	e747      	b.n	a12a <role_disable+0x72>
		if (_radio.role != ROLE_NONE) {
    a29a:	7ce3      	ldrb	r3, [r4, #19]
    a29c:	2b00      	cmp	r3, #0
    a29e:	d0bd      	beq.n	a21c <role_disable+0x164>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a2a0:	4b18      	ldr	r3, [pc, #96]	; (a304 <role_disable+0x24c>)
    a2a2:	2204      	movs	r2, #4
    a2a4:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a2a6:	2200      	movs	r2, #0
    a2a8:	4611      	mov	r1, r2
    a2aa:	2003      	movs	r0, #3
    a2ac:	f7fd f8c0 	bl	7430 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a2b0:	2800      	cmp	r0, #0
    a2b2:	d1c8      	bne.n	a246 <role_disable+0x18e>
			while (_radio.role != ROLE_NONE) {
    a2b4:	7ce3      	ldrb	r3, [r4, #19]
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d0b0      	beq.n	a21c <role_disable+0x164>
				cpu_sleep();
    a2ba:	f7ff fcf7 	bl	9cac <cpu_sleep>
    a2be:	e7f9      	b.n	a2b4 <role_disable+0x1fc>
		LL_ASSERT(0);
    a2c0:	4a07      	ldr	r2, [pc, #28]	; (a2e0 <role_disable+0x228>)
    a2c2:	e742      	b.n	a14a <role_disable+0x92>
				return 1;
    a2c4:	2001      	movs	r0, #1
    a2c6:	e7b0      	b.n	a22a <role_disable+0x172>
    a2c8:	200008e8 	.word	0x200008e8
    a2cc:	00009cf1 	.word	0x00009cf1
    a2d0:	000169ec 	.word	0x000169ec
    a2d4:	000171af 	.word	0x000171af
    a2d8:	0001717b 	.word	0x0001717b
    a2dc:	000153a4 	.word	0x000153a4
    a2e0:	000169d8 	.word	0x000169d8
    a2e4:	000171db 	.word	0x000171db
    a2e8:	00017200 	.word	0x00017200
    a2ec:	0001722e 	.word	0x0001722e
    a2f0:	20003d80 	.word	0x20003d80
    a2f4:	00017252 	.word	0x00017252
    a2f8:	20003e20 	.word	0x20003e20
    a2fc:	0001726c 	.word	0x0001726c
    a300:	00017292 	.word	0x00017292
    a304:	20003da0 	.word	0x20003da0

0000a308 <rx_packet_set>:
{
    a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a30a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a30e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a310:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a312:	f004 0407 	and.w	r4, r4, #7
{
    a316:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a318:	4620      	mov	r0, r4
    a31a:	2100      	movs	r1, #0
    a31c:	f007 fcbc 	bl	11c98 <radio_phy_set>
	if (conn->enc_rx) {
    a320:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a324:	f013 0f10 	tst.w	r3, #16
    a328:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a32c:	d010      	beq.n	a350 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a32e:	1d29      	adds	r1, r5, #4
    a330:	f042 0201 	orr.w	r2, r2, #1
    a334:	b2c9      	uxtb	r1, r1
    a336:	2008      	movs	r0, #8
    a338:	f007 fcf4 	bl	11d24 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a33c:	463a      	mov	r2, r7
    a33e:	4621      	mov	r1, r4
    a340:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a344:	f007 ff32 	bl	121ac <radio_ccm_rx_pkt_set>
}
    a348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a34c:	f007 bd18 	b.w	11d80 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a350:	2008      	movs	r0, #8
    a352:	f042 0201 	orr.w	r2, r2, #1
    a356:	b2e9      	uxtb	r1, r5
    a358:	f007 fce4 	bl	11d24 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a35c:	4638      	mov	r0, r7
    a35e:	e7f3      	b.n	a348 <rx_packet_set+0x40>

0000a360 <tx_packet_set>:
{
    a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a362:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a364:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a368:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a36a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a36e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a370:	09c9      	lsrs	r1, r1, #7
    a372:	4620      	mov	r0, r4
    a374:	f007 fc90 	bl	11c98 <radio_phy_set>
	if (conn->enc_tx) {
    a378:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a37c:	f013 0f20 	tst.w	r3, #32
    a380:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a384:	d00f      	beq.n	a3a6 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a386:	1d29      	adds	r1, r5, #4
    a388:	b2c9      	uxtb	r1, r1
    a38a:	2008      	movs	r0, #8
    a38c:	f042 0201 	orr.w	r2, r2, #1
    a390:	f007 fcc8 	bl	11d24 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a394:	4639      	mov	r1, r7
    a396:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a39a:	f007 ff43 	bl	12224 <radio_ccm_tx_pkt_set>
}
    a39e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a3a2:	f007 bcf3 	b.w	11d8c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a3a6:	2008      	movs	r0, #8
    a3a8:	f042 0201 	orr.w	r2, r2, #1
    a3ac:	b2e9      	uxtb	r1, r5
    a3ae:	f007 fcb9 	bl	11d24 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a3b2:	4638      	mov	r0, r7
    a3b4:	e7f3      	b.n	a39e <tx_packet_set+0x3e>
	...

0000a3b8 <sched_free_win_offset_calc>:
{
    a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3bc:	b08f      	sub	sp, #60	; 0x3c
    a3be:	4692      	mov	sl, r2
    a3c0:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a3c2:	6803      	ldr	r3, [r0, #0]
{
    a3c4:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a3c6:	2b00      	cmp	r3, #0
{
    a3c8:	4680      	mov	r8, r0
    a3ca:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a3cc:	da36      	bge.n	a43c <sched_free_win_offset_calc+0x84>
		u32_t ticks_prepare_to_start =
    a3ce:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a3d4:	4291      	cmp	r1, r2
    a3d6:	bf2c      	ite	cs
    a3d8:	1a5a      	subcs	r2, r3, r1
    a3da:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a3dc:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a3de:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a3e2:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a3e4:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a3e6:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a3e8:	18d3      	adds	r3, r2, r3
    a3ea:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a3ec:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a3f0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a3f4:	940c      	str	r4, [sp, #48]	; 0x30
    a3f6:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a3f8:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a3fa:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a3fc:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a3fe:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a400:	2302      	movs	r3, #2
    a402:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a404:	ab0d      	add	r3, sp, #52	; 0x34
    a406:	9302      	str	r3, [sp, #8]
    a408:	4b7b      	ldr	r3, [pc, #492]	; (a5f8 <sched_free_win_offset_calc+0x240>)
    a40a:	9301      	str	r3, [sp, #4]
    a40c:	ab0b      	add	r3, sp, #44	; 0x2c
    a40e:	9300      	str	r3, [sp, #0]
    a410:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a414:	ab0c      	add	r3, sp, #48	; 0x30
    a416:	2101      	movs	r1, #1
    a418:	2000      	movs	r0, #0
    a41a:	f7fd fe97 	bl	814c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a41e:	2802      	cmp	r0, #2
    a420:	d015      	beq.n	a44e <sched_free_win_offset_calc+0x96>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a424:	b1bb      	cbz	r3, a456 <sched_free_win_offset_calc+0x9e>
    a426:	4a75      	ldr	r2, [pc, #468]	; (a5fc <sched_free_win_offset_calc+0x244>)
    a428:	4975      	ldr	r1, [pc, #468]	; (a600 <sched_free_win_offset_calc+0x248>)
			LL_ASSERT(0);
    a42a:	2003      	movs	r0, #3
    a42c:	f7f7 fdd2 	bl	1fd4 <bt_log>
    a430:	4040      	eors	r0, r0
    a432:	f380 8811 	msr	BASEPRI, r0
    a436:	f04f 0004 	mov.w	r0, #4
    a43a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a43c:	4293      	cmp	r3, r2
    a43e:	bf38      	it	cc
    a440:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a442:	2200      	movs	r2, #0
    a444:	e7ca      	b.n	a3dc <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a446:	2101      	movs	r1, #1
    a448:	2000      	movs	r0, #0
    a44a:	f7fd fefd 	bl	8248 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a450:	2b02      	cmp	r3, #2
    a452:	d0f8      	beq.n	a446 <sched_free_win_offset_calc+0x8e>
    a454:	e7e5      	b.n	a422 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a456:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a45a:	2aff      	cmp	r2, #255	; 0xff
    a45c:	d060      	beq.n	a520 <sched_free_win_offset_calc+0x168>
		if ((ticker_id_prev != 0xff) &&
    a45e:	2fff      	cmp	r7, #255	; 0xff
    a460:	d005      	beq.n	a46e <sched_free_win_offset_calc+0xb6>
    a462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a464:	4599      	cmp	r9, r3
    a466:	d002      	beq.n	a46e <sched_free_win_offset_calc+0xb6>
			LL_ASSERT(0);
    a468:	4a64      	ldr	r2, [pc, #400]	; (a5fc <sched_free_win_offset_calc+0x244>)
    a46a:	4966      	ldr	r1, [pc, #408]	; (a604 <sched_free_win_offset_calc+0x24c>)
    a46c:	e7dd      	b.n	a42a <sched_free_win_offset_calc+0x72>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a46e:	2a05      	cmp	r2, #5
    a470:	d951      	bls.n	a516 <sched_free_win_offset_calc+0x15e>
				  _radio.connection_count)) {
    a472:	4865      	ldr	r0, [pc, #404]	; (a608 <sched_free_win_offset_calc+0x250>)
    a474:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a478:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a47a:	429a      	cmp	r2, r3
    a47c:	da4b      	bge.n	a516 <sched_free_win_offset_calc+0x15e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a47e:	2a06      	cmp	r2, #6
    a480:	f000 8092 	beq.w	a5a8 <sched_free_win_offset_calc+0x1f0>
		if (ticker_id_other != 0xFF) {
    a484:	9b06      	ldr	r3, [sp, #24]
    a486:	2bff      	cmp	r3, #255	; 0xff
    a488:	d14a      	bne.n	a520 <sched_free_win_offset_calc+0x168>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a48a:	3a07      	subs	r2, #7
    a48c:	b292      	uxth	r2, r2
    a48e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a492:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a496:	f7fc ff35 	bl	7304 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a49a:	4580      	cmp	r8, r0
    a49c:	d03b      	beq.n	a516 <sched_free_win_offset_calc+0x15e>
    a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4a0:	b91b      	cbnz	r3, a4aa <sched_free_win_offset_calc+0xf2>
    a4a2:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a4a6:	2b00      	cmp	r3, #0
    a4a8:	db35      	blt.n	a516 <sched_free_win_offset_calc+0x15e>
			u32_t ticks_to_expire_normal =
    a4aa:	9b05      	ldr	r3, [sp, #20]
    a4ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a4ae:	6841      	ldr	r1, [r0, #4]
    a4b0:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a4b2:	6803      	ldr	r3, [r0, #0]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	da4e      	bge.n	a556 <sched_free_win_offset_calc+0x19e>
				u32_t ticks_prepare_to_start =
    a4b8:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a4ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a4be:	428a      	cmp	r2, r1
    a4c0:	bf2c      	ite	cs
    a4c2:	18b6      	addcs	r6, r6, r2
    a4c4:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a4c6:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a4c8:	68c2      	ldr	r2, [r0, #12]
    a4ca:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a4ce:	444b      	add	r3, r9
    a4d0:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a4d2:	f8da 3000 	ldr.w	r3, [sl]
    a4d6:	429e      	cmp	r6, r3
    a4d8:	d916      	bls.n	a508 <sched_free_win_offset_calc+0x150>
    a4da:	429d      	cmp	r5, r3
    a4dc:	bf38      	it	cc
    a4de:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a4e0:	9b07      	ldr	r3, [sp, #28]
    a4e2:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a4e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4e8:	781b      	ldrb	r3, [r3, #0]
    a4ea:	42a3      	cmp	r3, r4
    a4ec:	d905      	bls.n	a4fa <sched_free_win_offset_calc+0x142>
				       (ticker_ticks_diff_get(
    a4ee:	4629      	mov	r1, r5
    a4f0:	4630      	mov	r0, r6
    a4f2:	f7fd fec1 	bl	8278 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a4f6:	42b8      	cmp	r0, r7
    a4f8:	d231      	bcs.n	a55e <sched_free_win_offset_calc+0x1a6>
				if (_win_offset >= conn_interval) {
    a4fa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a4fe:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a500:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a504:	4293      	cmp	r3, r2
    a506:	d20b      	bcs.n	a520 <sched_free_win_offset_calc+0x168>
			ticks_anchor_prev = ticks_anchor;
    a508:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a50c:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a510:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a514:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a516:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a518:	781b      	ldrb	r3, [r3, #0]
    a51a:	42a3      	cmp	r3, r4
    a51c:	f63f af70 	bhi.w	a400 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a520:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a524:	2bff      	cmp	r3, #255	; 0xff
    a526:	d111      	bne.n	a54c <sched_free_win_offset_calc+0x194>
    a528:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a52c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; a60c <sched_free_win_offset_calc+0x254>
    a530:	a72f      	add	r7, pc, #188	; (adr r7, a5f0 <sched_free_win_offset_calc+0x238>)
    a532:	e9d7 6700 	ldrd	r6, r7, [r7]
    a536:	429d      	cmp	r5, r3
    a538:	bf38      	it	cc
    a53a:	461d      	movcc	r5, r3
    a53c:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a540:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a542:	781b      	ldrb	r3, [r3, #0]
    a544:	42a3      	cmp	r3, r4
    a546:	d831      	bhi.n	a5ac <sched_free_win_offset_calc+0x1f4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a548:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a54c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a54e:	701c      	strb	r4, [r3, #0]
}
    a550:	b00f      	add	sp, #60	; 0x3c
    a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a556:	428b      	cmp	r3, r1
    a558:	bf38      	it	cc
    a55a:	460b      	movcc	r3, r1
    a55c:	e7b4      	b.n	a4c8 <sched_free_win_offset_calc+0x110>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a55e:	4a2b      	ldr	r2, [pc, #172]	; (a60c <sched_free_win_offset_calc+0x254>)
    a560:	eb05 030b 	add.w	r3, r5, fp
    a564:	fba3 0102 	umull	r0, r1, r3, r2
    a568:	2207      	movs	r2, #7
    a56a:	fb02 1103 	mla	r1, r2, r3, r1
    a56e:	a320      	add	r3, pc, #128	; (adr r3, a5f0 <sched_free_win_offset_calc+0x238>)
    a570:	e9d3 2300 	ldrd	r2, r3, [r3]
    a574:	f7f5 fe4e 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a578:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a57c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a580:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a582:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a584:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a586:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a58a:	d20b      	bcs.n	a5a4 <sched_free_win_offset_calc+0x1ec>
					memcpy(win_offset +
    a58c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a58e:	2202      	movs	r2, #2
    a590:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a594:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a598:	3401      	adds	r4, #1
					memcpy(win_offset +
    a59a:	f7f7 fb54 	bl	1c46 <memcpy>
					offset_index++;
    a59e:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a5a0:	3528      	adds	r5, #40	; 0x28
    a5a2:	e7a0      	b.n	a4e6 <sched_free_win_offset_calc+0x12e>
						ticks_to_expire_prev = 0;
    a5a4:	2500      	movs	r5, #0
    a5a6:	e7a8      	b.n	a4fa <sched_free_win_offset_calc+0x142>
    a5a8:	9206      	str	r2, [sp, #24]
    a5aa:	e7b4      	b.n	a516 <sched_free_win_offset_calc+0x15e>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a5ac:	eb05 030b 	add.w	r3, r5, fp
    a5b0:	fba3 0108 	umull	r0, r1, r3, r8
    a5b4:	fb09 1103 	mla	r1, r9, r3, r1
    a5b8:	4632      	mov	r2, r6
    a5ba:	463b      	mov	r3, r7
    a5bc:	f7f5 fe2a 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a5c0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a5c4:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a5c8:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a5ca:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a5cc:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a5ce:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a5d2:	d90b      	bls.n	a5ec <sched_free_win_offset_calc+0x234>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a5d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a5d6:	2202      	movs	r2, #2
    a5d8:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a5dc:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a5e0:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a5e2:	f7f7 fb30 	bl	1c46 <memcpy>
			offset_index++;
    a5e6:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a5e8:	3528      	adds	r5, #40	; 0x28
    a5ea:	e7a9      	b.n	a540 <sched_free_win_offset_calc+0x188>
				ticks_to_expire_prev = 0;
    a5ec:	2500      	movs	r5, #0
    a5ee:	e7ab      	b.n	a548 <sched_free_win_offset_calc+0x190>
    a5f0:	3b9aca00 	.word	0x3b9aca00
    a5f4:	00000000 	.word	0x00000000
    a5f8:	00009cf1 	.word	0x00009cf1
    a5fc:	0001680d 	.word	0x0001680d
    a600:	0001731d 	.word	0x0001731d
    a604:	000153a4 	.word	0x000153a4
    a608:	200008e8 	.word	0x200008e8
    a60c:	1afd498d 	.word	0x1afd498d

0000a610 <mayfly_sched_free_win_offset_calc>:
{
    a610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a612:	2300      	movs	r3, #0
    a614:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a616:	2306      	movs	r3, #6
    a618:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a61c:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a620:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a624:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a626:	bfbe      	ittt	lt
    a628:	4602      	movlt	r2, r0
    a62a:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a62c:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a630:	9101      	str	r1, [sp, #4]
    a632:	f10d 010b 	add.w	r1, sp, #11
    a636:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a638:	bfa8      	it	ge
    a63a:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a63c:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a640:	2100      	movs	r1, #0
    a642:	f7ff feb9 	bl	a3b8 <sched_free_win_offset_calc>
}
    a646:	b005      	add	sp, #20
    a648:	f85d fb04 	ldr.w	pc, [sp], #4
    a64c:	0000      	movs	r0, r0
	...

0000a650 <mayfly_sched_win_offset_select>:
{
    a650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a654:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a658:	b089      	sub	sp, #36	; 0x24
    a65a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a65c:	4840      	ldr	r0, [pc, #256]	; (a760 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a65e:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a660:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a662:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a666:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a66a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a66e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a670:	fb03 1102 	mla	r1, r3, r2, r1
    a674:	a338      	add	r3, pc, #224	; (adr r3, a758 <mayfly_sched_win_offset_select+0x108>)
    a676:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a67a:	9505      	str	r5, [sp, #20]
    a67c:	6075      	str	r5, [r6, #4]
    a67e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a680:	f7f5 fdc8 	bl	214 <__aeabi_uldivmod>
    a684:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a686:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a68a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a68e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a692:	9100      	str	r1, [sp, #0]
    a694:	9601      	str	r6, [sp, #4]
    a696:	2101      	movs	r1, #1
    a698:	4620      	mov	r0, r4
    a69a:	f7ff fe8d 	bl	a3b8 <sched_free_win_offset_calc>
    a69e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a6a2:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a6a6:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a6aa:	2202      	movs	r2, #2
    a6ac:	4639      	mov	r1, r7
    a6ae:	f10d 000e 	add.w	r0, sp, #14
    a6b2:	f7f7 fac8 	bl	1c46 <memcpy>
		while (offset_index_m < offset_m_max) {
    a6b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a6ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a6be:	2300      	movs	r3, #0
    a6c0:	b2d9      	uxtb	r1, r3
    a6c2:	4288      	cmp	r0, r1
    a6c4:	d811      	bhi.n	a6ea <mayfly_sched_win_offset_select+0x9a>
    a6c6:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a6c8:	4547      	cmp	r7, r8
    a6ca:	d1ee      	bne.n	a6aa <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a6cc:	b9b5      	cbnz	r5, a6fc <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a6ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a6d2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a6d6:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a6d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a6dc:	2202      	movs	r2, #2
    a6de:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a6e0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a6e4:	f7f7 faaf 	bl	1c46 <memcpy>
    a6e8:	e027      	b.n	a73a <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a6ea:	454a      	cmp	r2, r9
    a6ec:	d004      	beq.n	a6f8 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a6ee:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a6f2:	4291      	cmp	r1, r2
    a6f4:	d024      	beq.n	a740 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a6f6:	2501      	movs	r5, #1
    a6f8:	3301      	adds	r3, #1
    a6fa:	e7e1      	b.n	a6c0 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a6fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a700:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a704:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a708:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a70c:	4b15      	ldr	r3, [pc, #84]	; (a764 <mayfly_sched_win_offset_select+0x114>)
    a70e:	2200      	movs	r2, #0
    a710:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a714:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a718:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a71c:	f042 0203 	orr.w	r2, r2, #3
    a720:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a724:	2203      	movs	r2, #3
    a726:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a72a:	2211      	movs	r2, #17
    a72c:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a730:	220f      	movs	r2, #15
    a732:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a736:	2220      	movs	r2, #32
    a738:	701a      	strb	r2, [r3, #0]
}
    a73a:	b009      	add	sp, #36	; 0x24
    a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a740:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a744:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a746:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a74a:	2202      	movs	r2, #2
    a74c:	f10d 010e 	add.w	r1, sp, #14
    a750:	e7c6      	b.n	a6e0 <mayfly_sched_win_offset_select+0x90>
    a752:	bf00      	nop
    a754:	f3af 8000 	nop.w
    a758:	1afd498d 	.word	0x1afd498d
    a75c:	00000007 	.word	0x00000007
    a760:	09ce5400 	.word	0x09ce5400
    a764:	200008e8 	.word	0x200008e8

0000a768 <sched_after_mstr_free_slot_get>:
{
    a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a76c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a76e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a770:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a772:	f8df 912c 	ldr.w	r9, [pc, #300]	; a8a0 <sched_after_mstr_free_slot_get+0x138>
	ticker_id = ticker_id_prev = 0xff;
    a776:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a77a:	4680      	mov	r8, r0
    a77c:	4693      	mov	fp, r2
    a77e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a780:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a784:	601c      	str	r4, [r3, #0]
    a786:	9408      	str	r4, [sp, #32]
    a788:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a78a:	2302      	movs	r3, #2
    a78c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a78e:	ab09      	add	r3, sp, #36	; 0x24
    a790:	9302      	str	r3, [sp, #8]
    a792:	4b3f      	ldr	r3, [pc, #252]	; (a890 <sched_after_mstr_free_slot_get+0x128>)
    a794:	9301      	str	r3, [sp, #4]
    a796:	ab08      	add	r3, sp, #32
    a798:	9300      	str	r3, [sp, #0]
    a79a:	f10d 021f 	add.w	r2, sp, #31
    a79e:	465b      	mov	r3, fp
    a7a0:	4641      	mov	r1, r8
    a7a2:	2000      	movs	r0, #0
    a7a4:	f7fd fcd2 	bl	814c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a7a8:	2802      	cmp	r0, #2
    a7aa:	d010      	beq.n	a7ce <sched_after_mstr_free_slot_get+0x66>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ae:	b193      	cbz	r3, a7d6 <sched_after_mstr_free_slot_get+0x6e>
    a7b0:	4a38      	ldr	r2, [pc, #224]	; (a894 <sched_after_mstr_free_slot_get+0x12c>)
    a7b2:	4939      	ldr	r1, [pc, #228]	; (a898 <sched_after_mstr_free_slot_get+0x130>)
    a7b4:	2003      	movs	r0, #3
    a7b6:	f7f7 fc0d 	bl	1fd4 <bt_log>
    a7ba:	4040      	eors	r0, r0
    a7bc:	f380 8811 	msr	BASEPRI, r0
    a7c0:	f04f 0004 	mov.w	r0, #4
    a7c4:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a7c6:	4641      	mov	r1, r8
    a7c8:	2000      	movs	r0, #0
    a7ca:	f7fd fd3d 	bl	8248 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7d0:	2b02      	cmp	r3, #2
    a7d2:	d0f8      	beq.n	a7c6 <sched_after_mstr_free_slot_get+0x5e>
    a7d4:	e7ea      	b.n	a7ac <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a7d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a7da:	2aff      	cmp	r2, #255	; 0xff
    a7dc:	d04e      	beq.n	a87c <sched_after_mstr_free_slot_get+0x114>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a7de:	2a06      	cmp	r2, #6
    a7e0:	d9d3      	bls.n	a78a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a7e2:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a7e6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a7e8:	429a      	cmp	r2, r3
    a7ea:	dace      	bge.n	a78a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a7ec:	3a07      	subs	r2, #7
    a7ee:	b292      	uxth	r2, r2
    a7f0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a7f4:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a7f8:	f7fc fd84 	bl	7304 <mem_get>
		if (conn && !conn->role) {
    a7fc:	2800      	cmp	r0, #0
    a7fe:	d0c4      	beq.n	a78a <sched_after_mstr_free_slot_get+0x22>
    a800:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a804:	2b00      	cmp	r3, #0
    a806:	dbc0      	blt.n	a78a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a808:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a80a:	9a08      	ldr	r2, [sp, #32]
    a80c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a810:	2b00      	cmp	r3, #0
    a812:	da12      	bge.n	a83a <sched_after_mstr_free_slot_get+0xd2>
    a814:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a81a:	4571      	cmp	r1, lr
    a81c:	bf2c      	ite	cs
    a81e:	1852      	addcs	r2, r2, r1
    a820:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a822:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a824:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a826:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a828:	f101 0104 	add.w	r1, r1, #4
    a82c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a82e:	d108      	bne.n	a842 <sched_after_mstr_free_slot_get+0xda>
			ticker_id_prev = ticker_id;
    a830:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a834:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a836:	4616      	mov	r6, r2
    a838:	e7a7      	b.n	a78a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a83a:	4573      	cmp	r3, lr
    a83c:	bf38      	it	cc
    a83e:	4673      	movcc	r3, lr
    a840:	e7f0      	b.n	a824 <sched_after_mstr_free_slot_get+0xbc>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a842:	4631      	mov	r1, r6
    a844:	4610      	mov	r0, r2
    a846:	9305      	str	r3, [sp, #20]
    a848:	9204      	str	r2, [sp, #16]
    a84a:	f7fd fd15 	bl	8278 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a84e:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a852:	4288      	cmp	r0, r1
    a854:	9a04      	ldr	r2, [sp, #16]
    a856:	9b05      	ldr	r3, [sp, #20]
    a858:	d9ea      	bls.n	a830 <sched_after_mstr_free_slot_get+0xc8>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a85a:	4810      	ldr	r0, [pc, #64]	; (a89c <sched_after_mstr_free_slot_get+0x134>)
    a85c:	4434      	add	r4, r6
    a85e:	fba4 0100 	umull	r0, r1, r4, r0
    a862:	2307      	movs	r3, #7
    a864:	fb03 1104 	mla	r1, r3, r4, r1
    a868:	a307      	add	r3, pc, #28	; (adr r3, a888 <sched_after_mstr_free_slot_get+0x120>)
    a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a86e:	f7f5 fcd1 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a872:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a874:	6038      	str	r0, [r7, #0]
}
    a876:	b00b      	add	sp, #44	; 0x2c
    a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a87c:	2dff      	cmp	r5, #255	; 0xff
    a87e:	d1ec      	bne.n	a85a <sched_after_mstr_free_slot_get+0xf2>
    a880:	e7f9      	b.n	a876 <sched_after_mstr_free_slot_get+0x10e>
    a882:	bf00      	nop
    a884:	f3af 8000 	nop.w
    a888:	3b9aca00 	.word	0x3b9aca00
    a88c:	00000000 	.word	0x00000000
    a890:	00009cf1 	.word	0x00009cf1
    a894:	000167cd 	.word	0x000167cd
    a898:	0001731d 	.word	0x0001731d
    a89c:	1afd498d 	.word	0x1afd498d
    a8a0:	200008e8 	.word	0x200008e8

0000a8a4 <isr_adv_ci_adva_check>:
{
    a8a4:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a8a6:	7804      	ldrb	r4, [r0, #0]
    a8a8:	780a      	ldrb	r2, [r1, #0]
    a8aa:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a8ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a8b2:	d119      	bne.n	a8e8 <isr_adv_ci_adva_check+0x44>
    a8b4:	f004 040f 	and.w	r4, r4, #15
    a8b8:	2c01      	cmp	r4, #1
    a8ba:	f101 0608 	add.w	r6, r1, #8
    a8be:	f100 0502 	add.w	r5, r0, #2
    a8c2:	d008      	beq.n	a8d6 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a8c4:	2206      	movs	r2, #6
    a8c6:	4631      	mov	r1, r6
    a8c8:	4628      	mov	r0, r5
    a8ca:	f7f7 f9a7 	bl	1c1c <memcmp>
			 BDADDR_SIZE)) ||
    a8ce:	fab0 f080 	clz	r0, r0
    a8d2:	0940      	lsrs	r0, r0, #5
    a8d4:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a8d6:	2206      	movs	r2, #6
    a8d8:	4631      	mov	r1, r6
    a8da:	4628      	mov	r0, r5
    a8dc:	f7f7 f99e 	bl	1c1c <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a8e0:	2800      	cmp	r0, #0
    a8e2:	d1ef      	bne.n	a8c4 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a8e4:	4620      	mov	r0, r4
    a8e6:	bd70      	pop	{r4, r5, r6, pc}
    a8e8:	2000      	movs	r0, #0
}
    a8ea:	bd70      	pop	{r4, r5, r6, pc}

0000a8ec <isr_scan_tgta_check>:
{
    a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8f0:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a8f2:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a8f4:	f101 0808 	add.w	r8, r1, #8
{
    a8f8:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a8fa:	09c0      	lsrs	r0, r0, #7
    a8fc:	4641      	mov	r1, r8
{
    a8fe:	4691      	mov	r9, r2
    a900:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a902:	f006 fd75 	bl	113f0 <ctrl_rl_addr_resolve>
    a906:	4604      	mov	r4, r0
    a908:	b9d8      	cbnz	r0, a942 <isr_scan_tgta_check+0x56>
    a90a:	4f1c      	ldr	r7, [pc, #112]	; (a97c <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a90c:	f1ba 0f00 	cmp.w	sl, #0
    a910:	d10e      	bne.n	a930 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a912:	782b      	ldrb	r3, [r5, #0]
    a914:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a918:	09db      	lsrs	r3, r3, #7
    a91a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a91e:	d113      	bne.n	a948 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a920:	2206      	movs	r2, #6
    a922:	4641      	mov	r1, r8
    a924:	4816      	ldr	r0, [pc, #88]	; (a980 <isr_scan_tgta_check+0x94>)
    a926:	f7f7 f979 	bl	1c1c <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a92a:	b968      	cbnz	r0, a948 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a92c:	2001      	movs	r0, #1
    a92e:	e012      	b.n	a956 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a930:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a934:	07db      	lsls	r3, r3, #31
    a936:	d5ec      	bpl.n	a912 <isr_scan_tgta_check+0x26>
    a938:	4648      	mov	r0, r9
    a93a:	f006 fb0f 	bl	10f5c <ctrl_lrpa_get>
    a93e:	2800      	cmp	r0, #0
    a940:	d0e7      	beq.n	a912 <isr_scan_tgta_check+0x26>
}
    a942:	4620      	mov	r0, r4
    a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a948:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a94c:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a950:	f010 0002 	ands.w	r0, r0, #2
    a954:	d101      	bne.n	a95a <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a956:	4604      	mov	r4, r0
    a958:	e7f3      	b.n	a942 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a95a:	f995 3000 	ldrsb.w	r3, [r5]
    a95e:	2b00      	cmp	r3, #0
    a960:	da09      	bge.n	a976 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a962:	7b6b      	ldrb	r3, [r5, #13]
    a964:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a968:	2b40      	cmp	r3, #64	; 0x40
    a96a:	d104      	bne.n	a976 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a96c:	2e00      	cmp	r6, #0
    a96e:	d0dd      	beq.n	a92c <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a970:	2001      	movs	r0, #1
    a972:	7030      	strb	r0, [r6, #0]
    a974:	e7ef      	b.n	a956 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a976:	2000      	movs	r0, #0
    a978:	e7ed      	b.n	a956 <isr_scan_tgta_check+0x6a>
    a97a:	bf00      	nop
    a97c:	200008e8 	.word	0x200008e8
    a980:	200009cc 	.word	0x200009cc

0000a984 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a984:	4a0b      	ldr	r2, [pc, #44]	; (a9b4 <rx_fc_lock+0x30>)
    a986:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a98a:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a98e:	4299      	cmp	r1, r3
    a990:	d10e      	bne.n	a9b0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a992:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a996:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a99a:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a99e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a9a2:	3301      	adds	r3, #1
    a9a4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a9a6:	2b03      	cmp	r3, #3
    a9a8:	bf08      	it	eq
    a9aa:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a9ac:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a9b0:	4770      	bx	lr
    a9b2:	bf00      	nop
    a9b4:	200008e8 	.word	0x200008e8

0000a9b8 <ticker_success_assert>:
{
    a9b8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a9ba:	b150      	cbz	r0, a9d2 <ticker_success_assert+0x1a>
    a9bc:	4a05      	ldr	r2, [pc, #20]	; (a9d4 <ticker_success_assert+0x1c>)
    a9be:	4906      	ldr	r1, [pc, #24]	; (a9d8 <ticker_success_assert+0x20>)
    a9c0:	2003      	movs	r0, #3
    a9c2:	f7f7 fb07 	bl	1fd4 <bt_log>
    a9c6:	4040      	eors	r0, r0
    a9c8:	f380 8811 	msr	BASEPRI, r0
    a9cc:	f04f 0004 	mov.w	r0, #4
    a9d0:	df02      	svc	2
    a9d2:	bd08      	pop	{r3, pc}
    a9d4:	000166dd 	.word	0x000166dd
    a9d8:	000173f9 	.word	0x000173f9

0000a9dc <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a9dc:	2801      	cmp	r0, #1
{
    a9de:	b508      	push	{r3, lr}
    a9e0:	4b0c      	ldr	r3, [pc, #48]	; (aa14 <ticker_stop_adv_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    a9e2:	d110      	bne.n	aa06 <ticker_stop_adv_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    a9e4:	7c9a      	ldrb	r2, [r3, #18]
    a9e6:	2a05      	cmp	r2, #5
    a9e8:	d102      	bne.n	a9f0 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    a9ea:	2200      	movs	r2, #0
    a9ec:	749a      	strb	r2, [r3, #18]
    a9ee:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    a9f0:	4a09      	ldr	r2, [pc, #36]	; (aa18 <ticker_stop_adv_assert+0x3c>)
    a9f2:	490a      	ldr	r1, [pc, #40]	; (aa1c <ticker_stop_adv_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    a9f4:	2003      	movs	r0, #3
    a9f6:	f7f7 faed 	bl	1fd4 <bt_log>
    a9fa:	4040      	eors	r0, r0
    a9fc:	f380 8811 	msr	BASEPRI, r0
    aa00:	f04f 0004 	mov.w	r0, #4
    aa04:	df02      	svc	2
    aa06:	7c1b      	ldrb	r3, [r3, #16]
    aa08:	2b05      	cmp	r3, #5
    aa0a:	d102      	bne.n	aa12 <ticker_stop_adv_assert+0x36>
    aa0c:	4a02      	ldr	r2, [pc, #8]	; (aa18 <ticker_stop_adv_assert+0x3c>)
    aa0e:	4904      	ldr	r1, [pc, #16]	; (aa20 <ticker_stop_adv_assert+0x44>)
    aa10:	e7f0      	b.n	a9f4 <ticker_stop_adv_assert+0x18>
    aa12:	bd08      	pop	{r3, pc}
    aa14:	200008e8 	.word	0x200008e8
    aa18:	000166f3 	.word	0x000166f3
    aa1c:	000153a4 	.word	0x000153a4
    aa20:	00017393 	.word	0x00017393

0000aa24 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    aa24:	2801      	cmp	r0, #1
{
    aa26:	b508      	push	{r3, lr}
    aa28:	4b0c      	ldr	r3, [pc, #48]	; (aa5c <ticker_stop_scan_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    aa2a:	d110      	bne.n	aa4e <ticker_stop_scan_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    aa2c:	7c9a      	ldrb	r2, [r3, #18]
    aa2e:	2a06      	cmp	r2, #6
    aa30:	d102      	bne.n	aa38 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    aa32:	2200      	movs	r2, #0
    aa34:	749a      	strb	r2, [r3, #18]
    aa36:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    aa38:	4a09      	ldr	r2, [pc, #36]	; (aa60 <ticker_stop_scan_assert+0x3c>)
    aa3a:	490a      	ldr	r1, [pc, #40]	; (aa64 <ticker_stop_scan_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    aa3c:	2003      	movs	r0, #3
    aa3e:	f7f7 fac9 	bl	1fd4 <bt_log>
    aa42:	4040      	eors	r0, r0
    aa44:	f380 8811 	msr	BASEPRI, r0
    aa48:	f04f 0004 	mov.w	r0, #4
    aa4c:	df02      	svc	2
    aa4e:	7c1b      	ldrb	r3, [r3, #16]
    aa50:	2b06      	cmp	r3, #6
    aa52:	d102      	bne.n	aa5a <ticker_stop_scan_assert+0x36>
    aa54:	4a02      	ldr	r2, [pc, #8]	; (aa60 <ticker_stop_scan_assert+0x3c>)
    aa56:	4904      	ldr	r1, [pc, #16]	; (aa68 <ticker_stop_scan_assert+0x44>)
    aa58:	e7f0      	b.n	aa3c <ticker_stop_scan_assert+0x18>
    aa5a:	bd08      	pop	{r3, pc}
    aa5c:	200008e8 	.word	0x200008e8
    aa60:	0001670a 	.word	0x0001670a
    aa64:	000153a4 	.word	0x000153a4
    aa68:	000173c6 	.word	0x000173c6

0000aa6c <ticker_update_adv_assert>:
{
    aa6c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    aa6e:	b170      	cbz	r0, aa8e <ticker_update_adv_assert+0x22>
    aa70:	4b07      	ldr	r3, [pc, #28]	; (aa90 <ticker_update_adv_assert+0x24>)
    aa72:	7c9b      	ldrb	r3, [r3, #18]
    aa74:	2b05      	cmp	r3, #5
    aa76:	d00a      	beq.n	aa8e <ticker_update_adv_assert+0x22>
    aa78:	4a06      	ldr	r2, [pc, #24]	; (aa94 <ticker_update_adv_assert+0x28>)
    aa7a:	4907      	ldr	r1, [pc, #28]	; (aa98 <ticker_update_adv_assert+0x2c>)
    aa7c:	2003      	movs	r0, #3
    aa7e:	f7f7 faa9 	bl	1fd4 <bt_log>
    aa82:	4040      	eors	r0, r0
    aa84:	f380 8811 	msr	BASEPRI, r0
    aa88:	f04f 0004 	mov.w	r0, #4
    aa8c:	df02      	svc	2
    aa8e:	bd08      	pop	{r3, pc}
    aa90:	200008e8 	.word	0x200008e8
    aa94:	00016722 	.word	0x00016722
    aa98:	0001741a 	.word	0x0001741a

0000aa9c <ticker_update_slave_assert>:
{
    aa9c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    aa9e:	b178      	cbz	r0, aac0 <ticker_update_slave_assert+0x24>
    aaa0:	4b08      	ldr	r3, [pc, #32]	; (aac4 <ticker_update_slave_assert+0x28>)
    aaa2:	7c9b      	ldrb	r3, [r3, #18]
    aaa4:	b2c9      	uxtb	r1, r1
    aaa6:	4299      	cmp	r1, r3
    aaa8:	d00a      	beq.n	aac0 <ticker_update_slave_assert+0x24>
    aaaa:	4a07      	ldr	r2, [pc, #28]	; (aac8 <ticker_update_slave_assert+0x2c>)
    aaac:	4907      	ldr	r1, [pc, #28]	; (aacc <ticker_update_slave_assert+0x30>)
    aaae:	2003      	movs	r0, #3
    aab0:	f7f7 fa90 	bl	1fd4 <bt_log>
    aab4:	4040      	eors	r0, r0
    aab6:	f380 8811 	msr	BASEPRI, r0
    aaba:	f04f 0004 	mov.w	r0, #4
    aabe:	df02      	svc	2
    aac0:	bd08      	pop	{r3, pc}
    aac2:	bf00      	nop
    aac4:	200008e8 	.word	0x200008e8
    aac8:	0001673b 	.word	0x0001673b
    aacc:	0001745d 	.word	0x0001745d

0000aad0 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    aad0:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    aad2:	b150      	cbz	r0, aaea <ticker_op_latency_cancelled+0x1a>
    aad4:	4a08      	ldr	r2, [pc, #32]	; (aaf8 <ticker_op_latency_cancelled+0x28>)
    aad6:	4909      	ldr	r1, [pc, #36]	; (aafc <ticker_op_latency_cancelled+0x2c>)
    aad8:	2003      	movs	r0, #3
    aada:	f7f7 fa7b 	bl	1fd4 <bt_log>
    aade:	4040      	eors	r0, r0
    aae0:	f380 8811 	msr	BASEPRI, r0
    aae4:	f04f 0004 	mov.w	r0, #4
    aae8:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    aaea:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    aaee:	f360 0341 	bfi	r3, r0, #1, #1
    aaf2:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    aaf6:	bd08      	pop	{r3, pc}
    aaf8:	00016a19 	.word	0x00016a19
    aafc:	0001736b 	.word	0x0001736b

0000ab00 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ab00:	4b04      	ldr	r3, [pc, #16]	; (ab14 <ticker_job_disable+0x14>)
    ab02:	7d1b      	ldrb	r3, [r3, #20]
    ab04:	b123      	cbz	r3, ab10 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ab06:	2101      	movs	r1, #1
    ab08:	2200      	movs	r2, #0
    ab0a:	4608      	mov	r0, r1
    ab0c:	f7fc bc68 	b.w	73e0 <mayfly_enable>
    ab10:	4770      	bx	lr
    ab12:	bf00      	nop
    ab14:	200008e8 	.word	0x200008e8

0000ab18 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ab18:	2806      	cmp	r0, #6
{
    ab1a:	b510      	push	{r4, lr}
    ab1c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ab1e:	d90a      	bls.n	ab36 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ab20:	4b09      	ldr	r3, [pc, #36]	; (ab48 <hdr_conn_get+0x30>)
    ab22:	1fc2      	subs	r2, r0, #7
    ab24:	b292      	uxth	r2, r2
    ab26:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ab2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ab2e:	f7fc fbe9 	bl	7304 <mem_get>
    ab32:	6020      	str	r0, [r4, #0]
    ab34:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    ab36:	2805      	cmp	r0, #5
    ab38:	d004      	beq.n	ab44 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    ab3a:	2806      	cmp	r0, #6
	return NULL;
    ab3c:	4803      	ldr	r0, [pc, #12]	; (ab4c <hdr_conn_get+0x34>)
    ab3e:	bf18      	it	ne
    ab40:	2000      	movne	r0, #0
    ab42:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    ab44:	4802      	ldr	r0, [pc, #8]	; (ab50 <hdr_conn_get+0x38>)
}
    ab46:	bd10      	pop	{r4, pc}
    ab48:	200008e8 	.word	0x200008e8
    ab4c:	200009b8 	.word	0x200009b8
    ab50:	20000900 	.word	0x20000900

0000ab54 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    ab54:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
    ab56:	4a05      	ldr	r2, [pc, #20]	; (ab6c <event_stop.part.10+0x18>)
    ab58:	4905      	ldr	r1, [pc, #20]	; (ab70 <event_stop.part.10+0x1c>)
    ab5a:	2003      	movs	r0, #3
    ab5c:	f7f7 fa3a 	bl	1fd4 <bt_log>
    ab60:	4040      	eors	r0, r0
    ab62:	f380 8811 	msr	BASEPRI, r0
    ab66:	f04f 0004 	mov.w	r0, #4
    ab6a:	df02      	svc	2
    ab6c:	0001683a 	.word	0x0001683a
    ab70:	00016c20 	.word	0x00016c20

0000ab74 <event_stop>:
	s_mfy_radio_stop.param = context;
    ab74:	4a06      	ldr	r2, [pc, #24]	; (ab90 <event_stop+0x1c>)
{
    ab76:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ab78:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ab7a:	4613      	mov	r3, r2
    ab7c:	2200      	movs	r2, #0
    ab7e:	4611      	mov	r1, r2
    ab80:	4610      	mov	r0, r2
    ab82:	f7fc fc55 	bl	7430 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ab86:	b108      	cbz	r0, ab8c <event_stop+0x18>
    ab88:	f7ff ffe4 	bl	ab54 <event_stop.part.10>
    ab8c:	bd08      	pop	{r3, pc}
    ab8e:	bf00      	nop
    ab90:	20003d90 	.word	0x20003d90

0000ab94 <mayfly_xtal_retain.part.13>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    ab94:	b508      	push	{r3, lr}
		if (s_xtal_retained) {
    ab96:	4b0f      	ldr	r3, [pc, #60]	; (abd4 <mayfly_xtal_retain.part.13+0x40>)
    ab98:	781a      	ldrb	r2, [r3, #0]
    ab9a:	b1d2      	cbz	r2, abd2 <mayfly_xtal_retain.part.13+0x3e>
			s_xtal_retained = 0;
    ab9c:	2200      	movs	r2, #0
    ab9e:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    aba0:	b1a8      	cbz	r0, abce <mayfly_xtal_retain.part.13+0x3a>
    aba2:	2801      	cmp	r0, #1
    aba4:	d108      	bne.n	abb8 <mayfly_xtal_retain.part.13+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    aba6:	4b0c      	ldr	r3, [pc, #48]	; (abd8 <mayfly_xtal_retain.part.13+0x44>)
			retval = mayfly_enqueue(caller_id,
    aba8:	2200      	movs	r2, #0
    abaa:	4611      	mov	r1, r2
    abac:	f7fc fc40 	bl	7430 <mayfly_enqueue>
			LL_ASSERT(!retval);
    abb0:	b178      	cbz	r0, abd2 <mayfly_xtal_retain.part.13+0x3e>
    abb2:	4a0a      	ldr	r2, [pc, #40]	; (abdc <mayfly_xtal_retain.part.13+0x48>)
    abb4:	490a      	ldr	r1, [pc, #40]	; (abe0 <mayfly_xtal_retain.part.13+0x4c>)
    abb6:	e001      	b.n	abbc <mayfly_xtal_retain.part.13+0x28>
				LL_ASSERT(0);
    abb8:	4a08      	ldr	r2, [pc, #32]	; (abdc <mayfly_xtal_retain.part.13+0x48>)
    abba:	490a      	ldr	r1, [pc, #40]	; (abe4 <mayfly_xtal_retain.part.13+0x50>)
			LL_ASSERT(!retval);
    abbc:	2003      	movs	r0, #3
    abbe:	f7f7 fa09 	bl	1fd4 <bt_log>
    abc2:	4040      	eors	r0, r0
    abc4:	f380 8811 	msr	BASEPRI, r0
    abc8:	f04f 0004 	mov.w	r0, #4
    abcc:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    abce:	4b06      	ldr	r3, [pc, #24]	; (abe8 <mayfly_xtal_retain.part.13+0x54>)
    abd0:	e7ea      	b.n	aba8 <mayfly_xtal_retain.part.13+0x14>
    abd2:	bd08      	pop	{r3, pc}
    abd4:	20000ae8 	.word	0x20000ae8
    abd8:	20003e10 	.word	0x20003e10
    abdc:	00016791 	.word	0x00016791
    abe0:	00016c20 	.word	0x00016c20
    abe4:	000153a4 	.word	0x000153a4
    abe8:	20003e00 	.word	0x20003e00

0000abec <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    abec:	2200      	movs	r2, #0
{
    abee:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    abf0:	4611      	mov	r1, r2
    abf2:	4b08      	ldr	r3, [pc, #32]	; (ac14 <event_active+0x28>)
    abf4:	4610      	mov	r0, r2
    abf6:	f7fc fc1b 	bl	7430 <mayfly_enqueue>
	LL_ASSERT(!retval);
    abfa:	b150      	cbz	r0, ac12 <event_active+0x26>
    abfc:	4a06      	ldr	r2, [pc, #24]	; (ac18 <event_active+0x2c>)
    abfe:	4907      	ldr	r1, [pc, #28]	; (ac1c <event_active+0x30>)
    ac00:	2003      	movs	r0, #3
    ac02:	f7f7 f9e7 	bl	1fd4 <bt_log>
    ac06:	4040      	eors	r0, r0
    ac08:	f380 8811 	msr	BASEPRI, r0
    ac0c:	f04f 0004 	mov.w	r0, #4
    ac10:	df02      	svc	2
    ac12:	bd08      	pop	{r3, pc}
    ac14:	20003d60 	.word	0x20003d60
    ac18:	0001676a 	.word	0x0001676a
    ac1c:	00016c20 	.word	0x00016c20

0000ac20 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ac20:	2200      	movs	r2, #0
{
    ac22:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ac24:	4611      	mov	r1, r2
    ac26:	4b08      	ldr	r3, [pc, #32]	; (ac48 <event_xtal+0x28>)
    ac28:	4610      	mov	r0, r2
    ac2a:	f7fc fc01 	bl	7430 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ac2e:	b150      	cbz	r0, ac46 <event_xtal+0x26>
    ac30:	4a06      	ldr	r2, [pc, #24]	; (ac4c <event_xtal+0x2c>)
    ac32:	4907      	ldr	r1, [pc, #28]	; (ac50 <event_xtal+0x30>)
    ac34:	2003      	movs	r0, #3
    ac36:	f7f7 f9cd 	bl	1fd4 <bt_log>
    ac3a:	4040      	eors	r0, r0
    ac3c:	f380 8811 	msr	BASEPRI, r0
    ac40:	f04f 0004 	mov.w	r0, #4
    ac44:	df02      	svc	2
    ac46:	bd08      	pop	{r3, pc}
    ac48:	20003de0 	.word	0x20003de0
    ac4c:	00016786 	.word	0x00016786
    ac50:	00016c20 	.word	0x00016c20

0000ac54 <mayfly_radio_active>:
{
    ac54:	b508      	push	{r3, lr}
    ac56:	4a0e      	ldr	r2, [pc, #56]	; (ac90 <mayfly_radio_active+0x3c>)
		if (s_active++) {
    ac58:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    ac5a:	b138      	cbz	r0, ac6c <mayfly_radio_active+0x18>
		if (s_active++) {
    ac5c:	1c59      	adds	r1, r3, #1
    ac5e:	7011      	strb	r1, [r2, #0]
    ac60:	b9ab      	cbnz	r3, ac8e <mayfly_radio_active+0x3a>
		radio_active_callback(1);
    ac62:	2001      	movs	r0, #1
}
    ac64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    ac68:	f005 bf8c 	b.w	10b84 <radio_active_callback>
		LL_ASSERT(s_active);
    ac6c:	b953      	cbnz	r3, ac84 <mayfly_radio_active+0x30>
    ac6e:	4a09      	ldr	r2, [pc, #36]	; (ac94 <mayfly_radio_active+0x40>)
    ac70:	4909      	ldr	r1, [pc, #36]	; (ac98 <mayfly_radio_active+0x44>)
    ac72:	2003      	movs	r0, #3
    ac74:	f7f7 f9ae 	bl	1fd4 <bt_log>
    ac78:	4040      	eors	r0, r0
    ac7a:	f380 8811 	msr	BASEPRI, r0
    ac7e:	f04f 0004 	mov.w	r0, #4
    ac82:	df02      	svc	2
		if (--s_active) {
    ac84:	3b01      	subs	r3, #1
    ac86:	b2db      	uxtb	r3, r3
    ac88:	7013      	strb	r3, [r2, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d0ea      	beq.n	ac64 <mayfly_radio_active+0x10>
    ac8e:	bd08      	pop	{r3, pc}
    ac90:	20000a8c 	.word	0x20000a8c
    ac94:	00016756 	.word	0x00016756
    ac98:	00017012 	.word	0x00017012

0000ac9c <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ac9c:	2000      	movs	r0, #0
    ac9e:	f7ff bfd9 	b.w	ac54 <mayfly_radio_active>
	...

0000aca4 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    aca4:	b2c0      	uxtb	r0, r0
{
    aca6:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    aca8:	1f03      	subs	r3, r0, #4
    acaa:	2b01      	cmp	r3, #1
    acac:	d90a      	bls.n	acc4 <mayfly_radio_stop+0x20>
    acae:	4a0d      	ldr	r2, [pc, #52]	; (ace4 <mayfly_radio_stop+0x40>)
    acb0:	490d      	ldr	r1, [pc, #52]	; (ace8 <mayfly_radio_stop+0x44>)
    acb2:	2003      	movs	r0, #3
    acb4:	f7f7 f98e 	bl	1fd4 <bt_log>
    acb8:	4040      	eors	r0, r0
    acba:	f380 8811 	msr	BASEPRI, r0
    acbe:	f04f 0004 	mov.w	r0, #4
    acc2:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    acc4:	4a09      	ldr	r2, [pc, #36]	; (acec <mayfly_radio_stop+0x48>)
    acc6:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    acc8:	b13b      	cbz	r3, acda <mayfly_radio_stop+0x36>
	radio_used = ((_radio.state != STATE_NONE) &&
    acca:	3b04      	subs	r3, #4
    accc:	2b01      	cmp	r3, #1
    acce:	d904      	bls.n	acda <mayfly_radio_stop+0x36>
			_radio.state = state;
    acd0:	7510      	strb	r0, [r2, #20]
}
    acd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    acd6:	f007 b879 	b.w	11dcc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    acda:	f007 f8a9 	bl	11e30 <radio_is_idle>
    acde:	2800      	cmp	r0, #0
    ace0:	d0f7      	beq.n	acd2 <mayfly_radio_stop+0x2e>
}
    ace2:	bd08      	pop	{r3, pc}
    ace4:	00016828 	.word	0x00016828
    ace8:	00017030 	.word	0x00017030
    acec:	200008e8 	.word	0x200008e8

0000acf0 <pdu_node_tx_release>:
{
    acf0:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    acf2:	4a15      	ldr	r2, [pc, #84]	; (ad48 <pdu_node_tx_release+0x58>)
    acf4:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    acf8:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    acfc:	3301      	adds	r3, #1
    acfe:	b2db      	uxtb	r3, r3
		last = 0;
    ad00:	429c      	cmp	r4, r3
    ad02:	bf08      	it	eq
    ad04:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ad06:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    ad0a:	429c      	cmp	r4, r3
    ad0c:	d10a      	bne.n	ad24 <pdu_node_tx_release+0x34>
    ad0e:	4a0f      	ldr	r2, [pc, #60]	; (ad4c <pdu_node_tx_release+0x5c>)
    ad10:	490f      	ldr	r1, [pc, #60]	; (ad50 <pdu_node_tx_release+0x60>)
    ad12:	2003      	movs	r0, #3
    ad14:	f7f7 f95e 	bl	1fd4 <bt_log>
    ad18:	4040      	eors	r0, r0
    ad1a:	f380 8811 	msr	BASEPRI, r0
    ad1e:	f04f 0004 	mov.w	r0, #4
    ad22:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ad24:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    ad28:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    ad2c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ad30:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    ad34:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ad38:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ad3a:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    ad3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    ad42:	f005 bf21 	b.w	10b88 <radio_event_callback>
    ad46:	bf00      	nop
    ad48:	200008e8 	.word	0x200008e8
    ad4c:	00016970 	.word	0x00016970
    ad50:	000170f8 	.word	0x000170f8

0000ad54 <packet_tx_enqueue>:
{
    ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ad58:	4c24      	ldr	r4, [pc, #144]	; (adec <packet_tx_enqueue+0x98>)
{
    ad5a:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    ad5c:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    ad5e:	b12e      	cbz	r6, ad6c <packet_tx_enqueue+0x18>
    ad60:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    ad64:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    ad68:	429a      	cmp	r2, r3
    ad6a:	d101      	bne.n	ad70 <packet_tx_enqueue+0x1c>
    ad6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ad70:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    ad74:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ad78:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    ad7c:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ad80:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ad84:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    ad88:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    ad8a:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ad8c:	f7fc faba 	bl	7304 <mem_get>
    ad90:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    ad92:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    ad96:	8c1a      	ldrh	r2, [r3, #32]
    ad98:	4282      	cmp	r2, r0
    ad9a:	d11f      	bne.n	addc <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    ad9c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ada0:	b942      	cbnz	r2, adb4 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    ada2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    ada6:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    adaa:	b91a      	cbnz	r2, adb4 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    adac:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    adb0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    adb4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    adb8:	b102      	cbz	r2, adbc <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    adba:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    adbc:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    adc0:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    adc4:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    adc8:	3301      	adds	r3, #1
    adca:	b2db      	uxtb	r3, r3
			first = 0;
    adcc:	429a      	cmp	r2, r3
    adce:	bf08      	it	eq
    add0:	2300      	moveq	r3, #0
    add2:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    add4:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    add8:	b2f6      	uxtb	r6, r6
    adda:	e7c0      	b.n	ad5e <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    addc:	792b      	ldrb	r3, [r5, #4]
    adde:	f367 0301 	bfi	r3, r7, #0, #2
    ade2:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    ade4:	4629      	mov	r1, r5
    ade6:	f7ff ff83 	bl	acf0 <pdu_node_tx_release>
    adea:	e7e9      	b.n	adc0 <packet_tx_enqueue+0x6c>
    adec:	200008e8 	.word	0x200008e8

0000adf0 <connection_release>:
{
    adf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    adf2:	2201      	movs	r2, #1
{
    adf4:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    adf6:	4611      	mov	r1, r2
    adf8:	2000      	movs	r0, #0
    adfa:	f7fc faf1 	bl	73e0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    adfe:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    ae02:	2100      	movs	r1, #0
    ae04:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ae08:	3207      	adds	r2, #7
	ticker_status =
    ae0a:	9300      	str	r3, [sp, #0]
    ae0c:	4608      	mov	r0, r1
    ae0e:	4b3c      	ldr	r3, [pc, #240]	; (af00 <connection_release+0x110>)
    ae10:	b2d2      	uxtb	r2, r2
    ae12:	f7fd f95f 	bl	80d4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ae16:	f030 0102 	bics.w	r1, r0, #2
    ae1a:	d00a      	beq.n	ae32 <connection_release+0x42>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ae1c:	4a39      	ldr	r2, [pc, #228]	; (af04 <connection_release+0x114>)
    ae1e:	493a      	ldr	r1, [pc, #232]	; (af08 <connection_release+0x118>)
    ae20:	2003      	movs	r0, #3
    ae22:	f7f7 f8d7 	bl	1fd4 <bt_log>
    ae26:	4040      	eors	r0, r0
    ae28:	f380 8811 	msr	BASEPRI, r0
    ae2c:	f04f 0004 	mov.w	r0, #4
    ae30:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ae32:	4b36      	ldr	r3, [pc, #216]	; (af0c <connection_release+0x11c>)
    ae34:	7d1a      	ldrb	r2, [r3, #20]
    ae36:	2a05      	cmp	r2, #5
    ae38:	461d      	mov	r5, r3
    ae3a:	d11b      	bne.n	ae74 <connection_release+0x84>
					  conn->handle))) {
    ae3c:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ae3e:	7c18      	ldrb	r0, [r3, #16]
    ae40:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ae42:	4290      	cmp	r0, r2
    ae44:	d116      	bne.n	ae74 <connection_release+0x84>
		_radio.ticker_id_prepare = 0;
    ae46:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ae48:	f242 23fb 	movw	r3, #8955	; 0x22fb
    ae4c:	9300      	str	r3, [sp, #0]
    ae4e:	2201      	movs	r2, #1
    ae50:	4b2b      	ldr	r3, [pc, #172]	; (af00 <connection_release+0x110>)
    ae52:	4608      	mov	r0, r1
    ae54:	f7fd f93e 	bl	80d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ae58:	f030 0202 	bics.w	r2, r0, #2
    ae5c:	d1de      	bne.n	ae1c <connection_release+0x2c>
		ticker_status =
    ae5e:	f242 3302 	movw	r3, #8962	; 0x2302
    ae62:	9300      	str	r3, [sp, #0]
    ae64:	4611      	mov	r1, r2
    ae66:	4b26      	ldr	r3, [pc, #152]	; (af00 <connection_release+0x110>)
    ae68:	4610      	mov	r0, r2
    ae6a:	f7fd f933 	bl	80d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ae6e:	f030 0302 	bics.w	r3, r0, #2
    ae72:	d1d3      	bne.n	ae1c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ae74:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ae78:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ae7c:	4299      	cmp	r1, r3
    ae7e:	d003      	beq.n	ae88 <connection_release+0x98>
    ae80:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ae84:	4299      	cmp	r1, r3
    ae86:	d101      	bne.n	ae8c <connection_release+0x9c>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ae88:	4e21      	ldr	r6, [pc, #132]	; (af10 <connection_release+0x120>)
    ae8a:	e012      	b.n	aeb2 <connection_release+0xc2>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ae8c:	790b      	ldrb	r3, [r1, #4]
    ae8e:	f36f 0301 	bfc	r3, #0, #2
    ae92:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ae94:	680b      	ldr	r3, [r1, #0]
    ae96:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ae9a:	8c20      	ldrh	r0, [r4, #32]
    ae9c:	f7ff ff28 	bl	acf0 <pdu_node_tx_release>
    aea0:	e7e8      	b.n	ae74 <connection_release+0x84>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    aea2:	6803      	ldr	r3, [r0, #0]
    aea4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    aea8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    aeac:	4631      	mov	r1, r6
    aeae:	f7fc fa0e 	bl	72ce <mem_release>
	while ((conn->pkt_tx_head) &&
    aeb2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    aeb6:	b118      	cbz	r0, aec0 <connection_release+0xd0>
    aeb8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    aebc:	4298      	cmp	r0, r3
    aebe:	d1f0      	bne.n	aea2 <connection_release+0xb2>
	conn->pkt_tx_ctrl = NULL;
    aec0:	2300      	movs	r3, #0
    aec2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    aec6:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    aeca:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    aece:	b951      	cbnz	r1, aee6 <connection_release+0xf6>
	conn->handle = 0xffff;
    aed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aed4:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    aed6:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    aeda:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    aedc:	bf08      	it	eq
    aede:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    aee2:	b002      	add	sp, #8
    aee4:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    aee6:	790b      	ldrb	r3, [r1, #4]
    aee8:	f36f 0301 	bfc	r3, #0, #2
    aeec:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    aeee:	680b      	ldr	r3, [r1, #0]
    aef0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    aef4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    aef8:	8c20      	ldrh	r0, [r4, #32]
    aefa:	f7ff fef9 	bl	acf0 <pdu_node_tx_release>
    aefe:	e7e4      	b.n	aeca <connection_release+0xda>
    af00:	0000a9b9 	.word	0x0000a9b9
    af04:	00016984 	.word	0x00016984
    af08:	00016a61 	.word	0x00016a61
    af0c:	200008e8 	.word	0x200008e8
    af10:	20000a44 	.word	0x20000a44

0000af14 <chan_set>:
	switch (chan) {
    af14:	2826      	cmp	r0, #38	; 0x26
{
    af16:	b510      	push	{r4, lr}
    af18:	4604      	mov	r4, r0
	switch (chan) {
    af1a:	d00b      	beq.n	af34 <chan_set+0x20>
    af1c:	2827      	cmp	r0, #39	; 0x27
    af1e:	d00b      	beq.n	af38 <chan_set+0x24>
    af20:	2825      	cmp	r0, #37	; 0x25
    af22:	d10b      	bne.n	af3c <chan_set+0x28>
		radio_freq_chan_set(2);
    af24:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    af26:	f006 fecd 	bl	11cc4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    af2a:	4620      	mov	r0, r4
}
    af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    af30:	f006 bece 	b.w	11cd0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    af34:	201a      	movs	r0, #26
    af36:	e7f6      	b.n	af26 <chan_set+0x12>
		radio_freq_chan_set(80);
    af38:	2050      	movs	r0, #80	; 0x50
    af3a:	e7f4      	b.n	af26 <chan_set+0x12>
		if (chan < 11) {
    af3c:	280a      	cmp	r0, #10
    af3e:	d802      	bhi.n	af46 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
    af40:	3002      	adds	r0, #2
    af42:	0040      	lsls	r0, r0, #1
    af44:	e7ef      	b.n	af26 <chan_set+0x12>
		} else if (chan < 40) {
    af46:	2827      	cmp	r0, #39	; 0x27
    af48:	d801      	bhi.n	af4e <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    af4a:	3003      	adds	r0, #3
    af4c:	e7f9      	b.n	af42 <chan_set+0x2e>
			LL_ASSERT(0);
    af4e:	4a05      	ldr	r2, [pc, #20]	; (af64 <chan_set+0x50>)
    af50:	4905      	ldr	r1, [pc, #20]	; (af68 <chan_set+0x54>)
    af52:	2003      	movs	r0, #3
    af54:	f7f7 f83e 	bl	1fd4 <bt_log>
    af58:	4040      	eors	r0, r0
    af5a:	f380 8811 	msr	BASEPRI, r0
    af5e:	f04f 0004 	mov.w	r0, #4
    af62:	df02      	svc	2
    af64:	0001685a 	.word	0x0001685a
    af68:	000153a4 	.word	0x000153a4

0000af6c <adv_setup>:
{
    af6c:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    af6e:	4c31      	ldr	r4, [pc, #196]	; (b034 <adv_setup+0xc8>)
    af70:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    af74:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    af78:	429a      	cmp	r2, r3
    af7a:	d051      	beq.n	b020 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    af7c:	3301      	adds	r3, #1
    af7e:	b2db      	uxtb	r3, r3
			first = 0;
    af80:	2b02      	cmp	r3, #2
    af82:	bf08      	it	eq
    af84:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    af86:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    af8a:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    af8c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    af90:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    af94:	4299      	cmp	r1, r3
    af96:	d007      	beq.n	afa8 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    af98:	3301      	adds	r3, #1
    af9a:	b2db      	uxtb	r3, r3
			first = 0;
    af9c:	2b02      	cmp	r3, #2
    af9e:	bf08      	it	eq
    afa0:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    afa2:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    afa6:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    afa8:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    afac:	2327      	movs	r3, #39	; 0x27
    afae:	212b      	movs	r1, #43	; 0x2b
    afb0:	fb13 1505 	smlabb	r5, r3, r5, r1
    afb4:	1966      	adds	r6, r4, r5
	if (upd) {
    afb6:	b142      	cbz	r2, afca <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    afb8:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    afbc:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    afc0:	2206      	movs	r2, #6
    afc2:	1cb1      	adds	r1, r6, #2
    afc4:	307d      	adds	r0, #125	; 0x7d
    afc6:	f7f6 fe3e 	bl	1c46 <memcpy>
	radio_pkt_tx_set(pdu);
    afca:	4630      	mov	r0, r6
    afcc:	f006 fede 	bl	11d8c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    afd0:	5d63      	ldrb	r3, [r4, r5]
    afd2:	f003 030f 	and.w	r3, r3, #15
    afd6:	2b02      	cmp	r3, #2
    afd8:	d024      	beq.n	b024 <adv_setup+0xb8>
    afda:	2b07      	cmp	r3, #7
    afdc:	d022      	beq.n	b024 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    afde:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    afe0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    afe2:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    afe4:	f006 ffe8 	bl	11fb8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    afe8:	2000      	movs	r0, #0
    afea:	f006 ff49 	bl	11e80 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    afee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    aff2:	f3c3 0202 	ubfx	r2, r3, #0, #3
    aff6:	b2d3      	uxtb	r3, r2
    aff8:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    affa:	2000      	movs	r0, #0
    affc:	07ce      	lsls	r6, r1, #31
    affe:	f100 0501 	add.w	r5, r0, #1
    b002:	d514      	bpl.n	b02e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b004:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b006:	4013      	ands	r3, r2
    b008:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b00c:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b00e:	f363 0202 	bfi	r2, r3, #0, #3
    b012:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b016:	3025      	adds	r0, #37	; 0x25
}
    b018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b01c:	f7ff bf7a 	b.w	af14 <chan_set>
	u8_t upd = 0;
    b020:	2200      	movs	r2, #0
    b022:	e7b3      	b.n	af8c <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b024:	2303      	movs	r3, #3
    b026:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b028:	f006 ff40 	bl	11eac <radio_switch_complete_and_disable>
    b02c:	e7df      	b.n	afee <adv_setup+0x82>
		bitmap >>= 1;
    b02e:	0849      	lsrs	r1, r1, #1
    b030:	4628      	mov	r0, r5
    b032:	e7e3      	b.n	affc <adv_setup+0x90>
    b034:	200008e8 	.word	0x200008e8

0000b038 <sched_after_mstr_free_offset_get>:
{
    b038:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b03a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b03c:	aa02      	add	r2, sp, #8
{
    b03e:	461c      	mov	r4, r3
    b040:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b042:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b046:	3127      	adds	r1, #39	; 0x27
    b048:	2001      	movs	r0, #1
    b04a:	f7ff fb8d 	bl	a768 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b04e:	6823      	ldr	r3, [r4, #0]
    b050:	b343      	cbz	r3, b0a4 <sched_after_mstr_free_offset_get+0x6c>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b052:	9801      	ldr	r0, [sp, #4]
    b054:	1b83      	subs	r3, r0, r6
    b056:	021b      	lsls	r3, r3, #8
    b058:	d50a      	bpl.n	b070 <sched_after_mstr_free_offset_get+0x38>
    b05a:	4a17      	ldr	r2, [pc, #92]	; (b0b8 <sched_after_mstr_free_offset_get+0x80>)
    b05c:	4917      	ldr	r1, [pc, #92]	; (b0bc <sched_after_mstr_free_offset_get+0x84>)
    b05e:	2003      	movs	r0, #3
    b060:	f7f6 ffb8 	bl	1fd4 <bt_log>
    b064:	4040      	eors	r0, r0
    b066:	f380 8811 	msr	BASEPRI, r0
    b06a:	f04f 0004 	mov.w	r0, #4
    b06e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b070:	4631      	mov	r1, r6
    b072:	f7fd f901 	bl	8278 <ticker_ticks_diff_get>
    b076:	4602      	mov	r2, r0
    b078:	4811      	ldr	r0, [pc, #68]	; (b0c0 <sched_after_mstr_free_offset_get+0x88>)
    b07a:	2307      	movs	r3, #7
    b07c:	fba2 0100 	umull	r0, r1, r2, r0
    b080:	fb03 1102 	mla	r1, r3, r2, r1
    b084:	a30a      	add	r3, pc, #40	; (adr r3, b0b0 <sched_after_mstr_free_offset_get+0x78>)
    b086:	e9d3 2300 	ldrd	r2, r3, [r3]
    b08a:	f7f5 f8c3 	bl	214 <__aeabi_uldivmod>
    b08e:	6823      	ldr	r3, [r4, #0]
    b090:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b092:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b094:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b096:	db05      	blt.n	b0a4 <sched_after_mstr_free_offset_get+0x6c>
		u32_t conn_interval_us = conn_interval * 1250;
    b098:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b09c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b09e:	6823      	ldr	r3, [r4, #0]
    b0a0:	4298      	cmp	r0, r3
    b0a2:	d301      	bcc.n	b0a8 <sched_after_mstr_free_offset_get+0x70>
}
    b0a4:	b002      	add	sp, #8
    b0a6:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b0a8:	1a1b      	subs	r3, r3, r0
    b0aa:	6023      	str	r3, [r4, #0]
    b0ac:	e7f7      	b.n	b09e <sched_after_mstr_free_offset_get+0x66>
    b0ae:	bf00      	nop
    b0b0:	3b9aca00 	.word	0x3b9aca00
    b0b4:	00000000 	.word	0x00000000
    b0b8:	000167ec 	.word	0x000167ec
    b0bc:	000172d0 	.word	0x000172d0
    b0c0:	1afd498d 	.word	0x1afd498d

0000b0c4 <mayfly_sched_win_offset_use>:
{
    b0c4:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b0c6:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b0ca:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b0cc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b0d0:	68c1      	ldr	r1, [r0, #12]
    b0d2:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b0d4:	f7ff ffb0 	bl	b038 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b0d8:	a902      	add	r1, sp, #8
    b0da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b0de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b0e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b0e6:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b0ea:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b0ec:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b0f0:	f7f6 fda9 	bl	1c46 <memcpy>
}
    b0f4:	b002      	add	sp, #8
    b0f6:	bd10      	pop	{r4, pc}

0000b0f8 <mayfly_sched_after_mstr_free_offset_get>:
{
    b0f8:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b0fa:	4c05      	ldr	r4, [pc, #20]	; (b110 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b0fc:	4602      	mov	r2, r0
    b0fe:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b102:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b106:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b10a:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b10c:	f7ff bf94 	b.w	b038 <sched_after_mstr_free_offset_get>
    b110:	200008e8 	.word	0x200008e8

0000b114 <packet_rx_enqueue>:
{
    b114:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    b116:	4a19      	ldr	r2, [pc, #100]	; (b17c <packet_rx_enqueue+0x68>)
    b118:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    b11c:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    b120:	4299      	cmp	r1, r3
    b122:	d10a      	bne.n	b13a <packet_rx_enqueue+0x26>
    b124:	4a16      	ldr	r2, [pc, #88]	; (b180 <packet_rx_enqueue+0x6c>)
    b126:	4917      	ldr	r1, [pc, #92]	; (b184 <packet_rx_enqueue+0x70>)
	LL_ASSERT(link);
    b128:	2003      	movs	r0, #3
    b12a:	f7f6 ff53 	bl	1fd4 <bt_log>
    b12e:	4040      	eors	r0, r0
    b130:	f380 8811 	msr	BASEPRI, r0
    b134:	f04f 0004 	mov.w	r0, #4
    b138:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b13a:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    b13e:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    b142:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b146:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    b14a:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b14c:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    b14e:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    b152:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    b156:	3301      	adds	r3, #1
    b158:	b2db      	uxtb	r3, r3
		last = 0;
    b15a:	429c      	cmp	r4, r3
    b15c:	bf08      	it	eq
    b15e:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    b160:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b164:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b168:	f7fc f8f1 	bl	734e <memq_enqueue>
	LL_ASSERT(link);
    b16c:	b910      	cbnz	r0, b174 <packet_rx_enqueue+0x60>
    b16e:	4a04      	ldr	r2, [pc, #16]	; (b180 <packet_rx_enqueue+0x6c>)
    b170:	4905      	ldr	r1, [pc, #20]	; (b188 <packet_rx_enqueue+0x74>)
    b172:	e7d9      	b.n	b128 <packet_rx_enqueue+0x14>
}
    b174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b178:	f005 bd06 	b.w	10b88 <radio_event_callback>
    b17c:	200008e8 	.word	0x200008e8
    b180:	0001695e 	.word	0x0001695e
    b184:	000170b1 	.word	0x000170b1
    b188:	00016a47 	.word	0x00016a47

0000b18c <isr_rx_scan_report>:
{
    b18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b190:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    b192:	2003      	movs	r0, #3
{
    b194:	460f      	mov	r7, r1
    b196:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    b198:	f7fe fdea 	bl	9d70 <packet_rx_reserve_get>
	if (node_rx == 0) {
    b19c:	4604      	mov	r4, r0
    b19e:	2800      	cmp	r0, #0
    b1a0:	d039      	beq.n	b216 <isr_rx_scan_report+0x8a>
	node_rx->hdr.handle = 0xffff;
    b1a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b1a6:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    b1a8:	4b1c      	ldr	r3, [pc, #112]	; (b21c <isr_rx_scan_report+0x90>)
    b1aa:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    b1ae:	075a      	lsls	r2, r3, #29
    b1b0:	d02d      	beq.n	b20e <isr_rx_scan_report+0x82>
		switch (_radio.scanner.phy) {
    b1b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1b6:	b2da      	uxtb	r2, r3
    b1b8:	2a01      	cmp	r2, #1
    b1ba:	d00c      	beq.n	b1d6 <isr_rx_scan_report+0x4a>
    b1bc:	2a04      	cmp	r2, #4
    b1be:	d00b      	beq.n	b1d8 <isr_rx_scan_report+0x4c>
			LL_ASSERT(0);
    b1c0:	4a17      	ldr	r2, [pc, #92]	; (b220 <isr_rx_scan_report+0x94>)
    b1c2:	4918      	ldr	r1, [pc, #96]	; (b224 <isr_rx_scan_report+0x98>)
    b1c4:	2003      	movs	r0, #3
    b1c6:	f7f6 ff05 	bl	1fd4 <bt_log>
    b1ca:	4040      	eors	r0, r0
    b1cc:	f380 8811 	msr	BASEPRI, r0
    b1d0:	f04f 0004 	mov.w	r0, #4
    b1d4:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    b1d6:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    b1d8:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b1dc:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    b1de:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1e2:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    b1e6:	f1b9 0f00 	cmp.w	r9, #0
    b1ea:	d012      	beq.n	b212 <isr_rx_scan_report+0x86>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    b1ec:	f006 fe76 	bl	11edc <radio_rssi_get>
			     pdu_adv_rx->len] =
    b1f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b1f4:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1f8:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    b1fa:	442b      	add	r3, r5
    b1fc:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    b1fe:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    b200:	441d      	add	r5, r3
    b202:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    b204:	f7ff ff86 	bl	b114 <packet_rx_enqueue>
	return 0;
    b208:	2000      	movs	r0, #0
    b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    b20e:	2302      	movs	r3, #2
    b210:	e7e2      	b.n	b1d8 <isr_rx_scan_report+0x4c>
			     pdu_adv_rx->len] =
    b212:	207f      	movs	r0, #127	; 0x7f
    b214:	e7ee      	b.n	b1f4 <isr_rx_scan_report+0x68>
		return 1;
    b216:	2001      	movs	r0, #1
}
    b218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b21c:	200008e8 	.word	0x200008e8
    b220:	000165f4 	.word	0x000165f4
    b224:	000153a4 	.word	0x000153a4

0000b228 <terminate_ind_rx_enqueue>:
{
    b228:	b510      	push	{r4, lr}
    b22a:	4603      	mov	r3, r0
    b22c:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b22e:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b232:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b236:	b950      	cbnz	r0, b24e <terminate_ind_rx_enqueue+0x26>
    b238:	4a11      	ldr	r2, [pc, #68]	; (b280 <terminate_ind_rx_enqueue+0x58>)
    b23a:	4912      	ldr	r1, [pc, #72]	; (b284 <terminate_ind_rx_enqueue+0x5c>)
	LL_ASSERT(link);
    b23c:	2003      	movs	r0, #3
    b23e:	f7f6 fec9 	bl	1fd4 <bt_log>
    b242:	4040      	eors	r0, r0
    b244:	f380 8811 	msr	BASEPRI, r0
    b248:	f04f 0004 	mov.w	r0, #4
    b24c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b24e:	8c1c      	ldrh	r4, [r3, #32]
    b250:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b254:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b258:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b25a:	4a0b      	ldr	r2, [pc, #44]	; (b288 <terminate_ind_rx_enqueue+0x60>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b25c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b260:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b264:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b268:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b26c:	f7fc f86f 	bl	734e <memq_enqueue>
	LL_ASSERT(link);
    b270:	b910      	cbnz	r0, b278 <terminate_ind_rx_enqueue+0x50>
    b272:	4a03      	ldr	r2, [pc, #12]	; (b280 <terminate_ind_rx_enqueue+0x58>)
    b274:	4905      	ldr	r1, [pc, #20]	; (b28c <terminate_ind_rx_enqueue+0x64>)
    b276:	e7e1      	b.n	b23c <terminate_ind_rx_enqueue+0x14>
}
    b278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b27c:	f005 bc84 	b.w	10b88 <radio_event_callback>
    b280:	00016997 	.word	0x00016997
    b284:	0001733e 	.word	0x0001733e
    b288:	200008e8 	.word	0x200008e8
    b28c:	00016a47 	.word	0x00016a47

0000b290 <prepare_normal_set>:
{
    b290:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b292:	6804      	ldr	r4, [r0, #0]
    b294:	2c00      	cmp	r4, #0
{
    b296:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b298:	da22      	bge.n	b2e0 <prepare_normal_set+0x50>
		u32_t ticks_prepare_to_start =
    b29a:	6843      	ldr	r3, [r0, #4]
    b29c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b29e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b2a0:	429d      	cmp	r5, r3
    b2a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b2a6:	bf34      	ite	cc
    b2a8:	1ae4      	subcc	r4, r4, r3
    b2aa:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b2ac:	4b0d      	ldr	r3, [pc, #52]	; (b2e4 <prepare_normal_set+0x54>)
    b2ae:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b2b0:	b2a4      	uxth	r4, r4
		ticker_status =
    b2b2:	2300      	movs	r3, #0
    b2b4:	9304      	str	r3, [sp, #16]
    b2b6:	9303      	str	r3, [sp, #12]
    b2b8:	9302      	str	r3, [sp, #8]
    b2ba:	4618      	mov	r0, r3
    b2bc:	9401      	str	r4, [sp, #4]
    b2be:	9400      	str	r4, [sp, #0]
    b2c0:	f7fc feba 	bl	8038 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b2c4:	f030 0302 	bics.w	r3, r0, #2
    b2c8:	d00a      	beq.n	b2e0 <prepare_normal_set+0x50>
    b2ca:	4a07      	ldr	r2, [pc, #28]	; (b2e8 <prepare_normal_set+0x58>)
    b2cc:	4907      	ldr	r1, [pc, #28]	; (b2ec <prepare_normal_set+0x5c>)
    b2ce:	2003      	movs	r0, #3
    b2d0:	f7f6 fe80 	bl	1fd4 <bt_log>
    b2d4:	4040      	eors	r0, r0
    b2d6:	f380 8811 	msr	BASEPRI, r0
    b2da:	f04f 0004 	mov.w	r0, #4
    b2de:	df02      	svc	2
}
    b2e0:	b009      	add	sp, #36	; 0x24
    b2e2:	bd30      	pop	{r4, r5, pc}
    b2e4:	00009d01 	.word	0x00009d01
    b2e8:	000167a4 	.word	0x000167a4
    b2ec:	00016a61 	.word	0x00016a61

0000b2f0 <preempt_calc>:
{
    b2f0:	b570      	push	{r4, r5, r6, lr}
    b2f2:	4614      	mov	r4, r2
    b2f4:	460e      	mov	r6, r1
    b2f6:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b2f8:	f7fc ffbc 	bl	8274 <ticker_ticks_now_get>
	u32_t diff =
    b2fc:	4621      	mov	r1, r4
    b2fe:	f7fc ffbb 	bl	8278 <ticker_ticks_diff_get>
	diff += 3;
    b302:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b304:	2c09      	cmp	r4, #9
    b306:	f04f 0000 	mov.w	r0, #0
    b30a:	d90d      	bls.n	b328 <preempt_calc+0x38>
    b30c:	f7ff fc42 	bl	ab94 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b310:	4632      	mov	r2, r6
    b312:	2100      	movs	r1, #0
    b314:	4628      	mov	r0, r5
    b316:	f7ff ffbb 	bl	b290 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b31a:	68ab      	ldr	r3, [r5, #8]
    b31c:	441c      	add	r4, r3
		if (diff <
    b31e:	2c26      	cmp	r4, #38	; 0x26
    b320:	d800      	bhi.n	b324 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b322:	60ac      	str	r4, [r5, #8]
		return 1;
    b324:	2001      	movs	r0, #1
}
    b326:	bd70      	pop	{r4, r5, r6, pc}
    b328:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b32c <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b32e:	ad02      	add	r5, sp, #8
    b330:	4b10      	ldr	r3, [pc, #64]	; (b374 <adv_scan_configure.constprop.32+0x48>)
    b332:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b336:	4604      	mov	r4, r0
	radio_reset();
    b338:	f006 fc94 	bl	11c64 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b33c:	2000      	movs	r0, #0
    b33e:	f006 fcbb 	bl	11cb8 <radio_tx_power_set>
	radio_isr_set(isr);
    b342:	480d      	ldr	r0, [pc, #52]	; (b378 <adv_scan_configure.constprop.32+0x4c>)
    b344:	f006 fc58 	bl	11bf8 <radio_isr_set>
	radio_phy_set(phy, flags);
    b348:	2101      	movs	r1, #1
    b34a:	4620      	mov	r0, r4
    b34c:	f006 fca4 	bl	11c98 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b350:	4628      	mov	r0, r5
    b352:	f006 fccf 	bl	11cf4 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b356:	0062      	lsls	r2, r4, #1
    b358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b35c:	2125      	movs	r1, #37	; 0x25
    b35e:	2008      	movs	r0, #8
    b360:	f006 fce0 	bl	11d24 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b364:	4905      	ldr	r1, [pc, #20]	; (b37c <adv_scan_configure.constprop.32+0x50>)
    b366:	f240 605b 	movw	r0, #1627	; 0x65b
    b36a:	f006 fd6b 	bl	11e44 <radio_crc_configure>
}
    b36e:	b003      	add	sp, #12
    b370:	bd30      	pop	{r4, r5, pc}
    b372:	bf00      	nop
    b374:	8e89bed6 	.word	0x8e89bed6
    b378:	0000e319 	.word	0x0000e319
    b37c:	00555555 	.word	0x00555555

0000b380 <event_scan>:
{
    b380:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b382:	4b5b      	ldr	r3, [pc, #364]	; (b4f0 <event_scan+0x170>)
    b384:	7cda      	ldrb	r2, [r3, #19]
{
    b386:	b08d      	sub	sp, #52	; 0x34
    b388:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b38a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b38e:	461c      	mov	r4, r3
    b390:	b152      	cbz	r2, b3a8 <event_scan+0x28>
    b392:	4a58      	ldr	r2, [pc, #352]	; (b4f4 <event_scan+0x174>)
    b394:	4958      	ldr	r1, [pc, #352]	; (b4f8 <event_scan+0x178>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b396:	2003      	movs	r0, #3
    b398:	f7f6 fe1c 	bl	1fd4 <bt_log>
    b39c:	4040      	eors	r0, r0
    b39e:	f380 8811 	msr	BASEPRI, r0
    b3a2:	f04f 0004 	mov.w	r0, #4
    b3a6:	df02      	svc	2
    b3a8:	7c1b      	ldrb	r3, [r3, #16]
    b3aa:	b2db      	uxtb	r3, r3
    b3ac:	2b06      	cmp	r3, #6
    b3ae:	d002      	beq.n	b3b6 <event_scan+0x36>
    b3b0:	4a50      	ldr	r2, [pc, #320]	; (b4f4 <event_scan+0x174>)
    b3b2:	4952      	ldr	r1, [pc, #328]	; (b4fc <event_scan+0x17c>)
    b3b4:	e7ef      	b.n	b396 <event_scan+0x16>
	_radio.role = ROLE_SCAN;
    b3b6:	2202      	movs	r2, #2
    b3b8:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b3ba:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b3bc:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3be:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b3c2:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b3c4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b3c8:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b3ca:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3ce:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b3d2:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b3d4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b3d8:	f7ff ffa8 	bl	b32c <adv_scan_configure.constprop.32>
	chan_set(37 + _radio.scanner.chan++);
    b3dc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b3e0:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b3e4:	1c42      	adds	r2, r0, #1
    b3e6:	f362 0383 	bfi	r3, r2, #2, #2
    b3ea:	3025      	adds	r0, #37	; 0x25
    b3ec:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b3f0:	f7ff fd90 	bl	af14 <chan_set>
	if (_radio.scanner.chan == 3) {
    b3f4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b3f8:	f003 020c 	and.w	r2, r3, #12
    b3fc:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b3fe:	bf08      	it	eq
    b400:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b404:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b408:	bf08      	it	eq
    b40a:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b40e:	f006 fdd3 	bl	11fb8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b412:	2300      	movs	r3, #0
    b414:	4619      	mov	r1, r3
    b416:	461a      	mov	r2, r3
    b418:	4618      	mov	r0, r3
    b41a:	f006 fd3d 	bl	11e98 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b41e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b422:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b426:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b42a:	3008      	adds	r0, #8
    b42c:	f006 fca8 	bl	11d80 <radio_pkt_rx_set>
	radio_rssi_measure();
    b430:	f006 fd4a 	bl	11ec8 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b434:	f005 fffc 	bl	11430 <ctrl_rl_enabled>
    b438:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b43c:	b340      	cbz	r0, b490 <event_scan+0x110>
		struct ll_filter *filter =
    b43e:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b442:	f005 fe31 	bl	110a8 <ctrl_filter_get>
    b446:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b448:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b44c:	f005 fd9a 	bl	10f84 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b450:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b452:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b454:	1cb2      	adds	r2, r6, #2
    b456:	7830      	ldrb	r0, [r6, #0]
    b458:	f006 fd58 	bl	11f0c <radio_filter_configure>
		radio_ar_configure(count, irks);
    b45c:	4639      	mov	r1, r7
    b45e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b462:	f006 ff2d 	bl	122c0 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b466:	68e2      	ldr	r2, [r4, #12]
    b468:	f105 0109 	add.w	r1, r5, #9
    b46c:	2000      	movs	r0, #0
    b46e:	f006 fdaf 	bl	11fd0 <radio_tmr_start>
	radio_tmr_end_capture();
    b472:	f006 fe7d 	bl	12170 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b476:	2106      	movs	r1, #6
    b478:	462a      	mov	r2, r5
    b47a:	4821      	ldr	r0, [pc, #132]	; (b500 <event_scan+0x180>)
    b47c:	f7ff ff38 	bl	b2f0 <preempt_calc>
    b480:	4601      	mov	r1, r0
    b482:	b188      	cbz	r0, b4a8 <event_scan+0x128>
		_radio.state = STATE_STOP;
    b484:	2304      	movs	r3, #4
    b486:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b488:	f006 fca0 	bl	11dcc <radio_disable>
}
    b48c:	b00d      	add	sp, #52	; 0x34
    b48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b490:	f013 0f30 	tst.w	r3, #48	; 0x30
    b494:	d0e7      	beq.n	b466 <event_scan+0xe6>
		struct ll_filter *wl = ctrl_filter_get(true);
    b496:	2001      	movs	r0, #1
    b498:	f005 fe06 	bl	110a8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b49c:	1c82      	adds	r2, r0, #2
    b49e:	7841      	ldrb	r1, [r0, #1]
    b4a0:	7800      	ldrb	r0, [r0, #0]
    b4a2:	f006 fd33 	bl	11f0c <radio_filter_configure>
    b4a6:	e7de      	b.n	b466 <event_scan+0xe6>
		ret = ticker_start(
    b4a8:	f641 1336 	movw	r3, #6454	; 0x1936
    b4ac:	9308      	str	r3, [sp, #32]
    b4ae:	4b15      	ldr	r3, [pc, #84]	; (b504 <event_scan+0x184>)
    b4b0:	9307      	str	r3, [sp, #28]
    b4b2:	2204      	movs	r2, #4
    b4b4:	4b14      	ldr	r3, [pc, #80]	; (b508 <event_scan+0x188>)
    b4b6:	9206      	str	r2, [sp, #24]
    b4b8:	9305      	str	r3, [sp, #20]
    b4ba:	9004      	str	r0, [sp, #16]
    b4bc:	9003      	str	r0, [sp, #12]
    b4be:	9002      	str	r0, [sp, #8]
    b4c0:	9001      	str	r0, [sp, #4]
    b4c2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b4c6:	3309      	adds	r3, #9
    b4c8:	9300      	str	r3, [sp, #0]
    b4ca:	462b      	mov	r3, r5
    b4cc:	f7fc fd64 	bl	7f98 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b4d0:	f030 0302 	bics.w	r3, r0, #2
    b4d4:	d002      	beq.n	b4dc <event_scan+0x15c>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b4d6:	4a07      	ldr	r2, [pc, #28]	; (b4f4 <event_scan+0x174>)
    b4d8:	490c      	ldr	r1, [pc, #48]	; (b50c <event_scan+0x18c>)
    b4da:	e75c      	b.n	b396 <event_scan+0x16>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4dc:	4619      	mov	r1, r3
    b4de:	4618      	mov	r0, r3
    b4e0:	4a0b      	ldr	r2, [pc, #44]	; (b510 <event_scan+0x190>)
    b4e2:	f7fc fe75 	bl	81d0 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b4e6:	f030 0302 	bics.w	r3, r0, #2
    b4ea:	d1f4      	bne.n	b4d6 <event_scan+0x156>
    b4ec:	e7ce      	b.n	b48c <event_scan+0x10c>
    b4ee:	bf00      	nop
    b4f0:	200008e8 	.word	0x200008e8
    b4f4:	00016886 	.word	0x00016886
    b4f8:	00016b4d 	.word	0x00016b4d
    b4fc:	00016b7b 	.word	0x00016b7b
    b500:	200009b8 	.word	0x200009b8
    b504:	0000a9b9 	.word	0x0000a9b9
    b508:	0000ab75 	.word	0x0000ab75
    b50c:	00016bae 	.word	0x00016bae
    b510:	0000ab01 	.word	0x0000ab01

0000b514 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b514:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b516:	4b05      	ldr	r3, [pc, #20]	; (b52c <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b518:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b51a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b51c:	4611      	mov	r1, r2
    b51e:	4610      	mov	r0, r2
    b520:	f7fb ff86 	bl	7430 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b524:	b108      	cbz	r0, b52a <event_stop.constprop.33+0x16>
    b526:	f7ff fb15 	bl	ab54 <event_stop.part.10>
    b52a:	bd08      	pop	{r3, pc}
    b52c:	20003d90 	.word	0x20003d90

0000b530 <event_common_prepare>:
{
    b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b534:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b536:	681d      	ldr	r5, [r3, #0]
{
    b538:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b53a:	2c00      	cmp	r4, #0
{
    b53c:	4681      	mov	r9, r0
    b53e:	910b      	str	r1, [sp, #44]	; 0x2c
    b540:	4690      	mov	r8, r2
    b542:	469b      	mov	fp, r3
    b544:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b548:	da03      	bge.n	b552 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b54a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b54c:	42ac      	cmp	r4, r5
    b54e:	bf38      	it	cc
    b550:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b552:	42ac      	cmp	r4, r5
    b554:	4f51      	ldr	r7, [pc, #324]	; (b69c <event_common_prepare+0x16c>)
    b556:	d920      	bls.n	b59a <event_common_prepare+0x6a>
		ticker_status =
    b558:	f241 5374 	movw	r3, #5492	; 0x1574
    b55c:	9308      	str	r3, [sp, #32]
    b55e:	4b50      	ldr	r3, [pc, #320]	; (b6a0 <event_common_prepare+0x170>)
    b560:	9305      	str	r3, [sp, #20]
    b562:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b564:	1b63      	subs	r3, r4, r5
		ticker_status =
    b566:	9300      	str	r3, [sp, #0]
    b568:	9707      	str	r7, [sp, #28]
    b56a:	464b      	mov	r3, r9
    b56c:	9106      	str	r1, [sp, #24]
    b56e:	9104      	str	r1, [sp, #16]
    b570:	9103      	str	r1, [sp, #12]
    b572:	9102      	str	r1, [sp, #8]
    b574:	9101      	str	r1, [sp, #4]
    b576:	2201      	movs	r2, #1
    b578:	4608      	mov	r0, r1
    b57a:	f7fc fd0d 	bl	7f98 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b57e:	f030 0302 	bics.w	r3, r0, #2
    b582:	d030      	beq.n	b5e6 <event_common_prepare+0xb6>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b584:	4a47      	ldr	r2, [pc, #284]	; (b6a4 <event_common_prepare+0x174>)
    b586:	4948      	ldr	r1, [pc, #288]	; (b6a8 <event_common_prepare+0x178>)
		LL_ASSERT(!retval);
    b588:	2003      	movs	r0, #3
    b58a:	f7f6 fd23 	bl	1fd4 <bt_log>
    b58e:	4040      	eors	r0, r0
    b590:	f380 8811 	msr	BASEPRI, r0
    b594:	f04f 0004 	mov.w	r0, #4
    b598:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b59a:	d21d      	bcs.n	b5d8 <event_common_prepare+0xa8>
		event_active(0, 0, 0, NULL);
    b59c:	2300      	movs	r3, #0
    b59e:	461a      	mov	r2, r3
    b5a0:	4619      	mov	r1, r3
    b5a2:	4618      	mov	r0, r3
    b5a4:	f7ff fb22 	bl	abec <event_active>
		ticker_status =
    b5a8:	f241 5389 	movw	r3, #5513	; 0x1589
    b5ac:	2100      	movs	r1, #0
    b5ae:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b5b0:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b5b2:	4b3e      	ldr	r3, [pc, #248]	; (b6ac <event_common_prepare+0x17c>)
    b5b4:	9305      	str	r3, [sp, #20]
    b5b6:	9707      	str	r7, [sp, #28]
    b5b8:	464b      	mov	r3, r9
    b5ba:	9106      	str	r1, [sp, #24]
    b5bc:	9104      	str	r1, [sp, #16]
    b5be:	9103      	str	r1, [sp, #12]
    b5c0:	9102      	str	r1, [sp, #8]
    b5c2:	9101      	str	r1, [sp, #4]
    b5c4:	9400      	str	r4, [sp, #0]
    b5c6:	2201      	movs	r2, #1
    b5c8:	4608      	mov	r0, r1
    b5ca:	f7fc fce5 	bl	7f98 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5ce:	f030 0302 	bics.w	r3, r0, #2
    b5d2:	d1d7      	bne.n	b584 <event_common_prepare+0x54>
    b5d4:	462c      	mov	r4, r5
    b5d6:	e00b      	b.n	b5f0 <event_common_prepare+0xc0>
		event_active(0, 0, 0, NULL);
    b5d8:	2300      	movs	r3, #0
    b5da:	461a      	mov	r2, r3
    b5dc:	4619      	mov	r1, r3
    b5de:	4618      	mov	r0, r3
    b5e0:	f7ff fb04 	bl	abec <event_active>
		event_xtal(0, 0, 0, NULL);
    b5e4:	2300      	movs	r3, #0
    b5e6:	461a      	mov	r2, r3
    b5e8:	4619      	mov	r1, r3
    b5ea:	4618      	mov	r0, r3
    b5ec:	f7ff fb18 	bl	ac20 <event_xtal>
	_radio.remainder_anchor = remainder;
    b5f0:	4e2f      	ldr	r6, [pc, #188]	; (b6b0 <event_common_prepare+0x180>)
    b5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b5f4:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b5f6:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b5fa:	9308      	str	r3, [sp, #32]
    b5fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b5fe:	9306      	str	r3, [sp, #24]
    b600:	2200      	movs	r2, #0
    b602:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b604:	9305      	str	r3, [sp, #20]
    b606:	9707      	str	r7, [sp, #28]
    b608:	464b      	mov	r3, r9
    b60a:	9204      	str	r2, [sp, #16]
    b60c:	9203      	str	r2, [sp, #12]
    b60e:	9202      	str	r2, [sp, #8]
    b610:	9201      	str	r2, [sp, #4]
    b612:	9400      	str	r4, [sp, #0]
    b614:	4611      	mov	r1, r2
    b616:	4610      	mov	r0, r2
    b618:	f7fc fcbe 	bl	7f98 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b61c:	f030 0302 	bics.w	r3, r0, #2
    b620:	d1b0      	bne.n	b584 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b622:	2005      	movs	r0, #5
    b624:	f7ff ff76 	bl	b514 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b628:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b62c:	429d      	cmp	r5, r3
    b62e:	d023      	beq.n	b678 <event_common_prepare+0x148>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b630:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b634:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b638:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b63a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b63c:	bfbc      	itt	lt
    b63e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b642:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b646:	f8d8 2000 	ldr.w	r2, [r8]
    b64a:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b64e:	428a      	cmp	r2, r1
    b650:	bf38      	it	cc
    b652:	460a      	movcc	r2, r1
		ticker_status =
    b654:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b658:	b2a3      	uxth	r3, r4
    b65a:	b292      	uxth	r2, r2
		ticker_status =
    b65c:	9106      	str	r1, [sp, #24]
    b65e:	2100      	movs	r1, #0
    b660:	9302      	str	r3, [sp, #8]
    b662:	9201      	str	r2, [sp, #4]
    b664:	9200      	str	r2, [sp, #0]
    b666:	9104      	str	r1, [sp, #16]
    b668:	9103      	str	r1, [sp, #12]
    b66a:	4652      	mov	r2, sl
    b66c:	4608      	mov	r0, r1
    b66e:	f7fc fce3 	bl	8038 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b672:	f030 0302 	bics.w	r3, r0, #2
    b676:	d185      	bne.n	b584 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b678:	20ff      	movs	r0, #255	; 0xff
    b67a:	f7ff fb6b 	bl	ad54 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b67e:	4b0d      	ldr	r3, [pc, #52]	; (b6b4 <event_common_prepare+0x184>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b680:	2201      	movs	r2, #1
    b682:	4611      	mov	r1, r2
    b684:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b686:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b68a:	f7fb fed1 	bl	7430 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b68e:	b110      	cbz	r0, b696 <event_common_prepare+0x166>
    b690:	4a04      	ldr	r2, [pc, #16]	; (b6a4 <event_common_prepare+0x174>)
    b692:	4909      	ldr	r1, [pc, #36]	; (b6b8 <event_common_prepare+0x188>)
    b694:	e778      	b.n	b588 <event_common_prepare+0x58>
}
    b696:	b00d      	add	sp, #52	; 0x34
    b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b69c:	0000a9b9 	.word	0x0000a9b9
    b6a0:	0000abed 	.word	0x0000abed
    b6a4:	00016845 	.word	0x00016845
    b6a8:	00016a61 	.word	0x00016a61
    b6ac:	0000ac21 	.word	0x0000ac21
    b6b0:	200008e8 	.word	0x200008e8
    b6b4:	20003e30 	.word	0x20003e30
    b6b8:	00016c20 	.word	0x00016c20

0000b6bc <event_scan_prepare>:
{
    b6bc:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b6be:	4c21      	ldr	r4, [pc, #132]	; (b744 <event_scan_prepare+0x88>)
    b6c0:	7c23      	ldrb	r3, [r4, #16]
{
    b6c2:	b085      	sub	sp, #20
    b6c4:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b6c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b6ca:	b153      	cbz	r3, b6e2 <event_scan_prepare+0x26>
    b6cc:	4a1e      	ldr	r2, [pc, #120]	; (b748 <event_scan_prepare+0x8c>)
    b6ce:	491f      	ldr	r1, [pc, #124]	; (b74c <event_scan_prepare+0x90>)
		LL_ASSERT(!retval);
    b6d0:	2003      	movs	r0, #3
    b6d2:	f7f6 fc7f 	bl	1fd4 <bt_log>
    b6d6:	4040      	eors	r0, r0
    b6d8:	f380 8811 	msr	BASEPRI, r0
    b6dc:	f04f 0004 	mov.w	r0, #4
    b6e0:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    b6e2:	2306      	movs	r3, #6
    b6e4:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b6e6:	9203      	str	r2, [sp, #12]
    b6e8:	9301      	str	r3, [sp, #4]
    b6ea:	4a19      	ldr	r2, [pc, #100]	; (b750 <event_scan_prepare+0x94>)
    b6ec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b6f0:	9202      	str	r2, [sp, #8]
    b6f2:	9300      	str	r3, [sp, #0]
    b6f4:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    b6f8:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    b6fc:	f7ff ff18 	bl	b530 <event_common_prepare>
	if (_radio.scanner.conn) {
    b700:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b704:	b1db      	cbz	r3, b73e <event_scan_prepare+0x82>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    b706:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b70a:	2b00      	cmp	r3, #0
    b70c:	da0c      	bge.n	b728 <event_scan_prepare+0x6c>
			u32_t ticks_prepare_to_start =
    b70e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    b712:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    b716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    b71a:	4291      	cmp	r1, r2
    b71c:	bf2c      	ite	cs
    b71e:	ebc3 0301 	rsbcs	r3, r3, r1
    b722:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    b726:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    b728:	4b0a      	ldr	r3, [pc, #40]	; (b754 <event_scan_prepare+0x98>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b72a:	2201      	movs	r2, #1
    b72c:	4611      	mov	r1, r2
    b72e:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    b730:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b732:	f7fb fe7d 	bl	7430 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b736:	b110      	cbz	r0, b73e <event_scan_prepare+0x82>
    b738:	4a03      	ldr	r2, [pc, #12]	; (b748 <event_scan_prepare+0x8c>)
    b73a:	4907      	ldr	r1, [pc, #28]	; (b758 <event_scan_prepare+0x9c>)
    b73c:	e7c8      	b.n	b6d0 <event_scan_prepare+0x14>
}
    b73e:	b005      	add	sp, #20
    b740:	bd30      	pop	{r4, r5, pc}
    b742:	bf00      	nop
    b744:	200008e8 	.word	0x200008e8
    b748:	00016873 	.word	0x00016873
    b74c:	0001714c 	.word	0x0001714c
    b750:	0000b381 	.word	0x0000b381
    b754:	20003db0 	.word	0x20003db0
    b758:	00016c20 	.word	0x00016c20
    b75c:	00000000 	.word	0x00000000

0000b760 <mayfly_xtal_stop_calc>:
{
    b760:	b570      	push	{r4, r5, r6, lr}
    b762:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b764:	2302      	movs	r3, #2
    b766:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b768:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b76a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b76c:	4e78      	ldr	r6, [pc, #480]	; (b950 <mayfly_xtal_stop_calc+0x1f0>)
				    _radio.connection_count));
    b76e:	4d79      	ldr	r5, [pc, #484]	; (b954 <mayfly_xtal_stop_calc+0x1f4>)
	struct connection *conn_curr = NULL;
    b770:	930a      	str	r3, [sp, #40]	; 0x28
{
    b772:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b774:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b776:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b77a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b77c:	ab09      	add	r3, sp, #36	; 0x24
    b77e:	9302      	str	r3, [sp, #8]
    b780:	ab0c      	add	r3, sp, #48	; 0x30
    b782:	9300      	str	r3, [sp, #0]
    b784:	9601      	str	r6, [sp, #4]
    b786:	ab0d      	add	r3, sp, #52	; 0x34
    b788:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b78c:	2101      	movs	r1, #1
    b78e:	2000      	movs	r0, #0
    b790:	f7fc fcdc 	bl	814c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b794:	2802      	cmp	r0, #2
    b796:	d010      	beq.n	b7ba <mayfly_xtal_stop_calc+0x5a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b798:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b79a:	b193      	cbz	r3, b7c2 <mayfly_xtal_stop_calc+0x62>
    b79c:	4a6e      	ldr	r2, [pc, #440]	; (b958 <mayfly_xtal_stop_calc+0x1f8>)
    b79e:	496f      	ldr	r1, [pc, #444]	; (b95c <mayfly_xtal_stop_calc+0x1fc>)
	LL_ASSERT(hdr_curr);
    b7a0:	2003      	movs	r0, #3
    b7a2:	f7f6 fc17 	bl	1fd4 <bt_log>
    b7a6:	4040      	eors	r0, r0
    b7a8:	f380 8811 	msr	BASEPRI, r0
    b7ac:	f04f 0004 	mov.w	r0, #4
    b7b0:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b7b2:	2101      	movs	r1, #1
    b7b4:	2000      	movs	r0, #0
    b7b6:	f7fc fd47 	bl	8248 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7bc:	2b02      	cmp	r3, #2
    b7be:	d0f8      	beq.n	b7b2 <mayfly_xtal_stop_calc+0x52>
    b7c0:	e7ea      	b.n	b798 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b7c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b7c6:	2bff      	cmp	r3, #255	; 0xff
    b7c8:	d004      	beq.n	b7d4 <mayfly_xtal_stop_calc+0x74>
    b7ca:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b7ce:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b7d0:	4293      	cmp	r3, r2
    b7d2:	dad3      	bge.n	b77c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b7d4:	1f5a      	subs	r2, r3, #5
    b7d6:	b2d2      	uxtb	r2, r2
    b7d8:	2af9      	cmp	r2, #249	; 0xf9
    b7da:	d805      	bhi.n	b7e8 <mayfly_xtal_stop_calc+0x88>
				_radio.connection_count))) {
    b7dc:	4a5d      	ldr	r2, [pc, #372]	; (b954 <mayfly_xtal_stop_calc+0x1f4>)
    b7de:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b7e2:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b7e4:	4293      	cmp	r3, r2
    b7e6:	db04      	blt.n	b7f2 <mayfly_xtal_stop_calc+0x92>
    b7e8:	2001      	movs	r0, #1
    b7ea:	f7ff f9d3 	bl	ab94 <mayfly_xtal_retain.part.13>
}
    b7ee:	b00e      	add	sp, #56	; 0x38
    b7f0:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b7f2:	a90a      	add	r1, sp, #40	; 0x28
    b7f4:	b2e0      	uxtb	r0, r4
    b7f6:	f7ff f98f 	bl	ab18 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b7fa:	b910      	cbnz	r0, b802 <mayfly_xtal_stop_calc+0xa2>
    b7fc:	4a56      	ldr	r2, [pc, #344]	; (b958 <mayfly_xtal_stop_calc+0x1f8>)
    b7fe:	4958      	ldr	r1, [pc, #352]	; (b960 <mayfly_xtal_stop_calc+0x200>)
    b800:	e7ce      	b.n	b7a0 <mayfly_xtal_stop_calc+0x40>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b802:	6803      	ldr	r3, [r0, #0]
    b804:	6844      	ldr	r4, [r0, #4]
    b806:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b808:	bfb8      	it	lt
    b80a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b80c:	429c      	cmp	r4, r3
    b80e:	bf38      	it	cc
    b810:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b812:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b814:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b818:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b81a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b81c:	f7ff f97c 	bl	ab18 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b820:	4605      	mov	r5, r0
    b822:	b910      	cbnz	r0, b82a <mayfly_xtal_stop_calc+0xca>
    b824:	4a4c      	ldr	r2, [pc, #304]	; (b958 <mayfly_xtal_stop_calc+0x1f8>)
    b826:	494f      	ldr	r1, [pc, #316]	; (b964 <mayfly_xtal_stop_calc+0x204>)
    b828:	e7ba      	b.n	b7a0 <mayfly_xtal_stop_calc+0x40>
	ticks_prepare_to_start_next =
    b82a:	6886      	ldr	r6, [r0, #8]
    b82c:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b82e:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b830:	429e      	cmp	r6, r3
    b832:	bf38      	it	cc
    b834:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b836:	2a00      	cmp	r2, #0
    b838:	da05      	bge.n	b846 <mayfly_xtal_stop_calc+0xe6>
		ticks_to_expire -=
    b83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b83c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b840:	4433      	add	r3, r6
    b842:	1a9b      	subs	r3, r3, r2
    b844:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b848:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b84c:	4293      	cmp	r3, r2
    b84e:	d209      	bcs.n	b864 <mayfly_xtal_stop_calc+0x104>
    b850:	2001      	movs	r0, #1
    b852:	f7ff f99f 	bl	ab94 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b856:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b85a:	2101      	movs	r1, #1
    b85c:	4628      	mov	r0, r5
    b85e:	f7ff fd17 	bl	b290 <prepare_normal_set>
    b862:	e7c4      	b.n	b7ee <mayfly_xtal_stop_calc+0x8e>
		if (!s_xtal_retained) {
    b864:	4b40      	ldr	r3, [pc, #256]	; (b968 <mayfly_xtal_stop_calc+0x208>)
    b866:	781a      	ldrb	r2, [r3, #0]
    b868:	b94a      	cbnz	r2, b87e <mayfly_xtal_stop_calc+0x11e>
			s_xtal_retained = 1;
    b86a:	2001      	movs	r0, #1
    b86c:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    b86e:	4611      	mov	r1, r2
    b870:	4b3e      	ldr	r3, [pc, #248]	; (b96c <mayfly_xtal_stop_calc+0x20c>)
    b872:	f7fb fddd 	bl	7430 <mayfly_enqueue>
			LL_ASSERT(!retval);
    b876:	b110      	cbz	r0, b87e <mayfly_xtal_stop_calc+0x11e>
    b878:	4a3d      	ldr	r2, [pc, #244]	; (b970 <mayfly_xtal_stop_calc+0x210>)
    b87a:	493e      	ldr	r1, [pc, #248]	; (b974 <mayfly_xtal_stop_calc+0x214>)
    b87c:	e790      	b.n	b7a0 <mayfly_xtal_stop_calc+0x40>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b87e:	682b      	ldr	r3, [r5, #0]
    b880:	2b00      	cmp	r3, #0
    b882:	db17      	blt.n	b8b4 <mayfly_xtal_stop_calc+0x154>
    b884:	429e      	cmp	r6, r3
    b886:	d215      	bcs.n	b8b4 <mayfly_xtal_stop_calc+0x154>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b888:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b88a:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b88c:	b29b      	uxth	r3, r3
			ticker_status =
    b88e:	493a      	ldr	r1, [pc, #232]	; (b978 <mayfly_xtal_stop_calc+0x218>)
    b890:	9105      	str	r1, [sp, #20]
    b892:	9302      	str	r3, [sp, #8]
    b894:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b898:	9506      	str	r5, [sp, #24]
    b89a:	9004      	str	r0, [sp, #16]
    b89c:	9003      	str	r0, [sp, #12]
    b89e:	9001      	str	r0, [sp, #4]
    b8a0:	9000      	str	r0, [sp, #0]
    b8a2:	2101      	movs	r1, #1
    b8a4:	f7fc fbc8 	bl	8038 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b8a8:	f030 0302 	bics.w	r3, r0, #2
    b8ac:	d002      	beq.n	b8b4 <mayfly_xtal_stop_calc+0x154>
    b8ae:	4a2a      	ldr	r2, [pc, #168]	; (b958 <mayfly_xtal_stop_calc+0x1f8>)
    b8b0:	4932      	ldr	r1, [pc, #200]	; (b97c <mayfly_xtal_stop_calc+0x21c>)
    b8b2:	e775      	b.n	b7a0 <mayfly_xtal_stop_calc+0x40>
		if (!conn_curr || !conn_next) {
    b8b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b8b6:	2e00      	cmp	r6, #0
    b8b8:	d099      	beq.n	b7ee <mayfly_xtal_stop_calc+0x8e>
    b8ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b8bc:	2d00      	cmp	r5, #0
    b8be:	d096      	beq.n	b7ee <mayfly_xtal_stop_calc+0x8e>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b8c0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b8c2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b8c4:	429a      	cmp	r2, r3
    b8c6:	d192      	bne.n	b7ee <mayfly_xtal_stop_calc+0x8e>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b8c8:	482d      	ldr	r0, [pc, #180]	; (b980 <mayfly_xtal_stop_calc+0x220>)
    b8ca:	b292      	uxth	r2, r2
    b8cc:	fba2 0100 	umull	r0, r1, r2, r0
    b8d0:	f240 1323 	movw	r3, #291	; 0x123
    b8d4:	fb03 1102 	mla	r1, r3, r2, r1
    b8d8:	a31b      	add	r3, pc, #108	; (adr r3, b948 <mayfly_xtal_stop_calc+0x1e8>)
    b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
    b8de:	f7f4 fc99 	bl	214 <__aeabi_uldivmod>
    b8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b8e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b8e8:	2200      	movs	r2, #0
    b8ea:	4298      	cmp	r0, r3
    b8ec:	d318      	bcc.n	b920 <mayfly_xtal_stop_calc+0x1c0>
    b8ee:	b102      	cbz	r2, b8f2 <mayfly_xtal_stop_calc+0x192>
    b8f0:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b8f2:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b8f6:	2a00      	cmp	r2, #0
    b8f8:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b8fc:	da13      	bge.n	b926 <mayfly_xtal_stop_calc+0x1c6>
    b8fe:	2a00      	cmp	r2, #0
    b900:	f6ff af75 	blt.w	b7ee <mayfly_xtal_stop_calc+0x8e>
			     (ticks_slot_abs +
    b904:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b906:	429c      	cmp	r4, r3
    b908:	f67f af71 	bls.w	b7ee <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_curr);
    b90c:	4630      	mov	r0, r6
    b90e:	f7fe fa41 	bl	9d94 <conn_update_req>
				if (status == 2) {
    b912:	2802      	cmp	r0, #2
    b914:	f47f af6b 	bne.w	b7ee <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_next);
    b918:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b91a:	f7fe fa3b 	bl	9d94 <conn_update_req>
    b91e:	e766      	b.n	b7ee <mayfly_xtal_stop_calc+0x8e>
				ticks_to_expire -= ticks_conn_interval;
    b920:	1a1b      	subs	r3, r3, r0
    b922:	2201      	movs	r2, #1
    b924:	e7e1      	b.n	b8ea <mayfly_xtal_stop_calc+0x18a>
			} else if (!conn_curr->role && conn_next->role &&
    b926:	2a00      	cmp	r2, #0
    b928:	f6bf af61 	bge.w	b7ee <mayfly_xtal_stop_calc+0x8e>
				    (ticks_slot_abs +
    b92c:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b92e:	429c      	cmp	r4, r3
    b930:	f67f af5d 	bls.w	b7ee <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_next);
    b934:	4628      	mov	r0, r5
    b936:	f7fe fa2d 	bl	9d94 <conn_update_req>
				if (status == 2) {
    b93a:	2802      	cmp	r0, #2
    b93c:	f47f af57 	bne.w	b7ee <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_curr);
    b940:	980a      	ldr	r0, [sp, #40]	; 0x28
    b942:	e7ea      	b.n	b91a <mayfly_xtal_stop_calc+0x1ba>
    b944:	f3af 8000 	nop.w
    b948:	1afd498d 	.word	0x1afd498d
    b94c:	00000007 	.word	0x00000007
    b950:	00009cf1 	.word	0x00009cf1
    b954:	200008e8 	.word	0x200008e8
    b958:	000167b7 	.word	0x000167b7
    b95c:	0001731d 	.word	0x0001731d
    b960:	00017075 	.word	0x00017075
    b964:	00017093 	.word	0x00017093
    b968:	20000ae8 	.word	0x20000ae8
    b96c:	20003df0 	.word	0x20003df0
    b970:	00016791 	.word	0x00016791
    b974:	00016c20 	.word	0x00016c20
    b978:	00009cf5 	.word	0x00009cf5
    b97c:	00016a61 	.word	0x00016a61
    b980:	09ce5400 	.word	0x09ce5400

0000b984 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b984:	4b02      	ldr	r3, [pc, #8]	; (b990 <mayfly_xtal_start+0xc>)
    b986:	6818      	ldr	r0, [r3, #0]
    b988:	6843      	ldr	r3, [r0, #4]
    b98a:	2100      	movs	r1, #0
    b98c:	681b      	ldr	r3, [r3, #0]
    b98e:	4718      	bx	r3
    b990:	200008e8 	.word	0x200008e8

0000b994 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b994:	4b02      	ldr	r3, [pc, #8]	; (b9a0 <mayfly_xtal_stop+0xc>)
    b996:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b998:	6843      	ldr	r3, [r0, #4]
    b99a:	2100      	movs	r1, #0
    b99c:	685b      	ldr	r3, [r3, #4]
    b99e:	4718      	bx	r3
    b9a0:	200008e8 	.word	0x200008e8

0000b9a4 <chan_sel_2>:
{
    b9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b9a6:	4048      	eors	r0, r1
    b9a8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b9aa:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b9ae:	2608      	movs	r6, #8
	o = 0;
    b9b0:	2400      	movs	r4, #0
		o |= (i & 1);
    b9b2:	f00e 0501 	and.w	r5, lr, #1
    b9b6:	3e01      	subs	r6, #1
    b9b8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b9bc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b9c0:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b9c2:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b9c6:	d1f4      	bne.n	b9b2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b9c8:	0225      	lsls	r5, r4, #8
    b9ca:	b22d      	sxth	r5, r5
    b9cc:	b2c0      	uxtb	r0, r0
    b9ce:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b9d2:	4634      	mov	r4, r6
		o |= (i & 1);
    b9d4:	f000 0601 	and.w	r6, r0, #1
    b9d8:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b9dc:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b9e0:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b9e4:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b9e6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b9ea:	d1f3      	bne.n	b9d4 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b9ec:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b9ee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b9f2:	3f01      	subs	r7, #1
    b9f4:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b9f6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b9fa:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b9fc:	d1d5      	bne.n	b9aa <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b9fe:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    ba00:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    ba02:	fbb1 f0f4 	udiv	r0, r1, r4
    ba06:	fb04 1010 	mls	r0, r4, r0, r1
    ba0a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ba0c:	08c4      	lsrs	r4, r0, #3
    ba0e:	f000 0507 	and.w	r5, r0, #7
    ba12:	5d14      	ldrb	r4, [r2, r4]
    ba14:	412c      	asrs	r4, r5
    ba16:	07e4      	lsls	r4, r4, #31
    ba18:	d407      	bmi.n	ba2a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    ba1a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    ba1c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ba20:	4610      	mov	r0, r2
}
    ba22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    ba26:	f7fe b971 	b.w	9d0c <chan_sel_remap>
}
    ba2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ba2c <ctrl_tx_enqueue>:
{
    ba2c:	b510      	push	{r4, lr}
	    !conn->empty &&
    ba2e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    ba32:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    ba36:	f014 0f80 	tst.w	r4, #128	; 0x80
    ba3a:	d118      	bne.n	ba6e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ba3c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    ba40:	b1ab      	cbz	r3, ba6e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    ba42:	0724      	lsls	r4, r4, #28
    ba44:	d413      	bmi.n	ba6e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    ba46:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    ba4a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    ba4c:	bf04      	itt	eq
    ba4e:	681c      	ldreq	r4, [r3, #0]
    ba50:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    ba54:	b992      	cbnz	r2, ba7c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    ba56:	681a      	ldr	r2, [r3, #0]
    ba58:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    ba5a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    ba5c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    ba60:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    ba64:	680b      	ldr	r3, [r1, #0]
    ba66:	b90b      	cbnz	r3, ba6c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    ba68:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    ba6c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    ba6e:	b92a      	cbnz	r2, ba7c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    ba70:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    ba74:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    ba76:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    ba7a:	e7ef      	b.n	ba5c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    ba7c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    ba80:	681a      	ldr	r2, [r3, #0]
    ba82:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    ba84:	6019      	str	r1, [r3, #0]
    ba86:	e7eb      	b.n	ba60 <ctrl_tx_enqueue+0x34>

0000ba88 <ctrl_tx_sec_enqueue>:
{
    ba88:	b410      	push	{r4}
	if (conn->pause_tx) {
    ba8a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    ba8e:	0724      	lsls	r4, r4, #28
{
    ba90:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    ba92:	d50f      	bpl.n	bab4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    ba94:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    ba98:	b931      	cbnz	r1, baa8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    ba9a:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    ba9e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    baa0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    baa4:	bc10      	pop	{r4}
    baa6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    baa8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    baac:	6819      	ldr	r1, [r3, #0]
    baae:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    bab0:	601a      	str	r2, [r3, #0]
    bab2:	e7f7      	b.n	baa4 <ctrl_tx_sec_enqueue+0x1c>
}
    bab4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    bab6:	f7ff bfb9 	b.w	ba2c <ctrl_tx_enqueue>
	...

0000babc <feature_rsp_send>:
{
    babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    babe:	4f21      	ldr	r7, [pc, #132]	; (bb44 <feature_rsp_send+0x88>)
{
    bac0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bac2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    bac6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bac8:	f7fb fbe7 	bl	729a <mem_acquire>
	if (!node_tx) {
    bacc:	4604      	mov	r4, r0
    bace:	b3b0      	cbz	r0, bb3e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bad0:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    bad2:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bad4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    badc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    bae0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    bae4:	f043 0310 	orr.w	r3, r3, #16
    bae8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    baec:	79b1      	ldrb	r1, [r6, #6]
    baee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    baf2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    baf6:	f3c1 0110 	ubfx	r1, r1, #0, #17
    bafa:	400b      	ands	r3, r1
    bafc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    bb00:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    bb04:	f043 0320 	orr.w	r3, r3, #32
    bb08:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb0c:	7903      	ldrb	r3, [r0, #4]
    bb0e:	f043 0303 	orr.w	r3, r3, #3
    bb12:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bb14:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    bb16:	2309      	movs	r3, #9
    bb18:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    bb1a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bb1c:	2100      	movs	r1, #0
    bb1e:	4410      	add	r0, r2
    bb20:	f7f6 f8bd 	bl	1c9e <memset>
		conn->llcp_features & 0xFF;
    bb24:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    bb28:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    bb2a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    bb2c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    bb2e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    bb30:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    bb32:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    bb34:	4621      	mov	r1, r4
    bb36:	f7ff ffa7 	bl	ba88 <ctrl_tx_sec_enqueue>
	return 0;
    bb3a:	2000      	movs	r0, #0
    bb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    bb3e:	2001      	movs	r0, #1
}
    bb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb42:	bf00      	nop
    bb44:	200008e8 	.word	0x200008e8

0000bb48 <start_enc_rsp_send>:
{
    bb48:	b510      	push	{r4, lr}
    bb4a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    bb4c:	b9c9      	cbnz	r1, bb82 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb4e:	480f      	ldr	r0, [pc, #60]	; (bb8c <start_enc_rsp_send+0x44>)
    bb50:	f7fb fba3 	bl	729a <mem_acquire>
		if (!node_tx) {
    bb54:	b1b8      	cbz	r0, bb86 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    bb56:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    bb58:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bb5c:	f043 0320 	orr.w	r3, r3, #32
    bb60:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb64:	780b      	ldrb	r3, [r1, #0]
    bb66:	f043 0303 	orr.w	r3, r3, #3
    bb6a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bb6c:	2301      	movs	r3, #1
    bb6e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    bb70:	2306      	movs	r3, #6
    bb72:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    bb74:	b140      	cbz	r0, bb88 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    bb76:	4601      	mov	r1, r0
    bb78:	4620      	mov	r0, r4
    bb7a:	f7ff ff57 	bl	ba2c <ctrl_tx_enqueue>
	return 0;
    bb7e:	2000      	movs	r0, #0
    bb80:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    bb82:	2000      	movs	r0, #0
    bb84:	e7e8      	b.n	bb58 <start_enc_rsp_send+0x10>
			return 1;
    bb86:	2001      	movs	r0, #1
}
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	bf00      	nop
    bb8c:	20000a44 	.word	0x20000a44

0000bb90 <reject_ext_ind_send>:
{
    bb90:	b570      	push	{r4, r5, r6, lr}
    bb92:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb94:	480b      	ldr	r0, [pc, #44]	; (bbc4 <reject_ext_ind_send+0x34>)
{
    bb96:	460e      	mov	r6, r1
    bb98:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb9a:	f7fb fb7e 	bl	729a <mem_acquire>
	if (!node_tx) {
    bb9e:	b178      	cbz	r0, bbc0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bba0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    bba2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bba4:	f043 0303 	orr.w	r3, r3, #3
    bba8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bbaa:	2303      	movs	r3, #3
    bbac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bbae:	2311      	movs	r3, #17
    bbb0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    bbb2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    bbb4:	4601      	mov	r1, r0
    bbb6:	4620      	mov	r0, r4
    bbb8:	f7ff ff38 	bl	ba2c <ctrl_tx_enqueue>
	return 0;
    bbbc:	2000      	movs	r0, #0
    bbbe:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    bbc0:	2001      	movs	r0, #1
}
    bbc2:	bd70      	pop	{r4, r5, r6, pc}
    bbc4:	20000a44 	.word	0x20000a44

0000bbc8 <event_connection_prepare>:
{
    bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bbcc:	4dca      	ldr	r5, [pc, #808]	; (bef8 <event_connection_prepare+0x330>)
{
    bbce:	b08f      	sub	sp, #60	; 0x3c
    bbd0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    bbd2:	7c2b      	ldrb	r3, [r5, #16]
{
    bbd4:	910c      	str	r1, [sp, #48]	; 0x30
    bbd6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bbd8:	b153      	cbz	r3, bbf0 <event_connection_prepare+0x28>
    bbda:	4ac8      	ldr	r2, [pc, #800]	; (befc <event_connection_prepare+0x334>)
    bbdc:	49c8      	ldr	r1, [pc, #800]	; (bf00 <event_connection_prepare+0x338>)
		LL_ASSERT(!retval);
    bbde:	2003      	movs	r0, #3
    bbe0:	f7f6 f9f8 	bl	1fd4 <bt_log>
    bbe4:	4040      	eors	r0, r0
    bbe6:	f380 8811 	msr	BASEPRI, r0
    bbea:	f04f 0004 	mov.w	r0, #4
    bbee:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    bbf0:	f894 3020 	ldrb.w	r3, [r4, #32]
    bbf4:	3307      	adds	r3, #7
    bbf6:	b2db      	uxtb	r3, r3
    bbf8:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    bbfa:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bbfe:	2b00      	cmp	r3, #0
    bc00:	da09      	bge.n	bc16 <event_connection_prepare+0x4e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bc02:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    bc04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bc06:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    bc0a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    bc0c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    bc0e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    bc10:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    bc12:	bf88      	it	hi
    bc14:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    bc16:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bc18:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    bc1c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    bc1e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    bc20:	b292      	uxth	r2, r2
    bc22:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    bc24:	4432      	add	r2, r6
    bc26:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bc28:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bc2c:	429a      	cmp	r2, r3
    bc2e:	f040 81ae 	bne.w	bf8e <event_connection_prepare+0x3c6>
    bc32:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bc36:	075f      	lsls	r7, r3, #29
    bc38:	f100 845c 	bmi.w	c4f4 <event_connection_prepare+0x92c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    bc3c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bc40:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bc44:	429a      	cmp	r2, r3
    bc46:	f000 8091 	beq.w	bd6c <event_connection_prepare+0x1a4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bc4a:	2005      	movs	r0, #5
    bc4c:	f7ff fc62 	bl	b514 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
    bc50:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bc54:	b113      	cbz	r3, bc5c <event_connection_prepare+0x94>
    bc56:	429c      	cmp	r4, r3
    bc58:	f040 8088 	bne.w	bd6c <event_connection_prepare+0x1a4>
	switch (conn->llcp_conn_param.state) {
    bc5c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bc60:	f003 0307 	and.w	r3, r3, #7
    bc64:	2b05      	cmp	r3, #5
    bc66:	f200 8143 	bhi.w	bef0 <event_connection_prepare+0x328>
    bc6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    bc6e:	0006      	.short	0x0006
    bc70:	01170060 	.word	0x01170060
    bc74:	007f007f 	.word	0x007f007f
    bc78:	007f      	.short	0x007f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc7a:	48a2      	ldr	r0, [pc, #648]	; (bf04 <event_connection_prepare+0x33c>)
    bc7c:	f7fb fb0d 	bl	729a <mem_acquire>
	if (!node_tx) {
    bc80:	4607      	mov	r7, r0
    bc82:	2800      	cmp	r0, #0
    bc84:	d072      	beq.n	bd6c <event_connection_prepare+0x1a4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    bc86:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bc8a:	2204      	movs	r2, #4
    bc8c:	f362 0302 	bfi	r3, r2, #0, #3
    bc90:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc94:	7903      	ldrb	r3, [r0, #4]
    bc96:	f043 0303 	orr.w	r3, r3, #3
    bc9a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bc9c:	2318      	movs	r3, #24
    bc9e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bca0:	230f      	movs	r3, #15
    bca2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    bca4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bca8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    bcaa:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    bcac:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bcb0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    bcb2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bcb6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    bcb8:	2300      	movs	r3, #0
    bcba:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    bcbc:	74c3      	strb	r3, [r0, #19]
    bcbe:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    bcc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bcc4:	7543      	strb	r3, [r0, #21]
    bcc6:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    bcc8:	75c3      	strb	r3, [r0, #23]
    bcca:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bccc:	7643      	strb	r3, [r0, #25]
    bcce:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bcd0:	76c3      	strb	r3, [r0, #27]
    bcd2:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    bcd4:	7743      	strb	r3, [r0, #29]
    bcd6:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    bcd8:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bcdc:	4601      	mov	r1, r0
    bcde:	4620      	mov	r0, r4
    bce0:	f7ff fea4 	bl	ba2c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bce4:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    bce6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bcea:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bcee:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    bcf0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    bcf4:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bcf8:	da0b      	bge.n	bd12 <event_connection_prepare+0x14a>
			u32_t ticks_prepare_to_start =
    bcfa:	68a3      	ldr	r3, [r4, #8]
    bcfc:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bcfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bd02:	428b      	cmp	r3, r1
    bd04:	bf2c      	ite	cs
    bd06:	4443      	addcs	r3, r8
    bd08:	eb08 0301 	addcc.w	r3, r8, r1
    bd0c:	1a9b      	subs	r3, r3, r2
    bd0e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bd12:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bd14:	4b7c      	ldr	r3, [pc, #496]	; (bf08 <event_connection_prepare+0x340>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bd16:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd1a:	2201      	movs	r2, #1
    bd1c:	4611      	mov	r1, r2
    bd1e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bd20:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bd22:	f7fb fb85 	bl	7430 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bd26:	b308      	cbz	r0, bd6c <event_connection_prepare+0x1a4>
    bd28:	4a78      	ldr	r2, [pc, #480]	; (bf0c <event_connection_prepare+0x344>)
    bd2a:	4979      	ldr	r1, [pc, #484]	; (bf10 <event_connection_prepare+0x348>)
    bd2c:	e757      	b.n	bbde <event_connection_prepare+0x16>
	if (conn->llcp_conn_param.status) {
    bd2e:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bd32:	b397      	cbz	r7, bd9a <event_connection_prepare+0x1d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd34:	4873      	ldr	r0, [pc, #460]	; (bf04 <event_connection_prepare+0x33c>)
    bd36:	f7fb fab0 	bl	729a <mem_acquire>
		if (!node_tx) {
    bd3a:	4601      	mov	r1, r0
    bd3c:	b1b0      	cbz	r0, bd6c <event_connection_prepare+0x1a4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bd3e:	7903      	ldrb	r3, [r0, #4]
    bd40:	f043 0303 	orr.w	r3, r3, #3
    bd44:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bd46:	2311      	movs	r3, #17
    bd48:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bd4a:	2303      	movs	r3, #3
    bd4c:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bd4e:	230f      	movs	r3, #15
    bd50:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bd52:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bd56:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bd58:	4620      	mov	r0, r4
    bd5a:	f7ff fe67 	bl	ba2c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bd5e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bd62:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bd66:	2300      	movs	r3, #0
    bd68:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bd6c:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bd70:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bd74:	429a      	cmp	r2, r3
    bd76:	f000 8103 	beq.w	bf80 <event_connection_prepare+0x3b8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bd7a:	2005      	movs	r0, #5
    bd7c:	f7ff fbca 	bl	b514 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
    bd80:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bd84:	f003 0203 	and.w	r2, r3, #3
    bd88:	2a03      	cmp	r2, #3
    bd8a:	f200 8172 	bhi.w	c072 <event_connection_prepare+0x4aa>
    bd8e:	e8df f012 	tbh	[pc, r2, lsl #1]
    bd92:	00c5      	.short	0x00c5
    bd94:	00f700f7 	.word	0x00f700f7
    bd98:	0111      	.short	0x0111
	if (!conn->role) {
    bd9a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bd9e:	2b00      	cmp	r3, #0
    bda0:	db3b      	blt.n	be1a <event_connection_prepare+0x252>
		if (conn->llcp_req != conn->llcp_ack) {
    bda2:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bda6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bdaa:	428b      	cmp	r3, r1
    bdac:	d1de      	bne.n	bd6c <event_connection_prepare+0x1a4>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bdae:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bdb2:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bdb6:	2205      	movs	r2, #5
    bdb8:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bdbc:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bdc0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bdc4:	2301      	movs	r3, #1
    bdc6:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bdca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bdce:	b122      	cbz	r2, bdda <event_connection_prepare+0x212>
				((conn->llcp_conn_param.interval /
    bdd0:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bdd4:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bdd6:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bdda:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bdde:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bde2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bde6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bdea:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bdee:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bdf2:	2202      	movs	r2, #2
    bdf4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bdf8:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bdfc:	f082 0208 	eor.w	r2, r2, #8
    be00:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    be04:	f362 0382 	bfi	r3, r2, #2, #1
    be08:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    be0c:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    be0e:	2301      	movs	r3, #1
    be10:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    be14:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    be18:	e7a8      	b.n	bd6c <event_connection_prepare+0x1a4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be1a:	483a      	ldr	r0, [pc, #232]	; (bf04 <event_connection_prepare+0x33c>)
    be1c:	f7fb fa3d 	bl	729a <mem_acquire>
	if (!node_tx) {
    be20:	4601      	mov	r1, r0
    be22:	2800      	cmp	r0, #0
    be24:	d0a2      	beq.n	bd6c <event_connection_prepare+0x1a4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    be26:	7903      	ldrb	r3, [r0, #4]
    be28:	f043 0303 	orr.w	r3, r3, #3
    be2c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    be2e:	2318      	movs	r3, #24
    be30:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    be32:	2310      	movs	r3, #16
    be34:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    be36:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    be3a:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    be3c:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    be3e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    be42:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    be44:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    be48:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    be4a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    be4e:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    be50:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    be54:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    be58:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    be5c:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    be60:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    be64:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    be68:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    be6c:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    be70:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    be74:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    be78:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    be7c:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    be80:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    be84:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    be88:	4620      	mov	r0, r4
    be8a:	f7ff fdcf 	bl	ba2c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    be8e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    be92:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    be96:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    be9a:	e767      	b.n	bd6c <event_connection_prepare+0x1a4>
	if (conn->pause_tx) {
    be9c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bea0:	0718      	lsls	r0, r3, #28
    bea2:	f53f af63 	bmi.w	bd6c <event_connection_prepare+0x1a4>
	node_rx = packet_rx_reserve_get(2);
    bea6:	2002      	movs	r0, #2
    bea8:	f7fd ff62 	bl	9d70 <packet_rx_reserve_get>
	if (!node_rx) {
    beac:	2800      	cmp	r0, #0
    beae:	f43f af5d 	beq.w	bd6c <event_connection_prepare+0x1a4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    beb2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    beb6:	2203      	movs	r2, #3
    beb8:	f362 0302 	bfi	r3, r2, #0, #3
    bebc:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    bec0:	8c23      	ldrh	r3, [r4, #32]
    bec2:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bec4:	2301      	movs	r3, #1
    bec6:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bec8:	7a03      	ldrb	r3, [r0, #8]
    beca:	4313      	orrs	r3, r2
    becc:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bece:	2318      	movs	r3, #24
    bed0:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bed2:	230f      	movs	r3, #15
    bed4:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    bed6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    beda:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    bedc:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    bede:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bee2:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    bee4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bee8:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    beea:	f7ff f913 	bl	b114 <packet_rx_enqueue>
    beee:	e73d      	b.n	bd6c <event_connection_prepare+0x1a4>
		LL_ASSERT(0);
    bef0:	4a08      	ldr	r2, [pc, #32]	; (bf14 <event_connection_prepare+0x34c>)
		LL_ASSERT(0);
    bef2:	4909      	ldr	r1, [pc, #36]	; (bf18 <event_connection_prepare+0x350>)
    bef4:	e673      	b.n	bbde <event_connection_prepare+0x16>
    bef6:	bf00      	nop
    bef8:	200008e8 	.word	0x200008e8
    befc:	0001692c 	.word	0x0001692c
    bf00:	0001714c 	.word	0x0001714c
    bf04:	20000a44 	.word	0x20000a44
    bf08:	20003dd0 	.word	0x20003dd0
    bf0c:	000168c8 	.word	0x000168c8
    bf10:	00016c20 	.word	0x00016c20
    bf14:	000168dd 	.word	0x000168dd
    bf18:	000153a4 	.word	0x000153a4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf1c:	48ae      	ldr	r0, [pc, #696]	; (c1d8 <event_connection_prepare+0x610>)
    bf1e:	f7fb f9bc 	bl	729a <mem_acquire>
		if (!node_tx) {
    bf22:	4601      	mov	r1, r0
    bf24:	b360      	cbz	r0, bf80 <event_connection_prepare+0x3b8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bf26:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bf2a:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bf2e:	2201      	movs	r2, #1
    bf30:	f362 0301 	bfi	r3, r2, #0, #2
    bf34:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bf38:	b2db      	uxtb	r3, r3
    bf3a:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bf3e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bf42:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bf46:	f363 07c5 	bfi	r7, r3, #3, #3
    bf4a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bf4e:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bf52:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bf56:	f367 1286 	bfi	r2, r7, #6, #1
    bf5a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf5e:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    bf60:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf62:	f042 0203 	orr.w	r2, r2, #3
    bf66:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    bf68:	2203      	movs	r2, #3
    bf6a:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bf6c:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    bf6e:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bf70:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    bf72:	4620      	mov	r0, r4
    bf74:	f7ff fd5a 	bl	ba2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    bf78:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    bf7c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    bf80:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bf84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    bf88:	429a      	cmp	r2, r3
    bf8a:	f000 82b3 	beq.w	c4f4 <event_connection_prepare+0x92c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    bf8e:	2005      	movs	r0, #5
    bf90:	f7ff fac0 	bl	b514 <event_stop.constprop.33>
		switch (conn->llcp_type) {
    bf94:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    bf98:	3b01      	subs	r3, #1
    bf9a:	2b07      	cmp	r3, #7
    bf9c:	f200 8580 	bhi.w	caa0 <event_connection_prepare+0xed8>
    bfa0:	e8df f013 	tbh	[pc, r3, lsl #1]
    bfa4:	02810069 	.word	0x02810069
    bfa8:	04390320 	.word	0x04390320
    bfac:	057e0469 	.word	0x057e0469
    bfb0:	04d604bb 	.word	0x04d604bb
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bfb4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    bfb8:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    bfbc:	f3c3 0282 	ubfx	r2, r3, #2, #3
    bfc0:	0791      	lsls	r1, r2, #30
    bfc2:	d544      	bpl.n	c04e <event_connection_prepare+0x486>
			conn->llcp_phy.tx = BIT(1);
    bfc4:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    bfc6:	f362 0384 	bfi	r3, r2, #2, #3
    bfca:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    bfce:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bfd2:	095a      	lsrs	r2, r3, #5
    bfd4:	0790      	lsls	r0, r2, #30
    bfd6:	d543      	bpl.n	c060 <event_connection_prepare+0x498>
			conn->llcp_phy.rx = BIT(1);
    bfd8:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    bfda:	f362 1347 	bfi	r3, r2, #5, #3
    bfde:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    bfe2:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    bfe6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    bfea:	f3c2 0182 	ubfx	r1, r2, #2, #3
    bfee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bff2:	428b      	cmp	r3, r1
    bff4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    bff8:	bf14      	ite	ne
    bffa:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    bffe:	f36f 0384 	bfceq	r3, #2, #3
    c002:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c006:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c00a:	0952      	lsrs	r2, r2, #5
    c00c:	f003 0307 	and.w	r3, r3, #7
    c010:	4293      	cmp	r3, r2
    c012:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c016:	bf14      	ite	ne
    c018:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c01c:	f36f 1347 	bfceq	r3, #5, #3
    c020:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c024:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c028:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c02c:	f043 0301 	orr.w	r3, r3, #1
    c030:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c034:	f362 0341 	bfi	r3, r2, #1, #1
    c038:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c03c:	2308      	movs	r3, #8
    c03e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c042:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c046:	3b01      	subs	r3, #1
    c048:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c04c:	e798      	b.n	bf80 <event_connection_prepare+0x3b8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c04e:	07d7      	lsls	r7, r2, #31
    c050:	d501      	bpl.n	c056 <event_connection_prepare+0x48e>
			conn->llcp_phy.tx = BIT(0);
    c052:	2201      	movs	r2, #1
    c054:	e7b7      	b.n	bfc6 <event_connection_prepare+0x3fe>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c056:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c05a:	bf18      	it	ne
    c05c:	2204      	movne	r2, #4
    c05e:	e7b2      	b.n	bfc6 <event_connection_prepare+0x3fe>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c060:	07d1      	lsls	r1, r2, #31
    c062:	d501      	bpl.n	c068 <event_connection_prepare+0x4a0>
			conn->llcp_phy.rx = BIT(0);
    c064:	2201      	movs	r2, #1
    c066:	e7b8      	b.n	bfda <event_connection_prepare+0x412>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c068:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c06c:	bf18      	it	ne
    c06e:	2204      	movne	r2, #4
    c070:	e7b3      	b.n	bfda <event_connection_prepare+0x412>
		LL_ASSERT(0);
    c072:	4a5a      	ldr	r2, [pc, #360]	; (c1dc <event_connection_prepare+0x614>)
    c074:	e73d      	b.n	bef2 <event_connection_prepare+0x32a>
	if (!conn_upd) {
    c076:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c07a:	b90b      	cbnz	r3, c080 <event_connection_prepare+0x4b8>
		_radio.conn_upd = conn;
    c07c:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c080:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c084:	f013 0303 	ands.w	r3, r3, #3
    c088:	d062      	beq.n	c150 <event_connection_prepare+0x588>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c08a:	4853      	ldr	r0, [pc, #332]	; (c1d8 <event_connection_prepare+0x610>)
    c08c:	f7fb f905 	bl	729a <mem_acquire>
		if (!node_tx) {
    c090:	4607      	mov	r7, r0
    c092:	2800      	cmp	r0, #0
    c094:	f000 822e 	beq.w	c4f4 <event_connection_prepare+0x92c>
		switch (conn->llcp.conn_upd.state) {
    c098:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c09c:	f003 0303 	and.w	r3, r3, #3
    c0a0:	2b01      	cmp	r3, #1
    c0a2:	d053      	beq.n	c14c <event_connection_prepare+0x584>
    c0a4:	2b02      	cmp	r3, #2
    c0a6:	d14f      	bne.n	c148 <event_connection_prepare+0x580>
			fp_mayfly_select_or_use =
    c0a8:	4a4d      	ldr	r2, [pc, #308]	; (c1e0 <event_connection_prepare+0x618>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c0aa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c0ae:	f36f 0301 	bfc	r3, #0, #2
    c0b2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c0b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c0b8:	3306      	adds	r3, #6
    c0ba:	4433      	add	r3, r6
    c0bc:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c0be:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0c2:	7939      	ldrb	r1, [r7, #4]
    c0c4:	f041 0103 	orr.w	r1, r1, #3
    c0c8:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c0ca:	210c      	movs	r1, #12
    c0cc:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c0ce:	2100      	movs	r1, #0
    c0d0:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c0d2:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c0d6:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c0d8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c0dc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c0e0:	fbb1 f1f0 	udiv	r1, r1, r0
    c0e4:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c0e8:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c0ec:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c0f0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c0f4:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c0f8:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c0fc:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c100:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c104:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c106:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c10a:	2900      	cmp	r1, #0
    c10c:	da0b      	bge.n	c126 <event_connection_prepare+0x55e>
			u32_t ticks_prepare_to_start =
    c10e:	68a3      	ldr	r3, [r4, #8]
    c110:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c112:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c116:	4283      	cmp	r3, r0
    c118:	bf2c      	ite	cs
    c11a:	4443      	addcs	r3, r8
    c11c:	eb08 0300 	addcc.w	r3, r8, r0
    c120:	1a5b      	subs	r3, r3, r1
    c122:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c126:	f107 0309 	add.w	r3, r7, #9
    c12a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c12e:	4b2d      	ldr	r3, [pc, #180]	; (c1e4 <event_connection_prepare+0x61c>)
    c130:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c132:	2201      	movs	r2, #1
    c134:	4611      	mov	r1, r2
    c136:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c138:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c13a:	f7fb f979 	bl	7430 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c13e:	2800      	cmp	r0, #0
    c140:	f000 81d4 	beq.w	c4ec <event_connection_prepare+0x924>
    c144:	4a28      	ldr	r2, [pc, #160]	; (c1e8 <event_connection_prepare+0x620>)
    c146:	e5f0      	b.n	bd2a <event_connection_prepare+0x162>
			LL_ASSERT(0);
    c148:	4a28      	ldr	r2, [pc, #160]	; (c1ec <event_connection_prepare+0x624>)
    c14a:	e6d2      	b.n	bef2 <event_connection_prepare+0x32a>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c14c:	4a28      	ldr	r2, [pc, #160]	; (c1f0 <event_connection_prepare+0x628>)
    c14e:	e7ac      	b.n	c0aa <event_connection_prepare+0x4e2>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c150:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c154:	1bf7      	subs	r7, r6, r7
    c156:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c158:	043a      	lsls	r2, r7, #16
    c15a:	f100 81cb 	bmi.w	c4f4 <event_connection_prepare+0x92c>
		conn->llcp_ack = conn->llcp_req;
    c15e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c162:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c166:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c16a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c16e:	428a      	cmp	r2, r1
    c170:	d009      	beq.n	c186 <event_connection_prepare+0x5be>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c172:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c176:	f002 0207 	and.w	r2, r2, #7
    c17a:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c17c:	bf04      	itt	eq
    c17e:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c182:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c186:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c18a:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c18c:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c18e:	bf08      	it	eq
    c190:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c194:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c196:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c198:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c19c:	429a      	cmp	r2, r3
    c19e:	d114      	bne.n	c1ca <event_connection_prepare+0x602>
		     conn->conn_interval) ||
    c1a0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c1a4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c1a6:	4299      	cmp	r1, r3
    c1a8:	d10f      	bne.n	c1ca <event_connection_prepare+0x602>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c1aa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c1ae:	435a      	muls	r2, r3
    c1b0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c1b4:	f242 7110 	movw	r1, #10000	; 0x2710
    c1b8:	fb01 2303 	mla	r3, r1, r3, r2
    c1bc:	3b01      	subs	r3, #1
    c1be:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c1c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c1c4:	b29b      	uxth	r3, r3
    c1c6:	429a      	cmp	r2, r3
    c1c8:	d027      	beq.n	c21a <event_connection_prepare+0x652>
			node_rx = packet_rx_reserve_get(2);
    c1ca:	2002      	movs	r0, #2
    c1cc:	f7fd fdd0 	bl	9d70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c1d0:	b990      	cbnz	r0, c1f8 <event_connection_prepare+0x630>
    c1d2:	4a06      	ldr	r2, [pc, #24]	; (c1ec <event_connection_prepare+0x624>)
		LL_ASSERT(node_rx);
    c1d4:	4907      	ldr	r1, [pc, #28]	; (c1f4 <event_connection_prepare+0x62c>)
    c1d6:	e502      	b.n	bbde <event_connection_prepare+0x16>
    c1d8:	20000a44 	.word	0x20000a44
    c1dc:	00016902 	.word	0x00016902
    c1e0:	0000a651 	.word	0x0000a651
    c1e4:	20003dc0 	.word	0x20003dc0
    c1e8:	00016891 	.word	0x00016891
    c1ec:	000168a5 	.word	0x000168a5
    c1f0:	0000b0c5 	.word	0x0000b0c5
    c1f4:	00016ff5 	.word	0x00016ff5
			node_rx->hdr.handle = conn->handle;
    c1f8:	8c23      	ldrh	r3, [r4, #32]
    c1fa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c1fc:	2308      	movs	r3, #8
    c1fe:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c200:	2300      	movs	r3, #0
    c202:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c204:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c208:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c20a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c20e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c210:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c214:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c216:	f7fe ff7d 	bl	b114 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c21a:	6823      	ldr	r3, [r4, #0]
    c21c:	6866      	ldr	r6, [r4, #4]
    c21e:	2b00      	cmp	r3, #0
    c220:	da09      	bge.n	c236 <event_connection_prepare+0x66e>
			u32_t ticks_prepare_to_start =
    c222:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c228:	42b0      	cmp	r0, r6
    c22a:	bf2c      	ite	cs
    c22c:	4480      	addcs	r8, r0
    c22e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c230:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c232:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c236:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c238:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c23c:	49ce      	ldr	r1, [pc, #824]	; (c578 <event_connection_prepare+0x9b0>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c23e:	fb13 f307 	smulbb	r3, r3, r7
    c242:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c244:	fbb3 f2fa 	udiv	r2, r3, sl
    c248:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c24c:	fb1a f009 	smulbb	r0, sl, r9
    c250:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c252:	4283      	cmp	r3, r0
    c254:	f080 80b9 	bcs.w	c3ca <event_connection_prepare+0x802>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c258:	1ac0      	subs	r0, r0, r3
    c25a:	f240 1223 	movw	r2, #291	; 0x123
    c25e:	4342      	muls	r2, r0
    c260:	17c3      	asrs	r3, r0, #31
    c262:	fb01 2303 	mla	r3, r1, r3, r2
    c266:	fba0 0101 	umull	r0, r1, r0, r1
    c26a:	4419      	add	r1, r3
    c26c:	a3c0      	add	r3, pc, #768	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c272:	f7f3 ffcf 	bl	214 <__aeabi_uldivmod>
    c276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c27a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c27e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c280:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c282:	f8df b324 	ldr.w	fp, [pc, #804]	; c5a8 <event_connection_prepare+0x9e0>
    c286:	1bdb      	subs	r3, r3, r7
    c288:	444b      	add	r3, r9
    c28a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c28c:	6823      	ldr	r3, [r4, #0]
    c28e:	42b3      	cmp	r3, r6
    c290:	bf38      	it	cc
    c292:	4633      	movcc	r3, r6
    c294:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c296:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c29a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c29e:	2b00      	cmp	r3, #0
    c2a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c2a4:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c2a6:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c2aa:	f280 809f 	bge.w	c3ec <event_connection_prepare+0x824>
				conn->slave.window_widening_periodic_us *
    c2ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c2b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c2b2:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c2b6:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c2ba:	4ab0      	ldr	r2, [pc, #704]	; (c57c <event_connection_prepare+0x9b4>)
    c2bc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c2c0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c2c4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c2c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c2cc:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c2d0:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c2d2:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c2d4:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c2d8:	4ba9      	ldr	r3, [pc, #676]	; (c580 <event_connection_prepare+0x9b8>)
				conn->llcp.conn_upd.win_size * 1250;
    c2da:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c2de:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c2e2:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c2e6:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c2e8:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c2ec:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c2ee:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c2f0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c2f2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c2f4:	429f      	cmp	r7, r3
    c2f6:	bf94      	ite	ls
    c2f8:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c2fa:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c2fc:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c2fe:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c300:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c302:	fba0 010b 	umull	r0, r1, r0, fp
    c306:	a39a      	add	r3, pc, #616	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c308:	e9d3 2300 	ldrd	r2, r3, [r3]
    c30c:	f7f3 ff82 	bl	214 <__aeabi_uldivmod>
    c310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c312:	1a1b      	subs	r3, r3, r0
    c314:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c318:	fbb3 f0f8 	udiv	r0, r3, r8
    c31c:	fb08 f000 	mul.w	r0, r8, r0
    c320:	a393      	add	r3, pc, #588	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c322:	e9d3 2300 	ldrd	r2, r3, [r3]
    c326:	fba0 010b 	umull	r0, r1, r0, fp
    c32a:	f7f3 ff73 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c32e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c330:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c334:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c338:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c33c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c33e:	f242 7110 	movw	r1, #10000	; 0x2710
    c342:	fb01 6303 	mla	r3, r1, r3, r6
    c346:	3b01      	subs	r3, #1
    c348:	fbb3 f3f6 	udiv	r3, r3, r6
    c34c:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c34e:	4b8d      	ldr	r3, [pc, #564]	; (c584 <event_connection_prepare+0x9bc>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c350:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c354:	4433      	add	r3, r6
    c356:	fbb3 f3f6 	udiv	r3, r3, r6
    c35a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c35e:	4b8a      	ldr	r3, [pc, #552]	; (c588 <event_connection_prepare+0x9c0>)
    c360:	4433      	add	r3, r6
    c362:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c366:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c368:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c36a:	4299      	cmp	r1, r3
    c36c:	bfc4      	itt	gt
    c36e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c372:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c374:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c378:	bfc8      	it	gt
    c37a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c37c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c380:	bfc8      	it	gt
    c382:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c384:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c388:	bf08      	it	eq
    c38a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c38e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c392:	2000      	movs	r0, #0
    c394:	2101      	movs	r1, #1
    c396:	f006 f807 	bl	123a8 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c39a:	2200      	movs	r2, #0
    c39c:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c39e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c3a0:	4610      	mov	r0, r2
    c3a2:	f7fb f81d 	bl	73e0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3a6:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c3aa:	f641 2385 	movw	r3, #6789	; 0x1a85
    c3ae:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c3b0:	3207      	adds	r2, #7
		ticker_status =
    c3b2:	9300      	str	r3, [sp, #0]
    c3b4:	b2d2      	uxtb	r2, r2
    c3b6:	4b75      	ldr	r3, [pc, #468]	; (c58c <event_connection_prepare+0x9c4>)
    c3b8:	4608      	mov	r0, r1
    c3ba:	f7fb fe8b 	bl	80d4 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3be:	f030 0802 	bics.w	r8, r0, #2
    c3c2:	d020      	beq.n	c406 <event_connection_prepare+0x83e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c3c4:	4a72      	ldr	r2, [pc, #456]	; (c590 <event_connection_prepare+0x9c8>)
    c3c6:	4973      	ldr	r1, [pc, #460]	; (c594 <event_connection_prepare+0x9cc>)
    c3c8:	e409      	b.n	bbde <event_connection_prepare+0x16>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c3ca:	fb0a 3212 	mls	r2, sl, r2, r3
    c3ce:	b292      	uxth	r2, r2
    c3d0:	fba2 0101 	umull	r0, r1, r2, r1
    c3d4:	f240 1323 	movw	r3, #291	; 0x123
    c3d8:	fb03 1102 	mla	r1, r3, r2, r1
    c3dc:	a364      	add	r3, pc, #400	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3e2:	f7f3 ff17 	bl	214 <__aeabi_uldivmod>
    c3e6:	eba8 0300 	sub.w	r3, r8, r0
    c3ea:	e748      	b.n	c27e <event_connection_prepare+0x6b6>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c3ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    c3ee:	a360      	add	r3, pc, #384	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c3f4:	fba1 010b 	umull	r0, r1, r1, fp
    c3f8:	f7f3 ff0c 	bl	214 <__aeabi_uldivmod>
    c3fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c400:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c402:	4635      	mov	r5, r6
    c404:	e796      	b.n	c334 <event_connection_prepare+0x76c>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c406:	fba5 ab0b 	umull	sl, fp, r5, fp
    c40a:	a359      	add	r3, pc, #356	; (adr r3, c570 <event_connection_prepare+0x9a8>)
    c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c410:	4650      	mov	r0, sl
    c412:	4659      	mov	r1, fp
    c414:	f7f3 fefe 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c418:	4a5f      	ldr	r2, [pc, #380]	; (c598 <event_connection_prepare+0x9d0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c41a:	f894 6020 	ldrb.w	r6, [r4, #32]
    c41e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c422:	2307      	movs	r3, #7
    c424:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c428:	2100      	movs	r1, #0
    c42a:	4343      	muls	r3, r0
    c42c:	fb02 3301 	mla	r3, r2, r1, r3
    c430:	fba0 0102 	umull	r0, r1, r0, r2
    c434:	ebba 0000 	subs.w	r0, sl, r0
    c438:	4419      	add	r1, r3
    c43a:	eb6b 0101 	sbc.w	r1, fp, r1
    c43e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c442:	2300      	movs	r3, #0
    c444:	f7f3 fee6 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c448:	68e3      	ldr	r3, [r4, #12]
    c44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c44c:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c450:	4952      	ldr	r1, [pc, #328]	; (c59c <event_connection_prepare+0x9d4>)
		ticker_status =
    c452:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c454:	441a      	add	r2, r3
    c456:	4613      	mov	r3, r2
    c458:	4a51      	ldr	r2, [pc, #324]	; (c5a0 <event_connection_prepare+0x9d8>)
		ticker_status =
    c45a:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c45c:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c460:	bf38      	it	cc
    c462:	460a      	movcc	r2, r1
    c464:	3607      	adds	r6, #7
		ticker_status =
    c466:	f641 2195 	movw	r1, #6805	; 0x1a95
    c46a:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c46c:	b2f6      	uxtb	r6, r6
		ticker_status =
    c46e:	4947      	ldr	r1, [pc, #284]	; (c58c <event_connection_prepare+0x9c4>)
    c470:	9107      	str	r1, [sp, #28]
    c472:	9205      	str	r2, [sp, #20]
    c474:	9406      	str	r4, [sp, #24]
    c476:	f8cd 800c 	str.w	r8, [sp, #12]
    c47a:	9501      	str	r5, [sp, #4]
    c47c:	9700      	str	r7, [sp, #0]
    c47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c480:	4632      	mov	r2, r6
    c482:	4641      	mov	r1, r8
    c484:	4640      	mov	r0, r8
    c486:	f7fb fd87 	bl	7f98 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c48a:	f030 0002 	bics.w	r0, r0, #2
    c48e:	d199      	bne.n	c3c4 <event_connection_prepare+0x7fc>
		if (mayfly_was_enabled) {
    c490:	f1b9 0f00 	cmp.w	r9, #0
    c494:	f000 835d 	beq.w	cb52 <event_connection_prepare+0xf8a>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c498:	2201      	movs	r2, #1
    c49a:	4611      	mov	r1, r2
}
    c49c:	b00f      	add	sp, #60	; 0x3c
    c49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c4a2:	f7fa bf9d 	b.w	73e0 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    c4a6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d07e      	beq.n	c5ac <event_connection_prepare+0x9e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4ae:	483d      	ldr	r0, [pc, #244]	; (c5a4 <event_connection_prepare+0x9dc>)
    c4b0:	f7fa fef3 	bl	729a <mem_acquire>
		if (node_tx) {
    c4b4:	4607      	mov	r7, r0
    c4b6:	b1e8      	cbz	r0, c4f4 <event_connection_prepare+0x92c>
			conn->llcp.chan_map.initiate = 0;
    c4b8:	2300      	movs	r3, #0
    c4ba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c4be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c4c0:	3306      	adds	r3, #6
    c4c2:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c4c4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4c8:	7903      	ldrb	r3, [r0, #4]
    c4ca:	f043 0303 	orr.w	r3, r3, #3
    c4ce:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c4d0:	2308      	movs	r3, #8
    c4d2:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c4d4:	2301      	movs	r3, #1
    c4d6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c4d8:	2205      	movs	r2, #5
    c4da:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c4de:	3008      	adds	r0, #8
    c4e0:	f7f5 fbb1 	bl	1c46 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c4e4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c4e8:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c4ec:	4639      	mov	r1, r7
    c4ee:	4620      	mov	r0, r4
    c4f0:	f7ff fa9c 	bl	ba2c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c4f4:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c4f8:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c4fc:	429a      	cmp	r2, r3
    c4fe:	d01e      	beq.n	c53e <event_connection_prepare+0x976>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c500:	2005      	movs	r0, #5
    c502:	f7ff f807 	bl	b514 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c506:	4827      	ldr	r0, [pc, #156]	; (c5a4 <event_connection_prepare+0x9dc>)
    c508:	f7fa fec7 	bl	729a <mem_acquire>
		if (node_tx) {
    c50c:	4601      	mov	r1, r0
    c50e:	b1b0      	cbz	r0, c53e <event_connection_prepare+0x976>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c510:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c514:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c518:	7903      	ldrb	r3, [r0, #4]
    c51a:	f043 0303 	orr.w	r3, r3, #3
    c51e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c520:	2302      	movs	r3, #2
    c522:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c524:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c526:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c52a:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c52c:	4620      	mov	r0, r4
    c52e:	f7ff fa7d 	bl	ba2c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c532:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c534:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c536:	bf98      	it	ls
    c538:	3301      	addls	r3, #1
    c53a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c53e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c542:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c546:	429a      	cmp	r2, r3
    c548:	f000 82ea 	beq.w	cb20 <event_connection_prepare+0xf58>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c54c:	2005      	movs	r0, #5
    c54e:	f7fe ffe1 	bl	b514 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
    c552:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c556:	f003 0303 	and.w	r3, r3, #3
    c55a:	2b03      	cmp	r3, #3
    c55c:	f200 830b 	bhi.w	cb76 <event_connection_prepare+0xfae>
    c560:	e8df f013 	tbh	[pc, r3, lsl #1]
    c564:	02de02a1 	.word	0x02de02a1
    c568:	02fa02de 	.word	0x02fa02de
    c56c:	f3af 8000 	nop.w
    c570:	1afd498d 	.word	0x1afd498d
    c574:	00000007 	.word	0x00000007
    c578:	09ce5400 	.word	0x09ce5400
    c57c:	00016c3e 	.word	0x00016c3e
    c580:	000f4240 	.word	0x000f4240
    c584:	026259ff 	.word	0x026259ff
    c588:	01c9c37f 	.word	0x01c9c37f
    c58c:	0000a9b9 	.word	0x0000a9b9
    c590:	000168a5 	.word	0x000168a5
    c594:	00016a61 	.word	0x00016a61
    c598:	1afd498d 	.word	0x1afd498d
    c59c:	0000cce5 	.word	0x0000cce5
    c5a0:	0000cce9 	.word	0x0000cce9
    c5a4:	20000a44 	.word	0x20000a44
    c5a8:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c5ac:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c5b0:	1af3      	subs	r3, r6, r3
    c5b2:	041f      	lsls	r7, r3, #16
    c5b4:	d49e      	bmi.n	c4f4 <event_connection_prepare+0x92c>
		conn->llcp_ack = conn->llcp_req;
    c5b6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c5ba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c5be:	f104 0717 	add.w	r7, r4, #23
    c5c2:	2205      	movs	r2, #5
    c5c4:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c5c8:	4638      	mov	r0, r7
    c5ca:	f7f5 fb3c 	bl	1c46 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c5ce:	2105      	movs	r1, #5
    c5d0:	4638      	mov	r0, r7
    c5d2:	f7fb f80d 	bl	75f0 <util_ones_count_get>
		conn->data_chan_count =
    c5d6:	7f63      	ldrb	r3, [r4, #29]
    c5d8:	f360 0305 	bfi	r3, r0, #0, #6
    c5dc:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c5de:	2301      	movs	r3, #1
    c5e0:	7723      	strb	r3, [r4, #28]
    c5e2:	e787      	b.n	c4f4 <event_connection_prepare+0x92c>
	if (conn->llcp.encryption.initiate) {
    c5e4:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c5e8:	f1b9 0f00 	cmp.w	r9, #0
    c5ec:	d182      	bne.n	c4f4 <event_connection_prepare+0x92c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c5ee:	48d5      	ldr	r0, [pc, #852]	; (c944 <event_connection_prepare+0xd7c>)
    c5f0:	f7fa fe53 	bl	729a <mem_acquire>
	if (!node_tx) {
    c5f4:	4607      	mov	r7, r0
    c5f6:	2800      	cmp	r0, #0
    c5f8:	f43f af7c 	beq.w	c4f4 <event_connection_prepare+0x92c>
	if (!conn->role) {
    c5fc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c600:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c602:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c606:	db4d      	blt.n	c6a4 <event_connection_prepare+0xadc>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c608:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c60c:	465b      	mov	r3, fp
    c60e:	464a      	mov	r2, r9
    c610:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c614:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c618:	f005 fa48 	bl	11aac <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c61c:	2210      	movs	r2, #16
    c61e:	4659      	mov	r1, fp
    c620:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c624:	f7f5 fb0f 	bl	1c46 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c628:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c62c:	2208      	movs	r2, #8
    c62e:	f204 1033 	addw	r0, r4, #307	; 0x133
    c632:	f7f5 fb08 	bl	1c46 <memcpy>
		conn->ccm_rx.direction = 0;
    c636:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c63a:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c63e:	f369 0300 	bfi	r3, r9, #0, #1
    c642:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c646:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c64a:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c64e:	f043 0301 	orr.w	r3, r3, #1
    c652:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c656:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c65a:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c65e:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c662:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c666:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c66a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c66e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c672:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c676:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c67a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c67e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c682:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c686:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c68a:	4651      	mov	r1, sl
    c68c:	4620      	mov	r0, r4
    c68e:	f7ff fa5b 	bl	bb48 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c692:	4639      	mov	r1, r7
    c694:	4620      	mov	r0, r4
    c696:	f7ff f9c9 	bl	ba2c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c69a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c69e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c6a2:	e727      	b.n	c4f4 <event_connection_prepare+0x92c>
	else if (!conn->pause_tx || conn->refresh) {
    c6a4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c6a8:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c6ac:	2b08      	cmp	r3, #8
    c6ae:	f000 80a2 	beq.w	c7f6 <event_connection_prepare+0xc2e>
		if (conn->llcp.encryption.error_code) {
    c6b2:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c6b6:	f1b9 0f00 	cmp.w	r9, #0
    c6ba:	d020      	beq.n	c6fe <event_connection_prepare+0xb36>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c6bc:	7903      	ldrb	r3, [r0, #4]
    c6be:	f043 0303 	orr.w	r3, r3, #3
    c6c2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c6c4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c6c8:	0698      	lsls	r0, r3, #26
    c6ca:	d512      	bpl.n	c6f2 <event_connection_prepare+0xb2a>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c6cc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c6d0:	0759      	lsls	r1, r3, #29
    c6d2:	d50e      	bpl.n	c6f2 <event_connection_prepare+0xb2a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c6d4:	2311      	movs	r3, #17
    c6d6:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c6d8:	2303      	movs	r3, #3
    c6da:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c6dc:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c6e0:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c6e2:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c6e4:	797b      	ldrb	r3, [r7, #5]
    c6e6:	3301      	adds	r3, #1
    c6e8:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c6ea:	2300      	movs	r3, #0
    c6ec:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c6f0:	e7cf      	b.n	c692 <event_connection_prepare+0xaca>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c6f2:	230d      	movs	r3, #13
    c6f4:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c6f6:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c6fa:	2301      	movs	r3, #1
    c6fc:	e7f1      	b.n	c6e2 <event_connection_prepare+0xb1a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c6fe:	4891      	ldr	r0, [pc, #580]	; (c944 <event_connection_prepare+0xd7c>)
    c700:	f7fa fdcb 	bl	729a <mem_acquire>
	if (!node_tx) {
    c704:	4682      	mov	sl, r0
    c706:	2800      	cmp	r0, #0
    c708:	f000 82e5 	beq.w	ccd6 <event_connection_prepare+0x110e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c70c:	7903      	ldrb	r3, [r0, #4]
    c70e:	f043 0303 	orr.w	r3, r3, #3
    c712:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c714:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c718:	230d      	movs	r3, #13
    c71a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c71c:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c720:	f100 0308 	add.w	r3, r0, #8
    c724:	4619      	mov	r1, r3
    c726:	2208      	movs	r2, #8
    c728:	6868      	ldr	r0, [r5, #4]
    c72a:	930d      	str	r3, [sp, #52]	; 0x34
    c72c:	f006 fb48 	bl	12dc0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c730:	f10a 0310 	add.w	r3, sl, #16
    c734:	4619      	mov	r1, r3
    c736:	465a      	mov	r2, fp
    c738:	6868      	ldr	r0, [r5, #4]
    c73a:	930b      	str	r3, [sp, #44]	; 0x2c
    c73c:	f006 fb40 	bl	12dc0 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c742:	2208      	movs	r2, #8
    c744:	4619      	mov	r1, r3
    c746:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c74a:	f7f5 fa7c 	bl	1c46 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c74e:	465a      	mov	r2, fp
    c750:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c752:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c756:	f7f5 fa76 	bl	1c46 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c75a:	4651      	mov	r1, sl
    c75c:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c75e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c762:	f7ff f963 	bl	ba2c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c766:	4653      	mov	r3, sl
    c768:	464a      	mov	r2, r9
    c76a:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c76e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c772:	f005 f99b 	bl	11aac <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c776:	2210      	movs	r2, #16
    c778:	4651      	mov	r1, sl
    c77a:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c77e:	f7f5 fa62 	bl	1c46 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c782:	2208      	movs	r2, #8
    c784:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c788:	f204 1033 	addw	r0, r4, #307	; 0x133
    c78c:	f7f5 fa5b 	bl	1c46 <memcpy>
			conn->ccm_rx.direction = 1;
    c790:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c794:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c798:	f043 0301 	orr.w	r3, r3, #1
    c79c:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c7a0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c7a4:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c7a8:	f369 0300 	bfi	r3, r9, #0, #1
    c7ac:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c7b0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c7b4:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c7b8:	f043 0310 	orr.w	r3, r3, #16
    c7bc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7c0:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c7c2:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7c6:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c7ca:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c7ce:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c7d2:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c7d6:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c7da:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c7de:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c7e2:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c7e6:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7ea:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c7ec:	2301      	movs	r3, #1
    c7ee:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c7f0:	2305      	movs	r3, #5
    c7f2:	71fb      	strb	r3, [r7, #7]
    c7f4:	e74d      	b.n	c692 <event_connection_prepare+0xaca>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c7f6:	4651      	mov	r1, sl
    c7f8:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    c7fc:	f7ff f9a4 	bl	bb48 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c800:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    c804:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c808:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c80c:	f369 03c3 	bfi	r3, r9, #3, #1
    c810:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c814:	e73d      	b.n	c692 <event_connection_prepare+0xaca>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c816:	484b      	ldr	r0, [pc, #300]	; (c944 <event_connection_prepare+0xd7c>)
    c818:	f7fa fd3f 	bl	729a <mem_acquire>
	if (node_tx) {
    c81c:	4607      	mov	r7, r0
    c81e:	2800      	cmp	r0, #0
    c820:	f43f ae68 	beq.w	c4f4 <event_connection_prepare+0x92c>
		conn->llcp_ack = conn->llcp_req;
    c824:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c828:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c82c:	4b46      	ldr	r3, [pc, #280]	; (c948 <event_connection_prepare+0xd80>)
    c82e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c832:	7903      	ldrb	r3, [r0, #4]
    c834:	f043 0303 	orr.w	r3, r3, #3
    c838:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c83a:	2309      	movs	r3, #9
    c83c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c83e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c842:	2b00      	cmp	r3, #0
    c844:	bfac      	ite	ge
    c846:	2308      	movge	r3, #8
    c848:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c84a:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c84c:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c84e:	2100      	movs	r1, #0
    c850:	4410      	add	r0, r2
    c852:	f7f5 fa24 	bl	1c9e <memset>
			conn->llcp_features & 0xFF;
    c856:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c85a:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c85c:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c85e:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c860:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c862:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c864:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c866:	4620      	mov	r0, r4
    c868:	f7ff f8e0 	bl	ba2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c86c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c870:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c874:	e63e      	b.n	c4f4 <event_connection_prepare+0x92c>
	if (conn->llcp_version.tx == 0) {
    c876:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c87a:	07da      	lsls	r2, r3, #31
    c87c:	d424      	bmi.n	c8c8 <event_connection_prepare+0xd00>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c87e:	4831      	ldr	r0, [pc, #196]	; (c944 <event_connection_prepare+0xd7c>)
    c880:	f7fa fd0b 	bl	729a <mem_acquire>
		if (node_tx) {
    c884:	4601      	mov	r1, r0
    c886:	2800      	cmp	r0, #0
    c888:	f43f ae34 	beq.w	c4f4 <event_connection_prepare+0x92c>
			conn->llcp_ack = conn->llcp_req;
    c88c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c890:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c894:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c898:	f043 0301 	orr.w	r3, r3, #1
    c89c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c8a0:	7903      	ldrb	r3, [r0, #4]
    c8a2:	f043 0303 	orr.w	r3, r3, #3
    c8a6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c8a8:	2306      	movs	r3, #6
    c8aa:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c8ac:	230c      	movs	r3, #12
    c8ae:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c8b0:	2309      	movs	r3, #9
    c8b2:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c8b4:	f06f 030e 	mvn.w	r3, #14
    c8b8:	7243      	strb	r3, [r0, #9]
    c8ba:	2305      	movs	r3, #5
    c8bc:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c8be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8c2:	72c3      	strb	r3, [r0, #11]
    c8c4:	7303      	strb	r3, [r0, #12]
    c8c6:	e7ce      	b.n	c866 <event_connection_prepare+0xc9e>
	} else if (conn->llcp_version.rx != 0) {
    c8c8:	079b      	lsls	r3, r3, #30
    c8ca:	d523      	bpl.n	c914 <event_connection_prepare+0xd4c>
		conn->llcp_ack = conn->llcp_req;
    c8cc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8d0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c8d4:	2002      	movs	r0, #2
    c8d6:	f7fd fa4b 	bl	9d70 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c8da:	b908      	cbnz	r0, c8e0 <event_connection_prepare+0xd18>
    c8dc:	4a1b      	ldr	r2, [pc, #108]	; (c94c <event_connection_prepare+0xd84>)
    c8de:	e479      	b.n	c1d4 <event_connection_prepare+0x60c>
		node_rx->hdr.handle = conn->handle;
    c8e0:	8c23      	ldrh	r3, [r4, #32]
    c8e2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c8e4:	2301      	movs	r3, #1
    c8e6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c8e8:	7a03      	ldrb	r3, [r0, #8]
    c8ea:	f043 0303 	orr.w	r3, r3, #3
    c8ee:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c8f0:	2306      	movs	r3, #6
    c8f2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c8f4:	230c      	movs	r3, #12
    c8f6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c8f8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c8fc:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c8fe:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c902:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c906:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c90a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c90e:	f7fe fc01 	bl	b114 <packet_rx_enqueue>
    c912:	e5ef      	b.n	c4f4 <event_connection_prepare+0x92c>
		LL_ASSERT(0);
    c914:	4a0d      	ldr	r2, [pc, #52]	; (c94c <event_connection_prepare+0xd84>)
    c916:	f7ff baec 	b.w	bef2 <event_connection_prepare+0x32a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c91a:	480a      	ldr	r0, [pc, #40]	; (c944 <event_connection_prepare+0xd7c>)
    c91c:	f7fa fcbd 	bl	729a <mem_acquire>
	if (node_tx) {
    c920:	4601      	mov	r1, r0
    c922:	2800      	cmp	r0, #0
    c924:	f43f ade6 	beq.w	c4f4 <event_connection_prepare+0x92c>
		conn->llcp_ack = conn->llcp_req;
    c928:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c92c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c930:	7903      	ldrb	r3, [r0, #4]
    c932:	f043 0303 	orr.w	r3, r3, #3
    c936:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c938:	2301      	movs	r3, #1
    c93a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c93c:	2312      	movs	r3, #18
    c93e:	71c3      	strb	r3, [r0, #7]
    c940:	e791      	b.n	c866 <event_connection_prepare+0xc9e>
    c942:	bf00      	nop
    c944:	20000a44 	.word	0x20000a44
    c948:	000141ff 	.word	0x000141ff
    c94c:	000168b9 	.word	0x000168b9
	if (conn->llcp.phy_upd_ind.initiate) {
    c950:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c954:	07d7      	lsls	r7, r2, #31
    c956:	d54e      	bpl.n	c9f6 <event_connection_prepare+0xe2e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c958:	48c8      	ldr	r0, [pc, #800]	; (cc7c <event_connection_prepare+0x10b4>)
    c95a:	f7fa fc9e 	bl	729a <mem_acquire>
		if (node_tx) {
    c95e:	4607      	mov	r7, r0
    c960:	2800      	cmp	r0, #0
    c962:	f43f adc7 	beq.w	c4f4 <event_connection_prepare+0x92c>
			conn->llcp.phy_upd_ind.initiate = 0;
    c966:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c96a:	f36f 0300 	bfc	r3, #0, #1
    c96e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c972:	b2db      	uxtb	r3, r3
    c974:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c978:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c97c:	d135      	bne.n	c9ea <event_connection_prepare+0xe22>
				conn->llcp_ack = conn->llcp_req;
    c97e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c982:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c986:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c988:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c98c:	d517      	bpl.n	c9be <event_connection_prepare+0xdf6>
					node_rx = packet_rx_reserve_get(2);
    c98e:	2002      	movs	r0, #2
    c990:	f7fd f9ee 	bl	9d70 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c994:	b908      	cbnz	r0, c99a <event_connection_prepare+0xdd2>
		LL_ASSERT(node_rx);
    c996:	4aba      	ldr	r2, [pc, #744]	; (cc80 <event_connection_prepare+0x10b8>)
    c998:	e41c      	b.n	c1d4 <event_connection_prepare+0x60c>
					node_rx->hdr.handle = conn->handle;
    c99a:	8c23      	ldrh	r3, [r4, #32]
    c99c:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c99e:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c9a2:	230c      	movs	r3, #12
    c9a4:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c9a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c9aa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c9ae:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c9b0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c9b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c9b8:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c9ba:	f7fe fbab 	bl	b114 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9be:	793b      	ldrb	r3, [r7, #4]
    c9c0:	f043 0303 	orr.w	r3, r3, #3
    c9c4:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c9c6:	2305      	movs	r3, #5
    c9c8:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c9ca:	2318      	movs	r3, #24
    c9cc:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c9ce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c9d2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c9d6:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c9d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c9dc:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c9e0:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c9e2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c9e6:	817b      	strh	r3, [r7, #10]
    c9e8:	e580      	b.n	c4ec <event_connection_prepare+0x924>
								 conn->latency +
    c9ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c9ec:	3306      	adds	r3, #6
    c9ee:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c9f0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c9f4:	e7e3      	b.n	c9be <event_connection_prepare+0xdf6>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c9f6:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c9fa:	1af3      	subs	r3, r6, r3
    c9fc:	0419      	lsls	r1, r3, #16
    c9fe:	f53f ad79 	bmi.w	c4f4 <event_connection_prepare+0x92c>
		conn->llcp_ack = conn->llcp_req;
    ca02:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ca06:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    ca0a:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    ca0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    ca12:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    ca16:	bf18      	it	ne
    ca18:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    ca1c:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    ca20:	bf1c      	itt	ne
    ca22:	f367 03c5 	bfine	r3, r7, #3, #3
    ca26:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    ca2a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    ca2e:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    ca32:	d008      	beq.n	ca46 <event_connection_prepare+0xe7e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    ca34:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ca38:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    ca3c:	095b      	lsrs	r3, r3, #5
    ca3e:	f363 0702 	bfi	r7, r3, #0, #3
    ca42:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    ca46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ca4a:	461f      	mov	r7, r3
    ca4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ca50:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ca54:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    ca56:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ca5a:	d40b      	bmi.n	ca74 <event_connection_prepare+0xeac>
    ca5c:	b2fb      	uxtb	r3, r7
    ca5e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ca62:	4283      	cmp	r3, r0
    ca64:	d106      	bne.n	ca74 <event_connection_prepare+0xeac>
		    (conn->phy_rx == old_rx)) {
    ca66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    ca6a:	f003 0307 	and.w	r3, r3, #7
    ca6e:	428b      	cmp	r3, r1
    ca70:	f43f ad40 	beq.w	c4f4 <event_connection_prepare+0x92c>
		node_rx = packet_rx_reserve_get(2);
    ca74:	2002      	movs	r0, #2
    ca76:	f7fd f97b 	bl	9d70 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ca7a:	2800      	cmp	r0, #0
    ca7c:	d08b      	beq.n	c996 <event_connection_prepare+0xdce>
		node_rx->hdr.handle = conn->handle;
    ca7e:	8c23      	ldrh	r3, [r4, #32]
    ca80:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ca82:	230c      	movs	r3, #12
    ca84:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    ca86:	2300      	movs	r3, #0
    ca88:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    ca8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ca8e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ca92:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    ca94:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ca98:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ca9c:	7343      	strb	r3, [r0, #13]
    ca9e:	e736      	b.n	c90e <event_connection_prepare+0xd46>
			LL_ASSERT(0);
    caa0:	4a78      	ldr	r2, [pc, #480]	; (cc84 <event_connection_prepare+0x10bc>)
    caa2:	f7ff ba26 	b.w	bef2 <event_connection_prepare+0x32a>
		free_count_rx = packet_rx_acquired_count_get() +
    caa6:	f7fd f94d 	bl	9d44 <packet_rx_acquired_count_get>
    caaa:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    caac:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cab0:	f7fa fc22 	bl	72f8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cab4:	4438      	add	r0, r7
    cab6:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cab8:	28ff      	cmp	r0, #255	; 0xff
    caba:	d903      	bls.n	cac4 <event_connection_prepare+0xefc>
		LL_ASSERT(free_count_rx <= 0xFF);
    cabc:	4a72      	ldr	r2, [pc, #456]	; (cc88 <event_connection_prepare+0x10c0>)
    cabe:	4973      	ldr	r1, [pc, #460]	; (cc8c <event_connection_prepare+0x10c4>)
    cac0:	f7ff b88d 	b.w	bbde <event_connection_prepare+0x16>
		if (_radio.packet_rx_data_count != free_count_rx) {
    cac4:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cac8:	4283      	cmp	r3, r0
    caca:	d129      	bne.n	cb20 <event_connection_prepare+0xf58>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cacc:	486b      	ldr	r0, [pc, #428]	; (cc7c <event_connection_prepare+0x10b4>)
    cace:	f7fa fbe4 	bl	729a <mem_acquire>
		if (!node_tx) {
    cad2:	4601      	mov	r1, r0
    cad4:	b320      	cbz	r0, cb20 <event_connection_prepare+0xf58>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cad6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    cada:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cade:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    cae2:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cae4:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cae6:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cae8:	f365 0301 	bfi	r3, r5, #0, #2
    caec:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caf0:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    caf2:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caf4:	f043 0303 	orr.w	r3, r3, #3
    caf8:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    cafa:	2309      	movs	r3, #9
    cafc:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    cafe:	2314      	movs	r3, #20
    cb00:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    cb02:	231b      	movs	r3, #27
    cb04:	720b      	strb	r3, [r1, #8]
    cb06:	2300      	movs	r3, #0
    cb08:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cb0a:	2348      	movs	r3, #72	; 0x48
    cb0c:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    cb0e:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cb10:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    cb12:	4620      	mov	r0, r4
    cb14:	f7fe ff8a 	bl	ba2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cb18:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cb1c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    cb20:	f894 3020 	ldrb.w	r3, [r4, #32]
    cb24:	f994 501d 	ldrsb.w	r5, [r4, #29]
    cb28:	4859      	ldr	r0, [pc, #356]	; (cc90 <event_connection_prepare+0x10c8>)
    cb2a:	495a      	ldr	r1, [pc, #360]	; (cc94 <event_connection_prepare+0x10cc>)
    cb2c:	68a2      	ldr	r2, [r4, #8]
    cb2e:	9403      	str	r4, [sp, #12]
    cb30:	3307      	adds	r3, #7
    cb32:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    cb36:	bf38      	it	cc
    cb38:	4601      	movcc	r1, r0
    cb3a:	b2db      	uxtb	r3, r3
    cb3c:	e88d 000c 	stmia.w	sp, {r2, r3}
    cb40:	9102      	str	r1, [sp, #8]
    cb42:	1d23      	adds	r3, r4, #4
    cb44:	4622      	mov	r2, r4
    cb46:	990c      	ldr	r1, [sp, #48]	; 0x30
    cb48:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    cb4a:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    cb4c:	f7fe fcf0 	bl	b530 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    cb50:	8466      	strh	r6, [r4, #34]	; 0x22
}
    cb52:	b00f      	add	sp, #60	; 0x3c
    cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    cb58:	f7fd f8f4 	bl	9d44 <packet_rx_acquired_count_get>
    cb5c:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    cb5e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cb62:	f7fa fbc9 	bl	72f8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cb66:	4438      	add	r0, r7
    cb68:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cb6a:	28ff      	cmp	r0, #255	; 0xff
    cb6c:	d8a6      	bhi.n	cabc <event_connection_prepare+0xef4>
		if (_radio.packet_rx_data_count != free_count_rx) {
    cb6e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cb72:	4283      	cmp	r3, r0
    cb74:	d002      	beq.n	cb7c <event_connection_prepare+0xfb4>
		LL_ASSERT(0);
    cb76:	4a44      	ldr	r2, [pc, #272]	; (cc88 <event_connection_prepare+0x10c0>)
    cb78:	f7ff b9bb 	b.w	bef2 <event_connection_prepare+0x32a>
		conn->llcp_length.ack = conn->llcp_length.req;
    cb7c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    cb80:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    cb84:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    cb88:	2100      	movs	r1, #0
    cb8a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    cb8e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cb92:	f361 02c3 	bfi	r2, r1, #3, #1
    cb96:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    cb9a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    cb9e:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    cba0:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    cba4:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    cba6:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    cbaa:	f7fa fba5 	bl	72f8 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    cbae:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    cbb2:	b10b      	cbz	r3, cbb8 <event_connection_prepare+0xff0>
			free_count_conn++;
    cbb4:	3001      	adds	r0, #1
    cbb6:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    cbb8:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    cbbc:	b10b      	cbz	r3, cbc2 <event_connection_prepare+0xffa>
			free_count_conn++;
    cbbe:	3001      	adds	r0, #1
    cbc0:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cbc2:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cbc4:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cbc8:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cbca:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cbcc:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cbd0:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cbd2:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cbd4:	d045      	beq.n	cc62 <event_connection_prepare+0x109a>
    cbd6:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    cbda:	42bb      	cmp	r3, r7
    cbdc:	d341      	bcc.n	cc62 <event_connection_prepare+0x109a>
		node_rx = packet_rx_reserve_get(2);
    cbde:	2002      	movs	r0, #2
    cbe0:	f7fd f8c6 	bl	9d70 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cbe4:	2800      	cmp	r0, #0
    cbe6:	d15f      	bne.n	cca8 <event_connection_prepare+0x10e0>
    cbe8:	4a27      	ldr	r2, [pc, #156]	; (cc88 <event_connection_prepare+0x10c0>)
    cbea:	f7ff baf3 	b.w	c1d4 <event_connection_prepare+0x60c>
				if (_radio.packet_rx_acquire == 0) {
    cbee:	b90b      	cbnz	r3, cbf4 <event_connection_prepare+0x102c>
						_radio.packet_rx_count - 1;
    cbf0:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    cbf4:	3b01      	subs	r3, #1
    cbf6:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    cbfa:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    cbfe:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    cc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cc06:	4649      	mov	r1, r9
    cc08:	6818      	ldr	r0, [r3, #0]
    cc0a:	f7fa fb60 	bl	72ce <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    cc0e:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cc12:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cc16:	3a01      	subs	r2, #1
    cc18:	4293      	cmp	r3, r2
    cc1a:	db03      	blt.n	cc24 <event_connection_prepare+0x105c>
    cc1c:	4a1a      	ldr	r2, [pc, #104]	; (cc88 <event_connection_prepare+0x10c0>)
    cc1e:	491e      	ldr	r1, [pc, #120]	; (cc98 <event_connection_prepare+0x10d0>)
    cc20:	f7fe bfdd 	b.w	bbde <event_connection_prepare+0x16>
				_radio.link_rx_data_quota++;
    cc24:	3301      	adds	r3, #1
    cc26:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cc2a:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cc2e:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    cc32:	4293      	cmp	r3, r2
    cc34:	d1db      	bne.n	cbee <event_connection_prepare+0x1026>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cc36:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    cc38:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cc3c:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cc3e:	bf9a      	itte	ls
    cc40:	2334      	movls	r3, #52	; 0x34
    cc42:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cc46:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cc4a:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    cc4e:	fbb2 f2f1 	udiv	r2, r2, r1
    cc52:	b2d2      	uxtb	r2, r2
    cc54:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cc58:	b932      	cbnz	r2, cc68 <event_connection_prepare+0x10a0>
    cc5a:	4a0b      	ldr	r2, [pc, #44]	; (cc88 <event_connection_prepare+0x10c0>)
    cc5c:	490f      	ldr	r1, [pc, #60]	; (cc9c <event_connection_prepare+0x10d4>)
    cc5e:	f7fe bfbe 	b.w	bbde <event_connection_prepare+0x16>
				mem_release(node_rx->hdr.onion.link,
    cc62:	f8df 9040 	ldr.w	r9, [pc, #64]	; cca4 <event_connection_prepare+0x10dc>
    cc66:	e7e0      	b.n	cc2a <event_connection_prepare+0x1062>
			mem_init(_radio.pkt_rx_data_pool,
    cc68:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cc6c:	4b0c      	ldr	r3, [pc, #48]	; (cca0 <event_connection_prepare+0x10d8>)
    cc6e:	f7fa faed 	bl	724c <mem_init>
			packet_rx_allocate(4);
    cc72:	2004      	movs	r0, #4
    cc74:	f7fd f8f4 	bl	9e60 <packet_rx_allocate>
    cc78:	e7b1      	b.n	cbde <event_connection_prepare+0x1016>
    cc7a:	bf00      	nop
    cc7c:	20000a44 	.word	0x20000a44
    cc80:	00016915 	.word	0x00016915
    cc84:	0001692c 	.word	0x0001692c
    cc88:	000168f3 	.word	0x000168f3
    cc8c:	00016aa3 	.word	0x00016aa3
    cc90:	0000cfe9 	.word	0x0000cfe9
    cc94:	0000cd29 	.word	0x0000cd29
    cc98:	00016ace 	.word	0x00016ace
    cc9c:	00016b1c 	.word	0x00016b1c
    cca0:	20000a18 	.word	0x20000a18
    cca4:	20000a30 	.word	0x20000a30
		node_rx->hdr.handle = conn->handle;
    cca8:	8c23      	ldrh	r3, [r4, #32]
    ccaa:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ccac:	2301      	movs	r3, #1
    ccae:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    ccb0:	7a03      	ldrb	r3, [r0, #8]
    ccb2:	f043 0303 	orr.w	r3, r3, #3
    ccb6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    ccb8:	2309      	movs	r3, #9
    ccba:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    ccbc:	2315      	movs	r3, #21
    ccbe:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    ccc0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ccc2:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    ccc4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    ccc6:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    ccc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    ccca:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cccc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    ccce:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    ccd0:	f7fe fa20 	bl	b114 <packet_rx_enqueue>
    ccd4:	e724      	b.n	cb20 <event_connection_prepare+0xf58>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ccd6:	4902      	ldr	r1, [pc, #8]	; (cce0 <event_connection_prepare+0x1118>)
    ccd8:	4638      	mov	r0, r7
    ccda:	f7fa faf8 	bl	72ce <mem_release>
    ccde:	e409      	b.n	c4f4 <event_connection_prepare+0x92c>
    cce0:	20000a44 	.word	0x20000a44

0000cce4 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    cce4:	f7fe bf70 	b.w	bbc8 <event_connection_prepare>

0000cce8 <event_slave_prepare>:
    cce8:	f7fe bf6e 	b.w	bbc8 <event_connection_prepare>

0000ccec <connection_configure>:
{
    ccec:	b510      	push	{r4, lr}
    ccee:	4604      	mov	r4, r0
	radio_reset();
    ccf0:	f004 ffb8 	bl	11c64 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    ccf4:	2000      	movs	r0, #0
    ccf6:	f004 ffdf 	bl	11cb8 <radio_tx_power_set>
	radio_isr_set(isr);
    ccfa:	480a      	ldr	r0, [pc, #40]	; (cd24 <connection_configure+0x38>)
    ccfc:	f004 ff7c 	bl	11bf8 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    cd00:	f104 0010 	add.w	r0, r4, #16
    cd04:	f004 fff6 	bl	11cf4 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    cd08:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    cd0a:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cd0c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cd0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cd12:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cd14:	f240 605b 	movw	r0, #1627	; 0x65b
    cd18:	4319      	orrs	r1, r3
}
    cd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cd1e:	f005 b891 	b.w	11e44 <radio_crc_configure>
    cd22:	bf00      	nop
    cd24:	0000e319 	.word	0x0000e319

0000cd28 <event_slave>:
{
    cd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd2c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cd2e:	4b6a      	ldr	r3, [pc, #424]	; (ced8 <event_slave+0x1b0>)
    cd30:	7cda      	ldrb	r2, [r3, #19]
{
    cd32:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cd34:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cd38:	461d      	mov	r5, r3
    cd3a:	b152      	cbz	r2, cd52 <event_slave+0x2a>
    cd3c:	4a67      	ldr	r2, [pc, #412]	; (cedc <event_slave+0x1b4>)
    cd3e:	4968      	ldr	r1, [pc, #416]	; (cee0 <event_slave+0x1b8>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cd40:	2003      	movs	r0, #3
    cd42:	f7f5 f947 	bl	1fd4 <bt_log>
    cd46:	4040      	eors	r0, r0
    cd48:	f380 8811 	msr	BASEPRI, r0
    cd4c:	f04f 0004 	mov.w	r0, #4
    cd50:	df02      	svc	2
    cd52:	7c1b      	ldrb	r3, [r3, #16]
    cd54:	8c22      	ldrh	r2, [r4, #32]
    cd56:	b2db      	uxtb	r3, r3
    cd58:	3207      	adds	r2, #7
    cd5a:	4293      	cmp	r3, r2
    cd5c:	d002      	beq.n	cd64 <event_slave+0x3c>
    cd5e:	4a5f      	ldr	r2, [pc, #380]	; (cedc <event_slave+0x1b4>)
    cd60:	4960      	ldr	r1, [pc, #384]	; (cee4 <event_slave+0x1bc>)
    cd62:	e7ed      	b.n	cd40 <event_slave+0x18>
	_radio.packet_counter = 0;
    cd64:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cd68:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    cd6c:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cd6e:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    cd70:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cd72:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    cd74:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cd76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cd78:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    cd7c:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    cd7e:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    cd80:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    cd82:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    cd84:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    cd86:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    cd88:	f7ff ffb0 	bl	ccec <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cd8c:	2096      	movs	r0, #150	; 0x96
    cd8e:	f005 f913 	bl	11fb8 <radio_tmr_tifs_set>
				     conn->phy_flags);
    cd92:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    cd96:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd9a:	09d3      	lsrs	r3, r2, #7
    cd9c:	4631      	mov	r1, r6
    cd9e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    cda2:	f000 0007 	and.w	r0, r0, #7
    cda6:	f005 f877 	bl	11e98 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    cdaa:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    cdae:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    cdb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    cdb6:	4620      	mov	r0, r4
    cdb8:	3108      	adds	r1, #8
    cdba:	f7fd faa5 	bl	a308 <rx_packet_set>
	if (conn->data_chan_sel) {
    cdbe:	7f63      	ldrb	r3, [r4, #29]
    cdc0:	f013 0f40 	tst.w	r3, #64	; 0x40
    cdc4:	f104 0217 	add.w	r2, r4, #23
    cdc8:	d059      	beq.n	ce7e <event_slave+0x156>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cdca:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cdcc:	8be1      	ldrh	r1, [r4, #30]
    cdce:	3801      	subs	r0, #1
    cdd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cdd4:	b280      	uxth	r0, r0
    cdd6:	f7fe fde5 	bl	b9a4 <chan_sel_2>
	chan_set(data_chan_use);
    cdda:	f7fe f89b 	bl	af14 <chan_set>
	conn->slave.window_widening_event_us +=
    cdde:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cde0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    cde2:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    cde4:	2200      	movs	r2, #0
    cde6:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    cde8:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    cdea:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    cdec:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    cdee:	bf88      	it	hi
    cdf0:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    cdf2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cdf4:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    cdf6:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    cdf8:	4413      	add	r3, r2
    cdfa:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cdfc:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    cdfe:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    ce00:	f107 0109 	add.w	r1, r7, #9
    ce04:	4630      	mov	r0, r6
    ce06:	f005 f8e3 	bl	11fd0 <radio_tmr_start>
    ce0a:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    ce0c:	f005 f97c 	bl	12108 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    ce10:	4630      	mov	r0, r6
    ce12:	f005 f99b 	bl	1214c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    ce16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    ce18:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    ce1a:	f103 0650 	add.w	r6, r3, #80	; 0x50
    ce1e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    ce22:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ce26:	2101      	movs	r1, #1
    ce28:	f000 0007 	and.w	r0, r0, #7
    ce2c:	f004 ffbb 	bl	11da6 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    ce30:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    ce32:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    ce34:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ce38:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    ce3c:	2802      	cmp	r0, #2
    ce3e:	d03e      	beq.n	cebe <event_slave+0x196>
		return 40;
    ce40:	2804      	cmp	r0, #4
    ce42:	bf0c      	ite	eq
    ce44:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    ce48:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ce4a:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    ce4c:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    ce4e:	f004 ffac 	bl	11daa <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    ce52:	4430      	add	r0, r6
    ce54:	f005 f93a 	bl	120cc <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    ce58:	f894 1020 	ldrb.w	r1, [r4, #32]
    ce5c:	3107      	adds	r1, #7
    ce5e:	463a      	mov	r2, r7
    ce60:	b2c9      	uxtb	r1, r1
    ce62:	4620      	mov	r0, r4
    ce64:	f7fe fa44 	bl	b2f0 <preempt_calc>
    ce68:	4603      	mov	r3, r0
    ce6a:	b350      	cbz	r0, cec2 <event_slave+0x19a>
		_radio.state = STATE_STOP;
    ce6c:	2304      	movs	r3, #4
    ce6e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    ce70:	f004 ffac 	bl	11dcc <radio_disable>
	packet_tx_enqueue(2);
    ce74:	2002      	movs	r0, #2
}
    ce76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    ce7a:	f7fd bf6b 	b.w	ad54 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    ce7e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    ce80:	7fa6      	ldrb	r6, [r4, #30]
    ce82:	fb01 6606 	mla	r6, r1, r6, r6
    ce86:	7fe1      	ldrb	r1, [r4, #31]
    ce88:	2025      	movs	r0, #37	; 0x25
    ce8a:	440e      	add	r6, r1
    ce8c:	fb96 f1f0 	sdiv	r1, r6, r0
    ce90:	fb00 6611 	mls	r6, r0, r1, r6
    ce94:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ce96:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    ce98:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ce9a:	5c51      	ldrb	r1, [r2, r1]
    ce9c:	f006 0607 	and.w	r6, r6, #7
    cea0:	fa41 f606 	asr.w	r6, r1, r6
    cea4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    cea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    ceaa:	d496      	bmi.n	cdda <event_slave+0xb2>
		chan_index = chan_next % chan_count;
    ceac:	fbb0 f1f3 	udiv	r1, r0, r3
    ceb0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    ceb4:	b2c9      	uxtb	r1, r1
    ceb6:	4610      	mov	r0, r2
    ceb8:	f7fc ff28 	bl	9d0c <chan_sel_remap>
    cebc:	e78d      	b.n	cdda <event_slave+0xb2>
		return 24;
    cebe:	2318      	movs	r3, #24
    cec0:	e7c3      	b.n	ce4a <event_slave+0x122>
		ticker_status =
    cec2:	4a09      	ldr	r2, [pc, #36]	; (cee8 <event_slave+0x1c0>)
    cec4:	4601      	mov	r1, r0
    cec6:	f7fb f983 	bl	81d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ceca:	f030 0302 	bics.w	r3, r0, #2
    cece:	d0d1      	beq.n	ce74 <event_slave+0x14c>
    ced0:	4a02      	ldr	r2, [pc, #8]	; (cedc <event_slave+0x1b4>)
    ced2:	4906      	ldr	r1, [pc, #24]	; (ceec <event_slave+0x1c4>)
    ced4:	e734      	b.n	cd40 <event_slave+0x18>
    ced6:	bf00      	nop
    ced8:	200008e8 	.word	0x200008e8
    cedc:	00016945 	.word	0x00016945
    cee0:	00016b4d 	.word	0x00016b4d
    cee4:	00016bdc 	.word	0x00016bdc
    cee8:	0000ab01 	.word	0x0000ab01
    ceec:	00016a61 	.word	0x00016a61

0000cef0 <prepare_pdu_data_tx>:
	    conn->empty ||
    cef0:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    cef4:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cefa:	4604      	mov	r4, r0
    cefc:	460e      	mov	r6, r1
	if (/* empty packet */
    cefe:	d109      	bne.n	cf14 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    cf00:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    cf04:	b131      	cbz	r1, cf14 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    cf06:	f01c 0f08 	tst.w	ip, #8
    cf0a:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    cf0e:	d022      	beq.n	cf56 <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    cf10:	4571      	cmp	r1, lr
    cf12:	d020      	beq.n	cf56 <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    cf14:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cf1c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    cf20:	f004 ffa6 	bl	11e70 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf24:	7803      	ldrb	r3, [r0, #0]
    cf26:	2201      	movs	r2, #1
    cf28:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    cf2c:	2200      	movs	r2, #0
    cf2e:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    cf30:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf34:	7003      	strb	r3, [r0, #0]
    cf36:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    cf38:	b152      	cbz	r2, cf50 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    cf3a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    cf3e:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    cf40:	7803      	ldrb	r3, [r0, #0]
    cf42:	f36f 1347 	bfc	r3, #5, #3
    cf46:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    cf48:	2300      	movs	r3, #0
    cf4a:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    cf4c:	6030      	str	r0, [r6, #0]
    cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    cf50:	f362 1304 	bfi	r3, r2, #4, #1
    cf54:	e7f3      	b.n	cf3e <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    cf56:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    cf5a:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    cf5e:	1d0d      	adds	r5, r1, #4
    cf60:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    cf62:	b913      	cbnz	r3, cf6a <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    cf64:	7843      	ldrb	r3, [r0, #1]
    cf66:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    cf6a:	b122      	cbz	r2, cf76 <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cf6c:	5cab      	ldrb	r3, [r5, r2]
    cf6e:	2701      	movs	r7, #1
    cf70:	f367 0301 	bfi	r3, r7, #0, #2
    cf74:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cf76:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    cf7a:	1abf      	subs	r7, r7, r2
    cf7c:	b2ff      	uxtb	r7, r7
    cf7e:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    cf80:	5cab      	ldrb	r3, [r5, r2]
    cf82:	f36f 1304 	bfc	r3, #4, #1
    cf86:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    cf88:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    cf8c:	f003 0307 	and.w	r3, r3, #7
    cf90:	2b02      	cmp	r3, #2
    cf92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cf94:	bf15      	itete	ne
    cf96:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cf98:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cf9a:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cf9c:	3b0b      	subeq	r3, #11
    cf9e:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cfa0:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    cfa4:	bf18      	it	ne
    cfa6:	3b04      	subne	r3, #4
    cfa8:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    cfac:	bf18      	it	ne
    cfae:	b29b      	uxthne	r3, r3
    cfb0:	4563      	cmp	r3, ip
    cfb2:	bf28      	it	cs
    cfb4:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cfb6:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cfb8:	bf81      	itttt	hi
    cfba:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cfbc:	5cab      	ldrbhi	r3, [r5, r2]
    cfbe:	f043 0310 	orrhi.w	r3, r3, #16
    cfc2:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cfc4:	680b      	ldr	r3, [r1, #0]
    cfc6:	b11b      	cbz	r3, cfd0 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    cfc8:	5cab      	ldrb	r3, [r5, r2]
    cfca:	f043 0310 	orr.w	r3, r3, #16
    cfce:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cfd0:	f1be 0f00 	cmp.w	lr, #0
    cfd4:	d1b4      	bne.n	cf40 <prepare_pdu_data_tx+0x50>
    cfd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cfda:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cfdc:	bf1c      	itt	ne
    cfde:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cfe2:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cfe6:	e7ab      	b.n	cf40 <prepare_pdu_data_tx+0x50>

0000cfe8 <event_master>:
{
    cfe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cfea:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cfec:	4b4f      	ldr	r3, [pc, #316]	; (d12c <event_master+0x144>)
    cfee:	7cd9      	ldrb	r1, [r3, #19]
{
    cff0:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cff2:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cff6:	461d      	mov	r5, r3
    cff8:	b151      	cbz	r1, d010 <event_master+0x28>
    cffa:	4a4d      	ldr	r2, [pc, #308]	; (d130 <event_master+0x148>)
    cffc:	494d      	ldr	r1, [pc, #308]	; (d134 <event_master+0x14c>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cffe:	2003      	movs	r0, #3
    d000:	f7f4 ffe8 	bl	1fd4 <bt_log>
    d004:	4040      	eors	r0, r0
    d006:	f380 8811 	msr	BASEPRI, r0
    d00a:	f04f 0004 	mov.w	r0, #4
    d00e:	df02      	svc	2
    d010:	7c1b      	ldrb	r3, [r3, #16]
    d012:	8c21      	ldrh	r1, [r4, #32]
    d014:	b2db      	uxtb	r3, r3
    d016:	3107      	adds	r1, #7
    d018:	428b      	cmp	r3, r1
    d01a:	d002      	beq.n	d022 <event_master+0x3a>
    d01c:	4a44      	ldr	r2, [pc, #272]	; (d130 <event_master+0x148>)
    d01e:	4946      	ldr	r1, [pc, #280]	; (d138 <event_master+0x150>)
    d020:	e7ed      	b.n	cffe <event_master+0x16>
	_radio.packet_counter = 0;
    d022:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d026:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d02a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d02c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d02e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d030:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d032:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d034:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d036:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d03a:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d03c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d03e:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d040:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d042:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d044:	f7fd fe86 	bl	ad54 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d048:	a901      	add	r1, sp, #4
    d04a:	4620      	mov	r0, r4
    d04c:	f7ff ff50 	bl	cef0 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d050:	9901      	ldr	r1, [sp, #4]
    d052:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d056:	780b      	ldrb	r3, [r1, #0]
    d058:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d05c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d060:	f362 0382 	bfi	r3, r2, #2, #1
    d064:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d066:	4620      	mov	r0, r4
    d068:	f7ff fe40 	bl	ccec <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d06c:	2096      	movs	r0, #150	; 0x96
    d06e:	f004 ffa3 	bl	11fb8 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d072:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d076:	f000 0007 	and.w	r0, r0, #7
    d07a:	f004 ff01 	bl	11e80 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d07e:	9901      	ldr	r1, [sp, #4]
    d080:	4620      	mov	r0, r4
    d082:	f7fd f96d 	bl	a360 <tx_packet_set>
	if (conn->data_chan_sel) {
    d086:	7f63      	ldrb	r3, [r4, #29]
    d088:	f013 0f40 	tst.w	r3, #64	; 0x40
    d08c:	f104 0217 	add.w	r2, r4, #23
    d090:	d021      	beq.n	d0d6 <event_master+0xee>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d092:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d094:	8be1      	ldrh	r1, [r4, #30]
    d096:	3801      	subs	r0, #1
    d098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d09c:	b280      	uxth	r0, r0
    d09e:	f7fe fc81 	bl	b9a4 <chan_sel_2>
	chan_set(data_chan_use);
    d0a2:	f7fd ff37 	bl	af14 <chan_set>
		remainder_us = radio_tmr_start(1,
    d0a6:	68ea      	ldr	r2, [r5, #12]
    d0a8:	f107 0109 	add.w	r1, r7, #9
    d0ac:	2001      	movs	r0, #1
    d0ae:	f004 ff8f 	bl	11fd0 <radio_tmr_start>
		radio_tmr_end_capture();
    d0b2:	f005 f85d 	bl	12170 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d0b6:	f894 1020 	ldrb.w	r1, [r4, #32]
    d0ba:	3107      	adds	r1, #7
    d0bc:	463a      	mov	r2, r7
    d0be:	b2c9      	uxtb	r1, r1
    d0c0:	4620      	mov	r0, r4
    d0c2:	f7fe f915 	bl	b2f0 <preempt_calc>
	if (0 !=
    d0c6:	4603      	mov	r3, r0
    d0c8:	b328      	cbz	r0, d116 <event_master+0x12e>
		_radio.state = STATE_STOP;
    d0ca:	2304      	movs	r3, #4
    d0cc:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d0ce:	f004 fe7d 	bl	11dcc <radio_disable>
}
    d0d2:	b003      	add	sp, #12
    d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d0d6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d0d8:	7fa6      	ldrb	r6, [r4, #30]
    d0da:	fb01 6606 	mla	r6, r1, r6, r6
    d0de:	7fe1      	ldrb	r1, [r4, #31]
    d0e0:	2025      	movs	r0, #37	; 0x25
    d0e2:	440e      	add	r6, r1
    d0e4:	fb96 f1f0 	sdiv	r1, r6, r0
    d0e8:	fb00 6611 	mls	r6, r0, r1, r6
    d0ec:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d0ee:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d0f0:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d0f2:	5c51      	ldrb	r1, [r2, r1]
    d0f4:	f006 0607 	and.w	r6, r6, #7
    d0f8:	fa41 f606 	asr.w	r6, r1, r6
    d0fc:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d0fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d102:	d4ce      	bmi.n	d0a2 <event_master+0xba>
		chan_index = chan_next % chan_count;
    d104:	fbb0 f1f3 	udiv	r1, r0, r3
    d108:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d10c:	b2c9      	uxtb	r1, r1
    d10e:	4610      	mov	r0, r2
    d110:	f7fc fdfc 	bl	9d0c <chan_sel_remap>
    d114:	e7c5      	b.n	d0a2 <event_master+0xba>
		ticker_status =
    d116:	4a09      	ldr	r2, [pc, #36]	; (d13c <event_master+0x154>)
    d118:	4601      	mov	r1, r0
    d11a:	f7fb f859 	bl	81d0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d11e:	f030 0302 	bics.w	r3, r0, #2
    d122:	d0d6      	beq.n	d0d2 <event_master+0xea>
    d124:	4a02      	ldr	r2, [pc, #8]	; (d130 <event_master+0x148>)
    d126:	4906      	ldr	r1, [pc, #24]	; (d140 <event_master+0x158>)
    d128:	e769      	b.n	cffe <event_master+0x16>
    d12a:	bf00      	nop
    d12c:	200008e8 	.word	0x200008e8
    d130:	00016951 	.word	0x00016951
    d134:	00016b4d 	.word	0x00016b4d
    d138:	00016bdc 	.word	0x00016bdc
    d13c:	0000ab01 	.word	0x0000ab01
    d140:	00016a61 	.word	0x00016a61

0000d144 <isr_rx_conn_pkt_ctrl>:
{
    d144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d148:	7ac7      	ldrb	r7, [r0, #11]
{
    d14a:	4604      	mov	r4, r0
    d14c:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d14e:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d152:	2f19      	cmp	r7, #25
    d154:	f201 80ab 	bhi.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
    d158:	e8df f017 	tbh	[pc, r7, lsl #1]
    d15c:	007d001a 	.word	0x007d001a
    d160:	00c500b5 	.word	0x00c500b5
    d164:	011b00f3 	.word	0x011b00f3
    d168:	056d0143 	.word	0x056d0143
    d16c:	01b6018a 	.word	0x01b6018a
    d170:	021001e5 	.word	0x021001e5
    d174:	02aa0241 	.word	0x02aa0241
    d178:	02c3019f 	.word	0x02c3019f
    d17c:	04940410 	.word	0x04940410
    d180:	05620548 	.word	0x05620548
    d184:	06250625 	.word	0x06250625
    d188:	07b806f0 	.word	0x07b806f0
    d18c:	087607ef 	.word	0x087607ef
		if (!_radio.conn_curr->role ||
    d190:	4ec7      	ldr	r6, [pc, #796]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d192:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d196:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d19a:	2b00      	cmp	r3, #0
    d19c:	f281 8087 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d1a0:	7a41      	ldrb	r1, [r0, #9]
    d1a2:	2000      	movs	r0, #0
    d1a4:	f7fc fd86 	bl	9cb4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d1a8:	2800      	cmp	r0, #0
    d1aa:	f001 8080 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d1ae:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d1b2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d1b4:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d1b6:	041b      	lsls	r3, r3, #16
    d1b8:	f101 808f 	bmi.w	e2da <isr_rx_conn_pkt_ctrl+0x1196>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d1bc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d1c0:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d1c4:	429a      	cmp	r2, r3
    d1c6:	d002      	beq.n	d1ce <isr_rx_conn_pkt_ctrl+0x8a>
    d1c8:	4aba      	ldr	r2, [pc, #744]	; (d4b4 <isr_rx_conn_pkt_ctrl+0x370>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d1ca:	49bb      	ldr	r1, [pc, #748]	; (d4b8 <isr_rx_conn_pkt_ctrl+0x374>)
    d1cc:	e0f0      	b.n	d3b0 <isr_rx_conn_pkt_ctrl+0x26c>
	if (_radio.conn_upd == 0) {
    d1ce:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d1d2:	b90a      	cbnz	r2, d1d8 <isr_rx_conn_pkt_ctrl+0x94>
		_radio.conn_upd = conn;
    d1d4:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d1d8:	7b22      	ldrb	r2, [r4, #12]
    d1da:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d1de:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d1e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d1e6:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d1e8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d1ec:	7c20      	ldrb	r0, [r4, #16]
    d1ee:	7be2      	ldrb	r2, [r4, #15]
    d1f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d1f4:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d1f8:	7ca0      	ldrb	r0, [r4, #18]
    d1fa:	7c62      	ldrb	r2, [r4, #17]
    d1fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d200:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d204:	7ce2      	ldrb	r2, [r4, #19]
    d206:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d208:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d20c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d210:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d214:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d218:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d21c:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d220:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d222:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d226:	2201      	movs	r2, #1
    d228:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d22c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d230:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d234:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d238:	4293      	cmp	r3, r2
    d23a:	d007      	beq.n	d24c <isr_rx_conn_pkt_ctrl+0x108>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d23c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d240:	f003 0307 	and.w	r3, r3, #7
    d244:	2b04      	cmp	r3, #4
    d246:	d101      	bne.n	d24c <isr_rx_conn_pkt_ctrl+0x108>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d248:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d24c:	2000      	movs	r0, #0
    d24e:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    d256:	4b96      	ldr	r3, [pc, #600]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d258:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d25c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d260:	2b00      	cmp	r3, #0
    d262:	f281 8024 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d266:	7a41      	ldrb	r1, [r0, #9]
    d268:	2001      	movs	r0, #1
    d26a:	f7fc fd23 	bl	9cb4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d26e:	2800      	cmp	r0, #0
    d270:	f001 801d 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d274:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d278:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d27a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d27c:	041f      	lsls	r7, r3, #16
    d27e:	f101 802c 	bmi.w	e2da <isr_rx_conn_pkt_ctrl+0x1196>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d282:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d286:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d28a:	429a      	cmp	r2, r3
    d28c:	d001      	beq.n	d292 <isr_rx_conn_pkt_ctrl+0x14e>
    d28e:	4a8b      	ldr	r2, [pc, #556]	; (d4bc <isr_rx_conn_pkt_ctrl+0x378>)
    d290:	e79b      	b.n	d1ca <isr_rx_conn_pkt_ctrl+0x86>
	memcpy(&conn->llcp.chan_map.chm[0],
    d292:	2205      	movs	r2, #5
    d294:	f104 010c 	add.w	r1, r4, #12
    d298:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d29c:	f7f4 fcd3 	bl	1c46 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d2a0:	7c63      	ldrb	r3, [r4, #17]
    d2a2:	7ca2      	ldrb	r2, [r4, #18]
    d2a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d2a8:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d2ac:	2302      	movs	r3, #2
    d2ae:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d2b2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d2b6:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d2b8:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d2ba:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d2be:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    d2c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d2c6:	7a41      	ldrb	r1, [r0, #9]
    d2c8:	2002      	movs	r0, #2
    d2ca:	f7fc fcf3 	bl	9cb4 <pdu_len_cmp>
    d2ce:	2800      	cmp	r0, #0
    d2d0:	f000 87ed 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d2d4:	4b76      	ldr	r3, [pc, #472]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d2d6:	7b22      	ldrb	r2, [r4, #12]
    d2d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d2dc:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d2e0:	2000      	movs	r0, #0
}
    d2e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    d2e6:	4e72      	ldr	r6, [pc, #456]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d2e8:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d2ec:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	f280 87dc 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d2f6:	7a41      	ldrb	r1, [r0, #9]
    d2f8:	2003      	movs	r0, #3
    d2fa:	f7fc fcdb 	bl	9cb4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d2fe:	2800      	cmp	r0, #0
    d300:	f000 87d5 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d304:	2208      	movs	r2, #8
    d306:	f104 0116 	add.w	r1, r4, #22
    d30a:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d30e:	f7f4 fc9a 	bl	1c46 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d312:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d316:	2204      	movs	r2, #4
    d318:	f104 011e 	add.w	r1, r4, #30
    d31c:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d320:	f7f4 fc91 	bl	1c46 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d324:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d328:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d32c:	f042 0204 	orr.w	r2, r2, #4
    d330:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d334:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d33c:	2301      	movs	r3, #1
    d33e:	702b      	strb	r3, [r5, #0]
    d340:	e7ce      	b.n	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		if (_radio.conn_curr->role ||
    d342:	4d5b      	ldr	r5, [pc, #364]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d344:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d348:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d34c:	2b00      	cmp	r3, #0
    d34e:	f2c0 87ae 	blt.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d352:	7a41      	ldrb	r1, [r0, #9]
    d354:	2004      	movs	r0, #4
    d356:	f7fc fcad 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d35a:	2800      	cmp	r0, #0
    d35c:	f000 87a7 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d360:	2208      	movs	r2, #8
    d362:	f104 010c 	add.w	r1, r4, #12
    d366:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d36a:	f7f4 fc6c 	bl	1c46 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d36e:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d372:	2204      	movs	r2, #4
    d374:	f104 0114 	add.w	r1, r4, #20
    d378:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d37c:	f7f4 fc63 	bl	1c46 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d380:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d384:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d388:	f043 0304 	orr.w	r3, r3, #4
    d38c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d390:	e7a6      	b.n	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d392:	4b47      	ldr	r3, [pc, #284]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d394:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d398:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d39c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d3a0:	42b3      	cmp	r3, r6
    d3a2:	d007      	beq.n	d3b4 <isr_rx_conn_pkt_ctrl+0x270>
    d3a4:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d3a8:	2b03      	cmp	r3, #3
    d3aa:	d003      	beq.n	d3b4 <isr_rx_conn_pkt_ctrl+0x270>
    d3ac:	4a44      	ldr	r2, [pc, #272]	; (d4c0 <isr_rx_conn_pkt_ctrl+0x37c>)
    d3ae:	4945      	ldr	r1, [pc, #276]	; (d4c4 <isr_rx_conn_pkt_ctrl+0x380>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d3b0:	2003      	movs	r0, #3
    d3b2:	e031      	b.n	d418 <isr_rx_conn_pkt_ctrl+0x2d4>
		if (_radio.conn_curr->role ||
    d3b4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d3b8:	2b00      	cmp	r3, #0
    d3ba:	f2c0 8778 	blt.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d3be:	7a61      	ldrb	r1, [r4, #9]
    d3c0:	2005      	movs	r0, #5
    d3c2:	f7fc fc77 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d3c6:	2800      	cmp	r0, #0
    d3c8:	f000 8771 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d3cc:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_ack--;
    d3ce:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d3d0:	2303      	movs	r3, #3
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d3d2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_ack--;
    d3d6:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d3da:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		break;
    d3de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d3e2:	7a41      	ldrb	r1, [r0, #9]
    d3e4:	2006      	movs	r0, #6
    d3e6:	f7fc fc65 	bl	9cb4 <pdu_len_cmp>
    d3ea:	2800      	cmp	r0, #0
    d3ec:	f000 875f 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		if (_radio.role == ROLE_SLAVE) {
    d3f0:	4b2f      	ldr	r3, [pc, #188]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d3f2:	7cd8      	ldrb	r0, [r3, #19]
    d3f4:	b2c0      	uxtb	r0, r0
    d3f6:	2803      	cmp	r0, #3
    d3f8:	4619      	mov	r1, r3
    d3fa:	d12e      	bne.n	d45a <isr_rx_conn_pkt_ctrl+0x316>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d3fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d400:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d404:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
    d408:	4296      	cmp	r6, r2
    d40a:	d00d      	beq.n	d428 <isr_rx_conn_pkt_ctrl+0x2e4>
    d40c:	f893 6076 	ldrb.w	r6, [r3, #118]	; 0x76
    d410:	2e03      	cmp	r6, #3
    d412:	d009      	beq.n	d428 <isr_rx_conn_pkt_ctrl+0x2e4>
    d414:	4a2a      	ldr	r2, [pc, #168]	; (d4c0 <isr_rx_conn_pkt_ctrl+0x37c>)
    d416:	492b      	ldr	r1, [pc, #172]	; (d4c4 <isr_rx_conn_pkt_ctrl+0x380>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d418:	f7f4 fddc 	bl	1fd4 <bt_log>
    d41c:	4040      	eors	r0, r0
    d41e:	f380 8811 	msr	BASEPRI, r0
    d422:	f04f 0004 	mov.w	r0, #4
    d426:	df02      	svc	2
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d428:	2000      	movs	r0, #0
    d42a:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d42e:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d430:	2003      	movs	r0, #3
    d432:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d436:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d43a:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d43e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d442:	065e      	lsls	r6, r3, #25
    d444:	d505      	bpl.n	d452 <isr_rx_conn_pkt_ctrl+0x30e>
			_radio.conn_curr->refresh = 0;
    d446:	f36f 1386 	bfc	r3, #6, #1
    d44a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d44e:	2309      	movs	r3, #9
    d450:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d452:	2301      	movs	r3, #1
    d454:	702b      	strb	r3, [r5, #0]
				break;
    d456:	f000 bca2 	b.w	dd9e <isr_rx_conn_pkt_ctrl+0xc5a>
			_radio.conn_curr->pause_rx = 0;
    d45a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d45e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d462:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d466:	f36f 03c3 	bfc	r3, #3, #1
    d46a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d46e:	e7e4      	b.n	d43a <isr_rx_conn_pkt_ctrl+0x2f6>
		if (!_radio.conn_curr->role ||
    d470:	4b0f      	ldr	r3, [pc, #60]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d472:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d476:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d47a:	2b00      	cmp	r3, #0
    d47c:	f280 8717 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d480:	7a41      	ldrb	r1, [r0, #9]
    d482:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d484:	f7fc fc16 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d488:	2800      	cmp	r0, #0
    d48a:	f000 8710 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d48e:	4631      	mov	r1, r6
    d490:	4628      	mov	r0, r5
}
    d492:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d496:	f7fe bb11 	b.w	babc <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d49a:	4b05      	ldr	r3, [pc, #20]	; (d4b0 <isr_rx_conn_pkt_ctrl+0x36c>)
    d49c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d4a0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	f2c0 8702 	blt.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d4aa:	7a41      	ldrb	r1, [r0, #9]
    d4ac:	200e      	movs	r0, #14
    d4ae:	e7e9      	b.n	d484 <isr_rx_conn_pkt_ctrl+0x340>
    d4b0:	200008e8 	.word	0x200008e8
    d4b4:	000169b0 	.word	0x000169b0
    d4b8:	00016dae 	.word	0x00016dae
    d4bc:	000169bc 	.word	0x000169bc
    d4c0:	00016662 	.word	0x00016662
    d4c4:	00016de4 	.word	0x00016de4
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d4c8:	7a41      	ldrb	r1, [r0, #9]
    d4ca:	2009      	movs	r0, #9
    d4cc:	f7fc fbf2 	bl	9cb4 <pdu_len_cmp>
    d4d0:	2800      	cmp	r0, #0
    d4d2:	f000 86ec 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d4d6:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d4d8:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d4da:	48b3      	ldr	r0, [pc, #716]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d4e0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d4e4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d4e8:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d4ec:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d4f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d4f4:	7ba1      	ldrb	r1, [r4, #14]
    d4f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d4fa:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d4fe:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d502:	400b      	ands	r3, r1
    d504:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d508:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d50c:	f043 0320 	orr.w	r3, r3, #32
    d510:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d514:	2301      	movs	r3, #1
    d516:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d518:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d51c:	2000      	movs	r0, #0
    d51e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_radio.conn_curr->role ||
    d526:	4ea0      	ldr	r6, [pc, #640]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
    d528:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d52c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d530:	2b00      	cmp	r3, #0
    d532:	f280 86bc 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d536:	7a41      	ldrb	r1, [r0, #9]
    d538:	200a      	movs	r0, #10
    d53a:	f7fc fbbb 	bl	9cb4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d53e:	2800      	cmp	r0, #0
    d540:	f000 86b5 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d544:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d548:	f7f9 fea7 	bl	729a <mem_acquire>
		if (!node_tx) {
    d54c:	4601      	mov	r1, r0
    d54e:	b910      	cbnz	r0, d556 <isr_rx_conn_pkt_ctrl+0x412>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d550:	2001      	movs	r0, #1
    d552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->refresh = 1;
    d556:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d55a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d55e:	f36f 1304 	bfc	r3, #4, #1
    d562:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d566:	7903      	ldrb	r3, [r0, #4]
    d568:	f043 0303 	orr.w	r3, r3, #3
    d56c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d56e:	2301      	movs	r3, #1
    d570:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d572:	230b      	movs	r3, #11
    d574:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d576:	4628      	mov	r0, r5
    d578:	f000 bcbb 	b.w	def2 <isr_rx_conn_pkt_ctrl+0xdae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d57c:	7a41      	ldrb	r1, [r0, #9]
    d57e:	200b      	movs	r0, #11
    d580:	f7fc fb98 	bl	9cb4 <pdu_len_cmp>
    d584:	2800      	cmp	r0, #0
    d586:	f000 8692 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d58a:	4887      	ldr	r0, [pc, #540]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
    d58c:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d590:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d594:	2b00      	cmp	r3, #0
    d596:	db1b      	blt.n	d5d0 <isr_rx_conn_pkt_ctrl+0x48c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d598:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d59c:	f7f9 fe7d 	bl	729a <mem_acquire>
		if (!node_tx) {
    d5a0:	4601      	mov	r1, r0
    d5a2:	2800      	cmp	r0, #0
    d5a4:	d0d4      	beq.n	d550 <isr_rx_conn_pkt_ctrl+0x40c>
		conn->enc_tx = 0;
    d5a6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d5aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d5ae:	f043 0304 	orr.w	r3, r3, #4
    d5b2:	f36f 1304 	bfc	r3, #4, #1
    d5b6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5ba:	7903      	ldrb	r3, [r0, #4]
    d5bc:	f043 0303 	orr.w	r3, r3, #3
    d5c0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d5c2:	2301      	movs	r3, #1
    d5c4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d5c6:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d5c8:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d5ca:	4620      	mov	r0, r4
    d5cc:	f000 bc91 	b.w	def2 <isr_rx_conn_pkt_ctrl+0xdae>
		conn->enc_tx = 0;
    d5d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d5d4:	f36f 1345 	bfc	r3, #5, #1
    d5d8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d5dc:	e680      	b.n	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d5de:	7a41      	ldrb	r1, [r0, #9]
    d5e0:	200c      	movs	r0, #12
    d5e2:	f7fc fb67 	bl	9cb4 <pdu_len_cmp>
    d5e6:	2800      	cmp	r0, #0
    d5e8:	f000 8661 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d5ec:	486e      	ldr	r0, [pc, #440]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
    d5ee:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d5f2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d5f6:	f013 0701 	ands.w	r7, r3, #1
    d5fa:	d150      	bne.n	d69e <isr_rx_conn_pkt_ctrl+0x55a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5fc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d600:	f7f9 fe4b 	bl	729a <mem_acquire>
		if (!node_tx) {
    d604:	4601      	mov	r1, r0
    d606:	2800      	cmp	r0, #0
    d608:	d0a2      	beq.n	d550 <isr_rx_conn_pkt_ctrl+0x40c>
		conn->llcp_version.tx = 1;
    d60a:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d60e:	f043 0301 	orr.w	r3, r3, #1
    d612:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d616:	7903      	ldrb	r3, [r0, #4]
    d618:	f043 0303 	orr.w	r3, r3, #3
    d61c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d61e:	2306      	movs	r3, #6
    d620:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d622:	230c      	movs	r3, #12
    d624:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d626:	2309      	movs	r3, #9
    d628:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d62a:	f06f 030e 	mvn.w	r3, #14
    d62e:	7243      	strb	r3, [r0, #9]
    d630:	2305      	movs	r3, #5
    d632:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d638:	72c3      	strb	r3, [r0, #11]
    d63a:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d63c:	4630      	mov	r0, r6
    d63e:	f7fe fa23 	bl	ba88 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d642:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d64a:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d64e:	f004 fc0f 	bl	11e70 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d652:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d654:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d656:	2201      	movs	r2, #1
    d658:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d65c:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d660:	7003      	strb	r3, [r0, #0]
    d662:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d664:	b1c2      	cbz	r2, d698 <isr_rx_conn_pkt_ctrl+0x554>
		pdu_data_tx->md = 1;
    d666:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d66a:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d66c:	7b23      	ldrb	r3, [r4, #12]
    d66e:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d672:	7ba2      	ldrb	r2, [r4, #14]
    d674:	7b63      	ldrb	r3, [r4, #13]
    d676:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d67a:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d67e:	7be3      	ldrb	r3, [r4, #15]
    d680:	7c22      	ldrb	r2, [r4, #16]
    d682:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d686:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d68a:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d68e:	f043 0302 	orr.w	r3, r3, #2
    d692:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d696:	e623      	b.n	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		pdu_data_tx->md = 0;
    d698:	f362 1304 	bfi	r3, r2, #4, #1
    d69c:	e7e5      	b.n	d66a <isr_rx_conn_pkt_ctrl+0x526>
	} else if (!conn->llcp_version.rx) {
    d69e:	f013 0302 	ands.w	r3, r3, #2
    d6a2:	f47f ae1d 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		conn->procedure_expire = 0;
    d6a6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d6aa:	2301      	movs	r3, #1
    d6ac:	702b      	strb	r3, [r5, #0]
    d6ae:	e7dd      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x528>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d6b0:	7a41      	ldrb	r1, [r0, #9]
    d6b2:	200d      	movs	r0, #13
    d6b4:	f7fc fafe 	bl	9cb4 <pdu_len_cmp>
    d6b8:	2800      	cmp	r0, #0
    d6ba:	f000 85f8 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		_radio.conn_curr->pause_rx = 0;
    d6be:	4b3a      	ldr	r3, [pc, #232]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
    d6c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d6c4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d6c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d6cc:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d6d0:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d6d2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d6d6:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d6da:	2301      	movs	r3, #1
    d6dc:	702b      	strb	r3, [r5, #0]
    d6de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d6e2:	7a41      	ldrb	r1, [r0, #9]
    d6e4:	200f      	movs	r0, #15
    d6e6:	f7fc fae5 	bl	9cb4 <pdu_len_cmp>
    d6ea:	2800      	cmp	r0, #0
    d6ec:	f000 85df 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d6f0:	4b2d      	ldr	r3, [pc, #180]	; (d7a8 <isr_rx_conn_pkt_ctrl+0x664>)
    d6f2:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d6f6:	461a      	mov	r2, r3
    d6f8:	b149      	cbz	r1, d70e <isr_rx_conn_pkt_ctrl+0x5ca>
    d6fa:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d6fe:	4281      	cmp	r1, r0
    d700:	d005      	beq.n	d70e <isr_rx_conn_pkt_ctrl+0x5ca>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d702:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d704:	210f      	movs	r1, #15
}
    d706:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d70a:	f7fe ba41 	b.w	bb90 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d70e:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d712:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d716:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d71a:	2b00      	cmp	r3, #0
    d71c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d720:	f2c0 80a7 	blt.w	d872 <isr_rx_conn_pkt_ctrl+0x72e>
			if ((conn->llcp_conn_param.req !=
    d724:	4299      	cmp	r1, r3
    d726:	d009      	beq.n	d73c <isr_rx_conn_pkt_ctrl+0x5f8>
			    ((conn->llcp_conn_param.state ==
    d728:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d72c:	f013 0307 	ands.w	r3, r3, #7
    d730:	d002      	beq.n	d738 <isr_rx_conn_pkt_ctrl+0x5f4>
			      LLCP_CPR_STATE_REQ) ||
    d732:	3b04      	subs	r3, #4
    d734:	2b01      	cmp	r3, #1
    d736:	d801      	bhi.n	d73c <isr_rx_conn_pkt_ctrl+0x5f8>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d738:	2223      	movs	r2, #35	; 0x23
    d73a:	e7e3      	b.n	d704 <isr_rx_conn_pkt_ctrl+0x5c0>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d73c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d740:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d744:	4299      	cmp	r1, r3
    d746:	d003      	beq.n	d750 <isr_rx_conn_pkt_ctrl+0x60c>
    d748:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d74c:	2b03      	cmp	r3, #3
    d74e:	d105      	bne.n	d75c <isr_rx_conn_pkt_ctrl+0x618>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d750:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d754:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d758:	4299      	cmp	r1, r3
    d75a:	d001      	beq.n	d760 <isr_rx_conn_pkt_ctrl+0x61c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d75c:	222a      	movs	r2, #42	; 0x2a
    d75e:	e7d1      	b.n	d704 <isr_rx_conn_pkt_ctrl+0x5c0>
				if ((cpr->interval_min < 6) ||
    d760:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d764:	4643      	mov	r3, r8
    d766:	2b05      	cmp	r3, #5
    d768:	d91b      	bls.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				    (cpr->interval_max > 3200) ||
    d76a:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d76c:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d770:	d817      	bhi.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				    (cpr->interval_max > 3200) ||
    d772:	45b8      	cmp	r8, r7
    d774:	d815      	bhi.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				    (cpr->latency > 499) ||
    d776:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d77a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d77e:	d210      	bcs.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				    (cpr->timeout < 10) ||
    d780:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d784:	f1ae 060a 	sub.w	r6, lr, #10
    d788:	b2b6      	uxth	r6, r6
    d78a:	f640 4976 	movw	r9, #3190	; 0xc76
    d78e:	454e      	cmp	r6, r9
    d790:	d807      	bhi.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				     ((cpr->latency + 1) *
    d792:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d796:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d79a:	da02      	bge.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
				    (cpr->preferred_periodicity >
    d79c:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d79e:	428f      	cmp	r7, r1
    d7a0:	d204      	bcs.n	d7ac <isr_rx_conn_pkt_ctrl+0x668>
				nack = reject_ext_ind_send(conn,
    d7a2:	221e      	movs	r2, #30
    d7a4:	e7ae      	b.n	d704 <isr_rx_conn_pkt_ctrl+0x5c0>
    d7a6:	bf00      	nop
    d7a8:	200008e8 	.word	0x200008e8
				conn->llcp_conn_param.interval = cpr->interval_min;
    d7ac:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d7b0:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d7b4:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d7b8:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d7bc:	7da6      	ldrb	r6, [r4, #22]
    d7be:	7d61      	ldrb	r1, [r4, #21]
    d7c0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d7c4:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d7c8:	7e26      	ldrb	r6, [r4, #24]
    d7ca:	7de1      	ldrb	r1, [r4, #23]
    d7cc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d7d0:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d7d4:	7ea6      	ldrb	r6, [r4, #26]
    d7d6:	7e61      	ldrb	r1, [r4, #25]
    d7d8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d7dc:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d7e0:	7f26      	ldrb	r6, [r4, #28]
    d7e2:	7ee1      	ldrb	r1, [r4, #27]
    d7e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d7e8:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d7ec:	7fa6      	ldrb	r6, [r4, #30]
    d7ee:	7f61      	ldrb	r1, [r4, #29]
    d7f0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d7f4:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d7f8:	7fe1      	ldrb	r1, [r4, #31]
    d7fa:	f894 6020 	ldrb.w	r6, [r4, #32]
    d7fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d802:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d806:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d80a:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d80e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d812:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d816:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d81a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d81c:	428c      	cmp	r4, r1
    d81e:	d10f      	bne.n	d840 <isr_rx_conn_pkt_ctrl+0x6fc>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d820:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d822:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d826:	4361      	muls	r1, r4
    d828:	f242 7410 	movw	r4, #10000	; 0x2710
    d82c:	fb04 130e 	mla	r3, r4, lr, r1
    d830:	3b01      	subs	r3, #1
    d832:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d836:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d838:	b29b      	uxth	r3, r3
    d83a:	4299      	cmp	r1, r3
    d83c:	f000 8092 	beq.w	d964 <isr_rx_conn_pkt_ctrl+0x820>
					if (conn->pause_tx) {
    d840:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d844:	071c      	lsls	r4, r3, #28
    d846:	f140 8087 	bpl.w	d958 <isr_rx_conn_pkt_ctrl+0x814>
						conn->llcp_conn_param.state =
    d84a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d84e:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d850:	f361 0302 	bfi	r3, r1, #0, #3
    d854:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d858:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d85c:	3b01      	subs	r3, #1
    d85e:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d862:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d866:	2b00      	cmp	r3, #0
    d868:	f47f ad3a 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
				_radio.conn_upd = conn;
    d86c:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d870:	e536      	b.n	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d872:	4299      	cmp	r1, r3
    d874:	d003      	beq.n	d87e <isr_rx_conn_pkt_ctrl+0x73a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d876:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d87a:	0799      	lsls	r1, r3, #30
    d87c:	d17b      	bne.n	d976 <isr_rx_conn_pkt_ctrl+0x832>
			if ((cpr->interval_min < 6) ||
    d87e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d882:	4643      	mov	r3, r8
    d884:	2b05      	cmp	r3, #5
    d886:	d98c      	bls.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    (cpr->interval_max > 3200) ||
    d888:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d88a:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d88e:	d888      	bhi.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    (cpr->interval_max > 3200) ||
    d890:	45b8      	cmp	r8, r7
    d892:	d886      	bhi.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    (cpr->latency > 499) ||
    d894:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d898:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d89c:	d281      	bcs.n	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d89e:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d8a2:	f1ae 060a 	sub.w	r6, lr, #10
    d8a6:	b2b6      	uxth	r6, r6
    d8a8:	f640 4976 	movw	r9, #3190	; 0xc76
    d8ac:	454e      	cmp	r6, r9
    d8ae:	f63f af78 	bhi.w	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d8b2:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d8b6:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d8ba:	f6bf af72 	bge.w	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d8be:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d8c0:	428f      	cmp	r7, r1
    d8c2:	f4ff af6e 	bcc.w	d7a2 <isr_rx_conn_pkt_ctrl+0x65e>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d8c6:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d8ca:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d8ce:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d8d2:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d8d6:	7da6      	ldrb	r6, [r4, #22]
    d8d8:	7d61      	ldrb	r1, [r4, #21]
    d8da:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d8de:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d8e2:	7e26      	ldrb	r6, [r4, #24]
    d8e4:	7de1      	ldrb	r1, [r4, #23]
    d8e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d8ea:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d8ee:	7ea6      	ldrb	r6, [r4, #26]
    d8f0:	7e61      	ldrb	r1, [r4, #25]
    d8f2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d8f6:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d8fa:	7f26      	ldrb	r6, [r4, #28]
    d8fc:	7ee1      	ldrb	r1, [r4, #27]
    d8fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d902:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d906:	7fa6      	ldrb	r6, [r4, #30]
    d908:	7f61      	ldrb	r1, [r4, #29]
    d90a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d90e:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d912:	7fe1      	ldrb	r1, [r4, #31]
    d914:	f894 6020 	ldrb.w	r6, [r4, #32]
    d918:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d91c:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d920:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d924:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d928:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d92c:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d930:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d934:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d936:	428c      	cmp	r4, r1
    d938:	d10e      	bne.n	d958 <isr_rx_conn_pkt_ctrl+0x814>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d93a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d93c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d940:	4361      	muls	r1, r4
    d942:	f242 7410 	movw	r4, #10000	; 0x2710
    d946:	fb04 130e 	mla	r3, r4, lr, r1
    d94a:	3b01      	subs	r3, #1
    d94c:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d950:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d952:	b29b      	uxth	r3, r3
    d954:	4299      	cmp	r1, r3
    d956:	d005      	beq.n	d964 <isr_rx_conn_pkt_ctrl+0x820>
				*rx_enqueue = 1;
    d958:	2301      	movs	r3, #1
    d95a:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d95c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d960:	2103      	movs	r1, #3
    d962:	e775      	b.n	d850 <isr_rx_conn_pkt_ctrl+0x70c>
				conn->llcp_conn_param.status = 0;
    d964:	2300      	movs	r3, #0
    d966:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d96a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d96e:	2101      	movs	r1, #1
    d970:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d974:	e76c      	b.n	d850 <isr_rx_conn_pkt_ctrl+0x70c>
			LL_ASSERT(0);
    d976:	4ac2      	ldr	r2, [pc, #776]	; (dc80 <isr_rx_conn_pkt_ctrl+0xb3c>)
    d978:	49c2      	ldr	r1, [pc, #776]	; (dc84 <isr_rx_conn_pkt_ctrl+0xb40>)
    d97a:	e519      	b.n	d3b0 <isr_rx_conn_pkt_ctrl+0x26c>
		if (_radio.conn_curr->role ||
    d97c:	4bc2      	ldr	r3, [pc, #776]	; (dc88 <isr_rx_conn_pkt_ctrl+0xb44>)
    d97e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d982:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d986:	2b00      	cmp	r3, #0
    d988:	f2c0 8491 	blt.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d98c:	7a41      	ldrb	r1, [r0, #9]
    d98e:	2010      	movs	r0, #16
    d990:	f7fc f990 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d994:	2800      	cmp	r0, #0
    d996:	f000 848a 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		if (!_radio.conn_curr->role &&
    d99a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d99e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d9a2:	429a      	cmp	r2, r3
    d9a4:	f43f ac9c 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d9a8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d9ac:	f003 0307 	and.w	r3, r3, #7
    d9b0:	2b04      	cmp	r3, #4
    d9b2:	f47f ac95 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			if ((cpr->interval_min < 6) ||
    d9b6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d9ba:	fa1f f28e 	uxth.w	r2, lr
    d9be:	2a05      	cmp	r2, #5
    d9c0:	d91b      	bls.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    (cpr->interval_max > 3200) ||
    d9c2:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d9c4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d9c8:	d817      	bhi.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    (cpr->interval_max > 3200) ||
    d9ca:	429a      	cmp	r2, r3
    d9cc:	d815      	bhi.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    (cpr->latency > 499) ||
    d9ce:	8a27      	ldrh	r7, [r4, #16]
    d9d0:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d9d2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d9d6:	d210      	bcs.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d9d8:	8a66      	ldrh	r6, [r4, #18]
    d9da:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d9dc:	f1a0 010a 	sub.w	r1, r0, #10
    d9e0:	b289      	uxth	r1, r1
    d9e2:	f640 4c76 	movw	ip, #3190	; 0xc76
    d9e6:	4561      	cmp	r1, ip
    d9e8:	d807      	bhi.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d9ea:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d9ee:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d9f2:	da02      	bge.n	d9fa <isr_rx_conn_pkt_ctrl+0x8b6>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d9f4:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d9f6:	4293      	cmp	r3, r2
    d9f8:	d203      	bcs.n	da02 <isr_rx_conn_pkt_ctrl+0x8be>
				nack = reject_ext_ind_send(conn,
    d9fa:	221e      	movs	r2, #30
    d9fc:	2110      	movs	r1, #16
    d9fe:	4628      	mov	r0, r5
    da00:	e681      	b.n	d706 <isr_rx_conn_pkt_ctrl+0x5c2>
			_radio.conn_curr->procedure_expire = 0;
    da02:	2000      	movs	r0, #0
    da04:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    da08:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    da0c:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    da10:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    da14:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    da18:	7da2      	ldrb	r2, [r4, #22]
    da1a:	7d63      	ldrb	r3, [r4, #21]
    da1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    da20:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    da24:	7e22      	ldrb	r2, [r4, #24]
    da26:	7de3      	ldrb	r3, [r4, #23]
    da28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da2c:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    da30:	7ea2      	ldrb	r2, [r4, #26]
    da32:	7e63      	ldrb	r3, [r4, #25]
    da34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da38:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    da3c:	7f22      	ldrb	r2, [r4, #28]
    da3e:	7ee3      	ldrb	r3, [r4, #27]
    da40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da44:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    da48:	7fa2      	ldrb	r2, [r4, #30]
    da4a:	7f63      	ldrb	r3, [r4, #29]
    da4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da50:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    da54:	f894 2020 	ldrb.w	r2, [r4, #32]
    da58:	7fe3      	ldrb	r3, [r4, #31]
    da5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da5e:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    da62:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    da66:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    da6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da6e:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    da72:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    da76:	2201      	movs	r2, #1
    da78:	f362 0302 	bfi	r3, r2, #0, #3
    da7c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    da80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    da84:	7a41      	ldrb	r1, [r0, #9]
    da86:	2011      	movs	r0, #17
    da88:	f7fc f914 	bl	9cb4 <pdu_len_cmp>
    da8c:	2800      	cmp	r0, #0
    da8e:	f000 840e 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    da92:	4a7d      	ldr	r2, [pc, #500]	; (dc88 <isr_rx_conn_pkt_ctrl+0xb44>)
    da94:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    da98:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    da9c:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    daa0:	4281      	cmp	r1, r0
    daa2:	7b21      	ldrb	r1, [r4, #12]
    daa4:	d027      	beq.n	daf6 <isr_rx_conn_pkt_ctrl+0x9b2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    daa6:	2916      	cmp	r1, #22
    daa8:	f47f ac1a 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		if (rej_ext_ind->error_code != 0x23) {
    daac:	7b61      	ldrb	r1, [r4, #13]
    daae:	2923      	cmp	r1, #35	; 0x23
    dab0:	d00e      	beq.n	dad0 <isr_rx_conn_pkt_ctrl+0x98c>
				_radio.conn_curr->phy_tx;
    dab2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    dab6:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    daba:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    dabe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dac2:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    dac6:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    dac8:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    dacc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    dad0:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    dad4:	0792      	lsls	r2, r2, #30
    dad6:	f57f ac03 	bpl.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dada:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    dadc:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dade:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    dae0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    dae4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dae8:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    daea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    daee:	f3c3 0302 	ubfx	r3, r3, #0, #3
    daf2:	7363      	strb	r3, [r4, #13]
    daf4:	e422      	b.n	d33c <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_conn_param.req) {
    daf6:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dafa:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    dafe:	42b8      	cmp	r0, r7
    db00:	d040      	beq.n	db84 <isr_rx_conn_pkt_ctrl+0xa40>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    db02:	290f      	cmp	r1, #15
    db04:	f47f abec 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
    db08:	f993 001d 	ldrsb.w	r0, [r3, #29]
    db0c:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    db0e:	2800      	cmp	r0, #0
    db10:	db0b      	blt.n	db2a <isr_rx_conn_pkt_ctrl+0x9e6>
    db12:	291a      	cmp	r1, #26
    db14:	d109      	bne.n	db2a <isr_rx_conn_pkt_ctrl+0x9e6>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    db16:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    db1a:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    db1e:	4294      	cmp	r4, r2
    db20:	f000 80b8 	beq.w	dc94 <isr_rx_conn_pkt_ctrl+0xb50>
    db24:	4a59      	ldr	r2, [pc, #356]	; (dc8c <isr_rx_conn_pkt_ctrl+0xb48>)
    db26:	f7ff bb50 	b.w	d1ca <isr_rx_conn_pkt_ctrl+0x86>
	else if (rej_ext_ind->error_code != 0x23) {
    db2a:	2923      	cmp	r1, #35	; 0x23
    db2c:	d013      	beq.n	db56 <isr_rx_conn_pkt_ctrl+0xa12>
		LL_ASSERT(_radio.conn_upd == conn);
    db2e:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    db32:	42b3      	cmp	r3, r6
    db34:	d002      	beq.n	db3c <isr_rx_conn_pkt_ctrl+0x9f8>
    db36:	4a55      	ldr	r2, [pc, #340]	; (dc8c <isr_rx_conn_pkt_ctrl+0xb48>)
			LL_ASSERT(_radio.conn_upd == conn);
    db38:	4955      	ldr	r1, [pc, #340]	; (dc90 <isr_rx_conn_pkt_ctrl+0xb4c>)
    db3a:	e439      	b.n	d3b0 <isr_rx_conn_pkt_ctrl+0x26c>
		_radio.conn_upd = NULL;
    db3c:	2600      	movs	r6, #0
		if (conn->role) {
    db3e:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    db40:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    db44:	bfb8      	it	lt
    db46:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    db4a:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    db4e:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    db52:	bfb8      	it	lt
    db54:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    db56:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    db5a:	0717      	lsls	r7, r2, #28
    db5c:	f57f abc0 	bpl.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
	cp->status = rej_ext_ind->error_code;
    db60:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    db62:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    db64:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    db66:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    db68:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    db6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    db6c:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    db6e:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    db70:	237d      	movs	r3, #125	; 0x7d
    db72:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    db74:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    db76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db7a:	fb93 f3f2 	sdiv	r3, r3, r2
    db7e:	8223      	strh	r3, [r4, #16]
    db80:	f7ff bbdc 	b.w	d33c <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_length.req) {
    db84:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    db88:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    db8c:	4290      	cmp	r0, r2
    db8e:	d01a      	beq.n	dbc6 <isr_rx_conn_pkt_ctrl+0xa82>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    db90:	2914      	cmp	r1, #20
    db92:	f47f aba5 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		conn->llcp_length.ack = conn->llcp_length.req;
    db96:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    db9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    db9e:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    dba0:	f360 02c3 	bfi	r2, r0, #3, #1
    dba4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    dba8:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    dbaa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    dbae:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dbb0:	2215      	movs	r2, #21
    dbb2:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    dbb4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    dbb6:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    dbb8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    dbba:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    dbbc:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    dbbe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    dbc0:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    dbc2:	8263      	strh	r3, [r4, #18]
    dbc4:	e589      	b.n	d6da <isr_rx_conn_pkt_ctrl+0x596>
		switch (rej_ext_ind->reject_opcode) {
    dbc6:	2903      	cmp	r1, #3
    dbc8:	f47f ab8a 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			_radio.conn_curr->pause_rx = 0;
    dbcc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    dbd0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    dbd4:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    dbd8:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    dbda:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    dbde:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    dbe2:	230d      	movs	r3, #13
    dbe4:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    dbe6:	7b63      	ldrb	r3, [r4, #13]
    dbe8:	7323      	strb	r3, [r4, #12]
    dbea:	e576      	b.n	d6da <isr_rx_conn_pkt_ctrl+0x596>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    dbec:	7a41      	ldrb	r1, [r0, #9]
    dbee:	2012      	movs	r0, #18
    dbf0:	f7fc f860 	bl	9cb4 <pdu_len_cmp>
    dbf4:	2800      	cmp	r0, #0
    dbf6:	f000 835a 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		nack = ping_resp_send(_radio.conn_curr);
    dbfa:	4823      	ldr	r0, [pc, #140]	; (dc88 <isr_rx_conn_pkt_ctrl+0xb44>)
    dbfc:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dc00:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dc04:	f7f9 fb49 	bl	729a <mem_acquire>
	if (!node_tx) {
    dc08:	4601      	mov	r1, r0
    dc0a:	2800      	cmp	r0, #0
    dc0c:	f43f aca0 	beq.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc10:	7903      	ldrb	r3, [r0, #4]
    dc12:	f043 0303 	orr.w	r3, r3, #3
    dc16:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    dc18:	2301      	movs	r3, #1
    dc1a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dc1c:	2313      	movs	r3, #19
    dc1e:	e4d3      	b.n	d5c8 <isr_rx_conn_pkt_ctrl+0x484>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    dc20:	7a41      	ldrb	r1, [r0, #9]
    dc22:	2013      	movs	r0, #19
    dc24:	f7fc f846 	bl	9cb4 <pdu_len_cmp>
    dc28:	2800      	cmp	r0, #0
    dc2a:	f000 8340 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		_radio.conn_curr->procedure_expire = 0;
    dc2e:	4b16      	ldr	r3, [pc, #88]	; (dc88 <isr_rx_conn_pkt_ctrl+0xb44>)
    dc30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    dc34:	e472      	b.n	d51c <isr_rx_conn_pkt_ctrl+0x3d8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    dc36:	7a41      	ldrb	r1, [r0, #9]
    dc38:	2007      	movs	r0, #7
    dc3a:	f7fc f83b 	bl	9cb4 <pdu_len_cmp>
    dc3e:	2800      	cmp	r0, #0
    dc40:	f000 8335 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dc44:	4a10      	ldr	r2, [pc, #64]	; (dc88 <isr_rx_conn_pkt_ctrl+0xb44>)
    dc46:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dc4a:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    dc4e:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dc52:	42b1      	cmp	r1, r6
    dc54:	4611      	mov	r1, r2
    dc56:	d06c      	beq.n	dd32 <isr_rx_conn_pkt_ctrl+0xbee>
			conn->llcp_conn_param.disabled = 1;
    dc58:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    dc5c:	f040 0010 	orr.w	r0, r0, #16
    dc60:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    dc64:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dc68:	2800      	cmp	r0, #0
    dc6a:	db3f      	blt.n	dcec <isr_rx_conn_pkt_ctrl+0xba8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dc6c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dc70:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    dc74:	4294      	cmp	r4, r2
    dc76:	d00d      	beq.n	dc94 <isr_rx_conn_pkt_ctrl+0xb50>
    dc78:	4a01      	ldr	r2, [pc, #4]	; (dc80 <isr_rx_conn_pkt_ctrl+0xb3c>)
    dc7a:	f7ff baa6 	b.w	d1ca <isr_rx_conn_pkt_ctrl+0x86>
    dc7e:	bf00      	nop
    dc80:	00016662 	.word	0x00016662
    dc84:	000153a4 	.word	0x000153a4
    dc88:	200008e8 	.word	0x200008e8
    dc8c:	00016627 	.word	0x00016627
    dc90:	00016e68 	.word	0x00016e68
				conn->llcp_conn_param.state =
    dc94:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dc98:	2105      	movs	r1, #5
    dc9a:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    dc9e:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    dca2:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    dca6:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    dcaa:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    dcae:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    dcb2:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dcb6:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    dcba:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    dcbe:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    dcc0:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dcc4:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    dcc8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    dccc:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    dcce:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    dcd2:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    dcd4:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    dcd8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    dcdc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_ack--;
    dce0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				conn->llcp_type = LLCP_CONN_UPD;
    dce4:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				break;
    dce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(_radio.conn_upd == conn);
    dcec:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    dcf0:	4293      	cmp	r3, r2
    dcf2:	d001      	beq.n	dcf8 <isr_rx_conn_pkt_ctrl+0xbb4>
    dcf4:	4ac3      	ldr	r2, [pc, #780]	; (e004 <isr_rx_conn_pkt_ctrl+0xec0>)
    dcf6:	e71f      	b.n	db38 <isr_rx_conn_pkt_ctrl+0x9f4>
			_radio.conn_upd = NULL;
    dcf8:	2200      	movs	r2, #0
    dcfa:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    dcfe:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dd02:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    dd06:	0716      	lsls	r6, r2, #28
    dd08:	f57f aaea 	bpl.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dd0c:	2208      	movs	r2, #8
    dd0e:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    dd10:	221a      	movs	r2, #26
    dd12:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    dd14:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    dd16:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    dd18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    dd1a:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    dd1c:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    dd1e:	237d      	movs	r3, #125	; 0x7d
    dd20:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    dd22:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    dd24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dd28:	fb93 f3f2 	sdiv	r3, r3, r2
    dd2c:	8223      	strh	r3, [r4, #16]
    dd2e:	f7ff bb90 	b.w	d452 <isr_rx_conn_pkt_ctrl+0x30e>
		} else if (_radio.conn_curr->llcp_length.req !=
    dd32:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    dd36:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    dd3a:	4290      	cmp	r0, r2
    dd3c:	d009      	beq.n	dd52 <isr_rx_conn_pkt_ctrl+0xc0e>
			_radio.conn_curr->llcp_length.ack =
    dd3e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    dd42:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dd46:	f36f 02c3 	bfc	r2, #3, #1
    dd4a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    dd4e:	f7ff bb80 	b.w	d452 <isr_rx_conn_pkt_ctrl+0x30e>
		} else if (_radio.conn_curr->llcp_phy.req !=
    dd52:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    dd56:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    dd5a:	4290      	cmp	r0, r2
    dd5c:	d01b      	beq.n	dd96 <isr_rx_conn_pkt_ctrl+0xc52>
			_radio.conn_curr->llcp_phy.ack =
    dd5e:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    dd62:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    dd66:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    dd6a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    dd6e:	f362 0002 	bfi	r0, r2, #0, #3
    dd72:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    dd76:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    dd7a:	0780      	lsls	r0, r0, #30
    dd7c:	d50f      	bpl.n	dd9e <isr_rx_conn_pkt_ctrl+0xc5a>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dd7e:	200c      	movs	r0, #12
    dd80:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    dd82:	2000      	movs	r0, #0
    dd84:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    dd86:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    dd88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    dd8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dd90:	7363      	strb	r3, [r4, #13]
    dd92:	f7ff bb5e 	b.w	d452 <isr_rx_conn_pkt_ctrl+0x30e>
			switch (llctrl->unknown_rsp.type) {
    dd96:	7b23      	ldrb	r3, [r4, #12]
    dd98:	2b12      	cmp	r3, #18
    dd9a:	f47f ab5a 	bne.w	d452 <isr_rx_conn_pkt_ctrl+0x30e>
		_radio.conn_curr->procedure_expire = 0;
    dd9e:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    dda2:	f7ff bbbb 	b.w	d51c <isr_rx_conn_pkt_ctrl+0x3d8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    dda6:	7a41      	ldrb	r1, [r0, #9]
    dda8:	2014      	movs	r0, #20
    ddaa:	f7fb ff83 	bl	9cb4 <pdu_len_cmp>
    ddae:	2800      	cmp	r0, #0
    ddb0:	f000 827d 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    ddb4:	2f14      	cmp	r7, #20
    ddb6:	d122      	bne.n	ddfe <isr_rx_conn_pkt_ctrl+0xcba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ddb8:	4893      	ldr	r0, [pc, #588]	; (e008 <isr_rx_conn_pkt_ctrl+0xec4>)
    ddba:	f7f9 fa6e 	bl	729a <mem_acquire>
		if (!node_tx) {
    ddbe:	4606      	mov	r6, r0
    ddc0:	2800      	cmp	r0, #0
    ddc2:	f43f abc5 	beq.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ddc6:	4f91      	ldr	r7, [pc, #580]	; (e00c <isr_rx_conn_pkt_ctrl+0xec8>)
    ddc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    ddcc:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    ddd0:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ddd4:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ddd6:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ddd8:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ddda:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    ddde:	45e0      	cmp	r8, ip
    dde0:	46b9      	mov	r9, r7
    dde2:	f894 800b 	ldrb.w	r8, [r4, #11]
    dde6:	d10c      	bne.n	de02 <isr_rx_conn_pkt_ctrl+0xcbe>
	      _radio.conn_curr->llcp_length.ack) &&
    dde8:	f1b8 0f14 	cmp.w	r8, #20
    ddec:	d015      	beq.n	de1a <isr_rx_conn_pkt_ctrl+0xcd6>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    ddee:	f1b8 0f15 	cmp.w	r8, #21
    ddf2:	f000 8280 	beq.w	e2f6 <isr_rx_conn_pkt_ctrl+0x11b2>
    ddf6:	4a86      	ldr	r2, [pc, #536]	; (e010 <isr_rx_conn_pkt_ctrl+0xecc>)
    ddf8:	4986      	ldr	r1, [pc, #536]	; (e014 <isr_rx_conn_pkt_ctrl+0xed0>)
    ddfa:	f7ff bad9 	b.w	d3b0 <isr_rx_conn_pkt_ctrl+0x26c>
	struct radio_pdu_node_tx *node_tx = NULL;
    ddfe:	2600      	movs	r6, #0
    de00:	e7e1      	b.n	ddc6 <isr_rx_conn_pkt_ctrl+0xc82>
		 LLCP_LENGTH_STATE_REQ) ||
    de02:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    de06:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    de0a:	2f01      	cmp	r7, #1
    de0c:	d9ec      	bls.n	dde8 <isr_rx_conn_pkt_ctrl+0xca4>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    de0e:	2f02      	cmp	r7, #2
    de10:	d1ed      	bne.n	ddee <isr_rx_conn_pkt_ctrl+0xcaa>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    de12:	f1a8 0714 	sub.w	r7, r8, #20
    de16:	2f01      	cmp	r7, #1
    de18:	d8e9      	bhi.n	ddee <isr_rx_conn_pkt_ctrl+0xcaa>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    de1a:	89a7      	ldrh	r7, [r4, #12]
    de1c:	2f1a      	cmp	r7, #26
    de1e:	d92f      	bls.n	de80 <isr_rx_conn_pkt_ctrl+0xd3c>
			eff_tx_octets = min(lr->max_rx_octets,
    de20:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    de24:	4547      	cmp	r7, r8
    de26:	bf28      	it	cs
    de28:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    de2a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    de2e:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    de32:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    de36:	bf34      	ite	cc
    de38:	4693      	movcc	fp, r2
    de3a:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    de3e:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    de42:	d31f      	bcc.n	de84 <isr_rx_conn_pkt_ctrl+0xd40>
			eff_tx_time = min(lr->max_rx_time,
    de44:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    de48:	45d0      	cmp	r8, sl
    de4a:	bf28      	it	cs
    de4c:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    de4e:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    de52:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    de56:	bf34      	ite	cc
    de58:	4682      	movcc	sl, r0
    de5a:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    de5e:	455a      	cmp	r2, fp
    de60:	d04b      	beq.n	defa <isr_rx_conn_pkt_ctrl+0xdb6>
			free_count_rx = packet_rx_acquired_count_get() +
    de62:	f7fb ff6f 	bl	9d44 <packet_rx_acquired_count_get>
    de66:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    de68:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    de6c:	f7f9 fa44 	bl	72f8 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    de70:	4420      	add	r0, r4
    de72:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    de74:	28ff      	cmp	r0, #255	; 0xff
    de76:	d907      	bls.n	de88 <isr_rx_conn_pkt_ctrl+0xd44>
    de78:	4a65      	ldr	r2, [pc, #404]	; (e010 <isr_rx_conn_pkt_ctrl+0xecc>)
    de7a:	4967      	ldr	r1, [pc, #412]	; (e018 <isr_rx_conn_pkt_ctrl+0xed4>)
    de7c:	f7ff ba98 	b.w	d3b0 <isr_rx_conn_pkt_ctrl+0x26c>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    de80:	460f      	mov	r7, r1
    de82:	e7d2      	b.n	de2a <isr_rx_conn_pkt_ctrl+0xce6>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    de84:	46f0      	mov	r8, lr
    de86:	e7e2      	b.n	de4e <isr_rx_conn_pkt_ctrl+0xd0a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    de88:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    de8c:	4283      	cmp	r3, r0
    de8e:	f040 8229 	bne.w	e2e4 <isr_rx_conn_pkt_ctrl+0x11a0>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de92:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    de96:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de9a:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    de9c:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    de9e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    dea2:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    dea6:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    deaa:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    deae:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    deb2:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    deb6:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    deba:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    debe:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    dec2:	2303      	movs	r3, #3
    dec4:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    dec8:	2e00      	cmp	r6, #0
    deca:	f43f aa09 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dece:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    ded0:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    ded4:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ded8:	f043 0303 	orr.w	r3, r3, #3
    dedc:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dede:	2309      	movs	r3, #9
    dee0:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dee2:	2315      	movs	r3, #21
    dee4:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    dee6:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    dee8:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    deec:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    def0:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    def2:	f7fd fd9b 	bl	ba2c <ctrl_tx_enqueue>
    def6:	f7ff b9f3 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			_radio.conn_curr->pause_tx = 0;
    defa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    defe:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    df02:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    df06:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    df0a:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    df0c:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    df10:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    df14:	d103      	bne.n	df1e <isr_rx_conn_pkt_ctrl+0xdda>
    df16:	45c6      	cmp	lr, r8
    df18:	d101      	bne.n	df1e <isr_rx_conn_pkt_ctrl+0xdda>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    df1a:	4550      	cmp	r0, sl
    df1c:	d0d4      	beq.n	dec8 <isr_rx_conn_pkt_ctrl+0xd84>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    df1e:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    df20:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    df24:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    df28:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    df2a:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    df2e:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    df30:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    df34:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    df38:	702b      	strb	r3, [r5, #0]
    df3a:	e7c5      	b.n	dec8 <isr_rx_conn_pkt_ctrl+0xd84>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    df3c:	7a41      	ldrb	r1, [r0, #9]
    df3e:	2016      	movs	r0, #22
    df40:	f7fb feb8 	bl	9cb4 <pdu_len_cmp>
    df44:	2800      	cmp	r0, #0
    df46:	f000 81b2 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		if (_radio.role == ROLE_MASTER) {
    df4a:	4830      	ldr	r0, [pc, #192]	; (e00c <isr_rx_conn_pkt_ctrl+0xec8>)
    df4c:	7cc3      	ldrb	r3, [r0, #19]
    df4e:	2b04      	cmp	r3, #4
    df50:	d164      	bne.n	e01c <isr_rx_conn_pkt_ctrl+0xed8>
			if ((_radio.conn_curr->llcp_phy.ack !=
    df52:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    df56:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    df5a:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    df5e:	428b      	cmp	r3, r1
    df60:	d00a      	beq.n	df78 <isr_rx_conn_pkt_ctrl+0xe34>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    df62:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    df66:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    df6a:	3a01      	subs	r2, #1
    df6c:	2a02      	cmp	r2, #2
    df6e:	d803      	bhi.n	df78 <isr_rx_conn_pkt_ctrl+0xe34>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df70:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    df72:	2116      	movs	r1, #22
    df74:	f7ff bbc7 	b.w	d706 <isr_rx_conn_pkt_ctrl+0x5c2>
			} else if (((_radio.conn_curr->llcp_req !=
    df78:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    df7c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    df80:	4295      	cmp	r5, r2
    df82:	d003      	beq.n	df8c <isr_rx_conn_pkt_ctrl+0xe48>
				     _radio.conn_curr->llcp_ack) &&
    df84:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    df88:	2a03      	cmp	r2, #3
    df8a:	d105      	bne.n	df98 <isr_rx_conn_pkt_ctrl+0xe54>
				     LLCP_ENCRYPTION)) ||
    df8c:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    df90:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    df94:	4295      	cmp	r5, r2
    df96:	d001      	beq.n	df9c <isr_rx_conn_pkt_ctrl+0xe58>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df98:	222a      	movs	r2, #42	; 0x2a
    df9a:	e7ea      	b.n	df72 <isr_rx_conn_pkt_ctrl+0xe2e>
				_radio.conn_curr->llcp_phy.state =
    df9c:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dfa0:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    dfa2:	f042 0203 	orr.w	r2, r2, #3
    dfa6:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dfaa:	d116      	bne.n	dfda <isr_rx_conn_pkt_ctrl+0xe96>
					_radio.conn_curr->llcp_phy.ack--;
    dfac:	3b01      	subs	r3, #1
    dfae:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    dfb2:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    dfb6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    dfba:	f36f 0341 	bfc	r3, #1, #1
    dfbe:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    dfc2:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dfc6:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    dfca:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    dfce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dfd2:	f362 1347 	bfi	r3, r2, #5, #3
    dfd6:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dfda:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dfde:	7b62      	ldrb	r2, [r4, #13]
    dfe0:	f3c3 0182 	ubfx	r1, r3, #2, #3
    dfe4:	400a      	ands	r2, r1
    dfe6:	f362 0384 	bfi	r3, r2, #2, #3
    dfea:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    dfee:	7b22      	ldrb	r2, [r4, #12]
    dff0:	b2db      	uxtb	r3, r3
    dff2:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dff6:	f362 1347 	bfi	r3, r2, #5, #3
    dffa:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    dffe:	f7ff b96f 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
    e002:	bf00      	nop
    e004:	00016662 	.word	0x00016662
    e008:	20000a44 	.word	0x20000a44
    e00c:	200008e8 	.word	0x200008e8
    e010:	00016649 	.word	0x00016649
    e014:	00016e95 	.word	0x00016e95
    e018:	00016aa3 	.word	0x00016aa3
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e01c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e020:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e024:	f7f9 f939 	bl	729a <mem_acquire>
	if (!node_tx) {
    e028:	4601      	mov	r1, r0
    e02a:	2800      	cmp	r0, #0
    e02c:	f43f aa90 	beq.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e030:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e034:	2202      	movs	r2, #2
    e036:	f362 0301 	bfi	r3, r2, #0, #2
    e03a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e03e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e042:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e046:	4293      	cmp	r3, r2
    e048:	d11a      	bne.n	e080 <isr_rx_conn_pkt_ctrl+0xf3c>
		conn->llcp_phy.ack--;
    e04a:	3b01      	subs	r3, #1
    e04c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e050:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e054:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e058:	f36f 0341 	bfc	r3, #1, #1
    e05c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e060:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e064:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e068:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e06c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e070:	f362 1347 	bfi	r3, r2, #5, #3
    e074:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e078:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e07c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e080:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e084:	7b62      	ldrb	r2, [r4, #13]
    e086:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e08a:	4002      	ands	r2, r0
    e08c:	f362 0384 	bfi	r3, r2, #2, #3
    e090:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e094:	7b22      	ldrb	r2, [r4, #12]
    e096:	b2db      	uxtb	r3, r3
    e098:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e09c:	f362 1347 	bfi	r3, r2, #5, #3
    e0a0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e0a4:	790b      	ldrb	r3, [r1, #4]
    e0a6:	f043 0303 	orr.w	r3, r3, #3
    e0aa:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e0ac:	2303      	movs	r3, #3
    e0ae:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e0b0:	2317      	movs	r3, #23
    e0b2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e0b4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e0b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e0bc:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e0be:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e0c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e0c6:	724b      	strb	r3, [r1, #9]
    e0c8:	f7ff ba55 	b.w	d576 <isr_rx_conn_pkt_ctrl+0x432>
		if (_radio.conn_curr->role ||
    e0cc:	4e8f      	ldr	r6, [pc, #572]	; (e30c <isr_rx_conn_pkt_ctrl+0x11c8>)
    e0ce:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e0d2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	f2c0 80e9 	blt.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e0dc:	7a41      	ldrb	r1, [r0, #9]
    e0de:	2017      	movs	r0, #23
    e0e0:	f7fb fde8 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e0e4:	2800      	cmp	r0, #0
    e0e6:	f000 80e2 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		if ((_radio.role == ROLE_MASTER) &&
    e0ea:	7cf3      	ldrb	r3, [r6, #19]
    e0ec:	2b04      	cmp	r3, #4
    e0ee:	f47f a8f7 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
    e0f2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e0f6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e0fa:	429a      	cmp	r2, r3
    e0fc:	f43f a8f0 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		    (_radio.conn_curr->llcp_phy.state ==
    e100:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e104:	f003 0203 	and.w	r2, r3, #3
    e108:	2a02      	cmp	r2, #2
    e10a:	f47f a8e9 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e10e:	f043 0303 	orr.w	r3, r3, #3
    e112:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e116:	7b62      	ldrb	r2, [r4, #13]
    e118:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e11c:	400a      	ands	r2, r1
    e11e:	f362 0384 	bfi	r3, r2, #2, #3
    e122:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e126:	7b22      	ldrb	r2, [r4, #12]
    e128:	b2db      	uxtb	r3, r3
    e12a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e12e:	f362 1347 	bfi	r3, r2, #5, #3
    e132:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e136:	f7ff b889 	b.w	d24c <isr_rx_conn_pkt_ctrl+0x108>
		if (!_radio.conn_curr->role ||
    e13a:	4b74      	ldr	r3, [pc, #464]	; (e30c <isr_rx_conn_pkt_ctrl+0x11c8>)
    e13c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e140:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e144:	2b00      	cmp	r3, #0
    e146:	f280 80b2 	bge.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e14a:	7a41      	ldrb	r1, [r0, #9]
    e14c:	2018      	movs	r0, #24
    e14e:	f7fb fdb1 	bl	9cb4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e152:	2800      	cmp	r0, #0
    e154:	f000 80ab 	beq.w	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e158:	7b27      	ldrb	r7, [r4, #12]
    e15a:	7b62      	ldrb	r2, [r4, #13]
    e15c:	ea47 0002 	orr.w	r0, r7, r2
    e160:	f010 0007 	ands.w	r0, r0, #7
    e164:	d125      	bne.n	e1b2 <isr_rx_conn_pkt_ctrl+0x106e>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e166:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e16a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e16e:	4293      	cmp	r3, r2
    e170:	f43f a8b6 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e174:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e178:	f003 0303 	and.w	r3, r3, #3
    e17c:	2b02      	cmp	r3, #2
    e17e:	f47f a8af 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		if (!conn->llcp_phy.cmd) {
    e182:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e186:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e18a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e18c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e190:	f57f a8a6 	bpl.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e194:	230c      	movs	r3, #12
		upd->status = 0;
    e196:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e198:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e19a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e19e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e1a2:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e1a4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e1a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e1ac:	7363      	strb	r3, [r4, #13]
    e1ae:	f7ff ba94 	b.w	d6da <isr_rx_conn_pkt_ctrl+0x596>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e1b2:	89e0      	ldrh	r0, [r4, #14]
    e1b4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e1b6:	1ac3      	subs	r3, r0, r3
    e1b8:	041b      	lsls	r3, r3, #16
    e1ba:	f100 80a1 	bmi.w	e300 <isr_rx_conn_pkt_ctrl+0x11bc>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e1be:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e1c2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e1c6:	428b      	cmp	r3, r1
    e1c8:	d002      	beq.n	e1d0 <isr_rx_conn_pkt_ctrl+0x108c>
    e1ca:	4a51      	ldr	r2, [pc, #324]	; (e310 <isr_rx_conn_pkt_ctrl+0x11cc>)
    e1cc:	f7fe bffd 	b.w	d1ca <isr_rx_conn_pkt_ctrl+0x86>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e1d0:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e1d4:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e1d8:	42a3      	cmp	r3, r4
    e1da:	d014      	beq.n	e206 <isr_rx_conn_pkt_ctrl+0x10c2>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e1dc:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e1e0:	f003 0303 	and.w	r3, r3, #3
    e1e4:	2b02      	cmp	r3, #2
    e1e6:	d10e      	bne.n	e206 <isr_rx_conn_pkt_ctrl+0x10c2>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1e8:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e1ec:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1f0:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e1f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e1f8:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e1fc:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1fe:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e202:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e206:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e20a:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e20e:	f002 0207 	and.w	r2, r2, #7
    e212:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e216:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e21a:	f36f 0300 	bfc	r3, #0, #1
    e21e:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e222:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e224:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e226:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e22a:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e22e:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e232:	2b00      	cmp	r3, #0
    e234:	f43f a854 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e238:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e23c:	f362 0302 	bfi	r3, r2, #0, #3
    e240:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e244:	f7ff b84c 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		if (_radio.conn_curr->role ||
    e248:	4e30      	ldr	r6, [pc, #192]	; (e30c <isr_rx_conn_pkt_ctrl+0x11c8>)
    e24a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e24e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e252:	2b00      	cmp	r3, #0
    e254:	db2b      	blt.n	e2ae <isr_rx_conn_pkt_ctrl+0x116a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e256:	7a41      	ldrb	r1, [r0, #9]
    e258:	2019      	movs	r0, #25
    e25a:	f7fb fd2b 	bl	9cb4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e25e:	b330      	cbz	r0, e2ae <isr_rx_conn_pkt_ctrl+0x116a>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e260:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e264:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e268:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e26c:	7b22      	ldrb	r2, [r4, #12]
    e26e:	f003 0307 	and.w	r3, r3, #7
    e272:	4213      	tst	r3, r2
    e274:	f43f a834 	beq.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			if (conn->llcp_req != conn->llcp_ack) {
    e278:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e27c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e280:	429a      	cmp	r2, r3
    e282:	f47f a82d 	bne.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
			memcpy(&conn->llcp.chan_map.chm[0],
    e286:	2205      	movs	r2, #5
    e288:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e28c:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e290:	f7f3 fcd9 	bl	1c46 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e294:	2301      	movs	r3, #1
    e296:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e29a:	2302      	movs	r3, #2
    e29c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e2a0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e2a4:	3b01      	subs	r3, #1
    e2a6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e2aa:	f7ff b819 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
		nack = unknown_rsp_send(_radio.conn_curr,
    e2ae:	4817      	ldr	r0, [pc, #92]	; (e30c <isr_rx_conn_pkt_ctrl+0x11c8>)
    e2b0:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2b4:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e2b8:	f7f8 ffef 	bl	729a <mem_acquire>
	if (!node_tx) {
    e2bc:	4601      	mov	r1, r0
    e2be:	2800      	cmp	r0, #0
    e2c0:	f43f a946 	beq.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2c4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e2c6:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2c8:	f043 0303 	orr.w	r3, r3, #3
    e2cc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e2ce:	2302      	movs	r3, #2
    e2d0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e2d2:	2307      	movs	r3, #7
    e2d4:	71c3      	strb	r3, [r0, #7]
    e2d6:	f7ff b978 	b.w	d5ca <isr_rx_conn_pkt_ctrl+0x486>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e2da:	2328      	movs	r3, #40	; 0x28
    e2dc:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e2e0:	f7fe bffe 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
	if (node_tx) {
    e2e4:	2e00      	cmp	r6, #0
    e2e6:	f43f a933 	beq.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e2ea:	490a      	ldr	r1, [pc, #40]	; (e314 <isr_rx_conn_pkt_ctrl+0x11d0>)
    e2ec:	4630      	mov	r0, r6
    e2ee:	f7f8 ffee 	bl	72ce <mem_release>
    e2f2:	f7ff b92d 	b.w	d550 <isr_rx_conn_pkt_ctrl+0x40c>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e2f6:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e2f8:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e2fa:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e2fc:	4693      	mov	fp, r2
    e2fe:	e5e3      	b.n	dec8 <isr_rx_conn_pkt_ctrl+0xd84>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e300:	2328      	movs	r3, #40	; 0x28
    e302:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e306:	f7fe bfeb 	b.w	d2e0 <isr_rx_conn_pkt_ctrl+0x19c>
    e30a:	bf00      	nop
    e30c:	200008e8 	.word	0x200008e8
    e310:	000169cc 	.word	0x000169cc
    e314:	20000a44 	.word	0x20000a44

0000e318 <isr>:
{
    e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e31c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e31e:	f003 fd7d 	bl	11e1c <radio_is_done>
    e322:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e324:	b366      	cbz	r6, e380 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e326:	f003 fd99 	bl	11e5c <radio_crc_is_valid>
    e32a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e32c:	f003 fe1a 	bl	11f64 <radio_filter_has_match>
    e330:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e334:	f003 fe20 	bl	11f78 <radio_filter_match_get>
    e338:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e33c:	f004 f804 	bl	12348 <radio_ar_has_match>
    e340:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e344:	f003 ffee 	bl	12324 <radio_ar_match_get>
    e348:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e34c:	f003 fdd4 	bl	11ef8 <radio_rssi_is_ready>
    e350:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e352:	4cad      	ldr	r4, [pc, #692]	; (e608 <isr+0x2f0>)
	radio_status_reset();
    e354:	f003 fd4c 	bl	11df0 <radio_status_reset>
	radio_tmr_status_reset();
    e358:	f003 fe20 	bl	11f9c <radio_tmr_status_reset>
	radio_filter_status_reset();
    e35c:	f003 fdfa 	bl	11f54 <radio_filter_status_reset>
	radio_ar_status_reset();
    e360:	f003 ffe6 	bl	12330 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e364:	f003 fdc0 	bl	11ee8 <radio_rssi_status_reset>
	switch (_radio.state) {
    e368:	7d23      	ldrb	r3, [r4, #20]
    e36a:	2b05      	cmp	r3, #5
    e36c:	f201 83e7 	bhi.w	fb3e <isr+0x1826>
    e370:	e8df f013 	tbh	[pc, r3, lsl #1]
    e374:	00c30077 	.word	0x00c30077
    e378:	09c3000e 	.word	0x09c3000e
    e37c:	09c309c3 	.word	0x09c309c3
		devmatch_id = irkmatch_id = 0xFF;
    e380:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e384:	4635      	mov	r5, r6
    e386:	46b2      	mov	sl, r6
    e388:	46b1      	mov	r9, r6
    e38a:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e38c:	46d8      	mov	r8, fp
    e38e:	e7e0      	b.n	e352 <isr+0x3a>
	_radio.state = STATE_RX;
    e390:	2301      	movs	r3, #1
    e392:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e394:	f003 ff04 	bl	121a0 <radio_tmr_tifs_base_get>
    e398:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e39a:	2096      	movs	r0, #150	; 0x96
    e39c:	f003 fe0c 	bl	11fb8 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e3a0:	7ce3      	ldrb	r3, [r4, #19]
    e3a2:	3b01      	subs	r3, #1
    e3a4:	2b03      	cmp	r3, #3
    e3a6:	f200 80a5 	bhi.w	e4f4 <isr+0x1dc>
    e3aa:	e8df f003 	tbb	[pc, r3]
    e3ae:	2d02      	.short	0x2d02
    e3b0:	5d5d      	.short	0x5d5d
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e3b2:	2300      	movs	r3, #0
    e3b4:	461a      	mov	r2, r3
    e3b6:	4619      	mov	r1, r3
    e3b8:	4618      	mov	r0, r3
    e3ba:	f003 fd6d 	bl	11e98 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e3be:	f003 fd5b 	bl	11e78 <radio_pkt_scratch_get>
    e3c2:	f003 fcdd 	bl	11d80 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e3c6:	f003 fd1f 	bl	11e08 <radio_is_ready>
    e3ca:	b110      	cbz	r0, e3d2 <isr+0xba>
		LL_ASSERT(!radio_is_ready());
    e3cc:	4a8f      	ldr	r2, [pc, #572]	; (e60c <isr+0x2f4>)
	LL_ASSERT(!radio_is_ready());
    e3ce:	4990      	ldr	r1, [pc, #576]	; (e610 <isr+0x2f8>)
    e3d0:	e323      	b.n	ea1a <isr+0x702>
		if (ctrl_rl_enabled()) {
    e3d2:	f003 f82d 	bl	11430 <ctrl_rl_enabled>
    e3d6:	b138      	cbz	r0, e3e8 <isr+0xd0>
			u8_t count, *irks = ctrl_irks_get(&count);
    e3d8:	a810      	add	r0, sp, #64	; 0x40
    e3da:	f002 fdd3 	bl	10f84 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e3de:	4601      	mov	r1, r0
    e3e0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e3e4:	f003 ff6c 	bl	122c0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e3e8:	2100      	movs	r1, #0
    e3ea:	4608      	mov	r0, r1
    e3ec:	f003 fcdd 	bl	11daa <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e3f0:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3f2:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e3f4:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3f6:	4608      	mov	r0, r1
    e3f8:	f003 fcd3 	bl	11da2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e3fc:	1a28      	subs	r0, r5, r0
    e3fe:	f003 fe65 	bl	120cc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e402:	f003 feb5 	bl	12170 <radio_tmr_end_capture>
    e406:	e02c      	b.n	e462 <isr+0x14a>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e408:	2300      	movs	r3, #0
    e40a:	461a      	mov	r2, r3
    e40c:	4619      	mov	r1, r3
    e40e:	4618      	mov	r0, r3
    e410:	f003 fd42 	bl	11e98 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e414:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e418:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e41c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e420:	3008      	adds	r0, #8
    e422:	f003 fcad 	bl	11d80 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e426:	f003 fcef 	bl	11e08 <radio_is_ready>
    e42a:	2800      	cmp	r0, #0
    e42c:	d1ce      	bne.n	e3cc <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e42e:	f002 ffff 	bl	11430 <ctrl_rl_enabled>
    e432:	b138      	cbz	r0, e444 <isr+0x12c>
			u8_t count, *irks = ctrl_irks_get(&count);
    e434:	a810      	add	r0, sp, #64	; 0x40
    e436:	f002 fda5 	bl	10f84 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e43a:	4601      	mov	r1, r0
    e43c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e440:	f003 ff3e 	bl	122c0 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e444:	2100      	movs	r1, #0
    e446:	4608      	mov	r0, r1
    e448:	f003 fcaf 	bl	11daa <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e44c:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e44e:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e450:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e452:	4608      	mov	r0, r1
    e454:	f003 fca5 	bl	11da2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e458:	1a28      	subs	r0, r5, r0
    e45a:	f003 fe37 	bl	120cc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e45e:	f003 fd33 	bl	11ec8 <radio_rssi_measure>
}
    e462:	b013      	add	sp, #76	; 0x4c
    e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e468:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e46c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e470:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e474:	2100      	movs	r1, #0
    e476:	09d3      	lsrs	r3, r2, #7
    e478:	f000 0007 	and.w	r0, r0, #7
    e47c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e480:	f003 fd0a 	bl	11e98 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e484:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e488:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e48c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e494:	3108      	adds	r1, #8
    e496:	f7fb ff37 	bl	a308 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e49a:	f003 fcb5 	bl	11e08 <radio_is_ready>
    e49e:	2800      	cmp	r0, #0
    e4a0:	d194      	bne.n	e3cc <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e4a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e4a6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e4aa:	2101      	movs	r1, #1
    e4ac:	f000 0007 	and.w	r0, r0, #7
    e4b0:	f003 fc7b 	bl	11daa <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e4b4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e4b8:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e4bc:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e4c0:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e4c2:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e4c4:	4405      	add	r5, r0
	switch (phy) {
    e4c6:	d013      	beq.n	e4f0 <isr+0x1d8>
		return 40;
    e4c8:	2b04      	cmp	r3, #4
    e4ca:	bf0c      	ite	eq
    e4cc:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e4d0:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e4d2:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e4d4:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e4d8:	09c1      	lsrs	r1, r0, #7
    e4da:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e4de:	f003 fc60 	bl	11da2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e4e2:	1a28      	subs	r0, r5, r0
    e4e4:	f003 fdf2 	bl	120cc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e4e8:	2001      	movs	r0, #1
    e4ea:	f7fc fc33 	bl	ad54 <packet_tx_enqueue>
    e4ee:	e7b8      	b.n	e462 <isr+0x14a>
		return 24;
    e4f0:	2018      	movs	r0, #24
    e4f2:	e7ee      	b.n	e4d2 <isr+0x1ba>
		LL_ASSERT(0);
    e4f4:	4a45      	ldr	r2, [pc, #276]	; (e60c <isr+0x2f4>)
		LL_ASSERT(0);
    e4f6:	4947      	ldr	r1, [pc, #284]	; (e614 <isr+0x2fc>)
    e4f8:	e28f      	b.n	ea1a <isr+0x702>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e4fa:	b926      	cbnz	r6, e506 <isr+0x1ee>
		_radio.state = STATE_CLOSE;
    e4fc:	2303      	movs	r3, #3
    e4fe:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e500:	f003 fc64 	bl	11dcc <radio_disable>
    e504:	e7ad      	b.n	e462 <isr+0x14a>
	switch (_radio.role) {
    e506:	7ce3      	ldrb	r3, [r4, #19]
    e508:	3b01      	subs	r3, #1
    e50a:	2b03      	cmp	r3, #3
    e50c:	f201 80f2 	bhi.w	f6f4 <isr+0x13dc>
    e510:	e8df f013 	tbh	[pc, r3, lsl #1]
    e514:	02aa0004 	.word	0x02aa0004
    e518:	05b705b7 	.word	0x05b705b7
		if (crc_ok) {
    e51c:	2f00      	cmp	r7, #0
    e51e:	d0ed      	beq.n	e4fc <isr+0x1e4>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e520:	f1ba 0f00 	cmp.w	sl, #0
    e524:	d039      	beq.n	e59a <isr+0x282>
    e526:	4658      	mov	r0, fp
    e528:	f002 fd6e 	bl	11008 <ctrl_rl_irk_idx>
    e52c:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e530:	f003 fca2 	bl	11e78 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e534:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e538:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e53a:	232b      	movs	r3, #43	; 0x2b
    e53c:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e53e:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e540:	fb11 3302 	smlabb	r3, r1, r2, r3
    e544:	930a      	str	r3, [sp, #40]	; 0x28
    e546:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e548:	f000 030f 	and.w	r3, r0, #15
    e54c:	2b03      	cmp	r3, #3
    e54e:	d10a      	bne.n	e566 <isr+0x24e>
    e550:	7873      	ldrb	r3, [r6, #1]
    e552:	2b0c      	cmp	r3, #12
    e554:	d107      	bne.n	e566 <isr+0x24e>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e556:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e55a:	065f      	lsls	r7, r3, #25
    e55c:	d51f      	bpl.n	e59e <isr+0x286>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e55e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e562:	0658      	lsls	r0, r3, #25
    e564:	d446      	bmi.n	e5f4 <isr+0x2dc>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e566:	7830      	ldrb	r0, [r6, #0]
    e568:	f000 030f 	and.w	r3, r0, #15
    e56c:	2b05      	cmp	r3, #5
    e56e:	d1c5      	bne.n	e4fc <isr+0x1e4>
    e570:	7873      	ldrb	r3, [r6, #1]
    e572:	2b22      	cmp	r3, #34	; 0x22
    e574:	d1c2      	bne.n	e4fc <isr+0x1e4>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e578:	5ce3      	ldrb	r3, [r4, r3]
    e57a:	f003 030f 	and.w	r3, r3, #15
    e57e:	2b01      	cmp	r3, #1
    e580:	f040 8140 	bne.w	e804 <isr+0x4ec>
					    ci->connect_ind.init_addr,
    e584:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e586:	aa10      	add	r2, sp, #64	; 0x40
    e588:	4639      	mov	r1, r7
    e58a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e58e:	f002 fef3 	bl	11378 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e592:	2800      	cmp	r0, #0
    e594:	d142      	bne.n	e61c <isr+0x304>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e596:	2000      	movs	r0, #0
    e598:	e050      	b.n	e63c <isr+0x324>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e59a:	20ff      	movs	r0, #255	; 0xff
    e59c:	e7c6      	b.n	e52c <isr+0x214>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e59e:	aa10      	add	r2, sp, #64	; 0x40
    e5a0:	1cb1      	adds	r1, r6, #2
    e5a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e5a6:	f002 fee7 	bl	11378 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e5aa:	2800      	cmp	r0, #0
    e5ac:	d0d7      	beq.n	e55e <isr+0x246>
	return (adv->tx_addr == sr->rx_addr) &&
    e5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e5b0:	7832      	ldrb	r2, [r6, #0]
    e5b2:	5ce3      	ldrb	r3, [r4, r3]
    e5b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e5b8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e5bc:	d1d3      	bne.n	e566 <isr+0x24e>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e5be:	2206      	movs	r2, #6
    e5c0:	f106 0108 	add.w	r1, r6, #8
    e5c4:	1ca8      	adds	r0, r5, #2
    e5c6:	f7f3 fb29 	bl	1c1c <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e5ca:	2800      	cmp	r0, #0
    e5cc:	d1cb      	bne.n	e566 <isr+0x24e>
		_radio.state = STATE_CLOSE;
    e5ce:	2503      	movs	r5, #3
    e5d0:	7525      	strb	r5, [r4, #20]
		radio_switch_complete_and_disable();
    e5d2:	f003 fc6b 	bl	11eac <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e5d6:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e5da:	2327      	movs	r3, #39	; 0x27
    e5dc:	fb03 4000 	mla	r0, r3, r0, r4
    e5e0:	307b      	adds	r0, #123	; 0x7b
    e5e2:	f003 fbd3 	bl	11d8c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e5e6:	f003 fc0f 	bl	11e08 <radio_is_ready>
    e5ea:	2800      	cmp	r0, #0
    e5ec:	f43f af39 	beq.w	e462 <isr+0x14a>
    e5f0:	4a09      	ldr	r2, [pc, #36]	; (e618 <isr+0x300>)
    e5f2:	e6ec      	b.n	e3ce <isr+0xb6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e5f4:	f1b9 0f00 	cmp.w	r9, #0
    e5f8:	d1d9      	bne.n	e5ae <isr+0x296>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e5fa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e5fe:	f002 fd33 	bl	11068 <ctrl_irk_whitelisted>
    e602:	2800      	cmp	r0, #0
    e604:	d1d3      	bne.n	e5ae <isr+0x296>
    e606:	e7ae      	b.n	e566 <isr+0x24e>
    e608:	200008e8 	.word	0x200008e8
    e60c:	000165d6 	.word	0x000165d6
    e610:	00016c4e 	.word	0x00016c4e
    e614:	000153a4 	.word	0x000153a4
    e618:	000165e9 	.word	0x000165e9
		       isr_adv_ci_adva_check(adv, ci) &&
    e61c:	4631      	mov	r1, r6
    e61e:	4628      	mov	r0, r5
    e620:	f7fc f940 	bl	a8a4 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e624:	2800      	cmp	r0, #0
    e626:	d0b6      	beq.n	e596 <isr+0x27e>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e628:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e62c:	2bff      	cmp	r3, #255	; 0xff
    e62e:	f000 80d6 	beq.w	e7de <isr+0x4c6>
		return rl_idx == _radio.advertiser.rl_idx;
    e632:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e636:	1ac1      	subs	r1, r0, r3
    e638:	4248      	negs	r0, r1
    e63a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e63c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e640:	2800      	cmp	r0, #0
    e642:	f43f af5b 	beq.w	e4fc <isr+0x1e4>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e646:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e64a:	b133      	cbz	r3, e65a <isr+0x342>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e64c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e650:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e654:	429a      	cmp	r2, r3
    e656:	f47f af51 	bne.w	e4fc <isr+0x1e4>
    e65a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e65e:	2b00      	cmp	r3, #0
    e660:	f43f af4c 	beq.w	e4fc <isr+0x1e4>
			node_rx = packet_rx_reserve_get(4);
    e664:	2004      	movs	r0, #4
    e666:	f7fb fb83 	bl	9d70 <packet_rx_reserve_get>
		if (!node_rx) {
    e66a:	4607      	mov	r7, r0
    e66c:	2800      	cmp	r0, #0
    e66e:	f43f af45 	beq.w	e4fc <isr+0x1e4>
		_radio.state = STATE_STOP;
    e672:	f04f 0904 	mov.w	r9, #4
    e676:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e67a:	f003 fba7 	bl	11dcc <radio_disable>
		conn = _radio.advertiser.conn;
    e67e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e682:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e686:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e688:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e68c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e68e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e692:	f7f8 fe3a 	bl	730a <mem_index_get>
		memcpy(&conn->access_addr[0],
    e696:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e69a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e69c:	2203      	movs	r2, #3
    e69e:	f106 0112 	add.w	r1, r6, #18
    e6a2:	f105 0014 	add.w	r0, r5, #20
    e6a6:	f7f3 face 	bl	1c46 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e6aa:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e6ae:	464a      	mov	r2, r9
    e6b0:	f106 010e 	add.w	r1, r6, #14
    e6b4:	4650      	mov	r0, sl
    e6b6:	f7f3 fac6 	bl	1c46 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e6ba:	2205      	movs	r2, #5
    e6bc:	f106 011e 	add.w	r1, r6, #30
    e6c0:	4640      	mov	r0, r8
    e6c2:	f7f3 fac0 	bl	1c46 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e6c6:	2105      	movs	r1, #5
    e6c8:	4640      	mov	r0, r8
    e6ca:	f7f8 ff91 	bl	75f0 <util_ones_count_get>
		conn->data_chan_count =
    e6ce:	7f6b      	ldrb	r3, [r5, #29]
    e6d0:	f360 0305 	bfi	r3, r0, #0, #6
    e6d4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e6d6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e6da:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e6de:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e6e0:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e6e2:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e6e4:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e6e8:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e6ec:	7ef2      	ldrb	r2, [r6, #27]
    e6ee:	7eb3      	ldrb	r3, [r6, #26]
    e6f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e6f4:	4651      	mov	r1, sl
    e6f6:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e6f8:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e6fa:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e6fe:	f7f3 faa2 	bl	1c46 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e702:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e704:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e706:	f242 7210 	movw	r2, #10000	; 0x2710
    e70a:	fb02 8303 	mla	r3, r2, r3, r8
    e70e:	3b01      	subs	r3, #1
    e710:	fbb3 f3f8 	udiv	r3, r3, r8
    e714:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e716:	4bc8      	ldr	r3, [pc, #800]	; (ea38 <isr+0x720>)
    e718:	4443      	add	r3, r8
    e71a:	fbb3 f3f8 	udiv	r3, r3, r8
    e71e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e722:	4bc6      	ldr	r3, [pc, #792]	; (ea3c <isr+0x724>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e724:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e726:	4443      	add	r3, r8
    e728:	fbb3 f3f8 	udiv	r3, r3, r8
    e72c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e72e:	4282      	cmp	r2, r0
    e730:	4613      	mov	r3, r2
    e732:	bfc4      	itt	gt
    e734:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e738:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e73a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e73e:	bfc4      	itt	gt
    e740:	18d2      	addgt	r2, r2, r3
    e742:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e744:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e746:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e74a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e74c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e74e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e750:	2300      	movs	r3, #0
    e752:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e754:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e756:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e75a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e75c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e760:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e764:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e766:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e76a:	464a      	mov	r2, r9
    e76c:	f107 001b 	add.w	r0, r7, #27
    e770:	f7f3 fa69 	bl	1c46 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e774:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e778:	f107 030e 	add.w	r3, r7, #14
    e77c:	28ff      	cmp	r0, #255	; 0xff
    e77e:	930b      	str	r3, [sp, #44]	; 0x2c
    e780:	f106 0a02 	add.w	sl, r6, #2
    e784:	f107 0b14 	add.w	fp, r7, #20
    e788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e78a:	d05a      	beq.n	e842 <isr+0x52a>
			ll_rl_id_addr_get(rl_idx,
    e78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e78e:	f107 010d 	add.w	r1, r7, #13
    e792:	f002 fdc3 	bl	1131c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e796:	7b7b      	ldrb	r3, [r7, #13]
    e798:	3302      	adds	r3, #2
    e79a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e79c:	464a      	mov	r2, r9
    e79e:	4651      	mov	r1, sl
    e7a0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e7a2:	f7f3 fa50 	bl	1c46 <memcpy>
			pdu_adv->connect_ind.interval;
    e7a6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e7a8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e7ac:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e7ae:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e7b2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e7b4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e7b8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e7bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e7c4:	8c28      	ldrh	r0, [r5, #32]
    e7c6:	f7fc f8dd 	bl	a984 <rx_fc_lock>
		packet_rx_enqueue();
    e7ca:	f7fc fca3 	bl	b114 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e7ce:	2003      	movs	r0, #3
    e7d0:	f7fb face 	bl	9d70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e7d4:	2800      	cmp	r0, #0
    e7d6:	d141      	bne.n	e85c <isr+0x544>
    e7d8:	4a99      	ldr	r2, [pc, #612]	; (ea40 <isr+0x728>)
			LL_ASSERT(node_rx);
    e7da:	499a      	ldr	r1, [pc, #616]	; (ea44 <isr+0x72c>)
    e7dc:	e11d      	b.n	ea1a <isr+0x702>
	return (adv->rx_addr == ci->tx_addr) &&
    e7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e7e0:	5ce2      	ldrb	r2, [r4, r3]
    e7e2:	7833      	ldrb	r3, [r6, #0]
    e7e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e7e8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e7ec:	f47f aed3 	bne.w	e596 <isr+0x27e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e7f0:	2206      	movs	r2, #6
    e7f2:	4639      	mov	r1, r7
    e7f4:	f105 0008 	add.w	r0, r5, #8
    e7f8:	f7f3 fa10 	bl	1c1c <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e7fc:	fab0 f080 	clz	r0, r0
    e800:	0940      	lsrs	r0, r0, #5
    e802:	e71b      	b.n	e63c <isr+0x324>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e804:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e808:	09db      	lsrs	r3, r3, #7
    e80a:	d00d      	beq.n	e828 <isr+0x510>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e80c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e810:	09db      	lsrs	r3, r3, #7
    e812:	f43f aec0 	beq.w	e596 <isr+0x27e>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e816:	f1b9 0f00 	cmp.w	r9, #0
    e81a:	d10d      	bne.n	e838 <isr+0x520>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e81c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e820:	f002 fc22 	bl	11068 <ctrl_irk_whitelisted>
    e824:	b940      	cbnz	r0, e838 <isr+0x520>
    e826:	e6b6      	b.n	e596 <isr+0x27e>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e828:	aa10      	add	r2, sp, #64	; 0x40
    e82a:	1cb1      	adds	r1, r6, #2
    e82c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e830:	f002 fda2 	bl	11378 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e834:	2800      	cmp	r0, #0
    e836:	d0e9      	beq.n	e80c <isr+0x4f4>
	       isr_adv_ci_adva_check(adv, ci);
    e838:	4631      	mov	r1, r6
    e83a:	4628      	mov	r0, r5
    e83c:	f7fc f832 	bl	a8a4 <isr_adv_ci_adva_check>
    e840:	e6fc      	b.n	e63c <isr+0x324>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e842:	4619      	mov	r1, r3
    e844:	464a      	mov	r2, r9
    e846:	4658      	mov	r0, fp
    e848:	f7f3 fa29 	bl	1c9e <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e84c:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e84e:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e850:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e854:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e856:	464a      	mov	r2, r9
    e858:	4651      	mov	r1, sl
    e85a:	e7a2      	b.n	e7a2 <isr+0x48a>
			node_rx->hdr.handle = conn->handle;
    e85c:	8c2b      	ldrh	r3, [r5, #32]
    e85e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e860:	230b      	movs	r3, #11
    e862:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e864:	7833      	ldrb	r3, [r6, #0]
    e866:	f013 0320 	ands.w	r3, r3, #32
    e86a:	d00e      	beq.n	e88a <isr+0x572>
					((u16_t)conn->access_addr[1] << 8) |
    e86c:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e86e:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e870:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e876:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e878:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e87c:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e87e:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e880:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e884:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e886:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e888:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e88a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e88c:	f7fc fc42 	bl	b114 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e890:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e894:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e898:	496b      	ldr	r1, [pc, #428]	; (ea48 <isr+0x730>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e89a:	0952      	lsrs	r2, r2, #5
    e89c:	f362 0384 	bfi	r3, r2, #2, #3
    e8a0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e8a4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    e8a8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e8ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e8b0:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e8b2:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8b6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e8ba:	4a64      	ldr	r2, [pc, #400]	; (ea4c <isr+0x734>)
    e8bc:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e8c0:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e8c4:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e8c6:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e8ca:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e8cc:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e8ce:	7d73      	ldrb	r3, [r6, #21]
    e8d0:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e8d4:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e8d6:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e8da:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8dc:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e8de:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8e0:	4638      	mov	r0, r7
    e8e2:	f003 fa60 	bl	11da6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e8e6:	495a      	ldr	r1, [pc, #360]	; (ea50 <isr+0x738>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e8e8:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e8ea:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e8ee:	a350      	add	r3, pc, #320	; (adr r3, ea30 <isr+0x718>)
    e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e8f4:	fba0 0101 	umull	r0, r1, r0, r1
    e8f8:	f7f1 fc8c 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e8fc:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    e900:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e902:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e904:	4293      	cmp	r3, r2
    e906:	bf38      	it	cc
    e908:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e90a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e90e:	469a      	mov	sl, r3
		conn_interval_us -=
    e910:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    e912:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    e914:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    e916:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    e918:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    e91c:	f003 fc3a 	bl	12194 <radio_tmr_end_get>
    e920:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    e922:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e924:	4639      	mov	r1, r7
		conn_offset_us +=
    e926:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e92a:	4638      	mov	r0, r7
    e92c:	f003 fa39 	bl	11da2 <radio_tx_chain_delay_get>
    e930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e932:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    e936:	4499      	add	r9, r3
    e938:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    e93c:	eba9 030b 	sub.w	r3, r9, fp
    e940:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e942:	f240 4383 	movw	r3, #1155	; 0x483
    e946:	9300      	str	r3, [sp, #0]
    e948:	2205      	movs	r2, #5
    e94a:	4b42      	ldr	r3, [pc, #264]	; (ea54 <isr+0x73c>)
    e94c:	f8df b100 	ldr.w	fp, [pc, #256]	; ea50 <isr+0x738>
    e950:	4639      	mov	r1, r7
    e952:	4638      	mov	r0, r7
    e954:	f7f9 fbbe 	bl	80d4 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    e958:	f240 4184 	movw	r1, #1156	; 0x484
    e95c:	f7fc f83e 	bl	a9dc <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e962:	5ce3      	ldrb	r3, [r4, r3]
    e964:	f003 030f 	and.w	r3, r3, #15
    e968:	2b01      	cmp	r3, #1
    e96a:	d106      	bne.n	e97a <isr+0x662>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e96c:	9700      	str	r7, [sp, #0]
    e96e:	463b      	mov	r3, r7
    e970:	2203      	movs	r2, #3
    e972:	4639      	mov	r1, r7
    e974:	4638      	mov	r0, r7
    e976:	f7f9 fbad 	bl	80d4 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e97a:	fba8 890b 	umull	r8, r9, r8, fp
    e97e:	a32c      	add	r3, pc, #176	; (adr r3, ea30 <isr+0x718>)
    e980:	e9d3 2300 	ldrd	r2, r3, [r3]
    e984:	4640      	mov	r0, r8
    e986:	4649      	mov	r1, r9
    e988:	f7f1 fc44 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e98c:	f895 3020 	ldrb.w	r3, [r5, #32]
    e990:	68a4      	ldr	r4, [r4, #8]
    e992:	9506      	str	r5, [sp, #24]
    e994:	3307      	adds	r3, #7
    e996:	b2db      	uxtb	r3, r3
    e998:	930a      	str	r3, [sp, #40]	; 0x28
    e99a:	f240 439b 	movw	r3, #1179	; 0x49b
    e99e:	9308      	str	r3, [sp, #32]
    e9a0:	4b2d      	ldr	r3, [pc, #180]	; (ea58 <isr+0x740>)
    e9a2:	9307      	str	r3, [sp, #28]
    e9a4:	4b2d      	ldr	r3, [pc, #180]	; (ea5c <isr+0x744>)
    e9a6:	9305      	str	r3, [sp, #20]
    e9a8:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9aa:	4a2d      	ldr	r2, [pc, #180]	; (ea60 <isr+0x748>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9ac:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e9ae:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9b0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e9b6:	2307      	movs	r3, #7
    e9b8:	2100      	movs	r1, #0
    e9ba:	4343      	muls	r3, r0
    e9bc:	fb02 3301 	mla	r3, r2, r1, r3
    e9c0:	fba0 1202 	umull	r1, r2, r0, r2
    e9c4:	441a      	add	r2, r3
    e9c6:	4608      	mov	r0, r1
    e9c8:	ebb8 0000 	subs.w	r0, r8, r0
    e9cc:	4611      	mov	r1, r2
    e9ce:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9d2:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9d8:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9da:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9dc:	f7f1 fc1a 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9e2:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9e4:	a312      	add	r3, pc, #72	; (adr r3, ea30 <isr+0x718>)
    e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9ea:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9ee:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f2:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e9f4:	f7f1 fc0e 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f8:	eba4 040a 	sub.w	r4, r4, sl
    e9fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea00:	9000      	str	r0, [sp, #0]
    ea02:	4623      	mov	r3, r4
    ea04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ea06:	4629      	mov	r1, r5
    ea08:	4628      	mov	r0, r5
    ea0a:	f7f9 fac5 	bl	7f98 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea0e:	f030 0302 	bics.w	r3, r0, #2
    ea12:	f43f ad26 	beq.w	e462 <isr+0x14a>
    ea16:	4a0a      	ldr	r2, [pc, #40]	; (ea40 <isr+0x728>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea18:	4912      	ldr	r1, [pc, #72]	; (ea64 <isr+0x74c>)
		LL_ASSERT(0);
    ea1a:	2003      	movs	r0, #3
    ea1c:	f7f3 fada 	bl	1fd4 <bt_log>
    ea20:	4040      	eors	r0, r0
    ea22:	f380 8811 	msr	BASEPRI, r0
    ea26:	f04f 0004 	mov.w	r0, #4
    ea2a:	df02      	svc	2
    ea2c:	f3af 8000 	nop.w
    ea30:	1afd498d 	.word	0x1afd498d
    ea34:	00000007 	.word	0x00000007
    ea38:	026259ff 	.word	0x026259ff
    ea3c:	01c9c37f 	.word	0x01c9c37f
    ea40:	000165e9 	.word	0x000165e9
    ea44:	00016ff5 	.word	0x00016ff5
    ea48:	00016c3e 	.word	0x00016c3e
    ea4c:	000f4240 	.word	0x000f4240
    ea50:	3b9aca00 	.word	0x3b9aca00
    ea54:	0000a9dd 	.word	0x0000a9dd
    ea58:	0000a9b9 	.word	0x0000a9b9
    ea5c:	0000cce9 	.word	0x0000cce9
    ea60:	1afd498d 	.word	0x1afd498d
    ea64:	00016a61 	.word	0x00016a61
		rl_idx = devmatch_ok ?
    ea68:	f1b9 0f00 	cmp.w	r9, #0
    ea6c:	d01c      	beq.n	eaa8 <isr+0x790>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ea6e:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ea72:	4641      	mov	r1, r8
    ea74:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ea78:	f002 fa8e 	bl	10f98 <ctrl_rl_idx>
    ea7c:	4680      	mov	r8, r0
		if (crc_ok &&
    ea7e:	b147      	cbz	r7, ea92 <isr+0x77a>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ea80:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ea84:	06da      	lsls	r2, r3, #27
    ea86:	d519      	bpl.n	eabc <isr+0x7a4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ea88:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ea8c:	06db      	lsls	r3, r3, #27
    ea8e:	f100 80fe 	bmi.w	ec8e <isr+0x976>
			_radio.state = STATE_CLOSE;
    ea92:	2303      	movs	r3, #3
    ea94:	7523      	strb	r3, [r4, #20]
			radio_disable();
    ea96:	f003 f999 	bl	11dcc <radio_disable>
			_radio.scanner.state = 0;
    ea9a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ea9e:	f36f 0341 	bfc	r3, #1, #1
    eaa2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    eaa6:	e4dc      	b.n	e462 <isr+0x14a>
		rl_idx = devmatch_ok ?
    eaa8:	f1ba 0f00 	cmp.w	sl, #0
    eaac:	d003      	beq.n	eab6 <isr+0x79e>
    eaae:	4658      	mov	r0, fp
    eab0:	f002 faaa 	bl	11008 <ctrl_rl_irk_idx>
    eab4:	e7e2      	b.n	ea7c <isr+0x764>
    eab6:	f04f 08ff 	mov.w	r8, #255	; 0xff
    eaba:	e7e0      	b.n	ea7e <isr+0x766>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    eabc:	f1b9 0f00 	cmp.w	r9, #0
    eac0:	d005      	beq.n	eace <isr+0x7b6>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eac2:	4641      	mov	r1, r8
    eac4:	4650      	mov	r0, sl
    eac6:	f002 fc01 	bl	112cc <ctrl_rl_idx_allowed>
    eaca:	2800      	cmp	r0, #0
    eacc:	d0dc      	beq.n	ea88 <isr+0x770>
	bool dir_report = false;
    eace:	2300      	movs	r3, #0
    ead0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ead4:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ead8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    eadc:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eae0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    eae4:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eae8:	2b00      	cmp	r3, #0
    eaea:	f000 80e9 	beq.w	ecc0 <isr+0x9a8>
    eaee:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    eaf2:	b133      	cbz	r3, eb02 <isr+0x7ea>
				      (_radio.fc_req == _radio.fc_ack)) &&
    eaf4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eaf8:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    eafc:	429a      	cmp	r2, r3
    eafe:	f040 80df 	bne.w	ecc0 <isr+0x9a8>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    eb02:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb06:	f3c3 1000 	ubfx	r0, r3, #4, #1
    eb0a:	2800      	cmp	r0, #0
    eb0c:	f000 80ca 	beq.w	eca4 <isr+0x98c>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    eb10:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb14:	f010 000f 	ands.w	r0, r0, #15
    eb18:	f040 8149 	bne.w	edae <isr+0xa96>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb1c:	f003 fb3a 	bl	12194 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb20:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb24:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb28:	48df      	ldr	r0, [pc, #892]	; (eea8 <isr+0xb90>)
    eb2a:	2207      	movs	r2, #7
    eb2c:	fba3 0100 	umull	r0, r1, r3, r0
    eb30:	fb02 1103 	mla	r1, r2, r3, r1
    eb34:	a3da      	add	r3, pc, #872	; (adr r3, eea0 <isr+0xb88>)
    eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb3a:	f7f1 fb6b 	bl	214 <__aeabi_uldivmod>
    eb3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    eb42:	4287      	cmp	r7, r0
    eb44:	f080 80bc 	bcs.w	ecc0 <isr+0x9a8>
			node_rx = packet_rx_reserve_get(4);
    eb48:	2004      	movs	r0, #4
    eb4a:	f7fb f911 	bl	9d70 <packet_rx_reserve_get>
		if (node_rx == 0) {
    eb4e:	4607      	mov	r7, r0
    eb50:	2800      	cmp	r0, #0
    eb52:	d09e      	beq.n	ea92 <isr+0x77a>
		_radio.state = STATE_STOP;
    eb54:	2304      	movs	r3, #4
    eb56:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    eb58:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    eb5a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    eb5e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eb62:	f003 f989 	bl	11e78 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    eb66:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    eb68:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    eb6c:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    eb70:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eb72:	f899 3008 	ldrb.w	r3, [r9, #8]
    eb76:	7802      	ldrb	r2, [r0, #0]
    eb78:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eb7c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    eb80:	2322      	movs	r3, #34	; 0x22
    eb82:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    eb84:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    eb86:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    eb88:	4640      	mov	r0, r8
    eb8a:	f002 f9e7 	bl	10f5c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    eb8e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    eb92:	4601      	mov	r1, r0
    eb94:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    eb96:	f013 0f01 	tst.w	r3, #1
    eb9a:	f810 3b02 	ldrb.w	r3, [r0], #2
    eb9e:	f000 8111 	beq.w	edc4 <isr+0xaac>
    eba2:	2900      	cmp	r1, #0
    eba4:	f000 810e 	beq.w	edc4 <isr+0xaac>
			pdu_adv_tx->tx_addr = 1;
    eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ebac:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebae:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebb0:	f7f3 f849 	bl	1c46 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ebb4:	f105 0308 	add.w	r3, r5, #8
    ebb8:	4618      	mov	r0, r3
    ebba:	2206      	movs	r2, #6
    ebbc:	f109 010a 	add.w	r1, r9, #10
    ebc0:	930a      	str	r3, [sp, #40]	; 0x28
    ebc2:	f7f3 f840 	bl	1c46 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ebc6:	2204      	movs	r2, #4
    ebc8:	f106 0110 	add.w	r1, r6, #16
    ebcc:	f105 000e 	add.w	r0, r5, #14
    ebd0:	f7f3 f839 	bl	1c46 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ebd4:	2203      	movs	r2, #3
    ebd6:	f106 0114 	add.w	r1, r6, #20
    ebda:	f105 0012 	add.w	r0, r5, #18
    ebde:	f7f3 f832 	bl	1c46 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ebe2:	2301      	movs	r3, #1
    ebe4:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ebe6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ebea:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ebee:	4353      	muls	r3, r2
    ebf0:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ebf2:	f003 facf 	bl	12194 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ebf6:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ebf8:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ebfc:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ebfe:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ec02:	bfd8      	it	le
    ec04:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ec08:	f1bb 0f00 	cmp.w	fp, #0
    ec0c:	f040 80e5 	bne.w	edda <isr+0xac2>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ec10:	f885 b016 	strb.w	fp, [r5, #22]
    ec14:	f885 b017 	strb.w	fp, [r5, #23]
    ec18:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec1a:	2100      	movs	r1, #0
    ec1c:	4608      	mov	r0, r1
    ec1e:	f003 f8bb 	bl	11d98 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec22:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec24:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec28:	4608      	mov	r0, r1
    ec2a:	f003 f8ba 	bl	11da2 <radio_tx_chain_delay_get>
    ec2e:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ec32:	f100 031e 	add.w	r3, r0, #30
    ec36:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ec38:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ec3c:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ec3e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ec42:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ec44:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ec48:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ec4a:	f106 0117 	add.w	r1, r6, #23
    ec4e:	2205      	movs	r2, #5
    ec50:	f105 001e 	add.w	r0, r5, #30
    ec54:	f7f2 fff7 	bl	1c46 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    ec58:	7fb2      	ldrb	r2, [r6, #30]
    ec5a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ec5e:	f362 0304 	bfi	r3, r2, #0, #5
    ec62:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ec66:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ec6a:	f362 1347 	bfi	r3, r2, #5, #3
    ec6e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    ec72:	f003 f91b 	bl	11eac <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    ec76:	4628      	mov	r0, r5
    ec78:	f003 f888 	bl	11d8c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ec7c:	f003 f8c4 	bl	11e08 <radio_is_ready>
    ec80:	4683      	mov	fp, r0
    ec82:	2800      	cmp	r0, #0
    ec84:	f000 80b9 	beq.w	edfa <isr+0xae2>
		LL_ASSERT(!radio_is_ready());
    ec88:	4a88      	ldr	r2, [pc, #544]	; (eeac <isr+0xb94>)
    ec8a:	f7ff bba0 	b.w	e3ce <isr+0xb6>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ec8e:	f1b9 0f00 	cmp.w	r9, #0
    ec92:	f47f af1c 	bne.w	eace <isr+0x7b6>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    ec96:	4640      	mov	r0, r8
    ec98:	f002 f9e6 	bl	11068 <ctrl_irk_whitelisted>
		if (crc_ok &&
    ec9c:	2800      	cmp	r0, #0
    ec9e:	f43f aef8 	beq.w	ea92 <isr+0x77a>
    eca2:	e714      	b.n	eace <isr+0x7b6>
	if (rl_idx != FILTER_IDX_NONE) {
    eca4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    eca8:	d06f      	beq.n	ed8a <isr+0xa72>
		return (rl_idx == _radio.scanner.rl_idx);
    ecaa:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    ecae:	eba0 0e08 	sub.w	lr, r0, r8
    ecb2:	f1de 0000 	rsbs	r0, lr, #0
    ecb6:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ecba:	2800      	cmp	r0, #0
    ecbc:	f47f af28 	bne.w	eb10 <isr+0x7f8>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ecc0:	f899 0008 	ldrb.w	r0, [r9, #8]
    ecc4:	f010 000f 	ands.w	r0, r0, #15
    ecc8:	d002      	beq.n	ecd0 <isr+0x9b8>
    ecca:	2806      	cmp	r0, #6
    eccc:	f040 81a3 	bne.w	f016 <isr+0xcfe>
		 (_radio.scanner.type != 0) &&
    ecd0:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    ecd4:	071f      	lsls	r7, r3, #28
    ecd6:	f140 8188 	bpl.w	efea <isr+0xcd2>
		 (_radio.scanner.type != 0) &&
    ecda:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    ecde:	2a00      	cmp	r2, #0
    ece0:	f040 8183 	bne.w	efea <isr+0xcd2>
		err = isr_rx_scan_report(rssi_ready,
    ece4:	f1ba 0f00 	cmp.w	sl, #0
    ece8:	bf14      	ite	ne
    ecea:	4641      	movne	r1, r8
    ecec:	21ff      	moveq	r1, #255	; 0xff
    ecee:	4628      	mov	r0, r5
    ecf0:	f7fc fa4c 	bl	b18c <isr_rx_scan_report>
		if (err) {
    ecf4:	2800      	cmp	r0, #0
    ecf6:	f47f aecc 	bne.w	ea92 <isr+0x77a>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ecfa:	f003 f8bd 	bl	11e78 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    ecfe:	7803      	ldrb	r3, [r0, #0]
    ed00:	2203      	movs	r2, #3
    ed02:	f362 0303 	bfi	r3, r2, #0, #4
    ed06:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed08:	f899 3008 	ldrb.w	r3, [r9, #8]
    ed0c:	7802      	ldrb	r2, [r0, #0]
    ed0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed12:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    ed16:	230c      	movs	r3, #12
    ed18:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ed1a:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed1c:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ed1e:	4640      	mov	r0, r8
    ed20:	f002 f91c 	bl	10f5c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ed24:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ed28:	4601      	mov	r1, r0
    ed2a:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ed2c:	f013 0f01 	tst.w	r3, #1
    ed30:	f810 3b02 	ldrb.w	r3, [r0], #2
    ed34:	f000 8150 	beq.w	efd8 <isr+0xcc0>
    ed38:	2900      	cmp	r1, #0
    ed3a:	f000 814d 	beq.w	efd8 <isr+0xcc0>
			pdu_adv_tx->tx_addr = 1;
    ed3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed42:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed44:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed46:	f7f2 ff7e 	bl	1c46 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ed4a:	2206      	movs	r2, #6
    ed4c:	f109 010a 	add.w	r1, r9, #10
    ed50:	f105 0008 	add.w	r0, r5, #8
    ed54:	f7f2 ff77 	bl	1c46 <memcpy>
		_radio.scanner.state = 1;
    ed58:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ed5c:	f043 0302 	orr.w	r3, r3, #2
    ed60:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    ed64:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ed66:	2302      	movs	r3, #2
    ed68:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ed6a:	f003 f925 	bl	11fb8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ed6e:	2000      	movs	r0, #0
    ed70:	f003 f886 	bl	11e80 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    ed74:	4628      	mov	r0, r5
    ed76:	f003 f809 	bl	11d8c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    ed7a:	f003 f9f9 	bl	12170 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    ed7e:	f003 f843 	bl	11e08 <radio_is_ready>
    ed82:	2800      	cmp	r0, #0
    ed84:	f43f ab6d 	beq.w	e462 <isr+0x14a>
    ed88:	e77e      	b.n	ec88 <isr+0x970>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    ed8a:	f899 2008 	ldrb.w	r2, [r9, #8]
    ed8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed92:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ed96:	4293      	cmp	r3, r2
    ed98:	d18f      	bne.n	ecba <isr+0x9a2>
		(memcmp(&_radio.scanner.adv_addr[0],
    ed9a:	2206      	movs	r2, #6
    ed9c:	f109 010a 	add.w	r1, r9, #10
    eda0:	4843      	ldr	r0, [pc, #268]	; (eeb0 <isr+0xb98>)
    eda2:	f7f2 ff3b 	bl	1c1c <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    eda6:	fab0 f080 	clz	r0, r0
    edaa:	0940      	lsrs	r0, r0, #5
    edac:	e785      	b.n	ecba <isr+0x9a2>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    edae:	2801      	cmp	r0, #1
    edb0:	d18b      	bne.n	ecca <isr+0x9b2>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    edb2:	2300      	movs	r3, #0
    edb4:	4642      	mov	r2, r8
    edb6:	4631      	mov	r1, r6
    edb8:	f7fb fd98 	bl	a8ec <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    edbc:	2800      	cmp	r0, #0
    edbe:	f43f af7f 	beq.w	ecc0 <isr+0x9a8>
    edc2:	e6ab      	b.n	eb1c <isr+0x804>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    edc4:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    edc8:	493a      	ldr	r1, [pc, #232]	; (eeb4 <isr+0xb9c>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    edca:	09d2      	lsrs	r2, r2, #7
    edcc:	f362 1386 	bfi	r3, r2, #6, #1
    edd0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    edd2:	2206      	movs	r2, #6
    edd4:	e6ec      	b.n	ebb0 <isr+0x898>
				conn_space_us += conn_interval_us;
    edd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edd8:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    edda:	f1bb 0f00 	cmp.w	fp, #0
    edde:	dbfa      	blt.n	edd6 <isr+0xabe>
    ede0:	459b      	cmp	fp, r3
    ede2:	d3f8      	bcc.n	edd6 <isr+0xabe>
				(conn_space_us - conn_offset_us) / 1250;
    ede4:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    ede8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    edec:	fbb3 f3f2 	udiv	r3, r3, r2
    edf0:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    edf2:	7d6b      	ldrb	r3, [r5, #21]
    edf4:	3301      	adds	r3, #1
    edf6:	756b      	strb	r3, [r5, #21]
    edf8:	e70f      	b.n	ec1a <isr+0x902>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    edfa:	f44f 72aa 	mov.w	r2, #340	; 0x154
    edfe:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    ee02:	4630      	mov	r0, r6
    ee04:	f7f8 fa81 	bl	730a <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee08:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee0a:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee0c:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    ee10:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    ee14:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee18:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee1a:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    ee1e:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee20:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee24:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ee26:	2206      	movs	r2, #6
    ee28:	f107 001b 	add.w	r0, r7, #27
    ee2c:	f7f2 ff0b 	bl	1c46 <memcpy>
    ee30:	f107 0b0e 	add.w	fp, r7, #14
    ee34:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    ee38:	f1ba 0f00 	cmp.w	sl, #0
    ee3c:	d03c      	beq.n	eeb8 <isr+0xba0>
    ee3e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ee42:	d039      	beq.n	eeb8 <isr+0xba0>
			ll_rl_id_addr_get(rl_idx,
    ee44:	465a      	mov	r2, fp
    ee46:	f107 010d 	add.w	r1, r7, #13
    ee4a:	4640      	mov	r0, r8
    ee4c:	930d      	str	r3, [sp, #52]	; 0x34
    ee4e:	f002 fa65 	bl	1131c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ee52:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ee54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee56:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    ee58:	3202      	adds	r2, #2
    ee5a:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ee5c:	4618      	mov	r0, r3
    ee5e:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ee60:	f7f2 fef1 	bl	1c46 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ee64:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ee68:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    ee6c:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ee70:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    ee74:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ee78:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    ee7c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ee80:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ee84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ee88:	8c30      	ldrh	r0, [r6, #32]
    ee8a:	f7fb fd7b 	bl	a984 <rx_fc_lock>
		packet_rx_enqueue();
    ee8e:	f7fc f941 	bl	b114 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ee92:	2003      	movs	r0, #3
    ee94:	f7fa ff6c 	bl	9d70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ee98:	b9d8      	cbnz	r0, eed2 <isr+0xbba>
    ee9a:	4a04      	ldr	r2, [pc, #16]	; (eeac <isr+0xb94>)
    ee9c:	e49d      	b.n	e7da <isr+0x4c2>
    ee9e:	bf00      	nop
    eea0:	3b9aca00 	.word	0x3b9aca00
    eea4:	00000000 	.word	0x00000000
    eea8:	1afd498d 	.word	0x1afd498d
    eeac:	00016607 	.word	0x00016607
    eeb0:	200009d2 	.word	0x200009d2
    eeb4:	200009cc 	.word	0x200009cc
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    eeb8:	2206      	movs	r2, #6
    eeba:	2100      	movs	r1, #0
    eebc:	4618      	mov	r0, r3
    eebe:	f7f2 feee 	bl	1c9e <memset>
				pdu_adv_tx->rx_addr;
    eec2:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eec4:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    eec6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    eeca:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eecc:	2206      	movs	r2, #6
    eece:	4658      	mov	r0, fp
    eed0:	e7c6      	b.n	ee60 <isr+0xb48>
			node_rx->hdr.handle = conn->handle;
    eed2:	8c33      	ldrh	r3, [r6, #32]
    eed4:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    eed6:	230b      	movs	r3, #11
    eed8:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    eeda:	f899 3008 	ldrb.w	r3, [r9, #8]
    eede:	f013 0320 	ands.w	r3, r3, #32
    eee2:	d00e      	beq.n	ef02 <isr+0xbea>
					((u16_t)conn->access_addr[1] << 8) |
    eee4:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    eee6:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    eee8:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    eeea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    eeee:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    eef0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    eef4:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    eef6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    eef8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    eefc:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    eefe:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ef00:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ef02:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ef04:	f7fc f906 	bl	b114 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef08:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef0a:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef0e:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    ef10:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    ef14:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef16:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef18:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef1c:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef1e:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef20:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef24:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef26:	4629      	mov	r1, r5
    ef28:	9300      	str	r3, [sp, #0]
    ef2a:	4628      	mov	r0, r5
    ef2c:	4bc6      	ldr	r3, [pc, #792]	; (f248 <isr+0xf30>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef2e:	f8df a334 	ldr.w	sl, [pc, #820]	; f264 <isr+0xf4c>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef32:	bf38      	it	cc
    ef34:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef36:	f7f9 f8cd 	bl	80d4 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ef3a:	f240 6139 	movw	r1, #1593	; 0x639
    ef3e:	f7fb fd71 	bl	aa24 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef42:	462b      	mov	r3, r5
    ef44:	2204      	movs	r2, #4
    ef46:	4629      	mov	r1, r5
    ef48:	9500      	str	r5, [sp, #0]
    ef4a:	4628      	mov	r0, r5
    ef4c:	f7f9 f8c2 	bl	80d4 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef52:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef56:	68a3      	ldr	r3, [r4, #8]
    ef58:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    ef5c:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef5e:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    ef62:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    ef66:	9308      	str	r3, [sp, #32]
    ef68:	4bb8      	ldr	r3, [pc, #736]	; (f24c <isr+0xf34>)
    ef6a:	9307      	str	r3, [sp, #28]
    ef6c:	4bb8      	ldr	r3, [pc, #736]	; (f250 <isr+0xf38>)
    ef6e:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef70:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    ef72:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef74:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ef76:	4640      	mov	r0, r8
    ef78:	a3b1      	add	r3, pc, #708	; (adr r3, f240 <isr+0xf28>)
    ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef7e:	4649      	mov	r1, r9
		ticker_status =
    ef80:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ef82:	f7f1 f947 	bl	214 <__aeabi_uldivmod>
    ef86:	4610      	mov	r0, r2
    ef88:	4619      	mov	r1, r3
    ef8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef8e:	2300      	movs	r3, #0
    ef90:	f7f1 f940 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef94:	a3aa      	add	r3, pc, #680	; (adr r3, f240 <isr+0xf28>)
    ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef9a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef9c:	4649      	mov	r1, r9
    ef9e:	4640      	mov	r0, r8
    efa0:	f7f1 f938 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    efa4:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    efa6:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    efa8:	a3a5      	add	r3, pc, #660	; (adr r3, f240 <isr+0xf28>)
    efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    efae:	fba1 010a 	umull	r0, r1, r1, sl
    efb2:	f7f1 f92f 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efb6:	3407      	adds	r4, #7
    efb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    efbc:	b2e4      	uxtb	r4, r4
    efbe:	9000      	str	r0, [sp, #0]
    efc0:	465b      	mov	r3, fp
    efc2:	4622      	mov	r2, r4
    efc4:	4629      	mov	r1, r5
    efc6:	4628      	mov	r0, r5
    efc8:	f7f8 ffe6 	bl	7f98 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    efcc:	f030 0302 	bics.w	r3, r0, #2
    efd0:	f43f aa47 	beq.w	e462 <isr+0x14a>
    efd4:	4a9f      	ldr	r2, [pc, #636]	; (f254 <isr+0xf3c>)
    efd6:	e51f      	b.n	ea18 <isr+0x700>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    efd8:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    efdc:	499e      	ldr	r1, [pc, #632]	; (f258 <isr+0xf40>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    efde:	09d2      	lsrs	r2, r2, #7
    efe0:	f362 1386 	bfi	r3, r2, #6, #1
    efe4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    efe6:	2206      	movs	r2, #6
    efe8:	e6ad      	b.n	ed46 <isr+0xa2e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    efea:	b9a0      	cbnz	r0, f016 <isr+0xcfe>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    efec:	f899 3009 	ldrb.w	r3, [r9, #9]
    eff0:	2b00      	cmp	r3, #0
    eff2:	f43f ad4e 	beq.w	ea92 <isr+0x77a>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    eff6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    effa:	2b00      	cmp	r3, #0
    effc:	f47f ad49 	bne.w	ea92 <isr+0x77a>
		err = isr_rx_scan_report(rssi_ready,
    f000:	f1ba 0f00 	cmp.w	sl, #0
    f004:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f008:	bf14      	ite	ne
    f00a:	4641      	movne	r1, r8
    f00c:	21ff      	moveq	r1, #255	; 0xff
    f00e:	4628      	mov	r0, r5
    f010:	f7fc f8bc 	bl	b18c <isr_rx_scan_report>
    f014:	e53d      	b.n	ea92 <isr+0x77a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f016:	2801      	cmp	r0, #1
    f018:	d00e      	beq.n	f038 <isr+0xd20>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f01a:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f01e:	f003 020b 	and.w	r2, r3, #11
    f022:	2a02      	cmp	r2, #2
    f024:	d0e2      	beq.n	efec <isr+0xcd4>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f026:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f02a:	2b07      	cmp	r3, #7
    f02c:	d10d      	bne.n	f04a <isr+0xd32>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f02e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f032:	0758      	lsls	r0, r3, #29
    f034:	d1da      	bne.n	efec <isr+0xcd4>
    f036:	e52c      	b.n	ea92 <isr+0x77a>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f038:	ab10      	add	r3, sp, #64	; 0x40
    f03a:	4642      	mov	r2, r8
    f03c:	4631      	mov	r1, r6
    f03e:	2000      	movs	r0, #0
    f040:	f7fb fc54 	bl	a8ec <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f044:	2800      	cmp	r0, #0
    f046:	d1d1      	bne.n	efec <isr+0xcd4>
    f048:	e7e7      	b.n	f01a <isr+0xd02>
		   (_radio.scanner.phy)) ||
    f04a:	2b04      	cmp	r3, #4
    f04c:	f47f ad21 	bne.w	ea92 <isr+0x77a>
		   (_radio.scanner.state != 0) &&
    f050:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f054:	0799      	lsls	r1, r3, #30
    f056:	f57f ad1c 	bpl.w	ea92 <isr+0x77a>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f05a:	f002 ff0d 	bl	11e78 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f05e:	f899 3008 	ldrb.w	r3, [r9, #8]
    f062:	7802      	ldrb	r2, [r0, #0]
    f064:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f068:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f06c:	f47f ad11 	bne.w	ea92 <isr+0x77a>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f070:	2206      	movs	r2, #6
    f072:	f109 010a 	add.w	r1, r9, #10
    f076:	3008      	adds	r0, #8
    f078:	f7f2 fdd0 	bl	1c1c <memcmp>
		   (_radio.scanner.state != 0) &&
    f07c:	2800      	cmp	r0, #0
    f07e:	d0b5      	beq.n	efec <isr+0xcd4>
    f080:	e507      	b.n	ea92 <isr+0x77a>
	_radio.packet_counter++;
    f082:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f086:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f08a:	3301      	adds	r3, #1
    f08c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f090:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f092:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f096:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f09a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f09e:	2301      	movs	r3, #1
    f0a0:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f0a4:	2f00      	cmp	r7, #0
    f0a6:	f000 82b5 	beq.w	f614 <isr+0x12fc>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f0aa:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f0ae:	f898 1008 	ldrb.w	r1, [r8, #8]
    f0b2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f0b6:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f0ba:	f003 0201 	and.w	r2, r3, #1
    f0be:	4291      	cmp	r1, r2
    f0c0:	f000 8197 	beq.w	f3f2 <isr+0x10da>
		_radio.conn_curr->sn++;
    f0c4:	f082 0201 	eor.w	r2, r2, #1
    f0c8:	f362 0300 	bfi	r3, r2, #0, #1
    f0cc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f0d0:	7ce3      	ldrb	r3, [r4, #19]
    f0d2:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f0d4:	bf02      	ittt	eq
    f0d6:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f0da:	f043 0301 	orreq.w	r3, r3, #1
    f0de:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f0e2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f0e6:	061a      	lsls	r2, r3, #24
    f0e8:	f100 817e 	bmi.w	f3e8 <isr+0x10d0>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f0ec:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f0f0:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f0f4:	1d30      	adds	r0, r6, #4
    f0f6:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f0fa:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f0fe:	f1b9 0f00 	cmp.w	r9, #0
    f102:	f000 808f 	beq.w	f224 <isr+0xf0c>
				if (_radio.conn_curr->enc_tx) {
    f106:	069b      	lsls	r3, r3, #26
    f108:	d50b      	bpl.n	f122 <isr+0xe0a>
					_radio.conn_curr->ccm_tx.counter++;
    f10a:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f10e:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f112:	f11b 0201 	adds.w	r2, fp, #1
    f116:	f14c 0300 	adc.w	r3, ip, #0
    f11a:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f11e:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f122:	5c43      	ldrb	r3, [r0, r1]
    f124:	f003 0303 	and.w	r3, r3, #3
    f128:	2b03      	cmp	r3, #3
    f12a:	d17b      	bne.n	f224 <isr+0xf0c>
	switch (pdu_data_tx->llctrl.opcode) {
    f12c:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f130:	3b02      	subs	r3, #2
    f132:	2b16      	cmp	r3, #22
    f134:	d876      	bhi.n	f224 <isr+0xf0c>
    f136:	e8df f013 	tbh	[pc, r3, lsl #1]
    f13a:	0017      	.short	0x0017
    f13c:	00c00059 	.word	0x00c00059
    f140:	00750075 	.word	0x00750075
    f144:	00750075 	.word	0x00750075
    f148:	00770075 	.word	0x00770075
    f14c:	00750097 	.word	0x00750097
    f150:	007500c7 	.word	0x007500c7
    f154:	00750075 	.word	0x00750075
    f158:	00750075 	.word	0x00750075
    f15c:	00d10075 	.word	0x00d10075
    f160:	00e90075 	.word	0x00e90075
    f164:	011b00f0 	.word	0x011b00f0
		_radio.state = STATE_CLOSE;
    f168:	2503      	movs	r5, #3
    f16a:	7525      	strb	r5, [r4, #20]
		radio_disable();
    f16c:	f002 fe2e 	bl	11dcc <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f170:	f002 fe4a 	bl	11e08 <radio_is_ready>
    f174:	b110      	cbz	r0, f17c <isr+0xe64>
    f176:	4a39      	ldr	r2, [pc, #228]	; (f25c <isr+0xf44>)
    f178:	f7ff b929 	b.w	e3ce <isr+0xb6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f17c:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f180:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f184:	2913      	cmp	r1, #19
    f186:	bf08      	it	eq
    f188:	2116      	moveq	r1, #22
    f18a:	f7fc f84d 	bl	b228 <terminate_ind_rx_enqueue>
		terminate = 1;
    f18e:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f190:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f194:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f198:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f19a:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f19e:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f1a2:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f1a4:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f1a8:	d11e      	bne.n	f1e8 <isr+0xed0>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f1aa:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f1ae:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f1b2:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f1b4:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f1b6:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f1ba:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f1be:	f040 80de 	bne.w	f37e <isr+0x1066>
		if (node_tx) {
    f1c2:	b18e      	cbz	r6, f1e8 <isr+0xed0>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f1c4:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f1c8:	f8d3 e000 	ldr.w	lr, [r3]
    f1cc:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f1d0:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f1d2:	bf06      	itte	eq
    f1d4:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f1d8:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f1dc:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f1e0:	491f      	ldr	r1, [pc, #124]	; (f260 <isr+0xf48>)
    f1e2:	4630      	mov	r0, r6
    f1e4:	f7f8 f873 	bl	72ce <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f1e8:	2600      	movs	r6, #0
    f1ea:	e0d1      	b.n	f390 <isr+0x1078>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f1ec:	2208      	movs	r2, #8
    f1ee:	f10a 010e 	add.w	r1, sl, #14
    f1f2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f1f6:	f7f2 fd26 	bl	1c46 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f1fa:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f1fe:	2204      	movs	r2, #4
    f200:	f10a 0116 	add.w	r1, sl, #22
    f204:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f208:	f7f2 fd1d 	bl	1c46 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f20c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f210:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f214:	f042 0208 	orr.w	r2, r2, #8
    f218:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f21c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f224:	2500      	movs	r5, #0
    f226:	e7b3      	b.n	f190 <isr+0xe78>
		_radio.conn_curr->pause_tx = 1;
    f228:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f22c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f230:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f234:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f238:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f23c:	e7f2      	b.n	f224 <isr+0xf0c>
    f23e:	bf00      	nop
    f240:	1afd498d 	.word	0x1afd498d
    f244:	00000007 	.word	0x00000007
    f248:	0000aa25 	.word	0x0000aa25
    f24c:	0000a9b9 	.word	0x0000a9b9
    f250:	0000cce5 	.word	0x0000cce5
    f254:	00016607 	.word	0x00016607
    f258:	200009cc 	.word	0x200009cc
    f25c:	00016613 	.word	0x00016613
    f260:	20000a44 	.word	0x20000a44
    f264:	3b9aca00 	.word	0x3b9aca00
		if (_radio.role == ROLE_MASTER) {
    f268:	f894 a013 	ldrb.w	sl, [r4, #19]
    f26c:	fa5f fa8a 	uxtb.w	sl, sl
    f270:	f1ba 0f04 	cmp.w	sl, #4
    f274:	d121      	bne.n	f2ba <isr+0xfa2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f276:	7933      	ldrb	r3, [r6, #4]
    f278:	f043 0303 	orr.w	r3, r3, #3
    f27c:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f27e:	2317      	movs	r3, #23
    f280:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f282:	2303      	movs	r3, #3
    f284:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f286:	2208      	movs	r2, #8
    f288:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f28c:	3004      	adds	r0, #4
    f28e:	f7f2 fcda 	bl	1c46 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f292:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f296:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f298:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f29c:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f29e:	f106 0112 	add.w	r1, r6, #18
    f2a2:	2208      	movs	r2, #8
    f2a4:	6860      	ldr	r0, [r4, #4]
    f2a6:	f003 fd8b 	bl	12dc0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f2aa:	f106 011a 	add.w	r1, r6, #26
    f2ae:	4652      	mov	r2, sl
    f2b0:	6860      	ldr	r0, [r4, #4]
    f2b2:	f003 fd85 	bl	12dc0 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f2b6:	2600      	movs	r6, #0
    f2b8:	e7b4      	b.n	f224 <isr+0xf0c>
			_radio.conn_curr->pause_tx = 1;
    f2ba:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f2be:	f043 0308 	orr.w	r3, r3, #8
    f2c2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f2c6:	e7ad      	b.n	f224 <isr+0xf0c>
		_radio.conn_curr->pause_rx = 0;
    f2c8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f2cc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f2d0:	f36f 03c3 	bfc	r3, #3, #1
    f2d4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f2d8:	2300      	movs	r3, #0
    f2da:	e7ad      	b.n	f238 <isr+0xf20>
		if ((_radio.conn_curr->llcp_length.req !=
    f2dc:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f2e0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f2e4:	429a      	cmp	r2, r3
    f2e6:	d09d      	beq.n	f224 <isr+0xf0c>
		    (_radio.conn_curr->llcp_length.state ==
    f2e8:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f2ec:	f003 0203 	and.w	r2, r3, #3
    f2f0:	2a01      	cmp	r2, #1
    f2f2:	d197      	bne.n	f224 <isr+0xf0c>
			_radio.conn_curr->pause_tx = 1;
    f2f4:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f2f8:	f042 0208 	orr.w	r2, r2, #8
    f2fc:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f300:	2202      	movs	r2, #2
    f302:	f362 0301 	bfi	r3, r2, #0, #2
    f306:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f30a:	e78b      	b.n	f224 <isr+0xf0c>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f30c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f310:	2202      	movs	r2, #2
    f312:	f362 0301 	bfi	r3, r2, #0, #2
    f316:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f31a:	7ce3      	ldrb	r3, [r4, #19]
    f31c:	2b03      	cmp	r3, #3
    f31e:	d181      	bne.n	f224 <isr+0xf0c>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f320:	2301      	movs	r3, #1
    f322:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f326:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f32a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f32e:	2202      	movs	r2, #2
    f330:	2304      	movs	r3, #4
    f332:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f336:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f33a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f33e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f342:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f346:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f34a:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f34e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f352:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f356:	f003 0307 	and.w	r3, r3, #7
    f35a:	aa12      	add	r2, sp, #72	; 0x48
    f35c:	4413      	add	r3, r2
    f35e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f362:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f366:	f363 0202 	bfi	r2, r3, #0, #3
    f36a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f36e:	e759      	b.n	f224 <isr+0xf0c>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f370:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f374:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f378:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f37c:	e7f3      	b.n	f366 <isr+0x104e>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f37e:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f382:	4293      	cmp	r3, r2
    f384:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f386:	bf08      	it	eq
    f388:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f38c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f390:	b37d      	cbz	r5, f3f2 <isr+0x10da>
		connection_release(_radio.conn_curr);
    f392:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f396:	f7fb fd2b 	bl	adf0 <connection_release>
		_radio.conn_curr = NULL;
    f39a:	2300      	movs	r3, #0
    f39c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f3a0:	f002 feda 	bl	12158 <radio_tmr_aa_restore>
    f3a4:	b918      	cbnz	r0, f3ae <isr+0x1096>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f3a6:	f002 fecb 	bl	12140 <radio_tmr_aa_get>
    f3aa:	f002 fecf 	bl	1214c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f3ae:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	f43f a855 	beq.w	e462 <isr+0x14a>
	if (tx_release) {
    f3b8:	b11e      	cbz	r6, f3c2 <isr+0x10aa>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f3ba:	4631      	mov	r1, r6
    f3bc:	8c18      	ldrh	r0, [r3, #32]
    f3be:	f7fb fc97 	bl	acf0 <pdu_node_tx_release>
	if (rx_enqueue) {
    f3c2:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	f43f a84b 	beq.w	e462 <isr+0x14a>
		rx_fc_lock(_radio.conn_curr->handle);
    f3cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3d0:	8c18      	ldrh	r0, [r3, #32]
    f3d2:	f7fb fad7 	bl	a984 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f3d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3da:	8c1b      	ldrh	r3, [r3, #32]
    f3dc:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f3e0:	f7fb fe98 	bl	b114 <packet_rx_enqueue>
    f3e4:	f7ff b83d 	b.w	e462 <isr+0x14a>
			_radio.conn_curr->empty = 0;
    f3e8:	f36f 13c7 	bfc	r3, #7, #1
    f3ec:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f3f0:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f3f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3f6:	f898 2008 	ldrb.w	r2, [r8, #8]
    f3fa:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f3fe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f402:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f406:	429a      	cmp	r2, r3
    f408:	f040 80d4 	bne.w	f5b4 <isr+0x129c>
	    (packet_rx_reserve_get(3) != 0) &&
    f40c:	2003      	movs	r0, #3
    f40e:	f7fa fcaf 	bl	9d70 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f412:	2800      	cmp	r0, #0
    f414:	f000 80ce 	beq.w	f5b4 <isr+0x129c>
	    (packet_rx_reserve_get(3) != 0) &&
    f418:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f41c:	b393      	cbz	r3, f484 <isr+0x116c>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f41e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f422:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f426:	4293      	cmp	r3, r2
    f428:	d105      	bne.n	f436 <isr+0x111e>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f42a:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f42e:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f432:	4291      	cmp	r1, r2
    f434:	d026      	beq.n	f484 <isr+0x116c>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f436:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f43a:	4293      	cmp	r3, r2
    f43c:	f000 80ba 	beq.w	f5b4 <isr+0x129c>
	      (_radio.fc_req != _radio.fc_ack) &&
    f440:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f444:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f448:	429a      	cmp	r2, r3
    f44a:	f000 80b3 	beq.w	f5b4 <isr+0x129c>
		(((_radio.fc_req == 0) &&
    f44e:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f452:	b933      	cbnz	r3, f462 <isr+0x114a>
		   _radio.conn_curr->handle)) ||
    f454:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f458:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f45c:	8c1b      	ldrh	r3, [r3, #32]
    f45e:	429a      	cmp	r2, r3
    f460:	d010      	beq.n	f484 <isr+0x116c>
		 ((_radio.fc_req != 0) &&
    f462:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f466:	2b00      	cmp	r3, #0
    f468:	f000 80a4 	beq.w	f5b4 <isr+0x129c>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f46c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f470:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f474:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f478:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f47c:	8c0b      	ldrh	r3, [r1, #32]
    f47e:	429a      	cmp	r2, r3
    f480:	f040 8098 	bne.w	f5b4 <isr+0x129c>
		if (pdu_data_rx->len != 0) {
    f484:	f898 5009 	ldrb.w	r5, [r8, #9]
    f488:	2d00      	cmp	r5, #0
    f48a:	f000 809c 	beq.w	f5c6 <isr+0x12ae>
			if (_radio.conn_curr->enc_rx) {
    f48e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f492:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f496:	f015 0510 	ands.w	r5, r5, #16
    f49a:	d007      	beq.n	f4ac <isr+0x1194>
				done = radio_ccm_is_done();
    f49c:	f002 fee8 	bl	12270 <radio_ccm_is_done>
				LL_ASSERT(done);
    f4a0:	b918      	cbnz	r0, f4aa <isr+0x1192>
    f4a2:	4aa1      	ldr	r2, [pc, #644]	; (f728 <isr+0x1410>)
    f4a4:	49a1      	ldr	r1, [pc, #644]	; (f72c <isr+0x1414>)
    f4a6:	f7ff bab8 	b.w	ea1a <isr+0x702>
				ccm_rx_increment = 1;
    f4aa:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f4ac:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f4b0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f4b4:	06d9      	lsls	r1, r3, #27
    f4b6:	d42c      	bmi.n	f512 <isr+0x11fa>
			    (_radio.conn_curr->pause_rx &&
    f4b8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f4bc:	f898 3008 	ldrb.w	r3, [r8, #8]
    f4c0:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f4c4:	f012 0f04 	tst.w	r2, #4
    f4c8:	d132      	bne.n	f530 <isr+0x1218>
			_radio.conn_curr->appto_expire = 0;
    f4ca:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f4cc:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f4d0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f4d4:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f4d8:	d004      	beq.n	f4e4 <isr+0x11cc>
    f4da:	2b02      	cmp	r3, #2
    f4dc:	d863      	bhi.n	f5a6 <isr+0x128e>
				*rx_enqueue = 1;
    f4de:	2301      	movs	r3, #1
    f4e0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f4e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f4e8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f4ec:	f082 0202 	eor.w	r2, r2, #2
    f4f0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f4f4:	2d00      	cmp	r5, #0
    f4f6:	d05d      	beq.n	f5b4 <isr+0x129c>
				_radio.conn_curr->ccm_rx.counter++;
    f4f8:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f4fc:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f500:	f119 0001 	adds.w	r0, r9, #1
    f504:	f14a 0100 	adc.w	r1, sl, #0
    f508:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f50c:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f510:	e050      	b.n	f5b4 <isr+0x129c>
			     !radio_ccm_mic_is_valid()) ||
    f512:	f002 fecb 	bl	122ac <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f516:	2800      	cmp	r0, #0
    f518:	d1ce      	bne.n	f4b8 <isr+0x11a0>
				_radio.state = STATE_CLOSE;
    f51a:	2703      	movs	r7, #3
    f51c:	7527      	strb	r7, [r4, #20]
				radio_disable();
    f51e:	f002 fc55 	bl	11dcc <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f522:	f002 fc71 	bl	11e08 <radio_is_ready>
    f526:	4605      	mov	r5, r0
    f528:	b388      	cbz	r0, f58e <isr+0x1276>
    f52a:	4a7f      	ldr	r2, [pc, #508]	; (f728 <isr+0x1410>)
    f52c:	f7fe bf4f 	b.w	e3ce <isr+0xb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f530:	f003 0103 	and.w	r1, r3, #3
    f534:	2903      	cmp	r1, #3
    f536:	d1f0      	bne.n	f51a <isr+0x1202>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f538:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f53c:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f540:	f1be 0f00 	cmp.w	lr, #0
    f544:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f548:	db15      	blt.n	f576 <isr+0x125e>
	       (!conn->role &&
    f54a:	b922      	cbnz	r2, f556 <isr+0x123e>
		((!conn->refresh &&
    f54c:	2902      	cmp	r1, #2
    f54e:	d0bc      	beq.n	f4ca <isr+0x11b2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f550:	2911      	cmp	r1, #17
    f552:	d8e2      	bhi.n	f51a <isr+0x1202>
    f554:	e009      	b.n	f56a <isr+0x1252>
		 (conn->refresh &&
    f556:	1e8a      	subs	r2, r1, #2
    f558:	b2d2      	uxtb	r2, r2
    f55a:	2a09      	cmp	r2, #9
    f55c:	d8f8      	bhi.n	f550 <isr+0x1238>
    f55e:	f240 2e05 	movw	lr, #517	; 0x205
    f562:	fa2e f202 	lsr.w	r2, lr, r2
    f566:	07d2      	lsls	r2, r2, #31
    f568:	d4af      	bmi.n	f4ca <isr+0x11b2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f56a:	4a71      	ldr	r2, [pc, #452]	; (f730 <isr+0x1418>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f56c:	fa22 f101 	lsr.w	r1, r2, r1
    f570:	07ca      	lsls	r2, r1, #31
    f572:	d5d2      	bpl.n	f51a <isr+0x1202>
    f574:	e7a9      	b.n	f4ca <isr+0x11b2>
	       (conn->role &&
    f576:	b92a      	cbnz	r2, f584 <isr+0x126c>
		((!conn->refresh &&
    f578:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f57a:	d0a6      	beq.n	f4ca <isr+0x11b2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f57c:	2911      	cmp	r1, #17
    f57e:	d8cc      	bhi.n	f51a <isr+0x1202>
    f580:	4a6c      	ldr	r2, [pc, #432]	; (f734 <isr+0x141c>)
    f582:	e7f3      	b.n	f56c <isr+0x1254>
		 (conn->refresh &&
    f584:	1e8a      	subs	r2, r1, #2
    f586:	2a01      	cmp	r2, #1
    f588:	d99f      	bls.n	f4ca <isr+0x11b2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f58a:	290b      	cmp	r1, #11
    f58c:	e7f5      	b.n	f57a <isr+0x1262>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f58e:	213d      	movs	r1, #61	; 0x3d
    f590:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f594:	f7fb fe48 	bl	b228 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f598:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f59c:	f7fb fc28 	bl	adf0 <connection_release>
				_radio.conn_curr = NULL;
    f5a0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f5a4:	e6fc      	b.n	f3a0 <isr+0x1088>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f5a6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f5aa:	4640      	mov	r0, r8
    f5ac:	f7fd fdca 	bl	d144 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f5b0:	2800      	cmp	r0, #0
    f5b2:	d097      	beq.n	f4e4 <isr+0x11cc>
		_radio.conn_curr->supervision_expire = 0;
    f5b4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f5b8:	2300      	movs	r3, #0
    f5ba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f5be:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f5c0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f5c4:	e03d      	b.n	f642 <isr+0x132a>
		} else if ((_radio.conn_curr->enc_rx) ||
    f5c6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f5ca:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f5ce:	f013 0f14 	tst.w	r3, #20
    f5d2:	d087      	beq.n	f4e4 <isr+0x11cc>
					    (conn->latency + 6)) ?
    f5d4:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f5d6:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f5da:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f5dc:	4299      	cmp	r1, r3
    f5de:	bfc4      	itt	gt
    f5e0:	1f8b      	subgt	r3, r1, #6
    f5e2:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f5e4:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f5e8:	bfcc      	ite	gt
    f5ea:	b29b      	uxthgt	r3, r3
    f5ec:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f5ee:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f5f0:	bf1e      	ittt	ne
    f5f2:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f5f6:	2300      	movne	r3, #0
    f5f8:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f5fc:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f600:	2b00      	cmp	r3, #0
    f602:	f47f af6f 	bne.w	f4e4 <isr+0x11cc>
				conn->appto_expire = conn->appto_reload;
    f606:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f60a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f60e:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f612:	e767      	b.n	f4e4 <isr+0x11cc>
		if (_radio.crc_expire == 0) {
    f614:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f618:	b913      	cbnz	r3, f620 <isr+0x1308>
			_radio.crc_expire = 2;
    f61a:	2302      	movs	r3, #2
    f61c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f620:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f624:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f628:	3b01      	subs	r3, #1
    f62a:	b2db      	uxtb	r3, r3
    f62c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f630:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f634:	fab3 f583 	clz	r5, r3
    f638:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f63a:	bb86      	cbnz	r6, f69e <isr+0x1386>
			_radio.conn_curr->supervision_expire =
    f63c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f63e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f642:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f646:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f648:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f64c:	f7fd fc50 	bl	cef0 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f650:	7d23      	ldrb	r3, [r4, #20]
    f652:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f654:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f658:	d010      	beq.n	f67c <isr+0x1364>
    f65a:	bb15      	cbnz	r5, f6a2 <isr+0x138a>
    f65c:	b137      	cbz	r7, f66c <isr+0x1354>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f65e:	f898 3008 	ldrb.w	r3, [r8, #8]
    f662:	06d8      	lsls	r0, r3, #27
    f664:	d402      	bmi.n	f66c <isr+0x1354>
			 (pdu_data_tx->len == 0)) ||
    f666:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f668:	785b      	ldrb	r3, [r3, #1]
    f66a:	b1d3      	cbz	r3, f6a2 <isr+0x138a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f66c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    f670:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f674:	2b00      	cmp	r3, #0
    f676:	bf0c      	ite	eq
    f678:	2302      	moveq	r3, #2
    f67a:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f67c:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f67e:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f680:	d12a      	bne.n	f6d8 <isr+0x13c0>
		if (_radio.role == ROLE_MASTER) {
    f682:	7ce3      	ldrb	r3, [r4, #19]
    f684:	2b04      	cmp	r3, #4
    f686:	d10e      	bne.n	f6a6 <isr+0x138e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f688:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f68c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f690:	f369 12c7 	bfi	r2, r9, #7, #1
    f694:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f698:	f002 fb98 	bl	11dcc <radio_disable>
    f69c:	e680      	b.n	f3a0 <isr+0x1088>
	struct radio_pdu_node_tx *tx_release = NULL;
    f69e:	2600      	movs	r6, #0
    f6a0:	e7cf      	b.n	f642 <isr+0x132a>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6a2:	2303      	movs	r3, #3
    f6a4:	e7ea      	b.n	f67c <isr+0x1364>
			radio_switch_complete_and_disable();
    f6a6:	f002 fc01 	bl	11eac <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f6aa:	9910      	ldr	r1, [sp, #64]	; 0x40
    f6ac:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f6b0:	780b      	ldrb	r3, [r1, #0]
    f6b2:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f6b6:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f6ba:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f6be:	f362 0382 	bfi	r3, r2, #2, #1
    f6c2:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f6c4:	f7fa fe4c 	bl	a360 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f6c8:	f002 fb9e 	bl	11e08 <radio_is_ready>
    f6cc:	2800      	cmp	r0, #0
    f6ce:	f43f ae67 	beq.w	f3a0 <isr+0x1088>
    f6d2:	4a19      	ldr	r2, [pc, #100]	; (f738 <isr+0x1420>)
    f6d4:	f7fe be7b 	b.w	e3ce <isr+0xb6>
		radio_tmr_tifs_set(RADIO_TIFS);
    f6d8:	2096      	movs	r0, #150	; 0x96
    f6da:	f002 fc6d 	bl	11fb8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f6de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f6e2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f6e6:	f000 0007 	and.w	r0, r0, #7
    f6ea:	f002 fbc9 	bl	11e80 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f6ee:	f002 fd3f 	bl	12170 <radio_tmr_end_capture>
    f6f2:	e7da      	b.n	f6aa <isr+0x1392>
		LL_ASSERT(0);
    f6f4:	4a11      	ldr	r2, [pc, #68]	; (f73c <isr+0x1424>)
    f6f6:	f7fe befe 	b.w	e4f6 <isr+0x1de>
	switch (_radio.role) {
    f6fa:	7ce2      	ldrb	r2, [r4, #19]
    f6fc:	2a04      	cmp	r2, #4
    f6fe:	f200 820f 	bhi.w	fb20 <isr+0x1808>
    f702:	e8df f012 	tbh	[pc, r2, lsl #1]
    f706:	0202      	.short	0x0202
    f708:	005d0005 	.word	0x005d0005
    f70c:	00a400a4 	.word	0x00a400a4
	if ((_radio.state == STATE_CLOSE) &&
    f710:	2b03      	cmp	r3, #3
    f712:	d115      	bne.n	f740 <isr+0x1428>
	    (_radio.advertiser.chan_map_current != 0)) {
    f714:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    f718:	0759      	lsls	r1, r3, #29
    f71a:	d011      	beq.n	f740 <isr+0x1428>
		adv_setup();
    f71c:	f7fb fc26 	bl	af6c <adv_setup>
		radio_tx_enable();
    f720:	f002 fb4e 	bl	11dc0 <radio_tx_enable>
    f724:	f7fe be6d 	b.w	e402 <isr+0xea>
    f728:	00016677 	.word	0x00016677
    f72c:	00016c75 	.word	0x00016c75
    f730:	00022060 	.word	0x00022060
    f734:	00022040 	.word	0x00022040
    f738:	00016687 	.word	0x00016687
    f73c:	00016693 	.word	0x00016693
		radio_filter_disable();
    f740:	f002 fbfe 	bl	11f40 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    f744:	7d26      	ldrb	r6, [r4, #20]
    f746:	2e03      	cmp	r6, #3
    f748:	d16d      	bne.n	f826 <isr+0x150e>
		    (!_radio.advertiser.is_hdcd)) {
    f74a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f74e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f752:	d168      	bne.n	f826 <isr+0x150e>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    f754:	2201      	movs	r2, #1
    f756:	a910      	add	r1, sp, #64	; 0x40
    f758:	6860      	ldr	r0, [r4, #4]
    f75a:	f003 fb31 	bl	12dc0 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    f75e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f762:	489f      	ldr	r0, [pc, #636]	; (f9e0 <isr+0x16c8>)
			random_delay %= 10;
    f764:	230a      	movs	r3, #10
    f766:	fbb1 f2f3 	udiv	r2, r1, r3
    f76a:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    f76e:	3201      	adds	r2, #1
    f770:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    f772:	b2d7      	uxtb	r7, r2
    f774:	fba7 0100 	umull	r0, r1, r7, r0
    f778:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    f77a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f77e:	fb03 1107 	mla	r1, r3, r7, r1
    f782:	a395      	add	r3, pc, #596	; (adr r3, f9d8 <isr+0x16c0>)
    f784:	e9d3 2300 	ldrd	r2, r3, [r3]
    f788:	f7f0 fd44 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    f78c:	f640 734b 	movw	r3, #3915	; 0xf4b
    f790:	9306      	str	r3, [sp, #24]
    f792:	4b94      	ldr	r3, [pc, #592]	; (f9e4 <isr+0x16cc>)
    f794:	9305      	str	r3, [sp, #20]
    f796:	9504      	str	r5, [sp, #16]
    f798:	b283      	uxth	r3, r0
    f79a:	9503      	str	r5, [sp, #12]
    f79c:	9502      	str	r5, [sp, #8]
    f79e:	9501      	str	r5, [sp, #4]
    f7a0:	9500      	str	r5, [sp, #0]
    f7a2:	2205      	movs	r2, #5
    f7a4:	4629      	mov	r1, r5
    f7a6:	4628      	mov	r0, r5
    f7a8:	f7f8 fc46 	bl	8038 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f7ac:	f030 0302 	bics.w	r3, r0, #2
    f7b0:	d039      	beq.n	f826 <isr+0x150e>
    f7b2:	7ca3      	ldrb	r3, [r4, #18]
    f7b4:	2b05      	cmp	r3, #5
    f7b6:	d036      	beq.n	f826 <isr+0x150e>
    f7b8:	4a8b      	ldr	r2, [pc, #556]	; (f9e8 <isr+0x16d0>)
    f7ba:	498c      	ldr	r1, [pc, #560]	; (f9ec <isr+0x16d4>)
    f7bc:	f7ff b92d 	b.w	ea1a <isr+0x702>
	if (_radio.state == STATE_CLOSE) {
    f7c0:	2b03      	cmp	r3, #3
    f7c2:	d124      	bne.n	f80e <isr+0x14f6>
		radio_tmr_tifs_set(RADIO_TIFS);
    f7c4:	2096      	movs	r0, #150	; 0x96
    f7c6:	f002 fbf7 	bl	11fb8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f7ca:	2300      	movs	r3, #0
    f7cc:	4619      	mov	r1, r3
    f7ce:	461a      	mov	r2, r3
    f7d0:	4618      	mov	r0, r3
    f7d2:	f002 fb61 	bl	11e98 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f7d6:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f7da:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f7de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f7e2:	3008      	adds	r0, #8
    f7e4:	f002 facc 	bl	11d80 <radio_pkt_rx_set>
		radio_rssi_measure();
    f7e8:	f002 fb6e 	bl	11ec8 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f7ec:	f001 fe20 	bl	11430 <ctrl_rl_enabled>
    f7f0:	b138      	cbz	r0, f802 <isr+0x14ea>
			u8_t count, *irks = ctrl_irks_get(&count);
    f7f2:	a810      	add	r0, sp, #64	; 0x40
    f7f4:	f001 fbc6 	bl	10f84 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f7f8:	4601      	mov	r1, r0
    f7fa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f7fe:	f002 fd5f 	bl	122c0 <radio_ar_configure>
		_radio.state = STATE_RX;
    f802:	2301      	movs	r3, #1
    f804:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f806:	f002 fad5 	bl	11db4 <radio_rx_enable>
    f80a:	f7fe bdfa 	b.w	e402 <isr+0xea>
		radio_filter_disable();
    f80e:	f002 fb97 	bl	11f40 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f812:	7d23      	ldrb	r3, [r4, #20]
    f814:	2b05      	cmp	r3, #5
    f816:	d106      	bne.n	f826 <isr+0x150e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f818:	2300      	movs	r3, #0
    f81a:	9300      	str	r3, [sp, #0]
    f81c:	2204      	movs	r2, #4
    f81e:	4619      	mov	r1, r3
    f820:	4618      	mov	r0, r3
    f822:	f7f8 fc57 	bl	80d4 <ticker_stop>
	_radio.role = ROLE_NONE;
    f826:	2500      	movs	r5, #0
    f828:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f82a:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f82c:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f82e:	f002 fc41 	bl	120b4 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f832:	462a      	mov	r2, r5
    f834:	4629      	mov	r1, r5
    f836:	4628      	mov	r0, r5
    f838:	4b6d      	ldr	r3, [pc, #436]	; (f9f0 <isr+0x16d8>)
    f83a:	f7f7 fdf9 	bl	7430 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f83e:	4605      	mov	r5, r0
    f840:	2800      	cmp	r0, #0
    f842:	f000 8170 	beq.w	fb26 <isr+0x180e>
    f846:	4a6b      	ldr	r2, [pc, #428]	; (f9f4 <isr+0x16dc>)
    f848:	496b      	ldr	r1, [pc, #428]	; (f9f8 <isr+0x16e0>)
    f84a:	f7ff b8e6 	b.w	ea1a <isr+0x702>
	if (_radio.conn_curr == 0) {
    f84e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f852:	2800      	cmp	r0, #0
    f854:	d0e7      	beq.n	f826 <isr+0x150e>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f856:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f85a:	b181      	cbz	r1, f87e <isr+0x1566>
    f85c:	7ce3      	ldrb	r3, [r4, #19]
    f85e:	2b03      	cmp	r3, #3
    f860:	d003      	beq.n	f86a <isr+0x1552>
    f862:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f866:	07da      	lsls	r2, r3, #31
    f868:	d509      	bpl.n	f87e <isr+0x1566>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f86a:	f7fb fcdd 	bl	b228 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f86e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f872:	f7fb fabd 	bl	adf0 <connection_release>
			_radio.conn_curr = NULL;
    f876:	2300      	movs	r3, #0
    f878:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f87c:	e7d3      	b.n	f826 <isr+0x150e>
	latency_event = _radio.conn_curr->latency_event;
    f87e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    f882:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    f886:	f10b 0601 	add.w	r6, fp, #1
    f88a:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    f88c:	2f00      	cmp	r7, #0
    f88e:	f000 8084 	beq.w	f99a <isr+0x1682>
		if (_radio.role == ROLE_SLAVE) {
    f892:	7ce3      	ldrb	r3, [r4, #19]
    f894:	2b03      	cmp	r3, #3
    f896:	d173      	bne.n	f980 <isr+0x1668>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f898:	f002 fc5e 	bl	12158 <radio_tmr_aa_restore>
    f89c:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    f89e:	f002 fc61 	bl	12164 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    f8a2:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    f8a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    f8aa:	f003 0307 	and.w	r3, r3, #7
    f8ae:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f8b0:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    f8b4:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    f8b6:	d052      	beq.n	f95e <isr+0x1646>
		return 40;
    f8b8:	2b04      	cmp	r3, #4
    f8ba:	bf0c      	ite	eq
    f8bc:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    f8c0:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f8c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f8c8:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    f8ca:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f8cc:	930a      	str	r3, [sp, #40]	; 0x28
    f8ce:	f8df a12c 	ldr.w	sl, [pc, #300]	; f9fc <isr+0x16e4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f8d2:	a341      	add	r3, pc, #260	; (adr r3, f9d8 <isr+0x16c0>)
    f8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    f8d8:	d844      	bhi.n	f964 <isr+0x164c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f8da:	fba0 010a 	umull	r0, r1, r0, sl
    f8de:	f7f0 fc99 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f8e4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f8e6:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f8ea:	a33b      	add	r3, pc, #236	; (adr r3, f9d8 <isr+0x16c0>)
    f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    f8f0:	fba0 010a 	umull	r0, r1, r0, sl
    f8f4:	f7f0 fc8e 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f8f8:	2300      	movs	r3, #0
    f8fa:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f8fc:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f8fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f902:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    f906:	b3ab      	cbz	r3, f974 <isr+0x165c>
				if (pdu_data_tx->len ||
    f908:	795b      	ldrb	r3, [r3, #5]
    f90a:	b913      	cbnz	r3, f912 <isr+0x15fa>
    f90c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    f910:	b10b      	cbz	r3, f916 <isr+0x15fe>
					_radio.conn_curr->latency_event = 0;
    f912:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    f914:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    f916:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f91a:	2200      	movs	r2, #0
    f91c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f91e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f922:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f926:	b1c3      	cbz	r3, f95a <isr+0x1642>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f928:	429e      	cmp	r6, r3
    f92a:	f080 80c1 	bcs.w	fab0 <isr+0x1798>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f92e:	1b9b      	subs	r3, r3, r6
    f930:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    f932:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    f934:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f936:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f93a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f93c:	f240 80ba 	bls.w	fab4 <isr+0x179c>
			else if (_radio.role == ROLE_SLAVE) {
    f940:	7ce3      	ldrb	r3, [r4, #19]
    f942:	2b03      	cmp	r3, #3
    f944:	d109      	bne.n	f95a <isr+0x1642>
				if (latency_event != 0) {
    f946:	f1bb 0f00 	cmp.w	fp, #0
    f94a:	f040 80b3 	bne.w	fab4 <isr+0x179c>
					force = _radio.conn_curr->slave.force & 0x01;
    f94e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f950:	087b      	lsrs	r3, r7, #1
					if (force) {
    f952:	f017 0701 	ands.w	r7, r7, #1
    f956:	d153      	bne.n	fa00 <isr+0x16e8>
					_radio.conn_curr->slave.force >>= 1;
    f958:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    f95a:	2700      	movs	r7, #0
    f95c:	e053      	b.n	fa06 <isr+0x16ee>
		return 24;
    f95e:	f04f 0818 	mov.w	r8, #24
    f962:	e7af      	b.n	f8c4 <isr+0x15ac>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f964:	fba9 010a 	umull	r0, r1, r9, sl
    f968:	f7f0 fc54 	bl	214 <__aeabi_uldivmod>
    f96c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f96e:	f108 0030 	add.w	r0, r8, #48	; 0x30
    f972:	e7ba      	b.n	f8ea <isr+0x15d2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f974:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    f978:	07db      	lsls	r3, r3, #31
    f97a:	d5cc      	bpl.n	f916 <isr+0x15fe>
				_radio.conn_curr->latency_event =
    f97c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    f97e:	e7c9      	b.n	f914 <isr+0x15fc>
		} else if (reason_peer) {
    f980:	b149      	cbz	r1, f996 <isr+0x167e>
			_radio.conn_curr->master.terminate_ack = 1;
    f982:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f986:	f043 0301 	orr.w	r3, r3, #1
    f98a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f98e:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    f992:	4645      	mov	r5, r8
    f994:	e7bf      	b.n	f916 <isr+0x15fe>
	ticks_drift_minus = 0;
    f996:	4688      	mov	r8, r1
    f998:	e7fb      	b.n	f992 <isr+0x167a>
	else if (_radio.conn_curr->connect_expire) {
    f99a:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f99c:	b185      	cbz	r5, f9c0 <isr+0x16a8>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f99e:	42ae      	cmp	r6, r5
    f9a0:	d204      	bcs.n	f9ac <isr+0x1694>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f9a2:	1bad      	subs	r5, r5, r6
    f9a4:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f9a6:	463d      	mov	r5, r7
    f9a8:	46a8      	mov	r8, r5
    f9aa:	e7b8      	b.n	f91e <isr+0x1606>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f9ac:	213e      	movs	r1, #62	; 0x3e
    f9ae:	f7fb fc3b 	bl	b228 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f9b2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f9b6:	f7fb fa1b 	bl	adf0 <connection_release>
			_radio.conn_curr = NULL;
    f9ba:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    f9be:	e732      	b.n	f826 <isr+0x150e>
		if (!_radio.conn_curr->supervision_expire) {
    f9c0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    f9c4:	f1b8 0f00 	cmp.w	r8, #0
    f9c8:	d1ee      	bne.n	f9a8 <isr+0x1690>
			_radio.conn_curr->supervision_expire =
    f9ca:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    f9cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f9d0:	4645      	mov	r5, r8
    f9d2:	e7a4      	b.n	f91e <isr+0x1606>
    f9d4:	f3af 8000 	nop.w
    f9d8:	1afd498d 	.word	0x1afd498d
    f9dc:	00000007 	.word	0x00000007
    f9e0:	d4a51000 	.word	0xd4a51000
    f9e4:	0000aa6d 	.word	0x0000aa6d
    f9e8:	000166a6 	.word	0x000166a6
    f9ec:	00016c8f 	.word	0x00016c8f
    f9f0:	20003d70 	.word	0x20003d70
    f9f4:	00016777 	.word	0x00016777
    f9f8:	00016c20 	.word	0x00016c20
    f9fc:	3b9aca00 	.word	0x3b9aca00
						_radio.conn_curr->slave.force |=
    fa00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fa04:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    fa06:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fa0a:	b123      	cbz	r3, fa16 <isr+0x16fe>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fa0c:	429e      	cmp	r6, r3
    fa0e:	d253      	bcs.n	fab8 <isr+0x17a0>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fa10:	1b9b      	subs	r3, r3, r6
    fa12:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fa16:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fa1a:	b123      	cbz	r3, fa26 <isr+0x170e>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fa1c:	429e      	cmp	r6, r3
    fa1e:	d24d      	bcs.n	fabc <isr+0x17a4>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fa20:	1b9b      	subs	r3, r3, r6
    fa22:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    fa26:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fa2a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fa2e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    fa32:	b123      	cbz	r3, fa3e <isr+0x1726>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fa34:	429e      	cmp	r6, r3
    fa36:	d254      	bcs.n	fae2 <isr+0x17ca>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fa38:	1b9e      	subs	r6, r3, r6
    fa3a:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fa3e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fa42:	428b      	cmp	r3, r1
    fa44:	d006      	beq.n	fa54 <isr+0x173c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    fa46:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fa4a:	3b01      	subs	r3, #1
    fa4c:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    fa4e:	bf9c      	itt	ls
    fa50:	2300      	movls	r3, #0
    fa52:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fa54:	b917      	cbnz	r7, fa5c <isr+0x1744>
    fa56:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fa58:	455b      	cmp	r3, fp
    fa5a:	d054      	beq.n	fb06 <isr+0x17ee>
		lazy = _radio.conn_curr->latency_event + 1;
    fa5c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fa5e:	3301      	adds	r3, #1
    fa60:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fa62:	b935      	cbnz	r5, fa72 <isr+0x175a>
    fa64:	f1b8 0f00 	cmp.w	r8, #0
    fa68:	d103      	bne.n	fa72 <isr+0x175a>
    fa6a:	b913      	cbnz	r3, fa72 <isr+0x175a>
	    (lazy != 0) || (force != 0)) {
    fa6c:	2f00      	cmp	r7, #0
    fa6e:	f43f aeda 	beq.w	f826 <isr+0x150e>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fa72:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    fa76:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fa78:	3207      	adds	r2, #7
		ticker_status =
    fa7a:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fa7c:	b2d6      	uxtb	r6, r2
		ticker_status =
    fa7e:	4a31      	ldr	r2, [pc, #196]	; (fb44 <isr+0x182c>)
    fa80:	9205      	str	r2, [sp, #20]
    fa82:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    fa84:	9606      	str	r6, [sp, #24]
		ticker_status =
    fa86:	9704      	str	r7, [sp, #16]
    fa88:	9102      	str	r1, [sp, #8]
    fa8a:	9101      	str	r1, [sp, #4]
    fa8c:	f8cd 8000 	str.w	r8, [sp]
    fa90:	4632      	mov	r2, r6
    fa92:	4608      	mov	r0, r1
    fa94:	f7f8 fad0 	bl	8038 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fa98:	f030 0302 	bics.w	r3, r0, #2
    fa9c:	f43f aec3 	beq.w	f826 <isr+0x150e>
    faa0:	7ca3      	ldrb	r3, [r4, #18]
    faa2:	429e      	cmp	r6, r3
    faa4:	f43f aebf 	beq.w	f826 <isr+0x150e>
    faa8:	4a27      	ldr	r2, [pc, #156]	; (fb48 <isr+0x1830>)
    faaa:	4928      	ldr	r1, [pc, #160]	; (fb4c <isr+0x1834>)
    faac:	f7fe bfb5 	b.w	ea1a <isr+0x702>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fab0:	2108      	movs	r1, #8
    fab2:	e6da      	b.n	f86a <isr+0x1552>
				force = 1;
    fab4:	2701      	movs	r7, #1
    fab6:	e7a6      	b.n	fa06 <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fab8:	2122      	movs	r1, #34	; 0x22
    faba:	e6d6      	b.n	f86a <isr+0x1552>
			_radio.conn_curr->apto_expire = 0;
    fabc:	2300      	movs	r3, #0
    fabe:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    fac2:	2002      	movs	r0, #2
    fac4:	f7fa f954 	bl	9d70 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fac8:	b910      	cbnz	r0, fad0 <isr+0x17b8>
    faca:	4a1f      	ldr	r2, [pc, #124]	; (fb48 <isr+0x1830>)
    facc:	f7fe be85 	b.w	e7da <isr+0x4c2>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    fad0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fad4:	8c1b      	ldrh	r3, [r3, #32]
    fad6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fad8:	230a      	movs	r3, #10
    fada:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    fadc:	f7fb fb1a 	bl	b114 <packet_rx_enqueue>
    fae0:	e7a1      	b.n	fa26 <isr+0x170e>
			_radio.conn_curr->appto_expire = 0;
    fae2:	2300      	movs	r3, #0
    fae4:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fae8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    faec:	2b00      	cmp	r3, #0
    faee:	d1a6      	bne.n	fa3e <isr+0x1726>
    faf0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    faf4:	428b      	cmp	r3, r1
    faf6:	d1a6      	bne.n	fa46 <isr+0x172e>
				_radio.conn_curr->llcp_type = LLCP_PING;
    faf8:	2307      	movs	r3, #7
    fafa:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fafe:	1e4b      	subs	r3, r1, #1
    fb00:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fb04:	e79b      	b.n	fa3e <isr+0x1726>
	lazy = 0;
    fb06:	463b      	mov	r3, r7
    fb08:	e7ab      	b.n	fa62 <isr+0x174a>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fb0a:	3b04      	subs	r3, #4
    fb0c:	2b01      	cmp	r3, #1
    fb0e:	d903      	bls.n	fb18 <isr+0x1800>
    fb10:	4a0f      	ldr	r2, [pc, #60]	; (fb50 <isr+0x1838>)
    fb12:	4910      	ldr	r1, [pc, #64]	; (fb54 <isr+0x183c>)
    fb14:	f7fe bf81 	b.w	ea1a <isr+0x702>
		_radio.state = STATE_NONE;
    fb18:	2300      	movs	r3, #0
    fb1a:	7523      	strb	r3, [r4, #20]
    fb1c:	f7fe bca1 	b.w	e462 <isr+0x14a>
		LL_ASSERT(0);
    fb20:	4a0b      	ldr	r2, [pc, #44]	; (fb50 <isr+0x1838>)
    fb22:	f7fe bce8 	b.w	e4f6 <isr+0x1de>
	clock_control_off(_radio.hf_clock, NULL);
    fb26:	6820      	ldr	r0, [r4, #0]
    fb28:	6843      	ldr	r3, [r0, #4]
    fb2a:	4629      	mov	r1, r5
    fb2c:	685b      	ldr	r3, [r3, #4]
    fb2e:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fb30:	2201      	movs	r2, #1
    fb32:	4611      	mov	r1, r2
    fb34:	4628      	mov	r0, r5
    fb36:	f7f7 fc53 	bl	73e0 <mayfly_enable>
    fb3a:	f7fe bc92 	b.w	e462 <isr+0x14a>
		LL_ASSERT(0);
    fb3e:	4a06      	ldr	r2, [pc, #24]	; (fb58 <isr+0x1840>)
    fb40:	f7fe bcd9 	b.w	e4f6 <isr+0x1de>
    fb44:	0000aa9d 	.word	0x0000aa9d
    fb48:	000166b4 	.word	0x000166b4
    fb4c:	00016cf1 	.word	0x00016cf1
    fb50:	000166c3 	.word	0x000166c3
    fb54:	00016d5b 	.word	0x00016d5b
    fb58:	000166d9 	.word	0x000166d9

0000fb5c <radio_init>:
{
    fb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    fb60:	4e3d      	ldr	r6, [pc, #244]	; (fc58 <radio_init+0xfc>)
{
    fb62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fb64:	f89d c01c 	ldrb.w	ip, [sp, #28]
    fb68:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    fb6c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    fb70:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    fb74:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    fb76:	f44f 70aa 	mov.w	r0, #340	; 0x154
    fb7a:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    fb7e:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    fb82:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    fb86:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    fb88:	f10c 0401 	add.w	r4, ip, #1
    fb8c:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    fb8e:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    fb90:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    fb94:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    fb98:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    fb9a:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fb9c:	bf98      	it	ls
    fb9e:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    fba2:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    fba6:	bf88      	it	hi
    fba8:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    fbac:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    fbb0:	bf8c      	ite	hi
    fbb2:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fbb6:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fbba:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fbbe:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fbc2:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fbc6:	bf8c      	ite	hi
    fbc8:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fbcc:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    fbce:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    fbd2:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    fbd6:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    fbda:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fbde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    fbe2:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fbe6:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    fbea:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fbee:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fbf0:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    fbf2:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fbf6:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fbf8:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    fbfc:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fc00:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    fc04:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fc06:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    fc0a:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fc0e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fc12:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    fc16:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fc1a:	340a      	adds	r4, #10
    fc1c:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    fc20:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fc22:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    fc24:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    fc28:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    fc2c:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    fc2e:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    fc32:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fc36:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    fc3a:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    fc3e:	d003      	beq.n	fc48 <radio_init+0xec>
		return (retcode + mem_size);
    fc40:	442c      	add	r4, r5
}
    fc42:	4620      	mov	r0, r4
    fc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    fc48:	2301      	movs	r3, #1
    fc4a:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    fc4e:	f7fa f953 	bl	9ef8 <common_init>
	radio_setup();
    fc52:	f001 ffe5 	bl	11c20 <radio_setup>
	return retcode;
    fc56:	e7f4      	b.n	fc42 <radio_init+0xe6>
    fc58:	200008e8 	.word	0x200008e8

0000fc5c <ll_reset>:
{
    fc5c:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    fc5e:	2103      	movs	r1, #3
    fc60:	2005      	movs	r0, #5
    fc62:	f7fa fa29 	bl	a0b8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    fc66:	2104      	movs	r1, #4
    fc68:	2006      	movs	r0, #6
    fc6a:	f7fa fa25 	bl	a0b8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    fc6e:	4c22      	ldr	r4, [pc, #136]	; (fcf8 <ll_reset+0x9c>)
    fc70:	2500      	movs	r5, #0
    fc72:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    fc76:	b2ab      	uxth	r3, r5
    fc78:	429a      	cmp	r2, r3
    fc7a:	f105 0501 	add.w	r5, r5, #1
    fc7e:	d834      	bhi.n	fcea <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    fc80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fc84:	f36f 13c7 	bfc	r3, #7, #1
    fc88:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fc8c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    fc90:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    fc92:	f360 0300 	bfi	r3, r0, #0, #1
    fc96:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fc9a:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fc9c:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    fca0:	fbb3 f3f2 	udiv	r3, r3, r2
    fca4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fca8:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    fcac:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fcb0:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    fcb2:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    fcb6:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fcba:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    fcbe:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    fcc2:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    fcc6:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fcca:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    fcce:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    fcd2:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    fcd6:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    fcda:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    fcde:	f001 fe2b 	bl	11938 <ll_filter_reset>
}
    fce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fce6:	f7fa b907 	b.w	9ef8 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    fcea:	1da8      	adds	r0, r5, #6
    fcec:	21ff      	movs	r1, #255	; 0xff
    fcee:	b2c0      	uxtb	r0, r0
    fcf0:	f7fa f9e2 	bl	a0b8 <role_disable>
    fcf4:	e7bd      	b.n	fc72 <ll_reset+0x16>
    fcf6:	bf00      	nop
    fcf8:	200008e8 	.word	0x200008e8

0000fcfc <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    fcfc:	4b02      	ldr	r3, [pc, #8]	; (fd08 <ll_adv_is_enabled+0xc>)
    fcfe:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    fd02:	09c0      	lsrs	r0, r0, #7
    fd04:	4770      	bx	lr
    fd06:	bf00      	nop
    fd08:	200008e8 	.word	0x200008e8

0000fd0c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    fd0c:	4b04      	ldr	r3, [pc, #16]	; (fd20 <radio_adv_filter_pol_get+0x14>)
    fd0e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    fd12:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    fd14:	bfba      	itte	lt
    fd16:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    fd1a:	0980      	lsrlt	r0, r0, #6
    fd1c:	2000      	movge	r0, #0
}
    fd1e:	4770      	bx	lr
    fd20:	200008e8 	.word	0x200008e8

0000fd24 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fd24:	4a09      	ldr	r2, [pc, #36]	; (fd4c <ll_scan_is_enabled+0x28>)
    fd26:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    fd2a:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fd2e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fd32:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fd36:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fd38:	f003 0301 	and.w	r3, r3, #1
    fd3c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    fd40:	bf14      	ite	ne
    fd42:	2004      	movne	r0, #4
    fd44:	2000      	moveq	r0, #0
}
    fd46:	4318      	orrs	r0, r3
    fd48:	4770      	bx	lr
    fd4a:	bf00      	nop
    fd4c:	200008e8 	.word	0x200008e8

0000fd50 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    fd50:	4b05      	ldr	r3, [pc, #20]	; (fd68 <radio_scan_filter_pol_get+0x18>)
    fd52:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    fd56:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    fd5a:	bf1c      	itt	ne
    fd5c:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    fd60:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    fd64:	4770      	bx	lr
    fd66:	bf00      	nop
    fd68:	200008e8 	.word	0x200008e8
    fd6c:	00000000 	.word	0x00000000

0000fd70 <radio_connect_enable>:
{
    fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    fd74:	f8df 8370 	ldr.w	r8, [pc, #880]	; 100e8 <__kernel_ram_size+0xe8>
{
    fd78:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
    fd7a:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    fd7e:	9301      	str	r3, [sp, #4]
    fd80:	4683      	mov	fp, r0
    fd82:	468a      	mov	sl, r1
    fd84:	4691      	mov	r9, r2
    fd86:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    fd88:	2e00      	cmp	r6, #0
    fd8a:	f040 8198 	bne.w	100be <__kernel_ram_size+0xbe>
	link = mem_acquire(&_radio.link_rx_free);
    fd8e:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    fd92:	f7f7 fa82 	bl	729a <mem_acquire>
	if (!link) {
    fd96:	4607      	mov	r7, r0
    fd98:	b150      	cbz	r0, fdb0 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    fd9a:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    fd9e:	f7f7 fa7c 	bl	729a <mem_acquire>
	if (!conn) {
    fda2:	4604      	mov	r4, r0
    fda4:	b930      	cbnz	r0, fdb4 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    fda6:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    fdaa:	4638      	mov	r0, r7
    fdac:	f7f7 fa8f 	bl	72ce <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    fdb0:	2007      	movs	r0, #7
    fdb2:	e15c      	b.n	1006e <__kernel_ram_size+0x6e>
	_radio.scanner.adv_addr_type = adv_addr_type;
    fdb4:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    fdb8:	f36b 1386 	bfi	r3, fp, #6, #1
    fdbc:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    fdc0:	2206      	movs	r2, #6
    fdc2:	4651      	mov	r1, sl
    fdc4:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    fdc8:	f7f1 ff3d 	bl	1c46 <memcpy>
	_radio.scanner.conn_latency = latency;
    fdcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fdd0:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fdd4:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    fdd6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
    fdda:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fdde:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    fde0:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fde4:	f001 ffd8 	bl	11d98 <radio_tx_ready_delay_get>
    fde8:	49b9      	ldr	r1, [pc, #740]	; (100d0 <__kernel_ram_size+0xd0>)
    fdea:	f200 4052 	addw	r0, r0, #1106	; 0x452
    fdee:	a3b6      	add	r3, pc, #728	; (adr r3, 100c8 <__kernel_ram_size+0xc8>)
    fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fdf4:	fba0 0101 	umull	r0, r1, r0, r1
    fdf8:	f7f0 fa0c 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    fdfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fe00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fe04:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    fe08:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    fe0a:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 100ec <__kernel_ram_size+0xec>
	conn->llcp_features = RADIO_BLE_FEAT;
    fe0e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    fe12:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    fe16:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    fe18:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    fe1c:	2104      	movs	r1, #4
    fe1e:	a803      	add	r0, sp, #12
    fe20:	f7f8 fa68 	bl	82f4 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    fe24:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fe28:	2000      	movs	r0, #0
    fe2a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    fe2e:	231f      	movs	r3, #31
	transitions = 0;
    fe30:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    fe32:	2101      	movs	r1, #1
	while (bit_idx--) {
    fe34:	3b01      	subs	r3, #1
    fe36:	b2db      	uxtb	r3, r3
    fe38:	2bff      	cmp	r3, #255	; 0xff
    fe3a:	d103      	bne.n	fe44 <radio_connect_enable+0xd4>
    fe3c:	b3d0      	cbz	r0, feb4 <radio_connect_enable+0x144>
    fe3e:	f8cd c00c 	str.w	ip, [sp, #12]
    fe42:	e037      	b.n	feb4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    fe44:	fa2c fe03 	lsr.w	lr, ip, r3
    fe48:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    fe4c:	45d6      	cmp	lr, sl
    fe4e:	d11a      	bne.n	fe86 <radio_connect_enable+0x116>
			consecutive_cnt++;
    fe50:	3101      	adds	r1, #1
    fe52:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    fe54:	2906      	cmp	r1, #6
    fe56:	d807      	bhi.n	fe68 <radio_connect_enable+0xf8>
    fe58:	2b1b      	cmp	r3, #27
    fe5a:	d81a      	bhi.n	fe92 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    fe5c:	b122      	cbz	r2, fe68 <radio_connect_enable+0xf8>
    fe5e:	2b1b      	cmp	r3, #27
    fe60:	d017      	beq.n	fe92 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    fe62:	2a01      	cmp	r2, #1
    fe64:	d815      	bhi.n	fe92 <radio_connect_enable+0x122>
    fe66:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    fe68:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    fe6c:	f1be 0f00 	cmp.w	lr, #0
    fe70:	f000 8100 	beq.w	10074 <__kernel_ram_size+0x74>
				access_addr &= ~BIT(bit_idx);
    fe74:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    fe78:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    fe7c:	3201      	adds	r2, #1
    fe7e:	2001      	movs	r0, #1
    fe80:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    fe82:	4601      	mov	r1, r0
    fe84:	e005      	b.n	fe92 <radio_connect_enable+0x122>
			transitions++;
    fe86:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    fe88:	2b1b      	cmp	r3, #27
			transitions++;
    fe8a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    fe8c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    fe90:	d9e5      	bls.n	fe5e <radio_connect_enable+0xee>
		if (transitions > 24) {
    fe92:	2a18      	cmp	r2, #24
    fe94:	f240 80f6 	bls.w	10084 <__kernel_ram_size+0x84>
    fe98:	b108      	cbz	r0, fe9e <radio_connect_enable+0x12e>
    fe9a:	f8cd c00c 	str.w	ip, [sp, #12]
    fe9e:	3301      	adds	r3, #1
    fea0:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    fea2:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    fea6:	f1be 0f00 	cmp.w	lr, #0
    feaa:	f000 80e8 	beq.w	1007e <__kernel_ram_size+0x7e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    feae:	425b      	negs	r3, r3
    feb0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    feb2:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    feb4:	9b03      	ldr	r3, [sp, #12]
    feb6:	a804      	add	r0, sp, #16
    feb8:	ea83 0308 	eor.w	r3, r3, r8
    febc:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    fec0:	2104      	movs	r1, #4
    fec2:	f7f7 fb95 	bl	75f0 <util_ones_count_get>
    fec6:	2801      	cmp	r0, #1
    fec8:	f240 80e3 	bls.w	10092 <__kernel_ram_size+0x92>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    fecc:	9b03      	ldr	r3, [sp, #12]
    fece:	b29a      	uxth	r2, r3
    fed0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    fed4:	f000 80d8 	beq.w	10088 <__kernel_ram_size+0x88>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    fed8:	2204      	movs	r2, #4
    feda:	a903      	add	r1, sp, #12
    fedc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    fee0:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    fee2:	f7f1 feb0 	bl	1c46 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    fee6:	2103      	movs	r1, #3
    fee8:	f104 0014 	add.w	r0, r4, #20
    feec:	f7f8 fa02 	bl	82f4 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    fef0:	2205      	movs	r2, #5
    fef2:	4978      	ldr	r1, [pc, #480]	; (100d4 <__kernel_ram_size+0xd4>)
    fef4:	f104 0017 	add.w	r0, r4, #23
    fef8:	f7f1 fea5 	bl	1c46 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    fefc:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
    ff00:	7f63      	ldrb	r3, [r4, #29]
    ff02:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    ff06:	f36f 1386 	bfc	r3, #6, #1
    ff0a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    ff0c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    ff0e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    ff10:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    ff12:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    ff14:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
    ff18:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
    ff1c:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
    ff20:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ff22:	211b      	movs	r1, #27
    ff24:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ff26:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    ff28:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
    ff2c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    ff2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    ff32:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    ff36:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    ff38:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    ff3a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    ff3e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    ff40:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    ff44:	2601      	movs	r6, #1
    ff46:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    ff4a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    ff4e:	f363 11c7 	bfi	r1, r3, #7, #1
    ff52:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    ff56:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    ff5a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    ff5e:	f366 0102 	bfi	r1, r6, #0, #3
    ff62:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    ff66:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
    ff6a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    ff6c:	b2c9      	uxtb	r1, r1
    ff6e:	f36c 01c5 	bfi	r1, ip, #3, #3
    ff72:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    ff76:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    ff7a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    ff7c:	f366 0102 	bfi	r1, r6, #0, #3
    ff80:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    ff84:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    ff86:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    ff88:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    ff8c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    ff8e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    ff90:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    ff94:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    ff98:	f363 0100 	bfi	r1, r3, #0, #1
    ff9c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    ffa0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ffa4:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    ffa8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
    ffac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    ffb0:	1e56      	subs	r6, r2, #1
    ffb2:	f242 7e10 	movw	lr, #10000	; 0x2710
    ffb6:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
    ffba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    ffbe:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ffc2:	4b45      	ldr	r3, [pc, #276]	; (100d8 <__kernel_ram_size+0xd8>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    ffc4:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    ffc6:	4945      	ldr	r1, [pc, #276]	; (100dc <__kernel_ram_size+0xdc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ffc8:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    ffca:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ffcc:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    ffd0:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ffd4:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    ffd6:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ffda:	1d81      	adds	r1, r0, #6
    ffdc:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    ffde:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ffe2:	dc66      	bgt.n	100b2 <__kernel_ram_size+0xb2>
	conn->llcp_version.tx = 0;
    ffe4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ffe8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    ffec:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    ffee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    fff2:	f360 0341 	bfi	r3, r0, #1, #1
    fff6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    fffa:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    fffe:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   10002:	f360 1304 	bfi	r3, r0, #4, #1
   10006:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1000a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1000e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   10012:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10016:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   1001a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   1001e:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   10022:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   10026:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1002a:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1002e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   10032:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   10036:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1003a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1003e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   10042:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   10046:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   1004a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1004e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   10052:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   10056:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1005a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1005e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   10062:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   10066:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   1006a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   1006e:	b005      	add	sp, #20
   10070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   10074:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10078:	f04f 0e01 	mov.w	lr, #1
   1007c:	e6fe      	b.n	fe7c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1007e:	3b01      	subs	r3, #1
   10080:	4313      	orrs	r3, r2
   10082:	e716      	b.n	feb2 <radio_connect_enable+0x142>
		if (transitions > 24) {
   10084:	46f2      	mov	sl, lr
   10086:	e6d5      	b.n	fe34 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10088:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1008a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1008e:	f47f af23 	bne.w	fed8 <radio_connect_enable+0x168>
   10092:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   10094:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10098:	f47f aec0 	bne.w	fe1c <radio_connect_enable+0xac>
   1009c:	4a10      	ldr	r2, [pc, #64]	; (100e0 <__kernel_ram_size+0xe0>)
   1009e:	4911      	ldr	r1, [pc, #68]	; (100e4 <__kernel_ram_size+0xe4>)
   100a0:	2003      	movs	r0, #3
   100a2:	f7f1 ff97 	bl	1fd4 <bt_log>
   100a6:	4040      	eors	r0, r0
   100a8:	f380 8811 	msr	BASEPRI, r0
   100ac:	f04f 0004 	mov.w	r0, #4
   100b0:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100b2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   100b6:	33fa      	adds	r3, #250	; 0xfa
   100b8:	441a      	add	r2, r3
   100ba:	b292      	uxth	r2, r2
   100bc:	e792      	b.n	ffe4 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   100be:	200c      	movs	r0, #12
   100c0:	e7d5      	b.n	1006e <__kernel_ram_size+0x6e>
   100c2:	bf00      	nop
   100c4:	f3af 8000 	nop.w
   100c8:	1afd498d 	.word	0x1afd498d
   100cc:	00000007 	.word	0x00000007
   100d0:	3b9aca00 	.word	0x3b9aca00
   100d4:	20000a02 	.word	0x20000a02
   100d8:	01c9c37f 	.word	0x01c9c37f
   100dc:	026259ff 	.word	0x026259ff
   100e0:	00016863 	.word	0x00016863
   100e4:	00017131 	.word	0x00017131
   100e8:	200008e8 	.word	0x200008e8
   100ec:	8e89bed6 	.word	0x8e89bed6

000100f0 <ll_conn_update>:
{
   100f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100f4:	460c      	mov	r4, r1
   100f6:	4690      	mov	r8, r2
   100f8:	461d      	mov	r5, r3
   100fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   100fe:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10102:	f7f9 ffc3 	bl	a08c <connection_get>
	if (!conn) {
   10106:	b330      	cbz	r0, 10156 <ll_conn_update+0x66>
	if (!cmd) {
   10108:	2c00      	cmp	r4, #0
   1010a:	d14a      	bne.n	101a2 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   1010c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10110:	06d9      	lsls	r1, r3, #27
   10112:	d407      	bmi.n	10124 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10114:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10118:	069a      	lsls	r2, r3, #26
   1011a:	d541      	bpl.n	101a0 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   1011c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10120:	079b      	lsls	r3, r3, #30
   10122:	d43d      	bmi.n	101a0 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10124:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10128:	2b00      	cmp	r3, #0
   1012a:	da17      	bge.n	1015c <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1012c:	201a      	movs	r0, #26
   1012e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   10132:	428b      	cmp	r3, r1
   10134:	d00f      	beq.n	10156 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10136:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   1013a:	f003 0207 	and.w	r2, r3, #7
   1013e:	2a03      	cmp	r2, #3
   10140:	d109      	bne.n	10156 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10142:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10146:	b2db      	uxtb	r3, r3
   10148:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   1014c:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   10150:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10154:	e021      	b.n	1019a <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10156:	200c      	movs	r0, #12
   10158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   1015c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10160:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10164:	429a      	cmp	r2, r3
   10166:	d1f6      	bne.n	10156 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10168:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   1016c:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   10170:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   10172:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10174:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10178:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   1017c:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   1017e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10182:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   10186:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   1018a:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   1018e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10192:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10196:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1019a:	2000      	movs	r0, #0
   1019c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   101a0:	2401      	movs	r4, #1
		cmd--;
   101a2:	3c01      	subs	r4, #1
		if (cmd) {
   101a4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   101a8:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   101ac:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   101b0:	d1bf      	bne.n	10132 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   101b2:	4299      	cmp	r1, r3
   101b4:	d1cf      	bne.n	10156 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   101b6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   101ba:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   101be:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   101c2:	b2db      	uxtb	r3, r3
   101c4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   101c8:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   101ca:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   101ce:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   101d2:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   101d6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   101da:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   101de:	e7dc      	b.n	1019a <ll_conn_update+0xaa>

000101e0 <ll_chm_update>:
{
   101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   101e4:	4c1e      	ldr	r4, [pc, #120]	; (10260 <ll_chm_update+0x80>)
   101e6:	4601      	mov	r1, r0
   101e8:	2205      	movs	r2, #5
{
   101ea:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   101ec:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   101f0:	f7f1 fd29 	bl	1c46 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   101f4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   101f8:	2105      	movs	r1, #5
   101fa:	f7f7 f9f9 	bl	75f0 <util_ones_count_get>
	_radio.data_chan_count =
   101fe:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10202:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10206:	3c01      	subs	r4, #1
   10208:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   1020a:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1020c:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10210:	2cff      	cmp	r4, #255	; 0xff
   10212:	d102      	bne.n	1021a <ll_chm_update+0x3a>
	return 0;
   10214:	2000      	movs	r0, #0
   10216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   1021a:	4620      	mov	r0, r4
   1021c:	f7f9 ff36 	bl	a08c <connection_get>
		if (!conn || conn->role) {
   10220:	4606      	mov	r6, r0
   10222:	b1b8      	cbz	r0, 10254 <ll_chm_update+0x74>
   10224:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10228:	2b00      	cmp	r3, #0
   1022a:	db13      	blt.n	10254 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   1022c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10230:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10234:	429a      	cmp	r2, r3
   10236:	d110      	bne.n	1025a <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10238:	2205      	movs	r2, #5
   1023a:	4629      	mov	r1, r5
   1023c:	3079      	adds	r0, #121	; 0x79
   1023e:	f7f1 fd02 	bl	1c46 <memcpy>
		conn->llcp_req++;
   10242:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10246:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   1024a:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1024c:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   10250:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10254:	3c01      	subs	r4, #1
   10256:	b2e4      	uxtb	r4, r4
   10258:	e7da      	b.n	10210 <ll_chm_update+0x30>
			return 1;
   1025a:	2001      	movs	r0, #1
}
   1025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10260:	200008e8 	.word	0x200008e8

00010264 <ll_chm_get>:
{
   10264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10266:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10268:	f7f9 ff10 	bl	a08c <connection_get>
	if (!conn) {
   1026c:	4604      	mov	r4, r0
   1026e:	b160      	cbz	r0, 1028a <ll_chm_get+0x26>
		conn->chm_update = 0;
   10270:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10272:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   10276:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10278:	2205      	movs	r2, #5
   1027a:	4631      	mov	r1, r6
   1027c:	4628      	mov	r0, r5
   1027e:	f7f1 fce2 	bl	1c46 <memcpy>
	} while (conn->chm_update);
   10282:	7f20      	ldrb	r0, [r4, #28]
   10284:	2800      	cmp	r0, #0
   10286:	d1f6      	bne.n	10276 <ll_chm_get+0x12>
   10288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1028a:	2001      	movs	r0, #1
}
   1028c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001028e <ll_feature_req_send>:
{
   1028e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10290:	f7f9 fefc 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10294:	b168      	cbz	r0, 102b2 <ll_feature_req_send+0x24>
   10296:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1029a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1029e:	4293      	cmp	r3, r2
   102a0:	d107      	bne.n	102b2 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   102a2:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   102a4:	2204      	movs	r2, #4
	conn->llcp_req++;
   102a6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   102aa:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   102ae:	2000      	movs	r0, #0
   102b0:	bd08      	pop	{r3, pc}
		return 1;
   102b2:	2001      	movs	r0, #1
}
   102b4:	bd08      	pop	{r3, pc}

000102b6 <ll_version_ind_send>:
{
   102b6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   102b8:	f7f9 fee8 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   102bc:	b168      	cbz	r0, 102da <ll_version_ind_send+0x24>
   102be:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   102c2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   102c6:	4293      	cmp	r3, r2
   102c8:	d107      	bne.n	102da <ll_version_ind_send+0x24>
	conn->llcp_req++;
   102ca:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   102cc:	2205      	movs	r2, #5
	conn->llcp_req++;
   102ce:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   102d2:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   102d6:	2000      	movs	r0, #0
   102d8:	bd08      	pop	{r3, pc}
		return 1;
   102da:	2001      	movs	r0, #1
}
   102dc:	bd08      	pop	{r3, pc}

000102de <ll_terminate_ind_send>:
{
   102de:	b510      	push	{r4, lr}
   102e0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   102e2:	f7f9 fed3 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   102e6:	b160      	cbz	r0, 10302 <ll_terminate_ind_send+0x24>
   102e8:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   102ec:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   102f0:	4293      	cmp	r3, r2
   102f2:	d106      	bne.n	10302 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   102f4:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   102f6:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   102fa:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   102fe:	2000      	movs	r0, #0
   10300:	bd10      	pop	{r4, pc}
		return 1;
   10302:	2001      	movs	r0, #1
}
   10304:	bd10      	pop	{r4, pc}

00010306 <ll_tx_pwr_lvl_get>:
{
   10306:	b510      	push	{r4, lr}
   10308:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1030a:	f7f9 febf 	bl	a08c <connection_get>
	if (!conn) {
   1030e:	b110      	cbz	r0, 10316 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   10310:	2000      	movs	r0, #0
   10312:	7020      	strb	r0, [r4, #0]
	return 0;
   10314:	bd10      	pop	{r4, pc}
		return 1;
   10316:	2001      	movs	r0, #1
}
   10318:	bd10      	pop	{r4, pc}

0001031a <ll_apto_get>:
{
   1031a:	b510      	push	{r4, lr}
   1031c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1031e:	f7f9 feb5 	bl	a08c <connection_get>
	if (!conn) {
   10322:	b160      	cbz	r0, 1033e <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10324:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10326:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1032a:	435a      	muls	r2, r3
   1032c:	237d      	movs	r3, #125	; 0x7d
   1032e:	4353      	muls	r3, r2
	return 0;
   10330:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10336:	fb93 f3f2 	sdiv	r3, r3, r2
   1033a:	8023      	strh	r3, [r4, #0]
	return 0;
   1033c:	bd10      	pop	{r4, pc}
		return 1;
   1033e:	2001      	movs	r0, #1
}
   10340:	bd10      	pop	{r4, pc}

00010342 <ll_apto_set>:
{
   10342:	b510      	push	{r4, lr}
   10344:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10346:	f7f9 fea1 	bl	a08c <connection_get>
	if (!conn) {
   1034a:	b170      	cbz	r0, 1036a <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   1034c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1034e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10352:	4353      	muls	r3, r2
   10354:	f242 7110 	movw	r1, #10000	; 0x2710
   10358:	fb01 3404 	mla	r4, r1, r4, r3
   1035c:	3c01      	subs	r4, #1
   1035e:	fb94 f4f3 	sdiv	r4, r4, r3
   10362:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10366:	2000      	movs	r0, #0
   10368:	bd10      	pop	{r4, pc}
		return 1;
   1036a:	2001      	movs	r0, #1
}
   1036c:	bd10      	pop	{r4, pc}

0001036e <ll_length_req_send>:
{
   1036e:	b570      	push	{r4, r5, r6, lr}
   10370:	460e      	mov	r6, r1
   10372:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10374:	f7f9 fe8a 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10378:	b1d0      	cbz	r0, 103b0 <ll_length_req_send+0x42>
   1037a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1037e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10382:	429a      	cmp	r2, r3
   10384:	d114      	bne.n	103b0 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10386:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1038a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1038e:	4293      	cmp	r3, r2
   10390:	d10e      	bne.n	103b0 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10392:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   10396:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   1039a:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1039c:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   103a0:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   103a4:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   103a8:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   103ac:	2000      	movs	r0, #0
   103ae:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   103b0:	2001      	movs	r0, #1
}
   103b2:	bd70      	pop	{r4, r5, r6, pc}

000103b4 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   103b4:	4b03      	ldr	r3, [pc, #12]	; (103c4 <ll_length_default_get+0x10>)
   103b6:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   103ba:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   103bc:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   103c0:	800b      	strh	r3, [r1, #0]
   103c2:	4770      	bx	lr
   103c4:	200008e8 	.word	0x200008e8

000103c8 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   103c8:	4b03      	ldr	r3, [pc, #12]	; (103d8 <ll_length_default_set+0x10>)
   103ca:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   103ce:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   103d2:	2000      	movs	r0, #0
   103d4:	4770      	bx	lr
   103d6:	bf00      	nop
   103d8:	200008e8 	.word	0x200008e8

000103dc <ll_length_max_get>:
{
   103dc:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   103de:	241b      	movs	r4, #27
   103e0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   103e2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   103e6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   103e8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   103ea:	8018      	strh	r0, [r3, #0]
   103ec:	bd10      	pop	{r4, pc}

000103ee <ll_phy_get>:
{
   103ee:	b538      	push	{r3, r4, r5, lr}
   103f0:	460d      	mov	r5, r1
   103f2:	4614      	mov	r4, r2
	conn = connection_get(handle);
   103f4:	f7f9 fe4a 	bl	a08c <connection_get>
	if (!conn) {
   103f8:	b158      	cbz	r0, 10412 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   103fa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   103fe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10402:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10404:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10408:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1040c:	7023      	strb	r3, [r4, #0]
	return 0;
   1040e:	2000      	movs	r0, #0
   10410:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   10412:	2001      	movs	r0, #1
}
   10414:	bd38      	pop	{r3, r4, r5, pc}
	...

00010418 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10418:	4b03      	ldr	r3, [pc, #12]	; (10428 <ll_phy_default_set+0x10>)
   1041a:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1041e:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10422:	2000      	movs	r0, #0
   10424:	4770      	bx	lr
   10426:	bf00      	nop
   10428:	200008e8 	.word	0x200008e8

0001042c <ll_phy_req_send>:
{
   1042c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10430:	4689      	mov	r9, r1
   10432:	4690      	mov	r8, r2
   10434:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10436:	f7f9 fe29 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1043a:	b320      	cbz	r0, 10486 <ll_phy_req_send+0x5a>
   1043c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10440:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10444:	429a      	cmp	r2, r3
   10446:	d11e      	bne.n	10486 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10448:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1044c:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   10450:	429d      	cmp	r5, r3
   10452:	d118      	bne.n	10486 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10454:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10458:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   1045c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   10460:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10464:	f046 0102 	orr.w	r1, r6, #2
   10468:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   1046c:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1046e:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   10470:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10474:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   10478:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   1047c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   10480:	2000      	movs	r0, #0
   10482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   10486:	2001      	movs	r0, #1
}
   10488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001048c <ll_rx_get>:
{
   1048c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10490:	4605      	mov	r5, r0
   10492:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10494:	4918      	ldr	r1, [pc, #96]	; (104f8 <ll_rx_get+0x6c>)
   10496:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   1049a:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   1049e:	4293      	cmp	r3, r2
   104a0:	460f      	mov	r7, r1
   104a2:	d01f      	beq.n	104e4 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   104a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   104a8:	f201 1177 	addw	r1, r1, #375	; 0x177
   104ac:	f898 2000 	ldrb.w	r2, [r8]
   104b0:	f7f9 fda2 	bl	9ff8 <tx_cmplt_get>
		if (!cmplt) {
   104b4:	4604      	mov	r4, r0
   104b6:	b9e0      	cbnz	r0, 104f2 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   104b8:	ae02      	add	r6, sp, #8
   104ba:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   104be:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   104c2:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   104c6:	4631      	mov	r1, r6
   104c8:	f10d 0006 	add.w	r0, sp, #6
   104cc:	f7f9 fd94 	bl	9ff8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   104d0:	b934      	cbnz	r4, 104e0 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   104d2:	b928      	cbnz	r0, 104e0 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   104d4:	f8c5 8000 	str.w	r8, [r5]
}
   104d8:	4620      	mov	r0, r4
   104da:	b002      	add	sp, #8
   104dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   104e0:	4604      	mov	r4, r0
   104e2:	e7ee      	b.n	104c2 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   104e4:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   104e8:	f201 1177 	addw	r1, r1, #375	; 0x177
   104ec:	f7f9 fd84 	bl	9ff8 <tx_cmplt_get>
   104f0:	4604      	mov	r4, r0
		*node_rx = NULL;
   104f2:	2300      	movs	r3, #0
   104f4:	602b      	str	r3, [r5, #0]
   104f6:	e7ef      	b.n	104d8 <ll_rx_get+0x4c>
   104f8:	200008e8 	.word	0x200008e8

000104fc <ll_rx_mem_release>:
{
   104fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10500:	4c19      	ldr	r4, [pc, #100]	; (10568 <ll_rx_mem_release+0x6c>)
{
   10502:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10504:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10506:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   1050a:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   1050e:	b928      	cbnz	r0, 1051c <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   10510:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10512:	20ff      	movs	r0, #255	; 0xff
}
   10514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10518:	f7f9 bca2 	b.w	9e60 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1051c:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1051e:	f8d0 8000 	ldr.w	r8, [r0]
   10522:	2a0c      	cmp	r2, #12
   10524:	d807      	bhi.n	10536 <ll_rx_mem_release+0x3a>
   10526:	2301      	movs	r3, #1
   10528:	4093      	lsls	r3, r2
   1052a:	f641 727e 	movw	r2, #8062	; 0x1f7e
   1052e:	4213      	tst	r3, r2
   10530:	d10c      	bne.n	1054c <ll_rx_mem_release+0x50>
   10532:	061b      	lsls	r3, r3, #24
   10534:	d40f      	bmi.n	10556 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
   10536:	4a0d      	ldr	r2, [pc, #52]	; (1056c <ll_rx_mem_release+0x70>)
   10538:	490d      	ldr	r1, [pc, #52]	; (10570 <ll_rx_mem_release+0x74>)
   1053a:	2003      	movs	r0, #3
   1053c:	f7f1 fd4a 	bl	1fd4 <bt_log>
   10540:	4040      	eors	r0, r0
   10542:	f380 8811 	msr	BASEPRI, r0
   10546:	f04f 0004 	mov.w	r0, #4
   1054a:	df02      	svc	2
			mem_release(_node_rx_free,
   1054c:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1054e:	f7f6 febe 	bl	72ce <mem_release>
{
   10552:	4640      	mov	r0, r8
   10554:	e7db      	b.n	1050e <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10556:	88c2      	ldrh	r2, [r0, #6]
   10558:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1055c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10560:	f7f6 fed0 	bl	7304 <mem_get>
			mem_release(conn, &_radio.conn_free);
   10564:	4639      	mov	r1, r7
   10566:	e7f2      	b.n	1054e <ll_rx_mem_release+0x52>
   10568:	20000a18 	.word	0x20000a18
   1056c:	00016a07 	.word	0x00016a07
   10570:	000153a4 	.word	0x000153a4

00010574 <do_radio_rx_fc_set>:
	if (req == ack) {
   10574:	4291      	cmp	r1, r2
{
   10576:	b510      	push	{r4, lr}
   10578:	4b14      	ldr	r3, [pc, #80]	; (105cc <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1057a:	d119      	bne.n	105b0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   1057c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10580:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10584:	4294      	cmp	r4, r2
   10586:	d111      	bne.n	105ac <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10588:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1058a:	bf14      	ite	ne
   1058c:	460a      	movne	r2, r1
   1058e:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10590:	3a01      	subs	r2, #1
   10592:	b2d2      	uxtb	r2, r2
   10594:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10598:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   1059c:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   105a0:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   105a4:	4291      	cmp	r1, r2
   105a6:	d00f      	beq.n	105c8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   105a8:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   105ac:	2001      	movs	r0, #1
   105ae:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   105b0:	b929      	cbnz	r1, 105be <do_radio_rx_fc_set+0x4a>
   105b2:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   105b6:	1a18      	subs	r0, r3, r0
   105b8:	bf18      	it	ne
   105ba:	2001      	movne	r0, #1
   105bc:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   105be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   105c2:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   105c6:	e7f6      	b.n	105b6 <do_radio_rx_fc_set+0x42>
	return 0;
   105c8:	2000      	movs	r0, #0
}
   105ca:	bd10      	pop	{r4, pc}
   105cc:	200008e8 	.word	0x200008e8

000105d0 <radio_rx_fc_set>:
{
   105d0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   105d2:	4b14      	ldr	r3, [pc, #80]	; (10624 <radio_rx_fc_set+0x54>)
   105d4:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   105d8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   105da:	b302      	cbz	r2, 1061e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   105dc:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   105e0:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   105e2:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   105e6:	b135      	cbz	r5, 105f6 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   105e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   105ec:	4298      	cmp	r0, r3
   105ee:	d016      	beq.n	1061e <radio_rx_fc_set+0x4e>
}
   105f0:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   105f2:	f7ff bfbf 	b.w	10574 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   105f6:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   105fa:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   105fe:	42a0      	cmp	r0, r4
   10600:	d10d      	bne.n	1061e <radio_rx_fc_set+0x4e>
   10602:	4291      	cmp	r1, r2
   10604:	d00b      	beq.n	1061e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10606:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   1060a:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1060e:	42a0      	cmp	r0, r4
   10610:	d005      	beq.n	1061e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10612:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10616:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10618:	bf08      	it	eq
   1061a:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   1061e:	2000      	movs	r0, #0
   10620:	bc30      	pop	{r4, r5}
   10622:	4770      	bx	lr
   10624:	200008e8 	.word	0x200008e8

00010628 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10628:	4801      	ldr	r0, [pc, #4]	; (10630 <ll_tx_mem_acquire+0x8>)
   1062a:	f7f6 be36 	b.w	729a <mem_acquire>
   1062e:	bf00      	nop
   10630:	20000a4c 	.word	0x20000a4c

00010634 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10634:	4901      	ldr	r1, [pc, #4]	; (1063c <ll_tx_mem_release+0x8>)
   10636:	f7f6 be4a 	b.w	72ce <mem_release>
   1063a:	bf00      	nop
   1063c:	20000a4c 	.word	0x20000a4c

00010640 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10640:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10642:	4d2e      	ldr	r5, [pc, #184]	; (106fc <ll_tx_mem_enqueue+0xbc>)
   10644:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10648:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   1064c:	3401      	adds	r4, #1
{
   1064e:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10650:	b2e4      	uxtb	r4, r4
{
   10652:	4607      	mov	r7, r0
   10654:	460e      	mov	r6, r1
		last = 0;
   10656:	42a3      	cmp	r3, r4
   10658:	bf08      	it	eq
   1065a:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   1065c:	f7f9 fd16 	bl	a08c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10660:	2800      	cmp	r0, #0
   10662:	d049      	beq.n	106f8 <ll_tx_mem_enqueue+0xb8>
   10664:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10668:	429c      	cmp	r4, r3
   1066a:	d045      	beq.n	106f8 <ll_tx_mem_enqueue+0xb8>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1066c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10670:	7972      	ldrb	r2, [r6, #5]
   10672:	3b07      	subs	r3, #7
   10674:	429a      	cmp	r2, r3
   10676:	d90a      	bls.n	1068e <ll_tx_mem_enqueue+0x4e>
   10678:	4a21      	ldr	r2, [pc, #132]	; (10700 <ll_tx_mem_enqueue+0xc0>)
   1067a:	4922      	ldr	r1, [pc, #136]	; (10704 <ll_tx_mem_enqueue+0xc4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1067c:	2003      	movs	r0, #3
   1067e:	f7f1 fca9 	bl	1fd4 <bt_log>
   10682:	4040      	eors	r0, r0
   10684:	f380 8811 	msr	BASEPRI, r0
   10688:	f04f 0004 	mov.w	r0, #4
   1068c:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1068e:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10692:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10696:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1069a:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   1069e:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   106a0:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   106a4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   106a8:	2b00      	cmp	r3, #0
   106aa:	db02      	blt.n	106b2 <ll_tx_mem_enqueue+0x72>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   106ac:	2000      	movs	r0, #0
}
   106ae:	b009      	add	sp, #36	; 0x24
   106b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   106b2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   106b4:	2b00      	cmp	r3, #0
   106b6:	d0f9      	beq.n	106ac <ll_tx_mem_enqueue+0x6c>
   106b8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   106bc:	f012 0302 	ands.w	r3, r2, #2
   106c0:	d1f4      	bne.n	106ac <ll_tx_mem_enqueue+0x6c>
		conn->slave.latency_cancel = 1;
   106c2:	f042 0202 	orr.w	r2, r2, #2
   106c6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   106ca:	f890 2020 	ldrb.w	r2, [r0, #32]
   106ce:	490e      	ldr	r1, [pc, #56]	; (10708 <ll_tx_mem_enqueue+0xc8>)
   106d0:	9105      	str	r1, [sp, #20]
   106d2:	3207      	adds	r2, #7
   106d4:	2101      	movs	r1, #1
   106d6:	9006      	str	r0, [sp, #24]
   106d8:	9304      	str	r3, [sp, #16]
   106da:	9103      	str	r1, [sp, #12]
   106dc:	9302      	str	r3, [sp, #8]
   106de:	9301      	str	r3, [sp, #4]
   106e0:	9300      	str	r3, [sp, #0]
   106e2:	4618      	mov	r0, r3
   106e4:	b2d2      	uxtb	r2, r2
   106e6:	2103      	movs	r1, #3
   106e8:	f7f7 fca6 	bl	8038 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   106ec:	f030 0302 	bics.w	r3, r0, #2
   106f0:	d0dc      	beq.n	106ac <ll_tx_mem_enqueue+0x6c>
   106f2:	4a03      	ldr	r2, [pc, #12]	; (10700 <ll_tx_mem_enqueue+0xc0>)
   106f4:	4905      	ldr	r1, [pc, #20]	; (1070c <ll_tx_mem_enqueue+0xcc>)
   106f6:	e7c1      	b.n	1067c <ll_tx_mem_enqueue+0x3c>
		return 1;
   106f8:	2001      	movs	r0, #1
   106fa:	e7d8      	b.n	106ae <ll_tx_mem_enqueue+0x6e>
   106fc:	200008e8 	.word	0x200008e8
   10700:	00016a35 	.word	0x00016a35
   10704:	00016f49 	.word	0x00016f49
   10708:	0000aad1 	.word	0x0000aad1
   1070c:	00016a61 	.word	0x00016a61

00010710 <ll_enc_req_send>:
{
   10710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10714:	4607      	mov	r7, r0
   10716:	4688      	mov	r8, r1
   10718:	4616      	mov	r6, r2
   1071a:	4699      	mov	r9, r3
	conn = connection_get(handle);
   1071c:	f7f9 fcb6 	bl	a08c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10720:	4605      	mov	r5, r0
   10722:	b910      	cbnz	r0, 1072a <ll_enc_req_send+0x1a>
			return 1;
   10724:	2001      	movs	r0, #1
   10726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1072a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1072e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10732:	429a      	cmp	r2, r3
   10734:	d1f6      	bne.n	10724 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   10736:	f7ff ff77 	bl	10628 <ll_tx_mem_acquire>
	if (node_tx) {
   1073a:	4604      	mov	r4, r0
   1073c:	2800      	cmp	r0, #0
   1073e:	d0f1      	beq.n	10724 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10740:	2210      	movs	r2, #16
   10742:	4649      	mov	r1, r9
   10744:	f105 0084 	add.w	r0, r5, #132	; 0x84
   10748:	f7f1 fa7d 	bl	1c46 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   1074c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10750:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10754:	d124      	bne.n	107a0 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10756:	7923      	ldrb	r3, [r4, #4]
   10758:	f043 0303 	orr.w	r3, r3, #3
   1075c:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1075e:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10760:	2208      	movs	r2, #8
			pdu_data_tx->len =
   10762:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10764:	2303      	movs	r3, #3
   10766:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10768:	4641      	mov	r1, r8
   1076a:	18a0      	adds	r0, r4, r2
   1076c:	f7f1 fa6b 	bl	1c46 <memcpy>
			enc_req->ediv[0] = ediv[0];
   10770:	7833      	ldrb	r3, [r6, #0]
   10772:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10774:	7873      	ldrb	r3, [r6, #1]
   10776:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   10778:	2108      	movs	r1, #8
   1077a:	f104 0012 	add.w	r0, r4, #18
   1077e:	f7f7 fdb9 	bl	82f4 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   10782:	2104      	movs	r1, #4
   10784:	f104 001a 	add.w	r0, r4, #26
   10788:	f7f7 fdb4 	bl	82f4 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   1078c:	4621      	mov	r1, r4
   1078e:	4638      	mov	r0, r7
   10790:	f7ff ff56 	bl	10640 <ll_tx_mem_enqueue>
   10794:	2601      	movs	r6, #1
   10796:	b1d0      	cbz	r0, 107ce <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   10798:	4620      	mov	r0, r4
   1079a:	f7ff ff4b 	bl	10634 <ll_tx_mem_release>
   1079e:	e7c1      	b.n	10724 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   107a0:	2b30      	cmp	r3, #48	; 0x30
   107a2:	d1f9      	bne.n	10798 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   107a4:	2208      	movs	r2, #8
   107a6:	4641      	mov	r1, r8
   107a8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   107ac:	f7f1 fa4b 	bl	1c46 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   107b0:	7833      	ldrb	r3, [r6, #0]
   107b2:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   107b6:	7873      	ldrb	r3, [r6, #1]
   107b8:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   107bc:	7923      	ldrb	r3, [r4, #4]
   107be:	f043 0303 	orr.w	r3, r3, #3
   107c2:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   107c4:	2301      	movs	r3, #1
   107c6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   107c8:	230a      	movs	r3, #10
   107ca:	71e3      	strb	r3, [r4, #7]
   107cc:	e7de      	b.n	1078c <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   107ce:	2303      	movs	r3, #3
   107d0:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   107d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   107d8:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   107dc:	3301      	adds	r3, #1
   107de:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   107e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000107e8 <radio_scan_enable>:
{
   107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   107ec:	4c68      	ldr	r4, [pc, #416]	; (10990 <radio_scan_enable+0x1a8>)
   107ee:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   107f2:	b08e      	sub	sp, #56	; 0x38
   107f4:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   107f6:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   107fa:	f04f 0302 	mov.w	r3, #2
{
   107fe:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10800:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10802:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10804:	d003      	beq.n	1080e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10806:	200c      	movs	r0, #12
}
   10808:	b00e      	add	sp, #56	; 0x38
   1080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1080e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10812:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10816:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1081a:	0840      	lsrs	r0, r0, #1
   1081c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10820:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10824:	f360 0200 	bfi	r2, r0, #0, #1
   10828:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   1082c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10830:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10834:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10838:	2206      	movs	r2, #6
   1083a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   1083e:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10842:	4e54      	ldr	r6, [pc, #336]	; (10994 <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10844:	f7f1 f9ff 	bl	1c46 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10848:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1084c:	f04f 0991 	mov.w	r9, #145	; 0x91
   10850:	fba2 0106 	umull	r0, r1, r2, r6
   10854:	fb09 1102 	mla	r1, r9, r2, r1
   10858:	a34b      	add	r3, pc, #300	; (adr r3, 10988 <radio_scan_enable+0x1a0>)
   1085a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1085e:	f7ef fcd9 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10862:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10866:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   1086a:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1086e:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10872:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10876:	b2ba      	uxth	r2, r7
   10878:	fba2 6706 	umull	r6, r7, r2, r6
   1087c:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10880:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   10884:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   10886:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   1088a:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   1088e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   10892:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10896:	a33c      	add	r3, pc, #240	; (adr r3, 10988 <radio_scan_enable+0x1a0>)
   10898:	e9d3 2300 	ldrd	r2, r3, [r3]
   1089c:	4630      	mov	r0, r6
   1089e:	4639      	mov	r1, r7
   108a0:	f7ef fcb8 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   108a4:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   108a8:	459a      	cmp	sl, r3
   108aa:	bf94      	ite	ls
   108ac:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   108b0:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   108b4:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   108b8:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   108ba:	bf38      	it	cc
   108bc:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   108c0:	f7f7 fcd8 	bl	8274 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   108c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   108c8:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   108ca:	2b00      	cmp	r3, #0
   108cc:	d045      	beq.n	1095a <radio_scan_enable+0x172>
		us_offset = 0;
   108ce:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   108d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   108d2:	4931      	ldr	r1, [pc, #196]	; (10998 <radio_scan_enable+0x1b0>)
   108d4:	a32c      	add	r3, pc, #176	; (adr r3, 10988 <radio_scan_enable+0x1a0>)
   108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   108da:	fba0 0101 	umull	r0, r1, r0, r1
   108de:	f7ef fc99 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   108e2:	ab0b      	add	r3, sp, #44	; 0x2c
   108e4:	9308      	str	r3, [sp, #32]
   108e6:	4b2d      	ldr	r3, [pc, #180]	; (1099c <radio_scan_enable+0x1b4>)
   108e8:	9307      	str	r3, [sp, #28]
   108ea:	4b2d      	ldr	r3, [pc, #180]	; (109a0 <radio_scan_enable+0x1b8>)
   108ec:	9305      	str	r3, [sp, #20]
   108ee:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   108f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   108f6:	4443      	add	r3, r8
   108f8:	2500      	movs	r5, #0
   108fa:	4482      	add	sl, r0
   108fc:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   108fe:	4630      	mov	r0, r6
   10900:	a321      	add	r3, pc, #132	; (adr r3, 10988 <radio_scan_enable+0x1a0>)
   10902:	e9d3 2300 	ldrd	r2, r3, [r3]
   10906:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10908:	9506      	str	r5, [sp, #24]
   1090a:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   1090c:	f7ef fc82 	bl	214 <__aeabi_uldivmod>
   10910:	4610      	mov	r0, r2
   10912:	4619      	mov	r1, r3
   10914:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10918:	2300      	movs	r3, #0
   1091a:	f7ef fc7b 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1091e:	e88d 0220 	stmia.w	sp, {r5, r9}
   10922:	9002      	str	r0, [sp, #8]
   10924:	4653      	mov	r3, sl
   10926:	2206      	movs	r2, #6
   10928:	2103      	movs	r1, #3
   1092a:	4628      	mov	r0, r5
   1092c:	f7f7 fb34 	bl	7f98 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10930:	2802      	cmp	r0, #2
   10932:	d023      	beq.n	1097c <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10934:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10936:	2d00      	cmp	r5, #0
   10938:	f47f af65 	bne.w	10806 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   1093c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10940:	f043 0301 	orr.w	r3, r3, #1
   10944:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10948:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1094c:	2b00      	cmp	r3, #0
   1094e:	db02      	blt.n	10956 <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10950:	2002      	movs	r0, #2
   10952:	f000 fe13 	bl	1157c <ll_adv_scan_state_cb>
	return 0;
   10956:	4628      	mov	r0, r5
   10958:	e756      	b.n	10808 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1095a:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   1095e:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10960:	aa0d      	add	r2, sp, #52	; 0x34
   10962:	ab0c      	add	r3, sp, #48	; 0x30
   10964:	4441      	add	r1, r8
   10966:	2003      	movs	r0, #3
   10968:	f7f9 fefe 	bl	a768 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1096c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1096e:	2b00      	cmp	r3, #0
   10970:	d0ae      	beq.n	108d0 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10972:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10976:	e7ab      	b.n	108d0 <radio_scan_enable+0xe8>
			cpu_sleep();
   10978:	f7f9 f998 	bl	9cac <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1097c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1097e:	2b02      	cmp	r3, #2
   10980:	d0fa      	beq.n	10978 <radio_scan_enable+0x190>
   10982:	e7d7      	b.n	10934 <radio_scan_enable+0x14c>
   10984:	f3af 8000 	nop.w
   10988:	1afd498d 	.word	0x1afd498d
   1098c:	00000007 	.word	0x00000007
   10990:	200008e8 	.word	0x200008e8
   10994:	84e72a00 	.word	0x84e72a00
   10998:	3b9aca00 	.word	0x3b9aca00
   1099c:	00009cf1 	.word	0x00009cf1
   109a0:	0000b6bd 	.word	0x0000b6bd

000109a4 <radio_scan_disable>:
{
   109a4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   109a6:	2104      	movs	r1, #4
   109a8:	2006      	movs	r0, #6
   109aa:	f7f9 fb85 	bl	a0b8 <role_disable>
	if (!status) {
   109ae:	4605      	mov	r5, r0
   109b0:	b9e8      	cbnz	r0, 109ee <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   109b2:	4c10      	ldr	r4, [pc, #64]	; (109f4 <radio_scan_disable+0x50>)
   109b4:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   109b8:	f360 0200 	bfi	r2, r0, #0, #1
   109bc:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   109c0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   109c4:	2a00      	cmp	r2, #0
   109c6:	db01      	blt.n	109cc <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   109c8:	f000 fdd8 	bl	1157c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   109cc:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   109d0:	b15e      	cbz	r6, 109ea <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   109d2:	2300      	movs	r3, #0
   109d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   109d8:	4907      	ldr	r1, [pc, #28]	; (109f8 <radio_scan_disable+0x54>)
   109da:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   109de:	f7f6 fc76 	bl	72ce <mem_release>
			mem_release(conn, &_radio.conn_free);
   109e2:	4906      	ldr	r1, [pc, #24]	; (109fc <radio_scan_disable+0x58>)
   109e4:	4630      	mov	r0, r6
   109e6:	f7f6 fc72 	bl	72ce <mem_release>
}
   109ea:	4628      	mov	r0, r5
   109ec:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   109ee:	250c      	movs	r5, #12
   109f0:	e7fb      	b.n	109ea <radio_scan_disable+0x46>
   109f2:	bf00      	nop
   109f4:	200008e8 	.word	0x200008e8
   109f8:	20000a30 	.word	0x20000a30
   109fc:	200009f4 	.word	0x200009f4

00010a00 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10a00:	4b03      	ldr	r3, [pc, #12]	; (10a10 <ll_connect_disable+0x10>)
   10a02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10a06:	b10b      	cbz	r3, 10a0c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10a08:	f7ff bfcc 	b.w	109a4 <radio_scan_disable>
}
   10a0c:	200c      	movs	r0, #12
   10a0e:	4770      	bx	lr
   10a10:	200008e8 	.word	0x200008e8

00010a14 <ll_rx_dequeue>:
{
   10a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10a16:	4d3c      	ldr	r5, [pc, #240]	; (10b08 <ll_rx_dequeue+0xf4>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10a18:	aa02      	add	r2, sp, #8
   10a1a:	2300      	movs	r3, #0
   10a1c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10a20:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10a24:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10a28:	f7f6 fca0 	bl	736c <memq_dequeue>
   10a2c:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10a2e:	b950      	cbnz	r0, 10a46 <ll_rx_dequeue+0x32>
   10a30:	4a36      	ldr	r2, [pc, #216]	; (10b0c <ll_rx_dequeue+0xf8>)
   10a32:	4937      	ldr	r1, [pc, #220]	; (10b10 <ll_rx_dequeue+0xfc>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10a34:	2003      	movs	r0, #3
   10a36:	f7f1 facd 	bl	1fd4 <bt_log>
   10a3a:	4040      	eors	r0, r0
   10a3c:	f380 8811 	msr	BASEPRI, r0
   10a40:	f04f 0004 	mov.w	r0, #4
   10a44:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10a46:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10a4a:	f7f6 fc40 	bl	72ce <mem_release>
	switch (node_rx->hdr.type) {
   10a4e:	9a01      	ldr	r2, [sp, #4]
   10a50:	7911      	ldrb	r1, [r2, #4]
   10a52:	290c      	cmp	r1, #12
   10a54:	d807      	bhi.n	10a66 <ll_rx_dequeue+0x52>
   10a56:	2301      	movs	r3, #1
   10a58:	408b      	lsls	r3, r1
   10a5a:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10a5e:	4203      	tst	r3, r0
   10a60:	d104      	bne.n	10a6c <ll_rx_dequeue+0x58>
   10a62:	0618      	lsls	r0, r3, #24
   10a64:	d40f      	bmi.n	10a86 <ll_rx_dequeue+0x72>
		LL_ASSERT(0);
   10a66:	4a29      	ldr	r2, [pc, #164]	; (10b0c <ll_rx_dequeue+0xf8>)
   10a68:	492a      	ldr	r1, [pc, #168]	; (10b14 <ll_rx_dequeue+0x100>)
   10a6a:	e7e3      	b.n	10a34 <ll_rx_dequeue+0x20>
		LL_ASSERT(_radio.link_rx_data_quota <
   10a6c:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10a70:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10a74:	3801      	subs	r0, #1
   10a76:	4283      	cmp	r3, r0
   10a78:	db02      	blt.n	10a80 <ll_rx_dequeue+0x6c>
   10a7a:	4a24      	ldr	r2, [pc, #144]	; (10b0c <ll_rx_dequeue+0xf8>)
   10a7c:	4926      	ldr	r1, [pc, #152]	; (10b18 <ll_rx_dequeue+0x104>)
   10a7e:	e7d9      	b.n	10a34 <ll_rx_dequeue+0x20>
		_radio.link_rx_data_quota++;
   10a80:	3301      	adds	r3, #1
   10a82:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10a86:	2906      	cmp	r1, #6
   10a88:	d12c      	bne.n	10ae4 <ll_rx_dequeue+0xd0>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10a8a:	7ad3      	ldrb	r3, [r2, #11]
   10a8c:	2b3c      	cmp	r3, #60	; 0x3c
   10a8e:	d008      	beq.n	10aa2 <ll_rx_dequeue+0x8e>
   10a90:	7b12      	ldrb	r2, [r2, #12]
   10a92:	b992      	cbnz	r2, 10aba <ll_rx_dequeue+0xa6>
			LL_ASSERT(_radio.scanner.is_enabled);
   10a94:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10a98:	07d9      	lsls	r1, r3, #31
   10a9a:	d425      	bmi.n	10ae8 <ll_rx_dequeue+0xd4>
   10a9c:	4a1b      	ldr	r2, [pc, #108]	; (10b0c <ll_rx_dequeue+0xf8>)
   10a9e:	491f      	ldr	r1, [pc, #124]	; (10b1c <ll_rx_dequeue+0x108>)
   10aa0:	e7c8      	b.n	10a34 <ll_rx_dequeue+0x20>
				_radio.advertiser.conn = NULL;
   10aa2:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10aa4:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   10aa8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   10aac:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	db04      	blt.n	10abe <ll_rx_dequeue+0xaa>
   10ab4:	4a15      	ldr	r2, [pc, #84]	; (10b0c <ll_rx_dequeue+0xf8>)
   10ab6:	491a      	ldr	r1, [pc, #104]	; (10b20 <ll_rx_dequeue+0x10c>)
   10ab8:	e7bc      	b.n	10a34 <ll_rx_dequeue+0x20>
		struct connection *conn = NULL;
   10aba:	2500      	movs	r5, #0
   10abc:	e7f6      	b.n	10aac <ll_rx_dequeue+0x98>
			_radio.advertiser.is_enabled = 0;
   10abe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10ac2:	f36f 13c7 	bfc	r3, #7, #1
   10ac6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10aca:	b995      	cbnz	r5, 10af2 <ll_rx_dequeue+0xde>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10acc:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   10ad0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10ad4:	f000 0001 	and.w	r0, r0, #1
   10ad8:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10ada:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10ade:	d101      	bne.n	10ae4 <ll_rx_dequeue+0xd0>
			ll_adv_scan_state_cb(0);
   10ae0:	f000 fd4c 	bl	1157c <ll_adv_scan_state_cb>
}
   10ae4:	b003      	add	sp, #12
   10ae6:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   10ae8:	f362 0300 	bfi	r3, r2, #0, #1
   10aec:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   10af0:	e7ec      	b.n	10acc <ll_rx_dequeue+0xb8>
			mem_release(node_rx->hdr.onion.link,
   10af2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10af6:	490b      	ldr	r1, [pc, #44]	; (10b24 <ll_rx_dequeue+0x110>)
   10af8:	f7f6 fbe9 	bl	72ce <mem_release>
			mem_release(conn, &_radio.conn_free);
   10afc:	490a      	ldr	r1, [pc, #40]	; (10b28 <ll_rx_dequeue+0x114>)
   10afe:	4628      	mov	r0, r5
   10b00:	f7f6 fbe5 	bl	72ce <mem_release>
   10b04:	e7e2      	b.n	10acc <ll_rx_dequeue+0xb8>
   10b06:	bf00      	nop
   10b08:	200008e8 	.word	0x200008e8
   10b0c:	000169f9 	.word	0x000169f9
   10b10:	00016a47 	.word	0x00016a47
   10b14:	000153a4 	.word	0x000153a4
   10b18:	00016ace 	.word	0x00016ace
   10b1c:	00016f1a 	.word	0x00016f1a
   10b20:	00016ee8 	.word	0x00016ee8
   10b24:	20000a30 	.word	0x20000a30
   10b28:	200009f4 	.word	0x200009f4

00010b2c <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10b2c:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10b2e:	4c0b      	ldr	r4, [pc, #44]	; (10b5c <rtc0_nrf5_isr+0x30>)
   10b30:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10b34:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10b38:	b122      	cbz	r2, 10b44 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10b3a:	2000      	movs	r0, #0
   10b3c:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10b40:	f7f7 fa18 	bl	7f74 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10b44:	b12d      	cbz	r5, 10b52 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10b46:	2300      	movs	r3, #0
   10b48:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10b4c:	2001      	movs	r0, #1
   10b4e:	f7f7 fa11 	bl	7f74 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10b52:	2000      	movs	r0, #0
}
   10b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   10b58:	f7f6 bcb8 	b.w	74cc <mayfly_run>
   10b5c:	4000b000 	.word	0x4000b000

00010b60 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10b60:	2001      	movs	r0, #1
   10b62:	f7f6 bcb3 	b.w	74cc <mayfly_run>

00010b66 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10b66:	4668      	mov	r0, sp
   10b68:	f020 0107 	bic.w	r1, r0, #7
   10b6c:	468d      	mov	sp, r1
   10b6e:	b501      	push	{r0, lr}
	isr_radio();
   10b70:	f001 f83a 	bl	11be8 <isr_radio>
	ISR_DIRECT_PM();
   10b74:	f7f0 fed0 	bl	1918 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10b78:	f7f0 fcba 	bl	14f0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10b7c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10b80:	4685      	mov	sp, r0
   10b82:	4770      	bx	lr

00010b84 <radio_active_callback>:
{
   10b84:	4770      	bx	lr
	...

00010b88 <radio_event_callback>:
	k_sem_give(sem_recv);
   10b88:	4b01      	ldr	r3, [pc, #4]	; (10b90 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10b8a:	6818      	ldr	r0, [r3, #0]
   10b8c:	f002 be1b 	b.w	137c6 <_impl_k_sem_give>
   10b90:	20001218 	.word	0x20001218

00010b94 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   10b94:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   10b96:	4b3d      	ldr	r3, [pc, #244]	; (10c8c <ll_init+0xf8>)
{
   10b98:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   10b9a:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10b9c:	483c      	ldr	r0, [pc, #240]	; (10c90 <ll_init+0xfc>)
   10b9e:	f002 f92b 	bl	12df8 <device_get_binding>
	if (!clk_k32) {
   10ba2:	b918      	cbnz	r0, 10bac <ll_init+0x18>
		return -ENODEV;
   10ba4:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   10ba8:	b007      	add	sp, #28
   10baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
   10bac:	6843      	ldr	r3, [r0, #4]
   10bae:	2101      	movs	r1, #1
   10bb0:	681b      	ldr	r3, [r3, #0]
   10bb2:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   10bb4:	4837      	ldr	r0, [pc, #220]	; (10c94 <ll_init+0x100>)
   10bb6:	f002 f91f 	bl	12df8 <device_get_binding>
	if (!entropy) {
   10bba:	4604      	mov	r4, r0
   10bbc:	2800      	cmp	r0, #0
   10bbe:	d0f1      	beq.n	10ba4 <ll_init+0x10>
	cntr_init();
   10bc0:	f000 ff02 	bl	119c8 <cntr_init>
	mayfly_init();
   10bc4:	f7f6 fbe2 	bl	738c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10bc8:	4b33      	ldr	r3, [pc, #204]	; (10c98 <ll_init+0x104>)
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10bca:	4a34      	ldr	r2, [pc, #208]	; (10c9c <ll_init+0x108>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10bcc:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10bce:	2603      	movs	r6, #3
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10bd0:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10bd2:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10bd4:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10bd6:	721e      	strb	r6, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10bd8:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10bda:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10bdc:	9205      	str	r2, [sp, #20]
   10bde:	4a30      	ldr	r2, [pc, #192]	; (10ca0 <ll_init+0x10c>)
   10be0:	9204      	str	r2, [sp, #16]
   10be2:	4a30      	ldr	r2, [pc, #192]	; (10ca4 <ll_init+0x110>)
   10be4:	9203      	str	r2, [sp, #12]
   10be6:	4a30      	ldr	r2, [pc, #192]	; (10ca8 <ll_init+0x114>)
   10be8:	9202      	str	r2, [sp, #8]
   10bea:	220d      	movs	r2, #13
   10bec:	9201      	str	r2, [sp, #4]
   10bee:	9300      	str	r3, [sp, #0]
   10bf0:	4a2e      	ldr	r2, [pc, #184]	; (10cac <ll_init+0x118>)
   10bf2:	2304      	movs	r3, #4
   10bf4:	f7f7 f986 	bl	7f04 <ticker_init>
	LL_ASSERT(!err);
   10bf8:	b150      	cbz	r0, 10c10 <ll_init+0x7c>
   10bfa:	4a2d      	ldr	r2, [pc, #180]	; (10cb0 <ll_init+0x11c>)
   10bfc:	492d      	ldr	r1, [pc, #180]	; (10cb4 <ll_init+0x120>)
   10bfe:	4630      	mov	r0, r6
   10c00:	f7f1 f9e8 	bl	1fd4 <bt_log>
   10c04:	4040      	eors	r0, r0
   10c06:	f380 8811 	msr	BASEPRI, r0
   10c0a:	f04f 0004 	mov.w	r0, #4
   10c0e:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10c10:	4829      	ldr	r0, [pc, #164]	; (10cb8 <ll_init+0x124>)
   10c12:	f002 f8f1 	bl	12df8 <device_get_binding>
	if (!clk_m16) {
   10c16:	2800      	cmp	r0, #0
   10c18:	d0c4      	beq.n	10ba4 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10c1a:	4b28      	ldr	r3, [pc, #160]	; (10cbc <ll_init+0x128>)
   10c1c:	9304      	str	r3, [sp, #16]
   10c1e:	9501      	str	r5, [sp, #4]
   10c20:	231b      	movs	r3, #27
   10c22:	2501      	movs	r5, #1
   10c24:	f44f 7757 	mov.w	r7, #860	; 0x35c
   10c28:	9303      	str	r3, [sp, #12]
   10c2a:	9302      	str	r3, [sp, #8]
   10c2c:	4622      	mov	r2, r4
   10c2e:	9705      	str	r7, [sp, #20]
   10c30:	9500      	str	r5, [sp, #0]
   10c32:	462b      	mov	r3, r5
   10c34:	2107      	movs	r1, #7
   10c36:	f7fe ff91 	bl	fb5c <radio_init>
	if (err) {
   10c3a:	4604      	mov	r4, r0
   10c3c:	b148      	cbz	r0, 10c52 <ll_init+0xbe>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10c3e:	4603      	mov	r3, r0
   10c40:	9700      	str	r7, [sp, #0]
   10c42:	4630      	mov	r0, r6
   10c44:	4a1a      	ldr	r2, [pc, #104]	; (10cb0 <ll_init+0x11c>)
   10c46:	491e      	ldr	r1, [pc, #120]	; (10cc0 <ll_init+0x12c>)
   10c48:	f7f1 f9c4 	bl	1fd4 <bt_log>
		return -ENOMEM;
   10c4c:	f06f 000b 	mvn.w	r0, #11
   10c50:	e7aa      	b.n	10ba8 <ll_init+0x14>
	ll_filter_reset(true);
   10c52:	4628      	mov	r0, r5
   10c54:	f000 fe70 	bl	11938 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10c58:	4622      	mov	r2, r4
   10c5a:	4621      	mov	r1, r4
   10c5c:	4628      	mov	r0, r5
   10c5e:	f7f0 fe41 	bl	18e4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10c62:	4622      	mov	r2, r4
   10c64:	4621      	mov	r1, r4
   10c66:	200b      	movs	r0, #11
   10c68:	f7f0 fe3c 	bl	18e4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10c6c:	4622      	mov	r2, r4
   10c6e:	4621      	mov	r1, r4
   10c70:	2018      	movs	r0, #24
   10c72:	f7f0 fe37 	bl	18e4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10c76:	4628      	mov	r0, r5
   10c78:	f7f0 fe02 	bl	1880 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10c7c:	200b      	movs	r0, #11
   10c7e:	f7f0 fdff 	bl	1880 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10c82:	2018      	movs	r0, #24
   10c84:	f7f0 fdfc 	bl	1880 <_arch_irq_enable>
	return 0;
   10c88:	4620      	mov	r0, r4
   10c8a:	e78d      	b.n	10ba8 <ll_init+0x14>
   10c8c:	20001218 	.word	0x20001218
   10c90:	0001440c 	.word	0x0001440c
   10c94:	000143e1 	.word	0x000143e1
   10c98:	200011f8 	.word	0x200011f8
   10c9c:	00012505 	.word	0x00012505
   10ca0:	00012479 	.word	0x00012479
   10ca4:	0001243d 	.word	0x0001243d
   10ca8:	20000f88 	.word	0x20000f88
   10cac:	20000e48 	.word	0x20000e48
   10cb0:	000174a8 	.word	0x000174a8
   10cb4:	000174b0 	.word	0x000174b0
   10cb8:	00014417 	.word	0x00014417
   10cbc:	20000aec 	.word	0x20000aec
   10cc0:	000174ca 	.word	0x000174ca

00010cc4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   10cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cc8:	4681      	mov	r9, r0
   10cca:	4688      	mov	r8, r1
   10ccc:	4617      	mov	r7, r2
   10cce:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   10cd0:	f7ff f828 	bl	fd24 <ll_scan_is_enabled>
   10cd4:	b988      	cbnz	r0, 10cfa <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   10cd6:	4d0a      	ldr	r5, [pc, #40]	; (10d00 <ll_scan_params_set+0x3c>)
   10cd8:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   10cda:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   10cde:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   10ce2:	4622      	mov	r2, r4
   10ce4:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   10ce8:	4613      	mov	r3, r2
   10cea:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   10cee:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   10cf0:	f362 1387 	bfi	r3, r2, #6, #2
   10cf4:	712b      	strb	r3, [r5, #4]

	return 0;
   10cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10cfa:	200c      	movs	r0, #12
}
   10cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d00:	2000121c 	.word	0x2000121c

00010d04 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   10d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d06:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   10d08:	b920      	cbnz	r0, 10d14 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   10d0a:	b005      	add	sp, #20
   10d0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   10d10:	f7ff be48 	b.w	109a4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   10d14:	f7ff f806 	bl	fd24 <ll_scan_is_enabled>
   10d18:	4606      	mov	r6, r0
   10d1a:	bb40      	cbnz	r0, 10d6e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   10d1c:	4c15      	ldr	r4, [pc, #84]	; (10d74 <ll_scan_enable+0x70>)
   10d1e:	7920      	ldrb	r0, [r4, #4]
   10d20:	0980      	lsrs	r0, r0, #6
   10d22:	f000 fa25 	bl	11170 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   10d26:	7923      	ldrb	r3, [r4, #4]
   10d28:	f013 0501 	ands.w	r5, r3, #1
   10d2c:	d006      	beq.n	10d3c <ll_scan_enable+0x38>
   10d2e:	f013 0520 	ands.w	r5, r3, #32
   10d32:	d003      	beq.n	10d3c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   10d34:	4630      	mov	r0, r6
   10d36:	f000 fb83 	bl	11440 <ll_rl_rpa_update>
		rpa_gen = 1;
   10d3a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10d3c:	7926      	ldrb	r6, [r4, #4]
   10d3e:	f006 070f 	and.w	r7, r6, #15
   10d42:	f3c6 1600 	ubfx	r6, r6, #4, #1
   10d46:	2100      	movs	r1, #0
   10d48:	4630      	mov	r0, r6
   10d4a:	f7f7 fa99 	bl	8280 <ll_addr_get>
   10d4e:	22ff      	movs	r2, #255	; 0xff
   10d50:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   10d52:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10d54:	8823      	ldrh	r3, [r4, #0]
   10d56:	9502      	str	r5, [sp, #8]
   10d58:	0992      	lsrs	r2, r2, #6
   10d5a:	9201      	str	r2, [sp, #4]
   10d5c:	8862      	ldrh	r2, [r4, #2]
   10d5e:	9200      	str	r2, [sp, #0]
   10d60:	4631      	mov	r1, r6
   10d62:	4602      	mov	r2, r0
   10d64:	4638      	mov	r0, r7
   10d66:	f7ff fd3f 	bl	107e8 <radio_scan_enable>
}
   10d6a:	b005      	add	sp, #20
   10d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   10d6e:	2000      	movs	r0, #0
   10d70:	e7fb      	b.n	10d6a <ll_scan_enable+0x66>
   10d72:	bf00      	nop
   10d74:	2000121c 	.word	0x2000121c

00010d78 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   10d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d7c:	b085      	sub	sp, #20
   10d7e:	461e      	mov	r6, r3
   10d80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   10d84:	9303      	str	r3, [sp, #12]
   10d86:	4680      	mov	r8, r0
   10d88:	4689      	mov	r9, r1
   10d8a:	4615      	mov	r5, r2
   10d8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10d8e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   10d92:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   10d96:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   10d9a:	f7fe ffc3 	bl	fd24 <ll_scan_is_enabled>
   10d9e:	9b03      	ldr	r3, [sp, #12]
   10da0:	bba0      	cbnz	r0, 10e0c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   10da2:	9300      	str	r3, [sp, #0]
   10da4:	4652      	mov	r2, sl
   10da6:	465b      	mov	r3, fp
   10da8:	4639      	mov	r1, r7
   10daa:	4630      	mov	r0, r6
   10dac:	f7fe ffe0 	bl	fd70 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   10db0:	bb68      	cbnz	r0, 10e0e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   10db2:	4628      	mov	r0, r5
   10db4:	f000 f9dc 	bl	11170 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   10db8:	b1dd      	cbz	r5, 10df2 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   10dba:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10dbc:	1ea3      	subs	r3, r4, #2
   10dbe:	2b01      	cmp	r3, #1
   10dc0:	d822      	bhi.n	10e08 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   10dc2:	2000      	movs	r0, #0
   10dc4:	f000 fb3c 	bl	11440 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   10dc8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   10dcc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   10dce:	2100      	movs	r1, #0
   10dd0:	4620      	mov	r0, r4
   10dd2:	f7f7 fa55 	bl	8280 <ll_addr_get>
   10dd6:	4643      	mov	r3, r8
   10dd8:	4602      	mov	r2, r0
   10dda:	4621      	mov	r1, r4
   10ddc:	2000      	movs	r0, #0
   10dde:	9711      	str	r7, [sp, #68]	; 0x44
   10de0:	9610      	str	r6, [sp, #64]	; 0x40
   10de2:	950f      	str	r5, [sp, #60]	; 0x3c
   10de4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   10de8:	b005      	add	sp, #20
   10dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   10dee:	f7ff bcfb 	b.w	107e8 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   10df2:	f000 fb1d 	bl	11430 <ctrl_rl_enabled>
   10df6:	2800      	cmp	r0, #0
   10df8:	d0df      	beq.n	10dba <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   10dfa:	4639      	mov	r1, r7
   10dfc:	462a      	mov	r2, r5
   10dfe:	4630      	mov	r0, r6
   10e00:	f000 f9d8 	bl	111b4 <ll_rl_find>
   10e04:	4607      	mov	r7, r0
   10e06:	e7d9      	b.n	10dbc <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   10e08:	2600      	movs	r6, #0
   10e0a:	e7e0      	b.n	10dce <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10e0c:	200c      	movs	r0, #12
}
   10e0e:	b005      	add	sp, #20
   10e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010e14 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   10e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e18:	4688      	mov	r8, r1
	int i;

	if (free) {
   10e1a:	4615      	mov	r5, r2
   10e1c:	b10a      	cbz	r2, 10e22 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10e1e:	23ff      	movs	r3, #255	; 0xff
   10e20:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10e22:	4e14      	ldr	r6, [pc, #80]	; (10e74 <wl_find+0x60>)
{
   10e24:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10e26:	f000 0701 	and.w	r7, r0, #1
   10e2a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10e2e:	07da      	lsls	r2, r3, #31
   10e30:	d51d      	bpl.n	10e6e <wl_find+0x5a>
   10e32:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10e36:	42bb      	cmp	r3, r7
   10e38:	d113      	bne.n	10e62 <wl_find+0x4e>
   10e3a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   10e3e:	2206      	movs	r2, #6
   10e40:	4641      	mov	r1, r8
   10e42:	3002      	adds	r0, #2
   10e44:	f7f0 feea 	bl	1c1c <memcmp>
   10e48:	b910      	cbnz	r0, 10e50 <wl_find+0x3c>
			return i;
   10e4a:	b2e0      	uxtb	r0, r4
   10e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10e50:	b13d      	cbz	r5, 10e62 <wl_find+0x4e>
   10e52:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10e56:	07db      	lsls	r3, r3, #31
   10e58:	d403      	bmi.n	10e62 <wl_find+0x4e>
   10e5a:	782b      	ldrb	r3, [r5, #0]
   10e5c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   10e5e:	bf08      	it	eq
   10e60:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   10e62:	3401      	adds	r4, #1
   10e64:	2c08      	cmp	r4, #8
   10e66:	d1e0      	bne.n	10e2a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   10e68:	20ff      	movs	r0, #255	; 0xff
   10e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   10e6e:	2d00      	cmp	r5, #0
   10e70:	d1f3      	bne.n	10e5a <wl_find+0x46>
   10e72:	e7f6      	b.n	10e62 <wl_find+0x4e>
   10e74:	2000144f 	.word	0x2000144f

00010e78 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   10e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e7c:	4d1a      	ldr	r5, [pc, #104]	; (10ee8 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10e7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10ef4 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   10e82:	1eae      	subs	r6, r5, #2
{
   10e84:	2400      	movs	r4, #0
   10e86:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   10e88:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10e8c:	07d9      	lsls	r1, r3, #31
   10e8e:	d524      	bpl.n	10eda <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10e90:	f898 3000 	ldrb.w	r3, [r8]
   10e94:	b15b      	cbz	r3, 10eae <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   10e96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10e9a:	2a07      	cmp	r2, #7
   10e9c:	d807      	bhi.n	10eae <filter_wl_update+0x36>
   10e9e:	2328      	movs	r3, #40	; 0x28
   10ea0:	4353      	muls	r3, r2
   10ea2:	4a12      	ldr	r2, [pc, #72]	; (10eec <filter_wl_update+0x74>)
   10ea4:	5cd3      	ldrb	r3, [r2, r3]
   10ea6:	075a      	lsls	r2, r3, #29
   10ea8:	d501      	bpl.n	10eae <filter_wl_update+0x36>
   10eaa:	06db      	lsls	r3, r3, #27
   10eac:	d515      	bpl.n	10eda <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   10eae:	4810      	ldr	r0, [pc, #64]	; (10ef0 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10eb0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   10eb4:	2201      	movs	r2, #1
   10eb6:	fa02 f104 	lsl.w	r1, r2, r4
   10eba:	7802      	ldrb	r2, [r0, #0]
   10ebc:	430a      	orrs	r2, r1
   10ebe:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   10ec0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10ec4:	7842      	ldrb	r2, [r0, #1]
   10ec6:	40a3      	lsls	r3, r4
   10ec8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10eca:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10ecc:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10ece:	fb02 0004 	mla	r0, r2, r4, r0
   10ed2:	4629      	mov	r1, r5
   10ed4:	3002      	adds	r0, #2
   10ed6:	f7f0 feb6 	bl	1c46 <memcpy>
   10eda:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   10edc:	2c08      	cmp	r4, #8
   10ede:	f105 0508 	add.w	r5, r5, #8
   10ee2:	d1d1      	bne.n	10e88 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   10ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ee8:	20001451 	.word	0x20001451
   10eec:	200012dc 	.word	0x200012dc
   10ef0:	2000148f 	.word	0x2000148f
   10ef4:	2000141c 	.word	0x2000141c

00010ef8 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   10ef8:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   10efa:	f7fe feff 	bl	fcfc <ll_adv_is_enabled>
   10efe:	b928      	cbnz	r0, 10f0c <rl_access_check.constprop.1+0x14>
   10f00:	f7fe ff10 	bl	fd24 <ll_scan_is_enabled>
   10f04:	fab0 f080 	clz	r0, r0
   10f08:	0940      	lsrs	r0, r0, #5
   10f0a:	bd08      	pop	{r3, pc}
   10f0c:	2000      	movs	r0, #0
}
   10f0e:	bd08      	pop	{r3, pc}

00010f10 <filter_rl_update>:
{
   10f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   10f12:	4e10      	ldr	r6, [pc, #64]	; (10f54 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   10f14:	4d10      	ldr	r5, [pc, #64]	; (10f58 <filter_rl_update+0x48>)
{
   10f16:	2400      	movs	r4, #0
		if (rl[i].taken) {
   10f18:	2728      	movs	r7, #40	; 0x28
   10f1a:	fb07 f104 	mul.w	r1, r7, r4
   10f1e:	5c73      	ldrb	r3, [r6, r1]
   10f20:	07da      	lsls	r2, r3, #31
   10f22:	d513      	bpl.n	10f4c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   10f24:	2201      	movs	r2, #1
   10f26:	fa02 f004 	lsl.w	r0, r2, r4
   10f2a:	782a      	ldrb	r2, [r5, #0]
   10f2c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10f2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   10f32:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10f34:	786a      	ldrb	r2, [r5, #1]
   10f36:	40a3      	lsls	r3, r4
   10f38:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10f3a:	2206      	movs	r2, #6
   10f3c:	3101      	adds	r1, #1
   10f3e:	fb02 5004 	mla	r0, r2, r4, r5
   10f42:	4431      	add	r1, r6
   10f44:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10f46:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10f48:	f7f0 fe7d 	bl	1c46 <memcpy>
   10f4c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10f4e:	2c08      	cmp	r4, #8
   10f50:	d1e3      	bne.n	10f1a <filter_rl_update+0xa>
}
   10f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f54:	200012dc 	.word	0x200012dc
   10f58:	2000141d 	.word	0x2000141d

00010f5c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   10f5c:	2807      	cmp	r0, #7
   10f5e:	d80c      	bhi.n	10f7a <ctrl_lrpa_get+0x1e>
   10f60:	2328      	movs	r3, #40	; 0x28
   10f62:	4358      	muls	r0, r3
   10f64:	4a06      	ldr	r2, [pc, #24]	; (10f80 <ctrl_lrpa_get+0x24>)
   10f66:	5c13      	ldrb	r3, [r2, r0]
   10f68:	1811      	adds	r1, r2, r0
   10f6a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   10f6e:	b128      	cbz	r0, 10f7c <ctrl_lrpa_get+0x20>
   10f70:	f3c3 0040 	ubfx	r0, r3, #1, #1
   10f74:	b110      	cbz	r0, 10f7c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   10f76:	6a48      	ldr	r0, [r1, #36]	; 0x24
   10f78:	4770      	bx	lr
		return NULL;
   10f7a:	2000      	movs	r0, #0
}
   10f7c:	4770      	bx	lr
   10f7e:	bf00      	nop
   10f80:	200012dc 	.word	0x200012dc

00010f84 <ctrl_irks_get>:
	*count = peer_irk_count;
   10f84:	4b02      	ldr	r3, [pc, #8]	; (10f90 <ctrl_irks_get+0xc>)
   10f86:	781b      	ldrb	r3, [r3, #0]
   10f88:	7003      	strb	r3, [r0, #0]
}
   10f8a:	4802      	ldr	r0, [pc, #8]	; (10f94 <ctrl_irks_get+0x10>)
   10f8c:	4770      	bx	lr
   10f8e:	bf00      	nop
   10f90:	20001252 	.word	0x20001252
   10f94:	2000125b 	.word	0x2000125b

00010f98 <ctrl_rl_idx>:
{
   10f98:	b508      	push	{r3, lr}
	if (whitelist) {
   10f9a:	b1c8      	cbz	r0, 10fd0 <ctrl_rl_idx+0x38>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   10f9c:	2907      	cmp	r1, #7
   10f9e:	d90a      	bls.n	10fb6 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   10fa0:	4a12      	ldr	r2, [pc, #72]	; (10fec <ctrl_rl_idx+0x54>)
   10fa2:	4913      	ldr	r1, [pc, #76]	; (10ff0 <ctrl_rl_idx+0x58>)
   10fa4:	2003      	movs	r0, #3
   10fa6:	f7f1 f815 	bl	1fd4 <bt_log>
   10faa:	4040      	eors	r0, r0
   10fac:	f380 8811 	msr	BASEPRI, r0
   10fb0:	f04f 0004 	mov.w	r0, #4
   10fb4:	df02      	svc	2
   10fb6:	4b0f      	ldr	r3, [pc, #60]	; (10ff4 <ctrl_rl_idx+0x5c>)
   10fb8:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   10fbc:	07d2      	lsls	r2, r2, #31
   10fbe:	d402      	bmi.n	10fc6 <ctrl_rl_idx+0x2e>
   10fc0:	4a0a      	ldr	r2, [pc, #40]	; (10fec <ctrl_rl_idx+0x54>)
   10fc2:	490d      	ldr	r1, [pc, #52]	; (10ff8 <ctrl_rl_idx+0x60>)
   10fc4:	e7ee      	b.n	10fa4 <ctrl_rl_idx+0xc>
		i = wl[devmatch_id].rl_idx;
   10fc6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10fca:	7849      	ldrb	r1, [r1, #1]
}
   10fcc:	4608      	mov	r0, r1
   10fce:	bd08      	pop	{r3, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   10fd0:	2907      	cmp	r1, #7
   10fd2:	d902      	bls.n	10fda <ctrl_rl_idx+0x42>
   10fd4:	4a05      	ldr	r2, [pc, #20]	; (10fec <ctrl_rl_idx+0x54>)
   10fd6:	4909      	ldr	r1, [pc, #36]	; (10ffc <ctrl_rl_idx+0x64>)
   10fd8:	e7e4      	b.n	10fa4 <ctrl_rl_idx+0xc>
		LL_ASSERT(rl[i].taken);
   10fda:	2328      	movs	r3, #40	; 0x28
   10fdc:	434b      	muls	r3, r1
   10fde:	4a08      	ldr	r2, [pc, #32]	; (11000 <ctrl_rl_idx+0x68>)
   10fe0:	5cd3      	ldrb	r3, [r2, r3]
   10fe2:	07db      	lsls	r3, r3, #31
   10fe4:	d4f2      	bmi.n	10fcc <ctrl_rl_idx+0x34>
   10fe6:	4a01      	ldr	r2, [pc, #4]	; (10fec <ctrl_rl_idx+0x54>)
   10fe8:	4906      	ldr	r1, [pc, #24]	; (11004 <ctrl_rl_idx+0x6c>)
   10fea:	e7db      	b.n	10fa4 <ctrl_rl_idx+0xc>
   10fec:	000174f3 	.word	0x000174f3
   10ff0:	00017581 	.word	0x00017581
   10ff4:	2000144f 	.word	0x2000144f
   10ff8:	00017642 	.word	0x00017642
   10ffc:	0001766d 	.word	0x0001766d
   11000:	200012dc 	.word	0x200012dc
   11004:	0001772e 	.word	0x0001772e

00011008 <ctrl_rl_irk_idx>:
{
   11008:	b508      	push	{r3, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1100a:	4b10      	ldr	r3, [pc, #64]	; (1104c <ctrl_rl_irk_idx+0x44>)
   1100c:	781b      	ldrb	r3, [r3, #0]
   1100e:	4283      	cmp	r3, r0
   11010:	d80a      	bhi.n	11028 <ctrl_rl_irk_idx+0x20>
   11012:	4a0f      	ldr	r2, [pc, #60]	; (11050 <ctrl_rl_irk_idx+0x48>)
   11014:	490f      	ldr	r1, [pc, #60]	; (11054 <ctrl_rl_irk_idx+0x4c>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11016:	2003      	movs	r0, #3
   11018:	f7f0 ffdc 	bl	1fd4 <bt_log>
   1101c:	4040      	eors	r0, r0
   1101e:	f380 8811 	msr	BASEPRI, r0
   11022:	f04f 0004 	mov.w	r0, #4
   11026:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11028:	4b0b      	ldr	r3, [pc, #44]	; (11058 <ctrl_rl_irk_idx+0x50>)
   1102a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1102c:	2807      	cmp	r0, #7
   1102e:	d902      	bls.n	11036 <ctrl_rl_irk_idx+0x2e>
   11030:	4a07      	ldr	r2, [pc, #28]	; (11050 <ctrl_rl_irk_idx+0x48>)
   11032:	490a      	ldr	r1, [pc, #40]	; (1105c <ctrl_rl_irk_idx+0x54>)
   11034:	e7ef      	b.n	11016 <ctrl_rl_irk_idx+0xe>
	LL_ASSERT(rl[i].taken);
   11036:	2328      	movs	r3, #40	; 0x28
   11038:	4343      	muls	r3, r0
   1103a:	4a09      	ldr	r2, [pc, #36]	; (11060 <ctrl_rl_irk_idx+0x58>)
   1103c:	5cd3      	ldrb	r3, [r2, r3]
   1103e:	07db      	lsls	r3, r3, #31
   11040:	d402      	bmi.n	11048 <ctrl_rl_irk_idx+0x40>
   11042:	4a03      	ldr	r2, [pc, #12]	; (11050 <ctrl_rl_irk_idx+0x48>)
   11044:	4907      	ldr	r1, [pc, #28]	; (11064 <ctrl_rl_irk_idx+0x5c>)
   11046:	e7e6      	b.n	11016 <ctrl_rl_irk_idx+0xe>
}
   11048:	bd08      	pop	{r3, pc}
   1104a:	bf00      	nop
   1104c:	20001252 	.word	0x20001252
   11050:	000174ff 	.word	0x000174ff
   11054:	0001774f 	.word	0x0001774f
   11058:	20001253 	.word	0x20001253
   1105c:	00017781 	.word	0x00017781
   11060:	200012dc 	.word	0x200012dc
   11064:	0001772e 	.word	0x0001772e

00011068 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11068:	2807      	cmp	r0, #7
{
   1106a:	b508      	push	{r3, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1106c:	d813      	bhi.n	11096 <ctrl_irk_whitelisted+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
   1106e:	2328      	movs	r3, #40	; 0x28
   11070:	4358      	muls	r0, r3
   11072:	4b0a      	ldr	r3, [pc, #40]	; (1109c <ctrl_irk_whitelisted+0x34>)
   11074:	5c18      	ldrb	r0, [r3, r0]
   11076:	07c3      	lsls	r3, r0, #31
   11078:	d40a      	bmi.n	11090 <ctrl_irk_whitelisted+0x28>
   1107a:	4a09      	ldr	r2, [pc, #36]	; (110a0 <ctrl_irk_whitelisted+0x38>)
   1107c:	4909      	ldr	r1, [pc, #36]	; (110a4 <ctrl_irk_whitelisted+0x3c>)
   1107e:	2003      	movs	r0, #3
   11080:	f7f0 ffa8 	bl	1fd4 <bt_log>
   11084:	4040      	eors	r0, r0
   11086:	f380 8811 	msr	BASEPRI, r0
   1108a:	f04f 0004 	mov.w	r0, #4
   1108e:	df02      	svc	2
	return rl[rl_idx].wl;
   11090:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11094:	bd08      	pop	{r3, pc}
		return false;
   11096:	2000      	movs	r0, #0
}
   11098:	bd08      	pop	{r3, pc}
   1109a:	bf00      	nop
   1109c:	200012dc 	.word	0x200012dc
   110a0:	0001750f 	.word	0x0001750f
   110a4:	0001755b 	.word	0x0001755b

000110a8 <ctrl_filter_get>:
}
   110a8:	4b03      	ldr	r3, [pc, #12]	; (110b8 <ctrl_filter_get+0x10>)
   110aa:	4a04      	ldr	r2, [pc, #16]	; (110bc <ctrl_filter_get+0x14>)
   110ac:	2800      	cmp	r0, #0
   110ae:	bf14      	ite	ne
   110b0:	4610      	movne	r0, r2
   110b2:	4618      	moveq	r0, r3
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop
   110b8:	2000141d 	.word	0x2000141d
   110bc:	2000148f 	.word	0x2000148f

000110c0 <ll_wl_size_get>:
   110c0:	2008      	movs	r0, #8
   110c2:	4770      	bx	lr

000110c4 <ll_wl_clear>:
{
   110c4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110c6:	f7fe fe21 	bl	fd0c <radio_adv_filter_pol_get>
   110ca:	4604      	mov	r4, r0
   110cc:	b110      	cbz	r0, 110d4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   110ce:	240c      	movs	r4, #12
}
   110d0:	4620      	mov	r0, r4
   110d2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   110d4:	f7fe fe3c 	bl	fd50 <radio_scan_filter_pol_get>
   110d8:	07c3      	lsls	r3, r0, #31
   110da:	d4f8      	bmi.n	110ce <ll_wl_clear+0xa>
		wl[i].taken = 0;
   110dc:	4a07      	ldr	r2, [pc, #28]	; (110fc <ll_wl_clear+0x38>)
   110de:	4623      	mov	r3, r4
   110e0:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   110e4:	f36f 0100 	bfc	r1, #0, #1
   110e8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   110ec:	3301      	adds	r3, #1
   110ee:	2b08      	cmp	r3, #8
   110f0:	d1f6      	bne.n	110e0 <ll_wl_clear+0x1c>
	wl_anon = 0;
   110f2:	4b03      	ldr	r3, [pc, #12]	; (11100 <ll_wl_clear+0x3c>)
   110f4:	2200      	movs	r2, #0
   110f6:	701a      	strb	r2, [r3, #0]
	return 0;
   110f8:	e7ea      	b.n	110d0 <ll_wl_clear+0xc>
   110fa:	bf00      	nop
   110fc:	2000144f 	.word	0x2000144f
   11100:	20001940 	.word	0x20001940

00011104 <ll_wl_remove>:
{
   11104:	b538      	push	{r3, r4, r5, lr}
   11106:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11108:	f7fe fe00 	bl	fd0c <radio_adv_filter_pol_get>
   1110c:	4604      	mov	r4, r0
   1110e:	b110      	cbz	r0, 11116 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11110:	240c      	movs	r4, #12
}
   11112:	4620      	mov	r0, r4
   11114:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11116:	f7fe fe1b 	bl	fd50 <radio_scan_filter_pol_get>
   1111a:	07c3      	lsls	r3, r0, #31
   1111c:	d4f8      	bmi.n	11110 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1111e:	7828      	ldrb	r0, [r5, #0]
   11120:	28ff      	cmp	r0, #255	; 0xff
   11122:	d102      	bne.n	1112a <ll_wl_remove+0x26>
		wl_anon = 0;
   11124:	4b0f      	ldr	r3, [pc, #60]	; (11164 <ll_wl_remove+0x60>)
   11126:	701c      	strb	r4, [r3, #0]
		return 0;
   11128:	e7f3      	b.n	11112 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1112a:	4622      	mov	r2, r4
   1112c:	1c69      	adds	r1, r5, #1
   1112e:	f7ff fe71 	bl	10e14 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11132:	2807      	cmp	r0, #7
   11134:	d813      	bhi.n	1115e <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11136:	4b0c      	ldr	r3, [pc, #48]	; (11168 <ll_wl_remove+0x64>)
   11138:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   1113c:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1113e:	2d07      	cmp	r5, #7
   11140:	d806      	bhi.n	11150 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11142:	2228      	movs	r2, #40	; 0x28
   11144:	4909      	ldr	r1, [pc, #36]	; (1116c <ll_wl_remove+0x68>)
   11146:	436a      	muls	r2, r5
   11148:	5c8d      	ldrb	r5, [r1, r2]
   1114a:	f364 1545 	bfi	r5, r4, #5, #1
   1114e:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   11150:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11154:	f36f 0200 	bfc	r2, #0, #1
   11158:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   1115c:	e7d9      	b.n	11112 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1115e:	2402      	movs	r4, #2
   11160:	e7d7      	b.n	11112 <ll_wl_remove+0xe>
   11162:	bf00      	nop
   11164:	20001940 	.word	0x20001940
   11168:	2000144f 	.word	0x2000144f
   1116c:	200012dc 	.word	0x200012dc

00011170 <ll_filters_scan_update>:
{
   11170:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   11172:	4b0d      	ldr	r3, [pc, #52]	; (111a8 <ll_filters_scan_update+0x38>)
   11174:	2200      	movs	r2, #0
   11176:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11178:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1117a:	07c3      	lsls	r3, r0, #31
   1117c:	d504      	bpl.n	11188 <ll_filters_scan_update+0x18>
   1117e:	f7fe fdc5 	bl	fd0c <radio_adv_filter_pol_get>
   11182:	b908      	cbnz	r0, 11188 <ll_filters_scan_update+0x18>
		filter_wl_update();
   11184:	f7ff fe78 	bl	10e78 <filter_wl_update>
	filter->enable_bitmask = 0;
   11188:	4b08      	ldr	r3, [pc, #32]	; (111ac <ll_filters_scan_update+0x3c>)
   1118a:	2200      	movs	r2, #0
   1118c:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1118e:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   11190:	4b07      	ldr	r3, [pc, #28]	; (111b0 <ll_filters_scan_update+0x40>)
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	b133      	cbz	r3, 111a4 <ll_filters_scan_update+0x34>
   11196:	f7fe fdb1 	bl	fcfc <ll_adv_is_enabled>
   1119a:	b918      	cbnz	r0, 111a4 <ll_filters_scan_update+0x34>
}
   1119c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   111a0:	f7ff beb6 	b.w	10f10 <filter_rl_update>
   111a4:	bd08      	pop	{r3, pc}
   111a6:	bf00      	nop
   111a8:	2000148f 	.word	0x2000148f
   111ac:	2000141d 	.word	0x2000141d
   111b0:	2000141c 	.word	0x2000141c

000111b4 <ll_rl_find>:
{
   111b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111b8:	468a      	mov	sl, r1
	if (free) {
   111ba:	4614      	mov	r4, r2
   111bc:	b10a      	cbz	r2, 111c2 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   111be:	23ff      	movs	r3, #255	; 0xff
   111c0:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   111c2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11218 <ll_rl_find+0x64>
{
   111c6:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   111c8:	f000 0901 	and.w	r9, r0, #1
   111cc:	2628      	movs	r6, #40	; 0x28
   111ce:	436e      	muls	r6, r5
   111d0:	b2ef      	uxtb	r7, r5
   111d2:	f818 3006 	ldrb.w	r3, [r8, r6]
   111d6:	07da      	lsls	r2, r3, #31
   111d8:	d51a      	bpl.n	11210 <ll_rl_find+0x5c>
   111da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   111de:	454b      	cmp	r3, r9
   111e0:	d10f      	bne.n	11202 <ll_rl_find+0x4e>
   111e2:	1c70      	adds	r0, r6, #1
   111e4:	2206      	movs	r2, #6
   111e6:	4651      	mov	r1, sl
   111e8:	4440      	add	r0, r8
   111ea:	f7f0 fd17 	bl	1c1c <memcmp>
   111ee:	b160      	cbz	r0, 1120a <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   111f0:	b13c      	cbz	r4, 11202 <ll_rl_find+0x4e>
   111f2:	f818 3006 	ldrb.w	r3, [r8, r6]
   111f6:	07db      	lsls	r3, r3, #31
   111f8:	d403      	bmi.n	11202 <ll_rl_find+0x4e>
   111fa:	7823      	ldrb	r3, [r4, #0]
   111fc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   111fe:	bf08      	it	eq
   11200:	7027      	strbeq	r7, [r4, #0]
   11202:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11204:	2d08      	cmp	r5, #8
   11206:	d1e1      	bne.n	111cc <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   11208:	27ff      	movs	r7, #255	; 0xff
}
   1120a:	4638      	mov	r0, r7
   1120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11210:	2c00      	cmp	r4, #0
   11212:	d1f2      	bne.n	111fa <ll_rl_find+0x46>
   11214:	e7f5      	b.n	11202 <ll_rl_find+0x4e>
   11216:	bf00      	nop
   11218:	200012dc 	.word	0x200012dc

0001121c <ll_wl_add>:
{
   1121c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11220:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11222:	f7fe fd73 	bl	fd0c <radio_adv_filter_pol_get>
   11226:	4605      	mov	r5, r0
   11228:	b120      	cbz	r0, 11234 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1122a:	250c      	movs	r5, #12
}
   1122c:	4628      	mov	r0, r5
   1122e:	b002      	add	sp, #8
   11230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11234:	f7fe fd8c 	bl	fd50 <radio_scan_filter_pol_get>
   11238:	07c3      	lsls	r3, r0, #31
   1123a:	d4f6      	bmi.n	1122a <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1123c:	7838      	ldrb	r0, [r7, #0]
   1123e:	28ff      	cmp	r0, #255	; 0xff
   11240:	d103      	bne.n	1124a <ll_wl_add+0x2e>
		wl_anon = 1;
   11242:	4b1f      	ldr	r3, [pc, #124]	; (112c0 <ll_wl_add+0xa4>)
   11244:	2201      	movs	r2, #1
   11246:	701a      	strb	r2, [r3, #0]
		return 0;
   11248:	e7f0      	b.n	1122c <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1124a:	f107 0801 	add.w	r8, r7, #1
   1124e:	f10d 0207 	add.w	r2, sp, #7
   11252:	4641      	mov	r1, r8
   11254:	f7ff fdde 	bl	10e14 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11258:	2807      	cmp	r0, #7
   1125a:	d92d      	bls.n	112b8 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1125c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   11260:	2e07      	cmp	r6, #7
   11262:	d82b      	bhi.n	112bc <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11264:	4c17      	ldr	r4, [pc, #92]	; (112c4 <ll_wl_add+0xa8>)
   11266:	783a      	ldrb	r2, [r7, #0]
   11268:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1126c:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   11270:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11274:	4641      	mov	r1, r8
   11276:	2206      	movs	r2, #6
   11278:	3002      	adds	r0, #2
   1127a:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1127e:	f7f0 fce2 	bl	1c46 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11282:	462a      	mov	r2, r5
   11284:	4641      	mov	r1, r8
   11286:	7838      	ldrb	r0, [r7, #0]
   11288:	f7ff ff94 	bl	111b4 <ll_rl_find>
   1128c:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1128e:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   11290:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   11292:	d80e      	bhi.n	112b2 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11294:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   11296:	2328      	movs	r3, #40	; 0x28
   11298:	4a0b      	ldr	r2, [pc, #44]	; (112c8 <ll_wl_add+0xac>)
   1129a:	4358      	muls	r0, r3
   1129c:	5c13      	ldrb	r3, [r2, r0]
   1129e:	f043 0320 	orr.w	r3, r3, #32
   112a2:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   112a4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   112a8:	f043 0301 	orr.w	r3, r3, #1
   112ac:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   112b0:	e7bc      	b.n	1122c <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   112b2:	22ff      	movs	r2, #255	; 0xff
   112b4:	705a      	strb	r2, [r3, #1]
   112b6:	e7f5      	b.n	112a4 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   112b8:	2512      	movs	r5, #18
   112ba:	e7b7      	b.n	1122c <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   112bc:	2507      	movs	r5, #7
	return wl_add(addr);
   112be:	e7b5      	b.n	1122c <ll_wl_add+0x10>
   112c0:	20001940 	.word	0x20001940
   112c4:	2000144f 	.word	0x2000144f
   112c8:	200012dc 	.word	0x200012dc

000112cc <ctrl_rl_idx_allowed>:
{
   112cc:	b508      	push	{r3, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   112ce:	4b0f      	ldr	r3, [pc, #60]	; (1130c <ctrl_rl_idx_allowed+0x40>)
   112d0:	781b      	ldrb	r3, [r3, #0]
   112d2:	b1c3      	cbz	r3, 11306 <ctrl_rl_idx_allowed+0x3a>
   112d4:	2907      	cmp	r1, #7
   112d6:	d816      	bhi.n	11306 <ctrl_rl_idx_allowed+0x3a>
   112d8:	b9a8      	cbnz	r0, 11306 <ctrl_rl_idx_allowed+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   112da:	2328      	movs	r3, #40	; 0x28
   112dc:	4359      	muls	r1, r3
   112de:	4b0c      	ldr	r3, [pc, #48]	; (11310 <ctrl_rl_idx_allowed+0x44>)
   112e0:	5c58      	ldrb	r0, [r3, r1]
   112e2:	07c2      	lsls	r2, r0, #31
   112e4:	d40a      	bmi.n	112fc <ctrl_rl_idx_allowed+0x30>
   112e6:	4a0b      	ldr	r2, [pc, #44]	; (11314 <ctrl_rl_idx_allowed+0x48>)
   112e8:	490b      	ldr	r1, [pc, #44]	; (11318 <ctrl_rl_idx_allowed+0x4c>)
   112ea:	2003      	movs	r0, #3
   112ec:	f7f0 fe72 	bl	1fd4 <bt_log>
   112f0:	4040      	eors	r0, r0
   112f2:	f380 8811 	msr	BASEPRI, r0
   112f6:	f04f 0004 	mov.w	r0, #4
   112fa:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   112fc:	0743      	lsls	r3, r0, #29
   112fe:	d502      	bpl.n	11306 <ctrl_rl_idx_allowed+0x3a>
   11300:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11304:	bd08      	pop	{r3, pc}
		return true;
   11306:	2001      	movs	r0, #1
}
   11308:	bd08      	pop	{r3, pc}
   1130a:	bf00      	nop
   1130c:	2000141c 	.word	0x2000141c
   11310:	200012dc 	.word	0x200012dc
   11314:	00017524 	.word	0x00017524
   11318:	0001755b 	.word	0x0001755b

0001131c <ll_rl_id_addr_get>:
{
   1131c:	b538      	push	{r3, r4, r5, lr}
   1131e:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11320:	2b07      	cmp	r3, #7
{
   11322:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11324:	d90a      	bls.n	1133c <ll_rl_id_addr_get+0x20>
   11326:	4a10      	ldr	r2, [pc, #64]	; (11368 <ll_rl_id_addr_get+0x4c>)
   11328:	4910      	ldr	r1, [pc, #64]	; (1136c <ll_rl_id_addr_get+0x50>)
	LL_ASSERT(rl[rl_idx].taken);
   1132a:	2003      	movs	r0, #3
   1132c:	f7f0 fe52 	bl	1fd4 <bt_log>
   11330:	4040      	eors	r0, r0
   11332:	f380 8811 	msr	BASEPRI, r0
   11336:	f04f 0004 	mov.w	r0, #4
   1133a:	df02      	svc	2
   1133c:	2528      	movs	r5, #40	; 0x28
   1133e:	4c0c      	ldr	r4, [pc, #48]	; (11370 <ll_rl_id_addr_get+0x54>)
   11340:	fb05 f203 	mul.w	r2, r5, r3
   11344:	5ca2      	ldrb	r2, [r4, r2]
   11346:	f012 0f01 	tst.w	r2, #1
   1134a:	d102      	bne.n	11352 <ll_rl_id_addr_get+0x36>
   1134c:	4a06      	ldr	r2, [pc, #24]	; (11368 <ll_rl_id_addr_get+0x4c>)
   1134e:	4909      	ldr	r1, [pc, #36]	; (11374 <ll_rl_id_addr_get+0x58>)
   11350:	e7eb      	b.n	1132a <ll_rl_id_addr_get+0xe>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11352:	f3c2 1280 	ubfx	r2, r2, #6, #1
   11356:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11358:	fb05 4103 	mla	r1, r5, r3, r4
   1135c:	2206      	movs	r2, #6
   1135e:	3101      	adds	r1, #1
}
   11360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11364:	f7f0 bc6f 	b.w	1c46 <memcpy>
   11368:	00017538 	.word	0x00017538
   1136c:	0001779c 	.word	0x0001779c
   11370:	200012dc 	.word	0x200012dc
   11374:	0001755b 	.word	0x0001755b

00011378 <ctrl_rl_addr_allowed>:
{
   11378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1137c:	4b1a      	ldr	r3, [pc, #104]	; (113e8 <ctrl_rl_addr_allowed+0x70>)
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	b37b      	cbz	r3, 113e2 <ctrl_rl_addr_allowed+0x6a>
   11382:	7813      	ldrb	r3, [r2, #0]
   11384:	2bff      	cmp	r3, #255	; 0xff
   11386:	d12c      	bne.n	113e2 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11388:	4e18      	ldr	r6, [pc, #96]	; (113ec <ctrl_rl_addr_allowed+0x74>)
   1138a:	2400      	movs	r4, #0
   1138c:	f04f 0828 	mov.w	r8, #40	; 0x28
   11390:	46b6      	mov	lr, r6
   11392:	fb08 f304 	mul.w	r3, r8, r4
   11396:	fa5f fc84 	uxtb.w	ip, r4
   1139a:	5cf7      	ldrb	r7, [r6, r3]
   1139c:	f017 0f01 	tst.w	r7, #1
   113a0:	eb06 0503 	add.w	r5, r6, r3
   113a4:	d01a      	beq.n	113dc <ctrl_rl_addr_allowed+0x64>
   113a6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   113aa:	4287      	cmp	r7, r0
   113ac:	d116      	bne.n	113dc <ctrl_rl_addr_allowed+0x64>
   113ae:	3306      	adds	r3, #6
   113b0:	1e4f      	subs	r7, r1, #1
   113b2:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   113b4:	f815 af01 	ldrb.w	sl, [r5, #1]!
   113b8:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   113bc:	45ca      	cmp	sl, r9
   113be:	d10d      	bne.n	113dc <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   113c0:	429d      	cmp	r5, r3
   113c2:	d1f7      	bne.n	113b4 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   113c4:	2328      	movs	r3, #40	; 0x28
   113c6:	435c      	muls	r4, r3
				*rl_idx = i;
   113c8:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   113cc:	f81e 0004 	ldrb.w	r0, [lr, r4]
   113d0:	0743      	lsls	r3, r0, #29
   113d2:	d506      	bpl.n	113e2 <ctrl_rl_addr_allowed+0x6a>
   113d4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   113d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113dc:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   113de:	2c08      	cmp	r4, #8
   113e0:	d1d7      	bne.n	11392 <ctrl_rl_addr_allowed+0x1a>
   113e2:	2001      	movs	r0, #1
}
   113e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113e8:	2000141c 	.word	0x2000141c
   113ec:	200012dc 	.word	0x200012dc

000113f0 <ctrl_rl_addr_resolve>:
{
   113f0:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   113f2:	4c0d      	ldr	r4, [pc, #52]	; (11428 <ctrl_rl_addr_resolve+0x38>)
   113f4:	7824      	ldrb	r4, [r4, #0]
   113f6:	b1a4      	cbz	r4, 11422 <ctrl_rl_addr_resolve+0x32>
   113f8:	2a07      	cmp	r2, #7
   113fa:	d812      	bhi.n	11422 <ctrl_rl_addr_resolve+0x32>
   113fc:	2528      	movs	r5, #40	; 0x28
   113fe:	4c0b      	ldr	r4, [pc, #44]	; (1142c <ctrl_rl_addr_resolve+0x3c>)
   11400:	fb05 f602 	mul.w	r6, r5, r2
   11404:	5da6      	ldrb	r6, [r4, r6]
   11406:	0736      	lsls	r6, r6, #28
   11408:	d50b      	bpl.n	11422 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1140a:	b150      	cbz	r0, 11422 <ctrl_rl_addr_resolve+0x32>
   1140c:	794b      	ldrb	r3, [r1, #5]
   1140e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11412:	2b40      	cmp	r3, #64	; 0x40
   11414:	d105      	bne.n	11422 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11416:	fb05 4202 	mla	r2, r5, r2, r4
   1141a:	1dd0      	adds	r0, r2, #7
}
   1141c:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1141e:	f7f0 bd26 	b.w	1e6e <bt_rpa_irk_matches>
}
   11422:	2000      	movs	r0, #0
   11424:	bc70      	pop	{r4, r5, r6}
   11426:	4770      	bx	lr
   11428:	2000141c 	.word	0x2000141c
   1142c:	200012dc 	.word	0x200012dc

00011430 <ctrl_rl_enabled>:
	return rl_enable;
   11430:	4b02      	ldr	r3, [pc, #8]	; (1143c <ctrl_rl_enabled+0xc>)
   11432:	7818      	ldrb	r0, [r3, #0]
}
   11434:	3000      	adds	r0, #0
   11436:	bf18      	it	ne
   11438:	2001      	movne	r0, #1
   1143a:	4770      	bx	lr
   1143c:	2000141c 	.word	0x2000141c

00011440 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	b087      	sub	sp, #28
   11446:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11448:	f002 fa1a 	bl	13880 <_impl_k_uptime_get>
   1144c:	4680      	mov	r8, r0
   1144e:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11450:	2c00      	cmp	r4, #0
   11452:	d146      	bne.n	114e2 <ll_rl_rpa_update+0xa2>
   11454:	4b39      	ldr	r3, [pc, #228]	; (1153c <ll_rl_rpa_update+0xfc>)
   11456:	e9d3 2300 	ldrd	r2, r3, [r3]
   1145a:	1c5c      	adds	r4, r3, #1
   1145c:	bf08      	it	eq
   1145e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11462:	d03e      	beq.n	114e2 <ll_rl_rpa_update+0xa2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11464:	1a82      	subs	r2, r0, r2
   11466:	eb61 0303 	sbc.w	r3, r1, r3
   1146a:	4935      	ldr	r1, [pc, #212]	; (11540 <ll_rl_rpa_update+0x100>)
   1146c:	6808      	ldr	r0, [r1, #0]
   1146e:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11470:	4282      	cmp	r2, r0
   11472:	418b      	sbcs	r3, r1
   11474:	bfac      	ite	ge
   11476:	2601      	movge	r6, #1
   11478:	2600      	movlt	r6, #0
   1147a:	4d32      	ldr	r5, [pc, #200]	; (11544 <ll_rl_rpa_update+0x104>)
   1147c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 11554 <ll_rl_rpa_update+0x114>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11480:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11484:	2400      	movs	r4, #0
   11486:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11488:	2328      	movs	r3, #40	; 0x28
   1148a:	4363      	muls	r3, r4
   1148c:	f81a 3003 	ldrb.w	r3, [sl, r3]
   11490:	07d8      	lsls	r0, r3, #31
   11492:	d547      	bpl.n	11524 <ll_rl_rpa_update+0xe4>
   11494:	b90e      	cbnz	r6, 1149a <ll_rl_rpa_update+0x5a>
   11496:	0799      	lsls	r1, r3, #30
   11498:	d444      	bmi.n	11524 <ll_rl_rpa_update+0xe4>

			if (rl[i].pirk) {
   1149a:	2328      	movs	r3, #40	; 0x28
   1149c:	4363      	muls	r3, r4
   1149e:	5cfb      	ldrb	r3, [r7, r3]
   114a0:	075a      	lsls	r2, r3, #29
   114a2:	d520      	bpl.n	114e6 <ll_rl_rpa_update+0xa6>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   114a4:	7c2a      	ldrb	r2, [r5, #16]
   114a6:	4b28      	ldr	r3, [pc, #160]	; (11548 <ll_rl_rpa_update+0x108>)
   114a8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   114ac:	f103 0210 	add.w	r2, r3, #16
   114b0:	f10d 0107 	add.w	r1, sp, #7
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   114b4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   114b8:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   114bc:	429a      	cmp	r2, r3
   114be:	d1f9      	bne.n	114b4 <ll_rl_rpa_update+0x74>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   114c0:	f105 0117 	add.w	r1, r5, #23
   114c4:	a802      	add	r0, sp, #8
   114c6:	f7f0 fce5 	bl	1e94 <bt_rpa_create>
				LL_ASSERT(!err);
   114ca:	b160      	cbz	r0, 114e6 <ll_rl_rpa_update+0xa6>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   114cc:	4a1f      	ldr	r2, [pc, #124]	; (1154c <ll_rl_rpa_update+0x10c>)
   114ce:	4920      	ldr	r1, [pc, #128]	; (11550 <ll_rl_rpa_update+0x110>)
   114d0:	2003      	movs	r0, #3
   114d2:	f7f0 fd7f 	bl	1fd4 <bt_log>
   114d6:	4040      	eors	r0, r0
   114d8:	f380 8811 	msr	BASEPRI, r0
   114dc:	f04f 0004 	mov.w	r0, #4
   114e0:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   114e2:	2601      	movs	r6, #1
   114e4:	e7c9      	b.n	1147a <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   114e6:	2328      	movs	r3, #40	; 0x28
   114e8:	4363      	muls	r3, r4
   114ea:	5cfb      	ldrb	r3, [r7, r3]
   114ec:	071b      	lsls	r3, r3, #28
   114ee:	d513      	bpl.n	11518 <ll_rl_rpa_update+0xd8>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   114f0:	a902      	add	r1, sp, #8
   114f2:	4628      	mov	r0, r5
   114f4:	f7f0 fcce 	bl	1e94 <bt_rpa_create>
				LL_ASSERT(!err);
   114f8:	2800      	cmp	r0, #0
   114fa:	d1e7      	bne.n	114cc <ll_rl_rpa_update+0x8c>
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   114fc:	ab02      	add	r3, sp, #8
   114fe:	2206      	movs	r2, #6
   11500:	f8c5 301d 	str.w	r3, [r5, #29]
   11504:	fb02 b304 	mla	r3, r2, r4, fp
   11508:	4618      	mov	r0, r3
   1150a:	a902      	add	r1, sp, #8
   1150c:	9301      	str	r3, [sp, #4]
   1150e:	f7f0 fb9a 	bl	1c46 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11512:	9b01      	ldr	r3, [sp, #4]
   11514:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11518:	2328      	movs	r3, #40	; 0x28
   1151a:	4363      	muls	r3, r4
   1151c:	5cfa      	ldrb	r2, [r7, r3]
   1151e:	f042 0202 	orr.w	r2, r2, #2
   11522:	54fa      	strb	r2, [r7, r3]
   11524:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11526:	2c08      	cmp	r4, #8
   11528:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1152c:	d1ac      	bne.n	11488 <ll_rl_rpa_update+0x48>
		}
	}

	if (all) {
   1152e:	b116      	cbz	r6, 11536 <ll_rl_rpa_update+0xf6>
		rpa_last_ms = now;
   11530:	4b02      	ldr	r3, [pc, #8]	; (1153c <ll_rl_rpa_update+0xfc>)
   11532:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   11536:	b007      	add	sp, #28
   11538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1153c:	20001938 	.word	0x20001938
   11540:	2000196c 	.word	0x2000196c
   11544:	200012e3 	.word	0x200012e3
   11548:	2000125b 	.word	0x2000125b
   1154c:	0001754a 	.word	0x0001754a
   11550:	000174b0 	.word	0x000174b0
   11554:	20001222 	.word	0x20001222

00011558 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11558:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1155a:	2001      	movs	r0, #1
   1155c:	f7ff ff70 	bl	11440 <ll_rl_rpa_update>
   11560:	4b03      	ldr	r3, [pc, #12]	; (11570 <rpa_timeout+0x18>)
   11562:	4904      	ldr	r1, [pc, #16]	; (11574 <rpa_timeout+0x1c>)
   11564:	681a      	ldr	r2, [r3, #0]
   11566:	4804      	ldr	r0, [pc, #16]	; (11578 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1156c:	f002 bc86 	b.w	13e7c <k_delayed_work_submit_to_queue>
   11570:	2000196c 	.word	0x2000196c
   11574:	20001944 	.word	0x20001944
   11578:	200019b0 	.word	0x200019b0

0001157c <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1157c:	4b07      	ldr	r3, [pc, #28]	; (1159c <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   1157e:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11580:	b130      	cbz	r0, 11590 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   11582:	b14b      	cbz	r3, 11598 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11584:	4b06      	ldr	r3, [pc, #24]	; (115a0 <ll_adv_scan_state_cb+0x24>)
   11586:	4907      	ldr	r1, [pc, #28]	; (115a4 <ll_adv_scan_state_cb+0x28>)
   11588:	681a      	ldr	r2, [r3, #0]
   1158a:	4807      	ldr	r0, [pc, #28]	; (115a8 <ll_adv_scan_state_cb+0x2c>)
   1158c:	f002 bc76 	b.w	13e7c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11590:	b113      	cbz	r3, 11598 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   11592:	4804      	ldr	r0, [pc, #16]	; (115a4 <ll_adv_scan_state_cb+0x28>)
   11594:	f002 bc0e 	b.w	13db4 <k_delayed_work_cancel>
   11598:	4770      	bx	lr
   1159a:	bf00      	nop
   1159c:	2000141c 	.word	0x2000141c
   115a0:	2000196c 	.word	0x2000196c
   115a4:	20001944 	.word	0x20001944
   115a8:	200019b0 	.word	0x200019b0

000115ac <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   115ac:	2008      	movs	r0, #8
   115ae:	4770      	bx	lr

000115b0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   115b0:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   115b2:	f7ff fca1 	bl	10ef8 <rl_access_check.constprop.1>
   115b6:	b178      	cbz	r0, 115d8 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   115b8:	4908      	ldr	r1, [pc, #32]	; (115dc <ll_rl_clear+0x2c>)
   115ba:	2300      	movs	r3, #0
   115bc:	2428      	movs	r4, #40	; 0x28
   115be:	fb04 f203 	mul.w	r2, r4, r3
   115c2:	3301      	adds	r3, #1
   115c4:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   115c6:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   115c8:	f36f 0000 	bfc	r0, #0, #1
   115cc:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   115ce:	d1f6      	bne.n	115be <ll_rl_clear+0xe>
	peer_irk_count = 0;
   115d0:	4b03      	ldr	r3, [pc, #12]	; (115e0 <ll_rl_clear+0x30>)
   115d2:	2000      	movs	r0, #0
   115d4:	7018      	strb	r0, [r3, #0]
   115d6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   115d8:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   115da:	bd10      	pop	{r4, pc}
   115dc:	200012dc 	.word	0x200012dc
   115e0:	20001252 	.word	0x20001252

000115e4 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115e8:	b085      	sub	sp, #20
   115ea:	4607      	mov	r7, r0
   115ec:	4689      	mov	r9, r1
   115ee:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   115f0:	f7ff fc82 	bl	10ef8 <rl_access_check.constprop.1>
   115f4:	2800      	cmp	r0, #0
   115f6:	f000 8086 	beq.w	11706 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   115fa:	f107 0801 	add.w	r8, r7, #1
   115fe:	f10d 020f 	add.w	r2, sp, #15
   11602:	4641      	mov	r1, r8
   11604:	7838      	ldrb	r0, [r7, #0]
   11606:	f7ff fdd5 	bl	111b4 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1160a:	2807      	cmp	r0, #7
   1160c:	d97d      	bls.n	1170a <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1160e:	f89d 500f 	ldrb.w	r5, [sp, #15]
   11612:	2d07      	cmp	r5, #7
   11614:	d87b      	bhi.n	1170e <ll_rl_add+0x12a>
   11616:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1161a:	4c3e      	ldr	r4, [pc, #248]	; (11714 <ll_rl_add+0x130>)
   1161c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11620:	2628      	movs	r6, #40	; 0x28
   11622:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11624:	f10b 0001 	add.w	r0, fp, #1
   11628:	2206      	movs	r2, #6
   1162a:	4641      	mov	r1, r8
   1162c:	4420      	add	r0, r4
   1162e:	f7f0 fb0a 	bl	1c46 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   11632:	7839      	ldrb	r1, [r7, #0]
   11634:	5da3      	ldrb	r3, [r4, r6]
   11636:	19a2      	adds	r2, r4, r6
   11638:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1163c:	4648      	mov	r0, r9
   1163e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11640:	9201      	str	r2, [sp, #4]
   11642:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11644:	f7f5 fe75 	bl	7332 <mem_nz>
   11648:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1164a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1164c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11650:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11652:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11654:	f7f5 fe6d 	bl	7332 <mem_nz>
   11658:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1165a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1165c:	f000 0001 	and.w	r0, r0, #1
   11660:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   11664:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11668:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1166a:	d138      	bne.n	116de <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   1166c:	b158      	cbz	r0, 11686 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   1166e:	f10b 0007 	add.w	r0, fp, #7
   11672:	2210      	movs	r2, #16
   11674:	4651      	mov	r1, sl
   11676:	4420      	add	r0, r4
   11678:	f7f0 fae5 	bl	1c46 <memcpy>
		rl[i].local_rpa = NULL;
   1167c:	2328      	movs	r3, #40	; 0x28
   1167e:	fb03 4305 	mla	r3, r3, r5, r4
   11682:	2200      	movs	r2, #0
   11684:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   11686:	2628      	movs	r6, #40	; 0x28
   11688:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1168a:	f10b 0018 	add.w	r0, fp, #24
   1168e:	2206      	movs	r2, #6
   11690:	2100      	movs	r1, #0
   11692:	4420      	add	r0, r4
   11694:	f7f0 fb03 	bl	1c9e <memset>
	rl[i].rpas_ready = 0;
   11698:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   1169a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1169e:	f36f 1304 	bfc	r3, #4, #1
   116a2:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   116a4:	2200      	movs	r2, #0
   116a6:	4641      	mov	r1, r8
   116a8:	7838      	ldrb	r0, [r7, #0]
   116aa:	f7ff fbb3 	bl	10e14 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   116ae:	2807      	cmp	r0, #7
   116b0:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   116b2:	bf9d      	ittte	ls
   116b4:	4a18      	ldrls	r2, [pc, #96]	; (11718 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   116b6:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   116ba:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   116be:	f36f 1345 	bfchi	r3, #5, #1
   116c2:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   116c4:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   116c8:	bf98      	it	ls
   116ca:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   116cc:	435d      	muls	r5, r3

	return 0;
   116ce:	2000      	movs	r0, #0
	rl[i].taken = 1;
   116d0:	5d63      	ldrb	r3, [r4, r5]
   116d2:	f043 0301 	orr.w	r3, r3, #1
   116d6:	5563      	strb	r3, [r4, r5]
}
   116d8:	b005      	add	sp, #20
   116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   116de:	4b0f      	ldr	r3, [pc, #60]	; (1171c <ll_rl_add+0x138>)
   116e0:	7819      	ldrb	r1, [r3, #0]
   116e2:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   116e4:	4a0e      	ldr	r2, [pc, #56]	; (11720 <ll_rl_add+0x13c>)
   116e6:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   116e8:	1c4a      	adds	r2, r1, #1
   116ea:	701a      	strb	r2, [r3, #0]
   116ec:	4b0d      	ldr	r3, [pc, #52]	; (11724 <ll_rl_add+0x140>)
   116ee:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   116f2:	f109 0210 	add.w	r2, r9, #16
   116f6:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   116f8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   116fc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11700:	454a      	cmp	r2, r9
   11702:	d1f9      	bne.n	116f8 <ll_rl_add+0x114>
   11704:	e7b2      	b.n	1166c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11706:	200c      	movs	r0, #12
   11708:	e7e6      	b.n	116d8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   1170a:	2012      	movs	r0, #18
   1170c:	e7e4      	b.n	116d8 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1170e:	2007      	movs	r0, #7
   11710:	e7e2      	b.n	116d8 <ll_rl_add+0xf4>
   11712:	bf00      	nop
   11714:	200012dc 	.word	0x200012dc
   11718:	2000144f 	.word	0x2000144f
   1171c:	20001252 	.word	0x20001252
   11720:	20001253 	.word	0x20001253
   11724:	2000125b 	.word	0x2000125b

00011728 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1172c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1172e:	f7ff fbe3 	bl	10ef8 <rl_access_check.constprop.1>
   11732:	2800      	cmp	r0, #0
   11734:	d053      	beq.n	117de <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11736:	f109 0a01 	add.w	sl, r9, #1
   1173a:	2200      	movs	r2, #0
   1173c:	4651      	mov	r1, sl
   1173e:	f899 0000 	ldrb.w	r0, [r9]
   11742:	f7ff fd37 	bl	111b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11746:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11748:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   1174a:	d84b      	bhi.n	117e4 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   1174c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11750:	4c26      	ldr	r4, [pc, #152]	; (117ec <ll_rl_remove+0xc4>)
   11752:	fb0b f300 	mul.w	r3, fp, r0
   11756:	18e2      	adds	r2, r4, r3
   11758:	5ce3      	ldrb	r3, [r4, r3]
   1175a:	075b      	lsls	r3, r3, #29
   1175c:	d524      	bpl.n	117a8 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1175e:	4e24      	ldr	r6, [pc, #144]	; (117f0 <ll_rl_remove+0xc8>)
   11760:	7835      	ldrb	r5, [r6, #0]
   11762:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   11764:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11768:	d01b      	beq.n	117a2 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1176a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   1176c:	42af      	cmp	r7, r5
   1176e:	d018      	beq.n	117a2 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11770:	4820      	ldr	r0, [pc, #128]	; (117f4 <ll_rl_remove+0xcc>)
   11772:	2210      	movs	r2, #16
   11774:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11778:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1177c:	f7f0 fa63 	bl	1c46 <memcpy>
   11780:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   11782:	fb0b f103 	mul.w	r1, fp, r3
   11786:	1862      	adds	r2, r4, r1
   11788:	5c61      	ldrb	r1, [r4, r1]
   1178a:	f011 0f01 	tst.w	r1, #1
   1178e:	b2d8      	uxtb	r0, r3
   11790:	d021      	beq.n	117d6 <ll_rl_remove+0xae>
   11792:	0749      	lsls	r1, r1, #29
   11794:	d51f      	bpl.n	117d6 <ll_rl_remove+0xae>
   11796:	7dd1      	ldrb	r1, [r2, #23]
   11798:	42a9      	cmp	r1, r5
   1179a:	d11c      	bne.n	117d6 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   1179c:	4b16      	ldr	r3, [pc, #88]	; (117f8 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   1179e:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   117a0:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   117a2:	7833      	ldrb	r3, [r6, #0]
   117a4:	3b01      	subs	r3, #1
   117a6:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   117a8:	2200      	movs	r2, #0
   117aa:	4651      	mov	r1, sl
   117ac:	f899 0000 	ldrb.w	r0, [r9]
   117b0:	f7ff fb30 	bl	10e14 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   117b4:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   117b6:	bf9f      	itttt	ls
   117b8:	4b10      	ldrls	r3, [pc, #64]	; (117fc <ll_rl_remove+0xd4>)
   117ba:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   117be:	23ff      	movls	r3, #255	; 0xff
   117c0:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   117c2:	2028      	movs	r0, #40	; 0x28
   117c4:	fb00 f008 	mul.w	r0, r0, r8
   117c8:	5c23      	ldrb	r3, [r4, r0]
   117ca:	f36f 0300 	bfc	r3, #0, #1
   117ce:	5423      	strb	r3, [r4, r0]
		return 0;
   117d0:	2000      	movs	r0, #0
   117d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117d6:	3301      	adds	r3, #1
				for (k = 0;
   117d8:	2b08      	cmp	r3, #8
   117da:	d1d2      	bne.n	11782 <ll_rl_remove+0x5a>
   117dc:	e7e1      	b.n	117a2 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   117de:	200c      	movs	r0, #12
   117e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   117e4:	2002      	movs	r0, #2
}
   117e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ea:	bf00      	nop
   117ec:	200012dc 	.word	0x200012dc
   117f0:	20001252 	.word	0x20001252
   117f4:	2000125b 	.word	0x2000125b
   117f8:	20001253 	.word	0x20001253
   117fc:	2000144f 	.word	0x2000144f

00011800 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11800:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11802:	795c      	ldrb	r4, [r3, #5]
   11804:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11808:	2c40      	cmp	r4, #64	; 0x40
{
   1180a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1180c:	d117      	bne.n	1183e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   1180e:	b119      	cbz	r1, 11818 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11810:	2200      	movs	r2, #0
   11812:	f7ff fccf 	bl	111b4 <ll_rl_find>
   11816:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11818:	2a07      	cmp	r2, #7
   1181a:	d810      	bhi.n	1183e <ll_rl_crpa_set+0x3e>
   1181c:	2128      	movs	r1, #40	; 0x28
   1181e:	4c08      	ldr	r4, [pc, #32]	; (11840 <ll_rl_crpa_set+0x40>)
   11820:	fb01 f302 	mul.w	r3, r1, r2
   11824:	5ce3      	ldrb	r3, [r4, r3]
   11826:	07db      	lsls	r3, r3, #31
   11828:	d509      	bpl.n	1183e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1182a:	2018      	movs	r0, #24
   1182c:	fb11 0002 	smlabb	r0, r1, r2, r0
   11830:	4420      	add	r0, r4
   11832:	4629      	mov	r1, r5
   11834:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1183a:	f7f0 ba04 	b.w	1c46 <memcpy>
   1183e:	bd70      	pop	{r4, r5, r6, pc}
   11840:	200012dc 	.word	0x200012dc

00011844 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11844:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11846:	2200      	movs	r2, #0
{
   11848:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1184a:	1c41      	adds	r1, r0, #1
   1184c:	7800      	ldrb	r0, [r0, #0]
   1184e:	f7ff fcb1 	bl	111b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11852:	2807      	cmp	r0, #7
   11854:	d901      	bls.n	1185a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11856:	2002      	movs	r0, #2
   11858:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1185a:	2428      	movs	r4, #40	; 0x28
   1185c:	2318      	movs	r3, #24
   1185e:	fb14 3000 	smlabb	r0, r4, r0, r3
   11862:	4c07      	ldr	r4, [pc, #28]	; (11880 <ll_rl_crpa_get+0x3c>)
   11864:	4404      	add	r4, r0
   11866:	2106      	movs	r1, #6
   11868:	4620      	mov	r0, r4
   1186a:	f7f5 fd62 	bl	7332 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1186e:	2800      	cmp	r0, #0
   11870:	d0f1      	beq.n	11856 <ll_rl_crpa_get+0x12>
   11872:	2206      	movs	r2, #6
   11874:	4621      	mov	r1, r4
   11876:	4628      	mov	r0, r5
   11878:	f7f0 f9e5 	bl	1c46 <memcpy>
			return 0;
   1187c:	2000      	movs	r0, #0
}
   1187e:	bd38      	pop	{r3, r4, r5, pc}
   11880:	200012dc 	.word	0x200012dc

00011884 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11884:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11886:	2200      	movs	r2, #0
{
   11888:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1188a:	1c41      	adds	r1, r0, #1
   1188c:	7800      	ldrb	r0, [r0, #0]
   1188e:	f7ff fc91 	bl	111b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11892:	2807      	cmp	r0, #7
   11894:	d80a      	bhi.n	118ac <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11896:	4b06      	ldr	r3, [pc, #24]	; (118b0 <ll_rl_lrpa_get+0x2c>)
   11898:	2228      	movs	r2, #40	; 0x28
   1189a:	fb02 3000 	mla	r0, r2, r0, r3
   1189e:	2206      	movs	r2, #6
   118a0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   118a2:	4620      	mov	r0, r4
   118a4:	f7f0 f9cf 	bl	1c46 <memcpy>
		return 0;
   118a8:	2000      	movs	r0, #0
   118aa:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   118ac:	2002      	movs	r0, #2
}
   118ae:	bd10      	pop	{r4, pc}
   118b0:	200012dc 	.word	0x200012dc

000118b4 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   118b4:	b510      	push	{r4, lr}
   118b6:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   118b8:	f7ff fb1e 	bl	10ef8 <rl_access_check.constprop.1>
   118bc:	b140      	cbz	r0, 118d0 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   118be:	b11c      	cbz	r4, 118c8 <ll_rl_enable+0x14>
   118c0:	2c01      	cmp	r4, #1
   118c2:	d001      	beq.n	118c8 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   118c4:	2012      	movs	r0, #18
	}

	return 0;
}
   118c6:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   118c8:	4b02      	ldr	r3, [pc, #8]	; (118d4 <ll_rl_enable+0x20>)
   118ca:	701c      	strb	r4, [r3, #0]
	return 0;
   118cc:	2000      	movs	r0, #0
		break;
   118ce:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   118d0:	200c      	movs	r0, #12
   118d2:	bd10      	pop	{r4, pc}
   118d4:	2000141c 	.word	0x2000141c

000118d8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   118d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   118dc:	4358      	muls	r0, r3
   118de:	4b01      	ldr	r3, [pc, #4]	; (118e4 <ll_rl_timeout_set+0xc>)
   118e0:	6018      	str	r0, [r3, #0]
   118e2:	4770      	bx	lr
   118e4:	2000196c 	.word	0x2000196c

000118e8 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   118e8:	b538      	push	{r3, r4, r5, lr}
   118ea:	4605      	mov	r5, r0
   118ec:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   118ee:	f7ff fb03 	bl	10ef8 <rl_access_check.constprop.1>
   118f2:	b1d8      	cbz	r0, 1192c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   118f4:	2200      	movs	r2, #0
   118f6:	1c69      	adds	r1, r5, #1
   118f8:	7828      	ldrb	r0, [r5, #0]
   118fa:	f7ff fc5b 	bl	111b4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   118fe:	2807      	cmp	r0, #7
   11900:	d816      	bhi.n	11930 <ll_priv_mode_set+0x48>
		switch (mode) {
   11902:	b11c      	cbz	r4, 1190c <ll_priv_mode_set+0x24>
   11904:	2c01      	cmp	r4, #1
   11906:	d00a      	beq.n	1191e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11908:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   1190a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1190c:	2328      	movs	r3, #40	; 0x28
   1190e:	4a09      	ldr	r2, [pc, #36]	; (11934 <ll_priv_mode_set+0x4c>)
   11910:	4358      	muls	r0, r3
   11912:	5c13      	ldrb	r3, [r2, r0]
   11914:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11918:	5413      	strb	r3, [r2, r0]
	return 0;
   1191a:	2000      	movs	r0, #0
			break;
   1191c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1191e:	2328      	movs	r3, #40	; 0x28
   11920:	4a04      	ldr	r2, [pc, #16]	; (11934 <ll_priv_mode_set+0x4c>)
   11922:	4358      	muls	r0, r3
   11924:	5c13      	ldrb	r3, [r2, r0]
   11926:	f043 0310 	orr.w	r3, r3, #16
   1192a:	e7f5      	b.n	11918 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1192c:	200c      	movs	r0, #12
   1192e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11930:	2002      	movs	r0, #2
   11932:	bd38      	pop	{r3, r4, r5, pc}
   11934:	200012dc 	.word	0x200012dc

00011938 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11938:	4a19      	ldr	r2, [pc, #100]	; (119a0 <ll_filter_reset+0x68>)
   1193a:	2300      	movs	r3, #0
{
   1193c:	b430      	push	{r4, r5}
	wl_anon = 0;
   1193e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11940:	4a18      	ldr	r2, [pc, #96]	; (119a4 <ll_filter_reset+0x6c>)
   11942:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11946:	f36f 0100 	bfc	r1, #0, #1
   1194a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1194e:	3301      	adds	r3, #1
   11950:	2b08      	cmp	r3, #8
   11952:	d1f6      	bne.n	11942 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11954:	4a14      	ldr	r2, [pc, #80]	; (119a8 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11956:	4915      	ldr	r1, [pc, #84]	; (119ac <ll_filter_reset+0x74>)
	rl_enable = 0;
   11958:	2300      	movs	r3, #0
   1195a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1195c:	4a14      	ldr	r2, [pc, #80]	; (119b0 <ll_filter_reset+0x78>)
   1195e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11960:	4a14      	ldr	r2, [pc, #80]	; (119b4 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11962:	4915      	ldr	r1, [pc, #84]	; (119b8 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11964:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1196c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11970:	2528      	movs	r5, #40	; 0x28
   11972:	fb05 f203 	mul.w	r2, r5, r3
   11976:	3301      	adds	r3, #1
   11978:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1197a:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   1197c:	f36f 0400 	bfc	r4, #0, #1
   11980:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11982:	d1f6      	bne.n	11972 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   11984:	4b0d      	ldr	r3, [pc, #52]	; (119bc <ll_filter_reset+0x84>)
   11986:	2200      	movs	r2, #0
   11988:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   1198a:	b120      	cbz	r0, 11996 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1198c:	490c      	ldr	r1, [pc, #48]	; (119c0 <ll_filter_reset+0x88>)
   1198e:	480d      	ldr	r0, [pc, #52]	; (119c4 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11990:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11992:	f002 b9ff 	b.w	13d94 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   11996:	480b      	ldr	r0, [pc, #44]	; (119c4 <ll_filter_reset+0x8c>)
}
   11998:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   1199a:	f002 ba0b 	b.w	13db4 <k_delayed_work_cancel>
   1199e:	bf00      	nop
   119a0:	20001940 	.word	0x20001940
   119a4:	2000144f 	.word	0x2000144f
   119a8:	2000141c 	.word	0x2000141c
   119ac:	000dbba0 	.word	0x000dbba0
   119b0:	2000196c 	.word	0x2000196c
   119b4:	20001938 	.word	0x20001938
   119b8:	200012dc 	.word	0x200012dc
   119bc:	20001252 	.word	0x20001252
   119c0:	00011559 	.word	0x00011559
   119c4:	20001944 	.word	0x20001944

000119c8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   119c8:	4b05      	ldr	r3, [pc, #20]	; (119e0 <cntr_init+0x18>)
   119ca:	2200      	movs	r2, #0
   119cc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   119d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   119d4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   119d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   119dc:	4770      	bx	lr
   119de:	bf00      	nop
   119e0:	4000b000 	.word	0x4000b000

000119e4 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   119e4:	4a04      	ldr	r2, [pc, #16]	; (119f8 <cntr_start+0x14>)
   119e6:	7813      	ldrb	r3, [r2, #0]
   119e8:	1c59      	adds	r1, r3, #1
   119ea:	7011      	strb	r1, [r2, #0]
   119ec:	2001      	movs	r0, #1
   119ee:	b913      	cbnz	r3, 119f6 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   119f0:	4a02      	ldr	r2, [pc, #8]	; (119fc <cntr_start+0x18>)
   119f2:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   119f4:	4618      	mov	r0, r3
}
   119f6:	4770      	bx	lr
   119f8:	200014c1 	.word	0x200014c1
   119fc:	4000b000 	.word	0x4000b000

00011a00 <cntr_stop>:

u32_t cntr_stop(void)
{
   11a00:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
   11a02:	4b0c      	ldr	r3, [pc, #48]	; (11a34 <cntr_stop+0x34>)
   11a04:	7818      	ldrb	r0, [r3, #0]
   11a06:	b950      	cbnz	r0, 11a1e <cntr_stop+0x1e>
   11a08:	4a0b      	ldr	r2, [pc, #44]	; (11a38 <cntr_stop+0x38>)
   11a0a:	490c      	ldr	r1, [pc, #48]	; (11a3c <cntr_stop+0x3c>)
   11a0c:	2003      	movs	r0, #3
   11a0e:	f7f0 fae1 	bl	1fd4 <bt_log>
   11a12:	4040      	eors	r0, r0
   11a14:	f380 8811 	msr	BASEPRI, r0
   11a18:	f04f 0004 	mov.w	r0, #4
   11a1c:	df02      	svc	2

	if (--_refcount) {
   11a1e:	3801      	subs	r0, #1
   11a20:	b2c0      	uxtb	r0, r0
   11a22:	7018      	strb	r0, [r3, #0]
   11a24:	2301      	movs	r3, #1
   11a26:	b910      	cbnz	r0, 11a2e <cntr_stop+0x2e>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11a28:	4a05      	ldr	r2, [pc, #20]	; (11a40 <cntr_stop+0x40>)
   11a2a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   11a2c:	bd08      	pop	{r3, pc}
		return 1;
   11a2e:	4618      	mov	r0, r3
}
   11a30:	bd08      	pop	{r3, pc}
   11a32:	bf00      	nop
   11a34:	200014c1 	.word	0x200014c1
   11a38:	000177bc 	.word	0x000177bc
   11a3c:	000177c6 	.word	0x000177c6
   11a40:	4000b000 	.word	0x4000b000

00011a44 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11a44:	4b01      	ldr	r3, [pc, #4]	; (11a4c <cntr_cnt_get+0x8>)
   11a46:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   11a4a:	4770      	bx	lr
   11a4c:	4000b000 	.word	0x4000b000

00011a50 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   11a50:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11a54:	4b01      	ldr	r3, [pc, #4]	; (11a5c <cntr_cmp_set+0xc>)
   11a56:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   11a5a:	4770      	bx	lr
   11a5c:	4000b000 	.word	0x4000b000

00011a60 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   11a60:	4b11      	ldr	r3, [pc, #68]	; (11aa8 <do_ecb+0x48>)
{
   11a62:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   11a64:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11a66:	2500      	movs	r5, #0
   11a68:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   11a6a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11a6c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11a70:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11a74:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   11a78:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11a7a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   11a7e:	b934      	cbnz	r4, 11a8e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11a80:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11a84:	b91c      	cbnz	r4, 11a8e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11a86:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11a8a:	2c00      	cmp	r4, #0
   11a8c:	d1f5      	bne.n	11a7a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   11a8e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11a90:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   11a94:	2c00      	cmp	r4, #0
   11a96:	d1e8      	bne.n	11a6a <do_ecb+0xa>
   11a98:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   11a9c:	2e00      	cmp	r6, #0
   11a9e:	d0e4      	beq.n	11a6a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   11aa0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   11aa4:	bd70      	pop	{r4, r5, r6, pc}
   11aa6:	bf00      	nop
   11aa8:	4000e000 	.word	0x4000e000

00011aac <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   11aac:	b570      	push	{r4, r5, r6, lr}
   11aae:	b08c      	sub	sp, #48	; 0x30
   11ab0:	460e      	mov	r6, r1
   11ab2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11ab4:	4601      	mov	r1, r0
   11ab6:	2210      	movs	r2, #16
   11ab8:	4668      	mov	r0, sp
{
   11aba:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11abc:	f7f5 fc2a 	bl	7314 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   11ac0:	2210      	movs	r2, #16
   11ac2:	eb0d 0002 	add.w	r0, sp, r2
   11ac6:	4631      	mov	r1, r6
   11ac8:	f7f5 fc24 	bl	7314 <mem_rcopy>

	do_ecb(&ecb);
   11acc:	4668      	mov	r0, sp
   11ace:	f7ff ffc7 	bl	11a60 <do_ecb>

	if (cipher_text_le) {
   11ad2:	b125      	cbz	r5, 11ade <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11ad4:	2210      	movs	r2, #16
   11ad6:	a908      	add	r1, sp, #32
   11ad8:	4628      	mov	r0, r5
   11ada:	f7f5 fc1b 	bl	7314 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   11ade:	b124      	cbz	r4, 11aea <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   11ae0:	2210      	movs	r2, #16
   11ae2:	a908      	add	r1, sp, #32
   11ae4:	4620      	mov	r0, r4
   11ae6:	f7f0 f8ae 	bl	1c46 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   11aea:	b00c      	add	sp, #48	; 0x30
   11aec:	bd70      	pop	{r4, r5, r6, pc}
	...

00011af0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   11af0:	4b07      	ldr	r3, [pc, #28]	; (11b10 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   11af2:	4a08      	ldr	r2, [pc, #32]	; (11b14 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11af4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   11af8:	4907      	ldr	r1, [pc, #28]	; (11b18 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   11afa:	4a08      	ldr	r2, [pc, #32]	; (11b1c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   11afc:	2800      	cmp	r0, #0
   11afe:	bf14      	ite	ne
   11b00:	4610      	movne	r0, r2
   11b02:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11b04:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   11b06:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11b0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11b0e:	4770      	bx	lr
   11b10:	4001f000 	.word	0x4001f000
   11b14:	40008140 	.word	0x40008140
   11b18:	40001004 	.word	0x40001004
   11b1c:	40001000 	.word	0x40001000

00011b20 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11b20:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11b22:	4e2c      	ldr	r6, [pc, #176]	; (11bd4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11b24:	4f2c      	ldr	r7, [pc, #176]	; (11bd8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11b26:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11b28:	4b2c      	ldr	r3, [pc, #176]	; (11bdc <sw_switch.isra.9+0xbc>)
   11b2a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   11b2e:	b22b      	sxth	r3, r5
   11b30:	00dc      	lsls	r4, r3, #3
   11b32:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11b36:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   11b3a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11b3e:	f105 040b 	add.w	r4, r5, #11
   11b42:	b2e4      	uxtb	r4, r4
   11b44:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   11b46:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11b4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11b4e:	3fc0      	subs	r7, #192	; 0xc0
   11b50:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11b54:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   11b58:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d034      	beq.n	11bca <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   11b60:	f24a 075a 	movw	r7, #41050	; 0xa05a
   11b64:	f649 4040 	movw	r0, #40000	; 0x9c40
   11b68:	2a02      	cmp	r2, #2
   11b6a:	bf0c      	ite	eq
   11b6c:	4602      	moveq	r2, r0
   11b6e:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   11b70:	f242 47b8 	movw	r7, #9400	; 0x24b8
   11b74:	f241 504a 	movw	r0, #5450	; 0x154a
   11b78:	2902      	cmp	r1, #2
   11b7a:	bf18      	it	ne
   11b7c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11b7e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   11b82:	4401      	add	r1, r0
   11b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b88:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11b8c:	4a14      	ldr	r2, [pc, #80]	; (11be0 <sw_switch.isra.9+0xc0>)
   11b8e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11b92:	009b      	lsls	r3, r3, #2
   11b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11b98:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   11b9c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11ba0:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11ba2:	bf8b      	itete	hi
   11ba4:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   11ba8:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11baa:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   11bac:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11bb0:	bf88      	it	hi
   11bb2:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   11bb6:	4b08      	ldr	r3, [pc, #32]	; (11bd8 <sw_switch.isra.9+0xb8>)
   11bb8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11bbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   11bc0:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11bc2:	f003 0301 	and.w	r3, r3, #1
   11bc6:	7033      	strb	r3, [r6, #0]
   11bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11bca:	4a06      	ldr	r2, [pc, #24]	; (11be4 <sw_switch.isra.9+0xc4>)
   11bcc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11bd0:	212d      	movs	r1, #45	; 0x2d
   11bd2:	e7de      	b.n	11b92 <sw_switch.isra.9+0x72>
   11bd4:	200016e4 	.word	0x200016e4
   11bd8:	4001f000 	.word	0x4001f000
   11bdc:	4000110c 	.word	0x4000110c
   11be0:	40001000 	.word	0x40001000
   11be4:	40001004 	.word	0x40001004

00011be8 <isr_radio>:
	if (sfp_radio_isr) {
   11be8:	4b02      	ldr	r3, [pc, #8]	; (11bf4 <isr_radio+0xc>)
   11bea:	681b      	ldr	r3, [r3, #0]
   11bec:	b103      	cbz	r3, 11bf0 <isr_radio+0x8>
		sfp_radio_isr();
   11bee:	4718      	bx	r3
   11bf0:	4770      	bx	lr
   11bf2:	bf00      	nop
   11bf4:	200016e0 	.word	0x200016e0

00011bf8 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   11bf8:	4b06      	ldr	r3, [pc, #24]	; (11c14 <radio_isr_set+0x1c>)
   11bfa:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   11bfc:	4b06      	ldr	r3, [pc, #24]	; (11c18 <radio_isr_set+0x20>)
   11bfe:	2210      	movs	r2, #16
   11c00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11c04:	4b05      	ldr	r3, [pc, #20]	; (11c1c <radio_isr_set+0x24>)
   11c06:	2202      	movs	r2, #2
   11c08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11c0c:	2001      	movs	r0, #1
   11c0e:	f7ef be37 	b.w	1880 <_arch_irq_enable>
   11c12:	bf00      	nop
   11c14:	200016e0 	.word	0x200016e0
   11c18:	40001000 	.word	0x40001000
   11c1c:	e000e100 	.word	0xe000e100

00011c20 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11c28:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11c2a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11c2e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11c32:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11c36:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11c3a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11c3e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11c42:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11c46:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11c4a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11c4e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11c52:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11c56:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11c5a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   11c5e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   11c62:	4770      	bx	lr

00011c64 <radio_reset>:
{
   11c64:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   11c66:	2001      	movs	r0, #1
   11c68:	f7ef fe1a 	bl	18a0 <_arch_irq_disable>
	NRF_RADIO->POWER =
   11c6c:	4b08      	ldr	r3, [pc, #32]	; (11c90 <radio_reset+0x2c>)
   11c6e:	2200      	movs	r2, #0
   11c70:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   11c74:	2201      	movs	r2, #1
   11c76:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11c7a:	4a06      	ldr	r2, [pc, #24]	; (11c94 <radio_reset+0x30>)
   11c7c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   11c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11c82:	f023 0301 	bic.w	r3, r3, #1
   11c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11c8a:	6013      	str	r3, [r2, #0]
   11c8c:	bd08      	pop	{r3, pc}
   11c8e:	bf00      	nop
   11c90:	40001000 	.word	0x40001000
   11c94:	40001774 	.word	0x40001774

00011c98 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11c98:	4b06      	ldr	r3, [pc, #24]	; (11cb4 <radio_phy_set+0x1c>)
	switch (phy) {
   11c9a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   11c9c:	bf0c      	ite	eq
   11c9e:	2204      	moveq	r2, #4
   11ca0:	2203      	movne	r2, #3
   11ca2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11ca6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11caa:	f042 0201 	orr.w	r2, r2, #1
   11cae:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   11cb2:	4770      	bx	lr
   11cb4:	40001000 	.word	0x40001000

00011cb8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   11cb8:	4b01      	ldr	r3, [pc, #4]	; (11cc0 <radio_tx_power_set+0x8>)
   11cba:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   11cbe:	4770      	bx	lr
   11cc0:	40001000 	.word	0x40001000

00011cc4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11cc4:	4b01      	ldr	r3, [pc, #4]	; (11ccc <radio_freq_chan_set+0x8>)
   11cc6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   11cca:	4770      	bx	lr
   11ccc:	40001000 	.word	0x40001000

00011cd0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11cd0:	4b07      	ldr	r3, [pc, #28]	; (11cf0 <radio_whiten_iv_set+0x20>)
   11cd2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11cd6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11cda:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11cde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11ce2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11ce6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11cea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   11cee:	4770      	bx	lr
   11cf0:	40001000 	.word	0x40001000

00011cf4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11cf4:	4a0a      	ldr	r2, [pc, #40]	; (11d20 <radio_aa_set+0x2c>)
   11cf6:	2300      	movs	r3, #0
   11cf8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11cfc:	2301      	movs	r3, #1
   11cfe:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11d02:	78c3      	ldrb	r3, [r0, #3]
   11d04:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11d08:	7843      	ldrb	r3, [r0, #1]
   11d0a:	7881      	ldrb	r1, [r0, #2]
   11d0c:	041b      	lsls	r3, r3, #16
   11d0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11d12:	7801      	ldrb	r1, [r0, #0]
   11d14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11d18:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   11d1c:	4770      	bx	lr
   11d1e:	bf00      	nop
   11d20:	40001000 	.word	0x40001000

00011d24 <radio_pkt_configure>:
	switch (phy) {
   11d24:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11d28:	2b02      	cmp	r3, #2
{
   11d2a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11d2c:	bf0c      	ite	eq
   11d2e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   11d32:	2400      	movne	r4, #0
	if (dc) {
   11d34:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11d36:	f1c0 0308 	rsb	r3, r0, #8
   11d3a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   11d3e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   11d42:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11d46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11d4a:	4a0b      	ldr	r2, [pc, #44]	; (11d78 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   11d4c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11d50:	bf48      	it	mi
   11d52:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   11d56:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11d58:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11d5c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   11d60:	4b06      	ldr	r3, [pc, #24]	; (11d7c <radio_pkt_configure+0x58>)
   11d62:	4003      	ands	r3, r0
   11d64:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   11d68:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11d6c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   11d70:	4319      	orrs	r1, r3
   11d72:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   11d76:	bd10      	pop	{r4, pc}
   11d78:	40001000 	.word	0x40001000
   11d7c:	fef80000 	.word	0xfef80000

00011d80 <radio_pkt_rx_set>:
   11d80:	4b01      	ldr	r3, [pc, #4]	; (11d88 <radio_pkt_rx_set+0x8>)
   11d82:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11d86:	4770      	bx	lr
   11d88:	40001000 	.word	0x40001000

00011d8c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   11d8c:	4b01      	ldr	r3, [pc, #4]	; (11d94 <radio_pkt_tx_set+0x8>)
   11d8e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   11d92:	4770      	bx	lr
   11d94:	40001000 	.word	0x40001000

00011d98 <radio_tx_ready_delay_get>:
	switch (phy) {
   11d98:	2802      	cmp	r0, #2
}
   11d9a:	bf0c      	ite	eq
   11d9c:	2028      	moveq	r0, #40	; 0x28
   11d9e:	2029      	movne	r0, #41	; 0x29
   11da0:	4770      	bx	lr

00011da2 <radio_tx_chain_delay_get>:
}
   11da2:	2001      	movs	r0, #1
   11da4:	4770      	bx	lr

00011da6 <radio_rx_ready_delay_get>:
}
   11da6:	2029      	movs	r0, #41	; 0x29
   11da8:	4770      	bx	lr

00011daa <radio_rx_chain_delay_get>:
	switch (phy) {
   11daa:	2802      	cmp	r0, #2
}
   11dac:	bf0c      	ite	eq
   11dae:	2006      	moveq	r0, #6
   11db0:	200a      	movne	r0, #10
   11db2:	4770      	bx	lr

00011db4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   11db4:	4b01      	ldr	r3, [pc, #4]	; (11dbc <radio_rx_enable+0x8>)
   11db6:	2201      	movs	r2, #1
   11db8:	605a      	str	r2, [r3, #4]
   11dba:	4770      	bx	lr
   11dbc:	40001000 	.word	0x40001000

00011dc0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   11dc0:	4b01      	ldr	r3, [pc, #4]	; (11dc8 <radio_tx_enable+0x8>)
   11dc2:	2201      	movs	r2, #1
   11dc4:	601a      	str	r2, [r3, #0]
   11dc6:	4770      	bx	lr
   11dc8:	40001000 	.word	0x40001000

00011dcc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   11dcc:	4a07      	ldr	r2, [pc, #28]	; (11dec <radio_disable+0x20>)
   11dce:	f44f 6390 	mov.w	r3, #1152	; 0x480
   11dd2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   11dd6:	2301      	movs	r3, #1
   11dd8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   11dda:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   11ddc:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   11de0:	2100      	movs	r1, #0
   11de2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   11de6:	6113      	str	r3, [r2, #16]
   11de8:	4770      	bx	lr
   11dea:	bf00      	nop
   11dec:	4001f000 	.word	0x4001f000

00011df0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11df0:	4b04      	ldr	r3, [pc, #16]	; (11e04 <radio_status_reset+0x14>)
   11df2:	2200      	movs	r2, #0
   11df4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11df8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11dfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   11e00:	4770      	bx	lr
   11e02:	bf00      	nop
   11e04:	40001000 	.word	0x40001000

00011e08 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11e08:	4b03      	ldr	r3, [pc, #12]	; (11e18 <radio_is_ready+0x10>)
   11e0a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11e0e:	3000      	adds	r0, #0
   11e10:	bf18      	it	ne
   11e12:	2001      	movne	r0, #1
   11e14:	4770      	bx	lr
   11e16:	bf00      	nop
   11e18:	40001000 	.word	0x40001000

00011e1c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   11e1c:	4b03      	ldr	r3, [pc, #12]	; (11e2c <radio_is_done+0x10>)
   11e1e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   11e22:	3000      	adds	r0, #0
   11e24:	bf18      	it	ne
   11e26:	2001      	movne	r0, #1
   11e28:	4770      	bx	lr
   11e2a:	bf00      	nop
   11e2c:	40001000 	.word	0x40001000

00011e30 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   11e30:	4b03      	ldr	r3, [pc, #12]	; (11e40 <radio_is_idle+0x10>)
   11e32:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   11e36:	fab0 f080 	clz	r0, r0
   11e3a:	0940      	lsrs	r0, r0, #5
   11e3c:	4770      	bx	lr
   11e3e:	bf00      	nop
   11e40:	40001000 	.word	0x40001000

00011e44 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   11e44:	4b04      	ldr	r3, [pc, #16]	; (11e58 <radio_crc_configure+0x14>)
   11e46:	f240 1203 	movw	r2, #259	; 0x103
   11e4a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   11e4e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   11e52:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   11e56:	4770      	bx	lr
   11e58:	40001000 	.word	0x40001000

00011e5c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   11e5c:	4b03      	ldr	r3, [pc, #12]	; (11e6c <radio_crc_is_valid+0x10>)
   11e5e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11e62:	3000      	adds	r0, #0
   11e64:	bf18      	it	ne
   11e66:	2001      	movne	r0, #1
   11e68:	4770      	bx	lr
   11e6a:	bf00      	nop
   11e6c:	40001000 	.word	0x40001000

00011e70 <radio_pkt_empty_get>:
}
   11e70:	4800      	ldr	r0, [pc, #0]	; (11e74 <radio_pkt_empty_get+0x4>)
   11e72:	4770      	bx	lr
   11e74:	200015d4 	.word	0x200015d4

00011e78 <radio_pkt_scratch_get>:
}
   11e78:	4800      	ldr	r0, [pc, #0]	; (11e7c <radio_pkt_scratch_get+0x4>)
   11e7a:	4770      	bx	lr
   11e7c:	200015d8 	.word	0x200015d8

00011e80 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11e80:	4b04      	ldr	r3, [pc, #16]	; (11e94 <radio_switch_complete_and_rx+0x14>)
   11e82:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   11e84:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11e86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   11e8a:	4602      	mov	r2, r0
   11e8c:	4608      	mov	r0, r1
   11e8e:	f7ff be47 	b.w	11b20 <sw_switch.isra.9>
   11e92:	bf00      	nop
   11e94:	40001000 	.word	0x40001000

00011e98 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   11e98:	4b03      	ldr	r3, [pc, #12]	; (11ea8 <radio_switch_complete_and_tx+0x10>)
   11e9a:	2103      	movs	r1, #3
   11e9c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   11ea0:	4601      	mov	r1, r0
   11ea2:	2001      	movs	r0, #1
   11ea4:	f7ff be3c 	b.w	11b20 <sw_switch.isra.9>
   11ea8:	40001000 	.word	0x40001000

00011eac <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   11eac:	4b05      	ldr	r3, [pc, #20]	; (11ec4 <radio_switch_complete_and_disable+0x18>)
   11eae:	2203      	movs	r2, #3
   11eb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   11eb4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   11eb8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11ebc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   11ec0:	4770      	bx	lr
   11ec2:	bf00      	nop
   11ec4:	40001000 	.word	0x40001000

00011ec8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   11ec8:	4a03      	ldr	r2, [pc, #12]	; (11ed8 <radio_rssi_measure+0x10>)
   11eca:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   11ece:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   11ed2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   11ed6:	4770      	bx	lr
   11ed8:	40001000 	.word	0x40001000

00011edc <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   11edc:	4b01      	ldr	r3, [pc, #4]	; (11ee4 <radio_rssi_get+0x8>)
   11ede:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   11ee2:	4770      	bx	lr
   11ee4:	40001000 	.word	0x40001000

00011ee8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11ee8:	4b02      	ldr	r3, [pc, #8]	; (11ef4 <radio_rssi_status_reset+0xc>)
   11eea:	2200      	movs	r2, #0
   11eec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   11ef0:	4770      	bx	lr
   11ef2:	bf00      	nop
   11ef4:	40001000 	.word	0x40001000

00011ef8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11ef8:	4b03      	ldr	r3, [pc, #12]	; (11f08 <radio_rssi_is_ready+0x10>)
   11efa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11efe:	3000      	adds	r0, #0
   11f00:	bf18      	it	ne
   11f02:	2001      	movne	r0, #1
   11f04:	4770      	bx	lr
   11f06:	bf00      	nop
   11f08:	40001000 	.word	0x40001000

00011f0c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   11f0c:	b530      	push	{r4, r5, lr}
   11f0e:	2400      	movs	r4, #0
   11f10:	00a3      	lsls	r3, r4, #2
   11f12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   11f1a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11f1c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   11f20:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   11f22:	8895      	ldrh	r5, [r2, #4]
   11f24:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   11f28:	2c08      	cmp	r4, #8
		bdaddr += 6;
   11f2a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   11f2e:	d1ef      	bne.n	11f10 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   11f30:	4b02      	ldr	r3, [pc, #8]	; (11f3c <radio_filter_configure+0x30>)
   11f32:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   11f36:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   11f3a:	bd30      	pop	{r4, r5, pc}
   11f3c:	40001000 	.word	0x40001000

00011f40 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   11f40:	4a03      	ldr	r2, [pc, #12]	; (11f50 <radio_filter_disable+0x10>)
   11f42:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11f4a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   11f4e:	4770      	bx	lr
   11f50:	40001000 	.word	0x40001000

00011f54 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11f54:	4b02      	ldr	r3, [pc, #8]	; (11f60 <radio_filter_status_reset+0xc>)
   11f56:	2200      	movs	r2, #0
   11f58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   11f5c:	4770      	bx	lr
   11f5e:	bf00      	nop
   11f60:	40001000 	.word	0x40001000

00011f64 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11f64:	4b03      	ldr	r3, [pc, #12]	; (11f74 <radio_filter_has_match+0x10>)
   11f66:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11f6a:	3000      	adds	r0, #0
   11f6c:	bf18      	it	ne
   11f6e:	2001      	movne	r0, #1
   11f70:	4770      	bx	lr
   11f72:	bf00      	nop
   11f74:	40001000 	.word	0x40001000

00011f78 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   11f78:	4b01      	ldr	r3, [pc, #4]	; (11f80 <radio_filter_match_get+0x8>)
   11f7a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   11f7e:	4770      	bx	lr
   11f80:	40001000 	.word	0x40001000

00011f84 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   11f84:	4b04      	ldr	r3, [pc, #16]	; (11f98 <radio_bc_configure+0x14>)
   11f86:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   11f8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   11f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11f92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   11f96:	4770      	bx	lr
   11f98:	40001000 	.word	0x40001000

00011f9c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   11f9c:	4b05      	ldr	r3, [pc, #20]	; (11fb4 <radio_tmr_status_reset+0x18>)
   11f9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   11fa2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   11fa6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   11faa:	227f      	movs	r2, #127	; 0x7f
   11fac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   11fb0:	4770      	bx	lr
   11fb2:	bf00      	nop
   11fb4:	4000b000 	.word	0x4000b000

00011fb8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   11fb8:	4b03      	ldr	r3, [pc, #12]	; (11fc8 <radio_tmr_tifs_set+0x10>)
   11fba:	4a04      	ldr	r2, [pc, #16]	; (11fcc <radio_tmr_tifs_set+0x14>)
   11fbc:	781b      	ldrb	r3, [r3, #0]
   11fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   11fc2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   11fc6:	4770      	bx	lr
   11fc8:	200016e4 	.word	0x200016e4
   11fcc:	40009000 	.word	0x40009000

00011fd0 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   11fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11fd4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   11fd8:	4c30      	ldr	r4, [pc, #192]	; (1209c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   11fda:	4d31      	ldr	r5, [pc, #196]	; (120a0 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   11fdc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   11fe0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   11fe2:	bf88      	it	hi
   11fe4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   11fe8:	4b2e      	ldr	r3, [pc, #184]	; (120a4 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   11fea:	4c2f      	ldr	r4, [pc, #188]	; (120a8 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   11fec:	bf82      	ittt	hi
   11fee:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   11ff2:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   11ff6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   11ffa:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   11ffc:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12000:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12002:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12004:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12008:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   1200a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1200e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12012:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   12016:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   1201a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1201e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12022:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   12026:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   1202a:	4920      	ldr	r1, [pc, #128]	; (120ac <radio_tmr_start+0xdc>)
   1202c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   12030:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   12034:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12038:	f7ff fd5a 	bl	11af0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   1203c:	4b1c      	ldr	r3, [pc, #112]	; (120b0 <radio_tmr_start+0xe0>)
   1203e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   12040:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12044:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12048:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   1204c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1204e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   12052:	3b74      	subs	r3, #116	; 0x74
   12054:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   12058:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   1205c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12060:	f503 739a 	add.w	r3, r3, #308	; 0x134
   12064:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12068:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1206c:	33c4      	adds	r3, #196	; 0xc4
   1206e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12072:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   12076:	3bc0      	subs	r3, #192	; 0xc0
   12078:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1207c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12080:	33c8      	adds	r3, #200	; 0xc8
   12082:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12086:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1208a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1208e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12092:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   12096:	4628      	mov	r0, r5
   12098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1209c:	7ff0bdbf 	.word	0x7ff0bdbf
   120a0:	000f4240 	.word	0x000f4240
   120a4:	40008000 	.word	0x40008000
   120a8:	4000b000 	.word	0x4000b000
   120ac:	4000b148 	.word	0x4000b148
   120b0:	40009000 	.word	0x40009000

000120b4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   120b4:	4a04      	ldr	r2, [pc, #16]	; (120c8 <radio_tmr_stop+0x14>)
   120b6:	2301      	movs	r3, #1
   120b8:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   120ba:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   120bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   120c0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   120c2:	6113      	str	r3, [r2, #16]
   120c4:	4770      	bx	lr
   120c6:	bf00      	nop
   120c8:	40008000 	.word	0x40008000

000120cc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   120cc:	4b0c      	ldr	r3, [pc, #48]	; (12100 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   120ce:	4a0d      	ldr	r2, [pc, #52]	; (12104 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   120d0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   120d4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   120d8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   120dc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   120e0:	3240      	adds	r2, #64	; 0x40
   120e2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   120e6:	f502 7280 	add.w	r2, r2, #256	; 0x100
   120ea:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   120ee:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   120f2:	3a34      	subs	r2, #52	; 0x34
   120f4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   120f8:	2218      	movs	r2, #24
   120fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   120fe:	4770      	bx	lr
   12100:	40008000 	.word	0x40008000
   12104:	40001104 	.word	0x40001104

00012108 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12108:	4b0b      	ldr	r3, [pc, #44]	; (12138 <radio_tmr_aa_capture+0x30>)
   1210a:	4a0c      	ldr	r2, [pc, #48]	; (1213c <radio_tmr_aa_capture+0x34>)
   1210c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   12110:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12114:	3240      	adds	r2, #64	; 0x40
   12116:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1211a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1211e:	3a3c      	subs	r2, #60	; 0x3c
   12120:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12124:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12128:	3240      	adds	r2, #64	; 0x40
   1212a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1212e:	220c      	movs	r2, #12
   12130:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12134:	4770      	bx	lr
   12136:	bf00      	nop
   12138:	4001f000 	.word	0x4001f000
   1213c:	40001100 	.word	0x40001100

00012140 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12140:	4b01      	ldr	r3, [pc, #4]	; (12148 <radio_tmr_aa_get+0x8>)
   12142:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12146:	4770      	bx	lr
   12148:	40008000 	.word	0x40008000

0001214c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1214c:	4b01      	ldr	r3, [pc, #4]	; (12154 <radio_tmr_aa_save+0x8>)
   1214e:	6018      	str	r0, [r3, #0]
   12150:	4770      	bx	lr
   12152:	bf00      	nop
   12154:	200016dc 	.word	0x200016dc

00012158 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12158:	4b01      	ldr	r3, [pc, #4]	; (12160 <radio_tmr_aa_restore+0x8>)
   1215a:	6818      	ldr	r0, [r3, #0]
   1215c:	4770      	bx	lr
   1215e:	bf00      	nop
   12160:	200016dc 	.word	0x200016dc

00012164 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12164:	4b01      	ldr	r3, [pc, #4]	; (1216c <radio_tmr_ready_get+0x8>)
   12166:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1216a:	4770      	bx	lr
   1216c:	40008000 	.word	0x40008000

00012170 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12170:	4b06      	ldr	r3, [pc, #24]	; (1218c <radio_tmr_end_capture+0x1c>)
   12172:	4a07      	ldr	r2, [pc, #28]	; (12190 <radio_tmr_end_capture+0x20>)
   12174:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12178:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1217c:	323c      	adds	r2, #60	; 0x3c
   1217e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12182:	2220      	movs	r2, #32
   12184:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12188:	4770      	bx	lr
   1218a:	bf00      	nop
   1218c:	4001f000 	.word	0x4001f000
   12190:	4000110c 	.word	0x4000110c

00012194 <radio_tmr_end_get>:
   12194:	4b01      	ldr	r3, [pc, #4]	; (1219c <radio_tmr_end_get+0x8>)
   12196:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1219a:	4770      	bx	lr
   1219c:	40008000 	.word	0x40008000

000121a0 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   121a0:	4b01      	ldr	r3, [pc, #4]	; (121a8 <radio_tmr_tifs_base_get+0x8>)
   121a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   121a6:	4770      	bx	lr
   121a8:	40008000 	.word	0x40008000

000121ac <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   121ac:	4b16      	ldr	r3, [pc, #88]	; (12208 <radio_ccm_rx_pkt_set+0x5c>)
{
   121ae:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   121b0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   121b2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   121b4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   121b8:	4e14      	ldr	r6, [pc, #80]	; (1220c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   121ba:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   121be:	4d14      	ldr	r5, [pc, #80]	; (12210 <radio_ccm_rx_pkt_set+0x64>)
   121c0:	2902      	cmp	r1, #2
   121c2:	bf0c      	ite	eq
   121c4:	4629      	moveq	r1, r5
   121c6:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   121c8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   121cc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   121d0:	4810      	ldr	r0, [pc, #64]	; (12214 <radio_ccm_rx_pkt_set+0x68>)
   121d2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   121d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   121da:	4a0f      	ldr	r2, [pc, #60]	; (12218 <radio_ccm_rx_pkt_set+0x6c>)
   121dc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   121e0:	490e      	ldr	r1, [pc, #56]	; (1221c <radio_ccm_rx_pkt_set+0x70>)
   121e2:	4a0f      	ldr	r2, [pc, #60]	; (12220 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   121e4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   121e8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   121ec:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   121f0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   121f4:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   121f8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   121fc:	2140      	movs	r1, #64	; 0x40
   121fe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   12202:	2201      	movs	r2, #1
   12204:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12206:	bd70      	pop	{r4, r5, r6, pc}
   12208:	4000f000 	.word	0x4000f000
   1220c:	01000001 	.word	0x01000001
   12210:	01010001 	.word	0x01010001
   12214:	200015d8 	.word	0x200015d8
   12218:	200014c8 	.word	0x200014c8
   1221c:	40001104 	.word	0x40001104
   12220:	4001f000 	.word	0x4001f000

00012224 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12224:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12226:	4b0e      	ldr	r3, [pc, #56]	; (12260 <radio_ccm_tx_pkt_set+0x3c>)
   12228:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1222a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1222c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12230:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12234:	4c0b      	ldr	r4, [pc, #44]	; (12264 <radio_ccm_tx_pkt_set+0x40>)
   12236:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1223a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1223e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12242:	4809      	ldr	r0, [pc, #36]	; (12268 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12244:	4909      	ldr	r1, [pc, #36]	; (1226c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12246:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1224a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1224e:	2101      	movs	r1, #1
   12250:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12254:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12258:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   1225c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1225e:	bd10      	pop	{r4, pc}
   12260:	4000f000 	.word	0x4000f000
   12264:	01010000 	.word	0x01010000
   12268:	200015d8 	.word	0x200015d8
   1226c:	200014c8 	.word	0x200014c8

00012270 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12270:	4b0c      	ldr	r3, [pc, #48]	; (122a4 <radio_ccm_is_done+0x34>)
   12272:	2202      	movs	r2, #2
   12274:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12278:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1227c:	b16a      	cbz	r2, 1229a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1227e:	2202      	movs	r2, #2
   12280:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12284:	4a08      	ldr	r2, [pc, #32]	; (122a8 <radio_ccm_is_done+0x38>)
   12286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1228a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1228e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12292:	fab0 f080 	clz	r0, r0
   12296:	0940      	lsrs	r0, r0, #5
   12298:	4770      	bx	lr
		__WFE();
   1229a:	bf20      	wfe
		__SEV();
   1229c:	bf40      	sev
		__WFE();
   1229e:	bf20      	wfe
   122a0:	e7ea      	b.n	12278 <radio_ccm_is_done+0x8>
   122a2:	bf00      	nop
   122a4:	4000f000 	.word	0x4000f000
   122a8:	e000e100 	.word	0xe000e100

000122ac <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   122ac:	4b03      	ldr	r3, [pc, #12]	; (122bc <radio_ccm_mic_is_valid+0x10>)
   122ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   122b2:	3000      	adds	r0, #0
   122b4:	bf18      	it	ne
   122b6:	2001      	movne	r0, #1
   122b8:	4770      	bx	lr
   122ba:	bf00      	nop
   122bc:	4000f000 	.word	0x4000f000

000122c0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   122c0:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   122c2:	4c13      	ldr	r4, [pc, #76]	; (12310 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   122c4:	4d13      	ldr	r5, [pc, #76]	; (12314 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   122c6:	2303      	movs	r3, #3
   122c8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   122cc:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   122d0:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   122d4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   122d8:	3b01      	subs	r3, #1
   122da:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   122de:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   122e0:	4b0d      	ldr	r3, [pc, #52]	; (12318 <radio_ar_configure+0x58>)
   122e2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   122e6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   122e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   122ec:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   122f0:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   122f4:	f7ff fe46 	bl	11f84 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   122f8:	4b08      	ldr	r3, [pc, #32]	; (1231c <radio_ar_configure+0x5c>)
   122fa:	4a09      	ldr	r2, [pc, #36]	; (12320 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   122fc:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12300:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12304:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12306:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1230a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1230e:	bd38      	pop	{r3, r4, r5, pc}
   12310:	4000f000 	.word	0x4000f000
   12314:	40001000 	.word	0x40001000
   12318:	200014c4 	.word	0x200014c4
   1231c:	4001f000 	.word	0x4001f000
   12320:	40001128 	.word	0x40001128

00012324 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12324:	4b01      	ldr	r3, [pc, #4]	; (1232c <radio_ar_match_get+0x8>)
   12326:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1232a:	4770      	bx	lr
   1232c:	4000f000 	.word	0x4000f000

00012330 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12330:	4a04      	ldr	r2, [pc, #16]	; (12344 <radio_ar_status_reset+0x14>)
   12332:	2300      	movs	r3, #0
   12334:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12338:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1233c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12340:	4770      	bx	lr
   12342:	bf00      	nop
   12344:	40001000 	.word	0x40001000

00012348 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12348:	4b08      	ldr	r3, [pc, #32]	; (1236c <radio_ar_has_match+0x24>)
   1234a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1234e:	b160      	cbz	r0, 1236a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12350:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12354:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12358:	b138      	cbz	r0, 1236a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1235a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1235e:	b120      	cbz	r0, 1236a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12360:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12364:	fab0 f080 	clz	r0, r0
   12368:	0940      	lsrs	r0, r0, #5
}
   1236a:	4770      	bx	lr
   1236c:	40001000 	.word	0x40001000

00012370 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12370:	2901      	cmp	r1, #1
{
   12372:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12374:	d00a      	beq.n	1238c <mayfly_enable_cb+0x1c>
   12376:	4a0a      	ldr	r2, [pc, #40]	; (123a0 <mayfly_enable_cb+0x30>)
   12378:	490a      	ldr	r1, [pc, #40]	; (123a4 <mayfly_enable_cb+0x34>)
   1237a:	2003      	movs	r0, #3
   1237c:	f7ef fe2a 	bl	1fd4 <bt_log>
   12380:	4040      	eors	r0, r0
   12382:	f380 8811 	msr	BASEPRI, r0
   12386:	f04f 0004 	mov.w	r0, #4
   1238a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1238c:	2018      	movs	r0, #24
	if (enable) {
   1238e:	b11a      	cbz	r2, 12398 <mayfly_enable_cb+0x28>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
   12394:	f7ef ba74 	b.w	1880 <_arch_irq_enable>
}
   12398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
   1239c:	f7ef ba80 	b.w	18a0 <_arch_irq_disable>
   123a0:	000177e5 	.word	0x000177e5
   123a4:	00017814 	.word	0x00017814

000123a8 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   123a8:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   123aa:	b161      	cbz	r1, 123c6 <mayfly_is_enabled+0x1e>
   123ac:	2901      	cmp	r1, #1
   123ae:	d00f      	beq.n	123d0 <mayfly_is_enabled+0x28>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   123b0:	4a08      	ldr	r2, [pc, #32]	; (123d4 <mayfly_is_enabled+0x2c>)
   123b2:	4909      	ldr	r1, [pc, #36]	; (123d8 <mayfly_is_enabled+0x30>)
   123b4:	2003      	movs	r0, #3
   123b6:	f7ef fe0d 	bl	1fd4 <bt_log>
   123ba:	4040      	eors	r0, r0
   123bc:	f380 8811 	msr	BASEPRI, r0
   123c0:	f04f 0004 	mov.w	r0, #4
   123c4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   123c6:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   123c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
   123cc:	f7ef ba7c 	b.w	18c8 <_arch_irq_is_enabled>
   123d0:	2018      	movs	r0, #24
   123d2:	e7f9      	b.n	123c8 <mayfly_is_enabled+0x20>
   123d4:	000177f6 	.word	0x000177f6
   123d8:	000153a4 	.word	0x000153a4

000123dc <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   123dc:	4288      	cmp	r0, r1
   123de:	d00a      	beq.n	123f6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   123e0:	b918      	cbnz	r0, 123ea <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   123e2:	1e4b      	subs	r3, r1, #1
   123e4:	4258      	negs	r0, r3
   123e6:	4158      	adcs	r0, r3
   123e8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   123ea:	2801      	cmp	r0, #1
   123ec:	d105      	bne.n	123fa <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   123ee:	fab1 f081 	clz	r0, r1
   123f2:	0940      	lsrs	r0, r0, #5
   123f4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   123f6:	2001      	movs	r0, #1
   123f8:	4770      	bx	lr
   123fa:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   123fc:	4770      	bx	lr
	...

00012400 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12400:	b508      	push	{r3, lr}
   12402:	4b0b      	ldr	r3, [pc, #44]	; (12430 <mayfly_pend+0x30>)
	(void)caller_id;

	switch (callee_id) {
   12404:	b161      	cbz	r1, 12420 <mayfly_pend+0x20>
   12406:	2901      	cmp	r1, #1
   12408:	d00f      	beq.n	1242a <mayfly_pend+0x2a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1240a:	4a0a      	ldr	r2, [pc, #40]	; (12434 <mayfly_pend+0x34>)
   1240c:	490a      	ldr	r1, [pc, #40]	; (12438 <mayfly_pend+0x38>)
   1240e:	2003      	movs	r0, #3
   12410:	f7ef fde0 	bl	1fd4 <bt_log>
   12414:	4040      	eors	r0, r0
   12416:	f380 8811 	msr	BASEPRI, r0
   1241a:	f04f 0004 	mov.w	r0, #4
   1241e:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12420:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12424:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12428:	bd08      	pop	{r3, pc}
   1242a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1242e:	e7f9      	b.n	12424 <mayfly_pend+0x24>
   12430:	e000e100 	.word	0xe000e100
   12434:	00017808 	.word	0x00017808
   12438:	000153a4 	.word	0x000153a4

0001243c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1243c:	2803      	cmp	r0, #3
{
   1243e:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12440:	d90a      	bls.n	12458 <hal_ticker_instance0_caller_id_get+0x1c>
   12442:	4a09      	ldr	r2, [pc, #36]	; (12468 <hal_ticker_instance0_caller_id_get+0x2c>)
   12444:	4909      	ldr	r1, [pc, #36]	; (1246c <hal_ticker_instance0_caller_id_get+0x30>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12446:	2003      	movs	r0, #3
   12448:	f7ef fdc4 	bl	1fd4 <bt_log>
   1244c:	4040      	eors	r0, r0
   1244e:	f380 8811 	msr	BASEPRI, r0
   12452:	f04f 0004 	mov.w	r0, #4
   12456:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12458:	4b05      	ldr	r3, [pc, #20]	; (12470 <hal_ticker_instance0_caller_id_get+0x34>)
   1245a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1245c:	b910      	cbnz	r0, 12464 <hal_ticker_instance0_caller_id_get+0x28>
   1245e:	4a02      	ldr	r2, [pc, #8]	; (12468 <hal_ticker_instance0_caller_id_get+0x2c>)
   12460:	4904      	ldr	r1, [pc, #16]	; (12474 <hal_ticker_instance0_caller_id_get+0x38>)
   12462:	e7f0      	b.n	12446 <hal_ticker_instance0_caller_id_get+0xa>

	return caller_id;
}
   12464:	bd08      	pop	{r3, pc}
   12466:	bf00      	nop
   12468:	00017838 	.word	0x00017838
   1246c:	0001787a 	.word	0x0001787a
   12470:	00017876 	.word	0x00017876
   12474:	000178af 	.word	0x000178af

00012478 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12478:	3802      	subs	r0, #2
{
   1247a:	b510      	push	{r4, lr}
   1247c:	461c      	mov	r4, r3
	switch (caller_id) {
   1247e:	2803      	cmp	r0, #3
   12480:	d817      	bhi.n	124b2 <hal_ticker_instance0_sched+0x3a>
   12482:	e8df f000 	tbb	[pc, r0]
   12486:	0c02      	.short	0x0c02
   12488:	2a12      	.short	0x2a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1248a:	2903      	cmp	r1, #3
   1248c:	d111      	bne.n	124b2 <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1248e:	4b16      	ldr	r3, [pc, #88]	; (124e8 <hal_ticker_instance0_sched+0x70>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12490:	2100      	movs	r1, #0
			m.param = instance;
   12492:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12494:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1249a:	f7f4 bfc9 	b.w	7430 <mayfly_enqueue>
		switch (callee_id) {
   1249e:	2904      	cmp	r1, #4
   124a0:	d107      	bne.n	124b2 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   124a2:	4b12      	ldr	r3, [pc, #72]	; (124ec <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   124a4:	2101      	movs	r1, #1
			m.param = instance;
   124a6:	609c      	str	r4, [r3, #8]
   124a8:	e7f4      	b.n	12494 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   124aa:	2903      	cmp	r1, #3
   124ac:	d00c      	beq.n	124c8 <hal_ticker_instance0_sched+0x50>
   124ae:	2904      	cmp	r1, #4
   124b0:	d00f      	beq.n	124d2 <hal_ticker_instance0_sched+0x5a>
		LL_ASSERT(0);
   124b2:	4a0f      	ldr	r2, [pc, #60]	; (124f0 <hal_ticker_instance0_sched+0x78>)
   124b4:	490f      	ldr	r1, [pc, #60]	; (124f4 <hal_ticker_instance0_sched+0x7c>)
   124b6:	2003      	movs	r0, #3
   124b8:	f7ef fd8c 	bl	1fd4 <bt_log>
   124bc:	4040      	eors	r0, r0
   124be:	f380 8811 	msr	BASEPRI, r0
   124c2:	f04f 0004 	mov.w	r0, #4
   124c6:	df02      	svc	2
			m.param = instance;
   124c8:	4b0b      	ldr	r3, [pc, #44]	; (124f8 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   124ca:	2100      	movs	r1, #0
			m.param = instance;
   124cc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   124ce:	2001      	movs	r0, #1
   124d0:	e7e1      	b.n	12496 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   124d2:	4b0a      	ldr	r3, [pc, #40]	; (124fc <hal_ticker_instance0_sched+0x84>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   124d4:	2101      	movs	r1, #1
			m.param = instance;
   124d6:	609c      	str	r4, [r3, #8]
   124d8:	e7f9      	b.n	124ce <hal_ticker_instance0_sched+0x56>
		switch (callee_id) {
   124da:	2904      	cmp	r1, #4
   124dc:	d1e9      	bne.n	124b2 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
   124de:	4b08      	ldr	r3, [pc, #32]	; (12500 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   124e0:	2101      	movs	r1, #1
			m.param = instance;
   124e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   124e4:	2003      	movs	r0, #3
   124e6:	e7d6      	b.n	12496 <hal_ticker_instance0_sched+0x1e>
   124e8:	20003e40 	.word	0x20003e40
   124ec:	20003e50 	.word	0x20003e50
   124f0:	0001785b 	.word	0x0001785b
   124f4:	000153a4 	.word	0x000153a4
   124f8:	20003e60 	.word	0x20003e60
   124fc:	20003e70 	.word	0x20003e70
   12500:	20003e80 	.word	0x20003e80

00012504 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12504:	4601      	mov	r1, r0
   12506:	2000      	movs	r0, #0
   12508:	f7ff baa2 	b.w	11a50 <cntr_cmp_set>

0001250c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1250c:	4770      	bx	lr
	...

00012510 <net_buf_pool_get>:
}
   12510:	4b01      	ldr	r3, [pc, #4]	; (12518 <net_buf_pool_get+0x8>)
   12512:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   12516:	4770      	bx	lr
   12518:	20003f60 	.word	0x20003f60

0001251c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1251c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1251e:	4b04      	ldr	r3, [pc, #16]	; (12530 <net_buf_id+0x14>)
   12520:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12524:	69db      	ldr	r3, [r3, #28]
   12526:	1ac0      	subs	r0, r0, r3
}
   12528:	4b02      	ldr	r3, [pc, #8]	; (12534 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1252a:	10c0      	asrs	r0, r0, #3
}
   1252c:	4358      	muls	r0, r3
   1252e:	4770      	bx	lr
   12530:	20003f60 	.word	0x20003f60
   12534:	aaaaaaab 	.word	0xaaaaaaab

00012538 <fixed_data_alloc>:
{
   12538:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1253a:	4b09      	ldr	r3, [pc, #36]	; (12560 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1253c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1253e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   12542:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12544:	699b      	ldr	r3, [r3, #24]
   12546:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12548:	6823      	ldr	r3, [r4, #0]
   1254a:	429a      	cmp	r2, r3
   1254c:	bf94      	ite	ls
   1254e:	600a      	strls	r2, [r1, #0]
   12550:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12552:	f7ff ffe3 	bl	1251c <net_buf_id>
   12556:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1255a:	fb02 3000 	mla	r0, r2, r0, r3
   1255e:	bd10      	pop	{r4, pc}
   12560:	20003f60 	.word	0x20003f60

00012564 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12568:	4605      	mov	r5, r0
   1256a:	9101      	str	r1, [sp, #4]
   1256c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1256e:	f001 f96f 	bl	13850 <_impl_k_uptime_get_32>
   12572:	4607      	mov	r7, r0
	__asm__ volatile(
   12574:	f04f 0320 	mov.w	r3, #32
   12578:	f3ef 8811 	mrs	r8, BASEPRI
   1257c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12580:	8a6b      	ldrh	r3, [r5, #18]
   12582:	2b00      	cmp	r3, #0
   12584:	d03d      	beq.n	12602 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12586:	8a2a      	ldrh	r2, [r5, #16]
   12588:	429a      	cmp	r2, r3
   1258a:	d92a      	bls.n	125e2 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1258c:	2100      	movs	r1, #0
   1258e:	4628      	mov	r0, r5
   12590:	f000 fe78 	bl	13284 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   12594:	b328      	cbz	r0, 125e2 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12596:	f388 8811 	msr	BASEPRI, r8
   1259a:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1259c:	9b01      	ldr	r3, [sp, #4]
   1259e:	2b00      	cmp	r3, #0
   125a0:	d03c      	beq.n	1261c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   125a2:	1c73      	adds	r3, r6, #1
   125a4:	2b01      	cmp	r3, #1
   125a6:	d906      	bls.n	125b6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   125a8:	f001 f952 	bl	13850 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   125ac:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   125ae:	42b0      	cmp	r0, r6
   125b0:	bf94      	ite	ls
   125b2:	1a36      	subls	r6, r6, r0
   125b4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   125b6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   125b8:	4f1e      	ldr	r7, [pc, #120]	; (12634 <net_buf_alloc_len+0xd0>)
   125ba:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   125be:	4632      	mov	r2, r6
   125c0:	699b      	ldr	r3, [r3, #24]
   125c2:	681b      	ldr	r3, [r3, #0]
   125c4:	a901      	add	r1, sp, #4
   125c6:	681b      	ldr	r3, [r3, #0]
   125c8:	4620      	mov	r0, r4
   125ca:	4798      	blx	r3
   125cc:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   125ce:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   125d0:	bb28      	cbnz	r0, 1261e <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   125d2:	79a0      	ldrb	r0, [r4, #6]
   125d4:	4621      	mov	r1, r4
   125d6:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   125da:	f000 fe34 	bl	13246 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   125de:	462c      	mov	r4, r5
   125e0:	e018      	b.n	12614 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   125e2:	8a68      	ldrh	r0, [r5, #18]
   125e4:	1e43      	subs	r3, r0, #1
   125e6:	826b      	strh	r3, [r5, #18]
   125e8:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   125ec:	8a2c      	ldrh	r4, [r5, #16]
   125ee:	1a24      	subs	r4, r4, r0
   125f0:	69e8      	ldr	r0, [r5, #28]
   125f2:	2318      	movs	r3, #24
   125f4:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   125f8:	4b0e      	ldr	r3, [pc, #56]	; (12634 <net_buf_alloc_len+0xd0>)
   125fa:	1aed      	subs	r5, r5, r3
   125fc:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   125fe:	71a5      	strb	r5, [r4, #6]
		goto success;
   12600:	e7cc      	b.n	1259c <net_buf_alloc_len+0x38>
   12602:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12606:	4631      	mov	r1, r6
   12608:	4628      	mov	r0, r5
   1260a:	f000 fe3b 	bl	13284 <_impl_k_queue_get>
		return NULL;
   1260e:	4604      	mov	r4, r0
	if (!buf) {
   12610:	2800      	cmp	r0, #0
   12612:	d1c3      	bne.n	1259c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12614:	4620      	mov	r0, r4
   12616:	b002      	add	sp, #8
   12618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1261c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1261e:	2301      	movs	r3, #1
   12620:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12622:	2300      	movs	r3, #0
	buf->frags = NULL;
   12624:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12626:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12628:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1262a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1262c:	6923      	ldr	r3, [r4, #16]
   1262e:	81e2      	strh	r2, [r4, #14]
   12630:	60a3      	str	r3, [r4, #8]
	return buf;
   12632:	e7ef      	b.n	12614 <net_buf_alloc_len+0xb0>
   12634:	20003f60 	.word	0x20003f60

00012638 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12638:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1263a:	685b      	ldr	r3, [r3, #4]
   1263c:	460a      	mov	r2, r1
   1263e:	6819      	ldr	r1, [r3, #0]
   12640:	f7ff bf90 	b.w	12564 <net_buf_alloc_len>

00012644 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12644:	b570      	push	{r4, r5, r6, lr}
   12646:	4606      	mov	r6, r0
   12648:	f000 fe1c 	bl	13284 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1264c:	4605      	mov	r5, r0
   1264e:	b128      	cbz	r0, 1265c <net_buf_get+0x18>
   12650:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12652:	7963      	ldrb	r3, [r4, #5]
   12654:	f013 0301 	ands.w	r3, r3, #1
   12658:	d102      	bne.n	12660 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1265a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1265c:	4628      	mov	r0, r5
   1265e:	bd70      	pop	{r4, r5, r6, pc}
   12660:	2100      	movs	r1, #0
   12662:	4630      	mov	r0, r6
   12664:	f000 fe0e 	bl	13284 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12668:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1266a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1266c:	f023 0301 	bic.w	r3, r3, #1
   12670:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12672:	4604      	mov	r4, r0
   12674:	e7ed      	b.n	12652 <net_buf_get+0xe>

00012676 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12676:	6883      	ldr	r3, [r0, #8]
   12678:	4419      	add	r1, r3
   1267a:	6001      	str	r1, [r0, #0]
   1267c:	4770      	bx	lr

0001267e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1267e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12680:	460a      	mov	r2, r1
   12682:	6814      	ldr	r4, [r2, #0]
   12684:	b914      	cbnz	r4, 1268c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12686:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12688:	f000 bde2 	b.w	13250 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1268c:	7953      	ldrb	r3, [r2, #5]
   1268e:	f043 0301 	orr.w	r3, r3, #1
   12692:	7153      	strb	r3, [r2, #5]
   12694:	4622      	mov	r2, r4
   12696:	e7f4      	b.n	12682 <net_buf_put+0x4>

00012698 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1269a:	4d15      	ldr	r5, [pc, #84]	; (126f0 <net_buf_unref+0x58>)
   1269c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1269e:	2600      	movs	r6, #0
	while (buf) {
   126a0:	b904      	cbnz	r4, 126a4 <net_buf_unref+0xc>
   126a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   126a4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   126a6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   126a8:	3b01      	subs	r3, #1
   126aa:	b2db      	uxtb	r3, r3
   126ac:	7123      	strb	r3, [r4, #4]
   126ae:	2b00      	cmp	r3, #0
   126b0:	d1f7      	bne.n	126a2 <net_buf_unref+0xa>
		if (buf->__buf) {
   126b2:	6921      	ldr	r1, [r4, #16]
   126b4:	b159      	cbz	r1, 126ce <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   126b6:	7963      	ldrb	r3, [r4, #5]
   126b8:	079b      	lsls	r3, r3, #30
   126ba:	d407      	bmi.n	126cc <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   126bc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   126be:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   126c2:	4620      	mov	r0, r4
   126c4:	699b      	ldr	r3, [r3, #24]
   126c6:	681b      	ldr	r3, [r3, #0]
   126c8:	689b      	ldr	r3, [r3, #8]
   126ca:	4798      	blx	r3
			buf->__buf = NULL;
   126cc:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   126ce:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   126d0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   126d2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   126d6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   126d8:	695b      	ldr	r3, [r3, #20]
   126da:	b11b      	cbz	r3, 126e4 <net_buf_unref+0x4c>
			pool->destroy(buf);
   126dc:	4620      	mov	r0, r4
   126de:	4798      	blx	r3
{
   126e0:	463c      	mov	r4, r7
   126e2:	e7dd      	b.n	126a0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   126e4:	4621      	mov	r1, r4
   126e6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   126ea:	f000 fdac 	bl	13246 <k_queue_prepend>
   126ee:	e7f7      	b.n	126e0 <net_buf_unref+0x48>
   126f0:	20003f60 	.word	0x20003f60

000126f4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   126f4:	7903      	ldrb	r3, [r0, #4]
   126f6:	3301      	adds	r3, #1
   126f8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   126fa:	4770      	bx	lr

000126fc <net_buf_simple_add>:
	return buf->data + buf->len;
   126fc:	8883      	ldrh	r3, [r0, #4]
   126fe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12700:	4419      	add	r1, r3
   12702:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12704:	18d0      	adds	r0, r2, r3
   12706:	4770      	bx	lr

00012708 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12708:	b430      	push	{r4, r5}
   1270a:	8883      	ldrh	r3, [r0, #4]
   1270c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   1270e:	189d      	adds	r5, r3, r2
   12710:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12712:	18e0      	adds	r0, r4, r3
}
   12714:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12716:	f7ef ba96 	b.w	1c46 <memcpy>

0001271a <net_buf_simple_add_u8>:
   1271a:	8883      	ldrh	r3, [r0, #4]
   1271c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1271e:	b510      	push	{r4, lr}
	buf->len += len;
   12720:	1c5c      	adds	r4, r3, #1
   12722:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12724:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12726:	18d0      	adds	r0, r2, r3
   12728:	bd10      	pop	{r4, pc}

0001272a <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1272a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1272c:	ab02      	add	r3, sp, #8
   1272e:	8884      	ldrh	r4, [r0, #4]
   12730:	f823 1d02 	strh.w	r1, [r3, #-2]!
   12734:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   12736:	1ca2      	adds	r2, r4, #2
   12738:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1273a:	4619      	mov	r1, r3
   1273c:	2202      	movs	r2, #2
   1273e:	1928      	adds	r0, r5, r4
   12740:	f7ef fa81 	bl	1c46 <memcpy>
}
   12744:	b003      	add	sp, #12
   12746:	bd30      	pop	{r4, r5, pc}

00012748 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12748:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1274a:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1274c:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1274e:	4411      	add	r1, r2
	buf->data -= len;
   12750:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12752:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12754:	4618      	mov	r0, r3
   12756:	4770      	bx	lr

00012758 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12758:	8883      	ldrh	r3, [r0, #4]
   1275a:	1a5b      	subs	r3, r3, r1
   1275c:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1275e:	6803      	ldr	r3, [r0, #0]
   12760:	4419      	add	r1, r3
   12762:	6001      	str	r1, [r0, #0]
}
   12764:	4608      	mov	r0, r1
   12766:	4770      	bx	lr

00012768 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12768:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1276a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1276c:	2101      	movs	r1, #1
	val = buf->data[0];
   1276e:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12770:	f7ff fff2 	bl	12758 <net_buf_simple_pull>

	return val;
}
   12774:	4610      	mov	r0, r2
   12776:	bd08      	pop	{r3, pc}

00012778 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12778:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1277a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1277c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1277e:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12780:	f7ff ffea 	bl	12758 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12784:	4610      	mov	r0, r2
   12786:	bd08      	pop	{r3, pc}

00012788 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12788:	6802      	ldr	r2, [r0, #0]
   1278a:	6880      	ldr	r0, [r0, #8]
}
   1278c:	1a10      	subs	r0, r2, r0
   1278e:	4770      	bx	lr

00012790 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12790:	6802      	ldr	r2, [r0, #0]
   12792:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12794:	88c3      	ldrh	r3, [r0, #6]
   12796:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12798:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1279a:	1a9b      	subs	r3, r3, r2
}
   1279c:	1a18      	subs	r0, r3, r0
   1279e:	4770      	bx	lr

000127a0 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   127a0:	6800      	ldr	r0, [r0, #0]
   127a2:	6880      	ldr	r0, [r0, #8]
   127a4:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   127a6:	b941      	cbnz	r1, 127ba <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   127a8:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   127ac:	fa21 f202 	lsr.w	r2, r1, r2
   127b0:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   127b4:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   127b6:	2000      	movs	r0, #0
   127b8:	4770      	bx	lr
		*value = gpio->IN;
   127ba:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   127be:	e7f9      	b.n	127b4 <gpio_nrf5_read+0x14>

000127c0 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   127c0:	6800      	ldr	r0, [r0, #0]
   127c2:	6880      	ldr	r0, [r0, #8]
   127c4:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   127c6:	b949      	cbnz	r1, 127dc <gpio_nrf5_write+0x1c>
   127c8:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   127ca:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   127cc:	b11b      	cbz	r3, 127d6 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   127ce:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   127d2:	2000      	movs	r0, #0
   127d4:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   127d6:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   127da:	e7fa      	b.n	127d2 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   127dc:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   127e0:	e7f7      	b.n	127d2 <gpio_nrf5_write+0x12>

000127e2 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   127e2:	6883      	ldr	r3, [r0, #8]
   127e4:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   127e6:	b172      	cbz	r2, 12806 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   127e8:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   127ea:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   127ec:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   127ee:	b902      	cbnz	r2, 127f2 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   127f0:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   127f2:	2000      	movs	r0, #0
   127f4:	4770      	bx	lr
	parent->next = child;
   127f6:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   127f8:	6858      	ldr	r0, [r3, #4]
   127fa:	4281      	cmp	r1, r0
	list->tail = node;
   127fc:	bf08      	it	eq
   127fe:	605a      	streq	r2, [r3, #4]
   12800:	e00d      	b.n	1281e <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12802:	4602      	mov	r2, r0
   12804:	6800      	ldr	r0, [r0, #0]
   12806:	2800      	cmp	r0, #0
   12808:	d0f3      	beq.n	127f2 <gpio_nrf5_manage_callback+0x10>
   1280a:	4281      	cmp	r1, r0
   1280c:	d1f9      	bne.n	12802 <gpio_nrf5_manage_callback+0x20>
   1280e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12810:	2a00      	cmp	r2, #0
   12812:	d1f0      	bne.n	127f6 <gpio_nrf5_manage_callback+0x14>
   12814:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12816:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12818:	4291      	cmp	r1, r2
   1281a:	d100      	bne.n	1281e <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   1281c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1281e:	2300      	movs	r3, #0
   12820:	600b      	str	r3, [r1, #0]
   12822:	e7e6      	b.n	127f2 <gpio_nrf5_manage_callback+0x10>

00012824 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12824:	4b0c      	ldr	r3, [pc, #48]	; (12858 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12826:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12828:	4d0c      	ldr	r5, [pc, #48]	; (1285c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1282a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1282c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   1282e:	fa24 f203 	lsr.w	r2, r4, r3
   12832:	07d2      	lsls	r2, r2, #31
   12834:	d508      	bpl.n	12848 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12836:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1283a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1283e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12842:	4282      	cmp	r2, r0
   12844:	d100      	bne.n	12848 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12846:	b121      	cbz	r1, 12852 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12848:	3301      	adds	r3, #1
   1284a:	2b08      	cmp	r3, #8
   1284c:	d1ef      	bne.n	1282e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   1284e:	f06f 0312 	mvn.w	r3, #18
}
   12852:	4618      	mov	r0, r3
   12854:	bd30      	pop	{r4, r5, pc}
   12856:	bf00      	nop
   12858:	2000171c 	.word	0x2000171c
   1285c:	40006000 	.word	0x40006000

00012860 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12860:	b570      	push	{r4, r5, r6, lr}
   12862:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12864:	460d      	mov	r5, r1
   12866:	b9c9      	cbnz	r1, 1289c <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12868:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1286a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   1286c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   1286e:	4610      	mov	r0, r2
   12870:	7919      	ldrb	r1, [r3, #4]
   12872:	f7ff ffd7 	bl	12824 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12876:	2800      	cmp	r0, #0
   12878:	db12      	blt.n	128a0 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1287a:	68b2      	ldr	r2, [r6, #8]
   1287c:	2301      	movs	r3, #1
   1287e:	fa03 f404 	lsl.w	r4, r3, r4
   12882:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12884:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12888:	4a06      	ldr	r2, [pc, #24]	; (128a4 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   1288a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   1288c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12890:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12894:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12898:	4628      	mov	r0, r5
   1289a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1289c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   128a0:	bd70      	pop	{r4, r5, r6, pc}
   128a2:	bf00      	nop
   128a4:	40006000 	.word	0x40006000

000128a8 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   128a8:	b570      	push	{r4, r5, r6, lr}
   128aa:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   128ac:	460d      	mov	r5, r1
   128ae:	b9b1      	cbnz	r1, 128de <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   128b0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   128b2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   128b4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   128b6:	4610      	mov	r0, r2
   128b8:	7919      	ldrb	r1, [r3, #4]
   128ba:	f7ff ffb3 	bl	12824 <gpiote_find_channel.isra.4>
		if (i < 0) {
   128be:	2800      	cmp	r0, #0
   128c0:	db0f      	blt.n	128e2 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   128c2:	68b2      	ldr	r2, [r6, #8]
   128c4:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   128c6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   128ca:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   128ce:	4b05      	ldr	r3, [pc, #20]	; (128e4 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   128d0:	ea22 0404 	bic.w	r4, r2, r4
   128d4:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   128d6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   128da:	4628      	mov	r0, r5
   128dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   128de:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   128e2:	bd70      	pop	{r4, r5, r6, pc}
   128e4:	40006000 	.word	0x40006000

000128e8 <gpio_nrf5_config>:
{
   128e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   128ec:	6806      	ldr	r6, [r0, #0]
{
   128ee:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   128f0:	68b2      	ldr	r2, [r6, #8]
   128f2:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   128f4:	b119      	cbz	r1, 128fe <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   128f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   128fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   128fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12902:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   12906:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1290a:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   1290e:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12912:	d058      	beq.n	129c6 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12914:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12918:	bf0c      	ite	eq
   1291a:	2204      	moveq	r2, #4
   1291c:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   1291e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12922:	bf08      	it	eq
   12924:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   12926:	f013 0f01 	tst.w	r3, #1
   1292a:	ea4f 0180 	mov.w	r1, r0, lsl #2
   1292e:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 129fc <gpio_nrf5_config+0x114>
   12932:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   12936:	d04f      	beq.n	129d8 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   12938:	2a0c      	cmp	r2, #12
   1293a:	d146      	bne.n	129ca <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   1293c:	2701      	movs	r7, #1
   1293e:	40a7      	lsls	r7, r4
   12940:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   12944:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   12946:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1294a:	f041 0103 	orr.w	r1, r1, #3
   1294e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   12950:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   12954:	f013 0002 	ands.w	r0, r3, #2
   12958:	d049      	beq.n	129ee <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1295a:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   1295c:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   1295e:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   12962:	d5c8      	bpl.n	128f6 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   12964:	065a      	lsls	r2, r3, #25
   12966:	d43d      	bmi.n	129e4 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   12968:	f013 0f04 	tst.w	r3, #4
   1296c:	bf14      	ite	ne
   1296e:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   12972:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   12976:	4e1f      	ldr	r6, [pc, #124]	; (129f4 <gpio_nrf5_config+0x10c>)
   12978:	6837      	ldr	r7, [r6, #0]
   1297a:	4638      	mov	r0, r7
   1297c:	f7ed fc62 	bl	244 <__popcountsi2>
   12980:	2808      	cmp	r0, #8
   12982:	d032      	beq.n	129ea <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   12984:	4641      	mov	r1, r8
   12986:	4620      	mov	r0, r4
   12988:	f7ff ff4c 	bl	12824 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1298c:	2800      	cmp	r0, #0
   1298e:	da08      	bge.n	129a2 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12990:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12992:	fa93 f0a3 	rbit	r0, r3
   12996:	2b00      	cmp	r3, #0
   12998:	fab0 f080 	clz	r0, r0
   1299c:	bf08      	it	eq
   1299e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   129a2:	2301      	movs	r3, #1
   129a4:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   129a6:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   129a8:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   129aa:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   129ae:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   129b0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   129b4:	4b10      	ldr	r3, [pc, #64]	; (129f8 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   129b6:	f044 0401 	orr.w	r4, r4, #1
   129ba:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   129bc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   129c0:	2000      	movs	r0, #0
   129c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   129c6:	220c      	movs	r2, #12
   129c8:	e7a9      	b.n	1291e <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   129ca:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   129cc:	bf02      	ittt	eq
   129ce:	2701      	moveq	r7, #1
   129d0:	40a7      	lsleq	r7, r4
   129d2:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   129d6:	e7b5      	b.n	12944 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   129d8:	4461      	add	r1, ip
   129da:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   129de:	430a      	orrs	r2, r1
   129e0:	433a      	orrs	r2, r7
   129e2:	e7b5      	b.n	12950 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   129e4:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   129e8:	e7c5      	b.n	12976 <gpio_nrf5_config+0x8e>
			return -EIO;
   129ea:	f06f 0004 	mvn.w	r0, #4
}
   129ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129f2:	bf00      	nop
   129f4:	2000171c 	.word	0x2000171c
   129f8:	40006000 	.word	0x40006000
   129fc:	000178e0 	.word	0x000178e0

00012a00 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   12a00:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   12a02:	2200      	movs	r2, #0
   12a04:	2105      	movs	r1, #5
   12a06:	2006      	movs	r0, #6
   12a08:	f7ee ff6c 	bl	18e4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   12a0c:	2006      	movs	r0, #6
   12a0e:	f7ee ff37 	bl	1880 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   12a12:	2000      	movs	r0, #0
   12a14:	bd08      	pop	{r3, pc}
	...

00012a18 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12a18:	2100      	movs	r1, #0
{
   12a1a:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   12a1c:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   12a1e:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   12a20:	2501      	movs	r5, #1
   12a22:	008b      	lsls	r3, r1, #2
   12a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12a28:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   12a2c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   12a30:	b140      	cbz	r0, 12a44 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12a32:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   12a36:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12a3a:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   12a3e:	fa05 f303 	lsl.w	r3, r5, r3
   12a42:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12a44:	3101      	adds	r1, #1
   12a46:	2908      	cmp	r1, #8
   12a48:	d1eb      	bne.n	12a22 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   12a4a:	4e08      	ldr	r6, [pc, #32]	; (12a6c <gpio_nrf5_port_isr+0x54>)
   12a4c:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   12a4e:	689d      	ldr	r5, [r3, #8]
   12a50:	681c      	ldr	r4, [r3, #0]
   12a52:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   12a54:	b14c      	cbz	r4, 12a6a <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   12a56:	68a3      	ldr	r3, [r4, #8]
   12a58:	421d      	tst	r5, r3
   12a5a:	d004      	beq.n	12a66 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   12a5c:	6863      	ldr	r3, [r4, #4]
   12a5e:	462a      	mov	r2, r5
   12a60:	4621      	mov	r1, r4
   12a62:	4630      	mov	r0, r6
   12a64:	4798      	blx	r3
	return node->next;
   12a66:	6824      	ldr	r4, [r4, #0]
   12a68:	e7f4      	b.n	12a54 <gpio_nrf5_port_isr+0x3c>
   12a6a:	bd70      	pop	{r4, r5, r6, pc}
   12a6c:	20003f08 	.word	0x20003f08

00012a70 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a70:	4b03      	ldr	r3, [pc, #12]	; (12a80 <uart_nrfx_err_check+0x10>)
   12a72:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   12a74:	b118      	cbz	r0, 12a7e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12a76:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   12a7a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   12a7e:	4770      	bx	lr
   12a80:	40002124 	.word	0x40002124

00012a84 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a84:	4b07      	ldr	r3, [pc, #28]	; (12aa4 <uart_nrfx_poll_out+0x20>)
   12a86:	2200      	movs	r2, #0
   12a88:	601a      	str	r2, [r3, #0]
{
   12a8a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12a8c:	681a      	ldr	r2, [r3, #0]
   12a8e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12a90:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   12a92:	4a05      	ldr	r2, [pc, #20]	; (12aa8 <uart_nrfx_poll_out+0x24>)
   12a94:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a98:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   12a9a:	2a00      	cmp	r2, #0
   12a9c:	d0fc      	beq.n	12a98 <uart_nrfx_poll_out+0x14>
}
   12a9e:	4608      	mov	r0, r1
   12aa0:	b002      	add	sp, #8
   12aa2:	4770      	bx	lr
   12aa4:	4000211c 	.word	0x4000211c
   12aa8:	40002000 	.word	0x40002000

00012aac <uart_nrfx_poll_in>:
   12aac:	4b08      	ldr	r3, [pc, #32]	; (12ad0 <uart_nrfx_poll_in+0x24>)
   12aae:	681a      	ldr	r2, [r3, #0]
{
   12ab0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   12ab2:	b152      	cbz	r2, 12aca <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12ab4:	2000      	movs	r0, #0
   12ab6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12ab8:	681b      	ldr	r3, [r3, #0]
   12aba:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12abc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   12abe:	4b05      	ldr	r3, [pc, #20]	; (12ad4 <uart_nrfx_poll_in+0x28>)
   12ac0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   12ac4:	700b      	strb	r3, [r1, #0]
}
   12ac6:	b002      	add	sp, #8
   12ac8:	4770      	bx	lr
		return -1;
   12aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ace:	e7fa      	b.n	12ac6 <uart_nrfx_poll_in+0x1a>
   12ad0:	40002108 	.word	0x40002108
   12ad4:	40002000 	.word	0x40002000

00012ad8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   12ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   12ada:	4819      	ldr	r0, [pc, #100]	; (12b40 <uart_nrfx_init+0x68>)
   12adc:	f000 f98c 	bl	12df8 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   12ae0:	6843      	ldr	r3, [r0, #4]
   12ae2:	4604      	mov	r4, r0
   12ae4:	681d      	ldr	r5, [r3, #0]
   12ae6:	2206      	movs	r2, #6
   12ae8:	f240 1301 	movw	r3, #257	; 0x101
   12aec:	2100      	movs	r1, #0
   12aee:	47a8      	blx	r5
   12af0:	6863      	ldr	r3, [r4, #4]
   12af2:	681d      	ldr	r5, [r3, #0]
   12af4:	2300      	movs	r3, #0
   12af6:	4619      	mov	r1, r3
   12af8:	2208      	movs	r2, #8
   12afa:	4620      	mov	r0, r4
   12afc:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   12afe:	4b11      	ldr	r3, [pc, #68]	; (12b44 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b00:	4911      	ldr	r1, [pc, #68]	; (12b48 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   12b02:	2208      	movs	r2, #8
   12b04:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   12b08:	2206      	movs	r2, #6
   12b0a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12b0e:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12b10:	4a0e      	ldr	r2, [pc, #56]	; (12b4c <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12b12:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   12b16:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12b1a:	2204      	movs	r2, #4
   12b1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b20:	4a0b      	ldr	r2, [pc, #44]	; (12b50 <uart_nrfx_init+0x78>)
   12b22:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12b24:	6812      	ldr	r2, [r2, #0]
   12b26:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12b28:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b2a:	4a0a      	ldr	r2, [pc, #40]	; (12b54 <uart_nrfx_init+0x7c>)
   12b2c:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12b2e:	6812      	ldr	r2, [r2, #0]
   12b30:	9200      	str	r2, [sp, #0]
    (void)dummy;
   12b32:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b34:	2201      	movs	r2, #1
   12b36:	600a      	str	r2, [r1, #0]
   12b38:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   12b3a:	b003      	add	sp, #12
   12b3c:	bd30      	pop	{r4, r5, pc}
   12b3e:	bf00      	nop
   12b40:	00017944 	.word	0x00017944
   12b44:	40002000 	.word	0x40002000
   12b48:	40002008 	.word	0x40002008
   12b4c:	01d7e000 	.word	0x01d7e000
   12b50:	4000211c 	.word	0x4000211c
   12b54:	40002108 	.word	0x40002108

00012b58 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   12b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   12b5c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   12b5e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   12b60:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   12b62:	42a3      	cmp	r3, r4
	d = &rand[octets];
   12b64:	440a      	add	r2, r1
	s = &rng->rand[first];
   12b66:	4406      	add	r6, r0
	if (first <= last) {
   12b68:	d81f      	bhi.n	12baa <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   12b6a:	1ae4      	subs	r4, r4, r3
   12b6c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   12b6e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   12b70:	bf3e      	ittt	cc
   12b72:	1a64      	subcc	r4, r4, r1
   12b74:	b2e7      	uxtbcc	r7, r4
   12b76:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   12b78:	4423      	add	r3, r4
		octets -= avail;
   12b7a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   12b7e:	bf28      	it	cs
   12b80:	2700      	movcs	r7, #0
		first += avail;
   12b82:	b2db      	uxtb	r3, r3
		octets -= avail;
   12b84:	b2c9      	uxtb	r1, r1
   12b86:	4434      	add	r4, r6

		while (avail--) {
   12b88:	42a6      	cmp	r6, r4
   12b8a:	d109      	bne.n	12ba0 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   12b8c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   12b8e:	7843      	ldrb	r3, [r0, #1]
   12b90:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   12b92:	bf82      	ittt	hi
   12b94:	4b20      	ldrhi	r3, [pc, #128]	; (12c18 <get+0xc0>)
   12b96:	2201      	movhi	r2, #1
   12b98:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   12b9a:	4608      	mov	r0, r1
   12b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   12ba0:	f816 5b01 	ldrb.w	r5, [r6], #1
   12ba4:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12ba8:	e7ee      	b.n	12b88 <get+0x30>
		avail = rng->count - first;
   12baa:	7805      	ldrb	r5, [r0, #0]
   12bac:	1aed      	subs	r5, r5, r3
   12bae:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   12bb0:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   12bb2:	bf3f      	itttt	cc
   12bb4:	1a67      	subcc	r7, r4, r1
   12bb6:	19ed      	addcc	r5, r5, r7
   12bb8:	b2ef      	uxtbcc	r7, r5
   12bba:	460d      	movcc	r5, r1
			first += avail;
   12bbc:	bf38      	it	cc
   12bbe:	185b      	addcc	r3, r3, r1
		octets -= avail;
   12bc0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   12bc4:	bf32      	itee	cc
   12bc6:	b2db      	uxtbcc	r3, r3
   12bc8:	4627      	movcs	r7, r4
			first = 0;
   12bca:	2300      	movcs	r3, #0
		octets -= avail;
   12bcc:	b2c9      	uxtb	r1, r1
   12bce:	4696      	mov	lr, r2
   12bd0:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   12bd4:	4566      	cmp	r6, ip
   12bd6:	d119      	bne.n	12c0c <get+0xb4>
   12bd8:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   12bda:	2900      	cmp	r1, #0
   12bdc:	d0d6      	beq.n	12b8c <get+0x34>
   12bde:	2c00      	cmp	r4, #0
   12be0:	d0d4      	beq.n	12b8c <get+0x34>
			if (octets < last) {
   12be2:	428c      	cmp	r4, r1
   12be4:	bf8a      	itet	hi
   12be6:	460b      	movhi	r3, r1
   12be8:	4623      	movls	r3, r4
				remaining = last - octets;
   12bea:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   12bec:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   12bf0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   12bf4:	bf8c      	ite	hi
   12bf6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   12bf8:	2700      	movls	r7, #0
			octets -= last;
   12bfa:	b2c9      	uxtb	r1, r1
   12bfc:	18f4      	adds	r4, r6, r3
			while (last--) {
   12bfe:	42a6      	cmp	r6, r4
   12c00:	d0c4      	beq.n	12b8c <get+0x34>
				*(--d) = *s++;
   12c02:	f816 5b01 	ldrb.w	r5, [r6], #1
   12c06:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12c0a:	e7f8      	b.n	12bfe <get+0xa6>
			*(--d) = *s++;
   12c0c:	f816 8b01 	ldrb.w	r8, [r6], #1
   12c10:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   12c14:	e7de      	b.n	12bd4 <get+0x7c>
   12c16:	bf00      	nop
   12c18:	4000d000 	.word	0x4000d000

00012c1c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   12c1c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   12c1e:	b1d0      	cbz	r0, 12c56 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   12c20:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   12c22:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   12c24:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   12c26:	1c53      	adds	r3, r2, #1
   12c28:	b2db      	uxtb	r3, r3
		last = 0;
   12c2a:	42ab      	cmp	r3, r5
   12c2c:	bf08      	it	eq
   12c2e:	2300      	moveq	r3, #0
	if (last == rng->first) {
   12c30:	42a3      	cmp	r3, r4
   12c32:	d010      	beq.n	12c56 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   12c34:	b161      	cbz	r1, 12c50 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   12c36:	490a      	ldr	r1, [pc, #40]	; (12c60 <isr+0x44>)
   12c38:	4402      	add	r2, r0
   12c3a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   12c3e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   12c40:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   12c42:	3301      	adds	r3, #1
   12c44:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   12c46:	429d      	cmp	r5, r3
   12c48:	bf08      	it	eq
   12c4a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   12c4c:	42a3      	cmp	r3, r4
   12c4e:	d005      	beq.n	12c5c <isr+0x40>
		return 0;
	}

	return -EBUSY;
   12c50:	f06f 000f 	mvn.w	r0, #15
   12c54:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   12c56:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12c5a:	bd30      	pop	{r4, r5, pc}
		return 0;
   12c5c:	2000      	movs	r0, #0
}
   12c5e:	bd30      	pop	{r4, r5, pc}
   12c60:	4000d000 	.word	0x4000d000

00012c64 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   12c64:	07db      	lsls	r3, r3, #31
{
   12c66:	b570      	push	{r4, r5, r6, lr}
   12c68:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   12c6a:	d507      	bpl.n	12c7c <entropy_nrf5_get_entropy_isr+0x18>
   12c6c:	4613      	mov	r3, r2
   12c6e:	4a0d      	ldr	r2, [pc, #52]	; (12ca4 <entropy_nrf5_get_entropy_isr+0x40>)
   12c70:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   12c72:	2500      	movs	r5, #0
	while (len) {
   12c74:	b94b      	cbnz	r3, 12c8a <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   12c76:	6050      	str	r0, [r2, #4]

	return cnt;
   12c78:	4620      	mov	r0, r4
}
   12c7a:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   12c7c:	6880      	ldr	r0, [r0, #8]
   12c7e:	460a      	mov	r2, r1
   12c80:	303c      	adds	r0, #60	; 0x3c
   12c82:	b2e1      	uxtb	r1, r4
   12c84:	f7ff ff68 	bl	12b58 <get>
   12c88:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   12c8a:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   12c8e:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   12c90:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   12c94:	2e00      	cmp	r6, #0
   12c96:	d0fb      	beq.n	12c90 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   12c98:	3b01      	subs	r3, #1
   12c9a:	b29b      	uxth	r3, r3
   12c9c:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   12ca0:	54ce      	strb	r6, [r1, r3]
   12ca2:	e7e7      	b.n	12c74 <entropy_nrf5_get_entropy_isr+0x10>
   12ca4:	4000d000 	.word	0x4000d000

00012ca8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   12ca8:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12caa:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   12cac:	2201      	movs	r2, #1
   12cae:	4611      	mov	r1, r2
   12cb0:	4620      	mov	r0, r4
   12cb2:	f000 fd7f 	bl	137b4 <_impl_k_sem_init>
   12cb6:	f104 0018 	add.w	r0, r4, #24
   12cba:	2201      	movs	r2, #1
   12cbc:	2100      	movs	r1, #0
   12cbe:	f000 fd79 	bl	137b4 <_impl_k_sem_init>
	rng->threshold = threshold;
   12cc2:	2304      	movs	r3, #4
   12cc4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   12cc8:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   12cca:	2500      	movs	r5, #0
	rng->threshold = threshold;
   12ccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   12cd0:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12cd2:	4b11      	ldr	r3, [pc, #68]	; (12d18 <entropy_nrf5_init+0x70>)
	rng->count = len;
   12cd4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   12cd8:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   12cda:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   12cde:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   12ce2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   12ce6:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   12cea:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12cee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   12cf2:	f042 0201 	orr.w	r2, r2, #1
   12cf6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12cfa:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   12cfc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12d00:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   12d02:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   12d06:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   12d08:	462a      	mov	r2, r5
   12d0a:	f7ee fdeb 	bl	18e4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   12d0e:	4630      	mov	r0, r6
   12d10:	f7ee fdb6 	bl	1880 <_arch_irq_enable>

	return 0;
}
   12d14:	4628      	mov	r0, r5
   12d16:	bd70      	pop	{r4, r5, r6, pc}
   12d18:	4000d000 	.word	0x4000d000

00012d1c <isr_rand>:
{
   12d1c:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   12d1e:	4b12      	ldr	r3, [pc, #72]	; (12d68 <isr_rand+0x4c>)
   12d20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   12d24:	b1fb      	cbz	r3, 12d66 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12d26:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   12d28:	2101      	movs	r1, #1
   12d2a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   12d2e:	f7ff ff75 	bl	12c1c <isr>
		if (ret != -EBUSY) {
   12d32:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   12d36:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   12d38:	d00d      	beq.n	12d56 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   12d3a:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   12d3e:	bf14      	ite	ne
   12d40:	2100      	movne	r1, #0
   12d42:	2101      	moveq	r1, #1
   12d44:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12d48:	f7ff ff68 	bl	12c1c <isr>
   12d4c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   12d4e:	f105 0018 	add.w	r0, r5, #24
   12d52:	f000 fd38 	bl	137c6 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   12d56:	4b04      	ldr	r3, [pc, #16]	; (12d68 <isr_rand+0x4c>)
   12d58:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   12d5a:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   12d5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   12d60:	bf1c      	itt	ne
   12d62:	2201      	movne	r2, #1
   12d64:	605a      	strne	r2, [r3, #4]
   12d66:	bd38      	pop	{r3, r4, r5, pc}
   12d68:	4000d000 	.word	0x4000d000

00012d6c <entropy_nrf5_get_entropy>:
{
   12d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12d70:	6885      	ldr	r5, [r0, #8]
{
   12d72:	460f      	mov	r7, r1
   12d74:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   12d76:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   12d7a:	b914      	cbnz	r4, 12d82 <entropy_nrf5_get_entropy+0x16>
}
   12d7c:	4620      	mov	r0, r4
   12d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d82:	2cff      	cmp	r4, #255	; 0xff
   12d84:	4623      	mov	r3, r4
   12d86:	bf28      	it	cs
   12d88:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   12d8a:	1ae4      	subs	r4, r4, r3
   12d8c:	b2de      	uxtb	r6, r3
   12d8e:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   12d90:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   12d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12d98:	4628      	mov	r0, r5
   12d9a:	f000 fd3c 	bl	13816 <_impl_k_sem_take>
   12d9e:	4631      	mov	r1, r6
   12da0:	463a      	mov	r2, r7
   12da2:	4648      	mov	r0, r9
   12da4:	f7ff fed8 	bl	12b58 <get>
   12da8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   12daa:	4628      	mov	r0, r5
   12dac:	f000 fd0b 	bl	137c6 <_impl_k_sem_give>
			if (len8) {
   12db0:	2e00      	cmp	r6, #0
   12db2:	d0e2      	beq.n	12d7a <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   12db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12db8:	4640      	mov	r0, r8
   12dba:	f000 fd2c 	bl	13816 <_impl_k_sem_take>
   12dbe:	e7e9      	b.n	12d94 <entropy_nrf5_get_entropy+0x28>

00012dc0 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   12dc0:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   12dc2:	4802      	ldr	r0, [pc, #8]	; (12dcc <entropy_nrf_get_entropy_isr+0xc>)
   12dc4:	460a      	mov	r2, r1
   12dc6:	4619      	mov	r1, r3
   12dc8:	f7ff bec6 	b.w	12b58 <get>
   12dcc:	2000175c 	.word	0x2000175c

00012dd0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   12dd0:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   12dd2:	4b08      	ldr	r3, [pc, #32]	; (12df4 <_sys_device_do_config_level+0x24>)
   12dd4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   12dd8:	3001      	adds	r0, #1
   12dda:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   12dde:	4620      	mov	r0, r4
   12de0:	42a8      	cmp	r0, r5
   12de2:	f104 040c 	add.w	r4, r4, #12
   12de6:	d300      	bcc.n	12dea <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   12de8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   12dea:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   12dee:	685b      	ldr	r3, [r3, #4]
   12df0:	4798      	blx	r3
   12df2:	e7f4      	b.n	12dde <_sys_device_do_config_level+0xe>
   12df4:	00017960 	.word	0x00017960

00012df8 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   12df8:	4b10      	ldr	r3, [pc, #64]	; (12e3c <device_get_binding+0x44>)
{
   12dfa:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   12dfc:	4c10      	ldr	r4, [pc, #64]	; (12e40 <device_get_binding+0x48>)
{
   12dfe:	4605      	mov	r5, r0
   12e00:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   12e02:	429c      	cmp	r4, r3
   12e04:	d104      	bne.n	12e10 <device_get_binding+0x18>
   12e06:	4c0e      	ldr	r4, [pc, #56]	; (12e40 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   12e08:	42b4      	cmp	r4, r6
   12e0a:	d109      	bne.n	12e20 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   12e0c:	2400      	movs	r4, #0
   12e0e:	e012      	b.n	12e36 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   12e10:	6862      	ldr	r2, [r4, #4]
   12e12:	b11a      	cbz	r2, 12e1c <device_get_binding+0x24>
   12e14:	6822      	ldr	r2, [r4, #0]
   12e16:	6812      	ldr	r2, [r2, #0]
   12e18:	42aa      	cmp	r2, r5
   12e1a:	d00c      	beq.n	12e36 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   12e1c:	340c      	adds	r4, #12
   12e1e:	e7f0      	b.n	12e02 <device_get_binding+0xa>
		if (!info->driver_api) {
   12e20:	6863      	ldr	r3, [r4, #4]
   12e22:	b90b      	cbnz	r3, 12e28 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   12e24:	340c      	adds	r4, #12
   12e26:	e7ef      	b.n	12e08 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   12e28:	6823      	ldr	r3, [r4, #0]
   12e2a:	4628      	mov	r0, r5
   12e2c:	6819      	ldr	r1, [r3, #0]
   12e2e:	f7ee fee8 	bl	1c02 <strcmp>
   12e32:	2800      	cmp	r0, #0
   12e34:	d1f6      	bne.n	12e24 <device_get_binding+0x2c>
}
   12e36:	4620      	mov	r0, r4
   12e38:	bd70      	pop	{r4, r5, r6, pc}
   12e3a:	bf00      	nop
   12e3c:	20003f38 	.word	0x20003f38
   12e40:	20003e9c 	.word	0x20003e9c

00012e44 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   12e44:	1c43      	adds	r3, r0, #1
   12e46:	d003      	beq.n	12e50 <_sys_power_save_idle_exit+0xc>
   12e48:	4b03      	ldr	r3, [pc, #12]	; (12e58 <_sys_power_save_idle_exit+0x14>)
   12e4a:	681b      	ldr	r3, [r3, #0]
   12e4c:	4298      	cmp	r0, r3
   12e4e:	db01      	blt.n	12e54 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   12e50:	f7ee bade 	b.w	1410 <_timer_idle_exit>
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop
   12e58:	20003e90 	.word	0x20003e90

00012e5c <idle>:
	return list->head == list;
   12e5c:	4d0f      	ldr	r5, [pc, #60]	; (12e9c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12e5e:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   12e60:	4f0f      	ldr	r7, [pc, #60]	; (12ea0 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12e62:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   12e66:	f04f 0220 	mov.w	r2, #32
   12e6a:	f3ef 8311 	mrs	r3, BASEPRI
   12e6e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   12e72:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12e74:	42b3      	cmp	r3, r6
   12e76:	d00a      	beq.n	12e8e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   12e78:	b14b      	cbz	r3, 12e8e <idle+0x32>
   12e7a:	691c      	ldr	r4, [r3, #16]
   12e7c:	1c63      	adds	r3, r4, #1
   12e7e:	d008      	beq.n	12e92 <idle+0x36>
   12e80:	683b      	ldr	r3, [r7, #0]
   12e82:	42a3      	cmp	r3, r4
   12e84:	dd05      	ble.n	12e92 <idle+0x36>
	_kernel.idle = ticks;
   12e86:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   12e88:	f7ee fd82 	bl	1990 <k_cpu_idle>
   12e8c:	e7eb      	b.n	12e66 <idle+0xa>
   12e8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   12e92:	4620      	mov	r0, r4
   12e94:	f7ee fa9e 	bl	13d4 <_timer_idle_enter>
   12e98:	e7f5      	b.n	12e86 <idle+0x2a>
   12e9a:	bf00      	nop
   12e9c:	20001970 	.word	0x20001970
   12ea0:	20003e90 	.word	0x20003e90

00012ea4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   12ea4:	4802      	ldr	r0, [pc, #8]	; (12eb0 <_bss_zero+0xc>)
   12ea6:	4a03      	ldr	r2, [pc, #12]	; (12eb4 <_bss_zero+0x10>)
   12ea8:	2100      	movs	r1, #0
   12eaa:	1a12      	subs	r2, r2, r0
   12eac:	f7ee bef7 	b.w	1c9e <memset>
   12eb0:	20000000 	.word	0x20000000
   12eb4:	20001a30 	.word	0x20001a30

00012eb8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   12eb8:	4802      	ldr	r0, [pc, #8]	; (12ec4 <_data_copy+0xc>)
   12eba:	4a03      	ldr	r2, [pc, #12]	; (12ec8 <_data_copy+0x10>)
   12ebc:	4903      	ldr	r1, [pc, #12]	; (12ecc <_data_copy+0x14>)
   12ebe:	1a12      	subs	r2, r2, r0
   12ec0:	f7ee bec1 	b.w	1c46 <memcpy>
   12ec4:	20003a48 	.word	0x20003a48
   12ec8:	20003fe0 	.word	0x20003fe0
   12ecc:	000179b0 	.word	0x000179b0

00012ed0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   12ed0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12ed2:	2002      	movs	r0, #2
   12ed4:	f7ff ff7c 	bl	12dd0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   12ed8:	4807      	ldr	r0, [pc, #28]	; (12ef8 <bg_thread_main+0x28>)
   12eda:	f7ee f857 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   12ede:	2003      	movs	r0, #3
   12ee0:	f7ff ff76 	bl	12dd0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   12ee4:	f000 feaa 	bl	13c3c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12ee8:	f7ed fbea 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   12eec:	4a03      	ldr	r2, [pc, #12]	; (12efc <bg_thread_main+0x2c>)
   12eee:	7a13      	ldrb	r3, [r2, #8]
   12ef0:	f023 0301 	bic.w	r3, r3, #1
   12ef4:	7213      	strb	r3, [r2, #8]
   12ef6:	bd08      	pop	{r3, pc}
   12ef8:	0001797c 	.word	0x0001797c
   12efc:	200017e0 	.word	0x200017e0

00012f00 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   12f00:	b580      	push	{r7, lr}
   12f02:	b086      	sub	sp, #24
   12f04:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   12f06:	f7ee fb07 	bl	1518 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   12f0a:	4b30      	ldr	r3, [pc, #192]	; (12fcc <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12f0c:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f10:	4b2f      	ldr	r3, [pc, #188]	; (12fd0 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   12f12:	4d30      	ldr	r5, [pc, #192]	; (12fd4 <_Cstart+0xd4>)
   12f14:	4e30      	ldr	r6, [pc, #192]	; (12fd8 <_Cstart+0xd8>)
   12f16:	2400      	movs	r4, #0
   12f18:	22e0      	movs	r2, #224	; 0xe0
   12f1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   12f1e:	77dc      	strb	r4, [r3, #31]
   12f20:	761c      	strb	r4, [r3, #24]
   12f22:	765c      	strb	r4, [r3, #25]
   12f24:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12f28:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   12f2c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   12f2e:	f7ee fc9f 	bl	1870 <_FaultInit>
	_CpuIdleInit();
   12f32:	f7ee fd27 	bl	1984 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12f36:	4620      	mov	r0, r4
   12f38:	f7ff ff4a 	bl	12dd0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12f3c:	2001      	movs	r0, #1
   12f3e:	f7ff ff47 	bl	12dd0 <_sys_device_do_config_level>
	_sched_init();
   12f42:	f000 fbf9 	bl	13738 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   12f46:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   12f48:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   12f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12f4e:	9304      	str	r3, [sp, #16]
   12f50:	9403      	str	r4, [sp, #12]
   12f52:	9402      	str	r4, [sp, #8]
   12f54:	9401      	str	r4, [sp, #4]
   12f56:	9400      	str	r4, [sp, #0]
   12f58:	4b20      	ldr	r3, [pc, #128]	; (12fdc <_Cstart+0xdc>)
   12f5a:	4921      	ldr	r1, [pc, #132]	; (12fe0 <_Cstart+0xe0>)
   12f5c:	4628      	mov	r0, r5
   12f5e:	f000 fe15 	bl	13b8c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12f62:	7a6b      	ldrb	r3, [r5, #9]
   12f64:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   12f68:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12f6c:	726a      	strb	r2, [r5, #9]
   12f6e:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   12f70:	d102      	bne.n	12f78 <_Cstart+0x78>
   12f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12f74:	3301      	adds	r3, #1
   12f76:	d024      	beq.n	12fc2 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   12f78:	2301      	movs	r3, #1
   12f7a:	4e1a      	ldr	r6, [pc, #104]	; (12fe4 <_Cstart+0xe4>)
   12f7c:	9304      	str	r3, [sp, #16]
   12f7e:	230f      	movs	r3, #15
   12f80:	9303      	str	r3, [sp, #12]
   12f82:	2300      	movs	r3, #0
   12f84:	9302      	str	r3, [sp, #8]
   12f86:	9301      	str	r3, [sp, #4]
   12f88:	9300      	str	r3, [sp, #0]
   12f8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12f8e:	4b16      	ldr	r3, [pc, #88]	; (12fe8 <_Cstart+0xe8>)
   12f90:	4916      	ldr	r1, [pc, #88]	; (12fec <_Cstart+0xec>)
   12f92:	4630      	mov	r0, r6
   12f94:	f000 fdfa 	bl	13b8c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12f98:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   12f9a:	60e6      	str	r6, [r4, #12]
   12f9c:	f023 0304 	bic.w	r3, r3, #4
   12fa0:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   12fa2:	4b13      	ldr	r3, [pc, #76]	; (12ff0 <_Cstart+0xf0>)
   12fa4:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   12fa6:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   12fa8:	4b12      	ldr	r3, [pc, #72]	; (12ff4 <_Cstart+0xf4>)

	_current = main_thread;
   12faa:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   12fac:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   12fb0:	4c11      	ldr	r4, [pc, #68]	; (12ff8 <_Cstart+0xf8>)
   12fb2:	4a0a      	ldr	r2, [pc, #40]	; (12fdc <_Cstart+0xdc>)
   12fb4:	f383 8809 	msr	PSP, r3
   12fb8:	2100      	movs	r1, #0
   12fba:	f381 8811 	msr	BASEPRI, r1
   12fbe:	4610      	mov	r0, r2
   12fc0:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   12fc2:	4628      	mov	r0, r5
   12fc4:	f000 fab4 	bl	13530 <_add_thread_to_ready_q>
   12fc8:	e7d6      	b.n	12f78 <_Cstart+0x78>
   12fca:	bf00      	nop
   12fcc:	20003648 	.word	0x20003648
   12fd0:	e000ed00 	.word	0xe000ed00
   12fd4:	200017e0 	.word	0x200017e0
   12fd8:	20001970 	.word	0x20001970
   12fdc:	00012ed1 	.word	0x00012ed1
   12fe0:	20002908 	.word	0x20002908
   12fe4:	20001770 	.word	0x20001770
   12fe8:	00012e5d 	.word	0x00012e5d
   12fec:	20002d08 	.word	0x20002d08
   12ff0:	20001984 	.word	0x20001984
   12ff4:	20002d08 	.word	0x20002d08
   12ff8:	00000899 	.word	0x00000899

00012ffc <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   12ffc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   12ffe:	4c07      	ldr	r4, [pc, #28]	; (1301c <init_static_pools+0x20>)
   13000:	4d07      	ldr	r5, [pc, #28]	; (13020 <init_static_pools+0x24>)
   13002:	42ac      	cmp	r4, r5
   13004:	d301      	bcc.n	1300a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   13006:	2000      	movs	r0, #0
   13008:	bd38      	pop	{r3, r4, r5, pc}
   1300a:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   1300e:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13010:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13012:	4620      	mov	r0, r4
   13014:	f7ed fc7b 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13018:	341c      	adds	r4, #28
   1301a:	e7f2      	b.n	13002 <init_static_pools+0x6>
   1301c:	20003f38 	.word	0x20003f38
   13020:	20003f38 	.word	0x20003f38

00013024 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   13028:	1e1d      	subs	r5, r3, #0
{
   1302a:	b085      	sub	sp, #20
   1302c:	4607      	mov	r7, r0
   1302e:	460c      	mov	r4, r1
   13030:	4692      	mov	sl, r2
	if (timeout > 0) {
   13032:	dd4c      	ble.n	130ce <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   13034:	f000 fc16 	bl	13864 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13038:	f105 0309 	add.w	r3, r5, #9
   1303c:	220a      	movs	r2, #10
   1303e:	fbb3 f3f2 	udiv	r3, r3, r2
   13042:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   13046:	4b23      	ldr	r3, [pc, #140]	; (130d4 <k_mem_pool_alloc+0xb0>)
   13048:	4e23      	ldr	r6, [pc, #140]	; (130d8 <k_mem_pool_alloc+0xb4>)
   1304a:	1afb      	subs	r3, r7, r3
   1304c:	109b      	asrs	r3, r3, #2
   1304e:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13050:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13052:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13056:	9400      	str	r4, [sp, #0]
   13058:	ab03      	add	r3, sp, #12
   1305a:	aa02      	add	r2, sp, #8
   1305c:	4651      	mov	r1, sl
   1305e:	4638      	mov	r0, r7
   13060:	f7ed fca0 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13064:	f110 0f0b 	cmn.w	r0, #11
   13068:	d10b      	bne.n	13082 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1306a:	9400      	str	r4, [sp, #0]
   1306c:	ab03      	add	r3, sp, #12
   1306e:	aa02      	add	r2, sp, #8
   13070:	4651      	mov	r1, sl
   13072:	4638      	mov	r0, r7
   13074:	f7ed fc96 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   13078:	f110 0f0b 	cmn.w	r0, #11
   1307c:	bf08      	it	eq
   1307e:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   13082:	7963      	ldrb	r3, [r4, #5]
   13084:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   13086:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   13088:	f362 0303 	bfi	r3, r2, #0, #4
   1308c:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1308e:	6863      	ldr	r3, [r4, #4]
   13090:	9a03      	ldr	r2, [sp, #12]
   13092:	f362 331f 	bfi	r3, r2, #12, #20
   13096:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   13098:	b1b0      	cbz	r0, 130c8 <k_mem_pool_alloc+0xa4>
   1309a:	b1ad      	cbz	r5, 130c8 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   1309c:	f110 0f0c 	cmn.w	r0, #12
   130a0:	d112      	bne.n	130c8 <k_mem_pool_alloc+0xa4>
   130a2:	f04f 0320 	mov.w	r3, #32
   130a6:	f3ef 8011 	mrs	r0, BASEPRI
   130aa:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   130ae:	462a      	mov	r2, r5
   130b0:	4659      	mov	r1, fp
   130b2:	f000 faeb 	bl	1368c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   130b6:	1c6b      	adds	r3, r5, #1
   130b8:	d0cd      	beq.n	13056 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   130ba:	f000 fbd3 	bl	13864 <_tick_get>

			if (timeout < 0) {
   130be:	ebb8 0500 	subs.w	r5, r8, r0
   130c2:	d5c8      	bpl.n	13056 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   130c4:	f06f 000a 	mvn.w	r0, #10
}
   130c8:	b005      	add	sp, #20
   130ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   130ce:	f04f 0800 	mov.w	r8, #0
   130d2:	e7b8      	b.n	13046 <k_mem_pool_alloc+0x22>
   130d4:	20003f38 	.word	0x20003f38
   130d8:	b6db6db7 	.word	0xb6db6db7

000130dc <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   130dc:	b570      	push	{r4, r5, r6, lr}
   130de:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   130e0:	6802      	ldr	r2, [r0, #0]
   130e2:	7841      	ldrb	r1, [r0, #1]
   130e4:	4e13      	ldr	r6, [pc, #76]	; (13134 <k_mem_pool_free_id+0x58>)
   130e6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   130ea:	00a4      	lsls	r4, r4, #2
   130ec:	0b12      	lsrs	r2, r2, #12
   130ee:	f001 010f 	and.w	r1, r1, #15
   130f2:	1930      	adds	r0, r6, r4
   130f4:	f7ed fd08 	bl	b08 <_sys_mem_pool_block_free>
   130f8:	f04f 0320 	mov.w	r3, #32
   130fc:	f3ef 8511 	mrs	r5, BASEPRI
   13100:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13104:	f104 0014 	add.w	r0, r4, #20
   13108:	4430      	add	r0, r6
   1310a:	f000 fb05 	bl	13718 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   1310e:	b140      	cbz	r0, 13122 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13110:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13114:	2b0d      	cmp	r3, #13
   13116:	d804      	bhi.n	13122 <k_mem_pool_free_id+0x46>
   13118:	b133      	cbz	r3, 13128 <k_mem_pool_free_id+0x4c>
   1311a:	4b07      	ldr	r3, [pc, #28]	; (13138 <k_mem_pool_free_id+0x5c>)
   1311c:	685b      	ldr	r3, [r3, #4]
   1311e:	051b      	lsls	r3, r3, #20
   13120:	d402      	bmi.n	13128 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13122:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   13126:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   13128:	4628      	mov	r0, r5
}
   1312a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   1312e:	f000 b9a7 	b.w	13480 <_reschedule>
   13132:	bf00      	nop
   13134:	20003f38 	.word	0x20003f38
   13138:	e000ed00 	.word	0xe000ed00

0001313c <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   1313c:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1313e:	1d0a      	adds	r2, r1, #4
   13140:	d204      	bcs.n	1314c <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   13142:	2300      	movs	r3, #0
   13144:	4669      	mov	r1, sp
   13146:	f7ff ff6d 	bl	13024 <k_mem_pool_alloc>
   1314a:	b118      	cbz	r0, 13154 <k_mem_pool_malloc+0x18>
		return NULL;
   1314c:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1314e:	b003      	add	sp, #12
   13150:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13154:	2204      	movs	r2, #4
   13156:	eb0d 0102 	add.w	r1, sp, r2
   1315a:	9800      	ldr	r0, [sp, #0]
   1315c:	f7ee fd73 	bl	1c46 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13160:	9800      	ldr	r0, [sp, #0]
   13162:	3004      	adds	r0, #4
   13164:	e7f3      	b.n	1314e <k_mem_pool_malloc+0x12>

00013166 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   13166:	b110      	cbz	r0, 1316e <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   13168:	3804      	subs	r0, #4
   1316a:	f7ff bfb7 	b.w	130dc <k_mem_pool_free_id>
   1316e:	4770      	bx	lr

00013170 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   13170:	4b03      	ldr	r3, [pc, #12]	; (13180 <z_thread_malloc+0x10>)
   13172:	689b      	ldr	r3, [r3, #8]
{
   13174:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   13176:	6e58      	ldr	r0, [r3, #100]	; 0x64
   13178:	b108      	cbz	r0, 1317e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1317a:	f7ff bfdf 	b.w	1313c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1317e:	4770      	bx	lr
   13180:	20001970 	.word	0x20001970

00013184 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   13184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13186:	4605      	mov	r5, r0
   13188:	460f      	mov	r7, r1
   1318a:	4614      	mov	r4, r2
	__asm__ volatile(
   1318c:	f04f 0220 	mov.w	r2, #32
   13190:	f3ef 8611 	mrs	r6, BASEPRI
   13194:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   13198:	b1a3      	cbz	r3, 131c4 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   1319a:	2008      	movs	r0, #8
   1319c:	f7ff ffe8 	bl	13170 <z_thread_malloc>
		if (!anode) {
   131a0:	2800      	cmp	r0, #0
   131a2:	d034      	beq.n	1320e <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   131a4:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   131a6:	6044      	str	r4, [r0, #4]
   131a8:	6003      	str	r3, [r0, #0]
   131aa:	4604      	mov	r4, r0
   131ac:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   131ae:	b95f      	cbnz	r7, 131c8 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   131b0:	682a      	ldr	r2, [r5, #0]
   131b2:	f003 0303 	and.w	r3, r3, #3
   131b6:	4313      	orrs	r3, r2
   131b8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   131ba:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   131bc:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   131be:	b973      	cbnz	r3, 131de <queue_insert+0x5a>
	list->tail = node;
   131c0:	606c      	str	r4, [r5, #4]
   131c2:	e00c      	b.n	131de <queue_insert+0x5a>
	node->next_and_flags = flags;
   131c4:	6023      	str	r3, [r4, #0]
   131c6:	e7f1      	b.n	131ac <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   131c8:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   131ca:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   131ce:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   131d2:	d114      	bne.n	131fe <queue_insert+0x7a>
   131d4:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   131d6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   131d8:	b95a      	cbnz	r2, 131f2 <queue_insert+0x6e>
	list->tail = node;
   131da:	606c      	str	r4, [r5, #4]
	list->head = node;
   131dc:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   131de:	2104      	movs	r1, #4
   131e0:	f105 0008 	add.w	r0, r5, #8
   131e4:	f000 ffb4 	bl	14150 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   131e8:	4630      	mov	r0, r6
   131ea:	f000 f949 	bl	13480 <_reschedule>
	return 0;
   131ee:	2000      	movs	r0, #0
   131f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   131f2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   131f4:	f003 0303 	and.w	r3, r3, #3
   131f8:	4323      	orrs	r3, r4
   131fa:	6013      	str	r3, [r2, #0]
   131fc:	e7e0      	b.n	131c0 <queue_insert+0x3c>
   131fe:	4313      	orrs	r3, r2
   13200:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13202:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13204:	f002 0203 	and.w	r2, r2, #3
   13208:	4314      	orrs	r4, r2
   1320a:	603c      	str	r4, [r7, #0]
   1320c:	e7e7      	b.n	131de <queue_insert+0x5a>
			return -ENOMEM;
   1320e:	f06f 000b 	mvn.w	r0, #11
}
   13212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013214 <z_queue_node_peek>:
{
   13214:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   13216:	4604      	mov	r4, r0
   13218:	b130      	cbz	r0, 13228 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1321a:	6802      	ldr	r2, [r0, #0]
   1321c:	0793      	lsls	r3, r2, #30
   1321e:	d003      	beq.n	13228 <z_queue_node_peek+0x14>
		ret = anode->data;
   13220:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13222:	b109      	cbz	r1, 13228 <z_queue_node_peek+0x14>
			k_free(anode);
   13224:	f7ff ff9f 	bl	13166 <k_free>
}
   13228:	4620      	mov	r0, r4
   1322a:	bd10      	pop	{r4, pc}

0001322c <_impl_k_queue_init>:
	list->head = NULL;
   1322c:	2300      	movs	r3, #0
   1322e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13230:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   13232:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   13236:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13238:	60c3      	str	r3, [r0, #12]
   1323a:	4770      	bx	lr

0001323c <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   1323c:	460a      	mov	r2, r1
   1323e:	2300      	movs	r3, #0
   13240:	6841      	ldr	r1, [r0, #4]
   13242:	f7ff bf9f 	b.w	13184 <queue_insert>

00013246 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13246:	2300      	movs	r3, #0
   13248:	460a      	mov	r2, r1
   1324a:	4619      	mov	r1, r3
   1324c:	f7ff bf9a 	b.w	13184 <queue_insert>

00013250 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13250:	b538      	push	{r3, r4, r5, lr}
   13252:	f04f 0320 	mov.w	r3, #32
   13256:	f3ef 8511 	mrs	r5, BASEPRI
   1325a:	f383 8811 	msr	BASEPRI, r3
   1325e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13260:	b953      	cbnz	r3, 13278 <k_queue_append_list+0x28>
	list->head = node;
   13262:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13264:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13266:	2104      	movs	r1, #4
   13268:	3008      	adds	r0, #8
   1326a:	f000 ff71 	bl	14150 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   1326e:	4628      	mov	r0, r5
}
   13270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13274:	f000 b904 	b.w	13480 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13278:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1327a:	f004 0403 	and.w	r4, r4, #3
   1327e:	4321      	orrs	r1, r4
   13280:	6019      	str	r1, [r3, #0]
   13282:	e7ef      	b.n	13264 <k_queue_append_list+0x14>

00013284 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13288:	4604      	mov	r4, r0
   1328a:	b086      	sub	sp, #24
   1328c:	460d      	mov	r5, r1
   1328e:	f04f 0320 	mov.w	r3, #32
   13292:	f3ef 8711 	mrs	r7, BASEPRI
   13296:	f383 8811 	msr	BASEPRI, r3
   1329a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1329c:	b182      	cbz	r2, 132c0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1329e:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   132a0:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   132a2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   132a6:	428a      	cmp	r2, r1
	list->head = node;
   132a8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   132aa:	bf08      	it	eq
   132ac:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   132ae:	2101      	movs	r1, #1
   132b0:	4610      	mov	r0, r2
   132b2:	f7ff ffaf 	bl	13214 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   132b6:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   132ba:	b006      	add	sp, #24
   132bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   132c0:	b919      	cbnz	r1, 132ca <_impl_k_queue_get+0x46>
   132c2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   132c6:	2000      	movs	r0, #0
   132c8:	e7f7      	b.n	132ba <_impl_k_queue_get+0x36>
   132ca:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   132ce:	2104      	movs	r1, #4
   132d0:	4603      	mov	r3, r0
   132d2:	eb0d 0001 	add.w	r0, sp, r1
   132d6:	f000 fea4 	bl	14022 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   132da:	1c6a      	adds	r2, r5, #1
   132dc:	d002      	beq.n	132e4 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   132de:	f000 fab7 	bl	13850 <_impl_k_uptime_get_32>
   132e2:	4606      	mov	r6, r0
{
   132e4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   132e6:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   132ea:	1bea      	subs	r2, r5, r7
   132ec:	f36f 1307 	bfc	r3, #4, #4
   132f0:	2101      	movs	r1, #1
   132f2:	a801      	add	r0, sp, #4
   132f4:	f88d 3011 	strb.w	r3, [sp, #17]
   132f8:	f000 fea6 	bl	14048 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   132fc:	b108      	cbz	r0, 13302 <_impl_k_queue_get+0x7e>
   132fe:	300b      	adds	r0, #11
   13300:	d1e1      	bne.n	132c6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   13302:	f04f 0320 	mov.w	r3, #32
   13306:	f3ef 8811 	mrs	r8, BASEPRI
   1330a:	f383 8811 	msr	BASEPRI, r3
   1330e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13310:	b138      	cbz	r0, 13322 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13312:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13314:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13316:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1331a:	4290      	cmp	r0, r2
	list->head = node;
   1331c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1331e:	bf08      	it	eq
   13320:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   13322:	2101      	movs	r1, #1
   13324:	f7ff ff76 	bl	13214 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13328:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   1332c:	2800      	cmp	r0, #0
   1332e:	d1c4      	bne.n	132ba <_impl_k_queue_get+0x36>
   13330:	1c6b      	adds	r3, r5, #1
   13332:	d0d8      	beq.n	132e6 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13334:	f000 fa8c 	bl	13850 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   13338:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1333a:	42bd      	cmp	r5, r7
   1333c:	dad3      	bge.n	132e6 <_impl_k_queue_get+0x62>
   1333e:	e7c2      	b.n	132c6 <_impl_k_queue_get+0x42>

00013340 <sys_dlist_remove>:
	node->prev->next = node->next;
   13340:	e890 000c 	ldmia.w	r0, {r2, r3}
   13344:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13346:	6802      	ldr	r2, [r0, #0]
   13348:	6053      	str	r3, [r2, #4]
   1334a:	4770      	bx	lr

0001334c <_abort_timeout>:
{
   1334c:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1334e:	6900      	ldr	r0, [r0, #16]
{
   13350:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13352:	1c43      	adds	r3, r0, #1
   13354:	d00e      	beq.n	13374 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13356:	4b08      	ldr	r3, [pc, #32]	; (13378 <_abort_timeout+0x2c>)
   13358:	699b      	ldr	r3, [r3, #24]
   1335a:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   1335c:	bf1f      	itttt	ne
   1335e:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13360:	6913      	ldrne	r3, [r2, #16]
   13362:	18c0      	addne	r0, r0, r3
   13364:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13366:	4608      	mov	r0, r1
   13368:	f7ff ffea 	bl	13340 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   1336c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13370:	610b      	str	r3, [r1, #16]
	return 0;
   13372:	2000      	movs	r0, #0
}
   13374:	bd08      	pop	{r3, pc}
   13376:	bf00      	nop
   13378:	20001970 	.word	0x20001970

0001337c <k_spin_lock.isra.11>:
	__asm__ volatile(
   1337c:	f04f 0320 	mov.w	r3, #32
   13380:	f3ef 8011 	mrs	r0, BASEPRI
   13384:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13388:	4770      	bx	lr
	...

0001338c <update_cache>:
	return list->head == list;
   1338c:	4b0d      	ldr	r3, [pc, #52]	; (133c4 <update_cache+0x38>)
   1338e:	4619      	mov	r1, r3
   13390:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13394:	428a      	cmp	r2, r1
   13396:	d000      	beq.n	1339a <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   13398:	b902      	cbnz	r2, 1339c <update_cache+0x10>
   1339a:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   1339c:	b970      	cbnz	r0, 133bc <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   1339e:	6899      	ldr	r1, [r3, #8]
   133a0:	b161      	cbz	r1, 133bc <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   133a2:	7a48      	ldrb	r0, [r1, #9]
   133a4:	06c0      	lsls	r0, r0, #27
   133a6:	d109      	bne.n	133bc <update_cache+0x30>
   133a8:	6a48      	ldr	r0, [r1, #36]	; 0x24
   133aa:	3001      	adds	r0, #1
   133ac:	d106      	bne.n	133bc <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   133ae:	8948      	ldrh	r0, [r1, #10]
   133b0:	287f      	cmp	r0, #127	; 0x7f
   133b2:	d903      	bls.n	133bc <update_cache+0x30>
	return thread == _idle_thread;
   133b4:	4804      	ldr	r0, [pc, #16]	; (133c8 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   133b6:	6800      	ldr	r0, [r0, #0]
   133b8:	4281      	cmp	r1, r0
   133ba:	d101      	bne.n	133c0 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   133bc:	621a      	str	r2, [r3, #32]
   133be:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   133c0:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   133c2:	4770      	bx	lr
   133c4:	20001970 	.word	0x20001970
   133c8:	00017978 	.word	0x00017978

000133cc <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   133cc:	f990 000a 	ldrsb.w	r0, [r0, #10]
   133d0:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   133d4:	4298      	cmp	r0, r3
   133d6:	bfac      	ite	ge
   133d8:	2000      	movge	r0, #0
   133da:	2001      	movlt	r0, #1
   133dc:	4770      	bx	lr
	...

000133e0 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   133e0:	b510      	push	{r4, lr}
   133e2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   133e4:	f7ff ffca 	bl	1337c <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   133e8:	7a4b      	ldrb	r3, [r1, #9]
   133ea:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   133ec:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   133ee:	d50d      	bpl.n	1340c <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   133f0:	4608      	mov	r0, r1
   133f2:	f7ff ffa5 	bl	13340 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   133f6:	7a4b      	ldrb	r3, [r1, #9]
   133f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   133fc:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   133fe:	4b05      	ldr	r3, [pc, #20]	; (13414 <_remove_thread_from_ready_q+0x34>)
   13400:	6898      	ldr	r0, [r3, #8]
   13402:	1a43      	subs	r3, r0, r1
   13404:	4258      	negs	r0, r3
   13406:	4158      	adcs	r0, r3
   13408:	f7ff ffc0 	bl	1338c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1340c:	f384 8811 	msr	BASEPRI, r4
   13410:	bd10      	pop	{r4, pc}
   13412:	bf00      	nop
   13414:	20001970 	.word	0x20001970

00013418 <_find_first_thread_to_unpend>:
{
   13418:	b508      	push	{r3, lr}
   1341a:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   1341c:	f7ff ffae 	bl	1337c <k_spin_lock.isra.11>
	return list->head == list;
   13420:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13422:	429a      	cmp	r2, r3
   13424:	bf08      	it	eq
   13426:	2300      	moveq	r3, #0
   13428:	f380 8811 	msr	BASEPRI, r0
}
   1342c:	4618      	mov	r0, r3
   1342e:	bd08      	pop	{r3, pc}

00013430 <_unpend_thread_no_timeout>:
{
   13430:	b510      	push	{r4, lr}
   13432:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13434:	f7ff ffa2 	bl	1337c <k_spin_lock.isra.11>
   13438:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1343a:	4608      	mov	r0, r1
   1343c:	f7ff ff80 	bl	13340 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13440:	7a4b      	ldrb	r3, [r1, #9]
   13442:	f023 0302 	bic.w	r3, r3, #2
   13446:	724b      	strb	r3, [r1, #9]
   13448:	f384 8811 	msr	BASEPRI, r4
   1344c:	bd10      	pop	{r4, pc}

0001344e <_unpend_first_thread>:
{
   1344e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13450:	2100      	movs	r1, #0
   13452:	f7ff ffe1 	bl	13418 <_find_first_thread_to_unpend>

	if (thread) {
   13456:	4604      	mov	r4, r0
   13458:	b128      	cbz	r0, 13466 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   1345a:	f7ff ffe9 	bl	13430 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   1345e:	f104 0014 	add.w	r0, r4, #20
   13462:	f7ff ff73 	bl	1334c <_abort_timeout>
}
   13466:	4620      	mov	r0, r4
   13468:	bd10      	pop	{r4, pc}

0001346a <_unpend_thread>:
{
   1346a:	b510      	push	{r4, lr}
   1346c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   1346e:	f7ff ffdf 	bl	13430 <_unpend_thread_no_timeout>
   13472:	f104 0014 	add.w	r0, r4, #20
}
   13476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1347a:	f7ff bf67 	b.w	1334c <_abort_timeout>
	...

00013480 <_reschedule>:
   13480:	f3ef 8305 	mrs	r3, IPSR
   13484:	2b0d      	cmp	r3, #13
   13486:	d809      	bhi.n	1349c <_reschedule+0x1c>
   13488:	b11b      	cbz	r3, 13492 <_reschedule+0x12>
   1348a:	4b09      	ldr	r3, [pc, #36]	; (134b0 <_reschedule+0x30>)
   1348c:	685b      	ldr	r3, [r3, #4]
   1348e:	051b      	lsls	r3, r3, #20
   13490:	d504      	bpl.n	1349c <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   13492:	4b08      	ldr	r3, [pc, #32]	; (134b4 <_reschedule+0x34>)
   13494:	689a      	ldr	r2, [r3, #8]
   13496:	6a1b      	ldr	r3, [r3, #32]
   13498:	429a      	cmp	r2, r3
   1349a:	d103      	bne.n	134a4 <_reschedule+0x24>
   1349c:	f380 8811 	msr	BASEPRI, r0
}
   134a0:	2000      	movs	r0, #0
   134a2:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   134a4:	4b04      	ldr	r3, [pc, #16]	; (134b8 <_reschedule+0x38>)
   134a6:	2200      	movs	r2, #0
   134a8:	601a      	str	r2, [r3, #0]
   134aa:	f7ee b841 	b.w	1530 <__swap>
   134ae:	bf00      	nop
   134b0:	e000ed00 	.word	0xe000ed00
   134b4:	20001970 	.word	0x20001970
   134b8:	200019a4 	.word	0x200019a4

000134bc <k_sched_unlock>:
{
   134bc:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   134be:	f7ff ff5d 	bl	1337c <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   134c2:	4b0a      	ldr	r3, [pc, #40]	; (134ec <k_sched_unlock+0x30>)
   134c4:	689a      	ldr	r2, [r3, #8]
   134c6:	7ad3      	ldrb	r3, [r2, #11]
   134c8:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   134ca:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   134cc:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   134ce:	2001      	movs	r0, #1
   134d0:	f7ff ff5c 	bl	1338c <update_cache>
   134d4:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   134d8:	f04f 0320 	mov.w	r3, #32
   134dc:	f3ef 8011 	mrs	r0, BASEPRI
   134e0:	f383 8811 	msr	BASEPRI, r3
}
   134e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   134e8:	f7ff bfca 	b.w	13480 <_reschedule>
   134ec:	20001970 	.word	0x20001970

000134f0 <_priq_dumb_add>:
{
   134f0:	b510      	push	{r4, lr}
	return list->head == list;
   134f2:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   134f4:	4298      	cmp	r0, r3
   134f6:	bf08      	it	eq
   134f8:	2300      	moveq	r3, #0
   134fa:	b193      	cbz	r3, 13522 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   134fc:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13500:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13504:	4294      	cmp	r4, r2
   13506:	da06      	bge.n	13516 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   13508:	685a      	ldr	r2, [r3, #4]
   1350a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1350c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1350e:	685a      	ldr	r2, [r3, #4]
   13510:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13512:	6059      	str	r1, [r3, #4]
   13514:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   13516:	6842      	ldr	r2, [r0, #4]
   13518:	4293      	cmp	r3, r2
   1351a:	d002      	beq.n	13522 <_priq_dumb_add+0x32>
   1351c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1351e:	2b00      	cmp	r3, #0
   13520:	d1eb      	bne.n	134fa <_priq_dumb_add+0xa>
	node->next = list;
   13522:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13524:	6843      	ldr	r3, [r0, #4]
   13526:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13528:	6843      	ldr	r3, [r0, #4]
   1352a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1352c:	6041      	str	r1, [r0, #4]
   1352e:	bd10      	pop	{r4, pc}

00013530 <_add_thread_to_ready_q>:
{
   13530:	b538      	push	{r3, r4, r5, lr}
   13532:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13534:	f7ff ff22 	bl	1337c <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13538:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1353a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1353c:	4806      	ldr	r0, [pc, #24]	; (13558 <_add_thread_to_ready_q+0x28>)
   1353e:	f7ff ffd7 	bl	134f0 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13542:	7a63      	ldrb	r3, [r4, #9]
   13544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13548:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1354a:	2000      	movs	r0, #0
   1354c:	f7ff ff1e 	bl	1338c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13550:	f385 8811 	msr	BASEPRI, r5
   13554:	bd38      	pop	{r3, r4, r5, pc}
   13556:	bf00      	nop
   13558:	20001994 	.word	0x20001994

0001355c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   1355c:	7a42      	ldrb	r2, [r0, #9]
   1355e:	06d2      	lsls	r2, r2, #27
   13560:	d104      	bne.n	1356c <_ready_thread+0x10>
   13562:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13564:	3301      	adds	r3, #1
   13566:	d101      	bne.n	1356c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13568:	f7ff bfe2 	b.w	13530 <_add_thread_to_ready_q>
   1356c:	4770      	bx	lr
	...

00013570 <_add_timeout>:
{
   13570:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13572:	610b      	str	r3, [r1, #16]
{
   13574:	4604      	mov	r4, r0
   13576:	461d      	mov	r5, r3
	timeout->thread = thread;
   13578:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1357a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1357c:	bb03      	cbnz	r3, 135c0 <_add_timeout+0x50>
	__asm__ volatile(
   1357e:	f04f 0320 	mov.w	r3, #32
   13582:	f3ef 8611 	mrs	r6, BASEPRI
   13586:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1358a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1358e:	610b      	str	r3, [r1, #16]
	if (thread) {
   13590:	b170      	cbz	r0, 135b0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13592:	68cb      	ldr	r3, [r1, #12]
   13594:	b113      	cbz	r3, 1359c <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13596:	f7ff ff4b 	bl	13430 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1359a:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1359c:	7a63      	ldrb	r3, [r4, #9]
   1359e:	f023 0304 	bic.w	r3, r3, #4
   135a2:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   135a4:	4620      	mov	r0, r4
   135a6:	f7ff ffd9 	bl	1355c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135aa:	f386 8811 	msr	BASEPRI, r6
   135ae:	bd70      	pop	{r4, r5, r6, pc}
   135b0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   135b4:	694b      	ldr	r3, [r1, #20]
   135b6:	b32b      	cbz	r3, 13604 <_add_timeout+0x94>
			timeout->func(timeout);
   135b8:	4608      	mov	r0, r1
}
   135ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   135be:	4718      	bx	r3
	return list->head == list;
   135c0:	4a11      	ldr	r2, [pc, #68]	; (13608 <_add_timeout+0x98>)
   135c2:	4610      	mov	r0, r2
   135c4:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   135c8:	4283      	cmp	r3, r0
   135ca:	d10c      	bne.n	135e6 <_add_timeout+0x76>
	node->next = list;
   135cc:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   135ce:	6993      	ldr	r3, [r2, #24]
   135d0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   135d2:	6993      	ldr	r3, [r2, #24]
   135d4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   135d6:	6191      	str	r1, [r2, #24]
   135d8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   135da:	1b64      	subs	r4, r4, r5
   135dc:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   135de:	6994      	ldr	r4, [r2, #24]
   135e0:	42a3      	cmp	r3, r4
   135e2:	d0f3      	beq.n	135cc <_add_timeout+0x5c>
   135e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   135e6:	2b00      	cmp	r3, #0
   135e8:	d0f0      	beq.n	135cc <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   135ea:	690c      	ldr	r4, [r1, #16]
   135ec:	691d      	ldr	r5, [r3, #16]
   135ee:	42ac      	cmp	r4, r5
   135f0:	dcf3      	bgt.n	135da <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   135f2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   135f4:	1b2c      	subs	r4, r5, r4
   135f6:	611c      	str	r4, [r3, #16]
   135f8:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   135fa:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   135fc:	685a      	ldr	r2, [r3, #4]
   135fe:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13600:	6059      	str	r1, [r3, #4]
   13602:	bd70      	pop	{r4, r5, r6, pc}
   13604:	bd70      	pop	{r4, r5, r6, pc}
   13606:	bf00      	nop
   13608:	20001970 	.word	0x20001970

0001360c <_move_thread_to_end_of_prio_q>:
{
   1360c:	b538      	push	{r3, r4, r5, lr}
   1360e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13610:	f7ff feb4 	bl	1337c <k_spin_lock.isra.11>
   13614:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13616:	4620      	mov	r0, r4
   13618:	f7ff fe92 	bl	13340 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1361c:	4621      	mov	r1, r4
   1361e:	4806      	ldr	r0, [pc, #24]	; (13638 <_move_thread_to_end_of_prio_q+0x2c>)
   13620:	f7ff ff66 	bl	134f0 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13624:	7a63      	ldrb	r3, [r4, #9]
   13626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1362a:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1362c:	2000      	movs	r0, #0
   1362e:	f7ff fead 	bl	1338c <update_cache>
   13632:	f385 8811 	msr	BASEPRI, r5
   13636:	bd38      	pop	{r3, r4, r5, pc}
   13638:	20001994 	.word	0x20001994

0001363c <pend>:
{
   1363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1363e:	4605      	mov	r5, r0
   13640:	4614      	mov	r4, r2
   13642:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13644:	f7ff fecc 	bl	133e0 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13648:	7a6b      	ldrb	r3, [r5, #9]
   1364a:	f043 0302 	orr.w	r3, r3, #2
   1364e:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13650:	1c63      	adds	r3, r4, #1
   13652:	d012      	beq.n	1367a <pend+0x3e>
	__asm__ volatile(
   13654:	f04f 0320 	mov.w	r3, #32
   13658:	f3ef 8711 	mrs	r7, BASEPRI
   1365c:	f383 8811 	msr	BASEPRI, r3
   13660:	230a      	movs	r3, #10
   13662:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13664:	4632      	mov	r2, r6
   13666:	fbb4 f3f3 	udiv	r3, r4, r3
   1366a:	f105 0114 	add.w	r1, r5, #20
   1366e:	3301      	adds	r3, #1
   13670:	4628      	mov	r0, r5
   13672:	f7ff ff7d 	bl	13570 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13676:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1367a:	b12e      	cbz	r6, 13688 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   1367c:	4629      	mov	r1, r5
   1367e:	4630      	mov	r0, r6
}
   13680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13684:	f7ff bf34 	b.w	134f0 <_priq_dumb_add>
   13688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001368c <_pend_current_thread>:
{
   1368c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1368e:	4b06      	ldr	r3, [pc, #24]	; (136a8 <_pend_current_thread+0x1c>)
{
   13690:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13692:	6898      	ldr	r0, [r3, #8]
   13694:	f7ff ffd2 	bl	1363c <pend>
	_time_slice_elapsed = 0;
   13698:	4b04      	ldr	r3, [pc, #16]	; (136ac <_pend_current_thread+0x20>)
   1369a:	2200      	movs	r2, #0
   1369c:	4620      	mov	r0, r4
}
   1369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   136a2:	601a      	str	r2, [r3, #0]
   136a4:	f7ed bf44 	b.w	1530 <__swap>
   136a8:	20001970 	.word	0x20001970
   136ac:	200019a4 	.word	0x200019a4

000136b0 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   136b0:	4b13      	ldr	r3, [pc, #76]	; (13700 <_is_thread_time_slicing+0x50>)
   136b2:	681b      	ldr	r3, [r3, #0]
   136b4:	2b00      	cmp	r3, #0
{
   136b6:	b510      	push	{r4, lr}
   136b8:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   136ba:	dd1f      	ble.n	136fc <_is_thread_time_slicing+0x4c>
   136bc:	8943      	ldrh	r3, [r0, #10]
   136be:	2b7f      	cmp	r3, #127	; 0x7f
   136c0:	d81c      	bhi.n	136fc <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   136c2:	4b10      	ldr	r3, [pc, #64]	; (13704 <_is_thread_time_slicing+0x54>)
   136c4:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   136c8:	681b      	ldr	r3, [r3, #0]
   136ca:	4299      	cmp	r1, r3
   136cc:	db16      	blt.n	136fc <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   136ce:	f7ff fe55 	bl	1337c <k_spin_lock.isra.11>
	return list->head == list;
   136d2:	490d      	ldr	r1, [pc, #52]	; (13708 <_is_thread_time_slicing+0x58>)
   136d4:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136d8:	428b      	cmp	r3, r1
   136da:	4604      	mov	r4, r0
   136dc:	d00a      	beq.n	136f4 <_is_thread_time_slicing+0x44>
		if (next) {
   136de:	b15b      	cbz	r3, 136f8 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   136e0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   136e4:	f993 300a 	ldrsb.w	r3, [r3, #10]
   136e8:	1ac3      	subs	r3, r0, r3
   136ea:	4258      	negs	r0, r3
   136ec:	4158      	adcs	r0, r3
   136ee:	f384 8811 	msr	BASEPRI, r4
	return ret;
   136f2:	bd10      	pop	{r4, pc}
   136f4:	2000      	movs	r0, #0
   136f6:	e7fa      	b.n	136ee <_is_thread_time_slicing+0x3e>
   136f8:	4618      	mov	r0, r3
   136fa:	e7f8      	b.n	136ee <_is_thread_time_slicing+0x3e>
		return 0;
   136fc:	2000      	movs	r0, #0
}
   136fe:	bd10      	pop	{r4, pc}
   13700:	20001850 	.word	0x20001850
   13704:	20001854 	.word	0x20001854
   13708:	20001970 	.word	0x20001970

0001370c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   1370c:	4b01      	ldr	r3, [pc, #4]	; (13714 <_update_time_slice_before_swap+0x8>)
   1370e:	2200      	movs	r2, #0
   13710:	601a      	str	r2, [r3, #0]
   13712:	4770      	bx	lr
   13714:	200019a4 	.word	0x200019a4

00013718 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13718:	b538      	push	{r3, r4, r5, lr}
   1371a:	4605      	mov	r5, r0
	int need_sched = 0;
   1371c:	2000      	movs	r0, #0
	return list->head == list;
   1371e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13720:	42a5      	cmp	r5, r4
   13722:	d000      	beq.n	13726 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13724:	b904      	cbnz	r4, 13728 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13726:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13728:	4620      	mov	r0, r4
   1372a:	f7ff fe9e 	bl	1346a <_unpend_thread>
		_ready_thread(th);
   1372e:	4620      	mov	r0, r4
   13730:	f7ff ff14 	bl	1355c <_ready_thread>
		need_sched = 1;
   13734:	2001      	movs	r0, #1
   13736:	e7f2      	b.n	1371e <_unpend_all+0x6>

00013738 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13738:	4b02      	ldr	r3, [pc, #8]	; (13744 <_sched_init+0xc>)
   1373a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1373e:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13740:	629a      	str	r2, [r3, #40]	; 0x28
   13742:	4770      	bx	lr
   13744:	20001970 	.word	0x20001970

00013748 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13748:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   1374a:	4c14      	ldr	r4, [pc, #80]	; (1379c <_impl_k_yield+0x54>)
   1374c:	4b14      	ldr	r3, [pc, #80]	; (137a0 <_impl_k_yield+0x58>)
   1374e:	68a2      	ldr	r2, [r4, #8]
   13750:	681b      	ldr	r3, [r3, #0]
   13752:	429a      	cmp	r2, r3
   13754:	d00f      	beq.n	13776 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13756:	f7ff fe11 	bl	1337c <k_spin_lock.isra.11>
   1375a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1375c:	68a0      	ldr	r0, [r4, #8]
   1375e:	f7ff fdef 	bl	13340 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13762:	68a1      	ldr	r1, [r4, #8]
   13764:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13768:	f7ff fec2 	bl	134f0 <_priq_dumb_add>
			update_cache(1);
   1376c:	2001      	movs	r0, #1
   1376e:	f7ff fe0d 	bl	1338c <update_cache>
   13772:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13776:	6a22      	ldr	r2, [r4, #32]
   13778:	68a3      	ldr	r3, [r4, #8]
   1377a:	429a      	cmp	r2, r3
   1377c:	d00c      	beq.n	13798 <_impl_k_yield+0x50>
	__asm__ volatile(
   1377e:	f04f 0320 	mov.w	r3, #32
   13782:	f3ef 8011 	mrs	r0, BASEPRI
   13786:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   1378a:	4b06      	ldr	r3, [pc, #24]	; (137a4 <_impl_k_yield+0x5c>)
   1378c:	2200      	movs	r2, #0
   1378e:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13794:	f7ed becc 	b.w	1530 <__swap>
   13798:	bd38      	pop	{r3, r4, r5, pc}
   1379a:	bf00      	nop
   1379c:	20001970 	.word	0x20001970
   137a0:	00017978 	.word	0x00017978
   137a4:	200019a4 	.word	0x200019a4

000137a8 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   137a8:	4b01      	ldr	r3, [pc, #4]	; (137b0 <_impl_k_current_get+0x8>)
   137aa:	6898      	ldr	r0, [r3, #8]
   137ac:	4770      	bx	lr
   137ae:	bf00      	nop
   137b0:	20001970 	.word	0x20001970

000137b4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   137b4:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   137b8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   137ba:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   137bc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   137be:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   137c0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   137c2:	6143      	str	r3, [r0, #20]
   137c4:	4770      	bx	lr

000137c6 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   137c6:	b570      	push	{r4, r5, r6, lr}
   137c8:	4604      	mov	r4, r0
   137ca:	f04f 0320 	mov.w	r3, #32
   137ce:	f3ef 8611 	mrs	r6, BASEPRI
   137d2:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   137d6:	f7ff fe3a 	bl	1344e <_unpend_first_thread>
	if (thread) {
   137da:	4605      	mov	r5, r0
   137dc:	b160      	cbz	r0, 137f8 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   137de:	7a43      	ldrb	r3, [r0, #9]
   137e0:	06db      	lsls	r3, r3, #27
   137e2:	d102      	bne.n	137ea <_impl_k_sem_give+0x24>
   137e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   137e6:	3301      	adds	r3, #1
   137e8:	d012      	beq.n	13810 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   137ea:	2300      	movs	r3, #0
   137ec:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   137ee:	4630      	mov	r0, r6
}
   137f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   137f4:	f7ff be44 	b.w	13480 <_reschedule>
	sem->count += (sem->count != sem->limit);
   137f8:	68a3      	ldr	r3, [r4, #8]
   137fa:	68e2      	ldr	r2, [r4, #12]
   137fc:	429a      	cmp	r2, r3
   137fe:	bf18      	it	ne
   13800:	3301      	addne	r3, #1
   13802:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13804:	2102      	movs	r1, #2
   13806:	f104 0010 	add.w	r0, r4, #16
   1380a:	f000 fca1 	bl	14150 <_handle_obj_poll_events>
   1380e:	e7ee      	b.n	137ee <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13810:	f7ff fe8e 	bl	13530 <_add_thread_to_ready_q>
   13814:	e7e9      	b.n	137ea <_impl_k_sem_give+0x24>

00013816 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13816:	b410      	push	{r4}
   13818:	460a      	mov	r2, r1
   1381a:	4604      	mov	r4, r0
   1381c:	f04f 0320 	mov.w	r3, #32
   13820:	f3ef 8011 	mrs	r0, BASEPRI
   13824:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13828:	68a3      	ldr	r3, [r4, #8]
   1382a:	b133      	cbz	r3, 1383a <_impl_k_sem_take+0x24>
		sem->count--;
   1382c:	3b01      	subs	r3, #1
   1382e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13830:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   13834:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   13836:	bc10      	pop	{r4}
   13838:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1383a:	b921      	cbnz	r1, 13846 <_impl_k_sem_take+0x30>
   1383c:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   13840:	f06f 000f 	mvn.w	r0, #15
   13844:	e7f7      	b.n	13836 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13846:	4621      	mov	r1, r4
}
   13848:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1384a:	f7ff bf1f 	b.w	1368c <_pend_current_thread>
	...

00013850 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13850:	4b03      	ldr	r3, [pc, #12]	; (13860 <_impl_k_uptime_get_32+0x10>)
   13852:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13856:	230a      	movs	r3, #10
   13858:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   1385c:	4770      	bx	lr
   1385e:	bf00      	nop
   13860:	200019a8 	.word	0x200019a8

00013864 <_tick_get>:
	__asm__ volatile(
   13864:	f04f 0220 	mov.w	r2, #32
   13868:	f3ef 8311 	mrs	r3, BASEPRI
   1386c:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13870:	4a02      	ldr	r2, [pc, #8]	; (1387c <_tick_get+0x18>)
   13872:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13876:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1387a:	4770      	bx	lr
   1387c:	200019a8 	.word	0x200019a8

00013880 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13880:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13882:	f7ff ffef 	bl	13864 <_tick_get>
   13886:	240a      	movs	r4, #10
   13888:	fba0 2304 	umull	r2, r3, r0, r4
   1388c:	fb04 3301 	mla	r3, r4, r1, r3
}
   13890:	4610      	mov	r0, r2
   13892:	4619      	mov	r1, r3
   13894:	bd10      	pop	{r4, pc}
	...

00013898 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	4607      	mov	r7, r0
   1389e:	b085      	sub	sp, #20
	__asm__ volatile(
   138a0:	f04f 0320 	mov.w	r3, #32
   138a4:	f3ef 8011 	mrs	r0, BASEPRI
   138a8:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   138ac:	4961      	ldr	r1, [pc, #388]	; (13a34 <_nano_sys_clock_tick_announce+0x19c>)
   138ae:	e9d1 4500 	ldrd	r4, r5, [r1]
   138b2:	19e2      	adds	r2, r4, r7
   138b4:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   138b8:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   138bc:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   138c0:	ae02      	add	r6, sp, #8
   138c2:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   138c4:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   138c6:	f04f 0320 	mov.w	r3, #32
   138ca:	f3ef 8011 	mrs	r0, BASEPRI
   138ce:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   138d2:	4c59      	ldr	r4, [pc, #356]	; (13a38 <_nano_sys_clock_tick_announce+0x1a0>)
   138d4:	4621      	mov	r1, r4
   138d6:	4602      	mov	r2, r0
   138d8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   138dc:	428b      	cmp	r3, r1
   138de:	d000      	beq.n	138e2 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   138e0:	b9fb      	cbnz	r3, 13922 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   138e2:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   138e6:	68a0      	ldr	r0, [r4, #8]
   138e8:	f7ff fee2 	bl	136b0 <_is_thread_time_slicing>
   138ec:	b1b0      	cbz	r0, 1391c <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   138ee:	4a53      	ldr	r2, [pc, #332]	; (13a3c <_nano_sys_clock_tick_announce+0x1a4>)
   138f0:	6811      	ldr	r1, [r2, #0]
   138f2:	230a      	movs	r3, #10
   138f4:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   138f8:	4b51      	ldr	r3, [pc, #324]	; (13a40 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   138fa:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   138fc:	681b      	ldr	r3, [r3, #0]
   138fe:	429f      	cmp	r7, r3
   13900:	db0c      	blt.n	1391c <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13902:	2300      	movs	r3, #0
   13904:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13906:	f04f 0320 	mov.w	r3, #32
   1390a:	f3ef 8511 	mrs	r5, BASEPRI
   1390e:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13912:	68a0      	ldr	r0, [r4, #8]
   13914:	f7ff fe7a 	bl	1360c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13918:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   1391c:	b005      	add	sp, #20
   1391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13922:	4d48      	ldr	r5, [pc, #288]	; (13a44 <_nano_sys_clock_tick_announce+0x1ac>)
   13924:	9501      	str	r5, [sp, #4]
   13926:	2101      	movs	r1, #1
   13928:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1392a:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   1392e:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   13930:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13934:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13936:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13938:	bfaa      	itet	ge
   1393a:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   1393e:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13942:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13946:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13948:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   1394a:	691d      	ldr	r5, [r3, #16]
   1394c:	4298      	cmp	r0, r3
   1394e:	bf14      	ite	ne
   13950:	6818      	ldrne	r0, [r3, #0]
   13952:	2000      	moveq	r0, #0
   13954:	b9d5      	cbnz	r5, 1398c <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   13956:	e893 0220 	ldmia.w	r3, {r5, r9}
   1395a:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   1395e:	681d      	ldr	r5, [r3, #0]
   13960:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13964:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   13966:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1396a:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   1396c:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   1396e:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13970:	f8c3 c010 	str.w	ip, [r3, #16]
   13974:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13978:	f04f 0320 	mov.w	r3, #32
   1397c:	f3ef 8211 	mrs	r2, BASEPRI
   13980:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13984:	4603      	mov	r3, r0
   13986:	2800      	cmp	r0, #0
   13988:	d1d4      	bne.n	13934 <_nano_sys_clock_tick_announce+0x9c>
   1398a:	e001      	b.n	13990 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   1398c:	2900      	cmp	r1, #0
   1398e:	dcf1      	bgt.n	13974 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13990:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13994:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13996:	42b0      	cmp	r0, r6
   13998:	d103      	bne.n	139a2 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1399a:	9a01      	ldr	r2, [sp, #4]
   1399c:	2300      	movs	r3, #0
   1399e:	6013      	str	r3, [r2, #0]
   139a0:	e7a1      	b.n	138e6 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   139a2:	2800      	cmp	r0, #0
   139a4:	d0f9      	beq.n	1399a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   139a6:	9b03      	ldr	r3, [sp, #12]
   139a8:	4298      	cmp	r0, r3
   139aa:	d102      	bne.n	139b2 <_nano_sys_clock_tick_announce+0x11a>
   139ac:	f04f 0b00 	mov.w	fp, #0
   139b0:	e001      	b.n	139b6 <_nano_sys_clock_tick_announce+0x11e>
   139b2:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   139b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   139ba:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   139be:	e890 000c 	ldmia.w	r0, {r2, r3}
   139c2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   139c4:	6802      	ldr	r2, [r0, #0]
   139c6:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   139c8:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   139ca:	f04f 0320 	mov.w	r3, #32
   139ce:	f3ef 8811 	mrs	r8, BASEPRI
   139d2:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   139d6:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   139da:	b1d6      	cbz	r6, 13a12 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   139dc:	68c3      	ldr	r3, [r0, #12]
   139de:	b123      	cbz	r3, 139ea <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   139e0:	4630      	mov	r0, r6
   139e2:	f7ff fd25 	bl	13430 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   139e6:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   139ea:	7a73      	ldrb	r3, [r6, #9]
   139ec:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   139f0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   139f4:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   139f6:	d102      	bne.n	139fe <_nano_sys_clock_tick_announce+0x166>
   139f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   139fa:	3301      	adds	r3, #1
   139fc:	d015      	beq.n	13a2a <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   139fe:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13a02:	f1bb 0f00 	cmp.w	fp, #0
   13a06:	d0c8      	beq.n	1399a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13a08:	9b03      	ldr	r3, [sp, #12]
   13a0a:	455b      	cmp	r3, fp
   13a0c:	d108      	bne.n	13a20 <_nano_sys_clock_tick_announce+0x188>
   13a0e:	2300      	movs	r3, #0
   13a10:	e008      	b.n	13a24 <_nano_sys_clock_tick_announce+0x18c>
   13a12:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   13a16:	6943      	ldr	r3, [r0, #20]
   13a18:	2b00      	cmp	r3, #0
   13a1a:	d0f2      	beq.n	13a02 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   13a1c:	4798      	blx	r3
   13a1e:	e7f0      	b.n	13a02 <_nano_sys_clock_tick_announce+0x16a>
   13a20:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13a24:	4658      	mov	r0, fp
   13a26:	469b      	mov	fp, r3
   13a28:	e7c9      	b.n	139be <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   13a2a:	4630      	mov	r0, r6
   13a2c:	f7ff fd80 	bl	13530 <_add_thread_to_ready_q>
   13a30:	e7e5      	b.n	139fe <_nano_sys_clock_tick_announce+0x166>
   13a32:	bf00      	nop
   13a34:	200019a8 	.word	0x200019a8
   13a38:	20001970 	.word	0x20001970
   13a3c:	200019a4 	.word	0x200019a4
   13a40:	20001850 	.word	0x20001850
   13a44:	200019a0 	.word	0x200019a0

00013a48 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13a48:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a52:	4903      	ldr	r1, [pc, #12]	; (13a60 <k_sys_work_q_init+0x18>)
   13a54:	4803      	ldr	r0, [pc, #12]	; (13a64 <k_sys_work_q_init+0x1c>)
   13a56:	f000 f983 	bl	13d60 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13a5a:	2000      	movs	r0, #0
   13a5c:	bd08      	pop	{r3, pc}
   13a5e:	bf00      	nop
   13a60:	20003648 	.word	0x20003648
   13a64:	200019b0 	.word	0x200019b0

00013a68 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13a68:	6903      	ldr	r3, [r0, #16]
   13a6a:	1c5a      	adds	r2, r3, #1
   13a6c:	d011      	beq.n	13a92 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13a6e:	4a0a      	ldr	r2, [pc, #40]	; (13a98 <_abort_timeout+0x30>)
   13a70:	6992      	ldr	r2, [r2, #24]
   13a72:	4290      	cmp	r0, r2
   13a74:	bf1f      	itttt	ne
   13a76:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13a78:	690a      	ldrne	r2, [r1, #16]
   13a7a:	189b      	addne	r3, r3, r2
   13a7c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   13a7e:	e890 000c 	ldmia.w	r0, {r2, r3}
   13a82:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13a84:	6802      	ldr	r2, [r0, #0]
   13a86:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a8c:	6103      	str	r3, [r0, #16]
	return 0;
   13a8e:	2000      	movs	r0, #0
   13a90:	4770      	bx	lr
		return _INACTIVE;
   13a92:	4618      	mov	r0, r3
}
   13a94:	4770      	bx	lr
   13a96:	bf00      	nop
   13a98:	20001970 	.word	0x20001970

00013a9c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13a9c:	7a42      	ldrb	r2, [r0, #9]
   13a9e:	06d2      	lsls	r2, r2, #27
   13aa0:	d104      	bne.n	13aac <_ready_thread+0x10>
   13aa2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13aa4:	3301      	adds	r3, #1
   13aa6:	d101      	bne.n	13aac <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13aa8:	f7ff bd42 	b.w	13530 <_add_thread_to_ready_q>
   13aac:	4770      	bx	lr
	...

00013ab0 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13ab2:	f04f 0320 	mov.w	r3, #32
   13ab6:	f3ef 8611 	mrs	r6, BASEPRI
   13aba:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13abe:	4a19      	ldr	r2, [pc, #100]	; (13b24 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   13ac0:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13ac2:	230a      	movs	r3, #10
   13ac4:	3109      	adds	r1, #9
   13ac6:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13aca:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13acc:	6241      	str	r1, [r0, #36]	; 0x24
   13ace:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13ad0:	2300      	movs	r3, #0
   13ad2:	6203      	str	r3, [r0, #32]
   13ad4:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ad8:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13ada:	f100 0514 	add.w	r5, r0, #20
   13ade:	d108      	bne.n	13af2 <schedule_new_thread.part.11+0x42>
	node->next = list;
   13ae0:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   13ae2:	6993      	ldr	r3, [r2, #24]
   13ae4:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   13ae6:	6993      	ldr	r3, [r2, #24]
   13ae8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13aea:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13aec:	f386 8811 	msr	BASEPRI, r6
   13af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13af2:	2b00      	cmp	r3, #0
   13af4:	d0f4      	beq.n	13ae0 <schedule_new_thread.part.11+0x30>
   13af6:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13afa:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13afc:	691f      	ldr	r7, [r3, #16]
   13afe:	42bc      	cmp	r4, r7
   13b00:	dc08      	bgt.n	13b14 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   13b02:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13b04:	1b3c      	subs	r4, r7, r4
   13b06:	611c      	str	r4, [r3, #16]
   13b08:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   13b0a:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   13b0c:	685a      	ldr	r2, [r3, #4]
   13b0e:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   13b10:	605d      	str	r5, [r3, #4]
   13b12:	e7eb      	b.n	13aec <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   13b14:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   13b16:	4573      	cmp	r3, lr
   13b18:	6244      	str	r4, [r0, #36]	; 0x24
   13b1a:	d0e1      	beq.n	13ae0 <schedule_new_thread.part.11+0x30>
   13b1c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d1eb      	bne.n	13afa <schedule_new_thread.part.11+0x4a>
   13b22:	e7dd      	b.n	13ae0 <schedule_new_thread.part.11+0x30>
   13b24:	20001970 	.word	0x20001970

00013b28 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   13b28:	4770      	bx	lr
	...

00013b2c <k_is_in_isr>:
   13b2c:	f3ef 8005 	mrs	r0, IPSR
   13b30:	280d      	cmp	r0, #13
   13b32:	d807      	bhi.n	13b44 <k_is_in_isr+0x18>
   13b34:	b138      	cbz	r0, 13b46 <k_is_in_isr+0x1a>
   13b36:	4b04      	ldr	r3, [pc, #16]	; (13b48 <k_is_in_isr+0x1c>)
   13b38:	6858      	ldr	r0, [r3, #4]
   13b3a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   13b3e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   13b42:	4770      	bx	lr
   13b44:	2001      	movs	r0, #1
}
   13b46:	4770      	bx	lr
   13b48:	e000ed00 	.word	0xe000ed00

00013b4c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   13b4c:	4b02      	ldr	r3, [pc, #8]	; (13b58 <_is_thread_essential+0xc>)
   13b4e:	689b      	ldr	r3, [r3, #8]
   13b50:	7a18      	ldrb	r0, [r3, #8]
}
   13b52:	f000 0001 	and.w	r0, r0, #1
   13b56:	4770      	bx	lr
   13b58:	20001970 	.word	0x20001970

00013b5c <_impl_k_thread_start>:
{
   13b5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   13b5e:	f04f 0320 	mov.w	r3, #32
   13b62:	f3ef 8411 	mrs	r4, BASEPRI
   13b66:	f383 8811 	msr	BASEPRI, r3
   13b6a:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   13b6c:	0759      	lsls	r1, r3, #29
   13b6e:	d402      	bmi.n	13b76 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b70:	f384 8811 	msr	BASEPRI, r4
   13b74:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13b76:	f023 0304 	bic.w	r3, r3, #4
   13b7a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   13b7c:	f7ff ff8e 	bl	13a9c <_ready_thread>
	_reschedule(key);
   13b80:	4620      	mov	r0, r4
}
   13b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   13b86:	f7ff bc7b 	b.w	13480 <_reschedule>
	...

00013b8c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   13b8c:	b530      	push	{r4, r5, lr}
   13b8e:	b087      	sub	sp, #28
   13b90:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13b92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13b94:	9504      	str	r5, [sp, #16]
   13b96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13b98:	9503      	str	r5, [sp, #12]
   13b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13b9c:	9502      	str	r5, [sp, #8]
   13b9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13ba0:	9501      	str	r5, [sp, #4]
   13ba2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13ba4:	9500      	str	r5, [sp, #0]
   13ba6:	f7ed fec5 	bl	1934 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   13baa:	4b04      	ldr	r3, [pc, #16]	; (13bbc <_setup_new_thread+0x30>)
   13bac:	689b      	ldr	r3, [r3, #8]
   13bae:	b913      	cbnz	r3, 13bb6 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   13bb0:	6663      	str	r3, [r4, #100]	; 0x64
}
   13bb2:	b007      	add	sp, #28
   13bb4:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   13bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13bb8:	e7fa      	b.n	13bb0 <_setup_new_thread+0x24>
   13bba:	bf00      	nop
   13bbc:	20001970 	.word	0x20001970

00013bc0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   13bc0:	b570      	push	{r4, r5, r6, lr}
   13bc2:	b086      	sub	sp, #24
   13bc4:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13bc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13bc8:	9604      	str	r6, [sp, #16]
   13bca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13bcc:	9603      	str	r6, [sp, #12]
   13bce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13bd0:	9602      	str	r6, [sp, #8]
   13bd2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   13bd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13bd6:	9601      	str	r6, [sp, #4]
   13bd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13bda:	9600      	str	r6, [sp, #0]
   13bdc:	f7ff ffd6 	bl	13b8c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   13be0:	1c6b      	adds	r3, r5, #1
   13be2:	d003      	beq.n	13bec <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   13be4:	b92d      	cbnz	r5, 13bf2 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   13be6:	4620      	mov	r0, r4
   13be8:	f7ff ffb8 	bl	13b5c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   13bec:	4620      	mov	r0, r4
   13bee:	b006      	add	sp, #24
   13bf0:	bd70      	pop	{r4, r5, r6, pc}
   13bf2:	4629      	mov	r1, r5
   13bf4:	4620      	mov	r0, r4
   13bf6:	f7ff ff5b 	bl	13ab0 <schedule_new_thread.part.11>
   13bfa:	e7f7      	b.n	13bec <_impl_k_thread_create+0x2c>

00013bfc <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13bfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   13bfe:	b510      	push	{r4, lr}
   13c00:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   13c02:	b103      	cbz	r3, 13c06 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   13c04:	4798      	blx	r3
   13c06:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13c08:	06da      	lsls	r2, r3, #27
   13c0a:	d106      	bne.n	13c1a <_k_thread_single_abort+0x1e>
   13c0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13c0e:	3201      	adds	r2, #1
   13c10:	d103      	bne.n	13c1a <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   13c12:	4620      	mov	r0, r4
   13c14:	f7ff fbe4 	bl	133e0 <_remove_thread_from_ready_q>
   13c18:	e00b      	b.n	13c32 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   13c1a:	079b      	lsls	r3, r3, #30
   13c1c:	d502      	bpl.n	13c24 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   13c1e:	4620      	mov	r0, r4
   13c20:	f7ff fc06 	bl	13430 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   13c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13c26:	3301      	adds	r3, #1
   13c28:	d003      	beq.n	13c32 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   13c2a:	f104 0014 	add.w	r0, r4, #20
   13c2e:	f7ff ff1b 	bl	13a68 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   13c32:	7a63      	ldrb	r3, [r4, #9]
   13c34:	f043 0308 	orr.w	r3, r3, #8
   13c38:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   13c3a:	bd10      	pop	{r4, pc}

00013c3c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   13c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13c3e:	4f21      	ldr	r7, [pc, #132]	; (13cc4 <_init_static_threads+0x88>)
   13c40:	4d21      	ldr	r5, [pc, #132]	; (13cc8 <_init_static_threads+0x8c>)
{
   13c42:	b087      	sub	sp, #28
   13c44:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   13c46:	42bd      	cmp	r5, r7
   13c48:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   13c4c:	d314      	bcc.n	13c78 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   13c4e:	4b1f      	ldr	r3, [pc, #124]	; (13ccc <_init_static_threads+0x90>)
   13c50:	689a      	ldr	r2, [r3, #8]
   13c52:	7ad3      	ldrb	r3, [r2, #11]
   13c54:	3b01      	subs	r3, #1
   13c56:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   13c58:	f04f 0320 	mov.w	r3, #32
   13c5c:	f3ef 8511 	mrs	r5, BASEPRI
   13c60:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13c64:	4c18      	ldr	r4, [pc, #96]	; (13cc8 <_init_static_threads+0x8c>)
   13c66:	42b4      	cmp	r4, r6
   13c68:	d31f      	bcc.n	13caa <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c6a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   13c6e:	b007      	add	sp, #28
   13c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   13c74:	f7ff bc22 	b.w	134bc <k_sched_unlock>
		_setup_new_thread(
   13c78:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13c7c:	9304      	str	r3, [sp, #16]
   13c7e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13c82:	9303      	str	r3, [sp, #12]
   13c84:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13c88:	9302      	str	r3, [sp, #8]
   13c8a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13c8e:	9301      	str	r3, [sp, #4]
   13c90:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13c94:	9300      	str	r3, [sp, #0]
   13c96:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   13c9a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   13c9c:	f7ff ff76 	bl	13b8c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13ca0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13ca4:	651d      	str	r5, [r3, #80]	; 0x50
   13ca6:	4625      	mov	r5, r4
   13ca8:	e7cd      	b.n	13c46 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   13caa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13cac:	1c4b      	adds	r3, r1, #1
   13cae:	d003      	beq.n	13cb8 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   13cb0:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   13cb2:	b919      	cbnz	r1, 13cbc <_init_static_threads+0x80>
   13cb4:	f7ff ff52 	bl	13b5c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13cb8:	342c      	adds	r4, #44	; 0x2c
   13cba:	e7d4      	b.n	13c66 <_init_static_threads+0x2a>
   13cbc:	f7ff fef8 	bl	13ab0 <schedule_new_thread.part.11>
   13cc0:	e7fa      	b.n	13cb8 <_init_static_threads+0x7c>
   13cc2:	bf00      	nop
   13cc4:	20003f38 	.word	0x20003f38
   13cc8:	20003f38 	.word	0x20003f38
   13ccc:	20001970 	.word	0x20001970

00013cd0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13cd0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   13cd2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   13cd4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   13cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   13cda:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   13cdc:	72c3      	strb	r3, [r0, #11]
   13cde:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   13ce0:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   13ce2:	61c3      	str	r3, [r0, #28]
	t->func = func;
   13ce4:	6283      	str	r3, [r0, #40]	; 0x28
   13ce6:	4770      	bx	lr

00013ce8 <k_work_submit_to_queue>:
{
   13ce8:	b500      	push	{lr}
   13cea:	f101 0308 	add.w	r3, r1, #8
   13cee:	f3bf 8f5b 	dmb	ish
   13cf2:	e853 2f00 	ldrex	r2, [r3]
   13cf6:	f042 0e01 	orr.w	lr, r2, #1
   13cfa:	e843 ec00 	strex	ip, lr, [r3]
   13cfe:	f1bc 0f00 	cmp.w	ip, #0
   13d02:	d1f6      	bne.n	13cf2 <k_work_submit_to_queue+0xa>
   13d04:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13d08:	07d3      	lsls	r3, r2, #31
   13d0a:	d403      	bmi.n	13d14 <k_work_submit_to_queue+0x2c>
}
   13d0c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   13d10:	f7ff ba94 	b.w	1323c <k_queue_append>
   13d14:	f85d fb04 	ldr.w	pc, [sp], #4

00013d18 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13d18:	f1a0 010c 	sub.w	r1, r0, #12
   13d1c:	6980      	ldr	r0, [r0, #24]
   13d1e:	f7ff bfe3 	b.w	13ce8 <k_work_submit_to_queue>

00013d22 <work_q_main>:
{
   13d22:	b510      	push	{r4, lr}
   13d24:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   13d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13d2a:	4620      	mov	r0, r4
   13d2c:	f7ff faaa 	bl	13284 <_impl_k_queue_get>
		if (!work) {
   13d30:	4603      	mov	r3, r0
   13d32:	2800      	cmp	r0, #0
   13d34:	d0f7      	beq.n	13d26 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d36:	3308      	adds	r3, #8
		handler = work->handler;
   13d38:	6842      	ldr	r2, [r0, #4]
   13d3a:	f3bf 8f5b 	dmb	ish
   13d3e:	e853 1f00 	ldrex	r1, [r3]
   13d42:	f021 0e01 	bic.w	lr, r1, #1
   13d46:	e843 ec00 	strex	ip, lr, [r3]
   13d4a:	f1bc 0f00 	cmp.w	ip, #0
   13d4e:	d1f6      	bne.n	13d3e <work_q_main+0x1c>
   13d50:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   13d54:	07cb      	lsls	r3, r1, #31
   13d56:	d500      	bpl.n	13d5a <work_q_main+0x38>
			handler(work);
   13d58:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   13d5a:	f7ff fcf5 	bl	13748 <_impl_k_yield>
   13d5e:	e7e2      	b.n	13d26 <work_q_main+0x4>

00013d60 <k_work_q_start>:
{
   13d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d62:	b087      	sub	sp, #28
   13d64:	4604      	mov	r4, r0
   13d66:	461f      	mov	r7, r3
   13d68:	460d      	mov	r5, r1
   13d6a:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   13d6c:	f7ff fa5e 	bl	1322c <_impl_k_queue_init>

   13d70:	2000      	movs	r0, #0
   13d72:	9005      	str	r0, [sp, #20]
   13d74:	9004      	str	r0, [sp, #16]
   13d76:	9002      	str	r0, [sp, #8]
   13d78:	9001      	str	r0, [sp, #4]
   13d7a:	9703      	str	r7, [sp, #12]
   13d7c:	9400      	str	r4, [sp, #0]
   13d7e:	4b04      	ldr	r3, [pc, #16]	; (13d90 <k_work_q_start+0x30>)
   13d80:	4632      	mov	r2, r6
   13d82:	4629      	mov	r1, r5
   13d84:	f104 0010 	add.w	r0, r4, #16
   13d88:	f7ff ff1a 	bl	13bc0 <_impl_k_thread_create>
}
   13d8c:	b007      	add	sp, #28
   13d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d90:	00013d23 	.word	0x00013d23

00013d94 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   13d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   13d98:	2300      	movs	r3, #0
   13d9a:	61c2      	str	r2, [r0, #28]
	t->func = func;
   13d9c:	4a04      	ldr	r2, [pc, #16]	; (13db0 <k_delayed_work_init+0x1c>)
   13d9e:	6003      	str	r3, [r0, #0]
   13da0:	6041      	str	r1, [r0, #4]
   13da2:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   13da4:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   13da6:	6143      	str	r3, [r0, #20]
	t->func = func;
   13da8:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   13daa:	6243      	str	r3, [r0, #36]	; 0x24
   13dac:	4770      	bx	lr
   13dae:	bf00      	nop
   13db0:	00013d19 	.word	0x00013d19

00013db4 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   13db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13db6:	f04f 0320 	mov.w	r3, #32
   13dba:	f3ef 8411 	mrs	r4, BASEPRI
   13dbe:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   13dc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13dc4:	b923      	cbnz	r3, 13dd0 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13dc6:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   13dca:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   13dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13dd0:	f3bf 8f5b 	dmb	ish
   13dd4:	6883      	ldr	r3, [r0, #8]
   13dd6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   13dda:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   13ddc:	f100 0508 	add.w	r5, r0, #8
   13de0:	d533      	bpl.n	13e4a <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   13de2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   13de4:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   13de6:	2100      	movs	r1, #0
   13de8:	2b00      	cmp	r3, #0
   13dea:	d0ec      	beq.n	13dc6 <k_delayed_work_cancel+0x12>
   13dec:	4298      	cmp	r0, r3
   13dee:	d127      	bne.n	13e40 <k_delayed_work_cancel+0x8c>
   13df0:	6803      	ldr	r3, [r0, #0]
   13df2:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13df4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   13df8:	b9c9      	cbnz	r1, 13e2e <k_delayed_work_cancel+0x7a>
   13dfa:	42b8      	cmp	r0, r7
	list->head = node;
   13dfc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   13dfe:	d100      	bne.n	13e02 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   13e00:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13e02:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13e04:	f003 0303 	and.w	r3, r3, #3
   13e08:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   13e0a:	2300      	movs	r3, #0
   13e0c:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e0e:	f3bf 8f5b 	dmb	ish
   13e12:	e855 2f00 	ldrex	r2, [r5]
   13e16:	f022 0201 	bic.w	r2, r2, #1
   13e1a:	e845 2100 	strex	r1, r2, [r5]
   13e1e:	2900      	cmp	r1, #0
   13e20:	d1f7      	bne.n	13e12 <k_delayed_work_cancel+0x5e>
   13e22:	f3bf 8f5b 	dmb	ish
   13e26:	f384 8811 	msr	BASEPRI, r4
	return 0;
   13e2a:	4618      	mov	r0, r3
   13e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13e2e:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13e30:	f006 0603 	and.w	r6, r6, #3
   13e34:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   13e36:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   13e38:	600b      	str	r3, [r1, #0]
	list->tail = node;
   13e3a:	bf08      	it	eq
   13e3c:	6051      	streq	r1, [r2, #4]
   13e3e:	e7e0      	b.n	13e02 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13e40:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   13e42:	4619      	mov	r1, r3
   13e44:	f026 0303 	bic.w	r3, r6, #3
   13e48:	e7ce      	b.n	13de8 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13e4a:	69c1      	ldr	r1, [r0, #28]
   13e4c:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   13e4e:	f100 020c 	add.w	r2, r0, #12
   13e52:	d0da      	beq.n	13e0a <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13e54:	4b08      	ldr	r3, [pc, #32]	; (13e78 <k_delayed_work_cancel+0xc4>)
   13e56:	699b      	ldr	r3, [r3, #24]
   13e58:	429a      	cmp	r2, r3
   13e5a:	bf1f      	itttt	ne
   13e5c:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13e5e:	6913      	ldrne	r3, [r2, #16]
   13e60:	185b      	addne	r3, r3, r1
   13e62:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   13e64:	6903      	ldr	r3, [r0, #16]
   13e66:	68c2      	ldr	r2, [r0, #12]
   13e68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13e6a:	68c2      	ldr	r2, [r0, #12]
   13e6c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e72:	61c3      	str	r3, [r0, #28]
   13e74:	e7c9      	b.n	13e0a <k_delayed_work_cancel+0x56>
   13e76:	bf00      	nop
   13e78:	20001970 	.word	0x20001970

00013e7c <k_delayed_work_submit_to_queue>:
{
   13e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e7e:	4607      	mov	r7, r0
   13e80:	460c      	mov	r4, r1
   13e82:	4615      	mov	r5, r2
	__asm__ volatile(
   13e84:	f04f 0320 	mov.w	r3, #32
   13e88:	f3ef 8611 	mrs	r6, BASEPRI
   13e8c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   13e90:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   13e92:	b123      	cbz	r3, 13e9e <k_delayed_work_submit_to_queue+0x22>
   13e94:	4283      	cmp	r3, r0
   13e96:	d00b      	beq.n	13eb0 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   13e98:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   13e9c:	e00d      	b.n	13eba <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   13e9e:	b138      	cbz	r0, 13eb0 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   13ea0:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   13ea2:	b96d      	cbnz	r5, 13ec0 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   13ea4:	4621      	mov	r1, r4
   13ea6:	4638      	mov	r0, r7
   13ea8:	f7ff ff1e 	bl	13ce8 <k_work_submit_to_queue>
	err = 0;
   13eac:	2000      	movs	r0, #0
   13eae:	e004      	b.n	13eba <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   13eb0:	4620      	mov	r0, r4
   13eb2:	f7ff ff7f 	bl	13db4 <k_delayed_work_cancel>
		if (err < 0) {
   13eb6:	2800      	cmp	r0, #0
   13eb8:	daf2      	bge.n	13ea0 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13eba:	f386 8811 	msr	BASEPRI, r6
}
   13ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13ec0:	220a      	movs	r2, #10
   13ec2:	3509      	adds	r5, #9
   13ec4:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   13ec8:	4a16      	ldr	r2, [pc, #88]	; (13f24 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   13eca:	2300      	movs	r3, #0
   13ecc:	4611      	mov	r1, r2
   13ece:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13ed0:	61a3      	str	r3, [r4, #24]
   13ed2:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   13ed6:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ed8:	428b      	cmp	r3, r1
   13eda:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13ede:	61e5      	str	r5, [r4, #28]
   13ee0:	d106      	bne.n	13ef0 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   13ee2:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   13ee4:	6993      	ldr	r3, [r2, #24]
   13ee6:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   13ee8:	6993      	ldr	r3, [r2, #24]
   13eea:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13eec:	6197      	str	r7, [r2, #24]
   13eee:	e7dd      	b.n	13eac <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13ef0:	2b00      	cmp	r3, #0
   13ef2:	d0f6      	beq.n	13ee2 <k_delayed_work_submit_to_queue+0x66>
   13ef4:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13ef8:	69e0      	ldr	r0, [r4, #28]
   13efa:	691d      	ldr	r5, [r3, #16]
   13efc:	42a8      	cmp	r0, r5
   13efe:	dc08      	bgt.n	13f12 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   13f00:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13f02:	1a28      	subs	r0, r5, r0
   13f04:	6118      	str	r0, [r3, #16]
   13f06:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   13f08:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   13f0a:	685a      	ldr	r2, [r3, #4]
   13f0c:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   13f0e:	605f      	str	r7, [r3, #4]
   13f10:	e7cc      	b.n	13eac <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   13f12:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   13f14:	4573      	cmp	r3, lr
   13f16:	61e0      	str	r0, [r4, #28]
   13f18:	d0e3      	beq.n	13ee2 <k_delayed_work_submit_to_queue+0x66>
   13f1a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13f1c:	2b00      	cmp	r3, #0
   13f1e:	d1eb      	bne.n	13ef8 <k_delayed_work_submit_to_queue+0x7c>
   13f20:	e7df      	b.n	13ee2 <k_delayed_work_submit_to_queue+0x66>
   13f22:	bf00      	nop
   13f24:	20001970 	.word	0x20001970

00013f28 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   13f28:	2314      	movs	r3, #20
   13f2a:	b530      	push	{r4, r5, lr}
   13f2c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   13f30:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   13f32:	2900      	cmp	r1, #0
   13f34:	da00      	bge.n	13f38 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   13f36:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   13f38:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   13f3a:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   13f3c:	f003 030f 	and.w	r3, r3, #15
   13f40:	2b02      	cmp	r3, #2
   13f42:	d003      	beq.n	13f4c <clear_event_registrations+0x24>
   13f44:	2b04      	cmp	r3, #4
   13f46:	d001      	beq.n	13f4c <clear_event_registrations+0x24>
   13f48:	2b01      	cmp	r3, #1
   13f4a:	d104      	bne.n	13f56 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   13f4c:	6843      	ldr	r3, [r0, #4]
   13f4e:	6805      	ldr	r5, [r0, #0]
   13f50:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   13f52:	6805      	ldr	r5, [r0, #0]
   13f54:	606b      	str	r3, [r5, #4]
   13f56:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13f5a:	f04f 0320 	mov.w	r3, #32
   13f5e:	f3ef 8211 	mrs	r2, BASEPRI
   13f62:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   13f66:	3901      	subs	r1, #1
   13f68:	3814      	subs	r0, #20
   13f6a:	e7e2      	b.n	13f32 <clear_event_registrations+0xa>

00013f6c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   13f6c:	6883      	ldr	r3, [r0, #8]
{
   13f6e:	b570      	push	{r4, r5, r6, lr}
   13f70:	4605      	mov	r5, r0
   13f72:	460e      	mov	r6, r1
	if (!event->poller) {
   13f74:	b1d3      	cbz	r3, 13fac <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   13f76:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   13f78:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   13f7a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   13f7c:	7a63      	ldrb	r3, [r4, #9]
   13f7e:	079a      	lsls	r2, r3, #30
   13f80:	d514      	bpl.n	13fac <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   13f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13f84:	3302      	adds	r3, #2
   13f86:	d01a      	beq.n	13fbe <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   13f88:	4620      	mov	r0, r4
   13f8a:	f7ff fa6e 	bl	1346a <_unpend_thread>
	_set_thread_return_value(thread,
   13f8e:	2e00      	cmp	r6, #0
   13f90:	bf0c      	ite	eq
   13f92:	f06f 0303 	mvneq.w	r3, #3
   13f96:	2300      	movne	r3, #0
   13f98:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   13f9a:	7a63      	ldrb	r3, [r4, #9]
   13f9c:	06db      	lsls	r3, r3, #27
   13f9e:	d105      	bne.n	13fac <signal_poll_event+0x40>
   13fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fa2:	3301      	adds	r3, #1
   13fa4:	d102      	bne.n	13fac <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   13fa6:	4620      	mov	r0, r4
   13fa8:	f7ff fac2 	bl	13530 <_add_thread_to_ready_q>
	event->state |= state;
   13fac:	7b6b      	ldrb	r3, [r5, #13]
   13fae:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   13fb2:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   13fb6:	2000      	movs	r0, #0
	event->state |= state;
   13fb8:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   13fba:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   13fbc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   13fbe:	f06f 000a 	mvn.w	r0, #10
}
   13fc2:	bd70      	pop	{r4, r5, r6, pc}

00013fc4 <add_event>:
{
   13fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13fc6:	6803      	ldr	r3, [r0, #0]
   13fc8:	4298      	cmp	r0, r3
   13fca:	4604      	mov	r4, r0
   13fcc:	460e      	mov	r6, r1
   13fce:	4617      	mov	r7, r2
   13fd0:	d106      	bne.n	13fe0 <add_event+0x1c>
	node->next = list;
   13fd2:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   13fd4:	6863      	ldr	r3, [r4, #4]
   13fd6:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   13fd8:	6863      	ldr	r3, [r4, #4]
   13fda:	601e      	str	r6, [r3, #0]
	list->tail = node;
   13fdc:	6066      	str	r6, [r4, #4]
   13fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13fe0:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d0f5      	beq.n	13fd2 <add_event+0xe>
   13fe6:	689b      	ldr	r3, [r3, #8]
   13fe8:	6811      	ldr	r1, [r2, #0]
   13fea:	6818      	ldr	r0, [r3, #0]
   13fec:	f7ff f9ee 	bl	133cc <_is_t1_higher_prio_than_t2>
   13ff0:	2800      	cmp	r0, #0
   13ff2:	d1ee      	bne.n	13fd2 <add_event+0xe>
	return list->head == list;
   13ff4:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ff6:	42ac      	cmp	r4, r5
   13ff8:	d0eb      	beq.n	13fd2 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13ffa:	2d00      	cmp	r5, #0
   13ffc:	d0e9      	beq.n	13fd2 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   13ffe:	68ab      	ldr	r3, [r5, #8]
   14000:	6838      	ldr	r0, [r7, #0]
   14002:	6819      	ldr	r1, [r3, #0]
   14004:	f7ff f9e2 	bl	133cc <_is_t1_higher_prio_than_t2>
   14008:	b130      	cbz	r0, 14018 <add_event+0x54>
		node->prev = insert_point->prev;
   1400a:	686b      	ldr	r3, [r5, #4]
   1400c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   1400e:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14010:	686b      	ldr	r3, [r5, #4]
   14012:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   14014:	606e      	str	r6, [r5, #4]
   14016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14018:	6863      	ldr	r3, [r4, #4]
   1401a:	429d      	cmp	r5, r3
   1401c:	d0d9      	beq.n	13fd2 <add_event+0xe>
   1401e:	682d      	ldr	r5, [r5, #0]
   14020:	e7eb      	b.n	13ffa <add_event+0x36>

00014022 <k_poll_event_init>:
{
   14022:	b530      	push	{r4, r5, lr}
	event->type = type;
   14024:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   14026:	6103      	str	r3, [r0, #16]
	event->type = type;
   14028:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   1402c:	7b81      	ldrb	r1, [r0, #14]
   1402e:	f362 0100 	bfi	r1, r2, #0, #1
   14032:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   14034:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   14036:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   14038:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   1403c:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   14040:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   14042:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   14044:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14046:	bd30      	pop	{r4, r5, pc}

00014048 <_impl_k_poll>:
{
   14048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1404c:	4b3f      	ldr	r3, [pc, #252]	; (1414c <_impl_k_poll+0x104>)
{
   1404e:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14050:	689b      	ldr	r3, [r3, #8]
   14052:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   14054:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14056:	2301      	movs	r3, #1
{
   14058:	4607      	mov	r7, r0
   1405a:	468a      	mov	sl, r1
   1405c:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1405e:	9301      	str	r3, [sp, #4]
   14060:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   14062:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   14066:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   14068:	4556      	cmp	r6, sl
   1406a:	db10      	blt.n	1408e <_impl_k_poll+0x46>
   1406c:	f04f 0320 	mov.w	r3, #32
   14070:	f3ef 8611 	mrs	r6, BASEPRI
   14074:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   14078:	9c01      	ldr	r4, [sp, #4]
   1407a:	2c00      	cmp	r4, #0
   1407c:	d13f      	bne.n	140fe <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1407e:	4632      	mov	r2, r6
   14080:	4629      	mov	r1, r5
   14082:	4638      	mov	r0, r7
   14084:	f7ff ff50 	bl	13f28 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14088:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1408c:	e040      	b.n	14110 <_impl_k_poll+0xc8>
	__asm__ volatile(
   1408e:	f04f 0320 	mov.w	r3, #32
   14092:	f3ef 8b11 	mrs	fp, BASEPRI
   14096:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   1409a:	7b62      	ldrb	r2, [r4, #13]
   1409c:	f002 030f 	and.w	r3, r2, #15
   140a0:	2b02      	cmp	r3, #2
   140a2:	d003      	beq.n	140ac <_impl_k_poll+0x64>
   140a4:	2b04      	cmp	r3, #4
   140a6:	d004      	beq.n	140b2 <_impl_k_poll+0x6a>
   140a8:	2b01      	cmp	r3, #1
   140aa:	d106      	bne.n	140ba <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   140ac:	6921      	ldr	r1, [r4, #16]
   140ae:	6889      	ldr	r1, [r1, #8]
   140b0:	e001      	b.n	140b6 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   140b2:	6921      	ldr	r1, [r4, #16]
   140b4:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   140b6:	2900      	cmp	r1, #0
   140b8:	d13d      	bne.n	14136 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   140ba:	f1b8 0f00 	cmp.w	r8, #0
   140be:	d014      	beq.n	140ea <_impl_k_poll+0xa2>
   140c0:	9a01      	ldr	r2, [sp, #4]
   140c2:	b192      	cbz	r2, 140ea <_impl_k_poll+0xa2>
	switch (event->type) {
   140c4:	2b02      	cmp	r3, #2
   140c6:	d007      	beq.n	140d8 <_impl_k_poll+0x90>
   140c8:	2b04      	cmp	r3, #4
   140ca:	d013      	beq.n	140f4 <_impl_k_poll+0xac>
   140cc:	2b01      	cmp	r3, #1
   140ce:	d109      	bne.n	140e4 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   140d0:	466a      	mov	r2, sp
   140d2:	4621      	mov	r1, r4
   140d4:	6920      	ldr	r0, [r4, #16]
   140d6:	e003      	b.n	140e0 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   140d8:	6920      	ldr	r0, [r4, #16]
   140da:	466a      	mov	r2, sp
   140dc:	4621      	mov	r1, r4
   140de:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   140e0:	f7ff ff70 	bl	13fc4 <add_event>
	event->poller = poller;
   140e4:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   140e8:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   140ea:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   140ee:	3601      	adds	r6, #1
   140f0:	3414      	adds	r4, #20
   140f2:	e7b9      	b.n	14068 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   140f4:	6920      	ldr	r0, [r4, #16]
   140f6:	466a      	mov	r2, sp
   140f8:	4621      	mov	r1, r4
   140fa:	3008      	adds	r0, #8
   140fc:	e7f0      	b.n	140e0 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   140fe:	2300      	movs	r3, #0
   14100:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   14102:	f1b8 0f00 	cmp.w	r8, #0
   14106:	d107      	bne.n	14118 <_impl_k_poll+0xd0>
   14108:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   1410c:	f06f 040a 	mvn.w	r4, #10
}
   14110:	4620      	mov	r0, r4
   14112:	b005      	add	sp, #20
   14114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14118:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1411a:	4642      	mov	r2, r8
   1411c:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1411e:	9102      	str	r1, [sp, #8]
   14120:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14122:	f7ff fab3 	bl	1368c <_pend_current_thread>
   14126:	4604      	mov	r4, r0
	__asm__ volatile(
   14128:	f04f 0320 	mov.w	r3, #32
   1412c:	f3ef 8611 	mrs	r6, BASEPRI
   14130:	f383 8811 	msr	BASEPRI, r3
   14134:	e7a3      	b.n	1407e <_impl_k_poll+0x36>
	event->state |= state;
   14136:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1413a:	f363 1207 	bfi	r2, r3, #4, #4
   1413e:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   14140:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   14144:	f8cd 9004 	str.w	r9, [sp, #4]
   14148:	e7cf      	b.n	140ea <_impl_k_poll+0xa2>
   1414a:	bf00      	nop
   1414c:	20001970 	.word	0x20001970

00014150 <_handle_obj_poll_events>:
	return list->head == list;
   14150:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   14152:	4298      	cmp	r0, r3
   14154:	d007      	beq.n	14166 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   14156:	e893 0005 	ldmia.w	r3, {r0, r2}
   1415a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1415c:	6818      	ldr	r0, [r3, #0]
   1415e:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   14160:	4618      	mov	r0, r3
   14162:	f7ff bf03 	b.w	13f6c <signal_poll_event>
   14166:	4770      	bx	lr

00014168 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   14168:	b538      	push	{r3, r4, r5, lr}
   1416a:	f04f 0320 	mov.w	r3, #32
   1416e:	f3ef 8511 	mrs	r5, BASEPRI
   14172:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14176:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   14178:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1417a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1417c:	f04f 0101 	mov.w	r1, #1
   14180:	6081      	str	r1, [r0, #8]
   14182:	d00d      	beq.n	141a0 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   14184:	e893 0005 	ldmia.w	r3, {r0, r2}
   14188:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1418a:	6818      	ldr	r0, [r3, #0]
   1418c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1418e:	4618      	mov	r0, r3
   14190:	f7ff feec 	bl	13f6c <signal_poll_event>
   14194:	4604      	mov	r4, r0

	_reschedule(key);
   14196:	4628      	mov	r0, r5
   14198:	f7ff f972 	bl	13480 <_reschedule>
	return rc;
}
   1419c:	4620      	mov	r0, r4
   1419e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141a0:	f385 8811 	msr	BASEPRI, r5
		return 0;
   141a4:	2400      	movs	r4, #0
   141a6:	e7f9      	b.n	1419c <_impl_k_poll_signal+0x34>

000141a8 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   141a8:	4770      	bx	lr
