
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce8 	.word	0x20002ce8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001add 	.word	0x00001add
       8:	00001b31 	.word	0x00001b31
       c:	00001975 	.word	0x00001975
      10:	00001975 	.word	0x00001975
      14:	00001975 	.word	0x00001975
      18:	00001975 	.word	0x00001975
      1c:	00001975 	.word	0x00001975
      20:	00001975 	.word	0x00001975
      24:	00001975 	.word	0x00001975
      28:	00001975 	.word	0x00001975
      2c:	0000157d 	.word	0x0000157d
      30:	00001975 	.word	0x00001975
      34:	00001975 	.word	0x00001975
      38:	00001539 	.word	0x00001539
      3c:	00001975 	.word	0x00001975

00000040 <_irq_vector_table>:
      40:	00001aa1 00010cfb 00001aa1 00001aa1     ................
      50:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      60:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      70:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      80:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      90:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      a0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      b0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      c0:	00001aa1 00001aa1 00001aa1 00001aa1     ................
      d0:	00001aa1 00001aa1 00001aa1              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001275 00000000 000018ed     ....u...........
      ec:	00000000 000018ed 00000000 000018ed     ................
      fc:	00000000 000018ed 00000000 000018ed     ................
     10c:	00000000 00012d29 00000000 000018ed     ....)-..........
     11c:	00000000 000018ed 00000000 000018ed     ................
     12c:	00000000 000018ed 00000000 00010cc1     ................
     13c:	00000000 000018ed 20003eb8 0001302d     .........>. -0..
     14c:	00000000 000018ed 00000000 000018ed     ................
     15c:	00000000 000018ed 00000000 0000139d     ................
     16c:	00000000 000018ed 00000000 000018ed     ................
     17c:	00000000 000018ed 00000000 000018ed     ................
     18c:	00000000 000018ed 00000000 000018ed     ................
     19c:	00000000 00010cf5 00000000 000018ed     ................
     1ac:	00000000 000018ed 00000000 000018ed     ................
     1bc:	00000000 000018ed 00000000 000018ed     ................
     1cc:	00000000 000018ed 00000000 000018ed     ................
     1dc:	00000000 000018ed 00000000 000018ed     ................
     1ec:	00000000 000018ed 00000000 000018ed     ................
     1fc:	00000000 000018ed 00000000 000018ed     ................
     20c:	00000000 000018ed                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb14 	bl	1b94 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	000145b1 	.word	0x000145b1
     5b0:	000145da 	.word	0x000145da
     5b4:	000145b8 	.word	0x000145b8
     5b8:	000145bf 	.word	0x000145bf
     5bc:	000145c9 	.word	0x000145c9
     5c0:	000145d3 	.word	0x000145d3

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f003 fe7d 	bl	42ca <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f003 ff1b 	bl	4434 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	000145fd 	.word	0x000145fd
     604:	20000000 	.word	0x20000000
     608:	0001461b 	.word	0x0001461b

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f003 fe56 	bl	42ca <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe48 	bl	42c4 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 f9ca 	bl	39e0 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00014646 	.word	0x00014646
     664:	00014554 	.word	0x00014554
     668:	00000671 	.word	0x00000671
     66c:	00014664 	.word	0x00014664

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 f9f5 	bl	3a84 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f003 fe11 	bl	42d0 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	0001462a 	.word	0x0001462a
     6bc:	0001455a 	.word	0x0001455a

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f91c 	bl	3900 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fa8c 	bl	3bfc <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f974 	bl	39e0 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00014687 	.word	0x00014687
     70c:	000146a7 	.word	0x000146a7
     710:	20003a28 	.word	0x20003a28
     714:	00014562 	.word	0x00014562
     718:	00000671 	.word	0x00000671
     71c:	00014664 	.word	0x00014664
     720:	000146be 	.word	0x000146be

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a5c 	.word	0x20003a5c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 f908 	bl	13ab8 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8d4 	bl	1a54 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a60 	.word	0x20003a60

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a60 	.word	0x20003a60

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f012 f887 	bl	13108 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa37 	bl	1490 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	000146ec 	.word	0x000146ec

00001034 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1034:	280a      	cmp	r0, #10
{
    1036:	b538      	push	{r3, r4, r5, lr}
    1038:	4604      	mov	r4, r0
    103a:	4d07      	ldr	r5, [pc, #28]	; (1058 <console_out+0x24>)
	if ('\n' == c) {
    103c:	d104      	bne.n	1048 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    103e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1040:	6843      	ldr	r3, [r0, #4]
    1042:	210d      	movs	r1, #13
    1044:	685b      	ldr	r3, [r3, #4]
    1046:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1048:	6828      	ldr	r0, [r5, #0]
    104a:	6843      	ldr	r3, [r0, #4]
    104c:	b2e1      	uxtb	r1, r4
    104e:	685b      	ldr	r3, [r3, #4]
    1050:	4798      	blx	r3

	return c;
}
    1052:	4620      	mov	r0, r4
    1054:	bd38      	pop	{r3, r4, r5, pc}
    1056:	bf00      	nop
    1058:	20000008 	.word	0x20000008

0000105c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    105c:	4801      	ldr	r0, [pc, #4]	; (1064 <uart_console_hook_install+0x8>)
    105e:	f7ff be4f 	b.w	d00 <__printk_hook_install>
    1062:	bf00      	nop
    1064:	00001035 	.word	0x00001035

00001068 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1068:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106a:	4804      	ldr	r0, [pc, #16]	; (107c <uart_console_init+0x14>)
    106c:	f012 f84c 	bl	13108 <device_get_binding>
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <uart_console_init+0x18>)
    1072:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1074:	f7ff fff2 	bl	105c <uart_console_hook_install>

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	bd08      	pop	{r3, pc}
    107c:	000146f6 	.word	0x000146f6
    1080:	20000008 	.word	0x20000008

00001084 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1084:	b510      	push	{r4, lr}
	__asm__ volatile(
    1086:	f04f 0320 	mov.w	r3, #32
    108a:	f3ef 8211 	mrs	r2, BASEPRI
    108e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1092:	4c11      	ldr	r4, [pc, #68]	; (10d8 <_m16src_stop+0x54>)
    1094:	7823      	ldrb	r3, [r4, #0]
    1096:	b923      	cbnz	r3, 10a2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1098:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    109c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a2:	3b01      	subs	r3, #1
    10a4:	b2db      	uxtb	r3, r3
    10a6:	7023      	strb	r3, [r4, #0]
    10a8:	b123      	cbz	r3, 10b4 <_m16src_stop+0x30>
    10aa:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10ae:	f06f 000f 	mvn.w	r0, #15
    10b2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b4:	4b09      	ldr	r3, [pc, #36]	; (10dc <_m16src_stop+0x58>)
    10b6:	7818      	ldrb	r0, [r3, #0]
    10b8:	2101      	movs	r1, #1
    10ba:	b128      	cbz	r0, 10c8 <_m16src_stop+0x44>
		m16src_ref++;
    10bc:	7021      	strb	r1, [r4, #0]
    10be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c2:	f06f 000a 	mvn.w	r0, #10
    10c6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10d6:	bd10      	pop	{r4, pc}
    10d8:	2000000e 	.word	0x2000000e
    10dc:	2000000d 	.word	0x2000000d

000010e0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e2:	2200      	movs	r2, #0
    10e4:	4610      	mov	r0, r2
    10e6:	2101      	movs	r1, #1
    10e8:	f000 fbe8 	bl	18bc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10ec:	2000      	movs	r0, #0
    10ee:	f000 fbb3 	bl	1858 <_arch_irq_enable>

	return 0;
}
    10f2:	2000      	movs	r0, #0
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <_m16src_start>:
{
    10f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fa:	f04f 0220 	mov.w	r2, #32
    10fe:	f3ef 8311 	mrs	r3, BASEPRI
    1102:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1106:	4a25      	ldr	r2, [pc, #148]	; (119c <_m16src_start+0xa4>)
    1108:	7810      	ldrb	r0, [r2, #0]
    110a:	1c44      	adds	r4, r0, #1
    110c:	7014      	strb	r4, [r2, #0]
    110e:	b160      	cbz	r0, 112a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1110:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1118:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    111c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1120:	bf14      	ite	ne
    1122:	2000      	movne	r0, #0
    1124:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112a:	4d1d      	ldr	r5, [pc, #116]	; (11a0 <_m16src_start+0xa8>)
    112c:	782f      	ldrb	r7, [r5, #0]
    112e:	b12f      	cbz	r7, 113c <_m16src_start+0x44>
		m16src_ref--;
    1130:	7010      	strb	r0, [r2, #0]
    1132:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1136:	f06f 000a 	mvn.w	r0, #10
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    113c:	2601      	movs	r6, #1
    113e:	702e      	strb	r6, [r5, #0]
    1140:	f383 8811 	msr	BASEPRI, r3
    1144:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1148:	b319      	cbz	r1, 1192 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114a:	4638      	mov	r0, r7
    114c:	f000 fb94 	bl	1878 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1150:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1158:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    115c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    115e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1162:	b192      	cbz	r2, 118a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1164:	2200      	movs	r2, #0
    1166:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116a:	4a0e      	ldr	r2, [pc, #56]	; (11a4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    116c:	f013 0f01 	tst.w	r3, #1
    1170:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1174:	bf08      	it	eq
    1176:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117a:	2000      	movs	r0, #0
    117c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1180:	f000 fb6a 	bl	1858 <_arch_irq_enable>
	m16src_grd = 0;
    1184:	2300      	movs	r3, #0
    1186:	702b      	strb	r3, [r5, #0]
    1188:	e7c4      	b.n	1114 <_m16src_start+0x1c>
			__WFE();
    118a:	bf20      	wfe
			__SEV();
    118c:	bf40      	sev
			__WFE();
    118e:	bf20      	wfe
    1190:	e7e5      	b.n	115e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1196:	6026      	str	r6, [r4, #0]
    1198:	e7f4      	b.n	1184 <_m16src_start+0x8c>
    119a:	bf00      	nop
    119c:	2000000e 	.word	0x2000000e
    11a0:	2000000d 	.word	0x2000000d
    11a4:	e000e100 	.word	0xe000e100

000011a8 <_k32src_start>:
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11aa:	4606      	mov	r6, r0
    11ac:	460c      	mov	r4, r1
	__asm__ volatile(
    11ae:	f04f 0220 	mov.w	r2, #32
    11b2:	f3ef 8311 	mrs	r3, BASEPRI
    11b6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ba:	4a2c      	ldr	r2, [pc, #176]	; (126c <_k32src_start+0xc4>)
    11bc:	7815      	ldrb	r5, [r2, #0]
    11be:	b165      	cbz	r5, 11da <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11c8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d0:	bf0c      	ite	eq
    11d2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11d6:	2000      	movne	r0, #0
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11da:	2701      	movs	r7, #1
    11dc:	7017      	strb	r7, [r2, #0]
    11de:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e2:	4628      	mov	r0, r5
    11e4:	f000 fb48 	bl	1878 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ec:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ee:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11fe:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1200:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1204:	b371      	cbz	r1, 1264 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1206:	0792      	lsls	r2, r2, #30
    1208:	4f19      	ldr	r7, [pc, #100]	; (1270 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120a:	bf58      	it	pl
    120c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f04f 0501 	mov.w	r5, #1
    1216:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    121e:	bf58      	it	pl
    1220:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1224:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1228:	f000 fb16 	bl	1858 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    122c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1230:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1232:	2218      	movs	r2, #24
    1234:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1238:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    123c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1240:	f014 0103 	ands.w	r1, r4, #3
    1244:	d1be      	bne.n	11c4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1246:	2010      	movs	r0, #16
    1248:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    124c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1250:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1252:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1256:	f7ff ff4f 	bl	10f8 <_m16src_start>
		if (!err) {
    125a:	2800      	cmp	r0, #0
    125c:	d1b2      	bne.n	11c4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1262:	e7af      	b.n	11c4 <_k32src_start+0x1c>
		__WFE();
    1264:	bf20      	wfe
		__SEV();
    1266:	bf40      	sev
		__WFE();
    1268:	bf20      	wfe
    126a:	e7c9      	b.n	1200 <_k32src_start+0x58>
    126c:	2000000c 	.word	0x2000000c
    1270:	e000e100 	.word	0xe000e100

00001274 <_power_clock_isr>:
{
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1280:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1284:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1288:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    128c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1290:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1294:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    129c:	f1be 0f00 	cmp.w	lr, #0
    12a0:	d003      	beq.n	12aa <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a2:	f04f 0e00 	mov.w	lr, #0
    12a6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12aa:	b127      	cbz	r7, 12b6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b0:	2700      	movs	r7, #0
    12b2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12b6:	b13a      	cbz	r2, 12c8 <_power_clock_isr+0x54>
    12b8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ba:	bf41      	itttt	mi
    12bc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c0:	2201      	movmi	r2, #1
    12c2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12c6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12c8:	b120      	cbz	r0, 12d4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ce:	2200      	movs	r2, #0
    12d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d4:	b149      	cbz	r1, 12ea <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12da:	2100      	movs	r1, #0
    12dc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e0:	4628      	mov	r0, r5
    12e2:	f7ff fecf 	bl	1084 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ea:	b176      	cbz	r6, 130a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12f8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fa:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12fe:	f7ff fefb 	bl	10f8 <_m16src_start>
		if (!err) {
    1302:	b910      	cbnz	r0, 130a <_power_clock_isr+0x96>
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <_power_clock_isr+0x98>)
    1306:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	e000e100 	.word	0xe000e100

00001310 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <rtc_compare_set+0x24>)
    1312:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1316:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131a:	1ac0      	subs	r0, r0, r3
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <rtc_compare_set+0x28>)
    1322:	3802      	subs	r0, #2
    1324:	4298      	cmp	r0, r3
    1326:	bf82      	ittt	hi
    1328:	4b04      	ldrhi	r3, [pc, #16]	; (133c <rtc_compare_set+0x2c>)
    132a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    132e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1332:	4770      	bx	lr
    1334:	40011000 	.word	0x40011000
    1338:	007ffffd 	.word	0x007ffffd
    133c:	e000e100 	.word	0xe000e100

00001340 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1340:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1342:	4b11      	ldr	r3, [pc, #68]	; (1388 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1346:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    134c:	4d10      	ldr	r5, [pc, #64]	; (1390 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1356:	4298      	cmp	r0, r3
    1358:	d30f      	bcc.n	137a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <rtc_announce_set_next+0x54>)
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	4288      	cmp	r0, r1
    1364:	bf28      	it	cs
    1366:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1368:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    136c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1370:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <rtc_announce_set_next+0x58>)
    1374:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1376:	f012 fc17 	bl	13ba8 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137a:	6820      	ldr	r0, [r4, #0]
    137c:	682b      	ldr	r3, [r5, #0]
    137e:	4418      	add	r0, r3
}
    1380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1384:	f7ff bfc4 	b.w	1310 <rtc_compare_set>
    1388:	40011000 	.word	0x40011000
    138c:	20000014 	.word	0x20000014
    1390:	20003e78 	.word	0x20003e78
    1394:	20000010 	.word	0x20000010
    1398:	20003e74 	.word	0x20003e74

0000139c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <rtc1_nrf5_isr+0xc>)
    139e:	2200      	movs	r2, #0
    13a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a4:	f7ff bfcc 	b.w	1340 <rtc_announce_set_next>
    13a8:	40011000 	.word	0x40011000

000013ac <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13ac:	1e03      	subs	r3, r0, #0
    13ae:	4a0a      	ldr	r2, [pc, #40]	; (13d8 <_timer_idle_enter+0x2c>)
    13b0:	480a      	ldr	r0, [pc, #40]	; (13dc <_timer_idle_enter+0x30>)
    13b2:	db04      	blt.n	13be <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b4:	6811      	ldr	r1, [r2, #0]
    13b6:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13ba:	428b      	cmp	r3, r1
    13bc:	dd02      	ble.n	13c4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13be:	6813      	ldr	r3, [r2, #0]
    13c0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c4:	6810      	ldr	r0, [r2, #0]
    13c6:	4a06      	ldr	r2, [pc, #24]	; (13e0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13c8:	4906      	ldr	r1, [pc, #24]	; (13e4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ca:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13cc:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	fb00 2003 	mla	r0, r0, r3, r2
    13d2:	f7ff bf9d 	b.w	1310 <rtc_compare_set>
    13d6:	bf00      	nop
    13d8:	20003e78 	.word	0x20003e78
    13dc:	007fffff 	.word	0x007fffff
    13e0:	20000014 	.word	0x20000014
    13e4:	20000010 	.word	0x20000010

000013e8 <_timer_idle_exit>:
{
    13e8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <_timer_idle_exit+0x20>)
    13ec:	2200      	movs	r2, #0
    13ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	4b06      	ldr	r3, [pc, #24]	; (140c <_timer_idle_exit+0x24>)
    13f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    13fc:	f7ff ffa0 	bl	1340 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1400:	4b03      	ldr	r3, [pc, #12]	; (1410 <_timer_idle_exit+0x28>)
    1402:	2201      	movs	r2, #1
    1404:	601a      	str	r2, [r3, #0]
    1406:	bd08      	pop	{r3, pc}
    1408:	40011000 	.word	0x40011000
    140c:	e000e100 	.word	0xe000e100
    1410:	20000010 	.word	0x20000010

00001414 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1414:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1416:	4818      	ldr	r0, [pc, #96]	; (1478 <_sys_clock_driver_init+0x64>)
    1418:	f011 fe76 	bl	13108 <device_get_binding>
	if (!clock) {
    141c:	b348      	cbz	r0, 1472 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    141e:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <_sys_clock_driver_init+0x68>)
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	2101      	movs	r1, #1
    1426:	4798      	blx	r3
	rtc_past = 0;
    1428:	4b15      	ldr	r3, [pc, #84]	; (1480 <_sys_clock_driver_init+0x6c>)
    142a:	2400      	movs	r4, #0
    142c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    142e:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x70>)
    1430:	2601      	movs	r6, #1
    1432:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1436:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1444:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1448:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    144e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145a:	4631      	mov	r1, r6
    145c:	4622      	mov	r2, r4
    145e:	2011      	movs	r0, #17
    1460:	f000 fa2c 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1464:	2011      	movs	r0, #17
    1466:	f000 f9f7 	bl	1858 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    146c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    146e:	602e      	str	r6, [r5, #0]
	return 0;
    1470:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1476:	bd70      	pop	{r4, r5, r6, pc}
    1478:	00014718 	.word	0x00014718
    147c:	40011000 	.word	0x40011000
    1480:	20000014 	.word	0x20000014
    1484:	20000010 	.word	0x20000010
    1488:	20003e78 	.word	0x20003e78
    148c:	e000e100 	.word	0xe000e100

00001490 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1490:	4a0a      	ldr	r2, [pc, #40]	; (14bc <_timer_cycle_get_32+0x2c>)
{
    1492:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1494:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1498:	4d09      	ldr	r5, [pc, #36]	; (14c0 <_timer_cycle_get_32+0x30>)
    149a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    149e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a2:	42a3      	cmp	r3, r4
    14a4:	d107      	bne.n	14b6 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14a6:	4a07      	ldr	r2, [pc, #28]	; (14c4 <_timer_cycle_get_32+0x34>)
    14a8:	6812      	ldr	r2, [r2, #0]
    14aa:	4350      	muls	r0, r2
    14ac:	1a1b      	subs	r3, r3, r0
    14ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b2:	4418      	add	r0, r3
    14b4:	bd30      	pop	{r4, r5, pc}
    14b6:	4623      	mov	r3, r4
    14b8:	e7ef      	b.n	149a <_timer_cycle_get_32+0xa>
    14ba:	bf00      	nop
    14bc:	40011000 	.word	0x40011000
    14c0:	20001988 	.word	0x20001988
    14c4:	20003e78 	.word	0x20003e78

000014c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14c8:	4807      	ldr	r0, [pc, #28]	; (14e8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14cc:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d0:	d008      	beq.n	14e4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d4:	f012 faa2 	bl	13a1c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14d8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14dc:	4903      	ldr	r1, [pc, #12]	; (14ec <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e2:	600a      	str	r2, [r1, #0]

000014e4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r0, =_kernel
    14e8:	20001950 	.word	0x20001950
    ldr r1, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14f2:	2300      	movs	r3, #0
    14f4:	2120      	movs	r1, #32
    14f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    14f8:	3301      	adds	r3, #1
    14fa:	2b27      	cmp	r3, #39	; 0x27
    14fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1500:	d1f9      	bne.n	14f6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1502:	4770      	bx	lr
    1504:	e000e100 	.word	0xe000e100

00001508 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    150a:	4909      	ldr	r1, [pc, #36]	; (1530 <__swap+0x28>)
	_current->arch.basepri = key;
    150c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1512:	4908      	ldr	r1, [pc, #32]	; (1534 <__swap+0x2c>)
	_current->arch.basepri = key;
    1514:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1516:	684b      	ldr	r3, [r1, #4]
    1518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    151c:	604b      	str	r3, [r1, #4]
    151e:	2300      	movs	r3, #0
    1520:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1524:	6893      	ldr	r3, [r2, #8]
}
    1526:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	20001950 	.word	0x20001950
    1530:	00017b58 	.word	0x00017b58
    1534:	e000ed00 	.word	0xe000ed00

00001538 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1538:	2020      	movs	r0, #32
    msr BASEPRI, r0
    153a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    153e:	490d      	ldr	r1, [pc, #52]	; (1574 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1540:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1542:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1544:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1546:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    154a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    154e:	4f0a      	ldr	r7, [pc, #40]	; (1578 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1554:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1556:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1558:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    155a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    155c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    155e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1560:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1564:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1568:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    156c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1570:	4770      	bx	lr
    1572:	0000      	.short	0x0000
    ldr r1, =_kernel
    1574:	20001950 	.word	0x20001950
    ldr v4, =_SCS_ICSR
    1578:	e000ed04 	.word	0xe000ed04

0000157c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1586:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    158a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    158c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1594:	2902      	cmp	r1, #2
    beq _oops
    1596:	d0ff      	beq.n	1598 <_oops>

00001598 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1598:	b500      	push	{lr}
    blx _do_kernel_oops
    159a:	f000 fa2b 	bl	19f4 <_do_kernel_oops>
    pop {pc}
    159e:	bd00      	pop	{pc}

000015a0 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15a0:	b510      	push	{r4, lr}
    15a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15a4:	f012 fa88 	bl	13ab8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b0:	4801      	ldr	r0, [pc, #4]	; (15b8 <_FaultThreadShow.isra.2+0x18>)
    15b2:	f7ff bceb 	b.w	f8c <printk>
    15b6:	bf00      	nop
    15b8:	00014871 	.word	0x00014871

000015bc <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15c0:	481a      	ldr	r0, [pc, #104]	; (162c <_MpuFault+0x70>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15c4:	f7ff fce2 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15cc:	4c18      	ldr	r4, [pc, #96]	; (1630 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15ce:	f7ff ffe7 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	06d9      	lsls	r1, r3, #27
    15d6:	d502      	bpl.n	15de <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15d8:	4816      	ldr	r0, [pc, #88]	; (1634 <_MpuFault+0x78>)
    15da:	f7ff fcd7 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	071a      	lsls	r2, r3, #28
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15e4:	4814      	ldr	r0, [pc, #80]	; (1638 <_MpuFault+0x7c>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d50e      	bpl.n	160e <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15f0:	4812      	ldr	r0, [pc, #72]	; (163c <_MpuFault+0x80>)
    15f2:	f7ff fccb 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    15f6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	0618      	lsls	r0, r3, #24
    15fc:	d507      	bpl.n	160e <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    15fe:	4810      	ldr	r0, [pc, #64]	; (1640 <_MpuFault+0x84>)
    1600:	f7ff fcc4 	bl	f8c <printk>
			if (fromHardFault) {
    1604:	b11d      	cbz	r5, 160e <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    160c:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    160e:	4c08      	ldr	r4, [pc, #32]	; (1630 <_MpuFault+0x74>)
    1610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1612:	07d2      	lsls	r2, r2, #31
    1614:	d502      	bpl.n	161c <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1616:	480b      	ldr	r0, [pc, #44]	; (1644 <_MpuFault+0x88>)
    1618:	f7ff fcb8 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	069b      	lsls	r3, r3, #26
    1620:	d502      	bpl.n	1628 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1622:	4809      	ldr	r0, [pc, #36]	; (1648 <_MpuFault+0x8c>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1628:	2000      	movs	r0, #0
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	000148bb 	.word	0x000148bb
    1630:	e000ed00 	.word	0xe000ed00
    1634:	000148d2 	.word	0x000148d2
    1638:	000148e4 	.word	0x000148e4
    163c:	000148f8 	.word	0x000148f8
    1640:	00014911 	.word	0x00014911
    1644:	00014922 	.word	0x00014922
    1648:	00014942 	.word	0x00014942

0000164c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1650:	481a      	ldr	r0, [pc, #104]	; (16bc <_UsageFault+0x70>)
    1652:	f7ff fc9b 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1656:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    165a:	4c19      	ldr	r4, [pc, #100]	; (16c0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    165c:	f7ff ffa0 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1662:	019a      	lsls	r2, r3, #6
    1664:	d502      	bpl.n	166c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1666:	4817      	ldr	r0, [pc, #92]	; (16c4 <_UsageFault+0x78>)
    1668:	f7ff fc90 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	01db      	lsls	r3, r3, #7
    1670:	d502      	bpl.n	1678 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1672:	4815      	ldr	r0, [pc, #84]	; (16c8 <_UsageFault+0x7c>)
    1674:	f7ff fc8a 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	0318      	lsls	r0, r3, #12
    167c:	d502      	bpl.n	1684 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    167e:	4813      	ldr	r0, [pc, #76]	; (16cc <_UsageFault+0x80>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1684:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <_UsageFault+0x74>)
    1686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1688:	0359      	lsls	r1, r3, #13
    168a:	d502      	bpl.n	1692 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <_UsageFault+0x84>)
    168e:	f7ff fc7d 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	039a      	lsls	r2, r3, #14
    1696:	d502      	bpl.n	169e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1698:	480e      	ldr	r0, [pc, #56]	; (16d4 <_UsageFault+0x88>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	03db      	lsls	r3, r3, #15
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16a4:	480c      	ldr	r0, [pc, #48]	; (16d8 <_UsageFault+0x8c>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16aa:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_UsageFault+0x74>)
    16ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ae:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16b2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16b6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16b8:	2000      	movs	r0, #0
    16ba:	bd10      	pop	{r4, pc}
    16bc:	00014972 	.word	0x00014972
    16c0:	e000ed00 	.word	0xe000ed00
    16c4:	0001498b 	.word	0x0001498b
    16c8:	0001499f 	.word	0x0001499f
    16cc:	000149ba 	.word	0x000149ba
    16d0:	000149d9 	.word	0x000149d9
    16d4:	000149ff 	.word	0x000149ff
    16d8:	00014a1a 	.word	0x00014a1a

000016dc <_BusFault>:
{
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16e0:	481d      	ldr	r0, [pc, #116]	; (1758 <_BusFault+0x7c>)
{
    16e2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16e4:	f7ff fc52 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16e8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16ec:	4c1b      	ldr	r4, [pc, #108]	; (175c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16ee:	f7ff ff57 	bl	15a0 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16f4:	04d8      	lsls	r0, r3, #19
    16f6:	d504      	bpl.n	1702 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <_BusFault+0x84>)
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    16fe:	f7ff bc45 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1704:	0519      	lsls	r1, r3, #20
    1706:	d501      	bpl.n	170c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1708:	4816      	ldr	r0, [pc, #88]	; (1764 <_BusFault+0x88>)
    170a:	e7f6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    170c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170e:	059a      	lsls	r2, r3, #22
    1710:	d514      	bpl.n	173c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1712:	4815      	ldr	r0, [pc, #84]	; (1768 <_BusFault+0x8c>)
    1714:	f7ff fc3a 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1718:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	041b      	lsls	r3, r3, #16
    171e:	d507      	bpl.n	1730 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1720:	4812      	ldr	r0, [pc, #72]	; (176c <_BusFault+0x90>)
    1722:	f7ff fc33 	bl	f8c <printk>
			if (fromHardFault) {
    1726:	b11d      	cbz	r5, 1730 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    172a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    172e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1730:	4b0a      	ldr	r3, [pc, #40]	; (175c <_BusFault+0x80>)
    1732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1734:	0558      	lsls	r0, r3, #21
    1736:	d50e      	bpl.n	1756 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1738:	480d      	ldr	r0, [pc, #52]	; (1770 <_BusFault+0x94>)
    173a:	e7de      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    173e:	0559      	lsls	r1, r3, #21
    1740:	d4fa      	bmi.n	1738 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1744:	05da      	lsls	r2, r3, #23
    1746:	d501      	bpl.n	174c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1748:	480a      	ldr	r0, [pc, #40]	; (1774 <_BusFault+0x98>)
    174a:	e7d6      	b.n	16fa <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    174c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174e:	049b      	lsls	r3, r3, #18
    1750:	d501      	bpl.n	1756 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1752:	4809      	ldr	r0, [pc, #36]	; (1778 <_BusFault+0x9c>)
    1754:	e7d1      	b.n	16fa <_BusFault+0x1e>
    1756:	bd38      	pop	{r3, r4, r5, pc}
    1758:	00014738 	.word	0x00014738
    175c:	e000ed00 	.word	0xe000ed00
    1760:	000148d2 	.word	0x000148d2
    1764:	000148e4 	.word	0x000148e4
    1768:	0001474f 	.word	0x0001474f
    176c:	00014911 	.word	0x00014911
    1770:	00014769 	.word	0x00014769
    1774:	00014785 	.word	0x00014785
    1778:	00014942 	.word	0x00014942

0000177c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    177c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    177e:	4c27      	ldr	r4, [pc, #156]	; (181c <_Fault+0xa0>)
    1780:	6863      	ldr	r3, [r4, #4]
    1782:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1786:	1eda      	subs	r2, r3, #3
{
    1788:	4605      	mov	r5, r0
	switch (fault) {
    178a:	2a09      	cmp	r2, #9
    178c:	d83b      	bhi.n	1806 <_Fault+0x8a>
    178e:	e8df f002 	tbb	[pc, r2]
    1792:	3405      	.short	0x3405
    1794:	3a3a3036 	.word	0x3a3a3036
    1798:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    179c:	4820      	ldr	r0, [pc, #128]	; (1820 <_Fault+0xa4>)
    179e:	f7ff fbf5 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a4:	079a      	lsls	r2, r3, #30
    17a6:	d503      	bpl.n	17b0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17a8:	481e      	ldr	r0, [pc, #120]	; (1824 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17aa:	f7ff fbef 	bl	f8c <printk>
    17ae:	e002      	b.n	17b6 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	d401      	bmi.n	17ba <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17b6:	2000      	movs	r0, #0
    17b8:	e009      	b.n	17ce <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17ba:	481b      	ldr	r0, [pc, #108]	; (1828 <_Fault+0xac>)
    17bc:	f7ff fbe6 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <_Fault+0xb0>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	b143      	cbz	r3, 17d8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17c6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fef7 	bl	15bc <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17ce:	4629      	mov	r1, r5
}
    17d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17d4:	f000 b912 	b.w	19fc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17d8:	4b15      	ldr	r3, [pc, #84]	; (1830 <_Fault+0xb4>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b123      	cbz	r3, 17e8 <_Fault+0x6c>
			_BusFault(esf, 1);
    17de:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff ff7b 	bl	16dc <_BusFault>
    17e6:	e7e6      	b.n	17b6 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <_Fault+0xb8>)
    17ea:	881b      	ldrh	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	2b00      	cmp	r3, #0
    17f0:	d0e1      	beq.n	17b6 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17f2:	4628      	mov	r0, r5
    17f4:	f7ff ff2a 	bl	164c <_UsageFault>
    17f8:	e7e9      	b.n	17ce <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	e7e4      	b.n	17c8 <_Fault+0x4c>
		_BusFault(esf, 0);
    17fe:	2100      	movs	r1, #0
    1800:	e7ee      	b.n	17e0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1802:	480d      	ldr	r0, [pc, #52]	; (1838 <_Fault+0xbc>)
    1804:	e7d1      	b.n	17aa <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1806:	480d      	ldr	r0, [pc, #52]	; (183c <_Fault+0xc0>)
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <_Fault+0xc4>)
    180a:	f1a3 0210 	sub.w	r2, r3, #16
    180e:	2b0f      	cmp	r3, #15
    1810:	bfd8      	it	le
    1812:	4601      	movle	r1, r0
    1814:	480b      	ldr	r0, [pc, #44]	; (1844 <_Fault+0xc8>)
    1816:	f7ff fbb9 	bl	f8c <printk>
    181a:	e7cc      	b.n	17b6 <_Fault+0x3a>
    181c:	e000ed00 	.word	0xe000ed00
    1820:	000147cc 	.word	0x000147cc
    1824:	000147e4 	.word	0x000147e4
    1828:	00014806 	.word	0x00014806
    182c:	e000ed28 	.word	0xe000ed28
    1830:	e000ed29 	.word	0xe000ed29
    1834:	e000ed2a 	.word	0xe000ed2a
    1838:	00014826 	.word	0x00014826
    183c:	0001479e 	.word	0x0001479e
    1840:	000147b3 	.word	0x000147b3
    1844:	0001485d 	.word	0x0001485d

00001848 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <_FaultInit+0xc>)
    184a:	6953      	ldr	r3, [r2, #20]
    184c:	f043 0310 	orr.w	r3, r3, #16
    1850:	6153      	str	r3, [r2, #20]
    1852:	4770      	bx	lr
    1854:	e000ed00 	.word	0xe000ed00

00001858 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1858:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    185a:	2b00      	cmp	r3, #0
    185c:	db08      	blt.n	1870 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    185e:	2201      	movs	r2, #1
    1860:	f000 001f 	and.w	r0, r0, #31
    1864:	fa02 f000 	lsl.w	r0, r2, r0
    1868:	095b      	lsrs	r3, r3, #5
    186a:	4a02      	ldr	r2, [pc, #8]	; (1874 <_arch_irq_enable+0x1c>)
    186c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	e000e100 	.word	0xe000e100

00001878 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1878:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187a:	2b00      	cmp	r3, #0
    187c:	db0d      	blt.n	189a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    187e:	2201      	movs	r2, #1
    1880:	095b      	lsrs	r3, r3, #5
    1882:	f000 001f 	and.w	r0, r0, #31
    1886:	fa02 f000 	lsl.w	r0, r2, r0
    188a:	3320      	adds	r3, #32
    188c:	4a03      	ldr	r2, [pc, #12]	; (189c <_arch_irq_disable+0x24>)
    188e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1896:	f3bf 8f6f 	isb	sy
    189a:	4770      	bx	lr
    189c:	e000e100 	.word	0xe000e100

000018a0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18a0:	0942      	lsrs	r2, r0, #5
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <_arch_irq_is_enabled+0x18>)
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18ac:	2301      	movs	r3, #1
    18ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    18b2:	4010      	ands	r0, r2
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18bc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18be:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18c0:	bfa8      	it	ge
    18c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18c6:	f101 0101 	add.w	r1, r1, #1
    18ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18ce:	bfad      	iteet	ge
    18d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d4:	f000 000f 	andlt.w	r0, r0, #15
    18d8:	4b03      	ldrlt	r3, [pc, #12]	; (18e8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18da:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18dc:	bfb6      	itet	lt
    18de:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e4:	5419      	strblt	r1, [r3, r0]
    18e6:	4770      	bx	lr
    18e8:	e000ed14 	.word	0xe000ed14

000018ec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18ec:	f000 b842 	b.w	1974 <__bus_fault>

000018f0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18f0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18f2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <_arch_isr_direct_pm+0x18>)
    18f6:	69d8      	ldr	r0, [r3, #28]
    18f8:	b118      	cbz	r0, 1902 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    18fa:	2200      	movs	r2, #0
    18fc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    18fe:	f011 fc29 	bl	13154 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1902:	b662      	cpsie	i
    1904:	bd08      	pop	{r3, pc}
    1906:	bf00      	nop
    1908:	20001950 	.word	0x20001950

0000190c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    190e:	460c      	mov	r4, r1
    1910:	4616      	mov	r6, r2
    1912:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1914:	2204      	movs	r2, #4
    1916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1918:	9909      	ldr	r1, [sp, #36]	; 0x24
    191a:	4605      	mov	r5, r0
    191c:	f012 fb60 	bl	13fe0 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1920:	f1a6 0120 	sub.w	r1, r6, #32
    1924:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1926:	4a0c      	ldr	r2, [pc, #48]	; (1958 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1928:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    192a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    192e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1930:	f022 0201 	bic.w	r2, r2, #1
    1934:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1936:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1938:	662e      	str	r6, [r5, #96]	; 0x60
    193a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    193c:	9a06      	ldr	r2, [sp, #24]
    193e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1944:	9a08      	ldr	r2, [sp, #32]
    1946:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1948:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    194e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1950:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1952:	66ab      	str	r3, [r5, #104]	; 0x68
    1954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1956:	bf00      	nop
    1958:	00000899 	.word	0x00000899

0000195c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    195c:	4901      	ldr	r1, [pc, #4]	; (1964 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    195e:	2210      	movs	r2, #16
	str r2, [r1]
    1960:	600a      	str	r2, [r1, #0]
	bx lr
    1962:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1964:	e000ed10 	.word	0xe000ed10

00001968 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1968:	4040      	eors	r0, r0
	msr BASEPRI, r0
    196a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    196e:	bf30      	wfi

	bx lr
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1974:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1976:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    197a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1998 <__bus_fault+0x24>
	ldr ip, [ip]
    197e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1982:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1986:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1988:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    198c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1990:	b500      	push	{lr}
	bl _Fault
    1992:	f7ff fef3 	bl	177c <_Fault>

	pop {pc}
    1996:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1998:	e000ed04 	.word	0xe000ed04

0000199c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    199c:	2804      	cmp	r0, #4
{
    199e:	b538      	push	{r3, r4, r5, lr}
    19a0:	4604      	mov	r4, r0
    19a2:	460d      	mov	r5, r1
	switch (reason) {
    19a4:	d013      	beq.n	19ce <_NanoFatalErrorHandler+0x32>
    19a6:	2805      	cmp	r0, #5
    19a8:	d013      	beq.n	19d2 <_NanoFatalErrorHandler+0x36>
    19aa:	2803      	cmp	r0, #3
    19ac:	d113      	bne.n	19d6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19ae:	480c      	ldr	r0, [pc, #48]	; (19e0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19b0:	f7ff faec 	bl	f8c <printk>
    19b4:	f012 f880 	bl	13ab8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19b8:	69aa      	ldr	r2, [r5, #24]
    19ba:	4601      	mov	r1, r0
    19bc:	4809      	ldr	r0, [pc, #36]	; (19e4 <_NanoFatalErrorHandler+0x48>)
    19be:	f7ff fae5 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19c2:	4629      	mov	r1, r5
    19c4:	4620      	mov	r0, r4
}
    19c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19ca:	f000 b817 	b.w	19fc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <_NanoFatalErrorHandler+0x4c>)
    19d0:	e7ee      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19d2:	4806      	ldr	r0, [pc, #24]	; (19ec <_NanoFatalErrorHandler+0x50>)
    19d4:	e7ec      	b.n	19b0 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19d6:	4601      	mov	r1, r0
    19d8:	4805      	ldr	r0, [pc, #20]	; (19f0 <_NanoFatalErrorHandler+0x54>)
    19da:	f7ff fad7 	bl	f8c <printk>
		break;
    19de:	e7e9      	b.n	19b4 <_NanoFatalErrorHandler+0x18>
    19e0:	00014a46 	.word	0x00014a46
    19e4:	00014ac4 	.word	0x00014ac4
    19e8:	00014a6c 	.word	0x00014a6c
    19ec:	00014a86 	.word	0x00014a86
    19f0:	00014aa1 	.word	0x00014aa1

000019f4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    19f4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    19f6:	6800      	ldr	r0, [r0, #0]
    19f8:	f7ff bfd0 	b.w	199c <_NanoFatalErrorHandler>

000019fc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    19fc:	2805      	cmp	r0, #5
{
    19fe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a00:	d00c      	beq.n	1a1c <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a02:	f012 fa1b 	bl	13e3c <k_is_in_isr>
    1a06:	b160      	cbz	r0, 1a22 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a08:	f012 fa18 	bl	13e3c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a0c:	4b0c      	ldr	r3, [pc, #48]	; (1a40 <_SysFatalErrorHandler+0x44>)
    1a0e:	490d      	ldr	r1, [pc, #52]	; (1a44 <_SysFatalErrorHandler+0x48>)
    1a10:	2800      	cmp	r0, #0
    1a12:	bf08      	it	eq
    1a14:	4619      	moveq	r1, r3
    1a16:	480c      	ldr	r0, [pc, #48]	; (1a48 <_SysFatalErrorHandler+0x4c>)
    1a18:	f7ff fab8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a1c:	f7ff ffa4 	bl	1968 <k_cpu_idle>
    1a20:	e7fc      	b.n	1a1c <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 fa1b 	bl	13e5c <_is_thread_essential>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1ee      	bne.n	1a08 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a2a:	4c08      	ldr	r4, [pc, #32]	; (1a4c <_SysFatalErrorHandler+0x50>)
    1a2c:	4808      	ldr	r0, [pc, #32]	; (1a50 <_SysFatalErrorHandler+0x54>)
    1a2e:	68a1      	ldr	r1, [r4, #8]
    1a30:	f7ff faac 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a34:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a3a:	f000 b80b 	b.w	1a54 <_impl_k_thread_abort>
    1a3e:	bf00      	nop
    1a40:	00014b04 	.word	0x00014b04
    1a44:	00014b00 	.word	0x00014b00
    1a48:	00014b15 	.word	0x00014b15
    1a4c:	20001950 	.word	0x20001950
    1a50:	00014b35 	.word	0x00014b35

00001a54 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a54:	b538      	push	{r3, r4, r5, lr}
    1a56:	4605      	mov	r5, r0
	__asm__ volatile(
    1a58:	f04f 0320 	mov.w	r3, #32
    1a5c:	f3ef 8411 	mrs	r4, BASEPRI
    1a60:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a64:	f012 fa52 	bl	13f0c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_impl_k_thread_abort+0x44>)
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	429d      	cmp	r5, r3
    1a6e:	d10d      	bne.n	1a8c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_impl_k_thread_abort+0x48>)
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a78:	b922      	cbnz	r2, 1a84 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a7a:	f011 ffcf 	bl	13a1c <_update_time_slice_before_swap>

	return __swap(key);
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff fd42 	bl	1508 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a84:	685a      	ldr	r2, [r3, #4]
    1a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1a8c:	4620      	mov	r0, r4
}
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1a92:	f011 be7d 	b.w	13790 <_reschedule>
    1a96:	bf00      	nop
    1a98:	20001950 	.word	0x20001950
    1a9c:	e000ed00 	.word	0xe000ed00

00001aa0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1aa0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aa2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1aa4:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aa6:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1aa8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1aaa:	bf1e      	ittt	ne
	movne	r1, #0
    1aac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1aae:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ab0:	f011 fb50 	blne	13154 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ab4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ab6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1aba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1abe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ac2:	4905      	ldr	r1, [pc, #20]	; (1ad8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ac4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ac6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ac8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aca:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ace:	f7ff bcfb 	b.w	14c8 <_ExcExit>
    1ad2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ad4:	20001950 	.word	0x20001950
	ldr r1, =_sw_isr_table
    1ad8:	000000dc 	.word	0x000000dc

00001adc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1adc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ade:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1ae2:	4806      	ldr	r0, [pc, #24]	; (1afc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1ae8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aea:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1aee:	2002      	movs	r0, #2
    msr CONTROL, r0
    1af0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1af4:	f3bf 8f6f 	isb	sy

    b _PrepC
    1af8:	f000 b806 	b.w	1b08 <_PrepC>
    ldr r0, =_interrupt_stack
    1afc:	20002e28 	.word	0x20002e28

00001b00 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b00:	bf30      	wfi
    b _SysNmiOnReset
    1b02:	f7ff bffd 	b.w	1b00 <_SysNmiOnReset>
    1b06:	bf00      	nop

00001b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b08:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <_PrepC+0x20>)
    1b0c:	4a07      	ldr	r2, [pc, #28]	; (1b2c <_PrepC+0x24>)
    1b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b12:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b1c:	f011 fb4a 	bl	131b4 <_bss_zero>
	_data_copy();
    1b20:	f011 fb52 	bl	131c8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b24:	f011 fb74 	bl	13210 <_Cstart>
    1b28:	00000000 	.word	0x00000000
    1b2c:	e000ed00 	.word	0xe000ed00

00001b30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b30:	b508      	push	{r3, lr}
	handler();
    1b32:	f7ff ffe5 	bl	1b00 <_SysNmiOnReset>
	_ExcExit();
}
    1b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b3a:	f7ff bcc5 	b.w	14c8 <_ExcExit>
	...

00001b40 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b40:	4912      	ldr	r1, [pc, #72]	; (1b8c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b42:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b44:	680d      	ldr	r5, [r1, #0]
    1b46:	2d08      	cmp	r5, #8
    1b48:	d80d      	bhi.n	1b66 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b4a:	4a11      	ldr	r2, [pc, #68]	; (1b90 <arm_mpu_init+0x50>)
    1b4c:	6848      	ldr	r0, [r1, #4]
    1b4e:	2300      	movs	r3, #0
    1b50:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b52:	429d      	cmp	r5, r3
    1b54:	f100 000c 	add.w	r0, r0, #12
    1b58:	d107      	bne.n	1b6a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b5a:	2305      	movs	r3, #5
    1b5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b62:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b6a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b6e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b72:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b74:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b78:	f041 0110 	orr.w	r1, r1, #16
    1b7c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b7e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b82:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b84:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b86:	6114      	str	r4, [r2, #16]
    1b88:	e7e3      	b.n	1b52 <arm_mpu_init+0x12>
    1b8a:	bf00      	nop
    1b8c:	20003a3c 	.word	0x20003a3c
    1b90:	e000ed90 	.word	0xe000ed90

00001b94 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1b94:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1b96:	4603      	mov	r3, r0
    1b98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1b9c:	b90a      	cbnz	r2, 1ba2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1b9e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1ba0:	4770      	bx	lr
		*d = *s;
    1ba2:	f803 2b01 	strb.w	r2, [r3], #1
    1ba6:	e7f7      	b.n	1b98 <strcpy+0x4>

00001ba8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1ba8:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1baa:	4603      	mov	r3, r0
    1bac:	1a98      	subs	r0, r3, r2
    1bae:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1fa      	bne.n	1bac <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bb6:	4770      	bx	lr

00001bb8 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bb8:	3801      	subs	r0, #1
    1bba:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bbc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc4:	4293      	cmp	r3, r2
    1bc6:	d102      	bne.n	1bce <strcmp+0x16>
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d1f7      	bne.n	1bbc <strcmp+0x4>
    1bcc:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bce:	1a98      	subs	r0, r3, r2
    1bd0:	4770      	bx	lr

00001bd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bd4:	b182      	cbz	r2, 1bf8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bd6:	3a01      	subs	r2, #1
    1bd8:	460c      	mov	r4, r1
    1bda:	4603      	mov	r3, r0
    1bdc:	d103      	bne.n	1be6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bde:	781a      	ldrb	r2, [r3, #0]
    1be0:	7820      	ldrb	r0, [r4, #0]
    1be2:	1a10      	subs	r0, r2, r0
    1be4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1be6:	781e      	ldrb	r6, [r3, #0]
    1be8:	7825      	ldrb	r5, [r4, #0]
    1bea:	42ae      	cmp	r6, r5
    1bec:	f100 0001 	add.w	r0, r0, #1
    1bf0:	f101 0101 	add.w	r1, r1, #1
    1bf4:	d0ef      	beq.n	1bd6 <memcmp+0x4>
    1bf6:	e7f2      	b.n	1bde <memcmp+0xc>
		return 0;
    1bf8:	4610      	mov	r0, r2
}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}

00001bfc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1bfc:	ea81 0300 	eor.w	r3, r1, r0
    1c00:	f013 0f03 	tst.w	r3, #3
{
    1c04:	b570      	push	{r4, r5, r6, lr}
    1c06:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c08:	d00b      	beq.n	1c22 <memcpy+0x26>
    1c0a:	3b01      	subs	r3, #1
    1c0c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c0e:	4291      	cmp	r1, r2
    1c10:	d11b      	bne.n	1c4a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c14:	2a00      	cmp	r2, #0
    1c16:	d0fc      	beq.n	1c12 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c18:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c1c:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c20:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c22:	079c      	lsls	r4, r3, #30
    1c24:	d1f6      	bne.n	1c14 <memcpy+0x18>
    1c26:	1f1e      	subs	r6, r3, #4
    1c28:	460d      	mov	r5, r1
    1c2a:	1b54      	subs	r4, r2, r5
    1c2c:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c2e:	2c03      	cmp	r4, #3
    1c30:	d806      	bhi.n	1c40 <memcpy+0x44>
    1c32:	f022 0403 	bic.w	r4, r2, #3
    1c36:	4421      	add	r1, r4
    1c38:	4423      	add	r3, r4
    1c3a:	f002 0203 	and.w	r2, r2, #3
    1c3e:	e7e4      	b.n	1c0a <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c40:	f855 4b04 	ldr.w	r4, [r5], #4
    1c44:	f846 4f04 	str.w	r4, [r6, #4]!
    1c48:	e7ef      	b.n	1c2a <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c52:	e7dc      	b.n	1c0e <memcpy+0x12>

00001c54 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c56:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c58:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c5a:	079c      	lsls	r4, r3, #30
    1c5c:	d111      	bne.n	1c82 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c5e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c62:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c66:	461e      	mov	r6, r3
    1c68:	1b95      	subs	r5, r2, r6
    1c6a:	441d      	add	r5, r3
    1c6c:	2d03      	cmp	r5, #3
    1c6e:	d80e      	bhi.n	1c8e <memset+0x3a>
    1c70:	f022 0403 	bic.w	r4, r2, #3
    1c74:	4423      	add	r3, r4
    1c76:	f002 0203 	and.w	r2, r2, #3
    1c7a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d109      	bne.n	1c94 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c82:	2a00      	cmp	r2, #0
    1c84:	d0fc      	beq.n	1c80 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1c8a:	3a01      	subs	r2, #1
    1c8c:	e7e5      	b.n	1c5a <memset+0x6>
		*(d_word++) = c_word;
    1c8e:	f846 4b04 	str.w	r4, [r6], #4
    1c92:	e7e9      	b.n	1c68 <memset+0x14>
		*(d_byte++) = c_byte;
    1c94:	f803 1b01 	strb.w	r1, [r3], #1
    1c98:	e7f0      	b.n	1c7c <memset+0x28>
	...

00001c9c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	f04f 0320 	mov.w	r3, #32
    1ca2:	f3ef 8511 	mrs	r5, BASEPRI
    1ca6:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1caa:	4c14      	ldr	r4, [pc, #80]	; (1cfc <bt_hex+0x60>)
    1cac:	4e14      	ldr	r6, [pc, #80]	; (1d00 <bt_hex+0x64>)
    1cae:	7823      	ldrb	r3, [r4, #0]
    1cb0:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cb4:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cb6:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cba:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cbc:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cbe:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cc2:	2940      	cmp	r1, #64	; 0x40
    1cc4:	bf28      	it	cs
    1cc6:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cc8:	4d0e      	ldr	r5, [pc, #56]	; (1d04 <bt_hex+0x68>)
    1cca:	3801      	subs	r0, #1
    1ccc:	4613      	mov	r3, r2
    1cce:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cd2:	42b3      	cmp	r3, r6
    1cd4:	d104      	bne.n	1ce0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cdc:	4610      	mov	r0, r2
    1cde:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	7844      	ldrb	r4, [r0, #1]
    1ce2:	0924      	lsrs	r4, r4, #4
    1ce4:	3302      	adds	r3, #2
    1ce6:	5d2c      	ldrb	r4, [r5, r4]
    1ce8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1cec:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1cf0:	f004 040f 	and.w	r4, r4, #15
    1cf4:	5d2c      	ldrb	r4, [r5, r4]
    1cf6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1cfa:	e7ea      	b.n	1cd2 <bt_hex+0x36>
    1cfc:	20000074 	.word	0x20000074
    1d00:	20000075 	.word	0x20000075
    1d04:	00014b78 	.word	0x00014b78

00001d08 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d08:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d0a:	4a0f      	ldr	r2, [pc, #60]	; (1d48 <bt_addr_str+0x40>)
    1d0c:	4c0f      	ldr	r4, [pc, #60]	; (1d4c <bt_addr_str+0x44>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d14:	3301      	adds	r3, #1
{
    1d16:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d18:	f003 0301 	and.w	r3, r3, #1
    1d1c:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d1e:	7802      	ldrb	r2, [r0, #0]
    1d20:	7943      	ldrb	r3, [r0, #5]
    1d22:	9204      	str	r2, [sp, #16]
    1d24:	7842      	ldrb	r2, [r0, #1]
    1d26:	9203      	str	r2, [sp, #12]
    1d28:	7882      	ldrb	r2, [r0, #2]
    1d2a:	9202      	str	r2, [sp, #8]
    1d2c:	78c2      	ldrb	r2, [r0, #3]
    1d2e:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d30:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d34:	7902      	ldrb	r2, [r0, #4]
    1d36:	9200      	str	r2, [sp, #0]
    1d38:	2112      	movs	r1, #18
    1d3a:	4a05      	ldr	r2, [pc, #20]	; (1d50 <bt_addr_str+0x48>)
    1d3c:	4620      	mov	r0, r4
    1d3e:	f7ff f933 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d42:	4620      	mov	r0, r4
    1d44:	b006      	add	sp, #24
    1d46:	bd10      	pop	{r4, pc}
    1d48:	20000072 	.word	0x20000072
    1d4c:	20000018 	.word	0x20000018
    1d50:	00014b5a 	.word	0x00014b5a

00001d54 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d56:	4a1d      	ldr	r2, [pc, #116]	; (1dcc <bt_addr_le_str+0x78>)
    1d58:	491d      	ldr	r1, [pc, #116]	; (1dd0 <bt_addr_le_str+0x7c>)
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d60:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d62:	f003 0301 	and.w	r3, r3, #1
    1d66:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d68:	7803      	ldrb	r3, [r0, #0]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d6c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d70:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d72:	440e      	add	r6, r1
    1d74:	ad07      	add	r5, sp, #28
    1d76:	2b03      	cmp	r3, #3
    1d78:	d821      	bhi.n	1dbe <bt_addr_le_str+0x6a>
    1d7a:	e8df f003 	tbb	[pc, r3]
    1d7e:	1a02      	.short	0x1a02
    1d80:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d84:	4628      	mov	r0, r5
    1d86:	f7ff ff05 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1d8a:	7862      	ldrb	r2, [r4, #1]
    1d8c:	9204      	str	r2, [sp, #16]
    1d8e:	78a2      	ldrb	r2, [r4, #2]
    1d90:	9203      	str	r2, [sp, #12]
    1d92:	78e2      	ldrb	r2, [r4, #3]
    1d94:	9202      	str	r2, [sp, #8]
    1d96:	7922      	ldrb	r2, [r4, #4]
    1d98:	9201      	str	r2, [sp, #4]
    1d9a:	7962      	ldrb	r2, [r4, #5]
    1d9c:	9200      	str	r2, [sp, #0]
    1d9e:	79a3      	ldrb	r3, [r4, #6]
    1da0:	9505      	str	r5, [sp, #20]
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <bt_addr_le_str+0x84>)
    1da4:	211b      	movs	r1, #27
    1da6:	4630      	mov	r0, r6
    1da8:	f7ff f8fe 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dac:	4630      	mov	r0, r6
    1dae:	b00a      	add	sp, #40	; 0x28
    1db0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1db2:	490a      	ldr	r1, [pc, #40]	; (1ddc <bt_addr_le_str+0x88>)
    1db4:	e7e6      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1db6:	490a      	ldr	r1, [pc, #40]	; (1de0 <bt_addr_le_str+0x8c>)
    1db8:	e7e4      	b.n	1d84 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dba:	490a      	ldr	r1, [pc, #40]	; (1de4 <bt_addr_le_str+0x90>)
    1dbc:	e7e2      	b.n	1d84 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dbe:	4a0a      	ldr	r2, [pc, #40]	; (1de8 <bt_addr_le_str+0x94>)
    1dc0:	210a      	movs	r1, #10
    1dc2:	4628      	mov	r0, r5
    1dc4:	f7ff f8f0 	bl	fa8 <snprintk>
    1dc8:	e7df      	b.n	1d8a <bt_addr_le_str+0x36>
    1dca:	bf00      	nop
    1dcc:	20000073 	.word	0x20000073
    1dd0:	2000003c 	.word	0x2000003c
    1dd4:	000145b1 	.word	0x000145b1
    1dd8:	000145da 	.word	0x000145da
    1ddc:	000145b8 	.word	0x000145b8
    1de0:	000145bf 	.word	0x000145bf
    1de4:	000145c9 	.word	0x000145c9
    1de8:	000145d3 	.word	0x000145d3

00001dec <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1dec:	b530      	push	{r4, r5, lr}
    1dee:	b085      	sub	sp, #20
    1df0:	4604      	mov	r4, r0
    1df2:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1df4:	4668      	mov	r0, sp
    1df6:	2203      	movs	r2, #3
    1df8:	f7ff ff00 	bl	1bfc <memcpy>
	memset(res + 3, 0, 13);
    1dfc:	220d      	movs	r2, #13
    1dfe:	2100      	movs	r1, #0
    1e00:	f10d 0003 	add.w	r0, sp, #3
    1e04:	f7ff ff26 	bl	1c54 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e08:	4620      	mov	r0, r4
    1e0a:	466a      	mov	r2, sp
    1e0c:	4669      	mov	r1, sp
    1e0e:	f005 ff7f 	bl	7d10 <bt_encrypt_le>
	if (err) {
    1e12:	4604      	mov	r4, r0
    1e14:	b920      	cbnz	r0, 1e20 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e16:	2203      	movs	r2, #3
    1e18:	4669      	mov	r1, sp
    1e1a:	4628      	mov	r0, r5
    1e1c:	f7ff feee 	bl	1bfc <memcpy>

	return 0;
}
    1e20:	4620      	mov	r0, r4
    1e22:	b005      	add	sp, #20
    1e24:	bd30      	pop	{r4, r5, pc}

00001e26 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e26:	b513      	push	{r0, r1, r4, lr}
    1e28:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e2a:	aa01      	add	r2, sp, #4
    1e2c:	3103      	adds	r1, #3
    1e2e:	f7ff ffdd 	bl	1dec <ah>
	if (err) {
    1e32:	b948      	cbnz	r0, 1e48 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e34:	2203      	movs	r2, #3
    1e36:	a901      	add	r1, sp, #4
    1e38:	4620      	mov	r0, r4
    1e3a:	f7ff feca 	bl	1bd2 <memcmp>
    1e3e:	fab0 f080 	clz	r0, r0
    1e42:	0940      	lsrs	r0, r0, #5
}
    1e44:	b002      	add	sp, #8
    1e46:	bd10      	pop	{r4, pc}
		return false;
    1e48:	2000      	movs	r0, #0
    1e4a:	e7fb      	b.n	1e44 <bt_rpa_irk_matches+0x1e>

00001e4c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e4e:	1ccd      	adds	r5, r1, #3
{
    1e50:	4606      	mov	r6, r0
    1e52:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e54:	4628      	mov	r0, r5
    1e56:	2103      	movs	r1, #3
    1e58:	f005 ff3e 	bl	7cd8 <bt_rand>
	if (err) {
    1e5c:	b960      	cbnz	r0, 1e78 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e5e:	7963      	ldrb	r3, [r4, #5]
    1e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e68:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e6a:	4622      	mov	r2, r4
    1e6c:	4629      	mov	r1, r5
    1e6e:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e74:	f7ff bfba 	b.w	1dec <ah>
}
    1e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e7c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e7c:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e7e:	7802      	ldrb	r2, [r0, #0]
    1e80:	2a01      	cmp	r2, #1
{
    1e82:	4604      	mov	r4, r0
    1e84:	460b      	mov	r3, r1
	switch (src->type) {
    1e86:	d017      	beq.n	1eb8 <uuid_to_uuid128+0x3c>
    1e88:	d303      	bcc.n	1e92 <uuid_to_uuid128+0x16>
    1e8a:	2a02      	cmp	r2, #2
    1e8c:	d02c      	beq.n	1ee8 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1e8e:	bcf0      	pop	{r4, r5, r6, r7}
    1e90:	4770      	bx	lr
		*dst = uuid128_base;
    1e92:	4a18      	ldr	r2, [pc, #96]	; (1ef4 <uuid_to_uuid128+0x78>)
    1e94:	460d      	mov	r5, r1
    1e96:	f102 0710 	add.w	r7, r2, #16
    1e9a:	6810      	ldr	r0, [r2, #0]
    1e9c:	6851      	ldr	r1, [r2, #4]
    1e9e:	462e      	mov	r6, r5
    1ea0:	c603      	stmia	r6!, {r0, r1}
    1ea2:	3208      	adds	r2, #8
    1ea4:	42ba      	cmp	r2, r7
    1ea6:	4635      	mov	r5, r6
    1ea8:	d1f7      	bne.n	1e9a <uuid_to_uuid128+0x1e>
    1eaa:	7812      	ldrb	r2, [r2, #0]
    1eac:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1eae:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1eb0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eb2:	0a12      	lsrs	r2, r2, #8
    1eb4:	739a      	strb	r2, [r3, #14]
    1eb6:	e7ea      	b.n	1e8e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1eb8:	4a0e      	ldr	r2, [pc, #56]	; (1ef4 <uuid_to_uuid128+0x78>)
    1eba:	460d      	mov	r5, r1
    1ebc:	f102 0710 	add.w	r7, r2, #16
    1ec0:	6810      	ldr	r0, [r2, #0]
    1ec2:	6851      	ldr	r1, [r2, #4]
    1ec4:	462e      	mov	r6, r5
    1ec6:	c603      	stmia	r6!, {r0, r1}
    1ec8:	3208      	adds	r2, #8
    1eca:	42ba      	cmp	r2, r7
    1ecc:	4635      	mov	r5, r6
    1ece:	d1f7      	bne.n	1ec0 <uuid_to_uuid128+0x44>
    1ed0:	7812      	ldrb	r2, [r2, #0]
    1ed2:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ed4:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1ed6:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1edc:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ede:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ee0:	0a12      	lsrs	r2, r2, #8
    1ee2:	7399      	strb	r1, [r3, #14]
    1ee4:	741a      	strb	r2, [r3, #16]
    1ee6:	e7d2      	b.n	1e8e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1ee8:	4601      	mov	r1, r0
    1eea:	2211      	movs	r2, #17
    1eec:	4618      	mov	r0, r3
}
    1eee:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1ef0:	f7ff be84 	b.w	1bfc <memcpy>
    1ef4:	00014b89 	.word	0x00014b89

00001ef8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1efc:	7801      	ldrb	r1, [r0, #0]
    1efe:	7822      	ldrb	r2, [r4, #0]
    1f00:	428a      	cmp	r2, r1
{
    1f02:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f04:	d00e      	beq.n	1f24 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f06:	4669      	mov	r1, sp
    1f08:	f7ff ffb8 	bl	1e7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f0c:	a905      	add	r1, sp, #20
    1f0e:	4620      	mov	r0, r4
    1f10:	f7ff ffb4 	bl	1e7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f14:	2210      	movs	r2, #16
    1f16:	f10d 0115 	add.w	r1, sp, #21
    1f1a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f1e:	f7ff fe58 	bl	1bd2 <memcmp>
    1f22:	e00a      	b.n	1f3a <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f24:	2a01      	cmp	r2, #1
    1f26:	d00a      	beq.n	1f3e <bt_uuid_cmp+0x46>
    1f28:	d304      	bcc.n	1f34 <bt_uuid_cmp+0x3c>
    1f2a:	2a02      	cmp	r2, #2
    1f2c:	d00a      	beq.n	1f44 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f2e:	f06f 0015 	mvn.w	r0, #21
    1f32:	e002      	b.n	1f3a <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f34:	8840      	ldrh	r0, [r0, #2]
    1f36:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f38:	1ac0      	subs	r0, r0, r3
}
    1f3a:	b00a      	add	sp, #40	; 0x28
    1f3c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f3e:	6840      	ldr	r0, [r0, #4]
    1f40:	6863      	ldr	r3, [r4, #4]
    1f42:	e7f9      	b.n	1f38 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f44:	2210      	movs	r2, #16
    1f46:	1c61      	adds	r1, r4, #1
    1f48:	3001      	adds	r0, #1
    1f4a:	e7e8      	b.n	1f1e <bt_uuid_cmp+0x26>

00001f4c <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f4c:	4770      	bx	lr
	...

00001f50 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f52:	4d0b      	ldr	r5, [pc, #44]	; (1f80 <ver_str+0x30>)
{
    1f54:	4606      	mov	r6, r0
	const char * const str[] = {
    1f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f58:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f5a:	466c      	mov	r4, sp
    1f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f62:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f66:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f68:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f6c:	bf9b      	ittet	ls
    1f6e:	ab0a      	addls	r3, sp, #40	; 0x28
    1f70:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f74:	4803      	ldrhi	r0, [pc, #12]	; (1f84 <ver_str+0x34>)
		return str[ver];
    1f76:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f7a:	b00a      	add	sp, #40	; 0x28
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	bf00      	nop
    1f80:	00014568 	.word	0x00014568
    1f84:	0001566c 	.word	0x0001566c

00001f88 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1f88:	2207      	movs	r2, #7
    1f8a:	f7ff be37 	b.w	1bfc <memcpy>

00001f8e <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1f8e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1f90:	f3bf 8f5b 	dmb	ish
    1f94:	e850 3f00 	ldrex	r3, [r0]
    1f98:	ea43 0201 	orr.w	r2, r3, r1
    1f9c:	e840 2e00 	strex	lr, r2, [r0]
    1fa0:	f1be 0f00 	cmp.w	lr, #0
    1fa4:	d1f6      	bne.n	1f94 <atomic_or+0x6>
    1fa6:	f3bf 8f5b 	dmb	ish
    1faa:	4618      	mov	r0, r3
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4

00001fb0 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fb0:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fb2:	f3bf 8f5b 	dmb	ish
    1fb6:	e850 3f00 	ldrex	r3, [r0]
    1fba:	ea03 0201 	and.w	r2, r3, r1
    1fbe:	e840 2e00 	strex	lr, r2, [r0]
    1fc2:	f1be 0f00 	cmp.w	lr, #0
    1fc6:	d1f6      	bne.n	1fb6 <atomic_and+0x6>
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	4618      	mov	r0, r3
    1fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fd4 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fd4:	78c3      	ldrb	r3, [r0, #3]
    1fd6:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1fd8:	f241 3288 	movw	r2, #5000	; 0x1388
    1fdc:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1fe0:	bf08      	it	eq
    1fe2:	2200      	moveq	r2, #0
    1fe4:	4801      	ldr	r0, [pc, #4]	; (1fec <update_conn_param+0x18>)
    1fe6:	f012 b8d1 	b.w	1418c <k_delayed_work_submit_to_queue>
    1fea:	bf00      	nop
    1fec:	20001990 	.word	0x20001990

00001ff0 <hci_cmd_done>:
{
    1ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff4:	4606      	mov	r6, r0
    1ff6:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ff8:	7990      	ldrb	r0, [r2, #6]
    1ffa:	4f26      	ldr	r7, [pc, #152]	; (2094 <hci_cmd_done+0xa4>)
{
    1ffc:	4688      	mov	r8, r1
    1ffe:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2000:	f010 fc0e 	bl	12820 <net_buf_pool_get>
    2004:	4287      	cmp	r7, r0
    2006:	d013      	beq.n	2030 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2008:	79ac      	ldrb	r4, [r5, #6]
    200a:	4620      	mov	r0, r4
    200c:	f010 fc08 	bl	12820 <net_buf_pool_get>
    2010:	4b21      	ldr	r3, [pc, #132]	; (2098 <hci_cmd_done+0xa8>)
    2012:	9305      	str	r3, [sp, #20]
    2014:	9003      	str	r0, [sp, #12]
    2016:	e88d 0048 	stmia.w	sp, {r3, r6}
    201a:	9704      	str	r7, [sp, #16]
    201c:	9402      	str	r4, [sp, #8]
    201e:	4b1f      	ldr	r3, [pc, #124]	; (209c <hci_cmd_done+0xac>)
    2020:	4a1f      	ldr	r2, [pc, #124]	; (20a0 <hci_cmd_done+0xb0>)
    2022:	4920      	ldr	r1, [pc, #128]	; (20a4 <hci_cmd_done+0xb4>)
    2024:	4820      	ldr	r0, [pc, #128]	; (20a8 <hci_cmd_done+0xb8>)
    2026:	f7fe ffb1 	bl	f8c <printk>
}
    202a:	b006      	add	sp, #24
    202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2030:	4628      	mov	r0, r5
    2032:	f010 fbfb 	bl	1282c <net_buf_id>
    2036:	4c1d      	ldr	r4, [pc, #116]	; (20ac <hci_cmd_done+0xbc>)
    2038:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    203c:	8843      	ldrh	r3, [r0, #2]
    203e:	42b3      	cmp	r3, r6
    2040:	d010      	beq.n	2064 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2042:	4628      	mov	r0, r5
    2044:	f010 fbf2 	bl	1282c <net_buf_id>
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <hci_cmd_done+0xa8>)
    204a:	9303      	str	r3, [sp, #12]
    204c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2050:	4914      	ldr	r1, [pc, #80]	; (20a4 <hci_cmd_done+0xb4>)
    2052:	8842      	ldrh	r2, [r0, #2]
    2054:	9202      	str	r2, [sp, #8]
    2056:	e88d 0048 	stmia.w	sp, {r3, r6}
    205a:	4a11      	ldr	r2, [pc, #68]	; (20a0 <hci_cmd_done+0xb0>)
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <hci_cmd_done+0xac>)
    205e:	4814      	ldr	r0, [pc, #80]	; (20b0 <hci_cmd_done+0xc0>)
    2060:	f7fe ff94 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    2064:	4628      	mov	r0, r5
    2066:	f010 fbe1 	bl	1282c <net_buf_id>
    206a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    206e:	6843      	ldr	r3, [r0, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d0da      	beq.n	202a <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2074:	4628      	mov	r0, r5
    2076:	f010 fbd9 	bl	1282c <net_buf_id>
    207a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    207e:	4628      	mov	r0, r5
    2080:	f010 fbd4 	bl	1282c <net_buf_id>
    2084:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2088:	6840      	ldr	r0, [r0, #4]
}
    208a:	b006      	add	sp, #24
    208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2090:	f011 bd21 	b.w	13ad6 <_impl_k_sem_give>
    2094:	20003f74 	.word	0x20003f74
    2098:	00014645 	.word	0x00014645
    209c:	00014c62 	.word	0x00014c62
    20a0:	000153dc 	.word	0x000153dc
    20a4:	000153e3 	.word	0x000153e3
    20a8:	000153e6 	.word	0x000153e6
    20ac:	2000027c 	.word	0x2000027c
    20b0:	0001542b 	.word	0x0001542b

000020b4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20b4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20b6:	f3bf 8f5b 	dmb	ish
    20ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20be:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20c2:	f001 011f 	and.w	r1, r1, #31
    20c6:	4108      	asrs	r0, r1
}
    20c8:	f000 0001 	and.w	r0, r0, #1
    20cc:	4770      	bx	lr
	...

000020d0 <bt_hci_cmd_create>:
{
    20d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d4:	4680      	mov	r8, r0
    20d6:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20d8:	4813      	ldr	r0, [pc, #76]	; (2128 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    20da:	4d14      	ldr	r5, [pc, #80]	; (212c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    20dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    20e0:	f010 fc32 	bl	12948 <net_buf_alloc_fixed>
    20e4:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    20e6:	f100 0608 	add.w	r6, r0, #8
    20ea:	2100      	movs	r1, #0
    20ec:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    20ee:	2700      	movs	r7, #0
    20f0:	f010 fc49 	bl	12986 <net_buf_simple_reserve>
    20f4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    20f6:	4620      	mov	r0, r4
    20f8:	f010 fb98 	bl	1282c <net_buf_id>
    20fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2100:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2104:	4620      	mov	r0, r4
    2106:	f010 fb91 	bl	1282c <net_buf_id>
    210a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    210e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2110:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2112:	4630      	mov	r0, r6
    2114:	f010 fc7a 	bl	12a0c <net_buf_simple_add>
	hdr->param_len = param_len;
    2118:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    211c:	f8a0 8000 	strh.w	r8, [r0]
}
    2120:	4620      	mov	r0, r4
    2122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2126:	bf00      	nop
    2128:	20003f74 	.word	0x20003f74
    212c:	2000027c 	.word	0x2000027c

00002130 <bt_hci_cmd_send_sync>:
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	4615      	mov	r5, r2
    2134:	b086      	sub	sp, #24
	if (!buf) {
    2136:	460c      	mov	r4, r1
    2138:	b919      	cbnz	r1, 2142 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    213a:	f7ff ffc9 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    213e:	4604      	mov	r4, r0
    2140:	b368      	cbz	r0, 219e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2142:	2201      	movs	r2, #1
    2144:	2100      	movs	r1, #0
    2146:	4668      	mov	r0, sp
    2148:	f011 fcbc 	bl	13ac4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    214c:	4620      	mov	r0, r4
    214e:	f010 fb6d 	bl	1282c <net_buf_id>
    2152:	4e14      	ldr	r6, [pc, #80]	; (21a4 <bt_hci_cmd_send_sync+0x74>)
    2154:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2158:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    215c:	4620      	mov	r0, r4
    215e:	f010 fc51 	bl	12a04 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2162:	4621      	mov	r1, r4
    2164:	4810      	ldr	r0, [pc, #64]	; (21a8 <bt_hci_cmd_send_sync+0x78>)
    2166:	f010 fc12 	bl	1298e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    216a:	f242 7110 	movw	r1, #10000	; 0x2710
    216e:	4668      	mov	r0, sp
    2170:	f011 fcd9 	bl	13b26 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2174:	4620      	mov	r0, r4
    2176:	f010 fb59 	bl	1282c <net_buf_id>
    217a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    217e:	b130      	cbz	r0, 218e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2180:	4620      	mov	r0, r4
    2182:	f010 fc11 	bl	129a8 <net_buf_unref>
		err = -EIO;
    2186:	f06f 0004 	mvn.w	r0, #4
}
    218a:	b006      	add	sp, #24
    218c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    218e:	b10d      	cbz	r5, 2194 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2190:	602c      	str	r4, [r5, #0]
    2192:	e7fa      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2194:	4620      	mov	r0, r4
    2196:	f010 fc07 	bl	129a8 <net_buf_unref>
		err = 0;
    219a:	4628      	mov	r0, r5
    219c:	e7f5      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    219e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21a2:	e7f2      	b.n	218a <bt_hci_cmd_send_sync+0x5a>
    21a4:	2000027c 	.word	0x2000027c
    21a8:	20003b2c 	.word	0x20003b2c

000021ac <set_le_scan_enable>:
{
    21ac:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21ae:	2102      	movs	r1, #2
{
    21b0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21b2:	f242 000c 	movw	r0, #8204	; 0x200c
    21b6:	f7ff ff8b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    21ba:	4604      	mov	r4, r0
    21bc:	b330      	cbz	r0, 220c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21be:	2102      	movs	r1, #2
    21c0:	3008      	adds	r0, #8
    21c2:	f010 fc23 	bl	12a0c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21c6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21c8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21ca:	d116      	bne.n	21fa <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21cc:	210b      	movs	r1, #11
    21ce:	4811      	ldr	r0, [pc, #68]	; (2214 <set_le_scan_enable+0x68>)
    21d0:	f7ff ff70 	bl	20b4 <atomic_test_bit>
    21d4:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    21d6:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    21d8:	4621      	mov	r1, r4
    21da:	2200      	movs	r2, #0
    21dc:	f242 000c 	movw	r0, #8204	; 0x200c
    21e0:	f7ff ffa6 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    21e4:	4604      	mov	r4, r0
    21e6:	b930      	cbnz	r0, 21f6 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21e8:	2d01      	cmp	r5, #1
    21ea:	d109      	bne.n	2200 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    21ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <set_le_scan_enable+0x68>)
    21f2:	f7ff fecc 	bl	1f8e <atomic_or>
}
    21f6:	4620      	mov	r0, r4
    21f8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    21fa:	2300      	movs	r3, #0
    21fc:	7043      	strb	r3, [r0, #1]
    21fe:	e7ea      	b.n	21d6 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2200:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2204:	4803      	ldr	r0, [pc, #12]	; (2214 <set_le_scan_enable+0x68>)
    2206:	f7ff fed3 	bl	1fb0 <atomic_and>
    220a:	e7f4      	b.n	21f6 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    220c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2210:	e7f1      	b.n	21f6 <set_le_scan_enable+0x4a>
    2212:	bf00      	nop
    2214:	20003ad8 	.word	0x20003ad8

00002218 <set_random_address>:
{
    2218:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    221a:	4d15      	ldr	r5, [pc, #84]	; (2270 <set_random_address+0x58>)
    221c:	2206      	movs	r2, #6
    221e:	f105 0108 	add.w	r1, r5, #8
    2222:	4606      	mov	r6, r0
    2224:	f7ff fcd5 	bl	1bd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2228:	4604      	mov	r4, r0
    222a:	b1d8      	cbz	r0, 2264 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    222c:	2106      	movs	r1, #6
    222e:	f242 0005 	movw	r0, #8197	; 0x2005
    2232:	f7ff ff4d 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2236:	4604      	mov	r4, r0
    2238:	b1b0      	cbz	r0, 2268 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    223a:	2206      	movs	r2, #6
    223c:	4631      	mov	r1, r6
    223e:	3008      	adds	r0, #8
    2240:	f010 fbea 	bl	12a18 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2244:	4621      	mov	r1, r4
    2246:	2200      	movs	r2, #0
    2248:	f242 0005 	movw	r0, #8197	; 0x2005
    224c:	f7ff ff70 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2250:	4604      	mov	r4, r0
    2252:	b938      	cbnz	r0, 2264 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2254:	2206      	movs	r2, #6
    2256:	4631      	mov	r1, r6
    2258:	f105 0008 	add.w	r0, r5, #8
    225c:	f7ff fcce 	bl	1bfc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2260:	2301      	movs	r3, #1
    2262:	71eb      	strb	r3, [r5, #7]
}
    2264:	4620      	mov	r0, r4
    2266:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2268:	f06f 0436 	mvn.w	r4, #54	; 0x36
    226c:	e7fa      	b.n	2264 <set_random_address+0x4c>
    226e:	bf00      	nop
    2270:	20003a68 	.word	0x20003a68

00002274 <set_advertise_enable>:
{
    2274:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2276:	2101      	movs	r1, #1
{
    2278:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    227a:	f242 000a 	movw	r0, #8202	; 0x200a
    227e:	f7ff ff27 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2282:	4604      	mov	r4, r0
    2284:	b1d8      	cbz	r0, 22be <set_advertise_enable+0x4a>
    2286:	3008      	adds	r0, #8
	if (enable) {
    2288:	b18d      	cbz	r5, 22ae <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    228a:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    228c:	f010 fbcd 	bl	12a2a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2290:	4621      	mov	r1, r4
    2292:	2200      	movs	r2, #0
    2294:	f242 000a 	movw	r0, #8202	; 0x200a
    2298:	f7ff ff4a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    229c:	4604      	mov	r4, r0
    229e:	b920      	cbnz	r0, 22aa <set_advertise_enable+0x36>
	if (enable) {
    22a0:	b13d      	cbz	r5, 22b2 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22a2:	2140      	movs	r1, #64	; 0x40
    22a4:	4807      	ldr	r0, [pc, #28]	; (22c4 <set_advertise_enable+0x50>)
    22a6:	f7ff fe72 	bl	1f8e <atomic_or>
}
    22aa:	4620      	mov	r0, r4
    22ac:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22ae:	4629      	mov	r1, r5
    22b0:	e7ec      	b.n	228c <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    22b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    22b6:	4803      	ldr	r0, [pc, #12]	; (22c4 <set_advertise_enable+0x50>)
    22b8:	f7ff fe7a 	bl	1fb0 <atomic_and>
    22bc:	e7f5      	b.n	22aa <set_advertise_enable+0x36>
		return -ENOBUFS;
    22be:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22c2:	e7f2      	b.n	22aa <set_advertise_enable+0x36>
    22c4:	20003ad8 	.word	0x20003ad8

000022c8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    22c8:	8802      	ldrh	r2, [r0, #0]
    22ca:	8843      	ldrh	r3, [r0, #2]
    22cc:	429a      	cmp	r2, r3
{
    22ce:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    22d0:	d818      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
    22d2:	2a05      	cmp	r2, #5
    22d4:	d916      	bls.n	2304 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    22d6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    22da:	d813      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    22dc:	8884      	ldrh	r4, [r0, #4]
    22de:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    22e2:	d20f      	bcs.n	2304 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    22e4:	88c1      	ldrh	r1, [r0, #6]
    22e6:	f1a1 020a 	sub.w	r2, r1, #10
    22ea:	b292      	uxth	r2, r2
    22ec:	f640 4076 	movw	r0, #3190	; 0xc76
    22f0:	4282      	cmp	r2, r0
    22f2:	d807      	bhi.n	2304 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    22f4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    22f8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    22fc:	bfb4      	ite	lt
    22fe:	2001      	movlt	r0, #1
    2300:	2000      	movge	r0, #0
    2302:	bd10      	pop	{r4, pc}
		return false;
    2304:	2000      	movs	r0, #0
}
    2306:	bd10      	pop	{r4, pc}

00002308 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2308:	2301      	movs	r3, #1
{
    230a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    230c:	2106      	movs	r1, #6
{
    230e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2310:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2314:	f005 fce0 	bl	7cd8 <bt_rand>
	if (err) {
    2318:	b918      	cbnz	r0, 2322 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    231a:	79a3      	ldrb	r3, [r4, #6]
    231c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2320:	71a3      	strb	r3, [r4, #6]
}
    2322:	bd10      	pop	{r4, pc}

00002324 <bt_set_static_addr>:
{
    2324:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2326:	4c11      	ldr	r4, [pc, #68]	; (236c <bt_set_static_addr+0x48>)
    2328:	7823      	ldrb	r3, [r4, #0]
    232a:	2b01      	cmp	r3, #1
    232c:	d104      	bne.n	2338 <bt_set_static_addr+0x14>
    232e:	79a3      	ldrb	r3, [r4, #6]
    2330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2334:	2bc0      	cmp	r3, #192	; 0xc0
    2336:	d00d      	beq.n	2354 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    2338:	4b0d      	ldr	r3, [pc, #52]	; (2370 <bt_set_static_addr+0x4c>)
    233a:	9301      	str	r3, [sp, #4]
    233c:	9300      	str	r3, [sp, #0]
    233e:	4a0d      	ldr	r2, [pc, #52]	; (2374 <bt_set_static_addr+0x50>)
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <bt_set_static_addr+0x54>)
    2342:	490e      	ldr	r1, [pc, #56]	; (237c <bt_set_static_addr+0x58>)
    2344:	480e      	ldr	r0, [pc, #56]	; (2380 <bt_set_static_addr+0x5c>)
    2346:	f7fe fe21 	bl	f8c <printk>
    234a:	f06f 0515 	mvn.w	r5, #21
}
    234e:	4628      	mov	r0, r5
    2350:	b003      	add	sp, #12
    2352:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    2354:	1c60      	adds	r0, r4, #1
    2356:	f7ff ff5f 	bl	2218 <set_random_address>
	if (err) {
    235a:	4605      	mov	r5, r0
    235c:	2800      	cmp	r0, #0
    235e:	d1f6      	bne.n	234e <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2360:	2104      	movs	r1, #4
    2362:	f104 0070 	add.w	r0, r4, #112	; 0x70
    2366:	f7ff fe12 	bl	1f8e <atomic_or>
	return 0;
    236a:	e7f0      	b.n	234e <bt_set_static_addr+0x2a>
    236c:	20003a68 	.word	0x20003a68
    2370:	00014645 	.word	0x00014645
    2374:	00015394 	.word	0x00015394
    2378:	00014cb9 	.word	0x00014cb9
    237c:	000153e3 	.word	0x000153e3
    2380:	0001539b 	.word	0x0001539b

00002384 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    2384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2388:	4d1d      	ldr	r5, [pc, #116]	; (2400 <bt_dev_show_info+0x7c>)
    238a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 241c <bt_dev_show_info+0x98>
    238e:	4f1d      	ldr	r7, [pc, #116]	; (2404 <bt_dev_show_info+0x80>)
    2390:	4e1d      	ldr	r6, [pc, #116]	; (2408 <bt_dev_show_info+0x84>)
    2392:	4c1e      	ldr	r4, [pc, #120]	; (240c <bt_dev_show_info+0x88>)
{
    2394:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2396:	4628      	mov	r0, r5
    2398:	f7ff fcdc 	bl	1d54 <bt_addr_le_str>
    239c:	4643      	mov	r3, r8
    239e:	463a      	mov	r2, r7
    23a0:	4631      	mov	r1, r6
    23a2:	9001      	str	r0, [sp, #4]
    23a4:	9402      	str	r4, [sp, #8]
    23a6:	9400      	str	r4, [sp, #0]
    23a8:	4819      	ldr	r0, [pc, #100]	; (2410 <bt_dev_show_info+0x8c>)
    23aa:	f7fe fdef 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23ae:	f895 900e 	ldrb.w	r9, [r5, #14]
    23b2:	4648      	mov	r0, r9
    23b4:	f7ff fdcc 	bl	1f50 <ver_str>
    23b8:	8aab      	ldrh	r3, [r5, #20]
    23ba:	9304      	str	r3, [sp, #16]
    23bc:	8a2b      	ldrh	r3, [r5, #16]
    23be:	9303      	str	r3, [sp, #12]
    23c0:	463a      	mov	r2, r7
    23c2:	4643      	mov	r3, r8
    23c4:	4631      	mov	r1, r6
    23c6:	f8cd 9008 	str.w	r9, [sp, #8]
    23ca:	9001      	str	r0, [sp, #4]
    23cc:	9405      	str	r4, [sp, #20]
    23ce:	9400      	str	r4, [sp, #0]
    23d0:	4810      	ldr	r0, [pc, #64]	; (2414 <bt_dev_show_info+0x90>)
    23d2:	f7fe fddb 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    23d6:	f895 900f 	ldrb.w	r9, [r5, #15]
    23da:	4648      	mov	r0, r9
    23dc:	f7ff fdb8 	bl	1f50 <ver_str>
    23e0:	8a6b      	ldrh	r3, [r5, #18]
    23e2:	9303      	str	r3, [sp, #12]
    23e4:	9001      	str	r0, [sp, #4]
    23e6:	9404      	str	r4, [sp, #16]
    23e8:	f8cd 9008 	str.w	r9, [sp, #8]
    23ec:	9400      	str	r4, [sp, #0]
    23ee:	4643      	mov	r3, r8
    23f0:	463a      	mov	r2, r7
    23f2:	4631      	mov	r1, r6
    23f4:	4808      	ldr	r0, [pc, #32]	; (2418 <bt_dev_show_info+0x94>)
    23f6:	f7fe fdc9 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    23fa:	b007      	add	sp, #28
    23fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2400:	20003a68 	.word	0x20003a68
    2404:	00014d1f 	.word	0x00014d1f
    2408:	000153e3 	.word	0x000153e3
    240c:	00014645 	.word	0x00014645
    2410:	00014d26 	.word	0x00014d26
    2414:	00014d43 	.word	0x00014d43
    2418:	00014d91 	.word	0x00014d91
    241c:	00014cda 	.word	0x00014cda

00002420 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2420:	4b02      	ldr	r3, [pc, #8]	; (242c <bt_send+0xc>)
    2422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    2426:	691b      	ldr	r3, [r3, #16]
    2428:	4718      	bx	r3
    242a:	bf00      	nop
    242c:	20003a68 	.word	0x20003a68

00002430 <bt_hci_cmd_send>:
{
    2430:	b530      	push	{r4, r5, lr}
    2432:	4604      	mov	r4, r0
    2434:	b085      	sub	sp, #20
	if (!buf) {
    2436:	460d      	mov	r5, r1
    2438:	b919      	cbnz	r1, 2442 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    243a:	f7ff fe49 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    243e:	4605      	mov	r5, r0
    2440:	b1f0      	cbz	r0, 2480 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2442:	f640 4335 	movw	r3, #3125	; 0xc35
    2446:	429c      	cmp	r4, r3
    2448:	d114      	bne.n	2474 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    244a:	4628      	mov	r0, r5
    244c:	f7ff ffe8 	bl	2420 <bt_send>
		if (err) {
    2450:	4604      	mov	r4, r0
    2452:	b160      	cbz	r0, 246e <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2454:	4b0c      	ldr	r3, [pc, #48]	; (2488 <bt_hci_cmd_send+0x58>)
    2456:	9302      	str	r3, [sp, #8]
    2458:	e88d 0018 	stmia.w	sp, {r3, r4}
    245c:	4a0b      	ldr	r2, [pc, #44]	; (248c <bt_hci_cmd_send+0x5c>)
    245e:	4b0c      	ldr	r3, [pc, #48]	; (2490 <bt_hci_cmd_send+0x60>)
    2460:	490c      	ldr	r1, [pc, #48]	; (2494 <bt_hci_cmd_send+0x64>)
    2462:	480d      	ldr	r0, [pc, #52]	; (2498 <bt_hci_cmd_send+0x68>)
    2464:	f7fe fd92 	bl	f8c <printk>
			net_buf_unref(buf);
    2468:	4628      	mov	r0, r5
    246a:	f010 fa9d 	bl	129a8 <net_buf_unref>
}
    246e:	4620      	mov	r0, r4
    2470:	b005      	add	sp, #20
    2472:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2474:	4629      	mov	r1, r5
    2476:	4809      	ldr	r0, [pc, #36]	; (249c <bt_hci_cmd_send+0x6c>)
    2478:	f010 fa89 	bl	1298e <net_buf_put>
	return 0;
    247c:	2400      	movs	r4, #0
    247e:	e7f6      	b.n	246e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    2480:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2484:	e7f3      	b.n	246e <bt_hci_cmd_send+0x3e>
    2486:	bf00      	nop
    2488:	00014645 	.word	0x00014645
    248c:	00015394 	.word	0x00015394
    2490:	00014b9a 	.word	0x00014b9a
    2494:	000153e3 	.word	0x000153e3
    2498:	00014e1d 	.word	0x00014e1d
    249c:	20003b2c 	.word	0x20003b2c

000024a0 <start_le_scan>:
{
    24a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24a2:	460d      	mov	r5, r1
    24a4:	4614      	mov	r4, r2
    24a6:	4606      	mov	r6, r0
	memset(&set_param, 0, sizeof(set_param));
    24a8:	2207      	movs	r2, #7
    24aa:	2100      	movs	r1, #0
    24ac:	4668      	mov	r0, sp
    24ae:	f7ff fbd1 	bl	1c54 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    24b2:	f8ad 5001 	strh.w	r5, [sp, #1]
		set_param.addr_type =  bt_dev.id_addr.type;
    24b6:	4d1b      	ldr	r5, [pc, #108]	; (2524 <start_le_scan+0x84>)
	set_param.window = sys_cpu_to_le16(window);
    24b8:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.filter_policy = 0x00;
    24bc:	2300      	movs	r3, #0
    24be:	f88d 3006 	strb.w	r3, [sp, #6]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24c2:	2107      	movs	r1, #7
		set_param.addr_type =  bt_dev.id_addr.type;
    24c4:	782b      	ldrb	r3, [r5, #0]
	set_param.scan_type = scan_type;
    24c6:	f88d 6000 	strb.w	r6, [sp]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24ca:	f242 000b 	movw	r0, #8203	; 0x200b
		set_param.addr_type =  bt_dev.id_addr.type;
    24ce:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    24d2:	f7ff fdfd 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    24d6:	4604      	mov	r4, r0
    24d8:	b300      	cbz	r0, 251c <start_le_scan+0x7c>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    24da:	2207      	movs	r2, #7
    24dc:	4669      	mov	r1, sp
    24de:	3008      	adds	r0, #8
    24e0:	f010 fa9a 	bl	12a18 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    24e4:	4621      	mov	r1, r4
    24e6:	f242 000b 	movw	r0, #8203	; 0x200b
    24ea:	f7ff ffa1 	bl	2430 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    24ee:	2001      	movs	r0, #1
    24f0:	f7ff fe5c 	bl	21ac <set_le_scan_enable>
	if (err) {
    24f4:	4604      	mov	r4, r0
    24f6:	b938      	cbnz	r0, 2508 <start_le_scan+0x68>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    24f8:	2e01      	cmp	r6, #1
    24fa:	d108      	bne.n	250e <start_le_scan+0x6e>
    24fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2500:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2504:	f7ff fd43 	bl	1f8e <atomic_or>
}
    2508:	4620      	mov	r0, r4
    250a:	b002      	add	sp, #8
    250c:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    250e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2512:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2516:	f7ff fd4b 	bl	1fb0 <atomic_and>
    251a:	e7f5      	b.n	2508 <start_le_scan+0x68>
		return -ENOBUFS;
    251c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2520:	e7f2      	b.n	2508 <start_le_scan+0x68>
    2522:	bf00      	nop
    2524:	20003a68 	.word	0x20003a68

00002528 <bt_le_scan_update>:
{
    2528:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    252a:	2109      	movs	r1, #9
{
    252c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    252e:	4816      	ldr	r0, [pc, #88]	; (2588 <bt_le_scan_update+0x60>)
    2530:	f7ff fdc0 	bl	20b4 <atomic_test_bit>
    2534:	4602      	mov	r2, r0
    2536:	b108      	cbz	r0, 253c <bt_le_scan_update+0x14>
		return 0;
    2538:	2000      	movs	r0, #0
    253a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    253c:	2108      	movs	r1, #8
    253e:	4812      	ldr	r0, [pc, #72]	; (2588 <bt_le_scan_update+0x60>)
    2540:	f7ff fdb8 	bl	20b4 <atomic_test_bit>
    2544:	b9d0      	cbnz	r0, 257c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    2546:	2101      	movs	r1, #1
    2548:	2000      	movs	r0, #0
    254a:	f001 fe99 	bl	4280 <bt_conn_lookup_state_le>
		if (!conn) {
    254e:	4604      	mov	r4, r0
    2550:	2800      	cmp	r0, #0
    2552:	d0f1      	beq.n	2538 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2554:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2558:	480b      	ldr	r0, [pc, #44]	; (2588 <bt_le_scan_update+0x60>)
    255a:	f7ff fd18 	bl	1f8e <atomic_or>
		bt_conn_unref(conn);
    255e:	4620      	mov	r0, r4
    2560:	f001 feb0 	bl	42c4 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2564:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2566:	bf15      	itete	ne
    2568:	2230      	movne	r2, #48	; 0x30
    256a:	2212      	moveq	r2, #18
    256c:	2160      	movne	r1, #96	; 0x60
    256e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2572:	2000      	movs	r0, #0
}
    2574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2578:	f7ff bf92 	b.w	24a0 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    257c:	4610      	mov	r0, r2
    257e:	f7ff fe15 	bl	21ac <set_le_scan_enable>
		if (err) {
    2582:	2800      	cmp	r0, #0
    2584:	d0df      	beq.n	2546 <bt_le_scan_update+0x1e>
    2586:	bd38      	pop	{r3, r4, r5, pc}
    2588:	20003ad8 	.word	0x20003ad8

0000258c <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2590:	4d4d      	ldr	r5, [pc, #308]	; (26c8 <bt_init+0x13c>)
    2592:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    2596:	6899      	ldr	r1, [r3, #8]
    2598:	f011 0101 	ands.w	r1, r1, #1
{
    259c:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    259e:	d124      	bne.n	25ea <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    25a0:	aa0c      	add	r2, sp, #48	; 0x30
    25a2:	f640 4003 	movw	r0, #3075	; 0xc03
    25a6:	f7ff fdc3 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    25aa:	4604      	mov	r4, r0
    25ac:	2800      	cmp	r0, #0
    25ae:	f040 8087 	bne.w	26c0 <bt_init+0x134>
	u8_t status = buf->data[0];
    25b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25b4:	689b      	ldr	r3, [r3, #8]
	if (status) {
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	b9a3      	cbnz	r3, 25e4 <bt_init+0x58>
	scan_dev_found_cb = NULL;
    25ba:	4a44      	ldr	r2, [pc, #272]	; (26cc <bt_init+0x140>)
    25bc:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25be:	462b      	mov	r3, r5
    25c0:	f3bf 8f5b 	dmb	ish
    25c4:	f853 2f70 	ldr.w	r2, [r3, #112]!
    25c8:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    25cc:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    25d0:	f3bf 8f5b 	dmb	ish
    25d4:	e853 1f00 	ldrex	r1, [r3]
    25d8:	e843 2000 	strex	r0, r2, [r3]
    25dc:	2800      	cmp	r0, #0
    25de:	d1f9      	bne.n	25d4 <bt_init+0x48>
    25e0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    25e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    25e6:	f010 f9df 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    25ea:	aa0c      	add	r2, sp, #48	; 0x30
    25ec:	2100      	movs	r1, #0
    25ee:	f241 0003 	movw	r0, #4099	; 0x1003
    25f2:	f7ff fd9d 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    25f6:	4604      	mov	r4, r0
    25f8:	2800      	cmp	r0, #0
    25fa:	d161      	bne.n	26c0 <bt_init+0x134>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    25fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25fe:	4834      	ldr	r0, [pc, #208]	; (26d0 <bt_init+0x144>)
    2600:	6899      	ldr	r1, [r3, #8]
    2602:	2208      	movs	r2, #8
    2604:	3101      	adds	r1, #1
    2606:	f7ff faf9 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    260a:	980c      	ldr	r0, [sp, #48]	; 0x30
    260c:	f010 f9cc 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2610:	4621      	mov	r1, r4
    2612:	aa0c      	add	r2, sp, #48	; 0x30
    2614:	f241 0001 	movw	r0, #4097	; 0x1001
    2618:	f7ff fd8a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    261c:	4604      	mov	r4, r0
    261e:	2800      	cmp	r0, #0
    2620:	d14e      	bne.n	26c0 <bt_init+0x134>
	read_local_ver_complete(rsp);
    2622:	980c      	ldr	r0, [sp, #48]	; 0x30
    2624:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2626:	785a      	ldrb	r2, [r3, #1]
    2628:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    262a:	78d9      	ldrb	r1, [r3, #3]
    262c:	789a      	ldrb	r2, [r3, #2]
    262e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2632:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2634:	791a      	ldrb	r2, [r3, #4]
    2636:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2638:	7a19      	ldrb	r1, [r3, #8]
    263a:	79da      	ldrb	r2, [r3, #7]
    263c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2640:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2642:	795a      	ldrb	r2, [r3, #5]
    2644:	799b      	ldrb	r3, [r3, #6]
    2646:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    264a:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    264c:	f010 f9ac 	bl	129a8 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    2650:	2103      	movs	r1, #3
    2652:	4820      	ldr	r0, [pc, #128]	; (26d4 <bt_init+0x148>)
    2654:	f7ff fd2e 	bl	20b4 <atomic_test_bit>
    2658:	4601      	mov	r1, r0
    265a:	b988      	cbnz	r0, 2680 <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    265c:	aa0c      	add	r2, sp, #48	; 0x30
    265e:	f241 0009 	movw	r0, #4105	; 0x1009
    2662:	f7ff fd65 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2666:	4604      	mov	r4, r0
    2668:	bb50      	cbnz	r0, 26c0 <bt_init+0x134>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    266a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    266c:	481a      	ldr	r0, [pc, #104]	; (26d8 <bt_init+0x14c>)
    266e:	6899      	ldr	r1, [r3, #8]
    2670:	2206      	movs	r2, #6
    2672:	3101      	adds	r1, #1
    2674:	f7ff fac2 	bl	1bfc <memcpy>
		net_buf_unref(rsp);
    2678:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    267a:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    267c:	f010 f994 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2680:	aa0c      	add	r2, sp, #48	; 0x30
    2682:	2100      	movs	r1, #0
    2684:	f241 0002 	movw	r0, #4098	; 0x1002
    2688:	f7ff fd52 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    268c:	4604      	mov	r4, r0
    268e:	b9b8      	cbnz	r0, 26c0 <bt_init+0x134>
	memcpy(bt_dev.supported_commands, rp->commands,
    2690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2692:	4812      	ldr	r0, [pc, #72]	; (26dc <bt_init+0x150>)
    2694:	6899      	ldr	r1, [r3, #8]
    2696:	2240      	movs	r2, #64	; 0x40
    2698:	3101      	adds	r1, #1
    269a:	f7ff faaf 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    269e:	980c      	ldr	r0, [sp, #48]	; 0x30
    26a0:	f010 f982 	bl	129a8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    26a4:	7eab      	ldrb	r3, [r5, #26]
    26a6:	065a      	lsls	r2, r3, #25
    26a8:	d424      	bmi.n	26f4 <bt_init+0x168>
		BT_ERR("Non-LE capable controller detected!");
    26aa:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <bt_init+0x154>)
    26ac:	9301      	str	r3, [sp, #4]
    26ae:	9300      	str	r3, [sp, #0]
    26b0:	4a0c      	ldr	r2, [pc, #48]	; (26e4 <bt_init+0x158>)
    26b2:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <bt_init+0x15c>)
    26b4:	490d      	ldr	r1, [pc, #52]	; (26ec <bt_init+0x160>)
    26b6:	480e      	ldr	r0, [pc, #56]	; (26f0 <bt_init+0x164>)
    26b8:	f7fe fc68 	bl	f8c <printk>
		return -ENODEV;
    26bc:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    26c0:	4620      	mov	r0, r4
    26c2:	b00e      	add	sp, #56	; 0x38
    26c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26c8:	20003a68 	.word	0x20003a68
    26cc:	200002d8 	.word	0x200002d8
    26d0:	20003a7e 	.word	0x20003a7e
    26d4:	20003ad8 	.word	0x20003ad8
    26d8:	20003a69 	.word	0x20003a69
    26dc:	20003a86 	.word	0x20003a86
    26e0:	00014645 	.word	0x00014645
    26e4:	00015394 	.word	0x00015394
    26e8:	00014cb1 	.word	0x00014cb1
    26ec:	000153e3 	.word	0x000153e3
    26f0:	00014e4f 	.word	0x00014e4f
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    26f4:	4621      	mov	r1, r4
    26f6:	aa0c      	add	r2, sp, #48	; 0x30
    26f8:	f242 0003 	movw	r0, #8195	; 0x2003
    26fc:	f7ff fd18 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2700:	4604      	mov	r4, r0
    2702:	2800      	cmp	r0, #0
    2704:	d1dc      	bne.n	26c0 <bt_init+0x134>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2708:	489b      	ldr	r0, [pc, #620]	; (2978 <bt_init+0x3ec>)
    270a:	6899      	ldr	r1, [r3, #8]
    270c:	2208      	movs	r2, #8
    270e:	3101      	adds	r1, #1
    2710:	f7ff fa74 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2714:	980c      	ldr	r0, [sp, #48]	; 0x30
    2716:	f010 f947 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    271a:	4621      	mov	r1, r4
    271c:	aa0c      	add	r2, sp, #48	; 0x30
    271e:	f242 0002 	movw	r0, #8194	; 0x2002
    2722:	f7ff fd05 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2726:	4604      	mov	r4, r0
    2728:	2800      	cmp	r0, #0
    272a:	d1c9      	bne.n	26c0 <bt_init+0x134>
    272c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    272e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2730:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    2734:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2738:	b13a      	cbz	r2, 274a <bt_init+0x1be>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    273a:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    273c:	488f      	ldr	r0, [pc, #572]	; (297c <bt_init+0x3f0>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    273e:	2a02      	cmp	r2, #2
    2740:	bf28      	it	cs
    2742:	2202      	movcs	r2, #2
    2744:	4611      	mov	r1, r2
    2746:	f011 f9bd 	bl	13ac4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    274a:	980c      	ldr	r0, [sp, #48]	; 0x30
    274c:	f010 f92c 	bl	129a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2750:	7eac      	ldrb	r4, [r5, #26]
    2752:	f014 0420 	ands.w	r4, r4, #32
    2756:	f000 80c7 	beq.w	28e8 <bt_init+0x35c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    275a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    275e:	071b      	lsls	r3, r3, #28
    2760:	d513      	bpl.n	278a <bt_init+0x1fe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2762:	aa0c      	add	r2, sp, #48	; 0x30
    2764:	2100      	movs	r1, #0
    2766:	f242 001c 	movw	r0, #8220	; 0x201c
    276a:	f7ff fce1 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    276e:	4604      	mov	r4, r0
    2770:	2800      	cmp	r0, #0
    2772:	d1a5      	bne.n	26c0 <bt_init+0x134>
		le_read_supp_states_complete(rsp);
    2774:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2776:	6883      	ldr	r3, [r0, #8]
    2778:	f853 2f01 	ldr.w	r2, [r3, #1]!
    277c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    277e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2782:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2786:	f010 f90f 	bl	129a8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    278a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    278e:	069f      	lsls	r7, r3, #26
    2790:	f100 80c6 	bmi.w	2920 <bt_init+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2794:	2108      	movs	r1, #8
    2796:	f242 0001 	movw	r0, #8193	; 0x2001
    279a:	f7ff fc99 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    279e:	4604      	mov	r4, r0
    27a0:	2800      	cmp	r0, #0
    27a2:	f000 80a8 	beq.w	28f6 <bt_init+0x36a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    27a6:	2108      	movs	r1, #8
    27a8:	4408      	add	r0, r1
    27aa:	f010 f92f 	bl	12a0c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    27ae:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    27b2:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    27b4:	bf4c      	ite	mi
    27b6:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    27b8:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    27ba:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27bc:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    27c0:	bf48      	it	mi
    27c2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    27c6:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    27ca:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    27ce:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    27d2:	bf18      	it	ne
    27d4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    27d8:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    27da:	bf08      	it	eq
    27dc:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    27e0:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    27e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    27e6:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    27e8:	2200      	movs	r2, #0
    27ea:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    27ec:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    27ee:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    27f0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    27f2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    27f4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    27f6:	4621      	mov	r1, r4
    27f8:	f242 0001 	movw	r0, #8193	; 0x2001
    27fc:	f7ff fc98 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2800:	4604      	mov	r4, r0
    2802:	2800      	cmp	r0, #0
    2804:	f47f af5c 	bne.w	26c0 <bt_init+0x134>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2808:	7eab      	ldrb	r3, [r5, #26]
    280a:	069a      	lsls	r2, r3, #26
    280c:	d421      	bmi.n	2852 <bt_init+0x2c6>
	if (bt_dev.le.mtu) {
    280e:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    2812:	b9f1      	cbnz	r1, 2852 <bt_init+0x2c6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2814:	aa0c      	add	r2, sp, #48	; 0x30
    2816:	f241 0005 	movw	r0, #4101	; 0x1005
    281a:	f7ff fc89 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    281e:	4604      	mov	r4, r0
    2820:	2800      	cmp	r0, #0
    2822:	f47f af4d 	bne.w	26c0 <bt_init+0x134>
	if (bt_dev.le.mtu) {
    2826:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    282a:	b97b      	cbnz	r3, 284c <bt_init+0x2c0>
    282c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    282e:	4853      	ldr	r0, [pc, #332]	; (297c <bt_init+0x3f0>)
    2830:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2832:	7899      	ldrb	r1, [r3, #2]
    2834:	785a      	ldrb	r2, [r3, #1]
    2836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    283a:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    283e:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2840:	2a02      	cmp	r2, #2
    2842:	bf28      	it	cs
    2844:	2202      	movcs	r2, #2
    2846:	4611      	mov	r1, r2
    2848:	f011 f93c 	bl	13ac4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    284c:	980c      	ldr	r0, [sp, #48]	; 0x30
    284e:	f010 f8ab 	bl	129a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2852:	2108      	movs	r1, #8
    2854:	f640 4001 	movw	r0, #3073	; 0xc01
    2858:	f7ff fc3a 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    285c:	4604      	mov	r4, r0
    285e:	2800      	cmp	r0, #0
    2860:	d049      	beq.n	28f6 <bt_init+0x36a>
	ev = net_buf_add(buf, sizeof(*ev));
    2862:	2108      	movs	r1, #8
    2864:	4408      	add	r0, r1
    2866:	f010 f8d1 	bl	12a0c <net_buf_simple_add>
	dst[0] = val;
    286a:	2310      	movs	r3, #16
    286c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    286e:	2388      	movs	r3, #136	; 0x88
    2870:	7043      	strb	r3, [r0, #1]
    2872:	2302      	movs	r3, #2
	dst[0] = val;
    2874:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2876:	70c3      	strb	r3, [r0, #3]
    2878:	2320      	movs	r3, #32
	dst[0] = val;
    287a:	7082      	strb	r2, [r0, #2]
    287c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    287e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2880:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2882:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2884:	4621      	mov	r1, r4
    2886:	f640 4001 	movw	r0, #3073	; 0xc01
    288a:	f7ff fc51 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    288e:	4604      	mov	r4, r0
    2890:	2800      	cmp	r0, #0
    2892:	f47f af15 	bne.w	26c0 <bt_init+0x134>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2896:	4601      	mov	r1, r0
    2898:	aa0c      	add	r2, sp, #48	; 0x30
    289a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    289e:	f7ff fc47 	bl	2130 <bt_hci_cmd_send_sync>
    28a2:	4e37      	ldr	r6, [pc, #220]	; (2980 <bt_init+0x3f4>)
	if (err) {
    28a4:	2800      	cmp	r0, #0
    28a6:	d07b      	beq.n	29a0 <bt_init+0x414>
		BT_WARN("Vendor HCI extensions not available");
    28a8:	4b36      	ldr	r3, [pc, #216]	; (2984 <bt_init+0x3f8>)
    28aa:	4a37      	ldr	r2, [pc, #220]	; (2988 <bt_init+0x3fc>)
    28ac:	4937      	ldr	r1, [pc, #220]	; (298c <bt_init+0x400>)
    28ae:	4838      	ldr	r0, [pc, #224]	; (2990 <bt_init+0x404>)
    28b0:	9601      	str	r6, [sp, #4]
    28b2:	9600      	str	r6, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    28b4:	f7fe fb6a 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    28b8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    28ba:	2207      	movs	r2, #7
    28bc:	a90c      	add	r1, sp, #48	; 0x30
    28be:	4835      	ldr	r0, [pc, #212]	; (2994 <bt_init+0x408>)
    28c0:	930c      	str	r3, [sp, #48]	; 0x30
    28c2:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    28c6:	f7ff f984 	bl	1bd2 <memcmp>
    28ca:	2800      	cmp	r0, #0
    28cc:	f040 80e2 	bne.w	2a94 <bt_init+0x508>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    28d0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    28d4:	07db      	lsls	r3, r3, #31
    28d6:	f100 80fe 	bmi.w	2ad6 <bt_init+0x54a>
		BT_WARN("Read Static Addresses command not available");
    28da:	9601      	str	r6, [sp, #4]
    28dc:	9600      	str	r6, [sp, #0]
    28de:	4b2e      	ldr	r3, [pc, #184]	; (2998 <bt_init+0x40c>)
    28e0:	4a29      	ldr	r2, [pc, #164]	; (2988 <bt_init+0x3fc>)
    28e2:	492a      	ldr	r1, [pc, #168]	; (298c <bt_init+0x400>)
    28e4:	482d      	ldr	r0, [pc, #180]	; (299c <bt_init+0x410>)
    28e6:	e103      	b.n	2af0 <bt_init+0x564>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    28e8:	2102      	movs	r1, #2
    28ea:	f640 406d 	movw	r0, #3181	; 0xc6d
    28ee:	f7ff fbef 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    28f2:	4606      	mov	r6, r0
    28f4:	b910      	cbnz	r0, 28fc <bt_init+0x370>
		return -ENOBUFS;
    28f6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    28fa:	e6e1      	b.n	26c0 <bt_init+0x134>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    28fc:	2102      	movs	r1, #2
    28fe:	3008      	adds	r0, #8
    2900:	f010 f884 	bl	12a0c <net_buf_simple_add>
		cp_le->le = 0x01;
    2904:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2906:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2908:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    290a:	4622      	mov	r2, r4
    290c:	4631      	mov	r1, r6
    290e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2912:	f7ff fc0d 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2916:	4604      	mov	r4, r0
    2918:	2800      	cmp	r0, #0
    291a:	f43f af1e 	beq.w	275a <bt_init+0x1ce>
    291e:	e6cf      	b.n	26c0 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2920:	aa0c      	add	r2, sp, #48	; 0x30
    2922:	2100      	movs	r1, #0
    2924:	f242 002f 	movw	r0, #8239	; 0x202f
    2928:	f7ff fc02 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    292c:	4604      	mov	r4, r0
    292e:	2800      	cmp	r0, #0
    2930:	f47f aec6 	bne.w	26c0 <bt_init+0x134>
		rp = (void *)rsp->data;
    2934:	980c      	ldr	r0, [sp, #48]	; 0x30
    2936:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2938:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    293c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    2940:	f010 f832 	bl	129a8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2944:	2104      	movs	r1, #4
    2946:	f242 0024 	movw	r0, #8228	; 0x2024
    294a:	f7ff fbc1 	bl	20d0 <bt_hci_cmd_create>
		if (!buf) {
    294e:	4606      	mov	r6, r0
    2950:	2800      	cmp	r0, #0
    2952:	d0d0      	beq.n	28f6 <bt_init+0x36a>
		cp = net_buf_add(buf, sizeof(*cp));
    2954:	2104      	movs	r1, #4
    2956:	3008      	adds	r0, #8
    2958:	f010 f858 	bl	12a0c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    295c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    295e:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2962:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2964:	4631      	mov	r1, r6
    2966:	f242 0024 	movw	r0, #8228	; 0x2024
    296a:	f7ff fbe1 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    296e:	4604      	mov	r4, r0
    2970:	2800      	cmp	r0, #0
    2972:	f43f af0f 	beq.w	2794 <bt_init+0x208>
    2976:	e6a3      	b.n	26c0 <bt_init+0x134>
    2978:	20003ae0 	.word	0x20003ae0
    297c:	20003af4 	.word	0x20003af4
    2980:	00014645 	.word	0x00014645
    2984:	00014ceb 	.word	0x00014ceb
    2988:	000153dc 	.word	0x000153dc
    298c:	000153e3 	.word	0x000153e3
    2990:	00014e83 	.word	0x00014e83
    2994:	20003a68 	.word	0x20003a68
    2998:	00014ccc 	.word	0x00014ccc
    299c:	00015020 	.word	0x00015020
	rp.info = (void *)rsp->data;
    29a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    29a2:	4972      	ldr	r1, [pc, #456]	; (2b6c <bt_init+0x5e0>)
	rp.info = (void *)rsp->data;
    29a4:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    29a6:	4872      	ldr	r0, [pc, #456]	; (2b70 <bt_init+0x5e4>)
    29a8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    29ac:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    29ae:	2b03      	cmp	r3, #3
		return plat_str[platform];
    29b0:	bf96      	itet	ls
    29b2:	4a70      	ldrls	r2, [pc, #448]	; (2b74 <bt_init+0x5e8>)
	return "unknown";
    29b4:	4a70      	ldrhi	r2, [pc, #448]	; (2b78 <bt_init+0x5ec>)
		return plat_str[platform];
    29b6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    29ba:	9201      	str	r2, [sp, #4]
    29bc:	4b6f      	ldr	r3, [pc, #444]	; (2b7c <bt_init+0x5f0>)
    29be:	4a70      	ldr	r2, [pc, #448]	; (2b80 <bt_init+0x5f4>)
    29c0:	9603      	str	r6, [sp, #12]
    29c2:	9600      	str	r6, [sp, #0]
    29c4:	f7fe fae2 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    29c8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    29cc:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    29d0:	2b02      	cmp	r3, #2
    29d2:	d13a      	bne.n	2a4a <bt_init+0x4be>
	if (variant < ARRAY_SIZE(nordic_str)) {
    29d4:	2a02      	cmp	r2, #2
    29d6:	d838      	bhi.n	2a4a <bt_init+0x4be>
		return nordic_str[variant];
    29d8:	4b6a      	ldr	r3, [pc, #424]	; (2b84 <bt_init+0x5f8>)
    29da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    29de:	9202      	str	r2, [sp, #8]
    29e0:	9301      	str	r3, [sp, #4]
    29e2:	4a67      	ldr	r2, [pc, #412]	; (2b80 <bt_init+0x5f4>)
    29e4:	4b65      	ldr	r3, [pc, #404]	; (2b7c <bt_init+0x5f0>)
    29e6:	4961      	ldr	r1, [pc, #388]	; (2b6c <bt_init+0x5e0>)
    29e8:	9603      	str	r6, [sp, #12]
    29ea:	9600      	str	r6, [sp, #0]
    29ec:	4866      	ldr	r0, [pc, #408]	; (2b88 <bt_init+0x5fc>)
    29ee:	f7fe facd 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    29f2:	7963      	ldrb	r3, [r4, #5]
    29f4:	9606      	str	r6, [sp, #24]
    29f6:	f8d4 1009 	ldr.w	r1, [r4, #9]
    29fa:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    29fc:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    29fe:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2a02:	bf98      	it	ls
    2a04:	4a61      	ldrls	r2, [pc, #388]	; (2b8c <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a06:	9104      	str	r1, [sp, #16]
    2a08:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2a0a:	bf94      	ite	ls
    2a0c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2a10:	4a59      	ldrhi	r2, [pc, #356]	; (2b78 <bt_init+0x5ec>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a12:	9103      	str	r1, [sp, #12]
    2a14:	9302      	str	r3, [sp, #8]
    2a16:	4955      	ldr	r1, [pc, #340]	; (2b6c <bt_init+0x5e0>)
    2a18:	4b58      	ldr	r3, [pc, #352]	; (2b7c <bt_init+0x5f0>)
    2a1a:	9201      	str	r2, [sp, #4]
    2a1c:	9600      	str	r6, [sp, #0]
    2a1e:	4a58      	ldr	r2, [pc, #352]	; (2b80 <bt_init+0x5f4>)
    2a20:	485b      	ldr	r0, [pc, #364]	; (2b90 <bt_init+0x604>)
    2a22:	f7fe fab3 	bl	f8c <printk>
	net_buf_unref(rsp);
    2a26:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a28:	f00f ffbe 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2a2c:	aa0c      	add	r2, sp, #48	; 0x30
    2a2e:	2100      	movs	r1, #0
    2a30:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2a34:	f7ff fb7c 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a38:	4604      	mov	r4, r0
    2a3a:	b140      	cbz	r0, 2a4e <bt_init+0x4c2>
		BT_WARN("Failed to read supported vendor features");
    2a3c:	9601      	str	r6, [sp, #4]
    2a3e:	9600      	str	r6, [sp, #0]
    2a40:	4b4e      	ldr	r3, [pc, #312]	; (2b7c <bt_init+0x5f0>)
    2a42:	4a54      	ldr	r2, [pc, #336]	; (2b94 <bt_init+0x608>)
    2a44:	4949      	ldr	r1, [pc, #292]	; (2b6c <bt_init+0x5e0>)
    2a46:	4854      	ldr	r0, [pc, #336]	; (2b98 <bt_init+0x60c>)
    2a48:	e734      	b.n	28b4 <bt_init+0x328>
		return "unknown";
    2a4a:	4b4b      	ldr	r3, [pc, #300]	; (2b78 <bt_init+0x5ec>)
    2a4c:	e7c7      	b.n	29de <bt_init+0x452>
	rp.cmds = (void *)rsp->data;
    2a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2a50:	4852      	ldr	r0, [pc, #328]	; (2b9c <bt_init+0x610>)
    2a52:	6899      	ldr	r1, [r3, #8]
    2a54:	2202      	movs	r2, #2
    2a56:	3101      	adds	r1, #1
    2a58:	f7ff f8d0 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a5e:	f00f ffa3 	bl	129a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2a62:	aa0c      	add	r2, sp, #48	; 0x30
    2a64:	4621      	mov	r1, r4
    2a66:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2a6a:	f7ff fb61 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2a6e:	b130      	cbz	r0, 2a7e <bt_init+0x4f2>
		BT_WARN("Failed to read supported vendor commands");
    2a70:	9601      	str	r6, [sp, #4]
    2a72:	9600      	str	r6, [sp, #0]
    2a74:	4b41      	ldr	r3, [pc, #260]	; (2b7c <bt_init+0x5f0>)
    2a76:	4a47      	ldr	r2, [pc, #284]	; (2b94 <bt_init+0x608>)
    2a78:	493c      	ldr	r1, [pc, #240]	; (2b6c <bt_init+0x5e0>)
    2a7a:	4849      	ldr	r0, [pc, #292]	; (2ba0 <bt_init+0x614>)
    2a7c:	e71a      	b.n	28b4 <bt_init+0x328>
	rp.feat = (void *)rsp->data;
    2a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2a80:	4848      	ldr	r0, [pc, #288]	; (2ba4 <bt_init+0x618>)
    2a82:	6899      	ldr	r1, [r3, #8]
    2a84:	2201      	movs	r2, #1
    2a86:	4411      	add	r1, r2
    2a88:	f7ff f8b8 	bl	1bfc <memcpy>
	net_buf_unref(rsp);
    2a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a8e:	f00f ff8b 	bl	129a8 <net_buf_unref>
    2a92:	e711      	b.n	28b8 <bt_init+0x32c>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2a94:	4b44      	ldr	r3, [pc, #272]	; (2ba8 <bt_init+0x61c>)
    2a96:	6818      	ldr	r0, [r3, #0]
    2a98:	889a      	ldrh	r2, [r3, #4]
    2a9a:	900a      	str	r0, [sp, #40]	; 0x28
    2a9c:	799b      	ldrb	r3, [r3, #6]
    2a9e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2aa2:	a90a      	add	r1, sp, #40	; 0x28
    2aa4:	2207      	movs	r2, #7
    2aa6:	4841      	ldr	r0, [pc, #260]	; (2bac <bt_init+0x620>)
    2aa8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2aac:	f7ff f891 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2ab0:	2800      	cmp	r0, #0
    2ab2:	f43f af0d 	beq.w	28d0 <bt_init+0x344>
		bt_dev_show_info();
    2ab6:	f7ff fc65 	bl	2384 <bt_dev_show_info>
		err = bt_conn_init();
    2aba:	f001 fe47 	bl	474c <bt_conn_init>
		if (err) {
    2abe:	4604      	mov	r4, r0
    2ac0:	2800      	cmp	r0, #0
    2ac2:	f47f adfd 	bne.w	26c0 <bt_init+0x134>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2ac6:	2102      	movs	r1, #2
    2ac8:	4839      	ldr	r0, [pc, #228]	; (2bb0 <bt_init+0x624>)
    2aca:	f7ff fa60 	bl	1f8e <atomic_or>
	bt_le_scan_update(false);
    2ace:	4620      	mov	r0, r4
    2ad0:	f7ff fd2a 	bl	2528 <bt_le_scan_update>
    2ad4:	e5f4      	b.n	26c0 <bt_init+0x134>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2ad6:	aa09      	add	r2, sp, #36	; 0x24
    2ad8:	2100      	movs	r1, #0
    2ada:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2ade:	f7ff fb27 	bl	2130 <bt_hci_cmd_send_sync>
		if (err) {
    2ae2:	b140      	cbz	r0, 2af6 <bt_init+0x56a>
			BT_WARN("Failed to read static addresses");
    2ae4:	4b33      	ldr	r3, [pc, #204]	; (2bb4 <bt_init+0x628>)
    2ae6:	4a2b      	ldr	r2, [pc, #172]	; (2b94 <bt_init+0x608>)
    2ae8:	4920      	ldr	r1, [pc, #128]	; (2b6c <bt_init+0x5e0>)
    2aea:	4833      	ldr	r0, [pc, #204]	; (2bb8 <bt_init+0x62c>)
    2aec:	9601      	str	r6, [sp, #4]
    2aee:	9600      	str	r6, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2af0:	f7fe fa4c 	bl	f8c <printk>
    2af4:	e026      	b.n	2b44 <bt_init+0x5b8>
		rp = (void *)rsp->data;
    2af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2af8:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2afa:	784b      	ldrb	r3, [r1, #1]
    2afc:	b1bb      	cbz	r3, 2b2e <bt_init+0x5a2>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2afe:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2b00:	2206      	movs	r2, #6
    2b02:	3102      	adds	r1, #2
    2b04:	482d      	ldr	r0, [pc, #180]	; (2bbc <bt_init+0x630>)
    2b06:	702b      	strb	r3, [r5, #0]
    2b08:	f7ff f878 	bl	1bfc <memcpy>
			net_buf_unref(rsp);
    2b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b0e:	f00f ff4b 	bl	129a8 <net_buf_unref>
		return bt_set_static_addr();
    2b12:	f7ff fc07 	bl	2324 <bt_set_static_addr>
    2b16:	4604      	mov	r4, r0
		if (err) {
    2b18:	2800      	cmp	r0, #0
    2b1a:	d0cc      	beq.n	2ab6 <bt_init+0x52a>
			BT_ERR("Unable to set identity address");
    2b1c:	9601      	str	r6, [sp, #4]
    2b1e:	9600      	str	r6, [sp, #0]
    2b20:	4b27      	ldr	r3, [pc, #156]	; (2bc0 <bt_init+0x634>)
    2b22:	4a28      	ldr	r2, [pc, #160]	; (2bc4 <bt_init+0x638>)
    2b24:	4911      	ldr	r1, [pc, #68]	; (2b6c <bt_init+0x5e0>)
    2b26:	4828      	ldr	r0, [pc, #160]	; (2bc8 <bt_init+0x63c>)
    2b28:	f7fe fa30 	bl	f8c <printk>
    2b2c:	e5c8      	b.n	26c0 <bt_init+0x134>
		BT_WARN("No static addresses stored in controller");
    2b2e:	9601      	str	r6, [sp, #4]
    2b30:	9600      	str	r6, [sp, #0]
    2b32:	4b20      	ldr	r3, [pc, #128]	; (2bb4 <bt_init+0x628>)
    2b34:	4a17      	ldr	r2, [pc, #92]	; (2b94 <bt_init+0x608>)
    2b36:	490d      	ldr	r1, [pc, #52]	; (2b6c <bt_init+0x5e0>)
    2b38:	4824      	ldr	r0, [pc, #144]	; (2bcc <bt_init+0x640>)
    2b3a:	f7fe fa27 	bl	f8c <printk>
		net_buf_unref(rsp);
    2b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b40:	f00f ff32 	bl	129a8 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2b44:	4819      	ldr	r0, [pc, #100]	; (2bac <bt_init+0x620>)
    2b46:	f7ff fbdf 	bl	2308 <bt_addr_le_create_static>
		if (err) {
    2b4a:	4604      	mov	r4, r0
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d1e5      	bne.n	2b1c <bt_init+0x590>
		BT_WARN("Using temporary static random address %s",
    2b50:	481a      	ldr	r0, [pc, #104]	; (2bbc <bt_init+0x630>)
    2b52:	f7ff f8d9 	bl	1d08 <bt_addr_str>
    2b56:	9602      	str	r6, [sp, #8]
    2b58:	9001      	str	r0, [sp, #4]
    2b5a:	9600      	str	r6, [sp, #0]
    2b5c:	4b15      	ldr	r3, [pc, #84]	; (2bb4 <bt_init+0x628>)
    2b5e:	4a0d      	ldr	r2, [pc, #52]	; (2b94 <bt_init+0x608>)
    2b60:	4902      	ldr	r1, [pc, #8]	; (2b6c <bt_init+0x5e0>)
    2b62:	481b      	ldr	r0, [pc, #108]	; (2bd0 <bt_init+0x644>)
    2b64:	f7fe fa12 	bl	f8c <printk>
    2b68:	e7d3      	b.n	2b12 <bt_init+0x586>
    2b6a:	bf00      	nop
    2b6c:	000153e3 	.word	0x000153e3
    2b70:	00014eb7 	.word	0x00014eb7
    2b74:	0001557c 	.word	0x0001557c
    2b78:	0001566c 	.word	0x0001566c
    2b7c:	00014ceb 	.word	0x00014ceb
    2b80:	00014d1f 	.word	0x00014d1f
    2b84:	00015570 	.word	0x00015570
    2b88:	00014ee0 	.word	0x00014ee0
    2b8c:	0001565c 	.word	0x0001565c
    2b90:	00014f08 	.word	0x00014f08
    2b94:	000153dc 	.word	0x000153dc
    2b98:	00014f45 	.word	0x00014f45
    2b9c:	20003ac7 	.word	0x20003ac7
    2ba0:	00014f7e 	.word	0x00014f7e
    2ba4:	20003ac6 	.word	0x20003ac6
    2ba8:	00014590 	.word	0x00014590
    2bac:	20003a68 	.word	0x20003a68
    2bb0:	20003ad8 	.word	0x20003ad8
    2bb4:	00014ccc 	.word	0x00014ccc
    2bb8:	00014fb7 	.word	0x00014fb7
    2bbc:	20003a69 	.word	0x20003a69
    2bc0:	00014cf7 	.word	0x00014cf7
    2bc4:	00015394 	.word	0x00015394
    2bc8:	00015095 	.word	0x00015095
    2bcc:	00014fe7 	.word	0x00014fe7
    2bd0:	0001505c 	.word	0x0001505c

00002bd4 <init_work>:

static void init_work(struct k_work *work)
{
    2bd4:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2bd6:	f7ff fcd9 	bl	258c <bt_init>
	if (ready_cb) {
    2bda:	4b03      	ldr	r3, [pc, #12]	; (2be8 <init_work+0x14>)
    2bdc:	681b      	ldr	r3, [r3, #0]
    2bde:	b113      	cbz	r3, 2be6 <init_work+0x12>
		ready_cb(err);
	}
}
    2be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2be4:	4718      	bx	r3
    2be6:	bd10      	pop	{r4, pc}
    2be8:	200002d4 	.word	0x200002d4

00002bec <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    2bec:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2bee:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2bf0:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2bf2:	f242 0032 	movw	r0, #8242	; 0x2032
    2bf6:	f7ff fa6b 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2bfa:	4605      	mov	r5, r0
    2bfc:	b198      	cbz	r0, 2c26 <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2bfe:	2107      	movs	r1, #7
    2c00:	3008      	adds	r0, #8
    2c02:	f00f ff03 	bl	12a0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c06:	8823      	ldrh	r3, [r4, #0]
    2c08:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2c0a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c0c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2c0e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c10:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2c12:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2c14:	7144      	strb	r4, [r0, #5]
    2c16:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2c18:	4629      	mov	r1, r5
    2c1a:	f242 0032 	movw	r0, #8242	; 0x2032
    2c1e:	f7ff fc07 	bl	2430 <bt_hci_cmd_send>
	return 0;
    2c22:	4620      	mov	r0, r4
    2c24:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2c26:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2c2a:	bd38      	pop	{r3, r4, r5, pc}

00002c2c <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c2e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2c30:	aa01      	add	r2, sp, #4
    2c32:	2100      	movs	r1, #0
    2c34:	f242 002f 	movw	r0, #8239	; 0x202f
    2c38:	f7ff fa7a 	bl	2130 <bt_hci_cmd_send_sync>
	if (err) {
    2c3c:	b9d8      	cbnz	r0, 2c76 <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    2c3e:	9801      	ldr	r0, [sp, #4]
    2c40:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2c42:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2c46:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2c4a:	f00f fead 	bl	129a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2c4e:	2106      	movs	r1, #6
    2c50:	f242 0022 	movw	r0, #8226	; 0x2022
    2c54:	f7ff fa3c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2c58:	4604      	mov	r4, r0
    2c5a:	b170      	cbz	r0, 2c7a <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2c5c:	2106      	movs	r1, #6
    2c5e:	3008      	adds	r0, #8
    2c60:	f00f fed4 	bl	12a0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c64:	883b      	ldrh	r3, [r7, #0]
    2c66:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2c68:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2c6a:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2c6c:	4621      	mov	r1, r4
    2c6e:	f242 0022 	movw	r0, #8226	; 0x2022
    2c72:	f7ff fbdd 	bl	2430 <bt_hci_cmd_send>
}
    2c76:	b003      	add	sp, #12
    2c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2c7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2c7e:	e7fa      	b.n	2c76 <hci_le_set_data_len.isra.30+0x4a>

00002c80 <le_enh_conn_complete>:
{
    2c80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2c82:	7803      	ldrb	r3, [r0, #0]
{
    2c84:	b089      	sub	sp, #36	; 0x24
    2c86:	4605      	mov	r5, r0
	if (evt->status) {
    2c88:	b17b      	cbz	r3, 2caa <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2c8a:	2102      	movs	r1, #2
    2c8c:	2000      	movs	r0, #0
    2c8e:	f001 faf7 	bl	4280 <bt_conn_lookup_state_le>
		if (!conn) {
    2c92:	4604      	mov	r4, r0
    2c94:	b138      	cbz	r0, 2ca6 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2c96:	782b      	ldrb	r3, [r5, #0]
    2c98:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2c9a:	2100      	movs	r1, #0
    2c9c:	f001 f9c8 	bl	4030 <bt_conn_set_state>
		bt_conn_unref(conn);
    2ca0:	4620      	mov	r0, r4
    2ca2:	f001 fb0f 	bl	42c4 <bt_conn_unref>
}
    2ca6:	b009      	add	sp, #36	; 0x24
    2ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2caa:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cac:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2cb0:	4621      	mov	r1, r4
    2cb2:	a806      	add	r0, sp, #24
    2cb4:	f7ff f968 	bl	1f88 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cb8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2cbc:	3b02      	subs	r3, #2
    2cbe:	b2db      	uxtb	r3, r3
    2cc0:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2cc2:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2cc4:	d829      	bhi.n	2d1a <le_enh_conn_complete+0x9a>
    2cc6:	2206      	movs	r2, #6
    2cc8:	f105 0111 	add.w	r1, r5, #17
    2ccc:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2cd0:	f88d 3018 	strb.w	r3, [sp, #24]
    2cd4:	f7fe ff92 	bl	1bfc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2cd8:	2301      	movs	r3, #1
    2cda:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2cde:	2102      	movs	r1, #2
    2ce0:	a806      	add	r0, sp, #24
    2ce2:	f001 facd 	bl	4280 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2ce6:	78eb      	ldrb	r3, [r5, #3]
    2ce8:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2cea:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2cec:	d109      	bne.n	2d02 <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2cee:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2cf2:	484a      	ldr	r0, [pc, #296]	; (2e1c <le_enh_conn_complete+0x19c>)
    2cf4:	f7ff f95c 	bl	1fb0 <atomic_and>
		if (!conn) {
    2cf8:	b9a4      	cbnz	r4, 2d24 <le_enh_conn_complete+0xa4>
			conn = bt_conn_add_le(&id_addr);
    2cfa:	a806      	add	r0, sp, #24
    2cfc:	f001 f964 	bl	3fc8 <bt_conn_add_le>
    2d00:	4604      	mov	r4, r0
	if (!conn) {
    2d02:	b97c      	cbnz	r4, 2d24 <le_enh_conn_complete+0xa4>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2d04:	4b46      	ldr	r3, [pc, #280]	; (2e20 <le_enh_conn_complete+0x1a0>)
    2d06:	9302      	str	r3, [sp, #8]
    2d08:	e88d 0088 	stmia.w	sp, {r3, r7}
    2d0c:	4a45      	ldr	r2, [pc, #276]	; (2e24 <le_enh_conn_complete+0x1a4>)
    2d0e:	4b46      	ldr	r3, [pc, #280]	; (2e28 <le_enh_conn_complete+0x1a8>)
    2d10:	4946      	ldr	r1, [pc, #280]	; (2e2c <le_enh_conn_complete+0x1ac>)
    2d12:	4847      	ldr	r0, [pc, #284]	; (2e30 <le_enh_conn_complete+0x1b0>)
    2d14:	f7fe f93a 	bl	f8c <printk>
		return;
    2d18:	e7c5      	b.n	2ca6 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2d1a:	4621      	mov	r1, r4
    2d1c:	a804      	add	r0, sp, #16
    2d1e:	f7ff f933 	bl	1f88 <bt_addr_le_copy>
    2d22:	e7dc      	b.n	2cde <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2d24:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d26:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2d28:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2d2c:	f7ff f92c 	bl	1f88 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2d30:	7e2a      	ldrb	r2, [r5, #24]
    2d32:	7deb      	ldrb	r3, [r5, #23]
    2d34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d38:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2d3c:	7eaa      	ldrb	r2, [r5, #26]
    2d3e:	7e6b      	ldrb	r3, [r5, #25]
    2d40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d44:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2d48:	7eeb      	ldrb	r3, [r5, #27]
    2d4a:	7f2a      	ldrb	r2, [r5, #28]
    2d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2d50:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    2d54:	78ee      	ldrb	r6, [r5, #3]
    2d56:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2d58:	2e01      	cmp	r6, #1
    2d5a:	d11a      	bne.n	2d92 <le_enh_conn_complete+0x112>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d5c:	4f35      	ldr	r7, [pc, #212]	; (2e34 <le_enh_conn_complete+0x1b4>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2d5e:	a904      	add	r1, sp, #16
    2d60:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    2d64:	f7ff f910 	bl	1f88 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2d68:	4639      	mov	r1, r7
    2d6a:	f104 0052 	add.w	r0, r4, #82	; 0x52
    2d6e:	f7ff f90b 	bl	1f88 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2d72:	2107      	movs	r1, #7
    2d74:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2d78:	f7ff f99c 	bl	20b4 <atomic_test_bit>
    2d7c:	b148      	cbz	r0, 2d92 <le_enh_conn_complete+0x112>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2d7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2d82:	2200      	movs	r2, #0
    2d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2d88:	4313      	orrs	r3, r2
    2d8a:	d002      	beq.n	2d92 <le_enh_conn_complete+0x112>
			set_advertise_enable(true);
    2d8c:	4630      	mov	r0, r6
    2d8e:	f7ff fa71 	bl	2274 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2d92:	2103      	movs	r1, #3
    2d94:	4620      	mov	r0, r4
    2d96:	f001 f94b 	bl	4030 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2d9a:	7a63      	ldrb	r3, [r4, #9]
    2d9c:	2b03      	cmp	r3, #3
    2d9e:	d118      	bne.n	2dd2 <le_enh_conn_complete+0x152>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2da0:	78eb      	ldrb	r3, [r5, #3]
    2da2:	b123      	cbz	r3, 2dae <le_enh_conn_complete+0x12e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2da4:	4b23      	ldr	r3, [pc, #140]	; (2e34 <le_enh_conn_complete+0x1b4>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2da6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2daa:	0719      	lsls	r1, r3, #28
    2dac:	d518      	bpl.n	2de0 <le_enh_conn_complete+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2dae:	2102      	movs	r1, #2
    2db0:	f242 0016 	movw	r0, #8214	; 0x2016
    2db4:	f7ff f98c 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2db8:	4605      	mov	r5, r0
    2dba:	b188      	cbz	r0, 2de0 <le_enh_conn_complete+0x160>
	cp = net_buf_add(buf, sizeof(*cp));
    2dbc:	2102      	movs	r1, #2
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00f fe24 	bl	12a0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2dc4:	8823      	ldrh	r3, [r4, #0]
    2dc6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2dc8:	4629      	mov	r1, r5
    2dca:	f242 0016 	movw	r0, #8214	; 0x2016
    2dce:	f7ff fb2f 	bl	2430 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2dd2:	4620      	mov	r0, r4
    2dd4:	f001 fa76 	bl	42c4 <bt_conn_unref>
	bt_le_scan_update(false);
    2dd8:	2000      	movs	r0, #0
    2dda:	f7ff fba5 	bl	2528 <bt_le_scan_update>
    2dde:	e762      	b.n	2ca6 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2de0:	4d14      	ldr	r5, [pc, #80]	; (2e34 <le_enh_conn_complete+0x1b4>)
    2de2:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2de6:	07d2      	lsls	r2, r2, #31
    2de8:	d508      	bpl.n	2dfc <le_enh_conn_complete+0x17c>
		err = hci_le_set_phy(conn);
    2dea:	4620      	mov	r0, r4
    2dec:	f7ff fefe 	bl	2bec <hci_le_set_phy.isra.29>
		if (!err) {
    2df0:	b920      	cbnz	r0, 2dfc <le_enh_conn_complete+0x17c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2df2:	2180      	movs	r1, #128	; 0x80
    2df4:	1d20      	adds	r0, r4, #4
    2df6:	f7ff f8ca 	bl	1f8e <atomic_or>
    2dfa:	e7ea      	b.n	2dd2 <le_enh_conn_complete+0x152>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2dfc:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2e00:	069b      	lsls	r3, r3, #26
    2e02:	d506      	bpl.n	2e12 <le_enh_conn_complete+0x192>
		err = hci_le_set_data_len(conn);
    2e04:	4620      	mov	r0, r4
    2e06:	f7ff ff11 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    2e0a:	b910      	cbnz	r0, 2e12 <le_enh_conn_complete+0x192>
    2e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2e10:	e7f0      	b.n	2df4 <le_enh_conn_complete+0x174>
	update_conn_param(conn);
    2e12:	4620      	mov	r0, r4
    2e14:	f7ff f8de 	bl	1fd4 <update_conn_param>
    2e18:	e7db      	b.n	2dd2 <le_enh_conn_complete+0x152>
    2e1a:	bf00      	nop
    2e1c:	20003ad8 	.word	0x20003ad8
    2e20:	00014645 	.word	0x00014645
    2e24:	00015394 	.word	0x00015394
    2e28:	00014be1 	.word	0x00014be1
    2e2c:	000153e3 	.word	0x000153e3
    2e30:	00015519 	.word	0x00015519
    2e34:	20003a68 	.word	0x20003a68

00002e38 <le_conn_param_neg_reply>:
{
    2e38:	b570      	push	{r4, r5, r6, lr}
    2e3a:	4606      	mov	r6, r0
    2e3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2e3e:	f242 0021 	movw	r0, #8225	; 0x2021
    2e42:	2103      	movs	r1, #3
    2e44:	f7ff f944 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    2e48:	4604      	mov	r4, r0
    2e4a:	b160      	cbz	r0, 2e66 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2e4c:	2103      	movs	r1, #3
    2e4e:	3008      	adds	r0, #8
    2e50:	f00f fddc 	bl	12a0c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2e54:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2e56:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e58:	4621      	mov	r1, r4
    2e5a:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e62:	f7ff bae5 	b.w	2430 <bt_hci_cmd_send>
}
    2e66:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2e6a:	bd70      	pop	{r4, r5, r6, pc}

00002e6c <hci_tx_thread>:
{
    2e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2e70:	f8df a148 	ldr.w	sl, [pc, #328]	; 2fbc <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2e74:	4d4f      	ldr	r5, [pc, #316]	; (2fb4 <hci_tx_thread+0x148>)
{
    2e76:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2e78:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2e7c:	484e      	ldr	r0, [pc, #312]	; (2fb8 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2e7e:	f36f 1307 	bfc	r3, #4, #4
    2e82:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2e86:	f001 f857 	bl	3f38 <bt_conn_prepare_events>
    2e8a:	f100 0901 	add.w	r9, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e92:	4649      	mov	r1, r9
    2e94:	4849      	ldr	r0, [pc, #292]	; (2fbc <hci_tx_thread+0x150>)
    2e96:	f011 fa5f 	bl	14358 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2e9a:	b948      	cbnz	r0, 2eb0 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2e9c:	4c48      	ldr	r4, [pc, #288]	; (2fc0 <hci_tx_thread+0x154>)
    2e9e:	4e47      	ldr	r6, [pc, #284]	; (2fbc <hci_tx_thread+0x150>)
    2ea0:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
	for (; count; ev++, count--) {
    2ea4:	f1b9 0f00 	cmp.w	r9, #0
    2ea8:	d111      	bne.n	2ece <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2eaa:	f010 fdd5 	bl	13a58 <_impl_k_yield>
    2eae:	e7e3      	b.n	2e78 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    2eb0:	4b40      	ldr	r3, [pc, #256]	; (2fb4 <hci_tx_thread+0x148>)
    2eb2:	9301      	str	r3, [sp, #4]
    2eb4:	9300      	str	r3, [sp, #0]
    2eb6:	4a43      	ldr	r2, [pc, #268]	; (2fc4 <hci_tx_thread+0x158>)
    2eb8:	4b43      	ldr	r3, [pc, #268]	; (2fc8 <hci_tx_thread+0x15c>)
    2eba:	4944      	ldr	r1, [pc, #272]	; (2fcc <hci_tx_thread+0x160>)
    2ebc:	4844      	ldr	r0, [pc, #272]	; (2fd0 <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    2ebe:	f7fe f865 	bl	f8c <printk>
    2ec2:	4040      	eors	r0, r0
    2ec4:	f380 8811 	msr	BASEPRI, r0
    2ec8:	f04f 0004 	mov.w	r0, #4
    2ecc:	df02      	svc	2
		switch (ev->state) {
    2ece:	7b73      	ldrb	r3, [r6, #13]
    2ed0:	091b      	lsrs	r3, r3, #4
    2ed2:	2b01      	cmp	r3, #1
    2ed4:	d952      	bls.n	2f7c <hci_tx_thread+0x110>
    2ed6:	2b04      	cmp	r3, #4
    2ed8:	d162      	bne.n	2fa0 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2eda:	7b37      	ldrb	r7, [r6, #12]
    2edc:	2f00      	cmp	r7, #0
    2ede:	d151      	bne.n	2f84 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2ee0:	4639      	mov	r1, r7
    2ee2:	4658      	mov	r0, fp
    2ee4:	f00f fd36 	bl	12954 <net_buf_get>
	BT_ASSERT(buf);
    2ee8:	4680      	mov	r8, r0
    2eea:	b938      	cbnz	r0, 2efc <hci_tx_thread+0x90>
    2eec:	4b31      	ldr	r3, [pc, #196]	; (2fb4 <hci_tx_thread+0x148>)
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	9300      	str	r3, [sp, #0]
    2ef2:	4a34      	ldr	r2, [pc, #208]	; (2fc4 <hci_tx_thread+0x158>)
    2ef4:	4b37      	ldr	r3, [pc, #220]	; (2fd4 <hci_tx_thread+0x168>)
    2ef6:	4935      	ldr	r1, [pc, #212]	; (2fcc <hci_tx_thread+0x160>)
    2ef8:	4837      	ldr	r0, [pc, #220]	; (2fd8 <hci_tx_thread+0x16c>)
    2efa:	e7e0      	b.n	2ebe <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f00:	4836      	ldr	r0, [pc, #216]	; (2fdc <hci_tx_thread+0x170>)
    2f02:	f010 fe10 	bl	13b26 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2f06:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2f0a:	b16b      	cbz	r3, 2f28 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    2f0c:	4b31      	ldr	r3, [pc, #196]	; (2fd4 <hci_tx_thread+0x168>)
    2f0e:	4a2d      	ldr	r2, [pc, #180]	; (2fc4 <hci_tx_thread+0x158>)
    2f10:	492e      	ldr	r1, [pc, #184]	; (2fcc <hci_tx_thread+0x160>)
    2f12:	9501      	str	r5, [sp, #4]
    2f14:	9500      	str	r5, [sp, #0]
    2f16:	4832      	ldr	r0, [pc, #200]	; (2fe0 <hci_tx_thread+0x174>)
    2f18:	f7fe f838 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2f1c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f20:	f00f fd42 	bl	129a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f24:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2f28:	4640      	mov	r0, r8
    2f2a:	f00f fd6b 	bl	12a04 <net_buf_ref>
    2f2e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2f32:	4640      	mov	r0, r8
    2f34:	f7ff fa74 	bl	2420 <bt_send>
	if (err) {
    2f38:	b300      	cbz	r0, 2f7c <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    2f3a:	4b26      	ldr	r3, [pc, #152]	; (2fd4 <hci_tx_thread+0x168>)
    2f3c:	4a21      	ldr	r2, [pc, #132]	; (2fc4 <hci_tx_thread+0x158>)
    2f3e:	4923      	ldr	r1, [pc, #140]	; (2fcc <hci_tx_thread+0x160>)
    2f40:	9001      	str	r0, [sp, #4]
    2f42:	9502      	str	r5, [sp, #8]
    2f44:	9500      	str	r5, [sp, #0]
    2f46:	4827      	ldr	r0, [pc, #156]	; (2fe4 <hci_tx_thread+0x178>)
    2f48:	f7fe f820 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2f4c:	4823      	ldr	r0, [pc, #140]	; (2fdc <hci_tx_thread+0x170>)
    2f4e:	f010 fdc2 	bl	13ad6 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2f52:	4640      	mov	r0, r8
    2f54:	f00f fc6a 	bl	1282c <net_buf_id>
    2f58:	4b23      	ldr	r3, [pc, #140]	; (2fe8 <hci_tx_thread+0x17c>)
    2f5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f5e:	2200      	movs	r2, #0
    2f60:	211f      	movs	r1, #31
    2f62:	8840      	ldrh	r0, [r0, #2]
    2f64:	f7ff f844 	bl	1ff0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2f68:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2f6c:	f00f fd1c 	bl	129a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f70:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2f72:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    2f74:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2f78:	f00f fd16 	bl	129a8 <net_buf_unref>
	for (; count; ev++, count--) {
    2f7c:	3614      	adds	r6, #20
    2f7e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2f82:	e78f      	b.n	2ea4 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2f84:	2f01      	cmp	r7, #1
    2f86:	d104      	bne.n	2f92 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    2f88:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    2f8a:	3818      	subs	r0, #24
    2f8c:	f000 fefe 	bl	3d8c <bt_conn_notify_tx>
    2f90:	e7f4      	b.n	2f7c <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2f92:	2f02      	cmp	r7, #2
    2f94:	d1f2      	bne.n	2f7c <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    2f96:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    2f98:	3828      	subs	r0, #40	; 0x28
    2f9a:	f001 fb5b 	bl	4654 <bt_conn_process_tx>
    2f9e:	e7ed      	b.n	2f7c <hci_tx_thread+0x110>
		switch (ev->state) {
    2fa0:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2fa2:	9502      	str	r5, [sp, #8]
    2fa4:	9500      	str	r5, [sp, #0]
    2fa6:	4b11      	ldr	r3, [pc, #68]	; (2fec <hci_tx_thread+0x180>)
    2fa8:	4a11      	ldr	r2, [pc, #68]	; (2ff0 <hci_tx_thread+0x184>)
    2faa:	4908      	ldr	r1, [pc, #32]	; (2fcc <hci_tx_thread+0x160>)
    2fac:	4811      	ldr	r0, [pc, #68]	; (2ff4 <hci_tx_thread+0x188>)
    2fae:	f7fd ffed 	bl	f8c <printk>
    2fb2:	e7e3      	b.n	2f7c <hci_tx_thread+0x110>
    2fb4:	00014645 	.word	0x00014645
    2fb8:	20003b54 	.word	0x20003b54
    2fbc:	20003b40 	.word	0x20003b40
    2fc0:	20003a68 	.word	0x20003a68
    2fc4:	00015394 	.word	0x00015394
    2fc8:	00014ca3 	.word	0x00014ca3
    2fcc:	000153e3 	.word	0x000153e3
    2fd0:	0001546e 	.word	0x0001546e
    2fd4:	00014c8b 	.word	0x00014c8b
    2fd8:	00015498 	.word	0x00015498
    2fdc:	20003b10 	.word	0x20003b10
    2fe0:	000154bd 	.word	0x000154bd
    2fe4:	00014e1d 	.word	0x00014e1d
    2fe8:	2000027c 	.word	0x2000027c
    2fec:	00014c94 	.word	0x00014c94
    2ff0:	000153dc 	.word	0x000153dc
    2ff4:	000154e8 	.word	0x000154e8

00002ff8 <bt_recv>:
{
    2ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2ffc:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    2ffe:	2b01      	cmp	r3, #1
{
    3000:	b095      	sub	sp, #84	; 0x54
    3002:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3004:	d040      	beq.n	3088 <bt_recv+0x90>
    3006:	2b03      	cmp	r3, #3
    3008:	f040 8338 	bne.w	367c <bt_recv+0x684>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    300c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    300e:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3010:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    3012:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3016:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3018:	23ff      	movs	r3, #255	; 0xff
    301a:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    301c:	2104      	movs	r1, #4
    301e:	3008      	adds	r0, #8
    3020:	f00f fd22 	bl	12a68 <net_buf_simple_pull>
	if (buf->len != len) {
    3024:	89a2      	ldrh	r2, [r4, #12]
    3026:	4295      	cmp	r5, r2
    3028:	d00e      	beq.n	3048 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    302a:	4ba0      	ldr	r3, [pc, #640]	; (32ac <bt_recv+0x2b4>)
    302c:	9303      	str	r3, [sp, #12]
    302e:	9201      	str	r2, [sp, #4]
    3030:	9300      	str	r3, [sp, #0]
    3032:	9502      	str	r5, [sp, #8]
    3034:	4b9e      	ldr	r3, [pc, #632]	; (32b0 <bt_recv+0x2b8>)
    3036:	4a9f      	ldr	r2, [pc, #636]	; (32b4 <bt_recv+0x2bc>)
    3038:	499f      	ldr	r1, [pc, #636]	; (32b8 <bt_recv+0x2c0>)
    303a:	48a0      	ldr	r0, [pc, #640]	; (32bc <bt_recv+0x2c4>)
    303c:	f7fd ffa6 	bl	f8c <printk>
	net_buf_unref(buf);
    3040:	4620      	mov	r0, r4
    3042:	f00f fcb1 	bl	129a8 <net_buf_unref>
    3046:	e01b      	b.n	3080 <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3048:	8ae0      	ldrh	r0, [r4, #22]
    304a:	f001 f8cd 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    304e:	4605      	mov	r5, r0
    3050:	b958      	cbnz	r0, 306a <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3052:	4b96      	ldr	r3, [pc, #600]	; (32ac <bt_recv+0x2b4>)
    3054:	8ae2      	ldrh	r2, [r4, #22]
    3056:	9302      	str	r3, [sp, #8]
    3058:	9201      	str	r2, [sp, #4]
    305a:	9300      	str	r3, [sp, #0]
    305c:	4a95      	ldr	r2, [pc, #596]	; (32b4 <bt_recv+0x2bc>)
    305e:	4b94      	ldr	r3, [pc, #592]	; (32b0 <bt_recv+0x2b8>)
    3060:	4995      	ldr	r1, [pc, #596]	; (32b8 <bt_recv+0x2c0>)
    3062:	4897      	ldr	r0, [pc, #604]	; (32c0 <bt_recv+0x2c8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3064:	f7fd ff92 	bl	f8c <printk>
    3068:	e7ea      	b.n	3040 <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    306a:	f001 fb63 	bl	4734 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    306e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    3070:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3072:	4621      	mov	r1, r4
    3074:	4628      	mov	r0, r5
    3076:	f000 fdc9 	bl	3c0c <bt_conn_recv>
	bt_conn_unref(conn);
    307a:	4628      	mov	r0, r5
    307c:	f001 f922 	bl	42c4 <bt_conn_unref>
		return 0;
    3080:	2000      	movs	r0, #0
}
    3082:	b015      	add	sp, #84	; 0x54
    3084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3088:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    308a:	7832      	ldrb	r2, [r6, #0]
    308c:	2a13      	cmp	r2, #19
    308e:	f200 8305 	bhi.w	369c <bt_recv+0x6a4>
    3092:	4093      	lsls	r3, r2
    3094:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3098:	f000 8300 	beq.w	369c <bt_recv+0x6a4>
    309c:	4b83      	ldr	r3, [pc, #524]	; (32ac <bt_recv+0x2b4>)
    309e:	9301      	str	r3, [sp, #4]
    30a0:	9300      	str	r3, [sp, #0]
    30a2:	4a84      	ldr	r2, [pc, #528]	; (32b4 <bt_recv+0x2bc>)
    30a4:	4b87      	ldr	r3, [pc, #540]	; (32c4 <bt_recv+0x2cc>)
    30a6:	4984      	ldr	r1, [pc, #528]	; (32b8 <bt_recv+0x2c0>)
    30a8:	4887      	ldr	r0, [pc, #540]	; (32c8 <bt_recv+0x2d0>)
    30aa:	f7fd ff6f 	bl	f8c <printk>
    30ae:	4040      	eors	r0, r0
    30b0:	f380 8811 	msr	BASEPRI, r0
    30b4:	f04f 0004 	mov.w	r0, #4
    30b8:	df02      	svc	2
    30ba:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    30bc:	783e      	ldrb	r6, [r7, #0]
    30be:	2e00      	cmp	r6, #0
    30c0:	d1be      	bne.n	3040 <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30c2:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    30c6:	4640      	mov	r0, r8
    30c8:	f001 f88e 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    30cc:	4605      	mov	r5, r0
    30ce:	b9c8      	cbnz	r0, 3104 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    30d0:	4b76      	ldr	r3, [pc, #472]	; (32ac <bt_recv+0x2b4>)
    30d2:	9302      	str	r3, [sp, #8]
    30d4:	e88d 0108 	stmia.w	sp, {r3, r8}
    30d8:	4a76      	ldr	r2, [pc, #472]	; (32b4 <bt_recv+0x2bc>)
    30da:	4b7c      	ldr	r3, [pc, #496]	; (32cc <bt_recv+0x2d4>)
    30dc:	4976      	ldr	r1, [pc, #472]	; (32b8 <bt_recv+0x2c0>)
    30de:	487c      	ldr	r0, [pc, #496]	; (32d0 <bt_recv+0x2d8>)
    30e0:	f7fd ff54 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30e4:	2107      	movs	r1, #7
    30e6:	487b      	ldr	r0, [pc, #492]	; (32d4 <bt_recv+0x2dc>)
    30e8:	f7fe ffe4 	bl	20b4 <atomic_test_bit>
    30ec:	2800      	cmp	r0, #0
    30ee:	d0a7      	beq.n	3040 <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    30f0:	2106      	movs	r1, #6
    30f2:	4878      	ldr	r0, [pc, #480]	; (32d4 <bt_recv+0x2dc>)
    30f4:	f7fe ffde 	bl	20b4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    30f8:	2800      	cmp	r0, #0
    30fa:	d1a1      	bne.n	3040 <bt_recv+0x48>
		set_advertise_enable(true);
    30fc:	2001      	movs	r0, #1
    30fe:	f7ff f8b9 	bl	2274 <set_advertise_enable>
    3102:	e79d      	b.n	3040 <bt_recv+0x48>
	conn->err = evt->reason;
    3104:	78fb      	ldrb	r3, [r7, #3]
    3106:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3108:	4973      	ldr	r1, [pc, #460]	; (32d8 <bt_recv+0x2e0>)
    310a:	4874      	ldr	r0, [pc, #464]	; (32dc <bt_recv+0x2e4>)
    310c:	f010 fe94 	bl	13e38 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3110:	4631      	mov	r1, r6
    3112:	4628      	mov	r0, r5
    3114:	f000 ff8c 	bl	4030 <bt_conn_set_state>
	conn->handle = 0;
    3118:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    311a:	78ae      	ldrb	r6, [r5, #2]
    311c:	b10e      	cbz	r6, 3122 <bt_recv+0x12a>
	bt_conn_unref(conn);
    311e:	4628      	mov	r0, r5
    3120:	e086      	b.n	3230 <bt_recv+0x238>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3122:	4631      	mov	r1, r6
    3124:	1d28      	adds	r0, r5, #4
    3126:	f7fe ffc5 	bl	20b4 <atomic_test_bit>
    312a:	b130      	cbz	r0, 313a <bt_recv+0x142>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    312c:	4628      	mov	r0, r5
    312e:	2101      	movs	r1, #1
    3130:	f000 ff7e 	bl	4030 <bt_conn_set_state>
		bt_le_scan_update(false);
    3134:	4630      	mov	r0, r6
    3136:	f7ff f9f7 	bl	2528 <bt_le_scan_update>
	bt_conn_unref(conn);
    313a:	4628      	mov	r0, r5
    313c:	f001 f8c2 	bl	42c4 <bt_conn_unref>
    3140:	e7d0      	b.n	30e4 <bt_recv+0xec>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3142:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3144:	2101      	movs	r1, #1
    3146:	4628      	mov	r0, r5
    3148:	f00f fc8e 	bl	12a68 <net_buf_simple_pull>
	switch (evt->subevent) {
    314c:	7836      	ldrb	r6, [r6, #0]
    314e:	1e73      	subs	r3, r6, #1
    3150:	2b0b      	cmp	r3, #11
    3152:	f200 8281 	bhi.w	3658 <bt_recv+0x660>
    3156:	e8df f013 	tbh	[pc, r3, lsl #1]
    315a:	000c      	.short	0x000c
    315c:	00430199 	.word	0x00430199
    3160:	027f006e 	.word	0x027f006e
    3164:	012800cb 	.word	0x012800cb
    3168:	018a016a 	.word	0x018a016a
    316c:	027f0041 	.word	0x027f0041
    3170:	0141      	.short	0x0141
    3172:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    3174:	780b      	ldrb	r3, [r1, #0]
    3176:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    317a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    317e:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    3182:	78cb      	ldrb	r3, [r1, #3]
    3184:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    3188:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    318c:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    3190:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    3194:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    3198:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    319c:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    31a0:	7c4b      	ldrb	r3, [r1, #17]
    31a2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    31a6:	3104      	adds	r1, #4
    31a8:	a80d      	add	r0, sp, #52	; 0x34
    31aa:	f7fe feed 	bl	1f88 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    31ae:	2500      	movs	r5, #0
    31b0:	2206      	movs	r2, #6
    31b2:	a908      	add	r1, sp, #32
    31b4:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    31b8:	9508      	str	r5, [sp, #32]
    31ba:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    31be:	f7fe fd1d 	bl	1bfc <memcpy>
    31c2:	2206      	movs	r2, #6
    31c4:	a90a      	add	r1, sp, #40	; 0x28
    31c6:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    31ca:	950a      	str	r5, [sp, #40]	; 0x28
    31cc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    31d0:	f7fe fd14 	bl	1bfc <memcpy>
	le_enh_conn_complete(&enh);
    31d4:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    31d6:	f7ff fd53 	bl	2c80 <le_enh_conn_complete>
    31da:	e731      	b.n	3040 <bt_recv+0x48>
    31dc:	68a0      	ldr	r0, [r4, #8]
    31de:	e7fa      	b.n	31d6 <bt_recv+0x1de>
    31e0:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    31e2:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    31e6:	4638      	mov	r0, r7
    31e8:	f000 fffe 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    31ec:	4606      	mov	r6, r0
    31ee:	b940      	cbnz	r0, 3202 <bt_recv+0x20a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    31f0:	4b2e      	ldr	r3, [pc, #184]	; (32ac <bt_recv+0x2b4>)
    31f2:	9302      	str	r3, [sp, #8]
    31f4:	e88d 0088 	stmia.w	sp, {r3, r7}
    31f8:	4b39      	ldr	r3, [pc, #228]	; (32e0 <bt_recv+0x2e8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    31fa:	4a2e      	ldr	r2, [pc, #184]	; (32b4 <bt_recv+0x2bc>)
    31fc:	492e      	ldr	r1, [pc, #184]	; (32b8 <bt_recv+0x2c0>)
    31fe:	4839      	ldr	r0, [pc, #228]	; (32e4 <bt_recv+0x2ec>)
    3200:	e730      	b.n	3064 <bt_recv+0x6c>
	if (!evt->status) {
    3202:	782b      	ldrb	r3, [r5, #0]
    3204:	b99b      	cbnz	r3, 322e <bt_recv+0x236>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3206:	792a      	ldrb	r2, [r5, #4]
    3208:	78eb      	ldrb	r3, [r5, #3]
    320a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    320e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3212:	79aa      	ldrb	r2, [r5, #6]
    3214:	796b      	ldrb	r3, [r5, #5]
    3216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    321a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    321e:	79eb      	ldrb	r3, [r5, #7]
    3220:	7a2a      	ldrb	r2, [r5, #8]
    3222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3226:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    322a:	f000 fcb3 	bl	3b94 <notify_le_param_updated>
	bt_conn_unref(conn);
    322e:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    3230:	f001 f848 	bl	42c4 <bt_conn_unref>
    3234:	e704      	b.n	3040 <bt_recv+0x48>
    3236:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3238:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    323c:	4638      	mov	r0, r7
    323e:	f000 ffd3 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    3242:	4605      	mov	r5, r0
    3244:	b928      	cbnz	r0, 3252 <bt_recv+0x25a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3246:	4b19      	ldr	r3, [pc, #100]	; (32ac <bt_recv+0x2b4>)
    3248:	9302      	str	r3, [sp, #8]
    324a:	e88d 0088 	stmia.w	sp, {r3, r7}
    324e:	4b26      	ldr	r3, [pc, #152]	; (32e8 <bt_recv+0x2f0>)
    3250:	e7d3      	b.n	31fa <bt_recv+0x202>
	if (!evt->status) {
    3252:	7833      	ldrb	r3, [r6, #0]
    3254:	b923      	cbnz	r3, 3260 <bt_recv+0x268>
		memcpy(conn->le.features, evt->features,
    3256:	2208      	movs	r2, #8
    3258:	1cf1      	adds	r1, r6, #3
    325a:	3064      	adds	r0, #100	; 0x64
    325c:	f7fe fcce 	bl	1bfc <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    3260:	4e22      	ldr	r6, [pc, #136]	; (32ec <bt_recv+0x2f4>)
    3262:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    3266:	07d2      	lsls	r2, r2, #31
    3268:	d50c      	bpl.n	3284 <bt_recv+0x28c>
    326a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    326e:	07db      	lsls	r3, r3, #31
    3270:	d508      	bpl.n	3284 <bt_recv+0x28c>
		err = hci_le_set_phy(conn);
    3272:	4628      	mov	r0, r5
    3274:	f7ff fcba 	bl	2bec <hci_le_set_phy.isra.29>
		if (!err) {
    3278:	b920      	cbnz	r0, 3284 <bt_recv+0x28c>
    327a:	2180      	movs	r1, #128	; 0x80
    327c:	1d28      	adds	r0, r5, #4
    327e:	f7fe fe86 	bl	1f8e <atomic_or>
    3282:	e74c      	b.n	311e <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3284:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    3288:	069f      	lsls	r7, r3, #26
    328a:	f140 80a3 	bpl.w	33d4 <bt_recv+0x3dc>
    328e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3292:	069e      	lsls	r6, r3, #26
    3294:	f140 809e 	bpl.w	33d4 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    3298:	4628      	mov	r0, r5
    329a:	f7ff fcc7 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    329e:	2800      	cmp	r0, #0
    32a0:	f040 8098 	bne.w	33d4 <bt_recv+0x3dc>
    32a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    32a8:	e7e8      	b.n	327c <bt_recv+0x284>
    32aa:	bf00      	nop
    32ac:	00014645 	.word	0x00014645
    32b0:	00014baa 	.word	0x00014baa
    32b4:	00015394 	.word	0x00015394
    32b8:	000153e3 	.word	0x000153e3
    32bc:	000150c4 	.word	0x000150c4
    32c0:	000150f8 	.word	0x000150f8
    32c4:	00014c81 	.word	0x00014c81
    32c8:	00015223 	.word	0x00015223
    32cc:	00014bcc 	.word	0x00014bcc
    32d0:	0001512a 	.word	0x0001512a
    32d4:	20003ad8 	.word	0x20003ad8
    32d8:	00015160 	.word	0x00015160
    32dc:	00001f4d 	.word	0x00001f4d
    32e0:	00014c4a 	.word	0x00014c4a
    32e4:	00015164 	.word	0x00015164
    32e8:	00014bf6 	.word	0x00014bf6
    32ec:	20003a68 	.word	0x20003a68
    32f0:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32f2:	78d9      	ldrb	r1, [r3, #3]
    32f4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    32f6:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    32f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    32fc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3300:	7959      	ldrb	r1, [r3, #5]
    3302:	791a      	ldrb	r2, [r3, #4]
    3304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3308:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    330c:	799a      	ldrb	r2, [r3, #6]
    330e:	79d9      	ldrb	r1, [r3, #7]
    3310:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3314:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3318:	7a1a      	ldrb	r2, [r3, #8]
    331a:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    331c:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    331e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    3322:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3324:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    3328:	f000 ff5e 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    332c:	4680      	mov	r8, r0
    332e:	b970      	cbnz	r0, 334e <bt_recv+0x356>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3330:	4bbb      	ldr	r3, [pc, #748]	; (3620 <bt_recv+0x628>)
    3332:	9302      	str	r3, [sp, #8]
    3334:	e88d 0028 	stmia.w	sp, {r3, r5}
    3338:	4aba      	ldr	r2, [pc, #744]	; (3624 <bt_recv+0x62c>)
    333a:	4bbb      	ldr	r3, [pc, #748]	; (3628 <bt_recv+0x630>)
    333c:	49bb      	ldr	r1, [pc, #748]	; (362c <bt_recv+0x634>)
    333e:	48bc      	ldr	r0, [pc, #752]	; (3630 <bt_recv+0x638>)
    3340:	f7fd fe24 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    3344:	2102      	movs	r1, #2
    3346:	4628      	mov	r0, r5
    3348:	f7ff fd76 	bl	2e38 <le_conn_param_neg_reply>
    334c:	e678      	b.n	3040 <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    334e:	a90c      	add	r1, sp, #48	; 0x30
    3350:	f000 fc34 	bl	3bbc <le_param_req>
    3354:	b928      	cbnz	r0, 3362 <bt_recv+0x36a>
		err = le_conn_param_neg_reply(handle,
    3356:	211e      	movs	r1, #30
    3358:	4628      	mov	r0, r5
    335a:	f7ff fd6d 	bl	2e38 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    335e:	4640      	mov	r0, r8
    3360:	e766      	b.n	3230 <bt_recv+0x238>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3362:	210e      	movs	r1, #14
    3364:	f242 0020 	movw	r0, #8224	; 0x2020
    3368:	f7fe feb2 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    336c:	4606      	mov	r6, r0
    336e:	2800      	cmp	r0, #0
    3370:	d0f5      	beq.n	335e <bt_recv+0x366>
	cp = net_buf_add(buf, sizeof(*cp));
    3372:	210e      	movs	r1, #14
    3374:	3008      	adds	r0, #8
    3376:	f00f fb49 	bl	12a0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    337a:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    337c:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    337e:	2100      	movs	r1, #0
    3380:	f7fe fc68 	bl	1c54 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3384:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    3388:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    338a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    338e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3390:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    3394:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3396:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    339a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    339c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    339e:	4631      	mov	r1, r6
    33a0:	f242 0020 	movw	r0, #8224	; 0x2020
    33a4:	f7ff f844 	bl	2430 <bt_hci_cmd_send>
    33a8:	e7d9      	b.n	335e <bt_recv+0x366>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33aa:	68a3      	ldr	r3, [r4, #8]
    33ac:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    33ae:	4630      	mov	r0, r6
    33b0:	f000 ff1a 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    33b4:	4605      	mov	r5, r0
    33b6:	b928      	cbnz	r0, 33c4 <bt_recv+0x3cc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33b8:	4b99      	ldr	r3, [pc, #612]	; (3620 <bt_recv+0x628>)
    33ba:	9302      	str	r3, [sp, #8]
    33bc:	e88d 0048 	stmia.w	sp, {r3, r6}
    33c0:	4b9c      	ldr	r3, [pc, #624]	; (3634 <bt_recv+0x63c>)
    33c2:	e71a      	b.n	31fa <bt_recv+0x202>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33c4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    33c8:	3004      	adds	r0, #4
    33ca:	f7fe fdf1 	bl	1fb0 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    33ce:	05c0      	lsls	r0, r0, #23
    33d0:	f57f aea5 	bpl.w	311e <bt_recv+0x126>
	update_conn_param(conn);
    33d4:	4628      	mov	r0, r5
    33d6:	f7fe fdfd 	bl	1fd4 <update_conn_param>
    33da:	e6a0      	b.n	311e <bt_recv+0x126>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33dc:	68a3      	ldr	r3, [r4, #8]
    33de:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    33e2:	4630      	mov	r0, r6
    33e4:	f000 ff00 	bl	41e8 <bt_conn_lookup_handle>
	if (!conn) {
    33e8:	4605      	mov	r5, r0
    33ea:	b928      	cbnz	r0, 33f8 <bt_recv+0x400>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    33ec:	4b8c      	ldr	r3, [pc, #560]	; (3620 <bt_recv+0x628>)
    33ee:	9302      	str	r3, [sp, #8]
    33f0:	e88d 0048 	stmia.w	sp, {r3, r6}
    33f4:	4b90      	ldr	r3, [pc, #576]	; (3638 <bt_recv+0x640>)
    33f6:	e700      	b.n	31fa <bt_recv+0x202>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    33f8:	1d06      	adds	r6, r0, #4
    33fa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    33fe:	4630      	mov	r0, r6
    3400:	f7fe fdd6 	bl	1fb0 <atomic_and>
    3404:	0601      	lsls	r1, r0, #24
    3406:	f57f ae8a 	bpl.w	311e <bt_recv+0x126>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    340a:	4b8c      	ldr	r3, [pc, #560]	; (363c <bt_recv+0x644>)
    340c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3410:	069a      	lsls	r2, r3, #26
    3412:	d5df      	bpl.n	33d4 <bt_recv+0x3dc>
    3414:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3418:	069b      	lsls	r3, r3, #26
    341a:	d5db      	bpl.n	33d4 <bt_recv+0x3dc>
		err = hci_le_set_data_len(conn);
    341c:	4628      	mov	r0, r5
    341e:	f7ff fc05 	bl	2c2c <hci_le_set_data_len.isra.30>
		if (!err) {
    3422:	2800      	cmp	r0, #0
    3424:	d1d6      	bne.n	33d4 <bt_recv+0x3dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3426:	f44f 7180 	mov.w	r1, #256	; 0x100
    342a:	4630      	mov	r0, r6
    342c:	e727      	b.n	327e <bt_recv+0x286>
    342e:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3430:	4883      	ldr	r0, [pc, #524]	; (3640 <bt_recv+0x648>)
    3432:	f06f 0120 	mvn.w	r1, #32
    3436:	f7fe fdbb 	bl	1fb0 <atomic_and>
	if (!evt->status) {
    343a:	7833      	ldrb	r3, [r6, #0]
    343c:	b943      	cbnz	r3, 3450 <bt_recv+0x458>
		memcpy(pub_key, evt->key, 64);
    343e:	1c71      	adds	r1, r6, #1
    3440:	2240      	movs	r2, #64	; 0x40
    3442:	4880      	ldr	r0, [pc, #512]	; (3644 <bt_recv+0x64c>)
    3444:	f7fe fbda 	bl	1bfc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3448:	2110      	movs	r1, #16
    344a:	487d      	ldr	r0, [pc, #500]	; (3640 <bt_recv+0x648>)
    344c:	f7fe fd9f 	bl	1f8e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3450:	4b7d      	ldr	r3, [pc, #500]	; (3648 <bt_recv+0x650>)
    3452:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3454:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3456:	2d00      	cmp	r5, #0
    3458:	f43f adf2 	beq.w	3040 <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    345c:	7832      	ldrb	r2, [r6, #0]
    345e:	682b      	ldr	r3, [r5, #0]
    3460:	2a00      	cmp	r2, #0
    3462:	bf0c      	ite	eq
    3464:	4638      	moveq	r0, r7
    3466:	2000      	movne	r0, #0
    3468:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    346a:	686d      	ldr	r5, [r5, #4]
    346c:	e7f3      	b.n	3456 <bt_recv+0x45e>
	if (dh_key_cb) {
    346e:	4d77      	ldr	r5, [pc, #476]	; (364c <bt_recv+0x654>)
    3470:	68a0      	ldr	r0, [r4, #8]
    3472:	682a      	ldr	r2, [r5, #0]
    3474:	2a00      	cmp	r2, #0
    3476:	f43f ade3 	beq.w	3040 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    347a:	7803      	ldrb	r3, [r0, #0]
    347c:	b923      	cbnz	r3, 3488 <bt_recv+0x490>
    347e:	3001      	adds	r0, #1
    3480:	4790      	blx	r2
		dh_key_cb = NULL;
    3482:	2300      	movs	r3, #0
    3484:	602b      	str	r3, [r5, #0]
    3486:	e5db      	b.n	3040 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3488:	2000      	movs	r0, #0
    348a:	e7f9      	b.n	3480 <bt_recv+0x488>
	u8_t num_reports = net_buf_pull_u8(buf);
    348c:	4628      	mov	r0, r5
    348e:	f00f faf3 	bl	12a78 <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3492:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 3640 <bt_recv+0x648>
	u8_t num_reports = net_buf_pull_u8(buf);
    3496:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    3498:	9b06      	ldr	r3, [sp, #24]
    349a:	2b00      	cmp	r3, #0
    349c:	f43f add0 	beq.w	3040 <bt_recv+0x48>
		info = (void *)buf->data;
    34a0:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    34a2:	2109      	movs	r1, #9
    34a4:	4628      	mov	r0, r5
    34a6:	f00f fadf 	bl	12a68 <net_buf_simple_pull>
		rssi = info->data[info->length];
    34aa:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34ac:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    34ae:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    34b0:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    34b2:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34b6:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    34ba:	3b02      	subs	r3, #2
    34bc:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    34be:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    34c0:	f200 8099 	bhi.w	35f6 <bt_recv+0x5fe>
			bt_addr_le_copy(&id_addr, &info->addr);
    34c4:	f7fe fd60 	bl	1f88 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    34c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    34cc:	3b02      	subs	r3, #2
    34ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    34d2:	4b5f      	ldr	r3, [pc, #380]	; (3650 <bt_recv+0x658>)
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	b1bb      	cbz	r3, 3508 <bt_recv+0x510>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    34d8:	4628      	mov	r0, r5
    34da:	f00f fadd 	bl	12a98 <net_buf_simple_headroom>
	state->len = buf->len;
    34de:	89a3      	ldrh	r3, [r4, #12]
    34e0:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    34e2:	7a33      	ldrb	r3, [r6, #8]
    34e4:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    34e6:	4b5a      	ldr	r3, [pc, #360]	; (3650 <bt_recv+0x658>)
    34e8:	7832      	ldrb	r2, [r6, #0]
    34ea:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    34ec:	4682      	mov	sl, r0
    34ee:	461f      	mov	r7, r3
    34f0:	fa4f f18b 	sxtb.w	r1, fp
    34f4:	462b      	mov	r3, r5
    34f6:	a80c      	add	r0, sp, #48	; 0x30
    34f8:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    34fa:	6923      	ldr	r3, [r4, #16]
    34fc:	fa13 f38a 	uxtah	r3, r3, sl
    3500:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3502:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3506:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3508:	2109      	movs	r1, #9
    350a:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    350c:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    350e:	f7fe fdd1 	bl	20b4 <atomic_test_bit>
    3512:	4682      	mov	sl, r0
    3514:	2800      	cmp	r0, #0
    3516:	d164      	bne.n	35e2 <bt_recv+0x5ea>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3518:	2a01      	cmp	r2, #1
    351a:	d862      	bhi.n	35e2 <bt_recv+0x5ea>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    351c:	2101      	movs	r1, #1
    351e:	a80c      	add	r0, sp, #48	; 0x30
    3520:	f000 feae 	bl	4280 <bt_conn_lookup_state_le>
	if (!conn) {
    3524:	4607      	mov	r7, r0
    3526:	2800      	cmp	r0, #0
    3528:	d05b      	beq.n	35e2 <bt_recv+0x5ea>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    352a:	2108      	movs	r1, #8
    352c:	4648      	mov	r0, r9
    352e:	f7fe fdc1 	bl	20b4 <atomic_test_bit>
    3532:	2800      	cmp	r0, #0
    3534:	d162      	bne.n	35fc <bt_recv+0x604>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3536:	2102      	movs	r1, #2
    3538:	4648      	mov	r0, r9
    353a:	f7fe fdbb 	bl	20b4 <atomic_test_bit>
    353e:	b110      	cbz	r0, 3546 <bt_recv+0x54e>
			set_random_address(&bt_dev.id_addr.a);
    3540:	4844      	ldr	r0, [pc, #272]	; (3654 <bt_recv+0x65c>)
    3542:	f7fe fe69 	bl	2218 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3546:	493d      	ldr	r1, [pc, #244]	; (363c <bt_recv+0x644>)
    3548:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    354c:	f107 0a52 	add.w	sl, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3550:	f7fe fd1a 	bl	1f88 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3554:	4641      	mov	r1, r8
    3556:	4650      	mov	r0, sl
    3558:	f7fe fd16 	bl	1f88 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    355c:	2119      	movs	r1, #25
    355e:	f242 000d 	movw	r0, #8205	; 0x200d
    3562:	f7fe fdb5 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    3566:	4683      	mov	fp, r0
    3568:	2800      	cmp	r0, #0
    356a:	d04c      	beq.n	3606 <bt_recv+0x60e>
	cp = net_buf_add(buf, sizeof(*cp));
    356c:	2119      	movs	r1, #25
    356e:	3008      	adds	r0, #8
    3570:	f00f fa4c 	bl	12a0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3574:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3576:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3578:	2100      	movs	r1, #0
    357a:	f7fe fb6b 	bl	1c54 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    357e:	2200      	movs	r2, #0
    3580:	2360      	movs	r3, #96	; 0x60
    3582:	f888 3000 	strb.w	r3, [r8]
    3586:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    358a:	f888 3002 	strb.w	r3, [r8, #2]
    358e:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3592:	4651      	mov	r1, sl
    3594:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3598:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    359a:	f7fe fcf5 	bl	1f88 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    359e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    35a2:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    35a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    35aa:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    35ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    35b2:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    35b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    35ba:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    35be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    35c2:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    35c6:	9a07      	ldr	r2, [sp, #28]
    35c8:	4659      	mov	r1, fp
    35ca:	f242 000d 	movw	r0, #8205	; 0x200d
    35ce:	f7fe fdaf 	bl	2130 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    35d2:	b9c0      	cbnz	r0, 3606 <bt_recv+0x60e>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    35d4:	4638      	mov	r0, r7
    35d6:	2102      	movs	r1, #2
    35d8:	f000 fd2a 	bl	4030 <bt_conn_set_state>
	bt_conn_unref(conn);
    35dc:	4638      	mov	r0, r7
    35de:	f000 fe71 	bl	42c4 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    35e2:	7a31      	ldrb	r1, [r6, #8]
    35e4:	4628      	mov	r0, r5
    35e6:	3101      	adds	r1, #1
    35e8:	f00f fa3e 	bl	12a68 <net_buf_simple_pull>
    35ec:	9b06      	ldr	r3, [sp, #24]
    35ee:	3b01      	subs	r3, #1
    35f0:	b2db      	uxtb	r3, r3
    35f2:	9306      	str	r3, [sp, #24]
    35f4:	e750      	b.n	3498 <bt_recv+0x4a0>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    35f6:	f7fe fcc7 	bl	1f88 <bt_addr_le_copy>
    35fa:	e76a      	b.n	34d2 <bt_recv+0x4da>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    35fc:	4650      	mov	r0, sl
    35fe:	f7fe fdd5 	bl	21ac <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3602:	2800      	cmp	r0, #0
    3604:	d097      	beq.n	3536 <bt_recv+0x53e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3606:	231f      	movs	r3, #31
    3608:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    360a:	2100      	movs	r1, #0
    360c:	4638      	mov	r0, r7
    360e:	f000 fd0f 	bl	4030 <bt_conn_set_state>
	bt_conn_unref(conn);
    3612:	4638      	mov	r0, r7
    3614:	f000 fe56 	bl	42c4 <bt_conn_unref>
	bt_le_scan_update(false);
    3618:	2000      	movs	r0, #0
    361a:	f7fe ff85 	bl	2528 <bt_le_scan_update>
    361e:	e7e0      	b.n	35e2 <bt_recv+0x5ea>
    3620:	00014645 	.word	0x00014645
    3624:	00015394 	.word	0x00015394
    3628:	00014c38 	.word	0x00014c38
    362c:	000153e3 	.word	0x000153e3
    3630:	00015164 	.word	0x00015164
    3634:	00014c0e 	.word	0x00014c0e
    3638:	00014c21 	.word	0x00014c21
    363c:	20003a68 	.word	0x20003a68
    3640:	20003ad8 	.word	0x20003ad8
    3644:	20000290 	.word	0x20000290
    3648:	200002d0 	.word	0x200002d0
    364c:	2000028c 	.word	0x2000028c
    3650:	200002d8 	.word	0x200002d8
    3654:	20003a69 	.word	0x20003a69
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3658:	89a5      	ldrh	r5, [r4, #12]
    365a:	68a0      	ldr	r0, [r4, #8]
    365c:	4629      	mov	r1, r5
    365e:	f7fe fb1d 	bl	1c9c <bt_hex>
    3662:	4b1d      	ldr	r3, [pc, #116]	; (36d8 <bt_recv+0x6e0>)
    3664:	9304      	str	r3, [sp, #16]
    3666:	9003      	str	r0, [sp, #12]
    3668:	e88d 0048 	stmia.w	sp, {r3, r6}
    366c:	4a1b      	ldr	r2, [pc, #108]	; (36dc <bt_recv+0x6e4>)
    366e:	4b1c      	ldr	r3, [pc, #112]	; (36e0 <bt_recv+0x6e8>)
    3670:	491c      	ldr	r1, [pc, #112]	; (36e4 <bt_recv+0x6ec>)
    3672:	481d      	ldr	r0, [pc, #116]	; (36e8 <bt_recv+0x6f0>)
    3674:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3676:	f7fd fc89 	bl	f8c <printk>
    367a:	e4e1      	b.n	3040 <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    367c:	4a16      	ldr	r2, [pc, #88]	; (36d8 <bt_recv+0x6e0>)
    367e:	9202      	str	r2, [sp, #8]
    3680:	e88d 000c 	stmia.w	sp, {r2, r3}
    3684:	4917      	ldr	r1, [pc, #92]	; (36e4 <bt_recv+0x6ec>)
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <bt_recv+0x6f4>)
    3688:	4a19      	ldr	r2, [pc, #100]	; (36f0 <bt_recv+0x6f8>)
    368a:	481a      	ldr	r0, [pc, #104]	; (36f4 <bt_recv+0x6fc>)
    368c:	f7fd fc7e 	bl	f8c <printk>
		net_buf_unref(buf);
    3690:	4620      	mov	r0, r4
    3692:	f00f f989 	bl	129a8 <net_buf_unref>
		return -EINVAL;
    3696:	f06f 0015 	mvn.w	r0, #21
    369a:	e4f2      	b.n	3082 <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    369c:	f104 0508 	add.w	r5, r4, #8
    36a0:	2102      	movs	r1, #2
    36a2:	4628      	mov	r0, r5
    36a4:	f00f f9e0 	bl	12a68 <net_buf_simple_pull>
	switch (hdr->evt) {
    36a8:	7836      	ldrb	r6, [r6, #0]
    36aa:	2e05      	cmp	r6, #5
    36ac:	f43f ad05 	beq.w	30ba <bt_recv+0xc2>
    36b0:	2e3e      	cmp	r6, #62	; 0x3e
    36b2:	f43f ad46 	beq.w	3142 <bt_recv+0x14a>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    36b6:	89a5      	ldrh	r5, [r4, #12]
    36b8:	68a0      	ldr	r0, [r4, #8]
    36ba:	4629      	mov	r1, r5
    36bc:	f7fe faee 	bl	1c9c <bt_hex>
    36c0:	4b05      	ldr	r3, [pc, #20]	; (36d8 <bt_recv+0x6e0>)
    36c2:	9304      	str	r3, [sp, #16]
    36c4:	9003      	str	r0, [sp, #12]
    36c6:	e88d 0048 	stmia.w	sp, {r3, r6}
    36ca:	9502      	str	r5, [sp, #8]
    36cc:	4b0a      	ldr	r3, [pc, #40]	; (36f8 <bt_recv+0x700>)
    36ce:	4a03      	ldr	r2, [pc, #12]	; (36dc <bt_recv+0x6e4>)
    36d0:	4904      	ldr	r1, [pc, #16]	; (36e4 <bt_recv+0x6ec>)
    36d2:	480a      	ldr	r0, [pc, #40]	; (36fc <bt_recv+0x704>)
    36d4:	e7cf      	b.n	3676 <bt_recv+0x67e>
    36d6:	bf00      	nop
    36d8:	00014645 	.word	0x00014645
    36dc:	000153dc 	.word	0x000153dc
    36e0:	00014c6f 	.word	0x00014c6f
    36e4:	000153e3 	.word	0x000153e3
    36e8:	00015198 	.word	0x00015198
    36ec:	00014d00 	.word	0x00014d00
    36f0:	00015394 	.word	0x00015394
    36f4:	000151ff 	.word	0x000151ff
    36f8:	00014c81 	.word	0x00014c81
    36fc:	000151cd 	.word	0x000151cd

00003700 <bt_recv_prio>:
{
    3700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3704:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3706:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3708:	2b01      	cmp	r3, #1
{
    370a:	b087      	sub	sp, #28
    370c:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    370e:	d00e      	beq.n	372e <bt_recv_prio+0x2e>
    3710:	4b65      	ldr	r3, [pc, #404]	; (38a8 <bt_recv_prio+0x1a8>)
    3712:	9301      	str	r3, [sp, #4]
    3714:	9300      	str	r3, [sp, #0]
    3716:	4a65      	ldr	r2, [pc, #404]	; (38ac <bt_recv_prio+0x1ac>)
    3718:	4b65      	ldr	r3, [pc, #404]	; (38b0 <bt_recv_prio+0x1b0>)
    371a:	4966      	ldr	r1, [pc, #408]	; (38b4 <bt_recv_prio+0x1b4>)
    371c:	4866      	ldr	r0, [pc, #408]	; (38b8 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    371e:	f7fd fc35 	bl	f8c <printk>
    3722:	4040      	eors	r0, r0
    3724:	f380 8811 	msr	BASEPRI, r0
    3728:	f04f 0004 	mov.w	r0, #4
    372c:	df02      	svc	2
    372e:	8982      	ldrh	r2, [r0, #12]
    3730:	2a01      	cmp	r2, #1
    3732:	d807      	bhi.n	3744 <bt_recv_prio+0x44>
    3734:	4b5c      	ldr	r3, [pc, #368]	; (38a8 <bt_recv_prio+0x1a8>)
    3736:	9301      	str	r3, [sp, #4]
    3738:	9300      	str	r3, [sp, #0]
    373a:	4a5c      	ldr	r2, [pc, #368]	; (38ac <bt_recv_prio+0x1ac>)
    373c:	4b5c      	ldr	r3, [pc, #368]	; (38b0 <bt_recv_prio+0x1b0>)
    373e:	495d      	ldr	r1, [pc, #372]	; (38b4 <bt_recv_prio+0x1b4>)
    3740:	485e      	ldr	r0, [pc, #376]	; (38bc <bt_recv_prio+0x1bc>)
    3742:	e7ec      	b.n	371e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3744:	7832      	ldrb	r2, [r6, #0]
    3746:	2a13      	cmp	r2, #19
    3748:	f200 80a5 	bhi.w	3896 <bt_recv_prio+0x196>
    374c:	4093      	lsls	r3, r2
    374e:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3752:	f000 80a0 	beq.w	3896 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    3756:	f100 0508 	add.w	r5, r0, #8
    375a:	2102      	movs	r1, #2
    375c:	4628      	mov	r0, r5
    375e:	f00f f983 	bl	12a68 <net_buf_simple_pull>
	switch (hdr->evt) {
    3762:	7833      	ldrb	r3, [r6, #0]
    3764:	2b0f      	cmp	r3, #15
    3766:	d01d      	beq.n	37a4 <bt_recv_prio+0xa4>
    3768:	2b13      	cmp	r3, #19
    376a:	d02b      	beq.n	37c4 <bt_recv_prio+0xc4>
    376c:	2b0e      	cmp	r3, #14
    376e:	f040 8087 	bne.w	3880 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3772:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3774:	2103      	movs	r1, #3
    3776:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3778:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    377c:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    377e:	f00f f973 	bl	12a68 <net_buf_simple_pull>
	status = buf->data[0];
    3782:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3784:	4622      	mov	r2, r4
    3786:	7819      	ldrb	r1, [r3, #0]
    3788:	4638      	mov	r0, r7
    378a:	f7fe fc31 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    378e:	b116      	cbz	r6, 3796 <bt_recv_prio+0x96>
    3790:	484b      	ldr	r0, [pc, #300]	; (38c0 <bt_recv_prio+0x1c0>)
    3792:	f010 f9a0 	bl	13ad6 <_impl_k_sem_give>
	net_buf_unref(buf);
    3796:	4620      	mov	r0, r4
    3798:	f00f f906 	bl	129a8 <net_buf_unref>
}
    379c:	2000      	movs	r0, #0
    379e:	b007      	add	sp, #28
    37a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    37a4:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    37a6:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    37aa:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    37ac:	2104      	movs	r1, #4
    37ae:	4628      	mov	r0, r5
    37b0:	f00f f95a 	bl	12a68 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    37b4:	4622      	mov	r2, r4
    37b6:	7831      	ldrb	r1, [r6, #0]
    37b8:	4640      	mov	r0, r8
    37ba:	f7fe fc19 	bl	1ff0 <hci_cmd_done>
	if (ncmd) {
    37be:	2f00      	cmp	r7, #0
    37c0:	d0e9      	beq.n	3796 <bt_recv_prio+0x96>
    37c2:	e7e5      	b.n	3790 <bt_recv_prio+0x90>
    37c4:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    37c6:	4f38      	ldr	r7, [pc, #224]	; (38a8 <bt_recv_prio+0x1a8>)
    37c8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 38d4 <bt_recv_prio+0x1d4>
    37cc:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 38ac <bt_recv_prio+0x1ac>
    37d0:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    37d2:	2600      	movs	r6, #0
    37d4:	9b04      	ldr	r3, [sp, #16]
    37d6:	781b      	ldrb	r3, [r3, #0]
    37d8:	429e      	cmp	r6, r3
    37da:	dadc      	bge.n	3796 <bt_recv_prio+0x96>
    37dc:	9b04      	ldr	r3, [sp, #16]
    37de:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    37e2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    37e6:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    37ea:	f04f 0120 	mov.w	r1, #32
    37ee:	f3ef 8b11 	mrs	fp, BASEPRI
    37f2:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    37f6:	4610      	mov	r0, r2
    37f8:	9205      	str	r2, [sp, #20]
    37fa:	f000 fcf5 	bl	41e8 <bt_conn_lookup_handle>
		if (!conn) {
    37fe:	9a05      	ldr	r2, [sp, #20]
    3800:	4605      	mov	r5, r0
    3802:	b960      	cbnz	r0, 381e <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    3804:	9201      	str	r2, [sp, #4]
    3806:	9702      	str	r7, [sp, #8]
    3808:	9700      	str	r7, [sp, #0]
    380a:	464b      	mov	r3, r9
    380c:	4652      	mov	r2, sl
    380e:	4929      	ldr	r1, [pc, #164]	; (38b4 <bt_recv_prio+0x1b4>)
    3810:	482c      	ldr	r0, [pc, #176]	; (38c4 <bt_recv_prio+0x1c4>)
    3812:	f7fd fbbb 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3816:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    381a:	3601      	adds	r6, #1
    381c:	e7da      	b.n	37d4 <bt_recv_prio+0xd4>
    381e:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    3822:	f100 0b18 	add.w	fp, r0, #24
		while (count--) {
    3826:	f1b8 0f00 	cmp.w	r8, #0
    382a:	d01c      	beq.n	3866 <bt_recv_prio+0x166>
	__asm__ volatile(
    382c:	f04f 0220 	mov.w	r2, #32
    3830:	f3ef 8e11 	mrs	lr, BASEPRI
    3834:	f382 8811 	msr	BASEPRI, r2
    3838:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    383a:	b129      	cbz	r1, 3848 <bt_recv_prio+0x148>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    383c:	696a      	ldr	r2, [r5, #20]
	return node->next;
    383e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3840:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3842:	4291      	cmp	r1, r2
	list->tail = node;
    3844:	bf08      	it	eq
    3846:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3848:	f38e 8811 	msr	BASEPRI, lr
    384c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    3850:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    3854:	b959      	cbnz	r1, 386e <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    3856:	9701      	str	r7, [sp, #4]
    3858:	9700      	str	r7, [sp, #0]
    385a:	464b      	mov	r3, r9
    385c:	4652      	mov	r2, sl
    385e:	4915      	ldr	r1, [pc, #84]	; (38b4 <bt_recv_prio+0x1b4>)
    3860:	4819      	ldr	r0, [pc, #100]	; (38c8 <bt_recv_prio+0x1c8>)
    3862:	f7fd fb93 	bl	f8c <printk>
		bt_conn_unref(conn);
    3866:	4628      	mov	r0, r5
    3868:	f000 fd2c 	bl	42c4 <bt_conn_unref>
    386c:	e7d5      	b.n	381a <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    386e:	4658      	mov	r0, fp
    3870:	f00f fe6c 	bl	1354c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3874:	4628      	mov	r0, r5
    3876:	f000 f989 	bl	3b8c <bt_conn_get_pkts>
    387a:	f010 f92c 	bl	13ad6 <_impl_k_sem_give>
    387e:	e7d2      	b.n	3826 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    3880:	4620      	mov	r0, r4
    3882:	f00f f891 	bl	129a8 <net_buf_unref>
		BT_ASSERT(0);
    3886:	4b08      	ldr	r3, [pc, #32]	; (38a8 <bt_recv_prio+0x1a8>)
    3888:	9301      	str	r3, [sp, #4]
    388a:	9300      	str	r3, [sp, #0]
    388c:	4a07      	ldr	r2, [pc, #28]	; (38ac <bt_recv_prio+0x1ac>)
    388e:	4b08      	ldr	r3, [pc, #32]	; (38b0 <bt_recv_prio+0x1b0>)
    3890:	4908      	ldr	r1, [pc, #32]	; (38b4 <bt_recv_prio+0x1b4>)
    3892:	480e      	ldr	r0, [pc, #56]	; (38cc <bt_recv_prio+0x1cc>)
    3894:	e743      	b.n	371e <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <bt_recv_prio+0x1a8>)
    3898:	9301      	str	r3, [sp, #4]
    389a:	9300      	str	r3, [sp, #0]
    389c:	4a03      	ldr	r2, [pc, #12]	; (38ac <bt_recv_prio+0x1ac>)
    389e:	4b04      	ldr	r3, [pc, #16]	; (38b0 <bt_recv_prio+0x1b0>)
    38a0:	4904      	ldr	r1, [pc, #16]	; (38b4 <bt_recv_prio+0x1b4>)
    38a2:	480b      	ldr	r0, [pc, #44]	; (38d0 <bt_recv_prio+0x1d0>)
    38a4:	e73b      	b.n	371e <bt_recv_prio+0x1e>
    38a6:	bf00      	nop
    38a8:	00014645 	.word	0x00014645
    38ac:	00015394 	.word	0x00015394
    38b0:	00014d08 	.word	0x00014d08
    38b4:	000153e3 	.word	0x000153e3
    38b8:	00015262 	.word	0x00015262
    38bc:	000152a6 	.word	0x000152a6
    38c0:	20003b10 	.word	0x20003b10
    38c4:	000152e0 	.word	0x000152e0
    38c8:	0001530c 	.word	0x0001530c
    38cc:	00015333 	.word	0x00015333
    38d0:	00015356 	.word	0x00015356
    38d4:	00014bb2 	.word	0x00014bb2

000038d8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    38d8:	4a08      	ldr	r2, [pc, #32]	; (38fc <bt_hci_driver_register+0x24>)
    38da:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    38de:	b93b      	cbnz	r3, 38f0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    38e0:	68c1      	ldr	r1, [r0, #12]
    38e2:	b141      	cbz	r1, 38f6 <bt_hci_driver_register+0x1e>
    38e4:	6901      	ldr	r1, [r0, #16]
    38e6:	b131      	cbz	r1, 38f6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    38e8:	f8c2 00d4 	str.w	r0, [r2, #212]	; 0xd4
	return 0;
    38ec:	4618      	mov	r0, r3
    38ee:	4770      	bx	lr
		return -EALREADY;
    38f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    38f4:	4770      	bx	lr
		return -EINVAL;
    38f6:	f06f 0015 	mvn.w	r0, #21
}
    38fa:	4770      	bx	lr
    38fc:	20003a68 	.word	0x20003a68

00003900 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3900:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3902:	4d2a      	ldr	r5, [pc, #168]	; (39ac <bt_enable+0xac>)
    3904:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    3908:	b086      	sub	sp, #24
    390a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    390c:	b96b      	cbnz	r3, 392a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    390e:	4b28      	ldr	r3, [pc, #160]	; (39b0 <bt_enable+0xb0>)
    3910:	9301      	str	r3, [sp, #4]
    3912:	9300      	str	r3, [sp, #0]
    3914:	4a27      	ldr	r2, [pc, #156]	; (39b4 <bt_enable+0xb4>)
    3916:	4b28      	ldr	r3, [pc, #160]	; (39b8 <bt_enable+0xb8>)
    3918:	4928      	ldr	r1, [pc, #160]	; (39bc <bt_enable+0xbc>)
    391a:	4829      	ldr	r0, [pc, #164]	; (39c0 <bt_enable+0xc0>)
    391c:	f7fd fb36 	bl	f8c <printk>
		return -ENODEV;
    3920:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3924:	4620      	mov	r0, r4
    3926:	b006      	add	sp, #24
    3928:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    392a:	2101      	movs	r1, #1
    392c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3930:	f7fe fb2d 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3934:	f010 0001 	ands.w	r0, r0, #1
    3938:	d134      	bne.n	39a4 <bt_enable+0xa4>
	ready_cb = cb;
    393a:	4b22      	ldr	r3, [pc, #136]	; (39c4 <bt_enable+0xc4>)

    393c:	4922      	ldr	r1, [pc, #136]	; (39c8 <bt_enable+0xc8>)
    393e:	601e      	str	r6, [r3, #0]
    3940:	f06f 0308 	mvn.w	r3, #8
    3944:	9005      	str	r0, [sp, #20]
    3946:	9004      	str	r0, [sp, #16]
    3948:	9303      	str	r3, [sp, #12]
    394a:	9002      	str	r0, [sp, #8]
    394c:	9001      	str	r0, [sp, #4]
    394e:	9000      	str	r0, [sp, #0]
    3950:	4b1e      	ldr	r3, [pc, #120]	; (39cc <bt_enable+0xcc>)
    3952:	481f      	ldr	r0, [pc, #124]	; (39d0 <bt_enable+0xd0>)
    3954:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3958:	f010 faba 	bl	13ed0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    395c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    3960:	68db      	ldr	r3, [r3, #12]
    3962:	4798      	blx	r3
	if (err) {
    3964:	4604      	mov	r4, r0
    3966:	b150      	cbz	r0, 397e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    3968:	4b11      	ldr	r3, [pc, #68]	; (39b0 <bt_enable+0xb0>)
    396a:	9302      	str	r3, [sp, #8]
    396c:	e88d 0018 	stmia.w	sp, {r3, r4}
    3970:	4a10      	ldr	r2, [pc, #64]	; (39b4 <bt_enable+0xb4>)
    3972:	4b11      	ldr	r3, [pc, #68]	; (39b8 <bt_enable+0xb8>)
    3974:	4911      	ldr	r1, [pc, #68]	; (39bc <bt_enable+0xbc>)
    3976:	4817      	ldr	r0, [pc, #92]	; (39d4 <bt_enable+0xd4>)
    3978:	f7fd fb08 	bl	f8c <printk>
		return err;
    397c:	e7d2      	b.n	3924 <bt_enable+0x24>
	if (!cb) {
    397e:	b926      	cbnz	r6, 398a <bt_enable+0x8a>
}
    3980:	b006      	add	sp, #24
    3982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3986:	f7fe be01 	b.w	258c <bt_init>
    398a:	2101      	movs	r1, #1
    398c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3990:	f7fe fafd 	bl	1f8e <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3994:	07c3      	lsls	r3, r0, #31
    3996:	d4c5      	bmi.n	3924 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    3998:	f105 0164 	add.w	r1, r5, #100	; 0x64
    399c:	480e      	ldr	r0, [pc, #56]	; (39d8 <bt_enable+0xd8>)
    399e:	f00f fdd5 	bl	1354c <k_queue_append>
    39a2:	e7bf      	b.n	3924 <bt_enable+0x24>
		return -EALREADY;
    39a4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    39a8:	e7bc      	b.n	3924 <bt_enable+0x24>
    39aa:	bf00      	nop
    39ac:	20003a68 	.word	0x20003a68
    39b0:	00014645 	.word	0x00014645
    39b4:	00015394 	.word	0x00015394
    39b8:	00014d15 	.word	0x00014d15
    39bc:	000153e3 	.word	0x000153e3
    39c0:	00014dc8 	.word	0x00014dc8
    39c4:	200002d4 	.word	0x200002d4
    39c8:	20001a10 	.word	0x20001a10
    39cc:	00002e6d 	.word	0x00002e6d
    39d0:	200002dc 	.word	0x200002dc
    39d4:	00014df1 	.word	0x00014df1
    39d8:	20001990 	.word	0x20001990

000039dc <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    39dc:	2000      	movs	r0, #0
    39de:	4770      	bx	lr

000039e0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    39e0:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    39e2:	7803      	ldrb	r3, [r0, #0]
    39e4:	2b01      	cmp	r3, #1
{
    39e6:	4605      	mov	r5, r0
    39e8:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    39ea:	d810      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    39ec:	7843      	ldrb	r3, [r0, #1]
    39ee:	2b01      	cmp	r3, #1
    39f0:	d80d      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    39f2:	8841      	ldrh	r1, [r0, #2]
    39f4:	1f0b      	subs	r3, r1, #4
    39f6:	b29b      	uxth	r3, r3
    39f8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    39fc:	4283      	cmp	r3, r0
    39fe:	d806      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3a00:	88aa      	ldrh	r2, [r5, #4]
    3a02:	1f13      	subs	r3, r2, #4
    3a04:	b29b      	uxth	r3, r3
    3a06:	4283      	cmp	r3, r0
    3a08:	d801      	bhi.n	3a0e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3a0a:	4291      	cmp	r1, r2
    3a0c:	d22b      	bcs.n	3a66 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3a0e:	f06f 0415 	mvn.w	r4, #21
    3a12:	e00e      	b.n	3a32 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3a14:	2108      	movs	r1, #8
    3a16:	4819      	ldr	r0, [pc, #100]	; (3a7c <bt_le_scan_start+0x9c>)
    3a18:	f7fe fb4c 	bl	20b4 <atomic_test_bit>
    3a1c:	b158      	cbz	r0, 3a36 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3a1e:	4610      	mov	r0, r2
    3a20:	f7fe fbc4 	bl	21ac <set_le_scan_enable>
		if (err) {
    3a24:	4604      	mov	r4, r0
    3a26:	b130      	cbz	r0, 3a36 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a28:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a2c:	4813      	ldr	r0, [pc, #76]	; (3a7c <bt_le_scan_start+0x9c>)
    3a2e:	f7fe fabf 	bl	1fb0 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3a32:	4620      	mov	r0, r4
    3a34:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3a36:	786b      	ldrb	r3, [r5, #1]
    3a38:	b17b      	cbz	r3, 3a5a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3a3e:	480f      	ldr	r0, [pc, #60]	; (3a7c <bt_le_scan_start+0x9c>)
    3a40:	f7fe faa5 	bl	1f8e <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3a44:	88aa      	ldrh	r2, [r5, #4]
    3a46:	8869      	ldrh	r1, [r5, #2]
    3a48:	7828      	ldrb	r0, [r5, #0]
    3a4a:	f7fe fd29 	bl	24a0 <start_le_scan>
	if (err) {
    3a4e:	4604      	mov	r4, r0
    3a50:	2800      	cmp	r0, #0
    3a52:	d1e9      	bne.n	3a28 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3a54:	4b0a      	ldr	r3, [pc, #40]	; (3a80 <bt_le_scan_start+0xa0>)
    3a56:	601e      	str	r6, [r3, #0]
	return 0;
    3a58:	e7eb      	b.n	3a32 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a5a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3a5e:	4807      	ldr	r0, [pc, #28]	; (3a7c <bt_le_scan_start+0x9c>)
    3a60:	f7fe faa6 	bl	1fb0 <atomic_and>
    3a64:	e7ee      	b.n	3a44 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a66:	f44f 7100 	mov.w	r1, #512	; 0x200
    3a6a:	4804      	ldr	r0, [pc, #16]	; (3a7c <bt_le_scan_start+0x9c>)
    3a6c:	f7fe fa8f 	bl	1f8e <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a70:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3a74:	d0ce      	beq.n	3a14 <bt_le_scan_start+0x34>
		return -EALREADY;
    3a76:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3a7a:	e7da      	b.n	3a32 <bt_le_scan_start+0x52>
    3a7c:	20003ad8 	.word	0x20003ad8
    3a80:	200002d8 	.word	0x200002d8

00003a84 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3a84:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a86:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3a8a:	4807      	ldr	r0, [pc, #28]	; (3aa8 <bt_le_scan_stop+0x24>)
    3a8c:	f7fe fa90 	bl	1fb0 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3a90:	0583      	lsls	r3, r0, #22
    3a92:	d506      	bpl.n	3aa2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3a94:	4b05      	ldr	r3, [pc, #20]	; (3aac <bt_le_scan_stop+0x28>)
    3a96:	2000      	movs	r0, #0
    3a98:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3a9e:	f7fe bd43 	b.w	2528 <bt_le_scan_update>
}
    3aa2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3aa6:	bd08      	pop	{r3, pc}
    3aa8:	20003ad8 	.word	0x20003ad8
    3aac:	200002d8 	.word	0x200002d8

00003ab0 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3ab0:	b538      	push	{r3, r4, r5, lr}
    3ab2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3ab4:	4805      	ldr	r0, [pc, #20]	; (3acc <bt_buf_get_rx+0x1c>)
    3ab6:	f00e ff47 	bl	12948 <net_buf_alloc_fixed>
#endif

	if (buf) {
    3aba:	4604      	mov	r4, r0
    3abc:	b120      	cbz	r0, 3ac8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3abe:	2100      	movs	r1, #0
    3ac0:	3008      	adds	r0, #8
    3ac2:	f00e ff60 	bl	12986 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3ac6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3ac8:	4620      	mov	r0, r4
    3aca:	bd38      	pop	{r3, r4, r5, pc}
    3acc:	20003f94 	.word	0x20003f94

00003ad0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3ad0:	b510      	push	{r4, lr}
    3ad2:	4601      	mov	r1, r0
	__asm__ volatile(
    3ad4:	f04f 0320 	mov.w	r3, #32
    3ad8:	f3ef 8011 	mrs	r0, BASEPRI
    3adc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3ae0:	4a0b      	ldr	r2, [pc, #44]	; (3b10 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3ae2:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3ae4:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3aec:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3af0:	b924      	cbnz	r4, 3afc <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3af2:	2001      	movs	r0, #1
}
    3af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3af8:	f7ff bfda 	b.w	3ab0 <bt_buf_get_rx>
    3afc:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3afe:	f104 0008 	add.w	r0, r4, #8
    3b02:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3b04:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b06:	4619      	mov	r1, r3
    3b08:	f00e ff3d 	bl	12986 <net_buf_simple_reserve>
}
    3b0c:	4620      	mov	r0, r4
    3b0e:	bd10      	pop	{r4, pc}
    3b10:	20003a68 	.word	0x20003a68

00003b14 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3b14:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b16:	4b06      	ldr	r3, [pc, #24]	; (3b30 <notify_connected+0x1c>)
    3b18:	681c      	ldr	r4, [r3, #0]
{
    3b1a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b1c:	b904      	cbnz	r4, 3b20 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3b1e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3b20:	6823      	ldr	r3, [r4, #0]
    3b22:	b113      	cbz	r3, 3b2a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3b24:	7a29      	ldrb	r1, [r5, #8]
    3b26:	4628      	mov	r0, r5
    3b28:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b2a:	6924      	ldr	r4, [r4, #16]
    3b2c:	e7f6      	b.n	3b1c <notify_connected+0x8>
    3b2e:	bf00      	nop
    3b30:	2000034c 	.word	0x2000034c

00003b34 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b34:	f3bf 8f5b 	dmb	ish
    3b38:	6800      	ldr	r0, [r0, #0]
    3b3a:	f3bf 8f5b 	dmb	ish
}
    3b3e:	4770      	bx	lr

00003b40 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3b40:	8943      	ldrh	r3, [r0, #10]
{
    3b42:	b510      	push	{r4, lr}
    3b44:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3b46:	b12b      	cbz	r3, 3b54 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3b48:	68c0      	ldr	r0, [r0, #12]
    3b4a:	f00e ff2d 	bl	129a8 <net_buf_unref>
	conn->rx = NULL;
    3b4e:	2300      	movs	r3, #0
    3b50:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3b52:	8163      	strh	r3, [r4, #10]
    3b54:	bd10      	pop	{r4, pc}

00003b56 <atomic_dec>:
}
    3b56:	f3bf 8f5b 	dmb	ish
    3b5a:	e850 3f00 	ldrex	r3, [r0]
    3b5e:	1e5a      	subs	r2, r3, #1
    3b60:	e840 2100 	strex	r1, r2, [r0]
    3b64:	2900      	cmp	r1, #0
    3b66:	d1f8      	bne.n	3b5a <atomic_dec+0x4>
    3b68:	f3bf 8f5b 	dmb	ish
    3b6c:	4618      	mov	r0, r3
    3b6e:	4770      	bx	lr

00003b70 <atomic_inc>:
}
    3b70:	f3bf 8f5b 	dmb	ish
    3b74:	e850 3f00 	ldrex	r3, [r0]
    3b78:	1c5a      	adds	r2, r3, #1
    3b7a:	e840 2100 	strex	r1, r2, [r0]
    3b7e:	2900      	cmp	r1, #0
    3b80:	d1f8      	bne.n	3b74 <atomic_inc+0x4>
    3b82:	f3bf 8f5b 	dmb	ish
    3b86:	4618      	mov	r0, r3
    3b88:	4770      	bx	lr
	...

00003b8c <bt_conn_get_pkts>:
}
    3b8c:	4800      	ldr	r0, [pc, #0]	; (3b90 <bt_conn_get_pkts+0x4>)
    3b8e:	4770      	bx	lr
    3b90:	20003af4 	.word	0x20003af4

00003b94 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3b94:	4b08      	ldr	r3, [pc, #32]	; (3bb8 <notify_le_param_updated+0x24>)
{
    3b96:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3b98:	681c      	ldr	r4, [r3, #0]
{
    3b9a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b9c:	b904      	cbnz	r4, 3ba0 <notify_le_param_updated+0xc>
}
    3b9e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3ba0:	68e6      	ldr	r6, [r4, #12]
    3ba2:	b13e      	cbz	r6, 3bb4 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3ba4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    3ba8:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    3bac:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    3bb0:	4628      	mov	r0, r5
    3bb2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3bb4:	6924      	ldr	r4, [r4, #16]
    3bb6:	e7f1      	b.n	3b9c <notify_le_param_updated+0x8>
    3bb8:	2000034c 	.word	0x2000034c

00003bbc <le_param_req>:
{
    3bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bbe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3bc0:	4608      	mov	r0, r1
{
    3bc2:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3bc4:	f7fe fb80 	bl	22c8 <bt_le_conn_params_valid>
    3bc8:	4605      	mov	r5, r0
    3bca:	b910      	cbnz	r0, 3bd2 <le_param_req+0x16>
		return false;
    3bcc:	2500      	movs	r5, #0
}
    3bce:	4628      	mov	r0, r5
    3bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3bd2:	4b09      	ldr	r3, [pc, #36]	; (3bf8 <le_param_req+0x3c>)
    3bd4:	681c      	ldr	r4, [r3, #0]
    3bd6:	2c00      	cmp	r4, #0
    3bd8:	d0f9      	beq.n	3bce <le_param_req+0x12>
		if (!cb->le_param_req) {
    3bda:	68a3      	ldr	r3, [r4, #8]
    3bdc:	b90b      	cbnz	r3, 3be2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3bde:	6924      	ldr	r4, [r4, #16]
    3be0:	e7f9      	b.n	3bd6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3be2:	4631      	mov	r1, r6
    3be4:	4638      	mov	r0, r7
    3be6:	4798      	blx	r3
    3be8:	2800      	cmp	r0, #0
    3bea:	d0ef      	beq.n	3bcc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3bec:	4630      	mov	r0, r6
    3bee:	f7fe fb6b 	bl	22c8 <bt_le_conn_params_valid>
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d1f3      	bne.n	3bde <le_param_req+0x22>
    3bf6:	e7e9      	b.n	3bcc <le_param_req+0x10>
    3bf8:	2000034c 	.word	0x2000034c

00003bfc <bt_conn_cb_register>:
	cb->_next = callback_list;
    3bfc:	4b02      	ldr	r3, [pc, #8]	; (3c08 <bt_conn_cb_register+0xc>)
    3bfe:	681a      	ldr	r2, [r3, #0]
    3c00:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3c02:	6018      	str	r0, [r3, #0]
    3c04:	4770      	bx	lr
    3c06:	bf00      	nop
    3c08:	2000034c 	.word	0x2000034c

00003c0c <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3c0c:	2a01      	cmp	r2, #1
{
    3c0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3c10:	4604      	mov	r4, r0
    3c12:	460d      	mov	r5, r1
	switch (flags) {
    3c14:	d01b      	beq.n	3c4e <bt_conn_recv+0x42>
    3c16:	2a02      	cmp	r2, #2
    3c18:	d16b      	bne.n	3cf2 <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3c1a:	688b      	ldr	r3, [r1, #8]
    3c1c:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3c1e:	8943      	ldrh	r3, [r0, #10]
    3c20:	b15b      	cbz	r3, 3c3a <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    3c22:	4b3d      	ldr	r3, [pc, #244]	; (3d18 <bt_conn_recv+0x10c>)
    3c24:	9301      	str	r3, [sp, #4]
    3c26:	9300      	str	r3, [sp, #0]
    3c28:	4a3c      	ldr	r2, [pc, #240]	; (3d1c <bt_conn_recv+0x110>)
    3c2a:	4b3d      	ldr	r3, [pc, #244]	; (3d20 <bt_conn_recv+0x114>)
    3c2c:	493d      	ldr	r1, [pc, #244]	; (3d24 <bt_conn_recv+0x118>)
    3c2e:	483e      	ldr	r0, [pc, #248]	; (3d28 <bt_conn_recv+0x11c>)
    3c30:	f7fd f9ac 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3c34:	4620      	mov	r0, r4
    3c36:	f7ff ff83 	bl	3b40 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3c3a:	89ab      	ldrh	r3, [r5, #12]
    3c3c:	1af3      	subs	r3, r6, r3
    3c3e:	3304      	adds	r3, #4
    3c40:	b29b      	uxth	r3, r3
    3c42:	8163      	strh	r3, [r4, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3c44:	2b00      	cmp	r3, #0
    3c46:	d042      	beq.n	3cce <bt_conn_recv+0xc2>
			conn->rx = buf;
    3c48:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3c4a:	b004      	add	sp, #16
    3c4c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    3c4e:	8943      	ldrh	r3, [r0, #10]
    3c50:	b98b      	cbnz	r3, 3c76 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    3c52:	4b31      	ldr	r3, [pc, #196]	; (3d18 <bt_conn_recv+0x10c>)
    3c54:	9301      	str	r3, [sp, #4]
    3c56:	9300      	str	r3, [sp, #0]
    3c58:	4a30      	ldr	r2, [pc, #192]	; (3d1c <bt_conn_recv+0x110>)
    3c5a:	4b31      	ldr	r3, [pc, #196]	; (3d20 <bt_conn_recv+0x114>)
    3c5c:	4931      	ldr	r1, [pc, #196]	; (3d24 <bt_conn_recv+0x118>)
    3c5e:	4833      	ldr	r0, [pc, #204]	; (3d2c <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    3c60:	f7fd f994 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    3c64:	4620      	mov	r0, r4
    3c66:	f7ff ff6b 	bl	3b40 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3c6a:	4628      	mov	r0, r5
}
    3c6c:	b004      	add	sp, #16
    3c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    3c72:	f00e be99 	b.w	129a8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3c76:	898e      	ldrh	r6, [r1, #12]
    3c78:	42b3      	cmp	r3, r6
    3c7a:	d207      	bcs.n	3c8c <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    3c7c:	4b26      	ldr	r3, [pc, #152]	; (3d18 <bt_conn_recv+0x10c>)
    3c7e:	9301      	str	r3, [sp, #4]
    3c80:	9300      	str	r3, [sp, #0]
    3c82:	4a26      	ldr	r2, [pc, #152]	; (3d1c <bt_conn_recv+0x110>)
    3c84:	4b26      	ldr	r3, [pc, #152]	; (3d20 <bt_conn_recv+0x114>)
    3c86:	4927      	ldr	r1, [pc, #156]	; (3d24 <bt_conn_recv+0x118>)
    3c88:	4829      	ldr	r0, [pc, #164]	; (3d30 <bt_conn_recv+0x124>)
    3c8a:	e7e9      	b.n	3c60 <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3c8c:	68c0      	ldr	r0, [r0, #12]
    3c8e:	3008      	adds	r0, #8
    3c90:	f00e ff06 	bl	12aa0 <net_buf_simple_tailroom>
    3c94:	4286      	cmp	r6, r0
    3c96:	d907      	bls.n	3ca8 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    3c98:	4b1f      	ldr	r3, [pc, #124]	; (3d18 <bt_conn_recv+0x10c>)
    3c9a:	9301      	str	r3, [sp, #4]
    3c9c:	9300      	str	r3, [sp, #0]
    3c9e:	4a1f      	ldr	r2, [pc, #124]	; (3d1c <bt_conn_recv+0x110>)
    3ca0:	4b1f      	ldr	r3, [pc, #124]	; (3d20 <bt_conn_recv+0x114>)
    3ca2:	4920      	ldr	r1, [pc, #128]	; (3d24 <bt_conn_recv+0x118>)
    3ca4:	4823      	ldr	r0, [pc, #140]	; (3d34 <bt_conn_recv+0x128>)
    3ca6:	e7db      	b.n	3c60 <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3ca8:	68e0      	ldr	r0, [r4, #12]
    3caa:	89aa      	ldrh	r2, [r5, #12]
    3cac:	68a9      	ldr	r1, [r5, #8]
    3cae:	3008      	adds	r0, #8
    3cb0:	f00e feb2 	bl	12a18 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3cb4:	8963      	ldrh	r3, [r4, #10]
    3cb6:	89aa      	ldrh	r2, [r5, #12]
    3cb8:	1a9b      	subs	r3, r3, r2
    3cba:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3cbc:	4628      	mov	r0, r5
    3cbe:	f00e fe73 	bl	129a8 <net_buf_unref>
		if (conn->rx_len) {
    3cc2:	8963      	ldrh	r3, [r4, #10]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d1c0      	bne.n	3c4a <bt_conn_recv+0x3e>
		buf = conn->rx;
    3cc8:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3cca:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3ccc:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3cce:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3cd0:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3cd2:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3cd4:	1d13      	adds	r3, r2, #4
    3cd6:	428b      	cmp	r3, r1
    3cd8:	d016      	beq.n	3d08 <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3cda:	4b0f      	ldr	r3, [pc, #60]	; (3d18 <bt_conn_recv+0x10c>)
    3cdc:	9303      	str	r3, [sp, #12]
    3cde:	9102      	str	r1, [sp, #8]
    3ce0:	9201      	str	r2, [sp, #4]
    3ce2:	9300      	str	r3, [sp, #0]
    3ce4:	4a0d      	ldr	r2, [pc, #52]	; (3d1c <bt_conn_recv+0x110>)
    3ce6:	4b0e      	ldr	r3, [pc, #56]	; (3d20 <bt_conn_recv+0x114>)
    3ce8:	490e      	ldr	r1, [pc, #56]	; (3d24 <bt_conn_recv+0x118>)
    3cea:	4813      	ldr	r0, [pc, #76]	; (3d38 <bt_conn_recv+0x12c>)
    3cec:	f7fd f94e 	bl	f8c <printk>
    3cf0:	e7bb      	b.n	3c6a <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3cf2:	4b09      	ldr	r3, [pc, #36]	; (3d18 <bt_conn_recv+0x10c>)
    3cf4:	9302      	str	r3, [sp, #8]
	switch (flags) {
    3cf6:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3cf8:	9300      	str	r3, [sp, #0]
    3cfa:	4a08      	ldr	r2, [pc, #32]	; (3d1c <bt_conn_recv+0x110>)
    3cfc:	4b08      	ldr	r3, [pc, #32]	; (3d20 <bt_conn_recv+0x114>)
    3cfe:	4909      	ldr	r1, [pc, #36]	; (3d24 <bt_conn_recv+0x118>)
    3d00:	480e      	ldr	r0, [pc, #56]	; (3d3c <bt_conn_recv+0x130>)
    3d02:	f7fd f943 	bl	f8c <printk>
    3d06:	e7ad      	b.n	3c64 <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    3d08:	4629      	mov	r1, r5
    3d0a:	4620      	mov	r0, r4
}
    3d0c:	b004      	add	sp, #16
    3d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    3d12:	f000 bf53 	b.w	4bbc <bt_l2cap_recv>
    3d16:	bf00      	nop
    3d18:	00014645 	.word	0x00014645
    3d1c:	00015394 	.word	0x00015394
    3d20:	00015674 	.word	0x00015674
    3d24:	000153e3 	.word	0x000153e3
    3d28:	000156c0 	.word	0x000156c0
    3d2c:	000156ed 	.word	0x000156ed
    3d30:	0001571b 	.word	0x0001571b
    3d34:	0001573f 	.word	0x0001573f
    3d38:	000157a4 	.word	0x000157a4
    3d3c:	00015776 	.word	0x00015776

00003d40 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    3d40:	7a43      	ldrb	r3, [r0, #9]
    3d42:	2b03      	cmp	r3, #3
{
    3d44:	b513      	push	{r0, r1, r4, lr}
    3d46:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    3d48:	d00f      	beq.n	3d6a <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    3d4a:	4b0b      	ldr	r3, [pc, #44]	; (3d78 <bt_conn_send_cb+0x38>)
    3d4c:	9301      	str	r3, [sp, #4]
    3d4e:	9300      	str	r3, [sp, #0]
    3d50:	4a0a      	ldr	r2, [pc, #40]	; (3d7c <bt_conn_send_cb+0x3c>)
    3d52:	4b0b      	ldr	r3, [pc, #44]	; (3d80 <bt_conn_send_cb+0x40>)
    3d54:	490b      	ldr	r1, [pc, #44]	; (3d84 <bt_conn_send_cb+0x44>)
    3d56:	480c      	ldr	r0, [pc, #48]	; (3d88 <bt_conn_send_cb+0x48>)
    3d58:	f7fd f918 	bl	f8c <printk>
		net_buf_unref(buf);
    3d5c:	4620      	mov	r0, r4
    3d5e:	f00e fe23 	bl	129a8 <net_buf_unref>
		return -ENOTCONN;
    3d62:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3d66:	b002      	add	sp, #8
    3d68:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    3d6a:	3028      	adds	r0, #40	; 0x28
	conn_tx(buf)->cb = cb;
    3d6c:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    3d6e:	f00e fe0e 	bl	1298e <net_buf_put>
	return 0;
    3d72:	2000      	movs	r0, #0
    3d74:	e7f7      	b.n	3d66 <bt_conn_send_cb+0x26>
    3d76:	bf00      	nop
    3d78:	00014645 	.word	0x00014645
    3d7c:	00015394 	.word	0x00015394
    3d80:	00015681 	.word	0x00015681
    3d84:	000153e3 	.word	0x000153e3
    3d88:	000157d0 	.word	0x000157d0

00003d8c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d90:	4d0d      	ldr	r5, [pc, #52]	; (3dc8 <bt_conn_notify_tx+0x3c>)
    3d92:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3d94:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3d98:	f04f 0800 	mov.w	r8, #0
    3d9c:	2100      	movs	r1, #0
    3d9e:	4638      	mov	r0, r7
    3da0:	f00f fbf8 	bl	13594 <_impl_k_queue_get>
    3da4:	4604      	mov	r4, r0
    3da6:	b908      	cbnz	r0, 3dac <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3dac:	6863      	ldr	r3, [r4, #4]
    3dae:	b10b      	cbz	r3, 3db4 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    3db0:	4630      	mov	r0, r6
    3db2:	4798      	blx	r3
    3db4:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3db6:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3db8:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3dba:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3dbe:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d1eb      	bne.n	3d9c <bt_conn_notify_tx+0x10>
	list->tail = node;
    3dc4:	606c      	str	r4, [r5, #4]
    3dc6:	e7e7      	b.n	3d98 <bt_conn_notify_tx+0xc>
    3dc8:	200003f8 	.word	0x200003f8

00003dcc <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3dcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3dd0:	4605      	mov	r5, r0
    3dd2:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3dd4:	4844      	ldr	r0, [pc, #272]	; (3ee8 <send_frag+0x11c>)
    3dd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3dda:	4698      	mov	r8, r3
    3ddc:	4614      	mov	r4, r2
    3dde:	f00f fea2 	bl	13b26 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3de2:	4b42      	ldr	r3, [pc, #264]	; (3eec <send_frag+0x120>)
    3de4:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3de8:	f7ff fea4 	bl	3b34 <atomic_get>
    3dec:	b130      	cbz	r0, 3dfc <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3dee:	7a5a      	ldrb	r2, [r3, #9]
    3df0:	3a03      	subs	r2, #3
    3df2:	2a01      	cmp	r2, #1
    3df4:	d802      	bhi.n	3dfc <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    3df6:	4618      	mov	r0, r3
    3df8:	f7ff ffc8 	bl	3d8c <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3dfc:	7a6b      	ldrb	r3, [r5, #9]
    3dfe:	2b03      	cmp	r3, #3
    3e00:	d153      	bne.n	3eaa <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3e02:	2104      	movs	r1, #4
    3e04:	f107 0008 	add.w	r0, r7, #8
    3e08:	f00e fe26 	bl	12a58 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3e0c:	882a      	ldrh	r2, [r5, #0]
    3e0e:	4e38      	ldr	r6, [pc, #224]	; (3ef0 <send_frag+0x124>)
    3e10:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3e14:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3e16:	89bb      	ldrh	r3, [r7, #12]
    3e18:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3e1a:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    3e1c:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3e1e:	3b04      	subs	r3, #4
    3e20:	8043      	strh	r3, [r0, #2]
    3e22:	2302      	movs	r3, #2
    3e24:	753b      	strb	r3, [r7, #20]
	return node->next;
    3e26:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3e28:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3e2a:	428c      	cmp	r4, r1
	list->tail = node;
    3e2c:	bf08      	it	eq
    3e2e:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3e30:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    3e32:	f04f 0320 	mov.w	r3, #32
    3e36:	f3ef 8211 	mrs	r2, BASEPRI
    3e3a:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    3e3e:	2300      	movs	r3, #0
    3e40:	6023      	str	r3, [r4, #0]
    3e42:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    3e44:	2b00      	cmp	r3, #0
    3e46:	d13f      	bne.n	3ec8 <send_frag+0xfc>
	list->tail = node;
    3e48:	616c      	str	r4, [r5, #20]
	list->head = node;
    3e4a:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e4c:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3e50:	4638      	mov	r0, r7
    3e52:	f7fe fae5 	bl	2420 <bt_send>
	if (err) {
    3e56:	2800      	cmp	r0, #0
    3e58:	d042      	beq.n	3ee0 <send_frag+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    3e5a:	4b26      	ldr	r3, [pc, #152]	; (3ef4 <send_frag+0x128>)
    3e5c:	9302      	str	r3, [sp, #8]
    3e5e:	9001      	str	r0, [sp, #4]
    3e60:	9300      	str	r3, [sp, #0]
    3e62:	4a25      	ldr	r2, [pc, #148]	; (3ef8 <send_frag+0x12c>)
    3e64:	4b25      	ldr	r3, [pc, #148]	; (3efc <send_frag+0x130>)
    3e66:	4926      	ldr	r1, [pc, #152]	; (3f00 <send_frag+0x134>)
    3e68:	4826      	ldr	r0, [pc, #152]	; (3f04 <send_frag+0x138>)
    3e6a:	f7fd f88f 	bl	f8c <printk>
	__asm__ volatile(
    3e6e:	f04f 0320 	mov.w	r3, #32
    3e72:	f3ef 8111 	mrs	r1, BASEPRI
    3e76:	f383 8811 	msr	BASEPRI, r3
    3e7a:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3e7c:	2200      	movs	r2, #0
    3e7e:	b153      	cbz	r3, 3e96 <send_frag+0xca>
    3e80:	429c      	cmp	r4, r3
    3e82:	d12a      	bne.n	3eda <send_frag+0x10e>
    3e84:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    3e86:	bb12      	cbnz	r2, 3ece <send_frag+0x102>
    3e88:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    3e8a:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    3e8c:	4294      	cmp	r4, r2
    3e8e:	d100      	bne.n	3e92 <send_frag+0xc6>
	list->tail = node;
    3e90:	616b      	str	r3, [r5, #20]
	parent->next = child;
    3e92:	2300      	movs	r3, #0
    3e94:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3e96:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    3e9a:	2300      	movs	r3, #0
    3e9c:	6063      	str	r3, [r4, #4]
    3e9e:	6833      	ldr	r3, [r6, #0]
    3ea0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ea2:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3ea4:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    3ea6:	b903      	cbnz	r3, 3eaa <send_frag+0xde>
	list->tail = node;
    3ea8:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3eaa:	480f      	ldr	r0, [pc, #60]	; (3ee8 <send_frag+0x11c>)
    3eac:	f00f fe13 	bl	13ad6 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3eb0:	f1b8 0f00 	cmp.w	r8, #0
    3eb4:	d004      	beq.n	3ec0 <send_frag+0xf4>
		net_buf_unref(buf);
    3eb6:	4638      	mov	r0, r7
    3eb8:	f00e fd76 	bl	129a8 <net_buf_unref>
	}
	return false;
    3ebc:	f04f 0800 	mov.w	r8, #0
}
    3ec0:	4640      	mov	r0, r8
    3ec2:	b004      	add	sp, #16
    3ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    3ec8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3eca:	616c      	str	r4, [r5, #20]
    3ecc:	e7be      	b.n	3e4c <send_frag+0x80>
	parent->next = child;
    3ece:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    3ed0:	696b      	ldr	r3, [r5, #20]
    3ed2:	429c      	cmp	r4, r3
	list->tail = node;
    3ed4:	bf08      	it	eq
    3ed6:	616a      	streq	r2, [r5, #20]
    3ed8:	e7db      	b.n	3e92 <send_frag+0xc6>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    3eda:	461a      	mov	r2, r3
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	e7ce      	b.n	3e7e <send_frag+0xb2>
	return true;
    3ee0:	f04f 0801 	mov.w	r8, #1
    3ee4:	e7ec      	b.n	3ec0 <send_frag+0xf4>
    3ee6:	bf00      	nop
    3ee8:	20003af4 	.word	0x20003af4
    3eec:	20000360 	.word	0x20000360
    3ef0:	200003f8 	.word	0x200003f8
    3ef4:	00014645 	.word	0x00014645
    3ef8:	00015394 	.word	0x00015394
    3efc:	00015691 	.word	0x00015691
    3f00:	000153e3 	.word	0x000153e3
    3f04:	00014e1d 	.word	0x00014e1d

00003f08 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    3f08:	b538      	push	{r3, r4, r5, lr}
    3f0a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3f0c:	f100 0528 	add.w	r5, r0, #40	; 0x28
    3f10:	2100      	movs	r1, #0
    3f12:	4628      	mov	r0, r5
    3f14:	f00e fd1e 	bl	12954 <net_buf_get>
    3f18:	b958      	cbnz	r0, 3f32 <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    3f1a:	4620      	mov	r0, r4
    3f1c:	f7ff ff36 	bl	3d8c <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    3f20:	4620      	mov	r0, r4
    3f22:	f7ff fe0d 	bl	3b40 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3f26:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    3f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    3f2e:	f7ff be12 	b.w	3b56 <atomic_dec>
		net_buf_unref(buf);
    3f32:	f00e fd39 	bl	129a8 <net_buf_unref>
    3f36:	e7eb      	b.n	3f10 <conn_cleanup+0x8>

00003f38 <bt_conn_prepare_events>:
{
    3f38:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    3f3a:	4b1f      	ldr	r3, [pc, #124]	; (3fb8 <bt_conn_prepare_events+0x80>)
    3f3c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3f3e:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    3f40:	609a      	str	r2, [r3, #8]
{
    3f42:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3f44:	f010 f9f5 	bl	14332 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    3f48:	4b1c      	ldr	r3, [pc, #112]	; (3fbc <bt_conn_prepare_events+0x84>)
    3f4a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    3f4e:	f7ff fdf1 	bl	3b34 <atomic_get>
    3f52:	4619      	mov	r1, r3
    3f54:	b908      	cbnz	r0, 3f5a <bt_conn_prepare_events+0x22>
			continue;
    3f56:	2001      	movs	r0, #1
    3f58:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    3f5a:	7a5a      	ldrb	r2, [r3, #9]
    3f5c:	b99a      	cbnz	r2, 3f86 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f5e:	f3bf 8f5b 	dmb	ish
    3f62:	1d1a      	adds	r2, r3, #4
    3f64:	e852 0f00 	ldrex	r0, [r2]
    3f68:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    3f6c:	e842 4e00 	strex	lr, r4, [r2]
    3f70:	f1be 0f00 	cmp.w	lr, #0
    3f74:	d1f6      	bne.n	3f64 <bt_conn_prepare_events+0x2c>
    3f76:	f3bf 8f5b 	dmb	ish
    3f7a:	0642      	lsls	r2, r0, #25
    3f7c:	d503      	bpl.n	3f86 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    3f7e:	4618      	mov	r0, r3
    3f80:	f7ff ffc2 	bl	3f08 <conn_cleanup>
    3f84:	e7e7      	b.n	3f56 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    3f86:	7a4c      	ldrb	r4, [r1, #9]
    3f88:	2c03      	cmp	r4, #3
    3f8a:	d1e4      	bne.n	3f56 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    3f8c:	f105 0014 	add.w	r0, r5, #20
    3f90:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <bt_conn_prepare_events+0x88>)
    3f92:	2200      	movs	r2, #0
    3f94:	2104      	movs	r1, #4
    3f96:	f010 f9cc 	bl	14332 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3f9a:	2301      	movs	r3, #1
    3f9c:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    3fa0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3fa4:	4b07      	ldr	r3, [pc, #28]	; (3fc4 <bt_conn_prepare_events+0x8c>)
    3fa6:	2200      	movs	r2, #0
    3fa8:	2104      	movs	r1, #4
    3faa:	f010 f9c2 	bl	14332 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3fae:	2302      	movs	r3, #2
    3fb0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    3fb4:	4620      	mov	r0, r4
}
    3fb6:	bd38      	pop	{r3, r4, r5, pc}
    3fb8:	20003b90 	.word	0x20003b90
    3fbc:	20000360 	.word	0x20000360
    3fc0:	20000378 	.word	0x20000378
    3fc4:	20000388 	.word	0x20000388

00003fc8 <bt_conn_add_le>:
{
    3fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    3fca:	4c17      	ldr	r4, [pc, #92]	; (4028 <bt_conn_add_le+0x60>)
    3fcc:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    3fd0:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    3fd2:	4630      	mov	r0, r6
    3fd4:	f7ff fdae 	bl	3b34 <atomic_get>
    3fd8:	4605      	mov	r5, r0
    3fda:	b108      	cbz	r0, 3fe0 <bt_conn_add_le+0x18>
		return NULL;
    3fdc:	2000      	movs	r0, #0
    3fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    3fe0:	4601      	mov	r1, r0
    3fe2:	2298      	movs	r2, #152	; 0x98
    3fe4:	4620      	mov	r0, r4
    3fe6:	f7fd fe35 	bl	1c54 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3fea:	f3bf 8f5b 	dmb	ish
    3fee:	2301      	movs	r3, #1
    3ff0:	e856 2f00 	ldrex	r2, [r6]
    3ff4:	e846 3100 	strex	r1, r3, [r6]
    3ff8:	2900      	cmp	r1, #0
    3ffa:	d1f9      	bne.n	3ff0 <bt_conn_add_le+0x28>
    3ffc:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    4000:	2207      	movs	r2, #7
    4002:	4639      	mov	r1, r7
    4004:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4008:	f7fd fdf8 	bl	1bfc <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    400c:	2318      	movs	r3, #24
    400e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    4012:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    4014:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    4018:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    401a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    401e:	4903      	ldr	r1, [pc, #12]	; (402c <bt_conn_add_le+0x64>)
    4020:	f010 f840 	bl	140a4 <k_delayed_work_init>
			conn = &conns[i];
    4024:	4620      	mov	r0, r4
}
    4026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4028:	20000360 	.word	0x20000360
    402c:	0000457d 	.word	0x0000457d

00004030 <bt_conn_set_state>:
{
    4030:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    4032:	7a45      	ldrb	r5, [r0, #9]
    4034:	428d      	cmp	r5, r1
{
    4036:	b085      	sub	sp, #20
    4038:	4604      	mov	r4, r0
    403a:	460e      	mov	r6, r1
	if (conn->state == state) {
    403c:	d10a      	bne.n	4054 <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    403e:	4b5f      	ldr	r3, [pc, #380]	; (41bc <bt_conn_set_state+0x18c>)
    4040:	9301      	str	r3, [sp, #4]
    4042:	9300      	str	r3, [sp, #0]
    4044:	4a5e      	ldr	r2, [pc, #376]	; (41c0 <bt_conn_set_state+0x190>)
    4046:	4b5f      	ldr	r3, [pc, #380]	; (41c4 <bt_conn_set_state+0x194>)
    4048:	495f      	ldr	r1, [pc, #380]	; (41c8 <bt_conn_set_state+0x198>)
    404a:	4860      	ldr	r0, [pc, #384]	; (41cc <bt_conn_set_state+0x19c>)
    404c:	f7fc ff9e 	bl	f8c <printk>
}
    4050:	b005      	add	sp, #20
    4052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    4054:	7261      	strb	r1, [r4, #9]
	switch (old_state) {
    4056:	b19d      	cbz	r5, 4080 <bt_conn_set_state+0x50>
    4058:	2d02      	cmp	r5, #2
    405a:	d015      	beq.n	4088 <bt_conn_set_state+0x58>
	switch (conn->state) {
    405c:	7a63      	ldrb	r3, [r4, #9]
    405e:	2b04      	cmp	r3, #4
    4060:	f200 80a1 	bhi.w	41a6 <bt_conn_set_state+0x176>
    4064:	a201      	add	r2, pc, #4	; (adr r2, 406c <bt_conn_set_state+0x3c>)
    4066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    406a:	bf00      	nop
    406c:	000040cd 	.word	0x000040cd
    4070:	00004051 	.word	0x00004051
    4074:	0000418b 	.word	0x0000418b
    4078:	00004097 	.word	0x00004097
    407c:	00004051 	.word	0x00004051
	atomic_inc(&conn->ref);
    4080:	3040      	adds	r0, #64	; 0x40
    4082:	f7ff fd75 	bl	3b70 <atomic_inc>
    4086:	e7e9      	b.n	405c <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4088:	7883      	ldrb	r3, [r0, #2]
    408a:	2b00      	cmp	r3, #0
    408c:	d1e6      	bne.n	405c <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    408e:	3070      	adds	r0, #112	; 0x70
    4090:	f010 f818 	bl	140c4 <k_delayed_work_cancel>
    4094:	e7e2      	b.n	405c <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4096:	78a3      	ldrb	r3, [r4, #2]
    4098:	2b02      	cmp	r3, #2
    409a:	d0d9      	beq.n	4050 <bt_conn_set_state+0x20>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    409c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    40a0:	f00f fa4c 	bl	1353c <_impl_k_queue_init>
    40a4:	f104 0018 	add.w	r0, r4, #24
    40a8:	f00f fa48 	bl	1353c <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    40ac:	2100      	movs	r1, #0
    40ae:	4848      	ldr	r0, [pc, #288]	; (41d0 <bt_conn_set_state+0x1a0>)
    40b0:	f010 f9e2 	bl	14478 <_impl_k_poll_signal>
	list->head = NULL;
    40b4:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    40b6:	4620      	mov	r0, r4
    40b8:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    40ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    40bc:	f000 fc1c 	bl	48f8 <bt_l2cap_connected>
		notify_connected(conn);
    40c0:	4620      	mov	r0, r4
}
    40c2:	b005      	add	sp, #20
    40c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    40c8:	f7ff bd24 	b.w	3b14 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    40cc:	78a3      	ldrb	r3, [r4, #2]
    40ce:	2b02      	cmp	r3, #2
    40d0:	d106      	bne.n	40e0 <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    40d2:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    40d6:	b005      	add	sp, #20
    40d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    40dc:	f7ff bd3b 	b.w	3b56 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    40e0:	1eeb      	subs	r3, r5, #3
    40e2:	2b01      	cmp	r3, #1
    40e4:	d844      	bhi.n	4170 <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    40e6:	4620      	mov	r0, r4
    40e8:	f000 fc40 	bl	496c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    40ec:	4b39      	ldr	r3, [pc, #228]	; (41d4 <bt_conn_set_state+0x1a4>)
    40ee:	681d      	ldr	r5, [r3, #0]
    40f0:	b9ed      	cbnz	r5, 412e <bt_conn_set_state+0xfe>
    40f2:	4e39      	ldr	r6, [pc, #228]	; (41d8 <bt_conn_set_state+0x1a8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    40f4:	4f39      	ldr	r7, [pc, #228]	; (41dc <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    40f6:	f04f 0320 	mov.w	r3, #32
    40fa:	f3ef 8111 	mrs	r1, BASEPRI
    40fe:	f383 8811 	msr	BASEPRI, r3
    4102:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    4104:	b12b      	cbz	r3, 4112 <bt_conn_set_state+0xe2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    4106:	6960      	ldr	r0, [r4, #20]
	return node->next;
    4108:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    410a:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    410c:	4283      	cmp	r3, r0
	list->tail = node;
    410e:	bf08      	it	eq
    4110:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4112:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    4116:	b18b      	cbz	r3, 413c <bt_conn_set_state+0x10c>
    4118:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    411a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    411c:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    411e:	605d      	str	r5, [r3, #4]
	list->head = node;
    4120:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4122:	b902      	cbnz	r2, 4126 <bt_conn_set_state+0xf6>
	list->tail = node;
    4124:	6073      	str	r3, [r6, #4]
    4126:	4638      	mov	r0, r7
    4128:	f00f fcd5 	bl	13ad6 <_impl_k_sem_give>
    412c:	e7e3      	b.n	40f6 <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    412e:	686b      	ldr	r3, [r5, #4]
    4130:	b113      	cbz	r3, 4138 <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    4132:	7a21      	ldrb	r1, [r4, #8]
    4134:	4620      	mov	r0, r4
    4136:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4138:	692d      	ldr	r5, [r5, #16]
    413a:	e7d9      	b.n	40f0 <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    413c:	78a3      	ldrb	r3, [r4, #2]
    413e:	b91b      	cbnz	r3, 4148 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    4140:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4144:	f00f ffbe 	bl	140c4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4148:	f3bf 8f5b 	dmb	ish
    414c:	3404      	adds	r4, #4
    414e:	e854 3f00 	ldrex	r3, [r4]
    4152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4156:	e844 3200 	strex	r2, r3, [r4]
    415a:	2a00      	cmp	r2, #0
    415c:	d1f7      	bne.n	414e <bt_conn_set_state+0x11e>
    415e:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4162:	481b      	ldr	r0, [pc, #108]	; (41d0 <bt_conn_set_state+0x1a0>)
    4164:	2100      	movs	r1, #0
}
    4166:	b005      	add	sp, #20
    4168:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    416c:	f010 b984 	b.w	14478 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4170:	2d02      	cmp	r5, #2
    4172:	d103      	bne.n	417c <bt_conn_set_state+0x14c>
			notify_connected(conn);
    4174:	4620      	mov	r0, r4
    4176:	f7ff fccd 	bl	3b14 <notify_connected>
    417a:	e7aa      	b.n	40d2 <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    417c:	2d01      	cmp	r5, #1
    417e:	f47f af67 	bne.w	4050 <bt_conn_set_state+0x20>
			if (conn->err) {
    4182:	7a23      	ldrb	r3, [r4, #8]
    4184:	2b00      	cmp	r3, #0
    4186:	d0a4      	beq.n	40d2 <bt_conn_set_state+0xa2>
    4188:	e7f4      	b.n	4174 <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    418a:	78a3      	ldrb	r3, [r4, #2]
    418c:	2b00      	cmp	r3, #0
    418e:	f47f af5f 	bne.w	4050 <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4192:	4813      	ldr	r0, [pc, #76]	; (41e0 <bt_conn_set_state+0x1b0>)
    4194:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4198:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    419c:	b005      	add	sp, #20
    419e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    41a2:	f00f bff3 	b.w	1418c <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    41a6:	4b05      	ldr	r3, [pc, #20]	; (41bc <bt_conn_set_state+0x18c>)
    41a8:	9302      	str	r3, [sp, #8]
    41aa:	e88d 0048 	stmia.w	sp, {r3, r6}
    41ae:	4a04      	ldr	r2, [pc, #16]	; (41c0 <bt_conn_set_state+0x190>)
    41b0:	4b04      	ldr	r3, [pc, #16]	; (41c4 <bt_conn_set_state+0x194>)
    41b2:	4905      	ldr	r1, [pc, #20]	; (41c8 <bt_conn_set_state+0x198>)
    41b4:	480b      	ldr	r0, [pc, #44]	; (41e4 <bt_conn_set_state+0x1b4>)
    41b6:	f7fc fee9 	bl	f8c <printk>
		break;
    41ba:	e749      	b.n	4050 <bt_conn_set_state+0x20>
    41bc:	00014645 	.word	0x00014645
    41c0:	000153dc 	.word	0x000153dc
    41c4:	000156ae 	.word	0x000156ae
    41c8:	000153e3 	.word	0x000153e3
    41cc:	000157ef 	.word	0x000157ef
    41d0:	20003b90 	.word	0x20003b90
    41d4:	2000034c 	.word	0x2000034c
    41d8:	200003f8 	.word	0x200003f8
    41dc:	20003af4 	.word	0x20003af4
    41e0:	20001990 	.word	0x20001990
    41e4:	0001580d 	.word	0x0001580d

000041e8 <bt_conn_lookup_handle>:
{
    41e8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    41ea:	4c0b      	ldr	r4, [pc, #44]	; (4218 <bt_conn_lookup_handle+0x30>)
{
    41ec:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    41ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
    41f2:	f7ff fc9f 	bl	3b34 <atomic_get>
    41f6:	b168      	cbz	r0, 4214 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    41f8:	7a63      	ldrb	r3, [r4, #9]
    41fa:	3b03      	subs	r3, #3
    41fc:	2b01      	cmp	r3, #1
    41fe:	d808      	bhi.n	4212 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    4200:	8823      	ldrh	r3, [r4, #0]
    4202:	4293      	cmp	r3, r2
    4204:	d105      	bne.n	4212 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    4206:	f104 0040 	add.w	r0, r4, #64	; 0x40
    420a:	f7ff fcb1 	bl	3b70 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    420e:	4620      	mov	r0, r4
    4210:	bd10      	pop	{r4, pc}
	return NULL;
    4212:	2000      	movs	r0, #0
}
    4214:	bd10      	pop	{r4, pc}
    4216:	bf00      	nop
    4218:	20000360 	.word	0x20000360

0000421c <bt_conn_addr_le_cmp>:
{
    421c:	b538      	push	{r3, r4, r5, lr}
    421e:	460d      	mov	r5, r1
    4220:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4222:	f100 0144 	add.w	r1, r0, #68	; 0x44
    4226:	2207      	movs	r2, #7
    4228:	4628      	mov	r0, r5
    422a:	f7fd fcd2 	bl	1bd2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    422e:	b160      	cbz	r0, 424a <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4230:	78e3      	ldrb	r3, [r4, #3]
    4232:	2207      	movs	r2, #7
    4234:	b933      	cbnz	r3, 4244 <bt_conn_addr_le_cmp+0x28>
    4236:	f104 0152 	add.w	r1, r4, #82	; 0x52
    423a:	4628      	mov	r0, r5
}
    423c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4240:	f7fd bcc7 	b.w	1bd2 <memcmp>
    4244:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    4248:	e7f7      	b.n	423a <bt_conn_addr_le_cmp+0x1e>
    424a:	bd38      	pop	{r3, r4, r5, pc}

0000424c <bt_conn_lookup_addr_le>:
{
    424c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    424e:	4c0b      	ldr	r4, [pc, #44]	; (427c <bt_conn_lookup_addr_le+0x30>)
{
    4250:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    4252:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4256:	f7ff fc6d 	bl	3b34 <atomic_get>
    425a:	b908      	cbnz	r0, 4260 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    425c:	2000      	movs	r0, #0
    425e:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4260:	78a3      	ldrb	r3, [r4, #2]
    4262:	2b00      	cmp	r3, #0
    4264:	d1fa      	bne.n	425c <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4266:	4620      	mov	r0, r4
    4268:	f7ff ffd8 	bl	421c <bt_conn_addr_le_cmp>
    426c:	2800      	cmp	r0, #0
    426e:	d1f5      	bne.n	425c <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    4270:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4274:	f7ff fc7c 	bl	3b70 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4278:	4620      	mov	r0, r4
}
    427a:	bd10      	pop	{r4, pc}
    427c:	20000360 	.word	0x20000360

00004280 <bt_conn_lookup_state_le>:
{
    4280:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4282:	4c0e      	ldr	r4, [pc, #56]	; (42bc <bt_conn_lookup_state_le+0x3c>)
{
    4284:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4286:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    428a:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    428c:	f7ff fc52 	bl	3b34 <atomic_get>
    4290:	b908      	cbnz	r0, 4296 <bt_conn_lookup_state_le+0x16>
	return NULL;
    4292:	2000      	movs	r0, #0
    4294:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4296:	78a2      	ldrb	r2, [r4, #2]
    4298:	2a00      	cmp	r2, #0
    429a:	d1fa      	bne.n	4292 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    429c:	b93b      	cbnz	r3, 42ae <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    429e:	7a63      	ldrb	r3, [r4, #9]
    42a0:	42ab      	cmp	r3, r5
    42a2:	d1f6      	bne.n	4292 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    42a4:	4806      	ldr	r0, [pc, #24]	; (42c0 <bt_conn_lookup_state_le+0x40>)
    42a6:	f7ff fc63 	bl	3b70 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    42aa:	4804      	ldr	r0, [pc, #16]	; (42bc <bt_conn_lookup_state_le+0x3c>)
}
    42ac:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    42ae:	4619      	mov	r1, r3
    42b0:	4620      	mov	r0, r4
    42b2:	f7ff ffb3 	bl	421c <bt_conn_addr_le_cmp>
    42b6:	2800      	cmp	r0, #0
    42b8:	d1eb      	bne.n	4292 <bt_conn_lookup_state_le+0x12>
    42ba:	e7f0      	b.n	429e <bt_conn_lookup_state_le+0x1e>
    42bc:	20000360 	.word	0x20000360
    42c0:	200003a0 	.word	0x200003a0

000042c4 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    42c4:	3040      	adds	r0, #64	; 0x40
    42c6:	f7ff bc46 	b.w	3b56 <atomic_dec>

000042ca <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    42ca:	3044      	adds	r0, #68	; 0x44
    42cc:	4770      	bx	lr
	...

000042d0 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    42d0:	b570      	push	{r4, r5, r6, lr}
    42d2:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    42d4:	4608      	mov	r0, r1
{
    42d6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    42d8:	f7fd fff6 	bl	22c8 <bt_le_conn_params_valid>
    42dc:	b908      	cbnz	r0, 42e2 <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    42de:	2400      	movs	r4, #0
    42e0:	e01d      	b.n	431e <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    42e2:	481e      	ldr	r0, [pc, #120]	; (435c <bt_conn_create_le+0x8c>)
    42e4:	f7ff fc26 	bl	3b34 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    42e8:	0583      	lsls	r3, r0, #22
    42ea:	d4f8      	bmi.n	42de <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    42ec:	4630      	mov	r0, r6
    42ee:	f7ff ffad 	bl	424c <bt_conn_lookup_addr_le>
	if (conn) {
    42f2:	4604      	mov	r4, r0
    42f4:	b1a8      	cbz	r0, 4322 <bt_conn_create_le+0x52>
		switch (conn->state) {
    42f6:	7a43      	ldrb	r3, [r0, #9]
    42f8:	2b01      	cmp	r3, #1
    42fa:	d007      	beq.n	430c <bt_conn_create_le+0x3c>
    42fc:	d301      	bcc.n	4302 <bt_conn_create_le+0x32>
    42fe:	2b03      	cmp	r3, #3
    4300:	d90d      	bls.n	431e <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    4302:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4306:	f7ff fc26 	bl	3b56 <atomic_dec>
    430a:	e7e8      	b.n	42de <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    430c:	886b      	ldrh	r3, [r5, #2]
    430e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4312:	88ab      	ldrh	r3, [r5, #4]
    4314:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4318:	88eb      	ldrh	r3, [r5, #6]
    431a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    431e:	4620      	mov	r0, r4
    4320:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4322:	4630      	mov	r0, r6
    4324:	f7ff fe50 	bl	3fc8 <bt_conn_add_le>
	if (!conn) {
    4328:	4604      	mov	r4, r0
    432a:	2800      	cmp	r0, #0
    432c:	d0f7      	beq.n	431e <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    432e:	2207      	movs	r2, #7
    4330:	4631      	mov	r1, r6
    4332:	3052      	adds	r0, #82	; 0x52
    4334:	f7fd fc62 	bl	1bfc <memcpy>
	conn->le.interval_max = param->interval_max;
    4338:	886b      	ldrh	r3, [r5, #2]
    433a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    433e:	88ab      	ldrh	r3, [r5, #4]
    4340:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4344:	88eb      	ldrh	r3, [r5, #6]
    4346:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    434a:	4620      	mov	r0, r4
    434c:	2101      	movs	r1, #1
    434e:	f7ff fe6f 	bl	4030 <bt_conn_set_state>
	bt_le_scan_update(true);
    4352:	2001      	movs	r0, #1
    4354:	f7fe f8e8 	bl	2528 <bt_le_scan_update>
	return conn;
    4358:	e7e1      	b.n	431e <bt_conn_create_le+0x4e>
    435a:	bf00      	nop
    435c:	20003ad8 	.word	0x20003ad8

00004360 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4364:	460d      	mov	r5, r1
    4366:	2900      	cmp	r1, #0
    4368:	d13d      	bne.n	43e6 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    436a:	4630      	mov	r0, r6
    436c:	f7ff ff6e 	bl	424c <bt_conn_lookup_addr_le>
	if (!conn) {
    4370:	4604      	mov	r4, r0
    4372:	b928      	cbnz	r0, 4380 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4374:	4630      	mov	r0, r6
    4376:	f7ff fe27 	bl	3fc8 <bt_conn_add_le>
		if (!conn) {
    437a:	4604      	mov	r4, r0
    437c:	2800      	cmp	r0, #0
    437e:	d053      	beq.n	4428 <bt_le_set_auto_conn+0xc8>
    4380:	1d23      	adds	r3, r4, #4
    4382:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    4386:	2d00      	cmp	r5, #0
    4388:	d035      	beq.n	43f6 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    438a:	886a      	ldrh	r2, [r5, #2]
    438c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4390:	88aa      	ldrh	r2, [r5, #4]
    4392:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4396:	88ea      	ldrh	r2, [r5, #6]
    4398:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    439c:	f3bf 8f5b 	dmb	ish
    43a0:	e853 2f00 	ldrex	r2, [r3]
    43a4:	f042 0101 	orr.w	r1, r2, #1
    43a8:	e843 1000 	strex	r0, r1, [r3]
    43ac:	2800      	cmp	r0, #0
    43ae:	d1f7      	bne.n	43a0 <bt_le_set_auto_conn+0x40>
    43b0:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    43b4:	07d1      	lsls	r1, r2, #31
    43b6:	d402      	bmi.n	43be <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    43b8:	4630      	mov	r0, r6
    43ba:	f7ff fbd9 	bl	3b70 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    43be:	7a63      	ldrb	r3, [r4, #9]
    43c0:	b963      	cbnz	r3, 43dc <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    43c2:	481b      	ldr	r0, [pc, #108]	; (4430 <bt_le_set_auto_conn+0xd0>)
    43c4:	f7ff fbb6 	bl	3b34 <atomic_get>
    43c8:	0783      	lsls	r3, r0, #30
    43ca:	d507      	bpl.n	43dc <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    43cc:	b11d      	cbz	r5, 43d6 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    43ce:	2101      	movs	r1, #1
    43d0:	4620      	mov	r0, r4
    43d2:	f7ff fe2d 	bl	4030 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    43d6:	2000      	movs	r0, #0
    43d8:	f7fe f8a6 	bl	2528 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    43dc:	4630      	mov	r0, r6
    43de:	f7ff fbba 	bl	3b56 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    43e2:	2000      	movs	r0, #0
    43e4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    43e6:	4608      	mov	r0, r1
    43e8:	f7fd ff6e 	bl	22c8 <bt_le_conn_params_valid>
    43ec:	2800      	cmp	r0, #0
    43ee:	d1bc      	bne.n	436a <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    43f0:	f06f 0015 	mvn.w	r0, #21
    43f4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    43f6:	f3bf 8f5b 	dmb	ish
    43fa:	e853 2f00 	ldrex	r2, [r3]
    43fe:	f022 0101 	bic.w	r1, r2, #1
    4402:	e843 1000 	strex	r0, r1, [r3]
    4406:	2800      	cmp	r0, #0
    4408:	d1f7      	bne.n	43fa <bt_le_set_auto_conn+0x9a>
    440a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    440e:	07d2      	lsls	r2, r2, #31
    4410:	d5d5      	bpl.n	43be <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    4412:	4630      	mov	r0, r6
    4414:	f7ff fb9f 	bl	3b56 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4418:	7a63      	ldrb	r3, [r4, #9]
    441a:	2b01      	cmp	r3, #1
    441c:	d1cf      	bne.n	43be <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    441e:	4629      	mov	r1, r5
    4420:	4620      	mov	r0, r4
    4422:	f7ff fe05 	bl	4030 <bt_conn_set_state>
    4426:	e7ca      	b.n	43be <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    4428:	f06f 000b 	mvn.w	r0, #11
}
    442c:	bd70      	pop	{r4, r5, r6, pc}
    442e:	bf00      	nop
    4430:	20003ad8 	.word	0x20003ad8

00004434 <bt_conn_disconnect>:
{
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4438:	7881      	ldrb	r1, [r0, #2]
{
    443a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    443c:	b911      	cbnz	r1, 4444 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    443e:	3044      	adds	r0, #68	; 0x44
    4440:	f7ff ff8e 	bl	4360 <bt_le_set_auto_conn>
	switch (conn->state) {
    4444:	7a63      	ldrb	r3, [r4, #9]
    4446:	3b01      	subs	r3, #1
    4448:	2b03      	cmp	r3, #3
    444a:	d803      	bhi.n	4454 <bt_conn_disconnect+0x20>
    444c:	e8df f003 	tbb	[pc, r3]
    4450:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4454:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4458:	4628      	mov	r0, r5
    445a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    445c:	4620      	mov	r0, r4
		conn->err = reason;
    445e:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4460:	2100      	movs	r1, #0
    4462:	f7ff fde5 	bl	4030 <bt_conn_set_state>
		bt_le_scan_update(false);
    4466:	2000      	movs	r0, #0
    4468:	f7fe f85e 	bl	2528 <bt_le_scan_update>
		return 0;
    446c:	2500      	movs	r5, #0
    446e:	e7f3      	b.n	4458 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4470:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4474:	f00f fe26 	bl	140c4 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4478:	2100      	movs	r1, #0
    447a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    447e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4482:	f7fd bfd5 	b.w	2430 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4486:	2103      	movs	r1, #3
    4488:	f240 4006 	movw	r0, #1030	; 0x406
    448c:	f7fd fe20 	bl	20d0 <bt_hci_cmd_create>
	if (!buf) {
    4490:	4605      	mov	r5, r0
    4492:	b198      	cbz	r0, 44bc <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4494:	2103      	movs	r1, #3
    4496:	3008      	adds	r0, #8
    4498:	f00e fab8 	bl	12a0c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    449c:	8823      	ldrh	r3, [r4, #0]
    449e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    44a0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    44a2:	4629      	mov	r1, r5
    44a4:	f240 4006 	movw	r0, #1030	; 0x406
    44a8:	f7fd ffc2 	bl	2430 <bt_hci_cmd_send>
	if (err) {
    44ac:	4605      	mov	r5, r0
    44ae:	2800      	cmp	r0, #0
    44b0:	d1d2      	bne.n	4458 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    44b2:	2104      	movs	r1, #4
    44b4:	4620      	mov	r0, r4
    44b6:	f7ff fdbb 	bl	4030 <bt_conn_set_state>
    44ba:	e7cd      	b.n	4458 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    44bc:	f06f 0536 	mvn.w	r5, #54	; 0x36
    44c0:	e7ca      	b.n	4458 <bt_conn_disconnect+0x24>

000044c2 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    44c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c4:	4607      	mov	r7, r0
    44c6:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    44c8:	f242 0013 	movw	r0, #8211	; 0x2013
    44cc:	210e      	movs	r1, #14
    44ce:	f7fd fdff 	bl	20d0 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    44d2:	4606      	mov	r6, r0
    44d4:	b1c8      	cbz	r0, 450a <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    44d6:	210e      	movs	r1, #14
    44d8:	3008      	adds	r0, #8
    44da:	f00e fa97 	bl	12a0c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    44de:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    44e0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    44e2:	220e      	movs	r2, #14
    44e4:	f7fd fbb6 	bl	1c54 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    44e8:	883b      	ldrh	r3, [r7, #0]
    44ea:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    44ec:	882b      	ldrh	r3, [r5, #0]
    44ee:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    44f0:	886b      	ldrh	r3, [r5, #2]
    44f2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    44f4:	88ab      	ldrh	r3, [r5, #4]
    44f6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    44f8:	88eb      	ldrh	r3, [r5, #6]
    44fa:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    44fc:	4631      	mov	r1, r6
    44fe:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4506:	f7fd bf93 	b.w	2430 <bt_hci_cmd_send>
}
    450a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004510 <bt_conn_le_param_update>:
{
    4510:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    4512:	880a      	ldrh	r2, [r1, #0]
    4514:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4518:	429a      	cmp	r2, r3
{
    451a:	4604      	mov	r4, r0
    451c:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    451e:	d80c      	bhi.n	453a <bt_conn_le_param_update+0x2a>
    4520:	884a      	ldrh	r2, [r1, #2]
    4522:	429a      	cmp	r2, r3
    4524:	d309      	bcc.n	453a <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    4526:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    452a:	888b      	ldrh	r3, [r1, #4]
    452c:	429a      	cmp	r2, r3
    452e:	d104      	bne.n	453a <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    4530:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    4534:	88cb      	ldrh	r3, [r1, #6]
    4536:	429a      	cmp	r2, r3
    4538:	d01a      	beq.n	4570 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    453a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    453e:	f00f fdc1 	bl	140c4 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4542:	4b0d      	ldr	r3, [pc, #52]	; (4578 <bt_conn_le_param_update+0x68>)
    4544:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4548:	079a      	lsls	r2, r3, #30
    454a:	d503      	bpl.n	4554 <bt_conn_le_param_update+0x44>
    454c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4550:	079b      	lsls	r3, r3, #30
    4552:	d401      	bmi.n	4558 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4554:	78e3      	ldrb	r3, [r4, #3]
    4556:	b92b      	cbnz	r3, 4564 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    4558:	4629      	mov	r1, r5
    455a:	4620      	mov	r0, r4
}
    455c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4560:	f7ff bfaf 	b.w	44c2 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4564:	4629      	mov	r1, r5
    4566:	4620      	mov	r0, r4
}
    4568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    456c:	f000 bb66 	b.w	4c3c <bt_l2cap_update_conn_param>
}
    4570:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4574:	bd38      	pop	{r3, r4, r5, pc}
    4576:	bf00      	nop
    4578:	20003a68 	.word	0x20003a68

0000457c <le_conn_update>:
{
    457c:	4603      	mov	r3, r0
    457e:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4580:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4584:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4586:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    458a:	d105      	bne.n	4598 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    458c:	2113      	movs	r1, #19
    458e:	f7ff ff51 	bl	4434 <bt_conn_disconnect>
}
    4592:	b003      	add	sp, #12
    4594:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4598:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    459c:	f8ad 2000 	strh.w	r2, [sp]
    45a0:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    45a4:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    45a8:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    45aa:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    45ae:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    45b2:	f8ad 2004 	strh.w	r2, [sp, #4]
    45b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    45ba:	f7ff ffa9 	bl	4510 <bt_conn_le_param_update>
    45be:	e7e8      	b.n	4592 <le_conn_update+0x16>

000045c0 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    45c0:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    45c2:	4b08      	ldr	r3, [pc, #32]	; (45e4 <bt_conn_create_pdu+0x24>)
{
    45c4:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    45c6:	2800      	cmp	r0, #0
    45c8:	bf08      	it	eq
    45ca:	4618      	moveq	r0, r3
    45cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    45d0:	f00e f9ba 	bl	12948 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    45d4:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    45d6:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    45d8:	3008      	adds	r0, #8
    45da:	f00e f9d4 	bl	12986 <net_buf_simple_reserve>

	return buf;
}
    45de:	4620      	mov	r0, r4
    45e0:	bd38      	pop	{r3, r4, r5, pc}
    45e2:	bf00      	nop
    45e4:	20003f34 	.word	0x20003f34

000045e8 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    45e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45ec:	4606      	mov	r6, r0
    45ee:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    45f0:	4816      	ldr	r0, [pc, #88]	; (464c <create_frag.isra.8+0x64>)
    45f2:	2100      	movs	r1, #0
    45f4:	f7ff ffe4 	bl	45c0 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    45f8:	7833      	ldrb	r3, [r6, #0]
    45fa:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    45fc:	4605      	mov	r5, r0
    45fe:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4602:	d005      	beq.n	4610 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4604:	f00e f9d0 	bl	129a8 <net_buf_unref>
		return NULL;
    4608:	4635      	mov	r5, r6
}
    460a:	4628      	mov	r0, r5
    460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    4610:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4612:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4616:	4e0e      	ldr	r6, [pc, #56]	; (4650 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4618:	4638      	mov	r0, r7
    461a:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    461e:	f00e fa3f 	bl	12aa0 <net_buf_simple_tailroom>
    4622:	4580      	cmp	r8, r0
    4624:	d20c      	bcs.n	4640 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4626:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    462a:	f854 1f08 	ldr.w	r1, [r4, #8]!
    462e:	4632      	mov	r2, r6
    4630:	4638      	mov	r0, r7
    4632:	f00e f9f1 	bl	12a18 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4636:	4631      	mov	r1, r6
    4638:	4620      	mov	r0, r4
    463a:	f00e fa15 	bl	12a68 <net_buf_simple_pull>
    463e:	e7e4      	b.n	460a <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4640:	4638      	mov	r0, r7
    4642:	f00e fa2d 	bl	12aa0 <net_buf_simple_tailroom>
    4646:	b286      	uxth	r6, r0
    4648:	e7ef      	b.n	462a <create_frag.isra.8+0x42>
    464a:	bf00      	nop
    464c:	20003f54 	.word	0x20003f54
    4650:	20003a68 	.word	0x20003a68

00004654 <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    4654:	7a43      	ldrb	r3, [r0, #9]
{
    4656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4658:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    465a:	b99b      	cbnz	r3, 4684 <bt_conn_process_tx+0x30>
    465c:	f3bf 8f5b 	dmb	ish
    4660:	1d03      	adds	r3, r0, #4
    4662:	e853 2f00 	ldrex	r2, [r3]
    4666:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    466a:	e843 1400 	strex	r4, r1, [r3]
    466e:	2c00      	cmp	r4, #0
    4670:	d1f7      	bne.n	4662 <bt_conn_process_tx+0xe>
    4672:	f3bf 8f5b 	dmb	ish
    4676:	0653      	lsls	r3, r2, #25
    4678:	d504      	bpl.n	4684 <bt_conn_process_tx+0x30>
}
    467a:	b003      	add	sp, #12
    467c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    4680:	f7ff bc42 	b.w	3f08 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4684:	2100      	movs	r1, #0
    4686:	f105 0028 	add.w	r0, r5, #40	; 0x28
    468a:	f00e f963 	bl	12954 <net_buf_get>
	BT_ASSERT(buf);
    468e:	4604      	mov	r4, r0
    4690:	b970      	cbnz	r0, 46b0 <bt_conn_process_tx+0x5c>
    4692:	4b22      	ldr	r3, [pc, #136]	; (471c <bt_conn_process_tx+0xc8>)
    4694:	9301      	str	r3, [sp, #4]
    4696:	9300      	str	r3, [sp, #0]
    4698:	4a21      	ldr	r2, [pc, #132]	; (4720 <bt_conn_process_tx+0xcc>)
    469a:	4b22      	ldr	r3, [pc, #136]	; (4724 <bt_conn_process_tx+0xd0>)
    469c:	4922      	ldr	r1, [pc, #136]	; (4728 <bt_conn_process_tx+0xd4>)
    469e:	4823      	ldr	r0, [pc, #140]	; (472c <bt_conn_process_tx+0xd8>)
    46a0:	f7fc fc74 	bl	f8c <printk>
    46a4:	4040      	eors	r0, r0
    46a6:	f380 8811 	msr	BASEPRI, r0
    46aa:	f04f 0004 	mov.w	r0, #4
    46ae:	df02      	svc	2
	return bt_dev.le.mtu;
    46b0:	4e1f      	ldr	r6, [pc, #124]	; (4730 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    46b2:	8981      	ldrh	r1, [r0, #12]
    46b4:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    46b8:	4291      	cmp	r1, r2
    46ba:	d808      	bhi.n	46ce <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    46bc:	2300      	movs	r3, #0
    46be:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    46c0:	4621      	mov	r1, r4
    46c2:	4628      	mov	r0, r5
    46c4:	f7ff fb82 	bl	3dcc <send_frag>
	if (!send_buf(conn, buf)) {
    46c8:	b148      	cbz	r0, 46de <bt_conn_process_tx+0x8a>
}
    46ca:	b003      	add	sp, #12
    46cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46ce:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    46d2:	4601      	mov	r1, r0
    46d4:	4638      	mov	r0, r7
    46d6:	f7ff ff87 	bl	45e8 <create_frag.isra.8>
	if (!frag) {
    46da:	4601      	mov	r1, r0
    46dc:	b928      	cbnz	r0, 46ea <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    46de:	4620      	mov	r0, r4
}
    46e0:	b003      	add	sp, #12
    46e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    46e6:	f00e b95f 	b.w	129a8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    46ea:	2301      	movs	r3, #1
    46ec:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    46ee:	4628      	mov	r0, r5
    46f0:	f7ff fb6c 	bl	3dcc <send_frag>
    46f4:	2800      	cmp	r0, #0
    46f6:	d0f2      	beq.n	46de <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    46f8:	89a2      	ldrh	r2, [r4, #12]
    46fa:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    46fe:	429a      	cmp	r2, r3
    4700:	d802      	bhi.n	4708 <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4702:	2300      	movs	r3, #0
    4704:	2201      	movs	r2, #1
    4706:	e7db      	b.n	46c0 <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    4708:	4621      	mov	r1, r4
    470a:	4638      	mov	r0, r7
    470c:	f7ff ff6c 	bl	45e8 <create_frag.isra.8>
		if (!frag) {
    4710:	4601      	mov	r1, r0
    4712:	2800      	cmp	r0, #0
    4714:	d0e3      	beq.n	46de <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4716:	2301      	movs	r3, #1
    4718:	461a      	mov	r2, r3
    471a:	e7e8      	b.n	46ee <bt_conn_process_tx+0x9a>
    471c:	00014645 	.word	0x00014645
    4720:	00015394 	.word	0x00015394
    4724:	0001569b 	.word	0x0001569b
    4728:	000153e3 	.word	0x000153e3
    472c:	00015498 	.word	0x00015498
    4730:	20003a68 	.word	0x20003a68

00004734 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4734:	4b03      	ldr	r3, [pc, #12]	; (4744 <bt_conn_get_id+0x10>)
    4736:	1ac0      	subs	r0, r0, r3
    4738:	4b03      	ldr	r3, [pc, #12]	; (4748 <bt_conn_get_id+0x14>)
    473a:	10c0      	asrs	r0, r0, #3
    473c:	4358      	muls	r0, r3
}
    473e:	b2c0      	uxtb	r0, r0
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	20000360 	.word	0x20000360
    4748:	286bca1b 	.word	0x286bca1b

0000474c <bt_conn_init>:
	parent->next = child;
    474c:	4b12      	ldr	r3, [pc, #72]	; (4798 <bt_conn_init+0x4c>)
    474e:	4a13      	ldr	r2, [pc, #76]	; (479c <bt_conn_init+0x50>)
    4750:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4752:	b510      	push	{r4, lr}
    4754:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4756:	6859      	ldr	r1, [r3, #4]
    4758:	b901      	cbnz	r1, 475c <bt_conn_init+0x10>
	list->tail = node;
    475a:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    475c:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    475e:	6092      	str	r2, [r2, #8]
	list->head = node;
    4760:	4a0f      	ldr	r2, [pc, #60]	; (47a0 <bt_conn_init+0x54>)
    4762:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4764:	b901      	cbnz	r1, 4768 <bt_conn_init+0x1c>
	list->tail = node;
    4766:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4768:	f001 fb66 	bl	5e38 <bt_att_init>

	err = bt_smp_init();
    476c:	f002 fa4e 	bl	6c0c <bt_smp_init>
	if (err) {
    4770:	4604      	mov	r4, r0
    4772:	b970      	cbnz	r0, 4792 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4774:	f000 fa8a 	bl	4c8c <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4778:	480a      	ldr	r0, [pc, #40]	; (47a4 <bt_conn_init+0x58>)
    477a:	f7ff f9db 	bl	3b34 <atomic_get>
    477e:	b140      	cbz	r0, 4792 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4780:	4809      	ldr	r0, [pc, #36]	; (47a8 <bt_conn_init+0x5c>)
    4782:	f7ff f9d7 	bl	3b34 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4786:	07c3      	lsls	r3, r0, #31
    4788:	d503      	bpl.n	4792 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    478a:	2101      	movs	r1, #1
    478c:	4807      	ldr	r0, [pc, #28]	; (47ac <bt_conn_init+0x60>)
    478e:	f7ff fc4f 	bl	4030 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4792:	4620      	mov	r0, r4
    4794:	bd10      	pop	{r4, pc}
    4796:	bf00      	nop
    4798:	200003f8 	.word	0x200003f8
    479c:	20000350 	.word	0x20000350
    47a0:	20000358 	.word	0x20000358
    47a4:	200003a0 	.word	0x200003a0
    47a8:	20000364 	.word	0x20000364
    47ac:	20000360 	.word	0x20000360

000047b0 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    47b0:	4770      	bx	lr
	...

000047b4 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    47b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    47b6:	4a0b      	ldr	r2, [pc, #44]	; (47e4 <l2cap_accept+0x30>)
    47b8:	6813      	ldr	r3, [r2, #0]
    47ba:	b933      	cbnz	r3, 47ca <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    47bc:	480a      	ldr	r0, [pc, #40]	; (47e8 <l2cap_accept+0x34>)
    47be:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    47c0:	600a      	str	r2, [r1, #0]

		return 0;
    47c2:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    47c4:	b005      	add	sp, #20
    47c6:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    47ca:	4b08      	ldr	r3, [pc, #32]	; (47ec <l2cap_accept+0x38>)
    47cc:	9302      	str	r3, [sp, #8]
    47ce:	9001      	str	r0, [sp, #4]
    47d0:	9300      	str	r3, [sp, #0]
    47d2:	4a07      	ldr	r2, [pc, #28]	; (47f0 <l2cap_accept+0x3c>)
    47d4:	4b07      	ldr	r3, [pc, #28]	; (47f4 <l2cap_accept+0x40>)
    47d6:	4908      	ldr	r1, [pc, #32]	; (47f8 <l2cap_accept+0x44>)
    47d8:	4808      	ldr	r0, [pc, #32]	; (47fc <l2cap_accept+0x48>)
    47da:	f7fc fbd7 	bl	f8c <printk>
	return -ENOMEM;
    47de:	f06f 000b 	mvn.w	r0, #11
    47e2:	e7ef      	b.n	47c4 <l2cap_accept+0x10>
    47e4:	20000400 	.word	0x20000400
    47e8:	20003bac 	.word	0x20003bac
    47ec:	00014645 	.word	0x00014645
    47f0:	00015394 	.word	0x00015394
    47f4:	000158b2 	.word	0x000158b2
    47f8:	000153e3 	.word	0x000153e3
    47fc:	00015921 	.word	0x00015921

00004800 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4802:	4607      	mov	r7, r0
    4804:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4806:	2000      	movs	r0, #0
    4808:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    480a:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    480c:	f7ff fed8 	bl	45c0 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4810:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4812:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4814:	3008      	adds	r0, #8
    4816:	f00e f8f9 	bl	12a0c <net_buf_simple_add>
	hdr->code = code;
    481a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    481c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    481e:	8045      	strh	r5, [r0, #2]
}
    4820:	4620      	mov	r0, r4
    4822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004824 <l2cap_connected>:
    4824:	4770      	bx	lr
	...

00004828 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4828:	2300      	movs	r3, #0
    482a:	6083      	str	r3, [r0, #8]
    482c:	4b05      	ldr	r3, [pc, #20]	; (4844 <bt_l2cap_le_fixed_chan_register+0x1c>)
    482e:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4830:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4834:	b911      	cbnz	r1, 483c <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4836:	605a      	str	r2, [r3, #4]
	list->head = node;
    4838:	601a      	str	r2, [r3, #0]
    483a:	4770      	bx	lr
	parent->next = child;
    483c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    483e:	605a      	str	r2, [r3, #4]
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	20000498 	.word	0x20000498

00004848 <bt_l2cap_chan_remove>:
{
    4848:	6b83      	ldr	r3, [r0, #56]	; 0x38
    484a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    484c:	b113      	cbz	r3, 4854 <bt_l2cap_chan_remove+0xc>
    484e:	3b08      	subs	r3, #8
    4850:	2200      	movs	r2, #0
    4852:	b903      	cbnz	r3, 4856 <bt_l2cap_chan_remove+0xe>
    4854:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4856:	428b      	cmp	r3, r1
    4858:	f103 0408 	add.w	r4, r3, #8
    485c:	d10f      	bne.n	487e <bt_l2cap_chan_remove+0x36>
    485e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4860:	b93a      	cbnz	r2, 4872 <bt_l2cap_chan_remove+0x2a>
    4862:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    4864:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    4866:	4294      	cmp	r4, r2
    4868:	d100      	bne.n	486c <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    486a:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    486c:	2200      	movs	r2, #0
    486e:	609a      	str	r2, [r3, #8]
    4870:	bd10      	pop	{r4, pc}
    4872:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4874:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    4876:	428c      	cmp	r4, r1
	list->tail = node;
    4878:	bf08      	it	eq
    487a:	63c2      	streq	r2, [r0, #60]	; 0x3c
    487c:	e7f6      	b.n	486c <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    487e:	4622      	mov	r2, r4
    4880:	2c00      	cmp	r4, #0
    4882:	d0e7      	beq.n	4854 <bt_l2cap_chan_remove+0xc>
	return node->next;
    4884:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4886:	2b00      	cmp	r3, #0
    4888:	d0e4      	beq.n	4854 <bt_l2cap_chan_remove+0xc>
    488a:	3b08      	subs	r3, #8
    488c:	e7e1      	b.n	4852 <bt_l2cap_chan_remove+0xa>

0000488e <bt_l2cap_chan_del>:
	if (!chan->conn) {
    488e:	6803      	ldr	r3, [r0, #0]
{
    4890:	b510      	push	{r4, lr}
    4892:	4604      	mov	r4, r0
	if (!chan->conn) {
    4894:	b12b      	cbz	r3, 48a2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4896:	6843      	ldr	r3, [r0, #4]
    4898:	685b      	ldr	r3, [r3, #4]
    489a:	b103      	cbz	r3, 489e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    489c:	4798      	blx	r3
	chan->conn = NULL;
    489e:	2300      	movs	r3, #0
    48a0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    48a2:	68e3      	ldr	r3, [r4, #12]
    48a4:	b11b      	cbz	r3, 48ae <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    48a6:	4620      	mov	r0, r4
}
    48a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    48ac:	4718      	bx	r3
    48ae:	bd10      	pop	{r4, pc}

000048b0 <l2cap_rtx_timeout>:
{
    48b0:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    48b2:	4b0c      	ldr	r3, [pc, #48]	; (48e4 <l2cap_rtx_timeout+0x34>)
    48b4:	4a0c      	ldr	r2, [pc, #48]	; (48e8 <l2cap_rtx_timeout+0x38>)
    48b6:	490d      	ldr	r1, [pc, #52]	; (48ec <l2cap_rtx_timeout+0x3c>)
{
    48b8:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    48ba:	f1a0 0410 	sub.w	r4, r0, #16
{
    48be:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    48c0:	9302      	str	r3, [sp, #8]
    48c2:	e88d 0018 	stmia.w	sp, {r3, r4}
    48c6:	480a      	ldr	r0, [pc, #40]	; (48f0 <l2cap_rtx_timeout+0x40>)
    48c8:	4b0a      	ldr	r3, [pc, #40]	; (48f4 <l2cap_rtx_timeout+0x44>)
    48ca:	f7fc fb5f 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    48ce:	f855 0c10 	ldr.w	r0, [r5, #-16]
    48d2:	4621      	mov	r1, r4
    48d4:	f7ff ffb8 	bl	4848 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    48d8:	4620      	mov	r0, r4
}
    48da:	b005      	add	sp, #20
    48dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    48e0:	f7ff bfd5 	b.w	488e <bt_l2cap_chan_del>
    48e4:	00014645 	.word	0x00014645
    48e8:	00015394 	.word	0x00015394
    48ec:	000153e3 	.word	0x000153e3
    48f0:	00015a75 	.word	0x00015a75
    48f4:	0001585c 	.word	0x0001585c

000048f8 <bt_l2cap_connected>:
{
    48f8:	4b1a      	ldr	r3, [pc, #104]	; (4964 <bt_l2cap_connected+0x6c>)
    48fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    48fe:	681c      	ldr	r4, [r3, #0]
    4900:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4902:	b12c      	cbz	r4, 4910 <bt_l2cap_connected+0x18>
	parent->next = child;
    4904:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4906:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4968 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    490a:	3c08      	subs	r4, #8
    490c:	46b9      	mov	r9, r7
    490e:	b914      	cbnz	r4, 4916 <bt_l2cap_connected+0x1e>
}
    4910:	b003      	add	sp, #12
    4912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4916:	6863      	ldr	r3, [r4, #4]
    4918:	a901      	add	r1, sp, #4
    491a:	4630      	mov	r0, r6
    491c:	4798      	blx	r3
    491e:	2800      	cmp	r0, #0
    4920:	db18      	blt.n	4954 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4922:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4924:	8823      	ldrh	r3, [r4, #0]
    4926:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4928:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    492c:	4641      	mov	r1, r8
    492e:	f105 0010 	add.w	r0, r5, #16
    4932:	f00f fbb7 	bl	140a4 <k_delayed_work_init>
    4936:	60af      	str	r7, [r5, #8]
    4938:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    493a:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    493e:	b972      	cbnz	r2, 495e <bt_l2cap_connected+0x66>
	list->tail = node;
    4940:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    4942:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    4944:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4946:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4948:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    494a:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	b103      	cbz	r3, 4954 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4952:	4798      	blx	r3
	return node->next;
    4954:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4956:	2c00      	cmp	r4, #0
    4958:	d0da      	beq.n	4910 <bt_l2cap_connected+0x18>
    495a:	3c08      	subs	r4, #8
    495c:	e7d7      	b.n	490e <bt_l2cap_connected+0x16>
	parent->next = child;
    495e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4960:	63f3      	str	r3, [r6, #60]	; 0x3c
    4962:	e7ef      	b.n	4944 <bt_l2cap_connected+0x4c>
    4964:	20000498 	.word	0x20000498
    4968:	000048b1 	.word	0x000048b1

0000496c <bt_l2cap_disconnected>:
{
    496c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    496e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4970:	b1a3      	cbz	r3, 499c <bt_l2cap_disconnected+0x30>
    4972:	f1b3 0008 	subs.w	r0, r3, #8
    4976:	d10a      	bne.n	498e <bt_l2cap_disconnected+0x22>
    4978:	bd10      	pop	{r4, pc}
    497a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    497c:	f7ff ff87 	bl	488e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4980:	b164      	cbz	r4, 499c <bt_l2cap_disconnected+0x30>
	return node->next;
    4982:	68a3      	ldr	r3, [r4, #8]
    4984:	b103      	cbz	r3, 4988 <bt_l2cap_disconnected+0x1c>
    4986:	3b08      	subs	r3, #8
{
    4988:	4620      	mov	r0, r4
    498a:	461c      	mov	r4, r3
    498c:	e7f6      	b.n	497c <bt_l2cap_disconnected+0x10>
    498e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4990:	2c00      	cmp	r4, #0
    4992:	d1f2      	bne.n	497a <bt_l2cap_disconnected+0xe>
}
    4994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4998:	f7ff bf79 	b.w	488e <bt_l2cap_chan_del>
    499c:	bd10      	pop	{r4, pc}

0000499e <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    499e:	3104      	adds	r1, #4
    49a0:	f7ff be0e 	b.w	45c0 <bt_conn_create_pdu>

000049a4 <bt_l2cap_send_cb>:
{
    49a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49a6:	4614      	mov	r4, r2
    49a8:	4605      	mov	r5, r0
    49aa:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    49ac:	f102 0008 	add.w	r0, r2, #8
    49b0:	2104      	movs	r1, #4
{
    49b2:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    49b4:	f00e f850 	bl	12a58 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    49b8:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    49ba:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    49bc:	3904      	subs	r1, #4
    49be:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    49c0:	4632      	mov	r2, r6
    49c2:	4621      	mov	r1, r4
    49c4:	4628      	mov	r0, r5
}
    49c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    49ca:	f7ff b9b9 	b.w	3d40 <bt_conn_send_cb>
	...

000049d0 <l2cap_recv>:
{
    49d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    49d2:	898b      	ldrh	r3, [r1, #12]
    49d4:	2b03      	cmp	r3, #3
{
    49d6:	b087      	sub	sp, #28
    49d8:	4607      	mov	r7, r0
    49da:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    49dc:	d809      	bhi.n	49f2 <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    49de:	4b5a      	ldr	r3, [pc, #360]	; (4b48 <l2cap_recv+0x178>)
    49e0:	9301      	str	r3, [sp, #4]
    49e2:	9300      	str	r3, [sp, #0]
    49e4:	4a59      	ldr	r2, [pc, #356]	; (4b4c <l2cap_recv+0x17c>)
    49e6:	4b5a      	ldr	r3, [pc, #360]	; (4b50 <l2cap_recv+0x180>)
    49e8:	495a      	ldr	r1, [pc, #360]	; (4b54 <l2cap_recv+0x184>)
    49ea:	485b      	ldr	r0, [pc, #364]	; (4b58 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    49ec:	f7fc face 	bl	f8c <printk>
		return;
    49f0:	e014      	b.n	4a1c <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    49f2:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    49f4:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    49f6:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    49fa:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    49fc:	f00e f834 	bl	12a68 <net_buf_simple_pull>
	if (buf->len != len) {
    4a00:	89aa      	ldrh	r2, [r5, #12]
    4a02:	4296      	cmp	r6, r2
    4a04:	d00c      	beq.n	4a20 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4a06:	4b50      	ldr	r3, [pc, #320]	; (4b48 <l2cap_recv+0x178>)
    4a08:	9303      	str	r3, [sp, #12]
    4a0a:	9201      	str	r2, [sp, #4]
    4a0c:	9300      	str	r3, [sp, #0]
    4a0e:	9602      	str	r6, [sp, #8]
    4a10:	4b4f      	ldr	r3, [pc, #316]	; (4b50 <l2cap_recv+0x180>)
    4a12:	4a4e      	ldr	r2, [pc, #312]	; (4b4c <l2cap_recv+0x17c>)
    4a14:	494f      	ldr	r1, [pc, #316]	; (4b54 <l2cap_recv+0x184>)
    4a16:	4851      	ldr	r0, [pc, #324]	; (4b5c <l2cap_recv+0x18c>)
    4a18:	f7fc fab8 	bl	f8c <printk>
}
    4a1c:	b007      	add	sp, #28
    4a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4a20:	7861      	ldrb	r1, [r4, #1]
    4a22:	b939      	cbnz	r1, 4a34 <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4a24:	4b48      	ldr	r3, [pc, #288]	; (4b48 <l2cap_recv+0x178>)
    4a26:	9301      	str	r3, [sp, #4]
    4a28:	9300      	str	r3, [sp, #0]
    4a2a:	4a48      	ldr	r2, [pc, #288]	; (4b4c <l2cap_recv+0x17c>)
    4a2c:	4b48      	ldr	r3, [pc, #288]	; (4b50 <l2cap_recv+0x180>)
    4a2e:	4949      	ldr	r1, [pc, #292]	; (4b54 <l2cap_recv+0x184>)
    4a30:	484b      	ldr	r0, [pc, #300]	; (4b60 <l2cap_recv+0x190>)
    4a32:	e7db      	b.n	49ec <l2cap_recv+0x1c>
	switch (hdr->code) {
    4a34:	7823      	ldrb	r3, [r4, #0]
    4a36:	2b12      	cmp	r3, #18
    4a38:	d029      	beq.n	4a8e <l2cap_recv+0xbe>
    4a3a:	2b13      	cmp	r3, #19
    4a3c:	d01d      	beq.n	4a7a <l2cap_recv+0xaa>
    4a3e:	2b01      	cmp	r3, #1
    4a40:	d0ec      	beq.n	4a1c <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4a42:	4a41      	ldr	r2, [pc, #260]	; (4b48 <l2cap_recv+0x178>)
    4a44:	9202      	str	r2, [sp, #8]
    4a46:	e88d 000c 	stmia.w	sp, {r2, r3}
    4a4a:	4942      	ldr	r1, [pc, #264]	; (4b54 <l2cap_recv+0x184>)
    4a4c:	4b40      	ldr	r3, [pc, #256]	; (4b50 <l2cap_recv+0x180>)
    4a4e:	4a45      	ldr	r2, [pc, #276]	; (4b64 <l2cap_recv+0x194>)
    4a50:	4845      	ldr	r0, [pc, #276]	; (4b68 <l2cap_recv+0x198>)
    4a52:	f7fc fa9b 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4a56:	2202      	movs	r2, #2
    4a58:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4a5a:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4a5c:	2001      	movs	r0, #1
    4a5e:	f7ff fecf 	bl	4800 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4a62:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4a64:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4a66:	3008      	adds	r0, #8
    4a68:	f00d ffd0 	bl	12a0c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4a6c:	2300      	movs	r3, #0
    4a6e:	7003      	strb	r3, [r0, #0]
    4a70:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4a72:	4622      	mov	r2, r4
    4a74:	2105      	movs	r1, #5
    4a76:	4628      	mov	r0, r5
    4a78:	e025      	b.n	4ac6 <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    4a7a:	2e01      	cmp	r6, #1
    4a7c:	d8ce      	bhi.n	4a1c <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    4a7e:	4b32      	ldr	r3, [pc, #200]	; (4b48 <l2cap_recv+0x178>)
    4a80:	9301      	str	r3, [sp, #4]
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	4a31      	ldr	r2, [pc, #196]	; (4b4c <l2cap_recv+0x17c>)
    4a86:	4b39      	ldr	r3, [pc, #228]	; (4b6c <l2cap_recv+0x19c>)
    4a88:	4932      	ldr	r1, [pc, #200]	; (4b54 <l2cap_recv+0x184>)
    4a8a:	4839      	ldr	r0, [pc, #228]	; (4b70 <l2cap_recv+0x1a0>)
    4a8c:	e7ae      	b.n	49ec <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    4a8e:	2e07      	cmp	r6, #7
    4a90:	d807      	bhi.n	4aa2 <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    4a92:	4b2d      	ldr	r3, [pc, #180]	; (4b48 <l2cap_recv+0x178>)
    4a94:	9301      	str	r3, [sp, #4]
    4a96:	9300      	str	r3, [sp, #0]
    4a98:	4a2c      	ldr	r2, [pc, #176]	; (4b4c <l2cap_recv+0x17c>)
    4a9a:	4b36      	ldr	r3, [pc, #216]	; (4b74 <l2cap_recv+0x1a4>)
    4a9c:	492d      	ldr	r1, [pc, #180]	; (4b54 <l2cap_recv+0x184>)
    4a9e:	4836      	ldr	r0, [pc, #216]	; (4b78 <l2cap_recv+0x1a8>)
    4aa0:	e7a4      	b.n	49ec <l2cap_recv+0x1c>
    4aa2:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4aa4:	78e6      	ldrb	r6, [r4, #3]
    4aa6:	b18e      	cbz	r6, 4acc <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4aa8:	2202      	movs	r2, #2
    4aaa:	2001      	movs	r0, #1
    4aac:	f7ff fea8 	bl	4800 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4ab0:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4ab2:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4ab4:	3008      	adds	r0, #8
    4ab6:	f00d ffa9 	bl	12a0c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4aba:	2300      	movs	r3, #0
    4abc:	7003      	strb	r3, [r0, #0]
    4abe:	7043      	strb	r3, [r0, #1]
    4ac0:	462a      	mov	r2, r5
    4ac2:	2105      	movs	r1, #5
    4ac4:	4620      	mov	r0, r4
    4ac6:	f7ff ff6d 	bl	49a4 <bt_l2cap_send_cb>
    4aca:	e7a7      	b.n	4a1c <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4acc:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4ace:	7858      	ldrb	r0, [r3, #1]
    4ad0:	781a      	ldrb	r2, [r3, #0]
    4ad2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4ad6:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4ada:	78d8      	ldrb	r0, [r3, #3]
    4adc:	789a      	ldrb	r2, [r3, #2]
    4ade:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4ae2:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4ae6:	7958      	ldrb	r0, [r3, #5]
    4ae8:	791a      	ldrb	r2, [r3, #4]
    4aea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4aee:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4af2:	799a      	ldrb	r2, [r3, #6]
    4af4:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4af6:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4af8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4afc:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4afe:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b02:	f7ff fe7d 	bl	4800 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4b06:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4b08:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4b0a:	4620      	mov	r0, r4
    4b0c:	f7ff f856 	bl	3bbc <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4b10:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4b12:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4b14:	f107 0008 	add.w	r0, r7, #8
    4b18:	f00d ff78 	bl	12a0c <net_buf_simple_add>
	if (accepted) {
    4b1c:	b17d      	cbz	r5, 4b3e <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    4b1e:	7006      	strb	r6, [r0, #0]
    4b20:	7046      	strb	r6, [r0, #1]
    4b22:	2300      	movs	r3, #0
    4b24:	463a      	mov	r2, r7
    4b26:	2105      	movs	r1, #5
    4b28:	4620      	mov	r0, r4
    4b2a:	f7ff ff3b 	bl	49a4 <bt_l2cap_send_cb>
	if (accepted) {
    4b2e:	2d00      	cmp	r5, #0
    4b30:	f43f af74 	beq.w	4a1c <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    4b34:	a904      	add	r1, sp, #16
    4b36:	4620      	mov	r0, r4
    4b38:	f7ff fcc3 	bl	44c2 <bt_conn_le_conn_update>
    4b3c:	e76e      	b.n	4a1c <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    4b3e:	2301      	movs	r3, #1
    4b40:	7003      	strb	r3, [r0, #0]
    4b42:	7045      	strb	r5, [r0, #1]
    4b44:	e7ed      	b.n	4b22 <l2cap_recv+0x152>
    4b46:	bf00      	nop
    4b48:	00014645 	.word	0x00014645
    4b4c:	00015394 	.word	0x00015394
    4b50:	00015899 	.word	0x00015899
    4b54:	000153e3 	.word	0x000153e3
    4b58:	00015958 	.word	0x00015958
    4b5c:	00015986 	.word	0x00015986
    4b60:	000159b7 	.word	0x000159b7
    4b64:	000153dc 	.word	0x000153dc
    4b68:	00015a47 	.word	0x00015a47
    4b6c:	0001586e 	.word	0x0001586e
    4b70:	000159e8 	.word	0x000159e8
    4b74:	00015880 	.word	0x00015880
    4b78:	00015a14 	.word	0x00015a14

00004b7c <bt_l2cap_le_lookup_tx_cid>:
{
    4b7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4b7e:	b100      	cbz	r0, 4b82 <bt_l2cap_le_lookup_tx_cid+0x6>
    4b80:	3808      	subs	r0, #8
    4b82:	b900      	cbnz	r0, 4b86 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4b84:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4b86:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    4b8a:	428b      	cmp	r3, r1
    4b8c:	d0fa      	beq.n	4b84 <bt_l2cap_le_lookup_tx_cid+0x8>
    4b8e:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4b90:	2000      	movs	r0, #0
    4b92:	2b00      	cmp	r3, #0
    4b94:	d0f6      	beq.n	4b84 <bt_l2cap_le_lookup_tx_cid+0x8>
    4b96:	f1a3 0008 	sub.w	r0, r3, #8
    4b9a:	e7f2      	b.n	4b82 <bt_l2cap_le_lookup_tx_cid+0x6>

00004b9c <bt_l2cap_le_lookup_rx_cid>:
{
    4b9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4b9e:	b100      	cbz	r0, 4ba2 <bt_l2cap_le_lookup_rx_cid+0x6>
    4ba0:	3808      	subs	r0, #8
    4ba2:	b900      	cbnz	r0, 4ba6 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4ba4:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4ba6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4ba8:	428b      	cmp	r3, r1
    4baa:	d0fb      	beq.n	4ba4 <bt_l2cap_le_lookup_rx_cid+0x8>
    4bac:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4bae:	2000      	movs	r0, #0
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d0f7      	beq.n	4ba4 <bt_l2cap_le_lookup_rx_cid+0x8>
    4bb4:	f1a3 0008 	sub.w	r0, r3, #8
    4bb8:	e7f3      	b.n	4ba2 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00004bbc <bt_l2cap_recv>:
{
    4bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    4bbe:	898b      	ldrh	r3, [r1, #12]
    4bc0:	2b03      	cmp	r3, #3
{
    4bc2:	4606      	mov	r6, r0
    4bc4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    4bc6:	d80e      	bhi.n	4be6 <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    4bc8:	4b15      	ldr	r3, [pc, #84]	; (4c20 <bt_l2cap_recv+0x64>)
    4bca:	9301      	str	r3, [sp, #4]
    4bcc:	9300      	str	r3, [sp, #0]
    4bce:	4a15      	ldr	r2, [pc, #84]	; (4c24 <bt_l2cap_recv+0x68>)
    4bd0:	4b15      	ldr	r3, [pc, #84]	; (4c28 <bt_l2cap_recv+0x6c>)
    4bd2:	4916      	ldr	r1, [pc, #88]	; (4c2c <bt_l2cap_recv+0x70>)
    4bd4:	4816      	ldr	r0, [pc, #88]	; (4c30 <bt_l2cap_recv+0x74>)
    4bd6:	f7fc f9d9 	bl	f8c <printk>
	net_buf_unref(buf);
    4bda:	4620      	mov	r0, r4
}
    4bdc:	b004      	add	sp, #16
    4bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    4be2:	f00d bee1 	b.w	129a8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    4be6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4be8:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    4bea:	f850 3f08 	ldr.w	r3, [r0, #8]!
    4bee:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4bf0:	f00d ff3a 	bl	12a68 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    4bf4:	4629      	mov	r1, r5
    4bf6:	4630      	mov	r0, r6
    4bf8:	f7ff ffd0 	bl	4b9c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4bfc:	b950      	cbnz	r0, 4c14 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    4bfe:	4b08      	ldr	r3, [pc, #32]	; (4c20 <bt_l2cap_recv+0x64>)
    4c00:	9302      	str	r3, [sp, #8]
    4c02:	e88d 0028 	stmia.w	sp, {r3, r5}
    4c06:	4a0b      	ldr	r2, [pc, #44]	; (4c34 <bt_l2cap_recv+0x78>)
    4c08:	4b07      	ldr	r3, [pc, #28]	; (4c28 <bt_l2cap_recv+0x6c>)
    4c0a:	4908      	ldr	r1, [pc, #32]	; (4c2c <bt_l2cap_recv+0x70>)
    4c0c:	480a      	ldr	r0, [pc, #40]	; (4c38 <bt_l2cap_recv+0x7c>)
    4c0e:	f7fc f9bd 	bl	f8c <printk>
    4c12:	e7e2      	b.n	4bda <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    4c14:	6843      	ldr	r3, [r0, #4]
    4c16:	4621      	mov	r1, r4
    4c18:	691b      	ldr	r3, [r3, #16]
    4c1a:	4798      	blx	r3
    4c1c:	e7dd      	b.n	4bda <bt_l2cap_recv+0x1e>
    4c1e:	bf00      	nop
    4c20:	00014645 	.word	0x00014645
    4c24:	00015394 	.word	0x00015394
    4c28:	000158a4 	.word	0x000158a4
    4c2c:	000153e3 	.word	0x000153e3
    4c30:	000158bf 	.word	0x000158bf
    4c34:	000153dc 	.word	0x000153dc
    4c38:	000158ec 	.word	0x000158ec

00004c3c <bt_l2cap_update_conn_param>:
{
    4c3c:	b570      	push	{r4, r5, r6, lr}
	ident++;
    4c3e:	4b12      	ldr	r3, [pc, #72]	; (4c88 <bt_l2cap_update_conn_param+0x4c>)
    4c40:	781a      	ldrb	r2, [r3, #0]
    4c42:	3201      	adds	r2, #1
	if (!ident) {
    4c44:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    4c48:	bf08      	it	eq
    4c4a:	2201      	moveq	r2, #1
    4c4c:	701a      	strb	r2, [r3, #0]
{
    4c4e:	460c      	mov	r4, r1
    4c50:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4c52:	7819      	ldrb	r1, [r3, #0]
    4c54:	2208      	movs	r2, #8
    4c56:	2012      	movs	r0, #18
    4c58:	f7ff fdd2 	bl	4800 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    4c5c:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4c5e:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    4c60:	4408      	add	r0, r1
    4c62:	f00d fed3 	bl	12a0c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4c66:	8823      	ldrh	r3, [r4, #0]
    4c68:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4c6a:	8863      	ldrh	r3, [r4, #2]
    4c6c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4c6e:	88a3      	ldrh	r3, [r4, #4]
    4c70:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4c72:	88e3      	ldrh	r3, [r4, #6]
    4c74:	80c3      	strh	r3, [r0, #6]
    4c76:	4632      	mov	r2, r6
    4c78:	4628      	mov	r0, r5
    4c7a:	2300      	movs	r3, #0
    4c7c:	2105      	movs	r1, #5
    4c7e:	f7ff fe91 	bl	49a4 <bt_l2cap_send_cb>
}
    4c82:	2000      	movs	r0, #0
    4c84:	bd70      	pop	{r4, r5, r6, pc}
    4c86:	bf00      	nop
    4c88:	20000494 	.word	0x20000494

00004c8c <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4c8c:	4801      	ldr	r0, [pc, #4]	; (4c94 <bt_l2cap_init+0x8>)
    4c8e:	f7ff bdcb 	b.w	4828 <bt_l2cap_le_fixed_chan_register>
    4c92:	bf00      	nop
    4c94:	20003ba0 	.word	0x20003ba0

00004c98 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4c98:	2006      	movs	r0, #6
    4c9a:	4770      	bx	lr

00004c9c <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4c9c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4c9e:	4a0a      	ldr	r2, [pc, #40]	; (4cc8 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4ca0:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    4ca2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    4ca6:	4284      	cmp	r4, r0
    4ca8:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4cac:	d102      	bne.n	4cb4 <att_op_get_type+0x18>
			return handlers[i].type;
    4cae:	440a      	add	r2, r1
    4cb0:	7890      	ldrb	r0, [r2, #2]
    4cb2:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4cb4:	3301      	adds	r3, #1
    4cb6:	2b1b      	cmp	r3, #27
    4cb8:	d1f3      	bne.n	4ca2 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4cba:	f010 0f40 	tst.w	r0, #64	; 0x40
    4cbe:	bf14      	ite	ne
    4cc0:	2000      	movne	r0, #0
    4cc2:	2006      	moveq	r0, #6
}
    4cc4:	bd10      	pop	{r4, pc}
    4cc6:	bf00      	nop
    4cc8:	00015d9c 	.word	0x00015d9c

00004ccc <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4cce:	4d11      	ldr	r5, [pc, #68]	; (4d14 <bt_att_accept+0x48>)
    4cd0:	682c      	ldr	r4, [r5, #0]
{
    4cd2:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    4cd4:	b984      	cbnz	r4, 4cf8 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    4cd6:	22e4      	movs	r2, #228	; 0xe4
    4cd8:	4621      	mov	r1, r4
    4cda:	4628      	mov	r0, r5
    4cdc:	f7fc ffba 	bl	1c54 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4ce0:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    4ce2:	4b0d      	ldr	r3, [pc, #52]	; (4d18 <bt_att_accept+0x4c>)
    4ce4:	606b      	str	r3, [r5, #4]
    4ce6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    4cea:	4611      	mov	r1, r2
    4cec:	f00e feea 	bl	13ac4 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    4cf0:	6035      	str	r5, [r6, #0]

		return 0;
    4cf2:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    4cf4:	b004      	add	sp, #16
    4cf6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    4cf8:	4b08      	ldr	r3, [pc, #32]	; (4d1c <bt_att_accept+0x50>)
    4cfa:	9302      	str	r3, [sp, #8]
    4cfc:	9001      	str	r0, [sp, #4]
    4cfe:	9300      	str	r3, [sp, #0]
    4d00:	4a07      	ldr	r2, [pc, #28]	; (4d20 <bt_att_accept+0x54>)
    4d02:	4b08      	ldr	r3, [pc, #32]	; (4d24 <bt_att_accept+0x58>)
    4d04:	4908      	ldr	r1, [pc, #32]	; (4d28 <bt_att_accept+0x5c>)
    4d06:	4809      	ldr	r0, [pc, #36]	; (4d2c <bt_att_accept+0x60>)
    4d08:	f7fc f940 	bl	f8c <printk>
	return -ENOMEM;
    4d0c:	f06f 000b 	mvn.w	r0, #11
    4d10:	e7f0      	b.n	4cf4 <bt_att_accept+0x28>
    4d12:	bf00      	nop
    4d14:	200004a0 	.word	0x200004a0
    4d18:	20003bcc 	.word	0x20003bcc
    4d1c:	00014645 	.word	0x00014645
    4d20:	00015394 	.word	0x00015394
    4d24:	00015b14 	.word	0x00015b14
    4d28:	000153e3 	.word	0x000153e3
    4d2c:	00015c30 	.word	0x00015c30

00004d30 <att_req_destroy>:
{
    4d30:	b510      	push	{r4, lr}
    4d32:	4604      	mov	r4, r0
	if (req->buf) {
    4d34:	6900      	ldr	r0, [r0, #16]
    4d36:	b108      	cbz	r0, 4d3c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    4d38:	f00d fe36 	bl	129a8 <net_buf_unref>
	if (req->destroy) {
    4d3c:	68a3      	ldr	r3, [r4, #8]
    4d3e:	b10b      	cbz	r3, 4d44 <att_req_destroy+0x14>
		req->destroy(req);
    4d40:	4620      	mov	r0, r4
    4d42:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    4d44:	4620      	mov	r0, r4
    4d46:	2214      	movs	r2, #20
    4d48:	2100      	movs	r1, #0
}
    4d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    4d4e:	f7fc bf81 	b.w	1c54 <memset>

00004d52 <att_notify>:
{
    4d52:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4d54:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    4d56:	f101 0008 	add.w	r0, r1, #8
{
    4d5a:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    4d5c:	f00d fe94 	bl	12a88 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    4d60:	89a3      	ldrh	r3, [r4, #12]
    4d62:	68a2      	ldr	r2, [r4, #8]
    4d64:	4601      	mov	r1, r0
    4d66:	4628      	mov	r0, r5
    4d68:	f001 fe66 	bl	6a38 <bt_gatt_notification>
}
    4d6c:	2000      	movs	r0, #0
    4d6e:	bd38      	pop	{r3, r4, r5, pc}

00004d70 <read_group_cb>:
{
    4d70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4d74:	680d      	ldr	r5, [r1, #0]
{
    4d76:	4606      	mov	r6, r0
    4d78:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4d7a:	f04f 0800 	mov.w	r8, #0
    4d7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4d82:	a902      	add	r1, sp, #8
    4d84:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    4d86:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4d88:	f88d 8008 	strb.w	r8, [sp, #8]
    4d8c:	f8ad 300a 	strh.w	r3, [sp, #10]
    4d90:	f7fd f8b2 	bl	1ef8 <bt_uuid_cmp>
    4d94:	b198      	cbz	r0, 4dbe <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4d96:	f642 0301 	movw	r3, #10241	; 0x2801
    4d9a:	a903      	add	r1, sp, #12
    4d9c:	6830      	ldr	r0, [r6, #0]
    4d9e:	f88d 800c 	strb.w	r8, [sp, #12]
    4da2:	f8ad 300e 	strh.w	r3, [sp, #14]
    4da6:	f7fd f8a7 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4daa:	b140      	cbz	r0, 4dbe <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    4dac:	6923      	ldr	r3, [r4, #16]
    4dae:	b123      	cbz	r3, 4dba <read_group_cb+0x4a>
    4db0:	8a32      	ldrh	r2, [r6, #16]
    4db2:	8859      	ldrh	r1, [r3, #2]
    4db4:	4291      	cmp	r1, r2
    4db6:	d200      	bcs.n	4dba <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4db8:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4dba:	2001      	movs	r0, #1
    4dbc:	e012      	b.n	4de4 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4dbe:	6861      	ldr	r1, [r4, #4]
    4dc0:	6830      	ldr	r0, [r6, #0]
    4dc2:	f7fd f899 	bl	1ef8 <bt_uuid_cmp>
    4dc6:	b110      	cbz	r0, 4dce <read_group_cb+0x5e>
		data->group = NULL;
    4dc8:	2300      	movs	r3, #0
    4dca:	6123      	str	r3, [r4, #16]
    4dcc:	e7f5      	b.n	4dba <read_group_cb+0x4a>
	if (data->rsp->len &&
    4dce:	68e3      	ldr	r3, [r4, #12]
    4dd0:	68a0      	ldr	r0, [r4, #8]
    4dd2:	781a      	ldrb	r2, [r3, #0]
    4dd4:	b14a      	cbz	r2, 4dea <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4dd6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4dda:	8981      	ldrh	r1, [r0, #12]
    4ddc:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4dde:	4293      	cmp	r3, r2
    4de0:	da03      	bge.n	4dea <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    4de2:	2000      	movs	r0, #0
}
    4de4:	b004      	add	sp, #16
    4de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4dea:	2104      	movs	r1, #4
    4dec:	3008      	adds	r0, #8
    4dee:	f00d fe0d 	bl	12a0c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4df2:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4df4:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4df6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4df8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4dfa:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4dfc:	898a      	ldrh	r2, [r1, #12]
    4dfe:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4e02:	6889      	ldr	r1, [r1, #8]
    4e04:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4e08:	1a9b      	subs	r3, r3, r2
    4e0a:	2500      	movs	r5, #0
    4e0c:	440a      	add	r2, r1
    4e0e:	9500      	str	r5, [sp, #0]
    4e10:	4631      	mov	r1, r6
    4e12:	b29b      	uxth	r3, r3
    4e14:	4638      	mov	r0, r7
    4e16:	47c0      	blx	r8
	if (read < 0) {
    4e18:	1e01      	subs	r1, r0, #0
    4e1a:	dbe2      	blt.n	4de2 <read_group_cb+0x72>
	if (!data->rsp->len) {
    4e1c:	68e0      	ldr	r0, [r4, #12]
    4e1e:	7802      	ldrb	r2, [r0, #0]
    4e20:	1d0b      	adds	r3, r1, #4
    4e22:	b92a      	cbnz	r2, 4e30 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    4e24:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    4e26:	68a0      	ldr	r0, [r4, #8]
    4e28:	3008      	adds	r0, #8
    4e2a:	f00d fdef 	bl	12a0c <net_buf_simple_add>
    4e2e:	e7c4      	b.n	4dba <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    4e30:	429a      	cmp	r2, r3
    4e32:	d0f8      	beq.n	4e26 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    4e34:	68a2      	ldr	r2, [r4, #8]
    4e36:	8993      	ldrh	r3, [r2, #12]
    4e38:	3b04      	subs	r3, #4
    4e3a:	8193      	strh	r3, [r2, #12]
    4e3c:	e7d1      	b.n	4de2 <read_group_cb+0x72>

00004e3e <find_info_cb>:
	if (!data->rsp) {
    4e3e:	688b      	ldr	r3, [r1, #8]
{
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	4605      	mov	r5, r0
    4e44:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    4e46:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    4e48:	b963      	cbnz	r3, 4e64 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4e4a:	6848      	ldr	r0, [r1, #4]
    4e4c:	2101      	movs	r1, #1
    4e4e:	3008      	adds	r0, #8
    4e50:	f00d fddc 	bl	12a0c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4e54:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4e56:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	bf0c      	ite	eq
    4e5e:	2301      	moveq	r3, #1
    4e60:	2302      	movne	r3, #2
    4e62:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    4e64:	68a3      	ldr	r3, [r4, #8]
    4e66:	781b      	ldrb	r3, [r3, #0]
    4e68:	2b01      	cmp	r3, #1
    4e6a:	d003      	beq.n	4e74 <find_info_cb+0x36>
    4e6c:	2b02      	cmp	r3, #2
    4e6e:	d01a      	beq.n	4ea6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    4e70:	2000      	movs	r0, #0
}
    4e72:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    4e74:	682b      	ldr	r3, [r5, #0]
    4e76:	781b      	ldrb	r3, [r3, #0]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d1f9      	bne.n	4e70 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    4e7c:	6860      	ldr	r0, [r4, #4]
    4e7e:	2104      	movs	r1, #4
    4e80:	3008      	adds	r0, #8
    4e82:	f00d fdc3 	bl	12a0c <net_buf_simple_add>
    4e86:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    4e88:	8a2b      	ldrh	r3, [r5, #16]
    4e8a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4e8c:	682b      	ldr	r3, [r5, #0]
    4e8e:	885b      	ldrh	r3, [r3, #2]
    4e90:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    4e92:	6863      	ldr	r3, [r4, #4]
    4e94:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4e98:	899b      	ldrh	r3, [r3, #12]
    4e9a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4e9c:	2804      	cmp	r0, #4
    4e9e:	bf94      	ite	ls
    4ea0:	2000      	movls	r0, #0
    4ea2:	2001      	movhi	r0, #1
    4ea4:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    4ea6:	682b      	ldr	r3, [r5, #0]
    4ea8:	781b      	ldrb	r3, [r3, #0]
    4eaa:	2b02      	cmp	r3, #2
    4eac:	d1e0      	bne.n	4e70 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    4eae:	6860      	ldr	r0, [r4, #4]
    4eb0:	2112      	movs	r1, #18
    4eb2:	3008      	adds	r0, #8
    4eb4:	f00d fdaa 	bl	12a0c <net_buf_simple_add>
    4eb8:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4eba:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4ebc:	8a2b      	ldrh	r3, [r5, #16]
    4ebe:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4ec2:	2210      	movs	r2, #16
    4ec4:	3101      	adds	r1, #1
    4ec6:	f7fc fe99 	bl	1bfc <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    4eca:	6863      	ldr	r3, [r4, #4]
    4ecc:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4ed0:	899b      	ldrh	r3, [r3, #12]
    4ed2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4ed4:	2812      	cmp	r0, #18
    4ed6:	e7e2      	b.n	4e9e <find_info_cb+0x60>

00004ed8 <find_type_cb>:
{
    4ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4edc:	680e      	ldr	r6, [r1, #0]
{
    4ede:	b088      	sub	sp, #32
    4ee0:	4605      	mov	r5, r0
    4ee2:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4ee4:	2700      	movs	r7, #0
    4ee6:	f642 0301 	movw	r3, #10241	; 0x2801
    4eea:	a902      	add	r1, sp, #8
    4eec:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    4eee:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4ef2:	f88d 7008 	strb.w	r7, [sp, #8]
    4ef6:	f8ad 300a 	strh.w	r3, [sp, #10]
    4efa:	f7fc fffd 	bl	1ef8 <bt_uuid_cmp>
    4efe:	b928      	cbnz	r0, 4f0c <find_type_cb+0x34>
		data->group = NULL;
    4f00:	2300      	movs	r3, #0
    4f02:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    4f04:	2001      	movs	r0, #1
}
    4f06:	b008      	add	sp, #32
    4f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    4f0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4f10:	a903      	add	r1, sp, #12
    4f12:	6828      	ldr	r0, [r5, #0]
    4f14:	f88d 700c 	strb.w	r7, [sp, #12]
    4f18:	f8ad 300e 	strh.w	r3, [sp, #14]
    4f1c:	f7fc ffec 	bl	1ef8 <bt_uuid_cmp>
    4f20:	b140      	cbz	r0, 4f34 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    4f22:	68a3      	ldr	r3, [r4, #8]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d0ed      	beq.n	4f04 <find_type_cb+0x2c>
    4f28:	8a2a      	ldrh	r2, [r5, #16]
    4f2a:	8859      	ldrh	r1, [r3, #2]
    4f2c:	4291      	cmp	r1, r2
    4f2e:	d2e9      	bcs.n	4f04 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4f30:	805a      	strh	r2, [r3, #2]
    4f32:	e7e7      	b.n	4f04 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4f34:	6862      	ldr	r2, [r4, #4]
    4f36:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    4f3a:	8992      	ldrh	r2, [r2, #12]
    4f3c:	1a9b      	subs	r3, r3, r2
    4f3e:	2b03      	cmp	r3, #3
    4f40:	d9e1      	bls.n	4f06 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    4f42:	2310      	movs	r3, #16
    4f44:	9000      	str	r0, [sp, #0]
    4f46:	eb0d 0203 	add.w	r2, sp, r3
    4f4a:	686e      	ldr	r6, [r5, #4]
    4f4c:	4629      	mov	r1, r5
    4f4e:	4640      	mov	r0, r8
    4f50:	47b0      	blx	r6
	if (read < 0) {
    4f52:	1e02      	subs	r2, r0, #0
    4f54:	dbd4      	blt.n	4f00 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    4f56:	7c23      	ldrb	r3, [r4, #16]
    4f58:	429a      	cmp	r2, r3
    4f5a:	d1d1      	bne.n	4f00 <find_type_cb+0x28>
    4f5c:	a904      	add	r1, sp, #16
    4f5e:	68e0      	ldr	r0, [r4, #12]
    4f60:	f7fc fe37 	bl	1bd2 <memcmp>
    4f64:	2800      	cmp	r0, #0
    4f66:	d1cb      	bne.n	4f00 <find_type_cb+0x28>
	data->err = 0x00;
    4f68:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4f6a:	6860      	ldr	r0, [r4, #4]
    4f6c:	2104      	movs	r1, #4
    4f6e:	3008      	adds	r0, #8
    4f70:	f00d fd4c 	bl	12a0c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4f74:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4f76:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4f78:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4f7a:	8043      	strh	r3, [r0, #2]
    4f7c:	e7c2      	b.n	4f04 <find_type_cb+0x2c>
	...

00004f80 <bt_att_connected>:
{
    4f80:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4f82:	2317      	movs	r3, #23
{
    4f84:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4f86:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4f8a:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    4f8c:	4906      	ldr	r1, [pc, #24]	; (4fa8 <bt_att_connected+0x28>)
    4f8e:	30a4      	adds	r0, #164	; 0xa4
    4f90:	f00f f888 	bl	140a4 <k_delayed_work_init>
	list->head = NULL;
    4f94:	2300      	movs	r3, #0
    4f96:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    4f9a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    4f9e:	6820      	ldr	r0, [r4, #0]
}
    4fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    4fa4:	f001 bd7c 	b.w	6aa0 <bt_gatt_connected>
    4fa8:	000054cd 	.word	0x000054cd

00004fac <check_perm.isra.4>:
	if ((mask & BT_GATT_PERM_READ) &&
    4fac:	f011 0f01 	tst.w	r1, #1
    4fb0:	7c83      	ldrb	r3, [r0, #18]
    4fb2:	d004      	beq.n	4fbe <check_perm.isra.4+0x12>
    4fb4:	f013 0f15 	tst.w	r3, #21
    4fb8:	d012      	beq.n	4fe0 <check_perm.isra.4+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    4fba:	6842      	ldr	r2, [r0, #4]
    4fbc:	b182      	cbz	r2, 4fe0 <check_perm.isra.4+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    4fbe:	078a      	lsls	r2, r1, #30
    4fc0:	d504      	bpl.n	4fcc <check_perm.isra.4+0x20>
    4fc2:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    4fc6:	d00d      	beq.n	4fe4 <check_perm.isra.4+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4fc8:	6882      	ldr	r2, [r0, #8]
    4fca:	b15a      	cbz	r2, 4fe4 <check_perm.isra.4+0x38>
	mask &= attr->perm;
    4fcc:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    4fce:	f011 0f30 	tst.w	r1, #48	; 0x30
    4fd2:	d109      	bne.n	4fe8 <check_perm.isra.4+0x3c>
	return 0;
    4fd4:	f011 0f0c 	tst.w	r1, #12
    4fd8:	bf14      	ite	ne
    4fda:	200f      	movne	r0, #15
    4fdc:	2000      	moveq	r0, #0
    4fde:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    4fe0:	2002      	movs	r0, #2
    4fe2:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    4fe4:	2003      	movs	r0, #3
    4fe6:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    4fe8:	2005      	movs	r0, #5
}
    4fea:	4770      	bx	lr

00004fec <read_type_cb>:
{
    4fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    4ff0:	680f      	ldr	r7, [r1, #0]
{
    4ff2:	4606      	mov	r6, r0
    4ff4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4ff6:	6800      	ldr	r0, [r0, #0]
    4ff8:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    4ffa:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4ffe:	f7fc ff7b 	bl	1ef8 <bt_uuid_cmp>
    5002:	4680      	mov	r8, r0
    5004:	2800      	cmp	r0, #0
    5006:	d14d      	bne.n	50a4 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5008:	2115      	movs	r1, #21
    500a:	4630      	mov	r0, r6
    500c:	f7ff ffce 	bl	4fac <check_perm.isra.4>
    5010:	4605      	mov	r5, r0
    5012:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5014:	b148      	cbz	r0, 502a <read_type_cb+0x3e>
		if (data->rsp->len) {
    5016:	68e3      	ldr	r3, [r4, #12]
    5018:	781d      	ldrb	r5, [r3, #0]
    501a:	b115      	cbz	r5, 5022 <read_type_cb+0x36>
			data->err = 0x00;
    501c:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5020:	4645      	mov	r5, r8
}
    5022:	4628      	mov	r0, r5
    5024:	b003      	add	sp, #12
    5026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    502a:	68a0      	ldr	r0, [r4, #8]
    502c:	2102      	movs	r1, #2
    502e:	3008      	adds	r0, #8
    5030:	f00d fcec 	bl	12a0c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5034:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5036:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5038:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    503a:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    503c:	898a      	ldrh	r2, [r1, #12]
    503e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    5042:	6889      	ldr	r1, [r1, #8]
    5044:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5048:	9500      	str	r5, [sp, #0]
    504a:	1a9b      	subs	r3, r3, r2
    504c:	b29b      	uxth	r3, r3
    504e:	440a      	add	r2, r1
    5050:	4648      	mov	r0, r9
    5052:	4631      	mov	r1, r6
    5054:	47c0      	blx	r8
	if (read < 0) {
    5056:	1e01      	subs	r1, r0, #0
    5058:	da08      	bge.n	506c <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    505a:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    505e:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5060:	bf9a      	itte	ls
    5062:	4249      	negls	r1, r1
    5064:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5066:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5068:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    506a:	e7da      	b.n	5022 <read_type_cb+0x36>
	if (!data->rsp->len) {
    506c:	68e0      	ldr	r0, [r4, #12]
    506e:	7802      	ldrb	r2, [r0, #0]
    5070:	1c8b      	adds	r3, r1, #2
    5072:	b982      	cbnz	r2, 5096 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5074:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5076:	68a0      	ldr	r0, [r4, #8]
    5078:	3008      	adds	r0, #8
    507a:	f00d fcc7 	bl	12a0c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    507e:	68a3      	ldr	r3, [r4, #8]
    5080:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    5084:	899b      	ldrh	r3, [r3, #12]
    5086:	1aed      	subs	r5, r5, r3
    5088:	68e3      	ldr	r3, [r4, #12]
    508a:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    508c:	429d      	cmp	r5, r3
    508e:	bfd4      	ite	le
    5090:	2500      	movle	r5, #0
    5092:	2501      	movgt	r5, #1
    5094:	e7c5      	b.n	5022 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    5096:	429a      	cmp	r2, r3
    5098:	d0ed      	beq.n	5076 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    509a:	68a2      	ldr	r2, [r4, #8]
    509c:	8993      	ldrh	r3, [r2, #12]
    509e:	3b02      	subs	r3, #2
    50a0:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    50a2:	e7be      	b.n	5022 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    50a4:	2501      	movs	r5, #1
    50a6:	e7bc      	b.n	5022 <read_type_cb+0x36>

000050a8 <uuid_create>:
{
    50a8:	b510      	push	{r4, lr}
	switch (buf->len) {
    50aa:	898a      	ldrh	r2, [r1, #12]
    50ac:	2a02      	cmp	r2, #2
{
    50ae:	4604      	mov	r4, r0
	switch (buf->len) {
    50b0:	d003      	beq.n	50ba <uuid_create+0x12>
    50b2:	2a10      	cmp	r2, #16
    50b4:	d00a      	beq.n	50cc <uuid_create+0x24>
	return false;
    50b6:	2000      	movs	r0, #0
}
    50b8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    50ba:	2300      	movs	r3, #0
    50bc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    50be:	f101 0008 	add.w	r0, r1, #8
    50c2:	f00d fce1 	bl	12a88 <net_buf_simple_pull_le16>
    50c6:	8060      	strh	r0, [r4, #2]
		return true;
    50c8:	2001      	movs	r0, #1
    50ca:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    50cc:	2302      	movs	r3, #2
    50ce:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    50d2:	6889      	ldr	r1, [r1, #8]
    50d4:	f7fc fd92 	bl	1bfc <memcpy>
    50d8:	e7f6      	b.n	50c8 <uuid_create+0x20>
	...

000050dc <att_req_sent>:
{
    50dc:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    50de:	2104      	movs	r1, #4
    50e0:	f7ff fd4c 	bl	4b7c <bt_l2cap_le_lookup_tx_cid>
    50e4:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    50e6:	30cc      	adds	r0, #204	; 0xcc
    50e8:	f00e fcf5 	bl	13ad6 <_impl_k_sem_give>
	if (att->req) {
    50ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    50f0:	b143      	cbz	r3, 5104 <att_req_sent+0x28>
    50f2:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    50f6:	f247 5230 	movw	r2, #30000	; 0x7530
    50fa:	4803      	ldr	r0, [pc, #12]	; (5108 <att_req_sent+0x2c>)
}
    50fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5100:	f00f b844 	b.w	1418c <k_delayed_work_submit_to_queue>
    5104:	bd10      	pop	{r4, pc}
    5106:	bf00      	nop
    5108:	20001990 	.word	0x20001990

0000510c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    510c:	6803      	ldr	r3, [r0, #0]
    510e:	7a5b      	ldrb	r3, [r3, #9]
    5110:	2b03      	cmp	r3, #3
    5112:	d10a      	bne.n	512a <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5114:	f3bf 8f5b 	dmb	ish
    5118:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    511c:	f3bf 8f5b 	dmb	ish
    5120:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5124:	f000 0001 	and.w	r0, r0, #1
    5128:	4770      	bx	lr
    512a:	2001      	movs	r0, #1
}
    512c:	4770      	bx	lr

0000512e <att_prepare_write_req>:
    512e:	2006      	movs	r0, #6
    5130:	4770      	bx	lr

00005132 <att_pdu_sent>:
{
    5132:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5134:	2104      	movs	r1, #4
    5136:	f7ff fd21 	bl	4b7c <bt_l2cap_le_lookup_tx_cid>
}
    513a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    513e:	30cc      	adds	r0, #204	; 0xcc
    5140:	f00e bcc9 	b.w	13ad6 <_impl_k_sem_give>

00005144 <att_rsp_sent>:
{
    5144:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5146:	2104      	movs	r1, #4
    5148:	f7ff fd18 	bl	4b7c <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    514c:	f3bf 8f5b 	dmb	ish
    5150:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5154:	e853 2f00 	ldrex	r2, [r3]
    5158:	f022 0201 	bic.w	r2, r2, #1
    515c:	e843 2100 	strex	r1, r2, [r3]
    5160:	2900      	cmp	r1, #0
    5162:	d1f7      	bne.n	5154 <att_rsp_sent+0x10>
    5164:	f3bf 8f5b 	dmb	ish
    5168:	30cc      	adds	r0, #204	; 0xcc
}
    516a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    516e:	f00e bcb2 	b.w	13ad6 <_impl_k_sem_give>

00005172 <att_cfm_sent>:
{
    5172:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5174:	2104      	movs	r1, #4
    5176:	f7ff fd01 	bl	4b7c <bt_l2cap_le_lookup_tx_cid>
    517a:	f3bf 8f5b 	dmb	ish
    517e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5182:	e853 2f00 	ldrex	r2, [r3]
    5186:	f022 0202 	bic.w	r2, r2, #2
    518a:	e843 2100 	strex	r1, r2, [r3]
    518e:	2900      	cmp	r1, #0
    5190:	d1f7      	bne.n	5182 <att_cfm_sent+0x10>
    5192:	f3bf 8f5b 	dmb	ish
    5196:	30cc      	adds	r0, #204	; 0xcc
}
    5198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    519c:	f00e bc9b 	b.w	13ad6 <_impl_k_sem_give>

000051a0 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    51a0:	7a43      	ldrb	r3, [r0, #9]
    51a2:	2b03      	cmp	r3, #3
{
    51a4:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    51a6:	d00b      	beq.n	51c0 <att_chan_get+0x20>
		BT_WARN("Not connected");
    51a8:	4b15      	ldr	r3, [pc, #84]	; (5200 <att_chan_get+0x60>)
    51aa:	9301      	str	r3, [sp, #4]
    51ac:	9300      	str	r3, [sp, #0]
    51ae:	4a15      	ldr	r2, [pc, #84]	; (5204 <att_chan_get+0x64>)
    51b0:	4b15      	ldr	r3, [pc, #84]	; (5208 <att_chan_get+0x68>)
    51b2:	4916      	ldr	r1, [pc, #88]	; (520c <att_chan_get+0x6c>)
    51b4:	4816      	ldr	r0, [pc, #88]	; (5210 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    51b6:	f7fb fee9 	bl	f8c <printk>
		return NULL;
    51ba:	2000      	movs	r0, #0
}
    51bc:	b002      	add	sp, #8
    51be:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    51c0:	2104      	movs	r1, #4
    51c2:	f7ff fceb 	bl	4b9c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    51c6:	4604      	mov	r4, r0
    51c8:	b950      	cbnz	r0, 51e0 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    51ca:	4b0d      	ldr	r3, [pc, #52]	; (5200 <att_chan_get+0x60>)
    51cc:	9301      	str	r3, [sp, #4]
    51ce:	9300      	str	r3, [sp, #0]
    51d0:	4a10      	ldr	r2, [pc, #64]	; (5214 <att_chan_get+0x74>)
    51d2:	4b0d      	ldr	r3, [pc, #52]	; (5208 <att_chan_get+0x68>)
    51d4:	490d      	ldr	r1, [pc, #52]	; (520c <att_chan_get+0x6c>)
    51d6:	4810      	ldr	r0, [pc, #64]	; (5218 <att_chan_get+0x78>)
    51d8:	f7fb fed8 	bl	f8c <printk>
    51dc:	4620      	mov	r0, r4
    51de:	e7ed      	b.n	51bc <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    51e0:	f3bf 8f5b 	dmb	ish
    51e4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    51e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    51ec:	075b      	lsls	r3, r3, #29
    51ee:	d5f5      	bpl.n	51dc <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    51f0:	4b03      	ldr	r3, [pc, #12]	; (5200 <att_chan_get+0x60>)
    51f2:	9301      	str	r3, [sp, #4]
    51f4:	9300      	str	r3, [sp, #0]
    51f6:	4a03      	ldr	r2, [pc, #12]	; (5204 <att_chan_get+0x64>)
    51f8:	4b03      	ldr	r3, [pc, #12]	; (5208 <att_chan_get+0x68>)
    51fa:	4904      	ldr	r1, [pc, #16]	; (520c <att_chan_get+0x6c>)
    51fc:	4807      	ldr	r0, [pc, #28]	; (521c <att_chan_get+0x7c>)
    51fe:	e7da      	b.n	51b6 <att_chan_get+0x16>
    5200:	00014645 	.word	0x00014645
    5204:	000153dc 	.word	0x000153dc
    5208:	00015ae9 	.word	0x00015ae9
    520c:	000153e3 	.word	0x000153e3
    5210:	00015b2e 	.word	0x00015b2e
    5214:	00015394 	.word	0x00015394
    5218:	00015b4c 	.word	0x00015b4c
    521c:	00015b77 	.word	0x00015b77

00005220 <write_cb>:
{
    5220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5224:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5226:	f8d1 8000 	ldr.w	r8, [r1]
    522a:	212a      	movs	r1, #42	; 0x2a
{
    522c:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    522e:	f7ff febd 	bl	4fac <check_perm.isra.4>
    5232:	4605      	mov	r5, r0
    5234:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5236:	b9e0      	cbnz	r0, 5272 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5238:	8a62      	ldrh	r2, [r4, #18]
    523a:	9001      	str	r0, [sp, #4]
    523c:	9200      	str	r2, [sp, #0]
    523e:	7c23      	ldrb	r3, [r4, #16]
    5240:	68b7      	ldr	r7, [r6, #8]
    5242:	68e2      	ldr	r2, [r4, #12]
    5244:	4631      	mov	r1, r6
    5246:	4640      	mov	r0, r8
    5248:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    524a:	2800      	cmp	r0, #0
    524c:	db02      	blt.n	5254 <write_cb+0x34>
    524e:	7c23      	ldrb	r3, [r4, #16]
    5250:	4298      	cmp	r0, r3
    5252:	d00b      	beq.n	526c <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5254:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5258:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    525a:	bf9a      	itte	ls
    525c:	4240      	negls	r0, r0
    525e:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5260:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5262:	7520      	strb	r0, [r4, #20]
}
    5264:	4628      	mov	r0, r5
    5266:	b002      	add	sp, #8
    5268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    526c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    526e:	2501      	movs	r5, #1
    5270:	e7f8      	b.n	5264 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5272:	2500      	movs	r5, #0
    5274:	e7f6      	b.n	5264 <write_cb+0x44>
	...

00005278 <att_send_req>:
{
    5278:	b573      	push	{r0, r1, r4, r5, r6, lr}
    527a:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    527c:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5280:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5284:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5286:	4630      	mov	r0, r6
    5288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    528c:	f00e fc4b 	bl	13b26 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5290:	4628      	mov	r0, r5
    5292:	f7ff ff3b 	bl	510c <att_is_connected>
    5296:	b978      	cbnz	r0, 52b8 <att_send_req+0x40>
		BT_WARN("Disconnected");
    5298:	4b18      	ldr	r3, [pc, #96]	; (52fc <att_send_req+0x84>)
    529a:	9301      	str	r3, [sp, #4]
    529c:	9300      	str	r3, [sp, #0]
    529e:	4a18      	ldr	r2, [pc, #96]	; (5300 <att_send_req+0x88>)
    52a0:	4b18      	ldr	r3, [pc, #96]	; (5304 <att_send_req+0x8c>)
    52a2:	4919      	ldr	r1, [pc, #100]	; (5308 <att_send_req+0x90>)
    52a4:	4819      	ldr	r0, [pc, #100]	; (530c <att_send_req+0x94>)
    52a6:	f7fb fe71 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    52aa:	4630      	mov	r0, r6
    52ac:	f00e fc13 	bl	13ad6 <_impl_k_sem_give>
		return -ENOTCONN;
    52b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    52b4:	b002      	add	sp, #8
    52b6:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    52b8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    52ba:	f106 0008 	add.w	r0, r6, #8
    52be:	f00d fbeb 	bl	12a98 <net_buf_simple_headroom>
	state->len = buf->len;
    52c2:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    52c4:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    52c6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    52c8:	6920      	ldr	r0, [r4, #16]
    52ca:	682d      	ldr	r5, [r5, #0]
    52cc:	f00d fb9a 	bl	12a04 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    52d0:	6923      	ldr	r3, [r4, #16]
    52d2:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    52d4:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    52d6:	7818      	ldrb	r0, [r3, #0]
    52d8:	f7ff fce0 	bl	4c9c <att_op_get_type>
    52dc:	3801      	subs	r0, #1
    52de:	b2c0      	uxtb	r0, r0
    52e0:	2804      	cmp	r0, #4
    52e2:	bf96      	itet	ls
    52e4:	4b0a      	ldrls	r3, [pc, #40]	; (5310 <att_send_req+0x98>)
    52e6:	4b0b      	ldrhi	r3, [pc, #44]	; (5314 <att_send_req+0x9c>)
    52e8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    52ec:	4632      	mov	r2, r6
    52ee:	4628      	mov	r0, r5
    52f0:	2104      	movs	r1, #4
    52f2:	f7ff fb57 	bl	49a4 <bt_l2cap_send_cb>
	return 0;
    52f6:	2000      	movs	r0, #0
    52f8:	e7dc      	b.n	52b4 <att_send_req+0x3c>
    52fa:	bf00      	nop
    52fc:	00014645 	.word	0x00014645
    5300:	000153dc 	.word	0x000153dc
    5304:	00015aac 	.word	0x00015aac
    5308:	000153e3 	.word	0x000153e3
    530c:	00015bd2 	.word	0x00015bd2
    5310:	00015a98 	.word	0x00015a98
    5314:	00005133 	.word	0x00005133

00005318 <att_handle_rsp>:
{
    5318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    531c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    531e:	30a4      	adds	r0, #164	; 0xa4
{
    5320:	461e      	mov	r6, r3
    5322:	460f      	mov	r7, r1
    5324:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5326:	f00e fecd 	bl	140c4 <k_delayed_work_cancel>
	if (!att->req) {
    532a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    532e:	b9db      	cbnz	r3, 5368 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5330:	4b1c      	ldr	r3, [pc, #112]	; (53a4 <att_handle_rsp+0x8c>)
    5332:	9301      	str	r3, [sp, #4]
    5334:	9300      	str	r3, [sp, #0]
    5336:	4a1c      	ldr	r2, [pc, #112]	; (53a8 <att_handle_rsp+0x90>)
    5338:	4b1c      	ldr	r3, [pc, #112]	; (53ac <att_handle_rsp+0x94>)
    533a:	491d      	ldr	r1, [pc, #116]	; (53b0 <att_handle_rsp+0x98>)
    533c:	481d      	ldr	r0, [pc, #116]	; (53b4 <att_handle_rsp+0x9c>)
    533e:	f7fb fe25 	bl	f8c <printk>
    5342:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5346:	b159      	cbz	r1, 5360 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5348:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    534c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    534e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5352:	4291      	cmp	r1, r2
	list->tail = node;
    5354:	bf08      	it	eq
    5356:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    535a:	4620      	mov	r0, r4
    535c:	f7ff ff8c 	bl	5278 <att_send_req>
}
    5360:	2000      	movs	r0, #0
    5362:	b003      	add	sp, #12
    5364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5368:	6918      	ldr	r0, [r3, #16]
    536a:	b128      	cbz	r0, 5378 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    536c:	f00d fb1c 	bl	129a8 <net_buf_unref>
		att->req->buf = NULL;
    5370:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5374:	2200      	movs	r2, #0
    5376:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5378:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    537c:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    537e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5382:	2500      	movs	r5, #0
    5384:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5386:	463a      	mov	r2, r7
    5388:	9300      	str	r3, [sp, #0]
    538a:	4631      	mov	r1, r6
    538c:	4643      	mov	r3, r8
    538e:	47c8      	blx	r9
	if (!att->req->func) {
    5390:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5394:	6843      	ldr	r3, [r0, #4]
    5396:	b90b      	cbnz	r3, 539c <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    5398:	f7ff fcca 	bl	4d30 <att_req_destroy>
	att->req = NULL;
    539c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    53a0:	e7cf      	b.n	5342 <att_handle_rsp+0x2a>
    53a2:	bf00      	nop
    53a4:	00014645 	.word	0x00014645
    53a8:	000153dc 	.word	0x000153dc
    53ac:	00015ab9 	.word	0x00015ab9
    53b0:	000153e3 	.word	0x000153e3
    53b4:	00015bab 	.word	0x00015bab

000053b8 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    53b8:	898a      	ldrh	r2, [r1, #12]
    53ba:	6889      	ldr	r1, [r1, #8]
    53bc:	2300      	movs	r3, #0
    53be:	f7ff bfab 	b.w	5318 <att_handle_rsp>

000053c2 <att_handle_exec_write_rsp>:
    53c2:	f7ff bff9 	b.w	53b8 <att_confirm>

000053c6 <att_handle_prepare_write_rsp>:
    53c6:	f7ff bff7 	b.w	53b8 <att_confirm>

000053ca <att_handle_write_rsp>:
    53ca:	f7ff bff5 	b.w	53b8 <att_confirm>

000053ce <att_handle_read_mult_rsp>:
    53ce:	f7ff bff3 	b.w	53b8 <att_confirm>

000053d2 <att_handle_read_blob_rsp>:
    53d2:	f7ff bff1 	b.w	53b8 <att_confirm>

000053d6 <att_handle_read_rsp>:
    53d6:	f7ff bfef 	b.w	53b8 <att_confirm>

000053da <att_handle_read_type_rsp>:
    53da:	f7ff bfed 	b.w	53b8 <att_confirm>

000053de <att_handle_find_type_rsp>:
    53de:	f7ff bfeb 	b.w	53b8 <att_confirm>

000053e2 <att_handle_find_info_rsp>:
    53e2:	f7ff bfe9 	b.w	53b8 <att_confirm>

000053e6 <att_mtu_rsp>:
{
    53e6:	b410      	push	{r4}
    53e8:	460a      	mov	r2, r1
	if (!att) {
    53ea:	4603      	mov	r3, r0
    53ec:	b180      	cbz	r0, 5410 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    53ee:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    53f0:	880c      	ldrh	r4, [r1, #0]
    53f2:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    53f4:	bf83      	ittte	hi
    53f6:	2417      	movhi	r4, #23
    53f8:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    53fa:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    53fe:	2200      	movls	r2, #0
    5400:	bf99      	ittee	ls
    5402:	2304      	movls	r3, #4
    5404:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5406:	2300      	movhi	r3, #0
    5408:	8992      	ldrhhi	r2, [r2, #12]
}
    540a:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    540c:	f7ff bf84 	b.w	5318 <att_handle_rsp>
}
    5410:	bc10      	pop	{r4}
    5412:	4770      	bx	lr

00005414 <att_error_rsp>:
{
    5414:	b430      	push	{r4, r5}
	if (!att->req) {
    5416:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    541a:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    541c:	b16a      	cbz	r2, 543a <att_error_rsp+0x26>
	if (att->req->buf) {
    541e:	6913      	ldr	r3, [r2, #16]
    5420:	b12b      	cbz	r3, 542e <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5422:	8995      	ldrh	r5, [r2, #12]
    5424:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5426:	89d2      	ldrh	r2, [r2, #14]
    5428:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    542a:	4429      	add	r1, r5
    542c:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    542e:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5430:	2200      	movs	r2, #0
    5432:	4611      	mov	r1, r2
}
    5434:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5436:	f7ff bf6f 	b.w	5318 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    543a:	230e      	movs	r3, #14
    543c:	e7f8      	b.n	5430 <att_error_rsp+0x1c>

0000543e <att_reset>:
{
    543e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5440:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5444:	4605      	mov	r5, r0
    5446:	f3bf 8f5b 	dmb	ish
    544a:	e853 2f00 	ldrex	r2, [r3]
    544e:	f042 0204 	orr.w	r2, r2, #4
    5452:	e843 2100 	strex	r1, r2, [r3]
    5456:	2900      	cmp	r1, #0
    5458:	d1f7      	bne.n	544a <att_reset+0xc>
    545a:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    545e:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5462:	4620      	mov	r0, r4
    5464:	f00e fb37 	bl	13ad6 <_impl_k_sem_give>
    5468:	4620      	mov	r0, r4
    546a:	f00e fb34 	bl	13ad6 <_impl_k_sem_give>
    546e:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5472:	b98c      	cbnz	r4, 5498 <att_reset+0x5a>
	if (!att->req) {
    5474:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5478:	2200      	movs	r2, #0
    547a:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    547e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5482:	b90b      	cbnz	r3, 5488 <att_reset+0x4a>
}
    5484:	b003      	add	sp, #12
    5486:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5488:	230e      	movs	r3, #14
    548a:	4611      	mov	r1, r2
    548c:	4628      	mov	r0, r5
}
    548e:	b003      	add	sp, #12
    5490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5494:	f7ff bf40 	b.w	5318 <att_handle_rsp>
	return node->next;
    5498:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    549a:	6867      	ldr	r7, [r4, #4]
    549c:	b12f      	cbz	r7, 54aa <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    549e:	2300      	movs	r3, #0
    54a0:	9400      	str	r4, [sp, #0]
    54a2:	461a      	mov	r2, r3
    54a4:	210e      	movs	r1, #14
    54a6:	4618      	mov	r0, r3
    54a8:	47b8      	blx	r7
		att_req_destroy(req);
    54aa:	4620      	mov	r0, r4
    54ac:	f7ff fc40 	bl	4d30 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    54b0:	2e00      	cmp	r6, #0
    54b2:	d0df      	beq.n	5474 <att_reset+0x36>
    54b4:	4634      	mov	r4, r6
    54b6:	6836      	ldr	r6, [r6, #0]
    54b8:	e7ef      	b.n	549a <att_reset+0x5c>

000054ba <bt_att_disconnected>:
{
    54ba:	b510      	push	{r4, lr}
    54bc:	4604      	mov	r4, r0
	att_reset(att);
    54be:	f7ff ffbe 	bl	543e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    54c2:	6820      	ldr	r0, [r4, #0]
}
    54c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    54c8:	f001 bb0c 	b.w	6ae4 <bt_gatt_disconnected>

000054cc <att_timeout>:
{
    54cc:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    54ce:	4b0b      	ldr	r3, [pc, #44]	; (54fc <att_timeout+0x30>)
    54d0:	4a0b      	ldr	r2, [pc, #44]	; (5500 <att_timeout+0x34>)
    54d2:	490c      	ldr	r1, [pc, #48]	; (5504 <att_timeout+0x38>)
    54d4:	9301      	str	r3, [sp, #4]
{
    54d6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    54d8:	9300      	str	r3, [sp, #0]
    54da:	480b      	ldr	r0, [pc, #44]	; (5508 <att_timeout+0x3c>)
    54dc:	4b0b      	ldr	r3, [pc, #44]	; (550c <att_timeout+0x40>)
    54de:	f7fb fd55 	bl	f8c <printk>
	att_reset(att);
    54e2:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    54e6:	f7ff ffaa 	bl	543e <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    54ea:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    54ee:	f001 faf9 	bl	6ae4 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    54f2:	2300      	movs	r3, #0
    54f4:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    54f8:	b002      	add	sp, #8
    54fa:	bd10      	pop	{r4, pc}
    54fc:	00014645 	.word	0x00014645
    5500:	00015394 	.word	0x00015394
    5504:	000153e3 	.word	0x000153e3
    5508:	00015c14 	.word	0x00015c14
    550c:	00015b08 	.word	0x00015b08

00005510 <read_cb>:
{
    5510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5514:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5516:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5518:	f8d1 9000 	ldr.w	r9, [r1]
{
    551c:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    551e:	3008      	adds	r0, #8
    5520:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5522:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5526:	f00d fa71 	bl	12a0c <net_buf_simple_add>
	data->err = 0x00;
    552a:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    552c:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    552e:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5530:	2115      	movs	r1, #21
    5532:	4630      	mov	r0, r6
    5534:	f7ff fd3a 	bl	4fac <check_perm.isra.4>
    5538:	4605      	mov	r5, r0
    553a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    553c:	bb08      	cbnz	r0, 5582 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    553e:	68a1      	ldr	r1, [r4, #8]
    5540:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5544:	898a      	ldrh	r2, [r1, #12]
    5546:	6889      	ldr	r1, [r1, #8]
    5548:	88a0      	ldrh	r0, [r4, #4]
    554a:	9000      	str	r0, [sp, #0]
    554c:	1a9b      	subs	r3, r3, r2
    554e:	6877      	ldr	r7, [r6, #4]
    5550:	440a      	add	r2, r1
    5552:	b29b      	uxth	r3, r3
    5554:	4631      	mov	r1, r6
    5556:	4640      	mov	r0, r8
    5558:	47b8      	blx	r7
	if (read < 0) {
    555a:	1e01      	subs	r1, r0, #0
    555c:	da0b      	bge.n	5576 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    555e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5562:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5564:	bf9a      	itte	ls
    5566:	4249      	negls	r1, r1
    5568:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    556a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    556c:	7421      	strb	r1, [r4, #16]
}
    556e:	4628      	mov	r0, r5
    5570:	b003      	add	sp, #12
    5572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5576:	68a0      	ldr	r0, [r4, #8]
    5578:	3008      	adds	r0, #8
    557a:	f00d fa47 	bl	12a0c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    557e:	2501      	movs	r5, #1
    5580:	e7f5      	b.n	556e <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5582:	463d      	mov	r5, r7
    5584:	e7f3      	b.n	556e <read_cb+0x5e>
	...

00005588 <bt_att_create_pdu>:
{
    5588:	b530      	push	{r4, r5, lr}
    558a:	b085      	sub	sp, #20
    558c:	460d      	mov	r5, r1
    558e:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5590:	f7ff fe06 	bl	51a0 <att_chan_get>
	if (!att) {
    5594:	b1f0      	cbz	r0, 55d4 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    5596:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    559a:	3401      	adds	r4, #1
    559c:	428c      	cmp	r4, r1
    559e:	d90e      	bls.n	55be <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    55a0:	4b0d      	ldr	r3, [pc, #52]	; (55d8 <bt_att_create_pdu+0x50>)
    55a2:	9303      	str	r3, [sp, #12]
    55a4:	9402      	str	r4, [sp, #8]
    55a6:	9101      	str	r1, [sp, #4]
    55a8:	9300      	str	r3, [sp, #0]
    55aa:	4a0c      	ldr	r2, [pc, #48]	; (55dc <bt_att_create_pdu+0x54>)
    55ac:	4b0c      	ldr	r3, [pc, #48]	; (55e0 <bt_att_create_pdu+0x58>)
    55ae:	490d      	ldr	r1, [pc, #52]	; (55e4 <bt_att_create_pdu+0x5c>)
    55b0:	480d      	ldr	r0, [pc, #52]	; (55e8 <bt_att_create_pdu+0x60>)
    55b2:	f7fb fceb 	bl	f8c <printk>
		return NULL;
    55b6:	2400      	movs	r4, #0
}
    55b8:	4620      	mov	r0, r4
    55ba:	b005      	add	sp, #20
    55bc:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    55be:	2100      	movs	r1, #0
    55c0:	4608      	mov	r0, r1
    55c2:	f7ff f9ec 	bl	499e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    55c6:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    55c8:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    55ca:	3008      	adds	r0, #8
    55cc:	f00d fa1e 	bl	12a0c <net_buf_simple_add>
	hdr->code = op;
    55d0:	7005      	strb	r5, [r0, #0]
	return buf;
    55d2:	e7f1      	b.n	55b8 <bt_att_create_pdu+0x30>
		return NULL;
    55d4:	4604      	mov	r4, r0
    55d6:	e7ef      	b.n	55b8 <bt_att_create_pdu+0x30>
    55d8:	00014645 	.word	0x00014645
    55dc:	000153dc 	.word	0x000153dc
    55e0:	00015af6 	.word	0x00015af6
    55e4:	000153e3 	.word	0x000153e3
    55e8:	00015c65 	.word	0x00015c65

000055ec <att_indicate>:
{
    55ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    55ee:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    55f0:	f101 0008 	add.w	r0, r1, #8
{
    55f4:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    55f6:	f00d fa47 	bl	12a88 <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    55fa:	89ab      	ldrh	r3, [r5, #12]
    55fc:	68aa      	ldr	r2, [r5, #8]
    55fe:	4601      	mov	r1, r0
    5600:	4620      	mov	r0, r4
    5602:	f001 fa19 	bl	6a38 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5606:	2200      	movs	r2, #0
    5608:	211e      	movs	r1, #30
    560a:	4620      	mov	r0, r4
    560c:	f7ff ffbc 	bl	5588 <bt_att_create_pdu>
	if (!buf) {
    5610:	4602      	mov	r2, r0
    5612:	b120      	cbz	r0, 561e <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5614:	4b03      	ldr	r3, [pc, #12]	; (5624 <att_indicate+0x38>)
    5616:	2104      	movs	r1, #4
    5618:	4620      	mov	r0, r4
    561a:	f7ff f9c3 	bl	49a4 <bt_l2cap_send_cb>
}
    561e:	2000      	movs	r0, #0
    5620:	bd38      	pop	{r3, r4, r5, pc}
    5622:	bf00      	nop
    5624:	00005173 	.word	0x00005173

00005628 <att_mtu_req>:
{
    5628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    562c:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    562e:	881b      	ldrh	r3, [r3, #0]
    5630:	2b16      	cmp	r3, #22
{
    5632:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5634:	d91c      	bls.n	5670 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5636:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    563a:	2202      	movs	r2, #2
    563c:	2103      	movs	r1, #3
    563e:	4640      	mov	r0, r8
    5640:	f7ff ffa2 	bl	5588 <bt_att_create_pdu>
	if (!pdu) {
    5644:	4607      	mov	r7, r0
    5646:	b1b0      	cbz	r0, 5676 <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5648:	2102      	movs	r1, #2
    564a:	3008      	adds	r0, #8
    564c:	f00d f9de 	bl	12a0c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5650:	2617      	movs	r6, #23
    5652:	2400      	movs	r4, #0
    5654:	7006      	strb	r6, [r0, #0]
    5656:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5658:	4b08      	ldr	r3, [pc, #32]	; (567c <att_mtu_req+0x54>)
    565a:	4640      	mov	r0, r8
    565c:	463a      	mov	r2, r7
    565e:	2104      	movs	r1, #4
    5660:	f7ff f9a0 	bl	49a4 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5664:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5666:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    566a:	4620      	mov	r0, r4
    566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5670:	2004      	movs	r0, #4
    5672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5676:	200e      	movs	r0, #14
}
    5678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    567c:	00005145 	.word	0x00005145

00005680 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5684:	4688      	mov	r8, r1
    5686:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5688:	2101      	movs	r1, #1
    568a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    568c:	4605      	mov	r5, r0
    568e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5690:	f7ff ff7a 	bl	5588 <bt_att_create_pdu>
	if (!buf) {
    5694:	4604      	mov	r4, r0
    5696:	b180      	cbz	r0, 56ba <send_err_rsp.part.10+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5698:	2104      	movs	r1, #4
    569a:	3008      	adds	r0, #8
    569c:	f00d f9b6 	bl	12a0c <net_buf_simple_add>
	rsp->request = req;
    56a0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    56a4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    56a6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    56aa:	4622      	mov	r2, r4
    56ac:	4628      	mov	r0, r5
    56ae:	4b04      	ldr	r3, [pc, #16]	; (56c0 <send_err_rsp.part.10+0x40>)
    56b0:	2104      	movs	r1, #4
}
    56b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    56b6:	f7ff b975 	b.w	49a4 <bt_l2cap_send_cb>
    56ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56be:	bf00      	nop
    56c0:	00005145 	.word	0x00005145

000056c4 <bt_att_recv>:
{
    56c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    56c6:	898b      	ldrh	r3, [r1, #12]
{
    56c8:	b085      	sub	sp, #20
    56ca:	4604      	mov	r4, r0
    56cc:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    56ce:	b953      	cbnz	r3, 56e6 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    56d0:	4b4b      	ldr	r3, [pc, #300]	; (5800 <bt_att_recv+0x13c>)
    56d2:	9301      	str	r3, [sp, #4]
    56d4:	9300      	str	r3, [sp, #0]
    56d6:	4a4b      	ldr	r2, [pc, #300]	; (5804 <bt_att_recv+0x140>)
    56d8:	4b4b      	ldr	r3, [pc, #300]	; (5808 <bt_att_recv+0x144>)
    56da:	494c      	ldr	r1, [pc, #304]	; (580c <bt_att_recv+0x148>)
    56dc:	484c      	ldr	r0, [pc, #304]	; (5810 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    56de:	f7fb fc55 	bl	f8c <printk>
}
    56e2:	b005      	add	sp, #20
    56e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    56e6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    56e8:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    56ea:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    56ee:	f00d f9bb 	bl	12a68 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    56f2:	4a48      	ldr	r2, [pc, #288]	; (5814 <bt_att_recv+0x150>)
    56f4:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    56f6:	2300      	movs	r3, #0
    56f8:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    56fa:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    56fe:	4286      	cmp	r6, r0
    5700:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5704:	d11c      	bne.n	5740 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    5706:	4472      	add	r2, lr
    5708:	7896      	ldrb	r6, [r2, #2]
    570a:	2e01      	cmp	r6, #1
    570c:	d136      	bne.n	577c <bt_att_recv+0xb8>
    570e:	f3bf 8f5b 	dmb	ish
    5712:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5716:	e852 3f00 	ldrex	r3, [r2]
    571a:	f043 0001 	orr.w	r0, r3, #1
    571e:	e842 0c00 	strex	ip, r0, [r2]
    5722:	f1bc 0f00 	cmp.w	ip, #0
    5726:	d1f6      	bne.n	5716 <bt_att_recv+0x52>
    5728:	f3bf 8f5b 	dmb	ish
    572c:	07da      	lsls	r2, r3, #31
    572e:	d540      	bpl.n	57b2 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    5730:	4b33      	ldr	r3, [pc, #204]	; (5800 <bt_att_recv+0x13c>)
    5732:	9301      	str	r3, [sp, #4]
    5734:	9300      	str	r3, [sp, #0]
    5736:	4a38      	ldr	r2, [pc, #224]	; (5818 <bt_att_recv+0x154>)
    5738:	4b33      	ldr	r3, [pc, #204]	; (5808 <bt_att_recv+0x144>)
    573a:	4934      	ldr	r1, [pc, #208]	; (580c <bt_att_recv+0x148>)
    573c:	4837      	ldr	r0, [pc, #220]	; (581c <bt_att_recv+0x158>)
    573e:	e7ce      	b.n	56de <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5740:	3301      	adds	r3, #1
    5742:	2b1b      	cmp	r3, #27
    5744:	d1d9      	bne.n	56fa <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5746:	4b2e      	ldr	r3, [pc, #184]	; (5800 <bt_att_recv+0x13c>)
    5748:	9302      	str	r3, [sp, #8]
    574a:	9001      	str	r0, [sp, #4]
    574c:	9300      	str	r3, [sp, #0]
    574e:	4a32      	ldr	r2, [pc, #200]	; (5818 <bt_att_recv+0x154>)
    5750:	4b2d      	ldr	r3, [pc, #180]	; (5808 <bt_att_recv+0x144>)
    5752:	492e      	ldr	r1, [pc, #184]	; (580c <bt_att_recv+0x148>)
    5754:	4832      	ldr	r0, [pc, #200]	; (5820 <bt_att_recv+0x15c>)
    5756:	f7fb fc19 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    575a:	782d      	ldrb	r5, [r5, #0]
    575c:	4628      	mov	r0, r5
    575e:	f7ff fa9d 	bl	4c9c <att_op_get_type>
    5762:	2800      	cmp	r0, #0
    5764:	d0bd      	beq.n	56e2 <bt_att_recv+0x1e>
	if (!req) {
    5766:	2d00      	cmp	r5, #0
    5768:	d0bb      	beq.n	56e2 <bt_att_recv+0x1e>
    576a:	2306      	movs	r3, #6
    576c:	2200      	movs	r2, #0
    576e:	4629      	mov	r1, r5
    5770:	6820      	ldr	r0, [r4, #0]
}
    5772:	b005      	add	sp, #20
    5774:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5778:	f7ff bf82 	b.w	5680 <send_err_rsp.part.10>
		} else if (handler->type == ATT_INDICATION &&
    577c:	2e05      	cmp	r6, #5
    577e:	d118      	bne.n	57b2 <bt_att_recv+0xee>
    5780:	f3bf 8f5b 	dmb	ish
    5784:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5788:	e852 3f00 	ldrex	r3, [r2]
    578c:	f043 0002 	orr.w	r0, r3, #2
    5790:	e842 0c00 	strex	ip, r0, [r2]
    5794:	f1bc 0f00 	cmp.w	ip, #0
    5798:	d1f6      	bne.n	5788 <bt_att_recv+0xc4>
    579a:	f3bf 8f5b 	dmb	ish
    579e:	079b      	lsls	r3, r3, #30
    57a0:	d507      	bpl.n	57b2 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    57a2:	4b17      	ldr	r3, [pc, #92]	; (5800 <bt_att_recv+0x13c>)
    57a4:	9301      	str	r3, [sp, #4]
    57a6:	9300      	str	r3, [sp, #0]
    57a8:	4a1b      	ldr	r2, [pc, #108]	; (5818 <bt_att_recv+0x154>)
    57aa:	4b17      	ldr	r3, [pc, #92]	; (5808 <bt_att_recv+0x144>)
    57ac:	4917      	ldr	r1, [pc, #92]	; (580c <bt_att_recv+0x148>)
    57ae:	481d      	ldr	r0, [pc, #116]	; (5824 <bt_att_recv+0x160>)
    57b0:	e795      	b.n	56de <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    57b2:	eb01 030e 	add.w	r3, r1, lr
    57b6:	89ba      	ldrh	r2, [r7, #12]
    57b8:	7859      	ldrb	r1, [r3, #1]
    57ba:	4291      	cmp	r1, r2
    57bc:	d90f      	bls.n	57de <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    57be:	4b10      	ldr	r3, [pc, #64]	; (5800 <bt_att_recv+0x13c>)
    57c0:	9303      	str	r3, [sp, #12]
    57c2:	7829      	ldrb	r1, [r5, #0]
    57c4:	9102      	str	r1, [sp, #8]
    57c6:	9201      	str	r2, [sp, #4]
    57c8:	9300      	str	r3, [sp, #0]
    57ca:	4a0e      	ldr	r2, [pc, #56]	; (5804 <bt_att_recv+0x140>)
    57cc:	4b0e      	ldr	r3, [pc, #56]	; (5808 <bt_att_recv+0x144>)
    57ce:	490f      	ldr	r1, [pc, #60]	; (580c <bt_att_recv+0x148>)
    57d0:	4815      	ldr	r0, [pc, #84]	; (5828 <bt_att_recv+0x164>)
    57d2:	f7fb fbdb 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    57d6:	2e01      	cmp	r6, #1
    57d8:	d183      	bne.n	56e2 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    57da:	2304      	movs	r3, #4
    57dc:	e00a      	b.n	57f4 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    57de:	685b      	ldr	r3, [r3, #4]
    57e0:	4639      	mov	r1, r7
    57e2:	4620      	mov	r0, r4
    57e4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    57e6:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    57e8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    57ea:	f47f af7a 	bne.w	56e2 <bt_att_recv+0x1e>
    57ee:	2800      	cmp	r0, #0
    57f0:	f43f af77 	beq.w	56e2 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    57f4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    57f6:	2900      	cmp	r1, #0
    57f8:	f43f af73 	beq.w	56e2 <bt_att_recv+0x1e>
    57fc:	2200      	movs	r2, #0
    57fe:	e7b7      	b.n	5770 <bt_att_recv+0xac>
    5800:	00014645 	.word	0x00014645
    5804:	00015394 	.word	0x00015394
    5808:	00015add 	.word	0x00015add
    580c:	000153e3 	.word	0x000153e3
    5810:	00015c9a 	.word	0x00015c9a
    5814:	00015d9c 	.word	0x00015d9c
    5818:	000153dc 	.word	0x000153dc
    581c:	00015cc5 	.word	0x00015cc5
    5820:	00015d4f 	.word	0x00015d4f
    5824:	00015cf1 	.word	0x00015cf1
    5828:	00015d20 	.word	0x00015d20

0000582c <att_read_group_req>:
{
    582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5830:	898b      	ldrh	r3, [r1, #12]
    5832:	2b06      	cmp	r3, #6
{
    5834:	b08d      	sub	sp, #52	; 0x34
    5836:	4680      	mov	r8, r0
    5838:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    583a:	d001      	beq.n	5840 <att_read_group_req+0x14>
    583c:	2b14      	cmp	r3, #20
    583e:	d168      	bne.n	5912 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5840:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5842:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5844:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5848:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    584c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    584e:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5850:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5852:	f00d f909 	bl	12a68 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5856:	4621      	mov	r1, r4
    5858:	4638      	mov	r0, r7
    585a:	f7ff fc25 	bl	50a8 <uuid_create>
    585e:	2800      	cmp	r0, #0
    5860:	d059      	beq.n	5916 <att_read_group_req+0xea>
	if (!start || !end) {
    5862:	2d00      	cmp	r5, #0
    5864:	d05a      	beq.n	591c <att_read_group_req+0xf0>
    5866:	2400      	movs	r4, #0
    5868:	2e00      	cmp	r6, #0
    586a:	d056      	beq.n	591a <att_read_group_req+0xee>
	if (start > end) {
    586c:	42b5      	cmp	r5, r6
    586e:	d855      	bhi.n	591c <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5870:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5874:	4669      	mov	r1, sp
    5876:	4638      	mov	r0, r7
    5878:	f88d 4000 	strb.w	r4, [sp]
    587c:	f8ad 3002 	strh.w	r3, [sp, #2]
    5880:	f7fc fb3a 	bl	1ef8 <bt_uuid_cmp>
    5884:	bb38      	cbnz	r0, 58d6 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5886:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    588a:	2214      	movs	r2, #20
    588c:	2100      	movs	r1, #0
    588e:	a807      	add	r0, sp, #28
    5890:	f7fc f9e0 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5894:	2201      	movs	r2, #1
    5896:	2111      	movs	r1, #17
    5898:	4648      	mov	r0, r9
    589a:	f7ff fe75 	bl	5588 <bt_att_create_pdu>
    589e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    58a0:	2800      	cmp	r0, #0
    58a2:	d038      	beq.n	5916 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58a4:	2101      	movs	r1, #1
    58a6:	3008      	adds	r0, #8
	data.uuid = uuid;
    58a8:	9708      	str	r7, [sp, #32]
	data.att = att;
    58aa:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58ae:	f00d f8ad 	bl	12a0c <net_buf_simple_add>
	data.rsp->len = 0;
    58b2:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    58b4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58b6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    58b8:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58ba:	4a1c      	ldr	r2, [pc, #112]	; (592c <att_read_group_req+0x100>)
	data.group = NULL;
    58bc:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    58be:	4631      	mov	r1, r6
    58c0:	4628      	mov	r0, r5
    58c2:	f000 ff71 	bl	67a8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    58c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    58c8:	781c      	ldrb	r4, [r3, #0]
    58ca:	b9d4      	cbnz	r4, 5902 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    58cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    58ce:	f00d f86b 	bl	129a8 <net_buf_unref>
    58d2:	230a      	movs	r3, #10
    58d4:	e00c      	b.n	58f0 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    58d6:	f642 0301 	movw	r3, #10241	; 0x2801
    58da:	a901      	add	r1, sp, #4
    58dc:	4638      	mov	r0, r7
    58de:	f88d 4004 	strb.w	r4, [sp, #4]
    58e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    58e6:	f7fc fb07 	bl	1ef8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    58ea:	2800      	cmp	r0, #0
    58ec:	d0cb      	beq.n	5886 <att_read_group_req+0x5a>
    58ee:	2310      	movs	r3, #16
    58f0:	462a      	mov	r2, r5
    58f2:	2110      	movs	r1, #16
    58f4:	4648      	mov	r0, r9
    58f6:	f7ff fec3 	bl	5680 <send_err_rsp.part.10>
}
    58fa:	4620      	mov	r0, r4
    58fc:	b00d      	add	sp, #52	; 0x34
    58fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5902:	4b0b      	ldr	r3, [pc, #44]	; (5930 <att_read_group_req+0x104>)
    5904:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5906:	2104      	movs	r1, #4
    5908:	4648      	mov	r0, r9
    590a:	f7ff f84b 	bl	49a4 <bt_l2cap_send_cb>
		return 0;
    590e:	2400      	movs	r4, #0
    5910:	e7f3      	b.n	58fa <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5912:	2404      	movs	r4, #4
    5914:	e7f1      	b.n	58fa <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5916:	240e      	movs	r4, #14
    5918:	e7ef      	b.n	58fa <att_read_group_req+0xce>
			*err = 0;
    591a:	4635      	mov	r5, r6
    591c:	2301      	movs	r3, #1
    591e:	462a      	mov	r2, r5
    5920:	2110      	movs	r1, #16
    5922:	4648      	mov	r0, r9
    5924:	f7ff feac 	bl	5680 <send_err_rsp.part.10>
    5928:	e7f1      	b.n	590e <att_read_group_req+0xe2>
    592a:	bf00      	nop
    592c:	00004d71 	.word	0x00004d71
    5930:	00005145 	.word	0x00005145

00005934 <att_read_mult_req>:
{
    5934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5938:	6804      	ldr	r4, [r0, #0]
{
    593a:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    593c:	2214      	movs	r2, #20
{
    593e:	4606      	mov	r6, r0
    5940:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5942:	a801      	add	r0, sp, #4
    5944:	2100      	movs	r1, #0
    5946:	f7fc f985 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    594a:	2200      	movs	r2, #0
    594c:	210f      	movs	r1, #15
    594e:	4620      	mov	r0, r4
    5950:	f7ff fe1a 	bl	5588 <bt_att_create_pdu>
    5954:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5956:	b368      	cbz	r0, 59b4 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5958:	f8df 9060 	ldr.w	r9, [pc, #96]	; 59bc <att_read_mult_req+0x88>
	data.att = att;
    595c:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    595e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5962:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5966:	89ab      	ldrh	r3, [r5, #12]
    5968:	2b01      	cmp	r3, #1
    596a:	d806      	bhi.n	597a <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    596c:	4b12      	ldr	r3, [pc, #72]	; (59b8 <att_read_mult_req+0x84>)
    596e:	9a03      	ldr	r2, [sp, #12]
    5970:	2104      	movs	r1, #4
    5972:	4620      	mov	r0, r4
    5974:	f7ff f816 	bl	49a4 <bt_l2cap_send_cb>
    5978:	e018      	b.n	59ac <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    597a:	4638      	mov	r0, r7
    597c:	f00d f884 	bl	12a88 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5980:	ab01      	add	r3, sp, #4
    5982:	464a      	mov	r2, r9
    5984:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5986:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5988:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    598c:	f000 ff0c 	bl	67a8 <bt_gatt_foreach_attr>
		if (data.err) {
    5990:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5994:	2b00      	cmp	r3, #0
    5996:	d0e6      	beq.n	5966 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5998:	9803      	ldr	r0, [sp, #12]
    599a:	f00d f805 	bl	129a8 <net_buf_unref>
    599e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    59a2:	4632      	mov	r2, r6
    59a4:	210e      	movs	r1, #14
    59a6:	4620      	mov	r0, r4
    59a8:	f7ff fe6a 	bl	5680 <send_err_rsp.part.10>
	return 0;
    59ac:	2000      	movs	r0, #0
}
    59ae:	b007      	add	sp, #28
    59b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    59b4:	200e      	movs	r0, #14
    59b6:	e7fa      	b.n	59ae <att_read_mult_req+0x7a>
    59b8:	00005145 	.word	0x00005145
    59bc:	00005511 	.word	0x00005511

000059c0 <att_read_rsp>:
{
    59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59c4:	4607      	mov	r7, r0
    59c6:	b086      	sub	sp, #24
    59c8:	460c      	mov	r4, r1
    59ca:	4690      	mov	r8, r2
	if (!handle) {
    59cc:	461d      	mov	r5, r3
    59ce:	b3a3      	cbz	r3, 5a3a <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    59d0:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    59d2:	2214      	movs	r2, #20
    59d4:	2100      	movs	r1, #0
    59d6:	a801      	add	r0, sp, #4
    59d8:	f7fc f93c 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    59dc:	2200      	movs	r2, #0
    59de:	4641      	mov	r1, r8
    59e0:	4630      	mov	r0, r6
    59e2:	f7ff fdd1 	bl	5588 <bt_att_create_pdu>
    59e6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    59e8:	b348      	cbz	r0, 5a3e <att_read_rsp+0x7e>
	data.offset = offset;
    59ea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    59ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    59f2:	2301      	movs	r3, #1
    59f4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    59f8:	4a12      	ldr	r2, [pc, #72]	; (5a44 <att_read_rsp+0x84>)
	data.att = att;
    59fa:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    59fc:	ab01      	add	r3, sp, #4
    59fe:	4629      	mov	r1, r5
    5a00:	4628      	mov	r0, r5
    5a02:	f000 fed1 	bl	67a8 <bt_gatt_foreach_attr>
	if (data.err) {
    5a06:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5a0a:	b17f      	cbz	r7, 5a2c <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5a0c:	9803      	ldr	r0, [sp, #12]
    5a0e:	f00c ffcb 	bl	129a8 <net_buf_unref>
	if (!req) {
    5a12:	b13c      	cbz	r4, 5a24 <att_read_rsp+0x64>
    5a14:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5a18:	462a      	mov	r2, r5
    5a1a:	4621      	mov	r1, r4
    5a1c:	4630      	mov	r0, r6
    5a1e:	f7ff fe2f 	bl	5680 <send_err_rsp.part.10>
		return 0;
    5a22:	2400      	movs	r4, #0
}
    5a24:	4620      	mov	r0, r4
    5a26:	b006      	add	sp, #24
    5a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5a2c:	4b06      	ldr	r3, [pc, #24]	; (5a48 <att_read_rsp+0x88>)
    5a2e:	9a03      	ldr	r2, [sp, #12]
    5a30:	2104      	movs	r1, #4
    5a32:	4630      	mov	r0, r6
    5a34:	f7fe ffb6 	bl	49a4 <bt_l2cap_send_cb>
    5a38:	e7f3      	b.n	5a22 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5a3a:	2401      	movs	r4, #1
    5a3c:	e7f2      	b.n	5a24 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5a3e:	240e      	movs	r4, #14
    5a40:	e7f0      	b.n	5a24 <att_read_rsp+0x64>
    5a42:	bf00      	nop
    5a44:	00005511 	.word	0x00005511
    5a48:	00005145 	.word	0x00005145

00005a4c <att_read_blob_req>:
{
    5a4c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5a4e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5a50:	8813      	ldrh	r3, [r2, #0]
    5a52:	8852      	ldrh	r2, [r2, #2]
    5a54:	9200      	str	r2, [sp, #0]
    5a56:	210c      	movs	r1, #12
    5a58:	220d      	movs	r2, #13
    5a5a:	f7ff ffb1 	bl	59c0 <att_read_rsp>
}
    5a5e:	b003      	add	sp, #12
    5a60:	f85d fb04 	ldr.w	pc, [sp], #4

00005a64 <att_read_req>:
{
    5a64:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5a66:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5a68:	2200      	movs	r2, #0
    5a6a:	881b      	ldrh	r3, [r3, #0]
    5a6c:	9200      	str	r2, [sp, #0]
    5a6e:	210a      	movs	r1, #10
    5a70:	220b      	movs	r2, #11
    5a72:	f7ff ffa5 	bl	59c0 <att_read_rsp>
}
    5a76:	b003      	add	sp, #12
    5a78:	f85d fb04 	ldr.w	pc, [sp], #4

00005a7c <att_read_type_req>:
{
    5a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5a80:	898b      	ldrh	r3, [r1, #12]
    5a82:	2b06      	cmp	r3, #6
{
    5a84:	b08d      	sub	sp, #52	; 0x34
    5a86:	4607      	mov	r7, r0
    5a88:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5a8a:	d001      	beq.n	5a90 <att_read_type_req+0x14>
    5a8c:	2b14      	cmp	r3, #20
    5a8e:	d152      	bne.n	5b36 <att_read_type_req+0xba>
	req = (void *)buf->data;
    5a90:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5a92:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5a94:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5a98:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5a9c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5a9e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5aa0:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5aa4:	f00c ffe0 	bl	12a68 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5aa8:	4631      	mov	r1, r6
    5aaa:	4640      	mov	r0, r8
    5aac:	f7ff fafc 	bl	50a8 <uuid_create>
    5ab0:	b198      	cbz	r0, 5ada <att_read_type_req+0x5e>
	if (!start || !end) {
    5ab2:	2d00      	cmp	r5, #0
    5ab4:	d042      	beq.n	5b3c <att_read_type_req+0xc0>
    5ab6:	2c00      	cmp	r4, #0
    5ab8:	d03f      	beq.n	5b3a <att_read_type_req+0xbe>
	if (start > end) {
    5aba:	42a5      	cmp	r5, r4
    5abc:	d83e      	bhi.n	5b3c <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5abe:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5ac0:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5ac2:	2100      	movs	r1, #0
    5ac4:	eb0d 0002 	add.w	r0, sp, r2
    5ac8:	f7fc f8c4 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5acc:	2201      	movs	r2, #1
    5ace:	2109      	movs	r1, #9
    5ad0:	4630      	mov	r0, r6
    5ad2:	f7ff fd59 	bl	5588 <bt_att_create_pdu>
    5ad6:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5ad8:	b908      	cbnz	r0, 5ade <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5ada:	240e      	movs	r4, #14
    5adc:	e027      	b.n	5b2e <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ade:	2101      	movs	r1, #1
    5ae0:	3008      	adds	r0, #8
	data.att = att;
    5ae2:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5ae4:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ae8:	f00c ff90 	bl	12a0c <net_buf_simple_add>
	data.rsp->len = 0;
    5aec:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5aee:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5af0:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5af2:	4621      	mov	r1, r4
	data.rsp->len = 0;
    5af4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5af6:	4a14      	ldr	r2, [pc, #80]	; (5b48 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5af8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5afc:	4628      	mov	r0, r5
    5afe:	ab06      	add	r3, sp, #24
    5b00:	f000 fe52 	bl	67a8 <bt_gatt_foreach_attr>
	if (data.err) {
    5b04:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    5b08:	b15c      	cbz	r4, 5b22 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    5b0a:	9808      	ldr	r0, [sp, #32]
    5b0c:	f00c ff4c 	bl	129a8 <net_buf_unref>
    5b10:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5b14:	462a      	mov	r2, r5
    5b16:	2108      	movs	r1, #8
    5b18:	4630      	mov	r0, r6
    5b1a:	f7ff fdb1 	bl	5680 <send_err_rsp.part.10>
		return 0;
    5b1e:	2400      	movs	r4, #0
    5b20:	e005      	b.n	5b2e <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5b22:	4b0a      	ldr	r3, [pc, #40]	; (5b4c <att_read_type_req+0xd0>)
    5b24:	9a08      	ldr	r2, [sp, #32]
    5b26:	2104      	movs	r1, #4
    5b28:	4630      	mov	r0, r6
    5b2a:	f7fe ff3b 	bl	49a4 <bt_l2cap_send_cb>
}
    5b2e:	4620      	mov	r0, r4
    5b30:	b00d      	add	sp, #52	; 0x34
    5b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5b36:	2404      	movs	r4, #4
    5b38:	e7f9      	b.n	5b2e <att_read_type_req+0xb2>
			*err = 0;
    5b3a:	4625      	mov	r5, r4
    5b3c:	2301      	movs	r3, #1
    5b3e:	462a      	mov	r2, r5
    5b40:	2108      	movs	r1, #8
    5b42:	4648      	mov	r0, r9
    5b44:	e7e9      	b.n	5b1a <att_read_type_req+0x9e>
    5b46:	bf00      	nop
    5b48:	00004fed 	.word	0x00004fed
    5b4c:	00005145 	.word	0x00005145

00005b50 <att_find_type_req>:
{
    5b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5b54:	f8d0 9000 	ldr.w	r9, [r0]
{
    5b58:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5b5a:	4608      	mov	r0, r1
{
    5b5c:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    5b5e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    5b62:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5b64:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5b66:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5b68:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5b6a:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5b6c:	f00c ff7c 	bl	12a68 <net_buf_simple_pull>
    5b70:	4682      	mov	sl, r0
	if (!start || !end) {
    5b72:	2d00      	cmp	r5, #0
    5b74:	d057      	beq.n	5c26 <att_find_type_req+0xd6>
    5b76:	2400      	movs	r4, #0
    5b78:	2f00      	cmp	r7, #0
    5b7a:	d053      	beq.n	5c24 <att_find_type_req+0xd4>
	if (start > end) {
    5b7c:	42bd      	cmp	r5, r7
    5b7e:	d852      	bhi.n	5c26 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    5b80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5b84:	a902      	add	r1, sp, #8
    5b86:	a801      	add	r0, sp, #4
    5b88:	f8ad 6006 	strh.w	r6, [sp, #6]
    5b8c:	f88d 4004 	strb.w	r4, [sp, #4]
    5b90:	f88d 4008 	strb.w	r4, [sp, #8]
    5b94:	f8ad 300a 	strh.w	r3, [sp, #10]
    5b98:	f7fc f9ae 	bl	1ef8 <bt_uuid_cmp>
    5b9c:	4606      	mov	r6, r0
    5b9e:	b148      	cbz	r0, 5bb4 <att_find_type_req+0x64>
    5ba0:	230a      	movs	r3, #10
    5ba2:	462a      	mov	r2, r5
    5ba4:	2106      	movs	r1, #6
    5ba6:	4648      	mov	r0, r9
    5ba8:	f7ff fd6a 	bl	5680 <send_err_rsp.part.10>
}
    5bac:	4620      	mov	r0, r4
    5bae:	b009      	add	sp, #36	; 0x24
    5bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5bb4:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5bb8:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5bbc:	2214      	movs	r2, #20
    5bbe:	4631      	mov	r1, r6
    5bc0:	a803      	add	r0, sp, #12
    5bc2:	f7fc f847 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5bc6:	4632      	mov	r2, r6
    5bc8:	2107      	movs	r1, #7
    5bca:	4648      	mov	r0, r9
    5bcc:	f7ff fcdc 	bl	5588 <bt_att_create_pdu>
    5bd0:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    5bd2:	b328      	cbz	r0, 5c20 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5bd4:	230a      	movs	r3, #10
    5bd6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5bda:	4a14      	ldr	r2, [pc, #80]	; (5c2c <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5bdc:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5be0:	ab03      	add	r3, sp, #12
    5be2:	4639      	mov	r1, r7
    5be4:	4628      	mov	r0, r5
	data.att = att;
    5be6:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    5bea:	9605      	str	r6, [sp, #20]
	data.value = value;
    5bec:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5bf0:	f000 fdda 	bl	67a8 <bt_gatt_foreach_attr>
	if (data.err) {
    5bf4:	f89d 401d 	ldrb.w	r4, [sp, #29]
    5bf8:	b15c      	cbz	r4, 5c12 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5bfa:	9804      	ldr	r0, [sp, #16]
    5bfc:	f00c fed4 	bl	129a8 <net_buf_unref>
    5c00:	f89d 301d 	ldrb.w	r3, [sp, #29]
    5c04:	462a      	mov	r2, r5
    5c06:	2106      	movs	r1, #6
    5c08:	4648      	mov	r0, r9
    5c0a:	f7ff fd39 	bl	5680 <send_err_rsp.part.10>
		return 0;
    5c0e:	2400      	movs	r4, #0
    5c10:	e7cc      	b.n	5bac <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c12:	4b07      	ldr	r3, [pc, #28]	; (5c30 <att_find_type_req+0xe0>)
    5c14:	9a04      	ldr	r2, [sp, #16]
    5c16:	2104      	movs	r1, #4
    5c18:	4648      	mov	r0, r9
    5c1a:	f7fe fec3 	bl	49a4 <bt_l2cap_send_cb>
    5c1e:	e7c5      	b.n	5bac <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    5c20:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    5c22:	e7c3      	b.n	5bac <att_find_type_req+0x5c>
			*err = 0;
    5c24:	463d      	mov	r5, r7
    5c26:	2301      	movs	r3, #1
    5c28:	e7ec      	b.n	5c04 <att_find_type_req+0xb4>
    5c2a:	bf00      	nop
    5c2c:	00004ed9 	.word	0x00004ed9
    5c30:	00005145 	.word	0x00005145

00005c34 <att_find_info_req>:
{
    5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5c36:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5c38:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5c3a:	881d      	ldrh	r5, [r3, #0]
{
    5c3c:	b085      	sub	sp, #20
    5c3e:	4607      	mov	r7, r0
	if (!start || !end) {
    5c40:	b375      	cbz	r5, 5ca0 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    5c42:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5c44:	b35c      	cbz	r4, 5c9e <att_find_info_req+0x6a>
	if (start > end) {
    5c46:	42a5      	cmp	r5, r4
    5c48:	d82a      	bhi.n	5ca0 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5c4a:	2210      	movs	r2, #16
    5c4c:	2100      	movs	r1, #0
    5c4e:	4668      	mov	r0, sp
    5c50:	f7fc f800 	bl	1c54 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5c54:	2200      	movs	r2, #0
    5c56:	2105      	movs	r1, #5
    5c58:	4630      	mov	r0, r6
    5c5a:	f7ff fc95 	bl	5588 <bt_att_create_pdu>
    5c5e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    5c60:	b910      	cbnz	r0, 5c68 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    5c62:	200e      	movs	r0, #14
}
    5c64:	b005      	add	sp, #20
    5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5c68:	4621      	mov	r1, r4
    5c6a:	466b      	mov	r3, sp
    5c6c:	4a0d      	ldr	r2, [pc, #52]	; (5ca4 <att_find_info_req+0x70>)
	data.att = att;
    5c6e:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5c70:	4628      	mov	r0, r5
    5c72:	f000 fd99 	bl	67a8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5c76:	9c02      	ldr	r4, [sp, #8]
    5c78:	b94c      	cbnz	r4, 5c8e <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5c7a:	9801      	ldr	r0, [sp, #4]
    5c7c:	f00c fe94 	bl	129a8 <net_buf_unref>
    5c80:	230a      	movs	r3, #10
    5c82:	462a      	mov	r2, r5
    5c84:	2104      	movs	r1, #4
    5c86:	4630      	mov	r0, r6
    5c88:	f7ff fcfa 	bl	5680 <send_err_rsp.part.10>
    5c8c:	e005      	b.n	5c9a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5c8e:	4b06      	ldr	r3, [pc, #24]	; (5ca8 <att_find_info_req+0x74>)
    5c90:	9a01      	ldr	r2, [sp, #4]
    5c92:	2104      	movs	r1, #4
    5c94:	4630      	mov	r0, r6
    5c96:	f7fe fe85 	bl	49a4 <bt_l2cap_send_cb>
		return 0;
    5c9a:	2000      	movs	r0, #0
    5c9c:	e7e2      	b.n	5c64 <att_find_info_req+0x30>
			*err = 0;
    5c9e:	4625      	mov	r5, r4
    5ca0:	2301      	movs	r3, #1
    5ca2:	e7ee      	b.n	5c82 <att_find_info_req+0x4e>
    5ca4:	00004e3f 	.word	0x00004e3f
    5ca8:	00005145 	.word	0x00005145

00005cac <att_write_rsp.part.11.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cb0:	b086      	sub	sp, #24
    5cb2:	4690      	mov	r8, r2
    5cb4:	4605      	mov	r5, r0
    5cb6:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    5cb8:	2218      	movs	r2, #24
    5cba:	2100      	movs	r1, #0
    5cbc:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5cbe:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    5cc0:	f7fb ffc8 	bl	1c54 <memset>
	if (rsp) {
    5cc4:	f1b8 0f00 	cmp.w	r8, #0
    5cc8:	d11f      	bne.n	5d0a <att_write_rsp.part.11.constprop.17+0x5e>
	data.offset = offset;
    5cca:	2300      	movs	r3, #0
    5ccc:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    5cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5cd2:	9303      	str	r3, [sp, #12]
	data.len = len;
    5cd4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    5cd8:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5cdc:	2301      	movs	r3, #1
    5cde:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5ce2:	4a1b      	ldr	r2, [pc, #108]	; (5d50 <att_write_rsp.part.11.constprop.17+0xa4>)
	data.conn = conn;
    5ce4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5ce6:	466b      	mov	r3, sp
    5ce8:	4639      	mov	r1, r7
    5cea:	4638      	mov	r0, r7
	data.op = op;
    5cec:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5cf0:	f000 fd5a 	bl	67a8 <bt_gatt_foreach_attr>
	if (data.err) {
    5cf4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5cf8:	b98c      	cbnz	r4, 5d1e <att_write_rsp.part.11.constprop.17+0x72>
	if (data.buf) {
    5cfa:	9a01      	ldr	r2, [sp, #4]
    5cfc:	b1b2      	cbz	r2, 5d2c <att_write_rsp.part.11.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    5cfe:	4b15      	ldr	r3, [pc, #84]	; (5d54 <att_write_rsp.part.11.constprop.17+0xa8>)
    5d00:	2104      	movs	r1, #4
    5d02:	4628      	mov	r0, r5
    5d04:	f7fe fe4e 	bl	49a4 <bt_l2cap_send_cb>
    5d08:	e011      	b.n	5d2e <att_write_rsp.part.11.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    5d0a:	2200      	movs	r2, #0
    5d0c:	4641      	mov	r1, r8
    5d0e:	4628      	mov	r0, r5
    5d10:	f7ff fc3a 	bl	5588 <bt_att_create_pdu>
    5d14:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    5d16:	2800      	cmp	r0, #0
    5d18:	d1d7      	bne.n	5cca <att_write_rsp.part.11.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    5d1a:	240e      	movs	r4, #14
    5d1c:	e007      	b.n	5d2e <att_write_rsp.part.11.constprop.17+0x82>
		if (rsp) {
    5d1e:	f1b8 0f00 	cmp.w	r8, #0
    5d22:	d00f      	beq.n	5d44 <att_write_rsp.part.11.constprop.17+0x98>
			net_buf_unref(data.buf);
    5d24:	9801      	ldr	r0, [sp, #4]
    5d26:	f00c fe3f 	bl	129a8 <net_buf_unref>
	if (!req) {
    5d2a:	b926      	cbnz	r6, 5d36 <att_write_rsp.part.11.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5d2c:	2400      	movs	r4, #0
}
    5d2e:	4620      	mov	r0, r4
    5d30:	b006      	add	sp, #24
    5d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d36:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5d3a:	463a      	mov	r2, r7
    5d3c:	4631      	mov	r1, r6
    5d3e:	4628      	mov	r0, r5
    5d40:	f7ff fc9e 	bl	5680 <send_err_rsp.part.10>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5d44:	2e18      	cmp	r6, #24
    5d46:	d1f1      	bne.n	5d2c <att_write_rsp.part.11.constprop.17+0x80>
    5d48:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5d4c:	e7ef      	b.n	5d2e <att_write_rsp.part.11.constprop.17+0x82>
    5d4e:	bf00      	nop
    5d50:	00005221 	.word	0x00005221
    5d54:	00005145 	.word	0x00005145

00005d58 <att_signed_write_cmd>:
{
    5d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    5d5c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    5d5e:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    5d60:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5d64:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5d66:	4620      	mov	r0, r4
    5d68:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    5d6a:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5d6e:	f00c fe73 	bl	12a58 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5d72:	4629      	mov	r1, r5
    5d74:	4630      	mov	r0, r6
    5d76:	f000 ff42 	bl	6bfe <bt_smp_sign_verify>
	if (err) {
    5d7a:	4607      	mov	r7, r0
    5d7c:	b160      	cbz	r0, 5d98 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    5d7e:	4b13      	ldr	r3, [pc, #76]	; (5dcc <att_signed_write_cmd+0x74>)
    5d80:	9301      	str	r3, [sp, #4]
    5d82:	9300      	str	r3, [sp, #0]
    5d84:	4a12      	ldr	r2, [pc, #72]	; (5dd0 <att_signed_write_cmd+0x78>)
    5d86:	4b13      	ldr	r3, [pc, #76]	; (5dd4 <att_signed_write_cmd+0x7c>)
    5d88:	4913      	ldr	r1, [pc, #76]	; (5dd8 <att_signed_write_cmd+0x80>)
    5d8a:	4814      	ldr	r0, [pc, #80]	; (5ddc <att_signed_write_cmd+0x84>)
    5d8c:	f7fb f8fe 	bl	f8c <printk>
    5d90:	2000      	movs	r0, #0
}
    5d92:	b002      	add	sp, #8
    5d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    5d98:	2101      	movs	r1, #1
    5d9a:	4620      	mov	r0, r4
    5d9c:	f00c fe64 	bl	12a68 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5da0:	2102      	movs	r1, #2
    5da2:	4620      	mov	r0, r4
    5da4:	f00c fe60 	bl	12a68 <net_buf_simple_pull>
	if (!handle) {
    5da8:	f1b8 0f00 	cmp.w	r8, #0
    5dac:	d00c      	beq.n	5dc8 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    5dae:	7b2b      	ldrb	r3, [r5, #12]
    5db0:	3b0c      	subs	r3, #12
    5db2:	b2db      	uxtb	r3, r3
    5db4:	9301      	str	r3, [sp, #4]
    5db6:	68ab      	ldr	r3, [r5, #8]
    5db8:	9300      	str	r3, [sp, #0]
    5dba:	463a      	mov	r2, r7
    5dbc:	4643      	mov	r3, r8
    5dbe:	4639      	mov	r1, r7
    5dc0:	4630      	mov	r0, r6
    5dc2:	f7ff ff73 	bl	5cac <att_write_rsp.part.11.constprop.17>
    5dc6:	e7e4      	b.n	5d92 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    5dc8:	2001      	movs	r0, #1
    5dca:	e7e2      	b.n	5d92 <att_signed_write_cmd+0x3a>
    5dcc:	00014645 	.word	0x00014645
    5dd0:	00015394 	.word	0x00015394
    5dd4:	00015ac8 	.word	0x00015ac8
    5dd8:	000153e3 	.word	0x000153e3
    5ddc:	00015bef 	.word	0x00015bef

00005de0 <att_write_cmd>:
{
    5de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5de2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5de4:	f101 0008 	add.w	r0, r1, #8
{
    5de8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5dea:	f00c fe4d 	bl	12a88 <net_buf_simple_pull_le16>
	if (!handle) {
    5dee:	4603      	mov	r3, r0
    5df0:	b150      	cbz	r0, 5e08 <att_write_cmd+0x28>
    5df2:	7b22      	ldrb	r2, [r4, #12]
    5df4:	9201      	str	r2, [sp, #4]
    5df6:	68a2      	ldr	r2, [r4, #8]
    5df8:	9200      	str	r2, [sp, #0]
    5dfa:	2200      	movs	r2, #0
    5dfc:	4611      	mov	r1, r2
    5dfe:	4628      	mov	r0, r5
    5e00:	f7ff ff54 	bl	5cac <att_write_rsp.part.11.constprop.17>
}
    5e04:	b003      	add	sp, #12
    5e06:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    5e08:	2001      	movs	r0, #1
    5e0a:	e7fb      	b.n	5e04 <att_write_cmd+0x24>

00005e0c <att_write_req>:
{
    5e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5e0e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5e10:	f101 0008 	add.w	r0, r1, #8
{
    5e14:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    5e16:	f00c fe37 	bl	12a88 <net_buf_simple_pull_le16>
	if (!handle) {
    5e1a:	4603      	mov	r3, r0
    5e1c:	b150      	cbz	r0, 5e34 <att_write_req+0x28>
    5e1e:	7b22      	ldrb	r2, [r4, #12]
    5e20:	9201      	str	r2, [sp, #4]
    5e22:	68a2      	ldr	r2, [r4, #8]
    5e24:	9200      	str	r2, [sp, #0]
    5e26:	2112      	movs	r1, #18
    5e28:	2213      	movs	r2, #19
    5e2a:	4628      	mov	r0, r5
    5e2c:	f7ff ff3e 	bl	5cac <att_write_rsp.part.11.constprop.17>
}
    5e30:	b003      	add	sp, #12
    5e32:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    5e34:	2001      	movs	r0, #1
    5e36:	e7fb      	b.n	5e30 <att_write_req+0x24>

00005e38 <bt_att_init>:

void bt_att_init(void)
{
    5e38:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5e3a:	4803      	ldr	r0, [pc, #12]	; (5e48 <bt_att_init+0x10>)
    5e3c:	f7fe fcf4 	bl	4828 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    5e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    5e44:	f000 bc9a 	b.w	677c <bt_gatt_init>
    5e48:	20003bc0 	.word	0x20003bc0

00005e4c <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    5e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e4e:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    5e50:	4607      	mov	r7, r0
    5e52:	2800      	cmp	r0, #0
    5e54:	d04b      	beq.n	5eee <bt_att_send+0xa2>
    5e56:	2900      	cmp	r1, #0
    5e58:	d049      	beq.n	5eee <bt_att_send+0xa2>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    5e5a:	f7ff f9a1 	bl	51a0 <att_chan_get>
	if (!att) {
    5e5e:	4604      	mov	r4, r0
    5e60:	b1b0      	cbz	r0, 5e90 <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    5e62:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5e6a:	4630      	mov	r0, r6
    5e6c:	f00d fe5b 	bl	13b26 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5e70:	4620      	mov	r0, r4
    5e72:	f7ff f94b 	bl	510c <att_is_connected>
    5e76:	b970      	cbnz	r0, 5e96 <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    5e78:	4b1e      	ldr	r3, [pc, #120]	; (5ef4 <bt_att_send+0xa8>)
    5e7a:	9301      	str	r3, [sp, #4]
    5e7c:	9300      	str	r3, [sp, #0]
    5e7e:	4a1e      	ldr	r2, [pc, #120]	; (5ef8 <bt_att_send+0xac>)
    5e80:	4b1e      	ldr	r3, [pc, #120]	; (5efc <bt_att_send+0xb0>)
    5e82:	491f      	ldr	r1, [pc, #124]	; (5f00 <bt_att_send+0xb4>)
    5e84:	481f      	ldr	r0, [pc, #124]	; (5f04 <bt_att_send+0xb8>)
    5e86:	f7fb f881 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5e8a:	4630      	mov	r0, r6
    5e8c:	f00d fe23 	bl	13ad6 <_impl_k_sem_give>
		return -ENOTCONN;
    5e90:	f06f 0438 	mvn.w	r4, #56	; 0x38
    5e94:	e015      	b.n	5ec2 <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    5e96:	68ab      	ldr	r3, [r5, #8]
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	2bd2      	cmp	r3, #210	; 0xd2
    5e9c:	d114      	bne.n	5ec8 <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    5e9e:	4629      	mov	r1, r5
    5ea0:	4638      	mov	r0, r7
    5ea2:	f000 feaf 	bl	6c04 <bt_smp_sign>
		if (err) {
    5ea6:	4604      	mov	r4, r0
    5ea8:	b170      	cbz	r0, 5ec8 <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    5eaa:	4b12      	ldr	r3, [pc, #72]	; (5ef4 <bt_att_send+0xa8>)
    5eac:	9301      	str	r3, [sp, #4]
    5eae:	9300      	str	r3, [sp, #0]
    5eb0:	4a15      	ldr	r2, [pc, #84]	; (5f08 <bt_att_send+0xbc>)
    5eb2:	4b12      	ldr	r3, [pc, #72]	; (5efc <bt_att_send+0xb0>)
    5eb4:	4912      	ldr	r1, [pc, #72]	; (5f00 <bt_att_send+0xb4>)
    5eb6:	4815      	ldr	r0, [pc, #84]	; (5f0c <bt_att_send+0xc0>)
    5eb8:	f7fb f868 	bl	f8c <printk>
    5ebc:	4630      	mov	r0, r6
    5ebe:	f00d fe0a 	bl	13ad6 <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    5ec2:	4620      	mov	r0, r4
    5ec4:	b003      	add	sp, #12
    5ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(buf->data[0])) {
    5ec8:	68ab      	ldr	r3, [r5, #8]
    5eca:	7818      	ldrb	r0, [r3, #0]
    5ecc:	f7fe fee6 	bl	4c9c <att_op_get_type>
    5ed0:	3801      	subs	r0, #1
    5ed2:	b2c0      	uxtb	r0, r0
    5ed4:	2804      	cmp	r0, #4
    5ed6:	bf96      	itet	ls
    5ed8:	4b0d      	ldrls	r3, [pc, #52]	; (5f10 <bt_att_send+0xc4>)
    5eda:	4b0e      	ldrhi	r3, [pc, #56]	; (5f14 <bt_att_send+0xc8>)
    5edc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    5ee0:	462a      	mov	r2, r5
    5ee2:	2104      	movs	r1, #4
    5ee4:	4638      	mov	r0, r7
    5ee6:	f7fe fd5d 	bl	49a4 <bt_l2cap_send_cb>
	return 0;
    5eea:	2400      	movs	r4, #0
    5eec:	e7e9      	b.n	5ec2 <bt_att_send+0x76>
		return -EINVAL;
    5eee:	f06f 0415 	mvn.w	r4, #21
    5ef2:	e7e6      	b.n	5ec2 <bt_att_send+0x76>
    5ef4:	00014645 	.word	0x00014645
    5ef8:	000153dc 	.word	0x000153dc
    5efc:	00015b22 	.word	0x00015b22
    5f00:	000153e3 	.word	0x000153e3
    5f04:	00015bd2 	.word	0x00015bd2
    5f08:	00015394 	.word	0x00015394
    5f0c:	00015d77 	.word	0x00015d77
    5f10:	00015a98 	.word	0x00015a98
    5f14:	00005133 	.word	0x00005133

00005f18 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    5f18:	b510      	push	{r4, lr}
    5f1a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    5f1c:	b1d8      	cbz	r0, 5f56 <bt_att_req_send+0x3e>
    5f1e:	b1d1      	cbz	r1, 5f56 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    5f20:	f7ff f93e 	bl	51a0 <att_chan_get>
	if (!att) {
    5f24:	4603      	mov	r3, r0
    5f26:	b1c8      	cbz	r0, 5f5c <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    5f28:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    5f2c:	b172      	cbz	r2, 5f4c <bt_att_req_send+0x34>
	parent->next = child;
    5f2e:	2000      	movs	r0, #0
    5f30:	6020      	str	r0, [r4, #0]
    5f32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    5f36:	b92a      	cbnz	r2, 5f44 <bt_att_req_send+0x2c>
	list->tail = node;
    5f38:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    5f3c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    5f40:	4610      	mov	r0, r2
    5f42:	bd10      	pop	{r4, pc}
	parent->next = child;
    5f44:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5f46:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    5f4a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    5f4c:	4621      	mov	r1, r4
}
    5f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    5f52:	f7ff b991 	b.w	5278 <att_send_req>
		return -EINVAL;
    5f56:	f06f 0015 	mvn.w	r0, #21
    5f5a:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    5f5c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5f60:	bd10      	pop	{r4, pc}

00005f62 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode);
    5f62:	6813      	ldr	r3, [r2, #0]
    5f64:	b939      	cbnz	r1, 5f76 <sys_slist_remove+0x14>
    5f66:	6841      	ldr	r1, [r0, #4]
	list->head = node;
    5f68:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode);
    5f6a:	428a      	cmp	r2, r1
    5f6c:	d100      	bne.n	5f70 <sys_slist_remove+0xe>
	list->tail = node;
    5f6e:	6043      	str	r3, [r0, #4]
	parent->next = child;
    5f70:	2300      	movs	r3, #0
    5f72:	6013      	str	r3, [r2, #0]
    5f74:	4770      	bx	lr
    5f76:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    5f78:	6843      	ldr	r3, [r0, #4]
    5f7a:	429a      	cmp	r2, r3
	list->tail = node;
    5f7c:	bf08      	it	eq
    5f7e:	6041      	streq	r1, [r0, #4]
    5f80:	e7f6      	b.n	5f70 <sys_slist_remove+0xe>

00005f82 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    5f82:	4770      	bx	lr

00005f84 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    5f84:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    5f86:	2000      	movs	r0, #0
    5f88:	4770      	bx	lr

00005f8a <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    5f8a:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    5f8c:	2300      	movs	r3, #0
    5f8e:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    5f90:	461a      	mov	r2, r3
    5f92:	42aa      	cmp	r2, r5
    5f94:	d107      	bne.n	5fa6 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5f96:	890a      	ldrh	r2, [r1, #8]
    5f98:	429a      	cmp	r2, r3
    5f9a:	d00d      	beq.n	5fb8 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    5f9c:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    5f9e:	68ca      	ldr	r2, [r1, #12]
	}
}
    5fa0:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    5fa2:	4619      	mov	r1, r3
    5fa4:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    5fa6:	680c      	ldr	r4, [r1, #0]
    5fa8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    5fac:	3201      	adds	r2, #1
    5fae:	8924      	ldrh	r4, [r4, #8]
    5fb0:	42a3      	cmp	r3, r4
    5fb2:	bf38      	it	cc
    5fb4:	4623      	movcc	r3, r4
    5fb6:	e7ec      	b.n	5f92 <gatt_ccc_changed+0x8>
}
    5fb8:	bc30      	pop	{r4, r5}
    5fba:	4770      	bx	lr

00005fbc <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    5fbc:	b410      	push	{r4}
    5fbe:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    5fc0:	699c      	ldr	r4, [r3, #24]
    5fc2:	460a      	mov	r2, r1
    5fc4:	6959      	ldr	r1, [r3, #20]
    5fc6:	4623      	mov	r3, r4
}
    5fc8:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    5fca:	4718      	bx	r3

00005fcc <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    5fcc:	b570      	push	{r4, r5, r6, lr}
    5fce:	4614      	mov	r4, r2
    5fd0:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    5fd2:	3228      	adds	r2, #40	; 0x28
    5fd4:	4805      	ldr	r0, [pc, #20]	; (5fec <gatt_subscription_remove+0x20>)
    5fd6:	f7ff ffc4 	bl	5f62 <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    5fda:	69e5      	ldr	r5, [r4, #28]
    5fdc:	2300      	movs	r3, #0
    5fde:	4621      	mov	r1, r4
    5fe0:	4630      	mov	r0, r6
    5fe2:	46ac      	mov	ip, r5
    5fe4:	461a      	mov	r2, r3
}
    5fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    5fea:	4760      	bx	ip
    5fec:	200005f0 	.word	0x200005f0

00005ff0 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    5ff0:	b430      	push	{r4, r5}
    5ff2:	9c02      	ldr	r4, [sp, #8]
    5ff4:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    5ff6:	b181      	cbz	r1, 601a <gatt_write_ccc_rsp+0x2a>
    5ff8:	4b0d      	ldr	r3, [pc, #52]	; (6030 <gatt_write_ccc_rsp+0x40>)
    5ffa:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode);
    5ffc:	b1ab      	cbz	r3, 602a <gatt_write_ccc_rsp+0x3a>
	return node->next;
    5ffe:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    6000:	f104 0228 	add.w	r2, r4, #40	; 0x28
    6004:	4293      	cmp	r3, r2
    6006:	d104      	bne.n	6012 <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    6008:	4622      	mov	r2, r4
    600a:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    600c:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    600e:	f7ff bfdd 	b.w	5fcc <gatt_subscription_remove>
Z_GENLIST_PEEK_NEXT(slist, snode);
    6012:	b151      	cbz	r1, 602a <gatt_write_ccc_rsp+0x3a>
    6014:	460b      	mov	r3, r1
    6016:	6809      	ldr	r1, [r1, #0]
    6018:	e7f4      	b.n	6004 <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    601a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    601c:	b92b      	cbnz	r3, 602a <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    601e:	69e5      	ldr	r5, [r4, #28]
    6020:	4621      	mov	r1, r4
    6022:	46ac      	mov	ip, r5
    6024:	461a      	mov	r2, r3
}
    6026:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    6028:	4760      	bx	ip
}
    602a:	bc30      	pop	{r4, r5}
    602c:	4770      	bx	lr
    602e:	bf00      	nop
    6030:	200005f0 	.word	0x200005f0

00006034 <gatt_register>:
{
    6034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    6036:	4a1e      	ldr	r2, [pc, #120]	; (60b0 <gatt_register+0x7c>)
    6038:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    603a:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    603e:	b14b      	cbz	r3, 6054 <gatt_register+0x20>
    6040:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6042:	2b00      	cmp	r3, #0
    6044:	d032      	beq.n	60ac <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    6046:	e913 0018 	ldmdb	r3, {r3, r4}
    604a:	2614      	movs	r6, #20
    604c:	fb06 3304 	mla	r3, r6, r4, r3
    6050:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6054:	b2ad      	uxth	r5, r5
    6056:	2414      	movs	r4, #20
    6058:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    605c:	b109      	cbz	r1, 6062 <gatt_register+0x2e>
    605e:	42a9      	cmp	r1, r5
    6060:	d108      	bne.n	6074 <gatt_register+0x40>
	parent->next = child;
    6062:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6064:	f100 0108 	add.w	r1, r0, #8
    6068:	6083      	str	r3, [r0, #8]
    606a:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    606c:	b9d0      	cbnz	r0, 60a4 <gatt_register+0x70>
	list->tail = node;
    606e:	6051      	str	r1, [r2, #4]
	list->head = node;
    6070:	6011      	str	r1, [r2, #0]
    6072:	e015      	b.n	60a0 <gatt_register+0x6c>
		if (!attrs->handle) {
    6074:	8a0c      	ldrh	r4, [r1, #16]
    6076:	b92c      	cbnz	r4, 6084 <gatt_register+0x50>
			attrs->handle = ++handle;
    6078:	3301      	adds	r3, #1
    607a:	b29c      	uxth	r4, r3
    607c:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    607e:	3114      	adds	r1, #20
    6080:	4623      	mov	r3, r4
    6082:	e7eb      	b.n	605c <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6084:	42a3      	cmp	r3, r4
    6086:	d3fa      	bcc.n	607e <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6088:	4b0a      	ldr	r3, [pc, #40]	; (60b4 <gatt_register+0x80>)
    608a:	9302      	str	r3, [sp, #8]
    608c:	e88d 0018 	stmia.w	sp, {r3, r4}
    6090:	4a09      	ldr	r2, [pc, #36]	; (60b8 <gatt_register+0x84>)
    6092:	4b0a      	ldr	r3, [pc, #40]	; (60bc <gatt_register+0x88>)
    6094:	490a      	ldr	r1, [pc, #40]	; (60c0 <gatt_register+0x8c>)
    6096:	480b      	ldr	r0, [pc, #44]	; (60c4 <gatt_register+0x90>)
    6098:	f7fa ff78 	bl	f8c <printk>
			return -EINVAL;
    609c:	f06f 0015 	mvn.w	r0, #21
}
    60a0:	b004      	add	sp, #16
    60a2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    60a4:	6001      	str	r1, [r0, #0]
	list->tail = node;
    60a6:	6051      	str	r1, [r2, #4]
	return 0;
    60a8:	4618      	mov	r0, r3
    60aa:	e7f9      	b.n	60a0 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	deff      	udf	#255	; 0xff
    60b0:	20000584 	.word	0x20000584
    60b4:	00014645 	.word	0x00014645
    60b8:	00015394 	.word	0x00015394
    60bc:	00015e74 	.word	0x00015e74
    60c0:	000153e3 	.word	0x000153e3
    60c4:	00015fa4 	.word	0x00015fa4

000060c8 <gatt_notify>:
{
    60c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    60cc:	468a      	mov	sl, r1
    60ce:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    60d0:	211b      	movs	r1, #27
    60d2:	1c9a      	adds	r2, r3, #2
{
    60d4:	4680      	mov	r8, r0
    60d6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    60d8:	f7ff fa56 	bl	5588 <bt_att_create_pdu>
	if (!buf) {
    60dc:	4604      	mov	r4, r0
    60de:	b968      	cbnz	r0, 60fc <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    60e0:	4b13      	ldr	r3, [pc, #76]	; (6130 <gatt_notify+0x68>)
    60e2:	9301      	str	r3, [sp, #4]
    60e4:	9300      	str	r3, [sp, #0]
    60e6:	4a13      	ldr	r2, [pc, #76]	; (6134 <gatt_notify+0x6c>)
    60e8:	4b13      	ldr	r3, [pc, #76]	; (6138 <gatt_notify+0x70>)
    60ea:	4914      	ldr	r1, [pc, #80]	; (613c <gatt_notify+0x74>)
    60ec:	4814      	ldr	r0, [pc, #80]	; (6140 <gatt_notify+0x78>)
    60ee:	f7fa ff4d 	bl	f8c <printk>
    60f2:	f06f 000b 	mvn.w	r0, #11
}
    60f6:	b002      	add	sp, #8
    60f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    60fc:	f100 0708 	add.w	r7, r0, #8
    6100:	2102      	movs	r1, #2
    6102:	4638      	mov	r0, r7
    6104:	f00c fc82 	bl	12a0c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6108:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    610a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    610c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6110:	4638      	mov	r0, r7
    6112:	f00c fc7b 	bl	12a0c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6116:	4632      	mov	r2, r6
    6118:	4649      	mov	r1, r9
    611a:	4628      	mov	r0, r5
    611c:	f7fb fd6e 	bl	1bfc <memcpy>
    6120:	4640      	mov	r0, r8
    6122:	2300      	movs	r3, #0
    6124:	4622      	mov	r2, r4
    6126:	2104      	movs	r1, #4
    6128:	f7fe fc3c 	bl	49a4 <bt_l2cap_send_cb>
	return 0;
    612c:	2000      	movs	r0, #0
    612e:	e7e2      	b.n	60f6 <gatt_notify+0x2e>
    6130:	00014645 	.word	0x00014645
    6134:	000153dc 	.word	0x000153dc
    6138:	00015eb0 	.word	0x00015eb0
    613c:	000153e3 	.word	0x000153e3
    6140:	00015f6b 	.word	0x00015f6b

00006144 <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    6144:	b530      	push	{r4, r5, lr}
    6146:	460d      	mov	r5, r1
    6148:	b085      	sub	sp, #20
	if (params) {
    614a:	b1c3      	cbz	r3, 617e <gatt_send.constprop.29+0x3a>
		req->func = func;
    614c:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    614e:	2200      	movs	r2, #0
		req->buf = buf;
    6150:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    6152:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    6154:	4619      	mov	r1, r3
    6156:	f7ff fedf 	bl	5f18 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    615a:	4604      	mov	r4, r0
	if (err) {
    615c:	b160      	cbz	r0, 6178 <gatt_send.constprop.29+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    615e:	4b09      	ldr	r3, [pc, #36]	; (6184 <gatt_send.constprop.29+0x40>)
    6160:	9302      	str	r3, [sp, #8]
    6162:	e88d 0018 	stmia.w	sp, {r3, r4}
    6166:	4a08      	ldr	r2, [pc, #32]	; (6188 <gatt_send.constprop.29+0x44>)
    6168:	4b08      	ldr	r3, [pc, #32]	; (618c <gatt_send.constprop.29+0x48>)
    616a:	4909      	ldr	r1, [pc, #36]	; (6190 <gatt_send.constprop.29+0x4c>)
    616c:	4809      	ldr	r0, [pc, #36]	; (6194 <gatt_send.constprop.29+0x50>)
    616e:	f7fa ff0d 	bl	f8c <printk>
		net_buf_unref(buf);
    6172:	4628      	mov	r0, r5
    6174:	f00c fc18 	bl	129a8 <net_buf_unref>
}
    6178:	4620      	mov	r0, r4
    617a:	b005      	add	sp, #20
    617c:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    617e:	f7ff fe65 	bl	5e4c <bt_att_send>
    6182:	e7ea      	b.n	615a <gatt_send.constprop.29+0x16>
    6184:	00014645 	.word	0x00014645
    6188:	00015394 	.word	0x00015394
    618c:	00015ebc 	.word	0x00015ebc
    6190:	000153e3 	.word	0x000153e3
    6194:	00015fd5 	.word	0x00015fd5

00006198 <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    6198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    619c:	4689      	mov	r9, r1
    619e:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    61a0:	2112      	movs	r1, #18
    61a2:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    61a4:	4606      	mov	r6, r0
    61a6:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    61a8:	f7ff f9ee 	bl	5588 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    61ac:	4604      	mov	r4, r0
    61ae:	b198      	cbz	r0, 61d8 <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    61b0:	f100 0508 	add.w	r5, r0, #8
    61b4:	2102      	movs	r1, #2
    61b6:	4628      	mov	r0, r5
    61b8:	f00c fc28 	bl	12a0c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    61bc:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    61be:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    61c2:	4628      	mov	r0, r5
    61c4:	f00c fc39 	bl	12a3a <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    61c8:	463b      	mov	r3, r7
    61ca:	4621      	mov	r1, r4
    61cc:	4630      	mov	r0, r6
    61ce:	4a04      	ldr	r2, [pc, #16]	; (61e0 <gatt_write_ccc.constprop.19+0x48>)
}
    61d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    61d4:	f7ff bfb6 	b.w	6144 <gatt_send.constprop.29>
}
    61d8:	f06f 000b 	mvn.w	r0, #11
    61dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61e0:	00005ff1 	.word	0x00005ff1

000061e4 <gatt_indicate>:
{
    61e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u16_t value_handle = params->attr->handle;
    61e8:	694b      	ldr	r3, [r1, #20]
{
    61ea:	b085      	sub	sp, #20
    61ec:	4680      	mov	r8, r0
	u16_t value_handle = params->attr->handle;
    61ee:	8a1d      	ldrh	r5, [r3, #16]
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    61f0:	6818      	ldr	r0, [r3, #0]
    61f2:	2300      	movs	r3, #0
{
    61f4:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    61f6:	f88d 300c 	strb.w	r3, [sp, #12]
    61fa:	a903      	add	r1, sp, #12
    61fc:	f642 0303 	movw	r3, #10243	; 0x2803
    6200:	f8ad 300e 	strh.w	r3, [sp, #14]
    6204:	f7fb fe78 	bl	1ef8 <bt_uuid_cmp>
    6208:	b930      	cbnz	r0, 6218 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    620a:	6963      	ldr	r3, [r4, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    620c:	68db      	ldr	r3, [r3, #12]
    620e:	791b      	ldrb	r3, [r3, #4]
    6210:	069b      	lsls	r3, r3, #26
    6212:	d530      	bpl.n	6276 <gatt_indicate+0x92>
		value_handle += 1;
    6214:	3501      	adds	r5, #1
    6216:	b2ad      	uxth	r5, r5
				sizeof(*ind) + params->len);
    6218:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    621a:	211d      	movs	r1, #29
    621c:	3202      	adds	r2, #2
    621e:	4640      	mov	r0, r8
    6220:	f7ff f9b2 	bl	5588 <bt_att_create_pdu>
	if (!buf) {
    6224:	4606      	mov	r6, r0
    6226:	b968      	cbnz	r0, 6244 <gatt_indicate+0x60>
		BT_WARN("No buffer available to send indication");
    6228:	4b14      	ldr	r3, [pc, #80]	; (627c <gatt_indicate+0x98>)
    622a:	9301      	str	r3, [sp, #4]
    622c:	9300      	str	r3, [sp, #0]
    622e:	4a14      	ldr	r2, [pc, #80]	; (6280 <gatt_indicate+0x9c>)
    6230:	4b14      	ldr	r3, [pc, #80]	; (6284 <gatt_indicate+0xa0>)
    6232:	4915      	ldr	r1, [pc, #84]	; (6288 <gatt_indicate+0xa4>)
    6234:	4815      	ldr	r0, [pc, #84]	; (628c <gatt_indicate+0xa8>)
    6236:	f7fa fea9 	bl	f8c <printk>
		return -ENOMEM;
    623a:	f06f 000b 	mvn.w	r0, #11
}
    623e:	b005      	add	sp, #20
    6240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6244:	f100 0908 	add.w	r9, r0, #8
    6248:	2102      	movs	r1, #2
    624a:	4648      	mov	r0, r9
    624c:	f00c fbde 	bl	12a0c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6250:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    6252:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6254:	f827 5b02 	strh.w	r5, [r7], #2
	net_buf_add(buf, params->len);
    6258:	4648      	mov	r0, r9
    625a:	f00c fbd7 	bl	12a0c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    625e:	8c22      	ldrh	r2, [r4, #32]
    6260:	69e1      	ldr	r1, [r4, #28]
    6262:	4638      	mov	r0, r7
    6264:	f7fb fcca 	bl	1bfc <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    6268:	4623      	mov	r3, r4
    626a:	4a09      	ldr	r2, [pc, #36]	; (6290 <gatt_indicate+0xac>)
    626c:	4631      	mov	r1, r6
    626e:	4640      	mov	r0, r8
    6270:	f7ff ff68 	bl	6144 <gatt_send.constprop.29>
    6274:	e7e3      	b.n	623e <gatt_indicate+0x5a>
			return -EINVAL;
    6276:	f06f 0015 	mvn.w	r0, #21
    627a:	e7e0      	b.n	623e <gatt_indicate+0x5a>
    627c:	00014645 	.word	0x00014645
    6280:	000153dc 	.word	0x000153dc
    6284:	00015ec6 	.word	0x00015ec6
    6288:	000153e3 	.word	0x000153e3
    628c:	00015f34 	.word	0x00015f34
    6290:	00005fbd 	.word	0x00005fbd

00006294 <sc_indicate.constprop.24>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    6294:	b510      	push	{r4, lr}
    6296:	4b17      	ldr	r3, [pc, #92]	; (62f4 <sc_indicate.constprop.24+0x60>)
    6298:	f3bf 8f5b 	dmb	ish
    629c:	f103 0250 	add.w	r2, r3, #80	; 0x50
    62a0:	e852 4f00 	ldrex	r4, [r2]
    62a4:	f044 0e01 	orr.w	lr, r4, #1
    62a8:	e842 ec00 	strex	ip, lr, [r2]
    62ac:	f1bc 0f00 	cmp.w	ip, #0
    62b0:	d1f6      	bne.n	62a0 <sc_indicate.constprop.24+0xc>
    62b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    62b6:	07e2      	lsls	r2, r4, #31
    62b8:	d402      	bmi.n	62c0 <sc_indicate.constprop.24+0x2c>
		sc->start = start;
    62ba:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    62bc:	84d9      	strh	r1, [r3, #38]	; 0x26
    62be:	e00a      	b.n	62d6 <sc_indicate.constprop.24+0x42>
	if (new_start >= *start && new_end <= *end) {
    62c0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    62c2:	4282      	cmp	r2, r0
    62c4:	d803      	bhi.n	62ce <sc_indicate.constprop.24+0x3a>
    62c6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    62c8:	428a      	cmp	r2, r1
    62ca:	d301      	bcc.n	62d0 <sc_indicate.constprop.24+0x3c>
    62cc:	bd10      	pop	{r4, pc}
		*start = new_start;
    62ce:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    62d0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    62d2:	428a      	cmp	r2, r1
    62d4:	d3f2      	bcc.n	62bc <sc_indicate.constprop.24+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    62d6:	f3bf 8f5b 	dmb	ish
    62da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    62dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    62e0:	079b      	lsls	r3, r3, #30
    62e2:	d406      	bmi.n	62f2 <sc_indicate.constprop.24+0x5e>
    62e4:	220a      	movs	r2, #10
    62e6:	4904      	ldr	r1, [pc, #16]	; (62f8 <sc_indicate.constprop.24+0x64>)
    62e8:	4804      	ldr	r0, [pc, #16]	; (62fc <sc_indicate.constprop.24+0x68>)
}
    62ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62ee:	f00d bf4d 	b.w	1418c <k_delayed_work_submit_to_queue>
    62f2:	bd10      	pop	{r4, pc}
    62f4:	2000058c 	.word	0x2000058c
    62f8:	200005b4 	.word	0x200005b4
    62fc:	20001990 	.word	0x20001990

00006300 <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    6300:	6882      	ldr	r2, [r0, #8]
    6302:	4b19      	ldr	r3, [pc, #100]	; (6368 <connected_cb+0x68>)
    6304:	429a      	cmp	r2, r3
{
    6306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    630a:	4607      	mov	r7, r0
    630c:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    630e:	d125      	bne.n	635c <connected_cb+0x5c>
	ccc = attr->user_data;
    6310:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6312:	2600      	movs	r6, #0
    6314:	686b      	ldr	r3, [r5, #4]
    6316:	429e      	cmp	r6, r3
    6318:	d220      	bcs.n	635c <connected_cb+0x5c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    631a:	6829      	ldr	r1, [r5, #0]
    631c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    6320:	4441      	add	r1, r8
    6322:	4620      	mov	r0, r4
    6324:	f7fd ff7a 	bl	421c <bt_conn_addr_le_cmp>
    6328:	b9d8      	cbnz	r0, 6362 <connected_cb+0x62>
		if (ccc->cfg[i].value) {
    632a:	682b      	ldr	r3, [r5, #0]
    632c:	4443      	add	r3, r8
    632e:	891b      	ldrh	r3, [r3, #8]
    6330:	b1bb      	cbz	r3, 6362 <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    6332:	4629      	mov	r1, r5
    6334:	4638      	mov	r0, r7
    6336:	f7ff fe28 	bl	5f8a <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    633a:	682c      	ldr	r4, [r5, #0]
    633c:	4b0b      	ldr	r3, [pc, #44]	; (636c <connected_cb+0x6c>)
    633e:	429c      	cmp	r4, r3
    6340:	d10c      	bne.n	635c <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    6342:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    6344:	89a0      	ldrh	r0, [r4, #12]
    6346:	89e1      	ldrh	r1, [r4, #14]
    6348:	b900      	cbnz	r0, 634c <connected_cb+0x4c>
    634a:	b139      	cbz	r1, 635c <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    634c:	f7ff ffa2 	bl	6294 <sc_indicate.constprop.24>
	memset(cfg->data, 0, sizeof(cfg->data));
    6350:	2204      	movs	r2, #4
    6352:	2100      	movs	r1, #0
    6354:	f104 000c 	add.w	r0, r4, #12
    6358:	f7fb fc7c 	bl	1c54 <memset>
}
    635c:	2001      	movs	r0, #1
    635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    6362:	3601      	adds	r6, #1
    6364:	e7d6      	b.n	6314 <connected_cb+0x14>
    6366:	bf00      	nop
    6368:	0000658d 	.word	0x0000658d
    636c:	200005e0 	.word	0x200005e0

00006370 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6370:	490d      	ldr	r1, [pc, #52]	; (63a8 <sc_indicate_rsp+0x38>)
    6372:	f3bf 8f5b 	dmb	ish
    6376:	f101 0350 	add.w	r3, r1, #80	; 0x50
    637a:	e853 2f00 	ldrex	r2, [r3]
    637e:	f022 0202 	bic.w	r2, r2, #2
    6382:	e843 2000 	strex	r0, r2, [r3]
    6386:	2800      	cmp	r0, #0
    6388:	d1f7      	bne.n	637a <sc_indicate_rsp+0xa>
    638a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    638e:	f3bf 8f5b 	dmb	ish
    6392:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    6394:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6398:	07db      	lsls	r3, r3, #31
    639a:	d504      	bpl.n	63a6 <sc_indicate_rsp+0x36>
    639c:	2200      	movs	r2, #0
    639e:	3128      	adds	r1, #40	; 0x28
    63a0:	4802      	ldr	r0, [pc, #8]	; (63ac <sc_indicate_rsp+0x3c>)
    63a2:	f00d bef3 	b.w	1418c <k_delayed_work_submit_to_queue>
    63a6:	4770      	bx	lr
    63a8:	2000058c 	.word	0x2000058c
    63ac:	20001990 	.word	0x20001990

000063b0 <read_appearance>:
{
    63b0:	b513      	push	{r0, r1, r4, lr}
    63b2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    63b6:	4610      	mov	r0, r2
	if (offset > value_len) {
    63b8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    63ba:	f04f 0200 	mov.w	r2, #0
    63be:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    63c2:	d80d      	bhi.n	63e0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    63c4:	f1c1 0402 	rsb	r4, r1, #2
    63c8:	429c      	cmp	r4, r3
    63ca:	bfa8      	it	ge
    63cc:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    63ce:	f10d 0306 	add.w	r3, sp, #6
    63d2:	4622      	mov	r2, r4
    63d4:	4419      	add	r1, r3
    63d6:	f7fb fc11 	bl	1bfc <memcpy>
}
    63da:	4620      	mov	r0, r4
    63dc:	b002      	add	sp, #8
    63de:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    63e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    63e4:	e7f9      	b.n	63da <read_appearance+0x2a>
	...

000063e8 <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    63e8:	6882      	ldr	r2, [r0, #8]
    63ea:	4b27      	ldr	r3, [pc, #156]	; (6488 <disconnected_cb+0xa0>)
    63ec:	429a      	cmp	r2, r3
{
    63ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    63f2:	4680      	mov	r8, r0
    63f4:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    63f6:	d127      	bne.n	6448 <disconnected_cb+0x60>
	ccc = attr->user_data;
    63f8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    63fa:	8923      	ldrh	r3, [r4, #8]
    63fc:	b323      	cbz	r3, 6448 <disconnected_cb+0x60>
    63fe:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6400:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    6404:	6863      	ldr	r3, [r4, #4]
    6406:	429e      	cmp	r6, r3
    6408:	d30b      	bcc.n	6422 <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    640a:	2202      	movs	r2, #2
    640c:	2100      	movs	r1, #0
    640e:	f104 0008 	add.w	r0, r4, #8
    6412:	f7fb fc1f 	bl	1c54 <memset>
	if (ccc->cfg_changed) {
    6416:	68e3      	ldr	r3, [r4, #12]
    6418:	b1b3      	cbz	r3, 6448 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    641a:	8921      	ldrh	r1, [r4, #8]
    641c:	4640      	mov	r0, r8
    641e:	4798      	blx	r3
    6420:	e012      	b.n	6448 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    6422:	6821      	ldr	r1, [r4, #0]
    6424:	0135      	lsls	r5, r6, #4
    6426:	4429      	add	r1, r5
    6428:	890b      	ldrh	r3, [r1, #8]
    642a:	b19b      	cbz	r3, 6454 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    642c:	4648      	mov	r0, r9
    642e:	f7fd fef5 	bl	421c <bt_conn_addr_le_cmp>
    6432:	b188      	cbz	r0, 6458 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6434:	6820      	ldr	r0, [r4, #0]
    6436:	4428      	add	r0, r5
    6438:	f7fd ff08 	bl	424c <bt_conn_lookup_addr_le>
			if (tmp) {
    643c:	b150      	cbz	r0, 6454 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    643e:	7a43      	ldrb	r3, [r0, #9]
    6440:	2b03      	cmp	r3, #3
    6442:	d105      	bne.n	6450 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6444:	f7fd ff3e 	bl	42c4 <bt_conn_unref>
}
    6448:	2001      	movs	r0, #1
    644a:	b002      	add	sp, #8
    644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6450:	f7fd ff38 	bl	42c4 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6454:	3601      	adds	r6, #1
    6456:	e7d5      	b.n	6404 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6458:	4650      	mov	r0, sl
    645a:	f7fd fabf 	bl	39dc <bt_addr_le_is_bonded>
    645e:	4607      	mov	r7, r0
    6460:	6820      	ldr	r0, [r4, #0]
    6462:	b95f      	cbnz	r7, 647c <disconnected_cb+0x94>
    6464:	4428      	add	r0, r5
    6466:	2207      	movs	r2, #7
    6468:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    646a:	9700      	str	r7, [sp, #0]
    646c:	f8cd 7003 	str.w	r7, [sp, #3]
    6470:	f7fb fbc4 	bl	1bfc <memcpy>
				ccc->cfg[i].value = 0;
    6474:	6823      	ldr	r3, [r4, #0]
    6476:	441d      	add	r5, r3
    6478:	812f      	strh	r7, [r5, #8]
    647a:	e7eb      	b.n	6454 <disconnected_cb+0x6c>
    647c:	2207      	movs	r2, #7
    647e:	4651      	mov	r1, sl
    6480:	4428      	add	r0, r5
    6482:	f7fb fbbb 	bl	1bfc <memcpy>
    6486:	e7e5      	b.n	6454 <disconnected_cb+0x6c>
    6488:	0000658d 	.word	0x0000658d

0000648c <read_name>:
{
    648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6490:	4e0d      	ldr	r6, [pc, #52]	; (64c8 <read_name+0x3c>)
{
    6492:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6496:	4630      	mov	r0, r6
{
    6498:	4698      	mov	r8, r3
    649a:	4617      	mov	r7, r2
				 strlen(gap_name));
    649c:	f7fb fb84 	bl	1ba8 <strlen>
	if (offset > value_len) {
    64a0:	b283      	uxth	r3, r0
    64a2:	42ab      	cmp	r3, r5
    64a4:	d30d      	bcc.n	64c2 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    64a6:	1b5c      	subs	r4, r3, r5
    64a8:	4544      	cmp	r4, r8
    64aa:	4623      	mov	r3, r4
    64ac:	bfa8      	it	ge
    64ae:	4643      	movge	r3, r8
    64b0:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    64b2:	4622      	mov	r2, r4
    64b4:	1971      	adds	r1, r6, r5
    64b6:	4638      	mov	r0, r7
    64b8:	f7fb fba0 	bl	1bfc <memcpy>
}
    64bc:	4620      	mov	r0, r4
    64be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    64c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    64c6:	e7f9      	b.n	64bc <read_name+0x30>
    64c8:	00015fff 	.word	0x00015fff

000064cc <bt_gatt_attr_read_ccc>:
{
    64cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    64d0:	68ce      	ldr	r6, [r1, #12]
{
    64d2:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    64d6:	4604      	mov	r4, r0
    64d8:	4690      	mov	r8, r2
    64da:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    64dc:	2500      	movs	r5, #0
    64de:	6873      	ldr	r3, [r6, #4]
    64e0:	429d      	cmp	r5, r3
    64e2:	d20e      	bcs.n	6502 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    64e4:	6831      	ldr	r1, [r6, #0]
    64e6:	ea4f 1905 	mov.w	r9, r5, lsl #4
    64ea:	4449      	add	r1, r9
    64ec:	4620      	mov	r0, r4
    64ee:	f7fd fe95 	bl	421c <bt_conn_addr_le_cmp>
    64f2:	b108      	cbz	r0, 64f8 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    64f4:	3501      	adds	r5, #1
    64f6:	e7f2      	b.n	64de <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    64f8:	6832      	ldr	r2, [r6, #0]
    64fa:	444a      	add	r2, r9
    64fc:	8913      	ldrh	r3, [r2, #8]
    64fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6502:	6873      	ldr	r3, [r6, #4]
    6504:	429d      	cmp	r5, r3
		value = 0x0000;
    6506:	bf04      	itt	eq
    6508:	2300      	moveq	r3, #0
    650a:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    650e:	2f02      	cmp	r7, #2
    6510:	d80f      	bhi.n	6532 <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6512:	f1c7 0402 	rsb	r4, r7, #2
    6516:	4554      	cmp	r4, sl
    6518:	bfa8      	it	ge
    651a:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    651c:	f10d 0306 	add.w	r3, sp, #6
    6520:	4622      	mov	r2, r4
    6522:	19d9      	adds	r1, r3, r7
    6524:	4640      	mov	r0, r8
    6526:	f7fb fb69 	bl	1bfc <memcpy>
}
    652a:	4620      	mov	r0, r4
    652c:	b002      	add	sp, #8
    652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6532:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6536:	e7f8      	b.n	652a <bt_gatt_attr_read_ccc+0x5e>

00006538 <bt_gatt_attr_read_service>:
{
    6538:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    653a:	68c9      	ldr	r1, [r1, #12]
{
    653c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6540:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6542:	780a      	ldrb	r2, [r1, #0]
    6544:	b992      	cbnz	r2, 656c <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6546:	884a      	ldrh	r2, [r1, #2]
    6548:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    654c:	2d02      	cmp	r5, #2
    654e:	d819      	bhi.n	6584 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6550:	f1c5 0402 	rsb	r4, r5, #2
    6554:	429c      	cmp	r4, r3
    6556:	bfa8      	it	ge
    6558:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    655a:	f10d 0306 	add.w	r3, sp, #6
    655e:	4622      	mov	r2, r4
    6560:	1959      	adds	r1, r3, r5
    6562:	f7fb fb4b 	bl	1bfc <memcpy>
}
    6566:	4620      	mov	r0, r4
    6568:	b003      	add	sp, #12
    656a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    656c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    656e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6572:	d807      	bhi.n	6584 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6574:	f1c5 0410 	rsb	r4, r5, #16
    6578:	429c      	cmp	r4, r3
    657a:	bfa8      	it	ge
    657c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    657e:	4622      	mov	r2, r4
    6580:	4429      	add	r1, r5
    6582:	e7ee      	b.n	6562 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6584:	f06f 0406 	mvn.w	r4, #6
    6588:	e7ed      	b.n	6566 <bt_gatt_attr_read_service+0x2e>
	...

0000658c <bt_gatt_attr_write_ccc>:
{
    658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6590:	b087      	sub	sp, #28
    6592:	4688      	mov	r8, r1
    6594:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6598:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    659c:	2902      	cmp	r1, #2
{
    659e:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    65a0:	d85f      	bhi.n	6662 <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    65a2:	4419      	add	r1, r3
    65a4:	2902      	cmp	r1, #2
    65a6:	461f      	mov	r7, r3
    65a8:	dc5e      	bgt.n	6668 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    65aa:	7853      	ldrb	r3, [r2, #1]
    65ac:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    65ae:	2400      	movs	r4, #0
    65b0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    65b4:	686b      	ldr	r3, [r5, #4]
    65b6:	429c      	cmp	r4, r3
    65b8:	d206      	bcs.n	65c8 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    65ba:	6829      	ldr	r1, [r5, #0]
    65bc:	4648      	mov	r0, r9
    65be:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    65c2:	f7fd fe2b 	bl	421c <bt_conn_addr_le_cmp>
    65c6:	b9b8      	cbnz	r0, 65f8 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    65c8:	686b      	ldr	r3, [r5, #4]
    65ca:	429c      	cmp	r4, r3
    65cc:	d12f      	bne.n	662e <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    65ce:	b356      	cbz	r6, 6626 <bt_gatt_attr_write_ccc+0x9a>
    65d0:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    65d2:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    65d4:	686b      	ldr	r3, [r5, #4]
    65d6:	429c      	cmp	r4, r3
    65d8:	d217      	bcs.n	660a <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    65da:	6828      	ldr	r0, [r5, #0]
    65dc:	f8cd a008 	str.w	sl, [sp, #8]
    65e0:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    65e4:	2207      	movs	r2, #7
    65e6:	a902      	add	r1, sp, #8
    65e8:	4458      	add	r0, fp
    65ea:	f8cd a00b 	str.w	sl, [sp, #11]
    65ee:	f7fb faf0 	bl	1bd2 <memcmp>
    65f2:	b118      	cbz	r0, 65fc <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    65f4:	3401      	adds	r4, #1
    65f6:	e7ed      	b.n	65d4 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    65f8:	3401      	adds	r4, #1
    65fa:	e7db      	b.n	65b4 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    65fc:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    65fe:	2207      	movs	r2, #7
    6600:	f109 0144 	add.w	r1, r9, #68	; 0x44
    6604:	4458      	add	r0, fp
    6606:	f7fb faf9 	bl	1bfc <memcpy>
		if (i == ccc->cfg_len) {
    660a:	686b      	ldr	r3, [r5, #4]
    660c:	429c      	cmp	r4, r3
    660e:	d10e      	bne.n	662e <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    6610:	4b17      	ldr	r3, [pc, #92]	; (6670 <bt_gatt_attr_write_ccc+0xe4>)
    6612:	9301      	str	r3, [sp, #4]
    6614:	9300      	str	r3, [sp, #0]
    6616:	4a17      	ldr	r2, [pc, #92]	; (6674 <bt_gatt_attr_write_ccc+0xe8>)
    6618:	4b17      	ldr	r3, [pc, #92]	; (6678 <bt_gatt_attr_write_ccc+0xec>)
    661a:	4918      	ldr	r1, [pc, #96]	; (667c <bt_gatt_attr_write_ccc+0xf0>)
    661c:	4818      	ldr	r0, [pc, #96]	; (6680 <bt_gatt_attr_write_ccc+0xf4>)
    661e:	f7fa fcb5 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6622:	f06f 0710 	mvn.w	r7, #16
}
    6626:	4638      	mov	r0, r7
    6628:	b007      	add	sp, #28
    662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    662e:	682b      	ldr	r3, [r5, #0]
    6630:	0124      	lsls	r4, r4, #4
    6632:	4423      	add	r3, r4
    6634:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6636:	892b      	ldrh	r3, [r5, #8]
    6638:	42b3      	cmp	r3, r6
    663a:	d003      	beq.n	6644 <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    663c:	4629      	mov	r1, r5
    663e:	4640      	mov	r0, r8
    6640:	f7ff fca3 	bl	5f8a <gatt_ccc_changed>
	if (!value) {
    6644:	2e00      	cmp	r6, #0
    6646:	d1ee      	bne.n	6626 <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6648:	6828      	ldr	r0, [r5, #0]
    664a:	9604      	str	r6, [sp, #16]
    664c:	4420      	add	r0, r4
    664e:	2207      	movs	r2, #7
    6650:	a904      	add	r1, sp, #16
    6652:	f8cd 6013 	str.w	r6, [sp, #19]
    6656:	f7fb fad1 	bl	1bfc <memcpy>
		ccc->cfg[i].value = 0;
    665a:	682b      	ldr	r3, [r5, #0]
    665c:	441c      	add	r4, r3
    665e:	8126      	strh	r6, [r4, #8]
    6660:	e7e1      	b.n	6626 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6662:	f06f 0706 	mvn.w	r7, #6
    6666:	e7de      	b.n	6626 <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6668:	f06f 070c 	mvn.w	r7, #12
    666c:	e7db      	b.n	6626 <bt_gatt_attr_write_ccc+0x9a>
    666e:	bf00      	nop
    6670:	00014645 	.word	0x00014645
    6674:	000153dc 	.word	0x000153dc
    6678:	00015e99 	.word	0x00015e99
    667c:	000153e3 	.word	0x000153e3
    6680:	00015f0a 	.word	0x00015f0a

00006684 <notify_cb>:
{
    6684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6688:	f642 1302 	movw	r3, #10498	; 0x2902
{
    668c:	4605      	mov	r5, r0
    668e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6690:	2400      	movs	r4, #0
    6692:	4669      	mov	r1, sp
    6694:	6800      	ldr	r0, [r0, #0]
    6696:	f88d 4000 	strb.w	r4, [sp]
    669a:	f8ad 3002 	strh.w	r3, [sp, #2]
    669e:	f7fb fc2b 	bl	1ef8 <bt_uuid_cmp>
    66a2:	b178      	cbz	r0, 66c4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    66a4:	f642 0303 	movw	r3, #10243	; 0x2803
    66a8:	6828      	ldr	r0, [r5, #0]
    66aa:	f88d 4004 	strb.w	r4, [sp, #4]
    66ae:	a901      	add	r1, sp, #4
    66b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    66b4:	f7fb fc20 	bl	1ef8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    66b8:	1b00      	subs	r0, r0, r4
    66ba:	bf18      	it	ne
    66bc:	2001      	movne	r0, #1
}
    66be:	b003      	add	sp, #12
    66c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    66c4:	68aa      	ldr	r2, [r5, #8]
    66c6:	4b2b      	ldr	r3, [pc, #172]	; (6774 <notify_cb+0xf0>)
    66c8:	429a      	cmp	r2, r3
    66ca:	d001      	beq.n	66d0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    66cc:	2001      	movs	r0, #1
    66ce:	e7f6      	b.n	66be <notify_cb+0x3a>
	ccc = attr->user_data;
    66d0:	68ef      	ldr	r7, [r5, #12]
    66d2:	4d29      	ldr	r5, [pc, #164]	; (6778 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    66d4:	4604      	mov	r4, r0
    66d6:	46a8      	mov	r8, r5
    66d8:	4681      	mov	r9, r0
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	429c      	cmp	r4, r3
    66de:	d2f5      	bcs.n	66cc <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    66e0:	6838      	ldr	r0, [r7, #0]
    66e2:	88b3      	ldrh	r3, [r6, #4]
    66e4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    66e8:	8902      	ldrh	r2, [r0, #8]
    66ea:	429a      	cmp	r2, r3
    66ec:	d114      	bne.n	6718 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    66ee:	f7fd fdad 	bl	424c <bt_conn_lookup_addr_le>
		if (!conn) {
    66f2:	4683      	mov	fp, r0
    66f4:	b9f8      	cbnz	r0, 6736 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    66f6:	683b      	ldr	r3, [r7, #0]
    66f8:	4543      	cmp	r3, r8
    66fa:	d10d      	bne.n	6718 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    66fc:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    66fe:	a801      	add	r0, sp, #4
    6700:	8c1a      	ldrh	r2, [r3, #32]
    6702:	69d9      	ldr	r1, [r3, #28]
    6704:	f7fb fa7a 	bl	1bfc <memcpy>
	if (!stored->start && !stored->end) {
    6708:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    670a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    670e:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6710:	b928      	cbnz	r0, 671e <notify_cb+0x9a>
    6712:	b942      	cbnz	r2, 6726 <notify_cb+0xa2>
		*stored = data;
    6714:	9801      	ldr	r0, [sp, #4]
    6716:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6718:	3401      	adds	r4, #1
    671a:	3510      	adds	r5, #16
    671c:	e7dd      	b.n	66da <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    671e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6722:	4281      	cmp	r1, r0
    6724:	d305      	bcc.n	6732 <notify_cb+0xae>
    6726:	429a      	cmp	r2, r3
    6728:	d2f6      	bcs.n	6718 <notify_cb+0x94>
	if (*end < new_end) {
    672a:	429a      	cmp	r2, r3
    672c:	d2f4      	bcs.n	6718 <notify_cb+0x94>
		*end = new_end;
    672e:	81eb      	strh	r3, [r5, #14]
    6730:	e7f2      	b.n	6718 <notify_cb+0x94>
		*start = new_start;
    6732:	81a9      	strh	r1, [r5, #12]
    6734:	e7f9      	b.n	672a <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6736:	7a43      	ldrb	r3, [r0, #9]
    6738:	2b03      	cmp	r3, #3
    673a:	d002      	beq.n	6742 <notify_cb+0xbe>
			bt_conn_unref(conn);
    673c:	f7fd fdc2 	bl	42c4 <bt_conn_unref>
    6740:	e7ea      	b.n	6718 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6742:	88b3      	ldrh	r3, [r6, #4]
    6744:	2b02      	cmp	r3, #2
    6746:	d10c      	bne.n	6762 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6748:	6971      	ldr	r1, [r6, #20]
    674a:	f7ff fd4b 	bl	61e4 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    674e:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6750:	4658      	mov	r0, fp
    6752:	f7fd fdb7 	bl	42c4 <bt_conn_unref>
		if (err < 0) {
    6756:	f1ba 0f00 	cmp.w	sl, #0
    675a:	db09      	blt.n	6770 <notify_cb+0xec>
		data->err = 0;
    675c:	f8c6 9000 	str.w	r9, [r6]
    6760:	e7da      	b.n	6718 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6762:	68b1      	ldr	r1, [r6, #8]
    6764:	8a33      	ldrh	r3, [r6, #16]
    6766:	68f2      	ldr	r2, [r6, #12]
    6768:	8a09      	ldrh	r1, [r1, #16]
    676a:	f7ff fcad 	bl	60c8 <gatt_notify>
    676e:	e7ee      	b.n	674e <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6770:	2000      	movs	r0, #0
    6772:	e7a4      	b.n	66be <notify_cb+0x3a>
    6774:	0000658d 	.word	0x0000658d
    6778:	200005e0 	.word	0x200005e0

0000677c <bt_gatt_init>:
{
    677c:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    677e:	4806      	ldr	r0, [pc, #24]	; (6798 <bt_gatt_init+0x1c>)
    6780:	f7ff fc58 	bl	6034 <gatt_register>
	gatt_register(&gatt_svc);
    6784:	4805      	ldr	r0, [pc, #20]	; (679c <bt_gatt_init+0x20>)
    6786:	f7ff fc55 	bl	6034 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    678a:	4905      	ldr	r1, [pc, #20]	; (67a0 <bt_gatt_init+0x24>)
    678c:	4805      	ldr	r0, [pc, #20]	; (67a4 <bt_gatt_init+0x28>)
}
    678e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6792:	f00d bc87 	b.w	140a4 <k_delayed_work_init>
    6796:	bf00      	nop
    6798:	20003ca4 	.word	0x20003ca4
    679c:	20003d00 	.word	0x20003d00
    67a0:	00006829 	.word	0x00006829
    67a4:	200005b4 	.word	0x200005b4

000067a8 <bt_gatt_foreach_attr>:
{
    67a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67ac:	4699      	mov	r9, r3
    67ae:	4b12      	ldr	r3, [pc, #72]	; (67f8 <bt_gatt_foreach_attr+0x50>)
    67b0:	681c      	ldr	r4, [r3, #0]
    67b2:	4606      	mov	r6, r0
    67b4:	460f      	mov	r7, r1
    67b6:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    67b8:	b1dc      	cbz	r4, 67f2 <bt_gatt_foreach_attr+0x4a>
    67ba:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    67bc:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    67c0:	b1bc      	cbz	r4, 67f2 <bt_gatt_foreach_attr+0x4a>
    67c2:	2500      	movs	r5, #0
    67c4:	e006      	b.n	67d4 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    67c6:	6820      	ldr	r0, [r4, #0]
    67c8:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    67cc:	8a03      	ldrh	r3, [r0, #16]
    67ce:	42b3      	cmp	r3, r6
    67d0:	d207      	bcs.n	67e2 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    67d2:	3501      	adds	r5, #1
    67d4:	6863      	ldr	r3, [r4, #4]
    67d6:	42ab      	cmp	r3, r5
    67d8:	d8f5      	bhi.n	67c6 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    67da:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    67dc:	b14c      	cbz	r4, 67f2 <bt_gatt_foreach_attr+0x4a>
    67de:	3c08      	subs	r4, #8
    67e0:	e7ee      	b.n	67c0 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    67e2:	42bb      	cmp	r3, r7
    67e4:	d8f5      	bhi.n	67d2 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    67e6:	4649      	mov	r1, r9
    67e8:	47c0      	blx	r8
    67ea:	2800      	cmp	r0, #0
    67ec:	d1f1      	bne.n	67d2 <bt_gatt_foreach_attr+0x2a>
    67ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67f6:	bf00      	nop
    67f8:	20000584 	.word	0x20000584

000067fc <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    67fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    67fe:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6802:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6804:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6806:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6808:	2302      	movs	r3, #2
    680a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    680e:	4a05      	ldr	r2, [pc, #20]	; (6824 <bt_gatt_indicate.part.12+0x28>)
    6810:	8a00      	ldrh	r0, [r0, #16]
    6812:	466b      	mov	r3, sp
    6814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6818:	f7ff ffc6 	bl	67a8 <bt_gatt_foreach_attr>
}
    681c:	9800      	ldr	r0, [sp, #0]
    681e:	b007      	add	sp, #28
    6820:	f85d fb04 	ldr.w	pc, [sp], #4
    6824:	00006685 	.word	0x00006685

00006828 <sc_process>:
{
    6828:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    682a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    682e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6832:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6834:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6838:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    683c:	3828      	subs	r0, #40	; 0x28
    683e:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6842:	f3bf 8f5b 	dmb	ish
    6846:	e854 2f00 	ldrex	r2, [r4]
    684a:	f022 0201 	bic.w	r2, r2, #1
    684e:	e844 2100 	strex	r1, r2, [r4]
    6852:	2900      	cmp	r1, #0
    6854:	d1f7      	bne.n	6846 <sc_process+0x1e>
    6856:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    685a:	2200      	movs	r2, #0
    685c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6860:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6864:	4a0e      	ldr	r2, [pc, #56]	; (68a0 <sc_process+0x78>)
    6866:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    686a:	4a0e      	ldr	r2, [pc, #56]	; (68a4 <sc_process+0x7c>)
    686c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6870:	aa01      	add	r2, sp, #4
    6872:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6876:	2204      	movs	r2, #4
    6878:	f823 2c08 	strh.w	r2, [r3, #-8]
    687c:	f7ff ffbe 	bl	67fc <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6880:	b958      	cbnz	r0, 689a <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6882:	f3bf 8f5b 	dmb	ish
    6886:	e854 3f00 	ldrex	r3, [r4]
    688a:	f043 0302 	orr.w	r3, r3, #2
    688e:	e844 3200 	strex	r2, r3, [r4]
    6892:	2a00      	cmp	r2, #0
    6894:	d1f7      	bne.n	6886 <sc_process+0x5e>
    6896:	f3bf 8f5b 	dmb	ish
}
    689a:	b002      	add	sp, #8
    689c:	bd10      	pop	{r4, pc}
    689e:	bf00      	nop
    68a0:	20003cd8 	.word	0x20003cd8
    68a4:	00006371 	.word	0x00006371

000068a8 <bt_gatt_attr_next>:
{
    68a8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    68aa:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    68ac:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    68ae:	3101      	adds	r1, #1
    68b0:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    68b2:	2200      	movs	r2, #0
    68b4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    68b8:	4608      	mov	r0, r1
    68ba:	4a03      	ldr	r2, [pc, #12]	; (68c8 <bt_gatt_attr_next+0x20>)
    68bc:	f7ff ff74 	bl	67a8 <bt_gatt_foreach_attr>
}
    68c0:	9801      	ldr	r0, [sp, #4]
    68c2:	b003      	add	sp, #12
    68c4:	f85d fb04 	ldr.w	pc, [sp], #4
    68c8:	00005f85 	.word	0x00005f85

000068cc <bt_gatt_attr_read_chrc>:
{
    68cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    68d0:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    68d4:	b08b      	sub	sp, #44	; 0x2c
    68d6:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    68d8:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    68da:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    68de:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    68e2:	f88d 3014 	strb.w	r3, [sp, #20]
{
    68e6:	4688      	mov	r8, r1
    68e8:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    68ea:	f7ff ffdd 	bl	68a8 <bt_gatt_attr_next>
	if (!next) {
    68ee:	4605      	mov	r5, r0
    68f0:	bb40      	cbnz	r0, 6944 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    68f2:	4b1c      	ldr	r3, [pc, #112]	; (6964 <bt_gatt_attr_read_chrc+0x98>)
    68f4:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    68f8:	9302      	str	r3, [sp, #8]
    68fa:	9201      	str	r2, [sp, #4]
    68fc:	9300      	str	r3, [sp, #0]
    68fe:	4a1a      	ldr	r2, [pc, #104]	; (6968 <bt_gatt_attr_read_chrc+0x9c>)
    6900:	4b1a      	ldr	r3, [pc, #104]	; (696c <bt_gatt_attr_read_chrc+0xa0>)
    6902:	491b      	ldr	r1, [pc, #108]	; (6970 <bt_gatt_attr_read_chrc+0xa4>)
    6904:	481b      	ldr	r0, [pc, #108]	; (6974 <bt_gatt_attr_read_chrc+0xa8>)
    6906:	f7fa fb41 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    690a:	f88d 5015 	strb.w	r5, [sp, #21]
    690e:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6912:	f8d9 1000 	ldr.w	r1, [r9]
    6916:	780b      	ldrb	r3, [r1, #0]
    6918:	b9c3      	cbnz	r3, 694c <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    691a:	884b      	ldrh	r3, [r1, #2]
    691c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6920:	2305      	movs	r3, #5
	if (offset > value_len) {
    6922:	42b3      	cmp	r3, r6
    6924:	d31a      	bcc.n	695c <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    6926:	1b9b      	subs	r3, r3, r6
    6928:	42a3      	cmp	r3, r4
    692a:	bfa8      	it	ge
    692c:	4623      	movge	r3, r4
    692e:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6930:	ab05      	add	r3, sp, #20
    6932:	4622      	mov	r2, r4
    6934:	1999      	adds	r1, r3, r6
    6936:	4638      	mov	r0, r7
    6938:	f7fb f960 	bl	1bfc <memcpy>
}
    693c:	4620      	mov	r0, r4
    693e:	b00b      	add	sp, #44	; 0x2c
    6940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6944:	8a03      	ldrh	r3, [r0, #16]
    6946:	f8ad 3015 	strh.w	r3, [sp, #21]
    694a:	e7e2      	b.n	6912 <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    694c:	2210      	movs	r2, #16
    694e:	3101      	adds	r1, #1
    6950:	f10d 0017 	add.w	r0, sp, #23
    6954:	f7fb f952 	bl	1bfc <memcpy>
		value_len += 16;
    6958:	2313      	movs	r3, #19
    695a:	e7e2      	b.n	6922 <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    695c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6960:	e7ec      	b.n	693c <bt_gatt_attr_read_chrc+0x70>
    6962:	bf00      	nop
    6964:	00014645 	.word	0x00014645
    6968:	000153dc 	.word	0x000153dc
    696c:	00015e82 	.word	0x00015e82
    6970:	000153e3 	.word	0x000153e3
    6974:	00015ed4 	.word	0x00015ed4

00006978 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    6978:	7a43      	ldrb	r3, [r0, #9]
    697a:	2b03      	cmp	r3, #3
{
    697c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6980:	4680      	mov	r8, r0
    6982:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    6984:	d144      	bne.n	6a10 <bt_gatt_unsubscribe+0x98>
    6986:	4b2b      	ldr	r3, [pc, #172]	; (6a34 <bt_gatt_unsubscribe+0xbc>)
    6988:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    698a:	b1cc      	cbz	r4, 69c0 <bt_gatt_unsubscribe+0x48>
    698c:	f1b4 0528 	subs.w	r5, r4, #40	; 0x28
    6990:	d144      	bne.n	6a1c <bt_gatt_unsubscribe+0xa4>
    6992:	462c      	mov	r4, r5
    6994:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    6998:	f8df a098 	ldr.w	sl, [pc, #152]	; 6a34 <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    699c:	465a      	mov	r2, fp
    699e:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    69a0:	f106 0928 	add.w	r9, r6, #40	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    69a4:	b975      	cbnz	r5, 69c4 <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    69a6:	2a00      	cmp	r2, #0
    69a8:	d035      	beq.n	6a16 <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    69aa:	b33f      	cbz	r7, 69fc <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    69ac:	69f4      	ldr	r4, [r6, #28]
    69ae:	462b      	mov	r3, r5
    69b0:	462a      	mov	r2, r5
    69b2:	4631      	mov	r1, r6
    69b4:	4640      	mov	r0, r8
    69b6:	47a0      	blx	r4
		return 0;
    69b8:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    69ba:	b003      	add	sp, #12
    69bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69c0:	4625      	mov	r5, r4
    69c2:	e7e7      	b.n	6994 <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    69c4:	42b5      	cmp	r5, r6
    69c6:	d108      	bne.n	69da <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    69c8:	464a      	mov	r2, r9
    69ca:	4659      	mov	r1, fp
    69cc:	4650      	mov	r0, sl
    69ce:	f7ff fac8 	bl	5f62 <sys_slist_remove>
			found = true;
    69d2:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    69d4:	bb3c      	cbnz	r4, 6a26 <bt_gatt_unsubscribe+0xae>
    69d6:	4623      	mov	r3, r4
    69d8:	e028      	b.n	6a2c <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    69da:	f105 0114 	add.w	r1, r5, #20
    69de:	4640      	mov	r0, r8
    69e0:	9201      	str	r2, [sp, #4]
    69e2:	f7fd fc1b 	bl	421c <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    69e6:	f105 0b28 	add.w	fp, r5, #40	; 0x28
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    69ea:	9a01      	ldr	r2, [sp, #4]
    69ec:	2800      	cmp	r0, #0
    69ee:	d1f1      	bne.n	69d4 <bt_gatt_unsubscribe+0x5c>
    69f0:	8c29      	ldrh	r1, [r5, #32]
    69f2:	8c33      	ldrh	r3, [r6, #32]
			has_subscription = true;
    69f4:	4299      	cmp	r1, r3
    69f6:	bf08      	it	eq
    69f8:	2701      	moveq	r7, #1
    69fa:	e7eb      	b.n	69d4 <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    69fc:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	params->value = 0x0000;
    69fe:	84b7      	strh	r7, [r6, #36]	; 0x24
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    6a00:	4633      	mov	r3, r6
    6a02:	463a      	mov	r2, r7
    6a04:	4640      	mov	r0, r8
}
    6a06:	b003      	add	sp, #12
    6a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    6a0c:	f7ff bbc4 	b.w	6198 <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    6a10:	f06f 0038 	mvn.w	r0, #56	; 0x38
    6a14:	e7d1      	b.n	69ba <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    6a16:	f06f 0015 	mvn.w	r0, #21
    6a1a:	e7ce      	b.n	69ba <bt_gatt_unsubscribe+0x42>
    6a1c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    6a1e:	2c00      	cmp	r4, #0
    6a20:	d0b8      	beq.n	6994 <bt_gatt_unsubscribe+0x1c>
    6a22:	3c28      	subs	r4, #40	; 0x28
    6a24:	e7b6      	b.n	6994 <bt_gatt_unsubscribe+0x1c>
    6a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a28:	b103      	cbz	r3, 6a2c <bt_gatt_unsubscribe+0xb4>
    6a2a:	3b28      	subs	r3, #40	; 0x28
    6a2c:	4625      	mov	r5, r4
    6a2e:	461c      	mov	r4, r3
    6a30:	e7b8      	b.n	69a4 <bt_gatt_unsubscribe+0x2c>
    6a32:	bf00      	nop
    6a34:	200005f0 	.word	0x200005f0

00006a38 <bt_gatt_notification>:
{
    6a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a3c:	4699      	mov	r9, r3
    6a3e:	4b17      	ldr	r3, [pc, #92]	; (6a9c <bt_gatt_notification+0x64>)
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	4605      	mov	r5, r0
    6a44:	460e      	mov	r6, r1
    6a46:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6a48:	b333      	cbz	r3, 6a98 <bt_gatt_notification+0x60>
    6a4a:	f1b3 0a28 	subs.w	sl, r3, #40	; 0x28
    6a4e:	d101      	bne.n	6a54 <bt_gatt_notification+0x1c>
    6a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a54:	681c      	ldr	r4, [r3, #0]
    6a56:	b104      	cbz	r4, 6a5a <bt_gatt_notification+0x22>
    6a58:	3c28      	subs	r4, #40	; 0x28
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    6a5a:	f10a 0114 	add.w	r1, sl, #20
    6a5e:	4628      	mov	r0, r5
    6a60:	f7fd fbdc 	bl	421c <bt_conn_addr_le_cmp>
    6a64:	b978      	cbnz	r0, 6a86 <bt_gatt_notification+0x4e>
    6a66:	f8ba 3020 	ldrh.w	r3, [sl, #32]
    6a6a:	42b3      	cmp	r3, r6
    6a6c:	d10b      	bne.n	6a86 <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    6a6e:	f8da 701c 	ldr.w	r7, [sl, #28]
    6a72:	464b      	mov	r3, r9
    6a74:	4642      	mov	r2, r8
    6a76:	4651      	mov	r1, sl
    6a78:	4628      	mov	r0, r5
    6a7a:	47b8      	blx	r7
    6a7c:	b918      	cbnz	r0, 6a86 <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    6a7e:	4651      	mov	r1, sl
    6a80:	4628      	mov	r0, r5
    6a82:	f7ff ff79 	bl	6978 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6a86:	b90c      	cbnz	r4, 6a8c <bt_gatt_notification+0x54>
    6a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6a8e:	b103      	cbz	r3, 6a92 <bt_gatt_notification+0x5a>
    6a90:	3b28      	subs	r3, #40	; 0x28
    6a92:	46a2      	mov	sl, r4
    6a94:	461c      	mov	r4, r3
    6a96:	e7e0      	b.n	6a5a <bt_gatt_notification+0x22>
    6a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a9c:	200005f0 	.word	0x200005f0

00006aa0 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    6aa0:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6aa2:	4a0e      	ldr	r2, [pc, #56]	; (6adc <bt_gatt_connected+0x3c>)
    6aa4:	4603      	mov	r3, r0
{
    6aa6:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6aac:	2001      	movs	r0, #1
    6aae:	f7ff fe7b 	bl	67a8 <bt_gatt_foreach_attr>
    6ab2:	4b0b      	ldr	r3, [pc, #44]	; (6ae0 <bt_gatt_connected+0x40>)
    6ab4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    6ab6:	b10c      	cbz	r4, 6abc <bt_gatt_connected+0x1c>
    6ab8:	3c28      	subs	r4, #40	; 0x28
    6aba:	b904      	cbnz	r4, 6abe <bt_gatt_connected+0x1e>
    6abc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    6abe:	f104 0114 	add.w	r1, r4, #20
    6ac2:	4628      	mov	r0, r5
    6ac4:	f7fd fbaa 	bl	421c <bt_conn_addr_le_cmp>
    6ac8:	b928      	cbnz	r0, 6ad6 <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    6aca:	4623      	mov	r3, r4
    6acc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6ace:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    6ad0:	4628      	mov	r0, r5
    6ad2:	f7ff fb61 	bl	6198 <gatt_write_ccc.constprop.19>
    6ad6:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    6ad8:	e7ed      	b.n	6ab6 <bt_gatt_connected+0x16>
    6ada:	bf00      	nop
    6adc:	00006301 	.word	0x00006301
    6ae0:	200005f0 	.word	0x200005f0

00006ae4 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6ae4:	4603      	mov	r3, r0
{
    6ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6aea:	4a21      	ldr	r2, [pc, #132]	; (6b70 <bt_gatt_disconnected+0x8c>)
{
    6aec:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6af2:	2001      	movs	r0, #1
    6af4:	f7ff fe58 	bl	67a8 <bt_gatt_foreach_attr>
    6af8:	4b1e      	ldr	r3, [pc, #120]	; (6b74 <bt_gatt_disconnected+0x90>)
    6afa:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6afc:	b3b3      	cbz	r3, 6b6c <bt_gatt_disconnected+0x88>
    6afe:	f1b3 0628 	subs.w	r6, r3, #40	; 0x28
    6b02:	d11b      	bne.n	6b3c <bt_gatt_disconnected+0x58>
    6b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    6b08:	4640      	mov	r0, r8
    6b0a:	f7fc ff67 	bl	39dc <bt_addr_le_is_bonded>
    6b0e:	b118      	cbz	r0, 6b18 <bt_gatt_disconnected+0x34>
    6b10:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    6b14:	07db      	lsls	r3, r3, #31
    6b16:	d509      	bpl.n	6b2c <bt_gatt_disconnected+0x48>
			params->value = 0;
    6b18:	f8a6 9024 	strh.w	r9, [r6, #36]	; 0x24
			gatt_subscription_remove(conn, prev, params);
    6b1c:	4632      	mov	r2, r6
    6b1e:	4629      	mov	r1, r5
    6b20:	4638      	mov	r0, r7
    6b22:	f7ff fa53 	bl	5fcc <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6b26:	b9dc      	cbnz	r4, 6b60 <bt_gatt_disconnected+0x7c>
    6b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    6b2c:	7d33      	ldrb	r3, [r6, #20]
    6b2e:	b1a3      	cbz	r3, 6b5a <bt_gatt_disconnected+0x76>
    6b30:	2207      	movs	r2, #7
    6b32:	4641      	mov	r1, r8
    6b34:	4650      	mov	r0, sl
    6b36:	f7fb f861 	bl	1bfc <memcpy>
    6b3a:	e00e      	b.n	6b5a <bt_gatt_disconnected+0x76>
    6b3c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6b3e:	b104      	cbz	r4, 6b42 <bt_gatt_disconnected+0x5e>
    6b40:	3c28      	subs	r4, #40	; 0x28
    6b42:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    6b44:	f107 0844 	add.w	r8, r7, #68	; 0x44
			params->value = 0;
    6b48:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    6b4a:	f106 0a14 	add.w	sl, r6, #20
    6b4e:	4651      	mov	r1, sl
    6b50:	4638      	mov	r0, r7
    6b52:	f7fd fb63 	bl	421c <bt_conn_addr_le_cmp>
    6b56:	2800      	cmp	r0, #0
    6b58:	d0d6      	beq.n	6b08 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    6b5a:	f106 0528 	add.w	r5, r6, #40	; 0x28
    6b5e:	e7e2      	b.n	6b26 <bt_gatt_disconnected+0x42>
    6b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    6b62:	b103      	cbz	r3, 6b66 <bt_gatt_disconnected+0x82>
    6b64:	3b28      	subs	r3, #40	; 0x28
    6b66:	4626      	mov	r6, r4
    6b68:	461c      	mov	r4, r3
    6b6a:	e7ee      	b.n	6b4a <bt_gatt_disconnected+0x66>
    6b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b70:	000063e9 	.word	0x000063e9
    6b74:	200005f0 	.word	0x200005f0

00006b78 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6b7a:	4a0b      	ldr	r2, [pc, #44]	; (6ba8 <bt_smp_accept+0x30>)
    6b7c:	6813      	ldr	r3, [r2, #0]
    6b7e:	b933      	cbnz	r3, 6b8e <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.ops = &ops;
    6b80:	480a      	ldr	r0, [pc, #40]	; (6bac <bt_smp_accept+0x34>)
    6b82:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6b84:	600a      	str	r2, [r1, #0]

		return 0;
    6b86:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6b88:	b005      	add	sp, #20
    6b8a:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    6b8e:	4b08      	ldr	r3, [pc, #32]	; (6bb0 <bt_smp_accept+0x38>)
    6b90:	9302      	str	r3, [sp, #8]
    6b92:	9001      	str	r0, [sp, #4]
    6b94:	9300      	str	r3, [sp, #0]
    6b96:	4a07      	ldr	r2, [pc, #28]	; (6bb4 <bt_smp_accept+0x3c>)
    6b98:	4b07      	ldr	r3, [pc, #28]	; (6bb8 <bt_smp_accept+0x40>)
    6b9a:	4908      	ldr	r1, [pc, #32]	; (6bbc <bt_smp_accept+0x44>)
    6b9c:	4808      	ldr	r0, [pc, #32]	; (6bc0 <bt_smp_accept+0x48>)
    6b9e:	f7fa f9f5 	bl	f8c <printk>
	return -ENOMEM;
    6ba2:	f06f 000b 	mvn.w	r0, #11
    6ba6:	e7ef      	b.n	6b88 <bt_smp_accept+0x10>
    6ba8:	200005f8 	.word	0x200005f8
    6bac:	20003d18 	.word	0x20003d18
    6bb0:	00014645 	.word	0x00014645
    6bb4:	00015394 	.word	0x00015394
    6bb8:	00016006 	.word	0x00016006
    6bbc:	000153e3 	.word	0x000153e3
    6bc0:	00016014 	.word	0x00016014

00006bc4 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6bc4:	2100      	movs	r1, #0
{
    6bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6bca:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6bcc:	4608      	mov	r0, r1
    6bce:	f7fd fee6 	bl	499e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6bd2:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6bd6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6bd8:	2101      	movs	r1, #1
    6bda:	4630      	mov	r0, r6
    6bdc:	f00b ff16 	bl	12a0c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6be0:	2505      	movs	r5, #5
    6be2:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6be4:	2101      	movs	r1, #1
    6be6:	4630      	mov	r0, r6
    6be8:	f00b ff10 	bl	12a0c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6bec:	7005      	strb	r5, [r0, #0]
    6bee:	4622      	mov	r2, r4
    6bf0:	4638      	mov	r0, r7
    6bf2:	2300      	movs	r3, #0
    6bf4:	2106      	movs	r1, #6
}
    6bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6bfa:	f7fd bed3 	b.w	49a4 <bt_l2cap_send_cb>

00006bfe <bt_smp_sign_verify>:
    6bfe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6c02:	4770      	bx	lr

00006c04 <bt_smp_sign>:
}
    6c04:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6c08:	4770      	bx	lr
	...

00006c0c <bt_smp_init>:

int bt_smp_init(void)
{
    6c0c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6c0e:	4802      	ldr	r0, [pc, #8]	; (6c18 <bt_smp_init+0xc>)
    6c10:	f7fd fe0a 	bl	4828 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6c14:	2000      	movs	r0, #0
    6c16:	bd08      	pop	{r3, pc}
    6c18:	20003d0c 	.word	0x20003d0c

00006c1c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6c1e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c20:	1dc3      	adds	r3, r0, #7
{
    6c22:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c24:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c28:	1e50      	subs	r0, r2, #1
{
    6c2a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c2c:	b280      	uxth	r0, r0
{
    6c2e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6c30:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6c32:	2100      	movs	r1, #0
    6c34:	2204      	movs	r2, #4
    6c36:	fb06 5000 	mla	r0, r6, r0, r5
    6c3a:	f7fb f80b 	bl	1c54 <memset>
    6c3e:	3c02      	subs	r4, #2
    6c40:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6c42:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c46:	42bc      	cmp	r4, r7
    6c48:	d101      	bne.n	6c4e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6c4a:	b003      	add	sp, #12
    6c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6c4e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6c52:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c54:	2204      	movs	r2, #4
    6c56:	1b80      	subs	r0, r0, r6
    6c58:	eb0d 0102 	add.w	r1, sp, r2
    6c5c:	4428      	add	r0, r5
    6c5e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6c60:	9301      	str	r3, [sp, #4]
    6c62:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6c64:	f7fa ffca 	bl	1bfc <memcpy>
    6c68:	e7ed      	b.n	6c46 <mem_init+0x2a>

00006c6a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6c6c:	6805      	ldr	r5, [r0, #0]
{
    6c6e:	4606      	mov	r6, r0
	if (*mem_head) {
    6c70:	b195      	cbz	r5, 6c98 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6c72:	1deb      	adds	r3, r5, #7
    6c74:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6c78:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6c7a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6c7c:	4629      	mov	r1, r5
    6c7e:	eb0d 0002 	add.w	r0, sp, r2
    6c82:	f7fa ffbb 	bl	1bfc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6c86:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6c88:	3c01      	subs	r4, #1
    6c8a:	b2a4      	uxth	r4, r4
		if (head) {
    6c8c:	b11b      	cbz	r3, 6c96 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6c8e:	1dda      	adds	r2, r3, #7
    6c90:	f022 0203 	bic.w	r2, r2, #3
    6c94:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6c96:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6c98:	4628      	mov	r0, r5
    6c9a:	b002      	add	sp, #8
    6c9c:	bd70      	pop	{r4, r5, r6, pc}

00006c9e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6c9e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6ca0:	680c      	ldr	r4, [r1, #0]
{
    6ca2:	4606      	mov	r6, r0
    6ca4:	460d      	mov	r5, r1
	if (*mem_head) {
    6ca6:	b11c      	cbz	r4, 6cb0 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6ca8:	1de3      	adds	r3, r4, #7
    6caa:	f023 0303 	bic.w	r3, r3, #3
    6cae:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6cb0:	2204      	movs	r2, #4
    6cb2:	4629      	mov	r1, r5
    6cb4:	4630      	mov	r0, r6
    6cb6:	f7fa ffa1 	bl	1bfc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6cba:	1df2      	adds	r2, r6, #7
    6cbc:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6cc0:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6cc2:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6cc4:	602e      	str	r6, [r5, #0]
    6cc6:	bd70      	pop	{r4, r5, r6, pc}

00006cc8 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6cc8:	b118      	cbz	r0, 6cd2 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6cca:	3007      	adds	r0, #7
    6ccc:	f020 0003 	bic.w	r0, r0, #3
    6cd0:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6cd2:	4770      	bx	lr

00006cd4 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6cd4:	fb02 0001 	mla	r0, r2, r1, r0
    6cd8:	4770      	bx	lr

00006cda <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6cda:	1a40      	subs	r0, r0, r1
    6cdc:	b280      	uxth	r0, r0
}
    6cde:	fbb0 f0f2 	udiv	r0, r0, r2
    6ce2:	4770      	bx	lr

00006ce4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6ce4:	b510      	push	{r4, lr}
	src += len;
    6ce6:	4411      	add	r1, r2
    6ce8:	3801      	subs	r0, #1
	while (len--) {
    6cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cee:	3a01      	subs	r2, #1
    6cf0:	b292      	uxth	r2, r2
    6cf2:	429a      	cmp	r2, r3
    6cf4:	d100      	bne.n	6cf8 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6cf6:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6cf8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6cfc:	f800 4f01 	strb.w	r4, [r0, #1]!
    6d00:	e7f5      	b.n	6cee <mem_rcopy+0xa>

00006d02 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    6d02:	4401      	add	r1, r0
	while (len--) {
    6d04:	4288      	cmp	r0, r1
    6d06:	d101      	bne.n	6d0c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6d08:	2000      	movs	r0, #0
    6d0a:	4770      	bx	lr
		if (*src++) {
    6d0c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6d10:	2b00      	cmp	r3, #0
    6d12:	d0f7      	beq.n	6d04 <mem_nz+0x2>
			return 1;
    6d14:	2001      	movs	r0, #1
}
    6d16:	4770      	bx	lr

00006d18 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6d18:	6010      	str	r0, [r2, #0]
    6d1a:	6008      	str	r0, [r1, #0]

	return link;
}
    6d1c:	4770      	bx	lr

00006d1e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    6d1e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    6d20:	6814      	ldr	r4, [r2, #0]
    6d22:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    6d24:	6814      	ldr	r4, [r2, #0]
    6d26:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    6d28:	6010      	str	r0, [r2, #0]

	return link;
}
    6d2a:	bd10      	pop	{r4, pc}

00006d2c <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6d2c:	4288      	cmp	r0, r1
    6d2e:	d003      	beq.n	6d38 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    6d30:	b11a      	cbz	r2, 6d3a <memq_peek+0xe>
		*mem = head->mem;
    6d32:	6843      	ldr	r3, [r0, #4]
    6d34:	6013      	str	r3, [r2, #0]
    6d36:	4770      	bx	lr
		return NULL;
    6d38:	2000      	movs	r0, #0
	}

	return head;
}
    6d3a:	4770      	bx	lr

00006d3c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    6d3c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6d3e:	4283      	cmp	r3, r0
    6d40:	d009      	beq.n	6d56 <memq_dequeue+0x1a>
	if (mem) {
    6d42:	b122      	cbz	r2, 6d4e <memq_dequeue+0x12>
		*mem = head->mem;
    6d44:	6858      	ldr	r0, [r3, #4]
    6d46:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    6d48:	681a      	ldr	r2, [r3, #0]
    6d4a:	600a      	str	r2, [r1, #0]

	return link;
    6d4c:	e001      	b.n	6d52 <memq_dequeue+0x16>
	if (!link) {
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d1fa      	bne.n	6d48 <memq_dequeue+0xc>
}
    6d52:	4618      	mov	r0, r3
    6d54:	4770      	bx	lr
		return NULL;
    6d56:	2300      	movs	r3, #0
    6d58:	e7fb      	b.n	6d52 <memq_dequeue+0x16>
	...

00006d5c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    6d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    6d60:	4f11      	ldr	r7, [pc, #68]	; (6da8 <mayfly_init+0x4c>)
    6d62:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6dac <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    6d66:	2604      	movs	r6, #4
	while (callee_id--) {
    6d68:	3e01      	subs	r6, #1
    6d6a:	b2f6      	uxtb	r6, r6
    6d6c:	2eff      	cmp	r6, #255	; 0xff
    6d6e:	d019      	beq.n	6da4 <mayfly_init+0x48>
    6d70:	b233      	sxth	r3, r6
    6d72:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6d7a:	011d      	lsls	r5, r3, #4
    6d7c:	2404      	movs	r4, #4
    6d7e:	f04f 0a0c 	mov.w	sl, #12
    6d82:	e00a      	b.n	6d9a <mayfly_init+0x3e>
    6d84:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6d88:	1d0a      	adds	r2, r1, #4
    6d8a:	eb04 0008 	add.w	r0, r4, r8
    6d8e:	443a      	add	r2, r7
    6d90:	4439      	add	r1, r7
    6d92:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6d96:	f7ff ffbf 	bl	6d18 <memq_init>
		while (caller_id--) {
    6d9a:	3c01      	subs	r4, #1
    6d9c:	b2e4      	uxtb	r4, r4
    6d9e:	2cff      	cmp	r4, #255	; 0xff
    6da0:	d1f0      	bne.n	6d84 <mayfly_init+0x28>
    6da2:	e7e1      	b.n	6d68 <mayfly_init+0xc>
    6da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6da8:	2000070c 	.word	0x2000070c
    6dac:	2000068c 	.word	0x2000068c

00006db0 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6db0:	b4f0      	push	{r4, r5, r6, r7}
    6db2:	4b12      	ldr	r3, [pc, #72]	; (6dfc <mayfly_enable+0x4c>)
    6db4:	4605      	mov	r5, r0
    6db6:	460f      	mov	r7, r1
    6db8:	260c      	movs	r6, #12
    6dba:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6dbc:	b172      	cbz	r2, 6ddc <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6dbe:	4361      	muls	r1, r4
    6dc0:	fb06 1400 	mla	r4, r6, r0, r1
    6dc4:	4423      	add	r3, r4
    6dc6:	7a59      	ldrb	r1, [r3, #9]
    6dc8:	7a18      	ldrb	r0, [r3, #8]
    6dca:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6dcc:	bf04      	itt	eq
    6dce:	3101      	addeq	r1, #1
    6dd0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6dd2:	4628      	mov	r0, r5
    6dd4:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6dd6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6dd8:	f00b bc12 	b.w	12600 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6ddc:	434c      	muls	r4, r1
    6dde:	fb06 4400 	mla	r4, r6, r0, r4
    6de2:	4423      	add	r3, r4
    6de4:	7a9c      	ldrb	r4, [r3, #10]
    6de6:	7ada      	ldrb	r2, [r3, #11]
    6de8:	42a2      	cmp	r2, r4
    6dea:	d104      	bne.n	6df6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6dec:	3201      	adds	r2, #1
    6dee:	729a      	strb	r2, [r3, #10]
}
    6df0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6df2:	f00b bc65 	b.w	126c0 <mayfly_pend>
}
    6df6:	bcf0      	pop	{r4, r5, r6, r7}
    6df8:	4770      	bx	lr
    6dfa:	bf00      	nop
    6dfc:	2000070c 	.word	0x2000070c

00006e00 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e02:	4605      	mov	r5, r0
    6e04:	460e      	mov	r6, r1
    6e06:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e08:	b18a      	cbz	r2, 6e2e <mayfly_enqueue+0x2e>
    6e0a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6e0c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6e0e:	7820      	ldrb	r0, [r4, #0]
    6e10:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6e12:	f010 0703 	ands.w	r7, r0, #3
    6e16:	d029      	beq.n	6e6c <mayfly_enqueue+0x6c>
		if (chain) {
    6e18:	b303      	cbz	r3, 6e5c <mayfly_enqueue+0x5c>
			if (state != 1) {
    6e1a:	2f01      	cmp	r7, #1
    6e1c:	d039      	beq.n	6e92 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6e1e:	3201      	adds	r2, #1
    6e20:	b2d2      	uxtb	r2, r2
    6e22:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6e24:	4631      	mov	r1, r6
    6e26:	4628      	mov	r0, r5
    6e28:	f00b fc4a 	bl	126c0 <mayfly_pend>
    6e2c:	e01c      	b.n	6e68 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e2e:	f00b fc35 	bl	1269c <mayfly_prio_is_equal>
    6e32:	2800      	cmp	r0, #0
    6e34:	d0e9      	beq.n	6e0a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e36:	4631      	mov	r1, r6
    6e38:	4628      	mov	r0, r5
    6e3a:	f00b fc09 	bl	12650 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6e3e:	2800      	cmp	r0, #0
    6e40:	d0e3      	beq.n	6e0a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6e42:	2330      	movs	r3, #48	; 0x30
    6e44:	220c      	movs	r2, #12
    6e46:	4373      	muls	r3, r6
    6e48:	fb02 3305 	mla	r3, r2, r5, r3
    6e4c:	4a12      	ldr	r2, [pc, #72]	; (6e98 <mayfly_enqueue+0x98>)
    6e4e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6e50:	7a93      	ldrb	r3, [r2, #10]
    6e52:	7ad2      	ldrb	r2, [r2, #11]
    6e54:	1a9b      	subs	r3, r3, r2
    6e56:	bf18      	it	ne
    6e58:	2301      	movne	r3, #1
    6e5a:	e7d7      	b.n	6e0c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6e5c:	3202      	adds	r2, #2
    6e5e:	b2d2      	uxtb	r2, r2
    6e60:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6e62:	68e3      	ldr	r3, [r4, #12]
    6e64:	68a0      	ldr	r0, [r4, #8]
    6e66:	4798      	blx	r3
		return 0;
    6e68:	2000      	movs	r0, #0
    6e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d0f8      	beq.n	6e62 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    6e70:	3201      	adds	r2, #1
    6e72:	b2d2      	uxtb	r2, r2
    6e74:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6e76:	2304      	movs	r3, #4
    6e78:	2230      	movs	r2, #48	; 0x30
    6e7a:	fb12 3206 	smlabb	r2, r2, r6, r3
    6e7e:	230c      	movs	r3, #12
    6e80:	fb13 2305 	smlabb	r3, r3, r5, r2
    6e84:	4a04      	ldr	r2, [pc, #16]	; (6e98 <mayfly_enqueue+0x98>)
    6e86:	6860      	ldr	r0, [r4, #4]
    6e88:	441a      	add	r2, r3
    6e8a:	4621      	mov	r1, r4
    6e8c:	f7ff ff47 	bl	6d1e <memq_enqueue>
    6e90:	e7c8      	b.n	6e24 <mayfly_enqueue+0x24>
			return 1;
    6e92:	4638      	mov	r0, r7

	return 0;
}
    6e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e96:	bf00      	nop
    6e98:	2000070c 	.word	0x2000070c

00006e9c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    6e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ea0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6ea4:	b089      	sub	sp, #36	; 0x24
    6ea6:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    6ea8:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6eac:	4e43      	ldr	r6, [pc, #268]	; (6fbc <mayfly_run+0x120>)
    6eae:	9304      	str	r3, [sp, #16]
{
    6eb0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    6eb2:	2404      	movs	r4, #4
	u8_t disable = 0;
    6eb4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    6eb8:	3c01      	subs	r4, #1
    6eba:	b2e4      	uxtb	r4, r4
    6ebc:	2cff      	cmp	r4, #255	; 0xff
    6ebe:	d10b      	bne.n	6ed8 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d076      	beq.n	6fb4 <mayfly_run+0x118>
    6ec6:	f1b8 0f00 	cmp.w	r8, #0
    6eca:	d173      	bne.n	6fb4 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6ecc:	4642      	mov	r2, r8
    6ece:	4629      	mov	r1, r5
    6ed0:	4628      	mov	r0, r5
    6ed2:	f00b fb95 	bl	12600 <mayfly_enable_cb>
    6ed6:	e06d      	b.n	6fb4 <mayfly_run+0x118>
		struct mayfly *m = 0;
    6ed8:	f10d 0b20 	add.w	fp, sp, #32
    6edc:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    6ede:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    6ee0:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    6ee4:	f04f 0930 	mov.w	r9, #48	; 0x30
    6ee8:	fb07 f304 	mul.w	r3, r7, r4
    6eec:	fb09 3005 	mla	r0, r9, r5, r3
    6ef0:	1831      	adds	r1, r6, r0
    6ef2:	465a      	mov	r2, fp
    6ef4:	6849      	ldr	r1, [r1, #4]
    6ef6:	5830      	ldr	r0, [r6, r0]
    6ef8:	9302      	str	r3, [sp, #8]
    6efa:	f7ff ff17 	bl	6d2c <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6efe:	9b04      	ldr	r3, [sp, #16]
    6f00:	fb17 3704 	smlabb	r7, r7, r4, r3
    6f04:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    6f06:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f08:	9303      	str	r3, [sp, #12]
		while (link) {
    6f0a:	f1ba 0f00 	cmp.w	sl, #0
    6f0e:	d119      	bne.n	6f44 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    6f10:	2230      	movs	r2, #48	; 0x30
    6f12:	230c      	movs	r3, #12
    6f14:	436a      	muls	r2, r5
    6f16:	fb03 2204 	mla	r2, r3, r4, r2
    6f1a:	4432      	add	r2, r6
    6f1c:	7a91      	ldrb	r1, [r2, #10]
    6f1e:	7ad0      	ldrb	r0, [r2, #11]
    6f20:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    6f22:	bf1e      	ittt	ne
    6f24:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    6f26:	2201      	movne	r2, #1
    6f28:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    6f2a:	2230      	movs	r2, #48	; 0x30
    6f2c:	436a      	muls	r2, r5
    6f2e:	fb03 2304 	mla	r3, r3, r4, r2
    6f32:	4433      	add	r3, r6
    6f34:	7a1a      	ldrb	r2, [r3, #8]
    6f36:	7a59      	ldrb	r1, [r3, #9]
    6f38:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    6f3a:	bf1c      	itt	ne
    6f3c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    6f3e:	f04f 0801 	movne.w	r8, #1
    6f42:	e7b9      	b.n	6eb8 <mayfly_run+0x1c>
			req = m->_req;
    6f44:	9b07      	ldr	r3, [sp, #28]
    6f46:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    6f48:	785a      	ldrb	r2, [r3, #1]
    6f4a:	1abf      	subs	r7, r7, r2
    6f4c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    6f50:	2f01      	cmp	r7, #1
    6f52:	d104      	bne.n	6f5e <mayfly_run+0xc2>
				m->_ack--;
    6f54:	3a01      	subs	r2, #1
    6f56:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    6f58:	6898      	ldr	r0, [r3, #8]
    6f5a:	68da      	ldr	r2, [r3, #12]
    6f5c:	4790      	blx	r2
			req = m->_req;
    6f5e:	9a07      	ldr	r2, [sp, #28]
    6f60:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    6f62:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    6f64:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    6f66:	1a9a      	subs	r2, r3, r2
    6f68:	f002 0203 	and.w	r2, r2, #3
    6f6c:	2a01      	cmp	r2, #1
    6f6e:	9305      	str	r3, [sp, #20]
    6f70:	d00d      	beq.n	6f8e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6f72:	9b02      	ldr	r3, [sp, #8]
    6f74:	9903      	ldr	r1, [sp, #12]
    6f76:	fb09 3005 	mla	r0, r9, r5, r3
    6f7a:	4430      	add	r0, r6
    6f7c:	2200      	movs	r2, #0
    6f7e:	6840      	ldr	r0, [r0, #4]
    6f80:	f7ff fedc 	bl	6d3c <memq_dequeue>
				m->_link = link;
    6f84:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    6f86:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    6f88:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    6f8c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    6f8e:	9b02      	ldr	r3, [sp, #8]
    6f90:	fb09 3305 	mla	r3, r9, r5, r3
    6f94:	18f1      	adds	r1, r6, r3
    6f96:	465a      	mov	r2, fp
    6f98:	6849      	ldr	r1, [r1, #4]
    6f9a:	58f0      	ldr	r0, [r6, r3]
    6f9c:	f7ff fec6 	bl	6d2c <memq_peek>
			if (state == 1) {
    6fa0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6fa2:	4682      	mov	sl, r0
			if (state == 1) {
    6fa4:	d1b1      	bne.n	6f0a <mayfly_run+0x6e>
				if (caller_id || link) {
    6fa6:	b90c      	cbnz	r4, 6fac <mayfly_run+0x110>
    6fa8:	2800      	cmp	r0, #0
    6faa:	d0b1      	beq.n	6f10 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    6fac:	4629      	mov	r1, r5
    6fae:	4628      	mov	r0, r5
    6fb0:	f00b fb86 	bl	126c0 <mayfly_pend>
	}
}
    6fb4:	b009      	add	sp, #36	; 0x24
    6fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fba:	bf00      	nop
    6fbc:	2000070c 	.word	0x2000070c

00006fc0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    6fc0:	b510      	push	{r4, lr}
    6fc2:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    6fc4:	2000      	movs	r0, #0

	while (octets_len--) {
    6fc6:	3901      	subs	r1, #1
    6fc8:	b2c9      	uxtb	r1, r1
    6fca:	29ff      	cmp	r1, #255	; 0xff
    6fcc:	d100      	bne.n	6fd0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    6fce:	bd10      	pop	{r4, pc}
		bite = *octets;
    6fd0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d0f6      	beq.n	6fc6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    6fd8:	1e5c      	subs	r4, r3, #1
			one_count++;
    6fda:	3001      	adds	r0, #1
			bite &= (bite - 1);
    6fdc:	4023      	ands	r3, r4
			one_count++;
    6fde:	b2c0      	uxtb	r0, r0
    6fe0:	e7f8      	b.n	6fd4 <util_ones_count_get+0x14>

00006fe2 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    6fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    6fe4:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    6fe6:	6805      	ldr	r5, [r0, #0]
	current = previous;
    6fe8:	461a      	mov	r2, r3
	total = 0;
    6fea:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    6fec:	2aff      	cmp	r2, #255	; 0xff
    6fee:	d101      	bne.n	6ff4 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    6ff0:	2000      	movs	r0, #0
    6ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    6ff4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    6ff8:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    6ffa:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    6ffe:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7002:	d004      	beq.n	700e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7004:	68b3      	ldr	r3, [r6, #8]
    7006:	441c      	add	r4, r3
		current = ticker_current->next;
    7008:	4613      	mov	r3, r2
    700a:	463a      	mov	r2, r7
    700c:	e7ee      	b.n	6fec <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    700e:	4293      	cmp	r3, r2
    7010:	d100      	bne.n	7014 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7012:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7014:	b21b      	sxth	r3, r3
    7016:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    701a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    701c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    701e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7022:	7833      	ldrb	r3, [r6, #0]
    7024:	2bff      	cmp	r3, #255	; 0xff
    7026:	d006      	beq.n	7036 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    702c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7030:	689a      	ldr	r2, [r3, #8]
    7032:	4402      	add	r2, r0
    7034:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7036:	4420      	add	r0, r4
    7038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000703a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    703a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    703c:	1a55      	subs	r5, r2, r1
    703e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7042:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7044:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7046:	d109      	bne.n	705c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7048:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    704c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    704e:	42a2      	cmp	r2, r4
    7050:	d90e      	bls.n	7070 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7052:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7054:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7056:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7058:	6144      	str	r4, [r0, #20]
    705a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    705c:	1a8a      	subs	r2, r1, r2
    705e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7062:	4293      	cmp	r3, r2
    7064:	d901      	bls.n	706a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7066:	1a9a      	subs	r2, r3, r2
    7068:	e7f1      	b.n	704e <ticks_to_expire_prep+0x14>
    706a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    706c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    706e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7070:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7072:	2200      	movs	r2, #0
    7074:	e7ef      	b.n	7056 <ticks_to_expire_prep+0x1c>

00007076 <ticker_job_op_cb>:
{
    7076:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7078:	2200      	movs	r2, #0
    707a:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    707c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    707e:	6259      	str	r1, [r3, #36]	; 0x24
{
    7080:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7082:	b10a      	cbz	r2, 7088 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7086:	4710      	bx	r2
    7088:	4770      	bx	lr

0000708a <ticker_worker>:
{
    708a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    708e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7090:	2301      	movs	r3, #1
{
    7092:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7094:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7096:	2d00      	cmp	r5, #0
    7098:	d14c      	bne.n	7134 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    709a:	7f43      	ldrb	r3, [r0, #29]
    709c:	2bff      	cmp	r3, #255	; 0xff
    709e:	d102      	bne.n	70a6 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    70a0:	77c5      	strb	r5, [r0, #31]
		return;
    70a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    70a6:	f00a fe15 	bl	11cd4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70aa:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    70ac:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    70ae:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    70b2:	1bc7      	subs	r7, r0, r7
    70b4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    70b8:	2eff      	cmp	r6, #255	; 0xff
    70ba:	d006      	beq.n	70ca <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    70bc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    70c0:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    70c4:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    70c6:	429f      	cmp	r7, r3
    70c8:	d218      	bcs.n	70fc <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    70ca:	7aa2      	ldrb	r2, [r4, #10]
    70cc:	7ae3      	ldrb	r3, [r4, #11]
    70ce:	4293      	cmp	r3, r2
    70d0:	d105      	bne.n	70de <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    70d2:	3301      	adds	r3, #1
    70d4:	b2db      	uxtb	r3, r3
			last = 0;
    70d6:	2b02      	cmp	r3, #2
    70d8:	bf08      	it	eq
    70da:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    70dc:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    70de:	7ae3      	ldrb	r3, [r4, #11]
    70e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70e4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    70e6:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    70e8:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    70ec:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70ee:	46ac      	mov	ip, r5
    70f0:	4623      	mov	r3, r4
    70f2:	2104      	movs	r1, #4
    70f4:	2003      	movs	r0, #3
}
    70f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    70fa:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    70fc:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    70fe:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7100:	788a      	ldrb	r2, [r1, #2]
    7102:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7104:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7108:	1a9b      	subs	r3, r3, r2
    710a:	b2db      	uxtb	r3, r3
    710c:	2b01      	cmp	r3, #1
    710e:	d1d3      	bne.n	70b8 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7110:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7114:	3a01      	subs	r2, #1
    7116:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7118:	f1b9 0f00 	cmp.w	r9, #0
    711c:	d0cc      	beq.n	70b8 <ticker_worker+0x2e>
					   ticks_expired -
    711e:	6948      	ldr	r0, [r1, #20]
    7120:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7122:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7124:	1a28      	subs	r0, r5, r0
    7126:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    712c:	690b      	ldr	r3, [r1, #16]
    712e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7130:	47c8      	blx	r9
    7132:	e7c1      	b.n	70b8 <ticker_worker+0x2e>
    7134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007138 <ticker_job>:
{
    7138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    713c:	7fc2      	ldrb	r2, [r0, #31]
{
    713e:	b095      	sub	sp, #84	; 0x54
    7140:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7142:	2a00      	cmp	r2, #0
    7144:	f040 83be 	bne.w	78c4 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7148:	6943      	ldr	r3, [r0, #20]
    714a:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    714c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    714e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7150:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7152:	7ac0      	ldrb	r0, [r0, #11]
    7154:	4298      	cmp	r0, r3
    7156:	f000 808f 	beq.w	7278 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    715a:	440b      	add	r3, r1
    715c:	b2db      	uxtb	r3, r3
			first = 0;
    715e:	2b02      	cmp	r3, #2
    7160:	bf08      	it	eq
    7162:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7164:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7168:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    716c:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    716e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7172:	9b07      	ldr	r3, [sp, #28]
    7174:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7176:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    717a:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    717e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7182:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7184:	f8db 3000 	ldr.w	r3, [fp]
    7188:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    718a:	f8db 3004 	ldr.w	r3, [fp, #4]
    718e:	930d      	str	r3, [sp, #52]	; 0x34
    7190:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7194:	3b01      	subs	r3, #1
    7196:	b2db      	uxtb	r3, r3
    7198:	9304      	str	r3, [sp, #16]
	pending = 0;
    719a:	2300      	movs	r3, #0
    719c:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    719e:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    71a2:	9b04      	ldr	r3, [sp, #16]
    71a4:	2bff      	cmp	r3, #255	; 0xff
    71a6:	d16a      	bne.n	727e <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    71a8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    71ac:	9a05      	ldr	r2, [sp, #20]
    71ae:	1a9b      	subs	r3, r3, r2
    71b0:	bf18      	it	ne
    71b2:	2301      	movne	r3, #1
    71b4:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    71b6:	9b03      	ldr	r3, [sp, #12]
    71b8:	b1e3      	cbz	r3, 71f4 <ticker_job+0xbc>
	node = &instance->node[0];
    71ba:	f8db 3000 	ldr.w	r3, [fp]
    71be:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    71c0:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    71c4:	f89b 601d 	ldrb.w	r6, [fp, #29]
    71c8:	2eff      	cmp	r6, #255	; 0xff
    71ca:	d00c      	beq.n	71e6 <ticker_job+0xae>
		ticker = &node[id_expired];
    71cc:	b237      	sxth	r7, r6
    71ce:	9b06      	ldr	r3, [sp, #24]
    71d0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    71d4:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    71d8:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    71da:	4545      	cmp	r5, r8
    71dc:	f240 8136 	bls.w	744c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    71e0:	eba5 0508 	sub.w	r5, r5, r8
    71e4:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    71e6:	9b04      	ldr	r3, [sp, #16]
    71e8:	9a03      	ldr	r2, [sp, #12]
    71ea:	9905      	ldr	r1, [sp, #20]
    71ec:	42b1      	cmp	r1, r6
    71ee:	bf18      	it	ne
    71f0:	4613      	movne	r3, r2
    71f2:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    71f4:	f8db 3000 	ldr.w	r3, [fp]
    71f8:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    71fa:	f8db 3004 	ldr.w	r3, [fp, #4]
    71fe:	9312      	str	r3, [sp, #72]	; 0x48
    7200:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7204:	3b01      	subs	r3, #1
    7206:	b2db      	uxtb	r3, r3
    7208:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    720a:	9b03      	ldr	r3, [sp, #12]
    720c:	2bff      	cmp	r3, #255	; 0xff
    720e:	f040 8170 	bne.w	74f2 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7212:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7216:	9a05      	ldr	r2, [sp, #20]
    7218:	4293      	cmp	r3, r2
	if (!pending) {
    721a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    721c:	f040 8349 	bne.w	78b2 <ticker_job+0x77a>
	if (!pending) {
    7220:	b95b      	cbnz	r3, 723a <ticker_job+0x102>
    7222:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7226:	f8db 3004 	ldr.w	r3, [fp, #4]
    722a:	9303      	str	r3, [sp, #12]
    722c:	3c01      	subs	r4, #1
    722e:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7230:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7234:	2cff      	cmp	r4, #255	; 0xff
    7236:	f040 82a0 	bne.w	777a <ticker_job+0x642>
	instance->job_guard = 0;
    723a:	2300      	movs	r3, #0
    723c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7240:	9b04      	ldr	r3, [sp, #16]
    7242:	b14b      	cbz	r3, 7258 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7244:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7248:	2bff      	cmp	r3, #255	; 0xff
    724a:	f040 82e9 	bne.w	7820 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    724e:	f00a fd13 	bl	11c78 <cntr_stop>
    7252:	b908      	cbnz	r0, 7258 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7254:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7258:	f89b 301f 	ldrb.w	r3, [fp, #31]
    725c:	2b00      	cmp	r3, #0
    725e:	f000 8331 	beq.w	78c4 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7262:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7266:	465b      	mov	r3, fp
    7268:	2201      	movs	r2, #1
    726a:	2103      	movs	r1, #3
    726c:	2004      	movs	r0, #4
    726e:	46a4      	mov	ip, r4
}
    7270:	b015      	add	sp, #84	; 0x54
    7272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7276:	4760      	bx	ip
		flag_elapsed = 0;
    7278:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    727a:	4690      	mov	r8, r2
    727c:	e77f      	b.n	717e <ticker_job+0x46>
		user = &users[count_user];
    727e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7280:	9a04      	ldr	r2, [sp, #16]
    7282:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    728a:	78f9      	ldrb	r1, [r7, #3]
    728c:	78be      	ldrb	r6, [r7, #2]
    728e:	428e      	cmp	r6, r1
    7290:	f000 80d7 	beq.w	7442 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    7294:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    7296:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7298:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    729c:	0112      	lsls	r2, r2, #4
    729e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    72a0:	1c73      	adds	r3, r6, #1
    72a2:	b2db      	uxtb	r3, r3
				middle = 0;
    72a4:	4298      	cmp	r0, r3
    72a6:	bf08      	it	eq
    72a8:	2300      	moveq	r3, #0
			user->middle = middle;
    72aa:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    72ac:	9b08      	ldr	r3, [sp, #32]
    72ae:	5c9a      	ldrb	r2, [r3, r2]
    72b0:	2a03      	cmp	r2, #3
    72b2:	d9eb      	bls.n	728c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    72b4:	2a05      	cmp	r2, #5
    72b6:	d817      	bhi.n	72e8 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    72b8:	7869      	ldrb	r1, [r5, #1]
    72ba:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    72be:	930c      	str	r3, [sp, #48]	; 0x30
    72c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    72c2:	9b06      	ldr	r3, [sp, #24]
    72c4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    72c8:	7863      	ldrb	r3, [r4, #1]
    72ca:	78a0      	ldrb	r0, [r4, #2]
    72cc:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    72ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    72d2:	d009      	beq.n	72e8 <ticker_job+0x1b0>
			    (state == 0) ||
    72d4:	2a04      	cmp	r2, #4
    72d6:	d10c      	bne.n	72f2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    72d8:	686a      	ldr	r2, [r5, #4]
    72da:	b952      	cbnz	r2, 72f2 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    72dc:	68aa      	ldr	r2, [r5, #8]
    72de:	b942      	cbnz	r2, 72f2 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    72e0:	68ea      	ldr	r2, [r5, #12]
    72e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    72e6:	d104      	bne.n	72f2 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    72e8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    72ea:	4628      	mov	r0, r5
    72ec:	f7ff fec3 	bl	7076 <ticker_job_op_cb>
    72f0:	e7cb      	b.n	728a <ticker_job+0x152>
			if (state == 1) {
    72f2:	2b01      	cmp	r3, #1
    72f4:	f040 809b 	bne.w	742e <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    72f8:	4658      	mov	r0, fp
    72fa:	f7ff fe72 	bl	6fe2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    72fe:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7300:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7302:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7304:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7306:	f040 8084 	bne.w	7412 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    730a:	f8db 3014 	ldr.w	r3, [fp, #20]
    730e:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7310:	f00a fce0 	bl	11cd4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7316:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7318:	1ac3      	subs	r3, r0, r3
    731a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    731e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7320:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7322:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7324:	bf9e      	ittt	ls
    7326:	6962      	ldrls	r2, [r4, #20]
    7328:	1b92      	subls	r2, r2, r6
    732a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    732c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    732e:	bf96      	itet	ls
    7330:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7332:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7334:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7336:	b18a      	cbz	r2, 735c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7338:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    733a:	b179      	cbz	r1, 735c <ticker_job+0x224>
		user_op->params.update.lazy--;
    733c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7340:	fa1f fe8e 	uxth.w	lr, lr
    7344:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7348:	429a      	cmp	r2, r3
    734a:	d32b      	bcc.n	73a4 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    734c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7674 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7350:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7354:	45e6      	cmp	lr, ip
    7356:	d847      	bhi.n	73e8 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7358:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    735c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    735e:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7360:	4413      	add	r3, r2
    7362:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7364:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7366:	6963      	ldr	r3, [r4, #20]
    7368:	4413      	add	r3, r2
    736a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    736c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    736e:	4620      	mov	r0, r4
    7370:	f7ff fe63 	bl	703a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7374:	69a2      	ldr	r2, [r4, #24]
    7376:	892b      	ldrh	r3, [r5, #8]
    7378:	4413      	add	r3, r2
    737a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    737c:	896a      	ldrh	r2, [r5, #10]
    737e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7380:	bf8c      	ite	hi
    7382:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7384:	2300      	movls	r3, #0
    7386:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7388:	7bab      	ldrb	r3, [r5, #14]
    738a:	b103      	cbz	r3, 738e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    738c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    738e:	9b06      	ldr	r3, [sp, #24]
    7390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7392:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7396:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7398:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    739c:	3301      	adds	r3, #1
    739e:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    73a0:	2100      	movs	r1, #0
    73a2:	e7a2      	b.n	72ea <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    73a4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    73a8:	45e6      	cmp	lr, ip
    73aa:	d2cf      	bcs.n	734c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    73ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    73ae:	4eaf      	ldr	r6, [pc, #700]	; (766c <ticker_job+0x534>)
    73b0:	48af      	ldr	r0, [pc, #700]	; (7670 <ticker_job+0x538>)
    73b2:	198e      	adds	r6, r1, r6
    73b4:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    73b6:	bf81      	itttt	hi
    73b8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    73bc:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    73c0:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    73c4:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    73c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    73c8:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    73ca:	bf8c      	ite	hi
    73cc:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    73d0:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    73d4:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    73d6:	4491      	add	r9, r2
			ticker->lazy_current--;
    73d8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    73dc:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    73de:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    73e2:	f8a4 c01e 	strh.w	ip, [r4, #30]
    73e6:	e7af      	b.n	7348 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    73e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    73ea:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    73ec:	48a0      	ldr	r0, [pc, #640]	; (7670 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    73ee:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    73f0:	499e      	ldr	r1, [pc, #632]	; (766c <ticker_job+0x534>)
    73f2:	1871      	adds	r1, r6, r1
    73f4:	4281      	cmp	r1, r0
	return 0;
    73f6:	bf8e      	itee	hi
    73f8:	2100      	movhi	r1, #0
		return 1;
    73fa:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    73fc:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    73fe:	4411      	add	r1, r2
			ticker->lazy_current++;
    7400:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7404:	bf8c      	ite	hi
    7406:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7408:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    740a:	440b      	add	r3, r1
			ticker->lazy_current++;
    740c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7410:	e79e      	b.n	7350 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7412:	78a3      	ldrb	r3, [r4, #2]
    7414:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7416:	786b      	ldrb	r3, [r5, #1]
    7418:	f89b 201c 	ldrb.w	r2, [fp, #28]
    741c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    741e:	bf01      	itttt	eq
    7420:	23ff      	moveq	r3, #255	; 0xff
    7422:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7426:	2300      	moveq	r3, #0
    7428:	f8cb 3018 	streq.w	r3, [fp, #24]
    742c:	e7b8      	b.n	73a0 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    742e:	2104      	movs	r1, #4
    7430:	465b      	mov	r3, fp
    7432:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7436:	2201      	movs	r2, #1
    7438:	4608      	mov	r0, r1
    743a:	47a0      	blx	r4
				pending = 1;
    743c:	2301      	movs	r3, #1
				user->middle = prev;
    743e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7440:	9309      	str	r3, [sp, #36]	; 0x24
    7442:	9b04      	ldr	r3, [sp, #16]
    7444:	3b01      	subs	r3, #1
    7446:	b2db      	uxtb	r3, r3
    7448:	9304      	str	r3, [sp, #16]
    744a:	e6aa      	b.n	71a2 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    744c:	f8db 3018 	ldr.w	r3, [fp, #24]
    7450:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7452:	bf29      	itett	cs
    7454:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7456:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7458:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    745c:	2300      	movcs	r3, #0
    745e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7462:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7464:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7466:	b11b      	cbz	r3, 7470 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7468:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    746c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7470:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7472:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    7474:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7476:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    747a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    747e:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7482:	f1be 0f00 	cmp.w	lr, #0
    7486:	d030      	beq.n	74ea <ticker_job+0x3b2>
    7488:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    748a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7670 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    748e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7490:	6a21      	ldr	r1, [r4, #32]
    7492:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7494:	4975      	ldr	r1, [pc, #468]	; (766c <ticker_job+0x534>)
    7496:	1859      	adds	r1, r3, r1
    7498:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    749a:	bf9f      	itttt	ls
    749c:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    74a0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    74a4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    74a8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    74aa:	bf92      	itee	ls
    74ac:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    74ae:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    74b0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    74b2:	4473      	add	r3, lr
			while (count--) {
    74b4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    74b8:	441a      	add	r2, r3
			while (count--) {
    74ba:	d2e8      	bcs.n	748e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    74bc:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    74be:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    74c0:	f8db 1014 	ldr.w	r1, [fp, #20]
    74c4:	eb03 0209 	add.w	r2, r3, r9
    74c8:	4620      	mov	r0, r4
    74ca:	f7ff fdb6 	bl	703a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    74ce:	8ba3      	ldrh	r3, [r4, #28]
    74d0:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    74d2:	2300      	movs	r3, #0
    74d4:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    74d6:	9b06      	ldr	r3, [sp, #24]
    74d8:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    74dc:	7863      	ldrb	r3, [r4, #1]
    74de:	3301      	adds	r3, #1
    74e0:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    74e2:	eba8 0805 	sub.w	r8, r8, r5
    74e6:	46b2      	mov	sl, r6
    74e8:	e66c      	b.n	71c4 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    74ea:	78a3      	ldrb	r3, [r4, #2]
    74ec:	7063      	strb	r3, [r4, #1]
    74ee:	4656      	mov	r6, sl
    74f0:	e7f7      	b.n	74e2 <ticker_job+0x3aa>
		user = &users[count_user];
    74f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    74f4:	9a03      	ldr	r2, [sp, #12]
    74f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    74fa:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    74fc:	685b      	ldr	r3, [r3, #4]
    74fe:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7500:	9b06      	ldr	r3, [sp, #24]
    7502:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7506:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    750a:	f000 808e 	beq.w	762a <ticker_job+0x4f2>
				ticker = &node[id_insert];
    750e:	fa0f f38a 	sxth.w	r3, sl
    7512:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7518:	46d0      	mov	r8, sl
    751a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    751e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7522:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7524:	f8db 3000 	ldr.w	r3, [fp]
    7528:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    752a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    752c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    752e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7530:	8be3      	ldrh	r3, [r4, #30]
    7532:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7534:	bf86      	itte	hi
    7536:	1a9b      	subhi	r3, r3, r2
    7538:	b29b      	uxthhi	r3, r3
		skip = 0;
    753a:	2300      	movls	r3, #0
    753c:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    753e:	fa0f f388 	sxth.w	r3, r8
    7542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7546:	00db      	lsls	r3, r3, #3
    7548:	9313      	str	r3, [sp, #76]	; 0x4c
    754a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    754c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7550:	f8db 0018 	ldr.w	r0, [fp, #24]
    7554:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7556:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    755a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    755c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7560:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7564:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    7566:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7568:	2bff      	cmp	r3, #255	; 0xff
    756a:	d007      	beq.n	757c <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    756c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7570:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7574:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7576:	4281      	cmp	r1, r0
    7578:	f200 80a9 	bhi.w	76ce <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    757c:	f8de 0018 	ldr.w	r0, [lr, #24]
    7580:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    7582:	eb01 0c00 	add.w	ip, r1, r0
    7586:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7588:	2eff      	cmp	r6, #255	; 0xff
    758a:	f040 80ae 	bne.w	76ea <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    758e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7590:	b130      	cbz	r0, 75a0 <ticker_job+0x468>
    7592:	9807      	ldr	r0, [sp, #28]
    7594:	4281      	cmp	r1, r0
    7596:	f0c0 80bf 	bcc.w	7718 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    759a:	2eff      	cmp	r6, #255	; 0xff
    759c:	f040 818e 	bne.w	78bc <ticker_job+0x784>
		if (previous == current) {
    75a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    75a2:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    75a6:	4283      	cmp	r3, r0
			node[previous].next = id;
    75a8:	bf18      	it	ne
    75aa:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    75ae:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    75b2:	bf16      	itet	ne
    75b4:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    75b8:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    75bc:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    75c0:	2bff      	cmp	r3, #255	; 0xff
    75c2:	d006      	beq.n	75d2 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    75c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    75cc:	689a      	ldr	r2, [r3, #8]
    75ce:	1a51      	subs	r1, r2, r1
    75d0:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    75d2:	78a3      	ldrb	r3, [r4, #2]
    75d4:	3301      	adds	r3, #1
    75d6:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    75d8:	2100      	movs	r1, #0
			if (user_op) {
    75da:	2d00      	cmp	r5, #0
    75dc:	d093      	beq.n	7506 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    75de:	4628      	mov	r0, r5
    75e0:	f7ff fd49 	bl	7076 <ticker_job_op_cb>
    75e4:	e78f      	b.n	7506 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    75e6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    75ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75ec:	011b      	lsls	r3, r3, #4
    75ee:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    75f0:	f109 0201 	add.w	r2, r9, #1
    75f4:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    75f8:	9a06      	ldr	r2, [sp, #24]
    75fa:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    75fc:	454a      	cmp	r2, r9
    75fe:	bf08      	it	eq
    7600:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7606:	5cd3      	ldrb	r3, [r2, r3]
    7608:	2b03      	cmp	r3, #3
    760a:	d10e      	bne.n	762a <ticker_job+0x4f2>
				id_insert = user_op->id;
    760c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7612:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7616:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    761a:	7862      	ldrb	r2, [r4, #1]
    761c:	78a3      	ldrb	r3, [r4, #2]
    761e:	429a      	cmp	r2, r3
    7620:	d009      	beq.n	7636 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7622:	2101      	movs	r1, #1
    7624:	4628      	mov	r0, r5
    7626:	f7ff fd26 	bl	7076 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    762a:	9b06      	ldr	r3, [sp, #24]
    762c:	789b      	ldrb	r3, [r3, #2]
    762e:	454b      	cmp	r3, r9
    7630:	d1d9      	bne.n	75e6 <ticker_job+0x4ae>
    7632:	9b03      	ldr	r3, [sp, #12]
    7634:	e5e6      	b.n	7204 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7636:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7638:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    763c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    763e:	692b      	ldr	r3, [r5, #16]
    7640:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7642:	8aab      	ldrh	r3, [r5, #20]
    7644:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7646:	69ab      	ldr	r3, [r5, #24]
    7648:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    764a:	69eb      	ldr	r3, [r5, #28]
    764c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    764e:	6a2b      	ldr	r3, [r5, #32]
    7650:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7652:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7654:	68ab      	ldr	r3, [r5, #8]
    7656:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7658:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    765a:	686a      	ldr	r2, [r5, #4]
    765c:	4620      	mov	r0, r4
    765e:	f7ff fcec 	bl	703a <ticks_to_expire_prep>
	ticker->force = 1;
    7662:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    7664:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    7666:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7668:	70e3      	strb	r3, [r4, #3]
    766a:	e75b      	b.n	7524 <ticker_job+0x3ec>
    766c:	ff172b5a 	.word	0xff172b5a
    7670:	7f172b59 	.word	0x7f172b59
    7674:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7678:	6860      	ldr	r0, [r4, #4]
    767a:	2800      	cmp	r0, #0
    767c:	d07b      	beq.n	7776 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    767e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7680:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7682:	4b92      	ldr	r3, [pc, #584]	; (78cc <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    7684:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7686:	4992      	ldr	r1, [pc, #584]	; (78d0 <ticker_job+0x798>)
    7688:	18d3      	adds	r3, r2, r3
    768a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    768c:	bf9c      	itt	ls
    768e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    7692:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7696:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7698:	bf8b      	itete	hi
    769a:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    769c:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    76a0:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    76a2:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76a4:	4403      	add	r3, r0
		return 1;
    76a6:	bf98      	it	ls
    76a8:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76aa:	4413      	add	r3, r2
			ticker->lazy_current++;
    76ac:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    76ae:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    76b0:	3201      	adds	r2, #1
    76b2:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    76b4:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    76b6:	4293      	cmp	r3, r2
    76b8:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    76bc:	bf89      	itett	hi
    76be:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    76c0:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    76c2:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    76c4:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    76c6:	bf9c      	itt	ls
    76c8:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    76ca:	60a1      	strls	r1, [r4, #8]
    76cc:	e73d      	b.n	754a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    76ce:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    76d0:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    76d2:	b946      	cbnz	r6, 76e6 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    76d4:	9f07      	ldr	r7, [sp, #28]
    76d6:	42b8      	cmp	r0, r7
    76d8:	d200      	bcs.n	76dc <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    76da:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    76dc:	930b      	str	r3, [sp, #44]	; 0x2c
    76de:	9607      	str	r6, [sp, #28]
    76e0:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    76e4:	e740      	b.n	7568 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    76e6:	9308      	str	r3, [sp, #32]
    76e8:	e7f8      	b.n	76dc <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    76ea:	b230      	sxth	r0, r6
    76ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    76f0:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    76f4:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    76f6:	68bf      	ldr	r7, [r7, #8]
    76f8:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    76fa:	4567      	cmp	r7, ip
    76fc:	d20a      	bcs.n	7714 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    76fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7700:	69bf      	ldr	r7, [r7, #24]
    7702:	2f00      	cmp	r7, #0
    7704:	f47f af43 	bne.w	758e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7708:	9e11      	ldr	r6, [sp, #68]	; 0x44
    770a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    770e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7712:	e739      	b.n	7588 <ticker_job+0x450>
			return TICKER_NULL;
    7714:	26ff      	movs	r6, #255	; 0xff
    7716:	e73a      	b.n	758e <ticker_job+0x456>
	while (id_insert !=
    7718:	9b08      	ldr	r3, [sp, #32]
    771a:	4598      	cmp	r8, r3
    771c:	f43f af59 	beq.w	75d2 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7720:	9b08      	ldr	r3, [sp, #32]
    7722:	2bff      	cmp	r3, #255	; 0xff
    7724:	d0a8      	beq.n	7678 <ticker_job+0x540>
    7726:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7728:	b233      	sxth	r3, r6
    772a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    772e:	9307      	str	r3, [sp, #28]
    7730:	9a07      	ldr	r2, [sp, #28]
    7732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7734:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7738:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    773a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    773c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    773e:	bf88      	it	hi
    7740:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7742:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7744:	bf8c      	ite	hi
    7746:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7748:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    774a:	2a00      	cmp	r2, #0
    774c:	d094      	beq.n	7678 <ticker_job+0x540>
    774e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7750:	4293      	cmp	r3, r2
    7752:	d891      	bhi.n	7678 <ticker_job+0x540>
			    skip_collide <= skip &&
    7754:	78fa      	ldrb	r2, [r7, #3]
    7756:	78e3      	ldrb	r3, [r4, #3]
    7758:	429a      	cmp	r2, r3
    775a:	d28d      	bcs.n	7678 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    775c:	4631      	mov	r1, r6
    775e:	4658      	mov	r0, fp
    7760:	f7ff fc3f 	bl	6fe2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7764:	78bb      	ldrb	r3, [r7, #2]
    7766:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7768:	9a07      	ldr	r2, [sp, #28]
    776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    776c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    776e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    7772:	46b2      	mov	sl, r6
    7774:	e6e9      	b.n	754a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7776:	2101      	movs	r1, #1
    7778:	e72f      	b.n	75da <ticker_job+0x4a2>
		user = &users[count_user];
    777a:	9b03      	ldr	r3, [sp, #12]
    777c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7780:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    7782:	786b      	ldrb	r3, [r5, #1]
    7784:	78ea      	ldrb	r2, [r5, #3]
    7786:	429a      	cmp	r2, r3
    7788:	d102      	bne.n	7790 <ticker_job+0x658>
    778a:	3c01      	subs	r4, #1
    778c:	b2e4      	uxtb	r4, r4
    778e:	e551      	b.n	7234 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7794:	011b      	lsls	r3, r3, #4
    7796:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7798:	5cf3      	ldrb	r3, [r6, r3]
    779a:	2b01      	cmp	r3, #1
    779c:	d025      	beq.n	77ea <ticker_job+0x6b2>
    779e:	2b02      	cmp	r3, #2
    77a0:	d12a      	bne.n	77f8 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    77a2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    77a6:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    77a8:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    77ac:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    77b0:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    77b4:	28ff      	cmp	r0, #255	; 0xff
    77b6:	d004      	beq.n	77c2 <ticker_job+0x68a>
    77b8:	6819      	ldr	r1, [r3, #0]
    77ba:	f8db 7014 	ldr.w	r7, [fp, #20]
    77be:	42b9      	cmp	r1, r7
    77c0:	d023      	beq.n	780a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    77c2:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    77c6:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    77ca:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    77cc:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    77ce:	29ff      	cmp	r1, #255	; 0xff
    77d0:	d007      	beq.n	77e2 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    77d2:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    77d6:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    77da:	6987      	ldr	r7, [r0, #24]
    77dc:	6880      	ldr	r0, [r0, #8]
    77de:	b1df      	cbz	r7, 7818 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    77e0:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    77e2:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    77e6:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    77ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    77ec:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    77f0:	b113      	cbz	r3, 77f8 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    77f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    77f4:	2000      	movs	r0, #0
    77f6:	4798      	blx	r3
			first = user->first + 1;
    77f8:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    77fa:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    77fc:	3301      	adds	r3, #1
    77fe:	b2db      	uxtb	r3, r3
				first = 0;
    7800:	429a      	cmp	r2, r3
    7802:	bf08      	it	eq
    7804:	2300      	moveq	r3, #0
			user->first = first;
    7806:	706b      	strb	r3, [r5, #1]
    7808:	e7bb      	b.n	7782 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    780a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    780e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7812:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7816:	e7da      	b.n	77ce <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7818:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    781a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    781e:	e7d6      	b.n	77ce <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7820:	9b05      	ldr	r3, [sp, #20]
    7822:	2bff      	cmp	r3, #255	; 0xff
    7824:	d107      	bne.n	7836 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7826:	f00a fa55 	bl	11cd4 <cntr_cnt_get>
    782a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    782c:	f00a fa16 	bl	11c5c <cntr_start>
    7830:	b908      	cbnz	r0, 7836 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7832:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7836:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    783a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    783e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7846:	260a      	movs	r6, #10
    7848:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    784a:	f00a fa43 	bl	11cd4 <cntr_cnt_get>
		cc = instance->ticks_current;
    784e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7852:	1b03      	subs	r3, r0, r4
    7854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7858:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    785a:	42ab      	cmp	r3, r5
    785c:	bf2c      	ite	cs
    785e:	18e4      	addcs	r4, r4, r3
    7860:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    7862:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7866:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7868:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    786c:	4620      	mov	r0, r4
    786e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7870:	f00a fa30 	bl	11cd4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7874:	1bc0      	subs	r0, r0, r7
    7876:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    787a:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    787c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    787e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7882:	42a0      	cmp	r0, r4
    7884:	f67f ace8 	bls.w	7258 <ticker_job+0x120>
		LL_ASSERT(i);
    7888:	3e01      	subs	r6, #1
    788a:	d1de      	bne.n	784a <ticker_job+0x712>
    788c:	4b11      	ldr	r3, [pc, #68]	; (78d4 <ticker_job+0x79c>)
    788e:	9301      	str	r3, [sp, #4]
    7890:	9300      	str	r3, [sp, #0]
    7892:	4a11      	ldr	r2, [pc, #68]	; (78d8 <ticker_job+0x7a0>)
    7894:	4b11      	ldr	r3, [pc, #68]	; (78dc <ticker_job+0x7a4>)
    7896:	4912      	ldr	r1, [pc, #72]	; (78e0 <ticker_job+0x7a8>)
    7898:	4812      	ldr	r0, [pc, #72]	; (78e4 <ticker_job+0x7ac>)
    789a:	f7f9 fb77 	bl	f8c <printk>
    789e:	4040      	eors	r0, r0
    78a0:	f380 8811 	msr	BASEPRI, r0
    78a4:	f04f 0004 	mov.w	r0, #4
    78a8:	df02      	svc	2
	instance->job_guard = 0;
    78aa:	2300      	movs	r3, #0
    78ac:	f88b 301e 	strb.w	r3, [fp, #30]
    78b0:	e4c8      	b.n	7244 <ticker_job+0x10c>
	if (!pending) {
    78b2:	2b00      	cmp	r3, #0
    78b4:	d1f9      	bne.n	78aa <ticker_job+0x772>
		flag_compare_update = 1;
    78b6:	2301      	movs	r3, #1
    78b8:	9304      	str	r3, [sp, #16]
    78ba:	e4b2      	b.n	7222 <ticker_job+0xea>
	while (id_insert !=
    78bc:	45b0      	cmp	r8, r6
    78be:	f47f af33 	bne.w	7728 <ticker_job+0x5f0>
    78c2:	e686      	b.n	75d2 <ticker_job+0x49a>
}
    78c4:	b015      	add	sp, #84	; 0x54
    78c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78ca:	bf00      	nop
    78cc:	ff172b5a 	.word	0xff172b5a
    78d0:	7f172b59 	.word	0x7f172b59
    78d4:	00014645 	.word	0x00014645
    78d8:	00015394 	.word	0x00015394
    78dc:	00016049 	.word	0x00016049
    78e0:	000153e3 	.word	0x000153e3
    78e4:	00016063 	.word	0x00016063

000078e8 <ticker_init>:
{
    78e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    78ea:	4d1a      	ldr	r5, [pc, #104]	; (7954 <ticker_init+0x6c>)
{
    78ec:	9f05      	ldr	r7, [sp, #20]
    78ee:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    78f2:	262c      	movs	r6, #44	; 0x2c
    78f4:	4346      	muls	r6, r0
    78f6:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    78fa:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    78fc:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7900:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7902:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7906:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    790a:	3b01      	subs	r3, #1
    790c:	b2db      	uxtb	r3, r3
    790e:	2bff      	cmp	r3, #255	; 0xff
    7910:	d111      	bne.n	7936 <ticker_init+0x4e>
	if (count_op) {
    7912:	b9ec      	cbnz	r4, 7950 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7914:	222c      	movs	r2, #44	; 0x2c
    7916:	fb02 5200 	mla	r2, r2, r0, r5
    791a:	9908      	ldr	r1, [sp, #32]
    791c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    791e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7920:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7922:	990a      	ldr	r1, [sp, #40]	; 0x28
    7924:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7926:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7928:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    792a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    792c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    792e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7930:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7932:	4620      	mov	r0, r4
    7934:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7936:	b21a      	sxth	r2, r3
    7938:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    793c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    793e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7942:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7946:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7948:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    794c:	b2e4      	uxtb	r4, r4
    794e:	e7dc      	b.n	790a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7950:	2001      	movs	r0, #1
}
    7952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7954:	200007cc 	.word	0x200007cc

00007958 <ticker_trigger>:
	instance = &_instance[instance_index];
    7958:	4a07      	ldr	r2, [pc, #28]	; (7978 <ticker_trigger+0x20>)
    795a:	212c      	movs	r1, #44	; 0x2c
    795c:	fb00 2301 	mla	r3, r0, r1, r2
{
    7960:	b410      	push	{r4}
	if (instance->sched_cb) {
    7962:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7964:	b12c      	cbz	r4, 7972 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7966:	46a4      	mov	ip, r4
    7968:	2201      	movs	r2, #1
    796a:	2103      	movs	r1, #3
    796c:	2002      	movs	r0, #2
}
    796e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7970:	4760      	bx	ip
}
    7972:	bc10      	pop	{r4}
    7974:	4770      	bx	lr
    7976:	bf00      	nop
    7978:	200007cc 	.word	0x200007cc

0000797c <ticker_start>:
{
    797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7980:	4f25      	ldr	r7, [pc, #148]	; (7a18 <ticker_start+0x9c>)
    7982:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7986:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7988:	fb08 7000 	mla	r0, r8, r0, r7
    798c:	fa0f fc81 	sxth.w	ip, r1
    7990:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7994:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7998:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    799c:	78f4      	ldrb	r4, [r6, #3]
    799e:	1c65      	adds	r5, r4, #1
    79a0:	b2ed      	uxtb	r5, r5
		last = 0;
    79a2:	45ae      	cmp	lr, r5
    79a4:	bf98      	it	ls
    79a6:	2500      	movls	r5, #0
	if (last == user->first) {
    79a8:	f896 e001 	ldrb.w	lr, [r6, #1]
    79ac:	45ae      	cmp	lr, r5
    79ae:	d02f      	beq.n	7a10 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    79b0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    79b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    79b8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    79bc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    79c0:	f04f 0a03 	mov.w	sl, #3
    79c4:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    79c8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    79ca:	9b08      	ldr	r3, [sp, #32]
    79cc:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    79ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    79d0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    79d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    79d4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    79d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79d8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    79da:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    79de:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    79e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    79e2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    79e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    79e6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    79e8:	2302      	movs	r3, #2
    79ea:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    79ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    79ee:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    79f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    79f2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    79f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    79f6:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    79f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    79fa:	6a03      	ldr	r3, [r0, #32]
    79fc:	4608      	mov	r0, r1
    79fe:	4798      	blx	r3
    7a00:	fb09 7308 	mla	r3, r9, r8, r7
    7a04:	2200      	movs	r2, #0
    7a06:	2104      	movs	r1, #4
    7a08:	47a8      	blx	r5
	return user_op->status;
    7a0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7a10:	2001      	movs	r0, #1
}
    7a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a16:	bf00      	nop
    7a18:	200007cc 	.word	0x200007cc

00007a1c <ticker_update>:
{
    7a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7a20:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7ab4 <ticker_update+0x98>
    7a24:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7a28:	fb0a 8e00 	mla	lr, sl, r0, r8
    7a2c:	b20f      	sxth	r7, r1
    7a2e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7a32:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7a34:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7a38:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7a3c:	78c4      	ldrb	r4, [r0, #3]
    7a3e:	1c66      	adds	r6, r4, #1
    7a40:	b2f6      	uxtb	r6, r6
		last = 0;
    7a42:	42b5      	cmp	r5, r6
    7a44:	bf98      	it	ls
    7a46:	2600      	movls	r6, #0
	if (last == user->first) {
    7a48:	7845      	ldrb	r5, [r0, #1]
    7a4a:	42b5      	cmp	r5, r6
    7a4c:	d02f      	beq.n	7aae <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7a4e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7a52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7a56:	0125      	lsls	r5, r4, #4
    7a58:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7a5c:	2704      	movs	r7, #4
    7a5e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7a62:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7a64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7a68:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7a6a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7a6e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7a70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7a74:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7a76:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7a7a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7a7c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7a80:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7a82:	2302      	movs	r3, #2
    7a84:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a88:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7a8c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7a90:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7a92:	f8de 3020 	ldr.w	r3, [lr, #32]
    7a96:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7a9a:	4608      	mov	r0, r1
    7a9c:	4798      	blx	r3
    7a9e:	fb09 830a 	mla	r3, r9, sl, r8
    7aa2:	2200      	movs	r2, #0
    7aa4:	4639      	mov	r1, r7
    7aa6:	47a8      	blx	r5
	return user_op->status;
    7aa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7aae:	2001      	movs	r0, #1
}
    7ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ab4:	200007cc 	.word	0x200007cc

00007ab8 <ticker_stop>:
{
    7ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7abc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7b2c <ticker_stop+0x74>
    7ac0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7ac4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7ac8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7aca:	f8de 0004 	ldr.w	r0, [lr, #4]
    7ace:	b20e      	sxth	r6, r1
    7ad0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7ad4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7ad8:	78fc      	ldrb	r4, [r7, #3]
    7ada:	1c65      	adds	r5, r4, #1
    7adc:	b2ed      	uxtb	r5, r5
		last = 0;
    7ade:	42a8      	cmp	r0, r5
    7ae0:	bf98      	it	ls
    7ae2:	2500      	movls	r5, #0
	if (last == user->first) {
    7ae4:	7878      	ldrb	r0, [r7, #1]
    7ae6:	42a8      	cmp	r0, r5
    7ae8:	d01d      	beq.n	7b26 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7aea:	6878      	ldr	r0, [r7, #4]
    7aec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7af0:	0124      	lsls	r4, r4, #4
    7af2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7af4:	f04f 0c05 	mov.w	ip, #5
    7af8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7afc:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7afe:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7b00:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7b02:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7b04:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7b06:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7b08:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b0a:	f8de 3020 	ldr.w	r3, [lr, #32]
    7b0e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7b12:	4608      	mov	r0, r1
    7b14:	4798      	blx	r3
    7b16:	fb08 930a 	mla	r3, r8, sl, r9
    7b1a:	2200      	movs	r2, #0
    7b1c:	2104      	movs	r1, #4
    7b1e:	47a0      	blx	r4
	return user_op->status;
    7b20:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7b26:	2001      	movs	r0, #1
}
    7b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b2c:	200007cc 	.word	0x200007cc

00007b30 <ticker_next_slot_get>:
{
    7b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7b34:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7bb0 <ticker_next_slot_get+0x80>
    7b38:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7b3c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7b3e:	fb0a 8000 	mla	r0, sl, r0, r8
    7b42:	fa0f fe81 	sxth.w	lr, r1
    7b46:	6845      	ldr	r5, [r0, #4]
    7b48:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7b4c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7b50:	78fc      	ldrb	r4, [r7, #3]
    7b52:	1c66      	adds	r6, r4, #1
    7b54:	b2f6      	uxtb	r6, r6
		last = 0;
    7b56:	42b5      	cmp	r5, r6
    7b58:	bf98      	it	ls
    7b5a:	2600      	movls	r6, #0
	if (last == user->first) {
    7b5c:	787d      	ldrb	r5, [r7, #1]
    7b5e:	42b5      	cmp	r5, r6
    7b60:	d023      	beq.n	7baa <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7b62:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7b66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7b6a:	0125      	lsls	r5, r4, #4
    7b6c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7b70:	f04f 0e02 	mov.w	lr, #2
    7b74:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7b78:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7b7a:	9b08      	ldr	r3, [sp, #32]
    7b7c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b80:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7b82:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7b86:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7b88:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7b8a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7b8e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7b90:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b92:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7b94:	6a03      	ldr	r3, [r0, #32]
    7b96:	4608      	mov	r0, r1
    7b98:	4798      	blx	r3
    7b9a:	fb09 830a 	mla	r3, r9, sl, r8
    7b9e:	2200      	movs	r2, #0
    7ba0:	2104      	movs	r1, #4
    7ba2:	47a8      	blx	r5
	return user_op->status;
    7ba4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7baa:	2001      	movs	r0, #1
}
    7bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bb0:	200007cc 	.word	0x200007cc

00007bb4 <ticker_job_idle_get>:
{
    7bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7bb8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7c28 <ticker_job_idle_get+0x74>
    7bbc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7bc0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7bc4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7bc6:	f8de 0004 	ldr.w	r0, [lr, #4]
    7bca:	b20e      	sxth	r6, r1
    7bcc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7bd0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7bd4:	78fc      	ldrb	r4, [r7, #3]
    7bd6:	1c65      	adds	r5, r4, #1
    7bd8:	b2ed      	uxtb	r5, r5
		last = 0;
    7bda:	42a8      	cmp	r0, r5
    7bdc:	bf98      	it	ls
    7bde:	2500      	movls	r5, #0
	if (last == user->first) {
    7be0:	7878      	ldrb	r0, [r7, #1]
    7be2:	42a8      	cmp	r0, r5
    7be4:	d01d      	beq.n	7c22 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7be6:	6878      	ldr	r0, [r7, #4]
    7be8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7bec:	0124      	lsls	r4, r4, #4
    7bee:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7bf0:	f04f 0c01 	mov.w	ip, #1
    7bf4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7bf8:	20ff      	movs	r0, #255	; 0xff
    7bfa:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7bfc:	2002      	movs	r0, #2
    7bfe:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7c00:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7c02:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7c04:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c06:	f8de 3020 	ldr.w	r3, [lr, #32]
    7c0a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7c0e:	4608      	mov	r0, r1
    7c10:	4798      	blx	r3
    7c12:	fb08 930a 	mla	r3, r8, sl, r9
    7c16:	2200      	movs	r2, #0
    7c18:	2104      	movs	r1, #4
    7c1a:	47a0      	blx	r4
	return user_op->status;
    7c1c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7c22:	2001      	movs	r0, #1
}
    7c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c28:	200007cc 	.word	0x200007cc

00007c2c <ticker_job_sched>:
{
    7c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c30:	4c08      	ldr	r4, [pc, #32]	; (7c54 <ticker_job_sched+0x28>)
    7c32:	252c      	movs	r5, #44	; 0x2c
    7c34:	fb05 4300 	mla	r3, r5, r0, r4
{
    7c38:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c3a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7c3c:	6a1b      	ldr	r3, [r3, #32]
    7c3e:	4608      	mov	r0, r1
    7c40:	4798      	blx	r3
    7c42:	fb06 4305 	mla	r3, r6, r5, r4
    7c46:	46bc      	mov	ip, r7
    7c48:	2200      	movs	r2, #0
    7c4a:	2104      	movs	r1, #4
}
    7c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c50:	4760      	bx	ip
    7c52:	bf00      	nop
    7c54:	200007cc 	.word	0x200007cc

00007c58 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7c58:	f00a b83c 	b.w	11cd4 <cntr_cnt_get>

00007c5c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c5c:	1a40      	subs	r0, r0, r1
}
    7c5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c62:	4770      	bx	lr

00007c64 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7c64:	b508      	push	{r3, lr}
    7c66:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7c68:	2b01      	cmp	r3, #1
{
    7c6a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7c6c:	d80e      	bhi.n	7c8c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7c6e:	b133      	cbz	r3, 7c7e <ll_addr_get+0x1a>
		if (bdaddr) {
    7c70:	b119      	cbz	r1, 7c7a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7c72:	2206      	movs	r2, #6
    7c74:	4906      	ldr	r1, [pc, #24]	; (7c90 <ll_addr_get+0x2c>)
    7c76:	f7f9 ffc1 	bl	1bfc <memcpy>
		}

		return rnd_addr;
    7c7a:	4805      	ldr	r0, [pc, #20]	; (7c90 <ll_addr_get+0x2c>)
    7c7c:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7c7e:	b119      	cbz	r1, 7c88 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7c80:	2206      	movs	r2, #6
    7c82:	4904      	ldr	r1, [pc, #16]	; (7c94 <ll_addr_get+0x30>)
    7c84:	f7f9 ffba 	bl	1bfc <memcpy>
	}

	return pub_addr;
    7c88:	4802      	ldr	r0, [pc, #8]	; (7c94 <ll_addr_get+0x30>)
}
    7c8a:	bd08      	pop	{r3, pc}
		return NULL;
    7c8c:	2000      	movs	r0, #0
    7c8e:	bd08      	pop	{r3, pc}
    7c90:	2000082a 	.word	0x2000082a
    7c94:	20000824 	.word	0x20000824

00007c98 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	4606      	mov	r6, r0
    7c9c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7c9e:	f008 f8b3 	bl	fe08 <ll_adv_is_enabled>
    7ca2:	4604      	mov	r4, r0
    7ca4:	b110      	cbz	r0, 7cac <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7ca6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7ca8:	4620      	mov	r0, r4
    7caa:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7cac:	f008 f8c0 	bl	fe30 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7cb0:	f010 0f06 	tst.w	r0, #6
    7cb4:	d1f7      	bne.n	7ca6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cb6:	2206      	movs	r2, #6
    7cb8:	4629      	mov	r1, r5
	if (addr_type) {
    7cba:	b11e      	cbz	r6, 7cc4 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7cbc:	4802      	ldr	r0, [pc, #8]	; (7cc8 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7cbe:	f7f9 ff9d 	bl	1bfc <memcpy>
    7cc2:	e7f1      	b.n	7ca8 <ll_addr_set+0x10>
    7cc4:	4801      	ldr	r0, [pc, #4]	; (7ccc <ll_addr_set+0x34>)
    7cc6:	e7fa      	b.n	7cbe <ll_addr_set+0x26>
    7cc8:	2000082a 	.word	0x2000082a
    7ccc:	20000824 	.word	0x20000824

00007cd0 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7cd0:	2300      	movs	r3, #0
    7cd2:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7cd4:	700b      	strb	r3, [r1, #0]
    7cd6:	4770      	bx	lr

00007cd8 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7cda:	4607      	mov	r7, r0
    7cdc:	460e      	mov	r6, r1
	while (len) {
    7cde:	460c      	mov	r4, r1
    7ce0:	1b35      	subs	r5, r6, r4
    7ce2:	443d      	add	r5, r7
    7ce4:	b18c      	cbz	r4, 7d0a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7ce6:	f7f9 f97d 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7cea:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7cec:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    7cee:	d907      	bls.n	7d00 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    7cf0:	2204      	movs	r2, #4
    7cf2:	eb0d 0102 	add.w	r1, sp, r2
    7cf6:	4628      	mov	r0, r5
    7cf8:	f7f9 ff80 	bl	1bfc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7cfc:	3c04      	subs	r4, #4
    7cfe:	e7ef      	b.n	7ce0 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    7d00:	4622      	mov	r2, r4
    7d02:	a901      	add	r1, sp, #4
    7d04:	4628      	mov	r0, r5
    7d06:	f7f9 ff79 	bl	1bfc <memcpy>
			break;
		}
	}

	return 0;
}
    7d0a:	2000      	movs	r0, #0
    7d0c:	b003      	add	sp, #12
    7d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007d10 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7d10:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7d12:	2300      	movs	r3, #0
    7d14:	f00a f812 	bl	11d3c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7d18:	2000      	movs	r0, #0
    7d1a:	bd08      	pop	{r3, pc}

00007d1c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7d1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7d1e:	4802      	ldr	r0, [pc, #8]	; (7d28 <_hci_driver_init+0xc>)
    7d20:	f7fb fdda 	bl	38d8 <bt_hci_driver_register>

	return 0;
}
    7d24:	2000      	movs	r0, #0
    7d26:	bd08      	pop	{r3, pc}
    7d28:	000160b4 	.word	0x000160b4

00007d2c <recv_thread>:
{
    7d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7d2e:	4d28      	ldr	r5, [pc, #160]	; (7dd0 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7d30:	2600      	movs	r6, #0
    7d32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7d36:	4628      	mov	r0, r5
    7d38:	f00b fc2c 	bl	13594 <_impl_k_queue_get>
		if (node_rx && !buf) {
    7d3c:	4604      	mov	r4, r0
    7d3e:	2800      	cmp	r0, #0
    7d40:	d036      	beq.n	7db0 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    7d42:	f001 fd0f 	bl	9764 <hci_get_class>
	switch (class) {
    7d46:	1e03      	subs	r3, r0, #0
    7d48:	9403      	str	r4, [sp, #12]
    7d4a:	db03      	blt.n	7d54 <recv_thread+0x28>
    7d4c:	2b02      	cmp	r3, #2
    7d4e:	dd10      	ble.n	7d72 <recv_thread+0x46>
    7d50:	2b03      	cmp	r3, #3
    7d52:	d030      	beq.n	7db6 <recv_thread+0x8a>
		LL_ASSERT(0);
    7d54:	4b1f      	ldr	r3, [pc, #124]	; (7dd4 <recv_thread+0xa8>)
    7d56:	9301      	str	r3, [sp, #4]
    7d58:	9300      	str	r3, [sp, #0]
    7d5a:	4a1f      	ldr	r2, [pc, #124]	; (7dd8 <recv_thread+0xac>)
    7d5c:	4b1f      	ldr	r3, [pc, #124]	; (7ddc <recv_thread+0xb0>)
    7d5e:	4920      	ldr	r1, [pc, #128]	; (7de0 <recv_thread+0xb4>)
    7d60:	4820      	ldr	r0, [pc, #128]	; (7de4 <recv_thread+0xb8>)
    7d62:	f7f9 f913 	bl	f8c <printk>
    7d66:	4040      	eors	r0, r0
    7d68:	f380 8811 	msr	BASEPRI, r0
    7d6c:	f04f 0004 	mov.w	r0, #4
    7d70:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    7d72:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7d74:	bf0e      	itee	eq
    7d76:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7d7c:	2001      	movne	r0, #1
    7d7e:	f7fb fe97 	bl	3ab0 <bt_buf_get_rx>
    7d82:	4604      	mov	r4, r0
		if (buf) {
    7d84:	b118      	cbz	r0, 7d8e <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    7d86:	4601      	mov	r1, r0
    7d88:	9803      	ldr	r0, [sp, #12]
    7d8a:	f001 f935 	bl	8ff8 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7d8e:	9b03      	ldr	r3, [sp, #12]
    7d90:	2100      	movs	r1, #0
    7d92:	88d8      	ldrh	r0, [r3, #6]
    7d94:	f008 fcb6 	bl	10704 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7d98:	a804      	add	r0, sp, #16
    7d9a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7d9e:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7da0:	f008 fc3a 	bl	10618 <ll_rx_mem_release>
		if (buf) {
    7da4:	b124      	cbz	r4, 7db0 <recv_thread+0x84>
			if (buf->len) {
    7da6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7da8:	4620      	mov	r0, r4
			if (buf->len) {
    7daa:	b173      	cbz	r3, 7dca <recv_thread+0x9e>
				bt_recv(buf);
    7dac:	f7fb f924 	bl	2ff8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7db0:	f00b fe52 	bl	13a58 <_impl_k_yield>
    7db4:	e7bd      	b.n	7d32 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7db6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7dba:	f7fb fe79 	bl	3ab0 <bt_buf_get_rx>
    7dbe:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7dc0:	4601      	mov	r1, r0
    7dc2:	9803      	ldr	r0, [sp, #12]
    7dc4:	f001 f8d8 	bl	8f78 <hci_acl_encode>
    7dc8:	e7e1      	b.n	7d8e <recv_thread+0x62>
				net_buf_unref(buf);
    7dca:	f00a fded 	bl	129a8 <net_buf_unref>
    7dce:	e7ef      	b.n	7db0 <recv_thread+0x84>
    7dd0:	20003f24 	.word	0x20003f24
    7dd4:	00014645 	.word	0x00014645
    7dd8:	00015394 	.word	0x00015394
    7ddc:	00016086 	.word	0x00016086
    7de0:	000153e3 	.word	0x000153e3
    7de4:	00015333 	.word	0x00015333

00007de8 <hci_driver_send>:
{
    7de8:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7dea:	8983      	ldrh	r3, [r0, #12]
{
    7dec:	b087      	sub	sp, #28
    7dee:	4605      	mov	r5, r0
	if (!buf->len) {
    7df0:	b96b      	cbnz	r3, 7e0e <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    7df2:	4b20      	ldr	r3, [pc, #128]	; (7e74 <hci_driver_send+0x8c>)
    7df4:	9301      	str	r3, [sp, #4]
    7df6:	9300      	str	r3, [sp, #0]
    7df8:	4a1f      	ldr	r2, [pc, #124]	; (7e78 <hci_driver_send+0x90>)
    7dfa:	4b20      	ldr	r3, [pc, #128]	; (7e7c <hci_driver_send+0x94>)
    7dfc:	4920      	ldr	r1, [pc, #128]	; (7e80 <hci_driver_send+0x98>)
    7dfe:	4821      	ldr	r0, [pc, #132]	; (7e84 <hci_driver_send+0x9c>)
    7e00:	f7f9 f8c4 	bl	f8c <printk>
		return -EINVAL;
    7e04:	f06f 0415 	mvn.w	r4, #21
}
    7e08:	4620      	mov	r0, r4
    7e0a:	b007      	add	sp, #28
    7e0c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7e0e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    7e10:	b183      	cbz	r3, 7e34 <hci_driver_send+0x4c>
    7e12:	2b02      	cmp	r3, #2
    7e14:	d11f      	bne.n	7e56 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    7e16:	a905      	add	r1, sp, #20
    7e18:	f001 f81e 	bl	8e58 <hci_acl_handle>
    7e1c:	4604      	mov	r4, r0
	if (evt) {
    7e1e:	9805      	ldr	r0, [sp, #20]
    7e20:	b108      	cbz	r0, 7e26 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    7e22:	f7fb fc6d 	bl	3700 <bt_recv_prio>
	if (!err) {
    7e26:	2c00      	cmp	r4, #0
    7e28:	d1ee      	bne.n	7e08 <hci_driver_send+0x20>
		net_buf_unref(buf);
    7e2a:	4628      	mov	r0, r5
    7e2c:	f00a fdbc 	bl	129a8 <net_buf_unref>
    7e30:	2400      	movs	r4, #0
    7e32:	e7e9      	b.n	7e08 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    7e34:	f000 faaa 	bl	838c <hci_cmd_handle>
	if (evt) {
    7e38:	4602      	mov	r2, r0
    7e3a:	2800      	cmp	r0, #0
    7e3c:	d0f5      	beq.n	7e2a <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7e3e:	6883      	ldr	r3, [r0, #8]
    7e40:	7819      	ldrb	r1, [r3, #0]
    7e42:	2913      	cmp	r1, #19
    7e44:	d812      	bhi.n	7e6c <hci_driver_send+0x84>
    7e46:	2301      	movs	r3, #1
    7e48:	408b      	lsls	r3, r1
    7e4a:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7e4e:	d00d      	beq.n	7e6c <hci_driver_send+0x84>
			bt_recv_prio(evt);
    7e50:	f7fb fc56 	bl	3700 <bt_recv_prio>
    7e54:	e7e9      	b.n	7e2a <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    7e56:	4a07      	ldr	r2, [pc, #28]	; (7e74 <hci_driver_send+0x8c>)
    7e58:	9202      	str	r2, [sp, #8]
    7e5a:	e88d 000c 	stmia.w	sp, {r2, r3}
    7e5e:	4908      	ldr	r1, [pc, #32]	; (7e80 <hci_driver_send+0x98>)
    7e60:	4b06      	ldr	r3, [pc, #24]	; (7e7c <hci_driver_send+0x94>)
    7e62:	4a05      	ldr	r2, [pc, #20]	; (7e78 <hci_driver_send+0x90>)
    7e64:	4808      	ldr	r0, [pc, #32]	; (7e88 <hci_driver_send+0xa0>)
    7e66:	f7f9 f891 	bl	f8c <printk>
    7e6a:	e7cb      	b.n	7e04 <hci_driver_send+0x1c>
			bt_recv(evt);
    7e6c:	4610      	mov	r0, r2
    7e6e:	f7fb f8c3 	bl	2ff8 <bt_recv>
    7e72:	e7da      	b.n	7e2a <hci_driver_send+0x42>
    7e74:	00014645 	.word	0x00014645
    7e78:	00015394 	.word	0x00015394
    7e7c:	00016092 	.word	0x00016092
    7e80:	000153e3 	.word	0x000153e3
    7e84:	000160f5 	.word	0x000160f5
    7e88:	00016116 	.word	0x00016116

00007e8c <prio_recv_thread>:
{
    7e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7e8e:	4d14      	ldr	r5, [pc, #80]	; (7ee0 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    7e90:	4e14      	ldr	r6, [pc, #80]	; (7ee4 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    7e92:	f10d 0102 	add.w	r1, sp, #2
    7e96:	a801      	add	r0, sp, #4
    7e98:	f008 fb86 	bl	105a8 <ll_rx_get>
    7e9c:	4604      	mov	r4, r0
    7e9e:	b940      	cbnz	r0, 7eb2 <prio_recv_thread+0x26>
		if (node_rx) {
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	b1bb      	cbz	r3, 7ed4 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    7ea4:	f008 fe62 	bl	10b6c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    7ea8:	9901      	ldr	r1, [sp, #4]
    7eaa:	4630      	mov	r0, r6
    7eac:	f00b fb4e 	bl	1354c <k_queue_append>
    7eb0:	e7ef      	b.n	7e92 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7eb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7eb6:	2001      	movs	r0, #1
    7eb8:	f7fb fdfa 	bl	3ab0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7ebc:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7ebe:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7ec0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7ec4:	f001 fc3a 	bl	973c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    7ec8:	4638      	mov	r0, r7
    7eca:	f7fb fc19 	bl	3700 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7ece:	f00b fdc3 	bl	13a58 <_impl_k_yield>
    7ed2:	e7de      	b.n	7e92 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ed8:	4628      	mov	r0, r5
    7eda:	f00b fe24 	bl	13b26 <_impl_k_sem_take>
    7ede:	e7d8      	b.n	7e92 <prio_recv_thread+0x6>
    7ee0:	20003f0c 	.word	0x20003f0c
    7ee4:	20003f24 	.word	0x20003f24

00007ee8 <hci_driver_open>:
{
    7ee8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    7eea:	481a      	ldr	r0, [pc, #104]	; (7f54 <hci_driver_open+0x6c>)
{
    7eec:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    7eee:	f008 ff1b 	bl	10d28 <ll_init>
	if (err) {
    7ef2:	4604      	mov	r4, r0
    7ef4:	b160      	cbz	r0, 7f10 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    7ef6:	4b18      	ldr	r3, [pc, #96]	; (7f58 <hci_driver_open+0x70>)
    7ef8:	9302      	str	r3, [sp, #8]
    7efa:	e88d 0018 	stmia.w	sp, {r3, r4}
    7efe:	4a17      	ldr	r2, [pc, #92]	; (7f5c <hci_driver_open+0x74>)
    7f00:	4b17      	ldr	r3, [pc, #92]	; (7f60 <hci_driver_open+0x78>)
    7f02:	4918      	ldr	r1, [pc, #96]	; (7f64 <hci_driver_open+0x7c>)
    7f04:	4818      	ldr	r0, [pc, #96]	; (7f68 <hci_driver_open+0x80>)
    7f06:	f7f9 f841 	bl	f8c <printk>
}
    7f0a:	4620      	mov	r0, r4
    7f0c:	b006      	add	sp, #24
    7f0e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    7f10:	f001 fc40 	bl	9794 <hci_init>

    7f14:	f06f 0309 	mvn.w	r3, #9
    7f18:	9303      	str	r3, [sp, #12]
    7f1a:	9405      	str	r4, [sp, #20]
    7f1c:	9404      	str	r4, [sp, #16]
    7f1e:	9402      	str	r4, [sp, #8]
    7f20:	9401      	str	r4, [sp, #4]
    7f22:	9400      	str	r4, [sp, #0]
    7f24:	4b11      	ldr	r3, [pc, #68]	; (7f6c <hci_driver_open+0x84>)
    7f26:	4912      	ldr	r1, [pc, #72]	; (7f70 <hci_driver_open+0x88>)
    7f28:	4812      	ldr	r0, [pc, #72]	; (7f74 <hci_driver_open+0x8c>)
    7f2a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    7f2e:	f00b ffcf 	bl	13ed0 <_impl_k_thread_create>
    7f32:	f06f 0307 	mvn.w	r3, #7
    7f36:	9303      	str	r3, [sp, #12]
    7f38:	9405      	str	r4, [sp, #20]
    7f3a:	9404      	str	r4, [sp, #16]
    7f3c:	9402      	str	r4, [sp, #8]
    7f3e:	9401      	str	r4, [sp, #4]
    7f40:	9400      	str	r4, [sp, #0]
    7f42:	4b0d      	ldr	r3, [pc, #52]	; (7f78 <hci_driver_open+0x90>)
    7f44:	490d      	ldr	r1, [pc, #52]	; (7f7c <hci_driver_open+0x94>)
    7f46:	480e      	ldr	r0, [pc, #56]	; (7f80 <hci_driver_open+0x98>)
    7f48:	f240 522c 	movw	r2, #1324	; 0x52c
    7f4c:	f00b ffc0 	bl	13ed0 <_impl_k_thread_create>
    7f50:	e7db      	b.n	7f0a <hci_driver_open+0x22>
    7f52:	bf00      	nop
    7f54:	20003f0c 	.word	0x20003f0c
    7f58:	00014645 	.word	0x00014645
    7f5c:	00015394 	.word	0x00015394
    7f60:	000160a2 	.word	0x000160a2
    7f64:	000153e3 	.word	0x000153e3
    7f68:	000160c8 	.word	0x000160c8
    7f6c:	00007e8d 	.word	0x00007e8d
    7f70:	200020c8 	.word	0x200020c8
    7f74:	200018a8 	.word	0x200018a8
    7f78:	00007d2d 	.word	0x00007d2d
    7f7c:	200023b8 	.word	0x200023b8
    7f80:	20001838 	.word	0x20001838

00007f84 <sys_put_le32>:
	dst[1] = val >> 8;
    7f84:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    7f88:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    7f8a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    7f8c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    7f8e:	0a00      	lsrs	r0, r0, #8
    7f90:	704b      	strb	r3, [r1, #1]
    7f92:	70c8      	strb	r0, [r1, #3]
    7f94:	4770      	bx	lr

00007f96 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    7f96:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    7f98:	3008      	adds	r0, #8
{
    7f9a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    7f9c:	2102      	movs	r1, #2
{
    7f9e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7fa0:	f00a fd34 	bl	12a0c <net_buf_simple_add>
	hdr->evt = evt;
    7fa4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    7fa6:	7044      	strb	r4, [r0, #1]
    7fa8:	bd38      	pop	{r3, r4, r5, pc}
	...

00007fac <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7fb4:	f7fb fd8c 	bl	3ad0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7fb8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    7fba:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    7fbc:	210f      	movs	r1, #15
    7fbe:	f7ff ffea 	bl	7f96 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    7fc2:	2104      	movs	r1, #4
    7fc4:	f104 0008 	add.w	r0, r4, #8
    7fc8:	f00a fd20 	bl	12a0c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    7fcc:	2301      	movs	r3, #1
    7fce:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7fd0:	4b02      	ldr	r3, [pc, #8]	; (7fdc <cmd_status+0x30>)
	cs->status = status;
    7fd2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    7fd4:	881b      	ldrh	r3, [r3, #0]
    7fd6:	8043      	strh	r3, [r0, #2]

	return buf;
}
    7fd8:	4620      	mov	r0, r4
    7fda:	bd38      	pop	{r3, r4, r5, pc}
    7fdc:	20000830 	.word	0x20000830

00007fe0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    7fe0:	b570      	push	{r4, r5, r6, lr}
    7fe2:	4604      	mov	r4, r0
    7fe4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7fe6:	3201      	adds	r2, #1
{
    7fe8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    7fea:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    7fec:	b2d2      	uxtb	r2, r2
    7fee:	213e      	movs	r1, #62	; 0x3e
    7ff0:	f7ff ffd1 	bl	7f96 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    7ff4:	2101      	movs	r1, #1
    7ff6:	4620      	mov	r0, r4
    7ff8:	f00a fd08 	bl	12a0c <net_buf_simple_add>
	me->subevent = subevt;
    7ffc:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    7ffe:	4629      	mov	r1, r5
    8000:	4620      	mov	r0, r4
}
    8002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8006:	f00a bd01 	b.w	12a0c <net_buf_simple_add>
	...

0000800c <cmd_complete>:
{
    800c:	b538      	push	{r3, r4, r5, lr}
    800e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8014:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8016:	f7fb fd5b 	bl	3ad0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    801a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    801c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    801e:	b2d2      	uxtb	r2, r2
    8020:	210e      	movs	r1, #14
    8022:	f7ff ffb8 	bl	7f96 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8026:	6820      	ldr	r0, [r4, #0]
    8028:	2103      	movs	r1, #3
    802a:	3008      	adds	r0, #8
    802c:	f00a fcee 	bl	12a0c <net_buf_simple_add>
	cc->ncmd = 1;
    8030:	2301      	movs	r3, #1
    8032:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8034:	4b05      	ldr	r3, [pc, #20]	; (804c <cmd_complete+0x40>)
    8036:	881b      	ldrh	r3, [r3, #0]
    8038:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    803c:	6820      	ldr	r0, [r4, #0]
    803e:	4629      	mov	r1, r5
    8040:	3008      	adds	r0, #8
}
    8042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8046:	f00a bce1 	b.w	12a0c <net_buf_simple_add>
    804a:	bf00      	nop
    804c:	20000830 	.word	0x20000830

00008050 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8050:	4b0e      	ldr	r3, [pc, #56]	; (808c <encrypt_change+0x3c>)
{
    8052:	b570      	push	{r4, r5, r6, lr}
    8054:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8056:	e9d3 2300 	ldrd	r2, r3, [r3]
    805a:	2300      	movs	r3, #0
    805c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8060:	4313      	orrs	r3, r2
{
    8062:	4604      	mov	r4, r0
    8064:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8066:	d010      	beq.n	808a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8068:	2204      	movs	r2, #4
    806a:	2108      	movs	r1, #8
    806c:	4628      	mov	r0, r5
    806e:	f7ff ff92 	bl	7f96 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8072:	2104      	movs	r1, #4
    8074:	f105 0008 	add.w	r0, r5, #8
    8078:	f00a fcc8 	bl	12a0c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    807c:	fab4 f384 	clz	r3, r4
    8080:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8082:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8084:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8088:	70c3      	strb	r3, [r0, #3]
    808a:	bd70      	pop	{r4, r5, r6, pc}
    808c:	20003d30 	.word	0x20003d30

00008090 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8090:	b570      	push	{r4, r5, r6, lr}
    8092:	4604      	mov	r4, r0
    8094:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8096:	4b13      	ldr	r3, [pc, #76]	; (80e4 <le_remote_feat_complete+0x54>)
{
    8098:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    809a:	e9d3 2300 	ldrd	r2, r3, [r3]
    809e:	2200      	movs	r2, #0
    80a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    80a4:	4313      	orrs	r3, r2
{
    80a6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80a8:	d01b      	beq.n	80e2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    80aa:	4b0f      	ldr	r3, [pc, #60]	; (80e8 <le_remote_feat_complete+0x58>)
    80ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    80b0:	2300      	movs	r3, #0
    80b2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80b6:	4313      	orrs	r3, r2
    80b8:	d013      	beq.n	80e2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    80ba:	220b      	movs	r2, #11
    80bc:	2104      	movs	r1, #4
    80be:	f7ff ff8f 	bl	7fe0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    80c2:	2208      	movs	r2, #8
	sep->status = status;
    80c4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    80c6:	f8a0 6001 	strh.w	r6, [r0, #1]
    80ca:	3003      	adds	r0, #3
	if (!status) {
    80cc:	b924      	cbnz	r4, 80d8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    80ce:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    80d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    80d4:	f7f9 bd92 	b.w	1bfc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    80d8:	2100      	movs	r1, #0
}
    80da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    80de:	f7f9 bdb9 	b.w	1c54 <memset>
    80e2:	bd70      	pop	{r4, r5, r6, pc}
    80e4:	20003d30 	.word	0x20003d30
    80e8:	20003d38 	.word	0x20003d38

000080ec <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    80ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80f0:	4605      	mov	r5, r0
    80f2:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80f4:	4b46      	ldr	r3, [pc, #280]	; (8210 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    80f6:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    80f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    80fc:	f240 2801 	movw	r8, #513	; 0x201
    8100:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8104:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8108:	ea03 0309 	and.w	r3, r3, r9
    810c:	ea02 0208 	and.w	r2, r2, r8
    8110:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8112:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8114:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8118:	d077      	beq.n	820a <le_conn_complete.part.39+0x11e>
	if (!status) {
    811a:	2d00      	cmp	r5, #0
    811c:	d150      	bne.n	81c0 <le_conn_complete.part.39+0xd4>
		conn_count++;
    811e:	4a3d      	ldr	r2, [pc, #244]	; (8214 <le_conn_complete.part.39+0x128>)
    8120:	6813      	ldr	r3, [r2, #0]
    8122:	3301      	adds	r3, #1
    8124:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8126:	ea5a 030b 	orrs.w	r3, sl, fp
    812a:	f101 0803 	add.w	r8, r1, #3
    812e:	d151      	bne.n	81d4 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8130:	2212      	movs	r2, #18
    8132:	2101      	movs	r1, #1
    8134:	f7ff ff54 	bl	7fe0 <meta_evt>
	lecc->status = 0x00;
    8138:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    813a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    813e:	7863      	ldrb	r3, [r4, #1]
    8140:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8142:	78a3      	ldrb	r3, [r4, #2]
    8144:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8146:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8148:	2206      	movs	r2, #6
    814a:	4641      	mov	r1, r8
    814c:	3005      	adds	r0, #5
    814e:	f7f9 fd55 	bl	1bfc <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8152:	8ae3      	ldrh	r3, [r4, #22]
    8154:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8158:	8b23      	ldrh	r3, [r4, #24]
    815a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    815e:	8b63      	ldrh	r3, [r4, #26]
    8160:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8164:	7f23      	ldrb	r3, [r4, #28]
    8166:	747b      	strb	r3, [r7, #17]
    8168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    816c:	221e      	movs	r2, #30
    816e:	210a      	movs	r1, #10
    8170:	f7ff ff36 	bl	7fe0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8174:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8176:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    8178:	2100      	movs	r1, #0
    817a:	f7f9 fd6b 	bl	1c54 <memset>
		lecc->status = status;
    817e:	7025      	strb	r5, [r4, #0]
    8180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8184:	7d63      	ldrb	r3, [r4, #21]
    8186:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    818a:	2b40      	cmp	r3, #64	; 0x40
    818c:	d138      	bne.n	8200 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    818e:	2206      	movs	r2, #6
    8190:	f104 0110 	add.w	r1, r4, #16
    8194:	f7f9 fd32 	bl	1bfc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    8198:	2206      	movs	r2, #6
    819a:	f104 0109 	add.w	r1, r4, #9
    819e:	f107 0011 	add.w	r0, r7, #17
    81a2:	f7f9 fd2b 	bl	1bfc <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    81a6:	8ae3      	ldrh	r3, [r4, #22]
    81a8:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    81ac:	8b23      	ldrh	r3, [r4, #24]
    81ae:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    81b2:	8b63      	ldrh	r3, [r4, #26]
    81b4:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    81b8:	7f23      	ldrb	r3, [r4, #28]
    81ba:	777b      	strb	r3, [r7, #29]
    81bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    81c0:	ea5a 030b 	orrs.w	r3, sl, fp
    81c4:	d1d2      	bne.n	816c <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    81c6:	2212      	movs	r2, #18
    81c8:	2101      	movs	r1, #1
    81ca:	f7ff ff09 	bl	7fe0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    81ce:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    81d0:	4604      	mov	r4, r0
    81d2:	e7d1      	b.n	8178 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    81d4:	221e      	movs	r2, #30
    81d6:	210a      	movs	r1, #10
    81d8:	f7ff ff02 	bl	7fe0 <meta_evt>
		leecc->status = 0x00;
    81dc:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    81de:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    81e2:	7863      	ldrb	r3, [r4, #1]
    81e4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    81e6:	78a3      	ldrb	r3, [r4, #2]
    81e8:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    81ea:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    81ec:	2206      	movs	r2, #6
    81ee:	4641      	mov	r1, r8
    81f0:	3005      	adds	r0, #5
    81f2:	f7f9 fd03 	bl	1bfc <memcpy>
		if ((radio_cc->own_addr_type) &&
    81f6:	7be3      	ldrb	r3, [r4, #15]
    81f8:	f107 000b 	add.w	r0, r7, #11
    81fc:	2b00      	cmp	r3, #0
    81fe:	d1c1      	bne.n	8184 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8200:	2206      	movs	r2, #6
    8202:	2100      	movs	r1, #0
    8204:	f7f9 fd26 	bl	1c54 <memset>
    8208:	e7c6      	b.n	8198 <le_conn_complete.part.39+0xac>
    820a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    820e:	bf00      	nop
    8210:	20003d38 	.word	0x20003d38
    8214:	20000834 	.word	0x20000834

00008218 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8218:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    821a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    821c:	b08a      	sub	sp, #40	; 0x28
    821e:	4604      	mov	r4, r0
    8220:	460e      	mov	r6, r1
    8222:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8224:	2b03      	cmp	r3, #3
    8226:	d820      	bhi.n	826a <bt_addr_le_to_str.constprop.70+0x52>
    8228:	e8df f003 	tbb	[pc, r3]
    822c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8230:	4911      	ldr	r1, [pc, #68]	; (8278 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8232:	4628      	mov	r0, r5
    8234:	f7f9 fcae 	bl	1b94 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8238:	7862      	ldrb	r2, [r4, #1]
    823a:	9204      	str	r2, [sp, #16]
    823c:	78a2      	ldrb	r2, [r4, #2]
    823e:	9203      	str	r2, [sp, #12]
    8240:	78e2      	ldrb	r2, [r4, #3]
    8242:	9202      	str	r2, [sp, #8]
    8244:	7922      	ldrb	r2, [r4, #4]
    8246:	9201      	str	r2, [sp, #4]
    8248:	7962      	ldrb	r2, [r4, #5]
    824a:	9200      	str	r2, [sp, #0]
    824c:	79a3      	ldrb	r3, [r4, #6]
    824e:	9505      	str	r5, [sp, #20]
    8250:	4a0a      	ldr	r2, [pc, #40]	; (827c <bt_addr_le_to_str.constprop.70+0x64>)
    8252:	211b      	movs	r1, #27
    8254:	4630      	mov	r0, r6
    8256:	f7f8 fea7 	bl	fa8 <snprintk>
}
    825a:	b00a      	add	sp, #40	; 0x28
    825c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    825e:	4908      	ldr	r1, [pc, #32]	; (8280 <bt_addr_le_to_str.constprop.70+0x68>)
    8260:	e7e7      	b.n	8232 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    8262:	4908      	ldr	r1, [pc, #32]	; (8284 <bt_addr_le_to_str.constprop.70+0x6c>)
    8264:	e7e5      	b.n	8232 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    8266:	4908      	ldr	r1, [pc, #32]	; (8288 <bt_addr_le_to_str.constprop.70+0x70>)
    8268:	e7e3      	b.n	8232 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    826a:	4a08      	ldr	r2, [pc, #32]	; (828c <bt_addr_le_to_str.constprop.70+0x74>)
    826c:	210a      	movs	r1, #10
    826e:	4628      	mov	r0, r5
    8270:	f7f8 fe9a 	bl	fa8 <snprintk>
    8274:	e7e0      	b.n	8238 <bt_addr_le_to_str.constprop.70+0x20>
    8276:	bf00      	nop
    8278:	000145b1 	.word	0x000145b1
    827c:	000145da 	.word	0x000145da
    8280:	000145b8 	.word	0x000145b8
    8284:	000145bf 	.word	0x000145bf
    8288:	000145c9 	.word	0x000145c9
    828c:	000145d3 	.word	0x000145d3

00008290 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8294:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    8296:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8298:	4d32      	ldr	r5, [pc, #200]	; (8364 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    829a:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    829c:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    829e:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    82a0:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82a2:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    82a4:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    82a6:	b25b      	sxtb	r3, r3
    82a8:	9306      	str	r3, [sp, #24]
    82aa:	7823      	ldrb	r3, [r4, #0]
    82ac:	9201      	str	r2, [sp, #4]
    82ae:	09d9      	lsrs	r1, r3, #7
    82b0:	9105      	str	r1, [sp, #20]
    82b2:	f3c3 1180 	ubfx	r1, r3, #6, #1
    82b6:	f003 030f 	and.w	r3, r3, #15
    82ba:	9104      	str	r1, [sp, #16]
    82bc:	9302      	str	r3, [sp, #8]
    82be:	9500      	str	r5, [sp, #0]
    82c0:	4b29      	ldr	r3, [pc, #164]	; (8368 <le_adv_ext_report.isra.66+0xd8>)
    82c2:	4a2a      	ldr	r2, [pc, #168]	; (836c <le_adv_ext_report.isra.66+0xdc>)
    82c4:	492a      	ldr	r1, [pc, #168]	; (8370 <le_adv_ext_report.isra.66+0xe0>)
    82c6:	482b      	ldr	r0, [pc, #172]	; (8374 <le_adv_ext_report.isra.66+0xe4>)
    82c8:	f7f8 fe60 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    82cc:	7823      	ldrb	r3, [r4, #0]
    82ce:	f003 030f 	and.w	r3, r3, #15
    82d2:	2b07      	cmp	r3, #7
    82d4:	d143      	bne.n	835e <le_adv_ext_report.isra.66+0xce>
    82d6:	7863      	ldrb	r3, [r4, #1]
    82d8:	2b00      	cmp	r3, #0
    82da:	d040      	beq.n	835e <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    82dc:	78a3      	ldrb	r3, [r4, #2]
    82de:	4924      	ldr	r1, [pc, #144]	; (8370 <le_adv_ext_report.isra.66+0xe0>)
    82e0:	9503      	str	r5, [sp, #12]
    82e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    82e6:	099b      	lsrs	r3, r3, #6
    82e8:	9202      	str	r2, [sp, #8]
    82ea:	9301      	str	r3, [sp, #4]
    82ec:	9500      	str	r5, [sp, #0]
    82ee:	4b1e      	ldr	r3, [pc, #120]	; (8368 <le_adv_ext_report.isra.66+0xd8>)
    82f0:	4a1e      	ldr	r2, [pc, #120]	; (836c <le_adv_ext_report.isra.66+0xdc>)
    82f2:	4821      	ldr	r0, [pc, #132]	; (8378 <le_adv_ext_report.isra.66+0xe8>)
    82f4:	f7f8 fe4a 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    82f8:	78a3      	ldrb	r3, [r4, #2]
    82fa:	0699      	lsls	r1, r3, #26
    82fc:	d02f      	beq.n	835e <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    82fe:	78e3      	ldrb	r3, [r4, #3]
    8300:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8302:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    8306:	d51c      	bpl.n	8342 <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    8308:	7823      	ldrb	r3, [r4, #0]
    830a:	af12      	add	r7, sp, #72	; 0x48
    830c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8310:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8314:	2206      	movs	r2, #6
    8316:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8318:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    831c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8320:	f7f9 fc6c 	bl	1bfc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8324:	4641      	mov	r1, r8
    8326:	4638      	mov	r0, r7
    8328:	f7ff ff76 	bl	8218 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    832c:	9502      	str	r5, [sp, #8]
    832e:	e88d 0120 	stmia.w	sp, {r5, r8}
    8332:	4b0d      	ldr	r3, [pc, #52]	; (8368 <le_adv_ext_report.isra.66+0xd8>)
    8334:	4a0d      	ldr	r2, [pc, #52]	; (836c <le_adv_ext_report.isra.66+0xdc>)
    8336:	490e      	ldr	r1, [pc, #56]	; (8370 <le_adv_ext_report.isra.66+0xe0>)
    8338:	4810      	ldr	r0, [pc, #64]	; (837c <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    833a:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    833e:	f7f8 fe25 	bl	f8c <printk>
		if (h->tx_pwr) {
    8342:	78e3      	ldrb	r3, [r4, #3]
    8344:	065b      	lsls	r3, r3, #25
    8346:	d50a      	bpl.n	835e <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8348:	9502      	str	r5, [sp, #8]
    834a:	f996 3000 	ldrsb.w	r3, [r6]
    834e:	9301      	str	r3, [sp, #4]
    8350:	9500      	str	r5, [sp, #0]
    8352:	4b05      	ldr	r3, [pc, #20]	; (8368 <le_adv_ext_report.isra.66+0xd8>)
    8354:	4a05      	ldr	r2, [pc, #20]	; (836c <le_adv_ext_report.isra.66+0xdc>)
    8356:	4906      	ldr	r1, [pc, #24]	; (8370 <le_adv_ext_report.isra.66+0xe0>)
    8358:	4809      	ldr	r0, [pc, #36]	; (8380 <le_adv_ext_report.isra.66+0xf0>)
    835a:	f7f8 fe17 	bl	f8c <printk>
}
    835e:	b012      	add	sp, #72	; 0x48
    8360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8364:	00014645 	.word	0x00014645
    8368:	00016184 	.word	0x00016184
    836c:	000153dc 	.word	0x000153dc
    8370:	000153e3 	.word	0x000153e3
    8374:	000163e1 	.word	0x000163e1
    8378:	0001642e 	.word	0x0001642e
    837c:	0001645f 	.word	0x0001645f
    8380:	00016478 	.word	0x00016478

00008384 <sys_get_le64>:
{
    8384:	4603      	mov	r3, r0
}
    8386:	6800      	ldr	r0, [r0, #0]
    8388:	6859      	ldr	r1, [r3, #4]
    838a:	4770      	bx	lr

0000838c <hci_cmd_handle>:
{
    838c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    838e:	8981      	ldrh	r1, [r0, #12]
{
    8390:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    8392:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8394:	2902      	cmp	r1, #2
{
    8396:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8398:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    839a:	d80b      	bhi.n	83b4 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    839c:	4bbe      	ldr	r3, [pc, #760]	; (8698 <hci_cmd_handle+0x30c>)
    839e:	9301      	str	r3, [sp, #4]
    83a0:	9300      	str	r3, [sp, #0]
    83a2:	4abe      	ldr	r2, [pc, #760]	; (869c <hci_cmd_handle+0x310>)
    83a4:	4bbe      	ldr	r3, [pc, #760]	; (86a0 <hci_cmd_handle+0x314>)
    83a6:	49bf      	ldr	r1, [pc, #764]	; (86a4 <hci_cmd_handle+0x318>)
    83a8:	48bf      	ldr	r0, [pc, #764]	; (86a8 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    83aa:	f7f8 fdef 	bl	f8c <printk>
		return NULL;
    83ae:	4628      	mov	r0, r5
}
    83b0:	b013      	add	sp, #76	; 0x4c
    83b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    83b4:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    83b6:	4ebd      	ldr	r6, [pc, #756]	; (86ac <hci_cmd_handle+0x320>)
    83b8:	781a      	ldrb	r2, [r3, #0]
    83ba:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    83bc:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    83be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    83c2:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    83c4:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    83c6:	d907      	bls.n	83d8 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    83c8:	4bb3      	ldr	r3, [pc, #716]	; (8698 <hci_cmd_handle+0x30c>)
    83ca:	9301      	str	r3, [sp, #4]
    83cc:	9300      	str	r3, [sp, #0]
    83ce:	4ab3      	ldr	r2, [pc, #716]	; (869c <hci_cmd_handle+0x310>)
    83d0:	4bb3      	ldr	r3, [pc, #716]	; (86a0 <hci_cmd_handle+0x314>)
    83d2:	49b4      	ldr	r1, [pc, #720]	; (86a4 <hci_cmd_handle+0x318>)
    83d4:	48b6      	ldr	r0, [pc, #728]	; (86b0 <hci_cmd_handle+0x324>)
    83d6:	e7e8      	b.n	83aa <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    83d8:	2103      	movs	r1, #3
    83da:	f104 0008 	add.w	r0, r4, #8
    83de:	f00a fb43 	bl	12a68 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    83e2:	8833      	ldrh	r3, [r6, #0]
    83e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    83e8:	0a9b      	lsrs	r3, r3, #10
    83ea:	2b04      	cmp	r3, #4
    83ec:	f000 80bc 	beq.w	8568 <hci_cmd_handle+0x1dc>
    83f0:	d809      	bhi.n	8406 <hci_cmd_handle+0x7a>
    83f2:	2b01      	cmp	r3, #1
    83f4:	d026      	beq.n	8444 <hci_cmd_handle+0xb8>
    83f6:	2b03      	cmp	r3, #3
    83f8:	d03b      	beq.n	8472 <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    83fa:	2101      	movs	r1, #1
    83fc:	a807      	add	r0, sp, #28
    83fe:	f7ff fe05 	bl	800c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8402:	2301      	movs	r3, #1
    8404:	e298      	b.n	8938 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    8406:	2b08      	cmp	r3, #8
    8408:	f000 8168 	beq.w	86dc <hci_cmd_handle+0x350>
    840c:	2b3f      	cmp	r3, #63	; 0x3f
    840e:	d1f4      	bne.n	83fa <hci_cmd_handle+0x6e>
	switch (ocf) {
    8410:	3a01      	subs	r2, #1
    8412:	2a09      	cmp	r2, #9
    8414:	d8f1      	bhi.n	83fa <hci_cmd_handle+0x6e>
    8416:	a301      	add	r3, pc, #4	; (adr r3, 841c <hci_cmd_handle+0x90>)
    8418:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    841c:	00008c71 	.word	0x00008c71
    8420:	00008ca1 	.word	0x00008ca1
    8424:	00008ccb 	.word	0x00008ccb
    8428:	000083fb 	.word	0x000083fb
    842c:	000083fb 	.word	0x000083fb
    8430:	00008d11 	.word	0x00008d11
    8434:	000083fb 	.word	0x000083fb
    8438:	00008ce3 	.word	0x00008ce3
    843c:	00008d1d 	.word	0x00008d1d
    8440:	00008d8b 	.word	0x00008d8b
	switch (ocf) {
    8444:	2a06      	cmp	r2, #6
    8446:	d006      	beq.n	8456 <hci_cmd_handle+0xca>
    8448:	2a1d      	cmp	r2, #29
    844a:	d1d6      	bne.n	83fa <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    844c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    844e:	8818      	ldrh	r0, [r3, #0]
    8450:	f007 ffbf 	bl	103d2 <ll_version_ind_send>
    8454:	e004      	b.n	8460 <hci_cmd_handle+0xd4>
    8456:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8458:	7899      	ldrb	r1, [r3, #2]
    845a:	8818      	ldrh	r0, [r3, #0]
    845c:	f007 ffcd 	bl	103fa <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8460:	2800      	cmp	r0, #0
    8462:	bf14      	ite	ne
    8464:	200c      	movne	r0, #12
    8466:	2000      	moveq	r0, #0
    8468:	f7ff fda0 	bl	7fac <cmd_status>
    846c:	9007      	str	r0, [sp, #28]
	return evt;
    846e:	9807      	ldr	r0, [sp, #28]
    8470:	e79e      	b.n	83b0 <hci_cmd_handle+0x24>
	switch (ocf) {
    8472:	2a2d      	cmp	r2, #45	; 0x2d
    8474:	d03a      	beq.n	84ec <hci_cmd_handle+0x160>
    8476:	d820      	bhi.n	84ba <hci_cmd_handle+0x12e>
    8478:	2a01      	cmp	r2, #1
    847a:	d02b      	beq.n	84d4 <hci_cmd_handle+0x148>
    847c:	2a03      	cmp	r2, #3
    847e:	d1bc      	bne.n	83fa <hci_cmd_handle+0x6e>
	dup_count = -1;
    8480:	4b8c      	ldr	r3, [pc, #560]	; (86b4 <hci_cmd_handle+0x328>)
    8482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8486:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8488:	4b8b      	ldr	r3, [pc, #556]	; (86b8 <hci_cmd_handle+0x32c>)
    848a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    848e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8492:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8496:	4b89      	ldr	r3, [pc, #548]	; (86bc <hci_cmd_handle+0x330>)
    8498:	2000      	movs	r0, #0
    849a:	2100      	movs	r1, #0
    849c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    84a0:	4b87      	ldr	r3, [pc, #540]	; (86c0 <hci_cmd_handle+0x334>)
    84a2:	201f      	movs	r0, #31
    84a4:	2100      	movs	r1, #0
    84a6:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    84aa:	f007 fc5d 	bl	fd68 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    84ae:	2101      	movs	r1, #1
    84b0:	a807      	add	r0, sp, #28
    84b2:	f7ff fdab 	bl	800c <cmd_complete>
	ccst->status = 0x00;
    84b6:	2300      	movs	r3, #0
    84b8:	e23e      	b.n	8938 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    84ba:	2a7b      	cmp	r2, #123	; 0x7b
    84bc:	d02c      	beq.n	8518 <hci_cmd_handle+0x18c>
    84be:	2a7c      	cmp	r2, #124	; 0x7c
    84c0:	d041      	beq.n	8546 <hci_cmd_handle+0x1ba>
    84c2:	2a63      	cmp	r2, #99	; 0x63
    84c4:	d199      	bne.n	83fa <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    84c6:	68a0      	ldr	r0, [r4, #8]
    84c8:	f7ff ff5c 	bl	8384 <sys_get_le64>
    84cc:	4b7b      	ldr	r3, [pc, #492]	; (86bc <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    84ce:	e9c3 0100 	strd	r0, r1, [r3]
    84d2:	e7ec      	b.n	84ae <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    84d4:	68a0      	ldr	r0, [r4, #8]
    84d6:	f7ff ff55 	bl	8384 <sys_get_le64>
    84da:	4b77      	ldr	r3, [pc, #476]	; (86b8 <hci_cmd_handle+0x32c>)
    84dc:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    84e0:	4611      	mov	r1, r2
    84e2:	a807      	add	r0, sp, #28
    84e4:	f7ff fd92 	bl	800c <cmd_complete>
	ccst->status = 0x00;
    84e8:	7005      	strb	r5, [r0, #0]
    84ea:	e7c0      	b.n	846e <hci_cmd_handle+0xe2>
    84ec:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    84ee:	2104      	movs	r1, #4
    84f0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    84f2:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    84f4:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    84f6:	f7ff fd89 	bl	800c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    84fa:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    84fc:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    84fe:	1cc2      	adds	r2, r0, #3
    8500:	4639      	mov	r1, r7
    8502:	4630      	mov	r0, r6
    8504:	f007 ff8d 	bl	10422 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8508:	2800      	cmp	r0, #0
    850a:	bf14      	ite	ne
    850c:	2302      	movne	r3, #2
    850e:	2300      	moveq	r3, #0
    8510:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8512:	f8a4 5001 	strh.w	r5, [r4, #1]
    8516:	e7aa      	b.n	846e <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    8518:	68a3      	ldr	r3, [r4, #8]
    851a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    851c:	a908      	add	r1, sp, #32
    851e:	b2a0      	uxth	r0, r4
    8520:	f007 ff89 	bl	10436 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8524:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8526:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8528:	a807      	add	r0, sp, #28
    852a:	f7ff fd6f 	bl	800c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    852e:	2d00      	cmp	r5, #0
    8530:	bf14      	ite	ne
    8532:	230c      	movne	r3, #12
    8534:	2300      	moveq	r3, #0
    8536:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8538:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    853c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8540:	f8a0 3003 	strh.w	r3, [r0, #3]
    8544:	e793      	b.n	846e <hci_cmd_handle+0xe2>
    8546:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8548:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    854a:	8859      	ldrh	r1, [r3, #2]
    854c:	b2a0      	uxth	r0, r4
    854e:	f007 ff86 	bl	1045e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8552:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8554:	2103      	movs	r1, #3
    8556:	a807      	add	r0, sp, #28
    8558:	f7ff fd58 	bl	800c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    855c:	2d00      	cmp	r5, #0
    855e:	bf14      	ite	ne
    8560:	230c      	movne	r3, #12
    8562:	2300      	moveq	r3, #0
    8564:	7003      	strb	r3, [r0, #0]
    8566:	e27d      	b.n	8a64 <hci_cmd_handle+0x6d8>
	switch (ocf) {
    8568:	3a01      	subs	r2, #1
    856a:	2a08      	cmp	r2, #8
    856c:	f63f af45 	bhi.w	83fa <hci_cmd_handle+0x6e>
    8570:	a301      	add	r3, pc, #4	; (adr r3, 8578 <hci_cmd_handle+0x1ec>)
    8572:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8576:	bf00      	nop
    8578:	0000859d 	.word	0x0000859d
    857c:	000085c7 	.word	0x000085c7
    8580:	0000867b 	.word	0x0000867b
    8584:	000083fb 	.word	0x000083fb
    8588:	000083fb 	.word	0x000083fb
    858c:	000083fb 	.word	0x000083fb
    8590:	000083fb 	.word	0x000083fb
    8594:	000083fb 	.word	0x000083fb
    8598:	000086c5 	.word	0x000086c5
	rp = cmd_complete(evt, sizeof(*rp));
    859c:	2109      	movs	r1, #9
    859e:	a807      	add	r0, sp, #28
    85a0:	f7ff fd34 	bl	800c <cmd_complete>
	rp->status = 0x00;
    85a4:	2300      	movs	r3, #0
    85a6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    85a8:	7083      	strb	r3, [r0, #2]
    85aa:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    85ac:	f06f 030e 	mvn.w	r3, #14
    85b0:	7143      	strb	r3, [r0, #5]
    85b2:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    85b4:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    85b6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    85b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    85bc:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    85be:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    85c0:	71c3      	strb	r3, [r0, #7]
    85c2:	7203      	strb	r3, [r0, #8]
    85c4:	e753      	b.n	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    85c6:	2141      	movs	r1, #65	; 0x41
    85c8:	a807      	add	r0, sp, #28
    85ca:	f7ff fd1f 	bl	800c <cmd_complete>
	rp->status = 0x00;
    85ce:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    85d0:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    85d2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    85d4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    85d8:	f7f9 fb3c 	bl	1c54 <memset>
	rp->commands[2] |= BIT(7);
    85dc:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    85de:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    85e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    85e4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    85e6:	79a3      	ldrb	r3, [r4, #6]
    85e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    85ec:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    85ee:	7ae3      	ldrb	r3, [r4, #11]
    85f0:	f043 0304 	orr.w	r3, r3, #4
    85f4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    85f6:	7be3      	ldrb	r3, [r4, #15]
    85f8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    85fc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    85fe:	7c23      	ldrb	r3, [r4, #16]
    8600:	f043 0302 	orr.w	r3, r3, #2
    8604:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8606:	7de3      	ldrb	r3, [r4, #23]
    8608:	f043 0304 	orr.w	r3, r3, #4
    860c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    860e:	7ea3      	ldrb	r3, [r4, #26]
    8610:	f043 0317 	orr.w	r3, r3, #23
    8614:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    8616:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8618:	f043 0309 	orr.w	r3, r3, #9
    861c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    861e:	7863      	ldrb	r3, [r4, #1]
    8620:	f043 0320 	orr.w	r3, r3, #32
    8624:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8626:	23ff      	movs	r3, #255	; 0xff
    8628:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    862a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    862e:	f063 030f 	orn	r3, r3, #15
    8632:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    8636:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    863a:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    863e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    8642:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8644:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8648:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    864c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8650:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8654:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8658:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    865c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8660:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8664:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8668:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    866c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8670:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8674:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    8678:	e6f9      	b.n	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    867a:	2109      	movs	r1, #9
    867c:	a807      	add	r0, sp, #28
    867e:	f7ff fcc5 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8682:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8684:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8686:	2208      	movs	r2, #8
	rp->status = 0x00;
    8688:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    868c:	f7f9 fae2 	bl	1c54 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8690:	2360      	movs	r3, #96	; 0x60
    8692:	7163      	strb	r3, [r4, #5]
    8694:	e6eb      	b.n	846e <hci_cmd_handle+0xe2>
    8696:	bf00      	nop
    8698:	00014645 	.word	0x00014645
    869c:	00015394 	.word	0x00015394
    86a0:	00016150 	.word	0x00016150
    86a4:	000153e3 	.word	0x000153e3
    86a8:	00016293 	.word	0x00016293
    86ac:	20000830 	.word	0x20000830
    86b0:	000162b9 	.word	0x000162b9
    86b4:	20000838 	.word	0x20000838
    86b8:	20003d30 	.word	0x20003d30
    86bc:	200008c0 	.word	0x200008c0
    86c0:	20003d38 	.word	0x20003d38
	rp = cmd_complete(evt, sizeof(*rp));
    86c4:	2107      	movs	r1, #7
    86c6:	a807      	add	r0, sp, #28
    86c8:	f7ff fca0 	bl	800c <cmd_complete>
	rp->status = 0x00;
    86cc:	4601      	mov	r1, r0
    86ce:	2300      	movs	r3, #0
    86d0:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    86d4:	4618      	mov	r0, r3
    86d6:	f7ff fac5 	bl	7c64 <ll_addr_get>
    86da:	e6c8      	b.n	846e <hci_cmd_handle+0xe2>
	switch (ocf) {
    86dc:	3a01      	subs	r2, #1
    86de:	2a4d      	cmp	r2, #77	; 0x4d
    86e0:	f63f ae8b 	bhi.w	83fa <hci_cmd_handle+0x6e>
    86e4:	a301      	add	r3, pc, #4	; (adr r3, 86ec <hci_cmd_handle+0x360>)
    86e6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    86ea:	bf00      	nop
    86ec:	00008825 	.word	0x00008825
    86f0:	0000882f 	.word	0x0000882f
    86f4:	00008847 	.word	0x00008847
    86f8:	000083fb 	.word	0x000083fb
    86fc:	0000886b 	.word	0x0000886b
    8700:	000083fb 	.word	0x000083fb
    8704:	000083fb 	.word	0x000083fb
    8708:	000083fb 	.word	0x000083fb
    870c:	000083fb 	.word	0x000083fb
    8710:	000083fb 	.word	0x000083fb
    8714:	0000890f 	.word	0x0000890f
    8718:	0000893d 	.word	0x0000893d
    871c:	0000895d 	.word	0x0000895d
    8720:	00008987 	.word	0x00008987
    8724:	00008877 	.word	0x00008877
    8728:	0000888d 	.word	0x0000888d
    872c:	0000889f 	.word	0x0000889f
    8730:	000088a7 	.word	0x000088a7
    8734:	00008a27 	.word	0x00008a27
    8738:	000089e7 	.word	0x000089e7
    873c:	00008a03 	.word	0x00008a03
    8740:	00008a1d 	.word	0x00008a1d
    8744:	000088af 	.word	0x000088af
    8748:	000088d5 	.word	0x000088d5
    874c:	000089ef 	.word	0x000089ef
    8750:	000083fb 	.word	0x000083fb
    8754:	000083fb 	.word	0x000083fb
    8758:	000088eb 	.word	0x000088eb
    875c:	000083fb 	.word	0x000083fb
    8760:	000083fb 	.word	0x000083fb
    8764:	000083fb 	.word	0x000083fb
    8768:	00008a41 	.word	0x00008a41
    876c:	00008a6b 	.word	0x00008a6b
    8770:	00008a79 	.word	0x00008a79
    8774:	00008a89 	.word	0x00008a89
    8778:	00008aa1 	.word	0x00008aa1
    877c:	000083fb 	.word	0x000083fb
    8780:	000083fb 	.word	0x000083fb
    8784:	00008bb9 	.word	0x00008bb9
    8788:	00008bc7 	.word	0x00008bc7
    878c:	00008bcf 	.word	0x00008bcf
    8790:	00008bdf 	.word	0x00008bdf
    8794:	00008bf1 	.word	0x00008bf1
    8798:	00008c0f 	.word	0x00008c0f
    879c:	00008c2d 	.word	0x00008c2d
    87a0:	00008c43 	.word	0x00008c43
    87a4:	00008abd 	.word	0x00008abd
    87a8:	00008ae9 	.word	0x00008ae9
    87ac:	00008b3f 	.word	0x00008b3f
    87b0:	00008b5d 	.word	0x00008b5d
    87b4:	000083fb 	.word	0x000083fb
    87b8:	000083fb 	.word	0x000083fb
    87bc:	000083fb 	.word	0x000083fb
    87c0:	000083fb 	.word	0x000083fb
    87c4:	000083fb 	.word	0x000083fb
    87c8:	000083fb 	.word	0x000083fb
    87cc:	000083fb 	.word	0x000083fb
    87d0:	000083fb 	.word	0x000083fb
    87d4:	000083fb 	.word	0x000083fb
    87d8:	000083fb 	.word	0x000083fb
    87dc:	000083fb 	.word	0x000083fb
    87e0:	000083fb 	.word	0x000083fb
    87e4:	000083fb 	.word	0x000083fb
    87e8:	000083fb 	.word	0x000083fb
    87ec:	000083fb 	.word	0x000083fb
    87f0:	000083fb 	.word	0x000083fb
    87f4:	000083fb 	.word	0x000083fb
    87f8:	000083fb 	.word	0x000083fb
    87fc:	000083fb 	.word	0x000083fb
    8800:	000083fb 	.word	0x000083fb
    8804:	000083fb 	.word	0x000083fb
    8808:	000083fb 	.word	0x000083fb
    880c:	000083fb 	.word	0x000083fb
    8810:	000083fb 	.word	0x000083fb
    8814:	00008c57 	.word	0x00008c57
    8818:	000083fb 	.word	0x000083fb
    881c:	000083fb 	.word	0x000083fb
    8820:	00008c4d 	.word	0x00008c4d
	le_event_mask = sys_get_le64(cmd->events);
    8824:	68a0      	ldr	r0, [r4, #8]
    8826:	f7ff fdad 	bl	8384 <sys_get_le64>
    882a:	4baa      	ldr	r3, [pc, #680]	; (8ad4 <hci_cmd_handle+0x748>)
    882c:	e64f      	b.n	84ce <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    882e:	2104      	movs	r1, #4
    8830:	a807      	add	r0, sp, #28
    8832:	f7ff fbeb 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8836:	2300      	movs	r3, #0
    8838:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    883a:	221b      	movs	r2, #27
    883c:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    883e:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8840:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8842:	70c3      	strb	r3, [r0, #3]
    8844:	e613      	b.n	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8846:	2109      	movs	r1, #9
    8848:	a807      	add	r0, sp, #28
    884a:	f7ff fbdf 	bl	800c <cmd_complete>
	rp->status = 0x00;
    884e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8850:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8852:	2208      	movs	r2, #8
	rp->status = 0x00;
    8854:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8858:	f7f9 f9fc 	bl	1c54 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    885c:	23ff      	movs	r3, #255	; 0xff
    885e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8860:	2341      	movs	r3, #65	; 0x41
    8862:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8864:	2301      	movs	r3, #1
    8866:	70e3      	strb	r3, [r4, #3]
    8868:	e601      	b.n	846e <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    886a:	68a1      	ldr	r1, [r4, #8]
    886c:	2001      	movs	r0, #1
    886e:	f7ff fa13 	bl	7c98 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8872:	4604      	mov	r4, r0
    8874:	e0af      	b.n	89d6 <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    8876:	2102      	movs	r1, #2
    8878:	a807      	add	r0, sp, #28
    887a:	f7ff fbc7 	bl	800c <cmd_complete>
	rp->status = 0x00;
    887e:	2300      	movs	r3, #0
    8880:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8882:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8884:	f008 fd32 	bl	112ec <ll_wl_size_get>
    8888:	7060      	strb	r0, [r4, #1]
    888a:	e5f0      	b.n	846e <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    888c:	2101      	movs	r1, #1
    888e:	a807      	add	r0, sp, #28
    8890:	f7ff fbbc 	bl	800c <cmd_complete>
    8894:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8896:	f008 fd2b 	bl	112f0 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    889a:	7020      	strb	r0, [r4, #0]
    889c:	e5e7      	b.n	846e <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    889e:	68a0      	ldr	r0, [r4, #8]
    88a0:	f008 fdd2 	bl	11448 <ll_wl_add>
    88a4:	e7e5      	b.n	8872 <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    88a6:	68a0      	ldr	r0, [r4, #8]
    88a8:	f008 fd42 	bl	11330 <ll_wl_remove>
    88ac:	e7e1      	b.n	8872 <hci_cmd_handle+0x4e6>
    88ae:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    88b0:	2300      	movs	r3, #0
    88b2:	aa08      	add	r2, sp, #32
    88b4:	f100 0110 	add.w	r1, r0, #16
    88b8:	f009 fa40 	bl	11d3c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    88bc:	2111      	movs	r1, #17
    88be:	a807      	add	r0, sp, #28
    88c0:	f7ff fba4 	bl	800c <cmd_complete>
	rp->status = 0x00;
    88c4:	2300      	movs	r3, #0
    88c6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    88ca:	2210      	movs	r2, #16
    88cc:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    88ce:	f7f9 f995 	bl	1bfc <memcpy>
    88d2:	e5cc      	b.n	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    88d4:	2109      	movs	r1, #9
    88d6:	a807      	add	r0, sp, #28
    88d8:	f7ff fb98 	bl	800c <cmd_complete>
	rp->status = 0x00;
    88dc:	2300      	movs	r3, #0
    88de:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    88e2:	2108      	movs	r1, #8
    88e4:	f7ff f9f8 	bl	7cd8 <bt_rand>
    88e8:	e5c1      	b.n	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    88ea:	2109      	movs	r1, #9
    88ec:	a807      	add	r0, sp, #28
    88ee:	f7ff fb8d 	bl	800c <cmd_complete>
	rp->status = 0x00;
    88f2:	4601      	mov	r1, r0
    88f4:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    88f6:	4602      	mov	r2, r0
	rp->status = 0x00;
    88f8:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    88fc:	4876      	ldr	r0, [pc, #472]	; (8ad8 <hci_cmd_handle+0x74c>)
    88fe:	f7ff fb41 	bl	7f84 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8902:	f240 203f 	movw	r0, #575	; 0x23f
    8906:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8908:	f7ff fb3c 	bl	7f84 <sys_put_le32>
    890c:	e5af      	b.n	846e <hci_cmd_handle+0xe2>
    890e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8910:	7963      	ldrb	r3, [r4, #5]
    8912:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8916:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    891a:	7820      	ldrb	r0, [r4, #0]
    891c:	79a4      	ldrb	r4, [r4, #6]
    891e:	9400      	str	r4, [sp, #0]
    8920:	f008 faa8 	bl	10e74 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8924:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8926:	2101      	movs	r1, #1
    8928:	a807      	add	r0, sp, #28
    892a:	f7ff fb6f 	bl	800c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    892e:	2c00      	cmp	r4, #0
    8930:	bf18      	it	ne
    8932:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8934:	bf08      	it	eq
    8936:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8938:	7003      	strb	r3, [r0, #0]
    893a:	e598      	b.n	846e <hci_cmd_handle+0xe2>
    893c:	68a2      	ldr	r2, [r4, #8]
    893e:	4b67      	ldr	r3, [pc, #412]	; (8adc <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    8940:	7810      	ldrb	r0, [r2, #0]
    8942:	b140      	cbz	r0, 8956 <hci_cmd_handle+0x5ca>
    8944:	7852      	ldrb	r2, [r2, #1]
    8946:	b132      	cbz	r2, 8956 <hci_cmd_handle+0x5ca>
		dup_count = 0;
    8948:	2200      	movs	r2, #0
    894a:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    894c:	4b64      	ldr	r3, [pc, #400]	; (8ae0 <hci_cmd_handle+0x754>)
		dup_count = -1;
    894e:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8950:	f008 fab0 	bl	10eb4 <ll_scan_enable>
    8954:	e7e6      	b.n	8924 <hci_cmd_handle+0x598>
		dup_count = -1;
    8956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    895a:	e7f8      	b.n	894e <hci_cmd_handle+0x5c2>
    895c:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    895e:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8962:	7963      	ldrb	r3, [r4, #5]
    8964:	7922      	ldrb	r2, [r4, #4]
    8966:	8861      	ldrh	r1, [r4, #2]
    8968:	8820      	ldrh	r0, [r4, #0]
    896a:	9504      	str	r5, [sp, #16]
    896c:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8970:	9503      	str	r5, [sp, #12]
    8972:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8976:	9502      	str	r5, [sp, #8]
    8978:	7b25      	ldrb	r5, [r4, #12]
    897a:	9501      	str	r5, [sp, #4]
    897c:	3406      	adds	r4, #6
    897e:	9400      	str	r4, [sp, #0]
    8980:	f008 fad2 	bl	10f28 <ll_create_connection>
    8984:	e56c      	b.n	8460 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    8986:	f008 f8e7 	bl	10b58 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    898a:	4606      	mov	r6, r0
    898c:	bb48      	cbnz	r0, 89e2 <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    898e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8992:	2001      	movs	r0, #1
    8994:	f7fb f88c 	bl	3ab0 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8998:	4a52      	ldr	r2, [pc, #328]	; (8ae4 <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    899a:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    899c:	e9d2 4500 	ldrd	r4, r5, [r2]
    89a0:	2400      	movs	r4, #0
    89a2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    89a6:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    89aa:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89ac:	d004      	beq.n	89b8 <hci_cmd_handle+0x62c>
    89ae:	4632      	mov	r2, r6
    89b0:	4631      	mov	r1, r6
    89b2:	2002      	movs	r0, #2
    89b4:	f7ff fb9a 	bl	80ec <le_conn_complete.part.39>
		if ((*evt)->len) {
    89b8:	9807      	ldr	r0, [sp, #28]
    89ba:	8984      	ldrh	r4, [r0, #12]
    89bc:	b14c      	cbz	r4, 89d2 <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    89be:	2101      	movs	r1, #1
    89c0:	a808      	add	r0, sp, #32
    89c2:	f7ff fb23 	bl	800c <cmd_complete>
			ccst->status = cmd_status;
    89c6:	2300      	movs	r3, #0
    89c8:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    89ca:	9808      	ldr	r0, [sp, #32]
    89cc:	f7fa fe98 	bl	3700 <bt_recv_prio>
    89d0:	e54d      	b.n	846e <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    89d2:	f009 ffe9 	bl	129a8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    89d6:	2101      	movs	r1, #1
    89d8:	a807      	add	r0, sp, #28
    89da:	f7ff fb17 	bl	800c <cmd_complete>
	ccst->status = status;
    89de:	7004      	strb	r4, [r0, #0]
    89e0:	e545      	b.n	846e <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    89e2:	240c      	movs	r4, #12
    89e4:	e7f7      	b.n	89d6 <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    89e6:	68a0      	ldr	r0, [r4, #8]
    89e8:	f007 fc88 	bl	102fc <ll_chm_update>
    89ec:	e79a      	b.n	8924 <hci_cmd_handle+0x598>
    89ee:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    89f0:	f100 030c 	add.w	r3, r0, #12
    89f4:	f100 020a 	add.w	r2, r0, #10
    89f8:	1c81      	adds	r1, r0, #2
    89fa:	8800      	ldrh	r0, [r0, #0]
    89fc:	f007 ff32 	bl	10864 <ll_enc_req_send>
    8a00:	e52e      	b.n	8460 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    8a02:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8a04:	2108      	movs	r1, #8
    8a06:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8a08:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8a0a:	f7ff faff 	bl	800c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8a0e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8a10:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8a12:	1cc1      	adds	r1, r0, #3
    8a14:	4630      	mov	r0, r6
    8a16:	f007 fcb3 	bl	10380 <ll_chm_get>
    8a1a:	e575      	b.n	8508 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    8a1c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8a1e:	8818      	ldrh	r0, [r3, #0]
    8a20:	f007 fcc3 	bl	103aa <ll_feature_req_send>
    8a24:	e51c      	b.n	8460 <hci_cmd_handle+0xd4>
    8a26:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8a28:	8911      	ldrh	r1, [r2, #8]
    8a2a:	8893      	ldrh	r3, [r2, #4]
    8a2c:	8810      	ldrh	r0, [r2, #0]
    8a2e:	9101      	str	r1, [sp, #4]
    8a30:	88d2      	ldrh	r2, [r2, #6]
    8a32:	9200      	str	r2, [sp, #0]
    8a34:	2200      	movs	r2, #0
    8a36:	4611      	mov	r1, r2
    8a38:	f007 fbe8 	bl	1020c <ll_conn_update>
	*evt = cmd_status(status);
    8a3c:	b2c0      	uxtb	r0, r0
    8a3e:	e513      	b.n	8468 <hci_cmd_handle+0xdc>
    8a40:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a42:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a44:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8a46:	8893      	ldrh	r3, [r2, #4]
    8a48:	9101      	str	r1, [sp, #4]
    8a4a:	88d2      	ldrh	r2, [r2, #6]
    8a4c:	9200      	str	r2, [sp, #0]
    8a4e:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a50:	2102      	movs	r1, #2
    8a52:	b2a0      	uxth	r0, r4
    8a54:	f007 fbda 	bl	1020c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8a58:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a5a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8a5c:	a807      	add	r0, sp, #28
    8a5e:	f7ff fad5 	bl	800c <cmd_complete>
	rp->status = status;
    8a62:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8a64:	f8a0 4001 	strh.w	r4, [r0, #1]
    8a68:	e501      	b.n	846e <hci_cmd_handle+0xe2>
    8a6a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a6c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8a6e:	789a      	ldrb	r2, [r3, #2]
    8a70:	2300      	movs	r3, #0
    8a72:	9301      	str	r3, [sp, #4]
    8a74:	9300      	str	r3, [sp, #0]
    8a76:	e7eb      	b.n	8a50 <hci_cmd_handle+0x6c4>
    8a78:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8a7a:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8a7c:	889a      	ldrh	r2, [r3, #4]
    8a7e:	8859      	ldrh	r1, [r3, #2]
    8a80:	b2a0      	uxth	r0, r4
    8a82:	f007 fd02 	bl	1048a <ll_length_req_send>
    8a86:	e564      	b.n	8552 <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    8a88:	2105      	movs	r1, #5
    8a8a:	a807      	add	r0, sp, #28
    8a8c:	f7ff fabe 	bl	800c <cmd_complete>
    8a90:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8a92:	1cc1      	adds	r1, r0, #3
    8a94:	3001      	adds	r0, #1
    8a96:	f007 fd1b 	bl	104d0 <ll_length_default_get>
	rp->status = 0x00;
    8a9a:	2300      	movs	r3, #0
    8a9c:	7023      	strb	r3, [r4, #0]
    8a9e:	e4e6      	b.n	846e <hci_cmd_handle+0xe2>
    8aa0:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8aa2:	8859      	ldrh	r1, [r3, #2]
    8aa4:	8818      	ldrh	r0, [r3, #0]
    8aa6:	f007 fd1d 	bl	104e4 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8aaa:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8aac:	2101      	movs	r1, #1
    8aae:	a807      	add	r0, sp, #28
    8ab0:	f7ff faac 	bl	800c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8ab4:	2c00      	cmp	r4, #0
    8ab6:	bf18      	it	ne
    8ab8:	231e      	movne	r3, #30
    8aba:	e73b      	b.n	8934 <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    8abc:	2109      	movs	r1, #9
    8abe:	a807      	add	r0, sp, #28
    8ac0:	f7ff faa4 	bl	800c <cmd_complete>
    8ac4:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8ac6:	1dc3      	adds	r3, r0, #7
    8ac8:	1d42      	adds	r2, r0, #5
    8aca:	1cc1      	adds	r1, r0, #3
    8acc:	3001      	adds	r0, #1
    8ace:	f007 fd13 	bl	104f8 <ll_length_max_get>
    8ad2:	e7e2      	b.n	8a9a <hci_cmd_handle+0x70e>
    8ad4:	20003d38 	.word	0x20003d38
    8ad8:	130f3370 	.word	0x130f3370
    8adc:	20000838 	.word	0x20000838
    8ae0:	2000083c 	.word	0x2000083c
    8ae4:	20003d30 	.word	0x20003d30
	handle = sys_le16_to_cpu(cmd->handle);
    8ae8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8aea:	2105      	movs	r1, #5
    8aec:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8aee:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8af0:	f7ff fa8c 	bl	800c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8af4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8af6:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8af8:	1d02      	adds	r2, r0, #4
    8afa:	1cc1      	adds	r1, r0, #3
    8afc:	4630      	mov	r0, r6
    8afe:	f007 fd04 	bl	1050a <ll_phy_get>
	return __builtin_ffs(op);
    8b02:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8b04:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8b08:	2800      	cmp	r0, #0
    8b0a:	bf14      	ite	ne
    8b0c:	230c      	movne	r3, #12
    8b0e:	2300      	moveq	r3, #0
    8b10:	7023      	strb	r3, [r4, #0]
    8b12:	2a00      	cmp	r2, #0
    8b14:	fa92 f3a2 	rbit	r3, r2
    8b18:	fab3 f383 	clz	r3, r3
    8b1c:	7922      	ldrb	r2, [r4, #4]
    8b1e:	bf08      	it	eq
    8b20:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8b24:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8b26:	70e3      	strb	r3, [r4, #3]
    8b28:	2a00      	cmp	r2, #0
    8b2a:	fa92 f3a2 	rbit	r3, r2
    8b2e:	fab3 f383 	clz	r3, r3
    8b32:	bf08      	it	eq
    8b34:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8b38:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8b3a:	7123      	strb	r3, [r4, #4]
    8b3c:	e497      	b.n	846e <hci_cmd_handle+0xe2>
    8b3e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b40:	781a      	ldrb	r2, [r3, #0]
    8b42:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8b44:	bf44      	itt	mi
    8b46:	2107      	movmi	r1, #7
    8b48:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b4a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8b4c:	bf44      	itt	mi
    8b4e:	2207      	movmi	r2, #7
    8b50:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8b52:	7899      	ldrb	r1, [r3, #2]
    8b54:	7858      	ldrb	r0, [r3, #1]
    8b56:	f007 fced 	bl	10534 <ll_phy_default_set>
    8b5a:	e7a6      	b.n	8aaa <hci_cmd_handle+0x71e>
    8b5c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b5e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8b60:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8b62:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8b66:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8b68:	bf44      	itt	mi
    8b6a:	2103      	movmi	r1, #3
    8b6c:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8b6e:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8b70:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8b72:	bf44      	itt	mi
    8b74:	2203      	movmi	r2, #3
    8b76:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8b78:	074d      	lsls	r5, r1, #29
    8b7a:	d002      	beq.n	8b82 <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    8b7c:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8b7e:	075a      	lsls	r2, r3, #29
    8b80:	d105      	bne.n	8b8e <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8b82:	2101      	movs	r1, #1
    8b84:	a807      	add	r0, sp, #28
    8b86:	f7ff fa41 	bl	800c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8b8a:	2312      	movs	r3, #18
    8b8c:	e6d4      	b.n	8938 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8b8e:	ea41 0203 	orr.w	r2, r1, r3
    8b92:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8b96:	d005      	beq.n	8ba4 <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8b98:	2101      	movs	r1, #1
    8b9a:	a807      	add	r0, sp, #28
    8b9c:	f7ff fa36 	bl	800c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8ba0:	2311      	movs	r3, #17
    8ba2:	e6c9      	b.n	8938 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    8ba4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8ba8:	bf1c      	itt	ne
    8baa:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8bae:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8bb2:	f007 fcc9 	bl	10548 <ll_phy_req_send>
    8bb6:	e453      	b.n	8460 <hci_cmd_handle+0xd4>
    8bb8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8bba:	f100 0217 	add.w	r2, r0, #23
    8bbe:	1dc1      	adds	r1, r0, #7
    8bc0:	f008 fe4c 	bl	1185c <ll_rl_add>
    8bc4:	e655      	b.n	8872 <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8bc6:	68a0      	ldr	r0, [r4, #8]
    8bc8:	f008 feea 	bl	119a0 <ll_rl_remove>
    8bcc:	e651      	b.n	8872 <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8bce:	2101      	movs	r1, #1
    8bd0:	a807      	add	r0, sp, #28
    8bd2:	f7ff fa1b 	bl	800c <cmd_complete>
    8bd6:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8bd8:	f008 fe26 	bl	11828 <ll_rl_clear>
    8bdc:	e65d      	b.n	889a <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    8bde:	2102      	movs	r1, #2
    8be0:	a807      	add	r0, sp, #28
    8be2:	f7ff fa13 	bl	800c <cmd_complete>
    8be6:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8be8:	f008 fe1c 	bl	11824 <ll_rl_size_get>
    8bec:	7060      	strb	r0, [r4, #1]
    8bee:	e754      	b.n	8a9a <hci_cmd_handle+0x70e>
    8bf0:	2207      	movs	r2, #7
    8bf2:	68a1      	ldr	r1, [r4, #8]
    8bf4:	a808      	add	r0, sp, #32
    8bf6:	f7f9 f801 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8bfa:	2107      	movs	r1, #7
    8bfc:	a807      	add	r0, sp, #28
    8bfe:	f7ff fa05 	bl	800c <cmd_complete>
    8c02:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8c04:	1c41      	adds	r1, r0, #1
    8c06:	a808      	add	r0, sp, #32
    8c08:	f008 ff58 	bl	11abc <ll_rl_crpa_get>
    8c0c:	e645      	b.n	889a <hci_cmd_handle+0x50e>
    8c0e:	2207      	movs	r2, #7
    8c10:	68a1      	ldr	r1, [r4, #8]
    8c12:	a808      	add	r0, sp, #32
    8c14:	f7f8 fff2 	bl	1bfc <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8c18:	2107      	movs	r1, #7
    8c1a:	a807      	add	r0, sp, #28
    8c1c:	f7ff f9f6 	bl	800c <cmd_complete>
    8c20:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8c22:	1c41      	adds	r1, r0, #1
    8c24:	a808      	add	r0, sp, #32
    8c26:	f008 ff69 	bl	11afc <ll_rl_lrpa_get>
    8c2a:	e636      	b.n	889a <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    8c2c:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c2e:	2101      	movs	r1, #1
    8c30:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    8c32:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c34:	f7ff f9ea 	bl	800c <cmd_complete>
    8c38:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8c3a:	4628      	mov	r0, r5
    8c3c:	f008 ff76 	bl	11b2c <ll_rl_enable>
    8c40:	e62b      	b.n	889a <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8c42:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8c44:	8818      	ldrh	r0, [r3, #0]
    8c46:	f008 ff83 	bl	11b50 <ll_rl_timeout_set>
    8c4a:	e430      	b.n	84ae <hci_cmd_handle+0x122>
    8c4c:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8c4e:	79c1      	ldrb	r1, [r0, #7]
    8c50:	f008 ff86 	bl	11b60 <ll_priv_mode_set>
    8c54:	e60d      	b.n	8872 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    8c56:	2103      	movs	r1, #3
    8c58:	a807      	add	r0, sp, #28
    8c5a:	f7ff f9d7 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8c5e:	4601      	mov	r1, r0
    8c60:	2300      	movs	r3, #0
    8c62:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8c66:	3001      	adds	r0, #1
    8c68:	f7ff f832 	bl	7cd0 <ll_tx_pwr_get>
    8c6c:	f7ff bbff 	b.w	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c70:	210d      	movs	r1, #13
    8c72:	a807      	add	r0, sp, #28
    8c74:	f7ff f9ca 	bl	800c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8c78:	2202      	movs	r2, #2
    8c7a:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8c7c:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8c7e:	2201      	movs	r2, #1
    8c80:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c82:	220c      	movs	r2, #12
	rp->status = 0x00;
    8c84:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c86:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8c88:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8c8a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8c8c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8c8e:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8c90:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8c92:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8c94:	7242      	strb	r2, [r0, #9]
    8c96:	7283      	strb	r3, [r0, #10]
    8c98:	72c3      	strb	r3, [r0, #11]
    8c9a:	7303      	strb	r3, [r0, #12]
    8c9c:	f7ff bbe7 	b.w	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8ca0:	2141      	movs	r1, #65	; 0x41
    8ca2:	a807      	add	r0, sp, #28
    8ca4:	f7ff f9b2 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8ca8:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8caa:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8cac:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8cae:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8cb2:	f7f8 ffcf 	bl	1c54 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8cb6:	7863      	ldrb	r3, [r4, #1]
    8cb8:	f063 0358 	orn	r3, r3, #88	; 0x58
    8cbc:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8cbe:	78a3      	ldrb	r3, [r4, #2]
    8cc0:	f043 0303 	orr.w	r3, r3, #3
    8cc4:	70a3      	strb	r3, [r4, #2]
    8cc6:	f7ff bbd2 	b.w	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8cca:	2109      	movs	r1, #9
    8ccc:	a807      	add	r0, sp, #28
    8cce:	f7ff f99d 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8cd2:	2100      	movs	r1, #0
    8cd4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8cd8:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8cda:	f7f8 ffbb 	bl	1c54 <memset>
    8cde:	f7ff bbc6 	b.w	846e <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    8ce2:	4b5c      	ldr	r3, [pc, #368]	; (8e54 <hci_cmd_handle+0xac8>)
    8ce4:	aa08      	add	r2, sp, #32
    8ce6:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8cea:	4615      	mov	r5, r2
    8cec:	6818      	ldr	r0, [r3, #0]
    8cee:	6859      	ldr	r1, [r3, #4]
    8cf0:	4614      	mov	r4, r2
    8cf2:	c403      	stmia	r4!, {r0, r1}
    8cf4:	3308      	adds	r3, #8
    8cf6:	42b3      	cmp	r3, r6
    8cf8:	4622      	mov	r2, r4
    8cfa:	d1f7      	bne.n	8cec <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8cfc:	2129      	movs	r1, #41	; 0x29
    8cfe:	a807      	add	r0, sp, #28
    8d00:	f7ff f984 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8d04:	2300      	movs	r3, #0
    8d06:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8d0a:	2228      	movs	r2, #40	; 0x28
    8d0c:	4629      	mov	r1, r5
    8d0e:	e5de      	b.n	88ce <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    8d10:	68a1      	ldr	r1, [r4, #8]
    8d12:	2000      	movs	r0, #0
    8d14:	f7fe ffc0 	bl	7c98 <ll_addr_set>
    8d18:	f7ff bbc9 	b.w	84ae <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d20:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    8d24:	3201      	adds	r2, #1
    8d26:	d106      	bne.n	8d36 <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d30:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8d32:	4293      	cmp	r3, r2
    8d34:	d020      	beq.n	8d78 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    8d36:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8d3a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8d3e:	07db      	lsls	r3, r3, #31
    8d40:	d51a      	bpl.n	8d78 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d42:	2118      	movs	r1, #24
    8d44:	a807      	add	r0, sp, #28
    8d46:	f7ff f961 	bl	800c <cmd_complete>
		rp->status = 0x00;
    8d4a:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    8d4c:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8d4e:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    8d50:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    8d52:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    8d54:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8d58:	1ca1      	adds	r1, r4, #2
    8d5a:	f7ff f913 	bl	7f84 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    8d5e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    8d62:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    8d64:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    8d68:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8d6c:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    8d6e:	2210      	movs	r2, #16
    8d70:	4631      	mov	r1, r6
    8d72:	f104 0008 	add.w	r0, r4, #8
    8d76:	e7b0      	b.n	8cda <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    8d78:	2102      	movs	r1, #2
    8d7a:	a807      	add	r0, sp, #28
    8d7c:	f7ff f946 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8d80:	2300      	movs	r3, #0
    8d82:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    8d84:	7043      	strb	r3, [r0, #1]
    8d86:	f7ff bb72 	b.w	846e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8d8a:	2121      	movs	r1, #33	; 0x21
    8d8c:	a807      	add	r0, sp, #28
    8d8e:	f7ff f93d 	bl	800c <cmd_complete>
	rp->status = 0x00;
    8d92:	4603      	mov	r3, r0
    8d94:	2200      	movs	r2, #0
    8d96:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    8d9e:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8da0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8da4:	3101      	adds	r1, #1
    8da6:	d04b      	beq.n	8e40 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8da8:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8dac:	3101      	adds	r1, #1
    8dae:	d047      	beq.n	8e40 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8db0:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8db4:	3101      	adds	r1, #1
    8db6:	d043      	beq.n	8e40 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    8db8:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8dbc:	3101      	adds	r1, #1
    8dbe:	d03f      	beq.n	8e40 <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    8dc0:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    8dc4:	4619      	mov	r1, r3
    8dc6:	f7ff f8dd 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    8dca:	1d61      	adds	r1, r4, #5
    8dcc:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    8dd0:	f7ff f8d8 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    8dd4:	f104 0109 	add.w	r1, r4, #9
    8dd8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    8ddc:	f7ff f8d2 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    8de0:	f104 010d 	add.w	r1, r4, #13
    8de4:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    8de8:	f7ff f8cc 	bl	7f84 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8df0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8df4:	3301      	adds	r3, #1
    8df6:	f104 0311 	add.w	r3, r4, #17
    8dfa:	d027      	beq.n	8e4c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8dfc:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8e00:	3101      	adds	r1, #1
    8e02:	d023      	beq.n	8e4c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8e04:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8e08:	3101      	adds	r1, #1
    8e0a:	d01f      	beq.n	8e4c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    8e0c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8e10:	3101      	adds	r1, #1
    8e12:	d01b      	beq.n	8e4c <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    8e14:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    8e18:	4619      	mov	r1, r3
    8e1a:	f7ff f8b3 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    8e1e:	f104 0115 	add.w	r1, r4, #21
    8e22:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    8e26:	f7ff f8ad 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    8e2a:	f104 0119 	add.w	r1, r4, #25
    8e2e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    8e32:	f7ff f8a7 	bl	7f84 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8e36:	f104 011d 	add.w	r1, r4, #29
    8e3a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    8e3e:	e563      	b.n	8908 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    8e40:	2210      	movs	r2, #16
    8e42:	2100      	movs	r1, #0
    8e44:	4618      	mov	r0, r3
    8e46:	f7f8 ff05 	bl	1c54 <memset>
    8e4a:	e7cf      	b.n	8dec <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    8e4c:	2210      	movs	r2, #16
    8e4e:	2100      	movs	r1, #0
    8e50:	4618      	mov	r0, r3
    8e52:	e742      	b.n	8cda <hci_cmd_handle+0x94e>
    8e54:	000162e7 	.word	0x000162e7

00008e58 <hci_acl_handle>:
{
    8e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    8e5c:	2300      	movs	r3, #0
    8e5e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    8e60:	8983      	ldrh	r3, [r0, #12]
    8e62:	2b03      	cmp	r3, #3
{
    8e64:	4606      	mov	r6, r0
    8e66:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    8e68:	d80d      	bhi.n	8e86 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    8e6a:	4b3a      	ldr	r3, [pc, #232]	; (8f54 <hci_acl_handle+0xfc>)
    8e6c:	9301      	str	r3, [sp, #4]
    8e6e:	9300      	str	r3, [sp, #0]
    8e70:	4a39      	ldr	r2, [pc, #228]	; (8f58 <hci_acl_handle+0x100>)
    8e72:	4b3a      	ldr	r3, [pc, #232]	; (8f5c <hci_acl_handle+0x104>)
    8e74:	493a      	ldr	r1, [pc, #232]	; (8f60 <hci_acl_handle+0x108>)
    8e76:	483b      	ldr	r0, [pc, #236]	; (8f64 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    8e78:	f7f8 f888 	bl	f8c <printk>
		return -EINVAL;
    8e7c:	f06f 0015 	mvn.w	r0, #21
}
    8e80:	b003      	add	sp, #12
    8e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    8e86:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    8e8a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    8e8c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    8e8e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    8e90:	f009 fdea 	bl	12a68 <net_buf_simple_pull>
	if (buf->len < len) {
    8e94:	89b3      	ldrh	r3, [r6, #12]
    8e96:	42bb      	cmp	r3, r7
    8e98:	d207      	bcs.n	8eaa <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    8e9a:	4b2e      	ldr	r3, [pc, #184]	; (8f54 <hci_acl_handle+0xfc>)
    8e9c:	9301      	str	r3, [sp, #4]
    8e9e:	9300      	str	r3, [sp, #0]
    8ea0:	4a2d      	ldr	r2, [pc, #180]	; (8f58 <hci_acl_handle+0x100>)
    8ea2:	4b2e      	ldr	r3, [pc, #184]	; (8f5c <hci_acl_handle+0x104>)
    8ea4:	492e      	ldr	r1, [pc, #184]	; (8f60 <hci_acl_handle+0x108>)
    8ea6:	4830      	ldr	r0, [pc, #192]	; (8f68 <hci_acl_handle+0x110>)
    8ea8:	e7e6      	b.n	8e78 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    8eaa:	f007 fc57 	bl	1075c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    8eae:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    8eb2:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    8eb4:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    8eb8:	bb30      	cbnz	r0, 8f08 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    8eba:	4b26      	ldr	r3, [pc, #152]	; (8f54 <hci_acl_handle+0xfc>)
    8ebc:	9301      	str	r3, [sp, #4]
    8ebe:	9300      	str	r3, [sp, #0]
    8ec0:	4a25      	ldr	r2, [pc, #148]	; (8f58 <hci_acl_handle+0x100>)
    8ec2:	4b26      	ldr	r3, [pc, #152]	; (8f5c <hci_acl_handle+0x104>)
    8ec4:	4926      	ldr	r1, [pc, #152]	; (8f60 <hci_acl_handle+0x108>)
    8ec6:	4829      	ldr	r0, [pc, #164]	; (8f6c <hci_acl_handle+0x114>)
    8ec8:	f7f8 f860 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    8ecc:	4b28      	ldr	r3, [pc, #160]	; (8f70 <hci_acl_handle+0x118>)
    8ece:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ed2:	2300      	movs	r3, #0
    8ed4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    8ed8:	4313      	orrs	r3, r2
    8eda:	d012      	beq.n	8f02 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8ee0:	2001      	movs	r0, #1
    8ee2:	f7fa fde5 	bl	3ab0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8ee6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8ee8:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    8eec:	211a      	movs	r1, #26
    8eee:	f7ff f852 	bl	7f96 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    8ef2:	f8d8 0000 	ldr.w	r0, [r8]
    8ef6:	2101      	movs	r1, #1
    8ef8:	3008      	adds	r0, #8
    8efa:	f009 fd87 	bl	12a0c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    8efe:	2301      	movs	r3, #1
    8f00:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    8f02:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8f06:	e7bb      	b.n	8e80 <hci_acl_handle+0x28>
    8f08:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    8f0a:	f1b9 0f00 	cmp.w	r9, #0
    8f0e:	d002      	beq.n	8f16 <hci_acl_handle+0xbe>
    8f10:	f1b9 0f02 	cmp.w	r9, #2
    8f14:	d11c      	bne.n	8f50 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    8f16:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f18:	f362 0301 	bfi	r3, r2, #0, #2
    8f1c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    8f1e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    8f20:	68b1      	ldr	r1, [r6, #8]
    8f22:	463a      	mov	r2, r7
    8f24:	1de0      	adds	r0, r4, #7
    8f26:	f7f8 fe69 	bl	1bfc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    8f2a:	4621      	mov	r1, r4
    8f2c:	4628      	mov	r0, r5
    8f2e:	f007 fc21 	bl	10774 <ll_tx_mem_enqueue>
    8f32:	2800      	cmp	r0, #0
    8f34:	d0a4      	beq.n	8e80 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    8f36:	4b07      	ldr	r3, [pc, #28]	; (8f54 <hci_acl_handle+0xfc>)
    8f38:	9301      	str	r3, [sp, #4]
    8f3a:	9300      	str	r3, [sp, #0]
    8f3c:	4a06      	ldr	r2, [pc, #24]	; (8f58 <hci_acl_handle+0x100>)
    8f3e:	4b07      	ldr	r3, [pc, #28]	; (8f5c <hci_acl_handle+0x104>)
    8f40:	4907      	ldr	r1, [pc, #28]	; (8f60 <hci_acl_handle+0x108>)
    8f42:	480c      	ldr	r0, [pc, #48]	; (8f74 <hci_acl_handle+0x11c>)
    8f44:	f7f8 f822 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    8f48:	4620      	mov	r0, r4
    8f4a:	f007 fc0d 	bl	10768 <ll_tx_mem_release>
    8f4e:	e795      	b.n	8e7c <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f50:	2201      	movs	r2, #1
    8f52:	e7e1      	b.n	8f18 <hci_acl_handle+0xc0>
    8f54:	00014645 	.word	0x00014645
    8f58:	00015394 	.word	0x00015394
    8f5c:	0001615f 	.word	0x0001615f
    8f60:	000153e3 	.word	0x000153e3
    8f64:	000161fd 	.word	0x000161fd
    8f68:	0001621f 	.word	0x0001621f
    8f6c:	0001624d 	.word	0x0001624d
    8f70:	20003d30 	.word	0x20003d30
    8f74:	00016270 	.word	0x00016270

00008f78 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    8f78:	7a03      	ldrb	r3, [r0, #8]
    8f7a:	f003 0303 	and.w	r3, r3, #3
    8f7e:	3b01      	subs	r3, #1
    8f80:	2b01      	cmp	r3, #1
{
    8f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f84:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    8f86:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    8f88:	d81c      	bhi.n	8fc4 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    8f8a:	f101 0608 	add.w	r6, r1, #8
    8f8e:	4630      	mov	r0, r6
    8f90:	2104      	movs	r1, #4
    8f92:	f009 fd3b 	bl	12a0c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8f96:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    8f98:	7a61      	ldrb	r1, [r4, #9]
    8f9a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    8f9c:	f003 0303 	and.w	r3, r3, #3
    8fa0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8fa2:	bf0c      	ite	eq
    8fa4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8fa8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    8fac:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    8fae:	4630      	mov	r0, r6
    8fb0:	f009 fd2c 	bl	12a0c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8fb4:	7a62      	ldrb	r2, [r4, #9]
    8fb6:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    8fba:	b002      	add	sp, #8
    8fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8fc0:	f7f8 be1c 	b.w	1bfc <memcpy>
		LL_ASSERT(0);
    8fc4:	4b07      	ldr	r3, [pc, #28]	; (8fe4 <hci_acl_encode+0x6c>)
    8fc6:	9301      	str	r3, [sp, #4]
    8fc8:	9300      	str	r3, [sp, #0]
    8fca:	4a07      	ldr	r2, [pc, #28]	; (8fe8 <hci_acl_encode+0x70>)
    8fcc:	4b07      	ldr	r3, [pc, #28]	; (8fec <hci_acl_encode+0x74>)
    8fce:	4908      	ldr	r1, [pc, #32]	; (8ff0 <hci_acl_encode+0x78>)
    8fd0:	4808      	ldr	r0, [pc, #32]	; (8ff4 <hci_acl_encode+0x7c>)
    8fd2:	f7f7 ffdb 	bl	f8c <printk>
    8fd6:	4040      	eors	r0, r0
    8fd8:	f380 8811 	msr	BASEPRI, r0
    8fdc:	f04f 0004 	mov.w	r0, #4
    8fe0:	df02      	svc	2
    8fe2:	bf00      	nop
    8fe4:	00014645 	.word	0x00014645
    8fe8:	00015394 	.word	0x00015394
    8fec:	000161ee 	.word	0x000161ee
    8ff0:	000153e3 	.word	0x000153e3
    8ff4:	00015333 	.word	0x00015333

00008ff8 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    8ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8ffc:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    8ffe:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9000:	2b01      	cmp	r3, #1
{
    9002:	b093      	sub	sp, #76	; 0x4c
    9004:	4604      	mov	r4, r0
    9006:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9008:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    900c:	f000 82a6 	beq.w	955c <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    9010:	3b02      	subs	r3, #2
    9012:	2b0a      	cmp	r3, #10
    9014:	f200 829a 	bhi.w	954c <hci_evt_encode+0x554>
    9018:	e8df f013 	tbh	[pc, r3, lsl #1]
    901c:	0134000b 	.word	0x0134000b
    9020:	013c013a 	.word	0x013c013a
    9024:	01ba0183 	.word	0x01ba0183
    9028:	01fd01d8 	.word	0x01fd01d8
    902c:	022a0215 	.word	0x022a0215
    9030:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9032:	2301      	movs	r3, #1
    9034:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9038:	2303      	movs	r3, #3
    903a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    903e:	23ff      	movs	r3, #255	; 0xff
    9040:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9044:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9048:	2302      	movs	r3, #2
    904a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    904e:	7a43      	ldrb	r3, [r0, #9]
    9050:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9052:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9054:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9058:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    905a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    905e:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9060:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9062:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9066:	d505      	bpl.n	9074 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9068:	f104 030a 	add.w	r3, r4, #10
    906c:	464a      	mov	r2, r9
    906e:	4608      	mov	r0, r1
    9070:	f008 fd02 	bl	11a78 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9074:	4bb8      	ldr	r3, [pc, #736]	; (9358 <hci_evt_encode+0x360>)
    9076:	e9d3 2300 	ldrd	r2, r3, [r3]
    907a:	2200      	movs	r2, #0
    907c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9080:	4313      	orrs	r3, r2
    9082:	f000 80b9 	beq.w	91f8 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9086:	7a63      	ldrb	r3, [r4, #9]
    9088:	4423      	add	r3, r4
    908a:	f893 a00c 	ldrb.w	sl, [r3, #12]
    908e:	4bb3      	ldr	r3, [pc, #716]	; (935c <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    9090:	e9d3 2300 	ldrd	r2, r3, [r3]
    9094:	f1ba 0f00 	cmp.w	sl, #0
    9098:	d13d      	bne.n	9116 <hci_evt_encode+0x11e>
    909a:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    909e:	2300      	movs	r3, #0
    90a0:	4313      	orrs	r3, r2
    90a2:	f000 80a9 	beq.w	91f8 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    90a6:	4bae      	ldr	r3, [pc, #696]	; (9360 <hci_evt_encode+0x368>)
    90a8:	681a      	ldr	r2, [r3, #0]
    90aa:	2a00      	cmp	r2, #0
    90ac:	4698      	mov	r8, r3
    90ae:	db54      	blt.n	915a <hci_evt_encode+0x162>
    90b0:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 938c <hci_evt_encode+0x394>
    90b4:	2600      	movs	r6, #0
    90b6:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    90ba:	f8d8 2000 	ldr.w	r2, [r8]
    90be:	4296      	cmp	r6, r2
    90c0:	db2c      	blt.n	911c <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    90c2:	4ea8      	ldr	r6, [pc, #672]	; (9364 <hci_evt_encode+0x36c>)
    90c4:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 9368 <hci_evt_encode+0x370>
    90c8:	6830      	ldr	r0, [r6, #0]
    90ca:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    90ce:	4619      	mov	r1, r3
    90d0:	2206      	movs	r2, #6
    90d2:	3002      	adds	r0, #2
    90d4:	f7f8 fd92 	bl	1bfc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    90d8:	6832      	ldr	r2, [r6, #0]
    90da:	7a23      	ldrb	r3, [r4, #8]
    90dc:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    90e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    90e4:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    90e6:	7a23      	ldrb	r3, [r4, #8]
    90e8:	f003 010f 	and.w	r1, r3, #15
    90ec:	2301      	movs	r3, #1
    90ee:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90f0:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    90f4:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    90f8:	290f      	cmp	r1, #15
			dup_count++;
    90fa:	bfd5      	itete	le
    90fc:	3101      	addle	r1, #1
			dup_curr++;
    90fe:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9100:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    9102:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9104:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    9106:	bfd8      	it	le
    9108:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    910c:	2a10      	cmp	r2, #16
    910e:	d124      	bne.n	915a <hci_evt_encode+0x162>
			dup_curr = 0;
    9110:	2200      	movs	r2, #0
    9112:	6032      	str	r2, [r6, #0]
    9114:	e021      	b.n	915a <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9116:	f002 020b 	and.w	r2, r2, #11
    911a:	e7c0      	b.n	909e <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    911c:	4618      	mov	r0, r3
    911e:	2206      	movs	r2, #6
    9120:	4659      	mov	r1, fp
    9122:	9307      	str	r3, [sp, #28]
    9124:	f7f8 fd55 	bl	1bd2 <memcmp>
    9128:	9b07      	ldr	r3, [sp, #28]
    912a:	bb00      	cbnz	r0, 916e <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    912c:	7a21      	ldrb	r1, [r4, #8]
    912e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    9132:	460a      	mov	r2, r1
    9134:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9138:	4281      	cmp	r1, r0
    913a:	d118      	bne.n	916e <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    913c:	488a      	ldr	r0, [pc, #552]	; (9368 <hci_evt_encode+0x370>)
    913e:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    9142:	f002 020f 	and.w	r2, r2, #15
    9146:	fa23 f102 	lsr.w	r1, r3, r2
    914a:	07c9      	lsls	r1, r1, #31
    914c:	d454      	bmi.n	91f8 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    914e:	2101      	movs	r1, #1
    9150:	fa01 f202 	lsl.w	r2, r1, r2
    9154:	4313      	orrs	r3, r2
    9156:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    915a:	f894 b008 	ldrb.w	fp, [r4, #8]
    915e:	7a63      	ldrb	r3, [r4, #9]
    9160:	f00b 0b0f 	and.w	fp, fp, #15
    9164:	f1bb 0f01 	cmp.w	fp, #1
    9168:	d105      	bne.n	9176 <hci_evt_encode+0x17e>
		data_len = 0;
    916a:	2600      	movs	r6, #0
    916c:	e005      	b.n	917a <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    916e:	3601      	adds	r6, #1
    9170:	f10b 0b08 	add.w	fp, fp, #8
    9174:	e7a1      	b.n	90ba <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    9176:	1f9e      	subs	r6, r3, #6
    9178:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    917a:	4423      	add	r3, r4
    917c:	f893 800a 	ldrb.w	r8, [r3, #10]
    9180:	f1c8 0800 	rsb	r8, r8, #0
    9184:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9188:	f1ba 0f00 	cmp.w	sl, #0
    918c:	d041      	beq.n	9212 <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    918e:	f1bb 0f01 	cmp.w	fp, #1
    9192:	d00e      	beq.n	91b2 <hci_evt_encode+0x1ba>
    9194:	4b75      	ldr	r3, [pc, #468]	; (936c <hci_evt_encode+0x374>)
    9196:	9301      	str	r3, [sp, #4]
    9198:	9300      	str	r3, [sp, #0]
    919a:	4a75      	ldr	r2, [pc, #468]	; (9370 <hci_evt_encode+0x378>)
    919c:	4b75      	ldr	r3, [pc, #468]	; (9374 <hci_evt_encode+0x37c>)
    919e:	4976      	ldr	r1, [pc, #472]	; (9378 <hci_evt_encode+0x380>)
    91a0:	4876      	ldr	r0, [pc, #472]	; (937c <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    91a2:	f7f7 fef3 	bl	f8c <printk>
    91a6:	4040      	eors	r0, r0
    91a8:	f380 8811 	msr	BASEPRI, r0
    91ac:	f04f 0004 	mov.w	r0, #4
    91b0:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    91b2:	2211      	movs	r2, #17
    91b4:	210b      	movs	r1, #11
    91b6:	4628      	mov	r0, r5
    91b8:	f7fe ff12 	bl	7fe0 <meta_evt>
		drp->num_reports = 1;
    91bc:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    91c0:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    91c4:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    91c6:	f008 fb2d 	bl	11824 <ll_rl_size_get>
    91ca:	4581      	cmp	r9, r0
    91cc:	f105 0003 	add.w	r0, r5, #3
    91d0:	d215      	bcs.n	91fe <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    91d2:	4602      	mov	r2, r0
    91d4:	1ca9      	adds	r1, r5, #2
    91d6:	4648      	mov	r0, r9
    91d8:	f008 f9c2 	bl	11560 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    91dc:	78ab      	ldrb	r3, [r5, #2]
    91de:	3302      	adds	r3, #2
    91e0:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    91e2:	2301      	movs	r3, #1
    91e4:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    91e6:	2206      	movs	r2, #6
    91e8:	f107 0108 	add.w	r1, r7, #8
    91ec:	f105 000a 	add.w	r0, r5, #10
    91f0:	f7f8 fd04 	bl	1bfc <memcpy>
		dir_info->rssi = rssi;
    91f4:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    91f8:	b013      	add	sp, #76	; 0x4c
    91fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    91fe:	7a23      	ldrb	r3, [r4, #8]
    9200:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9204:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9206:	2206      	movs	r2, #6
    9208:	f104 010a 	add.w	r1, r4, #10
    920c:	f7f8 fcf6 	bl	1bfc <memcpy>
    9210:	e7e7      	b.n	91e2 <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9212:	f106 020b 	add.w	r2, r6, #11
    9216:	b2d2      	uxtb	r2, r2
    9218:	2102      	movs	r1, #2
    921a:	4628      	mov	r0, r5
    921c:	f7fe fee0 	bl	7fe0 <meta_evt>
	sep->num_reports = 1;
    9220:	2301      	movs	r3, #1
    9222:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9224:	7a23      	ldrb	r3, [r4, #8]
    9226:	aa12      	add	r2, sp, #72	; 0x48
    9228:	f003 030f 	and.w	r3, r3, #15
    922c:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    922e:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9230:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9234:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9236:	7a63      	ldrb	r3, [r4, #9]
    9238:	4423      	add	r3, r4
    923a:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    923e:	f008 faf1 	bl	11824 <ll_rl_size_get>
    9242:	4581      	cmp	r9, r0
    9244:	f105 0003 	add.w	r0, r5, #3
    9248:	d212      	bcs.n	9270 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    924a:	4602      	mov	r2, r0
    924c:	1ca9      	adds	r1, r5, #2
    924e:	4648      	mov	r0, r9
    9250:	f008 f986 	bl	11560 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9254:	78ab      	ldrb	r3, [r5, #2]
    9256:	3302      	adds	r3, #2
    9258:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    925a:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    925c:	350a      	adds	r5, #10
    925e:	4632      	mov	r2, r6
    9260:	f107 0108 	add.w	r1, r7, #8
    9264:	4628      	mov	r0, r5
    9266:	f7f8 fcc9 	bl	1bfc <memcpy>
	*prssi = rssi;
    926a:	f805 8006 	strb.w	r8, [r5, r6]
    926e:	e7c3      	b.n	91f8 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9270:	7a23      	ldrb	r3, [r4, #8]
    9272:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9276:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9278:	2206      	movs	r2, #6
    927a:	f104 010a 	add.w	r1, r4, #10
    927e:	f7f8 fcbd 	bl	1bfc <memcpy>
    9282:	e7ea      	b.n	925a <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9284:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9286:	4621      	mov	r1, r4
    9288:	4638      	mov	r0, r7
    928a:	f7ff f801 	bl	8290 <le_adv_ext_report.isra.66>
    928e:	e7b3      	b.n	91f8 <hci_evt_encode+0x200>
    9290:	2204      	movs	r2, #4
    9292:	e7f8      	b.n	9286 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9294:	4b30      	ldr	r3, [pc, #192]	; (9358 <hci_evt_encode+0x360>)
    9296:	e9d3 2300 	ldrd	r2, r3, [r3]
    929a:	2200      	movs	r2, #0
    929c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    92a0:	4313      	orrs	r3, r2
    92a2:	f100 060a 	add.w	r6, r0, #10
    92a6:	d007      	beq.n	92b8 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    92a8:	4b2c      	ldr	r3, [pc, #176]	; (935c <hci_evt_encode+0x364>)
    92aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    92ae:	2300      	movs	r3, #0
    92b0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    92b4:	4313      	orrs	r3, r2
    92b6:	d123      	bne.n	9300 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    92b8:	7a23      	ldrb	r3, [r4, #8]
    92ba:	ad12      	add	r5, sp, #72	; 0x48
    92bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    92c0:	2206      	movs	r2, #6
    92c2:	4631      	mov	r1, r6
    92c4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    92c8:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    92cc:	f7f8 fc96 	bl	1bfc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    92d0:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92d2:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92d4:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92d6:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92d8:	4631      	mov	r1, r6
    92da:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92dc:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    92de:	f7fe ff9b 	bl	8218 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    92e2:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    92e4:	4b21      	ldr	r3, [pc, #132]	; (936c <hci_evt_encode+0x374>)
    92e6:	9304      	str	r3, [sp, #16]
    92e8:	2200      	movs	r2, #0
    92ea:	9201      	str	r2, [sp, #4]
    92ec:	9300      	str	r3, [sp, #0]
    92ee:	9403      	str	r4, [sp, #12]
    92f0:	9602      	str	r6, [sp, #8]
    92f2:	4b23      	ldr	r3, [pc, #140]	; (9380 <hci_evt_encode+0x388>)
    92f4:	4a23      	ldr	r2, [pc, #140]	; (9384 <hci_evt_encode+0x38c>)
    92f6:	4920      	ldr	r1, [pc, #128]	; (9378 <hci_evt_encode+0x380>)
    92f8:	4823      	ldr	r0, [pc, #140]	; (9388 <hci_evt_encode+0x390>)
    92fa:	f7f7 fe47 	bl	f8c <printk>
    92fe:	e77b      	b.n	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9300:	2208      	movs	r2, #8
    9302:	2113      	movs	r1, #19
    9304:	4628      	mov	r0, r5
    9306:	f7fe fe6b 	bl	7fe0 <meta_evt>
	sep->handle = 0;
    930a:	2300      	movs	r3, #0
    930c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    930e:	7a23      	ldrb	r3, [r4, #8]
    9310:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9314:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9316:	2206      	movs	r2, #6
    9318:	4631      	mov	r1, r6
    931a:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    931c:	f7f8 fc6e 	bl	1bfc <memcpy>
    9320:	e76a      	b.n	91f8 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    9322:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9324:	b93f      	cbnz	r7, 9336 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9326:	f100 0314 	add.w	r3, r0, #20
    932a:	f100 010e 	add.w	r1, r0, #14
    932e:	22ff      	movs	r2, #255	; 0xff
    9330:	7b40      	ldrb	r0, [r0, #13]
    9332:	f008 fba1 	bl	11a78 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9336:	4b08      	ldr	r3, [pc, #32]	; (9358 <hci_evt_encode+0x360>)
    9338:	e9d3 2300 	ldrd	r2, r3, [r3]
    933c:	2200      	movs	r2, #0
    933e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9342:	4313      	orrs	r3, r2
    9344:	f43f af58 	beq.w	91f8 <hci_evt_encode+0x200>
    9348:	462b      	mov	r3, r5
    934a:	4632      	mov	r2, r6
    934c:	f104 010b 	add.w	r1, r4, #11
    9350:	4638      	mov	r0, r7
    9352:	f7fe fecb 	bl	80ec <le_conn_complete.part.39>
    9356:	e74f      	b.n	91f8 <hci_evt_encode+0x200>
    9358:	20003d30 	.word	0x20003d30
    935c:	20003d38 	.word	0x20003d38
    9360:	20000838 	.word	0x20000838
    9364:	2000083c 	.word	0x2000083c
    9368:	20000840 	.word	0x20000840
    936c:	00014645 	.word	0x00014645
    9370:	00015394 	.word	0x00015394
    9374:	0001616e 	.word	0x0001616e
    9378:	000153e3 	.word	0x000153e3
    937c:	0001630f 	.word	0x0001630f
    9380:	00016196 	.word	0x00016196
    9384:	000153dc 	.word	0x000153dc
    9388:	00016355 	.word	0x00016355
    938c:	20000842 	.word	0x20000842
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9390:	4bb2      	ldr	r3, [pc, #712]	; (965c <hci_evt_encode+0x664>)
    9392:	e9d3 2300 	ldrd	r2, r3, [r3]
    9396:	2300      	movs	r3, #0
    9398:	f002 0210 	and.w	r2, r2, #16
    939c:	4313      	orrs	r3, r2
    939e:	f43f af2b 	beq.w	91f8 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    93a2:	2204      	movs	r2, #4
    93a4:	2105      	movs	r1, #5
    93a6:	4628      	mov	r0, r5
    93a8:	f7fe fdf5 	bl	7f96 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    93ac:	2104      	movs	r1, #4
    93ae:	f105 0008 	add.w	r0, r5, #8
    93b2:	f009 fb2b 	bl	12a0c <net_buf_simple_add>
	ep->status = 0x00;
    93b6:	2300      	movs	r3, #0
	conn_count--;
    93b8:	4aa9      	ldr	r2, [pc, #676]	; (9660 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    93ba:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    93bc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    93c0:	7a23      	ldrb	r3, [r4, #8]
    93c2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    93c4:	6813      	ldr	r3, [r2, #0]
    93c6:	3b01      	subs	r3, #1
    93c8:	6013      	str	r3, [r2, #0]
    93ca:	e715      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93cc:	4ba3      	ldr	r3, [pc, #652]	; (965c <hci_evt_encode+0x664>)
    93ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    93d2:	2200      	movs	r2, #0
    93d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    93d8:	4313      	orrs	r3, r2
    93da:	f43f af0d 	beq.w	91f8 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    93de:	4ba1      	ldr	r3, [pc, #644]	; (9664 <hci_evt_encode+0x66c>)
    93e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    93e4:	2300      	movs	r3, #0
    93e6:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93ea:	4313      	orrs	r3, r2
    93ec:	f43f af04 	beq.w	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    93f0:	2209      	movs	r2, #9
    93f2:	2103      	movs	r1, #3
    93f4:	4628      	mov	r0, r5
    93f6:	f7fe fdf3 	bl	7fe0 <meta_evt>
	sep->status = radio_cu->status;
    93fa:	7ae3      	ldrb	r3, [r4, #11]
    93fc:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    93fe:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9400:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9404:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9408:	89e3      	ldrh	r3, [r4, #14]
    940a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    940e:	8a23      	ldrh	r3, [r4, #16]
    9410:	f8a0 3007 	strh.w	r3, [r0, #7]
    9414:	e6f0      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9416:	4b91      	ldr	r3, [pc, #580]	; (965c <hci_evt_encode+0x664>)
    9418:	e9d3 2300 	ldrd	r2, r3, [r3]
    941c:	2200      	movs	r2, #0
    941e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9422:	4313      	orrs	r3, r2
    9424:	f43f aee8 	beq.w	91f8 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9428:	2203      	movs	r2, #3
    942a:	2130      	movs	r1, #48	; 0x30
    942c:	4628      	mov	r0, r5
    942e:	f7fe fdb2 	bl	7f96 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9432:	2103      	movs	r1, #3
    9434:	f105 0008 	add.w	r0, r5, #8
    9438:	f009 fae8 	bl	12a0c <net_buf_simple_add>
	ep->status = 0x00;
    943c:	2300      	movs	r3, #0
    943e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9440:	f8a0 6001 	strh.w	r6, [r0, #1]
    9444:	e6d8      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    9446:	4b88      	ldr	r3, [pc, #544]	; (9668 <hci_evt_encode+0x670>)
    9448:	e9d3 2300 	ldrd	r2, r3, [r3]
    944c:	2300      	movs	r3, #0
    944e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9452:	4313      	orrs	r3, r2
    9454:	f43f aed0 	beq.w	91f8 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9458:	2202      	movs	r2, #2
    945a:	2157      	movs	r1, #87	; 0x57
    945c:	4628      	mov	r0, r5
    945e:	f7fe fd9a 	bl	7f96 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9462:	2102      	movs	r1, #2
    9464:	f105 0008 	add.w	r0, r5, #8
    9468:	f009 fad0 	bl	12a0c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    946c:	8006      	strh	r6, [r0, #0]
    946e:	e6c3      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9470:	4b7a      	ldr	r3, [pc, #488]	; (965c <hci_evt_encode+0x664>)
    9472:	e9d3 2300 	ldrd	r2, r3, [r3]
    9476:	2200      	movs	r2, #0
    9478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    947c:	4313      	orrs	r3, r2
    947e:	f43f aebb 	beq.w	91f8 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9482:	4b78      	ldr	r3, [pc, #480]	; (9664 <hci_evt_encode+0x66c>)
    9484:	e9d3 2300 	ldrd	r2, r3, [r3]
    9488:	2300      	movs	r3, #0
    948a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    948e:	4313      	orrs	r3, r2
    9490:	f43f aeb2 	beq.w	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9494:	2203      	movs	r2, #3
    9496:	2114      	movs	r1, #20
    9498:	4628      	mov	r0, r5
    949a:	f7fe fda1 	bl	7fe0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    949e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    94a0:	7ae3      	ldrb	r3, [r4, #11]
    94a2:	7083      	strb	r3, [r0, #2]
    94a4:	e6a8      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94a6:	4b6d      	ldr	r3, [pc, #436]	; (965c <hci_evt_encode+0x664>)
    94a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    94ac:	2200      	movs	r2, #0
    94ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    94b2:	4313      	orrs	r3, r2
    94b4:	d007      	beq.n	94c6 <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    94b6:	4b6b      	ldr	r3, [pc, #428]	; (9664 <hci_evt_encode+0x66c>)
    94b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    94bc:	2300      	movs	r3, #0
    94be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94c2:	4313      	orrs	r3, r2
    94c4:	d122      	bne.n	950c <hci_evt_encode+0x514>
    94c6:	7b22      	ldrb	r2, [r4, #12]
    94c8:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    94ca:	4868      	ldr	r0, [pc, #416]	; (966c <hci_evt_encode+0x674>)
    94cc:	2a00      	cmp	r2, #0
    94ce:	fa92 f3a2 	rbit	r3, r2
    94d2:	fab3 f383 	clz	r3, r3
    94d6:	fa91 f2a1 	rbit	r2, r1
    94da:	bf08      	it	eq
    94dc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    94e0:	2900      	cmp	r1, #0
    94e2:	fab2 f282 	clz	r2, r2
    94e6:	bf08      	it	eq
    94e8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    94ec:	4960      	ldr	r1, [pc, #384]	; (9670 <hci_evt_encode+0x678>)
    94ee:	9105      	str	r1, [sp, #20]
    94f0:	3301      	adds	r3, #1
    94f2:	3201      	adds	r2, #1
    94f4:	9204      	str	r2, [sp, #16]
    94f6:	9303      	str	r3, [sp, #12]
    94f8:	7ae3      	ldrb	r3, [r4, #11]
    94fa:	9302      	str	r3, [sp, #8]
    94fc:	e88d 0042 	stmia.w	sp, {r1, r6}
    9500:	4b5c      	ldr	r3, [pc, #368]	; (9674 <hci_evt_encode+0x67c>)
    9502:	4a5d      	ldr	r2, [pc, #372]	; (9678 <hci_evt_encode+0x680>)
    9504:	495d      	ldr	r1, [pc, #372]	; (967c <hci_evt_encode+0x684>)
    9506:	f7f7 fd41 	bl	f8c <printk>
    950a:	e675      	b.n	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    950c:	2205      	movs	r2, #5
    950e:	210c      	movs	r1, #12
    9510:	4628      	mov	r0, r5
    9512:	f7fe fd65 	bl	7fe0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9516:	7ae3      	ldrb	r3, [r4, #11]
    9518:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    951a:	f8a0 6001 	strh.w	r6, [r0, #1]
    951e:	7b22      	ldrb	r2, [r4, #12]
    9520:	2a00      	cmp	r2, #0
    9522:	fa92 f3a2 	rbit	r3, r2
    9526:	fab3 f383 	clz	r3, r3
    952a:	bf08      	it	eq
    952c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9530:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9532:	70c3      	strb	r3, [r0, #3]
    9534:	7b62      	ldrb	r2, [r4, #13]
    9536:	fa92 f3a2 	rbit	r3, r2
    953a:	2a00      	cmp	r2, #0
    953c:	fab3 f383 	clz	r3, r3
    9540:	bf08      	it	eq
    9542:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9546:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9548:	7103      	strb	r3, [r0, #4]
    954a:	e655      	b.n	91f8 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    954c:	4b48      	ldr	r3, [pc, #288]	; (9670 <hci_evt_encode+0x678>)
    954e:	9301      	str	r3, [sp, #4]
    9550:	9300      	str	r3, [sp, #0]
    9552:	4b4b      	ldr	r3, [pc, #300]	; (9680 <hci_evt_encode+0x688>)
    9554:	4a4b      	ldr	r2, [pc, #300]	; (9684 <hci_evt_encode+0x68c>)
    9556:	4949      	ldr	r1, [pc, #292]	; (967c <hci_evt_encode+0x684>)
    9558:	484b      	ldr	r0, [pc, #300]	; (9688 <hci_evt_encode+0x690>)
    955a:	e622      	b.n	91a2 <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    955c:	7ac3      	ldrb	r3, [r0, #11]
    955e:	3b03      	subs	r3, #3
    9560:	2b12      	cmp	r3, #18
    9562:	f200 80d5 	bhi.w	9710 <hci_evt_encode+0x718>
    9566:	e8df f003 	tbb	[pc, r3]
    956a:	d30a      	.short	0xd30a
    956c:	d3c02fd3 	.word	0xd3c02fd3
    9570:	3cd3d335 	.word	0x3cd3d335
    9574:	d35fd35b 	.word	0xd35fd35b
    9578:	a0d3d3d3 	.word	0xa0d3d3d3
    957c:	a0          	.byte	0xa0
    957d:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    957e:	4b37      	ldr	r3, [pc, #220]	; (965c <hci_evt_encode+0x664>)
    9580:	e9d3 2300 	ldrd	r2, r3, [r3]
    9584:	2200      	movs	r2, #0
    9586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    958a:	4313      	orrs	r3, r2
    958c:	f43f ae34 	beq.w	91f8 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9590:	4b34      	ldr	r3, [pc, #208]	; (9664 <hci_evt_encode+0x66c>)
    9592:	e9d3 2300 	ldrd	r2, r3, [r3]
    9596:	2300      	movs	r3, #0
    9598:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    959c:	4313      	orrs	r3, r2
    959e:	f43f ae2b 	beq.w	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    95a2:	220c      	movs	r2, #12
    95a4:	2105      	movs	r1, #5
    95a6:	4628      	mov	r0, r5
    95a8:	f7fe fd1a 	bl	7fe0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    95ac:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    95ae:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    95b0:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    95b4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    95b8:	f7f8 fb20 	bl	1bfc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    95bc:	2202      	movs	r2, #2
    95be:	f104 0114 	add.w	r1, r4, #20
    95c2:	f105 000a 	add.w	r0, r5, #10
    95c6:	e6a9      	b.n	931c <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    95c8:	460a      	mov	r2, r1
    95ca:	2000      	movs	r0, #0
    95cc:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    95ce:	f7fe fd3f 	bl	8050 <encrypt_change>
    95d2:	e611      	b.n	91f8 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    95d4:	460b      	mov	r3, r1
    95d6:	4632      	mov	r2, r6
    95d8:	4639      	mov	r1, r7
    95da:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    95dc:	f7fe fd58 	bl	8090 <le_remote_feat_complete>
    95e0:	e60a      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    95e2:	4b1e      	ldr	r3, [pc, #120]	; (965c <hci_evt_encode+0x664>)
    95e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    95e8:	2300      	movs	r3, #0
    95ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    95ee:	4313      	orrs	r3, r2
    95f0:	f43f ae02 	beq.w	91f8 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    95f4:	2208      	movs	r2, #8
    95f6:	210c      	movs	r1, #12
    95f8:	4628      	mov	r0, r5
    95fa:	f7fe fccc 	bl	7f96 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    95fe:	2108      	movs	r1, #8
    9600:	1868      	adds	r0, r5, r1
    9602:	f009 fa03 	bl	12a0c <net_buf_simple_add>
	ep->status = 0x00;
    9606:	2300      	movs	r3, #0
    9608:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    960a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    960e:	7b23      	ldrb	r3, [r4, #12]
    9610:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9612:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9616:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9618:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    961c:	80c3      	strh	r3, [r0, #6]
    961e:	e5eb      	b.n	91f8 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9620:	460a      	mov	r2, r1
    9622:	7b00      	ldrb	r0, [r0, #12]
    9624:	4631      	mov	r1, r6
    9626:	e7d2      	b.n	95ce <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9628:	4b0c      	ldr	r3, [pc, #48]	; (965c <hci_evt_encode+0x664>)
    962a:	e9d3 2300 	ldrd	r2, r3, [r3]
    962e:	2200      	movs	r2, #0
    9630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9634:	4313      	orrs	r3, r2
    9636:	d007      	beq.n	9648 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9638:	4b0a      	ldr	r3, [pc, #40]	; (9664 <hci_evt_encode+0x66c>)
    963a:	e9d3 2300 	ldrd	r2, r3, [r3]
    963e:	2300      	movs	r3, #0
    9640:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9644:	4313      	orrs	r3, r2
    9646:	d121      	bne.n	968c <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9648:	2300      	movs	r3, #0
    964a:	9301      	str	r3, [sp, #4]
    964c:	9300      	str	r3, [sp, #0]
    964e:	221a      	movs	r2, #26
    9650:	2102      	movs	r1, #2
    9652:	4630      	mov	r0, r6
    9654:	f006 fdda 	bl	1020c <ll_conn_update>
    9658:	e5ce      	b.n	91f8 <hci_evt_encode+0x200>
    965a:	bf00      	nop
    965c:	20003d30 	.word	0x20003d30
    9660:	20000834 	.word	0x20000834
    9664:	20003d38 	.word	0x20003d38
    9668:	200008c0 	.word	0x200008c0
    966c:	00016388 	.word	0x00016388
    9670:	00014645 	.word	0x00014645
    9674:	000161ab 	.word	0x000161ab
    9678:	000153dc 	.word	0x000153dc
    967c:	000153e3 	.word	0x000153e3
    9680:	000161bf 	.word	0x000161bf
    9684:	00015394 	.word	0x00015394
    9688:	00015333 	.word	0x00015333
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    968c:	220a      	movs	r2, #10
    968e:	2106      	movs	r1, #6
    9690:	4628      	mov	r0, r5
    9692:	f7fe fca5 	bl	7fe0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9696:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9698:	89a3      	ldrh	r3, [r4, #12]
    969a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    969c:	89e3      	ldrh	r3, [r4, #14]
    969e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    96a0:	8a23      	ldrh	r3, [r4, #16]
    96a2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    96a4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    96a6:	8103      	strh	r3, [r0, #8]
    96a8:	e5a6      	b.n	91f8 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96aa:	4b1c      	ldr	r3, [pc, #112]	; (971c <hci_evt_encode+0x724>)
    96ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    96b0:	2200      	movs	r2, #0
    96b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    96b6:	4313      	orrs	r3, r2
    96b8:	f43f ad9e 	beq.w	91f8 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    96bc:	4b18      	ldr	r3, [pc, #96]	; (9720 <hci_evt_encode+0x728>)
    96be:	e9d3 2300 	ldrd	r2, r3, [r3]
    96c2:	2300      	movs	r3, #0
    96c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96c8:	4313      	orrs	r3, r2
    96ca:	f43f ad95 	beq.w	91f8 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    96ce:	220a      	movs	r2, #10
    96d0:	2107      	movs	r1, #7
    96d2:	4628      	mov	r0, r5
    96d4:	f7fe fc84 	bl	7fe0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    96d8:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    96da:	8a23      	ldrh	r3, [r4, #16]
    96dc:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    96de:	8a63      	ldrh	r3, [r4, #18]
    96e0:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    96e2:	89a3      	ldrh	r3, [r4, #12]
    96e4:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    96e6:	89e3      	ldrh	r3, [r4, #14]
    96e8:	e7dd      	b.n	96a6 <hci_evt_encode+0x6ae>
    96ea:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    96ec:	2a0e      	cmp	r2, #14
    96ee:	d104      	bne.n	96fa <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    96f0:	460b      	mov	r3, r1
    96f2:	4632      	mov	r2, r6
    96f4:	2100      	movs	r1, #0
    96f6:	201a      	movs	r0, #26
    96f8:	e770      	b.n	95dc <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    96fa:	4b0a      	ldr	r3, [pc, #40]	; (9724 <hci_evt_encode+0x72c>)
    96fc:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    96fe:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9700:	9300      	str	r3, [sp, #0]
    9702:	4a09      	ldr	r2, [pc, #36]	; (9728 <hci_evt_encode+0x730>)
    9704:	4b09      	ldr	r3, [pc, #36]	; (972c <hci_evt_encode+0x734>)
    9706:	490a      	ldr	r1, [pc, #40]	; (9730 <hci_evt_encode+0x738>)
    9708:	480a      	ldr	r0, [pc, #40]	; (9734 <hci_evt_encode+0x73c>)
    970a:	f7f7 fc3f 	bl	f8c <printk>
    970e:	e573      	b.n	91f8 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9710:	4b04      	ldr	r3, [pc, #16]	; (9724 <hci_evt_encode+0x72c>)
    9712:	9301      	str	r3, [sp, #4]
    9714:	9300      	str	r3, [sp, #0]
    9716:	4b08      	ldr	r3, [pc, #32]	; (9738 <hci_evt_encode+0x740>)
    9718:	e71c      	b.n	9554 <hci_evt_encode+0x55c>
    971a:	bf00      	nop
    971c:	20003d30 	.word	0x20003d30
    9720:	20003d38 	.word	0x20003d38
    9724:	00014645 	.word	0x00014645
    9728:	000153dc 	.word	0x000153dc
    972c:	000161ce 	.word	0x000161ce
    9730:	000153e3 	.word	0x000153e3
    9734:	000163c4 	.word	0x000163c4
    9738:	000161dd 	.word	0x000161dd

0000973c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    973c:	b570      	push	{r4, r5, r6, lr}
    973e:	4606      	mov	r6, r0
    9740:	460d      	mov	r5, r1
    9742:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9744:	2113      	movs	r1, #19
    9746:	2205      	movs	r2, #5
    9748:	f7fe fc25 	bl	7f96 <evt_create>

	ep = net_buf_add(buf, len);
    974c:	2105      	movs	r1, #5
    974e:	f106 0008 	add.w	r0, r6, #8
    9752:	f009 f95b 	bl	12a0c <net_buf_simple_add>
	ep->num_handles = num_handles;
    9756:	2301      	movs	r3, #1
    9758:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    975a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    975e:	f8a0 4003 	strh.w	r4, [r0, #3]
    9762:	bd70      	pop	{r4, r5, r6, pc}

00009764 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9764:	7903      	ldrb	r3, [r0, #4]
    9766:	2b01      	cmp	r3, #1
    9768:	d006      	beq.n	9778 <hci_get_class+0x14>
    976a:	3b02      	subs	r3, #2
    976c:	b2db      	uxtb	r3, r3
    976e:	2b0a      	cmp	r3, #10
    9770:	d80a      	bhi.n	9788 <hci_get_class+0x24>
    9772:	4a07      	ldr	r2, [pc, #28]	; (9790 <hci_get_class+0x2c>)
    9774:	56d0      	ldrsb	r0, [r2, r3]
    9776:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9778:	7a03      	ldrb	r3, [r0, #8]
    977a:	f003 0303 	and.w	r3, r3, #3
    977e:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9780:	bf0c      	ite	eq
    9782:	2002      	moveq	r0, #2
    9784:	2003      	movne	r0, #3
    9786:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    978c:	4770      	bx	lr
    978e:	bf00      	nop
    9790:	00016145 	.word	0x00016145

00009794 <hci_init>:
	dup_count = -1;
    9794:	4b0a      	ldr	r3, [pc, #40]	; (97c0 <hci_init+0x2c>)
    9796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    979a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    979c:	4b09      	ldr	r3, [pc, #36]	; (97c4 <hci_init+0x30>)
    979e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97a2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    97a6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    97aa:	4b07      	ldr	r3, [pc, #28]	; (97c8 <hci_init+0x34>)
    97ac:	2000      	movs	r0, #0
    97ae:	2100      	movs	r1, #0
    97b0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    97b4:	4b05      	ldr	r3, [pc, #20]	; (97cc <hci_init+0x38>)
    97b6:	201f      	movs	r0, #31
    97b8:	2100      	movs	r1, #0
    97ba:	e9c3 0100 	strd	r0, r1, [r3]
    97be:	4770      	bx	lr
    97c0:	20000838 	.word	0x20000838
    97c4:	20003d30 	.word	0x20003d30
    97c8:	200008c0 	.word	0x200008c0
    97cc:	20003d38 	.word	0x20003d38

000097d0 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    97d0:	bf20      	wfe
	__SEV();
    97d2:	bf40      	sev
	__WFE();
    97d4:	bf20      	wfe
    97d6:	4770      	bx	lr

000097d8 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    97d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    97da:	4b0d      	ldr	r3, [pc, #52]	; (9810 <pdu_len_cmp+0x38>)
{
    97dc:	b089      	sub	sp, #36	; 0x24
    97de:	4605      	mov	r5, r0
    97e0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    97e2:	aa01      	add	r2, sp, #4
    97e4:	f103 0718 	add.w	r7, r3, #24
    97e8:	6818      	ldr	r0, [r3, #0]
    97ea:	6859      	ldr	r1, [r3, #4]
    97ec:	4614      	mov	r4, r2
    97ee:	c403      	stmia	r4!, {r0, r1}
    97f0:	3308      	adds	r3, #8
    97f2:	42bb      	cmp	r3, r7
    97f4:	4622      	mov	r2, r4
    97f6:	d1f7      	bne.n	97e8 <pdu_len_cmp+0x10>
    97f8:	881b      	ldrh	r3, [r3, #0]
    97fa:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    97fc:	ab08      	add	r3, sp, #32
    97fe:	441d      	add	r5, r3
    9800:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9804:	1b83      	subs	r3, r0, r6
    9806:	4258      	negs	r0, r3
    9808:	4158      	adcs	r0, r3
    980a:	b009      	add	sp, #36	; 0x24
    980c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    980e:	bf00      	nop
    9810:	00014597 	.word	0x00014597

00009814 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9814:	6008      	str	r0, [r1, #0]
    9816:	4770      	bx	lr

00009818 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9818:	b918      	cbnz	r0, 9822 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    981a:	680b      	ldr	r3, [r1, #0]
    981c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9820:	600b      	str	r3, [r1, #0]
    9822:	4770      	bx	lr

00009824 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9824:	b918      	cbnz	r0, 982e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9826:	680b      	ldr	r3, [r1, #0]
    9828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    982c:	600b      	str	r3, [r1, #0]
    982e:	4770      	bx	lr

00009830 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9830:	b570      	push	{r4, r5, r6, lr}
    9832:	1d03      	adds	r3, r0, #4
    9834:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9836:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9838:	429d      	cmp	r5, r3
    983a:	d101      	bne.n	9840 <chan_sel_remap+0x10>
    983c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    983e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9840:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9844:	2200      	movs	r2, #0
    9846:	18a0      	adds	r0, r4, r2
    9848:	2a08      	cmp	r2, #8
    984a:	b2c0      	uxtb	r0, r0
    984c:	d101      	bne.n	9852 <chan_sel_remap+0x22>
    984e:	4604      	mov	r4, r0
    9850:	e7f2      	b.n	9838 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9852:	f016 0f01 	tst.w	r6, #1
    9856:	d003      	beq.n	9860 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9858:	2900      	cmp	r1, #0
    985a:	d0f0      	beq.n	983e <chan_sel_remap+0xe>
				chan_index--;
    985c:	3901      	subs	r1, #1
    985e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9860:	0876      	lsrs	r6, r6, #1
    9862:	3201      	adds	r2, #1
    9864:	e7ef      	b.n	9846 <chan_sel_remap+0x16>
	...

00009868 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9868:	4b09      	ldr	r3, [pc, #36]	; (9890 <packet_rx_acquired_count_get+0x28>)
    986a:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    986e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9872:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9874:	bf3b      	ittet	cc
    9876:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    987a:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    987e:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9882:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9884:	bf2c      	ite	cs
    9886:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9888:	1a80      	subcc	r0, r0, r2
    988a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    988c:	4770      	bx	lr
    988e:	bf00      	nop
    9890:	200008c8 	.word	0x200008c8

00009894 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9894:	b508      	push	{r3, lr}
    9896:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9898:	f7ff ffe6 	bl	9868 <packet_rx_acquired_count_get>
    989c:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    989e:	bf21      	itttt	cs
    98a0:	4b04      	ldrcs	r3, [pc, #16]	; (98b4 <packet_rx_reserve_get+0x20>)
    98a2:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    98a6:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    98aa:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    98ae:	bf38      	it	cc
    98b0:	2000      	movcc	r0, #0
}
    98b2:	bd08      	pop	{r3, pc}
    98b4:	200008c8 	.word	0x200008c8

000098b8 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    98b8:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    98ba:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    98be:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    98c2:	429c      	cmp	r4, r3
    98c4:	d15a      	bne.n	997c <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    98c6:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    98ca:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    98ce:	428b      	cmp	r3, r1
    98d0:	d154      	bne.n	997c <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    98d2:	f990 301d 	ldrsb.w	r3, [r0, #29]
    98d6:	2b00      	cmp	r3, #0
    98d8:	db25      	blt.n	9926 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    98da:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    98dc:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    98de:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    98e2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    98e4:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    98e8:	4351      	muls	r1, r2
					      conn->supervision_reload *
    98ea:	227d      	movs	r2, #125	; 0x7d
    98ec:	434a      	muls	r2, r1
					      125 / 1000;
    98ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    98f2:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    98f6:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    98fa:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    98fe:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9900:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9904:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9906:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9908:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    990c:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    990e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9912:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9916:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    991a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    991e:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9922:	4618      	mov	r0, r3
    9924:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9926:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    992a:	06dc      	lsls	r4, r3, #27
    992c:	d428      	bmi.n	9980 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    992e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9932:	069a      	lsls	r2, r3, #26
    9934:	d503      	bpl.n	993e <conn_update_req+0x86>
		    (conn->llcp_features &
    9936:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    993a:	079b      	lsls	r3, r3, #30
    993c:	d520      	bpl.n	9980 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    993e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9940:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9942:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9946:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9948:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    994c:	4354      	muls	r4, r2
						conn->supervision_reload *
    994e:	227d      	movs	r2, #125	; 0x7d
    9950:	4362      	muls	r2, r4
						125 / 1000;
    9952:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9956:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    995a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    995e:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9962:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9964:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9968:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    996c:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    996e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9972:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9976:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    997a:	e7d2      	b.n	9922 <conn_update_req+0x6a>
		return 1;
    997c:	2001      	movs	r0, #1
    997e:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9980:	2002      	movs	r0, #2
}
    9982:	bd30      	pop	{r4, r5, pc}

00009984 <packet_rx_allocate>:
{
    9984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9988:	4d22      	ldr	r5, [pc, #136]	; (9a14 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    998a:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    998e:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9992:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9996:	3401      	adds	r4, #1
    9998:	4581      	cmp	r9, r0
    999a:	b2e4      	uxtb	r4, r4
    999c:	bf28      	it	cs
    999e:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    99a0:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    99a4:	42a3      	cmp	r3, r4
    99a6:	bf08      	it	eq
    99a8:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    99aa:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    99ae:	f1b9 0f00 	cmp.w	r9, #0
    99b2:	d003      	beq.n	99bc <packet_rx_allocate+0x38>
    99b4:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    99b8:	429c      	cmp	r4, r3
    99ba:	d101      	bne.n	99c0 <packet_rx_allocate+0x3c>
    99bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    99c0:	4638      	mov	r0, r7
    99c2:	f7fd f952 	bl	6c6a <mem_acquire>
		if (!link) {
    99c6:	4606      	mov	r6, r0
    99c8:	2800      	cmp	r0, #0
    99ca:	d0f7      	beq.n	99bc <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    99cc:	4640      	mov	r0, r8
    99ce:	f7fd f94c 	bl	6c6a <mem_acquire>
		if (!node_rx) {
    99d2:	b928      	cbnz	r0, 99e0 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    99d4:	4630      	mov	r0, r6
    99d6:	4910      	ldr	r1, [pc, #64]	; (9a18 <packet_rx_allocate+0x94>)
}
    99d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    99dc:	f7fd b95f 	b.w	6c9e <mem_release>
		node_rx->hdr.onion.link = link;
    99e0:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    99e2:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    99e6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    99ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    99ee:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    99f2:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    99f6:	3401      	adds	r4, #1
    99f8:	b2e4      	uxtb	r4, r4
			acquire = 0;
    99fa:	42a3      	cmp	r3, r4
    99fc:	bf08      	it	eq
    99fe:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9a00:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9a04:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9a08:	3b01      	subs	r3, #1
    9a0a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9a0e:	fa5f f989 	uxtb.w	r9, r9
    9a12:	e7cc      	b.n	99ae <packet_rx_allocate+0x2a>
    9a14:	200008c8 	.word	0x200008c8
    9a18:	20000a10 	.word	0x20000a10

00009a1c <common_init>:
{
    9a1c:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9a1e:	4c39      	ldr	r4, [pc, #228]	; (9b04 <common_init+0xe8>)
    9a20:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9a24:	2a00      	cmp	r2, #0
    9a26:	d040      	beq.n	9aaa <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9a28:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9a2c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9a30:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9a34:	f7fd f8f2 	bl	6c1c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9a38:	4b33      	ldr	r3, [pc, #204]	; (9b08 <common_init+0xec>)
    9a3a:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9a3e:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9a42:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9a46:	f7fd f8e9 	bl	6c1c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9a4a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9a4e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9a52:	4b2e      	ldr	r3, [pc, #184]	; (9b0c <common_init+0xf0>)
    9a54:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9a58:	440a      	add	r2, r1
    9a5a:	2108      	movs	r1, #8
    9a5c:	f7fd f8de 	bl	6c1c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9a60:	4b2b      	ldr	r3, [pc, #172]	; (9b10 <common_init+0xf4>)
    9a62:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9a66:	2202      	movs	r2, #2
    9a68:	2124      	movs	r1, #36	; 0x24
    9a6a:	f7fd f8d7 	bl	6c1c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9a6e:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9a72:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9a76:	4b27      	ldr	r3, [pc, #156]	; (9b14 <common_init+0xf8>)
    9a78:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9a7c:	3a01      	subs	r2, #1
    9a7e:	b292      	uxth	r2, r2
    9a80:	f7fd f8cc 	bl	6c1c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9a84:	4821      	ldr	r0, [pc, #132]	; (9b0c <common_init+0xf0>)
    9a86:	f7fd f8f0 	bl	6c6a <mem_acquire>
	LL_ASSERT(link);
    9a8a:	b988      	cbnz	r0, 9ab0 <common_init+0x94>
    9a8c:	4b22      	ldr	r3, [pc, #136]	; (9b18 <common_init+0xfc>)
    9a8e:	9301      	str	r3, [sp, #4]
    9a90:	9300      	str	r3, [sp, #0]
    9a92:	4a22      	ldr	r2, [pc, #136]	; (9b1c <common_init+0x100>)
    9a94:	4b22      	ldr	r3, [pc, #136]	; (9b20 <common_init+0x104>)
    9a96:	4923      	ldr	r1, [pc, #140]	; (9b24 <common_init+0x108>)
    9a98:	4823      	ldr	r0, [pc, #140]	; (9b28 <common_init+0x10c>)
    9a9a:	f7f7 fa77 	bl	f8c <printk>
    9a9e:	4040      	eors	r0, r0
    9aa0:	f380 8811 	msr	BASEPRI, r0
    9aa4:	f04f 0004 	mov.w	r0, #4
    9aa8:	df02      	svc	2
		_radio.conn_free = NULL;
    9aaa:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9aae:	e7c3      	b.n	9a38 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9ab0:	4a1e      	ldr	r2, [pc, #120]	; (9b2c <common_init+0x110>)
    9ab2:	1f11      	subs	r1, r2, #4
    9ab4:	f7fd f930 	bl	6d18 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9ab8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9abc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9ac0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9ac4:	231f      	movs	r3, #31
    9ac6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9aca:	2325      	movs	r3, #37	; 0x25
    9acc:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9ad0:	231b      	movs	r3, #27
    9ad2:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9ad6:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9ada:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9adc:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9ae0:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9ae2:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9ae6:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9aea:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9aee:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9af2:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9af6:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9afa:	b002      	add	sp, #8
    9afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9b00:	f7ff bf40 	b.w	9984 <packet_rx_allocate>
    9b04:	200008c8 	.word	0x200008c8
    9b08:	200009f8 	.word	0x200009f8
    9b0c:	20000a10 	.word	0x20000a10
    9b10:	20000a24 	.word	0x20000a24
    9b14:	20000a2c 	.word	0x20000a2c
    9b18:	00014645 	.word	0x00014645
    9b1c:	00015394 	.word	0x00015394
    9b20:	00016496 	.word	0x00016496
    9b24:	000153e3 	.word	0x000153e3
    9b28:	00016913 	.word	0x00016913
    9b2c:	20000a18 	.word	0x20000a18

00009b30 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9b34:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9b36:	4294      	cmp	r4, r2
{
    9b38:	4681      	mov	r9, r0
    9b3a:	460f      	mov	r7, r1
    9b3c:	4690      	mov	r8, r2
	if (_first == last) {
    9b3e:	d03d      	beq.n	9bbc <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9b40:	4e1f      	ldr	r6, [pc, #124]	; (9bc0 <tx_cmplt_get+0x90>)
    9b42:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9b46:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9b4a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9b4c:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9b4e:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9b52:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9b56:	b222      	sxth	r2, r4
    9b58:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9b5c:	f8b9 e000 	ldrh.w	lr, [r9]
    9b60:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9b64:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9b68:	4596      	cmp	lr, r2
    9b6a:	d120      	bne.n	9bae <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9b6c:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9b6e:	2801      	cmp	r0, #1
    9b70:	f020 0303 	bic.w	r3, r0, #3
    9b74:	d90a      	bls.n	9b8c <tx_cmplt_get+0x5c>
    9b76:	b1f3      	cbz	r3, 9bb6 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9b78:	1d02      	adds	r2, r0, #4
    9b7a:	d01c      	beq.n	9bb6 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9b7c:	7942      	ldrb	r2, [r0, #5]
    9b7e:	b1d2      	cbz	r2, 9bb6 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9b80:	7902      	ldrb	r2, [r0, #4]
    9b82:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9b86:	3a01      	subs	r2, #1
    9b88:	2a01      	cmp	r2, #1
    9b8a:	d814      	bhi.n	9bb6 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9b8c:	2201      	movs	r2, #1
			cmplt++;
    9b8e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9b90:	604a      	str	r2, [r1, #4]
			cmplt++;
    9b92:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9b94:	b113      	cbz	r3, 9b9c <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9b96:	4651      	mov	r1, sl
    9b98:	f7fd f881 	bl	6c9e <mem_release>
		}

		_first = _first + 1;
    9b9c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9b9e:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9ba2:	b2e4      	uxtb	r4, r4
			_first = 0;
    9ba4:	42a2      	cmp	r2, r4
    9ba6:	bf08      	it	eq
    9ba8:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9baa:	4544      	cmp	r4, r8
    9bac:	d1d3      	bne.n	9b56 <tx_cmplt_get+0x26>

	*first = _first;
    9bae:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9bb0:	4628      	mov	r0, r5
    9bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9bb6:	f8c1 b004 	str.w	fp, [r1, #4]
    9bba:	e7eb      	b.n	9b94 <tx_cmplt_get+0x64>
		return 0;
    9bbc:	2500      	movs	r5, #0
    9bbe:	e7f7      	b.n	9bb0 <tx_cmplt_get+0x80>
    9bc0:	200008c8 	.word	0x200008c8

00009bc4 <connection_get>:
{
    9bc4:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9bc6:	4b09      	ldr	r3, [pc, #36]	; (9bec <connection_get+0x28>)
    9bc8:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9bcc:	4282      	cmp	r2, r0
{
    9bce:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9bd0:	d90a      	bls.n	9be8 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9bd2:	4602      	mov	r2, r0
    9bd4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9bd8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9bdc:	f7fd f87a 	bl	6cd4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9be0:	b110      	cbz	r0, 9be8 <connection_get+0x24>
    9be2:	8c03      	ldrh	r3, [r0, #32]
    9be4:	42a3      	cmp	r3, r4
    9be6:	d000      	beq.n	9bea <connection_get+0x26>
	return 0;
    9be8:	2000      	movs	r0, #0
}
    9bea:	bd10      	pop	{r4, pc}
    9bec:	200008c8 	.word	0x200008c8

00009bf0 <role_disable>:
{
    9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bf4:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9bf6:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9bf8:	2805      	cmp	r0, #5
{
    9bfa:	4605      	mov	r5, r0
    9bfc:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9bfe:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9c00:	d00c      	beq.n	9c1c <role_disable+0x2c>
    9c02:	2806      	cmp	r0, #6
    9c04:	d040      	beq.n	9c88 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9c06:	d945      	bls.n	9c94 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    9c08:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9c0a:	b280      	uxth	r0, r0
    9c0c:	f7ff ffda 	bl	9bc4 <connection_get>
			if (!conn) {
    9c10:	2800      	cmp	r0, #0
    9c12:	f000 8123 	beq.w	9e5c <role_disable+0x26c>
			ticks_active_to_start =
    9c16:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9c1a:	e00f      	b.n	9c3c <role_disable+0x4c>
		ticks_xtal_to_start =
    9c1c:	4b90      	ldr	r3, [pc, #576]	; (9e60 <role_disable+0x270>)
    9c1e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9c20:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9c24:	ab02      	add	r3, sp, #8
    9c26:	9300      	str	r3, [sp, #0]
    9c28:	460a      	mov	r2, r1
    9c2a:	4b8e      	ldr	r3, [pc, #568]	; (9e64 <role_disable+0x274>)
    9c2c:	2103      	movs	r1, #3
    9c2e:	2000      	movs	r0, #0
    9c30:	f7fd ff42 	bl	7ab8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9c34:	2802      	cmp	r0, #2
    9c36:	d011      	beq.n	9c5c <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9c38:	9b02      	ldr	r3, [sp, #8]
    9c3a:	b99b      	cbnz	r3, 9c64 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    9c3c:	4c88      	ldr	r4, [pc, #544]	; (9e60 <role_disable+0x270>)
    9c3e:	7ca3      	ldrb	r3, [r4, #18]
    9c40:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9c44:	2b00      	cmp	r3, #0
    9c46:	d02d      	beq.n	9ca4 <role_disable+0xb4>
    9c48:	4b87      	ldr	r3, [pc, #540]	; (9e68 <role_disable+0x278>)
    9c4a:	9301      	str	r3, [sp, #4]
    9c4c:	9300      	str	r3, [sp, #0]
    9c4e:	4a87      	ldr	r2, [pc, #540]	; (9e6c <role_disable+0x27c>)
    9c50:	4b87      	ldr	r3, [pc, #540]	; (9e70 <role_disable+0x280>)
    9c52:	4988      	ldr	r1, [pc, #544]	; (9e74 <role_disable+0x284>)
    9c54:	4888      	ldr	r0, [pc, #544]	; (9e78 <role_disable+0x288>)
    9c56:	e00f      	b.n	9c78 <role_disable+0x88>
				cpu_sleep();
    9c58:	f7ff fdba 	bl	97d0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9c5c:	9b02      	ldr	r3, [sp, #8]
    9c5e:	2b02      	cmp	r3, #2
    9c60:	d0fa      	beq.n	9c58 <role_disable+0x68>
    9c62:	e7e9      	b.n	9c38 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9c64:	9b02      	ldr	r3, [sp, #8]
    9c66:	2b01      	cmp	r3, #1
    9c68:	d0e8      	beq.n	9c3c <role_disable+0x4c>
    9c6a:	4b7f      	ldr	r3, [pc, #508]	; (9e68 <role_disable+0x278>)
    9c6c:	9301      	str	r3, [sp, #4]
    9c6e:	9300      	str	r3, [sp, #0]
    9c70:	4a7e      	ldr	r2, [pc, #504]	; (9e6c <role_disable+0x27c>)
    9c72:	4b7f      	ldr	r3, [pc, #508]	; (9e70 <role_disable+0x280>)
    9c74:	497f      	ldr	r1, [pc, #508]	; (9e74 <role_disable+0x284>)
    9c76:	4881      	ldr	r0, [pc, #516]	; (9e7c <role_disable+0x28c>)
			LL_ASSERT(0);
    9c78:	f7f7 f988 	bl	f8c <printk>
    9c7c:	4040      	eors	r0, r0
    9c7e:	f380 8811 	msr	BASEPRI, r0
    9c82:	f04f 0004 	mov.w	r0, #4
    9c86:	df02      	svc	2
		ticks_xtal_to_start =
    9c88:	4b75      	ldr	r3, [pc, #468]	; (9e60 <role_disable+0x270>)
    9c8a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9c8e:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9c92:	e7d3      	b.n	9c3c <role_disable+0x4c>
			LL_ASSERT(0);
    9c94:	4b74      	ldr	r3, [pc, #464]	; (9e68 <role_disable+0x278>)
    9c96:	9301      	str	r3, [sp, #4]
    9c98:	9300      	str	r3, [sp, #0]
    9c9a:	4b75      	ldr	r3, [pc, #468]	; (9e70 <role_disable+0x280>)
    9c9c:	4a73      	ldr	r2, [pc, #460]	; (9e6c <role_disable+0x27c>)
    9c9e:	4975      	ldr	r1, [pc, #468]	; (9e74 <role_disable+0x284>)
    9ca0:	4877      	ldr	r0, [pc, #476]	; (9e80 <role_disable+0x290>)
    9ca2:	e7e9      	b.n	9c78 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    9ca4:	ab06      	add	r3, sp, #24
    9ca6:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9ca8:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9caa:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9cae:	2103      	movs	r1, #3
    9cb0:	9300      	str	r3, [sp, #0]
    9cb2:	462a      	mov	r2, r5
    9cb4:	4b6b      	ldr	r3, [pc, #428]	; (9e64 <role_disable+0x274>)
    9cb6:	f7fd feff 	bl	7ab8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9cba:	2802      	cmp	r0, #2
    9cbc:	d025      	beq.n	9d0a <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9cbe:	9b02      	ldr	r3, [sp, #8]
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d169      	bne.n	9d98 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9cc4:	7c23      	ldrb	r3, [r4, #16]
    9cc6:	429d      	cmp	r5, r3
    9cc8:	d002      	beq.n	9cd0 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9cca:	7c63      	ldrb	r3, [r4, #17]
    9ccc:	429d      	cmp	r5, r3
    9cce:	d15f      	bne.n	9d90 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9cd0:	ab06      	add	r3, sp, #24
    9cd2:	2202      	movs	r2, #2
    9cd4:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9cd8:	2200      	movs	r2, #0
    9cda:	9300      	str	r3, [sp, #0]
    9cdc:	2103      	movs	r1, #3
    9cde:	4b61      	ldr	r3, [pc, #388]	; (9e64 <role_disable+0x274>)
    9ce0:	4610      	mov	r0, r2
    9ce2:	f7fd fee9 	bl	7ab8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9ce6:	2802      	cmp	r0, #2
    9ce8:	d11d      	bne.n	9d26 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9cea:	2201      	movs	r2, #1
    9cec:	4611      	mov	r1, r2
    9cee:	2003      	movs	r0, #3
    9cf0:	f7fd f85e 	bl	6db0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9cf4:	9b03      	ldr	r3, [sp, #12]
    9cf6:	2b02      	cmp	r3, #2
    9cf8:	d115      	bne.n	9d26 <role_disable+0x136>
    9cfa:	4b5b      	ldr	r3, [pc, #364]	; (9e68 <role_disable+0x278>)
    9cfc:	9301      	str	r3, [sp, #4]
    9cfe:	9300      	str	r3, [sp, #0]
    9d00:	4a5a      	ldr	r2, [pc, #360]	; (9e6c <role_disable+0x27c>)
    9d02:	4b60      	ldr	r3, [pc, #384]	; (9e84 <role_disable+0x294>)
    9d04:	495b      	ldr	r1, [pc, #364]	; (9e74 <role_disable+0x284>)
    9d06:	4860      	ldr	r0, [pc, #384]	; (9e88 <role_disable+0x298>)
    9d08:	e7b6      	b.n	9c78 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    9d0a:	7c63      	ldrb	r3, [r4, #17]
    9d0c:	429d      	cmp	r5, r3
    9d0e:	d104      	bne.n	9d1a <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9d10:	2201      	movs	r2, #1
    9d12:	4611      	mov	r1, r2
    9d14:	2003      	movs	r0, #3
    9d16:	f7fd f84b 	bl	6db0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9d1a:	9b02      	ldr	r3, [sp, #8]
    9d1c:	2b02      	cmp	r3, #2
    9d1e:	d1ce      	bne.n	9cbe <role_disable+0xce>
			cpu_sleep();
    9d20:	f7ff fd56 	bl	97d0 <cpu_sleep>
    9d24:	e7f9      	b.n	9d1a <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    9d26:	9803      	ldr	r0, [sp, #12]
    9d28:	2800      	cmp	r0, #0
    9d2a:	d150      	bne.n	9dce <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    9d2c:	2302      	movs	r3, #2
    9d2e:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    9d30:	7c23      	ldrb	r3, [r4, #16]
    9d32:	b93b      	cbnz	r3, 9d44 <role_disable+0x154>
    9d34:	4b4c      	ldr	r3, [pc, #304]	; (9e68 <role_disable+0x278>)
    9d36:	9301      	str	r3, [sp, #4]
    9d38:	9300      	str	r3, [sp, #0]
    9d3a:	4a4c      	ldr	r2, [pc, #304]	; (9e6c <role_disable+0x27c>)
    9d3c:	4b51      	ldr	r3, [pc, #324]	; (9e84 <role_disable+0x294>)
    9d3e:	494d      	ldr	r1, [pc, #308]	; (9e74 <role_disable+0x284>)
    9d40:	4852      	ldr	r0, [pc, #328]	; (9e8c <role_disable+0x29c>)
    9d42:	e799      	b.n	9c78 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d44:	ab04      	add	r3, sp, #16
    9d46:	9300      	str	r3, [sp, #0]
    9d48:	2201      	movs	r2, #1
    9d4a:	4b46      	ldr	r3, [pc, #280]	; (9e64 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    9d4c:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d4e:	2103      	movs	r1, #3
    9d50:	f7fd feb2 	bl	7ab8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9d54:	2802      	cmp	r0, #2
    9d56:	d10f      	bne.n	9d78 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9d58:	2201      	movs	r2, #1
    9d5a:	4611      	mov	r1, r2
    9d5c:	2003      	movs	r0, #3
    9d5e:	f7fd f827 	bl	6db0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    9d62:	9b04      	ldr	r3, [sp, #16]
    9d64:	2b02      	cmp	r3, #2
    9d66:	d107      	bne.n	9d78 <role_disable+0x188>
    9d68:	4b3f      	ldr	r3, [pc, #252]	; (9e68 <role_disable+0x278>)
    9d6a:	9301      	str	r3, [sp, #4]
    9d6c:	9300      	str	r3, [sp, #0]
    9d6e:	4a3f      	ldr	r2, [pc, #252]	; (9e6c <role_disable+0x27c>)
    9d70:	4b44      	ldr	r3, [pc, #272]	; (9e84 <role_disable+0x294>)
    9d72:	4940      	ldr	r1, [pc, #256]	; (9e74 <role_disable+0x284>)
    9d74:	4846      	ldr	r0, [pc, #280]	; (9e90 <role_disable+0x2a0>)
    9d76:	e77f      	b.n	9c78 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    9d78:	9a04      	ldr	r2, [sp, #16]
    9d7a:	b99a      	cbnz	r2, 9da4 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    9d7c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    9d80:	45b0      	cmp	r8, r6
    9d82:	d922      	bls.n	9dca <role_disable+0x1da>
				ret = mayfly_enqueue(
    9d84:	4b43      	ldr	r3, [pc, #268]	; (9e94 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9d86:	4611      	mov	r1, r2
    9d88:	2003      	movs	r0, #3
    9d8a:	f7fd f839 	bl	6e00 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9d8e:	b9a0      	cbnz	r0, 9dba <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    9d90:	7ca3      	ldrb	r3, [r4, #18]
    9d92:	b90b      	cbnz	r3, 9d98 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    9d94:	2301      	movs	r3, #1
    9d96:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    9d98:	2300      	movs	r3, #0
    9d9a:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    9d9c:	9802      	ldr	r0, [sp, #8]
}
    9d9e:	b006      	add	sp, #24
    9da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    9da4:	9b04      	ldr	r3, [sp, #16]
    9da6:	2b01      	cmp	r3, #1
    9da8:	d153      	bne.n	9e52 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9daa:	2200      	movs	r2, #0
    9dac:	4611      	mov	r1, r2
    9dae:	4b39      	ldr	r3, [pc, #228]	; (9e94 <role_disable+0x2a4>)
    9db0:	2003      	movs	r0, #3
    9db2:	f7fd f825 	bl	6e00 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9db6:	4602      	mov	r2, r0
    9db8:	b138      	cbz	r0, 9dca <role_disable+0x1da>
			LL_ASSERT(!ret);
    9dba:	4b2b      	ldr	r3, [pc, #172]	; (9e68 <role_disable+0x278>)
    9dbc:	9301      	str	r3, [sp, #4]
    9dbe:	9300      	str	r3, [sp, #0]
    9dc0:	4a2a      	ldr	r2, [pc, #168]	; (9e6c <role_disable+0x27c>)
    9dc2:	4b30      	ldr	r3, [pc, #192]	; (9e84 <role_disable+0x294>)
    9dc4:	492b      	ldr	r1, [pc, #172]	; (9e74 <role_disable+0x284>)
    9dc6:	4834      	ldr	r0, [pc, #208]	; (9e98 <role_disable+0x2a8>)
    9dc8:	e756      	b.n	9c78 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9dca:	4b34      	ldr	r3, [pc, #208]	; (9e9c <role_disable+0x2ac>)
    9dcc:	e7db      	b.n	9d86 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    9dce:	9d03      	ldr	r5, [sp, #12]
    9dd0:	2d01      	cmp	r5, #1
    9dd2:	d13e      	bne.n	9e52 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    9dd4:	2fff      	cmp	r7, #255	; 0xff
    9dd6:	d029      	beq.n	9e2c <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    9dd8:	ab06      	add	r3, sp, #24
    9dda:	2202      	movs	r2, #2
    9ddc:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9de0:	2103      	movs	r1, #3
    9de2:	9300      	str	r3, [sp, #0]
    9de4:	463a      	mov	r2, r7
    9de6:	4b1f      	ldr	r3, [pc, #124]	; (9e64 <role_disable+0x274>)
    9de8:	2000      	movs	r0, #0
    9dea:	f7fd fe65 	bl	7ab8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    9dee:	2802      	cmp	r0, #2
    9df0:	d10f      	bne.n	9e12 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9df2:	462a      	mov	r2, r5
    9df4:	4629      	mov	r1, r5
    9df6:	2003      	movs	r0, #3
    9df8:	f7fc ffda 	bl	6db0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    9dfc:	9b05      	ldr	r3, [sp, #20]
    9dfe:	2b02      	cmp	r3, #2
    9e00:	d107      	bne.n	9e12 <role_disable+0x222>
    9e02:	4b19      	ldr	r3, [pc, #100]	; (9e68 <role_disable+0x278>)
    9e04:	9301      	str	r3, [sp, #4]
    9e06:	9300      	str	r3, [sp, #0]
    9e08:	4a18      	ldr	r2, [pc, #96]	; (9e6c <role_disable+0x27c>)
    9e0a:	4b1e      	ldr	r3, [pc, #120]	; (9e84 <role_disable+0x294>)
    9e0c:	4919      	ldr	r1, [pc, #100]	; (9e74 <role_disable+0x284>)
    9e0e:	4824      	ldr	r0, [pc, #144]	; (9ea0 <role_disable+0x2b0>)
    9e10:	e732      	b.n	9c78 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    9e12:	9b05      	ldr	r3, [sp, #20]
    9e14:	b153      	cbz	r3, 9e2c <role_disable+0x23c>
    9e16:	9b05      	ldr	r3, [sp, #20]
    9e18:	2b01      	cmp	r3, #1
    9e1a:	d007      	beq.n	9e2c <role_disable+0x23c>
    9e1c:	4b12      	ldr	r3, [pc, #72]	; (9e68 <role_disable+0x278>)
    9e1e:	9301      	str	r3, [sp, #4]
    9e20:	9300      	str	r3, [sp, #0]
    9e22:	4a12      	ldr	r2, [pc, #72]	; (9e6c <role_disable+0x27c>)
    9e24:	4b17      	ldr	r3, [pc, #92]	; (9e84 <role_disable+0x294>)
    9e26:	4913      	ldr	r1, [pc, #76]	; (9e74 <role_disable+0x284>)
    9e28:	481e      	ldr	r0, [pc, #120]	; (9ea4 <role_disable+0x2b4>)
    9e2a:	e725      	b.n	9c78 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    9e2c:	7ce3      	ldrb	r3, [r4, #19]
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d0ae      	beq.n	9d90 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    9e32:	4b1d      	ldr	r3, [pc, #116]	; (9ea8 <role_disable+0x2b8>)
    9e34:	2204      	movs	r2, #4
    9e36:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9e38:	2200      	movs	r2, #0
    9e3a:	4611      	mov	r1, r2
    9e3c:	2003      	movs	r0, #3
    9e3e:	f7fc ffdf 	bl	6e00 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9e42:	2800      	cmp	r0, #0
    9e44:	d1b9      	bne.n	9dba <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    9e46:	7ce3      	ldrb	r3, [r4, #19]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d0a1      	beq.n	9d90 <role_disable+0x1a0>
				cpu_sleep();
    9e4c:	f7ff fcc0 	bl	97d0 <cpu_sleep>
    9e50:	e7f9      	b.n	9e46 <role_disable+0x256>
		LL_ASSERT(0);
    9e52:	4b05      	ldr	r3, [pc, #20]	; (9e68 <role_disable+0x278>)
    9e54:	9301      	str	r3, [sp, #4]
    9e56:	9300      	str	r3, [sp, #0]
    9e58:	4b0a      	ldr	r3, [pc, #40]	; (9e84 <role_disable+0x294>)
    9e5a:	e71f      	b.n	9c9c <role_disable+0xac>
				return 1;
    9e5c:	2001      	movs	r0, #1
    9e5e:	e79e      	b.n	9d9e <role_disable+0x1ae>
    9e60:	200008c8 	.word	0x200008c8
    9e64:	00009815 	.word	0x00009815
    9e68:	00014645 	.word	0x00014645
    9e6c:	00015394 	.word	0x00015394
    9e70:	000168b8 	.word	0x000168b8
    9e74:	000153e3 	.word	0x000153e3
    9e78:	0001722a 	.word	0x0001722a
    9e7c:	000171ea 	.word	0x000171ea
    9e80:	00015333 	.word	0x00015333
    9e84:	000168a4 	.word	0x000168a4
    9e88:	00017262 	.word	0x00017262
    9e8c:	00017293 	.word	0x00017293
    9e90:	000172cd 	.word	0x000172cd
    9e94:	20003d60 	.word	0x20003d60
    9e98:	000172fd 	.word	0x000172fd
    9e9c:	20003e00 	.word	0x20003e00
    9ea0:	00017323 	.word	0x00017323
    9ea4:	00017355 	.word	0x00017355
    9ea8:	20003d80 	.word	0x20003d80

00009eac <mayfly_xtal_retain>:
{
    9eac:	b513      	push	{r0, r1, r4, lr}
    9eae:	4b1d      	ldr	r3, [pc, #116]	; (9f24 <mayfly_xtal_retain+0x78>)
    9eb0:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    9eb2:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    9eb4:	b301      	cbz	r1, 9ef8 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    9eb6:	2a00      	cmp	r2, #0
    9eb8:	d132      	bne.n	9f20 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    9eba:	2801      	cmp	r0, #1
    9ebc:	d00e      	beq.n	9edc <mayfly_xtal_retain+0x30>
    9ebe:	4b1a      	ldr	r3, [pc, #104]	; (9f28 <mayfly_xtal_retain+0x7c>)
    9ec0:	9301      	str	r3, [sp, #4]
    9ec2:	9300      	str	r3, [sp, #0]
    9ec4:	4a19      	ldr	r2, [pc, #100]	; (9f2c <mayfly_xtal_retain+0x80>)
    9ec6:	4b1a      	ldr	r3, [pc, #104]	; (9f30 <mayfly_xtal_retain+0x84>)
    9ec8:	491a      	ldr	r1, [pc, #104]	; (9f34 <mayfly_xtal_retain+0x88>)
    9eca:	481b      	ldr	r0, [pc, #108]	; (9f38 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    9ecc:	f7f7 f85e 	bl	f8c <printk>
    9ed0:	4040      	eors	r0, r0
    9ed2:	f380 8811 	msr	BASEPRI, r0
    9ed6:	f04f 0004 	mov.w	r0, #4
    9eda:	df02      	svc	2
			s_xtal_retained = 1;
    9edc:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    9ede:	4b17      	ldr	r3, [pc, #92]	; (9f3c <mayfly_xtal_retain+0x90>)
    9ee0:	4611      	mov	r1, r2
    9ee2:	f7fc ff8d 	bl	6e00 <mayfly_enqueue>
			LL_ASSERT(!retval);
    9ee6:	b1d8      	cbz	r0, 9f20 <mayfly_xtal_retain+0x74>
    9ee8:	4b0f      	ldr	r3, [pc, #60]	; (9f28 <mayfly_xtal_retain+0x7c>)
    9eea:	9301      	str	r3, [sp, #4]
    9eec:	9300      	str	r3, [sp, #0]
    9eee:	4a0f      	ldr	r2, [pc, #60]	; (9f2c <mayfly_xtal_retain+0x80>)
    9ef0:	4b0f      	ldr	r3, [pc, #60]	; (9f30 <mayfly_xtal_retain+0x84>)
    9ef2:	4910      	ldr	r1, [pc, #64]	; (9f34 <mayfly_xtal_retain+0x88>)
    9ef4:	4812      	ldr	r0, [pc, #72]	; (9f40 <mayfly_xtal_retain+0x94>)
    9ef6:	e7e9      	b.n	9ecc <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    9ef8:	b192      	cbz	r2, 9f20 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    9efa:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    9efc:	b170      	cbz	r0, 9f1c <mayfly_xtal_retain+0x70>
    9efe:	2801      	cmp	r0, #1
    9f00:	d104      	bne.n	9f0c <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    9f02:	4b10      	ldr	r3, [pc, #64]	; (9f44 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    9f04:	2200      	movs	r2, #0
    9f06:	4611      	mov	r1, r2
    9f08:	4620      	mov	r0, r4
    9f0a:	e7ea      	b.n	9ee2 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    9f0c:	4b06      	ldr	r3, [pc, #24]	; (9f28 <mayfly_xtal_retain+0x7c>)
    9f0e:	9301      	str	r3, [sp, #4]
    9f10:	9300      	str	r3, [sp, #0]
    9f12:	4a06      	ldr	r2, [pc, #24]	; (9f2c <mayfly_xtal_retain+0x80>)
    9f14:	4b06      	ldr	r3, [pc, #24]	; (9f30 <mayfly_xtal_retain+0x84>)
    9f16:	4907      	ldr	r1, [pc, #28]	; (9f34 <mayfly_xtal_retain+0x88>)
    9f18:	480b      	ldr	r0, [pc, #44]	; (9f48 <mayfly_xtal_retain+0x9c>)
    9f1a:	e7d7      	b.n	9ecc <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    9f1c:	4b0b      	ldr	r3, [pc, #44]	; (9f4c <mayfly_xtal_retain+0xa0>)
    9f1e:	e7f1      	b.n	9f04 <mayfly_xtal_retain+0x58>
}
    9f20:	b002      	add	sp, #8
    9f22:	bd10      	pop	{r4, pc}
    9f24:	20000ac8 	.word	0x20000ac8
    9f28:	00014645 	.word	0x00014645
    9f2c:	00015394 	.word	0x00015394
    9f30:	0001665d 	.word	0x0001665d
    9f34:	000153e3 	.word	0x000153e3
    9f38:	00017043 	.word	0x00017043
    9f3c:	20003dd0 	.word	0x20003dd0
    9f40:	00017073 	.word	0x00017073
    9f44:	20003df0 	.word	0x20003df0
    9f48:	00015333 	.word	0x00015333
    9f4c:	20003de0 	.word	0x20003de0

00009f50 <rx_packet_set>:
{
    9f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    9f52:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    9f56:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    9f58:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    9f5a:	f004 0407 	and.w	r4, r4, #7
{
    9f5e:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    9f60:	4620      	mov	r0, r4
    9f62:	2100      	movs	r1, #0
    9f64:	f007 ffe0 	bl	11f28 <radio_phy_set>
	if (conn->enc_rx) {
    9f68:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9f6c:	f013 0f10 	tst.w	r3, #16
    9f70:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9f74:	d010      	beq.n	9f98 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    9f76:	1d29      	adds	r1, r5, #4
    9f78:	f042 0201 	orr.w	r2, r2, #1
    9f7c:	b2c9      	uxtb	r1, r1
    9f7e:	2008      	movs	r0, #8
    9f80:	f008 f818 	bl	11fb4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    9f84:	463a      	mov	r2, r7
    9f86:	4621      	mov	r1, r4
    9f88:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    9f8c:	f008 fa56 	bl	1243c <radio_ccm_rx_pkt_set>
}
    9f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    9f94:	f008 b83c 	b.w	12010 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    9f98:	2008      	movs	r0, #8
    9f9a:	f042 0201 	orr.w	r2, r2, #1
    9f9e:	b2e9      	uxtb	r1, r5
    9fa0:	f008 f808 	bl	11fb4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    9fa4:	4638      	mov	r0, r7
    9fa6:	e7f3      	b.n	9f90 <rx_packet_set+0x40>

00009fa8 <tx_packet_set>:
{
    9fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9faa:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    9fac:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    9fb0:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    9fb2:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    9fb6:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    9fb8:	09c9      	lsrs	r1, r1, #7
    9fba:	4620      	mov	r0, r4
    9fbc:	f007 ffb4 	bl	11f28 <radio_phy_set>
	if (conn->enc_tx) {
    9fc0:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    9fc4:	f013 0f20 	tst.w	r3, #32
    9fc8:	ea4f 0244 	mov.w	r2, r4, lsl #1
    9fcc:	d00f      	beq.n	9fee <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    9fce:	1d29      	adds	r1, r5, #4
    9fd0:	b2c9      	uxtb	r1, r1
    9fd2:	2008      	movs	r0, #8
    9fd4:	f042 0201 	orr.w	r2, r2, #1
    9fd8:	f007 ffec 	bl	11fb4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    9fdc:	4639      	mov	r1, r7
    9fde:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    9fe2:	f008 fa67 	bl	124b4 <radio_ccm_tx_pkt_set>
}
    9fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    9fea:	f008 b817 	b.w	1201c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    9fee:	2008      	movs	r0, #8
    9ff0:	f042 0201 	orr.w	r2, r2, #1
    9ff4:	b2e9      	uxtb	r1, r5
    9ff6:	f007 ffdd 	bl	11fb4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    9ffa:	4638      	mov	r0, r7
    9ffc:	e7f3      	b.n	9fe6 <tx_packet_set+0x3e>
	...

0000a000 <sched_free_win_offset_calc>:
{
    a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a004:	b08f      	sub	sp, #60	; 0x3c
    a006:	4692      	mov	sl, r2
    a008:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a00a:	6803      	ldr	r3, [r0, #0]
{
    a00c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a00e:	2b00      	cmp	r3, #0
{
    a010:	4680      	mov	r8, r0
    a012:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a014:	da3a      	bge.n	a08c <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    a016:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a01c:	4291      	cmp	r1, r2
    a01e:	bf2c      	ite	cs
    a020:	1a5a      	subcs	r2, r3, r1
    a022:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a024:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a026:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a02a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a02c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a02e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a030:	18d3      	adds	r3, r2, r3
    a032:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a034:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a038:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a03c:	940c      	str	r4, [sp, #48]	; 0x30
    a03e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a040:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a042:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a044:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a046:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a048:	2302      	movs	r3, #2
    a04a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a04c:	ab0d      	add	r3, sp, #52	; 0x34
    a04e:	9302      	str	r3, [sp, #8]
    a050:	4b81      	ldr	r3, [pc, #516]	; (a258 <sched_free_win_offset_calc+0x258>)
    a052:	9301      	str	r3, [sp, #4]
    a054:	ab0b      	add	r3, sp, #44	; 0x2c
    a056:	9300      	str	r3, [sp, #0]
    a058:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a05c:	ab0c      	add	r3, sp, #48	; 0x30
    a05e:	2101      	movs	r1, #1
    a060:	2000      	movs	r0, #0
    a062:	f7fd fd65 	bl	7b30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a066:	2802      	cmp	r0, #2
    a068:	d019      	beq.n	a09e <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a06c:	b1db      	cbz	r3, a0a6 <sched_free_win_offset_calc+0xa6>
    a06e:	4b7b      	ldr	r3, [pc, #492]	; (a25c <sched_free_win_offset_calc+0x25c>)
    a070:	9301      	str	r3, [sp, #4]
    a072:	9300      	str	r3, [sp, #0]
    a074:	4a7a      	ldr	r2, [pc, #488]	; (a260 <sched_free_win_offset_calc+0x260>)
    a076:	4b7b      	ldr	r3, [pc, #492]	; (a264 <sched_free_win_offset_calc+0x264>)
    a078:	497b      	ldr	r1, [pc, #492]	; (a268 <sched_free_win_offset_calc+0x268>)
    a07a:	487c      	ldr	r0, [pc, #496]	; (a26c <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a07c:	f7f6 ff86 	bl	f8c <printk>
    a080:	4040      	eors	r0, r0
    a082:	f380 8811 	msr	BASEPRI, r0
    a086:	f04f 0004 	mov.w	r0, #4
    a08a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a08c:	4293      	cmp	r3, r2
    a08e:	bf38      	it	cc
    a090:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a092:	2200      	movs	r2, #0
    a094:	e7c6      	b.n	a024 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a096:	2101      	movs	r1, #1
    a098:	2000      	movs	r0, #0
    a09a:	f7fd fdc7 	bl	7c2c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a0a0:	2b02      	cmp	r3, #2
    a0a2:	d0f8      	beq.n	a096 <sched_free_win_offset_calc+0x96>
    a0a4:	e7e1      	b.n	a06a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a0a6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a0aa:	2aff      	cmp	r2, #255	; 0xff
    a0ac:	d065      	beq.n	a17a <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    a0ae:	2fff      	cmp	r7, #255	; 0xff
    a0b0:	d00a      	beq.n	a0c8 <sched_free_win_offset_calc+0xc8>
    a0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a0b4:	4599      	cmp	r9, r3
    a0b6:	d007      	beq.n	a0c8 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    a0b8:	4b68      	ldr	r3, [pc, #416]	; (a25c <sched_free_win_offset_calc+0x25c>)
    a0ba:	9301      	str	r3, [sp, #4]
    a0bc:	9300      	str	r3, [sp, #0]
    a0be:	4a68      	ldr	r2, [pc, #416]	; (a260 <sched_free_win_offset_calc+0x260>)
    a0c0:	4b68      	ldr	r3, [pc, #416]	; (a264 <sched_free_win_offset_calc+0x264>)
    a0c2:	4969      	ldr	r1, [pc, #420]	; (a268 <sched_free_win_offset_calc+0x268>)
    a0c4:	486a      	ldr	r0, [pc, #424]	; (a270 <sched_free_win_offset_calc+0x270>)
    a0c6:	e7d9      	b.n	a07c <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a0c8:	2a05      	cmp	r2, #5
    a0ca:	d951      	bls.n	a170 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    a0cc:	4869      	ldr	r0, [pc, #420]	; (a274 <sched_free_win_offset_calc+0x274>)
    a0ce:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a0d2:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a0d4:	429a      	cmp	r2, r3
    a0d6:	da4b      	bge.n	a170 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a0d8:	2a06      	cmp	r2, #6
    a0da:	f000 8092 	beq.w	a202 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    a0de:	9b06      	ldr	r3, [sp, #24]
    a0e0:	2bff      	cmp	r3, #255	; 0xff
    a0e2:	d14a      	bne.n	a17a <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a0e4:	3a07      	subs	r2, #7
    a0e6:	b292      	uxth	r2, r2
    a0e8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a0ec:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a0f0:	f7fc fdf0 	bl	6cd4 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a0f4:	4580      	cmp	r8, r0
    a0f6:	d03b      	beq.n	a170 <sched_free_win_offset_calc+0x170>
    a0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0fa:	b91b      	cbnz	r3, a104 <sched_free_win_offset_calc+0x104>
    a0fc:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a100:	2b00      	cmp	r3, #0
    a102:	db35      	blt.n	a170 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    a104:	9b05      	ldr	r3, [sp, #20]
    a106:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a108:	6841      	ldr	r1, [r0, #4]
    a10a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a10c:	6803      	ldr	r3, [r0, #0]
    a10e:	2b00      	cmp	r3, #0
    a110:	da4e      	bge.n	a1b0 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    a112:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a118:	428a      	cmp	r2, r1
    a11a:	bf2c      	ite	cs
    a11c:	18b6      	addcs	r6, r6, r2
    a11e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a120:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a122:	68c2      	ldr	r2, [r0, #12]
    a124:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a128:	444b      	add	r3, r9
    a12a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a12c:	f8da 3000 	ldr.w	r3, [sl]
    a130:	429e      	cmp	r6, r3
    a132:	d916      	bls.n	a162 <sched_free_win_offset_calc+0x162>
    a134:	429d      	cmp	r5, r3
    a136:	bf38      	it	cc
    a138:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a13a:	9b07      	ldr	r3, [sp, #28]
    a13c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a140:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	42a3      	cmp	r3, r4
    a146:	d905      	bls.n	a154 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    a148:	4629      	mov	r1, r5
    a14a:	4630      	mov	r0, r6
    a14c:	f7fd fd86 	bl	7c5c <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a150:	42b8      	cmp	r0, r7
    a152:	d231      	bcs.n	a1b8 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    a154:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a158:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a15a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a15e:	4293      	cmp	r3, r2
    a160:	d20b      	bcs.n	a17a <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    a162:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a166:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a16a:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a16e:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a170:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a172:	781b      	ldrb	r3, [r3, #0]
    a174:	42a3      	cmp	r3, r4
    a176:	f63f af67 	bhi.w	a048 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a17a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a17e:	2bff      	cmp	r3, #255	; 0xff
    a180:	d111      	bne.n	a1a6 <sched_free_win_offset_calc+0x1a6>
    a182:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a186:	f8df 80f0 	ldr.w	r8, [pc, #240]	; a278 <sched_free_win_offset_calc+0x278>
    a18a:	a731      	add	r7, pc, #196	; (adr r7, a250 <sched_free_win_offset_calc+0x250>)
    a18c:	e9d7 6700 	ldrd	r6, r7, [r7]
    a190:	429d      	cmp	r5, r3
    a192:	bf38      	it	cc
    a194:	461d      	movcc	r5, r3
    a196:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a19a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	42a3      	cmp	r3, r4
    a1a0:	d831      	bhi.n	a206 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a1a2:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a1a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a1a8:	701c      	strb	r4, [r3, #0]
}
    a1aa:	b00f      	add	sp, #60	; 0x3c
    a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a1b0:	428b      	cmp	r3, r1
    a1b2:	bf38      	it	cc
    a1b4:	460b      	movcc	r3, r1
    a1b6:	e7b4      	b.n	a122 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a1b8:	4a2f      	ldr	r2, [pc, #188]	; (a278 <sched_free_win_offset_calc+0x278>)
    a1ba:	eb05 030b 	add.w	r3, r5, fp
    a1be:	fba3 0102 	umull	r0, r1, r3, r2
    a1c2:	2207      	movs	r2, #7
    a1c4:	fb02 1103 	mla	r1, r2, r3, r1
    a1c8:	a321      	add	r3, pc, #132	; (adr r3, a250 <sched_free_win_offset_calc+0x250>)
    a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1ce:	f7f6 f821 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a1d2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a1d6:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a1da:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a1dc:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a1de:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a1e0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a1e4:	d20b      	bcs.n	a1fe <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    a1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a1e8:	2202      	movs	r2, #2
    a1ea:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a1ee:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a1f2:	3401      	adds	r4, #1
					memcpy(win_offset +
    a1f4:	f7f7 fd02 	bl	1bfc <memcpy>
					offset_index++;
    a1f8:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a1fa:	3528      	adds	r5, #40	; 0x28
    a1fc:	e7a0      	b.n	a140 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    a1fe:	2500      	movs	r5, #0
    a200:	e7a8      	b.n	a154 <sched_free_win_offset_calc+0x154>
    a202:	9206      	str	r2, [sp, #24]
    a204:	e7b4      	b.n	a170 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a206:	eb05 030b 	add.w	r3, r5, fp
    a20a:	fba3 0108 	umull	r0, r1, r3, r8
    a20e:	fb09 1103 	mla	r1, r9, r3, r1
    a212:	4632      	mov	r2, r6
    a214:	463b      	mov	r3, r7
    a216:	f7f5 fffd 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a21a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a21e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a222:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a224:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a226:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a228:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a22c:	d90b      	bls.n	a246 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a22e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a230:	2202      	movs	r2, #2
    a232:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a236:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a23a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a23c:	f7f7 fcde 	bl	1bfc <memcpy>
			offset_index++;
    a240:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a242:	3528      	adds	r5, #40	; 0x28
    a244:	e7a9      	b.n	a19a <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    a246:	2500      	movs	r5, #0
    a248:	e7ab      	b.n	a1a2 <sched_free_win_offset_calc+0x1a2>
    a24a:	bf00      	nop
    a24c:	f3af 8000 	nop.w
    a250:	3b9aca00 	.word	0x3b9aca00
    a254:	00000000 	.word	0x00000000
    a258:	00009815 	.word	0x00009815
    a25c:	00014645 	.word	0x00014645
    a260:	00015394 	.word	0x00015394
    a264:	000166d9 	.word	0x000166d9
    a268:	000153e3 	.word	0x000153e3
    a26c:	000173f8 	.word	0x000173f8
    a270:	00015333 	.word	0x00015333
    a274:	200008c8 	.word	0x200008c8
    a278:	1afd498d 	.word	0x1afd498d

0000a27c <mayfly_sched_free_win_offset_calc>:
{
    a27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a27e:	2300      	movs	r3, #0
    a280:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a282:	2306      	movs	r3, #6
    a284:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a288:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a28c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a290:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a292:	bfbe      	ittt	lt
    a294:	4602      	movlt	r2, r0
    a296:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a298:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a29c:	9101      	str	r1, [sp, #4]
    a29e:	f10d 010b 	add.w	r1, sp, #11
    a2a2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a2a4:	bfa8      	it	ge
    a2a6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a2a8:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a2ac:	2100      	movs	r1, #0
    a2ae:	f7ff fea7 	bl	a000 <sched_free_win_offset_calc>
}
    a2b2:	b005      	add	sp, #20
    a2b4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2b8 <mayfly_sched_win_offset_select>:
{
    a2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2bc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a2c0:	b089      	sub	sp, #36	; 0x24
    a2c2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2c4:	4840      	ldr	r0, [pc, #256]	; (a3c8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a2c6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a2c8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2ca:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a2ce:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2d2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a2d6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2d8:	fb03 1102 	mla	r1, r3, r2, r1
    a2dc:	a338      	add	r3, pc, #224	; (adr r3, a3c0 <mayfly_sched_win_offset_select+0x108>)
    a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a2e2:	9505      	str	r5, [sp, #20]
    a2e4:	6075      	str	r5, [r6, #4]
    a2e6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2e8:	f7f5 ff94 	bl	214 <__aeabi_uldivmod>
    a2ec:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a2ee:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a2f2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a2f6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a2fa:	9100      	str	r1, [sp, #0]
    a2fc:	9601      	str	r6, [sp, #4]
    a2fe:	2101      	movs	r1, #1
    a300:	4620      	mov	r0, r4
    a302:	f7ff fe7d 	bl	a000 <sched_free_win_offset_calc>
    a306:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a30a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a30e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a312:	2202      	movs	r2, #2
    a314:	4639      	mov	r1, r7
    a316:	f10d 000e 	add.w	r0, sp, #14
    a31a:	f7f7 fc6f 	bl	1bfc <memcpy>
		while (offset_index_m < offset_m_max) {
    a31e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a322:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a326:	2300      	movs	r3, #0
    a328:	b2d9      	uxtb	r1, r3
    a32a:	4288      	cmp	r0, r1
    a32c:	d811      	bhi.n	a352 <mayfly_sched_win_offset_select+0x9a>
    a32e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a330:	4547      	cmp	r7, r8
    a332:	d1ee      	bne.n	a312 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a334:	b9b5      	cbnz	r5, a364 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a336:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a33a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a33e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a340:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a344:	2202      	movs	r2, #2
    a346:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a348:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a34c:	f7f7 fc56 	bl	1bfc <memcpy>
    a350:	e027      	b.n	a3a2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a352:	454a      	cmp	r2, r9
    a354:	d004      	beq.n	a360 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a356:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a35a:	4291      	cmp	r1, r2
    a35c:	d024      	beq.n	a3a8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a35e:	2501      	movs	r5, #1
    a360:	3301      	adds	r3, #1
    a362:	e7e1      	b.n	a328 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a364:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a368:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a36c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a370:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a374:	4b15      	ldr	r3, [pc, #84]	; (a3cc <mayfly_sched_win_offset_select+0x114>)
    a376:	2200      	movs	r2, #0
    a378:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a37c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a380:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a384:	f042 0203 	orr.w	r2, r2, #3
    a388:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a38c:	2203      	movs	r2, #3
    a38e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a392:	2211      	movs	r2, #17
    a394:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a398:	220f      	movs	r2, #15
    a39a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a39e:	2220      	movs	r2, #32
    a3a0:	701a      	strb	r2, [r3, #0]
}
    a3a2:	b009      	add	sp, #36	; 0x24
    a3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a3a8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a3ac:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a3ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a3b2:	2202      	movs	r2, #2
    a3b4:	f10d 010e 	add.w	r1, sp, #14
    a3b8:	e7c6      	b.n	a348 <mayfly_sched_win_offset_select+0x90>
    a3ba:	bf00      	nop
    a3bc:	f3af 8000 	nop.w
    a3c0:	1afd498d 	.word	0x1afd498d
    a3c4:	00000007 	.word	0x00000007
    a3c8:	09ce5400 	.word	0x09ce5400
    a3cc:	200008c8 	.word	0x200008c8

0000a3d0 <sched_after_mstr_free_slot_get>:
{
    a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3d4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a3d6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a3d8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a3da:	f8df 9140 	ldr.w	r9, [pc, #320]	; a51c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a3de:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a3e2:	4680      	mov	r8, r0
    a3e4:	4693      	mov	fp, r2
    a3e6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a3e8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a3ec:	601c      	str	r4, [r3, #0]
    a3ee:	9408      	str	r4, [sp, #32]
    a3f0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a3f2:	2302      	movs	r3, #2
    a3f4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3f6:	ab09      	add	r3, sp, #36	; 0x24
    a3f8:	9302      	str	r3, [sp, #8]
    a3fa:	4b41      	ldr	r3, [pc, #260]	; (a500 <sched_after_mstr_free_slot_get+0x130>)
    a3fc:	9301      	str	r3, [sp, #4]
    a3fe:	ab08      	add	r3, sp, #32
    a400:	9300      	str	r3, [sp, #0]
    a402:	f10d 021f 	add.w	r2, sp, #31
    a406:	465b      	mov	r3, fp
    a408:	4641      	mov	r1, r8
    a40a:	2000      	movs	r0, #0
    a40c:	f7fd fb90 	bl	7b30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a410:	2802      	cmp	r0, #2
    a412:	d014      	beq.n	a43e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a416:	b1b3      	cbz	r3, a446 <sched_after_mstr_free_slot_get+0x76>
    a418:	4b3a      	ldr	r3, [pc, #232]	; (a504 <sched_after_mstr_free_slot_get+0x134>)
    a41a:	9301      	str	r3, [sp, #4]
    a41c:	9300      	str	r3, [sp, #0]
    a41e:	4a3a      	ldr	r2, [pc, #232]	; (a508 <sched_after_mstr_free_slot_get+0x138>)
    a420:	4b3a      	ldr	r3, [pc, #232]	; (a50c <sched_after_mstr_free_slot_get+0x13c>)
    a422:	493b      	ldr	r1, [pc, #236]	; (a510 <sched_after_mstr_free_slot_get+0x140>)
    a424:	483b      	ldr	r0, [pc, #236]	; (a514 <sched_after_mstr_free_slot_get+0x144>)
    a426:	f7f6 fdb1 	bl	f8c <printk>
    a42a:	4040      	eors	r0, r0
    a42c:	f380 8811 	msr	BASEPRI, r0
    a430:	f04f 0004 	mov.w	r0, #4
    a434:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a436:	4641      	mov	r1, r8
    a438:	2000      	movs	r0, #0
    a43a:	f7fd fbf7 	bl	7c2c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a440:	2b02      	cmp	r3, #2
    a442:	d0f8      	beq.n	a436 <sched_after_mstr_free_slot_get+0x66>
    a444:	e7e6      	b.n	a414 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a446:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a44a:	2aff      	cmp	r2, #255	; 0xff
    a44c:	d04e      	beq.n	a4ec <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a44e:	2a06      	cmp	r2, #6
    a450:	d9cf      	bls.n	a3f2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a452:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a456:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a458:	429a      	cmp	r2, r3
    a45a:	daca      	bge.n	a3f2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a45c:	3a07      	subs	r2, #7
    a45e:	b292      	uxth	r2, r2
    a460:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a464:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a468:	f7fc fc34 	bl	6cd4 <mem_get>
		if (conn && !conn->role) {
    a46c:	2800      	cmp	r0, #0
    a46e:	d0c0      	beq.n	a3f2 <sched_after_mstr_free_slot_get+0x22>
    a470:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a474:	2b00      	cmp	r3, #0
    a476:	dbbc      	blt.n	a3f2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a478:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a47a:	9a08      	ldr	r2, [sp, #32]
    a47c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a480:	2b00      	cmp	r3, #0
    a482:	da12      	bge.n	a4aa <sched_after_mstr_free_slot_get+0xda>
    a484:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a48a:	4571      	cmp	r1, lr
    a48c:	bf2c      	ite	cs
    a48e:	1852      	addcs	r2, r2, r1
    a490:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a492:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a494:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a496:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a498:	f101 0104 	add.w	r1, r1, #4
    a49c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a49e:	d108      	bne.n	a4b2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a4a0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a4a4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a4a6:	4616      	mov	r6, r2
    a4a8:	e7a3      	b.n	a3f2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a4aa:	4573      	cmp	r3, lr
    a4ac:	bf38      	it	cc
    a4ae:	4673      	movcc	r3, lr
    a4b0:	e7f0      	b.n	a494 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a4b2:	4631      	mov	r1, r6
    a4b4:	4610      	mov	r0, r2
    a4b6:	9305      	str	r3, [sp, #20]
    a4b8:	9204      	str	r2, [sp, #16]
    a4ba:	f7fd fbcf 	bl	7c5c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a4be:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a4c2:	4288      	cmp	r0, r1
    a4c4:	9a04      	ldr	r2, [sp, #16]
    a4c6:	9b05      	ldr	r3, [sp, #20]
    a4c8:	d9ea      	bls.n	a4a0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a4ca:	4813      	ldr	r0, [pc, #76]	; (a518 <sched_after_mstr_free_slot_get+0x148>)
    a4cc:	4434      	add	r4, r6
    a4ce:	fba4 0100 	umull	r0, r1, r4, r0
    a4d2:	2307      	movs	r3, #7
    a4d4:	fb03 1104 	mla	r1, r3, r4, r1
    a4d8:	a307      	add	r3, pc, #28	; (adr r3, a4f8 <sched_after_mstr_free_slot_get+0x128>)
    a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4de:	f7f5 fe99 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a4e2:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a4e4:	6038      	str	r0, [r7, #0]
}
    a4e6:	b00b      	add	sp, #44	; 0x2c
    a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a4ec:	2dff      	cmp	r5, #255	; 0xff
    a4ee:	d1ec      	bne.n	a4ca <sched_after_mstr_free_slot_get+0xfa>
    a4f0:	e7f9      	b.n	a4e6 <sched_after_mstr_free_slot_get+0x116>
    a4f2:	bf00      	nop
    a4f4:	f3af 8000 	nop.w
    a4f8:	3b9aca00 	.word	0x3b9aca00
    a4fc:	00000000 	.word	0x00000000
    a500:	00009815 	.word	0x00009815
    a504:	00014645 	.word	0x00014645
    a508:	00015394 	.word	0x00015394
    a50c:	00016699 	.word	0x00016699
    a510:	000153e3 	.word	0x000153e3
    a514:	000173f8 	.word	0x000173f8
    a518:	1afd498d 	.word	0x1afd498d
    a51c:	200008c8 	.word	0x200008c8

0000a520 <isr_adv_ci_adva_check>:
{
    a520:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a522:	7804      	ldrb	r4, [r0, #0]
    a524:	780a      	ldrb	r2, [r1, #0]
    a526:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a52a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a52e:	d119      	bne.n	a564 <isr_adv_ci_adva_check+0x44>
    a530:	f004 040f 	and.w	r4, r4, #15
    a534:	2c01      	cmp	r4, #1
    a536:	f101 0608 	add.w	r6, r1, #8
    a53a:	f100 0502 	add.w	r5, r0, #2
    a53e:	d008      	beq.n	a552 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a540:	2206      	movs	r2, #6
    a542:	4631      	mov	r1, r6
    a544:	4628      	mov	r0, r5
    a546:	f7f7 fb44 	bl	1bd2 <memcmp>
			 BDADDR_SIZE)) ||
    a54a:	fab0 f080 	clz	r0, r0
    a54e:	0940      	lsrs	r0, r0, #5
    a550:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a552:	2206      	movs	r2, #6
    a554:	4631      	mov	r1, r6
    a556:	4628      	mov	r0, r5
    a558:	f7f7 fb3b 	bl	1bd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a55c:	2800      	cmp	r0, #0
    a55e:	d1ef      	bne.n	a540 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a560:	4620      	mov	r0, r4
    a562:	bd70      	pop	{r4, r5, r6, pc}
    a564:	2000      	movs	r0, #0
}
    a566:	bd70      	pop	{r4, r5, r6, pc}

0000a568 <packet_rx_enqueue>:
{
    a568:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a56a:	4a1e      	ldr	r2, [pc, #120]	; (a5e4 <packet_rx_enqueue+0x7c>)
    a56c:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a570:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a574:	4299      	cmp	r1, r3
    a576:	d10e      	bne.n	a596 <packet_rx_enqueue+0x2e>
    a578:	4b1b      	ldr	r3, [pc, #108]	; (a5e8 <packet_rx_enqueue+0x80>)
    a57a:	9301      	str	r3, [sp, #4]
    a57c:	9300      	str	r3, [sp, #0]
    a57e:	4a1b      	ldr	r2, [pc, #108]	; (a5ec <packet_rx_enqueue+0x84>)
    a580:	4b1b      	ldr	r3, [pc, #108]	; (a5f0 <packet_rx_enqueue+0x88>)
    a582:	491c      	ldr	r1, [pc, #112]	; (a5f4 <packet_rx_enqueue+0x8c>)
    a584:	481c      	ldr	r0, [pc, #112]	; (a5f8 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    a586:	f7f6 fd01 	bl	f8c <printk>
    a58a:	4040      	eors	r0, r0
    a58c:	f380 8811 	msr	BASEPRI, r0
    a590:	f04f 0004 	mov.w	r0, #4
    a594:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a596:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a59a:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a59e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a5a2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a5a6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a5a8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a5aa:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a5ae:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a5b2:	3301      	adds	r3, #1
    a5b4:	b2db      	uxtb	r3, r3
		last = 0;
    a5b6:	429c      	cmp	r4, r3
    a5b8:	bf08      	it	eq
    a5ba:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a5bc:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a5c0:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a5c4:	f7fc fbab 	bl	6d1e <memq_enqueue>
	LL_ASSERT(link);
    a5c8:	b938      	cbnz	r0, a5da <packet_rx_enqueue+0x72>
    a5ca:	4b07      	ldr	r3, [pc, #28]	; (a5e8 <packet_rx_enqueue+0x80>)
    a5cc:	9301      	str	r3, [sp, #4]
    a5ce:	9300      	str	r3, [sp, #0]
    a5d0:	4a06      	ldr	r2, [pc, #24]	; (a5ec <packet_rx_enqueue+0x84>)
    a5d2:	4b07      	ldr	r3, [pc, #28]	; (a5f0 <packet_rx_enqueue+0x88>)
    a5d4:	4907      	ldr	r1, [pc, #28]	; (a5f4 <packet_rx_enqueue+0x8c>)
    a5d6:	4809      	ldr	r0, [pc, #36]	; (a5fc <packet_rx_enqueue+0x94>)
    a5d8:	e7d5      	b.n	a586 <packet_rx_enqueue+0x1e>
}
    a5da:	b002      	add	sp, #8
    a5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a5e0:	f006 bb9c 	b.w	10d1c <radio_event_callback>
    a5e4:	200008c8 	.word	0x200008c8
    a5e8:	00014645 	.word	0x00014645
    a5ec:	00015394 	.word	0x00015394
    a5f0:	0001682a 	.word	0x0001682a
    a5f4:	000153e3 	.word	0x000153e3
    a5f8:	000170f0 	.word	0x000170f0
    a5fc:	00016913 	.word	0x00016913

0000a600 <isr_scan_tgta_check>:
{
    a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a604:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a606:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a608:	f101 0808 	add.w	r8, r1, #8
{
    a60c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a60e:	09c0      	lsrs	r0, r0, #7
    a610:	4641      	mov	r1, r8
{
    a612:	4691      	mov	r9, r2
    a614:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a616:	f007 f81d 	bl	11654 <ctrl_rl_addr_resolve>
    a61a:	4604      	mov	r4, r0
    a61c:	b9d8      	cbnz	r0, a656 <isr_scan_tgta_check+0x56>
    a61e:	4f1c      	ldr	r7, [pc, #112]	; (a690 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a620:	f1ba 0f00 	cmp.w	sl, #0
    a624:	d10e      	bne.n	a644 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a626:	782b      	ldrb	r3, [r5, #0]
    a628:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a62c:	09db      	lsrs	r3, r3, #7
    a62e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a632:	d113      	bne.n	a65c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a634:	2206      	movs	r2, #6
    a636:	4641      	mov	r1, r8
    a638:	4816      	ldr	r0, [pc, #88]	; (a694 <isr_scan_tgta_check+0x94>)
    a63a:	f7f7 faca 	bl	1bd2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a63e:	b968      	cbnz	r0, a65c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a640:	2001      	movs	r0, #1
    a642:	e012      	b.n	a66a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a644:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a648:	07db      	lsls	r3, r3, #31
    a64a:	d5ec      	bpl.n	a626 <isr_scan_tgta_check+0x26>
    a64c:	4648      	mov	r0, r9
    a64e:	f006 fd5d 	bl	1110c <ctrl_lrpa_get>
    a652:	2800      	cmp	r0, #0
    a654:	d0e7      	beq.n	a626 <isr_scan_tgta_check+0x26>
}
    a656:	4620      	mov	r0, r4
    a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a65c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a660:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a664:	f010 0002 	ands.w	r0, r0, #2
    a668:	d101      	bne.n	a66e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a66a:	4604      	mov	r4, r0
    a66c:	e7f3      	b.n	a656 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a66e:	f995 3000 	ldrsb.w	r3, [r5]
    a672:	2b00      	cmp	r3, #0
    a674:	da09      	bge.n	a68a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a676:	7b6b      	ldrb	r3, [r5, #13]
    a678:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a67c:	2b40      	cmp	r3, #64	; 0x40
    a67e:	d104      	bne.n	a68a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a680:	2e00      	cmp	r6, #0
    a682:	d0dd      	beq.n	a640 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a684:	2001      	movs	r0, #1
    a686:	7030      	strb	r0, [r6, #0]
    a688:	e7ef      	b.n	a66a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a68a:	2000      	movs	r0, #0
    a68c:	e7ed      	b.n	a66a <isr_scan_tgta_check+0x6a>
    a68e:	bf00      	nop
    a690:	200008c8 	.word	0x200008c8
    a694:	200009ac 	.word	0x200009ac

0000a698 <isr_rx_scan_report>:
{
    a698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a69c:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a69e:	2003      	movs	r0, #3
{
    a6a0:	460f      	mov	r7, r1
    a6a2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a6a4:	f7ff f8f6 	bl	9894 <packet_rx_reserve_get>
	if (node_rx == 0) {
    a6a8:	4604      	mov	r4, r0
    a6aa:	2800      	cmp	r0, #0
    a6ac:	d03e      	beq.n	a72c <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    a6ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a6b2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a6b4:	4b1e      	ldr	r3, [pc, #120]	; (a730 <isr_rx_scan_report+0x98>)
    a6b6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a6ba:	075a      	lsls	r2, r3, #29
    a6bc:	d032      	beq.n	a724 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    a6be:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a6c2:	b2da      	uxtb	r2, r3
    a6c4:	2a01      	cmp	r2, #1
    a6c6:	d010      	beq.n	a6ea <isr_rx_scan_report+0x52>
    a6c8:	2a04      	cmp	r2, #4
    a6ca:	d00f      	beq.n	a6ec <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    a6cc:	4b19      	ldr	r3, [pc, #100]	; (a734 <isr_rx_scan_report+0x9c>)
    a6ce:	9301      	str	r3, [sp, #4]
    a6d0:	9300      	str	r3, [sp, #0]
    a6d2:	4a19      	ldr	r2, [pc, #100]	; (a738 <isr_rx_scan_report+0xa0>)
    a6d4:	4b19      	ldr	r3, [pc, #100]	; (a73c <isr_rx_scan_report+0xa4>)
    a6d6:	491a      	ldr	r1, [pc, #104]	; (a740 <isr_rx_scan_report+0xa8>)
    a6d8:	481a      	ldr	r0, [pc, #104]	; (a744 <isr_rx_scan_report+0xac>)
    a6da:	f7f6 fc57 	bl	f8c <printk>
    a6de:	4040      	eors	r0, r0
    a6e0:	f380 8811 	msr	BASEPRI, r0
    a6e4:	f04f 0004 	mov.w	r0, #4
    a6e8:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    a6ea:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    a6ec:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a6f0:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    a6f2:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a6f6:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    a6fa:	f1b9 0f00 	cmp.w	r9, #0
    a6fe:	d013      	beq.n	a728 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a700:	f007 fd34 	bl	1216c <radio_rssi_get>
			     pdu_adv_rx->len] =
    a704:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a708:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a70c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    a70e:	442b      	add	r3, r5
    a710:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a712:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    a714:	441d      	add	r5, r3
    a716:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    a718:	f7ff ff26 	bl	a568 <packet_rx_enqueue>
	return 0;
    a71c:	2000      	movs	r0, #0
}
    a71e:	b003      	add	sp, #12
    a720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a724:	2302      	movs	r3, #2
    a726:	e7e1      	b.n	a6ec <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    a728:	207f      	movs	r0, #127	; 0x7f
    a72a:	e7ed      	b.n	a708 <isr_rx_scan_report+0x70>
		return 1;
    a72c:	2001      	movs	r0, #1
    a72e:	e7f6      	b.n	a71e <isr_rx_scan_report+0x86>
    a730:	200008c8 	.word	0x200008c8
    a734:	00014645 	.word	0x00014645
    a738:	00015394 	.word	0x00015394
    a73c:	000164c0 	.word	0x000164c0
    a740:	000153e3 	.word	0x000153e3
    a744:	00015333 	.word	0x00015333

0000a748 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a748:	4a0b      	ldr	r2, [pc, #44]	; (a778 <rx_fc_lock+0x30>)
    a74a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a74e:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a752:	4299      	cmp	r1, r3
    a754:	d10e      	bne.n	a774 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a756:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a75a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a75e:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a762:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a766:	3301      	adds	r3, #1
    a768:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a76a:	2b03      	cmp	r3, #3
    a76c:	bf08      	it	eq
    a76e:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a770:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a774:	4770      	bx	lr
    a776:	bf00      	nop
    a778:	200008c8 	.word	0x200008c8

0000a77c <ticker_success_assert>:
{
    a77c:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a77e:	b170      	cbz	r0, a79e <ticker_success_assert+0x22>
    a780:	4b08      	ldr	r3, [pc, #32]	; (a7a4 <ticker_success_assert+0x28>)
    a782:	9301      	str	r3, [sp, #4]
    a784:	9300      	str	r3, [sp, #0]
    a786:	4a08      	ldr	r2, [pc, #32]	; (a7a8 <ticker_success_assert+0x2c>)
    a788:	4b08      	ldr	r3, [pc, #32]	; (a7ac <ticker_success_assert+0x30>)
    a78a:	4909      	ldr	r1, [pc, #36]	; (a7b0 <ticker_success_assert+0x34>)
    a78c:	4809      	ldr	r0, [pc, #36]	; (a7b4 <ticker_success_assert+0x38>)
    a78e:	f7f6 fbfd 	bl	f8c <printk>
    a792:	4040      	eors	r0, r0
    a794:	f380 8811 	msr	BASEPRI, r0
    a798:	f04f 0004 	mov.w	r0, #4
    a79c:	df02      	svc	2
}
    a79e:	b003      	add	sp, #12
    a7a0:	f85d fb04 	ldr.w	pc, [sp], #4
    a7a4:	00014645 	.word	0x00014645
    a7a8:	00015394 	.word	0x00015394
    a7ac:	000165a9 	.word	0x000165a9
    a7b0:	000153e3 	.word	0x000153e3
    a7b4:	00017510 	.word	0x00017510

0000a7b8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a7b8:	2801      	cmp	r0, #1
{
    a7ba:	b507      	push	{r0, r1, r2, lr}
    a7bc:	4b11      	ldr	r3, [pc, #68]	; (a804 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a7be:	d116      	bne.n	a7ee <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    a7c0:	7c9a      	ldrb	r2, [r3, #18]
    a7c2:	2a05      	cmp	r2, #5
    a7c4:	d104      	bne.n	a7d0 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    a7c6:	2200      	movs	r2, #0
    a7c8:	749a      	strb	r2, [r3, #18]
}
    a7ca:	b003      	add	sp, #12
    a7cc:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a7d0:	4b0d      	ldr	r3, [pc, #52]	; (a808 <ticker_stop_adv_assert+0x50>)
    a7d2:	9301      	str	r3, [sp, #4]
    a7d4:	9300      	str	r3, [sp, #0]
    a7d6:	4a0d      	ldr	r2, [pc, #52]	; (a80c <ticker_stop_adv_assert+0x54>)
    a7d8:	4b0d      	ldr	r3, [pc, #52]	; (a810 <ticker_stop_adv_assert+0x58>)
    a7da:	490e      	ldr	r1, [pc, #56]	; (a814 <ticker_stop_adv_assert+0x5c>)
    a7dc:	480e      	ldr	r0, [pc, #56]	; (a818 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    a7de:	f7f6 fbd5 	bl	f8c <printk>
    a7e2:	4040      	eors	r0, r0
    a7e4:	f380 8811 	msr	BASEPRI, r0
    a7e8:	f04f 0004 	mov.w	r0, #4
    a7ec:	df02      	svc	2
    a7ee:	7c1b      	ldrb	r3, [r3, #16]
    a7f0:	2b05      	cmp	r3, #5
    a7f2:	d1ea      	bne.n	a7ca <ticker_stop_adv_assert+0x12>
    a7f4:	4b04      	ldr	r3, [pc, #16]	; (a808 <ticker_stop_adv_assert+0x50>)
    a7f6:	9301      	str	r3, [sp, #4]
    a7f8:	9300      	str	r3, [sp, #0]
    a7fa:	4a04      	ldr	r2, [pc, #16]	; (a80c <ticker_stop_adv_assert+0x54>)
    a7fc:	4b04      	ldr	r3, [pc, #16]	; (a810 <ticker_stop_adv_assert+0x58>)
    a7fe:	4905      	ldr	r1, [pc, #20]	; (a814 <ticker_stop_adv_assert+0x5c>)
    a800:	4806      	ldr	r0, [pc, #24]	; (a81c <ticker_stop_adv_assert+0x64>)
    a802:	e7ec      	b.n	a7de <ticker_stop_adv_assert+0x26>
    a804:	200008c8 	.word	0x200008c8
    a808:	00014645 	.word	0x00014645
    a80c:	00015394 	.word	0x00015394
    a810:	000165bf 	.word	0x000165bf
    a814:	000153e3 	.word	0x000153e3
    a818:	00015333 	.word	0x00015333
    a81c:	00017492 	.word	0x00017492

0000a820 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    a820:	2801      	cmp	r0, #1
{
    a822:	b507      	push	{r0, r1, r2, lr}
    a824:	4b11      	ldr	r3, [pc, #68]	; (a86c <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    a826:	d116      	bne.n	a856 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    a828:	7c9a      	ldrb	r2, [r3, #18]
    a82a:	2a06      	cmp	r2, #6
    a82c:	d104      	bne.n	a838 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    a82e:	2200      	movs	r2, #0
    a830:	749a      	strb	r2, [r3, #18]
}
    a832:	b003      	add	sp, #12
    a834:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    a838:	4b0d      	ldr	r3, [pc, #52]	; (a870 <ticker_stop_scan_assert+0x50>)
    a83a:	9301      	str	r3, [sp, #4]
    a83c:	9300      	str	r3, [sp, #0]
    a83e:	4a0d      	ldr	r2, [pc, #52]	; (a874 <ticker_stop_scan_assert+0x54>)
    a840:	4b0d      	ldr	r3, [pc, #52]	; (a878 <ticker_stop_scan_assert+0x58>)
    a842:	490e      	ldr	r1, [pc, #56]	; (a87c <ticker_stop_scan_assert+0x5c>)
    a844:	480e      	ldr	r0, [pc, #56]	; (a880 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    a846:	f7f6 fba1 	bl	f8c <printk>
    a84a:	4040      	eors	r0, r0
    a84c:	f380 8811 	msr	BASEPRI, r0
    a850:	f04f 0004 	mov.w	r0, #4
    a854:	df02      	svc	2
    a856:	7c1b      	ldrb	r3, [r3, #16]
    a858:	2b06      	cmp	r3, #6
    a85a:	d1ea      	bne.n	a832 <ticker_stop_scan_assert+0x12>
    a85c:	4b04      	ldr	r3, [pc, #16]	; (a870 <ticker_stop_scan_assert+0x50>)
    a85e:	9301      	str	r3, [sp, #4]
    a860:	9300      	str	r3, [sp, #0]
    a862:	4a04      	ldr	r2, [pc, #16]	; (a874 <ticker_stop_scan_assert+0x54>)
    a864:	4b04      	ldr	r3, [pc, #16]	; (a878 <ticker_stop_scan_assert+0x58>)
    a866:	4905      	ldr	r1, [pc, #20]	; (a87c <ticker_stop_scan_assert+0x5c>)
    a868:	4806      	ldr	r0, [pc, #24]	; (a884 <ticker_stop_scan_assert+0x64>)
    a86a:	e7ec      	b.n	a846 <ticker_stop_scan_assert+0x26>
    a86c:	200008c8 	.word	0x200008c8
    a870:	00014645 	.word	0x00014645
    a874:	00015394 	.word	0x00015394
    a878:	000165d6 	.word	0x000165d6
    a87c:	000153e3 	.word	0x000153e3
    a880:	00015333 	.word	0x00015333
    a884:	000174d1 	.word	0x000174d1

0000a888 <ticker_update_adv_assert>:
{
    a888:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a88a:	b190      	cbz	r0, a8b2 <ticker_update_adv_assert+0x2a>
    a88c:	4b0a      	ldr	r3, [pc, #40]	; (a8b8 <ticker_update_adv_assert+0x30>)
    a88e:	7c9b      	ldrb	r3, [r3, #18]
    a890:	2b05      	cmp	r3, #5
    a892:	d00e      	beq.n	a8b2 <ticker_update_adv_assert+0x2a>
    a894:	4b09      	ldr	r3, [pc, #36]	; (a8bc <ticker_update_adv_assert+0x34>)
    a896:	9301      	str	r3, [sp, #4]
    a898:	9300      	str	r3, [sp, #0]
    a89a:	4a09      	ldr	r2, [pc, #36]	; (a8c0 <ticker_update_adv_assert+0x38>)
    a89c:	4b09      	ldr	r3, [pc, #36]	; (a8c4 <ticker_update_adv_assert+0x3c>)
    a89e:	490a      	ldr	r1, [pc, #40]	; (a8c8 <ticker_update_adv_assert+0x40>)
    a8a0:	480a      	ldr	r0, [pc, #40]	; (a8cc <ticker_update_adv_assert+0x44>)
    a8a2:	f7f6 fb73 	bl	f8c <printk>
    a8a6:	4040      	eors	r0, r0
    a8a8:	f380 8811 	msr	BASEPRI, r0
    a8ac:	f04f 0004 	mov.w	r0, #4
    a8b0:	df02      	svc	2
}
    a8b2:	b003      	add	sp, #12
    a8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8b8:	200008c8 	.word	0x200008c8
    a8bc:	00014645 	.word	0x00014645
    a8c0:	00015394 	.word	0x00015394
    a8c4:	000165ee 	.word	0x000165ee
    a8c8:	000153e3 	.word	0x000153e3
    a8cc:	0001753d 	.word	0x0001753d

0000a8d0 <ticker_update_slave_assert>:
{
    a8d0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    a8d2:	b198      	cbz	r0, a8fc <ticker_update_slave_assert+0x2c>
    a8d4:	4b0b      	ldr	r3, [pc, #44]	; (a904 <ticker_update_slave_assert+0x34>)
    a8d6:	7c9b      	ldrb	r3, [r3, #18]
    a8d8:	b2c9      	uxtb	r1, r1
    a8da:	4299      	cmp	r1, r3
    a8dc:	d00e      	beq.n	a8fc <ticker_update_slave_assert+0x2c>
    a8de:	4b0a      	ldr	r3, [pc, #40]	; (a908 <ticker_update_slave_assert+0x38>)
    a8e0:	9301      	str	r3, [sp, #4]
    a8e2:	9300      	str	r3, [sp, #0]
    a8e4:	4a09      	ldr	r2, [pc, #36]	; (a90c <ticker_update_slave_assert+0x3c>)
    a8e6:	4b0a      	ldr	r3, [pc, #40]	; (a910 <ticker_update_slave_assert+0x40>)
    a8e8:	490a      	ldr	r1, [pc, #40]	; (a914 <ticker_update_slave_assert+0x44>)
    a8ea:	480b      	ldr	r0, [pc, #44]	; (a918 <ticker_update_slave_assert+0x48>)
    a8ec:	f7f6 fb4e 	bl	f8c <printk>
    a8f0:	4040      	eors	r0, r0
    a8f2:	f380 8811 	msr	BASEPRI, r0
    a8f6:	f04f 0004 	mov.w	r0, #4
    a8fa:	df02      	svc	2
}
    a8fc:	b003      	add	sp, #12
    a8fe:	f85d fb04 	ldr.w	pc, [sp], #4
    a902:	bf00      	nop
    a904:	200008c8 	.word	0x200008c8
    a908:	00014645 	.word	0x00014645
    a90c:	00015394 	.word	0x00015394
    a910:	00016607 	.word	0x00016607
    a914:	000153e3 	.word	0x000153e3
    a918:	0001758c 	.word	0x0001758c

0000a91c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    a91c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    a91e:	b170      	cbz	r0, a93e <ticker_op_latency_cancelled+0x22>
    a920:	4b0b      	ldr	r3, [pc, #44]	; (a950 <ticker_op_latency_cancelled+0x34>)
    a922:	9301      	str	r3, [sp, #4]
    a924:	9300      	str	r3, [sp, #0]
    a926:	4a0b      	ldr	r2, [pc, #44]	; (a954 <ticker_op_latency_cancelled+0x38>)
    a928:	4b0b      	ldr	r3, [pc, #44]	; (a958 <ticker_op_latency_cancelled+0x3c>)
    a92a:	490c      	ldr	r1, [pc, #48]	; (a95c <ticker_op_latency_cancelled+0x40>)
    a92c:	480c      	ldr	r0, [pc, #48]	; (a960 <ticker_op_latency_cancelled+0x44>)
    a92e:	f7f6 fb2d 	bl	f8c <printk>
    a932:	4040      	eors	r0, r0
    a934:	f380 8811 	msr	BASEPRI, r0
    a938:	f04f 0004 	mov.w	r0, #4
    a93c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    a93e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    a942:	f360 0341 	bfi	r3, r0, #1, #1
    a946:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    a94a:	b003      	add	sp, #12
    a94c:	f85d fb04 	ldr.w	pc, [sp], #4
    a950:	00014645 	.word	0x00014645
    a954:	00015394 	.word	0x00015394
    a958:	000168e5 	.word	0x000168e5
    a95c:	000153e3 	.word	0x000153e3
    a960:	0001745e 	.word	0x0001745e

0000a964 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    a964:	4b04      	ldr	r3, [pc, #16]	; (a978 <ticker_job_disable+0x14>)
    a966:	7d1b      	ldrb	r3, [r3, #20]
    a968:	b123      	cbz	r3, a974 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    a96a:	2101      	movs	r1, #1
    a96c:	2200      	movs	r2, #0
    a96e:	4608      	mov	r0, r1
    a970:	f7fc ba1e 	b.w	6db0 <mayfly_enable>
    a974:	4770      	bx	lr
    a976:	bf00      	nop
    a978:	200008c8 	.word	0x200008c8

0000a97c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a97c:	2806      	cmp	r0, #6
{
    a97e:	b510      	push	{r4, lr}
    a980:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a982:	d90a      	bls.n	a99a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a984:	4b09      	ldr	r3, [pc, #36]	; (a9ac <hdr_conn_get+0x30>)
    a986:	1fc2      	subs	r2, r0, #7
    a988:	b292      	uxth	r2, r2
    a98a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a98e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    a992:	f7fc f99f 	bl	6cd4 <mem_get>
    a996:	6020      	str	r0, [r4, #0]
    a998:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a99a:	2805      	cmp	r0, #5
    a99c:	d004      	beq.n	a9a8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    a99e:	2806      	cmp	r0, #6
	return NULL;
    a9a0:	4803      	ldr	r0, [pc, #12]	; (a9b0 <hdr_conn_get+0x34>)
    a9a2:	bf18      	it	ne
    a9a4:	2000      	movne	r0, #0
    a9a6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    a9a8:	4802      	ldr	r0, [pc, #8]	; (a9b4 <hdr_conn_get+0x38>)
}
    a9aa:	bd10      	pop	{r4, pc}
    a9ac:	200008c8 	.word	0x200008c8
    a9b0:	20000998 	.word	0x20000998
    a9b4:	200008e0 	.word	0x200008e0

0000a9b8 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    a9b8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    a9ba:	4b07      	ldr	r3, [pc, #28]	; (a9d8 <event_stop.part.10+0x20>)
    a9bc:	9301      	str	r3, [sp, #4]
    a9be:	9300      	str	r3, [sp, #0]
    a9c0:	4a06      	ldr	r2, [pc, #24]	; (a9dc <event_stop.part.10+0x24>)
    a9c2:	4b07      	ldr	r3, [pc, #28]	; (a9e0 <event_stop.part.10+0x28>)
    a9c4:	4907      	ldr	r1, [pc, #28]	; (a9e4 <event_stop.part.10+0x2c>)
    a9c6:	4808      	ldr	r0, [pc, #32]	; (a9e8 <event_stop.part.10+0x30>)
    a9c8:	f7f6 fae0 	bl	f8c <printk>
    a9cc:	4040      	eors	r0, r0
    a9ce:	f380 8811 	msr	BASEPRI, r0
    a9d2:	f04f 0004 	mov.w	r0, #4
    a9d6:	df02      	svc	2
    a9d8:	00014645 	.word	0x00014645
    a9dc:	00015394 	.word	0x00015394
    a9e0:	00016706 	.word	0x00016706
    a9e4:	000153e3 	.word	0x000153e3
    a9e8:	00017073 	.word	0x00017073

0000a9ec <event_stop>:
	s_mfy_radio_stop.param = context;
    a9ec:	4a06      	ldr	r2, [pc, #24]	; (aa08 <event_stop+0x1c>)
{
    a9ee:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    a9f0:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a9f2:	4613      	mov	r3, r2
    a9f4:	2200      	movs	r2, #0
    a9f6:	4611      	mov	r1, r2
    a9f8:	4610      	mov	r0, r2
    a9fa:	f7fc fa01 	bl	6e00 <mayfly_enqueue>
	LL_ASSERT(!retval);
    a9fe:	b108      	cbz	r0, aa04 <event_stop+0x18>
    aa00:	f7ff ffda 	bl	a9b8 <event_stop.part.10>
    aa04:	bd08      	pop	{r3, pc}
    aa06:	bf00      	nop
    aa08:	20003d70 	.word	0x20003d70

0000aa0c <event_active>:
{
    aa0c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa0e:	2200      	movs	r2, #0
    aa10:	4b0b      	ldr	r3, [pc, #44]	; (aa40 <event_active+0x34>)
    aa12:	4611      	mov	r1, r2
    aa14:	4610      	mov	r0, r2
    aa16:	f7fc f9f3 	bl	6e00 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aa1a:	b170      	cbz	r0, aa3a <event_active+0x2e>
    aa1c:	4b09      	ldr	r3, [pc, #36]	; (aa44 <event_active+0x38>)
    aa1e:	9301      	str	r3, [sp, #4]
    aa20:	9300      	str	r3, [sp, #0]
    aa22:	4a09      	ldr	r2, [pc, #36]	; (aa48 <event_active+0x3c>)
    aa24:	4b09      	ldr	r3, [pc, #36]	; (aa4c <event_active+0x40>)
    aa26:	490a      	ldr	r1, [pc, #40]	; (aa50 <event_active+0x44>)
    aa28:	480a      	ldr	r0, [pc, #40]	; (aa54 <event_active+0x48>)
    aa2a:	f7f6 faaf 	bl	f8c <printk>
    aa2e:	4040      	eors	r0, r0
    aa30:	f380 8811 	msr	BASEPRI, r0
    aa34:	f04f 0004 	mov.w	r0, #4
    aa38:	df02      	svc	2
}
    aa3a:	b003      	add	sp, #12
    aa3c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa40:	20003d40 	.word	0x20003d40
    aa44:	00014645 	.word	0x00014645
    aa48:	00015394 	.word	0x00015394
    aa4c:	00016636 	.word	0x00016636
    aa50:	000153e3 	.word	0x000153e3
    aa54:	00017073 	.word	0x00017073

0000aa58 <event_xtal>:
{
    aa58:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    aa5a:	2200      	movs	r2, #0
    aa5c:	4b0b      	ldr	r3, [pc, #44]	; (aa8c <event_xtal+0x34>)
    aa5e:	4611      	mov	r1, r2
    aa60:	4610      	mov	r0, r2
    aa62:	f7fc f9cd 	bl	6e00 <mayfly_enqueue>
	LL_ASSERT(!retval);
    aa66:	b170      	cbz	r0, aa86 <event_xtal+0x2e>
    aa68:	4b09      	ldr	r3, [pc, #36]	; (aa90 <event_xtal+0x38>)
    aa6a:	9301      	str	r3, [sp, #4]
    aa6c:	9300      	str	r3, [sp, #0]
    aa6e:	4a09      	ldr	r2, [pc, #36]	; (aa94 <event_xtal+0x3c>)
    aa70:	4b09      	ldr	r3, [pc, #36]	; (aa98 <event_xtal+0x40>)
    aa72:	490a      	ldr	r1, [pc, #40]	; (aa9c <event_xtal+0x44>)
    aa74:	480a      	ldr	r0, [pc, #40]	; (aaa0 <event_xtal+0x48>)
    aa76:	f7f6 fa89 	bl	f8c <printk>
    aa7a:	4040      	eors	r0, r0
    aa7c:	f380 8811 	msr	BASEPRI, r0
    aa80:	f04f 0004 	mov.w	r0, #4
    aa84:	df02      	svc	2
}
    aa86:	b003      	add	sp, #12
    aa88:	f85d fb04 	ldr.w	pc, [sp], #4
    aa8c:	20003dc0 	.word	0x20003dc0
    aa90:	00014645 	.word	0x00014645
    aa94:	00015394 	.word	0x00015394
    aa98:	00016652 	.word	0x00016652
    aa9c:	000153e3 	.word	0x000153e3
    aaa0:	00017073 	.word	0x00017073

0000aaa4 <mayfly_radio_active>:
{
    aaa4:	b507      	push	{r0, r1, r2, lr}
    aaa6:	4a12      	ldr	r2, [pc, #72]	; (aaf0 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    aaa8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    aaaa:	b140      	cbz	r0, aabe <mayfly_radio_active+0x1a>
		if (s_active++) {
    aaac:	1c59      	adds	r1, r3, #1
    aaae:	7011      	strb	r1, [r2, #0]
    aab0:	b9d3      	cbnz	r3, aae8 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    aab2:	2001      	movs	r0, #1
}
    aab4:	b003      	add	sp, #12
    aab6:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    aaba:	f006 b92d 	b.w	10d18 <radio_active_callback>
		LL_ASSERT(s_active);
    aabe:	b973      	cbnz	r3, aade <mayfly_radio_active+0x3a>
    aac0:	4b0c      	ldr	r3, [pc, #48]	; (aaf4 <mayfly_radio_active+0x50>)
    aac2:	9301      	str	r3, [sp, #4]
    aac4:	9300      	str	r3, [sp, #0]
    aac6:	4a0c      	ldr	r2, [pc, #48]	; (aaf8 <mayfly_radio_active+0x54>)
    aac8:	4b0c      	ldr	r3, [pc, #48]	; (aafc <mayfly_radio_active+0x58>)
    aaca:	490d      	ldr	r1, [pc, #52]	; (ab00 <mayfly_radio_active+0x5c>)
    aacc:	480d      	ldr	r0, [pc, #52]	; (ab04 <mayfly_radio_active+0x60>)
    aace:	f7f6 fa5d 	bl	f8c <printk>
    aad2:	4040      	eors	r0, r0
    aad4:	f380 8811 	msr	BASEPRI, r0
    aad8:	f04f 0004 	mov.w	r0, #4
    aadc:	df02      	svc	2
		if (--s_active) {
    aade:	3b01      	subs	r3, #1
    aae0:	b2db      	uxtb	r3, r3
    aae2:	7013      	strb	r3, [r2, #0]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d0e5      	beq.n	aab4 <mayfly_radio_active+0x10>
}
    aae8:	b003      	add	sp, #12
    aaea:	f85d fb04 	ldr.w	pc, [sp], #4
    aaee:	bf00      	nop
    aaf0:	20000a6c 	.word	0x20000a6c
    aaf4:	00014645 	.word	0x00014645
    aaf8:	00015394 	.word	0x00015394
    aafc:	00016622 	.word	0x00016622
    ab00:	000153e3 	.word	0x000153e3
    ab04:	00016fc8 	.word	0x00016fc8

0000ab08 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ab08:	2000      	movs	r0, #0
    ab0a:	f7ff bfcb 	b.w	aaa4 <mayfly_radio_active>
	...

0000ab10 <mayfly_radio_stop>:
{
    ab10:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ab12:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ab14:	1f03      	subs	r3, r0, #4
    ab16:	2b01      	cmp	r3, #1
    ab18:	d90e      	bls.n	ab38 <mayfly_radio_stop+0x28>
    ab1a:	4b11      	ldr	r3, [pc, #68]	; (ab60 <mayfly_radio_stop+0x50>)
    ab1c:	9301      	str	r3, [sp, #4]
    ab1e:	9300      	str	r3, [sp, #0]
    ab20:	4a10      	ldr	r2, [pc, #64]	; (ab64 <mayfly_radio_stop+0x54>)
    ab22:	4b11      	ldr	r3, [pc, #68]	; (ab68 <mayfly_radio_stop+0x58>)
    ab24:	4911      	ldr	r1, [pc, #68]	; (ab6c <mayfly_radio_stop+0x5c>)
    ab26:	4812      	ldr	r0, [pc, #72]	; (ab70 <mayfly_radio_stop+0x60>)
    ab28:	f7f6 fa30 	bl	f8c <printk>
    ab2c:	4040      	eors	r0, r0
    ab2e:	f380 8811 	msr	BASEPRI, r0
    ab32:	f04f 0004 	mov.w	r0, #4
    ab36:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ab38:	4a0e      	ldr	r2, [pc, #56]	; (ab74 <mayfly_radio_stop+0x64>)
    ab3a:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ab3c:	b143      	cbz	r3, ab50 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ab3e:	3b04      	subs	r3, #4
    ab40:	2b01      	cmp	r3, #1
    ab42:	d905      	bls.n	ab50 <mayfly_radio_stop+0x40>
			_radio.state = state;
    ab44:	7510      	strb	r0, [r2, #20]
}
    ab46:	b003      	add	sp, #12
    ab48:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    ab4c:	f007 ba86 	b.w	1205c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ab50:	f007 fab6 	bl	120c0 <radio_is_idle>
    ab54:	2800      	cmp	r0, #0
    ab56:	d0f6      	beq.n	ab46 <mayfly_radio_stop+0x36>
}
    ab58:	b003      	add	sp, #12
    ab5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab5e:	bf00      	nop
    ab60:	00014645 	.word	0x00014645
    ab64:	00015394 	.word	0x00015394
    ab68:	000166f4 	.word	0x000166f4
    ab6c:	000153e3 	.word	0x000153e3
    ab70:	00016ff2 	.word	0x00016ff2
    ab74:	200008c8 	.word	0x200008c8

0000ab78 <pdu_node_tx_release>:
{
    ab78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ab7a:	4a17      	ldr	r2, [pc, #92]	; (abd8 <pdu_node_tx_release+0x60>)
    ab7c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    ab80:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    ab84:	3301      	adds	r3, #1
    ab86:	b2db      	uxtb	r3, r3
		last = 0;
    ab88:	429c      	cmp	r4, r3
    ab8a:	bf08      	it	eq
    ab8c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ab8e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    ab92:	429c      	cmp	r4, r3
    ab94:	d10e      	bne.n	abb4 <pdu_node_tx_release+0x3c>
    ab96:	4b11      	ldr	r3, [pc, #68]	; (abdc <pdu_node_tx_release+0x64>)
    ab98:	9301      	str	r3, [sp, #4]
    ab9a:	9300      	str	r3, [sp, #0]
    ab9c:	4a10      	ldr	r2, [pc, #64]	; (abe0 <pdu_node_tx_release+0x68>)
    ab9e:	4b11      	ldr	r3, [pc, #68]	; (abe4 <pdu_node_tx_release+0x6c>)
    aba0:	4911      	ldr	r1, [pc, #68]	; (abe8 <pdu_node_tx_release+0x70>)
    aba2:	4812      	ldr	r0, [pc, #72]	; (abec <pdu_node_tx_release+0x74>)
    aba4:	f7f6 f9f2 	bl	f8c <printk>
    aba8:	4040      	eors	r0, r0
    abaa:	f380 8811 	msr	BASEPRI, r0
    abae:	f04f 0004 	mov.w	r0, #4
    abb2:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    abb4:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    abb8:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    abbc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    abc0:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    abc4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    abc8:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    abca:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    abce:	b003      	add	sp, #12
    abd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    abd4:	f006 b8a2 	b.w	10d1c <radio_event_callback>
    abd8:	200008c8 	.word	0x200008c8
    abdc:	00014645 	.word	0x00014645
    abe0:	00015394 	.word	0x00015394
    abe4:	0001683c 	.word	0x0001683c
    abe8:	000153e3 	.word	0x000153e3
    abec:	00017143 	.word	0x00017143

0000abf0 <packet_tx_enqueue>:
{
    abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    abf4:	4c24      	ldr	r4, [pc, #144]	; (ac88 <packet_tx_enqueue+0x98>)
{
    abf6:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    abf8:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    abfa:	b12e      	cbz	r6, ac08 <packet_tx_enqueue+0x18>
    abfc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    ac00:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    ac04:	429a      	cmp	r2, r3
    ac06:	d101      	bne.n	ac0c <packet_tx_enqueue+0x1c>
    ac08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ac0c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    ac10:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac14:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    ac18:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    ac1c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac20:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    ac24:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    ac26:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac28:	f7fc f854 	bl	6cd4 <mem_get>
    ac2c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    ac2e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    ac32:	8c1a      	ldrh	r2, [r3, #32]
    ac34:	4282      	cmp	r2, r0
    ac36:	d11f      	bne.n	ac78 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    ac38:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ac3c:	b942      	cbnz	r2, ac50 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    ac3e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    ac42:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    ac46:	b91a      	cbnz	r2, ac50 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    ac48:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    ac4c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    ac50:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    ac54:	b102      	cbz	r2, ac58 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    ac56:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    ac58:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    ac5c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    ac60:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    ac64:	3301      	adds	r3, #1
    ac66:	b2db      	uxtb	r3, r3
			first = 0;
    ac68:	429a      	cmp	r2, r3
    ac6a:	bf08      	it	eq
    ac6c:	2300      	moveq	r3, #0
    ac6e:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    ac70:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    ac74:	b2f6      	uxtb	r6, r6
    ac76:	e7c0      	b.n	abfa <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ac78:	792b      	ldrb	r3, [r5, #4]
    ac7a:	f367 0301 	bfi	r3, r7, #0, #2
    ac7e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    ac80:	4629      	mov	r1, r5
    ac82:	f7ff ff79 	bl	ab78 <pdu_node_tx_release>
    ac86:	e7e9      	b.n	ac5c <packet_tx_enqueue+0x6c>
    ac88:	200008c8 	.word	0x200008c8

0000ac8c <connection_release>:
{
    ac8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ac8e:	2201      	movs	r2, #1
{
    ac90:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ac92:	4611      	mov	r1, r2
    ac94:	2000      	movs	r0, #0
    ac96:	f7fc f88b 	bl	6db0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ac9a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    ac9e:	2100      	movs	r1, #0
    aca0:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aca4:	3207      	adds	r2, #7
	ticker_status =
    aca6:	9300      	str	r3, [sp, #0]
    aca8:	4608      	mov	r0, r1
    acaa:	4b3e      	ldr	r3, [pc, #248]	; (ada4 <connection_release+0x118>)
    acac:	b2d2      	uxtb	r2, r2
    acae:	f7fc ff03 	bl	7ab8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    acb2:	f030 0102 	bics.w	r1, r0, #2
    acb6:	d00e      	beq.n	acd6 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    acb8:	4b3b      	ldr	r3, [pc, #236]	; (ada8 <connection_release+0x11c>)
    acba:	9301      	str	r3, [sp, #4]
    acbc:	9300      	str	r3, [sp, #0]
    acbe:	4a3b      	ldr	r2, [pc, #236]	; (adac <connection_release+0x120>)
    acc0:	4b3b      	ldr	r3, [pc, #236]	; (adb0 <connection_release+0x124>)
    acc2:	493c      	ldr	r1, [pc, #240]	; (adb4 <connection_release+0x128>)
    acc4:	483c      	ldr	r0, [pc, #240]	; (adb8 <connection_release+0x12c>)
    acc6:	f7f6 f961 	bl	f8c <printk>
    acca:	4040      	eors	r0, r0
    accc:	f380 8811 	msr	BASEPRI, r0
    acd0:	f04f 0004 	mov.w	r0, #4
    acd4:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    acd6:	4b39      	ldr	r3, [pc, #228]	; (adbc <connection_release+0x130>)
    acd8:	7d1a      	ldrb	r2, [r3, #20]
    acda:	2a05      	cmp	r2, #5
    acdc:	461d      	mov	r5, r3
    acde:	d11b      	bne.n	ad18 <connection_release+0x8c>
					  conn->handle))) {
    ace0:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ace2:	7c18      	ldrb	r0, [r3, #16]
    ace4:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ace6:	4290      	cmp	r0, r2
    ace8:	d116      	bne.n	ad18 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    acea:	7419      	strb	r1, [r3, #16]
		ticker_status =
    acec:	f242 23fb 	movw	r3, #8955	; 0x22fb
    acf0:	9300      	str	r3, [sp, #0]
    acf2:	2201      	movs	r2, #1
    acf4:	4b2b      	ldr	r3, [pc, #172]	; (ada4 <connection_release+0x118>)
    acf6:	4608      	mov	r0, r1
    acf8:	f7fc fede 	bl	7ab8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    acfc:	f030 0202 	bics.w	r2, r0, #2
    ad00:	d1da      	bne.n	acb8 <connection_release+0x2c>
		ticker_status =
    ad02:	f242 3302 	movw	r3, #8962	; 0x2302
    ad06:	9300      	str	r3, [sp, #0]
    ad08:	4611      	mov	r1, r2
    ad0a:	4b26      	ldr	r3, [pc, #152]	; (ada4 <connection_release+0x118>)
    ad0c:	4610      	mov	r0, r2
    ad0e:	f7fc fed3 	bl	7ab8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad12:	f030 0302 	bics.w	r3, r0, #2
    ad16:	d1cf      	bne.n	acb8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ad18:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ad1c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ad20:	4299      	cmp	r1, r3
    ad22:	d003      	beq.n	ad2c <connection_release+0xa0>
    ad24:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ad28:	4299      	cmp	r1, r3
    ad2a:	d101      	bne.n	ad30 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ad2c:	4e24      	ldr	r6, [pc, #144]	; (adc0 <connection_release+0x134>)
    ad2e:	e012      	b.n	ad56 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ad30:	790b      	ldrb	r3, [r1, #4]
    ad32:	f36f 0301 	bfc	r3, #0, #2
    ad36:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad38:	680b      	ldr	r3, [r1, #0]
    ad3a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ad3e:	8c20      	ldrh	r0, [r4, #32]
    ad40:	f7ff ff1a 	bl	ab78 <pdu_node_tx_release>
    ad44:	e7e8      	b.n	ad18 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad46:	6803      	ldr	r3, [r0, #0]
    ad48:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ad4c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ad50:	4631      	mov	r1, r6
    ad52:	f7fb ffa4 	bl	6c9e <mem_release>
	while ((conn->pkt_tx_head) &&
    ad56:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ad5a:	b118      	cbz	r0, ad64 <connection_release+0xd8>
    ad5c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ad60:	4298      	cmp	r0, r3
    ad62:	d1f0      	bne.n	ad46 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ad64:	2300      	movs	r3, #0
    ad66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ad6a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ad6e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ad72:	b951      	cbnz	r1, ad8a <connection_release+0xfe>
	conn->handle = 0xffff;
    ad74:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ad78:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ad7a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    ad7e:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ad80:	bf08      	it	eq
    ad82:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    ad86:	b002      	add	sp, #8
    ad88:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ad8a:	790b      	ldrb	r3, [r1, #4]
    ad8c:	f36f 0301 	bfc	r3, #0, #2
    ad90:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ad92:	680b      	ldr	r3, [r1, #0]
    ad94:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ad98:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ad9c:	8c20      	ldrh	r0, [r4, #32]
    ad9e:	f7ff feeb 	bl	ab78 <pdu_node_tx_release>
    ada2:	e7e4      	b.n	ad6e <connection_release+0xe2>
    ada4:	0000a77d 	.word	0x0000a77d
    ada8:	00014645 	.word	0x00014645
    adac:	00015394 	.word	0x00015394
    adb0:	00016850 	.word	0x00016850
    adb4:	000153e3 	.word	0x000153e3
    adb8:	00016939 	.word	0x00016939
    adbc:	200008c8 	.word	0x200008c8
    adc0:	20000a24 	.word	0x20000a24

0000adc4 <chan_set>:
	switch (chan) {
    adc4:	2826      	cmp	r0, #38	; 0x26
{
    adc6:	b513      	push	{r0, r1, r4, lr}
    adc8:	4604      	mov	r4, r0
	switch (chan) {
    adca:	d00c      	beq.n	ade6 <chan_set+0x22>
    adcc:	2827      	cmp	r0, #39	; 0x27
    adce:	d00c      	beq.n	adea <chan_set+0x26>
    add0:	2825      	cmp	r0, #37	; 0x25
    add2:	d10c      	bne.n	adee <chan_set+0x2a>
		radio_freq_chan_set(2);
    add4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    add6:	f007 f8bd 	bl	11f54 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    adda:	4620      	mov	r0, r4
}
    addc:	b002      	add	sp, #8
    adde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    ade2:	f007 b8bd 	b.w	11f60 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    ade6:	201a      	movs	r0, #26
    ade8:	e7f5      	b.n	add6 <chan_set+0x12>
		radio_freq_chan_set(80);
    adea:	2050      	movs	r0, #80	; 0x50
    adec:	e7f3      	b.n	add6 <chan_set+0x12>
		if (chan < 11) {
    adee:	280a      	cmp	r0, #10
    adf0:	d802      	bhi.n	adf8 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    adf2:	3002      	adds	r0, #2
    adf4:	0040      	lsls	r0, r0, #1
    adf6:	e7ee      	b.n	add6 <chan_set+0x12>
		} else if (chan < 40) {
    adf8:	2827      	cmp	r0, #39	; 0x27
    adfa:	d801      	bhi.n	ae00 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    adfc:	3003      	adds	r0, #3
    adfe:	e7f9      	b.n	adf4 <chan_set+0x30>
			LL_ASSERT(0);
    ae00:	4b07      	ldr	r3, [pc, #28]	; (ae20 <chan_set+0x5c>)
    ae02:	9301      	str	r3, [sp, #4]
    ae04:	9300      	str	r3, [sp, #0]
    ae06:	4a07      	ldr	r2, [pc, #28]	; (ae24 <chan_set+0x60>)
    ae08:	4b07      	ldr	r3, [pc, #28]	; (ae28 <chan_set+0x64>)
    ae0a:	4908      	ldr	r1, [pc, #32]	; (ae2c <chan_set+0x68>)
    ae0c:	4808      	ldr	r0, [pc, #32]	; (ae30 <chan_set+0x6c>)
    ae0e:	f7f6 f8bd 	bl	f8c <printk>
    ae12:	4040      	eors	r0, r0
    ae14:	f380 8811 	msr	BASEPRI, r0
    ae18:	f04f 0004 	mov.w	r0, #4
    ae1c:	df02      	svc	2
    ae1e:	bf00      	nop
    ae20:	00014645 	.word	0x00014645
    ae24:	00015394 	.word	0x00015394
    ae28:	00016726 	.word	0x00016726
    ae2c:	000153e3 	.word	0x000153e3
    ae30:	00015333 	.word	0x00015333

0000ae34 <adv_setup>:
{
    ae34:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    ae36:	4c31      	ldr	r4, [pc, #196]	; (aefc <adv_setup+0xc8>)
    ae38:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    ae3c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    ae40:	429a      	cmp	r2, r3
    ae42:	d051      	beq.n	aee8 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    ae44:	3301      	adds	r3, #1
    ae46:	b2db      	uxtb	r3, r3
			first = 0;
    ae48:	2b02      	cmp	r3, #2
    ae4a:	bf08      	it	eq
    ae4c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    ae4e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    ae52:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    ae54:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ae58:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    ae5c:	4299      	cmp	r1, r3
    ae5e:	d007      	beq.n	ae70 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    ae60:	3301      	adds	r3, #1
    ae62:	b2db      	uxtb	r3, r3
			first = 0;
    ae64:	2b02      	cmp	r3, #2
    ae66:	bf08      	it	eq
    ae68:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    ae6a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    ae6e:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    ae70:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    ae74:	2327      	movs	r3, #39	; 0x27
    ae76:	212b      	movs	r1, #43	; 0x2b
    ae78:	fb13 1505 	smlabb	r5, r3, r5, r1
    ae7c:	1966      	adds	r6, r4, r5
	if (upd) {
    ae7e:	b142      	cbz	r2, ae92 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    ae80:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    ae84:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    ae88:	2206      	movs	r2, #6
    ae8a:	1cb1      	adds	r1, r6, #2
    ae8c:	307d      	adds	r0, #125	; 0x7d
    ae8e:	f7f6 feb5 	bl	1bfc <memcpy>
	radio_pkt_tx_set(pdu);
    ae92:	4630      	mov	r0, r6
    ae94:	f007 f8c2 	bl	1201c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    ae98:	5d63      	ldrb	r3, [r4, r5]
    ae9a:	f003 030f 	and.w	r3, r3, #15
    ae9e:	2b02      	cmp	r3, #2
    aea0:	d024      	beq.n	aeec <adv_setup+0xb8>
    aea2:	2b07      	cmp	r3, #7
    aea4:	d022      	beq.n	aeec <adv_setup+0xb8>
		_radio.state = STATE_TX;
    aea6:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    aea8:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    aeaa:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    aeac:	f007 f9cc 	bl	12248 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    aeb0:	2000      	movs	r0, #0
    aeb2:	f007 f92d 	bl	12110 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    aeb6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    aeba:	f3c3 0202 	ubfx	r2, r3, #0, #3
    aebe:	b2d3      	uxtb	r3, r2
    aec0:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    aec2:	2000      	movs	r0, #0
    aec4:	07ce      	lsls	r6, r1, #31
    aec6:	f100 0501 	add.w	r5, r0, #1
    aeca:	d514      	bpl.n	aef6 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    aecc:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    aece:	4013      	ands	r3, r2
    aed0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    aed4:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    aed6:	f363 0202 	bfi	r2, r3, #0, #3
    aeda:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    aede:	3025      	adds	r0, #37	; 0x25
}
    aee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    aee4:	f7ff bf6e 	b.w	adc4 <chan_set>
	u8_t upd = 0;
    aee8:	2200      	movs	r2, #0
    aeea:	e7b3      	b.n	ae54 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    aeec:	2303      	movs	r3, #3
    aeee:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    aef0:	f007 f924 	bl	1213c <radio_switch_complete_and_disable>
    aef4:	e7df      	b.n	aeb6 <adv_setup+0x82>
		bitmap >>= 1;
    aef6:	0849      	lsrs	r1, r1, #1
    aef8:	4628      	mov	r0, r5
    aefa:	e7e3      	b.n	aec4 <adv_setup+0x90>
    aefc:	200008c8 	.word	0x200008c8

0000af00 <sched_after_mstr_free_offset_get>:
{
    af00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    af02:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    af04:	aa04      	add	r2, sp, #16
{
    af06:	461c      	mov	r4, r3
    af08:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    af0a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    af0e:	3127      	adds	r1, #39	; 0x27
    af10:	2001      	movs	r0, #1
    af12:	f7ff fa5d 	bl	a3d0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    af16:	6823      	ldr	r3, [r4, #0]
    af18:	b363      	cbz	r3, af74 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    af1a:	9803      	ldr	r0, [sp, #12]
    af1c:	1b83      	subs	r3, r0, r6
    af1e:	021b      	lsls	r3, r3, #8
    af20:	d50e      	bpl.n	af40 <sched_after_mstr_free_offset_get+0x40>
    af22:	4b19      	ldr	r3, [pc, #100]	; (af88 <sched_after_mstr_free_offset_get+0x88>)
    af24:	9301      	str	r3, [sp, #4]
    af26:	9300      	str	r3, [sp, #0]
    af28:	4a18      	ldr	r2, [pc, #96]	; (af8c <sched_after_mstr_free_offset_get+0x8c>)
    af2a:	4b19      	ldr	r3, [pc, #100]	; (af90 <sched_after_mstr_free_offset_get+0x90>)
    af2c:	4919      	ldr	r1, [pc, #100]	; (af94 <sched_after_mstr_free_offset_get+0x94>)
    af2e:	481a      	ldr	r0, [pc, #104]	; (af98 <sched_after_mstr_free_offset_get+0x98>)
    af30:	f7f6 f82c 	bl	f8c <printk>
    af34:	4040      	eors	r0, r0
    af36:	f380 8811 	msr	BASEPRI, r0
    af3a:	f04f 0004 	mov.w	r0, #4
    af3e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    af40:	4631      	mov	r1, r6
    af42:	f7fc fe8b 	bl	7c5c <ticker_ticks_diff_get>
    af46:	4602      	mov	r2, r0
    af48:	4814      	ldr	r0, [pc, #80]	; (af9c <sched_after_mstr_free_offset_get+0x9c>)
    af4a:	2307      	movs	r3, #7
    af4c:	fba2 0100 	umull	r0, r1, r2, r0
    af50:	fb03 1102 	mla	r1, r3, r2, r1
    af54:	a30a      	add	r3, pc, #40	; (adr r3, af80 <sched_after_mstr_free_offset_get+0x80>)
    af56:	e9d3 2300 	ldrd	r2, r3, [r3]
    af5a:	f7f5 f95b 	bl	214 <__aeabi_uldivmod>
    af5e:	6823      	ldr	r3, [r4, #0]
    af60:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    af62:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    af64:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    af66:	db05      	blt.n	af74 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    af68:	f240 40e2 	movw	r0, #1250	; 0x4e2
    af6c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    af6e:	6823      	ldr	r3, [r4, #0]
    af70:	4298      	cmp	r0, r3
    af72:	d301      	bcc.n	af78 <sched_after_mstr_free_offset_get+0x78>
}
    af74:	b004      	add	sp, #16
    af76:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    af78:	1a1b      	subs	r3, r3, r0
    af7a:	6023      	str	r3, [r4, #0]
    af7c:	e7f7      	b.n	af6e <sched_after_mstr_free_offset_get+0x6e>
    af7e:	bf00      	nop
    af80:	3b9aca00 	.word	0x3b9aca00
    af84:	00000000 	.word	0x00000000
    af88:	00014645 	.word	0x00014645
    af8c:	00015394 	.word	0x00015394
    af90:	000166b8 	.word	0x000166b8
    af94:	000153e3 	.word	0x000153e3
    af98:	0001739f 	.word	0x0001739f
    af9c:	1afd498d 	.word	0x1afd498d

0000afa0 <mayfly_sched_win_offset_use>:
{
    afa0:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    afa2:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    afa6:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    afa8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    afac:	68c1      	ldr	r1, [r0, #12]
    afae:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    afb0:	f7ff ffa6 	bl	af00 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    afb4:	a902      	add	r1, sp, #8
    afb6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    afba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    afbe:	f240 42e2 	movw	r2, #1250	; 0x4e2
    afc2:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    afc6:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    afc8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    afcc:	f7f6 fe16 	bl	1bfc <memcpy>
}
    afd0:	b002      	add	sp, #8
    afd2:	bd10      	pop	{r4, pc}

0000afd4 <mayfly_sched_after_mstr_free_offset_get>:
{
    afd4:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    afd6:	4c05      	ldr	r4, [pc, #20]	; (afec <mayfly_sched_after_mstr_free_offset_get+0x18>)
    afd8:	4602      	mov	r2, r0
    afda:	f504 7382 	add.w	r3, r4, #260	; 0x104
    afde:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    afe2:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    afe6:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    afe8:	f7ff bf8a 	b.w	af00 <sched_after_mstr_free_offset_get>
    afec:	200008c8 	.word	0x200008c8

0000aff0 <terminate_ind_rx_enqueue>:
{
    aff0:	b513      	push	{r0, r1, r4, lr}
    aff2:	4603      	mov	r3, r0
    aff4:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    aff6:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    affa:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    affe:	b970      	cbnz	r0, b01e <terminate_ind_rx_enqueue+0x2e>
    b000:	4b16      	ldr	r3, [pc, #88]	; (b05c <terminate_ind_rx_enqueue+0x6c>)
    b002:	9301      	str	r3, [sp, #4]
    b004:	9300      	str	r3, [sp, #0]
    b006:	4a16      	ldr	r2, [pc, #88]	; (b060 <terminate_ind_rx_enqueue+0x70>)
    b008:	4b16      	ldr	r3, [pc, #88]	; (b064 <terminate_ind_rx_enqueue+0x74>)
    b00a:	4917      	ldr	r1, [pc, #92]	; (b068 <terminate_ind_rx_enqueue+0x78>)
    b00c:	4817      	ldr	r0, [pc, #92]	; (b06c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    b00e:	f7f5 ffbd 	bl	f8c <printk>
    b012:	4040      	eors	r0, r0
    b014:	f380 8811 	msr	BASEPRI, r0
    b018:	f04f 0004 	mov.w	r0, #4
    b01c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b01e:	8c1c      	ldrh	r4, [r3, #32]
    b020:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b024:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b028:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b02a:	4a11      	ldr	r2, [pc, #68]	; (b070 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b02c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b030:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b034:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b038:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b03c:	f7fb fe6f 	bl	6d1e <memq_enqueue>
	LL_ASSERT(link);
    b040:	b938      	cbnz	r0, b052 <terminate_ind_rx_enqueue+0x62>
    b042:	4b06      	ldr	r3, [pc, #24]	; (b05c <terminate_ind_rx_enqueue+0x6c>)
    b044:	9301      	str	r3, [sp, #4]
    b046:	9300      	str	r3, [sp, #0]
    b048:	4a05      	ldr	r2, [pc, #20]	; (b060 <terminate_ind_rx_enqueue+0x70>)
    b04a:	4b06      	ldr	r3, [pc, #24]	; (b064 <terminate_ind_rx_enqueue+0x74>)
    b04c:	4906      	ldr	r1, [pc, #24]	; (b068 <terminate_ind_rx_enqueue+0x78>)
    b04e:	4809      	ldr	r0, [pc, #36]	; (b074 <terminate_ind_rx_enqueue+0x84>)
    b050:	e7dd      	b.n	b00e <terminate_ind_rx_enqueue+0x1e>
}
    b052:	b002      	add	sp, #8
    b054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b058:	f005 be60 	b.w	10d1c <radio_event_callback>
    b05c:	00014645 	.word	0x00014645
    b060:	00015394 	.word	0x00015394
    b064:	00016863 	.word	0x00016863
    b068:	000153e3 	.word	0x000153e3
    b06c:	00017425 	.word	0x00017425
    b070:	200008c8 	.word	0x200008c8
    b074:	00016913 	.word	0x00016913

0000b078 <prepare_normal_set>:
{
    b078:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b07a:	6804      	ldr	r4, [r0, #0]
    b07c:	2c00      	cmp	r4, #0
{
    b07e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b080:	da26      	bge.n	b0d0 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b082:	6843      	ldr	r3, [r0, #4]
    b084:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b086:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b088:	429d      	cmp	r5, r3
    b08a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b08e:	bf34      	ite	cc
    b090:	1ae4      	subcc	r4, r4, r3
    b092:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b094:	4b0f      	ldr	r3, [pc, #60]	; (b0d4 <prepare_normal_set+0x5c>)
    b096:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b098:	b2a4      	uxth	r4, r4
		ticker_status =
    b09a:	2300      	movs	r3, #0
    b09c:	9304      	str	r3, [sp, #16]
    b09e:	9303      	str	r3, [sp, #12]
    b0a0:	9302      	str	r3, [sp, #8]
    b0a2:	4618      	mov	r0, r3
    b0a4:	9401      	str	r4, [sp, #4]
    b0a6:	9400      	str	r4, [sp, #0]
    b0a8:	f7fc fcb8 	bl	7a1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b0ac:	f030 0302 	bics.w	r3, r0, #2
    b0b0:	d00e      	beq.n	b0d0 <prepare_normal_set+0x58>
    b0b2:	4b09      	ldr	r3, [pc, #36]	; (b0d8 <prepare_normal_set+0x60>)
    b0b4:	9301      	str	r3, [sp, #4]
    b0b6:	9300      	str	r3, [sp, #0]
    b0b8:	4a08      	ldr	r2, [pc, #32]	; (b0dc <prepare_normal_set+0x64>)
    b0ba:	4b09      	ldr	r3, [pc, #36]	; (b0e0 <prepare_normal_set+0x68>)
    b0bc:	4909      	ldr	r1, [pc, #36]	; (b0e4 <prepare_normal_set+0x6c>)
    b0be:	480a      	ldr	r0, [pc, #40]	; (b0e8 <prepare_normal_set+0x70>)
    b0c0:	f7f5 ff64 	bl	f8c <printk>
    b0c4:	4040      	eors	r0, r0
    b0c6:	f380 8811 	msr	BASEPRI, r0
    b0ca:	f04f 0004 	mov.w	r0, #4
    b0ce:	df02      	svc	2
}
    b0d0:	b009      	add	sp, #36	; 0x24
    b0d2:	bd30      	pop	{r4, r5, pc}
    b0d4:	00009825 	.word	0x00009825
    b0d8:	00014645 	.word	0x00014645
    b0dc:	00015394 	.word	0x00015394
    b0e0:	00016670 	.word	0x00016670
    b0e4:	000153e3 	.word	0x000153e3
    b0e8:	00016939 	.word	0x00016939
    b0ec:	00000000 	.word	0x00000000

0000b0f0 <mayfly_xtal_stop_calc>:
{
    b0f0:	b570      	push	{r4, r5, r6, lr}
    b0f2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b0f4:	2302      	movs	r3, #2
    b0f6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b0f8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b0fa:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0fc:	4e7e      	ldr	r6, [pc, #504]	; (b2f8 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    b0fe:	4d7f      	ldr	r5, [pc, #508]	; (b2fc <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    b100:	930a      	str	r3, [sp, #40]	; 0x28
{
    b102:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b104:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b106:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b10a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b10c:	ab09      	add	r3, sp, #36	; 0x24
    b10e:	9302      	str	r3, [sp, #8]
    b110:	ab0c      	add	r3, sp, #48	; 0x30
    b112:	9300      	str	r3, [sp, #0]
    b114:	9601      	str	r6, [sp, #4]
    b116:	ab0d      	add	r3, sp, #52	; 0x34
    b118:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b11c:	2101      	movs	r1, #1
    b11e:	2000      	movs	r0, #0
    b120:	f7fc fd06 	bl	7b30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b124:	2802      	cmp	r0, #2
    b126:	d014      	beq.n	b152 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b12a:	b1b3      	cbz	r3, b15a <mayfly_xtal_stop_calc+0x6a>
    b12c:	4b74      	ldr	r3, [pc, #464]	; (b300 <mayfly_xtal_stop_calc+0x210>)
    b12e:	9301      	str	r3, [sp, #4]
    b130:	9300      	str	r3, [sp, #0]
    b132:	4a74      	ldr	r2, [pc, #464]	; (b304 <mayfly_xtal_stop_calc+0x214>)
    b134:	4b74      	ldr	r3, [pc, #464]	; (b308 <mayfly_xtal_stop_calc+0x218>)
    b136:	4975      	ldr	r1, [pc, #468]	; (b30c <mayfly_xtal_stop_calc+0x21c>)
    b138:	4875      	ldr	r0, [pc, #468]	; (b310 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    b13a:	f7f5 ff27 	bl	f8c <printk>
    b13e:	4040      	eors	r0, r0
    b140:	f380 8811 	msr	BASEPRI, r0
    b144:	f04f 0004 	mov.w	r0, #4
    b148:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b14a:	2101      	movs	r1, #1
    b14c:	2000      	movs	r0, #0
    b14e:	f7fc fd6d 	bl	7c2c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b154:	2b02      	cmp	r3, #2
    b156:	d0f8      	beq.n	b14a <mayfly_xtal_stop_calc+0x5a>
    b158:	e7e6      	b.n	b128 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b15a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b15e:	2bff      	cmp	r3, #255	; 0xff
    b160:	d004      	beq.n	b16c <mayfly_xtal_stop_calc+0x7c>
    b162:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b166:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b168:	4293      	cmp	r3, r2
    b16a:	dacf      	bge.n	b10c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b16c:	1f5a      	subs	r2, r3, #5
    b16e:	b2d2      	uxtb	r2, r2
    b170:	2af9      	cmp	r2, #249	; 0xf9
    b172:	d805      	bhi.n	b180 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b174:	4a61      	ldr	r2, [pc, #388]	; (b2fc <mayfly_xtal_stop_calc+0x20c>)
    b176:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b17a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b17c:	4293      	cmp	r3, r2
    b17e:	db05      	blt.n	b18c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b180:	2100      	movs	r1, #0
    b182:	2001      	movs	r0, #1
    b184:	f7fe fe92 	bl	9eac <mayfly_xtal_retain>
}
    b188:	b00e      	add	sp, #56	; 0x38
    b18a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b18c:	a90a      	add	r1, sp, #40	; 0x28
    b18e:	b2e0      	uxtb	r0, r4
    b190:	f7ff fbf4 	bl	a97c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b194:	b938      	cbnz	r0, b1a6 <mayfly_xtal_stop_calc+0xb6>
    b196:	4b5a      	ldr	r3, [pc, #360]	; (b300 <mayfly_xtal_stop_calc+0x210>)
    b198:	9301      	str	r3, [sp, #4]
    b19a:	9300      	str	r3, [sp, #0]
    b19c:	4a59      	ldr	r2, [pc, #356]	; (b304 <mayfly_xtal_stop_calc+0x214>)
    b19e:	4b5a      	ldr	r3, [pc, #360]	; (b308 <mayfly_xtal_stop_calc+0x218>)
    b1a0:	495a      	ldr	r1, [pc, #360]	; (b30c <mayfly_xtal_stop_calc+0x21c>)
    b1a2:	485c      	ldr	r0, [pc, #368]	; (b314 <mayfly_xtal_stop_calc+0x224>)
    b1a4:	e7c9      	b.n	b13a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b1a6:	6803      	ldr	r3, [r0, #0]
    b1a8:	6844      	ldr	r4, [r0, #4]
    b1aa:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b1ac:	bfb8      	it	lt
    b1ae:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b1b0:	429c      	cmp	r4, r3
    b1b2:	bf38      	it	cc
    b1b4:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b1b6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b1b8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b1bc:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b1be:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b1c0:	f7ff fbdc 	bl	a97c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b1c4:	4605      	mov	r5, r0
    b1c6:	b938      	cbnz	r0, b1d8 <mayfly_xtal_stop_calc+0xe8>
    b1c8:	4b4d      	ldr	r3, [pc, #308]	; (b300 <mayfly_xtal_stop_calc+0x210>)
    b1ca:	9301      	str	r3, [sp, #4]
    b1cc:	9300      	str	r3, [sp, #0]
    b1ce:	4a4d      	ldr	r2, [pc, #308]	; (b304 <mayfly_xtal_stop_calc+0x214>)
    b1d0:	4b4d      	ldr	r3, [pc, #308]	; (b308 <mayfly_xtal_stop_calc+0x218>)
    b1d2:	494e      	ldr	r1, [pc, #312]	; (b30c <mayfly_xtal_stop_calc+0x21c>)
    b1d4:	4850      	ldr	r0, [pc, #320]	; (b318 <mayfly_xtal_stop_calc+0x228>)
    b1d6:	e7b0      	b.n	b13a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    b1d8:	6886      	ldr	r6, [r0, #8]
    b1da:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b1dc:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b1de:	429e      	cmp	r6, r3
    b1e0:	bf38      	it	cc
    b1e2:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b1e4:	2a00      	cmp	r2, #0
    b1e6:	da05      	bge.n	b1f4 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    b1e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b1ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b1ee:	4433      	add	r3, r6
    b1f0:	1a9b      	subs	r3, r3, r2
    b1f2:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b1f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b1f6:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b1fa:	4293      	cmp	r3, r2
    b1fc:	d20a      	bcs.n	b214 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b1fe:	2100      	movs	r1, #0
    b200:	2001      	movs	r0, #1
    b202:	f7fe fe53 	bl	9eac <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b206:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b20a:	2101      	movs	r1, #1
    b20c:	4628      	mov	r0, r5
    b20e:	f7ff ff33 	bl	b078 <prepare_normal_set>
    b212:	e7b9      	b.n	b188 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b214:	2101      	movs	r1, #1
    b216:	4608      	mov	r0, r1
    b218:	f7fe fe48 	bl	9eac <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b21c:	682b      	ldr	r3, [r5, #0]
    b21e:	2b00      	cmp	r3, #0
    b220:	db1c      	blt.n	b25c <mayfly_xtal_stop_calc+0x16c>
    b222:	429e      	cmp	r6, r3
    b224:	d21a      	bcs.n	b25c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b226:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b228:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b22a:	b29b      	uxth	r3, r3
			ticker_status =
    b22c:	493b      	ldr	r1, [pc, #236]	; (b31c <mayfly_xtal_stop_calc+0x22c>)
    b22e:	9105      	str	r1, [sp, #20]
    b230:	9302      	str	r3, [sp, #8]
    b232:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b236:	9506      	str	r5, [sp, #24]
    b238:	9004      	str	r0, [sp, #16]
    b23a:	9003      	str	r0, [sp, #12]
    b23c:	9001      	str	r0, [sp, #4]
    b23e:	9000      	str	r0, [sp, #0]
    b240:	2101      	movs	r1, #1
    b242:	f7fc fbeb 	bl	7a1c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b246:	f030 0302 	bics.w	r3, r0, #2
    b24a:	d007      	beq.n	b25c <mayfly_xtal_stop_calc+0x16c>
    b24c:	4b2c      	ldr	r3, [pc, #176]	; (b300 <mayfly_xtal_stop_calc+0x210>)
    b24e:	9301      	str	r3, [sp, #4]
    b250:	9300      	str	r3, [sp, #0]
    b252:	4a2c      	ldr	r2, [pc, #176]	; (b304 <mayfly_xtal_stop_calc+0x214>)
    b254:	4b2c      	ldr	r3, [pc, #176]	; (b308 <mayfly_xtal_stop_calc+0x218>)
    b256:	492d      	ldr	r1, [pc, #180]	; (b30c <mayfly_xtal_stop_calc+0x21c>)
    b258:	4831      	ldr	r0, [pc, #196]	; (b320 <mayfly_xtal_stop_calc+0x230>)
    b25a:	e76e      	b.n	b13a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    b25c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b25e:	2e00      	cmp	r6, #0
    b260:	d092      	beq.n	b188 <mayfly_xtal_stop_calc+0x98>
    b262:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b264:	2d00      	cmp	r5, #0
    b266:	d08f      	beq.n	b188 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b268:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b26a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b26c:	429a      	cmp	r2, r3
    b26e:	d18b      	bne.n	b188 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b270:	482c      	ldr	r0, [pc, #176]	; (b324 <mayfly_xtal_stop_calc+0x234>)
    b272:	b292      	uxth	r2, r2
    b274:	fba2 0100 	umull	r0, r1, r2, r0
    b278:	f240 1323 	movw	r3, #291	; 0x123
    b27c:	fb03 1102 	mla	r1, r3, r2, r1
    b280:	a31b      	add	r3, pc, #108	; (adr r3, b2f0 <mayfly_xtal_stop_calc+0x200>)
    b282:	e9d3 2300 	ldrd	r2, r3, [r3]
    b286:	f7f4 ffc5 	bl	214 <__aeabi_uldivmod>
    b28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b28c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b290:	2200      	movs	r2, #0
    b292:	4298      	cmp	r0, r3
    b294:	d318      	bcc.n	b2c8 <mayfly_xtal_stop_calc+0x1d8>
    b296:	b102      	cbz	r2, b29a <mayfly_xtal_stop_calc+0x1aa>
    b298:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b29a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b29e:	2a00      	cmp	r2, #0
    b2a0:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b2a4:	da13      	bge.n	b2ce <mayfly_xtal_stop_calc+0x1de>
    b2a6:	2a00      	cmp	r2, #0
    b2a8:	f6ff af6e 	blt.w	b188 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b2ac:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b2ae:	429c      	cmp	r4, r3
    b2b0:	f67f af6a 	bls.w	b188 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b2b4:	4630      	mov	r0, r6
    b2b6:	f7fe faff 	bl	98b8 <conn_update_req>
				if (status == 2) {
    b2ba:	2802      	cmp	r0, #2
    b2bc:	f47f af64 	bne.w	b188 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b2c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b2c2:	f7fe faf9 	bl	98b8 <conn_update_req>
    b2c6:	e75f      	b.n	b188 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b2c8:	1a1b      	subs	r3, r3, r0
    b2ca:	2201      	movs	r2, #1
    b2cc:	e7e1      	b.n	b292 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    b2ce:	2a00      	cmp	r2, #0
    b2d0:	f6bf af5a 	bge.w	b188 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b2d4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b2d6:	429c      	cmp	r4, r3
    b2d8:	f67f af56 	bls.w	b188 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b2dc:	4628      	mov	r0, r5
    b2de:	f7fe faeb 	bl	98b8 <conn_update_req>
				if (status == 2) {
    b2e2:	2802      	cmp	r0, #2
    b2e4:	f47f af50 	bne.w	b188 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b2e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2ea:	e7ea      	b.n	b2c2 <mayfly_xtal_stop_calc+0x1d2>
    b2ec:	f3af 8000 	nop.w
    b2f0:	1afd498d 	.word	0x1afd498d
    b2f4:	00000007 	.word	0x00000007
    b2f8:	00009815 	.word	0x00009815
    b2fc:	200008c8 	.word	0x200008c8
    b300:	00014645 	.word	0x00014645
    b304:	00015394 	.word	0x00015394
    b308:	00016683 	.word	0x00016683
    b30c:	000153e3 	.word	0x000153e3
    b310:	000173f8 	.word	0x000173f8
    b314:	0001709c 	.word	0x0001709c
    b318:	000170c6 	.word	0x000170c6
    b31c:	00009819 	.word	0x00009819
    b320:	00016939 	.word	0x00016939
    b324:	09ce5400 	.word	0x09ce5400

0000b328 <preempt_calc>:
{
    b328:	b570      	push	{r4, r5, r6, lr}
    b32a:	4614      	mov	r4, r2
    b32c:	460e      	mov	r6, r1
    b32e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b330:	f7fc fc92 	bl	7c58 <ticker_ticks_now_get>
	u32_t diff =
    b334:	4621      	mov	r1, r4
    b336:	f7fc fc91 	bl	7c5c <ticker_ticks_diff_get>
	diff += 3;
    b33a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b33c:	2c09      	cmp	r4, #9
    b33e:	d90f      	bls.n	b360 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b340:	2100      	movs	r1, #0
    b342:	4608      	mov	r0, r1
    b344:	f7fe fdb2 	bl	9eac <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b348:	4632      	mov	r2, r6
    b34a:	2100      	movs	r1, #0
    b34c:	4628      	mov	r0, r5
    b34e:	f7ff fe93 	bl	b078 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b352:	68ab      	ldr	r3, [r5, #8]
    b354:	441c      	add	r4, r3
		if (diff <
    b356:	2c26      	cmp	r4, #38	; 0x26
    b358:	d800      	bhi.n	b35c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b35a:	60ac      	str	r4, [r5, #8]
		return 1;
    b35c:	2001      	movs	r0, #1
}
    b35e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b360:	2000      	movs	r0, #0
    b362:	bd70      	pop	{r4, r5, r6, pc}

0000b364 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b364:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b366:	ad02      	add	r5, sp, #8
    b368:	4b10      	ldr	r3, [pc, #64]	; (b3ac <adv_scan_configure.constprop.30+0x48>)
    b36a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b36e:	4604      	mov	r4, r0
	radio_reset();
    b370:	f006 fdc0 	bl	11ef4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b374:	2000      	movs	r0, #0
    b376:	f006 fde7 	bl	11f48 <radio_tx_power_set>
	radio_isr_set(isr);
    b37a:	480d      	ldr	r0, [pc, #52]	; (b3b0 <adv_scan_configure.constprop.30+0x4c>)
    b37c:	f006 fd84 	bl	11e88 <radio_isr_set>
	radio_phy_set(phy, flags);
    b380:	2101      	movs	r1, #1
    b382:	4620      	mov	r0, r4
    b384:	f006 fdd0 	bl	11f28 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b388:	4628      	mov	r0, r5
    b38a:	f006 fdfb 	bl	11f84 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b38e:	0062      	lsls	r2, r4, #1
    b390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b394:	2125      	movs	r1, #37	; 0x25
    b396:	2008      	movs	r0, #8
    b398:	f006 fe0c 	bl	11fb4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b39c:	4905      	ldr	r1, [pc, #20]	; (b3b4 <adv_scan_configure.constprop.30+0x50>)
    b39e:	f240 605b 	movw	r0, #1627	; 0x65b
    b3a2:	f006 fe97 	bl	120d4 <radio_crc_configure>
}
    b3a6:	b003      	add	sp, #12
    b3a8:	bd30      	pop	{r4, r5, pc}
    b3aa:	bf00      	nop
    b3ac:	8e89bed6 	.word	0x8e89bed6
    b3b0:	0000e311 	.word	0x0000e311
    b3b4:	00555555 	.word	0x00555555

0000b3b8 <event_scan>:
{
    b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b3ba:	4b62      	ldr	r3, [pc, #392]	; (b544 <event_scan+0x18c>)
    b3bc:	7cda      	ldrb	r2, [r3, #19]
{
    b3be:	b08d      	sub	sp, #52	; 0x34
    b3c0:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b3c2:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b3c6:	461c      	mov	r4, r3
    b3c8:	b172      	cbz	r2, b3e8 <event_scan+0x30>
    b3ca:	4b5f      	ldr	r3, [pc, #380]	; (b548 <event_scan+0x190>)
    b3cc:	9301      	str	r3, [sp, #4]
    b3ce:	9300      	str	r3, [sp, #0]
    b3d0:	4a5e      	ldr	r2, [pc, #376]	; (b54c <event_scan+0x194>)
    b3d2:	4b5f      	ldr	r3, [pc, #380]	; (b550 <event_scan+0x198>)
    b3d4:	495f      	ldr	r1, [pc, #380]	; (b554 <event_scan+0x19c>)
    b3d6:	4860      	ldr	r0, [pc, #384]	; (b558 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b3d8:	f7f5 fdd8 	bl	f8c <printk>
    b3dc:	4040      	eors	r0, r0
    b3de:	f380 8811 	msr	BASEPRI, r0
    b3e2:	f04f 0004 	mov.w	r0, #4
    b3e6:	df02      	svc	2
    b3e8:	7c1b      	ldrb	r3, [r3, #16]
    b3ea:	b2db      	uxtb	r3, r3
    b3ec:	2b06      	cmp	r3, #6
    b3ee:	d007      	beq.n	b400 <event_scan+0x48>
    b3f0:	4b55      	ldr	r3, [pc, #340]	; (b548 <event_scan+0x190>)
    b3f2:	9301      	str	r3, [sp, #4]
    b3f4:	9300      	str	r3, [sp, #0]
    b3f6:	4a55      	ldr	r2, [pc, #340]	; (b54c <event_scan+0x194>)
    b3f8:	4b55      	ldr	r3, [pc, #340]	; (b550 <event_scan+0x198>)
    b3fa:	4956      	ldr	r1, [pc, #344]	; (b554 <event_scan+0x19c>)
    b3fc:	4857      	ldr	r0, [pc, #348]	; (b55c <event_scan+0x1a4>)
    b3fe:	e7eb      	b.n	b3d8 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    b400:	2202      	movs	r2, #2
    b402:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b404:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b406:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b408:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b40c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b40e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b412:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b414:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b418:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b41c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b41e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b422:	f7ff ff9f 	bl	b364 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b426:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b42a:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b42e:	1c42      	adds	r2, r0, #1
    b430:	f362 0383 	bfi	r3, r2, #2, #2
    b434:	3025      	adds	r0, #37	; 0x25
    b436:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b43a:	f7ff fcc3 	bl	adc4 <chan_set>
	if (_radio.scanner.chan == 3) {
    b43e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b442:	f003 020c 	and.w	r2, r3, #12
    b446:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b448:	bf08      	it	eq
    b44a:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b44e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b452:	bf08      	it	eq
    b454:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b458:	f006 fef6 	bl	12248 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b45c:	2300      	movs	r3, #0
    b45e:	4619      	mov	r1, r3
    b460:	461a      	mov	r2, r3
    b462:	4618      	mov	r0, r3
    b464:	f006 fe60 	bl	12128 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b468:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b46c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b470:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b474:	3008      	adds	r0, #8
    b476:	f006 fdcb 	bl	12010 <radio_pkt_rx_set>
	radio_rssi_measure();
    b47a:	f006 fe6d 	bl	12158 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b47e:	f006 f909 	bl	11694 <ctrl_rl_enabled>
    b482:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b486:	b340      	cbz	r0, b4da <event_scan+0x122>
		struct ll_filter *filter =
    b488:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b48c:	f005 ff22 	bl	112d4 <ctrl_filter_get>
    b490:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b492:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b496:	f005 fe4d 	bl	11134 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b49a:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b49c:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b49e:	1cb2      	adds	r2, r6, #2
    b4a0:	7830      	ldrb	r0, [r6, #0]
    b4a2:	f006 fe7b 	bl	1219c <radio_filter_configure>
		radio_ar_configure(count, irks);
    b4a6:	4639      	mov	r1, r7
    b4a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b4ac:	f007 f850 	bl	12550 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b4b0:	68e2      	ldr	r2, [r4, #12]
    b4b2:	f105 0109 	add.w	r1, r5, #9
    b4b6:	2000      	movs	r0, #0
    b4b8:	f006 fed2 	bl	12260 <radio_tmr_start>
	radio_tmr_end_capture();
    b4bc:	f006 ffa0 	bl	12400 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b4c0:	2106      	movs	r1, #6
    b4c2:	462a      	mov	r2, r5
    b4c4:	4826      	ldr	r0, [pc, #152]	; (b560 <event_scan+0x1a8>)
    b4c6:	f7ff ff2f 	bl	b328 <preempt_calc>
    b4ca:	4601      	mov	r1, r0
    b4cc:	b188      	cbz	r0, b4f2 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    b4ce:	2304      	movs	r3, #4
    b4d0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b4d2:	f006 fdc3 	bl	1205c <radio_disable>
}
    b4d6:	b00d      	add	sp, #52	; 0x34
    b4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b4da:	f013 0f30 	tst.w	r3, #48	; 0x30
    b4de:	d0e7      	beq.n	b4b0 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    b4e0:	2001      	movs	r0, #1
    b4e2:	f005 fef7 	bl	112d4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b4e6:	1c82      	adds	r2, r0, #2
    b4e8:	7841      	ldrb	r1, [r0, #1]
    b4ea:	7800      	ldrb	r0, [r0, #0]
    b4ec:	f006 fe56 	bl	1219c <radio_filter_configure>
    b4f0:	e7de      	b.n	b4b0 <event_scan+0xf8>
		ret = ticker_start(
    b4f2:	f641 1336 	movw	r3, #6454	; 0x1936
    b4f6:	9308      	str	r3, [sp, #32]
    b4f8:	4b1a      	ldr	r3, [pc, #104]	; (b564 <event_scan+0x1ac>)
    b4fa:	9307      	str	r3, [sp, #28]
    b4fc:	2204      	movs	r2, #4
    b4fe:	4b1a      	ldr	r3, [pc, #104]	; (b568 <event_scan+0x1b0>)
    b500:	9206      	str	r2, [sp, #24]
    b502:	9305      	str	r3, [sp, #20]
    b504:	9004      	str	r0, [sp, #16]
    b506:	9003      	str	r0, [sp, #12]
    b508:	9002      	str	r0, [sp, #8]
    b50a:	9001      	str	r0, [sp, #4]
    b50c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b510:	3309      	adds	r3, #9
    b512:	9300      	str	r3, [sp, #0]
    b514:	462b      	mov	r3, r5
    b516:	f7fc fa31 	bl	797c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b51a:	f030 0302 	bics.w	r3, r0, #2
    b51e:	d007      	beq.n	b530 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b520:	4b09      	ldr	r3, [pc, #36]	; (b548 <event_scan+0x190>)
    b522:	9301      	str	r3, [sp, #4]
    b524:	9300      	str	r3, [sp, #0]
    b526:	4a09      	ldr	r2, [pc, #36]	; (b54c <event_scan+0x194>)
    b528:	4b09      	ldr	r3, [pc, #36]	; (b550 <event_scan+0x198>)
    b52a:	490a      	ldr	r1, [pc, #40]	; (b554 <event_scan+0x19c>)
    b52c:	480f      	ldr	r0, [pc, #60]	; (b56c <event_scan+0x1b4>)
    b52e:	e753      	b.n	b3d8 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b530:	4619      	mov	r1, r3
    b532:	4618      	mov	r0, r3
    b534:	4a0e      	ldr	r2, [pc, #56]	; (b570 <event_scan+0x1b8>)
    b536:	f7fc fb3d 	bl	7bb4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b53a:	f030 0302 	bics.w	r3, r0, #2
    b53e:	d1ef      	bne.n	b520 <event_scan+0x168>
    b540:	e7c9      	b.n	b4d6 <event_scan+0x11e>
    b542:	bf00      	nop
    b544:	200008c8 	.word	0x200008c8
    b548:	00014645 	.word	0x00014645
    b54c:	00015394 	.word	0x00015394
    b550:	00016752 	.word	0x00016752
    b554:	000153e3 	.word	0x000153e3
    b558:	00016a55 	.word	0x00016a55
    b55c:	00016a8f 	.word	0x00016a8f
    b560:	20000998 	.word	0x20000998
    b564:	0000a77d 	.word	0x0000a77d
    b568:	0000a9ed 	.word	0x0000a9ed
    b56c:	00016ace 	.word	0x00016ace
    b570:	0000a965 	.word	0x0000a965

0000b574 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b574:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b576:	4b05      	ldr	r3, [pc, #20]	; (b58c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b578:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b57a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b57c:	4611      	mov	r1, r2
    b57e:	4610      	mov	r0, r2
    b580:	f7fb fc3e 	bl	6e00 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b584:	b108      	cbz	r0, b58a <event_stop.constprop.31+0x16>
    b586:	f7ff fa17 	bl	a9b8 <event_stop.part.10>
    b58a:	bd08      	pop	{r3, pc}
    b58c:	20003d70 	.word	0x20003d70

0000b590 <event_common_prepare>:
{
    b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b594:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b596:	681d      	ldr	r5, [r3, #0]
{
    b598:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b59a:	2c00      	cmp	r4, #0
{
    b59c:	4681      	mov	r9, r0
    b59e:	910b      	str	r1, [sp, #44]	; 0x2c
    b5a0:	4690      	mov	r8, r2
    b5a2:	469b      	mov	fp, r3
    b5a4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b5a8:	da03      	bge.n	b5b2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b5aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b5ac:	42ac      	cmp	r4, r5
    b5ae:	bf38      	it	cc
    b5b0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b5b2:	42ac      	cmp	r4, r5
    b5b4:	4f56      	ldr	r7, [pc, #344]	; (b710 <event_common_prepare+0x180>)
    b5b6:	d924      	bls.n	b602 <event_common_prepare+0x72>
		ticker_status =
    b5b8:	f241 5374 	movw	r3, #5492	; 0x1574
    b5bc:	9308      	str	r3, [sp, #32]
    b5be:	4b55      	ldr	r3, [pc, #340]	; (b714 <event_common_prepare+0x184>)
    b5c0:	9305      	str	r3, [sp, #20]
    b5c2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b5c4:	1b63      	subs	r3, r4, r5
		ticker_status =
    b5c6:	9300      	str	r3, [sp, #0]
    b5c8:	9707      	str	r7, [sp, #28]
    b5ca:	464b      	mov	r3, r9
    b5cc:	9106      	str	r1, [sp, #24]
    b5ce:	9104      	str	r1, [sp, #16]
    b5d0:	9103      	str	r1, [sp, #12]
    b5d2:	9102      	str	r1, [sp, #8]
    b5d4:	9101      	str	r1, [sp, #4]
    b5d6:	2201      	movs	r2, #1
    b5d8:	4608      	mov	r0, r1
    b5da:	f7fc f9cf 	bl	797c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5de:	f030 0302 	bics.w	r3, r0, #2
    b5e2:	d034      	beq.n	b64e <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5e4:	4b4c      	ldr	r3, [pc, #304]	; (b718 <event_common_prepare+0x188>)
    b5e6:	9301      	str	r3, [sp, #4]
    b5e8:	9300      	str	r3, [sp, #0]
    b5ea:	4a4c      	ldr	r2, [pc, #304]	; (b71c <event_common_prepare+0x18c>)
    b5ec:	4b4c      	ldr	r3, [pc, #304]	; (b720 <event_common_prepare+0x190>)
    b5ee:	494d      	ldr	r1, [pc, #308]	; (b724 <event_common_prepare+0x194>)
    b5f0:	484d      	ldr	r0, [pc, #308]	; (b728 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    b5f2:	f7f5 fccb 	bl	f8c <printk>
    b5f6:	4040      	eors	r0, r0
    b5f8:	f380 8811 	msr	BASEPRI, r0
    b5fc:	f04f 0004 	mov.w	r0, #4
    b600:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b602:	d21d      	bcs.n	b640 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    b604:	2300      	movs	r3, #0
    b606:	461a      	mov	r2, r3
    b608:	4619      	mov	r1, r3
    b60a:	4618      	mov	r0, r3
    b60c:	f7ff f9fe 	bl	aa0c <event_active>
		ticker_status =
    b610:	f241 5389 	movw	r3, #5513	; 0x1589
    b614:	2100      	movs	r1, #0
    b616:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b618:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b61a:	4b44      	ldr	r3, [pc, #272]	; (b72c <event_common_prepare+0x19c>)
    b61c:	9305      	str	r3, [sp, #20]
    b61e:	9707      	str	r7, [sp, #28]
    b620:	464b      	mov	r3, r9
    b622:	9106      	str	r1, [sp, #24]
    b624:	9104      	str	r1, [sp, #16]
    b626:	9103      	str	r1, [sp, #12]
    b628:	9102      	str	r1, [sp, #8]
    b62a:	9101      	str	r1, [sp, #4]
    b62c:	9400      	str	r4, [sp, #0]
    b62e:	2201      	movs	r2, #1
    b630:	4608      	mov	r0, r1
    b632:	f7fc f9a3 	bl	797c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b636:	f030 0302 	bics.w	r3, r0, #2
    b63a:	d1d3      	bne.n	b5e4 <event_common_prepare+0x54>
    b63c:	462c      	mov	r4, r5
    b63e:	e00b      	b.n	b658 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    b640:	2300      	movs	r3, #0
    b642:	461a      	mov	r2, r3
    b644:	4619      	mov	r1, r3
    b646:	4618      	mov	r0, r3
    b648:	f7ff f9e0 	bl	aa0c <event_active>
		event_xtal(0, 0, 0, NULL);
    b64c:	2300      	movs	r3, #0
    b64e:	461a      	mov	r2, r3
    b650:	4619      	mov	r1, r3
    b652:	4618      	mov	r0, r3
    b654:	f7ff fa00 	bl	aa58 <event_xtal>
	_radio.remainder_anchor = remainder;
    b658:	4e35      	ldr	r6, [pc, #212]	; (b730 <event_common_prepare+0x1a0>)
    b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b65c:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b65e:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b662:	9308      	str	r3, [sp, #32]
    b664:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b666:	9306      	str	r3, [sp, #24]
    b668:	2200      	movs	r2, #0
    b66a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b66c:	9305      	str	r3, [sp, #20]
    b66e:	9707      	str	r7, [sp, #28]
    b670:	464b      	mov	r3, r9
    b672:	9204      	str	r2, [sp, #16]
    b674:	9203      	str	r2, [sp, #12]
    b676:	9202      	str	r2, [sp, #8]
    b678:	9201      	str	r2, [sp, #4]
    b67a:	9400      	str	r4, [sp, #0]
    b67c:	4611      	mov	r1, r2
    b67e:	4610      	mov	r0, r2
    b680:	f7fc f97c 	bl	797c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b684:	f030 0302 	bics.w	r3, r0, #2
    b688:	d1ac      	bne.n	b5e4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b68a:	2005      	movs	r0, #5
    b68c:	f7ff ff72 	bl	b574 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b690:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b694:	429d      	cmp	r5, r3
    b696:	d023      	beq.n	b6e0 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b698:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b69c:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b6a0:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b6a2:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b6a4:	bfbc      	itt	lt
    b6a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b6aa:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b6ae:	f8d8 2000 	ldr.w	r2, [r8]
    b6b2:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b6b6:	428a      	cmp	r2, r1
    b6b8:	bf38      	it	cc
    b6ba:	460a      	movcc	r2, r1
		ticker_status =
    b6bc:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b6c0:	b2a3      	uxth	r3, r4
    b6c2:	b292      	uxth	r2, r2
		ticker_status =
    b6c4:	9106      	str	r1, [sp, #24]
    b6c6:	2100      	movs	r1, #0
    b6c8:	9302      	str	r3, [sp, #8]
    b6ca:	9201      	str	r2, [sp, #4]
    b6cc:	9200      	str	r2, [sp, #0]
    b6ce:	9104      	str	r1, [sp, #16]
    b6d0:	9103      	str	r1, [sp, #12]
    b6d2:	4652      	mov	r2, sl
    b6d4:	4608      	mov	r0, r1
    b6d6:	f7fc f9a1 	bl	7a1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b6da:	f030 0302 	bics.w	r3, r0, #2
    b6de:	d181      	bne.n	b5e4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b6e0:	20ff      	movs	r0, #255	; 0xff
    b6e2:	f7ff fa85 	bl	abf0 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b6e6:	4b13      	ldr	r3, [pc, #76]	; (b734 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b6e8:	2201      	movs	r2, #1
    b6ea:	4611      	mov	r1, r2
    b6ec:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b6ee:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b6f2:	f7fb fb85 	bl	6e00 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b6f6:	b138      	cbz	r0, b708 <event_common_prepare+0x178>
    b6f8:	4b07      	ldr	r3, [pc, #28]	; (b718 <event_common_prepare+0x188>)
    b6fa:	9301      	str	r3, [sp, #4]
    b6fc:	9300      	str	r3, [sp, #0]
    b6fe:	4a07      	ldr	r2, [pc, #28]	; (b71c <event_common_prepare+0x18c>)
    b700:	4b07      	ldr	r3, [pc, #28]	; (b720 <event_common_prepare+0x190>)
    b702:	4908      	ldr	r1, [pc, #32]	; (b724 <event_common_prepare+0x194>)
    b704:	480c      	ldr	r0, [pc, #48]	; (b738 <event_common_prepare+0x1a8>)
    b706:	e774      	b.n	b5f2 <event_common_prepare+0x62>
}
    b708:	b00d      	add	sp, #52	; 0x34
    b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b70e:	bf00      	nop
    b710:	0000a77d 	.word	0x0000a77d
    b714:	0000aa0d 	.word	0x0000aa0d
    b718:	00014645 	.word	0x00014645
    b71c:	00015394 	.word	0x00015394
    b720:	00016711 	.word	0x00016711
    b724:	000153e3 	.word	0x000153e3
    b728:	00016939 	.word	0x00016939
    b72c:	0000aa59 	.word	0x0000aa59
    b730:	200008c8 	.word	0x200008c8
    b734:	20003e10 	.word	0x20003e10
    b738:	00017073 	.word	0x00017073

0000b73c <event_scan_prepare>:
{
    b73c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b73e:	4c25      	ldr	r4, [pc, #148]	; (b7d4 <event_scan_prepare+0x98>)
    b740:	7c23      	ldrb	r3, [r4, #16]
{
    b742:	b085      	sub	sp, #20
    b744:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b74a:	b173      	cbz	r3, b76a <event_scan_prepare+0x2e>
    b74c:	4b22      	ldr	r3, [pc, #136]	; (b7d8 <event_scan_prepare+0x9c>)
    b74e:	9301      	str	r3, [sp, #4]
    b750:	9300      	str	r3, [sp, #0]
    b752:	4a22      	ldr	r2, [pc, #136]	; (b7dc <event_scan_prepare+0xa0>)
    b754:	4b22      	ldr	r3, [pc, #136]	; (b7e0 <event_scan_prepare+0xa4>)
    b756:	4923      	ldr	r1, [pc, #140]	; (b7e4 <event_scan_prepare+0xa8>)
    b758:	4823      	ldr	r0, [pc, #140]	; (b7e8 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    b75a:	f7f5 fc17 	bl	f8c <printk>
    b75e:	4040      	eors	r0, r0
    b760:	f380 8811 	msr	BASEPRI, r0
    b764:	f04f 0004 	mov.w	r0, #4
    b768:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    b76a:	2306      	movs	r3, #6
    b76c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b76e:	9203      	str	r2, [sp, #12]
    b770:	9301      	str	r3, [sp, #4]
    b772:	4a1e      	ldr	r2, [pc, #120]	; (b7ec <event_scan_prepare+0xb0>)
    b774:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    b778:	9202      	str	r2, [sp, #8]
    b77a:	9300      	str	r3, [sp, #0]
    b77c:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    b780:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    b784:	f7ff ff04 	bl	b590 <event_common_prepare>
	if (_radio.scanner.conn) {
    b788:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    b78c:	b303      	cbz	r3, b7d0 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    b78e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    b792:	2b00      	cmp	r3, #0
    b794:	da0c      	bge.n	b7b0 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    b796:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    b79a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    b79e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    b7a2:	4291      	cmp	r1, r2
    b7a4:	bf2c      	ite	cs
    b7a6:	ebc3 0301 	rsbcs	r3, r3, r1
    b7aa:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    b7ae:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    b7b0:	4b0f      	ldr	r3, [pc, #60]	; (b7f0 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b7b2:	2201      	movs	r2, #1
    b7b4:	4611      	mov	r1, r2
    b7b6:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    b7b8:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b7ba:	f7fb fb21 	bl	6e00 <mayfly_enqueue>
		LL_ASSERT(!retval);
    b7be:	b138      	cbz	r0, b7d0 <event_scan_prepare+0x94>
    b7c0:	4b05      	ldr	r3, [pc, #20]	; (b7d8 <event_scan_prepare+0x9c>)
    b7c2:	9301      	str	r3, [sp, #4]
    b7c4:	9300      	str	r3, [sp, #0]
    b7c6:	4a05      	ldr	r2, [pc, #20]	; (b7dc <event_scan_prepare+0xa0>)
    b7c8:	4b05      	ldr	r3, [pc, #20]	; (b7e0 <event_scan_prepare+0xa4>)
    b7ca:	4906      	ldr	r1, [pc, #24]	; (b7e4 <event_scan_prepare+0xa8>)
    b7cc:	4809      	ldr	r0, [pc, #36]	; (b7f4 <event_scan_prepare+0xb8>)
    b7ce:	e7c4      	b.n	b75a <event_scan_prepare+0x1e>
}
    b7d0:	b005      	add	sp, #20
    b7d2:	bd30      	pop	{r4, r5, pc}
    b7d4:	200008c8 	.word	0x200008c8
    b7d8:	00014645 	.word	0x00014645
    b7dc:	00015394 	.word	0x00015394
    b7e0:	0001673f 	.word	0x0001673f
    b7e4:	000153e3 	.word	0x000153e3
    b7e8:	000171af 	.word	0x000171af
    b7ec:	0000b3b9 	.word	0x0000b3b9
    b7f0:	20003d90 	.word	0x20003d90
    b7f4:	00017073 	.word	0x00017073

0000b7f8 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b7f8:	4b02      	ldr	r3, [pc, #8]	; (b804 <mayfly_xtal_start+0xc>)
    b7fa:	6818      	ldr	r0, [r3, #0]
    b7fc:	6843      	ldr	r3, [r0, #4]
    b7fe:	2100      	movs	r1, #0
    b800:	681b      	ldr	r3, [r3, #0]
    b802:	4718      	bx	r3
    b804:	200008c8 	.word	0x200008c8

0000b808 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b808:	4b02      	ldr	r3, [pc, #8]	; (b814 <mayfly_xtal_stop+0xc>)
    b80a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b80c:	6843      	ldr	r3, [r0, #4]
    b80e:	2100      	movs	r1, #0
    b810:	685b      	ldr	r3, [r3, #4]
    b812:	4718      	bx	r3
    b814:	200008c8 	.word	0x200008c8

0000b818 <chan_sel_2>:
{
    b818:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b81a:	4048      	eors	r0, r1
    b81c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b81e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b822:	2608      	movs	r6, #8
	o = 0;
    b824:	2400      	movs	r4, #0
		o |= (i & 1);
    b826:	f00e 0501 	and.w	r5, lr, #1
    b82a:	3e01      	subs	r6, #1
    b82c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b830:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b834:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b836:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b83a:	d1f4      	bne.n	b826 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b83c:	0225      	lsls	r5, r4, #8
    b83e:	b22d      	sxth	r5, r5
    b840:	b2c0      	uxtb	r0, r0
    b842:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b846:	4634      	mov	r4, r6
		o |= (i & 1);
    b848:	f000 0601 	and.w	r6, r0, #1
    b84c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b850:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b854:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b858:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b85a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b85e:	d1f3      	bne.n	b848 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b860:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b862:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b866:	3f01      	subs	r7, #1
    b868:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b86a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b86e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b870:	d1d5      	bne.n	b81e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b872:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    b874:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    b876:	fbb1 f0f4 	udiv	r0, r1, r4
    b87a:	fb04 1010 	mls	r0, r4, r0, r1
    b87e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b880:	08c4      	lsrs	r4, r0, #3
    b882:	f000 0507 	and.w	r5, r0, #7
    b886:	5d14      	ldrb	r4, [r2, r4]
    b888:	412c      	asrs	r4, r5
    b88a:	07e4      	lsls	r4, r4, #31
    b88c:	d407      	bmi.n	b89e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    b88e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    b890:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b894:	4610      	mov	r0, r2
}
    b896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    b89a:	f7fd bfc9 	b.w	9830 <chan_sel_remap>
}
    b89e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b8a0 <ctrl_tx_enqueue>:
{
    b8a0:	b510      	push	{r4, lr}
	    !conn->empty &&
    b8a2:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b8a6:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    b8aa:	f014 0f80 	tst.w	r4, #128	; 0x80
    b8ae:	d118      	bne.n	b8e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b8b0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    b8b4:	b1ab      	cbz	r3, b8e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b8b6:	0724      	lsls	r4, r4, #28
    b8b8:	d413      	bmi.n	b8e2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b8ba:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    b8be:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b8c0:	bf04      	itt	eq
    b8c2:	681c      	ldreq	r4, [r3, #0]
    b8c4:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    b8c8:	b992      	cbnz	r2, b8f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    b8ca:	681a      	ldr	r2, [r3, #0]
    b8cc:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b8ce:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    b8d0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    b8d4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    b8d8:	680b      	ldr	r3, [r1, #0]
    b8da:	b90b      	cbnz	r3, b8e0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    b8dc:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b8e0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    b8e2:	b92a      	cbnz	r2, b8f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    b8e4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    b8e8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b8ea:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    b8ee:	e7ef      	b.n	b8d0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    b8f0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b8f4:	681a      	ldr	r2, [r3, #0]
    b8f6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    b8f8:	6019      	str	r1, [r3, #0]
    b8fa:	e7eb      	b.n	b8d4 <ctrl_tx_enqueue+0x34>

0000b8fc <ctrl_tx_sec_enqueue>:
{
    b8fc:	b410      	push	{r4}
	if (conn->pause_tx) {
    b8fe:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b902:	0724      	lsls	r4, r4, #28
{
    b904:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    b906:	d50f      	bpl.n	b928 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    b908:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    b90c:	b931      	cbnz	r1, b91c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    b90e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    b912:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    b914:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    b918:	bc10      	pop	{r4}
    b91a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    b91c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b920:	6819      	ldr	r1, [r3, #0]
    b922:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    b924:	601a      	str	r2, [r3, #0]
    b926:	e7f7      	b.n	b918 <ctrl_tx_sec_enqueue+0x1c>
}
    b928:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    b92a:	f7ff bfb9 	b.w	b8a0 <ctrl_tx_enqueue>
	...

0000b930 <feature_rsp_send>:
{
    b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b932:	4f21      	ldr	r7, [pc, #132]	; (b9b8 <feature_rsp_send+0x88>)
{
    b934:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b936:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    b93a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b93c:	f7fb f995 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    b940:	4604      	mov	r4, r0
    b942:	b3b0      	cbz	r0, b9b2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b944:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    b946:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b948:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b94c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b950:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b954:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b958:	f043 0310 	orr.w	r3, r3, #16
    b95c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b960:	79b1      	ldrb	r1, [r6, #6]
    b962:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b966:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b96a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b96e:	400b      	ands	r3, r1
    b970:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    b974:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b978:	f043 0320 	orr.w	r3, r3, #32
    b97c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b980:	7903      	ldrb	r3, [r0, #4]
    b982:	f043 0303 	orr.w	r3, r3, #3
    b986:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b988:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    b98a:	2309      	movs	r3, #9
    b98c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b98e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b990:	2100      	movs	r1, #0
    b992:	4410      	add	r0, r2
    b994:	f7f6 f95e 	bl	1c54 <memset>
		conn->llcp_features & 0xFF;
    b998:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    b99c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    b99e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    b9a0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    b9a2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    b9a4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    b9a6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    b9a8:	4621      	mov	r1, r4
    b9aa:	f7ff ffa7 	bl	b8fc <ctrl_tx_sec_enqueue>
	return 0;
    b9ae:	2000      	movs	r0, #0
    b9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    b9b2:	2001      	movs	r0, #1
}
    b9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9b6:	bf00      	nop
    b9b8:	200008c8 	.word	0x200008c8

0000b9bc <start_enc_rsp_send>:
{
    b9bc:	b510      	push	{r4, lr}
    b9be:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    b9c0:	b9c9      	cbnz	r1, b9f6 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b9c2:	480f      	ldr	r0, [pc, #60]	; (ba00 <start_enc_rsp_send+0x44>)
    b9c4:	f7fb f951 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    b9c8:	b1b8      	cbz	r0, b9fa <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    b9ca:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    b9cc:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b9d0:	f043 0320 	orr.w	r3, r3, #32
    b9d4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b9d8:	780b      	ldrb	r3, [r1, #0]
    b9da:	f043 0303 	orr.w	r3, r3, #3
    b9de:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b9e0:	2301      	movs	r3, #1
    b9e2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    b9e4:	2306      	movs	r3, #6
    b9e6:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    b9e8:	b140      	cbz	r0, b9fc <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    b9ea:	4601      	mov	r1, r0
    b9ec:	4620      	mov	r0, r4
    b9ee:	f7ff ff57 	bl	b8a0 <ctrl_tx_enqueue>
	return 0;
    b9f2:	2000      	movs	r0, #0
    b9f4:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    b9f6:	2000      	movs	r0, #0
    b9f8:	e7e8      	b.n	b9cc <start_enc_rsp_send+0x10>
			return 1;
    b9fa:	2001      	movs	r0, #1
}
    b9fc:	bd10      	pop	{r4, pc}
    b9fe:	bf00      	nop
    ba00:	20000a24 	.word	0x20000a24

0000ba04 <reject_ext_ind_send>:
{
    ba04:	b570      	push	{r4, r5, r6, lr}
    ba06:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba08:	480b      	ldr	r0, [pc, #44]	; (ba38 <reject_ext_ind_send+0x34>)
{
    ba0a:	460e      	mov	r6, r1
    ba0c:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba0e:	f7fb f92c 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    ba12:	b178      	cbz	r0, ba34 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba14:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    ba16:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba18:	f043 0303 	orr.w	r3, r3, #3
    ba1c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    ba1e:	2303      	movs	r3, #3
    ba20:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ba22:	2311      	movs	r3, #17
    ba24:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    ba26:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    ba28:	4601      	mov	r1, r0
    ba2a:	4620      	mov	r0, r4
    ba2c:	f7ff ff38 	bl	b8a0 <ctrl_tx_enqueue>
	return 0;
    ba30:	2000      	movs	r0, #0
    ba32:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    ba34:	2001      	movs	r0, #1
}
    ba36:	bd70      	pop	{r4, r5, r6, pc}
    ba38:	20000a24 	.word	0x20000a24
    ba3c:	00000000 	.word	0x00000000

0000ba40 <event_connection_prepare>:
{
    ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba44:	4db8      	ldr	r5, [pc, #736]	; (bd28 <event_connection_prepare+0x2e8>)
{
    ba46:	b08f      	sub	sp, #60	; 0x3c
    ba48:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba4a:	7c2b      	ldrb	r3, [r5, #16]
{
    ba4c:	910c      	str	r1, [sp, #48]	; 0x30
    ba4e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba50:	b173      	cbz	r3, ba70 <event_connection_prepare+0x30>
    ba52:	4bb6      	ldr	r3, [pc, #728]	; (bd2c <event_connection_prepare+0x2ec>)
    ba54:	9301      	str	r3, [sp, #4]
    ba56:	9300      	str	r3, [sp, #0]
    ba58:	4ab5      	ldr	r2, [pc, #724]	; (bd30 <event_connection_prepare+0x2f0>)
    ba5a:	4bb6      	ldr	r3, [pc, #728]	; (bd34 <event_connection_prepare+0x2f4>)
    ba5c:	49b6      	ldr	r1, [pc, #728]	; (bd38 <event_connection_prepare+0x2f8>)
    ba5e:	48b7      	ldr	r0, [pc, #732]	; (bd3c <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    ba60:	f7f5 fa94 	bl	f8c <printk>
    ba64:	4040      	eors	r0, r0
    ba66:	f380 8811 	msr	BASEPRI, r0
    ba6a:	f04f 0004 	mov.w	r0, #4
    ba6e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    ba70:	f894 3020 	ldrb.w	r3, [r4, #32]
    ba74:	3307      	adds	r3, #7
    ba76:	b2db      	uxtb	r3, r3
    ba78:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    ba7a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	da09      	bge.n	ba96 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ba82:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    ba84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    ba86:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    ba8a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    ba8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    ba8e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    ba90:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    ba92:	bf88      	it	hi
    ba94:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    ba96:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ba98:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    ba9c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    ba9e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    baa0:	b292      	uxth	r2, r2
    baa2:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    baa4:	4432      	add	r2, r6
    baa6:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    baa8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    baac:	429a      	cmp	r2, r3
    baae:	f040 81ba 	bne.w	be26 <event_connection_prepare+0x3e6>
    bab2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bab6:	075f      	lsls	r7, r3, #29
    bab8:	f100 84ab 	bmi.w	c412 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    babc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bac0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bac4:	429a      	cmp	r2, r3
    bac6:	f000 8096 	beq.w	bbf6 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    baca:	2005      	movs	r0, #5
    bacc:	f7ff fd52 	bl	b574 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    bad0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bad4:	b113      	cbz	r3, badc <event_connection_prepare+0x9c>
    bad6:	429c      	cmp	r4, r3
    bad8:	f040 808d 	bne.w	bbf6 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    badc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bae0:	f003 0307 	and.w	r3, r3, #7
    bae4:	2b05      	cmp	r3, #5
    bae6:	f200 815d 	bhi.w	bda4 <event_connection_prepare+0x364>
    baea:	e8df f013 	tbh	[pc, r3, lsl #1]
    baee:	0006      	.short	0x0006
    baf0:	01310065 	.word	0x01310065
    baf4:	00840084 	.word	0x00840084
    baf8:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bafa:	4891      	ldr	r0, [pc, #580]	; (bd40 <event_connection_prepare+0x300>)
    bafc:	f7fb f8b5 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    bb00:	4607      	mov	r7, r0
    bb02:	2800      	cmp	r0, #0
    bb04:	d077      	beq.n	bbf6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    bb06:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bb0a:	2204      	movs	r2, #4
    bb0c:	f362 0302 	bfi	r3, r2, #0, #3
    bb10:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb14:	7903      	ldrb	r3, [r0, #4]
    bb16:	f043 0303 	orr.w	r3, r3, #3
    bb1a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bb1c:	2318      	movs	r3, #24
    bb1e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bb20:	230f      	movs	r3, #15
    bb22:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    bb24:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bb28:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    bb2a:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    bb2c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bb30:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    bb32:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bb36:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    bb38:	2300      	movs	r3, #0
    bb3a:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    bb3c:	74c3      	strb	r3, [r0, #19]
    bb3e:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    bb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb44:	7543      	strb	r3, [r0, #21]
    bb46:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    bb48:	75c3      	strb	r3, [r0, #23]
    bb4a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bb4c:	7643      	strb	r3, [r0, #25]
    bb4e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bb50:	76c3      	strb	r3, [r0, #27]
    bb52:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    bb54:	7743      	strb	r3, [r0, #29]
    bb56:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    bb58:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bb5c:	4601      	mov	r1, r0
    bb5e:	4620      	mov	r0, r4
    bb60:	f7ff fe9e 	bl	b8a0 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb64:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    bb66:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bb6a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb6e:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    bb70:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    bb74:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb78:	da0b      	bge.n	bb92 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    bb7a:	68a3      	ldr	r3, [r4, #8]
    bb7c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bb7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bb82:	428b      	cmp	r3, r1
    bb84:	bf2c      	ite	cs
    bb86:	4443      	addcs	r3, r8
    bb88:	eb08 0301 	addcc.w	r3, r8, r1
    bb8c:	1a9b      	subs	r3, r3, r2
    bb8e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bb92:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bb94:	4b6b      	ldr	r3, [pc, #428]	; (bd44 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bb96:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb9a:	2201      	movs	r2, #1
    bb9c:	4611      	mov	r1, r2
    bb9e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bba0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bba2:	f7fb f92d 	bl	6e00 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bba6:	b330      	cbz	r0, bbf6 <event_connection_prepare+0x1b6>
    bba8:	4b60      	ldr	r3, [pc, #384]	; (bd2c <event_connection_prepare+0x2ec>)
    bbaa:	9301      	str	r3, [sp, #4]
    bbac:	9300      	str	r3, [sp, #0]
    bbae:	4b66      	ldr	r3, [pc, #408]	; (bd48 <event_connection_prepare+0x308>)
    bbb0:	4a5f      	ldr	r2, [pc, #380]	; (bd30 <event_connection_prepare+0x2f0>)
    bbb2:	4961      	ldr	r1, [pc, #388]	; (bd38 <event_connection_prepare+0x2f8>)
    bbb4:	4865      	ldr	r0, [pc, #404]	; (bd4c <event_connection_prepare+0x30c>)
    bbb6:	e753      	b.n	ba60 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    bbb8:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bbbc:	b397      	cbz	r7, bc24 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bbbe:	4860      	ldr	r0, [pc, #384]	; (bd40 <event_connection_prepare+0x300>)
    bbc0:	f7fb f853 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    bbc4:	4601      	mov	r1, r0
    bbc6:	b1b0      	cbz	r0, bbf6 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bbc8:	7903      	ldrb	r3, [r0, #4]
    bbca:	f043 0303 	orr.w	r3, r3, #3
    bbce:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bbd0:	2311      	movs	r3, #17
    bbd2:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bbd4:	2303      	movs	r3, #3
    bbd6:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bbd8:	230f      	movs	r3, #15
    bbda:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bbdc:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bbe0:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bbe2:	4620      	mov	r0, r4
    bbe4:	f7ff fe5c 	bl	b8a0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bbe8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bbec:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bbf0:	2300      	movs	r3, #0
    bbf2:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bbf6:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bbfa:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bbfe:	429a      	cmp	r2, r3
    bc00:	f000 810a 	beq.w	be18 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bc04:	2005      	movs	r0, #5
    bc06:	f7ff fcb5 	bl	b574 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    bc0a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bc0e:	f003 0203 	and.w	r2, r3, #3
    bc12:	2a03      	cmp	r2, #3
    bc14:	f200 8179 	bhi.w	bf0a <event_connection_prepare+0x4ca>
    bc18:	e8df f012 	tbh	[pc, r2, lsl #1]
    bc1c:	00fe00cc 	.word	0x00fe00cc
    bc20:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    bc24:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bc28:	2b00      	cmp	r3, #0
    bc2a:	db3b      	blt.n	bca4 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    bc2c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bc30:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bc34:	428b      	cmp	r3, r1
    bc36:	d1de      	bne.n	bbf6 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc38:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bc3c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc40:	2205      	movs	r2, #5
    bc42:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bc46:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bc4a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bc4e:	2301      	movs	r3, #1
    bc50:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bc54:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bc58:	b122      	cbz	r2, bc64 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    bc5a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bc5e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bc60:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bc64:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bc68:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bc6c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bc70:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bc74:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bc78:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bc7c:	2202      	movs	r2, #2
    bc7e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bc82:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bc86:	f082 0208 	eor.w	r2, r2, #8
    bc8a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bc8e:	f362 0382 	bfi	r3, r2, #2, #1
    bc92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bc96:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bc98:	2301      	movs	r3, #1
    bc9a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bc9e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bca2:	e7a8      	b.n	bbf6 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bca4:	4826      	ldr	r0, [pc, #152]	; (bd40 <event_connection_prepare+0x300>)
    bca6:	f7fa ffe0 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    bcaa:	4601      	mov	r1, r0
    bcac:	2800      	cmp	r0, #0
    bcae:	d0a2      	beq.n	bbf6 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bcb0:	7903      	ldrb	r3, [r0, #4]
    bcb2:	f043 0303 	orr.w	r3, r3, #3
    bcb6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bcb8:	2318      	movs	r3, #24
    bcba:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bcbc:	2310      	movs	r3, #16
    bcbe:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bcc0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bcc4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bcc6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bcc8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bccc:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bcce:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bcd2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bcd4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bcd8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    bcda:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    bcde:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    bce2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    bce6:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    bcea:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    bcee:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    bcf2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    bcf6:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    bcfa:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    bcfe:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    bd02:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    bd06:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    bd0a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    bd0e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    bd12:	4620      	mov	r0, r4
    bd14:	f7ff fdc4 	bl	b8a0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bd18:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bd1c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    bd20:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    bd24:	e767      	b.n	bbf6 <event_connection_prepare+0x1b6>
    bd26:	bf00      	nop
    bd28:	200008c8 	.word	0x200008c8
    bd2c:	00014645 	.word	0x00014645
    bd30:	00015394 	.word	0x00015394
    bd34:	000167f8 	.word	0x000167f8
    bd38:	000153e3 	.word	0x000153e3
    bd3c:	000171af 	.word	0x000171af
    bd40:	20000a24 	.word	0x20000a24
    bd44:	20003db0 	.word	0x20003db0
    bd48:	00016794 	.word	0x00016794
    bd4c:	00017073 	.word	0x00017073
	if (conn->pause_tx) {
    bd50:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bd54:	0718      	lsls	r0, r3, #28
    bd56:	f53f af4e 	bmi.w	bbf6 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    bd5a:	2002      	movs	r0, #2
    bd5c:	f7fd fd9a 	bl	9894 <packet_rx_reserve_get>
	if (!node_rx) {
    bd60:	2800      	cmp	r0, #0
    bd62:	f43f af48 	beq.w	bbf6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    bd66:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bd6a:	2203      	movs	r2, #3
    bd6c:	f362 0302 	bfi	r3, r2, #0, #3
    bd70:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    bd74:	8c23      	ldrh	r3, [r4, #32]
    bd76:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bd78:	2301      	movs	r3, #1
    bd7a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bd7c:	7a03      	ldrb	r3, [r0, #8]
    bd7e:	4313      	orrs	r3, r2
    bd80:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bd82:	2318      	movs	r3, #24
    bd84:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bd86:	230f      	movs	r3, #15
    bd88:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    bd8a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bd8e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    bd90:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    bd92:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bd96:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    bd98:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bd9c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    bd9e:	f7fe fbe3 	bl	a568 <packet_rx_enqueue>
    bda2:	e728      	b.n	bbf6 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    bda4:	4bb9      	ldr	r3, [pc, #740]	; (c08c <event_connection_prepare+0x64c>)
    bda6:	9301      	str	r3, [sp, #4]
    bda8:	9300      	str	r3, [sp, #0]
    bdaa:	4bb9      	ldr	r3, [pc, #740]	; (c090 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    bdac:	4ab9      	ldr	r2, [pc, #740]	; (c094 <event_connection_prepare+0x654>)
    bdae:	49ba      	ldr	r1, [pc, #744]	; (c098 <event_connection_prepare+0x658>)
    bdb0:	48ba      	ldr	r0, [pc, #744]	; (c09c <event_connection_prepare+0x65c>)
    bdb2:	e655      	b.n	ba60 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdb4:	48ba      	ldr	r0, [pc, #744]	; (c0a0 <event_connection_prepare+0x660>)
    bdb6:	f7fa ff58 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    bdba:	4601      	mov	r1, r0
    bdbc:	b360      	cbz	r0, be18 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bdbe:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bdc2:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bdc6:	2201      	movs	r2, #1
    bdc8:	f362 0301 	bfi	r3, r2, #0, #2
    bdcc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bdd0:	b2db      	uxtb	r3, r3
    bdd2:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bdd6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bdda:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bdde:	f363 07c5 	bfi	r7, r3, #3, #3
    bde2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bde6:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bdea:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bdee:	f367 1286 	bfi	r2, r7, #6, #1
    bdf2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdf6:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    bdf8:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdfa:	f042 0203 	orr.w	r2, r2, #3
    bdfe:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    be00:	2203      	movs	r2, #3
    be02:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    be04:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    be06:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    be08:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    be0a:	4620      	mov	r0, r4
    be0c:	f7ff fd48 	bl	b8a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    be10:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    be14:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    be18:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    be1c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    be20:	429a      	cmp	r2, r3
    be22:	f000 82f6 	beq.w	c412 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    be26:	2005      	movs	r0, #5
    be28:	f7ff fba4 	bl	b574 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    be2c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    be30:	3b01      	subs	r3, #1
    be32:	2b07      	cmp	r3, #7
    be34:	f200 85a7 	bhi.w	c986 <event_connection_prepare+0xf46>
    be38:	e8df f013 	tbh	[pc, r3, lsl #1]
    be3c:	02c4006c 	.word	0x02c4006c
    be40:	045e0343 	.word	0x045e0343
    be44:	05a5048e 	.word	0x05a5048e
    be48:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    be4c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    be50:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    be54:	f3c3 0282 	ubfx	r2, r3, #2, #3
    be58:	0791      	lsls	r1, r2, #30
    be5a:	d544      	bpl.n	bee6 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    be5c:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    be5e:	f362 0384 	bfi	r3, r2, #2, #3
    be62:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    be66:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    be6a:	095a      	lsrs	r2, r3, #5
    be6c:	0790      	lsls	r0, r2, #30
    be6e:	d543      	bpl.n	bef8 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    be70:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    be72:	f362 1347 	bfi	r3, r2, #5, #3
    be76:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    be7a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    be7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    be82:	f3c2 0182 	ubfx	r1, r2, #2, #3
    be86:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    be8a:	428b      	cmp	r3, r1
    be8c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    be90:	bf14      	ite	ne
    be92:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    be96:	f36f 0384 	bfceq	r3, #2, #3
    be9a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    be9e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    bea2:	0952      	lsrs	r2, r2, #5
    bea4:	f003 0307 	and.w	r3, r3, #7
    bea8:	4293      	cmp	r3, r2
    beaa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    beae:	bf14      	ite	ne
    beb0:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    beb4:	f36f 1347 	bfceq	r3, #5, #3
    beb8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    bebc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bec0:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    bec4:	f043 0301 	orr.w	r3, r3, #1
    bec8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    becc:	f362 0341 	bfi	r3, r2, #1, #1
    bed0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    bed4:	2308      	movs	r3, #8
    bed6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    beda:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bede:	3b01      	subs	r3, #1
    bee0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    bee4:	e798      	b.n	be18 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    bee6:	07d7      	lsls	r7, r2, #31
    bee8:	d501      	bpl.n	beee <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    beea:	2201      	movs	r2, #1
    beec:	e7b7      	b.n	be5e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    beee:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    bef2:	bf18      	it	ne
    bef4:	2204      	movne	r2, #4
    bef6:	e7b2      	b.n	be5e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    bef8:	07d1      	lsls	r1, r2, #31
    befa:	d501      	bpl.n	bf00 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    befc:	2201      	movs	r2, #1
    befe:	e7b8      	b.n	be72 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    bf00:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    bf04:	bf18      	it	ne
    bf06:	2204      	movne	r2, #4
    bf08:	e7b3      	b.n	be72 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    bf0a:	4b60      	ldr	r3, [pc, #384]	; (c08c <event_connection_prepare+0x64c>)
    bf0c:	9301      	str	r3, [sp, #4]
    bf0e:	9300      	str	r3, [sp, #0]
    bf10:	4b64      	ldr	r3, [pc, #400]	; (c0a4 <event_connection_prepare+0x664>)
    bf12:	e74b      	b.n	bdac <event_connection_prepare+0x36c>
	if (!conn_upd) {
    bf14:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    bf18:	b90b      	cbnz	r3, bf1e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    bf1a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    bf1e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf22:	f013 0303 	ands.w	r3, r3, #3
    bf26:	d068      	beq.n	bffa <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf28:	485d      	ldr	r0, [pc, #372]	; (c0a0 <event_connection_prepare+0x660>)
    bf2a:	f7fa fe9e 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    bf2e:	4607      	mov	r7, r0
    bf30:	2800      	cmp	r0, #0
    bf32:	f000 826e 	beq.w	c412 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    bf36:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf3a:	f003 0303 	and.w	r3, r3, #3
    bf3e:	2b01      	cmp	r3, #1
    bf40:	d059      	beq.n	bff6 <event_connection_prepare+0x5b6>
    bf42:	2b02      	cmp	r3, #2
    bf44:	d152      	bne.n	bfec <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    bf46:	4a58      	ldr	r2, [pc, #352]	; (c0a8 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    bf48:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bf4c:	f36f 0301 	bfc	r3, #0, #2
    bf50:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    bf54:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bf56:	3306      	adds	r3, #6
    bf58:	4433      	add	r3, r6
    bf5a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    bf5c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf60:	7939      	ldrb	r1, [r7, #4]
    bf62:	f041 0103 	orr.w	r1, r1, #3
    bf66:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    bf68:	210c      	movs	r1, #12
    bf6a:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    bf6c:	2100      	movs	r1, #0
    bf6e:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    bf70:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    bf74:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    bf76:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    bf7a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    bf7e:	fbb1 f1f0 	udiv	r1, r1, r0
    bf82:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    bf86:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    bf8a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    bf8e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    bf92:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    bf96:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    bf9a:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    bf9e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bfa2:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    bfa4:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bfa8:	2900      	cmp	r1, #0
    bfaa:	da0b      	bge.n	bfc4 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    bfac:	68a3      	ldr	r3, [r4, #8]
    bfae:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bfb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    bfb4:	4283      	cmp	r3, r0
    bfb6:	bf2c      	ite	cs
    bfb8:	4443      	addcs	r3, r8
    bfba:	eb08 0300 	addcc.w	r3, r8, r0
    bfbe:	1a5b      	subs	r3, r3, r1
    bfc0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    bfc4:	f107 0309 	add.w	r3, r7, #9
    bfc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    bfcc:	4b37      	ldr	r3, [pc, #220]	; (c0ac <event_connection_prepare+0x66c>)
    bfce:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bfd0:	2201      	movs	r2, #1
    bfd2:	4611      	mov	r1, r2
    bfd4:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    bfd6:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bfd8:	f7fa ff12 	bl	6e00 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bfdc:	2800      	cmp	r0, #0
    bfde:	f000 8214 	beq.w	c40a <event_connection_prepare+0x9ca>
    bfe2:	4b2a      	ldr	r3, [pc, #168]	; (c08c <event_connection_prepare+0x64c>)
    bfe4:	9301      	str	r3, [sp, #4]
    bfe6:	9300      	str	r3, [sp, #0]
    bfe8:	4b31      	ldr	r3, [pc, #196]	; (c0b0 <event_connection_prepare+0x670>)
    bfea:	e5e1      	b.n	bbb0 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    bfec:	4b27      	ldr	r3, [pc, #156]	; (c08c <event_connection_prepare+0x64c>)
    bfee:	9301      	str	r3, [sp, #4]
    bff0:	9300      	str	r3, [sp, #0]
    bff2:	4b30      	ldr	r3, [pc, #192]	; (c0b4 <event_connection_prepare+0x674>)
    bff4:	e6da      	b.n	bdac <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    bff6:	4a30      	ldr	r2, [pc, #192]	; (c0b8 <event_connection_prepare+0x678>)
    bff8:	e7a6      	b.n	bf48 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    bffa:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    bffe:	1bf7      	subs	r7, r6, r7
    c000:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c002:	043a      	lsls	r2, r7, #16
    c004:	f100 8205 	bmi.w	c412 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c008:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c00c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c010:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c014:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c018:	428a      	cmp	r2, r1
    c01a:	d009      	beq.n	c030 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c01c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c020:	f002 0207 	and.w	r2, r2, #7
    c024:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c026:	bf04      	itt	eq
    c028:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c02c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c030:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c034:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c036:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c038:	bf08      	it	eq
    c03a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c03e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c040:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c042:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c046:	429a      	cmp	r2, r3
    c048:	d114      	bne.n	c074 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    c04a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c04e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c050:	4299      	cmp	r1, r3
    c052:	d10f      	bne.n	c074 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c054:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c058:	435a      	muls	r2, r3
    c05a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c05e:	f242 7110 	movw	r1, #10000	; 0x2710
    c062:	fb01 2303 	mla	r3, r1, r3, r2
    c066:	3b01      	subs	r3, #1
    c068:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c06c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c06e:	b29b      	uxth	r3, r3
    c070:	429a      	cmp	r2, r3
    c072:	d036      	beq.n	c0e2 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    c074:	2002      	movs	r0, #2
    c076:	f7fd fc0d 	bl	9894 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c07a:	bb08      	cbnz	r0, c0c0 <event_connection_prepare+0x680>
    c07c:	4b03      	ldr	r3, [pc, #12]	; (c08c <event_connection_prepare+0x64c>)
    c07e:	9301      	str	r3, [sp, #4]
    c080:	9300      	str	r3, [sp, #0]
    c082:	4b0c      	ldr	r3, [pc, #48]	; (c0b4 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    c084:	4a03      	ldr	r2, [pc, #12]	; (c094 <event_connection_prepare+0x654>)
    c086:	4904      	ldr	r1, [pc, #16]	; (c098 <event_connection_prepare+0x658>)
    c088:	480c      	ldr	r0, [pc, #48]	; (c0bc <event_connection_prepare+0x67c>)
    c08a:	e4e9      	b.n	ba60 <event_connection_prepare+0x20>
    c08c:	00014645 	.word	0x00014645
    c090:	000167a9 	.word	0x000167a9
    c094:	00015394 	.word	0x00015394
    c098:	000153e3 	.word	0x000153e3
    c09c:	00015333 	.word	0x00015333
    c0a0:	20000a24 	.word	0x20000a24
    c0a4:	000167ce 	.word	0x000167ce
    c0a8:	0000a2b9 	.word	0x0000a2b9
    c0ac:	20003da0 	.word	0x20003da0
    c0b0:	0001675d 	.word	0x0001675d
    c0b4:	00016771 	.word	0x00016771
    c0b8:	0000afa1 	.word	0x0000afa1
    c0bc:	00016f9f 	.word	0x00016f9f
			node_rx->hdr.handle = conn->handle;
    c0c0:	8c23      	ldrh	r3, [r4, #32]
    c0c2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c0c4:	2308      	movs	r3, #8
    c0c6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c0c8:	2300      	movs	r3, #0
    c0ca:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c0cc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c0d0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c0d2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c0d6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c0d8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c0dc:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c0de:	f7fe fa43 	bl	a568 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c0e2:	6823      	ldr	r3, [r4, #0]
    c0e4:	6866      	ldr	r6, [r4, #4]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	da09      	bge.n	c0fe <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    c0ea:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c0ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c0f0:	42b0      	cmp	r0, r6
    c0f2:	bf2c      	ite	cs
    c0f4:	4480      	addcs	r8, r0
    c0f6:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c0f8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c0fa:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c0fe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c100:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c104:	49a0      	ldr	r1, [pc, #640]	; (c388 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c106:	fb13 f307 	smulbb	r3, r3, r7
    c10a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c10c:	fbb3 f2fa 	udiv	r2, r3, sl
    c110:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c114:	fb1a f009 	smulbb	r0, sl, r9
    c118:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c11a:	4283      	cmp	r3, r0
    c11c:	f080 80bf 	bcs.w	c29e <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c120:	1ac0      	subs	r0, r0, r3
    c122:	f240 1223 	movw	r2, #291	; 0x123
    c126:	4342      	muls	r2, r0
    c128:	17c3      	asrs	r3, r0, #31
    c12a:	fb01 2303 	mla	r3, r1, r3, r2
    c12e:	fba0 0101 	umull	r0, r1, r0, r1
    c132:	4419      	add	r1, r3
    c134:	a392      	add	r3, pc, #584	; (adr r3, c380 <event_connection_prepare+0x940>)
    c136:	e9d3 2300 	ldrd	r2, r3, [r3]
    c13a:	f7f4 f86b 	bl	214 <__aeabi_uldivmod>
    c13e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c142:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c146:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c148:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c14a:	f8df b274 	ldr.w	fp, [pc, #628]	; c3c0 <event_connection_prepare+0x980>
    c14e:	1bdb      	subs	r3, r3, r7
    c150:	444b      	add	r3, r9
    c152:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c154:	6823      	ldr	r3, [r4, #0]
    c156:	42b3      	cmp	r3, r6
    c158:	bf38      	it	cc
    c15a:	4633      	movcc	r3, r6
    c15c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c15e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c162:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c166:	2b00      	cmp	r3, #0
    c168:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c16c:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c16e:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c172:	f280 80a5 	bge.w	c2c0 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    c176:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c178:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c17a:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c17e:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c182:	4a82      	ldr	r2, [pc, #520]	; (c38c <event_connection_prepare+0x94c>)
    c184:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c188:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c18c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c194:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c198:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c19a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c19c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c1a0:	4b7b      	ldr	r3, [pc, #492]	; (c390 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    c1a2:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c1a6:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c1aa:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c1ae:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c1b0:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c1b4:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c1b6:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c1b8:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c1ba:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c1bc:	429f      	cmp	r7, r3
    c1be:	bf94      	ite	ls
    c1c0:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c1c2:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c1c4:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c1c6:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c1c8:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c1ca:	fba0 010b 	umull	r0, r1, r0, fp
    c1ce:	a36c      	add	r3, pc, #432	; (adr r3, c380 <event_connection_prepare+0x940>)
    c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1d4:	f7f4 f81e 	bl	214 <__aeabi_uldivmod>
    c1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1da:	1a1b      	subs	r3, r3, r0
    c1dc:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c1de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1e0:	fbb3 f0f8 	udiv	r0, r3, r8
    c1e4:	fb08 f000 	mul.w	r0, r8, r0
    c1e8:	a365      	add	r3, pc, #404	; (adr r3, c380 <event_connection_prepare+0x940>)
    c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1ee:	fba0 010b 	umull	r0, r1, r0, fp
    c1f2:	f7f4 f80f 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c1f6:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c1f8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c1fc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c200:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c204:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c206:	f242 7110 	movw	r1, #10000	; 0x2710
    c20a:	fb01 6303 	mla	r3, r1, r3, r6
    c20e:	3b01      	subs	r3, #1
    c210:	fbb3 f3f6 	udiv	r3, r3, r6
    c214:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c216:	4b5f      	ldr	r3, [pc, #380]	; (c394 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c218:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c21c:	4433      	add	r3, r6
    c21e:	fbb3 f3f6 	udiv	r3, r3, r6
    c222:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c226:	4b5c      	ldr	r3, [pc, #368]	; (c398 <event_connection_prepare+0x958>)
    c228:	4433      	add	r3, r6
    c22a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c22e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c230:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c232:	4299      	cmp	r1, r3
    c234:	bfc4      	itt	gt
    c236:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c23a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c23c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c240:	bfc8      	it	gt
    c242:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c244:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c248:	bfc8      	it	gt
    c24a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c24c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c250:	bf08      	it	eq
    c252:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c256:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c25a:	2000      	movs	r0, #0
    c25c:	2101      	movs	r1, #1
    c25e:	f006 f9f7 	bl	12650 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c262:	2200      	movs	r2, #0
    c264:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c266:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c268:	4610      	mov	r0, r2
    c26a:	f7fa fda1 	bl	6db0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c26e:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c272:	f641 2385 	movw	r3, #6789	; 0x1a85
    c276:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c278:	3207      	adds	r2, #7
		ticker_status =
    c27a:	9300      	str	r3, [sp, #0]
    c27c:	b2d2      	uxtb	r2, r2
    c27e:	4b47      	ldr	r3, [pc, #284]	; (c39c <event_connection_prepare+0x95c>)
    c280:	4608      	mov	r0, r1
    c282:	f7fb fc19 	bl	7ab8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c286:	f030 0802 	bics.w	r8, r0, #2
    c28a:	d026      	beq.n	c2da <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c28c:	4b44      	ldr	r3, [pc, #272]	; (c3a0 <event_connection_prepare+0x960>)
    c28e:	9301      	str	r3, [sp, #4]
    c290:	9300      	str	r3, [sp, #0]
    c292:	4a44      	ldr	r2, [pc, #272]	; (c3a4 <event_connection_prepare+0x964>)
    c294:	4b44      	ldr	r3, [pc, #272]	; (c3a8 <event_connection_prepare+0x968>)
    c296:	4945      	ldr	r1, [pc, #276]	; (c3ac <event_connection_prepare+0x96c>)
    c298:	4845      	ldr	r0, [pc, #276]	; (c3b0 <event_connection_prepare+0x970>)
    c29a:	f7ff bbe1 	b.w	ba60 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c29e:	fb0a 3212 	mls	r2, sl, r2, r3
    c2a2:	b292      	uxth	r2, r2
    c2a4:	fba2 0101 	umull	r0, r1, r2, r1
    c2a8:	f240 1323 	movw	r3, #291	; 0x123
    c2ac:	fb03 1102 	mla	r1, r3, r2, r1
    c2b0:	a333      	add	r3, pc, #204	; (adr r3, c380 <event_connection_prepare+0x940>)
    c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2b6:	f7f3 ffad 	bl	214 <__aeabi_uldivmod>
    c2ba:	eba8 0300 	sub.w	r3, r8, r0
    c2be:	e742      	b.n	c146 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c2c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2c2:	a32f      	add	r3, pc, #188	; (adr r3, c380 <event_connection_prepare+0x940>)
    c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2c8:	fba1 010b 	umull	r0, r1, r1, fp
    c2cc:	f7f3 ffa2 	bl	214 <__aeabi_uldivmod>
    c2d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c2d4:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c2d6:	4635      	mov	r5, r6
    c2d8:	e790      	b.n	c1fc <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c2da:	fba5 ab0b 	umull	sl, fp, r5, fp
    c2de:	a328      	add	r3, pc, #160	; (adr r3, c380 <event_connection_prepare+0x940>)
    c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c2e4:	4650      	mov	r0, sl
    c2e6:	4659      	mov	r1, fp
    c2e8:	f7f3 ff94 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c2ec:	4a31      	ldr	r2, [pc, #196]	; (c3b4 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c2ee:	f894 6020 	ldrb.w	r6, [r4, #32]
    c2f2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c2f6:	2307      	movs	r3, #7
    c2f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c2fc:	2100      	movs	r1, #0
    c2fe:	4343      	muls	r3, r0
    c300:	fb02 3301 	mla	r3, r2, r1, r3
    c304:	fba0 0102 	umull	r0, r1, r0, r2
    c308:	ebba 0000 	subs.w	r0, sl, r0
    c30c:	4419      	add	r1, r3
    c30e:	eb6b 0101 	sbc.w	r1, fp, r1
    c312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c316:	2300      	movs	r3, #0
    c318:	f7f3 ff7c 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c31c:	68e3      	ldr	r3, [r4, #12]
    c31e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c320:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c324:	4924      	ldr	r1, [pc, #144]	; (c3b8 <event_connection_prepare+0x978>)
		ticker_status =
    c326:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c328:	441a      	add	r2, r3
    c32a:	4613      	mov	r3, r2
    c32c:	4a23      	ldr	r2, [pc, #140]	; (c3bc <event_connection_prepare+0x97c>)
		ticker_status =
    c32e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c330:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c334:	bf38      	it	cc
    c336:	460a      	movcc	r2, r1
    c338:	3607      	adds	r6, #7
		ticker_status =
    c33a:	f641 2195 	movw	r1, #6805	; 0x1a95
    c33e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c340:	b2f6      	uxtb	r6, r6
		ticker_status =
    c342:	4916      	ldr	r1, [pc, #88]	; (c39c <event_connection_prepare+0x95c>)
    c344:	9107      	str	r1, [sp, #28]
    c346:	9205      	str	r2, [sp, #20]
    c348:	9406      	str	r4, [sp, #24]
    c34a:	f8cd 800c 	str.w	r8, [sp, #12]
    c34e:	9501      	str	r5, [sp, #4]
    c350:	9700      	str	r7, [sp, #0]
    c352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c354:	4632      	mov	r2, r6
    c356:	4641      	mov	r1, r8
    c358:	4640      	mov	r0, r8
    c35a:	f7fb fb0f 	bl	797c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c35e:	f030 0002 	bics.w	r0, r0, #2
    c362:	d193      	bne.n	c28c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    c364:	f1b9 0f00 	cmp.w	r9, #0
    c368:	f000 8383 	beq.w	ca72 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c36c:	2201      	movs	r2, #1
    c36e:	4611      	mov	r1, r2
}
    c370:	b00f      	add	sp, #60	; 0x3c
    c372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c376:	f7fa bd1b 	b.w	6db0 <mayfly_enable>
    c37a:	bf00      	nop
    c37c:	f3af 8000 	nop.w
    c380:	1afd498d 	.word	0x1afd498d
    c384:	00000007 	.word	0x00000007
    c388:	09ce5400 	.word	0x09ce5400
    c38c:	00016b58 	.word	0x00016b58
    c390:	000f4240 	.word	0x000f4240
    c394:	026259ff 	.word	0x026259ff
    c398:	01c9c37f 	.word	0x01c9c37f
    c39c:	0000a77d 	.word	0x0000a77d
    c3a0:	00014645 	.word	0x00014645
    c3a4:	00015394 	.word	0x00015394
    c3a8:	00016771 	.word	0x00016771
    c3ac:	000153e3 	.word	0x000153e3
    c3b0:	00016939 	.word	0x00016939
    c3b4:	1afd498d 	.word	0x1afd498d
    c3b8:	0000cc21 	.word	0x0000cc21
    c3bc:	0000cc25 	.word	0x0000cc25
    c3c0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c3c4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d05e      	beq.n	c48a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c3cc:	48c9      	ldr	r0, [pc, #804]	; (c6f4 <event_connection_prepare+0xcb4>)
    c3ce:	f7fa fc4c 	bl	6c6a <mem_acquire>
		if (node_tx) {
    c3d2:	4607      	mov	r7, r0
    c3d4:	b1e8      	cbz	r0, c412 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    c3d6:	2300      	movs	r3, #0
    c3d8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c3dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c3de:	3306      	adds	r3, #6
    c3e0:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c3e2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c3e6:	7903      	ldrb	r3, [r0, #4]
    c3e8:	f043 0303 	orr.w	r3, r3, #3
    c3ec:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c3ee:	2308      	movs	r3, #8
    c3f0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c3f2:	2301      	movs	r3, #1
    c3f4:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c3f6:	2205      	movs	r2, #5
    c3f8:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c3fc:	3008      	adds	r0, #8
    c3fe:	f7f5 fbfd 	bl	1bfc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c402:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c406:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c40a:	4639      	mov	r1, r7
    c40c:	4620      	mov	r0, r4
    c40e:	f7ff fa47 	bl	b8a0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c412:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c416:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c41a:	429a      	cmp	r2, r3
    c41c:	d01e      	beq.n	c45c <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c41e:	2005      	movs	r0, #5
    c420:	f7ff f8a8 	bl	b574 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c424:	48b3      	ldr	r0, [pc, #716]	; (c6f4 <event_connection_prepare+0xcb4>)
    c426:	f7fa fc20 	bl	6c6a <mem_acquire>
		if (node_tx) {
    c42a:	4601      	mov	r1, r0
    c42c:	b1b0      	cbz	r0, c45c <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c42e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c432:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c436:	7903      	ldrb	r3, [r0, #4]
    c438:	f043 0303 	orr.w	r3, r3, #3
    c43c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c43e:	2302      	movs	r3, #2
    c440:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c442:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c444:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c448:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c44a:	4620      	mov	r0, r4
    c44c:	f7ff fa28 	bl	b8a0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c450:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c452:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c454:	bf98      	it	ls
    c456:	3301      	addls	r3, #1
    c458:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c45c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c460:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c464:	429a      	cmp	r2, r3
    c466:	f000 82eb 	beq.w	ca40 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c46a:	2005      	movs	r0, #5
    c46c:	f7ff f882 	bl	b574 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c470:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c474:	f003 0303 	and.w	r3, r3, #3
    c478:	2b03      	cmp	r3, #3
    c47a:	f200 830c 	bhi.w	ca96 <event_connection_prepare+0x1056>
    c47e:	e8df f013 	tbh	[pc, r3, lsl #1]
    c482:	0288      	.short	0x0288
    c484:	02df02df 	.word	0x02df02df
    c488:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c48a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c48e:	1af3      	subs	r3, r6, r3
    c490:	041f      	lsls	r7, r3, #16
    c492:	d4be      	bmi.n	c412 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c494:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c498:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c49c:	f104 0717 	add.w	r7, r4, #23
    c4a0:	2205      	movs	r2, #5
    c4a2:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c4a6:	4638      	mov	r0, r7
    c4a8:	f7f5 fba8 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c4ac:	2105      	movs	r1, #5
    c4ae:	4638      	mov	r0, r7
    c4b0:	f7fa fd86 	bl	6fc0 <util_ones_count_get>
		conn->data_chan_count =
    c4b4:	7f63      	ldrb	r3, [r4, #29]
    c4b6:	f360 0305 	bfi	r3, r0, #0, #6
    c4ba:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c4bc:	2301      	movs	r3, #1
    c4be:	7723      	strb	r3, [r4, #28]
    c4c0:	e7a7      	b.n	c412 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    c4c2:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c4c6:	f1b9 0f00 	cmp.w	r9, #0
    c4ca:	d1a2      	bne.n	c412 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c4cc:	4889      	ldr	r0, [pc, #548]	; (c6f4 <event_connection_prepare+0xcb4>)
    c4ce:	f7fa fbcc 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    c4d2:	4607      	mov	r7, r0
    c4d4:	2800      	cmp	r0, #0
    c4d6:	d09c      	beq.n	c412 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    c4d8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c4dc:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c4de:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c4e2:	db4d      	blt.n	c580 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c4e4:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c4e8:	465b      	mov	r3, fp
    c4ea:	464a      	mov	r2, r9
    c4ec:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c4f0:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c4f4:	f005 fc22 	bl	11d3c <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c4f8:	2210      	movs	r2, #16
    c4fa:	4659      	mov	r1, fp
    c4fc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c500:	f7f5 fb7c 	bl	1bfc <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c504:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c508:	2208      	movs	r2, #8
    c50a:	f204 1033 	addw	r0, r4, #307	; 0x133
    c50e:	f7f5 fb75 	bl	1bfc <memcpy>
		conn->ccm_rx.direction = 0;
    c512:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c516:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c51a:	f369 0300 	bfi	r3, r9, #0, #1
    c51e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c522:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c526:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c52a:	f043 0301 	orr.w	r3, r3, #1
    c52e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c532:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c536:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c53a:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c53e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c542:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c546:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c54a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c54e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c552:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c556:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c55a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c55e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c562:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c566:	4651      	mov	r1, sl
    c568:	4620      	mov	r0, r4
    c56a:	f7ff fa27 	bl	b9bc <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c56e:	4639      	mov	r1, r7
    c570:	4620      	mov	r0, r4
    c572:	f7ff f995 	bl	b8a0 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c576:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c57a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c57e:	e748      	b.n	c412 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    c580:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c584:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c588:	2b08      	cmp	r3, #8
    c58a:	f000 80a2 	beq.w	c6d2 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    c58e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c592:	f1b9 0f00 	cmp.w	r9, #0
    c596:	d020      	beq.n	c5da <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c598:	7903      	ldrb	r3, [r0, #4]
    c59a:	f043 0303 	orr.w	r3, r3, #3
    c59e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c5a0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c5a4:	0698      	lsls	r0, r3, #26
    c5a6:	d512      	bpl.n	c5ce <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c5a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c5ac:	0759      	lsls	r1, r3, #29
    c5ae:	d50e      	bpl.n	c5ce <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c5b0:	2311      	movs	r3, #17
    c5b2:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c5b4:	2303      	movs	r3, #3
    c5b6:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c5b8:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c5bc:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c5be:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c5c0:	797b      	ldrb	r3, [r7, #5]
    c5c2:	3301      	adds	r3, #1
    c5c4:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c5c6:	2300      	movs	r3, #0
    c5c8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c5cc:	e7cf      	b.n	c56e <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c5ce:	230d      	movs	r3, #13
    c5d0:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c5d2:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c5d6:	2301      	movs	r3, #1
    c5d8:	e7f1      	b.n	c5be <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c5da:	4846      	ldr	r0, [pc, #280]	; (c6f4 <event_connection_prepare+0xcb4>)
    c5dc:	f7fa fb45 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    c5e0:	4682      	mov	sl, r0
    c5e2:	2800      	cmp	r0, #0
    c5e4:	f000 8300 	beq.w	cbe8 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c5e8:	7903      	ldrb	r3, [r0, #4]
    c5ea:	f043 0303 	orr.w	r3, r3, #3
    c5ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c5f0:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c5f4:	230d      	movs	r3, #13
    c5f6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c5f8:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c5fc:	f100 0308 	add.w	r3, r0, #8
    c600:	4619      	mov	r1, r3
    c602:	2208      	movs	r2, #8
    c604:	6868      	ldr	r0, [r5, #4]
    c606:	930d      	str	r3, [sp, #52]	; 0x34
    c608:	f006 fd62 	bl	130d0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c60c:	f10a 0310 	add.w	r3, sl, #16
    c610:	4619      	mov	r1, r3
    c612:	465a      	mov	r2, fp
    c614:	6868      	ldr	r0, [r5, #4]
    c616:	930b      	str	r3, [sp, #44]	; 0x2c
    c618:	f006 fd5a 	bl	130d0 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c61e:	2208      	movs	r2, #8
    c620:	4619      	mov	r1, r3
    c622:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c626:	f7f5 fae9 	bl	1bfc <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c62a:	465a      	mov	r2, fp
    c62c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c62e:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c632:	f7f5 fae3 	bl	1bfc <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c636:	4651      	mov	r1, sl
    c638:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c63a:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c63e:	f7ff f92f 	bl	b8a0 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c642:	4653      	mov	r3, sl
    c644:	464a      	mov	r2, r9
    c646:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c64a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c64e:	f005 fb75 	bl	11d3c <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c652:	2210      	movs	r2, #16
    c654:	4651      	mov	r1, sl
    c656:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c65a:	f7f5 facf 	bl	1bfc <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c65e:	2208      	movs	r2, #8
    c660:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c664:	f204 1033 	addw	r0, r4, #307	; 0x133
    c668:	f7f5 fac8 	bl	1bfc <memcpy>
			conn->ccm_rx.direction = 1;
    c66c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c670:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c674:	f043 0301 	orr.w	r3, r3, #1
    c678:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c67c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c680:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c684:	f369 0300 	bfi	r3, r9, #0, #1
    c688:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c68c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c690:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c694:	f043 0310 	orr.w	r3, r3, #16
    c698:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c69c:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c69e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c6a2:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c6a6:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c6aa:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c6ae:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c6b2:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c6b6:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c6ba:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c6be:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c6c2:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c6c6:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c6c8:	2301      	movs	r3, #1
    c6ca:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c6cc:	2305      	movs	r3, #5
    c6ce:	71fb      	strb	r3, [r7, #7]
    c6d0:	e74d      	b.n	c56e <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c6d2:	4651      	mov	r1, sl
    c6d4:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    c6d8:	f7ff f970 	bl	b9bc <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c6dc:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    c6e0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c6e4:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c6e8:	f369 03c3 	bfi	r3, r9, #3, #1
    c6ec:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c6f0:	e73d      	b.n	c56e <event_connection_prepare+0xb2e>
    c6f2:	bf00      	nop
    c6f4:	20000a24 	.word	0x20000a24
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c6f8:	48b0      	ldr	r0, [pc, #704]	; (c9bc <event_connection_prepare+0xf7c>)
    c6fa:	f7fa fab6 	bl	6c6a <mem_acquire>
	if (node_tx) {
    c6fe:	4607      	mov	r7, r0
    c700:	2800      	cmp	r0, #0
    c702:	f43f ae86 	beq.w	c412 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c706:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c70a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c70e:	4bac      	ldr	r3, [pc, #688]	; (c9c0 <event_connection_prepare+0xf80>)
    c710:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c714:	7903      	ldrb	r3, [r0, #4]
    c716:	f043 0303 	orr.w	r3, r3, #3
    c71a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c71c:	2309      	movs	r3, #9
    c71e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c720:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c724:	2b00      	cmp	r3, #0
    c726:	bfac      	ite	ge
    c728:	2308      	movge	r3, #8
    c72a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c72c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c72e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c730:	2100      	movs	r1, #0
    c732:	4410      	add	r0, r2
    c734:	f7f5 fa8e 	bl	1c54 <memset>
			conn->llcp_features & 0xFF;
    c738:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c73c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c73e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c740:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c742:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c744:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c746:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c748:	4620      	mov	r0, r4
    c74a:	f7ff f8a9 	bl	b8a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c74e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c752:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c756:	e65c      	b.n	c412 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    c758:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c75c:	07da      	lsls	r2, r3, #31
    c75e:	d424      	bmi.n	c7aa <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c760:	4896      	ldr	r0, [pc, #600]	; (c9bc <event_connection_prepare+0xf7c>)
    c762:	f7fa fa82 	bl	6c6a <mem_acquire>
		if (node_tx) {
    c766:	4601      	mov	r1, r0
    c768:	2800      	cmp	r0, #0
    c76a:	f43f ae52 	beq.w	c412 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    c76e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c772:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c776:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c77a:	f043 0301 	orr.w	r3, r3, #1
    c77e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c782:	7903      	ldrb	r3, [r0, #4]
    c784:	f043 0303 	orr.w	r3, r3, #3
    c788:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c78a:	2306      	movs	r3, #6
    c78c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c78e:	230c      	movs	r3, #12
    c790:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c792:	2309      	movs	r3, #9
    c794:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c796:	f06f 030e 	mvn.w	r3, #14
    c79a:	7243      	strb	r3, [r0, #9]
    c79c:	2305      	movs	r3, #5
    c79e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c7a4:	72c3      	strb	r3, [r0, #11]
    c7a6:	7303      	strb	r3, [r0, #12]
    c7a8:	e7ce      	b.n	c748 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    c7aa:	079b      	lsls	r3, r3, #30
    c7ac:	d526      	bpl.n	c7fc <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    c7ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c7b2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c7b6:	2002      	movs	r0, #2
    c7b8:	f7fd f86c 	bl	9894 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c7bc:	b920      	cbnz	r0, c7c8 <event_connection_prepare+0xd88>
    c7be:	4b81      	ldr	r3, [pc, #516]	; (c9c4 <event_connection_prepare+0xf84>)
    c7c0:	9301      	str	r3, [sp, #4]
    c7c2:	9300      	str	r3, [sp, #0]
    c7c4:	4b80      	ldr	r3, [pc, #512]	; (c9c8 <event_connection_prepare+0xf88>)
    c7c6:	e45d      	b.n	c084 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    c7c8:	8c23      	ldrh	r3, [r4, #32]
    c7ca:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c7cc:	2301      	movs	r3, #1
    c7ce:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c7d0:	7a03      	ldrb	r3, [r0, #8]
    c7d2:	f043 0303 	orr.w	r3, r3, #3
    c7d6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c7d8:	2306      	movs	r3, #6
    c7da:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c7dc:	230c      	movs	r3, #12
    c7de:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c7e0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c7e4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c7e6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c7ea:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c7ee:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c7f2:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c7f6:	f7fd feb7 	bl	a568 <packet_rx_enqueue>
    c7fa:	e60a      	b.n	c412 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    c7fc:	4b71      	ldr	r3, [pc, #452]	; (c9c4 <event_connection_prepare+0xf84>)
    c7fe:	9301      	str	r3, [sp, #4]
    c800:	9300      	str	r3, [sp, #0]
    c802:	4b71      	ldr	r3, [pc, #452]	; (c9c8 <event_connection_prepare+0xf88>)
    c804:	f7ff bad2 	b.w	bdac <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c808:	486c      	ldr	r0, [pc, #432]	; (c9bc <event_connection_prepare+0xf7c>)
    c80a:	f7fa fa2e 	bl	6c6a <mem_acquire>
	if (node_tx) {
    c80e:	4601      	mov	r1, r0
    c810:	2800      	cmp	r0, #0
    c812:	f43f adfe 	beq.w	c412 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c816:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c81a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c81e:	7903      	ldrb	r3, [r0, #4]
    c820:	f043 0303 	orr.w	r3, r3, #3
    c824:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c826:	2301      	movs	r3, #1
    c828:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c82a:	2312      	movs	r3, #18
    c82c:	71c3      	strb	r3, [r0, #7]
    c82e:	e78b      	b.n	c748 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    c830:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c834:	07d7      	lsls	r7, r2, #31
    c836:	d551      	bpl.n	c8dc <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c838:	4860      	ldr	r0, [pc, #384]	; (c9bc <event_connection_prepare+0xf7c>)
    c83a:	f7fa fa16 	bl	6c6a <mem_acquire>
		if (node_tx) {
    c83e:	4607      	mov	r7, r0
    c840:	2800      	cmp	r0, #0
    c842:	f43f ade6 	beq.w	c412 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    c846:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c84a:	f36f 0300 	bfc	r3, #0, #1
    c84e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c852:	b2db      	uxtb	r3, r3
    c854:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c858:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c85c:	d138      	bne.n	c8d0 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    c85e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c862:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c866:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c868:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c86c:	d51a      	bpl.n	c8a4 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    c86e:	2002      	movs	r0, #2
    c870:	f7fd f810 	bl	9894 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c874:	b920      	cbnz	r0, c880 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    c876:	4b53      	ldr	r3, [pc, #332]	; (c9c4 <event_connection_prepare+0xf84>)
    c878:	9301      	str	r3, [sp, #4]
    c87a:	9300      	str	r3, [sp, #0]
    c87c:	4b53      	ldr	r3, [pc, #332]	; (c9cc <event_connection_prepare+0xf8c>)
    c87e:	e401      	b.n	c084 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    c880:	8c23      	ldrh	r3, [r4, #32]
    c882:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c884:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c888:	230c      	movs	r3, #12
    c88a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c88c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c890:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c894:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c896:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c89a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c89e:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c8a0:	f7fd fe62 	bl	a568 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c8a4:	793b      	ldrb	r3, [r7, #4]
    c8a6:	f043 0303 	orr.w	r3, r3, #3
    c8aa:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c8ac:	2305      	movs	r3, #5
    c8ae:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c8b0:	2318      	movs	r3, #24
    c8b2:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c8b4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c8b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c8bc:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c8be:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c8c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c8c6:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c8c8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c8cc:	817b      	strh	r3, [r7, #10]
    c8ce:	e59c      	b.n	c40a <event_connection_prepare+0x9ca>
								 conn->latency +
    c8d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c8d2:	3306      	adds	r3, #6
    c8d4:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c8d6:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c8da:	e7e3      	b.n	c8a4 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c8dc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c8e0:	1af3      	subs	r3, r6, r3
    c8e2:	0419      	lsls	r1, r3, #16
    c8e4:	f53f ad95 	bmi.w	c412 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c8e8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8ec:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    c8f0:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    c8f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    c8f8:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c8fc:	bf18      	it	ne
    c8fe:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    c902:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c906:	bf1c      	itt	ne
    c908:	f367 03c5 	bfine	r3, r7, #3, #3
    c90c:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    c910:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    c914:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    c918:	d008      	beq.n	c92c <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    c91a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c91e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    c922:	095b      	lsrs	r3, r3, #5
    c924:	f363 0702 	bfi	r7, r3, #0, #3
    c928:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    c92c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c930:	461f      	mov	r7, r3
    c932:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c936:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c93a:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    c93c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c940:	d40b      	bmi.n	c95a <event_connection_prepare+0xf1a>
    c942:	b2fb      	uxtb	r3, r7
    c944:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c948:	4283      	cmp	r3, r0
    c94a:	d106      	bne.n	c95a <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    c94c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c950:	f003 0307 	and.w	r3, r3, #7
    c954:	428b      	cmp	r3, r1
    c956:	f43f ad5c 	beq.w	c412 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    c95a:	2002      	movs	r0, #2
    c95c:	f7fc ff9a 	bl	9894 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c960:	2800      	cmp	r0, #0
    c962:	d088      	beq.n	c876 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    c964:	8c23      	ldrh	r3, [r4, #32]
    c966:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c968:	230c      	movs	r3, #12
    c96a:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    c96c:	2300      	movs	r3, #0
    c96e:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    c970:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c974:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c978:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    c97a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c97e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c982:	7343      	strb	r3, [r0, #13]
    c984:	e737      	b.n	c7f6 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    c986:	4b0f      	ldr	r3, [pc, #60]	; (c9c4 <event_connection_prepare+0xf84>)
    c988:	9301      	str	r3, [sp, #4]
    c98a:	9300      	str	r3, [sp, #0]
    c98c:	4b10      	ldr	r3, [pc, #64]	; (c9d0 <event_connection_prepare+0xf90>)
    c98e:	f7ff ba0d 	b.w	bdac <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    c992:	f7fc ff69 	bl	9868 <packet_rx_acquired_count_get>
    c996:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c998:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    c99c:	f7fa f994 	bl	6cc8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c9a0:	4438      	add	r0, r7
    c9a2:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c9a4:	28ff      	cmp	r0, #255	; 0xff
    c9a6:	d91d      	bls.n	c9e4 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    c9a8:	4b06      	ldr	r3, [pc, #24]	; (c9c4 <event_connection_prepare+0xf84>)
    c9aa:	9301      	str	r3, [sp, #4]
    c9ac:	9300      	str	r3, [sp, #0]
    c9ae:	4a09      	ldr	r2, [pc, #36]	; (c9d4 <event_connection_prepare+0xf94>)
    c9b0:	4b09      	ldr	r3, [pc, #36]	; (c9d8 <event_connection_prepare+0xf98>)
    c9b2:	490a      	ldr	r1, [pc, #40]	; (c9dc <event_connection_prepare+0xf9c>)
    c9b4:	480a      	ldr	r0, [pc, #40]	; (c9e0 <event_connection_prepare+0xfa0>)
    c9b6:	f7ff b853 	b.w	ba60 <event_connection_prepare+0x20>
    c9ba:	bf00      	nop
    c9bc:	20000a24 	.word	0x20000a24
    c9c0:	000141ff 	.word	0x000141ff
    c9c4:	00014645 	.word	0x00014645
    c9c8:	00016785 	.word	0x00016785
    c9cc:	000167e1 	.word	0x000167e1
    c9d0:	000167f8 	.word	0x000167f8
    c9d4:	00015394 	.word	0x00015394
    c9d8:	000167bf 	.word	0x000167bf
    c9dc:	000153e3 	.word	0x000153e3
    c9e0:	00016987 	.word	0x00016987
		if (_radio.packet_rx_data_count != free_count_rx) {
    c9e4:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    c9e8:	4283      	cmp	r3, r0
    c9ea:	d129      	bne.n	ca40 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c9ec:	4881      	ldr	r0, [pc, #516]	; (cbf4 <event_connection_prepare+0x11b4>)
    c9ee:	f7fa f93c 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    c9f2:	4601      	mov	r1, r0
    c9f4:	b320      	cbz	r0, ca40 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c9f6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    c9fa:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c9fe:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    ca02:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ca04:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ca06:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ca08:	f365 0301 	bfi	r3, r5, #0, #2
    ca0c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca10:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    ca12:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca14:	f043 0303 	orr.w	r3, r3, #3
    ca18:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    ca1a:	2309      	movs	r3, #9
    ca1c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    ca1e:	2314      	movs	r3, #20
    ca20:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    ca22:	231b      	movs	r3, #27
    ca24:	720b      	strb	r3, [r1, #8]
    ca26:	2300      	movs	r3, #0
    ca28:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    ca2a:	2348      	movs	r3, #72	; 0x48
    ca2c:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    ca2e:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    ca30:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    ca32:	4620      	mov	r0, r4
    ca34:	f7fe ff34 	bl	b8a0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ca38:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ca3c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    ca40:	f894 3020 	ldrb.w	r3, [r4, #32]
    ca44:	f994 501d 	ldrsb.w	r5, [r4, #29]
    ca48:	486b      	ldr	r0, [pc, #428]	; (cbf8 <event_connection_prepare+0x11b8>)
    ca4a:	496c      	ldr	r1, [pc, #432]	; (cbfc <event_connection_prepare+0x11bc>)
    ca4c:	68a2      	ldr	r2, [r4, #8]
    ca4e:	9403      	str	r4, [sp, #12]
    ca50:	3307      	adds	r3, #7
    ca52:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    ca56:	bf38      	it	cc
    ca58:	4601      	movcc	r1, r0
    ca5a:	b2db      	uxtb	r3, r3
    ca5c:	e88d 000c 	stmia.w	sp, {r2, r3}
    ca60:	9102      	str	r1, [sp, #8]
    ca62:	1d23      	adds	r3, r4, #4
    ca64:	4622      	mov	r2, r4
    ca66:	990c      	ldr	r1, [sp, #48]	; 0x30
    ca68:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    ca6a:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    ca6c:	f7fe fd90 	bl	b590 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    ca70:	8466      	strh	r6, [r4, #34]	; 0x22
}
    ca72:	b00f      	add	sp, #60	; 0x3c
    ca74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    ca78:	f7fc fef6 	bl	9868 <packet_rx_acquired_count_get>
    ca7c:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ca7e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ca82:	f7fa f921 	bl	6cc8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ca86:	4438      	add	r0, r7
    ca88:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ca8a:	28ff      	cmp	r0, #255	; 0xff
    ca8c:	d88c      	bhi.n	c9a8 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ca8e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    ca92:	4283      	cmp	r3, r0
    ca94:	d005      	beq.n	caa2 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    ca96:	4b5a      	ldr	r3, [pc, #360]	; (cc00 <event_connection_prepare+0x11c0>)
    ca98:	9301      	str	r3, [sp, #4]
    ca9a:	9300      	str	r3, [sp, #0]
    ca9c:	4b59      	ldr	r3, [pc, #356]	; (cc04 <event_connection_prepare+0x11c4>)
    ca9e:	f7ff b985 	b.w	bdac <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    caa2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    caa6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    caaa:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    caae:	2100      	movs	r1, #0
    cab0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    cab4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cab8:	f361 02c3 	bfi	r2, r1, #3, #1
    cabc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    cac0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    cac4:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    cac6:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    caca:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    cacc:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    cad0:	f7fa f8fa 	bl	6cc8 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    cad4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    cad8:	b10b      	cbz	r3, cade <event_connection_prepare+0x109e>
			free_count_conn++;
    cada:	3001      	adds	r0, #1
    cadc:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    cade:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    cae2:	b10b      	cbz	r3, cae8 <event_connection_prepare+0x10a8>
			free_count_conn++;
    cae4:	3001      	adds	r0, #1
    cae6:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cae8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    caea:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    caee:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    caf0:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    caf2:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    caf6:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    caf8:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cafa:	d052      	beq.n	cba2 <event_connection_prepare+0x1162>
    cafc:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    cb00:	42bb      	cmp	r3, r7
    cb02:	d34e      	bcc.n	cba2 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    cb04:	2002      	movs	r0, #2
    cb06:	f7fc fec5 	bl	9894 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d155      	bne.n	cbba <event_connection_prepare+0x117a>
    cb0e:	4b3c      	ldr	r3, [pc, #240]	; (cc00 <event_connection_prepare+0x11c0>)
    cb10:	9301      	str	r3, [sp, #4]
    cb12:	9300      	str	r3, [sp, #0]
    cb14:	4b3b      	ldr	r3, [pc, #236]	; (cc04 <event_connection_prepare+0x11c4>)
    cb16:	f7ff bab5 	b.w	c084 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    cb1a:	b90b      	cbnz	r3, cb20 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    cb1c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    cb20:	3b01      	subs	r3, #1
    cb22:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    cb26:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    cb2a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    cb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cb32:	4649      	mov	r1, r9
    cb34:	6818      	ldr	r0, [r3, #0]
    cb36:	f7fa f8b2 	bl	6c9e <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    cb3a:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cb3e:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cb42:	3a01      	subs	r2, #1
    cb44:	4293      	cmp	r3, r2
    cb46:	db08      	blt.n	cb5a <event_connection_prepare+0x111a>
    cb48:	4b2d      	ldr	r3, [pc, #180]	; (cc00 <event_connection_prepare+0x11c0>)
    cb4a:	9301      	str	r3, [sp, #4]
    cb4c:	9300      	str	r3, [sp, #0]
    cb4e:	4a2e      	ldr	r2, [pc, #184]	; (cc08 <event_connection_prepare+0x11c8>)
    cb50:	4b2c      	ldr	r3, [pc, #176]	; (cc04 <event_connection_prepare+0x11c4>)
    cb52:	492e      	ldr	r1, [pc, #184]	; (cc0c <event_connection_prepare+0x11cc>)
    cb54:	482e      	ldr	r0, [pc, #184]	; (cc10 <event_connection_prepare+0x11d0>)
    cb56:	f7fe bf83 	b.w	ba60 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    cb5a:	3301      	adds	r3, #1
    cb5c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cb60:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cb64:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    cb68:	4293      	cmp	r3, r2
    cb6a:	d1d6      	bne.n	cb1a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cb6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    cb6e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cb72:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cb74:	bf9a      	itte	ls
    cb76:	2334      	movls	r3, #52	; 0x34
    cb78:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cb7c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cb80:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    cb84:	fbb2 f2f1 	udiv	r2, r2, r1
    cb88:	b2d2      	uxtb	r2, r2
    cb8a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cb8e:	b95a      	cbnz	r2, cba8 <event_connection_prepare+0x1168>
    cb90:	4b1b      	ldr	r3, [pc, #108]	; (cc00 <event_connection_prepare+0x11c0>)
    cb92:	9301      	str	r3, [sp, #4]
    cb94:	9300      	str	r3, [sp, #0]
    cb96:	4a1c      	ldr	r2, [pc, #112]	; (cc08 <event_connection_prepare+0x11c8>)
    cb98:	4b1a      	ldr	r3, [pc, #104]	; (cc04 <event_connection_prepare+0x11c4>)
    cb9a:	491c      	ldr	r1, [pc, #112]	; (cc0c <event_connection_prepare+0x11cc>)
    cb9c:	481d      	ldr	r0, [pc, #116]	; (cc14 <event_connection_prepare+0x11d4>)
    cb9e:	f7fe bf5f 	b.w	ba60 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    cba2:	f8df 9078 	ldr.w	r9, [pc, #120]	; cc1c <event_connection_prepare+0x11dc>
    cba6:	e7db      	b.n	cb60 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    cba8:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cbac:	4b1a      	ldr	r3, [pc, #104]	; (cc18 <event_connection_prepare+0x11d8>)
    cbae:	f7fa f835 	bl	6c1c <mem_init>
			packet_rx_allocate(4);
    cbb2:	2004      	movs	r0, #4
    cbb4:	f7fc fee6 	bl	9984 <packet_rx_allocate>
    cbb8:	e7a4      	b.n	cb04 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    cbba:	8c23      	ldrh	r3, [r4, #32]
    cbbc:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cbbe:	2301      	movs	r3, #1
    cbc0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cbc2:	7a03      	ldrb	r3, [r0, #8]
    cbc4:	f043 0303 	orr.w	r3, r3, #3
    cbc8:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cbca:	2309      	movs	r3, #9
    cbcc:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cbce:	2315      	movs	r3, #21
    cbd0:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cbd2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cbd4:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cbd6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cbd8:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cbda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cbdc:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cbde:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cbe0:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cbe2:	f7fd fcc1 	bl	a568 <packet_rx_enqueue>
    cbe6:	e72b      	b.n	ca40 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cbe8:	4902      	ldr	r1, [pc, #8]	; (cbf4 <event_connection_prepare+0x11b4>)
    cbea:	4638      	mov	r0, r7
    cbec:	f7fa f857 	bl	6c9e <mem_release>
    cbf0:	e40f      	b.n	c412 <event_connection_prepare+0x9d2>
    cbf2:	bf00      	nop
    cbf4:	20000a24 	.word	0x20000a24
    cbf8:	0000cf4d 	.word	0x0000cf4d
    cbfc:	0000cc65 	.word	0x0000cc65
    cc00:	00014645 	.word	0x00014645
    cc04:	000167bf 	.word	0x000167bf
    cc08:	00015394 	.word	0x00015394
    cc0c:	000153e3 	.word	0x000153e3
    cc10:	000169be 	.word	0x000169be
    cc14:	00016a18 	.word	0x00016a18
    cc18:	200009f8 	.word	0x200009f8
    cc1c:	20000a10 	.word	0x20000a10

0000cc20 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    cc20:	f7fe bf0e 	b.w	ba40 <event_connection_prepare>

0000cc24 <event_slave_prepare>:
    cc24:	f7fe bf0c 	b.w	ba40 <event_connection_prepare>

0000cc28 <connection_configure>:
{
    cc28:	b510      	push	{r4, lr}
    cc2a:	4604      	mov	r4, r0
	radio_reset();
    cc2c:	f005 f962 	bl	11ef4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    cc30:	2000      	movs	r0, #0
    cc32:	f005 f989 	bl	11f48 <radio_tx_power_set>
	radio_isr_set(isr);
    cc36:	480a      	ldr	r0, [pc, #40]	; (cc60 <connection_configure+0x38>)
    cc38:	f005 f926 	bl	11e88 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    cc3c:	f104 0010 	add.w	r0, r4, #16
    cc40:	f005 f9a0 	bl	11f84 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    cc44:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    cc46:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cc48:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cc4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cc4e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cc50:	f240 605b 	movw	r0, #1627	; 0x65b
    cc54:	4319      	orrs	r1, r3
}
    cc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cc5a:	f005 ba3b 	b.w	120d4 <radio_crc_configure>
    cc5e:	bf00      	nop
    cc60:	0000e311 	.word	0x0000e311

0000cc64 <event_slave>:
{
    cc64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cc68:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cc6a:	4b71      	ldr	r3, [pc, #452]	; (ce30 <event_slave+0x1cc>)
    cc6c:	7cda      	ldrb	r2, [r3, #19]
{
    cc6e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cc70:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cc74:	461d      	mov	r5, r3
    cc76:	b172      	cbz	r2, cc96 <event_slave+0x32>
    cc78:	4b6e      	ldr	r3, [pc, #440]	; (ce34 <event_slave+0x1d0>)
    cc7a:	9301      	str	r3, [sp, #4]
    cc7c:	9300      	str	r3, [sp, #0]
    cc7e:	4a6e      	ldr	r2, [pc, #440]	; (ce38 <event_slave+0x1d4>)
    cc80:	4b6e      	ldr	r3, [pc, #440]	; (ce3c <event_slave+0x1d8>)
    cc82:	496f      	ldr	r1, [pc, #444]	; (ce40 <event_slave+0x1dc>)
    cc84:	486f      	ldr	r0, [pc, #444]	; (ce44 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cc86:	f7f4 f981 	bl	f8c <printk>
    cc8a:	4040      	eors	r0, r0
    cc8c:	f380 8811 	msr	BASEPRI, r0
    cc90:	f04f 0004 	mov.w	r0, #4
    cc94:	df02      	svc	2
    cc96:	7c1b      	ldrb	r3, [r3, #16]
    cc98:	8c22      	ldrh	r2, [r4, #32]
    cc9a:	b2db      	uxtb	r3, r3
    cc9c:	3207      	adds	r2, #7
    cc9e:	4293      	cmp	r3, r2
    cca0:	d007      	beq.n	ccb2 <event_slave+0x4e>
    cca2:	4b64      	ldr	r3, [pc, #400]	; (ce34 <event_slave+0x1d0>)
    cca4:	9301      	str	r3, [sp, #4]
    cca6:	9300      	str	r3, [sp, #0]
    cca8:	4a63      	ldr	r2, [pc, #396]	; (ce38 <event_slave+0x1d4>)
    ccaa:	4b64      	ldr	r3, [pc, #400]	; (ce3c <event_slave+0x1d8>)
    ccac:	4964      	ldr	r1, [pc, #400]	; (ce40 <event_slave+0x1dc>)
    ccae:	4866      	ldr	r0, [pc, #408]	; (ce48 <event_slave+0x1e4>)
    ccb0:	e7e9      	b.n	cc86 <event_slave+0x22>
	_radio.packet_counter = 0;
    ccb2:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    ccb6:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    ccba:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    ccbc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    ccbe:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    ccc0:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    ccc2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    ccc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    ccc6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    ccca:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    cccc:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    ccce:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    ccd0:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    ccd2:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    ccd4:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    ccd6:	f7ff ffa7 	bl	cc28 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    ccda:	2096      	movs	r0, #150	; 0x96
    ccdc:	f005 fab4 	bl	12248 <radio_tmr_tifs_set>
				     conn->phy_flags);
    cce0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    cce4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cce8:	09d3      	lsrs	r3, r2, #7
    ccea:	4631      	mov	r1, r6
    ccec:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ccf0:	f000 0007 	and.w	r0, r0, #7
    ccf4:	f005 fa18 	bl	12128 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ccf8:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    ccfc:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    cd00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    cd04:	4620      	mov	r0, r4
    cd06:	3108      	adds	r1, #8
    cd08:	f7fd f922 	bl	9f50 <rx_packet_set>
	if (conn->data_chan_sel) {
    cd0c:	7f63      	ldrb	r3, [r4, #29]
    cd0e:	f013 0f40 	tst.w	r3, #64	; 0x40
    cd12:	f104 0217 	add.w	r2, r4, #23
    cd16:	d05a      	beq.n	cdce <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cd18:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cd1a:	8be1      	ldrh	r1, [r4, #30]
    cd1c:	3801      	subs	r0, #1
    cd1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cd22:	b280      	uxth	r0, r0
    cd24:	f7fe fd78 	bl	b818 <chan_sel_2>
	chan_set(data_chan_use);
    cd28:	f7fe f84c 	bl	adc4 <chan_set>
	conn->slave.window_widening_event_us +=
    cd2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cd2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    cd30:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    cd32:	2200      	movs	r2, #0
    cd34:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    cd36:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    cd38:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    cd3a:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    cd3c:	bf88      	it	hi
    cd3e:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    cd40:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cd42:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    cd44:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    cd46:	4413      	add	r3, r2
    cd48:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cd4a:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    cd4c:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cd4e:	f107 0109 	add.w	r1, r7, #9
    cd52:	4630      	mov	r0, r6
    cd54:	f005 fa84 	bl	12260 <radio_tmr_start>
    cd58:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    cd5a:	f005 fb1d 	bl	12398 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    cd5e:	4630      	mov	r0, r6
    cd60:	f005 fb3c 	bl	123dc <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd64:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    cd66:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd68:	f103 0650 	add.w	r6, r3, #80	; 0x50
    cd6c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    cd70:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd74:	2101      	movs	r1, #1
    cd76:	f000 0007 	and.w	r0, r0, #7
    cd7a:	f005 f95c 	bl	12036 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cd7e:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    cd80:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    cd82:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cd86:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    cd8a:	2802      	cmp	r0, #2
    cd8c:	d03f      	beq.n	ce0e <event_slave+0x1aa>
		return 40;
    cd8e:	2804      	cmp	r0, #4
    cd90:	bf0c      	ite	eq
    cd92:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    cd96:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cd98:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    cd9a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cd9c:	f005 f94d 	bl	1203a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    cda0:	4430      	add	r0, r6
    cda2:	f005 fadb 	bl	1235c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    cda6:	f894 1020 	ldrb.w	r1, [r4, #32]
    cdaa:	3107      	adds	r1, #7
    cdac:	463a      	mov	r2, r7
    cdae:	b2c9      	uxtb	r1, r1
    cdb0:	4620      	mov	r0, r4
    cdb2:	f7fe fab9 	bl	b328 <preempt_calc>
    cdb6:	4603      	mov	r3, r0
    cdb8:	b358      	cbz	r0, ce12 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    cdba:	2304      	movs	r3, #4
    cdbc:	752b      	strb	r3, [r5, #20]
		radio_disable();
    cdbe:	f005 f94d 	bl	1205c <radio_disable>
	packet_tx_enqueue(2);
    cdc2:	2002      	movs	r0, #2
}
    cdc4:	b002      	add	sp, #8
    cdc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    cdca:	f7fd bf11 	b.w	abf0 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    cdce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    cdd0:	7fa6      	ldrb	r6, [r4, #30]
    cdd2:	fb01 6606 	mla	r6, r1, r6, r6
    cdd6:	7fe1      	ldrb	r1, [r4, #31]
    cdd8:	2025      	movs	r0, #37	; 0x25
    cdda:	440e      	add	r6, r1
    cddc:	fb96 f1f0 	sdiv	r1, r6, r0
    cde0:	fb00 6611 	mls	r6, r0, r1, r6
    cde4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cde6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    cde8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cdea:	5c51      	ldrb	r1, [r2, r1]
    cdec:	f006 0607 	and.w	r6, r6, #7
    cdf0:	fa41 f606 	asr.w	r6, r1, r6
    cdf4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    cdf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cdfa:	d495      	bmi.n	cd28 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    cdfc:	fbb0 f1f3 	udiv	r1, r0, r3
    ce00:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    ce04:	b2c9      	uxtb	r1, r1
    ce06:	4610      	mov	r0, r2
    ce08:	f7fc fd12 	bl	9830 <chan_sel_remap>
    ce0c:	e78c      	b.n	cd28 <event_slave+0xc4>
		return 24;
    ce0e:	2318      	movs	r3, #24
    ce10:	e7c2      	b.n	cd98 <event_slave+0x134>
		ticker_status =
    ce12:	4a0e      	ldr	r2, [pc, #56]	; (ce4c <event_slave+0x1e8>)
    ce14:	4601      	mov	r1, r0
    ce16:	f7fa fecd 	bl	7bb4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce1a:	f030 0302 	bics.w	r3, r0, #2
    ce1e:	d0d0      	beq.n	cdc2 <event_slave+0x15e>
    ce20:	4b04      	ldr	r3, [pc, #16]	; (ce34 <event_slave+0x1d0>)
    ce22:	9301      	str	r3, [sp, #4]
    ce24:	9300      	str	r3, [sp, #0]
    ce26:	4a04      	ldr	r2, [pc, #16]	; (ce38 <event_slave+0x1d4>)
    ce28:	4b04      	ldr	r3, [pc, #16]	; (ce3c <event_slave+0x1d8>)
    ce2a:	4905      	ldr	r1, [pc, #20]	; (ce40 <event_slave+0x1dc>)
    ce2c:	4808      	ldr	r0, [pc, #32]	; (ce50 <event_slave+0x1ec>)
    ce2e:	e72a      	b.n	cc86 <event_slave+0x22>
    ce30:	200008c8 	.word	0x200008c8
    ce34:	00014645 	.word	0x00014645
    ce38:	00015394 	.word	0x00015394
    ce3c:	00016811 	.word	0x00016811
    ce40:	000153e3 	.word	0x000153e3
    ce44:	00016a55 	.word	0x00016a55
    ce48:	00016b08 	.word	0x00016b08
    ce4c:	0000a965 	.word	0x0000a965
    ce50:	00016939 	.word	0x00016939

0000ce54 <prepare_pdu_data_tx>:
	    conn->empty ||
    ce54:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    ce58:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce5e:	4604      	mov	r4, r0
    ce60:	460e      	mov	r6, r1
	if (/* empty packet */
    ce62:	d109      	bne.n	ce78 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    ce64:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    ce68:	b131      	cbz	r1, ce78 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    ce6a:	f01c 0f08 	tst.w	ip, #8
    ce6e:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    ce72:	d022      	beq.n	ceba <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    ce74:	4571      	cmp	r1, lr
    ce76:	d020      	beq.n	ceba <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    ce78:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ce80:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    ce84:	f005 f93c 	bl	12100 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ce88:	7803      	ldrb	r3, [r0, #0]
    ce8a:	2201      	movs	r2, #1
    ce8c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    ce90:	2200      	movs	r2, #0
    ce92:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    ce94:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ce98:	7003      	strb	r3, [r0, #0]
    ce9a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    ce9c:	b152      	cbz	r2, ceb4 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    ce9e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    cea2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    cea4:	7803      	ldrb	r3, [r0, #0]
    cea6:	f36f 1347 	bfc	r3, #5, #3
    ceaa:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    ceac:	2300      	movs	r3, #0
    ceae:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    ceb0:	6030      	str	r0, [r6, #0]
    ceb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    ceb4:	f362 1304 	bfi	r3, r2, #4, #1
    ceb8:	e7f3      	b.n	cea2 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    ceba:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    cebe:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    cec2:	1d0d      	adds	r5, r1, #4
    cec4:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    cec6:	b913      	cbnz	r3, cece <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    cec8:	7843      	ldrb	r3, [r0, #1]
    ceca:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    cece:	b122      	cbz	r2, ceda <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ced0:	5cab      	ldrb	r3, [r5, r2]
    ced2:	2701      	movs	r7, #1
    ced4:	f367 0301 	bfi	r3, r7, #0, #2
    ced8:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    ceda:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    cede:	1abf      	subs	r7, r7, r2
    cee0:	b2ff      	uxtb	r7, r7
    cee2:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    cee4:	5cab      	ldrb	r3, [r5, r2]
    cee6:	f36f 1304 	bfc	r3, #4, #1
    ceea:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    ceec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    cef0:	f003 0307 	and.w	r3, r3, #7
    cef4:	2b02      	cmp	r3, #2
    cef6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cef8:	bf15      	itete	ne
    cefa:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cefc:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cefe:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cf00:	3b0b      	subeq	r3, #11
    cf02:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cf04:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    cf08:	bf18      	it	ne
    cf0a:	3b04      	subne	r3, #4
    cf0c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    cf10:	bf18      	it	ne
    cf12:	b29b      	uxthne	r3, r3
    cf14:	4563      	cmp	r3, ip
    cf16:	bf28      	it	cs
    cf18:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cf1a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cf1c:	bf81      	itttt	hi
    cf1e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cf20:	5cab      	ldrbhi	r3, [r5, r2]
    cf22:	f043 0310 	orrhi.w	r3, r3, #16
    cf26:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cf28:	680b      	ldr	r3, [r1, #0]
    cf2a:	b11b      	cbz	r3, cf34 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    cf2c:	5cab      	ldrb	r3, [r5, r2]
    cf2e:	f043 0310 	orr.w	r3, r3, #16
    cf32:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cf34:	f1be 0f00 	cmp.w	lr, #0
    cf38:	d1b4      	bne.n	cea4 <prepare_pdu_data_tx+0x50>
    cf3a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cf3e:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cf40:	bf1c      	itt	ne
    cf42:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cf46:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cf4a:	e7ab      	b.n	cea4 <prepare_pdu_data_tx+0x50>

0000cf4c <event_master>:
{
    cf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf4e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf50:	4b56      	ldr	r3, [pc, #344]	; (d0ac <event_master+0x160>)
    cf52:	7cd9      	ldrb	r1, [r3, #19]
{
    cf54:	b085      	sub	sp, #20
    cf56:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cf58:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    cf5c:	461d      	mov	r5, r3
    cf5e:	b171      	cbz	r1, cf7e <event_master+0x32>
    cf60:	4b53      	ldr	r3, [pc, #332]	; (d0b0 <event_master+0x164>)
    cf62:	9301      	str	r3, [sp, #4]
    cf64:	9300      	str	r3, [sp, #0]
    cf66:	4a53      	ldr	r2, [pc, #332]	; (d0b4 <event_master+0x168>)
    cf68:	4b53      	ldr	r3, [pc, #332]	; (d0b8 <event_master+0x16c>)
    cf6a:	4954      	ldr	r1, [pc, #336]	; (d0bc <event_master+0x170>)
    cf6c:	4854      	ldr	r0, [pc, #336]	; (d0c0 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cf6e:	f7f4 f80d 	bl	f8c <printk>
    cf72:	4040      	eors	r0, r0
    cf74:	f380 8811 	msr	BASEPRI, r0
    cf78:	f04f 0004 	mov.w	r0, #4
    cf7c:	df02      	svc	2
    cf7e:	7c1b      	ldrb	r3, [r3, #16]
    cf80:	8c21      	ldrh	r1, [r4, #32]
    cf82:	b2db      	uxtb	r3, r3
    cf84:	3107      	adds	r1, #7
    cf86:	428b      	cmp	r3, r1
    cf88:	d007      	beq.n	cf9a <event_master+0x4e>
    cf8a:	4b49      	ldr	r3, [pc, #292]	; (d0b0 <event_master+0x164>)
    cf8c:	9301      	str	r3, [sp, #4]
    cf8e:	9300      	str	r3, [sp, #0]
    cf90:	4a48      	ldr	r2, [pc, #288]	; (d0b4 <event_master+0x168>)
    cf92:	4b49      	ldr	r3, [pc, #292]	; (d0b8 <event_master+0x16c>)
    cf94:	4949      	ldr	r1, [pc, #292]	; (d0bc <event_master+0x170>)
    cf96:	484b      	ldr	r0, [pc, #300]	; (d0c4 <event_master+0x178>)
    cf98:	e7e9      	b.n	cf6e <event_master+0x22>
	_radio.packet_counter = 0;
    cf9a:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    cf9e:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    cfa2:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    cfa4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    cfa6:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    cfa8:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    cfaa:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    cfac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    cfae:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    cfb2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    cfb4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    cfb6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    cfb8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    cfba:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    cfbc:	f7fd fe18 	bl	abf0 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    cfc0:	a903      	add	r1, sp, #12
    cfc2:	4620      	mov	r0, r4
    cfc4:	f7ff ff46 	bl	ce54 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    cfc8:	9903      	ldr	r1, [sp, #12]
    cfca:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    cfce:	780b      	ldrb	r3, [r1, #0]
    cfd0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    cfd4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    cfd8:	f362 0382 	bfi	r3, r2, #2, #1
    cfdc:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    cfde:	4620      	mov	r0, r4
    cfe0:	f7ff fe22 	bl	cc28 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    cfe4:	2096      	movs	r0, #150	; 0x96
    cfe6:	f005 f92f 	bl	12248 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    cfea:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cfee:	f000 0007 	and.w	r0, r0, #7
    cff2:	f005 f88d 	bl	12110 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    cff6:	9903      	ldr	r1, [sp, #12]
    cff8:	4620      	mov	r0, r4
    cffa:	f7fc ffd5 	bl	9fa8 <tx_packet_set>
	if (conn->data_chan_sel) {
    cffe:	7f63      	ldrb	r3, [r4, #29]
    d000:	f013 0f40 	tst.w	r3, #64	; 0x40
    d004:	f104 0217 	add.w	r2, r4, #23
    d008:	d021      	beq.n	d04e <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d00a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d00c:	8be1      	ldrh	r1, [r4, #30]
    d00e:	3801      	subs	r0, #1
    d010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d014:	b280      	uxth	r0, r0
    d016:	f7fe fbff 	bl	b818 <chan_sel_2>
	chan_set(data_chan_use);
    d01a:	f7fd fed3 	bl	adc4 <chan_set>
		remainder_us = radio_tmr_start(1,
    d01e:	68ea      	ldr	r2, [r5, #12]
    d020:	f107 0109 	add.w	r1, r7, #9
    d024:	2001      	movs	r0, #1
    d026:	f005 f91b 	bl	12260 <radio_tmr_start>
		radio_tmr_end_capture();
    d02a:	f005 f9e9 	bl	12400 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d02e:	f894 1020 	ldrb.w	r1, [r4, #32]
    d032:	3107      	adds	r1, #7
    d034:	463a      	mov	r2, r7
    d036:	b2c9      	uxtb	r1, r1
    d038:	4620      	mov	r0, r4
    d03a:	f7fe f975 	bl	b328 <preempt_calc>
	if (0 !=
    d03e:	4603      	mov	r3, r0
    d040:	b328      	cbz	r0, d08e <event_master+0x142>
		_radio.state = STATE_STOP;
    d042:	2304      	movs	r3, #4
    d044:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d046:	f005 f809 	bl	1205c <radio_disable>
}
    d04a:	b005      	add	sp, #20
    d04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d04e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d050:	7fa6      	ldrb	r6, [r4, #30]
    d052:	fb01 6606 	mla	r6, r1, r6, r6
    d056:	7fe1      	ldrb	r1, [r4, #31]
    d058:	2025      	movs	r0, #37	; 0x25
    d05a:	440e      	add	r6, r1
    d05c:	fb96 f1f0 	sdiv	r1, r6, r0
    d060:	fb00 6611 	mls	r6, r0, r1, r6
    d064:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d066:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d068:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d06a:	5c51      	ldrb	r1, [r2, r1]
    d06c:	f006 0607 	and.w	r6, r6, #7
    d070:	fa41 f606 	asr.w	r6, r1, r6
    d074:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d07a:	d4ce      	bmi.n	d01a <event_master+0xce>
		chan_index = chan_next % chan_count;
    d07c:	fbb0 f1f3 	udiv	r1, r0, r3
    d080:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d084:	b2c9      	uxtb	r1, r1
    d086:	4610      	mov	r0, r2
    d088:	f7fc fbd2 	bl	9830 <chan_sel_remap>
    d08c:	e7c5      	b.n	d01a <event_master+0xce>
		ticker_status =
    d08e:	4a0e      	ldr	r2, [pc, #56]	; (d0c8 <event_master+0x17c>)
    d090:	4601      	mov	r1, r0
    d092:	f7fa fd8f 	bl	7bb4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d096:	f030 0302 	bics.w	r3, r0, #2
    d09a:	d0d6      	beq.n	d04a <event_master+0xfe>
    d09c:	4b04      	ldr	r3, [pc, #16]	; (d0b0 <event_master+0x164>)
    d09e:	9301      	str	r3, [sp, #4]
    d0a0:	9300      	str	r3, [sp, #0]
    d0a2:	4a04      	ldr	r2, [pc, #16]	; (d0b4 <event_master+0x168>)
    d0a4:	4b04      	ldr	r3, [pc, #16]	; (d0b8 <event_master+0x16c>)
    d0a6:	4905      	ldr	r1, [pc, #20]	; (d0bc <event_master+0x170>)
    d0a8:	4808      	ldr	r0, [pc, #32]	; (d0cc <event_master+0x180>)
    d0aa:	e760      	b.n	cf6e <event_master+0x22>
    d0ac:	200008c8 	.word	0x200008c8
    d0b0:	00014645 	.word	0x00014645
    d0b4:	00015394 	.word	0x00015394
    d0b8:	0001681d 	.word	0x0001681d
    d0bc:	000153e3 	.word	0x000153e3
    d0c0:	00016a55 	.word	0x00016a55
    d0c4:	00016b08 	.word	0x00016b08
    d0c8:	0000a965 	.word	0x0000a965
    d0cc:	00016939 	.word	0x00016939

0000d0d0 <isr_rx_conn_pkt_ctrl>:
{
    d0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d0d4:	7ac7      	ldrb	r7, [r0, #11]
{
    d0d6:	4604      	mov	r4, r0
    d0d8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d0da:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d0de:	2f19      	cmp	r7, #25
    d0e0:	f201 80e0 	bhi.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
    d0e4:	e8df f017 	tbh	[pc, r7, lsl #1]
    d0e8:	0081001a 	.word	0x0081001a
    d0ec:	00cc00bd 	.word	0x00cc00bd
    d0f0:	012200fa 	.word	0x012200fa
    d0f4:	05850154 	.word	0x05850154
    d0f8:	01c40190 	.word	0x01c40190
    d0fc:	021c01f2 	.word	0x021c01f2
    d100:	02b6024d 	.word	0x02b6024d
    d104:	02ce01a6 	.word	0x02ce01a6
    d108:	04a40421 	.word	0x04a40421
    d10c:	057a0560 	.word	0x057a0560
    d110:	06480648 	.word	0x06480648
    d114:	07ea071d 	.word	0x07ea071d
    d118:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    d11c:	4ecb      	ldr	r6, [pc, #812]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d11e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d122:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d126:	2b00      	cmp	r3, #0
    d128:	f281 80bc 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d12c:	7a41      	ldrb	r1, [r0, #9]
    d12e:	2000      	movs	r0, #0
    d130:	f7fc fb52 	bl	97d8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d134:	2800      	cmp	r0, #0
    d136:	f001 80b5 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d13a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d13e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d140:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d142:	041b      	lsls	r3, r3, #16
    d144:	f101 80c4 	bmi.w	e2d0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d148:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d14c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d150:	429a      	cmp	r2, r3
    d152:	d007      	beq.n	d164 <isr_rx_conn_pkt_ctrl+0x94>
    d154:	4bbe      	ldr	r3, [pc, #760]	; (d450 <isr_rx_conn_pkt_ctrl+0x380>)
    d156:	9301      	str	r3, [sp, #4]
    d158:	9300      	str	r3, [sp, #0]
    d15a:	4bbe      	ldr	r3, [pc, #760]	; (d454 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d15c:	4abe      	ldr	r2, [pc, #760]	; (d458 <isr_rx_conn_pkt_ctrl+0x388>)
    d15e:	49bf      	ldr	r1, [pc, #764]	; (d45c <isr_rx_conn_pkt_ctrl+0x38c>)
    d160:	48bf      	ldr	r0, [pc, #764]	; (d460 <isr_rx_conn_pkt_ctrl+0x390>)
    d162:	e0f7      	b.n	d354 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    d164:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d168:	b90a      	cbnz	r2, d16e <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    d16a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d16e:	7b22      	ldrb	r2, [r4, #12]
    d170:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d174:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d178:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d17c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d17e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d182:	7c20      	ldrb	r0, [r4, #16]
    d184:	7be2      	ldrb	r2, [r4, #15]
    d186:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d18a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d18e:	7ca0      	ldrb	r0, [r4, #18]
    d190:	7c62      	ldrb	r2, [r4, #17]
    d192:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d196:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d19a:	7ce2      	ldrb	r2, [r4, #19]
    d19c:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d19e:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d1a2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d1a6:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d1aa:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d1ae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d1b2:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d1b6:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d1b8:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d1bc:	2201      	movs	r2, #1
    d1be:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d1c2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d1c6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d1ca:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d1ce:	4293      	cmp	r3, r2
    d1d0:	d007      	beq.n	d1e2 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d1d2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d1d6:	f003 0307 	and.w	r3, r3, #7
    d1da:	2b04      	cmp	r3, #4
    d1dc:	d101      	bne.n	d1e2 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d1de:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d1e2:	2000      	movs	r0, #0
    d1e4:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d1e8:	e038      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d1ea:	4b98      	ldr	r3, [pc, #608]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d1ec:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d1f0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	f281 8055 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d1fa:	7a41      	ldrb	r1, [r0, #9]
    d1fc:	2001      	movs	r0, #1
    d1fe:	f7fc faeb 	bl	97d8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d202:	2800      	cmp	r0, #0
    d204:	f001 804e 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d208:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d20c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d20e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d210:	041f      	lsls	r7, r3, #16
    d212:	f101 805d 	bmi.w	e2d0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d216:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d21a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d21e:	429a      	cmp	r2, r3
    d220:	d004      	beq.n	d22c <isr_rx_conn_pkt_ctrl+0x15c>
    d222:	4b8b      	ldr	r3, [pc, #556]	; (d450 <isr_rx_conn_pkt_ctrl+0x380>)
    d224:	9301      	str	r3, [sp, #4]
    d226:	9300      	str	r3, [sp, #0]
    d228:	4b8e      	ldr	r3, [pc, #568]	; (d464 <isr_rx_conn_pkt_ctrl+0x394>)
    d22a:	e797      	b.n	d15c <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    d22c:	2205      	movs	r2, #5
    d22e:	f104 010c 	add.w	r1, r4, #12
    d232:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d236:	f7f4 fce1 	bl	1bfc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d23a:	7c63      	ldrb	r3, [r4, #17]
    d23c:	7ca2      	ldrb	r2, [r4, #18]
    d23e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d242:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d246:	2302      	movs	r3, #2
    d248:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d24c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d250:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d252:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d254:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d258:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d25c:	b003      	add	sp, #12
    d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d262:	7a41      	ldrb	r1, [r0, #9]
    d264:	2002      	movs	r0, #2
    d266:	f7fc fab7 	bl	97d8 <pdu_len_cmp>
    d26a:	2800      	cmp	r0, #0
    d26c:	f001 801a 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d270:	4b76      	ldr	r3, [pc, #472]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d272:	7b22      	ldrb	r2, [r4, #12]
    d274:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d278:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d27c:	2000      	movs	r0, #0
	return nack;
    d27e:	e7ed      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d280:	4e72      	ldr	r6, [pc, #456]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d282:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d286:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d28a:	2b00      	cmp	r3, #0
    d28c:	f281 800a 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d290:	7a41      	ldrb	r1, [r0, #9]
    d292:	2003      	movs	r0, #3
    d294:	f7fc faa0 	bl	97d8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d298:	2800      	cmp	r0, #0
    d29a:	f001 8003 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d29e:	2208      	movs	r2, #8
    d2a0:	f104 0116 	add.w	r1, r4, #22
    d2a4:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d2a8:	f7f4 fca8 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d2ac:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d2b0:	2204      	movs	r2, #4
    d2b2:	f104 011e 	add.w	r1, r4, #30
    d2b6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d2ba:	f7f4 fc9f 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d2be:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d2c2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d2c6:	f042 0204 	orr.w	r2, r2, #4
    d2ca:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d2ce:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d2d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d2d6:	2301      	movs	r3, #1
    d2d8:	702b      	strb	r3, [r5, #0]
    d2da:	e7cf      	b.n	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    d2dc:	4d5b      	ldr	r5, [pc, #364]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d2de:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d2e2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	f2c0 87dc 	blt.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d2ec:	7a41      	ldrb	r1, [r0, #9]
    d2ee:	2004      	movs	r0, #4
    d2f0:	f7fc fa72 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d2f4:	2800      	cmp	r0, #0
    d2f6:	f000 87d5 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d2fa:	2208      	movs	r2, #8
    d2fc:	f104 010c 	add.w	r1, r4, #12
    d300:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d304:	f7f4 fc7a 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d308:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d30c:	2204      	movs	r2, #4
    d30e:	f104 0114 	add.w	r1, r4, #20
    d312:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d316:	f7f4 fc71 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d31a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d31e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d322:	f043 0304 	orr.w	r3, r3, #4
    d326:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d32a:	e7a7      	b.n	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d32c:	4b47      	ldr	r3, [pc, #284]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d32e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d332:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d336:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d33a:	42b3      	cmp	r3, r6
    d33c:	d012      	beq.n	d364 <isr_rx_conn_pkt_ctrl+0x294>
    d33e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d342:	2b03      	cmp	r3, #3
    d344:	d00e      	beq.n	d364 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d346:	4b42      	ldr	r3, [pc, #264]	; (d450 <isr_rx_conn_pkt_ctrl+0x380>)
    d348:	9301      	str	r3, [sp, #4]
    d34a:	9300      	str	r3, [sp, #0]
    d34c:	4a42      	ldr	r2, [pc, #264]	; (d458 <isr_rx_conn_pkt_ctrl+0x388>)
    d34e:	4b46      	ldr	r3, [pc, #280]	; (d468 <isr_rx_conn_pkt_ctrl+0x398>)
    d350:	4942      	ldr	r1, [pc, #264]	; (d45c <isr_rx_conn_pkt_ctrl+0x38c>)
    d352:	4846      	ldr	r0, [pc, #280]	; (d46c <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d354:	f7f3 fe1a 	bl	f8c <printk>
    d358:	4040      	eors	r0, r0
    d35a:	f380 8811 	msr	BASEPRI, r0
    d35e:	f04f 0004 	mov.w	r0, #4
    d362:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d364:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d368:	2b00      	cmp	r3, #0
    d36a:	f2c0 879b 	blt.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d36e:	7a61      	ldrb	r1, [r4, #9]
    d370:	2005      	movs	r0, #5
    d372:	f7fc fa31 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d376:	2800      	cmp	r0, #0
    d378:	f000 8794 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d37c:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d37e:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d380:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d382:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d386:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d38a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d38e:	e765      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d390:	7a41      	ldrb	r1, [r0, #9]
    d392:	2006      	movs	r0, #6
    d394:	f7fc fa20 	bl	97d8 <pdu_len_cmp>
    d398:	2800      	cmp	r0, #0
    d39a:	f000 8783 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    d39e:	4b2b      	ldr	r3, [pc, #172]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d3a0:	7cda      	ldrb	r2, [r3, #19]
    d3a2:	2a03      	cmp	r2, #3
    d3a4:	4619      	mov	r1, r3
    d3a6:	d124      	bne.n	d3f2 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d3a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d3ac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d3b0:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d3b4:	4290      	cmp	r0, r2
    d3b6:	d003      	beq.n	d3c0 <isr_rx_conn_pkt_ctrl+0x2f0>
    d3b8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d3bc:	2803      	cmp	r0, #3
    d3be:	d1c2      	bne.n	d346 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d3c0:	2000      	movs	r0, #0
    d3c2:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d3c6:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d3c8:	2003      	movs	r0, #3
    d3ca:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d3ce:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d3d2:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d3d6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d3da:	065e      	lsls	r6, r3, #25
    d3dc:	d505      	bpl.n	d3ea <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    d3de:	f36f 1386 	bfc	r3, #6, #1
    d3e2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d3e6:	2309      	movs	r3, #9
    d3e8:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d3ea:	2301      	movs	r3, #1
    d3ec:	702b      	strb	r3, [r5, #0]
				break;
    d3ee:	f000 bcbf 	b.w	dd70 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    d3f2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d3f6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d3fa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d3fe:	f36f 03c3 	bfc	r3, #3, #1
    d402:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d406:	e7e4      	b.n	d3d2 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    d408:	4b10      	ldr	r3, [pc, #64]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d40a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d40e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d412:	2b00      	cmp	r3, #0
    d414:	f280 8746 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d418:	7a41      	ldrb	r1, [r0, #9]
    d41a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d41c:	f7fc f9dc 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d420:	2800      	cmp	r0, #0
    d422:	f000 873f 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d426:	4631      	mov	r1, r6
    d428:	4628      	mov	r0, r5
}
    d42a:	b003      	add	sp, #12
    d42c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d430:	f7fe ba7e 	b.w	b930 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d434:	4b05      	ldr	r3, [pc, #20]	; (d44c <isr_rx_conn_pkt_ctrl+0x37c>)
    d436:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d43a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d43e:	2b00      	cmp	r3, #0
    d440:	f2c0 8730 	blt.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d444:	7a41      	ldrb	r1, [r0, #9]
    d446:	200e      	movs	r0, #14
    d448:	e7e8      	b.n	d41c <isr_rx_conn_pkt_ctrl+0x34c>
    d44a:	bf00      	nop
    d44c:	200008c8 	.word	0x200008c8
    d450:	00014645 	.word	0x00014645
    d454:	0001687c 	.word	0x0001687c
    d458:	00015394 	.word	0x00015394
    d45c:	000153e3 	.word	0x000153e3
    d460:	00016d04 	.word	0x00016d04
    d464:	00016888 	.word	0x00016888
    d468:	0001652e 	.word	0x0001652e
    d46c:	00016d46 	.word	0x00016d46
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d470:	7a41      	ldrb	r1, [r0, #9]
    d472:	2009      	movs	r0, #9
    d474:	f7fc f9b0 	bl	97d8 <pdu_len_cmp>
    d478:	2800      	cmp	r0, #0
    d47a:	f000 8713 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d47e:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d480:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d482:	48b2      	ldr	r0, [pc, #712]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d488:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d48c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d490:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d494:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d498:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d49c:	7ba1      	ldrb	r1, [r4, #14]
    d49e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d4a2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d4a6:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d4aa:	400b      	ands	r3, r1
    d4ac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d4b0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d4b4:	f043 0320 	orr.w	r3, r3, #32
    d4b8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d4bc:	2301      	movs	r3, #1
    d4be:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d4c0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d4c4:	2000      	movs	r0, #0
    d4c6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d4ca:	e6c7      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d4cc:	4e9f      	ldr	r6, [pc, #636]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
    d4ce:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d4d2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	f280 86e4 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d4dc:	7a41      	ldrb	r1, [r0, #9]
    d4de:	200a      	movs	r0, #10
    d4e0:	f7fc f97a 	bl	97d8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d4e4:	2800      	cmp	r0, #0
    d4e6:	f000 86dd 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4ea:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d4ee:	f7f9 fbbc 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    d4f2:	4601      	mov	r1, r0
    d4f4:	b908      	cbnz	r0, d4fa <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d4f6:	2001      	movs	r0, #1
    d4f8:	e6b0      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    d4fa:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d4fe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d502:	f36f 1304 	bfc	r3, #4, #1
    d506:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d50a:	7903      	ldrb	r3, [r0, #4]
    d50c:	f043 0303 	orr.w	r3, r3, #3
    d510:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d512:	2301      	movs	r3, #1
    d514:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d516:	230b      	movs	r3, #11
    d518:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d51a:	4628      	mov	r0, r5
    d51c:	f000 bcdc 	b.w	ded8 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d520:	7a41      	ldrb	r1, [r0, #9]
    d522:	200b      	movs	r0, #11
    d524:	f7fc f958 	bl	97d8 <pdu_len_cmp>
    d528:	2800      	cmp	r0, #0
    d52a:	f000 86bb 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d52e:	4887      	ldr	r0, [pc, #540]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
    d530:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d534:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d538:	2b00      	cmp	r3, #0
    d53a:	db1b      	blt.n	d574 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d53c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d540:	f7f9 fb93 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    d544:	4601      	mov	r1, r0
    d546:	2800      	cmp	r0, #0
    d548:	d0d5      	beq.n	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    d54a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d54e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d552:	f043 0304 	orr.w	r3, r3, #4
    d556:	f36f 1304 	bfc	r3, #4, #1
    d55a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d55e:	7903      	ldrb	r3, [r0, #4]
    d560:	f043 0303 	orr.w	r3, r3, #3
    d564:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d566:	2301      	movs	r3, #1
    d568:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d56a:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d56c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d56e:	4620      	mov	r0, r4
    d570:	f000 bcb2 	b.w	ded8 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    d574:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d578:	f36f 1345 	bfc	r3, #5, #1
    d57c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d580:	e67c      	b.n	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d582:	7a41      	ldrb	r1, [r0, #9]
    d584:	200c      	movs	r0, #12
    d586:	f7fc f927 	bl	97d8 <pdu_len_cmp>
    d58a:	2800      	cmp	r0, #0
    d58c:	f000 868a 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d590:	486e      	ldr	r0, [pc, #440]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
    d592:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d596:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d59a:	f013 0701 	ands.w	r7, r3, #1
    d59e:	d150      	bne.n	d642 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d5a0:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d5a4:	f7f9 fb61 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    d5a8:	4601      	mov	r1, r0
    d5aa:	2800      	cmp	r0, #0
    d5ac:	d0a3      	beq.n	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    d5ae:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d5b2:	f043 0301 	orr.w	r3, r3, #1
    d5b6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d5ba:	7903      	ldrb	r3, [r0, #4]
    d5bc:	f043 0303 	orr.w	r3, r3, #3
    d5c0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d5c2:	2306      	movs	r3, #6
    d5c4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d5c6:	230c      	movs	r3, #12
    d5c8:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d5ca:	2309      	movs	r3, #9
    d5cc:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d5ce:	f06f 030e 	mvn.w	r3, #14
    d5d2:	7243      	strb	r3, [r0, #9]
    d5d4:	2305      	movs	r3, #5
    d5d6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d5d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5dc:	72c3      	strb	r3, [r0, #11]
    d5de:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d5e0:	4630      	mov	r0, r6
    d5e2:	f7fe f98b 	bl	b8fc <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d5e6:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5ee:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d5f2:	f004 fd85 	bl	12100 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5f6:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d5f8:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d5fa:	2201      	movs	r2, #1
    d5fc:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d600:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d604:	7003      	strb	r3, [r0, #0]
    d606:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d608:	b1c2      	cbz	r2, d63c <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    d60a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d60e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d610:	7b23      	ldrb	r3, [r4, #12]
    d612:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d616:	7ba2      	ldrb	r2, [r4, #14]
    d618:	7b63      	ldrb	r3, [r4, #13]
    d61a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d61e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d622:	7be3      	ldrb	r3, [r4, #15]
    d624:	7c22      	ldrb	r2, [r4, #16]
    d626:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d62a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d62e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d632:	f043 0302 	orr.w	r3, r3, #2
    d636:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d63a:	e61f      	b.n	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    d63c:	f362 1304 	bfi	r3, r2, #4, #1
    d640:	e7e5      	b.n	d60e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    d642:	f013 0302 	ands.w	r3, r3, #2
    d646:	f47f ae19 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    d64a:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d64e:	2301      	movs	r3, #1
    d650:	702b      	strb	r3, [r5, #0]
    d652:	e7dd      	b.n	d610 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d654:	7a41      	ldrb	r1, [r0, #9]
    d656:	200d      	movs	r0, #13
    d658:	f7fc f8be 	bl	97d8 <pdu_len_cmp>
    d65c:	2800      	cmp	r0, #0
    d65e:	f000 8621 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    d662:	4b3a      	ldr	r3, [pc, #232]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
    d664:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d668:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d66c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d670:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d674:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d676:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d67a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d67e:	2301      	movs	r3, #1
    d680:	702b      	strb	r3, [r5, #0]
    d682:	e5eb      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d684:	7a41      	ldrb	r1, [r0, #9]
    d686:	200f      	movs	r0, #15
    d688:	f7fc f8a6 	bl	97d8 <pdu_len_cmp>
    d68c:	2800      	cmp	r0, #0
    d68e:	f000 8609 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d692:	4b2e      	ldr	r3, [pc, #184]	; (d74c <isr_rx_conn_pkt_ctrl+0x67c>)
    d694:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    d698:	461a      	mov	r2, r3
    d69a:	b151      	cbz	r1, d6b2 <isr_rx_conn_pkt_ctrl+0x5e2>
    d69c:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    d6a0:	4281      	cmp	r1, r0
    d6a2:	d006      	beq.n	d6b2 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d6a4:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d6a6:	210f      	movs	r1, #15
}
    d6a8:	b003      	add	sp, #12
    d6aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d6ae:	f7fe b9a9 	b.w	ba04 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d6b2:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    d6b6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d6ba:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d6be:	2b00      	cmp	r3, #0
    d6c0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d6c4:	f2c0 80a7 	blt.w	d816 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    d6c8:	4299      	cmp	r1, r3
    d6ca:	d009      	beq.n	d6e0 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    d6cc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d6d0:	f013 0307 	ands.w	r3, r3, #7
    d6d4:	d002      	beq.n	d6dc <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    d6d6:	3b04      	subs	r3, #4
    d6d8:	2b01      	cmp	r3, #1
    d6da:	d801      	bhi.n	d6e0 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d6dc:	2223      	movs	r2, #35	; 0x23
    d6de:	e7e2      	b.n	d6a6 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d6e0:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d6e4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d6e8:	4299      	cmp	r1, r3
    d6ea:	d003      	beq.n	d6f4 <isr_rx_conn_pkt_ctrl+0x624>
    d6ec:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d6f0:	2b03      	cmp	r3, #3
    d6f2:	d105      	bne.n	d700 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d6f4:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d6f8:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d6fc:	4299      	cmp	r1, r3
    d6fe:	d001      	beq.n	d704 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d700:	222a      	movs	r2, #42	; 0x2a
    d702:	e7d0      	b.n	d6a6 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    d704:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d708:	4643      	mov	r3, r8
    d70a:	2b05      	cmp	r3, #5
    d70c:	d91b      	bls.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d70e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d710:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d714:	d817      	bhi.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    d716:	45b8      	cmp	r8, r7
    d718:	d815      	bhi.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    d71a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d71e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d722:	d210      	bcs.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    d724:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d728:	f1ae 060a 	sub.w	r6, lr, #10
    d72c:	b2b6      	uxth	r6, r6
    d72e:	f640 4976 	movw	r9, #3190	; 0xc76
    d732:	454e      	cmp	r6, r9
    d734:	d807      	bhi.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    d736:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d73a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d73e:	da02      	bge.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    d740:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d742:	428f      	cmp	r7, r1
    d744:	d204      	bcs.n	d750 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    d746:	221e      	movs	r2, #30
    d748:	e7ad      	b.n	d6a6 <isr_rx_conn_pkt_ctrl+0x5d6>
    d74a:	bf00      	nop
    d74c:	200008c8 	.word	0x200008c8
				conn->llcp_conn_param.interval = cpr->interval_min;
    d750:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d754:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d758:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d75c:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d760:	7da6      	ldrb	r6, [r4, #22]
    d762:	7d61      	ldrb	r1, [r4, #21]
    d764:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d768:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d76c:	7e26      	ldrb	r6, [r4, #24]
    d76e:	7de1      	ldrb	r1, [r4, #23]
    d770:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d774:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d778:	7ea6      	ldrb	r6, [r4, #26]
    d77a:	7e61      	ldrb	r1, [r4, #25]
    d77c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d780:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d784:	7f26      	ldrb	r6, [r4, #28]
    d786:	7ee1      	ldrb	r1, [r4, #27]
    d788:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d78c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d790:	7fa6      	ldrb	r6, [r4, #30]
    d792:	7f61      	ldrb	r1, [r4, #29]
    d794:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d798:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d79c:	7fe1      	ldrb	r1, [r4, #31]
    d79e:	f894 6020 	ldrb.w	r6, [r4, #32]
    d7a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d7a6:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d7aa:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d7ae:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d7b2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d7b6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d7ba:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d7be:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d7c0:	428c      	cmp	r4, r1
    d7c2:	d10f      	bne.n	d7e4 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d7c4:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d7c6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d7ca:	4361      	muls	r1, r4
    d7cc:	f242 7410 	movw	r4, #10000	; 0x2710
    d7d0:	fb04 130e 	mla	r3, r4, lr, r1
    d7d4:	3b01      	subs	r3, #1
    d7d6:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d7da:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d7dc:	b29b      	uxth	r3, r3
    d7de:	4299      	cmp	r1, r3
    d7e0:	f000 8092 	beq.w	d908 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    d7e4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d7e8:	071c      	lsls	r4, r3, #28
    d7ea:	f140 8087 	bpl.w	d8fc <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    d7ee:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d7f2:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d7f4:	f361 0302 	bfi	r3, r1, #0, #3
    d7f8:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d7fc:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d800:	3b01      	subs	r3, #1
    d802:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d806:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    d80a:	2b00      	cmp	r3, #0
    d80c:	f47f ad36 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    d810:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    d814:	e532      	b.n	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d816:	4299      	cmp	r1, r3
    d818:	d003      	beq.n	d822 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d81a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d81e:	0799      	lsls	r1, r3, #30
    d820:	d17b      	bne.n	d91a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    d822:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d826:	4643      	mov	r3, r8
    d828:	2b05      	cmp	r3, #5
    d82a:	d98c      	bls.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d82c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d82e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d832:	d888      	bhi.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    d834:	45b8      	cmp	r8, r7
    d836:	d886      	bhi.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    d838:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d83c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d840:	d281      	bcs.n	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d842:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d846:	f1ae 060a 	sub.w	r6, lr, #10
    d84a:	b2b6      	uxth	r6, r6
    d84c:	f640 4976 	movw	r9, #3190	; 0xc76
    d850:	454e      	cmp	r6, r9
    d852:	f63f af78 	bhi.w	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d856:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d85a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d85e:	f6bf af72 	bge.w	d746 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d862:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d864:	428f      	cmp	r7, r1
    d866:	f4ff af6e 	bcc.w	d746 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d86a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d86e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d872:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d876:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d87a:	7da6      	ldrb	r6, [r4, #22]
    d87c:	7d61      	ldrb	r1, [r4, #21]
    d87e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d882:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d886:	7e26      	ldrb	r6, [r4, #24]
    d888:	7de1      	ldrb	r1, [r4, #23]
    d88a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d88e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d892:	7ea6      	ldrb	r6, [r4, #26]
    d894:	7e61      	ldrb	r1, [r4, #25]
    d896:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d89a:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d89e:	7f26      	ldrb	r6, [r4, #28]
    d8a0:	7ee1      	ldrb	r1, [r4, #27]
    d8a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d8a6:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d8aa:	7fa6      	ldrb	r6, [r4, #30]
    d8ac:	7f61      	ldrb	r1, [r4, #29]
    d8ae:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d8b2:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d8b6:	7fe1      	ldrb	r1, [r4, #31]
    d8b8:	f894 6020 	ldrb.w	r6, [r4, #32]
    d8bc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d8c0:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d8c4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d8c8:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d8cc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d8d0:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d8d4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d8d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d8da:	428c      	cmp	r4, r1
    d8dc:	d10e      	bne.n	d8fc <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d8de:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d8e0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d8e4:	4361      	muls	r1, r4
    d8e6:	f242 7410 	movw	r4, #10000	; 0x2710
    d8ea:	fb04 130e 	mla	r3, r4, lr, r1
    d8ee:	3b01      	subs	r3, #1
    d8f0:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d8f4:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d8f6:	b29b      	uxth	r3, r3
    d8f8:	4299      	cmp	r1, r3
    d8fa:	d005      	beq.n	d908 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    d8fc:	2301      	movs	r3, #1
    d8fe:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d900:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d904:	2103      	movs	r1, #3
    d906:	e775      	b.n	d7f4 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    d908:	2300      	movs	r3, #0
    d90a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d90e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d912:	2101      	movs	r1, #1
    d914:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d918:	e76c      	b.n	d7f4 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    d91a:	4bc9      	ldr	r3, [pc, #804]	; (dc40 <isr_rx_conn_pkt_ctrl+0xb70>)
    d91c:	9301      	str	r3, [sp, #4]
    d91e:	9300      	str	r3, [sp, #0]
    d920:	4ac8      	ldr	r2, [pc, #800]	; (dc44 <isr_rx_conn_pkt_ctrl+0xb74>)
    d922:	4bc9      	ldr	r3, [pc, #804]	; (dc48 <isr_rx_conn_pkt_ctrl+0xb78>)
    d924:	49c9      	ldr	r1, [pc, #804]	; (dc4c <isr_rx_conn_pkt_ctrl+0xb7c>)
    d926:	48ca      	ldr	r0, [pc, #808]	; (dc50 <isr_rx_conn_pkt_ctrl+0xb80>)
    d928:	e514      	b.n	d354 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    d92a:	4bca      	ldr	r3, [pc, #808]	; (dc54 <isr_rx_conn_pkt_ctrl+0xb84>)
    d92c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d930:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d934:	2b00      	cmp	r3, #0
    d936:	f2c0 84b5 	blt.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d93a:	7a41      	ldrb	r1, [r0, #9]
    d93c:	2010      	movs	r0, #16
    d93e:	f7fb ff4b 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d942:	2800      	cmp	r0, #0
    d944:	f000 84ae 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    d948:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d94c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d950:	429a      	cmp	r2, r3
    d952:	f43f ac93 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d956:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d95a:	f003 0307 	and.w	r3, r3, #7
    d95e:	2b04      	cmp	r3, #4
    d960:	f47f ac8c 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    d964:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d968:	fa1f f28e 	uxth.w	r2, lr
    d96c:	2a05      	cmp	r2, #5
    d96e:	d91b      	bls.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d970:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d972:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d976:	d817      	bhi.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    d978:	429a      	cmp	r2, r3
    d97a:	d815      	bhi.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    d97c:	8a27      	ldrh	r7, [r4, #16]
    d97e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d980:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d984:	d210      	bcs.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d986:	8a66      	ldrh	r6, [r4, #18]
    d988:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d98a:	f1a0 010a 	sub.w	r1, r0, #10
    d98e:	b289      	uxth	r1, r1
    d990:	f640 4c76 	movw	ip, #3190	; 0xc76
    d994:	4561      	cmp	r1, ip
    d996:	d807      	bhi.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d998:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d99c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d9a0:	da02      	bge.n	d9a8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d9a2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d9a4:	4293      	cmp	r3, r2
    d9a6:	d203      	bcs.n	d9b0 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    d9a8:	221e      	movs	r2, #30
    d9aa:	2110      	movs	r1, #16
    d9ac:	4628      	mov	r0, r5
    d9ae:	e67b      	b.n	d6a8 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    d9b0:	2000      	movs	r0, #0
    d9b2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    d9b6:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d9ba:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d9be:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d9c2:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    d9c6:	7da2      	ldrb	r2, [r4, #22]
    d9c8:	7d63      	ldrb	r3, [r4, #21]
    d9ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d9ce:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d9d2:	7e22      	ldrb	r2, [r4, #24]
    d9d4:	7de3      	ldrb	r3, [r4, #23]
    d9d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9da:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d9de:	7ea2      	ldrb	r2, [r4, #26]
    d9e0:	7e63      	ldrb	r3, [r4, #25]
    d9e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9e6:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d9ea:	7f22      	ldrb	r2, [r4, #28]
    d9ec:	7ee3      	ldrb	r3, [r4, #27]
    d9ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9f2:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d9f6:	7fa2      	ldrb	r2, [r4, #30]
    d9f8:	7f63      	ldrb	r3, [r4, #29]
    d9fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9fe:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    da02:	f894 2020 	ldrb.w	r2, [r4, #32]
    da06:	7fe3      	ldrb	r3, [r4, #31]
    da08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da0c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    da10:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    da14:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    da18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da1c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    da20:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    da24:	2201      	movs	r2, #1
    da26:	f362 0302 	bfi	r3, r2, #0, #3
    da2a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    da2e:	e415      	b.n	d25c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    da30:	7a41      	ldrb	r1, [r0, #9]
    da32:	2011      	movs	r0, #17
    da34:	f7fb fed0 	bl	97d8 <pdu_len_cmp>
    da38:	2800      	cmp	r0, #0
    da3a:	f000 8433 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    da3e:	4a85      	ldr	r2, [pc, #532]	; (dc54 <isr_rx_conn_pkt_ctrl+0xb84>)
    da40:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    da44:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    da48:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    da4c:	4281      	cmp	r1, r0
    da4e:	7b21      	ldrb	r1, [r4, #12]
    da50:	d027      	beq.n	daa2 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    da52:	2916      	cmp	r1, #22
    da54:	f47f ac12 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    da58:	7b61      	ldrb	r1, [r4, #13]
    da5a:	2923      	cmp	r1, #35	; 0x23
    da5c:	d00e      	beq.n	da7c <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    da5e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    da62:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    da66:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    da6a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    da6e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    da72:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    da74:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    da78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    da7c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    da80:	0792      	lsls	r2, r2, #30
    da82:	f57f abfb 	bpl.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    da86:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    da88:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    da8a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    da8c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    da90:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    da94:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    da96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    da9a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    da9e:	7363      	strb	r3, [r4, #13]
    daa0:	e419      	b.n	d2d6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    daa2:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    daa6:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    daaa:	42b8      	cmp	r0, r7
    daac:	d048      	beq.n	db40 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    daae:	290f      	cmp	r1, #15
    dab0:	f47f abe4 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
    dab4:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dab8:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    daba:	2800      	cmp	r0, #0
    dabc:	db0e      	blt.n	dadc <isr_rx_conn_pkt_ctrl+0xa0c>
    dabe:	291a      	cmp	r1, #26
    dac0:	d10c      	bne.n	dadc <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dac2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dac6:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    daca:	4294      	cmp	r4, r2
    dacc:	f000 80c8 	beq.w	dc60 <isr_rx_conn_pkt_ctrl+0xb90>
    dad0:	4b5b      	ldr	r3, [pc, #364]	; (dc40 <isr_rx_conn_pkt_ctrl+0xb70>)
    dad2:	9301      	str	r3, [sp, #4]
    dad4:	9300      	str	r3, [sp, #0]
    dad6:	4b60      	ldr	r3, [pc, #384]	; (dc58 <isr_rx_conn_pkt_ctrl+0xb88>)
    dad8:	f7ff bb40 	b.w	d15c <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    dadc:	2923      	cmp	r1, #35	; 0x23
    dade:	d018      	beq.n	db12 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    dae0:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    dae4:	42b3      	cmp	r3, r6
    dae6:	d007      	beq.n	daf8 <isr_rx_conn_pkt_ctrl+0xa28>
    dae8:	4b55      	ldr	r3, [pc, #340]	; (dc40 <isr_rx_conn_pkt_ctrl+0xb70>)
    daea:	9301      	str	r3, [sp, #4]
    daec:	9300      	str	r3, [sp, #0]
    daee:	4b5a      	ldr	r3, [pc, #360]	; (dc58 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    daf0:	4a54      	ldr	r2, [pc, #336]	; (dc44 <isr_rx_conn_pkt_ctrl+0xb74>)
    daf2:	4956      	ldr	r1, [pc, #344]	; (dc4c <isr_rx_conn_pkt_ctrl+0xb7c>)
    daf4:	4859      	ldr	r0, [pc, #356]	; (dc5c <isr_rx_conn_pkt_ctrl+0xb8c>)
    daf6:	e42d      	b.n	d354 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    daf8:	2600      	movs	r6, #0
		if (conn->role) {
    dafa:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    dafc:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    db00:	bfb8      	it	lt
    db02:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    db06:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    db0a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    db0e:	bfb8      	it	lt
    db10:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    db12:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    db16:	0717      	lsls	r7, r2, #28
    db18:	f57f abb0 	bpl.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    db1c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    db1e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    db20:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    db22:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    db24:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    db26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    db28:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    db2a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    db2c:	237d      	movs	r3, #125	; 0x7d
    db2e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    db30:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    db32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db36:	fb93 f3f2 	sdiv	r3, r3, r2
    db3a:	8223      	strh	r3, [r4, #16]
    db3c:	f7ff bbcb 	b.w	d2d6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    db40:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    db44:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    db48:	4290      	cmp	r0, r2
    db4a:	d01a      	beq.n	db82 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    db4c:	2914      	cmp	r1, #20
    db4e:	f47f ab95 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    db52:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    db56:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    db5a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    db5c:	f360 02c3 	bfi	r2, r0, #3, #1
    db60:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    db64:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    db66:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    db6a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    db6c:	2215      	movs	r2, #21
    db6e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    db70:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    db72:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    db74:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    db76:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    db78:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    db7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    db7c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    db7e:	8263      	strh	r3, [r4, #18]
    db80:	e57d      	b.n	d67e <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    db82:	2903      	cmp	r1, #3
    db84:	f47f ab7a 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    db88:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    db8c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    db90:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    db94:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    db96:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    db9a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    db9e:	230d      	movs	r3, #13
    dba0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    dba2:	7b63      	ldrb	r3, [r4, #13]
    dba4:	7323      	strb	r3, [r4, #12]
    dba6:	e56a      	b.n	d67e <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    dba8:	7a41      	ldrb	r1, [r0, #9]
    dbaa:	2012      	movs	r0, #18
    dbac:	f7fb fe14 	bl	97d8 <pdu_len_cmp>
    dbb0:	2800      	cmp	r0, #0
    dbb2:	f000 8377 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    dbb6:	4827      	ldr	r0, [pc, #156]	; (dc54 <isr_rx_conn_pkt_ctrl+0xb84>)
    dbb8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dbbc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dbc0:	f7f9 f853 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    dbc4:	4601      	mov	r1, r0
    dbc6:	2800      	cmp	r0, #0
    dbc8:	f43f ac95 	beq.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbcc:	7903      	ldrb	r3, [r0, #4]
    dbce:	f043 0303 	orr.w	r3, r3, #3
    dbd2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    dbd4:	2301      	movs	r3, #1
    dbd6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dbd8:	2313      	movs	r3, #19
    dbda:	e4c7      	b.n	d56c <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    dbdc:	7a41      	ldrb	r1, [r0, #9]
    dbde:	2013      	movs	r0, #19
    dbe0:	f7fb fdfa 	bl	97d8 <pdu_len_cmp>
    dbe4:	2800      	cmp	r0, #0
    dbe6:	f000 835d 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    dbea:	4b1a      	ldr	r3, [pc, #104]	; (dc54 <isr_rx_conn_pkt_ctrl+0xb84>)
    dbec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    dbf0:	e468      	b.n	d4c4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    dbf2:	7a41      	ldrb	r1, [r0, #9]
    dbf4:	2007      	movs	r0, #7
    dbf6:	f7fb fdef 	bl	97d8 <pdu_len_cmp>
    dbfa:	2800      	cmp	r0, #0
    dbfc:	f000 8352 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dc00:	4a14      	ldr	r2, [pc, #80]	; (dc54 <isr_rx_conn_pkt_ctrl+0xb84>)
    dc02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dc06:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    dc0a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dc0e:	42b1      	cmp	r1, r6
    dc10:	4611      	mov	r1, r2
    dc12:	d077      	beq.n	dd04 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    dc14:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    dc18:	f040 0010 	orr.w	r0, r0, #16
    dc1c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    dc20:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dc24:	2800      	cmp	r0, #0
    dc26:	db47      	blt.n	dcb8 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dc28:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dc2c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    dc30:	4294      	cmp	r4, r2
    dc32:	d015      	beq.n	dc60 <isr_rx_conn_pkt_ctrl+0xb90>
    dc34:	4b02      	ldr	r3, [pc, #8]	; (dc40 <isr_rx_conn_pkt_ctrl+0xb70>)
    dc36:	9301      	str	r3, [sp, #4]
    dc38:	9300      	str	r3, [sp, #0]
    dc3a:	4b03      	ldr	r3, [pc, #12]	; (dc48 <isr_rx_conn_pkt_ctrl+0xb78>)
    dc3c:	f7ff ba8e 	b.w	d15c <isr_rx_conn_pkt_ctrl+0x8c>
    dc40:	00014645 	.word	0x00014645
    dc44:	00015394 	.word	0x00015394
    dc48:	0001652e 	.word	0x0001652e
    dc4c:	000153e3 	.word	0x000153e3
    dc50:	00015333 	.word	0x00015333
    dc54:	200008c8 	.word	0x200008c8
    dc58:	000164f3 	.word	0x000164f3
    dc5c:	00016dd6 	.word	0x00016dd6
				conn->llcp_conn_param.state =
    dc60:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    dc64:	2105      	movs	r1, #5
    dc66:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    dc6a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    dc6e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    dc72:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    dc76:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    dc7a:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    dc7e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dc82:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    dc86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    dc8a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    dc8c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    dc90:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    dc94:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    dc98:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    dc9a:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    dc9e:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    dca0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    dca4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    dca8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    dcac:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    dcb0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    dcb4:	f7ff bad2 	b.w	d25c <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    dcb8:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    dcbc:	4293      	cmp	r3, r2
    dcbe:	d004      	beq.n	dcca <isr_rx_conn_pkt_ctrl+0xbfa>
    dcc0:	4bc9      	ldr	r3, [pc, #804]	; (dfe8 <isr_rx_conn_pkt_ctrl+0xf18>)
    dcc2:	9301      	str	r3, [sp, #4]
    dcc4:	9300      	str	r3, [sp, #0]
    dcc6:	4bc9      	ldr	r3, [pc, #804]	; (dfec <isr_rx_conn_pkt_ctrl+0xf1c>)
    dcc8:	e712      	b.n	daf0 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    dcca:	2200      	movs	r2, #0
    dccc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    dcd0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dcd4:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    dcd8:	0716      	lsls	r6, r2, #28
    dcda:	f57f aacf 	bpl.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dcde:	2208      	movs	r2, #8
    dce0:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    dce2:	221a      	movs	r2, #26
    dce4:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    dce6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    dce8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    dcea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    dcec:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    dcee:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    dcf0:	237d      	movs	r3, #125	; 0x7d
    dcf2:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    dcf4:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    dcf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dcfa:	fb93 f3f2 	sdiv	r3, r3, r2
    dcfe:	8223      	strh	r3, [r4, #16]
    dd00:	f7ff bb73 	b.w	d3ea <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    dd04:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    dd08:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    dd0c:	4290      	cmp	r0, r2
    dd0e:	d009      	beq.n	dd24 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    dd10:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    dd14:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    dd18:	f36f 02c3 	bfc	r2, #3, #1
    dd1c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    dd20:	f7ff bb63 	b.w	d3ea <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    dd24:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    dd28:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    dd2c:	4290      	cmp	r0, r2
    dd2e:	d01b      	beq.n	dd68 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    dd30:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    dd34:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    dd38:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    dd3c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    dd40:	f362 0002 	bfi	r0, r2, #0, #3
    dd44:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    dd48:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    dd4c:	0780      	lsls	r0, r0, #30
    dd4e:	d50f      	bpl.n	dd70 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dd50:	200c      	movs	r0, #12
    dd52:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    dd54:	2000      	movs	r0, #0
    dd56:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    dd58:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    dd5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    dd5e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dd62:	7363      	strb	r3, [r4, #13]
    dd64:	f7ff bb41 	b.w	d3ea <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    dd68:	7b23      	ldrb	r3, [r4, #12]
    dd6a:	2b12      	cmp	r3, #18
    dd6c:	f47f ab3d 	bne.w	d3ea <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    dd70:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    dd74:	f7ff bba6 	b.w	d4c4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    dd78:	7a41      	ldrb	r1, [r0, #9]
    dd7a:	2014      	movs	r0, #20
    dd7c:	f7fb fd2c 	bl	97d8 <pdu_len_cmp>
    dd80:	2800      	cmp	r0, #0
    dd82:	f000 828f 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    dd86:	2f14      	cmp	r7, #20
    dd88:	d127      	bne.n	ddda <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dd8a:	4899      	ldr	r0, [pc, #612]	; (dff0 <isr_rx_conn_pkt_ctrl+0xf20>)
    dd8c:	f7f8 ff6d 	bl	6c6a <mem_acquire>
		if (!node_tx) {
    dd90:	4606      	mov	r6, r0
    dd92:	2800      	cmp	r0, #0
    dd94:	f43f abaf 	beq.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dd98:	4f96      	ldr	r7, [pc, #600]	; (dff4 <isr_rx_conn_pkt_ctrl+0xf24>)
    dd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    dd9e:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    dda2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dda6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    dda8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    ddaa:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    ddac:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    ddb0:	45e0      	cmp	r8, ip
    ddb2:	46b9      	mov	r9, r7
    ddb4:	f894 800b 	ldrb.w	r8, [r4, #11]
    ddb8:	d111      	bne.n	ddde <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    ddba:	f1b8 0f14 	cmp.w	r8, #20
    ddbe:	d01a      	beq.n	ddf6 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    ddc0:	f1b8 0f15 	cmp.w	r8, #21
    ddc4:	f000 8292 	beq.w	e2ec <isr_rx_conn_pkt_ctrl+0x121c>
    ddc8:	4b87      	ldr	r3, [pc, #540]	; (dfe8 <isr_rx_conn_pkt_ctrl+0xf18>)
    ddca:	9301      	str	r3, [sp, #4]
    ddcc:	9300      	str	r3, [sp, #0]
    ddce:	4a8a      	ldr	r2, [pc, #552]	; (dff8 <isr_rx_conn_pkt_ctrl+0xf28>)
    ddd0:	4b8a      	ldr	r3, [pc, #552]	; (dffc <isr_rx_conn_pkt_ctrl+0xf2c>)
    ddd2:	498b      	ldr	r1, [pc, #556]	; (e000 <isr_rx_conn_pkt_ctrl+0xf30>)
    ddd4:	488b      	ldr	r0, [pc, #556]	; (e004 <isr_rx_conn_pkt_ctrl+0xf34>)
    ddd6:	f7ff babd 	b.w	d354 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    ddda:	2600      	movs	r6, #0
    dddc:	e7dc      	b.n	dd98 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    ddde:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    dde2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    dde6:	2f01      	cmp	r7, #1
    dde8:	d9e7      	bls.n	ddba <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    ddea:	2f02      	cmp	r7, #2
    ddec:	d1e8      	bne.n	ddc0 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    ddee:	f1a8 0714 	sub.w	r7, r8, #20
    ddf2:	2f01      	cmp	r7, #1
    ddf4:	d8e4      	bhi.n	ddc0 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ddf6:	89a7      	ldrh	r7, [r4, #12]
    ddf8:	2f1a      	cmp	r7, #26
    ddfa:	d934      	bls.n	de66 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    ddfc:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    de00:	4547      	cmp	r7, r8
    de02:	bf28      	it	cs
    de04:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    de06:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    de0a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    de0e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    de12:	bf34      	ite	cc
    de14:	4693      	movcc	fp, r2
    de16:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    de1a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    de1e:	d324      	bcc.n	de6a <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    de20:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    de24:	45d0      	cmp	r8, sl
    de26:	bf28      	it	cs
    de28:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    de2a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    de2e:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    de32:	bf34      	ite	cc
    de34:	4682      	movcc	sl, r0
    de36:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    de3a:	455a      	cmp	r2, fp
    de3c:	d050      	beq.n	dee0 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    de3e:	f7fb fd13 	bl	9868 <packet_rx_acquired_count_get>
    de42:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    de44:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    de48:	f7f8 ff3e 	bl	6cc8 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    de4c:	4420      	add	r0, r4
    de4e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    de50:	28ff      	cmp	r0, #255	; 0xff
    de52:	d90c      	bls.n	de6e <isr_rx_conn_pkt_ctrl+0xd9e>
    de54:	4b64      	ldr	r3, [pc, #400]	; (dfe8 <isr_rx_conn_pkt_ctrl+0xf18>)
    de56:	9301      	str	r3, [sp, #4]
    de58:	9300      	str	r3, [sp, #0]
    de5a:	4a67      	ldr	r2, [pc, #412]	; (dff8 <isr_rx_conn_pkt_ctrl+0xf28>)
    de5c:	4b67      	ldr	r3, [pc, #412]	; (dffc <isr_rx_conn_pkt_ctrl+0xf2c>)
    de5e:	4968      	ldr	r1, [pc, #416]	; (e000 <isr_rx_conn_pkt_ctrl+0xf30>)
    de60:	4869      	ldr	r0, [pc, #420]	; (e008 <isr_rx_conn_pkt_ctrl+0xf38>)
    de62:	f7ff ba77 	b.w	d354 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    de66:	460f      	mov	r7, r1
    de68:	e7cd      	b.n	de06 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    de6a:	46f0      	mov	r8, lr
    de6c:	e7dd      	b.n	de2a <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    de6e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    de72:	4283      	cmp	r3, r0
    de74:	f040 8231 	bne.w	e2da <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de78:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    de7c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    de80:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    de82:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    de84:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    de88:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    de8c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    de90:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    de94:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    de98:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    de9c:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    dea0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    dea4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    dea8:	2303      	movs	r3, #3
    deaa:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    deae:	2e00      	cmp	r6, #0
    deb0:	f43f a9e4 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    deb4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    deb6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    deba:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    debe:	f043 0303 	orr.w	r3, r3, #3
    dec2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dec4:	2309      	movs	r3, #9
    dec6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dec8:	2315      	movs	r3, #21
    deca:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    decc:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    dece:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    ded2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    ded6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    ded8:	f7fd fce2 	bl	b8a0 <ctrl_tx_enqueue>
    dedc:	f7ff b9ce 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    dee0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    dee4:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    dee8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    deec:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    def0:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    def2:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    def6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    defa:	d103      	bne.n	df04 <isr_rx_conn_pkt_ctrl+0xe34>
    defc:	45c6      	cmp	lr, r8
    defe:	d101      	bne.n	df04 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    df00:	4550      	cmp	r0, sl
    df02:	d0d4      	beq.n	deae <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    df04:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    df06:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    df0a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    df0e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    df10:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    df14:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    df16:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    df1a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    df1e:	702b      	strb	r3, [r5, #0]
    df20:	e7c5      	b.n	deae <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    df22:	7a41      	ldrb	r1, [r0, #9]
    df24:	2016      	movs	r0, #22
    df26:	f7fb fc57 	bl	97d8 <pdu_len_cmp>
    df2a:	2800      	cmp	r0, #0
    df2c:	f000 81ba 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    df30:	4830      	ldr	r0, [pc, #192]	; (dff4 <isr_rx_conn_pkt_ctrl+0xf24>)
    df32:	7cc3      	ldrb	r3, [r0, #19]
    df34:	2b04      	cmp	r3, #4
    df36:	d169      	bne.n	e00c <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    df38:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    df3c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    df40:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    df44:	428b      	cmp	r3, r1
    df46:	d00a      	beq.n	df5e <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    df48:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    df4c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    df50:	3a01      	subs	r2, #1
    df52:	2a02      	cmp	r2, #2
    df54:	d803      	bhi.n	df5e <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df56:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    df58:	2116      	movs	r1, #22
    df5a:	f7ff bba5 	b.w	d6a8 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    df5e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    df62:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    df66:	4295      	cmp	r5, r2
    df68:	d003      	beq.n	df72 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    df6a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    df6e:	2a03      	cmp	r2, #3
    df70:	d105      	bne.n	df7e <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    df72:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    df76:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    df7a:	4295      	cmp	r5, r2
    df7c:	d001      	beq.n	df82 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    df7e:	222a      	movs	r2, #42	; 0x2a
    df80:	e7ea      	b.n	df58 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    df82:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    df86:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    df88:	f042 0203 	orr.w	r2, r2, #3
    df8c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    df90:	d116      	bne.n	dfc0 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    df92:	3b01      	subs	r3, #1
    df94:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    df98:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    df9c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    dfa0:	f36f 0341 	bfc	r3, #1, #1
    dfa4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    dfa8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dfac:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    dfb0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    dfb4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dfb8:	f362 1347 	bfi	r3, r2, #5, #3
    dfbc:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dfc0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dfc4:	7b62      	ldrb	r2, [r4, #13]
    dfc6:	f3c3 0182 	ubfx	r1, r3, #2, #3
    dfca:	400a      	ands	r2, r1
    dfcc:	f362 0384 	bfi	r3, r2, #2, #3
    dfd0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    dfd4:	7b22      	ldrb	r2, [r4, #12]
    dfd6:	b2db      	uxtb	r3, r3
    dfd8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dfdc:	f362 1347 	bfi	r3, r2, #5, #3
    dfe0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    dfe4:	f7ff b94a 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
    dfe8:	00014645 	.word	0x00014645
    dfec:	0001652e 	.word	0x0001652e
    dff0:	20000a24 	.word	0x20000a24
    dff4:	200008c8 	.word	0x200008c8
    dff8:	00015394 	.word	0x00015394
    dffc:	00016515 	.word	0x00016515
    e000:	000153e3 	.word	0x000153e3
    e004:	00016e0f 	.word	0x00016e0f
    e008:	00016987 	.word	0x00016987
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e00c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e010:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e014:	f7f8 fe29 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    e018:	4601      	mov	r1, r0
    e01a:	2800      	cmp	r0, #0
    e01c:	f43f aa6b 	beq.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e020:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e024:	2202      	movs	r2, #2
    e026:	f362 0301 	bfi	r3, r2, #0, #2
    e02a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e02e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e032:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e036:	4293      	cmp	r3, r2
    e038:	d11a      	bne.n	e070 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    e03a:	3b01      	subs	r3, #1
    e03c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e040:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e044:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e048:	f36f 0341 	bfc	r3, #1, #1
    e04c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e050:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e054:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e058:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e05c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e060:	f362 1347 	bfi	r3, r2, #5, #3
    e064:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e068:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e06c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e070:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e074:	7b62      	ldrb	r2, [r4, #13]
    e076:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e07a:	4002      	ands	r2, r0
    e07c:	f362 0384 	bfi	r3, r2, #2, #3
    e080:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e084:	7b22      	ldrb	r2, [r4, #12]
    e086:	b2db      	uxtb	r3, r3
    e088:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e08c:	f362 1347 	bfi	r3, r2, #5, #3
    e090:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e094:	790b      	ldrb	r3, [r1, #4]
    e096:	f043 0303 	orr.w	r3, r3, #3
    e09a:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e09c:	2303      	movs	r3, #3
    e09e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e0a0:	2317      	movs	r3, #23
    e0a2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e0a4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e0a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e0ac:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e0ae:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e0b2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e0b6:	724b      	strb	r3, [r1, #9]
    e0b8:	f7ff ba2f 	b.w	d51a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    e0bc:	4e90      	ldr	r6, [pc, #576]	; (e300 <isr_rx_conn_pkt_ctrl+0x1230>)
    e0be:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e0c2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	f2c0 80ec 	blt.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e0cc:	7a41      	ldrb	r1, [r0, #9]
    e0ce:	2017      	movs	r0, #23
    e0d0:	f7fb fb82 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e0d4:	2800      	cmp	r0, #0
    e0d6:	f000 80e5 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    e0da:	7cf3      	ldrb	r3, [r6, #19]
    e0dc:	2b04      	cmp	r3, #4
    e0de:	f47f a8cd 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
    e0e2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e0e6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e0ea:	429a      	cmp	r2, r3
    e0ec:	f43f a8c6 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    e0f0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e0f4:	f003 0203 	and.w	r2, r3, #3
    e0f8:	2a02      	cmp	r2, #2
    e0fa:	f47f a8bf 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e0fe:	f043 0303 	orr.w	r3, r3, #3
    e102:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e106:	7b62      	ldrb	r2, [r4, #13]
    e108:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e10c:	400a      	ands	r2, r1
    e10e:	f362 0384 	bfi	r3, r2, #2, #3
    e112:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e116:	7b22      	ldrb	r2, [r4, #12]
    e118:	b2db      	uxtb	r3, r3
    e11a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e11e:	f362 1347 	bfi	r3, r2, #5, #3
    e122:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e126:	f7ff b85c 	b.w	d1e2 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    e12a:	4b75      	ldr	r3, [pc, #468]	; (e300 <isr_rx_conn_pkt_ctrl+0x1230>)
    e12c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e130:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e134:	2b00      	cmp	r3, #0
    e136:	f280 80b5 	bge.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e13a:	7a41      	ldrb	r1, [r0, #9]
    e13c:	2018      	movs	r0, #24
    e13e:	f7fb fb4b 	bl	97d8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e142:	2800      	cmp	r0, #0
    e144:	f000 80ae 	beq.w	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e148:	7b27      	ldrb	r7, [r4, #12]
    e14a:	7b62      	ldrb	r2, [r4, #13]
    e14c:	ea47 0002 	orr.w	r0, r7, r2
    e150:	f010 0007 	ands.w	r0, r0, #7
    e154:	d125      	bne.n	e1a2 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e156:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e15a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e15e:	4293      	cmp	r3, r2
    e160:	f43f a88c 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e164:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e168:	f003 0303 	and.w	r3, r3, #3
    e16c:	2b02      	cmp	r3, #2
    e16e:	f47f a885 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    e172:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e176:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e17a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e17c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e180:	f57f a87c 	bpl.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e184:	230c      	movs	r3, #12
		upd->status = 0;
    e186:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e188:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e18a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e18e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e192:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e194:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e198:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e19c:	7363      	strb	r3, [r4, #13]
    e19e:	f7ff ba6e 	b.w	d67e <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e1a2:	89e0      	ldrh	r0, [r4, #14]
    e1a4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e1a6:	1ac3      	subs	r3, r0, r3
    e1a8:	041b      	lsls	r3, r3, #16
    e1aa:	f100 80a4 	bmi.w	e2f6 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e1ae:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e1b2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e1b6:	428b      	cmp	r3, r1
    e1b8:	d005      	beq.n	e1c6 <isr_rx_conn_pkt_ctrl+0x10f6>
    e1ba:	4b52      	ldr	r3, [pc, #328]	; (e304 <isr_rx_conn_pkt_ctrl+0x1234>)
    e1bc:	9301      	str	r3, [sp, #4]
    e1be:	9300      	str	r3, [sp, #0]
    e1c0:	4b51      	ldr	r3, [pc, #324]	; (e308 <isr_rx_conn_pkt_ctrl+0x1238>)
    e1c2:	f7fe bfcb 	b.w	d15c <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e1c6:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e1ca:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e1ce:	42a3      	cmp	r3, r4
    e1d0:	d014      	beq.n	e1fc <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e1d2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e1d6:	f003 0303 	and.w	r3, r3, #3
    e1da:	2b02      	cmp	r3, #2
    e1dc:	d10e      	bne.n	e1fc <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1de:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e1e2:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1e6:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e1ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e1ee:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e1f2:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e1f4:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e1f8:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e1fc:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e200:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e204:	f002 0207 	and.w	r2, r2, #7
    e208:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e20c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e210:	f36f 0300 	bfc	r3, #0, #1
    e214:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e218:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e21a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e21c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e220:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e224:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e228:	2b00      	cmp	r3, #0
    e22a:	f43f a827 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e22e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e232:	f362 0302 	bfi	r3, r2, #0, #3
    e236:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e23a:	f7ff b81f 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e23e:	4e30      	ldr	r6, [pc, #192]	; (e300 <isr_rx_conn_pkt_ctrl+0x1230>)
    e240:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e244:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e248:	2b00      	cmp	r3, #0
    e24a:	db2b      	blt.n	e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e24c:	7a41      	ldrb	r1, [r0, #9]
    e24e:	2019      	movs	r0, #25
    e250:	f7fb fac2 	bl	97d8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e254:	b330      	cbz	r0, e2a4 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e256:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e25a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e25e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e262:	7b22      	ldrb	r2, [r4, #12]
    e264:	f003 0307 	and.w	r3, r3, #7
    e268:	4213      	tst	r3, r2
    e26a:	f43f a807 	beq.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    e26e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e272:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e276:	429a      	cmp	r2, r3
    e278:	f47f a800 	bne.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    e27c:	2205      	movs	r2, #5
    e27e:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e282:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e286:	f7f3 fcb9 	bl	1bfc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e28a:	2301      	movs	r3, #1
    e28c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e290:	2302      	movs	r3, #2
    e292:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e296:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e29a:	3b01      	subs	r3, #1
    e29c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e2a0:	f7fe bfec 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    e2a4:	4816      	ldr	r0, [pc, #88]	; (e300 <isr_rx_conn_pkt_ctrl+0x1230>)
    e2a6:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e2aa:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e2ae:	f7f8 fcdc 	bl	6c6a <mem_acquire>
	if (!node_tx) {
    e2b2:	4601      	mov	r1, r0
    e2b4:	2800      	cmp	r0, #0
    e2b6:	f43f a91e 	beq.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2ba:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e2bc:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2be:	f043 0303 	orr.w	r3, r3, #3
    e2c2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e2c4:	2302      	movs	r3, #2
    e2c6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e2c8:	2307      	movs	r3, #7
    e2ca:	71c3      	strb	r3, [r0, #7]
    e2cc:	f7ff b94f 	b.w	d56e <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e2d0:	2328      	movs	r3, #40	; 0x28
    e2d2:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e2d6:	f7fe bfd1 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    e2da:	2e00      	cmp	r6, #0
    e2dc:	f43f a90b 	beq.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e2e0:	490a      	ldr	r1, [pc, #40]	; (e30c <isr_rx_conn_pkt_ctrl+0x123c>)
    e2e2:	4630      	mov	r0, r6
    e2e4:	f7f8 fcdb 	bl	6c9e <mem_release>
    e2e8:	f7ff b905 	b.w	d4f6 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e2ec:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e2ee:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e2f0:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e2f2:	4693      	mov	fp, r2
    e2f4:	e5db      	b.n	deae <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e2f6:	2328      	movs	r3, #40	; 0x28
    e2f8:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e2fc:	f7fe bfbe 	b.w	d27c <isr_rx_conn_pkt_ctrl+0x1ac>
    e300:	200008c8 	.word	0x200008c8
    e304:	00014645 	.word	0x00014645
    e308:	00016898 	.word	0x00016898
    e30c:	20000a24 	.word	0x20000a24

0000e310 <isr>:
{
    e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e314:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e316:	f003 fec9 	bl	120ac <radio_is_done>
    e31a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e31c:	b366      	cbz	r6, e378 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e31e:	f003 fee5 	bl	120ec <radio_crc_is_valid>
    e322:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e324:	f003 ff66 	bl	121f4 <radio_filter_has_match>
    e328:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e32c:	f003 ff6c 	bl	12208 <radio_filter_match_get>
    e330:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e334:	f004 f950 	bl	125d8 <radio_ar_has_match>
    e338:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e33c:	f004 f93a 	bl	125b4 <radio_ar_match_get>
    e340:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e344:	f003 ff20 	bl	12188 <radio_rssi_is_ready>
    e348:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e34a:	4cb4      	ldr	r4, [pc, #720]	; (e61c <isr+0x30c>)
	radio_status_reset();
    e34c:	f003 fe98 	bl	12080 <radio_status_reset>
	radio_tmr_status_reset();
    e350:	f003 ff6c 	bl	1222c <radio_tmr_status_reset>
	radio_filter_status_reset();
    e354:	f003 ff46 	bl	121e4 <radio_filter_status_reset>
	radio_ar_status_reset();
    e358:	f004 f932 	bl	125c0 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e35c:	f003 ff0c 	bl	12178 <radio_rssi_status_reset>
	switch (_radio.state) {
    e360:	7d23      	ldrb	r3, [r4, #20]
    e362:	2b05      	cmp	r3, #5
    e364:	f201 846e 	bhi.w	fc44 <isr+0x1934>
    e368:	e8df f013 	tbh	[pc, r3, lsl #1]
    e36c:	00cd007c 	.word	0x00cd007c
    e370:	0a1c000e 	.word	0x0a1c000e
    e374:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    e378:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e37c:	4635      	mov	r5, r6
    e37e:	46b2      	mov	sl, r6
    e380:	46b1      	mov	r9, r6
    e382:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e384:	46d8      	mov	r8, fp
    e386:	e7e0      	b.n	e34a <isr+0x3a>
	_radio.state = STATE_RX;
    e388:	2301      	movs	r3, #1
    e38a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e38c:	f004 f850 	bl	12430 <radio_tmr_tifs_base_get>
    e390:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e392:	2096      	movs	r0, #150	; 0x96
    e394:	f003 ff58 	bl	12248 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e398:	7ce3      	ldrb	r3, [r4, #19]
    e39a:	3b01      	subs	r3, #1
    e39c:	2b03      	cmp	r3, #3
    e39e:	f200 80aa 	bhi.w	e4f6 <isr+0x1e6>
    e3a2:	e8df f003 	tbb	[pc, r3]
    e3a6:	3202      	.short	0x3202
    e3a8:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e3aa:	2300      	movs	r3, #0
    e3ac:	461a      	mov	r2, r3
    e3ae:	4619      	mov	r1, r3
    e3b0:	4618      	mov	r0, r3
    e3b2:	f003 feb9 	bl	12128 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e3b6:	f003 fea7 	bl	12108 <radio_pkt_scratch_get>
    e3ba:	f003 fe29 	bl	12010 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e3be:	f003 fe6b 	bl	12098 <radio_is_ready>
    e3c2:	b138      	cbz	r0, e3d4 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    e3c4:	4b96      	ldr	r3, [pc, #600]	; (e620 <isr+0x310>)
    e3c6:	9301      	str	r3, [sp, #4]
    e3c8:	9300      	str	r3, [sp, #0]
    e3ca:	4b96      	ldr	r3, [pc, #600]	; (e624 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    e3cc:	4a96      	ldr	r2, [pc, #600]	; (e628 <isr+0x318>)
    e3ce:	4997      	ldr	r1, [pc, #604]	; (e62c <isr+0x31c>)
    e3d0:	4897      	ldr	r0, [pc, #604]	; (e630 <isr+0x320>)
    e3d2:	e34b      	b.n	ea6c <isr+0x75c>
		if (ctrl_rl_enabled()) {
    e3d4:	f003 f95e 	bl	11694 <ctrl_rl_enabled>
    e3d8:	b138      	cbz	r0, e3ea <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    e3da:	a810      	add	r0, sp, #64	; 0x40
    e3dc:	f002 feaa 	bl	11134 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e3e0:	4601      	mov	r1, r0
    e3e2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e3e6:	f004 f8b3 	bl	12550 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e3ea:	2100      	movs	r1, #0
    e3ec:	4608      	mov	r0, r1
    e3ee:	f003 fe24 	bl	1203a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e3f2:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3f4:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e3f6:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e3f8:	4608      	mov	r0, r1
    e3fa:	f003 fe1a 	bl	12032 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e3fe:	1a28      	subs	r0, r5, r0
    e400:	f003 ffac 	bl	1235c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e404:	f003 fffc 	bl	12400 <radio_tmr_end_capture>
    e408:	e02c      	b.n	e464 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e40a:	2300      	movs	r3, #0
    e40c:	461a      	mov	r2, r3
    e40e:	4619      	mov	r1, r3
    e410:	4618      	mov	r0, r3
    e412:	f003 fe89 	bl	12128 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e416:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e41a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e41e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e422:	3008      	adds	r0, #8
    e424:	f003 fdf4 	bl	12010 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e428:	f003 fe36 	bl	12098 <radio_is_ready>
    e42c:	2800      	cmp	r0, #0
    e42e:	d1c9      	bne.n	e3c4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e430:	f003 f930 	bl	11694 <ctrl_rl_enabled>
    e434:	b138      	cbz	r0, e446 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    e436:	a810      	add	r0, sp, #64	; 0x40
    e438:	f002 fe7c 	bl	11134 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e43c:	4601      	mov	r1, r0
    e43e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e442:	f004 f885 	bl	12550 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e446:	2100      	movs	r1, #0
    e448:	4608      	mov	r0, r1
    e44a:	f003 fdf6 	bl	1203a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e44e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e450:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e452:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e454:	4608      	mov	r0, r1
    e456:	f003 fdec 	bl	12032 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e45a:	1a28      	subs	r0, r5, r0
    e45c:	f003 ff7e 	bl	1235c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e460:	f003 fe7a 	bl	12158 <radio_rssi_measure>
}
    e464:	b013      	add	sp, #76	; 0x4c
    e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e46a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e46e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e472:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e476:	2100      	movs	r1, #0
    e478:	09d3      	lsrs	r3, r2, #7
    e47a:	f000 0007 	and.w	r0, r0, #7
    e47e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e482:	f003 fe51 	bl	12128 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e486:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e48a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e48e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e492:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e496:	3108      	adds	r1, #8
    e498:	f7fb fd5a 	bl	9f50 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e49c:	f003 fdfc 	bl	12098 <radio_is_ready>
    e4a0:	2800      	cmp	r0, #0
    e4a2:	d18f      	bne.n	e3c4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e4a4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e4a8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e4ac:	2101      	movs	r1, #1
    e4ae:	f000 0007 	and.w	r0, r0, #7
    e4b2:	f003 fdc2 	bl	1203a <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e4b6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e4ba:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e4be:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e4c2:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e4c4:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e4c6:	4405      	add	r5, r0
	switch (phy) {
    e4c8:	d013      	beq.n	e4f2 <isr+0x1e2>
		return 40;
    e4ca:	2b04      	cmp	r3, #4
    e4cc:	bf0c      	ite	eq
    e4ce:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e4d2:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e4d4:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e4d6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e4da:	09c1      	lsrs	r1, r0, #7
    e4dc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e4e0:	f003 fda7 	bl	12032 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e4e4:	1a28      	subs	r0, r5, r0
    e4e6:	f003 ff39 	bl	1235c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e4ea:	2001      	movs	r0, #1
    e4ec:	f7fc fb80 	bl	abf0 <packet_tx_enqueue>
    e4f0:	e7b8      	b.n	e464 <isr+0x154>
		return 24;
    e4f2:	2018      	movs	r0, #24
    e4f4:	e7ee      	b.n	e4d4 <isr+0x1c4>
		LL_ASSERT(0);
    e4f6:	4b4a      	ldr	r3, [pc, #296]	; (e620 <isr+0x310>)
    e4f8:	9301      	str	r3, [sp, #4]
    e4fa:	9300      	str	r3, [sp, #0]
    e4fc:	4b49      	ldr	r3, [pc, #292]	; (e624 <isr+0x314>)
		LL_ASSERT(0);
    e4fe:	4a4a      	ldr	r2, [pc, #296]	; (e628 <isr+0x318>)
    e500:	494a      	ldr	r1, [pc, #296]	; (e62c <isr+0x31c>)
    e502:	484c      	ldr	r0, [pc, #304]	; (e634 <isr+0x324>)
    e504:	e2b2      	b.n	ea6c <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e506:	b926      	cbnz	r6, e512 <isr+0x202>
		_radio.state = STATE_CLOSE;
    e508:	2303      	movs	r3, #3
    e50a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e50c:	f003 fda6 	bl	1205c <radio_disable>
    e510:	e7a8      	b.n	e464 <isr+0x154>
	switch (_radio.role) {
    e512:	7ce3      	ldrb	r3, [r4, #19]
    e514:	3b01      	subs	r3, #1
    e516:	2b03      	cmp	r3, #3
    e518:	f201 813e 	bhi.w	f798 <isr+0x1488>
    e51c:	e8df f013 	tbh	[pc, r3, lsl #1]
    e520:	02ae0004 	.word	0x02ae0004
    e524:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    e528:	2f00      	cmp	r7, #0
    e52a:	d0ed      	beq.n	e508 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e52c:	f1ba 0f00 	cmp.w	sl, #0
    e530:	d039      	beq.n	e5a6 <isr+0x296>
    e532:	4658      	mov	r0, fp
    e534:	f002 fe5c 	bl	111f0 <ctrl_rl_irk_idx>
    e538:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e53c:	f003 fde4 	bl	12108 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e540:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e544:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e546:	232b      	movs	r3, #43	; 0x2b
    e548:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e54a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e54c:	fb11 3302 	smlabb	r3, r1, r2, r3
    e550:	930a      	str	r3, [sp, #40]	; 0x28
    e552:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e554:	f000 030f 	and.w	r3, r0, #15
    e558:	2b03      	cmp	r3, #3
    e55a:	d10a      	bne.n	e572 <isr+0x262>
    e55c:	7873      	ldrb	r3, [r6, #1]
    e55e:	2b0c      	cmp	r3, #12
    e560:	d107      	bne.n	e572 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e562:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e566:	065f      	lsls	r7, r3, #25
    e568:	d51f      	bpl.n	e5aa <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e56a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e56e:	0658      	lsls	r0, r3, #25
    e570:	d449      	bmi.n	e606 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e572:	7830      	ldrb	r0, [r6, #0]
    e574:	f000 030f 	and.w	r3, r0, #15
    e578:	2b05      	cmp	r3, #5
    e57a:	d1c5      	bne.n	e508 <isr+0x1f8>
    e57c:	7873      	ldrb	r3, [r6, #1]
    e57e:	2b22      	cmp	r3, #34	; 0x22
    e580:	d1c2      	bne.n	e508 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e584:	5ce3      	ldrb	r3, [r4, r3]
    e586:	f003 030f 	and.w	r3, r3, #15
    e58a:	2b01      	cmp	r3, #1
    e58c:	f040 814f 	bne.w	e82e <isr+0x51e>
					    ci->connect_ind.init_addr,
    e590:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e592:	aa10      	add	r2, sp, #64	; 0x40
    e594:	4639      	mov	r1, r7
    e596:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e59a:	f003 f81f 	bl	115dc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e59e:	2800      	cmp	r0, #0
    e5a0:	d14c      	bne.n	e63c <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e5a2:	2000      	movs	r0, #0
    e5a4:	e05a      	b.n	e65c <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e5a6:	20ff      	movs	r0, #255	; 0xff
    e5a8:	e7c6      	b.n	e538 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e5aa:	aa10      	add	r2, sp, #64	; 0x40
    e5ac:	1cb1      	adds	r1, r6, #2
    e5ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e5b2:	f003 f813 	bl	115dc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e5b6:	2800      	cmp	r0, #0
    e5b8:	d0d7      	beq.n	e56a <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    e5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e5bc:	7832      	ldrb	r2, [r6, #0]
    e5be:	5ce3      	ldrb	r3, [r4, r3]
    e5c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e5c4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e5c8:	d1d3      	bne.n	e572 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e5ca:	2206      	movs	r2, #6
    e5cc:	f106 0108 	add.w	r1, r6, #8
    e5d0:	1ca8      	adds	r0, r5, #2
    e5d2:	f7f3 fafe 	bl	1bd2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d1cb      	bne.n	e572 <isr+0x262>
		_radio.state = STATE_CLOSE;
    e5da:	2303      	movs	r3, #3
    e5dc:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e5de:	f003 fdad 	bl	1213c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e5e2:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e5e6:	2327      	movs	r3, #39	; 0x27
    e5e8:	fb03 4000 	mla	r0, r3, r0, r4
    e5ec:	307b      	adds	r0, #123	; 0x7b
    e5ee:	f003 fd15 	bl	1201c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e5f2:	f003 fd51 	bl	12098 <radio_is_ready>
    e5f6:	2800      	cmp	r0, #0
    e5f8:	f43f af34 	beq.w	e464 <isr+0x154>
    e5fc:	4b08      	ldr	r3, [pc, #32]	; (e620 <isr+0x310>)
    e5fe:	9301      	str	r3, [sp, #4]
    e600:	9300      	str	r3, [sp, #0]
    e602:	4b0d      	ldr	r3, [pc, #52]	; (e638 <isr+0x328>)
    e604:	e6e2      	b.n	e3cc <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e606:	f1b9 0f00 	cmp.w	r9, #0
    e60a:	d1d6      	bne.n	e5ba <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e60c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e610:	f002 fe34 	bl	1127c <ctrl_irk_whitelisted>
    e614:	2800      	cmp	r0, #0
    e616:	d1d0      	bne.n	e5ba <isr+0x2aa>
    e618:	e7ab      	b.n	e572 <isr+0x262>
    e61a:	bf00      	nop
    e61c:	200008c8 	.word	0x200008c8
    e620:	00014645 	.word	0x00014645
    e624:	000164a2 	.word	0x000164a2
    e628:	00015394 	.word	0x00015394
    e62c:	000153e3 	.word	0x000153e3
    e630:	00016b68 	.word	0x00016b68
    e634:	00015333 	.word	0x00015333
    e638:	000164b5 	.word	0x000164b5
		       isr_adv_ci_adva_check(adv, ci) &&
    e63c:	4631      	mov	r1, r6
    e63e:	4628      	mov	r0, r5
    e640:	f7fb ff6e 	bl	a520 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e644:	2800      	cmp	r0, #0
    e646:	d0ac      	beq.n	e5a2 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e648:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e64c:	2bff      	cmp	r3, #255	; 0xff
    e64e:	f000 80db 	beq.w	e808 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    e652:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    e656:	1ac1      	subs	r1, r0, r3
    e658:	4248      	negs	r0, r1
    e65a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e65c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e660:	2800      	cmp	r0, #0
    e662:	f43f af51 	beq.w	e508 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e666:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    e66a:	b133      	cbz	r3, e67a <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e66c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    e670:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    e674:	429a      	cmp	r2, r3
    e676:	f47f af47 	bne.w	e508 <isr+0x1f8>
    e67a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    e67e:	2b00      	cmp	r3, #0
    e680:	f43f af42 	beq.w	e508 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    e684:	2004      	movs	r0, #4
    e686:	f7fb f905 	bl	9894 <packet_rx_reserve_get>
		if (!node_rx) {
    e68a:	4607      	mov	r7, r0
    e68c:	2800      	cmp	r0, #0
    e68e:	f43f af3b 	beq.w	e508 <isr+0x1f8>
		_radio.state = STATE_STOP;
    e692:	f04f 0904 	mov.w	r9, #4
    e696:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e69a:	f003 fcdf 	bl	1205c <radio_disable>
		conn = _radio.advertiser.conn;
    e69e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e6a2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    e6a6:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e6a8:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e6ac:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e6ae:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e6b2:	f7f8 fb12 	bl	6cda <mem_index_get>
		memcpy(&conn->access_addr[0],
    e6b6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e6ba:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e6bc:	2203      	movs	r2, #3
    e6be:	f106 0112 	add.w	r1, r6, #18
    e6c2:	f105 0014 	add.w	r0, r5, #20
    e6c6:	f7f3 fa99 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e6ca:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e6ce:	464a      	mov	r2, r9
    e6d0:	f106 010e 	add.w	r1, r6, #14
    e6d4:	4650      	mov	r0, sl
    e6d6:	f7f3 fa91 	bl	1bfc <memcpy>
		memcpy(&conn->data_chan_map[0],
    e6da:	2205      	movs	r2, #5
    e6dc:	f106 011e 	add.w	r1, r6, #30
    e6e0:	4640      	mov	r0, r8
    e6e2:	f7f3 fa8b 	bl	1bfc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e6e6:	2105      	movs	r1, #5
    e6e8:	4640      	mov	r0, r8
    e6ea:	f7f8 fc69 	bl	6fc0 <util_ones_count_get>
		conn->data_chan_count =
    e6ee:	7f6b      	ldrb	r3, [r5, #29]
    e6f0:	f360 0305 	bfi	r3, r0, #0, #6
    e6f4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e6f6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e6fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e6fe:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e700:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e702:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e704:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e708:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e70c:	7ef2      	ldrb	r2, [r6, #27]
    e70e:	7eb3      	ldrb	r3, [r6, #26]
    e710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e714:	4651      	mov	r1, sl
    e716:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e718:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e71a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e71e:	f7f3 fa6d 	bl	1bfc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e722:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e724:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e726:	f242 7210 	movw	r2, #10000	; 0x2710
    e72a:	fb02 8303 	mla	r3, r2, r3, r8
    e72e:	3b01      	subs	r3, #1
    e730:	fbb3 f3f8 	udiv	r3, r3, r8
    e734:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e736:	4b54      	ldr	r3, [pc, #336]	; (e888 <isr+0x578>)
    e738:	4443      	add	r3, r8
    e73a:	fbb3 f3f8 	udiv	r3, r3, r8
    e73e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e742:	4b52      	ldr	r3, [pc, #328]	; (e88c <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e744:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e746:	4443      	add	r3, r8
    e748:	fbb3 f3f8 	udiv	r3, r3, r8
    e74c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e74e:	4282      	cmp	r2, r0
    e750:	4613      	mov	r3, r2
    e752:	bfc4      	itt	gt
    e754:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e758:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e75a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e75e:	bfc4      	itt	gt
    e760:	18d2      	addgt	r2, r2, r3
    e762:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e764:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e766:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e76a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e76c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e76e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e770:	2300      	movs	r3, #0
    e772:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e774:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e776:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e77a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e77c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e780:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e784:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e786:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e78a:	464a      	mov	r2, r9
    e78c:	f107 001b 	add.w	r0, r7, #27
    e790:	f7f3 fa34 	bl	1bfc <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e794:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e798:	f107 030e 	add.w	r3, r7, #14
    e79c:	28ff      	cmp	r0, #255	; 0xff
    e79e:	930b      	str	r3, [sp, #44]	; 0x2c
    e7a0:	f106 0a02 	add.w	sl, r6, #2
    e7a4:	f107 0b14 	add.w	fp, r7, #20
    e7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7aa:	d05f      	beq.n	e86c <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    e7ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e7ae:	f107 010d 	add.w	r1, r7, #13
    e7b2:	f002 fed5 	bl	11560 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e7b6:	7b7b      	ldrb	r3, [r7, #13]
    e7b8:	3302      	adds	r3, #2
    e7ba:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e7bc:	464a      	mov	r2, r9
    e7be:	4651      	mov	r1, sl
    e7c0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e7c2:	f7f3 fa1b 	bl	1bfc <memcpy>
			pdu_adv->connect_ind.interval;
    e7c6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e7c8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e7cc:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e7ce:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e7d2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e7d4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e7d8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e7dc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e7e4:	8c28      	ldrh	r0, [r5, #32]
    e7e6:	f7fb ffaf 	bl	a748 <rx_fc_lock>
		packet_rx_enqueue();
    e7ea:	f7fb febd 	bl	a568 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e7ee:	2003      	movs	r0, #3
    e7f0:	f7fb f850 	bl	9894 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e7f4:	2800      	cmp	r0, #0
    e7f6:	d155      	bne.n	e8a4 <isr+0x594>
    e7f8:	4b25      	ldr	r3, [pc, #148]	; (e890 <isr+0x580>)
    e7fa:	9301      	str	r3, [sp, #4]
    e7fc:	9300      	str	r3, [sp, #0]
    e7fe:	4b25      	ldr	r3, [pc, #148]	; (e894 <isr+0x584>)
			LL_ASSERT(node_rx);
    e800:	4a25      	ldr	r2, [pc, #148]	; (e898 <isr+0x588>)
    e802:	4926      	ldr	r1, [pc, #152]	; (e89c <isr+0x58c>)
    e804:	4826      	ldr	r0, [pc, #152]	; (e8a0 <isr+0x590>)
    e806:	e131      	b.n	ea6c <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    e808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e80a:	5ce2      	ldrb	r2, [r4, r3]
    e80c:	7833      	ldrb	r3, [r6, #0]
    e80e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e812:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e816:	f47f aec4 	bne.w	e5a2 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e81a:	2206      	movs	r2, #6
    e81c:	4639      	mov	r1, r7
    e81e:	f105 0008 	add.w	r0, r5, #8
    e822:	f7f3 f9d6 	bl	1bd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e826:	fab0 f080 	clz	r0, r0
    e82a:	0940      	lsrs	r0, r0, #5
    e82c:	e716      	b.n	e65c <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e82e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e832:	09db      	lsrs	r3, r3, #7
    e834:	d00d      	beq.n	e852 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e836:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e83a:	09db      	lsrs	r3, r3, #7
    e83c:	f43f aeb1 	beq.w	e5a2 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e840:	f1b9 0f00 	cmp.w	r9, #0
    e844:	d10d      	bne.n	e862 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e846:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e84a:	f002 fd17 	bl	1127c <ctrl_irk_whitelisted>
    e84e:	b940      	cbnz	r0, e862 <isr+0x552>
    e850:	e6a7      	b.n	e5a2 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e852:	aa10      	add	r2, sp, #64	; 0x40
    e854:	1cb1      	adds	r1, r6, #2
    e856:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e85a:	f002 febf 	bl	115dc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e85e:	2800      	cmp	r0, #0
    e860:	d0e9      	beq.n	e836 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    e862:	4631      	mov	r1, r6
    e864:	4628      	mov	r0, r5
    e866:	f7fb fe5b 	bl	a520 <isr_adv_ci_adva_check>
    e86a:	e6f7      	b.n	e65c <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e86c:	4619      	mov	r1, r3
    e86e:	464a      	mov	r2, r9
    e870:	4658      	mov	r0, fp
    e872:	f7f3 f9ef 	bl	1c54 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e876:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e878:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e87a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e87e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e880:	464a      	mov	r2, r9
    e882:	4651      	mov	r1, sl
    e884:	e79d      	b.n	e7c2 <isr+0x4b2>
    e886:	bf00      	nop
    e888:	026259ff 	.word	0x026259ff
    e88c:	01c9c37f 	.word	0x01c9c37f
    e890:	00014645 	.word	0x00014645
    e894:	000164b5 	.word	0x000164b5
    e898:	00015394 	.word	0x00015394
    e89c:	000153e3 	.word	0x000153e3
    e8a0:	00016f9f 	.word	0x00016f9f
			node_rx->hdr.handle = conn->handle;
    e8a4:	8c2b      	ldrh	r3, [r5, #32]
    e8a6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e8a8:	230b      	movs	r3, #11
    e8aa:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e8ac:	7833      	ldrb	r3, [r6, #0]
    e8ae:	f013 0320 	ands.w	r3, r3, #32
    e8b2:	d00e      	beq.n	e8d2 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    e8b4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e8b6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e8b8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e8ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e8be:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e8c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e8c4:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e8c6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e8c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e8cc:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e8ce:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e8d0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e8d2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e8d4:	f7fb fe48 	bl	a568 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e8d8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e8dc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e8e0:	497d      	ldr	r1, [pc, #500]	; (ead8 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e8e2:	0952      	lsrs	r2, r2, #5
    e8e4:	f362 0384 	bfi	r3, r2, #2, #3
    e8e8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e8ec:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    e8f0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e8f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e8f8:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e8fa:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e8fe:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e902:	4a76      	ldr	r2, [pc, #472]	; (eadc <isr+0x7cc>)
    e904:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e908:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e90c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e90e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e912:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e914:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e916:	7d73      	ldrb	r3, [r6, #21]
    e918:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e91c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e91e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e922:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e924:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e926:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e928:	4638      	mov	r0, r7
    e92a:	f003 fb84 	bl	12036 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e92e:	496c      	ldr	r1, [pc, #432]	; (eae0 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e930:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e932:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e936:	a366      	add	r3, pc, #408	; (adr r3, ead0 <isr+0x7c0>)
    e938:	e9d3 2300 	ldrd	r2, r3, [r3]
    e93c:	fba0 0101 	umull	r0, r1, r0, r1
    e940:	f7f1 fc68 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e944:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    e948:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e94a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e94c:	4293      	cmp	r3, r2
    e94e:	bf38      	it	cc
    e950:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    e956:	469a      	mov	sl, r3
		conn_interval_us -=
    e958:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    e95a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    e95c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    e95e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    e960:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    e964:	f003 fd5e 	bl	12424 <radio_tmr_end_get>
    e968:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    e96a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e96c:	4639      	mov	r1, r7
		conn_offset_us +=
    e96e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e972:	4638      	mov	r0, r7
    e974:	f003 fb5d 	bl	12032 <radio_tx_chain_delay_get>
    e978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e97a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    e97e:	4499      	add	r9, r3
    e980:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    e984:	eba9 030b 	sub.w	r3, r9, fp
    e988:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e98a:	f240 4383 	movw	r3, #1155	; 0x483
    e98e:	9300      	str	r3, [sp, #0]
    e990:	2205      	movs	r2, #5
    e992:	4b54      	ldr	r3, [pc, #336]	; (eae4 <isr+0x7d4>)
    e994:	f8df b148 	ldr.w	fp, [pc, #328]	; eae0 <isr+0x7d0>
    e998:	4639      	mov	r1, r7
    e99a:	4638      	mov	r0, r7
    e99c:	f7f9 f88c 	bl	7ab8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    e9a0:	f240 4184 	movw	r1, #1156	; 0x484
    e9a4:	f7fb ff08 	bl	a7b8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9aa:	5ce3      	ldrb	r3, [r4, r3]
    e9ac:	f003 030f 	and.w	r3, r3, #15
    e9b0:	2b01      	cmp	r3, #1
    e9b2:	d106      	bne.n	e9c2 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9b4:	9700      	str	r7, [sp, #0]
    e9b6:	463b      	mov	r3, r7
    e9b8:	2203      	movs	r2, #3
    e9ba:	4639      	mov	r1, r7
    e9bc:	4638      	mov	r0, r7
    e9be:	f7f9 f87b 	bl	7ab8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e9c2:	fba8 890b 	umull	r8, r9, r8, fp
    e9c6:	a342      	add	r3, pc, #264	; (adr r3, ead0 <isr+0x7c0>)
    e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9cc:	4640      	mov	r0, r8
    e9ce:	4649      	mov	r1, r9
    e9d0:	f7f1 fc20 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9d4:	f895 3020 	ldrb.w	r3, [r5, #32]
    e9d8:	68a4      	ldr	r4, [r4, #8]
    e9da:	9506      	str	r5, [sp, #24]
    e9dc:	3307      	adds	r3, #7
    e9de:	b2db      	uxtb	r3, r3
    e9e0:	930a      	str	r3, [sp, #40]	; 0x28
    e9e2:	f240 439b 	movw	r3, #1179	; 0x49b
    e9e6:	9308      	str	r3, [sp, #32]
    e9e8:	4b3f      	ldr	r3, [pc, #252]	; (eae8 <isr+0x7d8>)
    e9ea:	9307      	str	r3, [sp, #28]
    e9ec:	4b3f      	ldr	r3, [pc, #252]	; (eaec <isr+0x7dc>)
    e9ee:	9305      	str	r3, [sp, #20]
    e9f0:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9f2:	4a3f      	ldr	r2, [pc, #252]	; (eaf0 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f4:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e9f6:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e9f8:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e9fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e9fe:	2307      	movs	r3, #7
    ea00:	2100      	movs	r1, #0
    ea02:	4343      	muls	r3, r0
    ea04:	fb02 3301 	mla	r3, r2, r1, r3
    ea08:	fba0 1202 	umull	r1, r2, r0, r2
    ea0c:	441a      	add	r2, r3
    ea0e:	4608      	mov	r0, r1
    ea10:	ebb8 0000 	subs.w	r0, r8, r0
    ea14:	4611      	mov	r1, r2
    ea16:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea1a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ea1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ea20:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea22:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ea24:	f7f1 fbf6 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ea28:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea2a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ea2c:	a328      	add	r3, pc, #160	; (adr r3, ead0 <isr+0x7c0>)
    ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea32:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ea36:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea3a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ea3c:	f7f1 fbea 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea40:	eba4 040a 	sub.w	r4, r4, sl
    ea44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ea48:	9000      	str	r0, [sp, #0]
    ea4a:	4623      	mov	r3, r4
    ea4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ea4e:	4629      	mov	r1, r5
    ea50:	4628      	mov	r0, r5
    ea52:	f7f8 ff93 	bl	797c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea56:	f030 0302 	bics.w	r3, r0, #2
    ea5a:	f43f ad03 	beq.w	e464 <isr+0x154>
    ea5e:	4b25      	ldr	r3, [pc, #148]	; (eaf4 <isr+0x7e4>)
    ea60:	9301      	str	r3, [sp, #4]
    ea62:	9300      	str	r3, [sp, #0]
    ea64:	4b24      	ldr	r3, [pc, #144]	; (eaf8 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ea66:	4a25      	ldr	r2, [pc, #148]	; (eafc <isr+0x7ec>)
    ea68:	4925      	ldr	r1, [pc, #148]	; (eb00 <isr+0x7f0>)
    ea6a:	4826      	ldr	r0, [pc, #152]	; (eb04 <isr+0x7f4>)
		LL_ASSERT(0);
    ea6c:	f7f2 fa8e 	bl	f8c <printk>
    ea70:	4040      	eors	r0, r0
    ea72:	f380 8811 	msr	BASEPRI, r0
    ea76:	f04f 0004 	mov.w	r0, #4
    ea7a:	df02      	svc	2
		rl_idx = devmatch_ok ?
    ea7c:	f1b9 0f00 	cmp.w	r9, #0
    ea80:	d01c      	beq.n	eabc <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ea82:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ea86:	4641      	mov	r1, r8
    ea88:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ea8c:	f002 fb5c 	bl	11148 <ctrl_rl_idx>
    ea90:	4680      	mov	r8, r0
		if (crc_ok &&
    ea92:	b147      	cbz	r7, eaa6 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ea94:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ea98:	06da      	lsls	r2, r3, #27
    ea9a:	d535      	bpl.n	eb08 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ea9c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eaa0:	06db      	lsls	r3, r3, #27
    eaa2:	f100 811d 	bmi.w	ece0 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    eaa6:	2303      	movs	r3, #3
    eaa8:	7523      	strb	r3, [r4, #20]
			radio_disable();
    eaaa:	f003 fad7 	bl	1205c <radio_disable>
			_radio.scanner.state = 0;
    eaae:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    eab2:	f36f 0341 	bfc	r3, #1, #1
    eab6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    eaba:	e4d3      	b.n	e464 <isr+0x154>
		rl_idx = devmatch_ok ?
    eabc:	f1ba 0f00 	cmp.w	sl, #0
    eac0:	d003      	beq.n	eaca <isr+0x7ba>
    eac2:	4658      	mov	r0, fp
    eac4:	f002 fb94 	bl	111f0 <ctrl_rl_irk_idx>
    eac8:	e7e2      	b.n	ea90 <isr+0x780>
    eaca:	f04f 08ff 	mov.w	r8, #255	; 0xff
    eace:	e7e0      	b.n	ea92 <isr+0x782>
    ead0:	1afd498d 	.word	0x1afd498d
    ead4:	00000007 	.word	0x00000007
    ead8:	00016b58 	.word	0x00016b58
    eadc:	000f4240 	.word	0x000f4240
    eae0:	3b9aca00 	.word	0x3b9aca00
    eae4:	0000a7b9 	.word	0x0000a7b9
    eae8:	0000a77d 	.word	0x0000a77d
    eaec:	0000cc25 	.word	0x0000cc25
    eaf0:	1afd498d 	.word	0x1afd498d
    eaf4:	00014645 	.word	0x00014645
    eaf8:	000164b5 	.word	0x000164b5
    eafc:	00015394 	.word	0x00015394
    eb00:	000153e3 	.word	0x000153e3
    eb04:	00016939 	.word	0x00016939
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    eb08:	f1b9 0f00 	cmp.w	r9, #0
    eb0c:	d005      	beq.n	eb1a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eb0e:	4641      	mov	r1, r8
    eb10:	4650      	mov	r0, sl
    eb12:	f002 fcf1 	bl	114f8 <ctrl_rl_idx_allowed>
    eb16:	2800      	cmp	r0, #0
    eb18:	d0c0      	beq.n	ea9c <isr+0x78c>
	bool dir_report = false;
    eb1a:	2300      	movs	r3, #0
    eb1c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    eb20:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    eb24:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    eb28:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eb2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    eb30:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eb34:	2b00      	cmp	r3, #0
    eb36:	f000 80ec 	beq.w	ed12 <isr+0xa02>
    eb3a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    eb3e:	b133      	cbz	r3, eb4e <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    eb40:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    eb44:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    eb48:	429a      	cmp	r2, r3
    eb4a:	f040 80e2 	bne.w	ed12 <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    eb4e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb52:	f3c3 1000 	ubfx	r0, r3, #4, #1
    eb56:	2800      	cmp	r0, #0
    eb58:	f000 80cd 	beq.w	ecf6 <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    eb5c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    eb60:	f010 000f 	ands.w	r0, r0, #15
    eb64:	f040 814c 	bne.w	ee00 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb68:	f003 fc5c 	bl	12424 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb6c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    eb70:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    eb74:	48b8      	ldr	r0, [pc, #736]	; (ee58 <isr+0xb48>)
    eb76:	2207      	movs	r2, #7
    eb78:	fba3 0100 	umull	r0, r1, r3, r0
    eb7c:	fb02 1103 	mla	r1, r2, r3, r1
    eb80:	a3b3      	add	r3, pc, #716	; (adr r3, ee50 <isr+0xb40>)
    eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
    eb86:	f7f1 fb45 	bl	214 <__aeabi_uldivmod>
    eb8a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    eb8e:	4287      	cmp	r7, r0
    eb90:	f080 80bf 	bcs.w	ed12 <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    eb94:	2004      	movs	r0, #4
    eb96:	f7fa fe7d 	bl	9894 <packet_rx_reserve_get>
		if (node_rx == 0) {
    eb9a:	4607      	mov	r7, r0
    eb9c:	2800      	cmp	r0, #0
    eb9e:	d082      	beq.n	eaa6 <isr+0x796>
		_radio.state = STATE_STOP;
    eba0:	2304      	movs	r3, #4
    eba2:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    eba4:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    eba6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    ebaa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ebae:	f003 faab 	bl	12108 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    ebb2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    ebb4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    ebb8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    ebbc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ebbe:	f899 3008 	ldrb.w	r3, [r9, #8]
    ebc2:	7802      	ldrb	r2, [r0, #0]
    ebc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ebc8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    ebcc:	2322      	movs	r3, #34	; 0x22
    ebce:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ebd0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ebd2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ebd4:	4640      	mov	r0, r8
    ebd6:	f002 fa99 	bl	1110c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ebda:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ebde:	4601      	mov	r1, r0
    ebe0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ebe2:	f013 0f01 	tst.w	r3, #1
    ebe6:	f810 3b02 	ldrb.w	r3, [r0], #2
    ebea:	f000 8114 	beq.w	ee16 <isr+0xb06>
    ebee:	2900      	cmp	r1, #0
    ebf0:	f000 8111 	beq.w	ee16 <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    ebf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ebf8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebfa:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ebfc:	f7f2 fffe 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ec00:	f105 0308 	add.w	r3, r5, #8
    ec04:	4618      	mov	r0, r3
    ec06:	2206      	movs	r2, #6
    ec08:	f109 010a 	add.w	r1, r9, #10
    ec0c:	930a      	str	r3, [sp, #40]	; 0x28
    ec0e:	f7f2 fff5 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ec12:	2204      	movs	r2, #4
    ec14:	f106 0110 	add.w	r1, r6, #16
    ec18:	f105 000e 	add.w	r0, r5, #14
    ec1c:	f7f2 ffee 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ec20:	2203      	movs	r2, #3
    ec22:	f106 0114 	add.w	r1, r6, #20
    ec26:	f105 0012 	add.w	r0, r5, #18
    ec2a:	f7f2 ffe7 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ec2e:	2301      	movs	r3, #1
    ec30:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ec32:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    ec36:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ec3a:	4353      	muls	r3, r2
    ec3c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ec3e:	f003 fbf1 	bl	12424 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ec42:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ec44:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    ec48:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ec4a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ec4e:	bfd8      	it	le
    ec50:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ec54:	f1bb 0f00 	cmp.w	fp, #0
    ec58:	f040 80e8 	bne.w	ee2c <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ec5c:	f885 b016 	strb.w	fp, [r5, #22]
    ec60:	f885 b017 	strb.w	fp, [r5, #23]
    ec64:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec66:	2100      	movs	r1, #0
    ec68:	4608      	mov	r0, r1
    ec6a:	f003 f9dd 	bl	12028 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec6e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ec70:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ec74:	4608      	mov	r0, r1
    ec76:	f003 f9dc 	bl	12032 <radio_tx_chain_delay_get>
    ec7a:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    ec7e:	f100 031e 	add.w	r3, r0, #30
    ec82:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    ec84:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    ec88:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    ec8a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    ec8e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    ec90:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    ec94:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    ec96:	f106 0117 	add.w	r1, r6, #23
    ec9a:	2205      	movs	r2, #5
    ec9c:	f105 001e 	add.w	r0, r5, #30
    eca0:	f7f2 ffac 	bl	1bfc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    eca4:	7fb2      	ldrb	r2, [r6, #30]
    eca6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ecaa:	f362 0304 	bfi	r3, r2, #0, #5
    ecae:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    ecb2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    ecb6:	f362 1347 	bfi	r3, r2, #5, #3
    ecba:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    ecbe:	f003 fa3d 	bl	1213c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    ecc2:	4628      	mov	r0, r5
    ecc4:	f003 f9aa 	bl	1201c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ecc8:	f003 f9e6 	bl	12098 <radio_is_ready>
    eccc:	4683      	mov	fp, r0
    ecce:	2800      	cmp	r0, #0
    ecd0:	f000 80cc 	beq.w	ee6c <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    ecd4:	4b61      	ldr	r3, [pc, #388]	; (ee5c <isr+0xb4c>)
    ecd6:	9301      	str	r3, [sp, #4]
    ecd8:	9300      	str	r3, [sp, #0]
    ecda:	4b61      	ldr	r3, [pc, #388]	; (ee60 <isr+0xb50>)
    ecdc:	f7ff bb76 	b.w	e3cc <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ece0:	f1b9 0f00 	cmp.w	r9, #0
    ece4:	f47f af19 	bne.w	eb1a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    ece8:	4640      	mov	r0, r8
    ecea:	f002 fac7 	bl	1127c <ctrl_irk_whitelisted>
		if (crc_ok &&
    ecee:	2800      	cmp	r0, #0
    ecf0:	f43f aed9 	beq.w	eaa6 <isr+0x796>
    ecf4:	e711      	b.n	eb1a <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    ecf6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ecfa:	d06f      	beq.n	eddc <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    ecfc:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    ed00:	eba0 0e08 	sub.w	lr, r0, r8
    ed04:	f1de 0000 	rsbs	r0, lr, #0
    ed08:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ed0c:	2800      	cmp	r0, #0
    ed0e:	f47f af25 	bne.w	eb5c <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ed12:	f899 0008 	ldrb.w	r0, [r9, #8]
    ed16:	f010 000f 	ands.w	r0, r0, #15
    ed1a:	d002      	beq.n	ed22 <isr+0xa12>
    ed1c:	2806      	cmp	r0, #6
    ed1e:	f040 81ac 	bne.w	f07a <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    ed22:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    ed26:	071f      	lsls	r7, r3, #28
    ed28:	f140 8191 	bpl.w	f04e <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    ed2c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    ed30:	2a00      	cmp	r2, #0
    ed32:	f040 818c 	bne.w	f04e <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    ed36:	f1ba 0f00 	cmp.w	sl, #0
    ed3a:	bf14      	ite	ne
    ed3c:	4641      	movne	r1, r8
    ed3e:	21ff      	moveq	r1, #255	; 0xff
    ed40:	4628      	mov	r0, r5
    ed42:	f7fb fca9 	bl	a698 <isr_rx_scan_report>
		if (err) {
    ed46:	2800      	cmp	r0, #0
    ed48:	f47f aead 	bne.w	eaa6 <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ed4c:	f003 f9dc 	bl	12108 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    ed50:	7803      	ldrb	r3, [r0, #0]
    ed52:	2203      	movs	r2, #3
    ed54:	f362 0303 	bfi	r3, r2, #0, #4
    ed58:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed5a:	f899 3008 	ldrb.w	r3, [r9, #8]
    ed5e:	7802      	ldrb	r2, [r0, #0]
    ed60:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed64:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    ed68:	230c      	movs	r3, #12
    ed6a:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ed6c:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ed6e:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ed70:	4640      	mov	r0, r8
    ed72:	f002 f9cb 	bl	1110c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ed76:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    ed7a:	4601      	mov	r1, r0
    ed7c:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ed7e:	f013 0f01 	tst.w	r3, #1
    ed82:	f810 3b02 	ldrb.w	r3, [r0], #2
    ed86:	f000 8159 	beq.w	f03c <isr+0xd2c>
    ed8a:	2900      	cmp	r1, #0
    ed8c:	f000 8156 	beq.w	f03c <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    ed90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed94:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed96:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ed98:	f7f2 ff30 	bl	1bfc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ed9c:	2206      	movs	r2, #6
    ed9e:	f109 010a 	add.w	r1, r9, #10
    eda2:	f105 0008 	add.w	r0, r5, #8
    eda6:	f7f2 ff29 	bl	1bfc <memcpy>
		_radio.scanner.state = 1;
    edaa:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    edae:	f043 0302 	orr.w	r3, r3, #2
    edb2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    edb6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    edb8:	2302      	movs	r3, #2
    edba:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    edbc:	f003 fa44 	bl	12248 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    edc0:	2000      	movs	r0, #0
    edc2:	f003 f9a5 	bl	12110 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    edc6:	4628      	mov	r0, r5
    edc8:	f003 f928 	bl	1201c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    edcc:	f003 fb18 	bl	12400 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    edd0:	f003 f962 	bl	12098 <radio_is_ready>
    edd4:	2800      	cmp	r0, #0
    edd6:	f43f ab45 	beq.w	e464 <isr+0x154>
    edda:	e77b      	b.n	ecd4 <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    eddc:	f899 2008 	ldrb.w	r2, [r9, #8]
    ede0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ede4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ede8:	4293      	cmp	r3, r2
    edea:	d18f      	bne.n	ed0c <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    edec:	2206      	movs	r2, #6
    edee:	f109 010a 	add.w	r1, r9, #10
    edf2:	481c      	ldr	r0, [pc, #112]	; (ee64 <isr+0xb54>)
    edf4:	f7f2 feed 	bl	1bd2 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    edf8:	fab0 f080 	clz	r0, r0
    edfc:	0940      	lsrs	r0, r0, #5
    edfe:	e785      	b.n	ed0c <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ee00:	2801      	cmp	r0, #1
    ee02:	d18b      	bne.n	ed1c <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    ee04:	2300      	movs	r3, #0
    ee06:	4642      	mov	r2, r8
    ee08:	4631      	mov	r1, r6
    ee0a:	f7fb fbf9 	bl	a600 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ee0e:	2800      	cmp	r0, #0
    ee10:	f43f af7f 	beq.w	ed12 <isr+0xa02>
    ee14:	e6a8      	b.n	eb68 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ee16:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ee1a:	4913      	ldr	r1, [pc, #76]	; (ee68 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ee1c:	09d2      	lsrs	r2, r2, #7
    ee1e:	f362 1386 	bfi	r3, r2, #6, #1
    ee22:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ee24:	2206      	movs	r2, #6
    ee26:	e6e9      	b.n	ebfc <isr+0x8ec>
				conn_space_us += conn_interval_us;
    ee28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee2a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    ee2c:	f1bb 0f00 	cmp.w	fp, #0
    ee30:	dbfa      	blt.n	ee28 <isr+0xb18>
    ee32:	459b      	cmp	fp, r3
    ee34:	d3f8      	bcc.n	ee28 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    ee36:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    ee3a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ee3e:	fbb3 f3f2 	udiv	r3, r3, r2
    ee42:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    ee44:	7d6b      	ldrb	r3, [r5, #21]
    ee46:	3301      	adds	r3, #1
    ee48:	756b      	strb	r3, [r5, #21]
    ee4a:	e70c      	b.n	ec66 <isr+0x956>
    ee4c:	f3af 8000 	nop.w
    ee50:	3b9aca00 	.word	0x3b9aca00
    ee54:	00000000 	.word	0x00000000
    ee58:	1afd498d 	.word	0x1afd498d
    ee5c:	00014645 	.word	0x00014645
    ee60:	000164d3 	.word	0x000164d3
    ee64:	200009b2 	.word	0x200009b2
    ee68:	200009ac 	.word	0x200009ac
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee6c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ee70:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    ee74:	4630      	mov	r0, r6
    ee76:	f7f7 ff30 	bl	6cda <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee7a:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ee7c:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee7e:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    ee82:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    ee86:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ee8a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee8c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    ee90:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ee92:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee96:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ee98:	2206      	movs	r2, #6
    ee9a:	f107 001b 	add.w	r0, r7, #27
    ee9e:	f7f2 fead 	bl	1bfc <memcpy>
    eea2:	f107 0b0e 	add.w	fp, r7, #14
    eea6:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    eeaa:	f1ba 0f00 	cmp.w	sl, #0
    eeae:	d032      	beq.n	ef16 <isr+0xc06>
    eeb0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    eeb4:	d02f      	beq.n	ef16 <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    eeb6:	465a      	mov	r2, fp
    eeb8:	f107 010d 	add.w	r1, r7, #13
    eebc:	4640      	mov	r0, r8
    eebe:	930d      	str	r3, [sp, #52]	; 0x34
    eec0:	f002 fb4e 	bl	11560 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    eec4:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eec8:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    eeca:	3202      	adds	r2, #2
    eecc:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eece:	4618      	mov	r0, r3
    eed0:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eed2:	f7f2 fe93 	bl	1bfc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    eed6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    eeda:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    eede:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    eee2:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    eee6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    eeea:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    eeee:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    eef2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    eef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    eefa:	8c30      	ldrh	r0, [r6, #32]
    eefc:	f7fb fc24 	bl	a748 <rx_fc_lock>
		packet_rx_enqueue();
    ef00:	f7fb fb32 	bl	a568 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ef04:	2003      	movs	r0, #3
    ef06:	f7fa fcc5 	bl	9894 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ef0a:	b988      	cbnz	r0, ef30 <isr+0xc20>
    ef0c:	4bba      	ldr	r3, [pc, #744]	; (f1f8 <isr+0xee8>)
    ef0e:	9301      	str	r3, [sp, #4]
    ef10:	9300      	str	r3, [sp, #0]
    ef12:	4bba      	ldr	r3, [pc, #744]	; (f1fc <isr+0xeec>)
    ef14:	e474      	b.n	e800 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    ef16:	2206      	movs	r2, #6
    ef18:	2100      	movs	r1, #0
    ef1a:	4618      	mov	r0, r3
    ef1c:	f7f2 fe9a 	bl	1c54 <memset>
				pdu_adv_tx->rx_addr;
    ef20:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ef22:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    ef24:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    ef28:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ef2a:	2206      	movs	r2, #6
    ef2c:	4658      	mov	r0, fp
    ef2e:	e7d0      	b.n	eed2 <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    ef30:	8c33      	ldrh	r3, [r6, #32]
    ef32:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ef34:	230b      	movs	r3, #11
    ef36:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    ef38:	f899 3008 	ldrb.w	r3, [r9, #8]
    ef3c:	f013 0320 	ands.w	r3, r3, #32
    ef40:	d00e      	beq.n	ef60 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    ef42:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    ef44:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ef46:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    ef48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ef4c:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    ef4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ef52:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ef54:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ef56:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ef5a:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    ef5c:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ef5e:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ef60:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ef62:	f7fb fb01 	bl	a568 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef66:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef68:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ef6c:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    ef6e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    ef72:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef74:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef76:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef7a:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ef7c:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef7e:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ef82:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef84:	4629      	mov	r1, r5
    ef86:	9300      	str	r3, [sp, #0]
    ef88:	4628      	mov	r0, r5
    ef8a:	4b9d      	ldr	r3, [pc, #628]	; (f200 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ef8c:	f8df a284 	ldr.w	sl, [pc, #644]	; f214 <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ef90:	bf38      	it	cc
    ef92:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef94:	f7f8 fd90 	bl	7ab8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ef98:	f240 6139 	movw	r1, #1593	; 0x639
    ef9c:	f7fb fc40 	bl	a820 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    efa0:	462b      	mov	r3, r5
    efa2:	2204      	movs	r2, #4
    efa4:	4629      	mov	r1, r5
    efa6:	9500      	str	r5, [sp, #0]
    efa8:	4628      	mov	r0, r5
    efaa:	f7f8 fd85 	bl	7ab8 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    efae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    efb0:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efb4:	68a3      	ldr	r3, [r4, #8]
    efb6:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    efba:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efbc:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    efc0:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    efc4:	9308      	str	r3, [sp, #32]
    efc6:	4b8f      	ldr	r3, [pc, #572]	; (f204 <isr+0xef4>)
    efc8:	9307      	str	r3, [sp, #28]
    efca:	4b8f      	ldr	r3, [pc, #572]	; (f208 <isr+0xef8>)
    efcc:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efce:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    efd0:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    efd2:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    efd4:	4640      	mov	r0, r8
    efd6:	a386      	add	r3, pc, #536	; (adr r3, f1f0 <isr+0xee0>)
    efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    efdc:	4649      	mov	r1, r9
		ticker_status =
    efde:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    efe0:	f7f1 f918 	bl	214 <__aeabi_uldivmod>
    efe4:	4610      	mov	r0, r2
    efe6:	4619      	mov	r1, r3
    efe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    efec:	2300      	movs	r3, #0
    efee:	f7f1 f911 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    eff2:	a37f      	add	r3, pc, #508	; (adr r3, f1f0 <isr+0xee0>)
    eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eff8:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    effa:	4649      	mov	r1, r9
    effc:	4640      	mov	r0, r8
    effe:	f7f1 f909 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f002:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f004:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f006:	a37a      	add	r3, pc, #488	; (adr r3, f1f0 <isr+0xee0>)
    f008:	e9d3 2300 	ldrd	r2, r3, [r3]
    f00c:	fba1 010a 	umull	r0, r1, r1, sl
    f010:	f7f1 f900 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f014:	3407      	adds	r4, #7
    f016:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f01a:	b2e4      	uxtb	r4, r4
    f01c:	9000      	str	r0, [sp, #0]
    f01e:	465b      	mov	r3, fp
    f020:	4622      	mov	r2, r4
    f022:	4629      	mov	r1, r5
    f024:	4628      	mov	r0, r5
    f026:	f7f8 fca9 	bl	797c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f02a:	f030 0302 	bics.w	r3, r0, #2
    f02e:	f43f aa19 	beq.w	e464 <isr+0x154>
    f032:	4b71      	ldr	r3, [pc, #452]	; (f1f8 <isr+0xee8>)
    f034:	9301      	str	r3, [sp, #4]
    f036:	9300      	str	r3, [sp, #0]
    f038:	4b70      	ldr	r3, [pc, #448]	; (f1fc <isr+0xeec>)
    f03a:	e514      	b.n	ea66 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f03c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f040:	4972      	ldr	r1, [pc, #456]	; (f20c <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f042:	09d2      	lsrs	r2, r2, #7
    f044:	f362 1386 	bfi	r3, r2, #6, #1
    f048:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f04a:	2206      	movs	r2, #6
    f04c:	e6a4      	b.n	ed98 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f04e:	b9a0      	cbnz	r0, f07a <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f050:	f899 3009 	ldrb.w	r3, [r9, #9]
    f054:	2b00      	cmp	r3, #0
    f056:	f43f ad26 	beq.w	eaa6 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f05a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f05e:	2b00      	cmp	r3, #0
    f060:	f47f ad21 	bne.w	eaa6 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    f064:	f1ba 0f00 	cmp.w	sl, #0
    f068:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f06c:	bf14      	ite	ne
    f06e:	4641      	movne	r1, r8
    f070:	21ff      	moveq	r1, #255	; 0xff
    f072:	4628      	mov	r0, r5
    f074:	f7fb fb10 	bl	a698 <isr_rx_scan_report>
    f078:	e515      	b.n	eaa6 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f07a:	2801      	cmp	r0, #1
    f07c:	d00e      	beq.n	f09c <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f07e:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f082:	f003 020b 	and.w	r2, r3, #11
    f086:	2a02      	cmp	r2, #2
    f088:	d0e2      	beq.n	f050 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f08a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f08e:	2b07      	cmp	r3, #7
    f090:	d10d      	bne.n	f0ae <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f092:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f096:	0758      	lsls	r0, r3, #29
    f098:	d1da      	bne.n	f050 <isr+0xd40>
    f09a:	e504      	b.n	eaa6 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f09c:	ab10      	add	r3, sp, #64	; 0x40
    f09e:	4642      	mov	r2, r8
    f0a0:	4631      	mov	r1, r6
    f0a2:	2000      	movs	r0, #0
    f0a4:	f7fb faac 	bl	a600 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f0a8:	2800      	cmp	r0, #0
    f0aa:	d1d1      	bne.n	f050 <isr+0xd40>
    f0ac:	e7e7      	b.n	f07e <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    f0ae:	2b04      	cmp	r3, #4
    f0b0:	f47f acf9 	bne.w	eaa6 <isr+0x796>
		   (_radio.scanner.state != 0) &&
    f0b4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f0b8:	0799      	lsls	r1, r3, #30
    f0ba:	f57f acf4 	bpl.w	eaa6 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f0be:	f003 f823 	bl	12108 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f0c2:	f899 3008 	ldrb.w	r3, [r9, #8]
    f0c6:	7802      	ldrb	r2, [r0, #0]
    f0c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f0cc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f0d0:	f47f ace9 	bne.w	eaa6 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f0d4:	2206      	movs	r2, #6
    f0d6:	f109 010a 	add.w	r1, r9, #10
    f0da:	3008      	adds	r0, #8
    f0dc:	f7f2 fd79 	bl	1bd2 <memcmp>
		   (_radio.scanner.state != 0) &&
    f0e0:	2800      	cmp	r0, #0
    f0e2:	d0b5      	beq.n	f050 <isr+0xd40>
    f0e4:	e4df      	b.n	eaa6 <isr+0x796>
	_radio.packet_counter++;
    f0e6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0ea:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f0ee:	3301      	adds	r3, #1
    f0f0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f0f4:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0f6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f0fa:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f0fe:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f102:	2301      	movs	r3, #1
    f104:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f108:	2f00      	cmp	r7, #0
    f10a:	f000 82d2 	beq.w	f6b2 <isr+0x13a2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f10e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f112:	f898 1008 	ldrb.w	r1, [r8, #8]
    f116:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f11a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f11e:	f003 0201 	and.w	r2, r3, #1
    f122:	4291      	cmp	r1, r2
    f124:	f000 819e 	beq.w	f464 <isr+0x1154>
		_radio.conn_curr->sn++;
    f128:	f082 0201 	eor.w	r2, r2, #1
    f12c:	f362 0300 	bfi	r3, r2, #0, #1
    f130:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f134:	7ce3      	ldrb	r3, [r4, #19]
    f136:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f138:	bf02      	ittt	eq
    f13a:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f13e:	f043 0301 	orreq.w	r3, r3, #1
    f142:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f146:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f14a:	061a      	lsls	r2, r3, #24
    f14c:	f100 8185 	bmi.w	f45a <isr+0x114a>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f150:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f154:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f158:	1d30      	adds	r0, r6, #4
    f15a:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f15e:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f162:	f1b9 0f00 	cmp.w	r9, #0
    f166:	f000 80ab 	beq.w	f2c0 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    f16a:	069b      	lsls	r3, r3, #26
    f16c:	d50b      	bpl.n	f186 <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    f16e:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f172:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f176:	f11b 0201 	adds.w	r2, fp, #1
    f17a:	f14c 0300 	adc.w	r3, ip, #0
    f17e:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f182:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f186:	5c43      	ldrb	r3, [r0, r1]
    f188:	f003 0303 	and.w	r3, r3, #3
    f18c:	2b03      	cmp	r3, #3
    f18e:	f040 8097 	bne.w	f2c0 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    f192:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f196:	3b02      	subs	r3, #2
    f198:	2b16      	cmp	r3, #22
    f19a:	f200 8091 	bhi.w	f2c0 <isr+0xfb0>
    f19e:	e8df f013 	tbh	[pc, r3, lsl #1]
    f1a2:	0017      	.short	0x0017
    f1a4:	00c50073 	.word	0x00c50073
    f1a8:	008f008f 	.word	0x008f008f
    f1ac:	008f008f 	.word	0x008f008f
    f1b0:	0091008f 	.word	0x0091008f
    f1b4:	008f009c 	.word	0x008f009c
    f1b8:	008f00cc 	.word	0x008f00cc
    f1bc:	008f008f 	.word	0x008f008f
    f1c0:	008f008f 	.word	0x008f008f
    f1c4:	00d6008f 	.word	0x00d6008f
    f1c8:	00ee008f 	.word	0x00ee008f
    f1cc:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    f1d0:	2303      	movs	r3, #3
    f1d2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f1d4:	f002 ff42 	bl	1205c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f1d8:	f002 ff5e 	bl	12098 <radio_is_ready>
    f1dc:	b1e0      	cbz	r0, f218 <isr+0xf08>
    f1de:	4b06      	ldr	r3, [pc, #24]	; (f1f8 <isr+0xee8>)
    f1e0:	9301      	str	r3, [sp, #4]
    f1e2:	9300      	str	r3, [sp, #0]
    f1e4:	4b0a      	ldr	r3, [pc, #40]	; (f210 <isr+0xf00>)
    f1e6:	f7ff b8f1 	b.w	e3cc <isr+0xbc>
    f1ea:	bf00      	nop
    f1ec:	f3af 8000 	nop.w
    f1f0:	1afd498d 	.word	0x1afd498d
    f1f4:	00000007 	.word	0x00000007
    f1f8:	00014645 	.word	0x00014645
    f1fc:	000164d3 	.word	0x000164d3
    f200:	0000a821 	.word	0x0000a821
    f204:	0000a77d 	.word	0x0000a77d
    f208:	0000cc21 	.word	0x0000cc21
    f20c:	200009ac 	.word	0x200009ac
    f210:	000164df 	.word	0x000164df
    f214:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f218:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f21c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f220:	2913      	cmp	r1, #19
    f222:	bf08      	it	eq
    f224:	2116      	moveq	r1, #22
    f226:	f7fb fee3 	bl	aff0 <terminate_ind_rx_enqueue>
		terminate = 1;
    f22a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f22c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f230:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f234:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f236:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f23a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f23e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f240:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f244:	d11e      	bne.n	f284 <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f246:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f24a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f24e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f250:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f252:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f256:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f25a:	f040 80c9 	bne.w	f3f0 <isr+0x10e0>
		if (node_tx) {
    f25e:	b18e      	cbz	r6, f284 <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f260:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f264:	f8d3 e000 	ldr.w	lr, [r3]
    f268:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f26c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f26e:	bf06      	itte	eq
    f270:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f274:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f278:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f27c:	49cd      	ldr	r1, [pc, #820]	; (f5b4 <isr+0x12a4>)
    f27e:	4630      	mov	r0, r6
    f280:	f7f7 fd0d 	bl	6c9e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f284:	2600      	movs	r6, #0
    f286:	e0bc      	b.n	f402 <isr+0x10f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f288:	2208      	movs	r2, #8
    f28a:	f10a 010e 	add.w	r1, sl, #14
    f28e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f292:	f7f2 fcb3 	bl	1bfc <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f296:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f29a:	2204      	movs	r2, #4
    f29c:	f10a 0116 	add.w	r1, sl, #22
    f2a0:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f2a4:	f7f2 fcaa 	bl	1bfc <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f2a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f2ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f2b0:	f042 0208 	orr.w	r2, r2, #8
    f2b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f2b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f2bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f2c0:	2500      	movs	r5, #0
    f2c2:	e7b3      	b.n	f22c <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    f2c4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f2c8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f2cc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f2d0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f2d4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f2d8:	e7f2      	b.n	f2c0 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    f2da:	f894 a013 	ldrb.w	sl, [r4, #19]
    f2de:	fa5f fa8a 	uxtb.w	sl, sl
    f2e2:	f1ba 0f04 	cmp.w	sl, #4
    f2e6:	d121      	bne.n	f32c <isr+0x101c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f2e8:	7933      	ldrb	r3, [r6, #4]
    f2ea:	f043 0303 	orr.w	r3, r3, #3
    f2ee:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f2f0:	2317      	movs	r3, #23
    f2f2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f2f4:	2303      	movs	r3, #3
    f2f6:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f2f8:	2208      	movs	r2, #8
    f2fa:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f2fe:	3004      	adds	r0, #4
    f300:	f7f2 fc7c 	bl	1bfc <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f304:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f308:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f30a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f30e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f310:	f106 0112 	add.w	r1, r6, #18
    f314:	2208      	movs	r2, #8
    f316:	6860      	ldr	r0, [r4, #4]
    f318:	f003 feda 	bl	130d0 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f31c:	f106 011a 	add.w	r1, r6, #26
    f320:	4652      	mov	r2, sl
    f322:	6860      	ldr	r0, [r4, #4]
    f324:	f003 fed4 	bl	130d0 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f328:	2600      	movs	r6, #0
    f32a:	e7c9      	b.n	f2c0 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f32c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f330:	f043 0308 	orr.w	r3, r3, #8
    f334:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f338:	e7c2      	b.n	f2c0 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
    f33a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f33e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f342:	f36f 03c3 	bfc	r3, #3, #1
    f346:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f34a:	2300      	movs	r3, #0
    f34c:	e7c2      	b.n	f2d4 <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
    f34e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f352:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f356:	429a      	cmp	r2, r3
    f358:	d0b2      	beq.n	f2c0 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
    f35a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f35e:	f003 0203 	and.w	r2, r3, #3
    f362:	2a01      	cmp	r2, #1
    f364:	d1ac      	bne.n	f2c0 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f366:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f36a:	f042 0208 	orr.w	r2, r2, #8
    f36e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f372:	2202      	movs	r2, #2
    f374:	f362 0301 	bfi	r3, r2, #0, #2
    f378:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f37c:	e7a0      	b.n	f2c0 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f37e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f382:	2202      	movs	r2, #2
    f384:	f362 0301 	bfi	r3, r2, #0, #2
    f388:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f38c:	7ce3      	ldrb	r3, [r4, #19]
    f38e:	2b03      	cmp	r3, #3
    f390:	d196      	bne.n	f2c0 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f392:	2301      	movs	r3, #1
    f394:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f398:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f39c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f3a0:	2202      	movs	r2, #2
    f3a2:	2304      	movs	r3, #4
    f3a4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f3a8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f3ac:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f3b0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f3b4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f3b8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f3bc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f3c0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f3c4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f3c8:	f003 0307 	and.w	r3, r3, #7
    f3cc:	aa12      	add	r2, sp, #72	; 0x48
    f3ce:	4413      	add	r3, r2
    f3d0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f3d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f3d8:	f363 0202 	bfi	r2, r3, #0, #3
    f3dc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f3e0:	e76e      	b.n	f2c0 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f3e2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f3e6:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f3ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f3ee:	e7f3      	b.n	f3d8 <isr+0x10c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f3f0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f3f4:	4293      	cmp	r3, r2
    f3f6:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f3f8:	bf08      	it	eq
    f3fa:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f3fe:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f402:	b37d      	cbz	r5, f464 <isr+0x1154>
		connection_release(_radio.conn_curr);
    f404:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f408:	f7fb fc40 	bl	ac8c <connection_release>
		_radio.conn_curr = NULL;
    f40c:	2300      	movs	r3, #0
    f40e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f412:	f002 ffe9 	bl	123e8 <radio_tmr_aa_restore>
    f416:	b918      	cbnz	r0, f420 <isr+0x1110>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f418:	f002 ffda 	bl	123d0 <radio_tmr_aa_get>
    f41c:	f002 ffde 	bl	123dc <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f420:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f424:	2b00      	cmp	r3, #0
    f426:	f43f a81d 	beq.w	e464 <isr+0x154>
	if (tx_release) {
    f42a:	b11e      	cbz	r6, f434 <isr+0x1124>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f42c:	4631      	mov	r1, r6
    f42e:	8c18      	ldrh	r0, [r3, #32]
    f430:	f7fb fba2 	bl	ab78 <pdu_node_tx_release>
	if (rx_enqueue) {
    f434:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f438:	2b00      	cmp	r3, #0
    f43a:	f43f a813 	beq.w	e464 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
    f43e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f442:	8c18      	ldrh	r0, [r3, #32]
    f444:	f7fb f980 	bl	a748 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f448:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f44c:	8c1b      	ldrh	r3, [r3, #32]
    f44e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f452:	f7fb f889 	bl	a568 <packet_rx_enqueue>
    f456:	f7ff b805 	b.w	e464 <isr+0x154>
			_radio.conn_curr->empty = 0;
    f45a:	f36f 13c7 	bfc	r3, #7, #1
    f45e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f462:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f464:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f468:	f898 2008 	ldrb.w	r2, [r8, #8]
    f46c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f470:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f474:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f478:	429a      	cmp	r2, r3
    f47a:	f040 80e9 	bne.w	f650 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f47e:	2003      	movs	r0, #3
    f480:	f7fa fa08 	bl	9894 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f484:	2800      	cmp	r0, #0
    f486:	f000 80e3 	beq.w	f650 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f48a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f48e:	b393      	cbz	r3, f4f6 <isr+0x11e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f490:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f494:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f498:	4293      	cmp	r3, r2
    f49a:	d105      	bne.n	f4a8 <isr+0x1198>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f49c:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f4a0:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f4a4:	4291      	cmp	r1, r2
    f4a6:	d026      	beq.n	f4f6 <isr+0x11e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f4a8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f4ac:	4293      	cmp	r3, r2
    f4ae:	f000 80cf 	beq.w	f650 <isr+0x1340>
	      (_radio.fc_req != _radio.fc_ack) &&
    f4b2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f4b6:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f4ba:	429a      	cmp	r2, r3
    f4bc:	f000 80c8 	beq.w	f650 <isr+0x1340>
		(((_radio.fc_req == 0) &&
    f4c0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f4c4:	b933      	cbnz	r3, f4d4 <isr+0x11c4>
		   _radio.conn_curr->handle)) ||
    f4c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f4ca:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f4ce:	8c1b      	ldrh	r3, [r3, #32]
    f4d0:	429a      	cmp	r2, r3
    f4d2:	d010      	beq.n	f4f6 <isr+0x11e6>
		 ((_radio.fc_req != 0) &&
    f4d4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f4d8:	2b00      	cmp	r3, #0
    f4da:	f000 80b9 	beq.w	f650 <isr+0x1340>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f4de:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f4e2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f4e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f4ea:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f4ee:	8c0b      	ldrh	r3, [r1, #32]
    f4f0:	429a      	cmp	r2, r3
    f4f2:	f040 80ad 	bne.w	f650 <isr+0x1340>
		if (pdu_data_rx->len != 0) {
    f4f6:	f898 5009 	ldrb.w	r5, [r8, #9]
    f4fa:	2d00      	cmp	r5, #0
    f4fc:	f000 80b1 	beq.w	f662 <isr+0x1352>
			if (_radio.conn_curr->enc_rx) {
    f500:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f504:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f508:	f015 0510 	ands.w	r5, r5, #16
    f50c:	d00c      	beq.n	f528 <isr+0x1218>
				done = radio_ccm_is_done();
    f50e:	f002 fff7 	bl	12500 <radio_ccm_is_done>
				LL_ASSERT(done);
    f512:	b940      	cbnz	r0, f526 <isr+0x1216>
    f514:	4b28      	ldr	r3, [pc, #160]	; (f5b8 <isr+0x12a8>)
    f516:	9301      	str	r3, [sp, #4]
    f518:	9300      	str	r3, [sp, #0]
    f51a:	4a28      	ldr	r2, [pc, #160]	; (f5bc <isr+0x12ac>)
    f51c:	4b28      	ldr	r3, [pc, #160]	; (f5c0 <isr+0x12b0>)
    f51e:	4929      	ldr	r1, [pc, #164]	; (f5c4 <isr+0x12b4>)
    f520:	4829      	ldr	r0, [pc, #164]	; (f5c8 <isr+0x12b8>)
    f522:	f7ff baa3 	b.w	ea6c <isr+0x75c>
				ccm_rx_increment = 1;
    f526:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f528:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f52c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f530:	06d9      	lsls	r1, r3, #27
    f532:	d42c      	bmi.n	f58e <isr+0x127e>
			    (_radio.conn_curr->pause_rx &&
    f534:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f538:	f898 3008 	ldrb.w	r3, [r8, #8]
    f53c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f540:	f012 0f04 	tst.w	r2, #4
    f544:	d142      	bne.n	f5cc <isr+0x12bc>
			_radio.conn_curr->appto_expire = 0;
    f546:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f548:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f54c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f550:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f554:	d004      	beq.n	f560 <isr+0x1250>
    f556:	2b02      	cmp	r3, #2
    f558:	d873      	bhi.n	f642 <isr+0x1332>
				*rx_enqueue = 1;
    f55a:	2301      	movs	r3, #1
    f55c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f560:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f564:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f568:	f082 0202 	eor.w	r2, r2, #2
    f56c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f570:	2d00      	cmp	r5, #0
    f572:	d06d      	beq.n	f650 <isr+0x1340>
				_radio.conn_curr->ccm_rx.counter++;
    f574:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f578:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f57c:	f119 0001 	adds.w	r0, r9, #1
    f580:	f14a 0100 	adc.w	r1, sl, #0
    f584:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f588:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f58c:	e060      	b.n	f650 <isr+0x1340>
			     !radio_ccm_mic_is_valid()) ||
    f58e:	f002 ffd5 	bl	1253c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f592:	2800      	cmp	r0, #0
    f594:	d1ce      	bne.n	f534 <isr+0x1224>
				_radio.state = STATE_CLOSE;
    f596:	2303      	movs	r3, #3
    f598:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f59a:	f002 fd5f 	bl	1205c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f59e:	f002 fd7b 	bl	12098 <radio_is_ready>
    f5a2:	4605      	mov	r5, r0
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d040      	beq.n	f62a <isr+0x131a>
    f5a8:	4b03      	ldr	r3, [pc, #12]	; (f5b8 <isr+0x12a8>)
    f5aa:	9301      	str	r3, [sp, #4]
    f5ac:	9300      	str	r3, [sp, #0]
    f5ae:	4b04      	ldr	r3, [pc, #16]	; (f5c0 <isr+0x12b0>)
    f5b0:	f7fe bf0c 	b.w	e3cc <isr+0xbc>
    f5b4:	20000a24 	.word	0x20000a24
    f5b8:	00014645 	.word	0x00014645
    f5bc:	00015394 	.word	0x00015394
    f5c0:	00016543 	.word	0x00016543
    f5c4:	000153e3 	.word	0x000153e3
    f5c8:	00016b9b 	.word	0x00016b9b
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f5cc:	f003 0103 	and.w	r1, r3, #3
    f5d0:	2903      	cmp	r1, #3
    f5d2:	d1e0      	bne.n	f596 <isr+0x1286>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f5d4:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f5d8:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f5dc:	f1be 0f00 	cmp.w	lr, #0
    f5e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f5e4:	db15      	blt.n	f612 <isr+0x1302>
	       (!conn->role &&
    f5e6:	b922      	cbnz	r2, f5f2 <isr+0x12e2>
		((!conn->refresh &&
    f5e8:	2902      	cmp	r1, #2
    f5ea:	d0ac      	beq.n	f546 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f5ec:	2911      	cmp	r1, #17
    f5ee:	d8d2      	bhi.n	f596 <isr+0x1286>
    f5f0:	e009      	b.n	f606 <isr+0x12f6>
		 (conn->refresh &&
    f5f2:	1e8a      	subs	r2, r1, #2
    f5f4:	b2d2      	uxtb	r2, r2
    f5f6:	2a09      	cmp	r2, #9
    f5f8:	d8f8      	bhi.n	f5ec <isr+0x12dc>
    f5fa:	f240 2e05 	movw	lr, #517	; 0x205
    f5fe:	fa2e f202 	lsr.w	r2, lr, r2
    f602:	07d2      	lsls	r2, r2, #31
    f604:	d49f      	bmi.n	f546 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f606:	4aac      	ldr	r2, [pc, #688]	; (f8b8 <isr+0x15a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f608:	fa22 f101 	lsr.w	r1, r2, r1
    f60c:	07ca      	lsls	r2, r1, #31
    f60e:	d5c2      	bpl.n	f596 <isr+0x1286>
    f610:	e799      	b.n	f546 <isr+0x1236>
	       (conn->role &&
    f612:	b92a      	cbnz	r2, f620 <isr+0x1310>
		((!conn->refresh &&
    f614:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f616:	d096      	beq.n	f546 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f618:	2911      	cmp	r1, #17
    f61a:	d8bc      	bhi.n	f596 <isr+0x1286>
    f61c:	4aa7      	ldr	r2, [pc, #668]	; (f8bc <isr+0x15ac>)
    f61e:	e7f3      	b.n	f608 <isr+0x12f8>
		 (conn->refresh &&
    f620:	1e8a      	subs	r2, r1, #2
    f622:	2a01      	cmp	r2, #1
    f624:	d98f      	bls.n	f546 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f626:	290b      	cmp	r1, #11
    f628:	e7f5      	b.n	f616 <isr+0x1306>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f62a:	213d      	movs	r1, #61	; 0x3d
    f62c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f630:	f7fb fcde 	bl	aff0 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f634:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f638:	f7fb fb28 	bl	ac8c <connection_release>
				_radio.conn_curr = NULL;
    f63c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    f640:	e6e7      	b.n	f412 <isr+0x1102>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f642:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f646:	4640      	mov	r0, r8
    f648:	f7fd fd42 	bl	d0d0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f64c:	2800      	cmp	r0, #0
    f64e:	d087      	beq.n	f560 <isr+0x1250>
		_radio.conn_curr->supervision_expire = 0;
    f650:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    f654:	2300      	movs	r3, #0
    f656:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    f65a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f65c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f660:	e03e      	b.n	f6e0 <isr+0x13d0>
		} else if ((_radio.conn_curr->enc_rx) ||
    f662:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    f666:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f66a:	f013 0f14 	tst.w	r3, #20
    f66e:	f43f af77 	beq.w	f560 <isr+0x1250>
					    (conn->latency + 6)) ?
    f672:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f674:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f678:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f67a:	4299      	cmp	r1, r3
    f67c:	bfc4      	itt	gt
    f67e:	1f8b      	subgt	r3, r1, #6
    f680:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f682:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f686:	bfcc      	ite	gt
    f688:	b29b      	uxthgt	r3, r3
    f68a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f68c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    f68e:	bf1e      	ittt	ne
    f690:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f694:	2300      	movne	r3, #0
    f696:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f69a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f69e:	2b00      	cmp	r3, #0
    f6a0:	f47f af5e 	bne.w	f560 <isr+0x1250>
				conn->appto_expire = conn->appto_reload;
    f6a4:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f6a8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f6ac:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    f6b0:	e756      	b.n	f560 <isr+0x1250>
		if (_radio.crc_expire == 0) {
    f6b2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    f6b6:	b913      	cbnz	r3, f6be <isr+0x13ae>
			_radio.crc_expire = 2;
    f6b8:	2302      	movs	r3, #2
    f6ba:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    f6be:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f6c2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    f6c6:	3b01      	subs	r3, #1
    f6c8:	b2db      	uxtb	r3, r3
    f6ca:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    f6ce:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f6d2:	fab3 f583 	clz	r5, r3
    f6d6:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f6d8:	bb86      	cbnz	r6, f73c <isr+0x142c>
			_radio.conn_curr->supervision_expire =
    f6da:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f6dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6e0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f6e4:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6e6:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f6ea:	f7fd fbb3 	bl	ce54 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6ee:	7d23      	ldrb	r3, [r4, #20]
    f6f0:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f6f2:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f6f6:	d010      	beq.n	f71a <isr+0x140a>
    f6f8:	bb15      	cbnz	r5, f740 <isr+0x1430>
    f6fa:	b137      	cbz	r7, f70a <isr+0x13fa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f6fc:	f898 3008 	ldrb.w	r3, [r8, #8]
    f700:	06d8      	lsls	r0, r3, #27
    f702:	d402      	bmi.n	f70a <isr+0x13fa>
			 (pdu_data_tx->len == 0)) ||
    f704:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f706:	785b      	ldrb	r3, [r3, #1]
    f708:	b1d3      	cbz	r3, f740 <isr+0x1430>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f70a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    f70e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f712:	2b00      	cmp	r3, #0
    f714:	bf0c      	ite	eq
    f716:	2302      	moveq	r3, #2
    f718:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f71a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f71c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f71e:	d12d      	bne.n	f77c <isr+0x146c>
		if (_radio.role == ROLE_MASTER) {
    f720:	7ce3      	ldrb	r3, [r4, #19]
    f722:	2b04      	cmp	r3, #4
    f724:	d10e      	bne.n	f744 <isr+0x1434>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f726:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f72a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f72e:	f369 12c7 	bfi	r2, r9, #7, #1
    f732:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f736:	f002 fc91 	bl	1205c <radio_disable>
    f73a:	e66a      	b.n	f412 <isr+0x1102>
	struct radio_pdu_node_tx *tx_release = NULL;
    f73c:	2600      	movs	r6, #0
    f73e:	e7cf      	b.n	f6e0 <isr+0x13d0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f740:	2303      	movs	r3, #3
    f742:	e7ea      	b.n	f71a <isr+0x140a>
			radio_switch_complete_and_disable();
    f744:	f002 fcfa 	bl	1213c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f748:	9910      	ldr	r1, [sp, #64]	; 0x40
    f74a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f74e:	780b      	ldrb	r3, [r1, #0]
    f750:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f754:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f758:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f75c:	f362 0382 	bfi	r3, r2, #2, #1
    f760:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f762:	f7fa fc21 	bl	9fa8 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f766:	f002 fc97 	bl	12098 <radio_is_ready>
    f76a:	2800      	cmp	r0, #0
    f76c:	f43f ae51 	beq.w	f412 <isr+0x1102>
    f770:	4b53      	ldr	r3, [pc, #332]	; (f8c0 <isr+0x15b0>)
    f772:	9301      	str	r3, [sp, #4]
    f774:	9300      	str	r3, [sp, #0]
    f776:	4b53      	ldr	r3, [pc, #332]	; (f8c4 <isr+0x15b4>)
    f778:	f7fe be28 	b.w	e3cc <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
    f77c:	2096      	movs	r0, #150	; 0x96
    f77e:	f002 fd63 	bl	12248 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f782:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f786:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f78a:	f000 0007 	and.w	r0, r0, #7
    f78e:	f002 fcbf 	bl	12110 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f792:	f002 fe35 	bl	12400 <radio_tmr_end_capture>
    f796:	e7d7      	b.n	f748 <isr+0x1438>
		LL_ASSERT(0);
    f798:	4b49      	ldr	r3, [pc, #292]	; (f8c0 <isr+0x15b0>)
    f79a:	9301      	str	r3, [sp, #4]
    f79c:	9300      	str	r3, [sp, #0]
    f79e:	4b4a      	ldr	r3, [pc, #296]	; (f8c8 <isr+0x15b8>)
    f7a0:	f7fe bead 	b.w	e4fe <isr+0x1ee>
	switch (_radio.role) {
    f7a4:	7ce2      	ldrb	r2, [r4, #19]
    f7a6:	2a04      	cmp	r2, #4
    f7a8:	f200 823a 	bhi.w	fc20 <isr+0x1910>
    f7ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    f7b0:	00050228 	.word	0x00050228
    f7b4:	00bf0058 	.word	0x00bf0058
    f7b8:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
    f7ba:	2b03      	cmp	r3, #3
    f7bc:	d109      	bne.n	f7d2 <isr+0x14c2>
	    (_radio.advertiser.chan_map_current != 0)) {
    f7be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    f7c2:	0759      	lsls	r1, r3, #29
    f7c4:	d005      	beq.n	f7d2 <isr+0x14c2>
		adv_setup();
    f7c6:	f7fb fb35 	bl	ae34 <adv_setup>
		radio_tx_enable();
    f7ca:	f002 fc41 	bl	12050 <radio_tx_enable>
    f7ce:	f7fe be19 	b.w	e404 <isr+0xf4>
		radio_filter_disable();
    f7d2:	f002 fcfd 	bl	121d0 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    f7d6:	7d23      	ldrb	r3, [r4, #20]
    f7d8:	2b03      	cmp	r3, #3
    f7da:	f040 808f 	bne.w	f8fc <isr+0x15ec>
		    (!_radio.advertiser.is_hdcd)) {
    f7de:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f7e2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f7e6:	f040 8089 	bne.w	f8fc <isr+0x15ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    f7ea:	2201      	movs	r2, #1
    f7ec:	a910      	add	r1, sp, #64	; 0x40
    f7ee:	6860      	ldr	r0, [r4, #4]
    f7f0:	f003 fc6e 	bl	130d0 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    f7f4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f7f8:	4834      	ldr	r0, [pc, #208]	; (f8cc <isr+0x15bc>)
			random_delay %= 10;
    f7fa:	230a      	movs	r3, #10
    f7fc:	fbb1 f2f3 	udiv	r2, r1, r3
    f800:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    f804:	3201      	adds	r2, #1
    f806:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    f808:	b2d6      	uxtb	r6, r2
    f80a:	fba6 0100 	umull	r0, r1, r6, r0
    f80e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    f810:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    f814:	fb03 1106 	mla	r1, r3, r6, r1
    f818:	a325      	add	r3, pc, #148	; (adr r3, f8b0 <isr+0x15a0>)
    f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f81e:	f7f0 fcf9 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    f822:	f640 734b 	movw	r3, #3915	; 0xf4b
    f826:	9306      	str	r3, [sp, #24]
    f828:	4b29      	ldr	r3, [pc, #164]	; (f8d0 <isr+0x15c0>)
    f82a:	9305      	str	r3, [sp, #20]
    f82c:	9504      	str	r5, [sp, #16]
    f82e:	b283      	uxth	r3, r0
    f830:	9503      	str	r5, [sp, #12]
    f832:	9502      	str	r5, [sp, #8]
    f834:	9501      	str	r5, [sp, #4]
    f836:	9500      	str	r5, [sp, #0]
    f838:	2205      	movs	r2, #5
    f83a:	4629      	mov	r1, r5
    f83c:	4628      	mov	r0, r5
    f83e:	f7f8 f8ed 	bl	7a1c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f842:	f030 0302 	bics.w	r3, r0, #2
    f846:	d059      	beq.n	f8fc <isr+0x15ec>
    f848:	7ca3      	ldrb	r3, [r4, #18]
    f84a:	2b05      	cmp	r3, #5
    f84c:	d056      	beq.n	f8fc <isr+0x15ec>
    f84e:	4b1c      	ldr	r3, [pc, #112]	; (f8c0 <isr+0x15b0>)
    f850:	9301      	str	r3, [sp, #4]
    f852:	9300      	str	r3, [sp, #0]
    f854:	4a1f      	ldr	r2, [pc, #124]	; (f8d4 <isr+0x15c4>)
    f856:	4b20      	ldr	r3, [pc, #128]	; (f8d8 <isr+0x15c8>)
    f858:	4920      	ldr	r1, [pc, #128]	; (f8dc <isr+0x15cc>)
    f85a:	4821      	ldr	r0, [pc, #132]	; (f8e0 <isr+0x15d0>)
    f85c:	f7ff b906 	b.w	ea6c <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
    f860:	2b03      	cmp	r3, #3
    f862:	d13f      	bne.n	f8e4 <isr+0x15d4>
		radio_tmr_tifs_set(RADIO_TIFS);
    f864:	2096      	movs	r0, #150	; 0x96
    f866:	f002 fcef 	bl	12248 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f86a:	2300      	movs	r3, #0
    f86c:	4619      	mov	r1, r3
    f86e:	461a      	mov	r2, r3
    f870:	4618      	mov	r0, r3
    f872:	f002 fc59 	bl	12128 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f876:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    f87a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    f87e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f882:	3008      	adds	r0, #8
    f884:	f002 fbc4 	bl	12010 <radio_pkt_rx_set>
		radio_rssi_measure();
    f888:	f002 fc66 	bl	12158 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f88c:	f001 ff02 	bl	11694 <ctrl_rl_enabled>
    f890:	b138      	cbz	r0, f8a2 <isr+0x1592>
			u8_t count, *irks = ctrl_irks_get(&count);
    f892:	a810      	add	r0, sp, #64	; 0x40
    f894:	f001 fc4e 	bl	11134 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f898:	4601      	mov	r1, r0
    f89a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f89e:	f002 fe57 	bl	12550 <radio_ar_configure>
		_radio.state = STATE_RX;
    f8a2:	2301      	movs	r3, #1
    f8a4:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f8a6:	f002 fbcd 	bl	12044 <radio_rx_enable>
    f8aa:	f7fe bdab 	b.w	e404 <isr+0xf4>
    f8ae:	bf00      	nop
    f8b0:	1afd498d 	.word	0x1afd498d
    f8b4:	00000007 	.word	0x00000007
    f8b8:	00022060 	.word	0x00022060
    f8bc:	00022040 	.word	0x00022040
    f8c0:	00014645 	.word	0x00014645
    f8c4:	00016553 	.word	0x00016553
    f8c8:	0001655f 	.word	0x0001655f
    f8cc:	d4a51000 	.word	0xd4a51000
    f8d0:	0000a889 	.word	0x0000a889
    f8d4:	00015394 	.word	0x00015394
    f8d8:	00016572 	.word	0x00016572
    f8dc:	000153e3 	.word	0x000153e3
    f8e0:	00016bc1 	.word	0x00016bc1
		radio_filter_disable();
    f8e4:	f002 fc74 	bl	121d0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f8e8:	7d23      	ldrb	r3, [r4, #20]
    f8ea:	2b05      	cmp	r3, #5
    f8ec:	d106      	bne.n	f8fc <isr+0x15ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f8ee:	2300      	movs	r3, #0
    f8f0:	9300      	str	r3, [sp, #0]
    f8f2:	2204      	movs	r2, #4
    f8f4:	4619      	mov	r1, r3
    f8f6:	4618      	mov	r0, r3
    f8f8:	f7f8 f8de 	bl	7ab8 <ticker_stop>
	_radio.role = ROLE_NONE;
    f8fc:	2500      	movs	r5, #0
    f8fe:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f900:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f902:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f904:	f002 fd1e 	bl	12344 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f908:	462a      	mov	r2, r5
    f90a:	4629      	mov	r1, r5
    f90c:	4628      	mov	r0, r5
    f90e:	4bb2      	ldr	r3, [pc, #712]	; (fbd8 <isr+0x18c8>)
    f910:	f7f7 fa76 	bl	6e00 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f914:	4605      	mov	r5, r0
    f916:	2800      	cmp	r0, #0
    f918:	f000 8188 	beq.w	fc2c <isr+0x191c>
    f91c:	4baf      	ldr	r3, [pc, #700]	; (fbdc <isr+0x18cc>)
    f91e:	9301      	str	r3, [sp, #4]
    f920:	9300      	str	r3, [sp, #0]
    f922:	4aaf      	ldr	r2, [pc, #700]	; (fbe0 <isr+0x18d0>)
    f924:	4baf      	ldr	r3, [pc, #700]	; (fbe4 <isr+0x18d4>)
    f926:	49b0      	ldr	r1, [pc, #704]	; (fbe8 <isr+0x18d8>)
    f928:	48b0      	ldr	r0, [pc, #704]	; (fbec <isr+0x18dc>)
    f92a:	f7ff b89f 	b.w	ea6c <isr+0x75c>
	if (_radio.conn_curr == 0) {
    f92e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f932:	2800      	cmp	r0, #0
    f934:	d0e2      	beq.n	f8fc <isr+0x15ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f936:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f93a:	b181      	cbz	r1, f95e <isr+0x164e>
    f93c:	7ce3      	ldrb	r3, [r4, #19]
    f93e:	2b03      	cmp	r3, #3
    f940:	d003      	beq.n	f94a <isr+0x163a>
    f942:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f946:	07da      	lsls	r2, r3, #31
    f948:	d509      	bpl.n	f95e <isr+0x164e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f94a:	f7fb fb51 	bl	aff0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f94e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f952:	f7fb f99b 	bl	ac8c <connection_release>
			_radio.conn_curr = NULL;
    f956:	2300      	movs	r3, #0
    f958:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f95c:	e7ce      	b.n	f8fc <isr+0x15ec>
	latency_event = _radio.conn_curr->latency_event;
    f95e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    f962:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    f966:	f10b 0601 	add.w	r6, fp, #1
    f96a:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    f96c:	2f00      	cmp	r7, #0
    f96e:	f000 8084 	beq.w	fa7a <isr+0x176a>
		if (_radio.role == ROLE_SLAVE) {
    f972:	7ce3      	ldrb	r3, [r4, #19]
    f974:	2b03      	cmp	r3, #3
    f976:	d173      	bne.n	fa60 <isr+0x1750>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f978:	f002 fd36 	bl	123e8 <radio_tmr_aa_restore>
    f97c:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    f97e:	f002 fd39 	bl	123f4 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    f982:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    f986:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    f98a:	f003 0307 	and.w	r3, r3, #7
    f98e:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f990:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    f994:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    f996:	d052      	beq.n	fa3e <isr+0x172e>
		return 40;
    f998:	2b04      	cmp	r3, #4
    f99a:	bf0c      	ite	eq
    f99c:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    f9a0:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f9a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f9a8:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    f9aa:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f9ac:	930a      	str	r3, [sp, #40]	; 0x28
    f9ae:	f8df a24c 	ldr.w	sl, [pc, #588]	; fbfc <isr+0x18ec>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f9b2:	a387      	add	r3, pc, #540	; (adr r3, fbd0 <isr+0x18c0>)
    f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    f9b8:	d844      	bhi.n	fa44 <isr+0x1734>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f9ba:	fba0 010a 	umull	r0, r1, r0, sl
    f9be:	f7f0 fc29 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f9c4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f9c6:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f9ca:	a381      	add	r3, pc, #516	; (adr r3, fbd0 <isr+0x18c0>)
    f9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    f9d0:	fba0 010a 	umull	r0, r1, r0, sl
    f9d4:	f7f0 fc1e 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f9d8:	2300      	movs	r3, #0
    f9da:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f9dc:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f9de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f9e2:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    f9e6:	b3ab      	cbz	r3, fa54 <isr+0x1744>
				if (pdu_data_tx->len ||
    f9e8:	795b      	ldrb	r3, [r3, #5]
    f9ea:	b913      	cbnz	r3, f9f2 <isr+0x16e2>
    f9ec:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    f9f0:	b10b      	cbz	r3, f9f6 <isr+0x16e6>
					_radio.conn_curr->latency_event = 0;
    f9f2:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    f9f4:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    f9f6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f9fa:	2200      	movs	r2, #0
    f9fc:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f9fe:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa02:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    fa06:	b1c3      	cbz	r3, fa3a <isr+0x172a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fa08:	429e      	cmp	r6, r3
    fa0a:	f080 80b0 	bcs.w	fb6e <isr+0x185e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fa0e:	1b9b      	subs	r3, r3, r6
    fa10:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    fa12:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    fa14:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fa16:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    fa1a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    fa1c:	f240 80a9 	bls.w	fb72 <isr+0x1862>
			else if (_radio.role == ROLE_SLAVE) {
    fa20:	7ce3      	ldrb	r3, [r4, #19]
    fa22:	2b03      	cmp	r3, #3
    fa24:	d109      	bne.n	fa3a <isr+0x172a>
				if (latency_event != 0) {
    fa26:	f1bb 0f00 	cmp.w	fp, #0
    fa2a:	f040 80a2 	bne.w	fb72 <isr+0x1862>
					force = _radio.conn_curr->slave.force & 0x01;
    fa2e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fa30:	087b      	lsrs	r3, r7, #1
					if (force) {
    fa32:	f017 0701 	ands.w	r7, r7, #1
    fa36:	d13d      	bne.n	fab4 <isr+0x17a4>
					_radio.conn_curr->slave.force >>= 1;
    fa38:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fa3a:	2700      	movs	r7, #0
    fa3c:	e03d      	b.n	faba <isr+0x17aa>
		return 24;
    fa3e:	f04f 0818 	mov.w	r8, #24
    fa42:	e7af      	b.n	f9a4 <isr+0x1694>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fa44:	fba9 010a 	umull	r0, r1, r9, sl
    fa48:	f7f0 fbe4 	bl	214 <__aeabi_uldivmod>
    fa4c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fa4e:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fa52:	e7ba      	b.n	f9ca <isr+0x16ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fa54:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fa58:	07db      	lsls	r3, r3, #31
    fa5a:	d5cc      	bpl.n	f9f6 <isr+0x16e6>
				_radio.conn_curr->latency_event =
    fa5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fa5e:	e7c9      	b.n	f9f4 <isr+0x16e4>
		} else if (reason_peer) {
    fa60:	b149      	cbz	r1, fa76 <isr+0x1766>
			_radio.conn_curr->master.terminate_ack = 1;
    fa62:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fa66:	f043 0301 	orr.w	r3, r3, #1
    fa6a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fa6e:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fa72:	4645      	mov	r5, r8
    fa74:	e7bf      	b.n	f9f6 <isr+0x16e6>
	ticks_drift_minus = 0;
    fa76:	4688      	mov	r8, r1
    fa78:	e7fb      	b.n	fa72 <isr+0x1762>
	else if (_radio.conn_curr->connect_expire) {
    fa7a:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fa7c:	b185      	cbz	r5, faa0 <isr+0x1790>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fa7e:	42ae      	cmp	r6, r5
    fa80:	d204      	bcs.n	fa8c <isr+0x177c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fa82:	1bad      	subs	r5, r5, r6
    fa84:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fa86:	463d      	mov	r5, r7
    fa88:	46a8      	mov	r8, r5
    fa8a:	e7b8      	b.n	f9fe <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fa8c:	213e      	movs	r1, #62	; 0x3e
    fa8e:	f7fb faaf 	bl	aff0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fa92:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa96:	f7fb f8f9 	bl	ac8c <connection_release>
			_radio.conn_curr = NULL;
    fa9a:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fa9e:	e72d      	b.n	f8fc <isr+0x15ec>
		if (!_radio.conn_curr->supervision_expire) {
    faa0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    faa4:	f1b8 0f00 	cmp.w	r8, #0
    faa8:	d1ee      	bne.n	fa88 <isr+0x1778>
			_radio.conn_curr->supervision_expire =
    faaa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    faac:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fab0:	4645      	mov	r5, r8
    fab2:	e7a4      	b.n	f9fe <isr+0x16ee>
						_radio.conn_curr->slave.force |=
    fab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fab8:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    faba:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fabe:	b123      	cbz	r3, faca <isr+0x17ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fac0:	429e      	cmp	r6, r3
    fac2:	d258      	bcs.n	fb76 <isr+0x1866>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fac4:	1b9b      	subs	r3, r3, r6
    fac6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    faca:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    face:	b123      	cbz	r3, fada <isr+0x17ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fad0:	429e      	cmp	r6, r3
    fad2:	d252      	bcs.n	fb7a <isr+0x186a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fad4:	1b9b      	subs	r3, r3, r6
    fad6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    fada:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fade:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fae2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    fae6:	b123      	cbz	r3, faf2 <isr+0x17e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fae8:	429e      	cmp	r6, r3
    faea:	d25c      	bcs.n	fba6 <isr+0x1896>
			_radio.conn_curr->appto_expire -= elapsed_event;
    faec:	1b9e      	subs	r6, r3, r6
    faee:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    faf2:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    faf6:	428b      	cmp	r3, r1
    faf8:	d006      	beq.n	fb08 <isr+0x17f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    fafa:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fafe:	3b01      	subs	r3, #1
    fb00:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    fb02:	bf9c      	itt	ls
    fb04:	2300      	movls	r3, #0
    fb06:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fb08:	b917      	cbnz	r7, fb10 <isr+0x1800>
    fb0a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fb0c:	455b      	cmp	r3, fp
    fb0e:	d05c      	beq.n	fbca <isr+0x18ba>
		lazy = _radio.conn_curr->latency_event + 1;
    fb10:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    fb12:	3301      	adds	r3, #1
    fb14:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fb16:	b935      	cbnz	r5, fb26 <isr+0x1816>
    fb18:	f1b8 0f00 	cmp.w	r8, #0
    fb1c:	d103      	bne.n	fb26 <isr+0x1816>
    fb1e:	b913      	cbnz	r3, fb26 <isr+0x1816>
	    (lazy != 0) || (force != 0)) {
    fb20:	2f00      	cmp	r7, #0
    fb22:	f43f aeeb 	beq.w	f8fc <isr+0x15ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fb26:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    fb2a:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fb2c:	3207      	adds	r2, #7
		ticker_status =
    fb2e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fb30:	b2d6      	uxtb	r6, r2
		ticker_status =
    fb32:	4a2f      	ldr	r2, [pc, #188]	; (fbf0 <isr+0x18e0>)
    fb34:	9205      	str	r2, [sp, #20]
    fb36:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    fb38:	9606      	str	r6, [sp, #24]
		ticker_status =
    fb3a:	9704      	str	r7, [sp, #16]
    fb3c:	9102      	str	r1, [sp, #8]
    fb3e:	9101      	str	r1, [sp, #4]
    fb40:	f8cd 8000 	str.w	r8, [sp]
    fb44:	4632      	mov	r2, r6
    fb46:	4608      	mov	r0, r1
    fb48:	f7f7 ff68 	bl	7a1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fb4c:	f030 0302 	bics.w	r3, r0, #2
    fb50:	f43f aed4 	beq.w	f8fc <isr+0x15ec>
    fb54:	7ca3      	ldrb	r3, [r4, #18]
    fb56:	429e      	cmp	r6, r3
    fb58:	f43f aed0 	beq.w	f8fc <isr+0x15ec>
    fb5c:	4b1f      	ldr	r3, [pc, #124]	; (fbdc <isr+0x18cc>)
    fb5e:	9301      	str	r3, [sp, #4]
    fb60:	9300      	str	r3, [sp, #0]
    fb62:	4a1f      	ldr	r2, [pc, #124]	; (fbe0 <isr+0x18d0>)
    fb64:	4b23      	ldr	r3, [pc, #140]	; (fbf4 <isr+0x18e4>)
    fb66:	4920      	ldr	r1, [pc, #128]	; (fbe8 <isr+0x18d8>)
    fb68:	4823      	ldr	r0, [pc, #140]	; (fbf8 <isr+0x18e8>)
    fb6a:	f7fe bf7f 	b.w	ea6c <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fb6e:	2108      	movs	r1, #8
    fb70:	e6eb      	b.n	f94a <isr+0x163a>
				force = 1;
    fb72:	2701      	movs	r7, #1
    fb74:	e7a1      	b.n	faba <isr+0x17aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fb76:	2122      	movs	r1, #34	; 0x22
    fb78:	e6e7      	b.n	f94a <isr+0x163a>
			_radio.conn_curr->apto_expire = 0;
    fb7a:	2300      	movs	r3, #0
    fb7c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    fb80:	2002      	movs	r0, #2
    fb82:	f7f9 fe87 	bl	9894 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    fb86:	b928      	cbnz	r0, fb94 <isr+0x1884>
    fb88:	4b14      	ldr	r3, [pc, #80]	; (fbdc <isr+0x18cc>)
    fb8a:	9301      	str	r3, [sp, #4]
    fb8c:	9300      	str	r3, [sp, #0]
    fb8e:	4b19      	ldr	r3, [pc, #100]	; (fbf4 <isr+0x18e4>)
    fb90:	f7fe be36 	b.w	e800 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    fb94:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb98:	8c1b      	ldrh	r3, [r3, #32]
    fb9a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fb9c:	230a      	movs	r3, #10
    fb9e:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    fba0:	f7fa fce2 	bl	a568 <packet_rx_enqueue>
    fba4:	e799      	b.n	fada <isr+0x17ca>
			_radio.conn_curr->appto_expire = 0;
    fba6:	2300      	movs	r3, #0
    fba8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fbac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	d19e      	bne.n	faf2 <isr+0x17e2>
    fbb4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fbb8:	428b      	cmp	r3, r1
    fbba:	d19e      	bne.n	fafa <isr+0x17ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fbbc:	2307      	movs	r3, #7
    fbbe:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fbc2:	1e4b      	subs	r3, r1, #1
    fbc4:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fbc8:	e793      	b.n	faf2 <isr+0x17e2>
	lazy = 0;
    fbca:	463b      	mov	r3, r7
    fbcc:	e7a3      	b.n	fb16 <isr+0x1806>
    fbce:	bf00      	nop
    fbd0:	1afd498d 	.word	0x1afd498d
    fbd4:	00000007 	.word	0x00000007
    fbd8:	20003d50 	.word	0x20003d50
    fbdc:	00014645 	.word	0x00014645
    fbe0:	00015394 	.word	0x00015394
    fbe4:	00016643 	.word	0x00016643
    fbe8:	000153e3 	.word	0x000153e3
    fbec:	00017073 	.word	0x00017073
    fbf0:	0000a8d1 	.word	0x0000a8d1
    fbf4:	00016580 	.word	0x00016580
    fbf8:	00016c2f 	.word	0x00016c2f
    fbfc:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fc00:	3b04      	subs	r3, #4
    fc02:	2b01      	cmp	r3, #1
    fc04:	d908      	bls.n	fc18 <isr+0x1908>
    fc06:	4b12      	ldr	r3, [pc, #72]	; (fc50 <isr+0x1940>)
    fc08:	9301      	str	r3, [sp, #4]
    fc0a:	9300      	str	r3, [sp, #0]
    fc0c:	4a11      	ldr	r2, [pc, #68]	; (fc54 <isr+0x1944>)
    fc0e:	4b12      	ldr	r3, [pc, #72]	; (fc58 <isr+0x1948>)
    fc10:	4912      	ldr	r1, [pc, #72]	; (fc5c <isr+0x194c>)
    fc12:	4813      	ldr	r0, [pc, #76]	; (fc60 <isr+0x1950>)
    fc14:	f7fe bf2a 	b.w	ea6c <isr+0x75c>
		_radio.state = STATE_NONE;
    fc18:	2300      	movs	r3, #0
    fc1a:	7523      	strb	r3, [r4, #20]
    fc1c:	f7fe bc22 	b.w	e464 <isr+0x154>
		LL_ASSERT(0);
    fc20:	4b0b      	ldr	r3, [pc, #44]	; (fc50 <isr+0x1940>)
    fc22:	9301      	str	r3, [sp, #4]
    fc24:	9300      	str	r3, [sp, #0]
    fc26:	4b0c      	ldr	r3, [pc, #48]	; (fc58 <isr+0x1948>)
    fc28:	f7fe bc69 	b.w	e4fe <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
    fc2c:	6820      	ldr	r0, [r4, #0]
    fc2e:	6843      	ldr	r3, [r0, #4]
    fc30:	4629      	mov	r1, r5
    fc32:	685b      	ldr	r3, [r3, #4]
    fc34:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fc36:	2201      	movs	r2, #1
    fc38:	4611      	mov	r1, r2
    fc3a:	4628      	mov	r0, r5
    fc3c:	f7f7 f8b8 	bl	6db0 <mayfly_enable>
    fc40:	f7fe bc10 	b.w	e464 <isr+0x154>
		LL_ASSERT(0);
    fc44:	4b02      	ldr	r3, [pc, #8]	; (fc50 <isr+0x1940>)
    fc46:	9301      	str	r3, [sp, #4]
    fc48:	9300      	str	r3, [sp, #0]
    fc4a:	4b06      	ldr	r3, [pc, #24]	; (fc64 <isr+0x1954>)
    fc4c:	f7fe bc57 	b.w	e4fe <isr+0x1ee>
    fc50:	00014645 	.word	0x00014645
    fc54:	00015394 	.word	0x00015394
    fc58:	0001658f 	.word	0x0001658f
    fc5c:	000153e3 	.word	0x000153e3
    fc60:	00016ca5 	.word	0x00016ca5
    fc64:	000165a5 	.word	0x000165a5

0000fc68 <radio_init>:
{
    fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    fc6c:	4e3d      	ldr	r6, [pc, #244]	; (fd64 <radio_init+0xfc>)
{
    fc6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fc70:	f89d c01c 	ldrb.w	ip, [sp, #28]
    fc74:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    fc78:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    fc7c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    fc80:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    fc82:	f44f 70aa 	mov.w	r0, #340	; 0x154
    fc86:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    fc8a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    fc8e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    fc92:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    fc94:	f10c 0401 	add.w	r4, ip, #1
    fc98:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    fc9a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    fc9c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    fca0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    fca4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
    fca6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fca8:	bf98      	it	ls
    fcaa:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
    fcae:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    fcb2:	bf88      	it	hi
    fcb4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    fcb8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
    fcbc:	bf8c      	ite	hi
    fcbe:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fcc2:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fcc6:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fcca:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fcce:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fcd2:	bf8c      	ite	hi
    fcd4:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fcd8:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    fcda:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    fcde:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
    fce2:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
    fce6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fcea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    fcee:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fcf2:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
    fcf6:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fcfa:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fcfc:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
    fcfe:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fd02:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fd04:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
    fd08:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fd0c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    fd10:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fd12:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    fd16:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fd1a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fd1e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    fd22:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fd26:	340a      	adds	r4, #10
    fd28:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    fd2c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fd2e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    fd30:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    fd34:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    fd38:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    fd3a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    fd3e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fd42:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
    fd46:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
    fd4a:	d003      	beq.n	fd54 <radio_init+0xec>
		return (retcode + mem_size);
    fd4c:	442c      	add	r4, r5
}
    fd4e:	4620      	mov	r0, r4
    fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    fd54:	2301      	movs	r3, #1
    fd56:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
    fd5a:	f7f9 fe5f 	bl	9a1c <common_init>
	radio_setup();
    fd5e:	f002 f8a7 	bl	11eb0 <radio_setup>
	return retcode;
    fd62:	e7f4      	b.n	fd4e <radio_init+0xe6>
    fd64:	200008c8 	.word	0x200008c8

0000fd68 <ll_reset>:
{
    fd68:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    fd6a:	2103      	movs	r1, #3
    fd6c:	2005      	movs	r0, #5
    fd6e:	f7f9 ff3f 	bl	9bf0 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    fd72:	2104      	movs	r1, #4
    fd74:	2006      	movs	r0, #6
    fd76:	f7f9 ff3b 	bl	9bf0 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    fd7a:	4c22      	ldr	r4, [pc, #136]	; (fe04 <ll_reset+0x9c>)
    fd7c:	2500      	movs	r5, #0
    fd7e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    fd82:	b2ab      	uxth	r3, r5
    fd84:	429a      	cmp	r2, r3
    fd86:	f105 0501 	add.w	r5, r5, #1
    fd8a:	d834      	bhi.n	fdf6 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    fd8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fd90:	f36f 13c7 	bfc	r3, #7, #1
    fd94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fd98:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    fd9c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    fd9e:	f360 0300 	bfi	r3, r0, #0, #1
    fda2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fda6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fda8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
    fdac:	fbb3 f3f2 	udiv	r3, r3, r2
    fdb0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fdb4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
    fdb8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fdbc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    fdbe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
    fdc2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fdc6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
    fdca:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
    fdce:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    fdd2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fdd6:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
    fdda:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
    fdde:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
    fde2:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
    fde6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
    fdea:	f001 fee1 	bl	11bb0 <ll_filter_reset>
}
    fdee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fdf2:	f7f9 be13 	b.w	9a1c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    fdf6:	1da8      	adds	r0, r5, #6
    fdf8:	21ff      	movs	r1, #255	; 0xff
    fdfa:	b2c0      	uxtb	r0, r0
    fdfc:	f7f9 fef8 	bl	9bf0 <role_disable>
    fe00:	e7bd      	b.n	fd7e <ll_reset+0x16>
    fe02:	bf00      	nop
    fe04:	200008c8 	.word	0x200008c8

0000fe08 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    fe08:	4b02      	ldr	r3, [pc, #8]	; (fe14 <ll_adv_is_enabled+0xc>)
    fe0a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    fe0e:	09c0      	lsrs	r0, r0, #7
    fe10:	4770      	bx	lr
    fe12:	bf00      	nop
    fe14:	200008c8 	.word	0x200008c8

0000fe18 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    fe18:	4b04      	ldr	r3, [pc, #16]	; (fe2c <radio_adv_filter_pol_get+0x14>)
    fe1a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    fe1e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    fe20:	bfba      	itte	lt
    fe22:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    fe26:	0980      	lsrlt	r0, r0, #6
    fe28:	2000      	movge	r0, #0
}
    fe2a:	4770      	bx	lr
    fe2c:	200008c8 	.word	0x200008c8

0000fe30 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fe30:	4a09      	ldr	r2, [pc, #36]	; (fe58 <ll_scan_is_enabled+0x28>)
    fe32:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    fe36:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe3a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fe3e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe42:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fe44:	f003 0301 	and.w	r3, r3, #1
    fe48:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    fe4c:	bf14      	ite	ne
    fe4e:	2004      	movne	r0, #4
    fe50:	2000      	moveq	r0, #0
}
    fe52:	4318      	orrs	r0, r3
    fe54:	4770      	bx	lr
    fe56:	bf00      	nop
    fe58:	200008c8 	.word	0x200008c8

0000fe5c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    fe5c:	4b05      	ldr	r3, [pc, #20]	; (fe74 <radio_scan_filter_pol_get+0x18>)
    fe5e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    fe62:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    fe66:	bf1c      	itt	ne
    fe68:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    fe6c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    fe70:	4770      	bx	lr
    fe72:	bf00      	nop
    fe74:	200008c8 	.word	0x200008c8

0000fe78 <radio_connect_enable>:
{
    fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    fe7c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 10204 <__kernel_ram_size+0x204>
{
    fe80:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
    fe82:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
    fe86:	9303      	str	r3, [sp, #12]
    fe88:	4683      	mov	fp, r0
    fe8a:	468a      	mov	sl, r1
    fe8c:	4691      	mov	r9, r2
    fe8e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
    fe90:	2e00      	cmp	r6, #0
    fe92:	f040 819c 	bne.w	101ce <__kernel_ram_size+0x1ce>
	link = mem_acquire(&_radio.link_rx_free);
    fe96:	f508 70a4 	add.w	r0, r8, #328	; 0x148
    fe9a:	f7f6 fee6 	bl	6c6a <mem_acquire>
	if (!link) {
    fe9e:	4607      	mov	r7, r0
    fea0:	b150      	cbz	r0, feb8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
    fea2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
    fea6:	f7f6 fee0 	bl	6c6a <mem_acquire>
	if (!conn) {
    feaa:	4604      	mov	r4, r0
    feac:	b930      	cbnz	r0, febc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
    feae:	f508 71a4 	add.w	r1, r8, #328	; 0x148
    feb2:	4638      	mov	r0, r7
    feb4:	f7f6 fef3 	bl	6c9e <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    feb8:	2007      	movs	r0, #7
    feba:	e15c      	b.n	10176 <__kernel_ram_size+0x176>
	_radio.scanner.adv_addr_type = adv_addr_type;
    febc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
    fec0:	f36b 1386 	bfi	r3, fp, #6, #1
    fec4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    fec8:	2206      	movs	r2, #6
    feca:	4651      	mov	r1, sl
    fecc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
    fed0:	f7f1 fe94 	bl	1bfc <memcpy>
	_radio.scanner.conn_latency = latency;
    fed4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    fed8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fedc:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    fede:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
    fee2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    fee6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    fee8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    feec:	f002 f89c 	bl	12028 <radio_tx_ready_delay_get>
    fef0:	49bb      	ldr	r1, [pc, #748]	; (101e0 <__kernel_ram_size+0x1e0>)
    fef2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    fef6:	a3b8      	add	r3, pc, #736	; (adr r3, 101d8 <__kernel_ram_size+0x1d8>)
    fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
    fefc:	fba0 0101 	umull	r0, r1, r0, r1
    ff00:	f7f0 f988 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    ff04:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    ff08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ff0c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
    ff10:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    ff12:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 10208 <__kernel_ram_size+0x208>
	conn->llcp_features = RADIO_BLE_FEAT;
    ff16:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
    ff1a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ff1e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    ff20:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
    ff24:	2104      	movs	r1, #4
    ff26:	a805      	add	r0, sp, #20
    ff28:	f7f7 fed6 	bl	7cd8 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    ff2c:	f8dd c014 	ldr.w	ip, [sp, #20]
    ff30:	2000      	movs	r0, #0
    ff32:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    ff36:	231f      	movs	r3, #31
	transitions = 0;
    ff38:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    ff3a:	2101      	movs	r1, #1
	while (bit_idx--) {
    ff3c:	3b01      	subs	r3, #1
    ff3e:	b2db      	uxtb	r3, r3
    ff40:	2bff      	cmp	r3, #255	; 0xff
    ff42:	d103      	bne.n	ff4c <radio_connect_enable+0xd4>
    ff44:	b3d0      	cbz	r0, ffbc <radio_connect_enable+0x144>
    ff46:	f8cd c014 	str.w	ip, [sp, #20]
    ff4a:	e037      	b.n	ffbc <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    ff4c:	fa2c fe03 	lsr.w	lr, ip, r3
    ff50:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    ff54:	45d6      	cmp	lr, sl
    ff56:	d11a      	bne.n	ff8e <radio_connect_enable+0x116>
			consecutive_cnt++;
    ff58:	3101      	adds	r1, #1
    ff5a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    ff5c:	2906      	cmp	r1, #6
    ff5e:	d807      	bhi.n	ff70 <radio_connect_enable+0xf8>
    ff60:	2b1b      	cmp	r3, #27
    ff62:	d81a      	bhi.n	ff9a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    ff64:	b122      	cbz	r2, ff70 <radio_connect_enable+0xf8>
    ff66:	2b1b      	cmp	r3, #27
    ff68:	d017      	beq.n	ff9a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    ff6a:	2a01      	cmp	r2, #1
    ff6c:	d815      	bhi.n	ff9a <radio_connect_enable+0x122>
    ff6e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    ff70:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
    ff74:	f1be 0f00 	cmp.w	lr, #0
    ff78:	f000 8100 	beq.w	1017c <__kernel_ram_size+0x17c>
				access_addr &= ~BIT(bit_idx);
    ff7c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    ff80:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    ff84:	3201      	adds	r2, #1
    ff86:	2001      	movs	r0, #1
    ff88:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    ff8a:	4601      	mov	r1, r0
    ff8c:	e005      	b.n	ff9a <radio_connect_enable+0x122>
			transitions++;
    ff8e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    ff90:	2b1b      	cmp	r3, #27
			transitions++;
    ff92:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    ff94:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    ff98:	d9e5      	bls.n	ff66 <radio_connect_enable+0xee>
		if (transitions > 24) {
    ff9a:	2a18      	cmp	r2, #24
    ff9c:	f240 80f6 	bls.w	1018c <__kernel_ram_size+0x18c>
    ffa0:	b108      	cbz	r0, ffa6 <radio_connect_enable+0x12e>
    ffa2:	f8cd c014 	str.w	ip, [sp, #20]
    ffa6:	3301      	adds	r3, #1
    ffa8:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    ffaa:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
    ffae:	f1be 0f00 	cmp.w	lr, #0
    ffb2:	f000 80e8 	beq.w	10186 <__kernel_ram_size+0x186>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    ffb6:	425b      	negs	r3, r3
    ffb8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    ffba:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    ffbc:	9b05      	ldr	r3, [sp, #20]
    ffbe:	a806      	add	r0, sp, #24
    ffc0:	ea83 0308 	eor.w	r3, r3, r8
    ffc4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    ffc8:	2104      	movs	r1, #4
    ffca:	f7f6 fff9 	bl	6fc0 <util_ones_count_get>
    ffce:	2801      	cmp	r0, #1
    ffd0:	f240 80e3 	bls.w	1019a <__kernel_ram_size+0x19a>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    ffd4:	9b05      	ldr	r3, [sp, #20]
    ffd6:	b29a      	uxth	r2, r3
    ffd8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    ffdc:	f000 80d8 	beq.w	10190 <__kernel_ram_size+0x190>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    ffe0:	2204      	movs	r2, #4
    ffe2:	a905      	add	r1, sp, #20
    ffe4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    ffe8:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    ffea:	f7f1 fe07 	bl	1bfc <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    ffee:	2103      	movs	r1, #3
    fff0:	f104 0014 	add.w	r0, r4, #20
    fff4:	f7f7 fe70 	bl	7cd8 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    fff8:	2205      	movs	r2, #5
    fffa:	497a      	ldr	r1, [pc, #488]	; (101e4 <__kernel_ram_size+0x1e4>)
    fffc:	f104 0017 	add.w	r0, r4, #23
   10000:	f7f1 fdfc 	bl	1bfc <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10004:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10008:	7f63      	ldrb	r3, [r4, #29]
   1000a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1000e:	f36f 1386 	bfc	r3, #6, #1
   10012:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10014:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10016:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10018:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1001a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1001c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10020:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10024:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10028:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1002a:	211b      	movs	r1, #27
   1002c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1002e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10030:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10034:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10036:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1003a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1003e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10040:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10042:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10046:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10048:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1004c:	2601      	movs	r6, #1
   1004e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10052:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10056:	f363 11c7 	bfi	r1, r3, #7, #1
   1005a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1005e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10062:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10066:	f366 0102 	bfi	r1, r6, #0, #3
   1006a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   1006e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10072:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10074:	b2c9      	uxtb	r1, r1
   10076:	f36c 01c5 	bfi	r1, ip, #3, #3
   1007a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1007e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10082:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10084:	f366 0102 	bfi	r1, r6, #0, #3
   10088:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1008c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1008e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   10090:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   10094:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   10096:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   10098:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   1009c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   100a0:	f363 0100 	bfi	r1, r3, #0, #1
   100a4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   100a8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   100ac:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   100b0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   100b4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   100b8:	1e56      	subs	r6, r2, #1
   100ba:	f242 7e10 	movw	lr, #10000	; 0x2710
   100be:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   100c2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   100c6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100ca:	4b47      	ldr	r3, [pc, #284]	; (101e8 <__kernel_ram_size+0x1e8>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   100cc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100ce:	4947      	ldr	r1, [pc, #284]	; (101ec <__kernel_ram_size+0x1ec>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100d0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100d2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100d4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100d8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100dc:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   100de:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100e2:	1d81      	adds	r1, r0, #6
   100e4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   100e6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100ea:	dc6a      	bgt.n	101c2 <__kernel_ram_size+0x1c2>
	conn->llcp_version.tx = 0;
   100ec:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   100f0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   100f4:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   100f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   100fa:	f360 0341 	bfi	r3, r0, #1, #1
   100fe:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10102:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10106:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1010a:	f360 1304 	bfi	r3, r0, #4, #1
   1010e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10112:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10116:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1011a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1011e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10122:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10126:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1012a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1012e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10132:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10136:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1013a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1013e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10142:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10146:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1014a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1014e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10152:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10156:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1015a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1015e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10162:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10166:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1016a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1016e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10172:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10176:	b007      	add	sp, #28
   10178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   1017c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10180:	f04f 0e01 	mov.w	lr, #1
   10184:	e6fe      	b.n	ff84 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10186:	3b01      	subs	r3, #1
   10188:	4313      	orrs	r3, r2
   1018a:	e716      	b.n	ffba <radio_connect_enable+0x142>
		if (transitions > 24) {
   1018c:	46f2      	mov	sl, lr
   1018e:	e6d5      	b.n	ff3c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   10190:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10192:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   10196:	f47f af23 	bne.w	ffe0 <radio_connect_enable+0x168>
   1019a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   1019c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   101a0:	f47f aec0 	bne.w	ff24 <radio_connect_enable+0xac>
   101a4:	4b12      	ldr	r3, [pc, #72]	; (101f0 <__kernel_ram_size+0x1f0>)
   101a6:	9301      	str	r3, [sp, #4]
   101a8:	9300      	str	r3, [sp, #0]
   101aa:	4a12      	ldr	r2, [pc, #72]	; (101f4 <__kernel_ram_size+0x1f4>)
   101ac:	4b12      	ldr	r3, [pc, #72]	; (101f8 <__kernel_ram_size+0x1f8>)
   101ae:	4913      	ldr	r1, [pc, #76]	; (101fc <__kernel_ram_size+0x1fc>)
   101b0:	4813      	ldr	r0, [pc, #76]	; (10200 <__kernel_ram_size+0x200>)
   101b2:	f7f0 feeb 	bl	f8c <printk>
   101b6:	4040      	eors	r0, r0
   101b8:	f380 8811 	msr	BASEPRI, r0
   101bc:	f04f 0004 	mov.w	r0, #4
   101c0:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101c2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   101c6:	33fa      	adds	r3, #250	; 0xfa
   101c8:	441a      	add	r2, r3
   101ca:	b292      	uxth	r2, r2
   101cc:	e78e      	b.n	100ec <__kernel_ram_size+0xec>
		return BT_HCI_ERR_CMD_DISALLOWED;
   101ce:	200c      	movs	r0, #12
   101d0:	e7d1      	b.n	10176 <__kernel_ram_size+0x176>
   101d2:	bf00      	nop
   101d4:	f3af 8000 	nop.w
   101d8:	1afd498d 	.word	0x1afd498d
   101dc:	00000007 	.word	0x00000007
   101e0:	3b9aca00 	.word	0x3b9aca00
   101e4:	200009e2 	.word	0x200009e2
   101e8:	01c9c37f 	.word	0x01c9c37f
   101ec:	026259ff 	.word	0x026259ff
   101f0:	00014645 	.word	0x00014645
   101f4:	00015394 	.word	0x00015394
   101f8:	0001672f 	.word	0x0001672f
   101fc:	000153e3 	.word	0x000153e3
   10200:	00017188 	.word	0x00017188
   10204:	200008c8 	.word	0x200008c8
   10208:	8e89bed6 	.word	0x8e89bed6

0001020c <ll_conn_update>:
{
   1020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10210:	460c      	mov	r4, r1
   10212:	4690      	mov	r8, r2
   10214:	461d      	mov	r5, r3
   10216:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1021a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1021e:	f7f9 fcd1 	bl	9bc4 <connection_get>
	if (!conn) {
   10222:	b330      	cbz	r0, 10272 <ll_conn_update+0x66>
	if (!cmd) {
   10224:	2c00      	cmp	r4, #0
   10226:	d14a      	bne.n	102be <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10228:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1022c:	06d9      	lsls	r1, r3, #27
   1022e:	d407      	bmi.n	10240 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10230:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10234:	069a      	lsls	r2, r3, #26
   10236:	d541      	bpl.n	102bc <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10238:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   1023c:	079b      	lsls	r3, r3, #30
   1023e:	d43d      	bmi.n	102bc <ll_conn_update+0xb0>
		} else if (conn->role) {
   10240:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10244:	2b00      	cmp	r3, #0
   10246:	da17      	bge.n	10278 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10248:	201a      	movs	r0, #26
   1024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1024e:	428b      	cmp	r3, r1
   10250:	d00f      	beq.n	10272 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10252:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10256:	f003 0207 	and.w	r2, r3, #7
   1025a:	2a03      	cmp	r2, #3
   1025c:	d109      	bne.n	10272 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1025e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10262:	b2db      	uxtb	r3, r3
   10264:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10268:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   1026c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10270:	e021      	b.n	102b6 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10272:	200c      	movs	r0, #12
   10274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10278:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1027c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10280:	429a      	cmp	r2, r3
   10282:	d1f6      	bne.n	10272 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10284:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10288:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   1028c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1028e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10290:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   10294:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   10298:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   1029a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1029e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   102a2:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   102a6:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   102aa:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   102ae:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   102b2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   102b6:	2000      	movs	r0, #0
   102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   102bc:	2401      	movs	r4, #1
		cmd--;
   102be:	3c01      	subs	r4, #1
		if (cmd) {
   102c0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   102c4:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   102c8:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   102cc:	d1bf      	bne.n	1024e <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   102ce:	4299      	cmp	r1, r3
   102d0:	d1cf      	bne.n	10272 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   102d2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   102d6:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   102da:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   102de:	b2db      	uxtb	r3, r3
   102e0:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   102e4:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   102e6:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   102ea:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   102ee:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   102f2:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   102f6:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   102fa:	e7dc      	b.n	102b6 <ll_conn_update+0xaa>

000102fc <ll_chm_update>:
{
   102fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10300:	4c1e      	ldr	r4, [pc, #120]	; (1037c <ll_chm_update+0x80>)
   10302:	4601      	mov	r1, r0
   10304:	2205      	movs	r2, #5
{
   10306:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10308:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1030c:	f7f1 fc76 	bl	1bfc <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10310:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10314:	2105      	movs	r1, #5
   10316:	f7f6 fe53 	bl	6fc0 <util_ones_count_get>
	_radio.data_chan_count =
   1031a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1031e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10322:	3c01      	subs	r4, #1
   10324:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10326:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10328:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   1032c:	2cff      	cmp	r4, #255	; 0xff
   1032e:	d102      	bne.n	10336 <ll_chm_update+0x3a>
	return 0;
   10330:	2000      	movs	r0, #0
   10332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10336:	4620      	mov	r0, r4
   10338:	f7f9 fc44 	bl	9bc4 <connection_get>
		if (!conn || conn->role) {
   1033c:	4606      	mov	r6, r0
   1033e:	b1b8      	cbz	r0, 10370 <ll_chm_update+0x74>
   10340:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10344:	2b00      	cmp	r3, #0
   10346:	db13      	blt.n	10370 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10348:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1034c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10350:	429a      	cmp	r2, r3
   10352:	d110      	bne.n	10376 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10354:	2205      	movs	r2, #5
   10356:	4629      	mov	r1, r5
   10358:	3079      	adds	r0, #121	; 0x79
   1035a:	f7f1 fc4f 	bl	1bfc <memcpy>
		conn->llcp_req++;
   1035e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10362:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   10366:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10368:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   1036c:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10370:	3c01      	subs	r4, #1
   10372:	b2e4      	uxtb	r4, r4
   10374:	e7da      	b.n	1032c <ll_chm_update+0x30>
			return 1;
   10376:	2001      	movs	r0, #1
}
   10378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1037c:	200008c8 	.word	0x200008c8

00010380 <ll_chm_get>:
{
   10380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10382:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10384:	f7f9 fc1e 	bl	9bc4 <connection_get>
	if (!conn) {
   10388:	4604      	mov	r4, r0
   1038a:	b160      	cbz	r0, 103a6 <ll_chm_get+0x26>
		conn->chm_update = 0;
   1038c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1038e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   10392:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   10394:	2205      	movs	r2, #5
   10396:	4631      	mov	r1, r6
   10398:	4628      	mov	r0, r5
   1039a:	f7f1 fc2f 	bl	1bfc <memcpy>
	} while (conn->chm_update);
   1039e:	7f20      	ldrb	r0, [r4, #28]
   103a0:	2800      	cmp	r0, #0
   103a2:	d1f6      	bne.n	10392 <ll_chm_get+0x12>
   103a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   103a6:	2001      	movs	r0, #1
}
   103a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000103aa <ll_feature_req_send>:
{
   103aa:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   103ac:	f7f9 fc0a 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   103b0:	b168      	cbz	r0, 103ce <ll_feature_req_send+0x24>
   103b2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   103b6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   103ba:	4293      	cmp	r3, r2
   103bc:	d107      	bne.n	103ce <ll_feature_req_send+0x24>
	conn->llcp_req++;
   103be:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   103c0:	2204      	movs	r2, #4
	conn->llcp_req++;
   103c2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   103c6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   103ca:	2000      	movs	r0, #0
   103cc:	bd08      	pop	{r3, pc}
		return 1;
   103ce:	2001      	movs	r0, #1
}
   103d0:	bd08      	pop	{r3, pc}

000103d2 <ll_version_ind_send>:
{
   103d2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   103d4:	f7f9 fbf6 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   103d8:	b168      	cbz	r0, 103f6 <ll_version_ind_send+0x24>
   103da:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   103de:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   103e2:	4293      	cmp	r3, r2
   103e4:	d107      	bne.n	103f6 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   103e6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103e8:	2205      	movs	r2, #5
	conn->llcp_req++;
   103ea:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   103ee:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   103f2:	2000      	movs	r0, #0
   103f4:	bd08      	pop	{r3, pc}
		return 1;
   103f6:	2001      	movs	r0, #1
}
   103f8:	bd08      	pop	{r3, pc}

000103fa <ll_terminate_ind_send>:
{
   103fa:	b510      	push	{r4, lr}
   103fc:	460c      	mov	r4, r1
	conn = connection_get(handle);
   103fe:	f7f9 fbe1 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10402:	b160      	cbz	r0, 1041e <ll_terminate_ind_send+0x24>
   10404:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10408:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1040c:	4293      	cmp	r3, r2
   1040e:	d106      	bne.n	1041e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10410:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10412:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10416:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1041a:	2000      	movs	r0, #0
   1041c:	bd10      	pop	{r4, pc}
		return 1;
   1041e:	2001      	movs	r0, #1
}
   10420:	bd10      	pop	{r4, pc}

00010422 <ll_tx_pwr_lvl_get>:
{
   10422:	b510      	push	{r4, lr}
   10424:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10426:	f7f9 fbcd 	bl	9bc4 <connection_get>
	if (!conn) {
   1042a:	b110      	cbz	r0, 10432 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1042c:	2000      	movs	r0, #0
   1042e:	7020      	strb	r0, [r4, #0]
	return 0;
   10430:	bd10      	pop	{r4, pc}
		return 1;
   10432:	2001      	movs	r0, #1
}
   10434:	bd10      	pop	{r4, pc}

00010436 <ll_apto_get>:
{
   10436:	b510      	push	{r4, lr}
   10438:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1043a:	f7f9 fbc3 	bl	9bc4 <connection_get>
	if (!conn) {
   1043e:	b160      	cbz	r0, 1045a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10440:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10442:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   10446:	435a      	muls	r2, r3
   10448:	237d      	movs	r3, #125	; 0x7d
   1044a:	4353      	muls	r3, r2
	return 0;
   1044c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1044e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10452:	fb93 f3f2 	sdiv	r3, r3, r2
   10456:	8023      	strh	r3, [r4, #0]
	return 0;
   10458:	bd10      	pop	{r4, pc}
		return 1;
   1045a:	2001      	movs	r0, #1
}
   1045c:	bd10      	pop	{r4, pc}

0001045e <ll_apto_set>:
{
   1045e:	b510      	push	{r4, lr}
   10460:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10462:	f7f9 fbaf 	bl	9bc4 <connection_get>
	if (!conn) {
   10466:	b170      	cbz	r0, 10486 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10468:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1046a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1046e:	4353      	muls	r3, r2
   10470:	f242 7110 	movw	r1, #10000	; 0x2710
   10474:	fb01 3404 	mla	r4, r1, r4, r3
   10478:	3c01      	subs	r4, #1
   1047a:	fb94 f4f3 	sdiv	r4, r4, r3
   1047e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10482:	2000      	movs	r0, #0
   10484:	bd10      	pop	{r4, pc}
		return 1;
   10486:	2001      	movs	r0, #1
}
   10488:	bd10      	pop	{r4, pc}

0001048a <ll_length_req_send>:
{
   1048a:	b570      	push	{r4, r5, r6, lr}
   1048c:	460e      	mov	r6, r1
   1048e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   10490:	f7f9 fb98 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10494:	b1d0      	cbz	r0, 104cc <ll_length_req_send+0x42>
   10496:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1049a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1049e:	429a      	cmp	r2, r3
   104a0:	d114      	bne.n	104cc <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   104a2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   104a6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   104aa:	4293      	cmp	r3, r2
   104ac:	d10e      	bne.n	104cc <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   104ae:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   104b2:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   104b6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   104b8:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   104bc:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   104c0:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   104c4:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   104c8:	2000      	movs	r0, #0
   104ca:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   104cc:	2001      	movs	r0, #1
}
   104ce:	bd70      	pop	{r4, r5, r6, pc}

000104d0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   104d0:	4b03      	ldr	r3, [pc, #12]	; (104e0 <ll_length_default_get+0x10>)
   104d2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   104d6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   104d8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   104dc:	800b      	strh	r3, [r1, #0]
   104de:	4770      	bx	lr
   104e0:	200008c8 	.word	0x200008c8

000104e4 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   104e4:	4b03      	ldr	r3, [pc, #12]	; (104f4 <ll_length_default_set+0x10>)
   104e6:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   104ea:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   104ee:	2000      	movs	r0, #0
   104f0:	4770      	bx	lr
   104f2:	bf00      	nop
   104f4:	200008c8 	.word	0x200008c8

000104f8 <ll_length_max_get>:
{
   104f8:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   104fa:	241b      	movs	r4, #27
   104fc:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   104fe:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10502:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10504:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10506:	8018      	strh	r0, [r3, #0]
   10508:	bd10      	pop	{r4, pc}

0001050a <ll_phy_get>:
{
   1050a:	b538      	push	{r3, r4, r5, lr}
   1050c:	460d      	mov	r5, r1
   1050e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10510:	f7f9 fb58 	bl	9bc4 <connection_get>
	if (!conn) {
   10514:	b158      	cbz	r0, 1052e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10516:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1051a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1051e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10520:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10524:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10528:	7023      	strb	r3, [r4, #0]
	return 0;
   1052a:	2000      	movs	r0, #0
   1052c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1052e:	2001      	movs	r0, #1
}
   10530:	bd38      	pop	{r3, r4, r5, pc}
	...

00010534 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10534:	4b03      	ldr	r3, [pc, #12]	; (10544 <ll_phy_default_set+0x10>)
   10536:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1053a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1053e:	2000      	movs	r0, #0
   10540:	4770      	bx	lr
   10542:	bf00      	nop
   10544:	200008c8 	.word	0x200008c8

00010548 <ll_phy_req_send>:
{
   10548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1054c:	4689      	mov	r9, r1
   1054e:	4690      	mov	r8, r2
   10550:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10552:	f7f9 fb37 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10556:	b320      	cbz	r0, 105a2 <ll_phy_req_send+0x5a>
   10558:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1055c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10560:	429a      	cmp	r2, r3
   10562:	d11e      	bne.n	105a2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10564:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10568:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   1056c:	429d      	cmp	r5, r3
   1056e:	d118      	bne.n	105a2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10570:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10574:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10578:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1057c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10580:	f046 0102 	orr.w	r1, r6, #2
   10584:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10588:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1058a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1058c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   10590:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   10594:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   10598:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   1059c:	2000      	movs	r0, #0
   1059e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   105a2:	2001      	movs	r0, #1
}
   105a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000105a8 <ll_rx_get>:
{
   105a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   105ac:	4605      	mov	r5, r0
   105ae:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   105b0:	4918      	ldr	r1, [pc, #96]	; (10614 <ll_rx_get+0x6c>)
   105b2:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   105b6:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   105ba:	4293      	cmp	r3, r2
   105bc:	460f      	mov	r7, r1
   105be:	d01f      	beq.n	10600 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   105c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   105c4:	f201 1177 	addw	r1, r1, #375	; 0x177
   105c8:	f898 2000 	ldrb.w	r2, [r8]
   105cc:	f7f9 fab0 	bl	9b30 <tx_cmplt_get>
		if (!cmplt) {
   105d0:	4604      	mov	r4, r0
   105d2:	b9e0      	cbnz	r0, 1060e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   105d4:	ae02      	add	r6, sp, #8
   105d6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   105da:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   105de:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   105e2:	4631      	mov	r1, r6
   105e4:	f10d 0006 	add.w	r0, sp, #6
   105e8:	f7f9 faa2 	bl	9b30 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   105ec:	b934      	cbnz	r4, 105fc <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   105ee:	b928      	cbnz	r0, 105fc <ll_rx_get+0x54>
			*node_rx = _node_rx;
   105f0:	f8c5 8000 	str.w	r8, [r5]
}
   105f4:	4620      	mov	r0, r4
   105f6:	b002      	add	sp, #8
   105f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   105fc:	4604      	mov	r4, r0
   105fe:	e7ee      	b.n	105de <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10600:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10604:	f201 1177 	addw	r1, r1, #375	; 0x177
   10608:	f7f9 fa92 	bl	9b30 <tx_cmplt_get>
   1060c:	4604      	mov	r4, r0
		*node_rx = NULL;
   1060e:	2300      	movs	r3, #0
   10610:	602b      	str	r3, [r5, #0]
   10612:	e7ef      	b.n	105f4 <ll_rx_get+0x4c>
   10614:	200008c8 	.word	0x200008c8

00010618 <ll_rx_mem_release>:
{
   10618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1061c:	4c1c      	ldr	r4, [pc, #112]	; (10690 <ll_rx_mem_release+0x78>)
{
   1061e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10620:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10622:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10626:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   1062a:	b930      	cbnz	r0, 1063a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   1062c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   1062e:	20ff      	movs	r0, #255	; 0xff
}
   10630:	b002      	add	sp, #8
   10632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10636:	f7f9 b9a5 	b.w	9984 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1063a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1063c:	f8d0 8000 	ldr.w	r8, [r0]
   10640:	2a0c      	cmp	r2, #12
   10642:	d807      	bhi.n	10654 <ll_rx_mem_release+0x3c>
   10644:	2301      	movs	r3, #1
   10646:	4093      	lsls	r3, r2
   10648:	f641 727e 	movw	r2, #8062	; 0x1f7e
   1064c:	4213      	tst	r3, r2
   1064e:	d110      	bne.n	10672 <ll_rx_mem_release+0x5a>
   10650:	061b      	lsls	r3, r3, #24
   10652:	d413      	bmi.n	1067c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   10654:	4b0f      	ldr	r3, [pc, #60]	; (10694 <ll_rx_mem_release+0x7c>)
   10656:	9301      	str	r3, [sp, #4]
   10658:	9300      	str	r3, [sp, #0]
   1065a:	4a0f      	ldr	r2, [pc, #60]	; (10698 <ll_rx_mem_release+0x80>)
   1065c:	4b0f      	ldr	r3, [pc, #60]	; (1069c <ll_rx_mem_release+0x84>)
   1065e:	4910      	ldr	r1, [pc, #64]	; (106a0 <ll_rx_mem_release+0x88>)
   10660:	4810      	ldr	r0, [pc, #64]	; (106a4 <ll_rx_mem_release+0x8c>)
   10662:	f7f0 fc93 	bl	f8c <printk>
   10666:	4040      	eors	r0, r0
   10668:	f380 8811 	msr	BASEPRI, r0
   1066c:	f04f 0004 	mov.w	r0, #4
   10670:	df02      	svc	2
			mem_release(_node_rx_free,
   10672:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10674:	f7f6 fb13 	bl	6c9e <mem_release>
{
   10678:	4640      	mov	r0, r8
   1067a:	e7d6      	b.n	1062a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1067c:	88c2      	ldrh	r2, [r0, #6]
   1067e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10682:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10686:	f7f6 fb25 	bl	6cd4 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1068a:	4639      	mov	r1, r7
   1068c:	e7f2      	b.n	10674 <ll_rx_mem_release+0x5c>
   1068e:	bf00      	nop
   10690:	200009f8 	.word	0x200009f8
   10694:	00014645 	.word	0x00014645
   10698:	00015394 	.word	0x00015394
   1069c:	000168d3 	.word	0x000168d3
   106a0:	000153e3 	.word	0x000153e3
   106a4:	00015333 	.word	0x00015333

000106a8 <do_radio_rx_fc_set>:
	if (req == ack) {
   106a8:	4291      	cmp	r1, r2
{
   106aa:	b510      	push	{r4, lr}
   106ac:	4b14      	ldr	r3, [pc, #80]	; (10700 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   106ae:	d119      	bne.n	106e4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   106b0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   106b4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   106b8:	4294      	cmp	r4, r2
   106ba:	d111      	bne.n	106e0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   106bc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   106be:	bf14      	ite	ne
   106c0:	460a      	movne	r2, r1
   106c2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   106c4:	3a01      	subs	r2, #1
   106c6:	b2d2      	uxtb	r2, r2
   106c8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   106cc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   106d0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   106d4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   106d8:	4291      	cmp	r1, r2
   106da:	d00f      	beq.n	106fc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   106dc:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   106e0:	2001      	movs	r0, #1
   106e2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   106e4:	b929      	cbnz	r1, 106f2 <do_radio_rx_fc_set+0x4a>
   106e6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   106ea:	1a18      	subs	r0, r3, r0
   106ec:	bf18      	it	ne
   106ee:	2001      	movne	r0, #1
   106f0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   106f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   106f6:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   106fa:	e7f6      	b.n	106ea <do_radio_rx_fc_set+0x42>
	return 0;
   106fc:	2000      	movs	r0, #0
}
   106fe:	bd10      	pop	{r4, pc}
   10700:	200008c8 	.word	0x200008c8

00010704 <radio_rx_fc_set>:
{
   10704:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10706:	4b14      	ldr	r3, [pc, #80]	; (10758 <radio_rx_fc_set+0x54>)
   10708:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   1070c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1070e:	b302      	cbz	r2, 10752 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10710:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10714:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10716:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   1071a:	b135      	cbz	r5, 1072a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1071c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10720:	4298      	cmp	r0, r3
   10722:	d016      	beq.n	10752 <radio_rx_fc_set+0x4e>
}
   10724:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10726:	f7ff bfbf 	b.w	106a8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1072a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   1072e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10732:	42a0      	cmp	r0, r4
   10734:	d10d      	bne.n	10752 <radio_rx_fc_set+0x4e>
   10736:	4291      	cmp	r1, r2
   10738:	d00b      	beq.n	10752 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1073a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   1073e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10742:	42a0      	cmp	r0, r4
   10744:	d005      	beq.n	10752 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10746:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1074a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   1074c:	bf08      	it	eq
   1074e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10752:	2000      	movs	r0, #0
   10754:	bc30      	pop	{r4, r5}
   10756:	4770      	bx	lr
   10758:	200008c8 	.word	0x200008c8

0001075c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1075c:	4801      	ldr	r0, [pc, #4]	; (10764 <ll_tx_mem_acquire+0x8>)
   1075e:	f7f6 ba84 	b.w	6c6a <mem_acquire>
   10762:	bf00      	nop
   10764:	20000a2c 	.word	0x20000a2c

00010768 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10768:	4901      	ldr	r1, [pc, #4]	; (10770 <ll_tx_mem_release+0x8>)
   1076a:	f7f6 ba98 	b.w	6c9e <mem_release>
   1076e:	bf00      	nop
   10770:	20000a2c 	.word	0x20000a2c

00010774 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10774:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10776:	4d33      	ldr	r5, [pc, #204]	; (10844 <ll_tx_mem_enqueue+0xd0>)
   10778:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   1077c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10780:	3401      	adds	r4, #1
{
   10782:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10784:	b2e4      	uxtb	r4, r4
{
   10786:	4607      	mov	r7, r0
   10788:	460e      	mov	r6, r1
		last = 0;
   1078a:	42a3      	cmp	r3, r4
   1078c:	bf08      	it	eq
   1078e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10790:	f7f9 fa18 	bl	9bc4 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10794:	2800      	cmp	r0, #0
   10796:	d052      	beq.n	1083e <ll_tx_mem_enqueue+0xca>
   10798:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   1079c:	429c      	cmp	r4, r3
   1079e:	d04e      	beq.n	1083e <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   107a0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   107a4:	7972      	ldrb	r2, [r6, #5]
   107a6:	3b07      	subs	r3, #7
   107a8:	429a      	cmp	r2, r3
   107aa:	d90e      	bls.n	107ca <ll_tx_mem_enqueue+0x56>
   107ac:	4b26      	ldr	r3, [pc, #152]	; (10848 <ll_tx_mem_enqueue+0xd4>)
   107ae:	9301      	str	r3, [sp, #4]
   107b0:	9300      	str	r3, [sp, #0]
   107b2:	4a26      	ldr	r2, [pc, #152]	; (1084c <ll_tx_mem_enqueue+0xd8>)
   107b4:	4b26      	ldr	r3, [pc, #152]	; (10850 <ll_tx_mem_enqueue+0xdc>)
   107b6:	4927      	ldr	r1, [pc, #156]	; (10854 <ll_tx_mem_enqueue+0xe0>)
   107b8:	4827      	ldr	r0, [pc, #156]	; (10858 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   107ba:	f7f0 fbe7 	bl	f8c <printk>
   107be:	4040      	eors	r0, r0
   107c0:	f380 8811 	msr	BASEPRI, r0
   107c4:	f04f 0004 	mov.w	r0, #4
   107c8:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   107ca:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   107ce:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   107d2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   107d6:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   107da:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   107dc:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   107e0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   107e4:	2b00      	cmp	r3, #0
   107e6:	db02      	blt.n	107ee <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   107e8:	2000      	movs	r0, #0
}
   107ea:	b009      	add	sp, #36	; 0x24
   107ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   107ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   107f0:	2b00      	cmp	r3, #0
   107f2:	d0f9      	beq.n	107e8 <ll_tx_mem_enqueue+0x74>
   107f4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   107f8:	f012 0302 	ands.w	r3, r2, #2
   107fc:	d1f4      	bne.n	107e8 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   107fe:	f042 0202 	orr.w	r2, r2, #2
   10802:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10806:	f890 2020 	ldrb.w	r2, [r0, #32]
   1080a:	4914      	ldr	r1, [pc, #80]	; (1085c <ll_tx_mem_enqueue+0xe8>)
   1080c:	9105      	str	r1, [sp, #20]
   1080e:	3207      	adds	r2, #7
   10810:	2101      	movs	r1, #1
   10812:	9006      	str	r0, [sp, #24]
   10814:	9304      	str	r3, [sp, #16]
   10816:	9103      	str	r1, [sp, #12]
   10818:	9302      	str	r3, [sp, #8]
   1081a:	9301      	str	r3, [sp, #4]
   1081c:	9300      	str	r3, [sp, #0]
   1081e:	4618      	mov	r0, r3
   10820:	b2d2      	uxtb	r2, r2
   10822:	2103      	movs	r1, #3
   10824:	f7f7 f8fa 	bl	7a1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10828:	f030 0302 	bics.w	r3, r0, #2
   1082c:	d0dc      	beq.n	107e8 <ll_tx_mem_enqueue+0x74>
   1082e:	4b06      	ldr	r3, [pc, #24]	; (10848 <ll_tx_mem_enqueue+0xd4>)
   10830:	9301      	str	r3, [sp, #4]
   10832:	9300      	str	r3, [sp, #0]
   10834:	4a05      	ldr	r2, [pc, #20]	; (1084c <ll_tx_mem_enqueue+0xd8>)
   10836:	4b06      	ldr	r3, [pc, #24]	; (10850 <ll_tx_mem_enqueue+0xdc>)
   10838:	4906      	ldr	r1, [pc, #24]	; (10854 <ll_tx_mem_enqueue+0xe0>)
   1083a:	4809      	ldr	r0, [pc, #36]	; (10860 <ll_tx_mem_enqueue+0xec>)
   1083c:	e7bd      	b.n	107ba <ll_tx_mem_enqueue+0x46>
		return 1;
   1083e:	2001      	movs	r0, #1
   10840:	e7d3      	b.n	107ea <ll_tx_mem_enqueue+0x76>
   10842:	bf00      	nop
   10844:	200008c8 	.word	0x200008c8
   10848:	00014645 	.word	0x00014645
   1084c:	00015394 	.word	0x00015394
   10850:	00016901 	.word	0x00016901
   10854:	000153e3 	.word	0x000153e3
   10858:	00016ee7 	.word	0x00016ee7
   1085c:	0000a91d 	.word	0x0000a91d
   10860:	00016939 	.word	0x00016939

00010864 <ll_enc_req_send>:
{
   10864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10868:	4607      	mov	r7, r0
   1086a:	4688      	mov	r8, r1
   1086c:	4616      	mov	r6, r2
   1086e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10870:	f7f9 f9a8 	bl	9bc4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10874:	4605      	mov	r5, r0
   10876:	b910      	cbnz	r0, 1087e <ll_enc_req_send+0x1a>
			return 1;
   10878:	2001      	movs	r0, #1
   1087a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1087e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10882:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10886:	429a      	cmp	r2, r3
   10888:	d1f6      	bne.n	10878 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   1088a:	f7ff ff67 	bl	1075c <ll_tx_mem_acquire>
	if (node_tx) {
   1088e:	4604      	mov	r4, r0
   10890:	2800      	cmp	r0, #0
   10892:	d0f1      	beq.n	10878 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10894:	2210      	movs	r2, #16
   10896:	4649      	mov	r1, r9
   10898:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1089c:	f7f1 f9ae 	bl	1bfc <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   108a0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   108a4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   108a8:	d124      	bne.n	108f4 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   108aa:	7923      	ldrb	r3, [r4, #4]
   108ac:	f043 0303 	orr.w	r3, r3, #3
   108b0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   108b2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   108b4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   108b6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   108b8:	2303      	movs	r3, #3
   108ba:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   108bc:	4641      	mov	r1, r8
   108be:	18a0      	adds	r0, r4, r2
   108c0:	f7f1 f99c 	bl	1bfc <memcpy>
			enc_req->ediv[0] = ediv[0];
   108c4:	7833      	ldrb	r3, [r6, #0]
   108c6:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   108c8:	7873      	ldrb	r3, [r6, #1]
   108ca:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   108cc:	2108      	movs	r1, #8
   108ce:	f104 0012 	add.w	r0, r4, #18
   108d2:	f7f7 fa01 	bl	7cd8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   108d6:	2104      	movs	r1, #4
   108d8:	f104 001a 	add.w	r0, r4, #26
   108dc:	f7f7 f9fc 	bl	7cd8 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   108e0:	4621      	mov	r1, r4
   108e2:	4638      	mov	r0, r7
   108e4:	f7ff ff46 	bl	10774 <ll_tx_mem_enqueue>
   108e8:	2601      	movs	r6, #1
   108ea:	b1d0      	cbz	r0, 10922 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   108ec:	4620      	mov	r0, r4
   108ee:	f7ff ff3b 	bl	10768 <ll_tx_mem_release>
   108f2:	e7c1      	b.n	10878 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   108f4:	2b30      	cmp	r3, #48	; 0x30
   108f6:	d1f9      	bne.n	108ec <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   108f8:	2208      	movs	r2, #8
   108fa:	4641      	mov	r1, r8
   108fc:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10900:	f7f1 f97c 	bl	1bfc <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10904:	7833      	ldrb	r3, [r6, #0]
   10906:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1090a:	7873      	ldrb	r3, [r6, #1]
   1090c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10910:	7923      	ldrb	r3, [r4, #4]
   10912:	f043 0303 	orr.w	r3, r3, #3
   10916:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10918:	2301      	movs	r3, #1
   1091a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1091c:	230a      	movs	r3, #10
   1091e:	71e3      	strb	r3, [r4, #7]
   10920:	e7de      	b.n	108e0 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   10922:	2303      	movs	r3, #3
   10924:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   10928:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   1092c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   10930:	3301      	adds	r3, #1
   10932:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   10936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1093a:	0000      	movs	r0, r0
   1093c:	0000      	movs	r0, r0
	...

00010940 <radio_scan_enable>:
{
   10940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   10944:	4c68      	ldr	r4, [pc, #416]	; (10ae8 <radio_scan_enable+0x1a8>)
   10946:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   1094a:	b08e      	sub	sp, #56	; 0x38
   1094c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   1094e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10952:	f04f 0302 	mov.w	r3, #2
{
   10956:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10958:	930b      	str	r3, [sp, #44]	; 0x2c
{
   1095a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   1095c:	d003      	beq.n	10966 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1095e:	200c      	movs	r0, #12
}
   10960:	b00e      	add	sp, #56	; 0x38
   10962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   10966:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   1096a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   1096e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   10972:	0840      	lsrs	r0, r0, #1
   10974:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10978:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1097c:	f360 0200 	bfi	r2, r0, #0, #1
   10980:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10984:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10988:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   1098c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10990:	2206      	movs	r2, #6
   10992:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10996:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1099a:	4e54      	ldr	r6, [pc, #336]	; (10aec <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1099c:	f7f1 f92e 	bl	1bfc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   109a0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   109a4:	f04f 0991 	mov.w	r9, #145	; 0x91
   109a8:	fba2 0106 	umull	r0, r1, r2, r6
   109ac:	fb09 1102 	mla	r1, r9, r2, r1
   109b0:	a34b      	add	r3, pc, #300	; (adr r3, 10ae0 <radio_scan_enable+0x1a0>)
   109b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   109b6:	f7ef fc2d 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   109ba:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   109be:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   109c2:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   109c6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   109ca:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   109ce:	b2ba      	uxth	r2, r7
   109d0:	fba2 6706 	umull	r6, r7, r2, r6
   109d4:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   109d8:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   109dc:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   109de:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   109e2:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   109e6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   109ea:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   109ee:	a33c      	add	r3, pc, #240	; (adr r3, 10ae0 <radio_scan_enable+0x1a0>)
   109f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   109f4:	4630      	mov	r0, r6
   109f6:	4639      	mov	r1, r7
   109f8:	f7ef fc0c 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   109fc:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10a00:	459a      	cmp	sl, r3
   10a02:	bf94      	ite	ls
   10a04:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10a08:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10a0c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10a10:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10a12:	bf38      	it	cc
   10a14:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10a18:	f7f7 f91e 	bl	7c58 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   10a1c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   10a20:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   10a22:	2b00      	cmp	r3, #0
   10a24:	d045      	beq.n	10ab2 <radio_scan_enable+0x172>
		us_offset = 0;
   10a26:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10a28:	980c      	ldr	r0, [sp, #48]	; 0x30
   10a2a:	4931      	ldr	r1, [pc, #196]	; (10af0 <radio_scan_enable+0x1b0>)
   10a2c:	a32c      	add	r3, pc, #176	; (adr r3, 10ae0 <radio_scan_enable+0x1a0>)
   10a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a32:	fba0 0101 	umull	r0, r1, r0, r1
   10a36:	f7ef fbed 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a3a:	ab0b      	add	r3, sp, #44	; 0x2c
   10a3c:	9308      	str	r3, [sp, #32]
   10a3e:	4b2d      	ldr	r3, [pc, #180]	; (10af4 <radio_scan_enable+0x1b4>)
   10a40:	9307      	str	r3, [sp, #28]
   10a42:	4b2d      	ldr	r3, [pc, #180]	; (10af8 <radio_scan_enable+0x1b8>)
   10a44:	9305      	str	r3, [sp, #20]
   10a46:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a4e:	4443      	add	r3, r8
   10a50:	2500      	movs	r5, #0
   10a52:	4482      	add	sl, r0
   10a54:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10a56:	4630      	mov	r0, r6
   10a58:	a321      	add	r3, pc, #132	; (adr r3, 10ae0 <radio_scan_enable+0x1a0>)
   10a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a5e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a60:	9506      	str	r5, [sp, #24]
   10a62:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10a64:	f7ef fbd6 	bl	214 <__aeabi_uldivmod>
   10a68:	4610      	mov	r0, r2
   10a6a:	4619      	mov	r1, r3
   10a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a70:	2300      	movs	r3, #0
   10a72:	f7ef fbcf 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a76:	e88d 0220 	stmia.w	sp, {r5, r9}
   10a7a:	9002      	str	r0, [sp, #8]
   10a7c:	4653      	mov	r3, sl
   10a7e:	2206      	movs	r2, #6
   10a80:	2103      	movs	r1, #3
   10a82:	4628      	mov	r0, r5
   10a84:	f7f6 ff7a 	bl	797c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10a88:	2802      	cmp	r0, #2
   10a8a:	d023      	beq.n	10ad4 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10a8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10a8e:	2d00      	cmp	r5, #0
   10a90:	f47f af65 	bne.w	1095e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10a94:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10a98:	f043 0301 	orr.w	r3, r3, #1
   10a9c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10aa0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10aa4:	2b00      	cmp	r3, #0
   10aa6:	db02      	blt.n	10aae <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10aa8:	2002      	movs	r0, #2
   10aaa:	f000 fea3 	bl	117f4 <ll_adv_scan_state_cb>
	return 0;
   10aae:	4628      	mov	r0, r5
   10ab0:	e756      	b.n	10960 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10ab2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10ab6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10ab8:	aa0d      	add	r2, sp, #52	; 0x34
   10aba:	ab0c      	add	r3, sp, #48	; 0x30
   10abc:	4441      	add	r1, r8
   10abe:	2003      	movs	r0, #3
   10ac0:	f7f9 fc86 	bl	a3d0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ac6:	2b00      	cmp	r3, #0
   10ac8:	d0ae      	beq.n	10a28 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10aca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10ace:	e7ab      	b.n	10a28 <radio_scan_enable+0xe8>
			cpu_sleep();
   10ad0:	f7f8 fe7e 	bl	97d0 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ad6:	2b02      	cmp	r3, #2
   10ad8:	d0fa      	beq.n	10ad0 <radio_scan_enable+0x190>
   10ada:	e7d7      	b.n	10a8c <radio_scan_enable+0x14c>
   10adc:	f3af 8000 	nop.w
   10ae0:	1afd498d 	.word	0x1afd498d
   10ae4:	00000007 	.word	0x00000007
   10ae8:	200008c8 	.word	0x200008c8
   10aec:	84e72a00 	.word	0x84e72a00
   10af0:	3b9aca00 	.word	0x3b9aca00
   10af4:	00009815 	.word	0x00009815
   10af8:	0000b73d 	.word	0x0000b73d

00010afc <radio_scan_disable>:
{
   10afc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10afe:	2104      	movs	r1, #4
   10b00:	2006      	movs	r0, #6
   10b02:	f7f9 f875 	bl	9bf0 <role_disable>
	if (!status) {
   10b06:	4605      	mov	r5, r0
   10b08:	b9e8      	cbnz	r0, 10b46 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10b0a:	4c10      	ldr	r4, [pc, #64]	; (10b4c <radio_scan_disable+0x50>)
   10b0c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10b10:	f360 0200 	bfi	r2, r0, #0, #1
   10b14:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10b18:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10b1c:	2a00      	cmp	r2, #0
   10b1e:	db01      	blt.n	10b24 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10b20:	f000 fe68 	bl	117f4 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10b24:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10b28:	b15e      	cbz	r6, 10b42 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10b2a:	2300      	movs	r3, #0
   10b2c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10b30:	4907      	ldr	r1, [pc, #28]	; (10b50 <radio_scan_disable+0x54>)
   10b32:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10b36:	f7f6 f8b2 	bl	6c9e <mem_release>
			mem_release(conn, &_radio.conn_free);
   10b3a:	4906      	ldr	r1, [pc, #24]	; (10b54 <radio_scan_disable+0x58>)
   10b3c:	4630      	mov	r0, r6
   10b3e:	f7f6 f8ae 	bl	6c9e <mem_release>
}
   10b42:	4628      	mov	r0, r5
   10b44:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10b46:	250c      	movs	r5, #12
   10b48:	e7fb      	b.n	10b42 <radio_scan_disable+0x46>
   10b4a:	bf00      	nop
   10b4c:	200008c8 	.word	0x200008c8
   10b50:	20000a10 	.word	0x20000a10
   10b54:	200009d4 	.word	0x200009d4

00010b58 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10b58:	4b03      	ldr	r3, [pc, #12]	; (10b68 <ll_connect_disable+0x10>)
   10b5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10b5e:	b10b      	cbz	r3, 10b64 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10b60:	f7ff bfcc 	b.w	10afc <radio_scan_disable>
}
   10b64:	200c      	movs	r0, #12
   10b66:	4770      	bx	lr
   10b68:	200008c8 	.word	0x200008c8

00010b6c <ll_rx_dequeue>:
{
   10b6c:	b530      	push	{r4, r5, lr}
   10b6e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b70:	4d47      	ldr	r5, [pc, #284]	; (10c90 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10b72:	aa04      	add	r2, sp, #16
   10b74:	2300      	movs	r3, #0
   10b76:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b7a:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10b7e:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10b82:	f7f6 f8db 	bl	6d3c <memq_dequeue>
   10b86:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10b88:	b970      	cbnz	r0, 10ba8 <ll_rx_dequeue+0x3c>
   10b8a:	4b42      	ldr	r3, [pc, #264]	; (10c94 <ll_rx_dequeue+0x128>)
   10b8c:	9301      	str	r3, [sp, #4]
   10b8e:	9300      	str	r3, [sp, #0]
   10b90:	4a41      	ldr	r2, [pc, #260]	; (10c98 <ll_rx_dequeue+0x12c>)
   10b92:	4b42      	ldr	r3, [pc, #264]	; (10c9c <ll_rx_dequeue+0x130>)
   10b94:	4942      	ldr	r1, [pc, #264]	; (10ca0 <ll_rx_dequeue+0x134>)
   10b96:	4843      	ldr	r0, [pc, #268]	; (10ca4 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10b98:	f7f0 f9f8 	bl	f8c <printk>
   10b9c:	4040      	eors	r0, r0
   10b9e:	f380 8811 	msr	BASEPRI, r0
   10ba2:	f04f 0004 	mov.w	r0, #4
   10ba6:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10ba8:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10bac:	f7f6 f877 	bl	6c9e <mem_release>
	switch (node_rx->hdr.type) {
   10bb0:	9a03      	ldr	r2, [sp, #12]
   10bb2:	7911      	ldrb	r1, [r2, #4]
   10bb4:	290c      	cmp	r1, #12
   10bb6:	d807      	bhi.n	10bc8 <ll_rx_dequeue+0x5c>
   10bb8:	2301      	movs	r3, #1
   10bba:	408b      	lsls	r3, r1
   10bbc:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10bc0:	4203      	tst	r3, r0
   10bc2:	d109      	bne.n	10bd8 <ll_rx_dequeue+0x6c>
   10bc4:	0618      	lsls	r0, r3, #24
   10bc6:	d419      	bmi.n	10bfc <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   10bc8:	4b32      	ldr	r3, [pc, #200]	; (10c94 <ll_rx_dequeue+0x128>)
   10bca:	9301      	str	r3, [sp, #4]
   10bcc:	9300      	str	r3, [sp, #0]
   10bce:	4a32      	ldr	r2, [pc, #200]	; (10c98 <ll_rx_dequeue+0x12c>)
   10bd0:	4b32      	ldr	r3, [pc, #200]	; (10c9c <ll_rx_dequeue+0x130>)
   10bd2:	4933      	ldr	r1, [pc, #204]	; (10ca0 <ll_rx_dequeue+0x134>)
   10bd4:	4834      	ldr	r0, [pc, #208]	; (10ca8 <ll_rx_dequeue+0x13c>)
   10bd6:	e7df      	b.n	10b98 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   10bd8:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10bdc:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10be0:	3801      	subs	r0, #1
   10be2:	4283      	cmp	r3, r0
   10be4:	db07      	blt.n	10bf6 <ll_rx_dequeue+0x8a>
   10be6:	4b2b      	ldr	r3, [pc, #172]	; (10c94 <ll_rx_dequeue+0x128>)
   10be8:	9301      	str	r3, [sp, #4]
   10bea:	9300      	str	r3, [sp, #0]
   10bec:	4a2a      	ldr	r2, [pc, #168]	; (10c98 <ll_rx_dequeue+0x12c>)
   10bee:	4b2b      	ldr	r3, [pc, #172]	; (10c9c <ll_rx_dequeue+0x130>)
   10bf0:	492b      	ldr	r1, [pc, #172]	; (10ca0 <ll_rx_dequeue+0x134>)
   10bf2:	482e      	ldr	r0, [pc, #184]	; (10cac <ll_rx_dequeue+0x140>)
   10bf4:	e7d0      	b.n	10b98 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   10bf6:	3301      	adds	r3, #1
   10bf8:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10bfc:	2906      	cmp	r1, #6
   10bfe:	d136      	bne.n	10c6e <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10c00:	7ad3      	ldrb	r3, [r2, #11]
   10c02:	2b3c      	cmp	r3, #60	; 0x3c
   10c04:	d00d      	beq.n	10c22 <ll_rx_dequeue+0xb6>
   10c06:	7b12      	ldrb	r2, [r2, #12]
   10c08:	b9e2      	cbnz	r2, 10c44 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   10c0a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10c0e:	07d9      	lsls	r1, r3, #31
   10c10:	d42f      	bmi.n	10c72 <ll_rx_dequeue+0x106>
   10c12:	4b20      	ldr	r3, [pc, #128]	; (10c94 <ll_rx_dequeue+0x128>)
   10c14:	9301      	str	r3, [sp, #4]
   10c16:	9300      	str	r3, [sp, #0]
   10c18:	4a1f      	ldr	r2, [pc, #124]	; (10c98 <ll_rx_dequeue+0x12c>)
   10c1a:	4b20      	ldr	r3, [pc, #128]	; (10c9c <ll_rx_dequeue+0x130>)
   10c1c:	4920      	ldr	r1, [pc, #128]	; (10ca0 <ll_rx_dequeue+0x134>)
   10c1e:	4824      	ldr	r0, [pc, #144]	; (10cb0 <ll_rx_dequeue+0x144>)
   10c20:	e7ba      	b.n	10b98 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   10c22:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10c24:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   10c28:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   10c2c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10c30:	2b00      	cmp	r3, #0
   10c32:	db09      	blt.n	10c48 <ll_rx_dequeue+0xdc>
   10c34:	4b17      	ldr	r3, [pc, #92]	; (10c94 <ll_rx_dequeue+0x128>)
   10c36:	9301      	str	r3, [sp, #4]
   10c38:	9300      	str	r3, [sp, #0]
   10c3a:	4a17      	ldr	r2, [pc, #92]	; (10c98 <ll_rx_dequeue+0x12c>)
   10c3c:	4b17      	ldr	r3, [pc, #92]	; (10c9c <ll_rx_dequeue+0x130>)
   10c3e:	4918      	ldr	r1, [pc, #96]	; (10ca0 <ll_rx_dequeue+0x134>)
   10c40:	481c      	ldr	r0, [pc, #112]	; (10cb4 <ll_rx_dequeue+0x148>)
   10c42:	e7a9      	b.n	10b98 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   10c44:	2500      	movs	r5, #0
   10c46:	e7f1      	b.n	10c2c <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   10c48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10c4c:	f36f 13c7 	bfc	r3, #7, #1
   10c50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10c54:	b995      	cbnz	r5, 10c7c <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10c56:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   10c5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10c5e:	f000 0001 	and.w	r0, r0, #1
   10c62:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10c64:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10c68:	d101      	bne.n	10c6e <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   10c6a:	f000 fdc3 	bl	117f4 <ll_adv_scan_state_cb>
}
   10c6e:	b005      	add	sp, #20
   10c70:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   10c72:	f362 0300 	bfi	r3, r2, #0, #1
   10c76:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   10c7a:	e7ec      	b.n	10c56 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   10c7c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10c80:	490d      	ldr	r1, [pc, #52]	; (10cb8 <ll_rx_dequeue+0x14c>)
   10c82:	f7f6 f80c 	bl	6c9e <mem_release>
			mem_release(conn, &_radio.conn_free);
   10c86:	490d      	ldr	r1, [pc, #52]	; (10cbc <ll_rx_dequeue+0x150>)
   10c88:	4628      	mov	r0, r5
   10c8a:	f7f6 f808 	bl	6c9e <mem_release>
   10c8e:	e7e2      	b.n	10c56 <ll_rx_dequeue+0xea>
   10c90:	200008c8 	.word	0x200008c8
   10c94:	00014645 	.word	0x00014645
   10c98:	00015394 	.word	0x00015394
   10c9c:	000168c5 	.word	0x000168c5
   10ca0:	000153e3 	.word	0x000153e3
   10ca4:	00016913 	.word	0x00016913
   10ca8:	00015333 	.word	0x00015333
   10cac:	000169be 	.word	0x000169be
   10cb0:	00016eac 	.word	0x00016eac
   10cb4:	00016e6e 	.word	0x00016e6e
   10cb8:	20000a10 	.word	0x20000a10
   10cbc:	200009d4 	.word	0x200009d4

00010cc0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10cc0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10cc2:	4c0b      	ldr	r4, [pc, #44]	; (10cf0 <rtc0_nrf5_isr+0x30>)
   10cc4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10cc8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10ccc:	b122      	cbz	r2, 10cd8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10cce:	2000      	movs	r0, #0
   10cd0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10cd4:	f7f6 fe40 	bl	7958 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10cd8:	b12d      	cbz	r5, 10ce6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10cda:	2300      	movs	r3, #0
   10cdc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10ce0:	2001      	movs	r0, #1
   10ce2:	f7f6 fe39 	bl	7958 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10ce6:	2000      	movs	r0, #0
}
   10ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   10cec:	f7f6 b8d6 	b.w	6e9c <mayfly_run>
   10cf0:	4000b000 	.word	0x4000b000

00010cf4 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10cf4:	2001      	movs	r0, #1
   10cf6:	f7f6 b8d1 	b.w	6e9c <mayfly_run>

00010cfa <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10cfa:	4668      	mov	r0, sp
   10cfc:	f020 0107 	bic.w	r1, r0, #7
   10d00:	468d      	mov	sp, r1
   10d02:	b501      	push	{r0, lr}
	isr_radio();
   10d04:	f001 f8b8 	bl	11e78 <isr_radio>
	ISR_DIRECT_PM();
   10d08:	f7f0 fdf2 	bl	18f0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10d0c:	f7f0 fbdc 	bl	14c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10d10:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10d14:	4685      	mov	sp, r0
   10d16:	4770      	bx	lr

00010d18 <radio_active_callback>:
{
   10d18:	4770      	bx	lr
	...

00010d1c <radio_event_callback>:
	k_sem_give(sem_recv);
   10d1c:	4b01      	ldr	r3, [pc, #4]	; (10d24 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10d1e:	6818      	ldr	r0, [r3, #0]
   10d20:	f002 bed9 	b.w	13ad6 <_impl_k_sem_give>
   10d24:	200011f8 	.word	0x200011f8

00010d28 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   10d28:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   10d2a:	4b41      	ldr	r3, [pc, #260]	; (10e30 <ll_init+0x108>)
{
   10d2c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   10d2e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10d30:	4840      	ldr	r0, [pc, #256]	; (10e34 <ll_init+0x10c>)
   10d32:	f002 f9e9 	bl	13108 <device_get_binding>
	if (!clk_k32) {
   10d36:	b918      	cbnz	r0, 10d40 <ll_init+0x18>
		return -ENODEV;
   10d38:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   10d3c:	b006      	add	sp, #24
   10d3e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   10d40:	6843      	ldr	r3, [r0, #4]
   10d42:	2101      	movs	r1, #1
   10d44:	681b      	ldr	r3, [r3, #0]
   10d46:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   10d48:	483b      	ldr	r0, [pc, #236]	; (10e38 <ll_init+0x110>)
   10d4a:	f002 f9dd 	bl	13108 <device_get_binding>
	if (!entropy) {
   10d4e:	4604      	mov	r4, r0
   10d50:	2800      	cmp	r0, #0
   10d52:	d0f1      	beq.n	10d38 <ll_init+0x10>
	cntr_init();
   10d54:	f000 ff74 	bl	11c40 <cntr_init>
	mayfly_init();
   10d58:	f7f6 f800 	bl	6d5c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d5c:	4b37      	ldr	r3, [pc, #220]	; (10e3c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10d5e:	2203      	movs	r2, #3
   10d60:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d62:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d64:	4a36      	ldr	r2, [pc, #216]	; (10e40 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10d66:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10d68:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10d6a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10d6c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10d6e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10d70:	9205      	str	r2, [sp, #20]
   10d72:	4a34      	ldr	r2, [pc, #208]	; (10e44 <ll_init+0x11c>)
   10d74:	9204      	str	r2, [sp, #16]
   10d76:	4a34      	ldr	r2, [pc, #208]	; (10e48 <ll_init+0x120>)
   10d78:	9203      	str	r2, [sp, #12]
   10d7a:	4a34      	ldr	r2, [pc, #208]	; (10e4c <ll_init+0x124>)
   10d7c:	9202      	str	r2, [sp, #8]
   10d7e:	220d      	movs	r2, #13
   10d80:	9201      	str	r2, [sp, #4]
   10d82:	9300      	str	r3, [sp, #0]
   10d84:	4a32      	ldr	r2, [pc, #200]	; (10e50 <ll_init+0x128>)
   10d86:	2304      	movs	r3, #4
   10d88:	f7f6 fdae 	bl	78e8 <ticker_init>
	LL_ASSERT(!err);
   10d8c:	b170      	cbz	r0, 10dac <ll_init+0x84>
   10d8e:	4b31      	ldr	r3, [pc, #196]	; (10e54 <ll_init+0x12c>)
   10d90:	9301      	str	r3, [sp, #4]
   10d92:	9300      	str	r3, [sp, #0]
   10d94:	4a30      	ldr	r2, [pc, #192]	; (10e58 <ll_init+0x130>)
   10d96:	4b31      	ldr	r3, [pc, #196]	; (10e5c <ll_init+0x134>)
   10d98:	4931      	ldr	r1, [pc, #196]	; (10e60 <ll_init+0x138>)
   10d9a:	4832      	ldr	r0, [pc, #200]	; (10e64 <ll_init+0x13c>)
   10d9c:	f7f0 f8f6 	bl	f8c <printk>
   10da0:	4040      	eors	r0, r0
   10da2:	f380 8811 	msr	BASEPRI, r0
   10da6:	f04f 0004 	mov.w	r0, #4
   10daa:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10dac:	482e      	ldr	r0, [pc, #184]	; (10e68 <ll_init+0x140>)
   10dae:	f002 f9ab 	bl	13108 <device_get_binding>
	if (!clk_m16) {
   10db2:	2800      	cmp	r0, #0
   10db4:	d0c0      	beq.n	10d38 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10db6:	4b2d      	ldr	r3, [pc, #180]	; (10e6c <ll_init+0x144>)
   10db8:	9304      	str	r3, [sp, #16]
   10dba:	9501      	str	r5, [sp, #4]
   10dbc:	231b      	movs	r3, #27
   10dbe:	2501      	movs	r5, #1
   10dc0:	f44f 7657 	mov.w	r6, #860	; 0x35c
   10dc4:	9303      	str	r3, [sp, #12]
   10dc6:	9302      	str	r3, [sp, #8]
   10dc8:	4622      	mov	r2, r4
   10dca:	9605      	str	r6, [sp, #20]
   10dcc:	9500      	str	r5, [sp, #0]
   10dce:	462b      	mov	r3, r5
   10dd0:	2107      	movs	r1, #7
   10dd2:	f7fe ff49 	bl	fc68 <radio_init>
	if (err) {
   10dd6:	4604      	mov	r4, r0
   10dd8:	b160      	cbz	r0, 10df4 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   10dda:	4b1e      	ldr	r3, [pc, #120]	; (10e54 <ll_init+0x12c>)
   10ddc:	9303      	str	r3, [sp, #12]
   10dde:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   10de2:	4a1d      	ldr	r2, [pc, #116]	; (10e58 <ll_init+0x130>)
   10de4:	4b1d      	ldr	r3, [pc, #116]	; (10e5c <ll_init+0x134>)
   10de6:	491e      	ldr	r1, [pc, #120]	; (10e60 <ll_init+0x138>)
   10de8:	4821      	ldr	r0, [pc, #132]	; (10e70 <ll_init+0x148>)
   10dea:	f7f0 f8cf 	bl	f8c <printk>
		return -ENOMEM;
   10dee:	f06f 000b 	mvn.w	r0, #11
   10df2:	e7a3      	b.n	10d3c <ll_init+0x14>
	ll_filter_reset(true);
   10df4:	4628      	mov	r0, r5
   10df6:	f000 fedb 	bl	11bb0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10dfa:	4622      	mov	r2, r4
   10dfc:	4621      	mov	r1, r4
   10dfe:	4628      	mov	r0, r5
   10e00:	f7f0 fd5c 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10e04:	4622      	mov	r2, r4
   10e06:	4621      	mov	r1, r4
   10e08:	200b      	movs	r0, #11
   10e0a:	f7f0 fd57 	bl	18bc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10e0e:	4622      	mov	r2, r4
   10e10:	4621      	mov	r1, r4
   10e12:	2018      	movs	r0, #24
   10e14:	f7f0 fd52 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10e18:	4628      	mov	r0, r5
   10e1a:	f7f0 fd1d 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10e1e:	200b      	movs	r0, #11
   10e20:	f7f0 fd1a 	bl	1858 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10e24:	2018      	movs	r0, #24
   10e26:	f7f0 fd17 	bl	1858 <_arch_irq_enable>
	return 0;
   10e2a:	4620      	mov	r0, r4
   10e2c:	e786      	b.n	10d3c <ll_init+0x14>
   10e2e:	bf00      	nop
   10e30:	200011f8 	.word	0x200011f8
   10e34:	00014718 	.word	0x00014718
   10e38:	000146ec 	.word	0x000146ec
   10e3c:	200011d8 	.word	0x200011d8
   10e40:	00012815 	.word	0x00012815
   10e44:	00012771 	.word	0x00012771
   10e48:	00012715 	.word	0x00012715
   10e4c:	20000f68 	.word	0x20000f68
   10e50:	20000e28 	.word	0x20000e28
   10e54:	00014645 	.word	0x00014645
   10e58:	00015394 	.word	0x00015394
   10e5c:	000175e3 	.word	0x000175e3
   10e60:	000153e3 	.word	0x000153e3
   10e64:	000175eb 	.word	0x000175eb
   10e68:	00014723 	.word	0x00014723
   10e6c:	20000acc 	.word	0x20000acc
   10e70:	00017611 	.word	0x00017611

00010e74 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   10e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10e78:	4681      	mov	r9, r0
   10e7a:	4688      	mov	r8, r1
   10e7c:	4617      	mov	r7, r2
   10e7e:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   10e80:	f7fe ffd6 	bl	fe30 <ll_scan_is_enabled>
   10e84:	b988      	cbnz	r0, 10eaa <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   10e86:	4d0a      	ldr	r5, [pc, #40]	; (10eb0 <ll_scan_params_set+0x3c>)
   10e88:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   10e8a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   10e8e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   10e92:	4622      	mov	r2, r4
   10e94:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   10e98:	4613      	mov	r3, r2
   10e9a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   10e9e:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   10ea0:	f362 1387 	bfi	r3, r2, #6, #2
   10ea4:	712b      	strb	r3, [r5, #4]

	return 0;
   10ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10eaa:	200c      	movs	r0, #12
}
   10eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10eb0:	200011fc 	.word	0x200011fc

00010eb4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   10eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eb6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   10eb8:	b920      	cbnz	r0, 10ec4 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   10eba:	b005      	add	sp, #20
   10ebc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   10ec0:	f7ff be1c 	b.w	10afc <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   10ec4:	f7fe ffb4 	bl	fe30 <ll_scan_is_enabled>
   10ec8:	4606      	mov	r6, r0
   10eca:	bb40      	cbnz	r0, 10f1e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   10ecc:	4c15      	ldr	r4, [pc, #84]	; (10f24 <ll_scan_enable+0x70>)
   10ece:	7920      	ldrb	r0, [r4, #4]
   10ed0:	0980      	lsrs	r0, r0, #6
   10ed2:	f000 fa63 	bl	1139c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   10ed6:	7923      	ldrb	r3, [r4, #4]
   10ed8:	f013 0501 	ands.w	r5, r3, #1
   10edc:	d006      	beq.n	10eec <ll_scan_enable+0x38>
   10ede:	f013 0520 	ands.w	r5, r3, #32
   10ee2:	d003      	beq.n	10eec <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   10ee4:	4630      	mov	r0, r6
   10ee6:	f000 fbdd 	bl	116a4 <ll_rl_rpa_update>
		rpa_gen = 1;
   10eea:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10eec:	7926      	ldrb	r6, [r4, #4]
   10eee:	f006 070f 	and.w	r7, r6, #15
   10ef2:	f3c6 1600 	ubfx	r6, r6, #4, #1
   10ef6:	2100      	movs	r1, #0
   10ef8:	4630      	mov	r0, r6
   10efa:	f7f6 feb3 	bl	7c64 <ll_addr_get>
   10efe:	22ff      	movs	r2, #255	; 0xff
   10f00:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   10f02:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   10f04:	8823      	ldrh	r3, [r4, #0]
   10f06:	9502      	str	r5, [sp, #8]
   10f08:	0992      	lsrs	r2, r2, #6
   10f0a:	9201      	str	r2, [sp, #4]
   10f0c:	8862      	ldrh	r2, [r4, #2]
   10f0e:	9200      	str	r2, [sp, #0]
   10f10:	4631      	mov	r1, r6
   10f12:	4602      	mov	r2, r0
   10f14:	4638      	mov	r0, r7
   10f16:	f7ff fd13 	bl	10940 <radio_scan_enable>
}
   10f1a:	b005      	add	sp, #20
   10f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   10f1e:	2000      	movs	r0, #0
   10f20:	e7fb      	b.n	10f1a <ll_scan_enable+0x66>
   10f22:	bf00      	nop
   10f24:	200011fc 	.word	0x200011fc

00010f28 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   10f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f2c:	b085      	sub	sp, #20
   10f2e:	461e      	mov	r6, r3
   10f30:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   10f34:	9303      	str	r3, [sp, #12]
   10f36:	4680      	mov	r8, r0
   10f38:	4689      	mov	r9, r1
   10f3a:	4615      	mov	r5, r2
   10f3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10f3e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   10f42:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   10f46:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   10f4a:	f7fe ff71 	bl	fe30 <ll_scan_is_enabled>
   10f4e:	9b03      	ldr	r3, [sp, #12]
   10f50:	bba0      	cbnz	r0, 10fbc <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   10f52:	9300      	str	r3, [sp, #0]
   10f54:	4652      	mov	r2, sl
   10f56:	465b      	mov	r3, fp
   10f58:	4639      	mov	r1, r7
   10f5a:	4630      	mov	r0, r6
   10f5c:	f7fe ff8c 	bl	fe78 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   10f60:	bb68      	cbnz	r0, 10fbe <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   10f62:	4628      	mov	r0, r5
   10f64:	f000 fa1a 	bl	1139c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   10f68:	b1dd      	cbz	r5, 10fa2 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   10f6a:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10f6c:	1ea3      	subs	r3, r4, #2
   10f6e:	2b01      	cmp	r3, #1
   10f70:	d822      	bhi.n	10fb8 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   10f72:	2000      	movs	r0, #0
   10f74:	f000 fb96 	bl	116a4 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   10f78:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   10f7c:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   10f7e:	2100      	movs	r1, #0
   10f80:	4620      	mov	r0, r4
   10f82:	f7f6 fe6f 	bl	7c64 <ll_addr_get>
   10f86:	4643      	mov	r3, r8
   10f88:	4602      	mov	r2, r0
   10f8a:	4621      	mov	r1, r4
   10f8c:	2000      	movs	r0, #0
   10f8e:	9711      	str	r7, [sp, #68]	; 0x44
   10f90:	9610      	str	r6, [sp, #64]	; 0x40
   10f92:	950f      	str	r5, [sp, #60]	; 0x3c
   10f94:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   10f98:	b005      	add	sp, #20
   10f9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   10f9e:	f7ff bccf 	b.w	10940 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   10fa2:	f000 fb77 	bl	11694 <ctrl_rl_enabled>
   10fa6:	2800      	cmp	r0, #0
   10fa8:	d0df      	beq.n	10f6a <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   10faa:	4639      	mov	r1, r7
   10fac:	462a      	mov	r2, r5
   10fae:	4630      	mov	r0, r6
   10fb0:	f000 fa16 	bl	113e0 <ll_rl_find>
   10fb4:	4607      	mov	r7, r0
   10fb6:	e7d9      	b.n	10f6c <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   10fb8:	2600      	movs	r6, #0
   10fba:	e7e0      	b.n	10f7e <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10fbc:	200c      	movs	r0, #12
}
   10fbe:	b005      	add	sp, #20
   10fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010fc4 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   10fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc8:	4688      	mov	r8, r1
	int i;

	if (free) {
   10fca:	4615      	mov	r5, r2
   10fcc:	b10a      	cbz	r2, 10fd2 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   10fce:	23ff      	movs	r3, #255	; 0xff
   10fd0:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10fd2:	4e14      	ldr	r6, [pc, #80]	; (11024 <wl_find+0x60>)
{
   10fd4:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   10fd6:	f000 0701 	and.w	r7, r0, #1
   10fda:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   10fde:	07da      	lsls	r2, r3, #31
   10fe0:	d51d      	bpl.n	1101e <wl_find+0x5a>
   10fe2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10fe6:	42bb      	cmp	r3, r7
   10fe8:	d113      	bne.n	11012 <wl_find+0x4e>
   10fea:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   10fee:	2206      	movs	r2, #6
   10ff0:	4641      	mov	r1, r8
   10ff2:	3002      	adds	r0, #2
   10ff4:	f7f0 fded 	bl	1bd2 <memcmp>
   10ff8:	b910      	cbnz	r0, 11000 <wl_find+0x3c>
			return i;
   10ffa:	b2e0      	uxtb	r0, r4
   10ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11000:	b13d      	cbz	r5, 11012 <wl_find+0x4e>
   11002:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11006:	07db      	lsls	r3, r3, #31
   11008:	d403      	bmi.n	11012 <wl_find+0x4e>
   1100a:	782b      	ldrb	r3, [r5, #0]
   1100c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1100e:	bf08      	it	eq
   11010:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11012:	3401      	adds	r4, #1
   11014:	2c08      	cmp	r4, #8
   11016:	d1e0      	bne.n	10fda <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11018:	20ff      	movs	r0, #255	; 0xff
   1101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1101e:	2d00      	cmp	r5, #0
   11020:	d1f3      	bne.n	1100a <wl_find+0x46>
   11022:	e7f6      	b.n	11012 <wl_find+0x4e>
   11024:	2000142f 	.word	0x2000142f

00011028 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1102c:	4d1a      	ldr	r5, [pc, #104]	; (11098 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1102e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 110a4 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   11032:	1eae      	subs	r6, r5, #2
{
   11034:	2400      	movs	r4, #0
   11036:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11038:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1103c:	07d9      	lsls	r1, r3, #31
   1103e:	d524      	bpl.n	1108a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11040:	f898 3000 	ldrb.w	r3, [r8]
   11044:	b15b      	cbz	r3, 1105e <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   11046:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1104a:	2a07      	cmp	r2, #7
   1104c:	d807      	bhi.n	1105e <filter_wl_update+0x36>
   1104e:	2328      	movs	r3, #40	; 0x28
   11050:	4353      	muls	r3, r2
   11052:	4a12      	ldr	r2, [pc, #72]	; (1109c <filter_wl_update+0x74>)
   11054:	5cd3      	ldrb	r3, [r2, r3]
   11056:	075a      	lsls	r2, r3, #29
   11058:	d501      	bpl.n	1105e <filter_wl_update+0x36>
   1105a:	06db      	lsls	r3, r3, #27
   1105c:	d515      	bpl.n	1108a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   1105e:	4810      	ldr	r0, [pc, #64]	; (110a0 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11060:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11064:	2201      	movs	r2, #1
   11066:	fa02 f104 	lsl.w	r1, r2, r4
   1106a:	7802      	ldrb	r2, [r0, #0]
   1106c:	430a      	orrs	r2, r1
   1106e:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11070:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11074:	7842      	ldrb	r2, [r0, #1]
   11076:	40a3      	lsls	r3, r4
   11078:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1107a:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1107c:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1107e:	fb02 0004 	mla	r0, r2, r4, r0
   11082:	4629      	mov	r1, r5
   11084:	3002      	adds	r0, #2
   11086:	f7f0 fdb9 	bl	1bfc <memcpy>
   1108a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1108c:	2c08      	cmp	r4, #8
   1108e:	f105 0508 	add.w	r5, r5, #8
   11092:	d1d1      	bne.n	11038 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   11094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11098:	20001431 	.word	0x20001431
   1109c:	200012bc 	.word	0x200012bc
   110a0:	2000146f 	.word	0x2000146f
   110a4:	200013fc 	.word	0x200013fc

000110a8 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   110a8:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   110aa:	f7fe fead 	bl	fe08 <ll_adv_is_enabled>
   110ae:	b928      	cbnz	r0, 110bc <rl_access_check.constprop.1+0x14>
   110b0:	f7fe febe 	bl	fe30 <ll_scan_is_enabled>
   110b4:	fab0 f080 	clz	r0, r0
   110b8:	0940      	lsrs	r0, r0, #5
   110ba:	bd08      	pop	{r3, pc}
   110bc:	2000      	movs	r0, #0
}
   110be:	bd08      	pop	{r3, pc}

000110c0 <filter_rl_update>:
{
   110c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   110c2:	4e10      	ldr	r6, [pc, #64]	; (11104 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   110c4:	4d10      	ldr	r5, [pc, #64]	; (11108 <filter_rl_update+0x48>)
{
   110c6:	2400      	movs	r4, #0
		if (rl[i].taken) {
   110c8:	2728      	movs	r7, #40	; 0x28
   110ca:	fb07 f104 	mul.w	r1, r7, r4
   110ce:	5c73      	ldrb	r3, [r6, r1]
   110d0:	07da      	lsls	r2, r3, #31
   110d2:	d513      	bpl.n	110fc <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   110d4:	2201      	movs	r2, #1
   110d6:	fa02 f004 	lsl.w	r0, r2, r4
   110da:	782a      	ldrb	r2, [r5, #0]
   110dc:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   110de:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   110e2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   110e4:	786a      	ldrb	r2, [r5, #1]
   110e6:	40a3      	lsls	r3, r4
   110e8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   110ea:	2206      	movs	r2, #6
   110ec:	3101      	adds	r1, #1
   110ee:	fb02 5004 	mla	r0, r2, r4, r5
   110f2:	4431      	add	r1, r6
   110f4:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   110f6:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   110f8:	f7f0 fd80 	bl	1bfc <memcpy>
   110fc:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   110fe:	2c08      	cmp	r4, #8
   11100:	d1e3      	bne.n	110ca <filter_rl_update+0xa>
}
   11102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11104:	200012bc 	.word	0x200012bc
   11108:	200013fd 	.word	0x200013fd

0001110c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1110c:	2807      	cmp	r0, #7
   1110e:	d80c      	bhi.n	1112a <ctrl_lrpa_get+0x1e>
   11110:	2328      	movs	r3, #40	; 0x28
   11112:	4358      	muls	r0, r3
   11114:	4a06      	ldr	r2, [pc, #24]	; (11130 <ctrl_lrpa_get+0x24>)
   11116:	5c13      	ldrb	r3, [r2, r0]
   11118:	1811      	adds	r1, r2, r0
   1111a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1111e:	b128      	cbz	r0, 1112c <ctrl_lrpa_get+0x20>
   11120:	f3c3 0040 	ubfx	r0, r3, #1, #1
   11124:	b110      	cbz	r0, 1112c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   11126:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11128:	4770      	bx	lr
		return NULL;
   1112a:	2000      	movs	r0, #0
}
   1112c:	4770      	bx	lr
   1112e:	bf00      	nop
   11130:	200012bc 	.word	0x200012bc

00011134 <ctrl_irks_get>:
	*count = peer_irk_count;
   11134:	4b02      	ldr	r3, [pc, #8]	; (11140 <ctrl_irks_get+0xc>)
   11136:	781b      	ldrb	r3, [r3, #0]
   11138:	7003      	strb	r3, [r0, #0]
}
   1113a:	4802      	ldr	r0, [pc, #8]	; (11144 <ctrl_irks_get+0x10>)
   1113c:	4770      	bx	lr
   1113e:	bf00      	nop
   11140:	20001232 	.word	0x20001232
   11144:	2000123b 	.word	0x2000123b

00011148 <ctrl_rl_idx>:
{
   11148:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1114a:	b320      	cbz	r0, 11196 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1114c:	2907      	cmp	r1, #7
   1114e:	d90e      	bls.n	1116e <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11150:	4b1d      	ldr	r3, [pc, #116]	; (111c8 <ctrl_rl_idx+0x80>)
   11152:	9301      	str	r3, [sp, #4]
   11154:	9300      	str	r3, [sp, #0]
   11156:	4a1d      	ldr	r2, [pc, #116]	; (111cc <ctrl_rl_idx+0x84>)
   11158:	4b1d      	ldr	r3, [pc, #116]	; (111d0 <ctrl_rl_idx+0x88>)
   1115a:	491e      	ldr	r1, [pc, #120]	; (111d4 <ctrl_rl_idx+0x8c>)
   1115c:	481e      	ldr	r0, [pc, #120]	; (111d8 <ctrl_rl_idx+0x90>)
   1115e:	f7ef ff15 	bl	f8c <printk>
   11162:	4040      	eors	r0, r0
   11164:	f380 8811 	msr	BASEPRI, r0
   11168:	f04f 0004 	mov.w	r0, #4
   1116c:	df02      	svc	2
   1116e:	4b1b      	ldr	r3, [pc, #108]	; (111dc <ctrl_rl_idx+0x94>)
   11170:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   11174:	07d2      	lsls	r2, r2, #31
   11176:	d407      	bmi.n	11188 <ctrl_rl_idx+0x40>
   11178:	4b13      	ldr	r3, [pc, #76]	; (111c8 <ctrl_rl_idx+0x80>)
   1117a:	9301      	str	r3, [sp, #4]
   1117c:	9300      	str	r3, [sp, #0]
   1117e:	4a13      	ldr	r2, [pc, #76]	; (111cc <ctrl_rl_idx+0x84>)
   11180:	4b13      	ldr	r3, [pc, #76]	; (111d0 <ctrl_rl_idx+0x88>)
   11182:	4914      	ldr	r1, [pc, #80]	; (111d4 <ctrl_rl_idx+0x8c>)
   11184:	4816      	ldr	r0, [pc, #88]	; (111e0 <ctrl_rl_idx+0x98>)
   11186:	e7ea      	b.n	1115e <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   11188:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1118c:	7849      	ldrb	r1, [r1, #1]
}
   1118e:	4608      	mov	r0, r1
   11190:	b003      	add	sp, #12
   11192:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   11196:	2907      	cmp	r1, #7
   11198:	d907      	bls.n	111aa <ctrl_rl_idx+0x62>
   1119a:	4b0b      	ldr	r3, [pc, #44]	; (111c8 <ctrl_rl_idx+0x80>)
   1119c:	9301      	str	r3, [sp, #4]
   1119e:	9300      	str	r3, [sp, #0]
   111a0:	4a0a      	ldr	r2, [pc, #40]	; (111cc <ctrl_rl_idx+0x84>)
   111a2:	4b0b      	ldr	r3, [pc, #44]	; (111d0 <ctrl_rl_idx+0x88>)
   111a4:	490b      	ldr	r1, [pc, #44]	; (111d4 <ctrl_rl_idx+0x8c>)
   111a6:	480f      	ldr	r0, [pc, #60]	; (111e4 <ctrl_rl_idx+0x9c>)
   111a8:	e7d9      	b.n	1115e <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   111aa:	2328      	movs	r3, #40	; 0x28
   111ac:	434b      	muls	r3, r1
   111ae:	4a0e      	ldr	r2, [pc, #56]	; (111e8 <ctrl_rl_idx+0xa0>)
   111b0:	5cd3      	ldrb	r3, [r2, r3]
   111b2:	07db      	lsls	r3, r3, #31
   111b4:	d4eb      	bmi.n	1118e <ctrl_rl_idx+0x46>
   111b6:	4b04      	ldr	r3, [pc, #16]	; (111c8 <ctrl_rl_idx+0x80>)
   111b8:	9301      	str	r3, [sp, #4]
   111ba:	9300      	str	r3, [sp, #0]
   111bc:	4a03      	ldr	r2, [pc, #12]	; (111cc <ctrl_rl_idx+0x84>)
   111be:	4b04      	ldr	r3, [pc, #16]	; (111d0 <ctrl_rl_idx+0x88>)
   111c0:	4904      	ldr	r1, [pc, #16]	; (111d4 <ctrl_rl_idx+0x8c>)
   111c2:	480a      	ldr	r0, [pc, #40]	; (111ec <ctrl_rl_idx+0xa4>)
   111c4:	e7cb      	b.n	1115e <ctrl_rl_idx+0x16>
   111c6:	bf00      	nop
   111c8:	00014645 	.word	0x00014645
   111cc:	00015394 	.word	0x00015394
   111d0:	00017646 	.word	0x00017646
   111d4:	000153e3 	.word	0x000153e3
   111d8:	000176e0 	.word	0x000176e0
   111dc:	2000142f 	.word	0x2000142f
   111e0:	000177ad 	.word	0x000177ad
   111e4:	000177e4 	.word	0x000177e4
   111e8:	200012bc 	.word	0x200012bc
   111ec:	000178b1 	.word	0x000178b1

000111f0 <ctrl_rl_irk_idx>:
{
   111f0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   111f2:	4b18      	ldr	r3, [pc, #96]	; (11254 <ctrl_rl_irk_idx+0x64>)
   111f4:	781b      	ldrb	r3, [r3, #0]
   111f6:	4283      	cmp	r3, r0
   111f8:	d80e      	bhi.n	11218 <ctrl_rl_irk_idx+0x28>
   111fa:	4b17      	ldr	r3, [pc, #92]	; (11258 <ctrl_rl_irk_idx+0x68>)
   111fc:	9301      	str	r3, [sp, #4]
   111fe:	9300      	str	r3, [sp, #0]
   11200:	4a16      	ldr	r2, [pc, #88]	; (1125c <ctrl_rl_irk_idx+0x6c>)
   11202:	4b17      	ldr	r3, [pc, #92]	; (11260 <ctrl_rl_irk_idx+0x70>)
   11204:	4917      	ldr	r1, [pc, #92]	; (11264 <ctrl_rl_irk_idx+0x74>)
   11206:	4818      	ldr	r0, [pc, #96]	; (11268 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11208:	f7ef fec0 	bl	f8c <printk>
   1120c:	4040      	eors	r0, r0
   1120e:	f380 8811 	msr	BASEPRI, r0
   11212:	f04f 0004 	mov.w	r0, #4
   11216:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11218:	4b14      	ldr	r3, [pc, #80]	; (1126c <ctrl_rl_irk_idx+0x7c>)
   1121a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1121c:	2807      	cmp	r0, #7
   1121e:	d907      	bls.n	11230 <ctrl_rl_irk_idx+0x40>
   11220:	4b0d      	ldr	r3, [pc, #52]	; (11258 <ctrl_rl_irk_idx+0x68>)
   11222:	9301      	str	r3, [sp, #4]
   11224:	9300      	str	r3, [sp, #0]
   11226:	4a0d      	ldr	r2, [pc, #52]	; (1125c <ctrl_rl_irk_idx+0x6c>)
   11228:	4b0d      	ldr	r3, [pc, #52]	; (11260 <ctrl_rl_irk_idx+0x70>)
   1122a:	490e      	ldr	r1, [pc, #56]	; (11264 <ctrl_rl_irk_idx+0x74>)
   1122c:	4810      	ldr	r0, [pc, #64]	; (11270 <ctrl_rl_irk_idx+0x80>)
   1122e:	e7eb      	b.n	11208 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   11230:	2328      	movs	r3, #40	; 0x28
   11232:	4343      	muls	r3, r0
   11234:	4a0f      	ldr	r2, [pc, #60]	; (11274 <ctrl_rl_irk_idx+0x84>)
   11236:	5cd3      	ldrb	r3, [r2, r3]
   11238:	07db      	lsls	r3, r3, #31
   1123a:	d407      	bmi.n	1124c <ctrl_rl_irk_idx+0x5c>
   1123c:	4b06      	ldr	r3, [pc, #24]	; (11258 <ctrl_rl_irk_idx+0x68>)
   1123e:	9301      	str	r3, [sp, #4]
   11240:	9300      	str	r3, [sp, #0]
   11242:	4a06      	ldr	r2, [pc, #24]	; (1125c <ctrl_rl_irk_idx+0x6c>)
   11244:	4b06      	ldr	r3, [pc, #24]	; (11260 <ctrl_rl_irk_idx+0x70>)
   11246:	4907      	ldr	r1, [pc, #28]	; (11264 <ctrl_rl_irk_idx+0x74>)
   11248:	480b      	ldr	r0, [pc, #44]	; (11278 <ctrl_rl_irk_idx+0x88>)
   1124a:	e7dd      	b.n	11208 <ctrl_rl_irk_idx+0x18>
}
   1124c:	b003      	add	sp, #12
   1124e:	f85d fb04 	ldr.w	pc, [sp], #4
   11252:	bf00      	nop
   11254:	20001232 	.word	0x20001232
   11258:	00014645 	.word	0x00014645
   1125c:	00015394 	.word	0x00015394
   11260:	00017652 	.word	0x00017652
   11264:	000153e3 	.word	0x000153e3
   11268:	000178de 	.word	0x000178de
   1126c:	20001233 	.word	0x20001233
   11270:	0001791c 	.word	0x0001791c
   11274:	200012bc 	.word	0x200012bc
   11278:	000178b1 	.word	0x000178b1

0001127c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1127c:	2807      	cmp	r0, #7
{
   1127e:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11280:	d819      	bhi.n	112b6 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   11282:	2328      	movs	r3, #40	; 0x28
   11284:	4358      	muls	r0, r3
   11286:	4b0d      	ldr	r3, [pc, #52]	; (112bc <ctrl_irk_whitelisted+0x40>)
   11288:	5c18      	ldrb	r0, [r3, r0]
   1128a:	07c3      	lsls	r3, r0, #31
   1128c:	d40e      	bmi.n	112ac <ctrl_irk_whitelisted+0x30>
   1128e:	4b0c      	ldr	r3, [pc, #48]	; (112c0 <ctrl_irk_whitelisted+0x44>)
   11290:	9301      	str	r3, [sp, #4]
   11292:	9300      	str	r3, [sp, #0]
   11294:	4a0b      	ldr	r2, [pc, #44]	; (112c4 <ctrl_irk_whitelisted+0x48>)
   11296:	4b0c      	ldr	r3, [pc, #48]	; (112c8 <ctrl_irk_whitelisted+0x4c>)
   11298:	490c      	ldr	r1, [pc, #48]	; (112cc <ctrl_irk_whitelisted+0x50>)
   1129a:	480d      	ldr	r0, [pc, #52]	; (112d0 <ctrl_irk_whitelisted+0x54>)
   1129c:	f7ef fe76 	bl	f8c <printk>
   112a0:	4040      	eors	r0, r0
   112a2:	f380 8811 	msr	BASEPRI, r0
   112a6:	f04f 0004 	mov.w	r0, #4
   112aa:	df02      	svc	2
	return rl[rl_idx].wl;
   112ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   112b0:	b003      	add	sp, #12
   112b2:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   112b6:	2000      	movs	r0, #0
   112b8:	e7fa      	b.n	112b0 <ctrl_irk_whitelisted+0x34>
   112ba:	bf00      	nop
   112bc:	200012bc 	.word	0x200012bc
   112c0:	00014645 	.word	0x00014645
   112c4:	00015394 	.word	0x00015394
   112c8:	00017662 	.word	0x00017662
   112cc:	000153e3 	.word	0x000153e3
   112d0:	000176ae 	.word	0x000176ae

000112d4 <ctrl_filter_get>:
}
   112d4:	4b03      	ldr	r3, [pc, #12]	; (112e4 <ctrl_filter_get+0x10>)
   112d6:	4a04      	ldr	r2, [pc, #16]	; (112e8 <ctrl_filter_get+0x14>)
   112d8:	2800      	cmp	r0, #0
   112da:	bf14      	ite	ne
   112dc:	4610      	movne	r0, r2
   112de:	4618      	moveq	r0, r3
   112e0:	4770      	bx	lr
   112e2:	bf00      	nop
   112e4:	200013fd 	.word	0x200013fd
   112e8:	2000146f 	.word	0x2000146f

000112ec <ll_wl_size_get>:
   112ec:	2008      	movs	r0, #8
   112ee:	4770      	bx	lr

000112f0 <ll_wl_clear>:
{
   112f0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   112f2:	f7fe fd91 	bl	fe18 <radio_adv_filter_pol_get>
   112f6:	4604      	mov	r4, r0
   112f8:	b110      	cbz	r0, 11300 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   112fa:	240c      	movs	r4, #12
}
   112fc:	4620      	mov	r0, r4
   112fe:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11300:	f7fe fdac 	bl	fe5c <radio_scan_filter_pol_get>
   11304:	07c3      	lsls	r3, r0, #31
   11306:	d4f8      	bmi.n	112fa <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11308:	4a07      	ldr	r2, [pc, #28]	; (11328 <ll_wl_clear+0x38>)
   1130a:	4623      	mov	r3, r4
   1130c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11310:	f36f 0100 	bfc	r1, #0, #1
   11314:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11318:	3301      	adds	r3, #1
   1131a:	2b08      	cmp	r3, #8
   1131c:	d1f6      	bne.n	1130c <ll_wl_clear+0x1c>
	wl_anon = 0;
   1131e:	4b03      	ldr	r3, [pc, #12]	; (1132c <ll_wl_clear+0x3c>)
   11320:	2200      	movs	r2, #0
   11322:	701a      	strb	r2, [r3, #0]
	return 0;
   11324:	e7ea      	b.n	112fc <ll_wl_clear+0xc>
   11326:	bf00      	nop
   11328:	2000142f 	.word	0x2000142f
   1132c:	20001920 	.word	0x20001920

00011330 <ll_wl_remove>:
{
   11330:	b538      	push	{r3, r4, r5, lr}
   11332:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11334:	f7fe fd70 	bl	fe18 <radio_adv_filter_pol_get>
   11338:	4604      	mov	r4, r0
   1133a:	b110      	cbz	r0, 11342 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1133c:	240c      	movs	r4, #12
}
   1133e:	4620      	mov	r0, r4
   11340:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11342:	f7fe fd8b 	bl	fe5c <radio_scan_filter_pol_get>
   11346:	07c3      	lsls	r3, r0, #31
   11348:	d4f8      	bmi.n	1133c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1134a:	7828      	ldrb	r0, [r5, #0]
   1134c:	28ff      	cmp	r0, #255	; 0xff
   1134e:	d102      	bne.n	11356 <ll_wl_remove+0x26>
		wl_anon = 0;
   11350:	4b0f      	ldr	r3, [pc, #60]	; (11390 <ll_wl_remove+0x60>)
   11352:	701c      	strb	r4, [r3, #0]
		return 0;
   11354:	e7f3      	b.n	1133e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   11356:	4622      	mov	r2, r4
   11358:	1c69      	adds	r1, r5, #1
   1135a:	f7ff fe33 	bl	10fc4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1135e:	2807      	cmp	r0, #7
   11360:	d813      	bhi.n	1138a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11362:	4b0c      	ldr	r3, [pc, #48]	; (11394 <ll_wl_remove+0x64>)
   11364:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11368:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1136a:	2d07      	cmp	r5, #7
   1136c:	d806      	bhi.n	1137c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1136e:	2228      	movs	r2, #40	; 0x28
   11370:	4909      	ldr	r1, [pc, #36]	; (11398 <ll_wl_remove+0x68>)
   11372:	436a      	muls	r2, r5
   11374:	5c8d      	ldrb	r5, [r1, r2]
   11376:	f364 1545 	bfi	r5, r4, #5, #1
   1137a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1137c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11380:	f36f 0200 	bfc	r2, #0, #1
   11384:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11388:	e7d9      	b.n	1133e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1138a:	2402      	movs	r4, #2
   1138c:	e7d7      	b.n	1133e <ll_wl_remove+0xe>
   1138e:	bf00      	nop
   11390:	20001920 	.word	0x20001920
   11394:	2000142f 	.word	0x2000142f
   11398:	200012bc 	.word	0x200012bc

0001139c <ll_filters_scan_update>:
{
   1139c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1139e:	4b0d      	ldr	r3, [pc, #52]	; (113d4 <ll_filters_scan_update+0x38>)
   113a0:	2200      	movs	r2, #0
   113a2:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   113a4:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   113a6:	07c3      	lsls	r3, r0, #31
   113a8:	d504      	bpl.n	113b4 <ll_filters_scan_update+0x18>
   113aa:	f7fe fd35 	bl	fe18 <radio_adv_filter_pol_get>
   113ae:	b908      	cbnz	r0, 113b4 <ll_filters_scan_update+0x18>
		filter_wl_update();
   113b0:	f7ff fe3a 	bl	11028 <filter_wl_update>
	filter->enable_bitmask = 0;
   113b4:	4b08      	ldr	r3, [pc, #32]	; (113d8 <ll_filters_scan_update+0x3c>)
   113b6:	2200      	movs	r2, #0
   113b8:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   113ba:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   113bc:	4b07      	ldr	r3, [pc, #28]	; (113dc <ll_filters_scan_update+0x40>)
   113be:	781b      	ldrb	r3, [r3, #0]
   113c0:	b133      	cbz	r3, 113d0 <ll_filters_scan_update+0x34>
   113c2:	f7fe fd21 	bl	fe08 <ll_adv_is_enabled>
   113c6:	b918      	cbnz	r0, 113d0 <ll_filters_scan_update+0x34>
}
   113c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   113cc:	f7ff be78 	b.w	110c0 <filter_rl_update>
   113d0:	bd08      	pop	{r3, pc}
   113d2:	bf00      	nop
   113d4:	2000146f 	.word	0x2000146f
   113d8:	200013fd 	.word	0x200013fd
   113dc:	200013fc 	.word	0x200013fc

000113e0 <ll_rl_find>:
{
   113e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113e4:	468a      	mov	sl, r1
	if (free) {
   113e6:	4614      	mov	r4, r2
   113e8:	b10a      	cbz	r2, 113ee <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   113ea:	23ff      	movs	r3, #255	; 0xff
   113ec:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   113ee:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11444 <ll_rl_find+0x64>
{
   113f2:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   113f4:	f000 0901 	and.w	r9, r0, #1
   113f8:	2628      	movs	r6, #40	; 0x28
   113fa:	436e      	muls	r6, r5
   113fc:	b2ef      	uxtb	r7, r5
   113fe:	f818 3006 	ldrb.w	r3, [r8, r6]
   11402:	07da      	lsls	r2, r3, #31
   11404:	d51a      	bpl.n	1143c <ll_rl_find+0x5c>
   11406:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1140a:	454b      	cmp	r3, r9
   1140c:	d10f      	bne.n	1142e <ll_rl_find+0x4e>
   1140e:	1c70      	adds	r0, r6, #1
   11410:	2206      	movs	r2, #6
   11412:	4651      	mov	r1, sl
   11414:	4440      	add	r0, r8
   11416:	f7f0 fbdc 	bl	1bd2 <memcmp>
   1141a:	b160      	cbz	r0, 11436 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1141c:	b13c      	cbz	r4, 1142e <ll_rl_find+0x4e>
   1141e:	f818 3006 	ldrb.w	r3, [r8, r6]
   11422:	07db      	lsls	r3, r3, #31
   11424:	d403      	bmi.n	1142e <ll_rl_find+0x4e>
   11426:	7823      	ldrb	r3, [r4, #0]
   11428:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1142a:	bf08      	it	eq
   1142c:	7027      	strbeq	r7, [r4, #0]
   1142e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11430:	2d08      	cmp	r5, #8
   11432:	d1e1      	bne.n	113f8 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   11434:	27ff      	movs	r7, #255	; 0xff
}
   11436:	4638      	mov	r0, r7
   11438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1143c:	2c00      	cmp	r4, #0
   1143e:	d1f2      	bne.n	11426 <ll_rl_find+0x46>
   11440:	e7f5      	b.n	1142e <ll_rl_find+0x4e>
   11442:	bf00      	nop
   11444:	200012bc 	.word	0x200012bc

00011448 <ll_wl_add>:
{
   11448:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1144c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1144e:	f7fe fce3 	bl	fe18 <radio_adv_filter_pol_get>
   11452:	4605      	mov	r5, r0
   11454:	b120      	cbz	r0, 11460 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11456:	250c      	movs	r5, #12
}
   11458:	4628      	mov	r0, r5
   1145a:	b002      	add	sp, #8
   1145c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11460:	f7fe fcfc 	bl	fe5c <radio_scan_filter_pol_get>
   11464:	07c3      	lsls	r3, r0, #31
   11466:	d4f6      	bmi.n	11456 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11468:	7838      	ldrb	r0, [r7, #0]
   1146a:	28ff      	cmp	r0, #255	; 0xff
   1146c:	d103      	bne.n	11476 <ll_wl_add+0x2e>
		wl_anon = 1;
   1146e:	4b1f      	ldr	r3, [pc, #124]	; (114ec <ll_wl_add+0xa4>)
   11470:	2201      	movs	r2, #1
   11472:	701a      	strb	r2, [r3, #0]
		return 0;
   11474:	e7f0      	b.n	11458 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11476:	f107 0801 	add.w	r8, r7, #1
   1147a:	f10d 0207 	add.w	r2, sp, #7
   1147e:	4641      	mov	r1, r8
   11480:	f7ff fda0 	bl	10fc4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11484:	2807      	cmp	r0, #7
   11486:	d92d      	bls.n	114e4 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11488:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1148c:	2e07      	cmp	r6, #7
   1148e:	d82b      	bhi.n	114e8 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11490:	4c17      	ldr	r4, [pc, #92]	; (114f0 <ll_wl_add+0xa8>)
   11492:	783a      	ldrb	r2, [r7, #0]
   11494:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11498:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1149c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   114a0:	4641      	mov	r1, r8
   114a2:	2206      	movs	r2, #6
   114a4:	3002      	adds	r0, #2
   114a6:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   114aa:	f7f0 fba7 	bl	1bfc <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   114ae:	462a      	mov	r2, r5
   114b0:	4641      	mov	r1, r8
   114b2:	7838      	ldrb	r0, [r7, #0]
   114b4:	f7ff ff94 	bl	113e0 <ll_rl_find>
   114b8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   114ba:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   114bc:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   114be:	d80e      	bhi.n	114de <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   114c0:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   114c2:	2328      	movs	r3, #40	; 0x28
   114c4:	4a0b      	ldr	r2, [pc, #44]	; (114f4 <ll_wl_add+0xac>)
   114c6:	4358      	muls	r0, r3
   114c8:	5c13      	ldrb	r3, [r2, r0]
   114ca:	f043 0320 	orr.w	r3, r3, #32
   114ce:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   114d0:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   114d4:	f043 0301 	orr.w	r3, r3, #1
   114d8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   114dc:	e7bc      	b.n	11458 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   114de:	22ff      	movs	r2, #255	; 0xff
   114e0:	705a      	strb	r2, [r3, #1]
   114e2:	e7f5      	b.n	114d0 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   114e4:	2512      	movs	r5, #18
   114e6:	e7b7      	b.n	11458 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   114e8:	2507      	movs	r5, #7
	return wl_add(addr);
   114ea:	e7b5      	b.n	11458 <ll_wl_add+0x10>
   114ec:	20001920 	.word	0x20001920
   114f0:	2000142f 	.word	0x2000142f
   114f4:	200012bc 	.word	0x200012bc

000114f8 <ctrl_rl_idx_allowed>:
{
   114f8:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   114fa:	4b12      	ldr	r3, [pc, #72]	; (11544 <ctrl_rl_idx_allowed+0x4c>)
   114fc:	781b      	ldrb	r3, [r3, #0]
   114fe:	b1f3      	cbz	r3, 1153e <ctrl_rl_idx_allowed+0x46>
   11500:	2907      	cmp	r1, #7
   11502:	d81c      	bhi.n	1153e <ctrl_rl_idx_allowed+0x46>
   11504:	b9d8      	cbnz	r0, 1153e <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   11506:	2328      	movs	r3, #40	; 0x28
   11508:	4359      	muls	r1, r3
   1150a:	4b0f      	ldr	r3, [pc, #60]	; (11548 <ctrl_rl_idx_allowed+0x50>)
   1150c:	5c58      	ldrb	r0, [r3, r1]
   1150e:	07c2      	lsls	r2, r0, #31
   11510:	d40e      	bmi.n	11530 <ctrl_rl_idx_allowed+0x38>
   11512:	4b0e      	ldr	r3, [pc, #56]	; (1154c <ctrl_rl_idx_allowed+0x54>)
   11514:	9301      	str	r3, [sp, #4]
   11516:	9300      	str	r3, [sp, #0]
   11518:	4a0d      	ldr	r2, [pc, #52]	; (11550 <ctrl_rl_idx_allowed+0x58>)
   1151a:	4b0e      	ldr	r3, [pc, #56]	; (11554 <ctrl_rl_idx_allowed+0x5c>)
   1151c:	490e      	ldr	r1, [pc, #56]	; (11558 <ctrl_rl_idx_allowed+0x60>)
   1151e:	480f      	ldr	r0, [pc, #60]	; (1155c <ctrl_rl_idx_allowed+0x64>)
   11520:	f7ef fd34 	bl	f8c <printk>
   11524:	4040      	eors	r0, r0
   11526:	f380 8811 	msr	BASEPRI, r0
   1152a:	f04f 0004 	mov.w	r0, #4
   1152e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11530:	0743      	lsls	r3, r0, #29
   11532:	d504      	bpl.n	1153e <ctrl_rl_idx_allowed+0x46>
   11534:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11538:	b003      	add	sp, #12
   1153a:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   1153e:	2001      	movs	r0, #1
   11540:	e7fa      	b.n	11538 <ctrl_rl_idx_allowed+0x40>
   11542:	bf00      	nop
   11544:	200013fc 	.word	0x200013fc
   11548:	200012bc 	.word	0x200012bc
   1154c:	00014645 	.word	0x00014645
   11550:	00015394 	.word	0x00015394
   11554:	00017677 	.word	0x00017677
   11558:	000153e3 	.word	0x000153e3
   1155c:	000176ae 	.word	0x000176ae

00011560 <ll_rl_id_addr_get>:
{
   11560:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11562:	2b07      	cmp	r3, #7
{
   11564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11566:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11568:	d90e      	bls.n	11588 <ll_rl_id_addr_get+0x28>
   1156a:	4b15      	ldr	r3, [pc, #84]	; (115c0 <ll_rl_id_addr_get+0x60>)
   1156c:	9301      	str	r3, [sp, #4]
   1156e:	9300      	str	r3, [sp, #0]
   11570:	4a14      	ldr	r2, [pc, #80]	; (115c4 <ll_rl_id_addr_get+0x64>)
   11572:	4b15      	ldr	r3, [pc, #84]	; (115c8 <ll_rl_id_addr_get+0x68>)
   11574:	4915      	ldr	r1, [pc, #84]	; (115cc <ll_rl_id_addr_get+0x6c>)
   11576:	4816      	ldr	r0, [pc, #88]	; (115d0 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   11578:	f7ef fd08 	bl	f8c <printk>
   1157c:	4040      	eors	r0, r0
   1157e:	f380 8811 	msr	BASEPRI, r0
   11582:	f04f 0004 	mov.w	r0, #4
   11586:	df02      	svc	2
   11588:	2528      	movs	r5, #40	; 0x28
   1158a:	4c12      	ldr	r4, [pc, #72]	; (115d4 <ll_rl_id_addr_get+0x74>)
   1158c:	fb05 f203 	mul.w	r2, r5, r3
   11590:	5ca2      	ldrb	r2, [r4, r2]
   11592:	f012 0f01 	tst.w	r2, #1
   11596:	d107      	bne.n	115a8 <ll_rl_id_addr_get+0x48>
   11598:	4b09      	ldr	r3, [pc, #36]	; (115c0 <ll_rl_id_addr_get+0x60>)
   1159a:	9301      	str	r3, [sp, #4]
   1159c:	9300      	str	r3, [sp, #0]
   1159e:	4a09      	ldr	r2, [pc, #36]	; (115c4 <ll_rl_id_addr_get+0x64>)
   115a0:	4b09      	ldr	r3, [pc, #36]	; (115c8 <ll_rl_id_addr_get+0x68>)
   115a2:	490a      	ldr	r1, [pc, #40]	; (115cc <ll_rl_id_addr_get+0x6c>)
   115a4:	480c      	ldr	r0, [pc, #48]	; (115d8 <ll_rl_id_addr_get+0x78>)
   115a6:	e7e7      	b.n	11578 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   115a8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   115ac:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   115ae:	fb05 4103 	mla	r1, r5, r3, r4
   115b2:	2206      	movs	r2, #6
   115b4:	3101      	adds	r1, #1
}
   115b6:	b003      	add	sp, #12
   115b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   115bc:	f7f0 bb1e 	b.w	1bfc <memcpy>
   115c0:	00014645 	.word	0x00014645
   115c4:	00015394 	.word	0x00015394
   115c8:	0001768b 	.word	0x0001768b
   115cc:	000153e3 	.word	0x000153e3
   115d0:	00017943 	.word	0x00017943
   115d4:	200012bc 	.word	0x200012bc
   115d8:	000176ae 	.word	0x000176ae

000115dc <ctrl_rl_addr_allowed>:
{
   115dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   115e0:	4b1a      	ldr	r3, [pc, #104]	; (1164c <ctrl_rl_addr_allowed+0x70>)
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	b37b      	cbz	r3, 11646 <ctrl_rl_addr_allowed+0x6a>
   115e6:	7813      	ldrb	r3, [r2, #0]
   115e8:	2bff      	cmp	r3, #255	; 0xff
   115ea:	d12c      	bne.n	11646 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   115ec:	4e18      	ldr	r6, [pc, #96]	; (11650 <ctrl_rl_addr_allowed+0x74>)
   115ee:	2400      	movs	r4, #0
   115f0:	f04f 0828 	mov.w	r8, #40	; 0x28
   115f4:	46b6      	mov	lr, r6
   115f6:	fb08 f304 	mul.w	r3, r8, r4
   115fa:	fa5f fc84 	uxtb.w	ip, r4
   115fe:	5cf7      	ldrb	r7, [r6, r3]
   11600:	f017 0f01 	tst.w	r7, #1
   11604:	eb06 0503 	add.w	r5, r6, r3
   11608:	d01a      	beq.n	11640 <ctrl_rl_addr_allowed+0x64>
   1160a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   1160e:	4287      	cmp	r7, r0
   11610:	d116      	bne.n	11640 <ctrl_rl_addr_allowed+0x64>
   11612:	3306      	adds	r3, #6
   11614:	1e4f      	subs	r7, r1, #1
   11616:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11618:	f815 af01 	ldrb.w	sl, [r5, #1]!
   1161c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11620:	45ca      	cmp	sl, r9
   11622:	d10d      	bne.n	11640 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   11624:	429d      	cmp	r5, r3
   11626:	d1f7      	bne.n	11618 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11628:	2328      	movs	r3, #40	; 0x28
   1162a:	435c      	muls	r4, r3
				*rl_idx = i;
   1162c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11630:	f81e 0004 	ldrb.w	r0, [lr, r4]
   11634:	0743      	lsls	r3, r0, #29
   11636:	d506      	bpl.n	11646 <ctrl_rl_addr_allowed+0x6a>
   11638:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11640:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11642:	2c08      	cmp	r4, #8
   11644:	d1d7      	bne.n	115f6 <ctrl_rl_addr_allowed+0x1a>
   11646:	2001      	movs	r0, #1
}
   11648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1164c:	200013fc 	.word	0x200013fc
   11650:	200012bc 	.word	0x200012bc

00011654 <ctrl_rl_addr_resolve>:
{
   11654:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   11656:	4c0d      	ldr	r4, [pc, #52]	; (1168c <ctrl_rl_addr_resolve+0x38>)
   11658:	7824      	ldrb	r4, [r4, #0]
   1165a:	b1a4      	cbz	r4, 11686 <ctrl_rl_addr_resolve+0x32>
   1165c:	2a07      	cmp	r2, #7
   1165e:	d812      	bhi.n	11686 <ctrl_rl_addr_resolve+0x32>
   11660:	2528      	movs	r5, #40	; 0x28
   11662:	4c0b      	ldr	r4, [pc, #44]	; (11690 <ctrl_rl_addr_resolve+0x3c>)
   11664:	fb05 f602 	mul.w	r6, r5, r2
   11668:	5da6      	ldrb	r6, [r4, r6]
   1166a:	0736      	lsls	r6, r6, #28
   1166c:	d50b      	bpl.n	11686 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1166e:	b150      	cbz	r0, 11686 <ctrl_rl_addr_resolve+0x32>
   11670:	794b      	ldrb	r3, [r1, #5]
   11672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11676:	2b40      	cmp	r3, #64	; 0x40
   11678:	d105      	bne.n	11686 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1167a:	fb05 4202 	mla	r2, r5, r2, r4
   1167e:	1dd0      	adds	r0, r2, #7
}
   11680:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11682:	f7f0 bbd0 	b.w	1e26 <bt_rpa_irk_matches>
}
   11686:	2000      	movs	r0, #0
   11688:	bc70      	pop	{r4, r5, r6}
   1168a:	4770      	bx	lr
   1168c:	200013fc 	.word	0x200013fc
   11690:	200012bc 	.word	0x200012bc

00011694 <ctrl_rl_enabled>:
	return rl_enable;
   11694:	4b02      	ldr	r3, [pc, #8]	; (116a0 <ctrl_rl_enabled+0xc>)
   11696:	7818      	ldrb	r0, [r3, #0]
}
   11698:	3000      	adds	r0, #0
   1169a:	bf18      	it	ne
   1169c:	2001      	movne	r0, #1
   1169e:	4770      	bx	lr
   116a0:	200013fc 	.word	0x200013fc

000116a4 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   116a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a8:	b089      	sub	sp, #36	; 0x24
   116aa:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   116ac:	f002 fa70 	bl	13b90 <_impl_k_uptime_get>
   116b0:	4680      	mov	r8, r0
   116b2:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   116b4:	2c00      	cmp	r4, #0
   116b6:	d148      	bne.n	1174a <ll_rl_rpa_update+0xa6>
   116b8:	4b3b      	ldr	r3, [pc, #236]	; (117a8 <ll_rl_rpa_update+0x104>)
   116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   116be:	1c5c      	adds	r4, r3, #1
   116c0:	bf08      	it	eq
   116c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   116c6:	d040      	beq.n	1174a <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   116c8:	1a82      	subs	r2, r0, r2
   116ca:	eb61 0303 	sbc.w	r3, r1, r3
   116ce:	4937      	ldr	r1, [pc, #220]	; (117ac <ll_rl_rpa_update+0x108>)
   116d0:	6808      	ldr	r0, [r1, #0]
   116d2:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   116d4:	4282      	cmp	r2, r0
   116d6:	418b      	sbcs	r3, r1
   116d8:	bfac      	ite	ge
   116da:	2601      	movge	r6, #1
   116dc:	2600      	movlt	r6, #0
   116de:	4d34      	ldr	r5, [pc, #208]	; (117b0 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   116e0:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   116e4:	2400      	movs	r4, #0
   116e6:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   116e8:	2328      	movs	r3, #40	; 0x28
   116ea:	4363      	muls	r3, r4
   116ec:	f81b 3003 	ldrb.w	r3, [fp, r3]
   116f0:	07d8      	lsls	r0, r3, #31
   116f2:	d54d      	bpl.n	11790 <ll_rl_rpa_update+0xec>
   116f4:	b90e      	cbnz	r6, 116fa <ll_rl_rpa_update+0x56>
   116f6:	0799      	lsls	r1, r3, #30
   116f8:	d44a      	bmi.n	11790 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   116fa:	2328      	movs	r3, #40	; 0x28
   116fc:	4363      	muls	r3, r4
   116fe:	5cfb      	ldrb	r3, [r7, r3]
   11700:	075a      	lsls	r2, r3, #29
   11702:	d524      	bpl.n	1174e <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11704:	7c2a      	ldrb	r2, [r5, #16]
   11706:	4b2b      	ldr	r3, [pc, #172]	; (117b4 <ll_rl_rpa_update+0x110>)
   11708:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1170c:	f103 0210 	add.w	r2, r3, #16
   11710:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   11714:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11718:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   1171c:	429a      	cmp	r2, r3
   1171e:	d1f9      	bne.n	11714 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11720:	f105 0117 	add.w	r1, r5, #23
   11724:	a804      	add	r0, sp, #16
   11726:	f7f0 fb91 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   1172a:	b180      	cbz	r0, 1174e <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   1172c:	4b22      	ldr	r3, [pc, #136]	; (117b8 <ll_rl_rpa_update+0x114>)
   1172e:	9301      	str	r3, [sp, #4]
   11730:	9300      	str	r3, [sp, #0]
   11732:	4a22      	ldr	r2, [pc, #136]	; (117bc <ll_rl_rpa_update+0x118>)
   11734:	4b22      	ldr	r3, [pc, #136]	; (117c0 <ll_rl_rpa_update+0x11c>)
   11736:	4923      	ldr	r1, [pc, #140]	; (117c4 <ll_rl_rpa_update+0x120>)
   11738:	4823      	ldr	r0, [pc, #140]	; (117c8 <ll_rl_rpa_update+0x124>)
   1173a:	f7ef fc27 	bl	f8c <printk>
   1173e:	4040      	eors	r0, r0
   11740:	f380 8811 	msr	BASEPRI, r0
   11744:	f04f 0004 	mov.w	r0, #4
   11748:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   1174a:	2601      	movs	r6, #1
   1174c:	e7c7      	b.n	116de <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   1174e:	2328      	movs	r3, #40	; 0x28
   11750:	4363      	muls	r3, r4
   11752:	5cfb      	ldrb	r3, [r7, r3]
   11754:	071b      	lsls	r3, r3, #28
   11756:	d515      	bpl.n	11784 <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11758:	f10d 0a10 	add.w	sl, sp, #16
   1175c:	4651      	mov	r1, sl
   1175e:	4628      	mov	r0, r5
   11760:	f7f0 fb74 	bl	1e4c <bt_rpa_create>
				LL_ASSERT(!err);
   11764:	2800      	cmp	r0, #0
   11766:	d1e1      	bne.n	1172c <ll_rl_rpa_update+0x88>
   11768:	4b18      	ldr	r3, [pc, #96]	; (117cc <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   1176a:	f8c5 a01d 	str.w	sl, [r5, #29]
   1176e:	2206      	movs	r2, #6
   11770:	fb02 3304 	mla	r3, r2, r4, r3
   11774:	4618      	mov	r0, r3
   11776:	4651      	mov	r1, sl
   11778:	9303      	str	r3, [sp, #12]
   1177a:	f7f0 fa3f 	bl	1bfc <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   1177e:	9b03      	ldr	r3, [sp, #12]
   11780:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11784:	2328      	movs	r3, #40	; 0x28
   11786:	4363      	muls	r3, r4
   11788:	5cfa      	ldrb	r2, [r7, r3]
   1178a:	f042 0202 	orr.w	r2, r2, #2
   1178e:	54fa      	strb	r2, [r7, r3]
   11790:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11792:	2c08      	cmp	r4, #8
   11794:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11798:	d1a6      	bne.n	116e8 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   1179a:	b116      	cbz	r6, 117a2 <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   1179c:	4b02      	ldr	r3, [pc, #8]	; (117a8 <ll_rl_rpa_update+0x104>)
   1179e:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   117a2:	b009      	add	sp, #36	; 0x24
   117a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117a8:	20001918 	.word	0x20001918
   117ac:	2000194c 	.word	0x2000194c
   117b0:	200012c3 	.word	0x200012c3
   117b4:	2000123b 	.word	0x2000123b
   117b8:	00014645 	.word	0x00014645
   117bc:	00015394 	.word	0x00015394
   117c0:	0001769d 	.word	0x0001769d
   117c4:	000153e3 	.word	0x000153e3
   117c8:	000175eb 	.word	0x000175eb
   117cc:	20001202 	.word	0x20001202

000117d0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   117d0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   117d2:	2001      	movs	r0, #1
   117d4:	f7ff ff66 	bl	116a4 <ll_rl_rpa_update>
   117d8:	4b03      	ldr	r3, [pc, #12]	; (117e8 <rpa_timeout+0x18>)
   117da:	4904      	ldr	r1, [pc, #16]	; (117ec <rpa_timeout+0x1c>)
   117dc:	681a      	ldr	r2, [r3, #0]
   117de:	4804      	ldr	r0, [pc, #16]	; (117f0 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   117e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   117e4:	f002 bcd2 	b.w	1418c <k_delayed_work_submit_to_queue>
   117e8:	2000194c 	.word	0x2000194c
   117ec:	20001924 	.word	0x20001924
   117f0:	20001990 	.word	0x20001990

000117f4 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   117f4:	4b07      	ldr	r3, [pc, #28]	; (11814 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   117f6:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   117f8:	b130      	cbz	r0, 11808 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   117fa:	b14b      	cbz	r3, 11810 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   117fc:	4b06      	ldr	r3, [pc, #24]	; (11818 <ll_adv_scan_state_cb+0x24>)
   117fe:	4907      	ldr	r1, [pc, #28]	; (1181c <ll_adv_scan_state_cb+0x28>)
   11800:	681a      	ldr	r2, [r3, #0]
   11802:	4807      	ldr	r0, [pc, #28]	; (11820 <ll_adv_scan_state_cb+0x2c>)
   11804:	f002 bcc2 	b.w	1418c <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11808:	b113      	cbz	r3, 11810 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1180a:	4804      	ldr	r0, [pc, #16]	; (1181c <ll_adv_scan_state_cb+0x28>)
   1180c:	f002 bc5a 	b.w	140c4 <k_delayed_work_cancel>
   11810:	4770      	bx	lr
   11812:	bf00      	nop
   11814:	200013fc 	.word	0x200013fc
   11818:	2000194c 	.word	0x2000194c
   1181c:	20001924 	.word	0x20001924
   11820:	20001990 	.word	0x20001990

00011824 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   11824:	2008      	movs	r0, #8
   11826:	4770      	bx	lr

00011828 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11828:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1182a:	f7ff fc3d 	bl	110a8 <rl_access_check.constprop.1>
   1182e:	b178      	cbz	r0, 11850 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   11830:	4908      	ldr	r1, [pc, #32]	; (11854 <ll_rl_clear+0x2c>)
   11832:	2300      	movs	r3, #0
   11834:	2428      	movs	r4, #40	; 0x28
   11836:	fb04 f203 	mul.w	r2, r4, r3
   1183a:	3301      	adds	r3, #1
   1183c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1183e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11840:	f36f 0000 	bfc	r0, #0, #1
   11844:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11846:	d1f6      	bne.n	11836 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11848:	4b03      	ldr	r3, [pc, #12]	; (11858 <ll_rl_clear+0x30>)
   1184a:	2000      	movs	r0, #0
   1184c:	7018      	strb	r0, [r3, #0]
   1184e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11850:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   11852:	bd10      	pop	{r4, pc}
   11854:	200012bc 	.word	0x200012bc
   11858:	20001232 	.word	0x20001232

0001185c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11860:	b085      	sub	sp, #20
   11862:	4607      	mov	r7, r0
   11864:	4689      	mov	r9, r1
   11866:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11868:	f7ff fc1e 	bl	110a8 <rl_access_check.constprop.1>
   1186c:	2800      	cmp	r0, #0
   1186e:	f000 8086 	beq.w	1197e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   11872:	f107 0801 	add.w	r8, r7, #1
   11876:	f10d 020f 	add.w	r2, sp, #15
   1187a:	4641      	mov	r1, r8
   1187c:	7838      	ldrb	r0, [r7, #0]
   1187e:	f7ff fdaf 	bl	113e0 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   11882:	2807      	cmp	r0, #7
   11884:	d97d      	bls.n	11982 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   11886:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1188a:	2d07      	cmp	r5, #7
   1188c:	d87b      	bhi.n	11986 <ll_rl_add+0x12a>
   1188e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11892:	4c3e      	ldr	r4, [pc, #248]	; (1198c <ll_rl_add+0x130>)
   11894:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11898:	2628      	movs	r6, #40	; 0x28
   1189a:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1189c:	f10b 0001 	add.w	r0, fp, #1
   118a0:	2206      	movs	r2, #6
   118a2:	4641      	mov	r1, r8
   118a4:	4420      	add	r0, r4
   118a6:	f7f0 f9a9 	bl	1bfc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   118aa:	7839      	ldrb	r1, [r7, #0]
   118ac:	5da3      	ldrb	r3, [r4, r6]
   118ae:	19a2      	adds	r2, r4, r6
   118b0:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   118b4:	4648      	mov	r0, r9
   118b6:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   118b8:	9201      	str	r2, [sp, #4]
   118ba:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   118bc:	f7f5 fa21 	bl	6d02 <mem_nz>
   118c0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118c2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   118c4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118c8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   118ca:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118cc:	f7f5 fa19 	bl	6d02 <mem_nz>
   118d0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   118d2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118d4:	f000 0001 	and.w	r0, r0, #1
   118d8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   118dc:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   118e0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   118e2:	d138      	bne.n	11956 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   118e4:	b158      	cbz	r0, 118fe <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   118e6:	f10b 0007 	add.w	r0, fp, #7
   118ea:	2210      	movs	r2, #16
   118ec:	4651      	mov	r1, sl
   118ee:	4420      	add	r0, r4
   118f0:	f7f0 f984 	bl	1bfc <memcpy>
		rl[i].local_rpa = NULL;
   118f4:	2328      	movs	r3, #40	; 0x28
   118f6:	fb03 4305 	mla	r3, r3, r5, r4
   118fa:	2200      	movs	r2, #0
   118fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   118fe:	2628      	movs	r6, #40	; 0x28
   11900:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11902:	f10b 0018 	add.w	r0, fp, #24
   11906:	2206      	movs	r2, #6
   11908:	2100      	movs	r1, #0
   1190a:	4420      	add	r0, r4
   1190c:	f7f0 f9a2 	bl	1c54 <memset>
	rl[i].rpas_ready = 0;
   11910:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11912:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11916:	f36f 1304 	bfc	r3, #4, #1
   1191a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1191c:	2200      	movs	r2, #0
   1191e:	4641      	mov	r1, r8
   11920:	7838      	ldrb	r0, [r7, #0]
   11922:	f7ff fb4f 	bl	10fc4 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11926:	2807      	cmp	r0, #7
   11928:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1192a:	bf9d      	ittte	ls
   1192c:	4a18      	ldrls	r2, [pc, #96]	; (11990 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   1192e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11932:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   11936:	f36f 1345 	bfchi	r3, #5, #1
   1193a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   1193c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11940:	bf98      	it	ls
   11942:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   11944:	435d      	muls	r5, r3

	return 0;
   11946:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11948:	5d63      	ldrb	r3, [r4, r5]
   1194a:	f043 0301 	orr.w	r3, r3, #1
   1194e:	5563      	strb	r3, [r4, r5]
}
   11950:	b005      	add	sp, #20
   11952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   11956:	4b0f      	ldr	r3, [pc, #60]	; (11994 <ll_rl_add+0x138>)
   11958:	7819      	ldrb	r1, [r3, #0]
   1195a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1195c:	4a0e      	ldr	r2, [pc, #56]	; (11998 <ll_rl_add+0x13c>)
   1195e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11960:	1c4a      	adds	r2, r1, #1
   11962:	701a      	strb	r2, [r3, #0]
   11964:	4b0d      	ldr	r3, [pc, #52]	; (1199c <ll_rl_add+0x140>)
   11966:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   1196a:	f109 0210 	add.w	r2, r9, #16
   1196e:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11970:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   11974:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11978:	454a      	cmp	r2, r9
   1197a:	d1f9      	bne.n	11970 <ll_rl_add+0x114>
   1197c:	e7b2      	b.n	118e4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1197e:	200c      	movs	r0, #12
   11980:	e7e6      	b.n	11950 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11982:	2012      	movs	r0, #18
   11984:	e7e4      	b.n	11950 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11986:	2007      	movs	r0, #7
   11988:	e7e2      	b.n	11950 <ll_rl_add+0xf4>
   1198a:	bf00      	nop
   1198c:	200012bc 	.word	0x200012bc
   11990:	2000142f 	.word	0x2000142f
   11994:	20001232 	.word	0x20001232
   11998:	20001233 	.word	0x20001233
   1199c:	2000123b 	.word	0x2000123b

000119a0 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   119a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a4:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   119a6:	f7ff fb7f 	bl	110a8 <rl_access_check.constprop.1>
   119aa:	2800      	cmp	r0, #0
   119ac:	d053      	beq.n	11a56 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   119ae:	f109 0a01 	add.w	sl, r9, #1
   119b2:	2200      	movs	r2, #0
   119b4:	4651      	mov	r1, sl
   119b6:	f899 0000 	ldrb.w	r0, [r9]
   119ba:	f7ff fd11 	bl	113e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   119be:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   119c0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   119c2:	d84b      	bhi.n	11a5c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   119c4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   119c8:	4c26      	ldr	r4, [pc, #152]	; (11a64 <ll_rl_remove+0xc4>)
   119ca:	fb0b f300 	mul.w	r3, fp, r0
   119ce:	18e2      	adds	r2, r4, r3
   119d0:	5ce3      	ldrb	r3, [r4, r3]
   119d2:	075b      	lsls	r3, r3, #29
   119d4:	d524      	bpl.n	11a20 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   119d6:	4e24      	ldr	r6, [pc, #144]	; (11a68 <ll_rl_remove+0xc8>)
   119d8:	7835      	ldrb	r5, [r6, #0]
   119da:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   119dc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   119e0:	d01b      	beq.n	11a1a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   119e2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   119e4:	42af      	cmp	r7, r5
   119e6:	d018      	beq.n	11a1a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   119e8:	4820      	ldr	r0, [pc, #128]	; (11a6c <ll_rl_remove+0xcc>)
   119ea:	2210      	movs	r2, #16
   119ec:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   119f0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   119f4:	f7f0 f902 	bl	1bfc <memcpy>
   119f8:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   119fa:	fb0b f103 	mul.w	r1, fp, r3
   119fe:	1862      	adds	r2, r4, r1
   11a00:	5c61      	ldrb	r1, [r4, r1]
   11a02:	f011 0f01 	tst.w	r1, #1
   11a06:	b2d8      	uxtb	r0, r3
   11a08:	d021      	beq.n	11a4e <ll_rl_remove+0xae>
   11a0a:	0749      	lsls	r1, r1, #29
   11a0c:	d51f      	bpl.n	11a4e <ll_rl_remove+0xae>
   11a0e:	7dd1      	ldrb	r1, [r2, #23]
   11a10:	42a9      	cmp	r1, r5
   11a12:	d11c      	bne.n	11a4e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11a14:	4b16      	ldr	r3, [pc, #88]	; (11a70 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11a16:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11a18:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   11a1a:	7833      	ldrb	r3, [r6, #0]
   11a1c:	3b01      	subs	r3, #1
   11a1e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11a20:	2200      	movs	r2, #0
   11a22:	4651      	mov	r1, sl
   11a24:	f899 0000 	ldrb.w	r0, [r9]
   11a28:	f7ff facc 	bl	10fc4 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11a2c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11a2e:	bf9f      	itttt	ls
   11a30:	4b10      	ldrls	r3, [pc, #64]	; (11a74 <ll_rl_remove+0xd4>)
   11a32:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   11a36:	23ff      	movls	r3, #255	; 0xff
   11a38:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11a3a:	2028      	movs	r0, #40	; 0x28
   11a3c:	fb00 f008 	mul.w	r0, r0, r8
   11a40:	5c23      	ldrb	r3, [r4, r0]
   11a42:	f36f 0300 	bfc	r3, #0, #1
   11a46:	5423      	strb	r3, [r4, r0]
		return 0;
   11a48:	2000      	movs	r0, #0
   11a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a4e:	3301      	adds	r3, #1
				for (k = 0;
   11a50:	2b08      	cmp	r3, #8
   11a52:	d1d2      	bne.n	119fa <ll_rl_remove+0x5a>
   11a54:	e7e1      	b.n	11a1a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a56:	200c      	movs	r0, #12
   11a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11a5c:	2002      	movs	r0, #2
}
   11a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a62:	bf00      	nop
   11a64:	200012bc 	.word	0x200012bc
   11a68:	20001232 	.word	0x20001232
   11a6c:	2000123b 	.word	0x2000123b
   11a70:	20001233 	.word	0x20001233
   11a74:	2000142f 	.word	0x2000142f

00011a78 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11a78:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11a7a:	795c      	ldrb	r4, [r3, #5]
   11a7c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11a80:	2c40      	cmp	r4, #64	; 0x40
{
   11a82:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11a84:	d117      	bne.n	11ab6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11a86:	b119      	cbz	r1, 11a90 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11a88:	2200      	movs	r2, #0
   11a8a:	f7ff fca9 	bl	113e0 <ll_rl_find>
   11a8e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11a90:	2a07      	cmp	r2, #7
   11a92:	d810      	bhi.n	11ab6 <ll_rl_crpa_set+0x3e>
   11a94:	2128      	movs	r1, #40	; 0x28
   11a96:	4c08      	ldr	r4, [pc, #32]	; (11ab8 <ll_rl_crpa_set+0x40>)
   11a98:	fb01 f302 	mul.w	r3, r1, r2
   11a9c:	5ce3      	ldrb	r3, [r4, r3]
   11a9e:	07db      	lsls	r3, r3, #31
   11aa0:	d509      	bpl.n	11ab6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11aa2:	2018      	movs	r0, #24
   11aa4:	fb11 0002 	smlabb	r0, r1, r2, r0
   11aa8:	4420      	add	r0, r4
   11aaa:	4629      	mov	r1, r5
   11aac:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11ab2:	f7f0 b8a3 	b.w	1bfc <memcpy>
   11ab6:	bd70      	pop	{r4, r5, r6, pc}
   11ab8:	200012bc 	.word	0x200012bc

00011abc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11abc:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11abe:	2200      	movs	r2, #0
{
   11ac0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ac2:	1c41      	adds	r1, r0, #1
   11ac4:	7800      	ldrb	r0, [r0, #0]
   11ac6:	f7ff fc8b 	bl	113e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11aca:	2807      	cmp	r0, #7
   11acc:	d901      	bls.n	11ad2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ace:	2002      	movs	r0, #2
   11ad0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11ad2:	2428      	movs	r4, #40	; 0x28
   11ad4:	2318      	movs	r3, #24
   11ad6:	fb14 3000 	smlabb	r0, r4, r0, r3
   11ada:	4c07      	ldr	r4, [pc, #28]	; (11af8 <ll_rl_crpa_get+0x3c>)
   11adc:	4404      	add	r4, r0
   11ade:	2106      	movs	r1, #6
   11ae0:	4620      	mov	r0, r4
   11ae2:	f7f5 f90e 	bl	6d02 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11ae6:	2800      	cmp	r0, #0
   11ae8:	d0f1      	beq.n	11ace <ll_rl_crpa_get+0x12>
   11aea:	2206      	movs	r2, #6
   11aec:	4621      	mov	r1, r4
   11aee:	4628      	mov	r0, r5
   11af0:	f7f0 f884 	bl	1bfc <memcpy>
			return 0;
   11af4:	2000      	movs	r0, #0
}
   11af6:	bd38      	pop	{r3, r4, r5, pc}
   11af8:	200012bc 	.word	0x200012bc

00011afc <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11afc:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11afe:	2200      	movs	r2, #0
{
   11b00:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11b02:	1c41      	adds	r1, r0, #1
   11b04:	7800      	ldrb	r0, [r0, #0]
   11b06:	f7ff fc6b 	bl	113e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11b0a:	2807      	cmp	r0, #7
   11b0c:	d80a      	bhi.n	11b24 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11b0e:	4b06      	ldr	r3, [pc, #24]	; (11b28 <ll_rl_lrpa_get+0x2c>)
   11b10:	2228      	movs	r2, #40	; 0x28
   11b12:	fb02 3000 	mla	r0, r2, r0, r3
   11b16:	2206      	movs	r2, #6
   11b18:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11b1a:	4620      	mov	r0, r4
   11b1c:	f7f0 f86e 	bl	1bfc <memcpy>
		return 0;
   11b20:	2000      	movs	r0, #0
   11b22:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11b24:	2002      	movs	r0, #2
}
   11b26:	bd10      	pop	{r4, pc}
   11b28:	200012bc 	.word	0x200012bc

00011b2c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11b2c:	b510      	push	{r4, lr}
   11b2e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11b30:	f7ff faba 	bl	110a8 <rl_access_check.constprop.1>
   11b34:	b140      	cbz	r0, 11b48 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11b36:	b11c      	cbz	r4, 11b40 <ll_rl_enable+0x14>
   11b38:	2c01      	cmp	r4, #1
   11b3a:	d001      	beq.n	11b40 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11b3c:	2012      	movs	r0, #18
	}

	return 0;
}
   11b3e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11b40:	4b02      	ldr	r3, [pc, #8]	; (11b4c <ll_rl_enable+0x20>)
   11b42:	701c      	strb	r4, [r3, #0]
	return 0;
   11b44:	2000      	movs	r0, #0
		break;
   11b46:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b48:	200c      	movs	r0, #12
   11b4a:	bd10      	pop	{r4, pc}
   11b4c:	200013fc 	.word	0x200013fc

00011b50 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11b54:	4358      	muls	r0, r3
   11b56:	4b01      	ldr	r3, [pc, #4]	; (11b5c <ll_rl_timeout_set+0xc>)
   11b58:	6018      	str	r0, [r3, #0]
   11b5a:	4770      	bx	lr
   11b5c:	2000194c 	.word	0x2000194c

00011b60 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   11b60:	b538      	push	{r3, r4, r5, lr}
   11b62:	4605      	mov	r5, r0
   11b64:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   11b66:	f7ff fa9f 	bl	110a8 <rl_access_check.constprop.1>
   11b6a:	b1d8      	cbz	r0, 11ba4 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11b6c:	2200      	movs	r2, #0
   11b6e:	1c69      	adds	r1, r5, #1
   11b70:	7828      	ldrb	r0, [r5, #0]
   11b72:	f7ff fc35 	bl	113e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11b76:	2807      	cmp	r0, #7
   11b78:	d816      	bhi.n	11ba8 <ll_priv_mode_set+0x48>
		switch (mode) {
   11b7a:	b11c      	cbz	r4, 11b84 <ll_priv_mode_set+0x24>
   11b7c:	2c01      	cmp	r4, #1
   11b7e:	d00a      	beq.n	11b96 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11b80:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11b82:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11b84:	2328      	movs	r3, #40	; 0x28
   11b86:	4a09      	ldr	r2, [pc, #36]	; (11bac <ll_priv_mode_set+0x4c>)
   11b88:	4358      	muls	r0, r3
   11b8a:	5c13      	ldrb	r3, [r2, r0]
   11b8c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11b90:	5413      	strb	r3, [r2, r0]
	return 0;
   11b92:	2000      	movs	r0, #0
			break;
   11b94:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11b96:	2328      	movs	r3, #40	; 0x28
   11b98:	4a04      	ldr	r2, [pc, #16]	; (11bac <ll_priv_mode_set+0x4c>)
   11b9a:	4358      	muls	r0, r3
   11b9c:	5c13      	ldrb	r3, [r2, r0]
   11b9e:	f043 0310 	orr.w	r3, r3, #16
   11ba2:	e7f5      	b.n	11b90 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11ba4:	200c      	movs	r0, #12
   11ba6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ba8:	2002      	movs	r0, #2
   11baa:	bd38      	pop	{r3, r4, r5, pc}
   11bac:	200012bc 	.word	0x200012bc

00011bb0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11bb0:	4a19      	ldr	r2, [pc, #100]	; (11c18 <ll_filter_reset+0x68>)
   11bb2:	2300      	movs	r3, #0
{
   11bb4:	b430      	push	{r4, r5}
	wl_anon = 0;
   11bb6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11bb8:	4a18      	ldr	r2, [pc, #96]	; (11c1c <ll_filter_reset+0x6c>)
   11bba:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11bbe:	f36f 0100 	bfc	r1, #0, #1
   11bc2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11bc6:	3301      	adds	r3, #1
   11bc8:	2b08      	cmp	r3, #8
   11bca:	d1f6      	bne.n	11bba <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11bcc:	4a14      	ldr	r2, [pc, #80]	; (11c20 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11bce:	4915      	ldr	r1, [pc, #84]	; (11c24 <ll_filter_reset+0x74>)
	rl_enable = 0;
   11bd0:	2300      	movs	r3, #0
   11bd2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11bd4:	4a14      	ldr	r2, [pc, #80]	; (11c28 <ll_filter_reset+0x78>)
   11bd6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11bd8:	4a14      	ldr	r2, [pc, #80]	; (11c2c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11bda:	4915      	ldr	r1, [pc, #84]	; (11c30 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11bdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11be4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11be8:	2528      	movs	r5, #40	; 0x28
   11bea:	fb05 f203 	mul.w	r2, r5, r3
   11bee:	3301      	adds	r3, #1
   11bf0:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11bf2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11bf4:	f36f 0400 	bfc	r4, #0, #1
   11bf8:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11bfa:	d1f6      	bne.n	11bea <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   11bfc:	4b0d      	ldr	r3, [pc, #52]	; (11c34 <ll_filter_reset+0x84>)
   11bfe:	2200      	movs	r2, #0
   11c00:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   11c02:	b120      	cbz	r0, 11c0e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11c04:	490c      	ldr	r1, [pc, #48]	; (11c38 <ll_filter_reset+0x88>)
   11c06:	480d      	ldr	r0, [pc, #52]	; (11c3c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   11c08:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   11c0a:	f002 ba4b 	b.w	140a4 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   11c0e:	480b      	ldr	r0, [pc, #44]	; (11c3c <ll_filter_reset+0x8c>)
}
   11c10:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   11c12:	f002 ba57 	b.w	140c4 <k_delayed_work_cancel>
   11c16:	bf00      	nop
   11c18:	20001920 	.word	0x20001920
   11c1c:	2000142f 	.word	0x2000142f
   11c20:	200013fc 	.word	0x200013fc
   11c24:	000dbba0 	.word	0x000dbba0
   11c28:	2000194c 	.word	0x2000194c
   11c2c:	20001918 	.word	0x20001918
   11c30:	200012bc 	.word	0x200012bc
   11c34:	20001232 	.word	0x20001232
   11c38:	000117d1 	.word	0x000117d1
   11c3c:	20001924 	.word	0x20001924

00011c40 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   11c40:	4b05      	ldr	r3, [pc, #20]	; (11c58 <cntr_init+0x18>)
   11c42:	2200      	movs	r2, #0
   11c44:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   11c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   11c4c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   11c50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   11c54:	4770      	bx	lr
   11c56:	bf00      	nop
   11c58:	4000b000 	.word	0x4000b000

00011c5c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   11c5c:	4a04      	ldr	r2, [pc, #16]	; (11c70 <cntr_start+0x14>)
   11c5e:	7813      	ldrb	r3, [r2, #0]
   11c60:	1c59      	adds	r1, r3, #1
   11c62:	7011      	strb	r1, [r2, #0]
   11c64:	2001      	movs	r0, #1
   11c66:	b913      	cbnz	r3, 11c6e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   11c68:	4a02      	ldr	r2, [pc, #8]	; (11c74 <cntr_start+0x18>)
   11c6a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   11c6c:	4618      	mov	r0, r3
}
   11c6e:	4770      	bx	lr
   11c70:	200014a1 	.word	0x200014a1
   11c74:	4000b000 	.word	0x4000b000

00011c78 <cntr_stop>:

u32_t cntr_stop(void)
{
   11c78:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   11c7a:	4b0f      	ldr	r3, [pc, #60]	; (11cb8 <cntr_stop+0x40>)
   11c7c:	7818      	ldrb	r0, [r3, #0]
   11c7e:	b970      	cbnz	r0, 11c9e <cntr_stop+0x26>
   11c80:	4b0e      	ldr	r3, [pc, #56]	; (11cbc <cntr_stop+0x44>)
   11c82:	9301      	str	r3, [sp, #4]
   11c84:	9300      	str	r3, [sp, #0]
   11c86:	4a0e      	ldr	r2, [pc, #56]	; (11cc0 <cntr_stop+0x48>)
   11c88:	4b0e      	ldr	r3, [pc, #56]	; (11cc4 <cntr_stop+0x4c>)
   11c8a:	490f      	ldr	r1, [pc, #60]	; (11cc8 <cntr_stop+0x50>)
   11c8c:	480f      	ldr	r0, [pc, #60]	; (11ccc <cntr_stop+0x54>)
   11c8e:	f7ef f97d 	bl	f8c <printk>
   11c92:	4040      	eors	r0, r0
   11c94:	f380 8811 	msr	BASEPRI, r0
   11c98:	f04f 0004 	mov.w	r0, #4
   11c9c:	df02      	svc	2

	if (--_refcount) {
   11c9e:	3801      	subs	r0, #1
   11ca0:	b2c0      	uxtb	r0, r0
   11ca2:	7018      	strb	r0, [r3, #0]
   11ca4:	2301      	movs	r3, #1
   11ca6:	b920      	cbnz	r0, 11cb2 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   11ca8:	4a09      	ldr	r2, [pc, #36]	; (11cd0 <cntr_stop+0x58>)
   11caa:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   11cac:	b003      	add	sp, #12
   11cae:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   11cb2:	4618      	mov	r0, r3
   11cb4:	e7fa      	b.n	11cac <cntr_stop+0x34>
   11cb6:	bf00      	nop
   11cb8:	200014a1 	.word	0x200014a1
   11cbc:	00014645 	.word	0x00014645
   11cc0:	00015394 	.word	0x00015394
   11cc4:	0001796f 	.word	0x0001796f
   11cc8:	000153e3 	.word	0x000153e3
   11ccc:	00017979 	.word	0x00017979
   11cd0:	4000b000 	.word	0x4000b000

00011cd4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   11cd4:	4b01      	ldr	r3, [pc, #4]	; (11cdc <cntr_cnt_get+0x8>)
   11cd6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   11cda:	4770      	bx	lr
   11cdc:	4000b000 	.word	0x4000b000

00011ce0 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   11ce0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11ce4:	4b01      	ldr	r3, [pc, #4]	; (11cec <cntr_cmp_set+0xc>)
   11ce6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   11cea:	4770      	bx	lr
   11cec:	4000b000 	.word	0x4000b000

00011cf0 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   11cf0:	4b11      	ldr	r3, [pc, #68]	; (11d38 <do_ecb+0x48>)
{
   11cf2:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   11cf4:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   11cf6:	2500      	movs	r5, #0
   11cf8:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   11cfa:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11cfc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   11d00:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   11d04:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   11d08:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11d0a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   11d0e:	b934      	cbnz	r4, 11d1e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11d10:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   11d14:	b91c      	cbnz	r4, 11d1e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   11d16:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   11d1a:	2c00      	cmp	r4, #0
   11d1c:	d1f5      	bne.n	11d0a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   11d1e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   11d20:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   11d24:	2c00      	cmp	r4, #0
   11d26:	d1e8      	bne.n	11cfa <do_ecb+0xa>
   11d28:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   11d2c:	2e00      	cmp	r6, #0
   11d2e:	d0e4      	beq.n	11cfa <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   11d30:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   11d34:	bd70      	pop	{r4, r5, r6, pc}
   11d36:	bf00      	nop
   11d38:	4000e000 	.word	0x4000e000

00011d3c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   11d3c:	b570      	push	{r4, r5, r6, lr}
   11d3e:	b08c      	sub	sp, #48	; 0x30
   11d40:	460e      	mov	r6, r1
   11d42:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11d44:	4601      	mov	r1, r0
   11d46:	2210      	movs	r2, #16
   11d48:	4668      	mov	r0, sp
{
   11d4a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   11d4c:	f7f4 ffca 	bl	6ce4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   11d50:	2210      	movs	r2, #16
   11d52:	eb0d 0002 	add.w	r0, sp, r2
   11d56:	4631      	mov	r1, r6
   11d58:	f7f4 ffc4 	bl	6ce4 <mem_rcopy>

	do_ecb(&ecb);
   11d5c:	4668      	mov	r0, sp
   11d5e:	f7ff ffc7 	bl	11cf0 <do_ecb>

	if (cipher_text_le) {
   11d62:	b125      	cbz	r5, 11d6e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11d64:	2210      	movs	r2, #16
   11d66:	a908      	add	r1, sp, #32
   11d68:	4628      	mov	r0, r5
   11d6a:	f7f4 ffbb 	bl	6ce4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   11d6e:	b124      	cbz	r4, 11d7a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   11d70:	2210      	movs	r2, #16
   11d72:	a908      	add	r1, sp, #32
   11d74:	4620      	mov	r0, r4
   11d76:	f7ef ff41 	bl	1bfc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   11d7a:	b00c      	add	sp, #48	; 0x30
   11d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00011d80 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   11d80:	4b07      	ldr	r3, [pc, #28]	; (11da0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   11d82:	4a08      	ldr	r2, [pc, #32]	; (11da4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   11d84:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   11d88:	4907      	ldr	r1, [pc, #28]	; (11da8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   11d8a:	4a08      	ldr	r2, [pc, #32]	; (11dac <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   11d8c:	2800      	cmp	r0, #0
   11d8e:	bf14      	ite	ne
   11d90:	4610      	movne	r0, r2
   11d92:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11d94:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   11d96:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   11d9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11d9e:	4770      	bx	lr
   11da0:	4001f000 	.word	0x4001f000
   11da4:	40008140 	.word	0x40008140
   11da8:	40001004 	.word	0x40001004
   11dac:	40001000 	.word	0x40001000

00011db0 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   11db0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11db2:	4e2c      	ldr	r6, [pc, #176]	; (11e64 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11db4:	4f2c      	ldr	r7, [pc, #176]	; (11e68 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11db6:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   11db8:	4b2c      	ldr	r3, [pc, #176]	; (11e6c <sw_switch.isra.9+0xbc>)
   11dba:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   11dbe:	b22b      	sxth	r3, r5
   11dc0:	00dc      	lsls	r4, r3, #3
   11dc2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11dc6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   11dca:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   11dce:	f105 040b 	add.w	r4, r5, #11
   11dd2:	b2e4      	uxtb	r4, r4
   11dd4:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   11dd6:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   11dda:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   11dde:	3fc0      	subs	r7, #192	; 0xc0
   11de0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   11de4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   11de8:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   11dec:	2800      	cmp	r0, #0
   11dee:	d034      	beq.n	11e5a <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   11df0:	f24a 075a 	movw	r7, #41050	; 0xa05a
   11df4:	f649 4040 	movw	r0, #40000	; 0x9c40
   11df8:	2a02      	cmp	r2, #2
   11dfa:	bf0c      	ite	eq
   11dfc:	4602      	moveq	r2, r0
   11dfe:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   11e00:	f242 47b8 	movw	r7, #9400	; 0x24b8
   11e04:	f241 504a 	movw	r0, #5450	; 0x154a
   11e08:	2902      	cmp	r1, #2
   11e0a:	bf18      	it	ne
   11e0c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11e0e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   11e12:	4401      	add	r1, r0
   11e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e18:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11e1c:	4a14      	ldr	r2, [pc, #80]	; (11e70 <sw_switch.isra.9+0xc0>)
   11e1e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   11e22:	009b      	lsls	r3, r3, #2
   11e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11e28:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   11e2c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   11e30:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11e32:	bf8b      	itete	hi
   11e34:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   11e38:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11e3a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   11e3c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   11e40:	bf88      	it	hi
   11e42:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   11e46:	4b08      	ldr	r3, [pc, #32]	; (11e68 <sw_switch.isra.9+0xb8>)
   11e48:	f44f 6290 	mov.w	r2, #1152	; 0x480
   11e4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   11e50:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   11e52:	f003 0301 	and.w	r3, r3, #1
   11e56:	7033      	strb	r3, [r6, #0]
   11e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   11e5a:	4a06      	ldr	r2, [pc, #24]	; (11e74 <sw_switch.isra.9+0xc4>)
   11e5c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   11e60:	212d      	movs	r1, #45	; 0x2d
   11e62:	e7de      	b.n	11e22 <sw_switch.isra.9+0x72>
   11e64:	200016c4 	.word	0x200016c4
   11e68:	4001f000 	.word	0x4001f000
   11e6c:	4000110c 	.word	0x4000110c
   11e70:	40001000 	.word	0x40001000
   11e74:	40001004 	.word	0x40001004

00011e78 <isr_radio>:
	if (sfp_radio_isr) {
   11e78:	4b02      	ldr	r3, [pc, #8]	; (11e84 <isr_radio+0xc>)
   11e7a:	681b      	ldr	r3, [r3, #0]
   11e7c:	b103      	cbz	r3, 11e80 <isr_radio+0x8>
		sfp_radio_isr();
   11e7e:	4718      	bx	r3
   11e80:	4770      	bx	lr
   11e82:	bf00      	nop
   11e84:	200016c0 	.word	0x200016c0

00011e88 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   11e88:	4b06      	ldr	r3, [pc, #24]	; (11ea4 <radio_isr_set+0x1c>)
   11e8a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   11e8c:	4b06      	ldr	r3, [pc, #24]	; (11ea8 <radio_isr_set+0x20>)
   11e8e:	2210      	movs	r2, #16
   11e90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11e94:	4b05      	ldr	r3, [pc, #20]	; (11eac <radio_isr_set+0x24>)
   11e96:	2202      	movs	r2, #2
   11e98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   11e9c:	2001      	movs	r0, #1
   11e9e:	f7ef bcdb 	b.w	1858 <_arch_irq_enable>
   11ea2:	bf00      	nop
   11ea4:	200016c0 	.word	0x200016c0
   11ea8:	40001000 	.word	0x40001000
   11eac:	e000e100 	.word	0xe000e100

00011eb0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11eb8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   11eba:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   11ebe:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   11ec2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   11ec6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   11eca:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   11ece:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   11ed2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   11ed6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   11eda:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   11ede:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   11ee2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   11ee6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   11eea:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   11eee:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   11ef2:	4770      	bx	lr

00011ef4 <radio_reset>:
{
   11ef4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   11ef6:	2001      	movs	r0, #1
   11ef8:	f7ef fcbe 	bl	1878 <_arch_irq_disable>
	NRF_RADIO->POWER =
   11efc:	4b08      	ldr	r3, [pc, #32]	; (11f20 <radio_reset+0x2c>)
   11efe:	2200      	movs	r2, #0
   11f00:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   11f04:	2201      	movs	r2, #1
   11f06:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11f0a:	4a06      	ldr	r2, [pc, #24]	; (11f24 <radio_reset+0x30>)
   11f0c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   11f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11f12:	f023 0301 	bic.w	r3, r3, #1
   11f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11f1a:	6013      	str	r3, [r2, #0]
   11f1c:	bd08      	pop	{r3, pc}
   11f1e:	bf00      	nop
   11f20:	40001000 	.word	0x40001000
   11f24:	40001774 	.word	0x40001774

00011f28 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   11f28:	4b06      	ldr	r3, [pc, #24]	; (11f44 <radio_phy_set+0x1c>)
	switch (phy) {
   11f2a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   11f2c:	bf0c      	ite	eq
   11f2e:	2204      	moveq	r2, #4
   11f30:	2203      	movne	r2, #3
   11f32:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   11f36:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11f3a:	f042 0201 	orr.w	r2, r2, #1
   11f3e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   11f42:	4770      	bx	lr
   11f44:	40001000 	.word	0x40001000

00011f48 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   11f48:	4b01      	ldr	r3, [pc, #4]	; (11f50 <radio_tx_power_set+0x8>)
   11f4a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   11f4e:	4770      	bx	lr
   11f50:	40001000 	.word	0x40001000

00011f54 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   11f54:	4b01      	ldr	r3, [pc, #4]	; (11f5c <radio_freq_chan_set+0x8>)
   11f56:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   11f5a:	4770      	bx	lr
   11f5c:	40001000 	.word	0x40001000

00011f60 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   11f60:	4b07      	ldr	r3, [pc, #28]	; (11f80 <radio_whiten_iv_set+0x20>)
   11f62:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   11f66:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11f6a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   11f6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   11f72:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   11f76:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   11f7a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   11f7e:	4770      	bx	lr
   11f80:	40001000 	.word	0x40001000

00011f84 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   11f84:	4a0a      	ldr	r2, [pc, #40]	; (11fb0 <radio_aa_set+0x2c>)
   11f86:	2300      	movs	r3, #0
   11f88:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11f8c:	2301      	movs	r3, #1
   11f8e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11f92:	78c3      	ldrb	r3, [r0, #3]
   11f94:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11f98:	7843      	ldrb	r3, [r0, #1]
   11f9a:	7881      	ldrb	r1, [r0, #2]
   11f9c:	041b      	lsls	r3, r3, #16
   11f9e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11fa2:	7801      	ldrb	r1, [r0, #0]
   11fa4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   11fa8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   11fac:	4770      	bx	lr
   11fae:	bf00      	nop
   11fb0:	40001000 	.word	0x40001000

00011fb4 <radio_pkt_configure>:
	switch (phy) {
   11fb4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11fb8:	2b02      	cmp	r3, #2
{
   11fba:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   11fbc:	bf0c      	ite	eq
   11fbe:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   11fc2:	2400      	movne	r4, #0
	if (dc) {
   11fc4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11fc6:	f1c0 0308 	rsb	r3, r0, #8
   11fca:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   11fce:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   11fd2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11fd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11fda:	4a0b      	ldr	r2, [pc, #44]	; (12008 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   11fdc:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11fe0:	bf48      	it	mi
   11fe2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   11fe6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11fe8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11fec:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   11ff0:	4b06      	ldr	r3, [pc, #24]	; (1200c <radio_pkt_configure+0x58>)
   11ff2:	4003      	ands	r3, r0
   11ff4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   11ff8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11ffc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12000:	4319      	orrs	r1, r3
   12002:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12006:	bd10      	pop	{r4, pc}
   12008:	40001000 	.word	0x40001000
   1200c:	fef80000 	.word	0xfef80000

00012010 <radio_pkt_rx_set>:
   12010:	4b01      	ldr	r3, [pc, #4]	; (12018 <radio_pkt_rx_set+0x8>)
   12012:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12016:	4770      	bx	lr
   12018:	40001000 	.word	0x40001000

0001201c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   1201c:	4b01      	ldr	r3, [pc, #4]	; (12024 <radio_pkt_tx_set+0x8>)
   1201e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12022:	4770      	bx	lr
   12024:	40001000 	.word	0x40001000

00012028 <radio_tx_ready_delay_get>:
	switch (phy) {
   12028:	2802      	cmp	r0, #2
}
   1202a:	bf0c      	ite	eq
   1202c:	2028      	moveq	r0, #40	; 0x28
   1202e:	2029      	movne	r0, #41	; 0x29
   12030:	4770      	bx	lr

00012032 <radio_tx_chain_delay_get>:
}
   12032:	2001      	movs	r0, #1
   12034:	4770      	bx	lr

00012036 <radio_rx_ready_delay_get>:
}
   12036:	2029      	movs	r0, #41	; 0x29
   12038:	4770      	bx	lr

0001203a <radio_rx_chain_delay_get>:
	switch (phy) {
   1203a:	2802      	cmp	r0, #2
}
   1203c:	bf0c      	ite	eq
   1203e:	2006      	moveq	r0, #6
   12040:	200a      	movne	r0, #10
   12042:	4770      	bx	lr

00012044 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12044:	4b01      	ldr	r3, [pc, #4]	; (1204c <radio_rx_enable+0x8>)
   12046:	2201      	movs	r2, #1
   12048:	605a      	str	r2, [r3, #4]
   1204a:	4770      	bx	lr
   1204c:	40001000 	.word	0x40001000

00012050 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12050:	4b01      	ldr	r3, [pc, #4]	; (12058 <radio_tx_enable+0x8>)
   12052:	2201      	movs	r2, #1
   12054:	601a      	str	r2, [r3, #0]
   12056:	4770      	bx	lr
   12058:	40001000 	.word	0x40001000

0001205c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   1205c:	4a07      	ldr	r2, [pc, #28]	; (1207c <radio_disable+0x20>)
   1205e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12062:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12066:	2301      	movs	r3, #1
   12068:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1206a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1206c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12070:	2100      	movs	r1, #0
   12072:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12076:	6113      	str	r3, [r2, #16]
   12078:	4770      	bx	lr
   1207a:	bf00      	nop
   1207c:	4001f000 	.word	0x4001f000

00012080 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12080:	4b04      	ldr	r3, [pc, #16]	; (12094 <radio_status_reset+0x14>)
   12082:	2200      	movs	r2, #0
   12084:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12088:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1208c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12090:	4770      	bx	lr
   12092:	bf00      	nop
   12094:	40001000 	.word	0x40001000

00012098 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12098:	4b03      	ldr	r3, [pc, #12]	; (120a8 <radio_is_ready+0x10>)
   1209a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1209e:	3000      	adds	r0, #0
   120a0:	bf18      	it	ne
   120a2:	2001      	movne	r0, #1
   120a4:	4770      	bx	lr
   120a6:	bf00      	nop
   120a8:	40001000 	.word	0x40001000

000120ac <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   120ac:	4b03      	ldr	r3, [pc, #12]	; (120bc <radio_is_done+0x10>)
   120ae:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   120b2:	3000      	adds	r0, #0
   120b4:	bf18      	it	ne
   120b6:	2001      	movne	r0, #1
   120b8:	4770      	bx	lr
   120ba:	bf00      	nop
   120bc:	40001000 	.word	0x40001000

000120c0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   120c0:	4b03      	ldr	r3, [pc, #12]	; (120d0 <radio_is_idle+0x10>)
   120c2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   120c6:	fab0 f080 	clz	r0, r0
   120ca:	0940      	lsrs	r0, r0, #5
   120cc:	4770      	bx	lr
   120ce:	bf00      	nop
   120d0:	40001000 	.word	0x40001000

000120d4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   120d4:	4b04      	ldr	r3, [pc, #16]	; (120e8 <radio_crc_configure+0x14>)
   120d6:	f240 1203 	movw	r2, #259	; 0x103
   120da:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   120de:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   120e2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   120e6:	4770      	bx	lr
   120e8:	40001000 	.word	0x40001000

000120ec <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   120ec:	4b03      	ldr	r3, [pc, #12]	; (120fc <radio_crc_is_valid+0x10>)
   120ee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   120f2:	3000      	adds	r0, #0
   120f4:	bf18      	it	ne
   120f6:	2001      	movne	r0, #1
   120f8:	4770      	bx	lr
   120fa:	bf00      	nop
   120fc:	40001000 	.word	0x40001000

00012100 <radio_pkt_empty_get>:
}
   12100:	4800      	ldr	r0, [pc, #0]	; (12104 <radio_pkt_empty_get+0x4>)
   12102:	4770      	bx	lr
   12104:	200015b4 	.word	0x200015b4

00012108 <radio_pkt_scratch_get>:
}
   12108:	4800      	ldr	r0, [pc, #0]	; (1210c <radio_pkt_scratch_get+0x4>)
   1210a:	4770      	bx	lr
   1210c:	200015b8 	.word	0x200015b8

00012110 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12110:	4b04      	ldr	r3, [pc, #16]	; (12124 <radio_switch_complete_and_rx+0x14>)
   12112:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12114:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1211a:	4602      	mov	r2, r0
   1211c:	4608      	mov	r0, r1
   1211e:	f7ff be47 	b.w	11db0 <sw_switch.isra.9>
   12122:	bf00      	nop
   12124:	40001000 	.word	0x40001000

00012128 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12128:	4b03      	ldr	r3, [pc, #12]	; (12138 <radio_switch_complete_and_tx+0x10>)
   1212a:	2103      	movs	r1, #3
   1212c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12130:	4601      	mov	r1, r0
   12132:	2001      	movs	r0, #1
   12134:	f7ff be3c 	b.w	11db0 <sw_switch.isra.9>
   12138:	40001000 	.word	0x40001000

0001213c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1213c:	4b05      	ldr	r3, [pc, #20]	; (12154 <radio_switch_complete_and_disable+0x18>)
   1213e:	2203      	movs	r2, #3
   12140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12144:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12148:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1214c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12150:	4770      	bx	lr
   12152:	bf00      	nop
   12154:	40001000 	.word	0x40001000

00012158 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12158:	4a03      	ldr	r2, [pc, #12]	; (12168 <radio_rssi_measure+0x10>)
   1215a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1215e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12162:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12166:	4770      	bx	lr
   12168:	40001000 	.word	0x40001000

0001216c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1216c:	4b01      	ldr	r3, [pc, #4]	; (12174 <radio_rssi_get+0x8>)
   1216e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12172:	4770      	bx	lr
   12174:	40001000 	.word	0x40001000

00012178 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12178:	4b02      	ldr	r3, [pc, #8]	; (12184 <radio_rssi_status_reset+0xc>)
   1217a:	2200      	movs	r2, #0
   1217c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12180:	4770      	bx	lr
   12182:	bf00      	nop
   12184:	40001000 	.word	0x40001000

00012188 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12188:	4b03      	ldr	r3, [pc, #12]	; (12198 <radio_rssi_is_ready+0x10>)
   1218a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1218e:	3000      	adds	r0, #0
   12190:	bf18      	it	ne
   12192:	2001      	movne	r0, #1
   12194:	4770      	bx	lr
   12196:	bf00      	nop
   12198:	40001000 	.word	0x40001000

0001219c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   1219c:	b530      	push	{r4, r5, lr}
   1219e:	2400      	movs	r4, #0
   121a0:	00a3      	lsls	r3, r4, #2
   121a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   121a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   121aa:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   121ac:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   121b0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   121b2:	8895      	ldrh	r5, [r2, #4]
   121b4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   121b8:	2c08      	cmp	r4, #8
		bdaddr += 6;
   121ba:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   121be:	d1ef      	bne.n	121a0 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   121c0:	4b02      	ldr	r3, [pc, #8]	; (121cc <radio_filter_configure+0x30>)
   121c2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   121c6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   121ca:	bd30      	pop	{r4, r5, pc}
   121cc:	40001000 	.word	0x40001000

000121d0 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   121d0:	4a03      	ldr	r2, [pc, #12]	; (121e0 <radio_filter_disable+0x10>)
   121d2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   121d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   121da:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   121de:	4770      	bx	lr
   121e0:	40001000 	.word	0x40001000

000121e4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   121e4:	4b02      	ldr	r3, [pc, #8]	; (121f0 <radio_filter_status_reset+0xc>)
   121e6:	2200      	movs	r2, #0
   121e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   121ec:	4770      	bx	lr
   121ee:	bf00      	nop
   121f0:	40001000 	.word	0x40001000

000121f4 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   121f4:	4b03      	ldr	r3, [pc, #12]	; (12204 <radio_filter_has_match+0x10>)
   121f6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   121fa:	3000      	adds	r0, #0
   121fc:	bf18      	it	ne
   121fe:	2001      	movne	r0, #1
   12200:	4770      	bx	lr
   12202:	bf00      	nop
   12204:	40001000 	.word	0x40001000

00012208 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12208:	4b01      	ldr	r3, [pc, #4]	; (12210 <radio_filter_match_get+0x8>)
   1220a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1220e:	4770      	bx	lr
   12210:	40001000 	.word	0x40001000

00012214 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12214:	4b04      	ldr	r3, [pc, #16]	; (12228 <radio_bc_configure+0x14>)
   12216:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1221a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1221e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12222:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12226:	4770      	bx	lr
   12228:	40001000 	.word	0x40001000

0001222c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   1222c:	4b05      	ldr	r3, [pc, #20]	; (12244 <radio_tmr_status_reset+0x18>)
   1222e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12232:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12236:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1223a:	227f      	movs	r2, #127	; 0x7f
   1223c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12240:	4770      	bx	lr
   12242:	bf00      	nop
   12244:	4000b000 	.word	0x4000b000

00012248 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12248:	4b03      	ldr	r3, [pc, #12]	; (12258 <radio_tmr_tifs_set+0x10>)
   1224a:	4a04      	ldr	r2, [pc, #16]	; (1225c <radio_tmr_tifs_set+0x14>)
   1224c:	781b      	ldrb	r3, [r3, #0]
   1224e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12252:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12256:	4770      	bx	lr
   12258:	200016c4 	.word	0x200016c4
   1225c:	40009000 	.word	0x40009000

00012260 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12264:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12268:	4c30      	ldr	r4, [pc, #192]	; (1232c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   1226a:	4d31      	ldr	r5, [pc, #196]	; (12330 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1226c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12270:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12272:	bf88      	it	hi
   12274:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12278:	4b2e      	ldr	r3, [pc, #184]	; (12334 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   1227a:	4c2f      	ldr	r4, [pc, #188]	; (12338 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   1227c:	bf82      	ittt	hi
   1227e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12282:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12286:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   1228a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   1228c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   12290:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12292:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12294:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12298:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   1229a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1229e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   122a2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   122a6:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   122aa:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   122ae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   122b2:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   122b6:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   122ba:	4920      	ldr	r1, [pc, #128]	; (1233c <radio_tmr_start+0xdc>)
   122bc:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   122c0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   122c4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   122c8:	f7ff fd5a 	bl	11d80 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   122cc:	4b1c      	ldr	r3, [pc, #112]	; (12340 <radio_tmr_start+0xe0>)
   122ce:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   122d0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   122d4:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   122d8:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   122dc:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   122de:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   122e2:	3b74      	subs	r3, #116	; 0x74
   122e4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   122e8:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   122ec:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   122f0:	f503 739a 	add.w	r3, r3, #308	; 0x134
   122f4:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   122f8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   122fc:	33c4      	adds	r3, #196	; 0xc4
   122fe:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12302:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   12306:	3bc0      	subs	r3, #192	; 0xc0
   12308:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1230c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12310:	33c8      	adds	r3, #200	; 0xc8
   12312:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12316:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1231a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1231e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12322:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   12326:	4628      	mov	r0, r5
   12328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1232c:	7ff0bdbf 	.word	0x7ff0bdbf
   12330:	000f4240 	.word	0x000f4240
   12334:	40008000 	.word	0x40008000
   12338:	4000b000 	.word	0x4000b000
   1233c:	4000b148 	.word	0x4000b148
   12340:	40009000 	.word	0x40009000

00012344 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12344:	4a04      	ldr	r2, [pc, #16]	; (12358 <radio_tmr_stop+0x14>)
   12346:	2301      	movs	r3, #1
   12348:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1234a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   1234c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12350:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   12352:	6113      	str	r3, [r2, #16]
   12354:	4770      	bx	lr
   12356:	bf00      	nop
   12358:	40008000 	.word	0x40008000

0001235c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   1235c:	4b0c      	ldr	r3, [pc, #48]	; (12390 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1235e:	4a0d      	ldr	r2, [pc, #52]	; (12394 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12360:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12364:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12368:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   1236c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12370:	3240      	adds	r2, #64	; 0x40
   12372:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   12376:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1237a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1237e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12382:	3a34      	subs	r2, #52	; 0x34
   12384:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12388:	2218      	movs	r2, #24
   1238a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1238e:	4770      	bx	lr
   12390:	40008000 	.word	0x40008000
   12394:	40001104 	.word	0x40001104

00012398 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12398:	4b0b      	ldr	r3, [pc, #44]	; (123c8 <radio_tmr_aa_capture+0x30>)
   1239a:	4a0c      	ldr	r2, [pc, #48]	; (123cc <radio_tmr_aa_capture+0x34>)
   1239c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   123a0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   123a4:	3240      	adds	r2, #64	; 0x40
   123a6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   123aa:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   123ae:	3a3c      	subs	r2, #60	; 0x3c
   123b0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   123b4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   123b8:	3240      	adds	r2, #64	; 0x40
   123ba:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   123be:	220c      	movs	r2, #12
   123c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   123c4:	4770      	bx	lr
   123c6:	bf00      	nop
   123c8:	4001f000 	.word	0x4001f000
   123cc:	40001100 	.word	0x40001100

000123d0 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   123d0:	4b01      	ldr	r3, [pc, #4]	; (123d8 <radio_tmr_aa_get+0x8>)
   123d2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   123d6:	4770      	bx	lr
   123d8:	40008000 	.word	0x40008000

000123dc <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   123dc:	4b01      	ldr	r3, [pc, #4]	; (123e4 <radio_tmr_aa_save+0x8>)
   123de:	6018      	str	r0, [r3, #0]
   123e0:	4770      	bx	lr
   123e2:	bf00      	nop
   123e4:	200016bc 	.word	0x200016bc

000123e8 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   123e8:	4b01      	ldr	r3, [pc, #4]	; (123f0 <radio_tmr_aa_restore+0x8>)
   123ea:	6818      	ldr	r0, [r3, #0]
   123ec:	4770      	bx	lr
   123ee:	bf00      	nop
   123f0:	200016bc 	.word	0x200016bc

000123f4 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   123f4:	4b01      	ldr	r3, [pc, #4]	; (123fc <radio_tmr_ready_get+0x8>)
   123f6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   123fa:	4770      	bx	lr
   123fc:	40008000 	.word	0x40008000

00012400 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12400:	4b06      	ldr	r3, [pc, #24]	; (1241c <radio_tmr_end_capture+0x1c>)
   12402:	4a07      	ldr	r2, [pc, #28]	; (12420 <radio_tmr_end_capture+0x20>)
   12404:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12408:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1240c:	323c      	adds	r2, #60	; 0x3c
   1240e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12412:	2220      	movs	r2, #32
   12414:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12418:	4770      	bx	lr
   1241a:	bf00      	nop
   1241c:	4001f000 	.word	0x4001f000
   12420:	4000110c 	.word	0x4000110c

00012424 <radio_tmr_end_get>:
   12424:	4b01      	ldr	r3, [pc, #4]	; (1242c <radio_tmr_end_get+0x8>)
   12426:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1242a:	4770      	bx	lr
   1242c:	40008000 	.word	0x40008000

00012430 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12430:	4b01      	ldr	r3, [pc, #4]	; (12438 <radio_tmr_tifs_base_get+0x8>)
   12432:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   12436:	4770      	bx	lr
   12438:	40008000 	.word	0x40008000

0001243c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1243c:	4b16      	ldr	r3, [pc, #88]	; (12498 <radio_ccm_rx_pkt_set+0x5c>)
{
   1243e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12440:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12442:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12444:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12448:	4e14      	ldr	r6, [pc, #80]	; (1249c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1244a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1244e:	4d14      	ldr	r5, [pc, #80]	; (124a0 <radio_ccm_rx_pkt_set+0x64>)
   12450:	2902      	cmp	r1, #2
   12452:	bf0c      	ite	eq
   12454:	4629      	moveq	r1, r5
   12456:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12458:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1245c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12460:	4810      	ldr	r0, [pc, #64]	; (124a4 <radio_ccm_rx_pkt_set+0x68>)
   12462:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   12466:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1246a:	4a0f      	ldr	r2, [pc, #60]	; (124a8 <radio_ccm_rx_pkt_set+0x6c>)
   1246c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12470:	490e      	ldr	r1, [pc, #56]	; (124ac <radio_ccm_rx_pkt_set+0x70>)
   12472:	4a0f      	ldr	r2, [pc, #60]	; (124b0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   12474:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12478:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1247c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12480:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12484:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12488:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   1248c:	2140      	movs	r1, #64	; 0x40
   1248e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   12492:	2201      	movs	r2, #1
   12494:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12496:	bd70      	pop	{r4, r5, r6, pc}
   12498:	4000f000 	.word	0x4000f000
   1249c:	01000001 	.word	0x01000001
   124a0:	01010001 	.word	0x01010001
   124a4:	200015b8 	.word	0x200015b8
   124a8:	200014a8 	.word	0x200014a8
   124ac:	40001104 	.word	0x40001104
   124b0:	4001f000 	.word	0x4001f000

000124b4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   124b4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   124b6:	4b0e      	ldr	r3, [pc, #56]	; (124f0 <radio_ccm_tx_pkt_set+0x3c>)
   124b8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   124ba:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   124bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   124c0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   124c4:	4c0b      	ldr	r4, [pc, #44]	; (124f4 <radio_ccm_tx_pkt_set+0x40>)
   124c6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   124ca:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   124ce:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   124d2:	4809      	ldr	r0, [pc, #36]	; (124f8 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   124d4:	4909      	ldr	r1, [pc, #36]	; (124fc <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   124d6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   124da:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   124de:	2101      	movs	r1, #1
   124e0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   124e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   124e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   124ec:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   124ee:	bd10      	pop	{r4, pc}
   124f0:	4000f000 	.word	0x4000f000
   124f4:	01010000 	.word	0x01010000
   124f8:	200015b8 	.word	0x200015b8
   124fc:	200014a8 	.word	0x200014a8

00012500 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12500:	4b0c      	ldr	r3, [pc, #48]	; (12534 <radio_ccm_is_done+0x34>)
   12502:	2202      	movs	r2, #2
   12504:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12508:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1250c:	b16a      	cbz	r2, 1252a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1250e:	2202      	movs	r2, #2
   12510:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12514:	4a08      	ldr	r2, [pc, #32]	; (12538 <radio_ccm_is_done+0x38>)
   12516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1251a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1251e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12522:	fab0 f080 	clz	r0, r0
   12526:	0940      	lsrs	r0, r0, #5
   12528:	4770      	bx	lr
		__WFE();
   1252a:	bf20      	wfe
		__SEV();
   1252c:	bf40      	sev
		__WFE();
   1252e:	bf20      	wfe
   12530:	e7ea      	b.n	12508 <radio_ccm_is_done+0x8>
   12532:	bf00      	nop
   12534:	4000f000 	.word	0x4000f000
   12538:	e000e100 	.word	0xe000e100

0001253c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1253c:	4b03      	ldr	r3, [pc, #12]	; (1254c <radio_ccm_mic_is_valid+0x10>)
   1253e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12542:	3000      	adds	r0, #0
   12544:	bf18      	it	ne
   12546:	2001      	movne	r0, #1
   12548:	4770      	bx	lr
   1254a:	bf00      	nop
   1254c:	4000f000 	.word	0x4000f000

00012550 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12550:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12552:	4c13      	ldr	r4, [pc, #76]	; (125a0 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12554:	4d13      	ldr	r5, [pc, #76]	; (125a4 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12556:	2303      	movs	r3, #3
   12558:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1255c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12560:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12564:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12568:	3b01      	subs	r3, #1
   1256a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1256e:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12570:	4b0d      	ldr	r3, [pc, #52]	; (125a8 <radio_ar_configure+0x58>)
   12572:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   12576:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12578:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1257c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12580:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12584:	f7ff fe46 	bl	12214 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12588:	4b08      	ldr	r3, [pc, #32]	; (125ac <radio_ar_configure+0x5c>)
   1258a:	4a09      	ldr	r2, [pc, #36]	; (125b0 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1258c:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12590:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12594:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12596:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1259a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1259e:	bd38      	pop	{r3, r4, r5, pc}
   125a0:	4000f000 	.word	0x4000f000
   125a4:	40001000 	.word	0x40001000
   125a8:	200014a4 	.word	0x200014a4
   125ac:	4001f000 	.word	0x4001f000
   125b0:	40001128 	.word	0x40001128

000125b4 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   125b4:	4b01      	ldr	r3, [pc, #4]	; (125bc <radio_ar_match_get+0x8>)
   125b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   125ba:	4770      	bx	lr
   125bc:	4000f000 	.word	0x4000f000

000125c0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   125c0:	4a04      	ldr	r2, [pc, #16]	; (125d4 <radio_ar_status_reset+0x14>)
   125c2:	2300      	movs	r3, #0
   125c4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   125c8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   125cc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   125d0:	4770      	bx	lr
   125d2:	bf00      	nop
   125d4:	40001000 	.word	0x40001000

000125d8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   125d8:	4b08      	ldr	r3, [pc, #32]	; (125fc <radio_ar_has_match+0x24>)
   125da:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   125de:	b160      	cbz	r0, 125fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   125e0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   125e4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   125e8:	b138      	cbz	r0, 125fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   125ea:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   125ee:	b120      	cbz	r0, 125fa <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   125f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   125f4:	fab0 f080 	clz	r0, r0
   125f8:	0940      	lsrs	r0, r0, #5
}
   125fa:	4770      	bx	lr
   125fc:	40001000 	.word	0x40001000

00012600 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12600:	2901      	cmp	r1, #1
{
   12602:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12604:	d00e      	beq.n	12624 <mayfly_enable_cb+0x24>
   12606:	4b0d      	ldr	r3, [pc, #52]	; (1263c <mayfly_enable_cb+0x3c>)
   12608:	9301      	str	r3, [sp, #4]
   1260a:	9300      	str	r3, [sp, #0]
   1260c:	4a0c      	ldr	r2, [pc, #48]	; (12640 <mayfly_enable_cb+0x40>)
   1260e:	4b0d      	ldr	r3, [pc, #52]	; (12644 <mayfly_enable_cb+0x44>)
   12610:	490d      	ldr	r1, [pc, #52]	; (12648 <mayfly_enable_cb+0x48>)
   12612:	480e      	ldr	r0, [pc, #56]	; (1264c <mayfly_enable_cb+0x4c>)
   12614:	f7ee fcba 	bl	f8c <printk>
   12618:	4040      	eors	r0, r0
   1261a:	f380 8811 	msr	BASEPRI, r0
   1261e:	f04f 0004 	mov.w	r0, #4
   12622:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12624:	2018      	movs	r0, #24
	if (enable) {
   12626:	b122      	cbz	r2, 12632 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12628:	b003      	add	sp, #12
   1262a:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   1262e:	f7ef b913 	b.w	1858 <_arch_irq_enable>
}
   12632:	b003      	add	sp, #12
   12634:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   12638:	f7ef b91e 	b.w	1878 <_arch_irq_disable>
   1263c:	00014645 	.word	0x00014645
   12640:	00015394 	.word	0x00015394
   12644:	000179a4 	.word	0x000179a4
   12648:	000153e3 	.word	0x000153e3
   1264c:	000179d3 	.word	0x000179d3

00012650 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12650:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   12652:	b181      	cbz	r1, 12676 <mayfly_is_enabled+0x26>
   12654:	2901      	cmp	r1, #1
   12656:	d014      	beq.n	12682 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12658:	4b0b      	ldr	r3, [pc, #44]	; (12688 <mayfly_is_enabled+0x38>)
   1265a:	9301      	str	r3, [sp, #4]
   1265c:	9300      	str	r3, [sp, #0]
   1265e:	4a0b      	ldr	r2, [pc, #44]	; (1268c <mayfly_is_enabled+0x3c>)
   12660:	4b0b      	ldr	r3, [pc, #44]	; (12690 <mayfly_is_enabled+0x40>)
   12662:	490c      	ldr	r1, [pc, #48]	; (12694 <mayfly_is_enabled+0x44>)
   12664:	480c      	ldr	r0, [pc, #48]	; (12698 <mayfly_is_enabled+0x48>)
   12666:	f7ee fc91 	bl	f8c <printk>
   1266a:	4040      	eors	r0, r0
   1266c:	f380 8811 	msr	BASEPRI, r0
   12670:	f04f 0004 	mov.w	r0, #4
   12674:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   12676:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   12678:	b003      	add	sp, #12
   1267a:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   1267e:	f7ef b90f 	b.w	18a0 <_arch_irq_is_enabled>
   12682:	2018      	movs	r0, #24
   12684:	e7f8      	b.n	12678 <mayfly_is_enabled+0x28>
   12686:	bf00      	nop
   12688:	00014645 	.word	0x00014645
   1268c:	00015394 	.word	0x00015394
   12690:	000179b5 	.word	0x000179b5
   12694:	000153e3 	.word	0x000153e3
   12698:	00015333 	.word	0x00015333

0001269c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1269c:	4288      	cmp	r0, r1
   1269e:	d00a      	beq.n	126b6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   126a0:	b918      	cbnz	r0, 126aa <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   126a2:	1e4b      	subs	r3, r1, #1
   126a4:	4258      	negs	r0, r3
   126a6:	4158      	adcs	r0, r3
   126a8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   126aa:	2801      	cmp	r0, #1
   126ac:	d105      	bne.n	126ba <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   126ae:	fab1 f081 	clz	r0, r1
   126b2:	0940      	lsrs	r0, r0, #5
   126b4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   126b6:	2001      	movs	r0, #1
   126b8:	4770      	bx	lr
   126ba:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   126bc:	4770      	bx	lr
	...

000126c0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   126c0:	b507      	push	{r0, r1, r2, lr}
   126c2:	4b0e      	ldr	r3, [pc, #56]	; (126fc <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   126c4:	b181      	cbz	r1, 126e8 <mayfly_pend+0x28>
   126c6:	2901      	cmp	r1, #1
   126c8:	d015      	beq.n	126f6 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   126ca:	4b0d      	ldr	r3, [pc, #52]	; (12700 <mayfly_pend+0x40>)
   126cc:	9301      	str	r3, [sp, #4]
   126ce:	9300      	str	r3, [sp, #0]
   126d0:	4a0c      	ldr	r2, [pc, #48]	; (12704 <mayfly_pend+0x44>)
   126d2:	4b0d      	ldr	r3, [pc, #52]	; (12708 <mayfly_pend+0x48>)
   126d4:	490d      	ldr	r1, [pc, #52]	; (1270c <mayfly_pend+0x4c>)
   126d6:	480e      	ldr	r0, [pc, #56]	; (12710 <mayfly_pend+0x50>)
   126d8:	f7ee fc58 	bl	f8c <printk>
   126dc:	4040      	eors	r0, r0
   126de:	f380 8811 	msr	BASEPRI, r0
   126e2:	f04f 0004 	mov.w	r0, #4
   126e6:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   126ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   126f0:	b003      	add	sp, #12
   126f2:	f85d fb04 	ldr.w	pc, [sp], #4
   126f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   126fa:	e7f7      	b.n	126ec <mayfly_pend+0x2c>
   126fc:	e000e100 	.word	0xe000e100
   12700:	00014645 	.word	0x00014645
   12704:	00015394 	.word	0x00015394
   12708:	000179c7 	.word	0x000179c7
   1270c:	000153e3 	.word	0x000153e3
   12710:	00015333 	.word	0x00015333

00012714 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12714:	2803      	cmp	r0, #3
{
   12716:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12718:	d90e      	bls.n	12738 <hal_ticker_instance0_caller_id_get+0x24>
   1271a:	4b0e      	ldr	r3, [pc, #56]	; (12754 <hal_ticker_instance0_caller_id_get+0x40>)
   1271c:	9301      	str	r3, [sp, #4]
   1271e:	9300      	str	r3, [sp, #0]
   12720:	4a0d      	ldr	r2, [pc, #52]	; (12758 <hal_ticker_instance0_caller_id_get+0x44>)
   12722:	4b0e      	ldr	r3, [pc, #56]	; (1275c <hal_ticker_instance0_caller_id_get+0x48>)
   12724:	490e      	ldr	r1, [pc, #56]	; (12760 <hal_ticker_instance0_caller_id_get+0x4c>)
   12726:	480f      	ldr	r0, [pc, #60]	; (12764 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12728:	f7ee fc30 	bl	f8c <printk>
   1272c:	4040      	eors	r0, r0
   1272e:	f380 8811 	msr	BASEPRI, r0
   12732:	f04f 0004 	mov.w	r0, #4
   12736:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12738:	4b0b      	ldr	r3, [pc, #44]	; (12768 <hal_ticker_instance0_caller_id_get+0x54>)
   1273a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1273c:	b938      	cbnz	r0, 1274e <hal_ticker_instance0_caller_id_get+0x3a>
   1273e:	4b05      	ldr	r3, [pc, #20]	; (12754 <hal_ticker_instance0_caller_id_get+0x40>)
   12740:	9301      	str	r3, [sp, #4]
   12742:	9300      	str	r3, [sp, #0]
   12744:	4a04      	ldr	r2, [pc, #16]	; (12758 <hal_ticker_instance0_caller_id_get+0x44>)
   12746:	4b05      	ldr	r3, [pc, #20]	; (1275c <hal_ticker_instance0_caller_id_get+0x48>)
   12748:	4905      	ldr	r1, [pc, #20]	; (12760 <hal_ticker_instance0_caller_id_get+0x4c>)
   1274a:	4808      	ldr	r0, [pc, #32]	; (1276c <hal_ticker_instance0_caller_id_get+0x58>)
   1274c:	e7ec      	b.n	12728 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   1274e:	b003      	add	sp, #12
   12750:	f85d fb04 	ldr.w	pc, [sp], #4
   12754:	00014645 	.word	0x00014645
   12758:	00015394 	.word	0x00015394
   1275c:	00017a03 	.word	0x00017a03
   12760:	000153e3 	.word	0x000153e3
   12764:	00017a45 	.word	0x00017a45
   12768:	00017a41 	.word	0x00017a41
   1276c:	00017a86 	.word	0x00017a86

00012770 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12770:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12772:	3802      	subs	r0, #2
{
   12774:	461c      	mov	r4, r3
	switch (caller_id) {
   12776:	2803      	cmp	r0, #3
   12778:	d818      	bhi.n	127ac <hal_ticker_instance0_sched+0x3c>
   1277a:	e8df f000 	tbb	[pc, r0]
   1277e:	0d02      	.short	0x0d02
   12780:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12782:	2903      	cmp	r1, #3
   12784:	d112      	bne.n	127ac <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   12786:	4b19      	ldr	r3, [pc, #100]	; (127ec <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12788:	2100      	movs	r1, #0
			m.param = instance;
   1278a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1278c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1278e:	b002      	add	sp, #8
   12790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12794:	f7f4 bb34 	b.w	6e00 <mayfly_enqueue>
		switch (callee_id) {
   12798:	2904      	cmp	r1, #4
   1279a:	d107      	bne.n	127ac <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   1279c:	4b14      	ldr	r3, [pc, #80]	; (127f0 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1279e:	2101      	movs	r1, #1
			m.param = instance;
   127a0:	609c      	str	r4, [r3, #8]
   127a2:	e7f3      	b.n	1278c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   127a4:	2903      	cmp	r1, #3
   127a6:	d010      	beq.n	127ca <hal_ticker_instance0_sched+0x5a>
   127a8:	2904      	cmp	r1, #4
   127aa:	d013      	beq.n	127d4 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   127ac:	4b11      	ldr	r3, [pc, #68]	; (127f4 <hal_ticker_instance0_sched+0x84>)
   127ae:	9301      	str	r3, [sp, #4]
   127b0:	9300      	str	r3, [sp, #0]
   127b2:	4a11      	ldr	r2, [pc, #68]	; (127f8 <hal_ticker_instance0_sched+0x88>)
   127b4:	4b11      	ldr	r3, [pc, #68]	; (127fc <hal_ticker_instance0_sched+0x8c>)
   127b6:	4912      	ldr	r1, [pc, #72]	; (12800 <hal_ticker_instance0_sched+0x90>)
   127b8:	4812      	ldr	r0, [pc, #72]	; (12804 <hal_ticker_instance0_sched+0x94>)
   127ba:	f7ee fbe7 	bl	f8c <printk>
   127be:	4040      	eors	r0, r0
   127c0:	f380 8811 	msr	BASEPRI, r0
   127c4:	f04f 0004 	mov.w	r0, #4
   127c8:	df02      	svc	2
			m.param = instance;
   127ca:	4b0f      	ldr	r3, [pc, #60]	; (12808 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   127cc:	2100      	movs	r1, #0
			m.param = instance;
   127ce:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   127d0:	2001      	movs	r0, #1
   127d2:	e7dc      	b.n	1278e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   127d4:	4b0d      	ldr	r3, [pc, #52]	; (1280c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   127d6:	2101      	movs	r1, #1
			m.param = instance;
   127d8:	609c      	str	r4, [r3, #8]
   127da:	e7f9      	b.n	127d0 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   127dc:	2904      	cmp	r1, #4
   127de:	d1e5      	bne.n	127ac <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   127e0:	4b0b      	ldr	r3, [pc, #44]	; (12810 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   127e2:	2101      	movs	r1, #1
			m.param = instance;
   127e4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   127e6:	2003      	movs	r0, #3
   127e8:	e7d1      	b.n	1278e <hal_ticker_instance0_sched+0x1e>
   127ea:	bf00      	nop
   127ec:	20003e20 	.word	0x20003e20
   127f0:	20003e30 	.word	0x20003e30
   127f4:	00014645 	.word	0x00014645
   127f8:	00015394 	.word	0x00015394
   127fc:	00017a26 	.word	0x00017a26
   12800:	000153e3 	.word	0x000153e3
   12804:	00015333 	.word	0x00015333
   12808:	20003e40 	.word	0x20003e40
   1280c:	20003e50 	.word	0x20003e50
   12810:	20003e60 	.word	0x20003e60

00012814 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12814:	4601      	mov	r1, r0
   12816:	2000      	movs	r0, #0
   12818:	f7ff ba62 	b.w	11ce0 <cntr_cmp_set>

0001281c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1281c:	4770      	bx	lr
	...

00012820 <net_buf_pool_get>:
}
   12820:	4b01      	ldr	r3, [pc, #4]	; (12828 <net_buf_pool_get+0x8>)
   12822:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   12826:	4770      	bx	lr
   12828:	20003f34 	.word	0x20003f34

0001282c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1282c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1282e:	4b04      	ldr	r3, [pc, #16]	; (12840 <net_buf_id+0x14>)
   12830:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12834:	69db      	ldr	r3, [r3, #28]
   12836:	1ac0      	subs	r0, r0, r3
}
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1283a:	10c0      	asrs	r0, r0, #3
}
   1283c:	4358      	muls	r0, r3
   1283e:	4770      	bx	lr
   12840:	20003f34 	.word	0x20003f34
   12844:	aaaaaaab 	.word	0xaaaaaaab

00012848 <fixed_data_alloc>:
{
   12848:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1284a:	4b09      	ldr	r3, [pc, #36]	; (12870 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1284c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1284e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   12852:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12854:	699b      	ldr	r3, [r3, #24]
   12856:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12858:	6823      	ldr	r3, [r4, #0]
   1285a:	429a      	cmp	r2, r3
   1285c:	bf94      	ite	ls
   1285e:	600a      	strls	r2, [r1, #0]
   12860:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12862:	f7ff ffe3 	bl	1282c <net_buf_id>
   12866:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   1286a:	fb02 3000 	mla	r0, r2, r0, r3
   1286e:	bd10      	pop	{r4, pc}
   12870:	20003f34 	.word	0x20003f34

00012874 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12878:	4605      	mov	r5, r0
   1287a:	9101      	str	r1, [sp, #4]
   1287c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1287e:	f001 f96f 	bl	13b60 <_impl_k_uptime_get_32>
   12882:	4607      	mov	r7, r0
	__asm__ volatile(
   12884:	f04f 0320 	mov.w	r3, #32
   12888:	f3ef 8811 	mrs	r8, BASEPRI
   1288c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12890:	8a6b      	ldrh	r3, [r5, #18]
   12892:	2b00      	cmp	r3, #0
   12894:	d03d      	beq.n	12912 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12896:	8a2a      	ldrh	r2, [r5, #16]
   12898:	429a      	cmp	r2, r3
   1289a:	d92a      	bls.n	128f2 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1289c:	2100      	movs	r1, #0
   1289e:	4628      	mov	r0, r5
   128a0:	f000 fe78 	bl	13594 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   128a4:	b328      	cbz	r0, 128f2 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   128a6:	f388 8811 	msr	BASEPRI, r8
   128aa:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   128ac:	9b01      	ldr	r3, [sp, #4]
   128ae:	2b00      	cmp	r3, #0
   128b0:	d03c      	beq.n	1292c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   128b2:	1c73      	adds	r3, r6, #1
   128b4:	2b01      	cmp	r3, #1
   128b6:	d906      	bls.n	128c6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   128b8:	f001 f952 	bl	13b60 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   128bc:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   128be:	42b0      	cmp	r0, r6
   128c0:	bf94      	ite	ls
   128c2:	1a36      	subls	r6, r6, r0
   128c4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   128c6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   128c8:	4f1e      	ldr	r7, [pc, #120]	; (12944 <net_buf_alloc_len+0xd0>)
   128ca:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   128ce:	4632      	mov	r2, r6
   128d0:	699b      	ldr	r3, [r3, #24]
   128d2:	681b      	ldr	r3, [r3, #0]
   128d4:	a901      	add	r1, sp, #4
   128d6:	681b      	ldr	r3, [r3, #0]
   128d8:	4620      	mov	r0, r4
   128da:	4798      	blx	r3
   128dc:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   128de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   128e0:	bb28      	cbnz	r0, 1292e <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   128e2:	79a0      	ldrb	r0, [r4, #6]
   128e4:	4621      	mov	r1, r4
   128e6:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   128ea:	f000 fe34 	bl	13556 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   128ee:	462c      	mov	r4, r5
   128f0:	e018      	b.n	12924 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   128f2:	8a68      	ldrh	r0, [r5, #18]
   128f4:	1e43      	subs	r3, r0, #1
   128f6:	826b      	strh	r3, [r5, #18]
   128f8:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   128fc:	8a2c      	ldrh	r4, [r5, #16]
   128fe:	1a24      	subs	r4, r4, r0
   12900:	69e8      	ldr	r0, [r5, #28]
   12902:	2318      	movs	r3, #24
   12904:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12908:	4b0e      	ldr	r3, [pc, #56]	; (12944 <net_buf_alloc_len+0xd0>)
   1290a:	1aed      	subs	r5, r5, r3
   1290c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1290e:	71a5      	strb	r5, [r4, #6]
		goto success;
   12910:	e7cc      	b.n	128ac <net_buf_alloc_len+0x38>
   12912:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12916:	4631      	mov	r1, r6
   12918:	4628      	mov	r0, r5
   1291a:	f000 fe3b 	bl	13594 <_impl_k_queue_get>
		return NULL;
   1291e:	4604      	mov	r4, r0
	if (!buf) {
   12920:	2800      	cmp	r0, #0
   12922:	d1c3      	bne.n	128ac <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12924:	4620      	mov	r0, r4
   12926:	b002      	add	sp, #8
   12928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1292c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1292e:	2301      	movs	r3, #1
   12930:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12932:	2300      	movs	r3, #0
	buf->frags = NULL;
   12934:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12936:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12938:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1293a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1293c:	6923      	ldr	r3, [r4, #16]
   1293e:	81e2      	strh	r2, [r4, #14]
   12940:	60a3      	str	r3, [r4, #8]
	return buf;
   12942:	e7ef      	b.n	12924 <net_buf_alloc_len+0xb0>
   12944:	20003f34 	.word	0x20003f34

00012948 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12948:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1294a:	685b      	ldr	r3, [r3, #4]
   1294c:	460a      	mov	r2, r1
   1294e:	6819      	ldr	r1, [r3, #0]
   12950:	f7ff bf90 	b.w	12874 <net_buf_alloc_len>

00012954 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12954:	b570      	push	{r4, r5, r6, lr}
   12956:	4606      	mov	r6, r0
   12958:	f000 fe1c 	bl	13594 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1295c:	4605      	mov	r5, r0
   1295e:	b128      	cbz	r0, 1296c <net_buf_get+0x18>
   12960:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12962:	7963      	ldrb	r3, [r4, #5]
   12964:	f013 0301 	ands.w	r3, r3, #1
   12968:	d102      	bne.n	12970 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1296a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1296c:	4628      	mov	r0, r5
   1296e:	bd70      	pop	{r4, r5, r6, pc}
   12970:	2100      	movs	r1, #0
   12972:	4630      	mov	r0, r6
   12974:	f000 fe0e 	bl	13594 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12978:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1297a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1297c:	f023 0301 	bic.w	r3, r3, #1
   12980:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12982:	4604      	mov	r4, r0
   12984:	e7ed      	b.n	12962 <net_buf_get+0xe>

00012986 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12986:	6883      	ldr	r3, [r0, #8]
   12988:	4419      	add	r1, r3
   1298a:	6001      	str	r1, [r0, #0]
   1298c:	4770      	bx	lr

0001298e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1298e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12990:	460a      	mov	r2, r1
   12992:	6814      	ldr	r4, [r2, #0]
   12994:	b914      	cbnz	r4, 1299c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12996:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12998:	f000 bde2 	b.w	13560 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1299c:	7953      	ldrb	r3, [r2, #5]
   1299e:	f043 0301 	orr.w	r3, r3, #1
   129a2:	7153      	strb	r3, [r2, #5]
   129a4:	4622      	mov	r2, r4
   129a6:	e7f4      	b.n	12992 <net_buf_put+0x4>

000129a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   129a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129aa:	4d15      	ldr	r5, [pc, #84]	; (12a00 <net_buf_unref+0x58>)
   129ac:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   129ae:	2600      	movs	r6, #0
	while (buf) {
   129b0:	b904      	cbnz	r4, 129b4 <net_buf_unref+0xc>
   129b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   129b4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   129b6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   129b8:	3b01      	subs	r3, #1
   129ba:	b2db      	uxtb	r3, r3
   129bc:	7123      	strb	r3, [r4, #4]
   129be:	2b00      	cmp	r3, #0
   129c0:	d1f7      	bne.n	129b2 <net_buf_unref+0xa>
		if (buf->__buf) {
   129c2:	6921      	ldr	r1, [r4, #16]
   129c4:	b159      	cbz	r1, 129de <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   129c6:	7963      	ldrb	r3, [r4, #5]
   129c8:	079b      	lsls	r3, r3, #30
   129ca:	d407      	bmi.n	129dc <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   129cc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   129ce:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   129d2:	4620      	mov	r0, r4
   129d4:	699b      	ldr	r3, [r3, #24]
   129d6:	681b      	ldr	r3, [r3, #0]
   129d8:	689b      	ldr	r3, [r3, #8]
   129da:	4798      	blx	r3
			buf->__buf = NULL;
   129dc:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   129de:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   129e0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   129e2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   129e6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   129e8:	695b      	ldr	r3, [r3, #20]
   129ea:	b11b      	cbz	r3, 129f4 <net_buf_unref+0x4c>
			pool->destroy(buf);
   129ec:	4620      	mov	r0, r4
   129ee:	4798      	blx	r3
{
   129f0:	463c      	mov	r4, r7
   129f2:	e7dd      	b.n	129b0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   129f4:	4621      	mov	r1, r4
   129f6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   129fa:	f000 fdac 	bl	13556 <k_queue_prepend>
   129fe:	e7f7      	b.n	129f0 <net_buf_unref+0x48>
   12a00:	20003f34 	.word	0x20003f34

00012a04 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12a04:	7903      	ldrb	r3, [r0, #4]
   12a06:	3301      	adds	r3, #1
   12a08:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12a0a:	4770      	bx	lr

00012a0c <net_buf_simple_add>:
	return buf->data + buf->len;
   12a0c:	8883      	ldrh	r3, [r0, #4]
   12a0e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12a10:	4419      	add	r1, r3
   12a12:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12a14:	18d0      	adds	r0, r2, r3
   12a16:	4770      	bx	lr

00012a18 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12a18:	b430      	push	{r4, r5}
   12a1a:	8883      	ldrh	r3, [r0, #4]
   12a1c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   12a1e:	189d      	adds	r5, r3, r2
   12a20:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12a22:	18e0      	adds	r0, r4, r3
}
   12a24:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12a26:	f7ef b8e9 	b.w	1bfc <memcpy>

00012a2a <net_buf_simple_add_u8>:
   12a2a:	8883      	ldrh	r3, [r0, #4]
   12a2c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   12a2e:	b510      	push	{r4, lr}
	buf->len += len;
   12a30:	1c5c      	adds	r4, r3, #1
   12a32:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12a34:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12a36:	18d0      	adds	r0, r2, r3
   12a38:	bd10      	pop	{r4, pc}

00012a3a <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   12a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12a3c:	ab02      	add	r3, sp, #8
   12a3e:	8884      	ldrh	r4, [r0, #4]
   12a40:	f823 1d02 	strh.w	r1, [r3, #-2]!
   12a44:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   12a46:	1ca2      	adds	r2, r4, #2
   12a48:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   12a4a:	4619      	mov	r1, r3
   12a4c:	2202      	movs	r2, #2
   12a4e:	1928      	adds	r0, r5, r4
   12a50:	f7ef f8d4 	bl	1bfc <memcpy>
}
   12a54:	b003      	add	sp, #12
   12a56:	bd30      	pop	{r4, r5, pc}

00012a58 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12a58:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12a5a:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12a5c:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12a5e:	4411      	add	r1, r2
	buf->data -= len;
   12a60:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12a62:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12a64:	4618      	mov	r0, r3
   12a66:	4770      	bx	lr

00012a68 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12a68:	8883      	ldrh	r3, [r0, #4]
   12a6a:	1a5b      	subs	r3, r3, r1
   12a6c:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12a6e:	6803      	ldr	r3, [r0, #0]
   12a70:	4419      	add	r1, r3
   12a72:	6001      	str	r1, [r0, #0]
}
   12a74:	4608      	mov	r0, r1
   12a76:	4770      	bx	lr

00012a78 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12a78:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12a7a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12a7c:	2101      	movs	r1, #1
	val = buf->data[0];
   12a7e:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12a80:	f7ff fff2 	bl	12a68 <net_buf_simple_pull>

	return val;
}
   12a84:	4610      	mov	r0, r2
   12a86:	bd08      	pop	{r3, pc}

00012a88 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12a88:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12a8a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12a8c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12a8e:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12a90:	f7ff ffea 	bl	12a68 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12a94:	4610      	mov	r0, r2
   12a96:	bd08      	pop	{r3, pc}

00012a98 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12a98:	6802      	ldr	r2, [r0, #0]
   12a9a:	6880      	ldr	r0, [r0, #8]
}
   12a9c:	1a10      	subs	r0, r2, r0
   12a9e:	4770      	bx	lr

00012aa0 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12aa0:	6802      	ldr	r2, [r0, #0]
   12aa2:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12aa4:	88c3      	ldrh	r3, [r0, #6]
   12aa6:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12aa8:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12aaa:	1a9b      	subs	r3, r3, r2
}
   12aac:	1a18      	subs	r0, r3, r0
   12aae:	4770      	bx	lr

00012ab0 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ab0:	6800      	ldr	r0, [r0, #0]
   12ab2:	6880      	ldr	r0, [r0, #8]
   12ab4:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ab6:	b941      	cbnz	r1, 12aca <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12ab8:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12abc:	fa21 f202 	lsr.w	r2, r1, r2
   12ac0:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12ac4:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12ac6:	2000      	movs	r0, #0
   12ac8:	4770      	bx	lr
		*value = gpio->IN;
   12aca:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12ace:	e7f9      	b.n	12ac4 <gpio_nrf5_read+0x14>

00012ad0 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ad0:	6800      	ldr	r0, [r0, #0]
   12ad2:	6880      	ldr	r0, [r0, #8]
   12ad4:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ad6:	b949      	cbnz	r1, 12aec <gpio_nrf5_write+0x1c>
   12ad8:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12ada:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12adc:	b11b      	cbz	r3, 12ae6 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12ade:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12ae2:	2000      	movs	r0, #0
   12ae4:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12ae6:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12aea:	e7fa      	b.n	12ae2 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12aec:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12af0:	e7f7      	b.n	12ae2 <gpio_nrf5_write+0x12>

00012af2 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12af2:	6883      	ldr	r3, [r0, #8]
   12af4:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12af6:	b172      	cbz	r2, 12b16 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12af8:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12afa:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12afc:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12afe:	b902      	cbnz	r2, 12b02 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12b00:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12b02:	2000      	movs	r0, #0
   12b04:	4770      	bx	lr
	parent->next = child;
   12b06:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12b08:	6858      	ldr	r0, [r3, #4]
   12b0a:	4281      	cmp	r1, r0
	list->tail = node;
   12b0c:	bf08      	it	eq
   12b0e:	605a      	streq	r2, [r3, #4]
   12b10:	e00d      	b.n	12b2e <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12b12:	4602      	mov	r2, r0
   12b14:	6800      	ldr	r0, [r0, #0]
   12b16:	2800      	cmp	r0, #0
   12b18:	d0f3      	beq.n	12b02 <gpio_nrf5_manage_callback+0x10>
   12b1a:	4281      	cmp	r1, r0
   12b1c:	d1f9      	bne.n	12b12 <gpio_nrf5_manage_callback+0x20>
   12b1e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12b20:	2a00      	cmp	r2, #0
   12b22:	d1f0      	bne.n	12b06 <gpio_nrf5_manage_callback+0x14>
   12b24:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12b26:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12b28:	4291      	cmp	r1, r2
   12b2a:	d100      	bne.n	12b2e <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   12b2c:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12b2e:	2300      	movs	r3, #0
   12b30:	600b      	str	r3, [r1, #0]
   12b32:	e7e6      	b.n	12b02 <gpio_nrf5_manage_callback+0x10>

00012b34 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12b34:	4b0c      	ldr	r3, [pc, #48]	; (12b68 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12b36:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12b38:	4d0c      	ldr	r5, [pc, #48]	; (12b6c <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   12b3a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12b3c:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   12b3e:	fa24 f203 	lsr.w	r2, r4, r3
   12b42:	07d2      	lsls	r2, r2, #31
   12b44:	d508      	bpl.n	12b58 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12b46:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12b4a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   12b4e:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12b52:	4282      	cmp	r2, r0
   12b54:	d100      	bne.n	12b58 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12b56:	b121      	cbz	r1, 12b62 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12b58:	3301      	adds	r3, #1
   12b5a:	2b08      	cmp	r3, #8
   12b5c:	d1ef      	bne.n	12b3e <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   12b5e:	f06f 0312 	mvn.w	r3, #18
}
   12b62:	4618      	mov	r0, r3
   12b64:	bd30      	pop	{r4, r5, pc}
   12b66:	bf00      	nop
   12b68:	200016fc 	.word	0x200016fc
   12b6c:	40006000 	.word	0x40006000

00012b70 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12b70:	b570      	push	{r4, r5, r6, lr}
   12b72:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12b74:	460d      	mov	r5, r1
   12b76:	b9c9      	cbnz	r1, 12bac <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12b78:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12b7a:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12b7c:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12b7e:	4610      	mov	r0, r2
   12b80:	7919      	ldrb	r1, [r3, #4]
   12b82:	f7ff ffd7 	bl	12b34 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12b86:	2800      	cmp	r0, #0
   12b88:	db12      	blt.n	12bb0 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   12b8a:	68b2      	ldr	r2, [r6, #8]
   12b8c:	2301      	movs	r3, #1
   12b8e:	fa03 f404 	lsl.w	r4, r3, r4
   12b92:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12b94:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12b98:	4a06      	ldr	r2, [pc, #24]	; (12bb4 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   12b9a:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12b9c:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12ba0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12ba4:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12ba8:	4628      	mov	r0, r5
   12baa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12bac:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12bb0:	bd70      	pop	{r4, r5, r6, pc}
   12bb2:	bf00      	nop
   12bb4:	40006000 	.word	0x40006000

00012bb8 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   12bb8:	b570      	push	{r4, r5, r6, lr}
   12bba:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12bbc:	460d      	mov	r5, r1
   12bbe:	b9b1      	cbnz	r1, 12bee <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12bc0:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12bc2:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12bc4:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12bc6:	4610      	mov	r0, r2
   12bc8:	7919      	ldrb	r1, [r3, #4]
   12bca:	f7ff ffb3 	bl	12b34 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12bce:	2800      	cmp	r0, #0
   12bd0:	db0f      	blt.n	12bf2 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12bd2:	68b2      	ldr	r2, [r6, #8]
   12bd4:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   12bd6:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   12bda:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12bde:	4b05      	ldr	r3, [pc, #20]	; (12bf4 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12be0:	ea22 0404 	bic.w	r4, r2, r4
   12be4:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   12be6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   12bea:	4628      	mov	r0, r5
   12bec:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12bee:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12bf2:	bd70      	pop	{r4, r5, r6, pc}
   12bf4:	40006000 	.word	0x40006000

00012bf8 <gpio_nrf5_config>:
{
   12bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12bfc:	6806      	ldr	r6, [r0, #0]
{
   12bfe:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12c00:	68b2      	ldr	r2, [r6, #8]
   12c02:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12c04:	b119      	cbz	r1, 12c0e <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   12c06:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12c0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
   12c12:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   12c16:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   12c1a:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   12c1e:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   12c22:	d058      	beq.n	12cd6 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   12c24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12c28:	bf0c      	ite	eq
   12c2a:	2204      	moveq	r2, #4
   12c2c:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   12c2e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   12c32:	bf08      	it	eq
   12c34:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   12c36:	f013 0f01 	tst.w	r3, #1
   12c3a:	ea4f 0180 	mov.w	r1, r0, lsl #2
   12c3e:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 12d0c <gpio_nrf5_config+0x114>
   12c42:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   12c46:	d04f      	beq.n	12ce8 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   12c48:	2a0c      	cmp	r2, #12
   12c4a:	d146      	bne.n	12cda <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   12c4c:	2701      	movs	r7, #1
   12c4e:	40a7      	lsls	r7, r4
   12c50:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   12c54:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   12c56:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12c5a:	f041 0103 	orr.w	r1, r1, #3
   12c5e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   12c60:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   12c64:	f013 0002 	ands.w	r0, r3, #2
   12c68:	d049      	beq.n	12cfe <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   12c6a:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   12c6c:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   12c6e:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   12c72:	d5c8      	bpl.n	12c06 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   12c74:	065a      	lsls	r2, r3, #25
   12c76:	d43d      	bmi.n	12cf4 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   12c78:	f013 0f04 	tst.w	r3, #4
   12c7c:	bf14      	ite	ne
   12c7e:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   12c82:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   12c86:	4e1f      	ldr	r6, [pc, #124]	; (12d04 <gpio_nrf5_config+0x10c>)
   12c88:	6837      	ldr	r7, [r6, #0]
   12c8a:	4638      	mov	r0, r7
   12c8c:	f7ed fada 	bl	244 <__popcountsi2>
   12c90:	2808      	cmp	r0, #8
   12c92:	d032      	beq.n	12cfa <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   12c94:	4641      	mov	r1, r8
   12c96:	4620      	mov	r0, r4
   12c98:	f7ff ff4c 	bl	12b34 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12c9c:	2800      	cmp	r0, #0
   12c9e:	da08      	bge.n	12cb2 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   12ca0:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   12ca2:	fa93 f0a3 	rbit	r0, r3
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	fab0 f080 	clz	r0, r0
   12cac:	bf08      	it	eq
   12cae:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   12cb2:	2301      	movs	r3, #1
   12cb4:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   12cb6:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   12cb8:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   12cba:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   12cbe:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   12cc0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   12cc4:	4b10      	ldr	r3, [pc, #64]	; (12d08 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   12cc6:	f044 0401 	orr.w	r4, r4, #1
   12cca:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   12ccc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   12cd0:	2000      	movs	r0, #0
   12cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   12cd6:	220c      	movs	r2, #12
   12cd8:	e7a9      	b.n	12c2e <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   12cda:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   12cdc:	bf02      	ittt	eq
   12cde:	2701      	moveq	r7, #1
   12ce0:	40a7      	lsleq	r7, r4
   12ce2:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   12ce6:	e7b5      	b.n	12c54 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   12ce8:	4461      	add	r1, ip
   12cea:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   12cee:	430a      	orrs	r2, r1
   12cf0:	433a      	orrs	r2, r7
   12cf2:	e7b5      	b.n	12c60 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   12cf4:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   12cf8:	e7c5      	b.n	12c86 <gpio_nrf5_config+0x8e>
			return -EIO;
   12cfa:	f06f 0004 	mvn.w	r0, #4
}
   12cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d02:	bf00      	nop
   12d04:	200016fc 	.word	0x200016fc
   12d08:	40006000 	.word	0x40006000
   12d0c:	00017ac4 	.word	0x00017ac4

00012d10 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   12d10:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   12d12:	2200      	movs	r2, #0
   12d14:	2105      	movs	r1, #5
   12d16:	2006      	movs	r0, #6
   12d18:	f7ee fdd0 	bl	18bc <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   12d1c:	2006      	movs	r0, #6
   12d1e:	f7ee fd9b 	bl	1858 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   12d22:	2000      	movs	r0, #0
   12d24:	bd08      	pop	{r3, pc}
	...

00012d28 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12d28:	2100      	movs	r1, #0
{
   12d2a:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   12d2c:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   12d2e:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   12d30:	2501      	movs	r5, #1
   12d32:	008b      	lsls	r3, r1, #2
   12d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12d38:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   12d3c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   12d40:	b140      	cbz	r0, 12d54 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12d42:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   12d46:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   12d4a:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   12d4e:	fa05 f303 	lsl.w	r3, r5, r3
   12d52:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12d54:	3101      	adds	r1, #1
   12d56:	2908      	cmp	r1, #8
   12d58:	d1eb      	bne.n	12d32 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   12d5a:	4e08      	ldr	r6, [pc, #32]	; (12d7c <gpio_nrf5_port_isr+0x54>)
   12d5c:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   12d5e:	689d      	ldr	r5, [r3, #8]
   12d60:	681c      	ldr	r4, [r3, #0]
   12d62:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   12d64:	b14c      	cbz	r4, 12d7a <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   12d66:	68a3      	ldr	r3, [r4, #8]
   12d68:	421d      	tst	r5, r3
   12d6a:	d004      	beq.n	12d76 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   12d6c:	6863      	ldr	r3, [r4, #4]
   12d6e:	462a      	mov	r2, r5
   12d70:	4621      	mov	r1, r4
   12d72:	4630      	mov	r0, r6
   12d74:	4798      	blx	r3
	return node->next;
   12d76:	6824      	ldr	r4, [r4, #0]
   12d78:	e7f4      	b.n	12d64 <gpio_nrf5_port_isr+0x3c>
   12d7a:	bd70      	pop	{r4, r5, r6, pc}
   12d7c:	20003edc 	.word	0x20003edc

00012d80 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d80:	4b03      	ldr	r3, [pc, #12]	; (12d90 <uart_nrfx_err_check+0x10>)
   12d82:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   12d84:	b118      	cbz	r0, 12d8e <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12d86:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   12d8a:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   12d8e:	4770      	bx	lr
   12d90:	40002124 	.word	0x40002124

00012d94 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d94:	4b07      	ldr	r3, [pc, #28]	; (12db4 <uart_nrfx_poll_out+0x20>)
   12d96:	2200      	movs	r2, #0
   12d98:	601a      	str	r2, [r3, #0]
{
   12d9a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12d9c:	681a      	ldr	r2, [r3, #0]
   12d9e:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12da0:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   12da2:	4a05      	ldr	r2, [pc, #20]	; (12db8 <uart_nrfx_poll_out+0x24>)
   12da4:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12da8:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   12daa:	2a00      	cmp	r2, #0
   12dac:	d0fc      	beq.n	12da8 <uart_nrfx_poll_out+0x14>
}
   12dae:	4608      	mov	r0, r1
   12db0:	b002      	add	sp, #8
   12db2:	4770      	bx	lr
   12db4:	4000211c 	.word	0x4000211c
   12db8:	40002000 	.word	0x40002000

00012dbc <uart_nrfx_poll_in>:
   12dbc:	4b08      	ldr	r3, [pc, #32]	; (12de0 <uart_nrfx_poll_in+0x24>)
   12dbe:	681a      	ldr	r2, [r3, #0]
{
   12dc0:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   12dc2:	b152      	cbz	r2, 12dda <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12dc4:	2000      	movs	r0, #0
   12dc6:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12dc8:	681b      	ldr	r3, [r3, #0]
   12dca:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12dcc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   12dce:	4b05      	ldr	r3, [pc, #20]	; (12de4 <uart_nrfx_poll_in+0x28>)
   12dd0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   12dd4:	700b      	strb	r3, [r1, #0]
}
   12dd6:	b002      	add	sp, #8
   12dd8:	4770      	bx	lr
		return -1;
   12dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12dde:	e7fa      	b.n	12dd6 <uart_nrfx_poll_in+0x1a>
   12de0:	40002108 	.word	0x40002108
   12de4:	40002000 	.word	0x40002000

00012de8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   12de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   12dea:	4819      	ldr	r0, [pc, #100]	; (12e50 <uart_nrfx_init+0x68>)
   12dec:	f000 f98c 	bl	13108 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   12df0:	6843      	ldr	r3, [r0, #4]
   12df2:	4604      	mov	r4, r0
   12df4:	681d      	ldr	r5, [r3, #0]
   12df6:	2206      	movs	r2, #6
   12df8:	f240 1301 	movw	r3, #257	; 0x101
   12dfc:	2100      	movs	r1, #0
   12dfe:	47a8      	blx	r5
   12e00:	6863      	ldr	r3, [r4, #4]
   12e02:	681d      	ldr	r5, [r3, #0]
   12e04:	2300      	movs	r3, #0
   12e06:	4619      	mov	r1, r3
   12e08:	2208      	movs	r2, #8
   12e0a:	4620      	mov	r0, r4
   12e0c:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   12e0e:	4b11      	ldr	r3, [pc, #68]	; (12e54 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e10:	4911      	ldr	r1, [pc, #68]	; (12e58 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   12e12:	2208      	movs	r2, #8
   12e14:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   12e18:	2206      	movs	r2, #6
   12e1a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12e1e:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12e20:	4a0e      	ldr	r2, [pc, #56]	; (12e5c <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   12e22:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   12e26:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12e2a:	2204      	movs	r2, #4
   12e2c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e30:	4a0b      	ldr	r2, [pc, #44]	; (12e60 <uart_nrfx_init+0x78>)
   12e32:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12e34:	6812      	ldr	r2, [r2, #0]
   12e36:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12e38:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e3a:	4a0a      	ldr	r2, [pc, #40]	; (12e64 <uart_nrfx_init+0x7c>)
   12e3c:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12e3e:	6812      	ldr	r2, [r2, #0]
   12e40:	9200      	str	r2, [sp, #0]
    (void)dummy;
   12e42:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e44:	2201      	movs	r2, #1
   12e46:	600a      	str	r2, [r1, #0]
   12e48:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   12e4a:	b003      	add	sp, #12
   12e4c:	bd30      	pop	{r4, r5, pc}
   12e4e:	bf00      	nop
   12e50:	00017b28 	.word	0x00017b28
   12e54:	40002000 	.word	0x40002000
   12e58:	40002008 	.word	0x40002008
   12e5c:	01d7e000 	.word	0x01d7e000
   12e60:	4000211c 	.word	0x4000211c
   12e64:	40002108 	.word	0x40002108

00012e68 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   12e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   12e6c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   12e6e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   12e70:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   12e72:	42a3      	cmp	r3, r4
	d = &rand[octets];
   12e74:	440a      	add	r2, r1
	s = &rng->rand[first];
   12e76:	4406      	add	r6, r0
	if (first <= last) {
   12e78:	d81f      	bhi.n	12eba <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   12e7a:	1ae4      	subs	r4, r4, r3
   12e7c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   12e7e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   12e80:	bf3e      	ittt	cc
   12e82:	1a64      	subcc	r4, r4, r1
   12e84:	b2e7      	uxtbcc	r7, r4
   12e86:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   12e88:	4423      	add	r3, r4
		octets -= avail;
   12e8a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   12e8e:	bf28      	it	cs
   12e90:	2700      	movcs	r7, #0
		first += avail;
   12e92:	b2db      	uxtb	r3, r3
		octets -= avail;
   12e94:	b2c9      	uxtb	r1, r1
   12e96:	4434      	add	r4, r6

		while (avail--) {
   12e98:	42a6      	cmp	r6, r4
   12e9a:	d109      	bne.n	12eb0 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   12e9c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   12e9e:	7843      	ldrb	r3, [r0, #1]
   12ea0:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   12ea2:	bf82      	ittt	hi
   12ea4:	4b20      	ldrhi	r3, [pc, #128]	; (12f28 <get+0xc0>)
   12ea6:	2201      	movhi	r2, #1
   12ea8:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   12eaa:	4608      	mov	r0, r1
   12eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   12eb0:	f816 5b01 	ldrb.w	r5, [r6], #1
   12eb4:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12eb8:	e7ee      	b.n	12e98 <get+0x30>
		avail = rng->count - first;
   12eba:	7805      	ldrb	r5, [r0, #0]
   12ebc:	1aed      	subs	r5, r5, r3
   12ebe:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   12ec0:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   12ec2:	bf3f      	itttt	cc
   12ec4:	1a67      	subcc	r7, r4, r1
   12ec6:	19ed      	addcc	r5, r5, r7
   12ec8:	b2ef      	uxtbcc	r7, r5
   12eca:	460d      	movcc	r5, r1
			first += avail;
   12ecc:	bf38      	it	cc
   12ece:	185b      	addcc	r3, r3, r1
		octets -= avail;
   12ed0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   12ed4:	bf32      	itee	cc
   12ed6:	b2db      	uxtbcc	r3, r3
   12ed8:	4627      	movcs	r7, r4
			first = 0;
   12eda:	2300      	movcs	r3, #0
		octets -= avail;
   12edc:	b2c9      	uxtb	r1, r1
   12ede:	4696      	mov	lr, r2
   12ee0:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   12ee4:	4566      	cmp	r6, ip
   12ee6:	d119      	bne.n	12f1c <get+0xb4>
   12ee8:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   12eea:	2900      	cmp	r1, #0
   12eec:	d0d6      	beq.n	12e9c <get+0x34>
   12eee:	2c00      	cmp	r4, #0
   12ef0:	d0d4      	beq.n	12e9c <get+0x34>
			if (octets < last) {
   12ef2:	428c      	cmp	r4, r1
   12ef4:	bf8a      	itet	hi
   12ef6:	460b      	movhi	r3, r1
   12ef8:	4623      	movls	r3, r4
				remaining = last - octets;
   12efa:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   12efc:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   12f00:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   12f04:	bf8c      	ite	hi
   12f06:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   12f08:	2700      	movls	r7, #0
			octets -= last;
   12f0a:	b2c9      	uxtb	r1, r1
   12f0c:	18f4      	adds	r4, r6, r3
			while (last--) {
   12f0e:	42a6      	cmp	r6, r4
   12f10:	d0c4      	beq.n	12e9c <get+0x34>
				*(--d) = *s++;
   12f12:	f816 5b01 	ldrb.w	r5, [r6], #1
   12f16:	f802 5d01 	strb.w	r5, [r2, #-1]!
   12f1a:	e7f8      	b.n	12f0e <get+0xa6>
			*(--d) = *s++;
   12f1c:	f816 8b01 	ldrb.w	r8, [r6], #1
   12f20:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   12f24:	e7de      	b.n	12ee4 <get+0x7c>
   12f26:	bf00      	nop
   12f28:	4000d000 	.word	0x4000d000

00012f2c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   12f2c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   12f2e:	b1d0      	cbz	r0, 12f66 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   12f30:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   12f32:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   12f34:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   12f36:	1c53      	adds	r3, r2, #1
   12f38:	b2db      	uxtb	r3, r3
		last = 0;
   12f3a:	42ab      	cmp	r3, r5
   12f3c:	bf08      	it	eq
   12f3e:	2300      	moveq	r3, #0
	if (last == rng->first) {
   12f40:	42a3      	cmp	r3, r4
   12f42:	d010      	beq.n	12f66 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   12f44:	b161      	cbz	r1, 12f60 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   12f46:	490a      	ldr	r1, [pc, #40]	; (12f70 <isr+0x44>)
   12f48:	4402      	add	r2, r0
   12f4a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   12f4e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   12f50:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   12f52:	3301      	adds	r3, #1
   12f54:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   12f56:	429d      	cmp	r5, r3
   12f58:	bf08      	it	eq
   12f5a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   12f5c:	42a3      	cmp	r3, r4
   12f5e:	d005      	beq.n	12f6c <isr+0x40>
		return 0;
	}

	return -EBUSY;
   12f60:	f06f 000f 	mvn.w	r0, #15
   12f64:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   12f66:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12f6a:	bd30      	pop	{r4, r5, pc}
		return 0;
   12f6c:	2000      	movs	r0, #0
}
   12f6e:	bd30      	pop	{r4, r5, pc}
   12f70:	4000d000 	.word	0x4000d000

00012f74 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   12f74:	07db      	lsls	r3, r3, #31
{
   12f76:	b570      	push	{r4, r5, r6, lr}
   12f78:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   12f7a:	d507      	bpl.n	12f8c <entropy_nrf5_get_entropy_isr+0x18>
   12f7c:	4613      	mov	r3, r2
   12f7e:	4a0d      	ldr	r2, [pc, #52]	; (12fb4 <entropy_nrf5_get_entropy_isr+0x40>)
   12f80:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   12f82:	2500      	movs	r5, #0
	while (len) {
   12f84:	b94b      	cbnz	r3, 12f9a <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   12f86:	6050      	str	r0, [r2, #4]

	return cnt;
   12f88:	4620      	mov	r0, r4
}
   12f8a:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   12f8c:	6880      	ldr	r0, [r0, #8]
   12f8e:	460a      	mov	r2, r1
   12f90:	303c      	adds	r0, #60	; 0x3c
   12f92:	b2e1      	uxtb	r1, r4
   12f94:	f7ff ff68 	bl	12e68 <get>
   12f98:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   12f9a:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   12f9e:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   12fa0:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   12fa4:	2e00      	cmp	r6, #0
   12fa6:	d0fb      	beq.n	12fa0 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   12fa8:	3b01      	subs	r3, #1
   12faa:	b29b      	uxth	r3, r3
   12fac:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   12fb0:	54ce      	strb	r6, [r1, r3]
   12fb2:	e7e7      	b.n	12f84 <entropy_nrf5_get_entropy_isr+0x10>
   12fb4:	4000d000 	.word	0x4000d000

00012fb8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   12fb8:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   12fba:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   12fbc:	2201      	movs	r2, #1
   12fbe:	4611      	mov	r1, r2
   12fc0:	4620      	mov	r0, r4
   12fc2:	f000 fd7f 	bl	13ac4 <_impl_k_sem_init>
   12fc6:	f104 0018 	add.w	r0, r4, #24
   12fca:	2201      	movs	r2, #1
   12fcc:	2100      	movs	r1, #0
   12fce:	f000 fd79 	bl	13ac4 <_impl_k_sem_init>
	rng->threshold = threshold;
   12fd2:	2304      	movs	r3, #4
   12fd4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   12fd8:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   12fda:	2500      	movs	r5, #0
	rng->threshold = threshold;
   12fdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   12fe0:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12fe2:	4b11      	ldr	r3, [pc, #68]	; (13028 <entropy_nrf5_init+0x70>)
	rng->count = len;
   12fe4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   12fe8:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   12fea:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   12fee:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   12ff2:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   12ff6:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   12ffa:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   12ffe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13002:	f042 0201 	orr.w	r2, r2, #1
   13006:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1300a:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   1300c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13010:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13012:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   13016:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13018:	462a      	mov	r2, r5
   1301a:	f7ee fc4f 	bl	18bc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1301e:	4630      	mov	r0, r6
   13020:	f7ee fc1a 	bl	1858 <_arch_irq_enable>

	return 0;
}
   13024:	4628      	mov	r0, r5
   13026:	bd70      	pop	{r4, r5, r6, pc}
   13028:	4000d000 	.word	0x4000d000

0001302c <isr_rand>:
{
   1302c:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   1302e:	4b12      	ldr	r3, [pc, #72]	; (13078 <isr_rand+0x4c>)
   13030:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13034:	b1fb      	cbz	r3, 13076 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13036:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   13038:	2101      	movs	r1, #1
   1303a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1303e:	f7ff ff75 	bl	12f2c <isr>
		if (ret != -EBUSY) {
   13042:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   13046:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   13048:	d00d      	beq.n	13066 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1304a:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   1304e:	bf14      	ite	ne
   13050:	2100      	movne	r1, #0
   13052:	2101      	moveq	r1, #1
   13054:	f105 0030 	add.w	r0, r5, #48	; 0x30
   13058:	f7ff ff68 	bl	12f2c <isr>
   1305c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1305e:	f105 0018 	add.w	r0, r5, #24
   13062:	f000 fd38 	bl	13ad6 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   13066:	4b04      	ldr	r3, [pc, #16]	; (13078 <isr_rand+0x4c>)
   13068:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   1306a:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   1306c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13070:	bf1c      	itt	ne
   13072:	2201      	movne	r2, #1
   13074:	605a      	strne	r2, [r3, #4]
   13076:	bd38      	pop	{r3, r4, r5, pc}
   13078:	4000d000 	.word	0x4000d000

0001307c <entropy_nrf5_get_entropy>:
{
   1307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13080:	6885      	ldr	r5, [r0, #8]
{
   13082:	460f      	mov	r7, r1
   13084:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   13086:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   1308a:	b914      	cbnz	r4, 13092 <entropy_nrf5_get_entropy+0x16>
}
   1308c:	4620      	mov	r0, r4
   1308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13092:	2cff      	cmp	r4, #255	; 0xff
   13094:	4623      	mov	r3, r4
   13096:	bf28      	it	cs
   13098:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   1309a:	1ae4      	subs	r4, r4, r3
   1309c:	b2de      	uxtb	r6, r3
   1309e:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   130a0:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   130a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130a8:	4628      	mov	r0, r5
   130aa:	f000 fd3c 	bl	13b26 <_impl_k_sem_take>
   130ae:	4631      	mov	r1, r6
   130b0:	463a      	mov	r2, r7
   130b2:	4648      	mov	r0, r9
   130b4:	f7ff fed8 	bl	12e68 <get>
   130b8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   130ba:	4628      	mov	r0, r5
   130bc:	f000 fd0b 	bl	13ad6 <_impl_k_sem_give>
			if (len8) {
   130c0:	2e00      	cmp	r6, #0
   130c2:	d0e2      	beq.n	1308a <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   130c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130c8:	4640      	mov	r0, r8
   130ca:	f000 fd2c 	bl	13b26 <_impl_k_sem_take>
   130ce:	e7e9      	b.n	130a4 <entropy_nrf5_get_entropy+0x28>

000130d0 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   130d0:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   130d2:	4802      	ldr	r0, [pc, #8]	; (130dc <entropy_nrf_get_entropy_isr+0xc>)
   130d4:	460a      	mov	r2, r1
   130d6:	4619      	mov	r1, r3
   130d8:	f7ff bec6 	b.w	12e68 <get>
   130dc:	2000173c 	.word	0x2000173c

000130e0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   130e0:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   130e2:	4b08      	ldr	r3, [pc, #32]	; (13104 <_sys_device_do_config_level+0x24>)
   130e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   130e8:	3001      	adds	r0, #1
   130ea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   130ee:	4620      	mov	r0, r4
   130f0:	42a8      	cmp	r0, r5
   130f2:	f104 040c 	add.w	r4, r4, #12
   130f6:	d300      	bcc.n	130fa <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   130f8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   130fa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   130fe:	685b      	ldr	r3, [r3, #4]
   13100:	4798      	blx	r3
   13102:	e7f4      	b.n	130ee <_sys_device_do_config_level+0xe>
   13104:	00017b44 	.word	0x00017b44

00013108 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13108:	4b10      	ldr	r3, [pc, #64]	; (1314c <device_get_binding+0x44>)
{
   1310a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1310c:	4c10      	ldr	r4, [pc, #64]	; (13150 <device_get_binding+0x48>)
{
   1310e:	4605      	mov	r5, r0
   13110:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13112:	429c      	cmp	r4, r3
   13114:	d104      	bne.n	13120 <device_get_binding+0x18>
   13116:	4c0e      	ldr	r4, [pc, #56]	; (13150 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13118:	42b4      	cmp	r4, r6
   1311a:	d109      	bne.n	13130 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   1311c:	2400      	movs	r4, #0
   1311e:	e012      	b.n	13146 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13120:	6862      	ldr	r2, [r4, #4]
   13122:	b11a      	cbz	r2, 1312c <device_get_binding+0x24>
   13124:	6822      	ldr	r2, [r4, #0]
   13126:	6812      	ldr	r2, [r2, #0]
   13128:	42aa      	cmp	r2, r5
   1312a:	d00c      	beq.n	13146 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1312c:	340c      	adds	r4, #12
   1312e:	e7f0      	b.n	13112 <device_get_binding+0xa>
		if (!info->driver_api) {
   13130:	6863      	ldr	r3, [r4, #4]
   13132:	b90b      	cbnz	r3, 13138 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13134:	340c      	adds	r4, #12
   13136:	e7ef      	b.n	13118 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   13138:	6823      	ldr	r3, [r4, #0]
   1313a:	4628      	mov	r0, r5
   1313c:	6819      	ldr	r1, [r3, #0]
   1313e:	f7ee fd3b 	bl	1bb8 <strcmp>
   13142:	2800      	cmp	r0, #0
   13144:	d1f6      	bne.n	13134 <device_get_binding+0x2c>
}
   13146:	4620      	mov	r0, r4
   13148:	bd70      	pop	{r4, r5, r6, pc}
   1314a:	bf00      	nop
   1314c:	20003f0c 	.word	0x20003f0c
   13150:	20003e7c 	.word	0x20003e7c

00013154 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13154:	1c43      	adds	r3, r0, #1
   13156:	d003      	beq.n	13160 <_sys_power_save_idle_exit+0xc>
   13158:	4b03      	ldr	r3, [pc, #12]	; (13168 <_sys_power_save_idle_exit+0x14>)
   1315a:	681b      	ldr	r3, [r3, #0]
   1315c:	4298      	cmp	r0, r3
   1315e:	db01      	blt.n	13164 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13160:	f7ee b942 	b.w	13e8 <_timer_idle_exit>
   13164:	4770      	bx	lr
   13166:	bf00      	nop
   13168:	20003e70 	.word	0x20003e70

0001316c <idle>:
	return list->head == list;
   1316c:	4d0f      	ldr	r5, [pc, #60]	; (131ac <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1316e:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13170:	4f0f      	ldr	r7, [pc, #60]	; (131b0 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13172:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   13176:	f04f 0220 	mov.w	r2, #32
   1317a:	f3ef 8311 	mrs	r3, BASEPRI
   1317e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13182:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13184:	42b3      	cmp	r3, r6
   13186:	d00a      	beq.n	1319e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13188:	b14b      	cbz	r3, 1319e <idle+0x32>
   1318a:	691c      	ldr	r4, [r3, #16]
   1318c:	1c63      	adds	r3, r4, #1
   1318e:	d008      	beq.n	131a2 <idle+0x36>
   13190:	683b      	ldr	r3, [r7, #0]
   13192:	42a3      	cmp	r3, r4
   13194:	dd05      	ble.n	131a2 <idle+0x36>
	_kernel.idle = ticks;
   13196:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   13198:	f7ee fbe6 	bl	1968 <k_cpu_idle>
   1319c:	e7eb      	b.n	13176 <idle+0xa>
   1319e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   131a2:	4620      	mov	r0, r4
   131a4:	f7ee f902 	bl	13ac <_timer_idle_enter>
   131a8:	e7f5      	b.n	13196 <idle+0x2a>
   131aa:	bf00      	nop
   131ac:	20001950 	.word	0x20001950
   131b0:	20003e70 	.word	0x20003e70

000131b4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   131b4:	4802      	ldr	r0, [pc, #8]	; (131c0 <_bss_zero+0xc>)
   131b6:	4a03      	ldr	r2, [pc, #12]	; (131c4 <_bss_zero+0x10>)
   131b8:	2100      	movs	r1, #0
   131ba:	1a12      	subs	r2, r2, r0
   131bc:	f7ee bd4a 	b.w	1c54 <memset>
   131c0:	20000000 	.word	0x20000000
   131c4:	20001a10 	.word	0x20001a10

000131c8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   131c8:	4802      	ldr	r0, [pc, #8]	; (131d4 <_data_copy+0xc>)
   131ca:	4a03      	ldr	r2, [pc, #12]	; (131d8 <_data_copy+0x10>)
   131cc:	4903      	ldr	r1, [pc, #12]	; (131dc <_data_copy+0x14>)
   131ce:	1a12      	subs	r2, r2, r0
   131d0:	f7ee bd14 	b.w	1bfc <memcpy>
   131d4:	20003a28 	.word	0x20003a28
   131d8:	20003fb4 	.word	0x20003fb4
   131dc:	00017b94 	.word	0x00017b94

000131e0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   131e0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   131e2:	2002      	movs	r0, #2
   131e4:	f7ff ff7c 	bl	130e0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   131e8:	4807      	ldr	r0, [pc, #28]	; (13208 <bg_thread_main+0x28>)
   131ea:	f7ed fecf 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   131ee:	2003      	movs	r0, #3
   131f0:	f7ff ff76 	bl	130e0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   131f4:	f000 feaa 	bl	13f4c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   131f8:	f7ed fa62 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   131fc:	4a03      	ldr	r2, [pc, #12]	; (1320c <bg_thread_main+0x2c>)
   131fe:	7a13      	ldrb	r3, [r2, #8]
   13200:	f023 0301 	bic.w	r3, r3, #1
   13204:	7213      	strb	r3, [r2, #8]
   13206:	bd08      	pop	{r3, pc}
   13208:	00017b60 	.word	0x00017b60
   1320c:	200017c0 	.word	0x200017c0

00013210 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13210:	b580      	push	{r7, lr}
   13212:	b086      	sub	sp, #24
   13214:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   13216:	f7ee f96b 	bl	14f0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1321a:	4b30      	ldr	r3, [pc, #192]	; (132dc <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1321c:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13220:	4b2f      	ldr	r3, [pc, #188]	; (132e0 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13222:	4d30      	ldr	r5, [pc, #192]	; (132e4 <_Cstart+0xd4>)
   13224:	4e30      	ldr	r6, [pc, #192]	; (132e8 <_Cstart+0xd8>)
   13226:	2400      	movs	r4, #0
   13228:	22e0      	movs	r2, #224	; 0xe0
   1322a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   1322e:	77dc      	strb	r4, [r3, #31]
   13230:	761c      	strb	r4, [r3, #24]
   13232:	765c      	strb	r4, [r3, #25]
   13234:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13238:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1323c:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   1323e:	f7ee fb03 	bl	1848 <_FaultInit>
	_CpuIdleInit();
   13242:	f7ee fb8b 	bl	195c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13246:	4620      	mov	r0, r4
   13248:	f7ff ff4a 	bl	130e0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1324c:	2001      	movs	r0, #1
   1324e:	f7ff ff47 	bl	130e0 <_sys_device_do_config_level>
	_sched_init();
   13252:	f000 fbf9 	bl	13a48 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   13256:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   13258:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   1325a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1325e:	9304      	str	r3, [sp, #16]
   13260:	9403      	str	r4, [sp, #12]
   13262:	9402      	str	r4, [sp, #8]
   13264:	9401      	str	r4, [sp, #4]
   13266:	9400      	str	r4, [sp, #0]
   13268:	4b20      	ldr	r3, [pc, #128]	; (132ec <_Cstart+0xdc>)
   1326a:	4921      	ldr	r1, [pc, #132]	; (132f0 <_Cstart+0xe0>)
   1326c:	4628      	mov	r0, r5
   1326e:	f000 fe15 	bl	13e9c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13272:	7a6b      	ldrb	r3, [r5, #9]
   13274:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13278:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1327c:	726a      	strb	r2, [r5, #9]
   1327e:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   13280:	d102      	bne.n	13288 <_Cstart+0x78>
   13282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13284:	3301      	adds	r3, #1
   13286:	d024      	beq.n	132d2 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   13288:	2301      	movs	r3, #1
   1328a:	4e1a      	ldr	r6, [pc, #104]	; (132f4 <_Cstart+0xe4>)
   1328c:	9304      	str	r3, [sp, #16]
   1328e:	230f      	movs	r3, #15
   13290:	9303      	str	r3, [sp, #12]
   13292:	2300      	movs	r3, #0
   13294:	9302      	str	r3, [sp, #8]
   13296:	9301      	str	r3, [sp, #4]
   13298:	9300      	str	r3, [sp, #0]
   1329a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1329e:	4b16      	ldr	r3, [pc, #88]	; (132f8 <_Cstart+0xe8>)
   132a0:	4916      	ldr	r1, [pc, #88]	; (132fc <_Cstart+0xec>)
   132a2:	4630      	mov	r0, r6
   132a4:	f000 fdfa 	bl	13e9c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   132a8:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   132aa:	60e6      	str	r6, [r4, #12]
   132ac:	f023 0304 	bic.w	r3, r3, #4
   132b0:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   132b2:	4b13      	ldr	r3, [pc, #76]	; (13300 <_Cstart+0xf0>)
   132b4:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   132b6:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   132b8:	4b12      	ldr	r3, [pc, #72]	; (13304 <_Cstart+0xf4>)

	_current = main_thread;
   132ba:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   132bc:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   132c0:	4c11      	ldr	r4, [pc, #68]	; (13308 <_Cstart+0xf8>)
   132c2:	4a0a      	ldr	r2, [pc, #40]	; (132ec <_Cstart+0xdc>)
   132c4:	f383 8809 	msr	PSP, r3
   132c8:	2100      	movs	r1, #0
   132ca:	f381 8811 	msr	BASEPRI, r1
   132ce:	4610      	mov	r0, r2
   132d0:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   132d2:	4628      	mov	r0, r5
   132d4:	f000 fab4 	bl	13840 <_add_thread_to_ready_q>
   132d8:	e7d6      	b.n	13288 <_Cstart+0x78>
   132da:	bf00      	nop
   132dc:	20003628 	.word	0x20003628
   132e0:	e000ed00 	.word	0xe000ed00
   132e4:	200017c0 	.word	0x200017c0
   132e8:	20001950 	.word	0x20001950
   132ec:	000131e1 	.word	0x000131e1
   132f0:	200028e8 	.word	0x200028e8
   132f4:	20001750 	.word	0x20001750
   132f8:	0001316d 	.word	0x0001316d
   132fc:	20002ce8 	.word	0x20002ce8
   13300:	20001964 	.word	0x20001964
   13304:	20002ce8 	.word	0x20002ce8
   13308:	00000899 	.word	0x00000899

0001330c <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   1330c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1330e:	4c07      	ldr	r4, [pc, #28]	; (1332c <init_static_pools+0x20>)
   13310:	4d07      	ldr	r5, [pc, #28]	; (13330 <init_static_pools+0x24>)
   13312:	42ac      	cmp	r4, r5
   13314:	d301      	bcc.n	1331a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   13316:	2000      	movs	r0, #0
   13318:	bd38      	pop	{r3, r4, r5, pc}
   1331a:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   1331e:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13320:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13322:	4620      	mov	r0, r4
   13324:	f7ed faf3 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13328:	341c      	adds	r4, #28
   1332a:	e7f2      	b.n	13312 <init_static_pools+0x6>
   1332c:	20003f0c 	.word	0x20003f0c
   13330:	20003f0c 	.word	0x20003f0c

00013334 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   13338:	1e1d      	subs	r5, r3, #0
{
   1333a:	b085      	sub	sp, #20
   1333c:	4607      	mov	r7, r0
   1333e:	460c      	mov	r4, r1
   13340:	4692      	mov	sl, r2
	if (timeout > 0) {
   13342:	dd4c      	ble.n	133de <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   13344:	f000 fc16 	bl	13b74 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13348:	f105 0309 	add.w	r3, r5, #9
   1334c:	220a      	movs	r2, #10
   1334e:	fbb3 f3f2 	udiv	r3, r3, r2
   13352:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   13356:	4b23      	ldr	r3, [pc, #140]	; (133e4 <k_mem_pool_alloc+0xb0>)
   13358:	4e23      	ldr	r6, [pc, #140]	; (133e8 <k_mem_pool_alloc+0xb4>)
   1335a:	1afb      	subs	r3, r7, r3
   1335c:	109b      	asrs	r3, r3, #2
   1335e:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13360:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13362:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   13366:	9400      	str	r4, [sp, #0]
   13368:	ab03      	add	r3, sp, #12
   1336a:	aa02      	add	r2, sp, #8
   1336c:	4651      	mov	r1, sl
   1336e:	4638      	mov	r0, r7
   13370:	f7ed fb18 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13374:	f110 0f0b 	cmn.w	r0, #11
   13378:	d10b      	bne.n	13392 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1337a:	9400      	str	r4, [sp, #0]
   1337c:	ab03      	add	r3, sp, #12
   1337e:	aa02      	add	r2, sp, #8
   13380:	4651      	mov	r1, sl
   13382:	4638      	mov	r0, r7
   13384:	f7ed fb0e 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   13388:	f110 0f0b 	cmn.w	r0, #11
   1338c:	bf08      	it	eq
   1338e:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   13392:	7963      	ldrb	r3, [r4, #5]
   13394:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   13396:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   13398:	f362 0303 	bfi	r3, r2, #0, #4
   1339c:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   1339e:	6863      	ldr	r3, [r4, #4]
   133a0:	9a03      	ldr	r2, [sp, #12]
   133a2:	f362 331f 	bfi	r3, r2, #12, #20
   133a6:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   133a8:	b1b0      	cbz	r0, 133d8 <k_mem_pool_alloc+0xa4>
   133aa:	b1ad      	cbz	r5, 133d8 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   133ac:	f110 0f0c 	cmn.w	r0, #12
   133b0:	d112      	bne.n	133d8 <k_mem_pool_alloc+0xa4>
   133b2:	f04f 0320 	mov.w	r3, #32
   133b6:	f3ef 8011 	mrs	r0, BASEPRI
   133ba:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   133be:	462a      	mov	r2, r5
   133c0:	4659      	mov	r1, fp
   133c2:	f000 faeb 	bl	1399c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   133c6:	1c6b      	adds	r3, r5, #1
   133c8:	d0cd      	beq.n	13366 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   133ca:	f000 fbd3 	bl	13b74 <_tick_get>

			if (timeout < 0) {
   133ce:	ebb8 0500 	subs.w	r5, r8, r0
   133d2:	d5c8      	bpl.n	13366 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   133d4:	f06f 000a 	mvn.w	r0, #10
}
   133d8:	b005      	add	sp, #20
   133da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   133de:	f04f 0800 	mov.w	r8, #0
   133e2:	e7b8      	b.n	13356 <k_mem_pool_alloc+0x22>
   133e4:	20003f0c 	.word	0x20003f0c
   133e8:	b6db6db7 	.word	0xb6db6db7

000133ec <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   133ec:	b570      	push	{r4, r5, r6, lr}
   133ee:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   133f0:	6802      	ldr	r2, [r0, #0]
   133f2:	7841      	ldrb	r1, [r0, #1]
   133f4:	4e13      	ldr	r6, [pc, #76]	; (13444 <k_mem_pool_free_id+0x58>)
   133f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   133fa:	00a4      	lsls	r4, r4, #2
   133fc:	0b12      	lsrs	r2, r2, #12
   133fe:	f001 010f 	and.w	r1, r1, #15
   13402:	1930      	adds	r0, r6, r4
   13404:	f7ed fb80 	bl	b08 <_sys_mem_pool_block_free>
   13408:	f04f 0320 	mov.w	r3, #32
   1340c:	f3ef 8511 	mrs	r5, BASEPRI
   13410:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13414:	f104 0014 	add.w	r0, r4, #20
   13418:	4430      	add	r0, r6
   1341a:	f000 fb05 	bl	13a28 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   1341e:	b140      	cbz	r0, 13432 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13420:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13424:	2b0d      	cmp	r3, #13
   13426:	d804      	bhi.n	13432 <k_mem_pool_free_id+0x46>
   13428:	b133      	cbz	r3, 13438 <k_mem_pool_free_id+0x4c>
   1342a:	4b07      	ldr	r3, [pc, #28]	; (13448 <k_mem_pool_free_id+0x5c>)
   1342c:	685b      	ldr	r3, [r3, #4]
   1342e:	051b      	lsls	r3, r3, #20
   13430:	d402      	bmi.n	13438 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13432:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   13436:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   13438:	4628      	mov	r0, r5
}
   1343a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   1343e:	f000 b9a7 	b.w	13790 <_reschedule>
   13442:	bf00      	nop
   13444:	20003f0c 	.word	0x20003f0c
   13448:	e000ed00 	.word	0xe000ed00

0001344c <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   1344c:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1344e:	1d0a      	adds	r2, r1, #4
   13450:	d204      	bcs.n	1345c <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   13452:	2300      	movs	r3, #0
   13454:	4669      	mov	r1, sp
   13456:	f7ff ff6d 	bl	13334 <k_mem_pool_alloc>
   1345a:	b118      	cbz	r0, 13464 <k_mem_pool_malloc+0x18>
		return NULL;
   1345c:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   1345e:	b003      	add	sp, #12
   13460:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13464:	2204      	movs	r2, #4
   13466:	eb0d 0102 	add.w	r1, sp, r2
   1346a:	9800      	ldr	r0, [sp, #0]
   1346c:	f7ee fbc6 	bl	1bfc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13470:	9800      	ldr	r0, [sp, #0]
   13472:	3004      	adds	r0, #4
   13474:	e7f3      	b.n	1345e <k_mem_pool_malloc+0x12>

00013476 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   13476:	b110      	cbz	r0, 1347e <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   13478:	3804      	subs	r0, #4
   1347a:	f7ff bfb7 	b.w	133ec <k_mem_pool_free_id>
   1347e:	4770      	bx	lr

00013480 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   13480:	4b03      	ldr	r3, [pc, #12]	; (13490 <z_thread_malloc+0x10>)
   13482:	689b      	ldr	r3, [r3, #8]
{
   13484:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   13486:	6e58      	ldr	r0, [r3, #100]	; 0x64
   13488:	b108      	cbz	r0, 1348e <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1348a:	f7ff bfdf 	b.w	1344c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1348e:	4770      	bx	lr
   13490:	20001950 	.word	0x20001950

00013494 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   13494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13496:	4605      	mov	r5, r0
   13498:	460f      	mov	r7, r1
   1349a:	4614      	mov	r4, r2
	__asm__ volatile(
   1349c:	f04f 0220 	mov.w	r2, #32
   134a0:	f3ef 8611 	mrs	r6, BASEPRI
   134a4:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   134a8:	b1a3      	cbz	r3, 134d4 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   134aa:	2008      	movs	r0, #8
   134ac:	f7ff ffe8 	bl	13480 <z_thread_malloc>
		if (!anode) {
   134b0:	2800      	cmp	r0, #0
   134b2:	d034      	beq.n	1351e <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   134b4:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   134b6:	6044      	str	r4, [r0, #4]
   134b8:	6003      	str	r3, [r0, #0]
   134ba:	4604      	mov	r4, r0
   134bc:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   134be:	b95f      	cbnz	r7, 134d8 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   134c0:	682a      	ldr	r2, [r5, #0]
   134c2:	f003 0303 	and.w	r3, r3, #3
   134c6:	4313      	orrs	r3, r2
   134c8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   134ca:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   134cc:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   134ce:	b973      	cbnz	r3, 134ee <queue_insert+0x5a>
	list->tail = node;
   134d0:	606c      	str	r4, [r5, #4]
   134d2:	e00c      	b.n	134ee <queue_insert+0x5a>
	node->next_and_flags = flags;
   134d4:	6023      	str	r3, [r4, #0]
   134d6:	e7f1      	b.n	134bc <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   134d8:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   134da:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   134de:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   134e2:	d114      	bne.n	1350e <queue_insert+0x7a>
   134e4:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   134e6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   134e8:	b95a      	cbnz	r2, 13502 <queue_insert+0x6e>
	list->tail = node;
   134ea:	606c      	str	r4, [r5, #4]
	list->head = node;
   134ec:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   134ee:	2104      	movs	r1, #4
   134f0:	f105 0008 	add.w	r0, r5, #8
   134f4:	f000 ffb4 	bl	14460 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   134f8:	4630      	mov	r0, r6
   134fa:	f000 f949 	bl	13790 <_reschedule>
	return 0;
   134fe:	2000      	movs	r0, #0
   13500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13502:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13504:	f003 0303 	and.w	r3, r3, #3
   13508:	4323      	orrs	r3, r4
   1350a:	6013      	str	r3, [r2, #0]
   1350c:	e7e0      	b.n	134d0 <queue_insert+0x3c>
   1350e:	4313      	orrs	r3, r2
   13510:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13512:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13514:	f002 0203 	and.w	r2, r2, #3
   13518:	4314      	orrs	r4, r2
   1351a:	603c      	str	r4, [r7, #0]
   1351c:	e7e7      	b.n	134ee <queue_insert+0x5a>
			return -ENOMEM;
   1351e:	f06f 000b 	mvn.w	r0, #11
}
   13522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013524 <z_queue_node_peek>:
{
   13524:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   13526:	4604      	mov	r4, r0
   13528:	b130      	cbz	r0, 13538 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1352a:	6802      	ldr	r2, [r0, #0]
   1352c:	0793      	lsls	r3, r2, #30
   1352e:	d003      	beq.n	13538 <z_queue_node_peek+0x14>
		ret = anode->data;
   13530:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13532:	b109      	cbz	r1, 13538 <z_queue_node_peek+0x14>
			k_free(anode);
   13534:	f7ff ff9f 	bl	13476 <k_free>
}
   13538:	4620      	mov	r0, r4
   1353a:	bd10      	pop	{r4, pc}

0001353c <_impl_k_queue_init>:
	list->head = NULL;
   1353c:	2300      	movs	r3, #0
   1353e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13540:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   13542:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   13546:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13548:	60c3      	str	r3, [r0, #12]
   1354a:	4770      	bx	lr

0001354c <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   1354c:	460a      	mov	r2, r1
   1354e:	2300      	movs	r3, #0
   13550:	6841      	ldr	r1, [r0, #4]
   13552:	f7ff bf9f 	b.w	13494 <queue_insert>

00013556 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13556:	2300      	movs	r3, #0
   13558:	460a      	mov	r2, r1
   1355a:	4619      	mov	r1, r3
   1355c:	f7ff bf9a 	b.w	13494 <queue_insert>

00013560 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13560:	b538      	push	{r3, r4, r5, lr}
   13562:	f04f 0320 	mov.w	r3, #32
   13566:	f3ef 8511 	mrs	r5, BASEPRI
   1356a:	f383 8811 	msr	BASEPRI, r3
   1356e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13570:	b953      	cbnz	r3, 13588 <k_queue_append_list+0x28>
	list->head = node;
   13572:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13574:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13576:	2104      	movs	r1, #4
   13578:	3008      	adds	r0, #8
   1357a:	f000 ff71 	bl	14460 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   1357e:	4628      	mov	r0, r5
}
   13580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13584:	f000 b904 	b.w	13790 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13588:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1358a:	f004 0403 	and.w	r4, r4, #3
   1358e:	4321      	orrs	r1, r4
   13590:	6019      	str	r1, [r3, #0]
   13592:	e7ef      	b.n	13574 <k_queue_append_list+0x14>

00013594 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13598:	4604      	mov	r4, r0
   1359a:	b086      	sub	sp, #24
   1359c:	460d      	mov	r5, r1
   1359e:	f04f 0320 	mov.w	r3, #32
   135a2:	f3ef 8711 	mrs	r7, BASEPRI
   135a6:	f383 8811 	msr	BASEPRI, r3
   135aa:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   135ac:	b182      	cbz	r2, 135d0 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   135ae:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   135b0:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   135b2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   135b6:	428a      	cmp	r2, r1
	list->head = node;
   135b8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   135ba:	bf08      	it	eq
   135bc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   135be:	2101      	movs	r1, #1
   135c0:	4610      	mov	r0, r2
   135c2:	f7ff ffaf 	bl	13524 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   135c6:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   135ca:	b006      	add	sp, #24
   135cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   135d0:	b919      	cbnz	r1, 135da <_impl_k_queue_get+0x46>
   135d2:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   135d6:	2000      	movs	r0, #0
   135d8:	e7f7      	b.n	135ca <_impl_k_queue_get+0x36>
   135da:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   135de:	2104      	movs	r1, #4
   135e0:	4603      	mov	r3, r0
   135e2:	eb0d 0001 	add.w	r0, sp, r1
   135e6:	f000 fea4 	bl	14332 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   135ea:	1c6a      	adds	r2, r5, #1
   135ec:	d002      	beq.n	135f4 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   135ee:	f000 fab7 	bl	13b60 <_impl_k_uptime_get_32>
   135f2:	4606      	mov	r6, r0
{
   135f4:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   135f6:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   135fa:	1bea      	subs	r2, r5, r7
   135fc:	f36f 1307 	bfc	r3, #4, #4
   13600:	2101      	movs	r1, #1
   13602:	a801      	add	r0, sp, #4
   13604:	f88d 3011 	strb.w	r3, [sp, #17]
   13608:	f000 fea6 	bl	14358 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   1360c:	b108      	cbz	r0, 13612 <_impl_k_queue_get+0x7e>
   1360e:	300b      	adds	r0, #11
   13610:	d1e1      	bne.n	135d6 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   13612:	f04f 0320 	mov.w	r3, #32
   13616:	f3ef 8811 	mrs	r8, BASEPRI
   1361a:	f383 8811 	msr	BASEPRI, r3
   1361e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13620:	b138      	cbz	r0, 13632 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13622:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13624:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13626:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   1362a:	4290      	cmp	r0, r2
	list->head = node;
   1362c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1362e:	bf08      	it	eq
   13630:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   13632:	2101      	movs	r1, #1
   13634:	f7ff ff76 	bl	13524 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13638:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   1363c:	2800      	cmp	r0, #0
   1363e:	d1c4      	bne.n	135ca <_impl_k_queue_get+0x36>
   13640:	1c6b      	adds	r3, r5, #1
   13642:	d0d8      	beq.n	135f6 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13644:	f000 fa8c 	bl	13b60 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   13648:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   1364a:	42bd      	cmp	r5, r7
   1364c:	dad3      	bge.n	135f6 <_impl_k_queue_get+0x62>
   1364e:	e7c2      	b.n	135d6 <_impl_k_queue_get+0x42>

00013650 <sys_dlist_remove>:
	node->prev->next = node->next;
   13650:	e890 000c 	ldmia.w	r0, {r2, r3}
   13654:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13656:	6802      	ldr	r2, [r0, #0]
   13658:	6053      	str	r3, [r2, #4]
   1365a:	4770      	bx	lr

0001365c <_abort_timeout>:
{
   1365c:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1365e:	6900      	ldr	r0, [r0, #16]
{
   13660:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13662:	1c43      	adds	r3, r0, #1
   13664:	d00e      	beq.n	13684 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13666:	4b08      	ldr	r3, [pc, #32]	; (13688 <_abort_timeout+0x2c>)
   13668:	699b      	ldr	r3, [r3, #24]
   1366a:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   1366c:	bf1f      	itttt	ne
   1366e:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13670:	6913      	ldrne	r3, [r2, #16]
   13672:	18c0      	addne	r0, r0, r3
   13674:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13676:	4608      	mov	r0, r1
   13678:	f7ff ffea 	bl	13650 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   1367c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13680:	610b      	str	r3, [r1, #16]
	return 0;
   13682:	2000      	movs	r0, #0
}
   13684:	bd08      	pop	{r3, pc}
   13686:	bf00      	nop
   13688:	20001950 	.word	0x20001950

0001368c <k_spin_lock.isra.11>:
	__asm__ volatile(
   1368c:	f04f 0320 	mov.w	r3, #32
   13690:	f3ef 8011 	mrs	r0, BASEPRI
   13694:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13698:	4770      	bx	lr
	...

0001369c <update_cache>:
	return list->head == list;
   1369c:	4b0d      	ldr	r3, [pc, #52]	; (136d4 <update_cache+0x38>)
   1369e:	4619      	mov	r1, r3
   136a0:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136a4:	428a      	cmp	r2, r1
   136a6:	d000      	beq.n	136aa <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   136a8:	b902      	cbnz	r2, 136ac <update_cache+0x10>
   136aa:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   136ac:	b970      	cbnz	r0, 136cc <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   136ae:	6899      	ldr	r1, [r3, #8]
   136b0:	b161      	cbz	r1, 136cc <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   136b2:	7a48      	ldrb	r0, [r1, #9]
   136b4:	06c0      	lsls	r0, r0, #27
   136b6:	d109      	bne.n	136cc <update_cache+0x30>
   136b8:	6a48      	ldr	r0, [r1, #36]	; 0x24
   136ba:	3001      	adds	r0, #1
   136bc:	d106      	bne.n	136cc <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   136be:	8948      	ldrh	r0, [r1, #10]
   136c0:	287f      	cmp	r0, #127	; 0x7f
   136c2:	d903      	bls.n	136cc <update_cache+0x30>
	return thread == _idle_thread;
   136c4:	4804      	ldr	r0, [pc, #16]	; (136d8 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   136c6:	6800      	ldr	r0, [r0, #0]
   136c8:	4281      	cmp	r1, r0
   136ca:	d101      	bne.n	136d0 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   136cc:	621a      	str	r2, [r3, #32]
   136ce:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   136d0:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   136d2:	4770      	bx	lr
   136d4:	20001950 	.word	0x20001950
   136d8:	00017b5c 	.word	0x00017b5c

000136dc <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   136dc:	f990 000a 	ldrsb.w	r0, [r0, #10]
   136e0:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   136e4:	4298      	cmp	r0, r3
   136e6:	bfac      	ite	ge
   136e8:	2000      	movge	r0, #0
   136ea:	2001      	movlt	r0, #1
   136ec:	4770      	bx	lr
	...

000136f0 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   136f0:	b510      	push	{r4, lr}
   136f2:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   136f4:	f7ff ffca 	bl	1368c <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   136f8:	7a4b      	ldrb	r3, [r1, #9]
   136fa:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   136fc:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   136fe:	d50d      	bpl.n	1371c <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   13700:	4608      	mov	r0, r1
   13702:	f7ff ffa5 	bl	13650 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   13706:	7a4b      	ldrb	r3, [r1, #9]
   13708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1370c:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   1370e:	4b05      	ldr	r3, [pc, #20]	; (13724 <_remove_thread_from_ready_q+0x34>)
   13710:	6898      	ldr	r0, [r3, #8]
   13712:	1a43      	subs	r3, r0, r1
   13714:	4258      	negs	r0, r3
   13716:	4158      	adcs	r0, r3
   13718:	f7ff ffc0 	bl	1369c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1371c:	f384 8811 	msr	BASEPRI, r4
   13720:	bd10      	pop	{r4, pc}
   13722:	bf00      	nop
   13724:	20001950 	.word	0x20001950

00013728 <_find_first_thread_to_unpend>:
{
   13728:	b508      	push	{r3, lr}
   1372a:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   1372c:	f7ff ffae 	bl	1368c <k_spin_lock.isra.11>
	return list->head == list;
   13730:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13732:	429a      	cmp	r2, r3
   13734:	bf08      	it	eq
   13736:	2300      	moveq	r3, #0
   13738:	f380 8811 	msr	BASEPRI, r0
}
   1373c:	4618      	mov	r0, r3
   1373e:	bd08      	pop	{r3, pc}

00013740 <_unpend_thread_no_timeout>:
{
   13740:	b510      	push	{r4, lr}
   13742:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13744:	f7ff ffa2 	bl	1368c <k_spin_lock.isra.11>
   13748:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   1374a:	4608      	mov	r0, r1
   1374c:	f7ff ff80 	bl	13650 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13750:	7a4b      	ldrb	r3, [r1, #9]
   13752:	f023 0302 	bic.w	r3, r3, #2
   13756:	724b      	strb	r3, [r1, #9]
   13758:	f384 8811 	msr	BASEPRI, r4
   1375c:	bd10      	pop	{r4, pc}

0001375e <_unpend_first_thread>:
{
   1375e:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13760:	2100      	movs	r1, #0
   13762:	f7ff ffe1 	bl	13728 <_find_first_thread_to_unpend>

	if (thread) {
   13766:	4604      	mov	r4, r0
   13768:	b128      	cbz	r0, 13776 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   1376a:	f7ff ffe9 	bl	13740 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   1376e:	f104 0014 	add.w	r0, r4, #20
   13772:	f7ff ff73 	bl	1365c <_abort_timeout>
}
   13776:	4620      	mov	r0, r4
   13778:	bd10      	pop	{r4, pc}

0001377a <_unpend_thread>:
{
   1377a:	b510      	push	{r4, lr}
   1377c:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   1377e:	f7ff ffdf 	bl	13740 <_unpend_thread_no_timeout>
   13782:	f104 0014 	add.w	r0, r4, #20
}
   13786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1378a:	f7ff bf67 	b.w	1365c <_abort_timeout>
	...

00013790 <_reschedule>:
   13790:	f3ef 8305 	mrs	r3, IPSR
   13794:	2b0d      	cmp	r3, #13
   13796:	d809      	bhi.n	137ac <_reschedule+0x1c>
   13798:	b11b      	cbz	r3, 137a2 <_reschedule+0x12>
   1379a:	4b09      	ldr	r3, [pc, #36]	; (137c0 <_reschedule+0x30>)
   1379c:	685b      	ldr	r3, [r3, #4]
   1379e:	051b      	lsls	r3, r3, #20
   137a0:	d504      	bpl.n	137ac <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   137a2:	4b08      	ldr	r3, [pc, #32]	; (137c4 <_reschedule+0x34>)
   137a4:	689a      	ldr	r2, [r3, #8]
   137a6:	6a1b      	ldr	r3, [r3, #32]
   137a8:	429a      	cmp	r2, r3
   137aa:	d103      	bne.n	137b4 <_reschedule+0x24>
   137ac:	f380 8811 	msr	BASEPRI, r0
}
   137b0:	2000      	movs	r0, #0
   137b2:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   137b4:	4b04      	ldr	r3, [pc, #16]	; (137c8 <_reschedule+0x38>)
   137b6:	2200      	movs	r2, #0
   137b8:	601a      	str	r2, [r3, #0]
   137ba:	f7ed bea5 	b.w	1508 <__swap>
   137be:	bf00      	nop
   137c0:	e000ed00 	.word	0xe000ed00
   137c4:	20001950 	.word	0x20001950
   137c8:	20001984 	.word	0x20001984

000137cc <k_sched_unlock>:
{
   137cc:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   137ce:	f7ff ff5d 	bl	1368c <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   137d2:	4b0a      	ldr	r3, [pc, #40]	; (137fc <k_sched_unlock+0x30>)
   137d4:	689a      	ldr	r2, [r3, #8]
   137d6:	7ad3      	ldrb	r3, [r2, #11]
   137d8:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   137da:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   137dc:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   137de:	2001      	movs	r0, #1
   137e0:	f7ff ff5c 	bl	1369c <update_cache>
   137e4:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   137e8:	f04f 0320 	mov.w	r3, #32
   137ec:	f3ef 8011 	mrs	r0, BASEPRI
   137f0:	f383 8811 	msr	BASEPRI, r3
}
   137f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   137f8:	f7ff bfca 	b.w	13790 <_reschedule>
   137fc:	20001950 	.word	0x20001950

00013800 <_priq_dumb_add>:
{
   13800:	b510      	push	{r4, lr}
	return list->head == list;
   13802:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13804:	4298      	cmp	r0, r3
   13806:	bf08      	it	eq
   13808:	2300      	moveq	r3, #0
   1380a:	b193      	cbz	r3, 13832 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   1380c:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13810:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13814:	4294      	cmp	r4, r2
   13816:	da06      	bge.n	13826 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   13818:	685a      	ldr	r2, [r3, #4]
   1381a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1381c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1381e:	685a      	ldr	r2, [r3, #4]
   13820:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13822:	6059      	str	r1, [r3, #4]
   13824:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   13826:	6842      	ldr	r2, [r0, #4]
   13828:	4293      	cmp	r3, r2
   1382a:	d002      	beq.n	13832 <_priq_dumb_add+0x32>
   1382c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1382e:	2b00      	cmp	r3, #0
   13830:	d1eb      	bne.n	1380a <_priq_dumb_add+0xa>
	node->next = list;
   13832:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13834:	6843      	ldr	r3, [r0, #4]
   13836:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13838:	6843      	ldr	r3, [r0, #4]
   1383a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1383c:	6041      	str	r1, [r0, #4]
   1383e:	bd10      	pop	{r4, pc}

00013840 <_add_thread_to_ready_q>:
{
   13840:	b538      	push	{r3, r4, r5, lr}
   13842:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13844:	f7ff ff22 	bl	1368c <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13848:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   1384a:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1384c:	4806      	ldr	r0, [pc, #24]	; (13868 <_add_thread_to_ready_q+0x28>)
   1384e:	f7ff ffd7 	bl	13800 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13852:	7a63      	ldrb	r3, [r4, #9]
   13854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13858:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1385a:	2000      	movs	r0, #0
   1385c:	f7ff ff1e 	bl	1369c <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13860:	f385 8811 	msr	BASEPRI, r5
   13864:	bd38      	pop	{r3, r4, r5, pc}
   13866:	bf00      	nop
   13868:	20001974 	.word	0x20001974

0001386c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   1386c:	7a42      	ldrb	r2, [r0, #9]
   1386e:	06d2      	lsls	r2, r2, #27
   13870:	d104      	bne.n	1387c <_ready_thread+0x10>
   13872:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13874:	3301      	adds	r3, #1
   13876:	d101      	bne.n	1387c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13878:	f7ff bfe2 	b.w	13840 <_add_thread_to_ready_q>
   1387c:	4770      	bx	lr
	...

00013880 <_add_timeout>:
{
   13880:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13882:	610b      	str	r3, [r1, #16]
{
   13884:	4604      	mov	r4, r0
   13886:	461d      	mov	r5, r3
	timeout->thread = thread;
   13888:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1388a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1388c:	bb03      	cbnz	r3, 138d0 <_add_timeout+0x50>
	__asm__ volatile(
   1388e:	f04f 0320 	mov.w	r3, #32
   13892:	f3ef 8611 	mrs	r6, BASEPRI
   13896:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1389a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1389e:	610b      	str	r3, [r1, #16]
	if (thread) {
   138a0:	b170      	cbz	r0, 138c0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   138a2:	68cb      	ldr	r3, [r1, #12]
   138a4:	b113      	cbz	r3, 138ac <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   138a6:	f7ff ff4b 	bl	13740 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   138aa:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   138ac:	7a63      	ldrb	r3, [r4, #9]
   138ae:	f023 0304 	bic.w	r3, r3, #4
   138b2:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   138b4:	4620      	mov	r0, r4
   138b6:	f7ff ffd9 	bl	1386c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   138ba:	f386 8811 	msr	BASEPRI, r6
   138be:	bd70      	pop	{r4, r5, r6, pc}
   138c0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   138c4:	694b      	ldr	r3, [r1, #20]
   138c6:	b32b      	cbz	r3, 13914 <_add_timeout+0x94>
			timeout->func(timeout);
   138c8:	4608      	mov	r0, r1
}
   138ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   138ce:	4718      	bx	r3
	return list->head == list;
   138d0:	4a11      	ldr	r2, [pc, #68]	; (13918 <_add_timeout+0x98>)
   138d2:	4610      	mov	r0, r2
   138d4:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   138d8:	4283      	cmp	r3, r0
   138da:	d10c      	bne.n	138f6 <_add_timeout+0x76>
	node->next = list;
   138dc:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   138de:	6993      	ldr	r3, [r2, #24]
   138e0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   138e2:	6993      	ldr	r3, [r2, #24]
   138e4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   138e6:	6191      	str	r1, [r2, #24]
   138e8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   138ea:	1b64      	subs	r4, r4, r5
   138ec:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   138ee:	6994      	ldr	r4, [r2, #24]
   138f0:	42a3      	cmp	r3, r4
   138f2:	d0f3      	beq.n	138dc <_add_timeout+0x5c>
   138f4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   138f6:	2b00      	cmp	r3, #0
   138f8:	d0f0      	beq.n	138dc <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   138fa:	690c      	ldr	r4, [r1, #16]
   138fc:	691d      	ldr	r5, [r3, #16]
   138fe:	42ac      	cmp	r4, r5
   13900:	dcf3      	bgt.n	138ea <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13902:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13904:	1b2c      	subs	r4, r5, r4
   13906:	611c      	str	r4, [r3, #16]
   13908:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1390a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1390c:	685a      	ldr	r2, [r3, #4]
   1390e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13910:	6059      	str	r1, [r3, #4]
   13912:	bd70      	pop	{r4, r5, r6, pc}
   13914:	bd70      	pop	{r4, r5, r6, pc}
   13916:	bf00      	nop
   13918:	20001950 	.word	0x20001950

0001391c <_move_thread_to_end_of_prio_q>:
{
   1391c:	b538      	push	{r3, r4, r5, lr}
   1391e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13920:	f7ff feb4 	bl	1368c <k_spin_lock.isra.11>
   13924:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13926:	4620      	mov	r0, r4
   13928:	f7ff fe92 	bl	13650 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   1392c:	4621      	mov	r1, r4
   1392e:	4806      	ldr	r0, [pc, #24]	; (13948 <_move_thread_to_end_of_prio_q+0x2c>)
   13930:	f7ff ff66 	bl	13800 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13934:	7a63      	ldrb	r3, [r4, #9]
   13936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1393a:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   1393c:	2000      	movs	r0, #0
   1393e:	f7ff fead 	bl	1369c <update_cache>
   13942:	f385 8811 	msr	BASEPRI, r5
   13946:	bd38      	pop	{r3, r4, r5, pc}
   13948:	20001974 	.word	0x20001974

0001394c <pend>:
{
   1394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1394e:	4605      	mov	r5, r0
   13950:	4614      	mov	r4, r2
   13952:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13954:	f7ff fecc 	bl	136f0 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13958:	7a6b      	ldrb	r3, [r5, #9]
   1395a:	f043 0302 	orr.w	r3, r3, #2
   1395e:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13960:	1c63      	adds	r3, r4, #1
   13962:	d012      	beq.n	1398a <pend+0x3e>
	__asm__ volatile(
   13964:	f04f 0320 	mov.w	r3, #32
   13968:	f3ef 8711 	mrs	r7, BASEPRI
   1396c:	f383 8811 	msr	BASEPRI, r3
   13970:	230a      	movs	r3, #10
   13972:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13974:	4632      	mov	r2, r6
   13976:	fbb4 f3f3 	udiv	r3, r4, r3
   1397a:	f105 0114 	add.w	r1, r5, #20
   1397e:	3301      	adds	r3, #1
   13980:	4628      	mov	r0, r5
   13982:	f7ff ff7d 	bl	13880 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13986:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   1398a:	b12e      	cbz	r6, 13998 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   1398c:	4629      	mov	r1, r5
   1398e:	4630      	mov	r0, r6
}
   13990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13994:	f7ff bf34 	b.w	13800 <_priq_dumb_add>
   13998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001399c <_pend_current_thread>:
{
   1399c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   1399e:	4b06      	ldr	r3, [pc, #24]	; (139b8 <_pend_current_thread+0x1c>)
{
   139a0:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   139a2:	6898      	ldr	r0, [r3, #8]
   139a4:	f7ff ffd2 	bl	1394c <pend>
	_time_slice_elapsed = 0;
   139a8:	4b04      	ldr	r3, [pc, #16]	; (139bc <_pend_current_thread+0x20>)
   139aa:	2200      	movs	r2, #0
   139ac:	4620      	mov	r0, r4
}
   139ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   139b2:	601a      	str	r2, [r3, #0]
   139b4:	f7ed bda8 	b.w	1508 <__swap>
   139b8:	20001950 	.word	0x20001950
   139bc:	20001984 	.word	0x20001984

000139c0 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   139c0:	4b13      	ldr	r3, [pc, #76]	; (13a10 <_is_thread_time_slicing+0x50>)
   139c2:	681b      	ldr	r3, [r3, #0]
   139c4:	2b00      	cmp	r3, #0
{
   139c6:	b510      	push	{r4, lr}
   139c8:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   139ca:	dd1f      	ble.n	13a0c <_is_thread_time_slicing+0x4c>
   139cc:	8943      	ldrh	r3, [r0, #10]
   139ce:	2b7f      	cmp	r3, #127	; 0x7f
   139d0:	d81c      	bhi.n	13a0c <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   139d2:	4b10      	ldr	r3, [pc, #64]	; (13a14 <_is_thread_time_slicing+0x54>)
   139d4:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   139d8:	681b      	ldr	r3, [r3, #0]
   139da:	4299      	cmp	r1, r3
   139dc:	db16      	blt.n	13a0c <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   139de:	f7ff fe55 	bl	1368c <k_spin_lock.isra.11>
	return list->head == list;
   139e2:	490d      	ldr	r1, [pc, #52]	; (13a18 <_is_thread_time_slicing+0x58>)
   139e4:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   139e8:	428b      	cmp	r3, r1
   139ea:	4604      	mov	r4, r0
   139ec:	d00a      	beq.n	13a04 <_is_thread_time_slicing+0x44>
		if (next) {
   139ee:	b15b      	cbz	r3, 13a08 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   139f0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   139f4:	f993 300a 	ldrsb.w	r3, [r3, #10]
   139f8:	1ac3      	subs	r3, r0, r3
   139fa:	4258      	negs	r0, r3
   139fc:	4158      	adcs	r0, r3
   139fe:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13a02:	bd10      	pop	{r4, pc}
   13a04:	2000      	movs	r0, #0
   13a06:	e7fa      	b.n	139fe <_is_thread_time_slicing+0x3e>
   13a08:	4618      	mov	r0, r3
   13a0a:	e7f8      	b.n	139fe <_is_thread_time_slicing+0x3e>
		return 0;
   13a0c:	2000      	movs	r0, #0
}
   13a0e:	bd10      	pop	{r4, pc}
   13a10:	20001830 	.word	0x20001830
   13a14:	20001834 	.word	0x20001834
   13a18:	20001950 	.word	0x20001950

00013a1c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13a1c:	4b01      	ldr	r3, [pc, #4]	; (13a24 <_update_time_slice_before_swap+0x8>)
   13a1e:	2200      	movs	r2, #0
   13a20:	601a      	str	r2, [r3, #0]
   13a22:	4770      	bx	lr
   13a24:	20001984 	.word	0x20001984

00013a28 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13a28:	b538      	push	{r3, r4, r5, lr}
   13a2a:	4605      	mov	r5, r0
	int need_sched = 0;
   13a2c:	2000      	movs	r0, #0
	return list->head == list;
   13a2e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a30:	42a5      	cmp	r5, r4
   13a32:	d000      	beq.n	13a36 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13a34:	b904      	cbnz	r4, 13a38 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13a36:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13a38:	4620      	mov	r0, r4
   13a3a:	f7ff fe9e 	bl	1377a <_unpend_thread>
		_ready_thread(th);
   13a3e:	4620      	mov	r0, r4
   13a40:	f7ff ff14 	bl	1386c <_ready_thread>
		need_sched = 1;
   13a44:	2001      	movs	r0, #1
   13a46:	e7f2      	b.n	13a2e <_unpend_all+0x6>

00013a48 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13a48:	4b02      	ldr	r3, [pc, #8]	; (13a54 <_sched_init+0xc>)
   13a4a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   13a4e:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13a50:	629a      	str	r2, [r3, #40]	; 0x28
   13a52:	4770      	bx	lr
   13a54:	20001950 	.word	0x20001950

00013a58 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13a58:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13a5a:	4c14      	ldr	r4, [pc, #80]	; (13aac <_impl_k_yield+0x54>)
   13a5c:	4b14      	ldr	r3, [pc, #80]	; (13ab0 <_impl_k_yield+0x58>)
   13a5e:	68a2      	ldr	r2, [r4, #8]
   13a60:	681b      	ldr	r3, [r3, #0]
   13a62:	429a      	cmp	r2, r3
   13a64:	d00f      	beq.n	13a86 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13a66:	f7ff fe11 	bl	1368c <k_spin_lock.isra.11>
   13a6a:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13a6c:	68a0      	ldr	r0, [r4, #8]
   13a6e:	f7ff fdef 	bl	13650 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13a72:	68a1      	ldr	r1, [r4, #8]
   13a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13a78:	f7ff fec2 	bl	13800 <_priq_dumb_add>
			update_cache(1);
   13a7c:	2001      	movs	r0, #1
   13a7e:	f7ff fe0d 	bl	1369c <update_cache>
   13a82:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13a86:	6a22      	ldr	r2, [r4, #32]
   13a88:	68a3      	ldr	r3, [r4, #8]
   13a8a:	429a      	cmp	r2, r3
   13a8c:	d00c      	beq.n	13aa8 <_impl_k_yield+0x50>
	__asm__ volatile(
   13a8e:	f04f 0320 	mov.w	r3, #32
   13a92:	f3ef 8011 	mrs	r0, BASEPRI
   13a96:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   13a9a:	4b06      	ldr	r3, [pc, #24]	; (13ab4 <_impl_k_yield+0x5c>)
   13a9c:	2200      	movs	r2, #0
   13a9e:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13aa4:	f7ed bd30 	b.w	1508 <__swap>
   13aa8:	bd38      	pop	{r3, r4, r5, pc}
   13aaa:	bf00      	nop
   13aac:	20001950 	.word	0x20001950
   13ab0:	00017b5c 	.word	0x00017b5c
   13ab4:	20001984 	.word	0x20001984

00013ab8 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   13ab8:	4b01      	ldr	r3, [pc, #4]	; (13ac0 <_impl_k_current_get+0x8>)
   13aba:	6898      	ldr	r0, [r3, #8]
   13abc:	4770      	bx	lr
   13abe:	bf00      	nop
   13ac0:	20001950 	.word	0x20001950

00013ac4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13ac4:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   13ac8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13aca:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13acc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13ace:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13ad0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13ad2:	6143      	str	r3, [r0, #20]
   13ad4:	4770      	bx	lr

00013ad6 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   13ad6:	b570      	push	{r4, r5, r6, lr}
   13ad8:	4604      	mov	r4, r0
   13ada:	f04f 0320 	mov.w	r3, #32
   13ade:	f3ef 8611 	mrs	r6, BASEPRI
   13ae2:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13ae6:	f7ff fe3a 	bl	1375e <_unpend_first_thread>
	if (thread) {
   13aea:	4605      	mov	r5, r0
   13aec:	b160      	cbz	r0, 13b08 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   13aee:	7a43      	ldrb	r3, [r0, #9]
   13af0:	06db      	lsls	r3, r3, #27
   13af2:	d102      	bne.n	13afa <_impl_k_sem_give+0x24>
   13af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13af6:	3301      	adds	r3, #1
   13af8:	d012      	beq.n	13b20 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13afa:	2300      	movs	r3, #0
   13afc:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   13afe:	4630      	mov	r0, r6
}
   13b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   13b04:	f7ff be44 	b.w	13790 <_reschedule>
	sem->count += (sem->count != sem->limit);
   13b08:	68a3      	ldr	r3, [r4, #8]
   13b0a:	68e2      	ldr	r2, [r4, #12]
   13b0c:	429a      	cmp	r2, r3
   13b0e:	bf18      	it	ne
   13b10:	3301      	addne	r3, #1
   13b12:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   13b14:	2102      	movs	r1, #2
   13b16:	f104 0010 	add.w	r0, r4, #16
   13b1a:	f000 fca1 	bl	14460 <_handle_obj_poll_events>
   13b1e:	e7ee      	b.n	13afe <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   13b20:	f7ff fe8e 	bl	13840 <_add_thread_to_ready_q>
   13b24:	e7e9      	b.n	13afa <_impl_k_sem_give+0x24>

00013b26 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13b26:	b410      	push	{r4}
   13b28:	460a      	mov	r2, r1
   13b2a:	4604      	mov	r4, r0
   13b2c:	f04f 0320 	mov.w	r3, #32
   13b30:	f3ef 8011 	mrs	r0, BASEPRI
   13b34:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13b38:	68a3      	ldr	r3, [r4, #8]
   13b3a:	b133      	cbz	r3, 13b4a <_impl_k_sem_take+0x24>
		sem->count--;
   13b3c:	3b01      	subs	r3, #1
   13b3e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b40:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   13b44:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   13b46:	bc10      	pop	{r4}
   13b48:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   13b4a:	b921      	cbnz	r1, 13b56 <_impl_k_sem_take+0x30>
   13b4c:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   13b50:	f06f 000f 	mvn.w	r0, #15
   13b54:	e7f7      	b.n	13b46 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13b56:	4621      	mov	r1, r4
}
   13b58:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   13b5a:	f7ff bf1f 	b.w	1399c <_pend_current_thread>
	...

00013b60 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13b60:	4b03      	ldr	r3, [pc, #12]	; (13b70 <_impl_k_uptime_get_32+0x10>)
   13b62:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13b66:	230a      	movs	r3, #10
   13b68:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   13b6c:	4770      	bx	lr
   13b6e:	bf00      	nop
   13b70:	20001988 	.word	0x20001988

00013b74 <_tick_get>:
	__asm__ volatile(
   13b74:	f04f 0220 	mov.w	r2, #32
   13b78:	f3ef 8311 	mrs	r3, BASEPRI
   13b7c:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13b80:	4a02      	ldr	r2, [pc, #8]	; (13b8c <_tick_get+0x18>)
   13b82:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b86:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13b8a:	4770      	bx	lr
   13b8c:	20001988 	.word	0x20001988

00013b90 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13b90:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13b92:	f7ff ffef 	bl	13b74 <_tick_get>
   13b96:	240a      	movs	r4, #10
   13b98:	fba0 2304 	umull	r2, r3, r0, r4
   13b9c:	fb04 3301 	mla	r3, r4, r1, r3
}
   13ba0:	4610      	mov	r0, r2
   13ba2:	4619      	mov	r1, r3
   13ba4:	bd10      	pop	{r4, pc}
	...

00013ba8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bac:	4607      	mov	r7, r0
   13bae:	b085      	sub	sp, #20
	__asm__ volatile(
   13bb0:	f04f 0320 	mov.w	r3, #32
   13bb4:	f3ef 8011 	mrs	r0, BASEPRI
   13bb8:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13bbc:	4961      	ldr	r1, [pc, #388]	; (13d44 <_nano_sys_clock_tick_announce+0x19c>)
   13bbe:	e9d1 4500 	ldrd	r4, r5, [r1]
   13bc2:	19e2      	adds	r2, r4, r7
   13bc4:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   13bc8:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13bcc:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13bd0:	ae02      	add	r6, sp, #8
   13bd2:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13bd4:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   13bd6:	f04f 0320 	mov.w	r3, #32
   13bda:	f3ef 8011 	mrs	r0, BASEPRI
   13bde:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13be2:	4c59      	ldr	r4, [pc, #356]	; (13d48 <_nano_sys_clock_tick_announce+0x1a0>)
   13be4:	4621      	mov	r1, r4
   13be6:	4602      	mov	r2, r0
   13be8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bec:	428b      	cmp	r3, r1
   13bee:	d000      	beq.n	13bf2 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   13bf0:	b9fb      	cbnz	r3, 13c32 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13bf2:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   13bf6:	68a0      	ldr	r0, [r4, #8]
   13bf8:	f7ff fee2 	bl	139c0 <_is_thread_time_slicing>
   13bfc:	b1b0      	cbz	r0, 13c2c <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13bfe:	4a53      	ldr	r2, [pc, #332]	; (13d4c <_nano_sys_clock_tick_announce+0x1a4>)
   13c00:	6811      	ldr	r1, [r2, #0]
   13c02:	230a      	movs	r3, #10
   13c04:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   13c08:	4b51      	ldr	r3, [pc, #324]	; (13d50 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13c0a:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13c0c:	681b      	ldr	r3, [r3, #0]
   13c0e:	429f      	cmp	r7, r3
   13c10:	db0c      	blt.n	13c2c <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   13c12:	2300      	movs	r3, #0
   13c14:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13c16:	f04f 0320 	mov.w	r3, #32
   13c1a:	f3ef 8511 	mrs	r5, BASEPRI
   13c1e:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13c22:	68a0      	ldr	r0, [r4, #8]
   13c24:	f7ff fe7a 	bl	1391c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c28:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13c2c:	b005      	add	sp, #20
   13c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13c32:	4d48      	ldr	r5, [pc, #288]	; (13d54 <_nano_sys_clock_tick_announce+0x1ac>)
   13c34:	9501      	str	r5, [sp, #4]
   13c36:	2101      	movs	r1, #1
   13c38:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   13c3a:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   13c3e:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   13c40:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13c44:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13c46:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13c48:	bfaa      	itet	ge
   13c4a:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   13c4e:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13c52:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13c56:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13c58:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   13c5a:	691d      	ldr	r5, [r3, #16]
   13c5c:	4298      	cmp	r0, r3
   13c5e:	bf14      	ite	ne
   13c60:	6818      	ldrne	r0, [r3, #0]
   13c62:	2000      	moveq	r0, #0
   13c64:	b9d5      	cbnz	r5, 13c9c <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   13c66:	e893 0220 	ldmia.w	r3, {r5, r9}
   13c6a:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   13c6e:	681d      	ldr	r5, [r3, #0]
   13c70:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13c74:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   13c76:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   13c7a:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   13c7c:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   13c7e:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13c80:	f8c3 c010 	str.w	ip, [r3, #16]
   13c84:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13c88:	f04f 0320 	mov.w	r3, #32
   13c8c:	f3ef 8211 	mrs	r2, BASEPRI
   13c90:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13c94:	4603      	mov	r3, r0
   13c96:	2800      	cmp	r0, #0
   13c98:	d1d4      	bne.n	13c44 <_nano_sys_clock_tick_announce+0x9c>
   13c9a:	e001      	b.n	13ca0 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   13c9c:	2900      	cmp	r1, #0
   13c9e:	dcf1      	bgt.n	13c84 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ca0:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13ca4:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ca6:	42b0      	cmp	r0, r6
   13ca8:	d103      	bne.n	13cb2 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   13caa:	9a01      	ldr	r2, [sp, #4]
   13cac:	2300      	movs	r3, #0
   13cae:	6013      	str	r3, [r2, #0]
   13cb0:	e7a1      	b.n	13bf6 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13cb2:	2800      	cmp	r0, #0
   13cb4:	d0f9      	beq.n	13caa <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13cb6:	9b03      	ldr	r3, [sp, #12]
   13cb8:	4298      	cmp	r0, r3
   13cba:	d102      	bne.n	13cc2 <_nano_sys_clock_tick_announce+0x11a>
   13cbc:	f04f 0b00 	mov.w	fp, #0
   13cc0:	e001      	b.n	13cc6 <_nano_sys_clock_tick_announce+0x11e>
   13cc2:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13cc6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   13cca:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   13cce:	e890 000c 	ldmia.w	r0, {r2, r3}
   13cd2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13cd4:	6802      	ldr	r2, [r0, #0]
   13cd6:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   13cd8:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   13cda:	f04f 0320 	mov.w	r3, #32
   13cde:	f3ef 8811 	mrs	r8, BASEPRI
   13ce2:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13ce6:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   13cea:	b1d6      	cbz	r6, 13d22 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   13cec:	68c3      	ldr	r3, [r0, #12]
   13cee:	b123      	cbz	r3, 13cfa <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   13cf0:	4630      	mov	r0, r6
   13cf2:	f7ff fd25 	bl	13740 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13cf6:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13cfa:	7a73      	ldrb	r3, [r6, #9]
   13cfc:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13d00:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13d04:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13d06:	d102      	bne.n	13d0e <_nano_sys_clock_tick_announce+0x166>
   13d08:	6a73      	ldr	r3, [r6, #36]	; 0x24
   13d0a:	3301      	adds	r3, #1
   13d0c:	d015      	beq.n	13d3a <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d0e:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13d12:	f1bb 0f00 	cmp.w	fp, #0
   13d16:	d0c8      	beq.n	13caa <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   13d18:	9b03      	ldr	r3, [sp, #12]
   13d1a:	455b      	cmp	r3, fp
   13d1c:	d108      	bne.n	13d30 <_nano_sys_clock_tick_announce+0x188>
   13d1e:	2300      	movs	r3, #0
   13d20:	e008      	b.n	13d34 <_nano_sys_clock_tick_announce+0x18c>
   13d22:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   13d26:	6943      	ldr	r3, [r0, #20]
   13d28:	2b00      	cmp	r3, #0
   13d2a:	d0f2      	beq.n	13d12 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   13d2c:	4798      	blx	r3
   13d2e:	e7f0      	b.n	13d12 <_nano_sys_clock_tick_announce+0x16a>
   13d30:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13d34:	4658      	mov	r0, fp
   13d36:	469b      	mov	fp, r3
   13d38:	e7c9      	b.n	13cce <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   13d3a:	4630      	mov	r0, r6
   13d3c:	f7ff fd80 	bl	13840 <_add_thread_to_ready_q>
   13d40:	e7e5      	b.n	13d0e <_nano_sys_clock_tick_announce+0x166>
   13d42:	bf00      	nop
   13d44:	20001988 	.word	0x20001988
   13d48:	20001950 	.word	0x20001950
   13d4c:	20001984 	.word	0x20001984
   13d50:	20001830 	.word	0x20001830
   13d54:	20001980 	.word	0x20001980

00013d58 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13d58:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d62:	4903      	ldr	r1, [pc, #12]	; (13d70 <k_sys_work_q_init+0x18>)
   13d64:	4803      	ldr	r0, [pc, #12]	; (13d74 <k_sys_work_q_init+0x1c>)
   13d66:	f000 f983 	bl	14070 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13d6a:	2000      	movs	r0, #0
   13d6c:	bd08      	pop	{r3, pc}
   13d6e:	bf00      	nop
   13d70:	20003628 	.word	0x20003628
   13d74:	20001990 	.word	0x20001990

00013d78 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13d78:	6903      	ldr	r3, [r0, #16]
   13d7a:	1c5a      	adds	r2, r3, #1
   13d7c:	d011      	beq.n	13da2 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13d7e:	4a0a      	ldr	r2, [pc, #40]	; (13da8 <_abort_timeout+0x30>)
   13d80:	6992      	ldr	r2, [r2, #24]
   13d82:	4290      	cmp	r0, r2
   13d84:	bf1f      	itttt	ne
   13d86:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13d88:	690a      	ldrne	r2, [r1, #16]
   13d8a:	189b      	addne	r3, r3, r2
   13d8c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   13d8e:	e890 000c 	ldmia.w	r0, {r2, r3}
   13d92:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13d94:	6802      	ldr	r2, [r0, #0]
   13d96:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d9c:	6103      	str	r3, [r0, #16]
	return 0;
   13d9e:	2000      	movs	r0, #0
   13da0:	4770      	bx	lr
		return _INACTIVE;
   13da2:	4618      	mov	r0, r3
}
   13da4:	4770      	bx	lr
   13da6:	bf00      	nop
   13da8:	20001950 	.word	0x20001950

00013dac <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13dac:	7a42      	ldrb	r2, [r0, #9]
   13dae:	06d2      	lsls	r2, r2, #27
   13db0:	d104      	bne.n	13dbc <_ready_thread+0x10>
   13db2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13db4:	3301      	adds	r3, #1
   13db6:	d101      	bne.n	13dbc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13db8:	f7ff bd42 	b.w	13840 <_add_thread_to_ready_q>
   13dbc:	4770      	bx	lr
	...

00013dc0 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13dc2:	f04f 0320 	mov.w	r3, #32
   13dc6:	f3ef 8611 	mrs	r6, BASEPRI
   13dca:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13dce:	4a19      	ldr	r2, [pc, #100]	; (13e34 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   13dd0:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13dd2:	230a      	movs	r3, #10
   13dd4:	3109      	adds	r1, #9
   13dd6:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13dda:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13ddc:	6241      	str	r1, [r0, #36]	; 0x24
   13dde:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13de0:	2300      	movs	r3, #0
   13de2:	6203      	str	r3, [r0, #32]
   13de4:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13de8:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13dea:	f100 0514 	add.w	r5, r0, #20
   13dee:	d108      	bne.n	13e02 <schedule_new_thread.part.11+0x42>
	node->next = list;
   13df0:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   13df2:	6993      	ldr	r3, [r2, #24]
   13df4:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   13df6:	6993      	ldr	r3, [r2, #24]
   13df8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13dfa:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13dfc:	f386 8811 	msr	BASEPRI, r6
   13e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e02:	2b00      	cmp	r3, #0
   13e04:	d0f4      	beq.n	13df0 <schedule_new_thread.part.11+0x30>
   13e06:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13e0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   13e0c:	691f      	ldr	r7, [r3, #16]
   13e0e:	42bc      	cmp	r4, r7
   13e10:	dc08      	bgt.n	13e24 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   13e12:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13e14:	1b3c      	subs	r4, r7, r4
   13e16:	611c      	str	r4, [r3, #16]
   13e18:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   13e1a:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   13e1c:	685a      	ldr	r2, [r3, #4]
   13e1e:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   13e20:	605d      	str	r5, [r3, #4]
   13e22:	e7eb      	b.n	13dfc <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   13e24:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   13e26:	4573      	cmp	r3, lr
   13e28:	6244      	str	r4, [r0, #36]	; 0x24
   13e2a:	d0e1      	beq.n	13df0 <schedule_new_thread.part.11+0x30>
   13e2c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d1eb      	bne.n	13e0a <schedule_new_thread.part.11+0x4a>
   13e32:	e7dd      	b.n	13df0 <schedule_new_thread.part.11+0x30>
   13e34:	20001950 	.word	0x20001950

00013e38 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   13e38:	4770      	bx	lr
	...

00013e3c <k_is_in_isr>:
   13e3c:	f3ef 8005 	mrs	r0, IPSR
   13e40:	280d      	cmp	r0, #13
   13e42:	d807      	bhi.n	13e54 <k_is_in_isr+0x18>
   13e44:	b138      	cbz	r0, 13e56 <k_is_in_isr+0x1a>
   13e46:	4b04      	ldr	r3, [pc, #16]	; (13e58 <k_is_in_isr+0x1c>)
   13e48:	6858      	ldr	r0, [r3, #4]
   13e4a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   13e4e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   13e52:	4770      	bx	lr
   13e54:	2001      	movs	r0, #1
}
   13e56:	4770      	bx	lr
   13e58:	e000ed00 	.word	0xe000ed00

00013e5c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   13e5c:	4b02      	ldr	r3, [pc, #8]	; (13e68 <_is_thread_essential+0xc>)
   13e5e:	689b      	ldr	r3, [r3, #8]
   13e60:	7a18      	ldrb	r0, [r3, #8]
}
   13e62:	f000 0001 	and.w	r0, r0, #1
   13e66:	4770      	bx	lr
   13e68:	20001950 	.word	0x20001950

00013e6c <_impl_k_thread_start>:
{
   13e6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   13e6e:	f04f 0320 	mov.w	r3, #32
   13e72:	f3ef 8411 	mrs	r4, BASEPRI
   13e76:	f383 8811 	msr	BASEPRI, r3
   13e7a:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   13e7c:	0759      	lsls	r1, r3, #29
   13e7e:	d402      	bmi.n	13e86 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e80:	f384 8811 	msr	BASEPRI, r4
   13e84:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e86:	f023 0304 	bic.w	r3, r3, #4
   13e8a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   13e8c:	f7ff ff8e 	bl	13dac <_ready_thread>
	_reschedule(key);
   13e90:	4620      	mov	r0, r4
}
   13e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   13e96:	f7ff bc7b 	b.w	13790 <_reschedule>
	...

00013e9c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   13e9c:	b530      	push	{r4, r5, lr}
   13e9e:	b087      	sub	sp, #28
   13ea0:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13ea2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13ea4:	9504      	str	r5, [sp, #16]
   13ea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13ea8:	9503      	str	r5, [sp, #12]
   13eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13eac:	9502      	str	r5, [sp, #8]
   13eae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13eb0:	9501      	str	r5, [sp, #4]
   13eb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   13eb4:	9500      	str	r5, [sp, #0]
   13eb6:	f7ed fd29 	bl	190c <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   13eba:	4b04      	ldr	r3, [pc, #16]	; (13ecc <_setup_new_thread+0x30>)
   13ebc:	689b      	ldr	r3, [r3, #8]
   13ebe:	b913      	cbnz	r3, 13ec6 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   13ec0:	6663      	str	r3, [r4, #100]	; 0x64
}
   13ec2:	b007      	add	sp, #28
   13ec4:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   13ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13ec8:	e7fa      	b.n	13ec0 <_setup_new_thread+0x24>
   13eca:	bf00      	nop
   13ecc:	20001950 	.word	0x20001950

00013ed0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   13ed0:	b570      	push	{r4, r5, r6, lr}
   13ed2:	b086      	sub	sp, #24
   13ed4:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13ed6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13ed8:	9604      	str	r6, [sp, #16]
   13eda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13edc:	9603      	str	r6, [sp, #12]
   13ede:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13ee0:	9602      	str	r6, [sp, #8]
   13ee2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   13ee4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13ee6:	9601      	str	r6, [sp, #4]
   13ee8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   13eea:	9600      	str	r6, [sp, #0]
   13eec:	f7ff ffd6 	bl	13e9c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   13ef0:	1c6b      	adds	r3, r5, #1
   13ef2:	d003      	beq.n	13efc <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   13ef4:	b92d      	cbnz	r5, 13f02 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   13ef6:	4620      	mov	r0, r4
   13ef8:	f7ff ffb8 	bl	13e6c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   13efc:	4620      	mov	r0, r4
   13efe:	b006      	add	sp, #24
   13f00:	bd70      	pop	{r4, r5, r6, pc}
   13f02:	4629      	mov	r1, r5
   13f04:	4620      	mov	r0, r4
   13f06:	f7ff ff5b 	bl	13dc0 <schedule_new_thread.part.11>
   13f0a:	e7f7      	b.n	13efc <_impl_k_thread_create+0x2c>

00013f0c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13f0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   13f0e:	b510      	push	{r4, lr}
   13f10:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   13f12:	b103      	cbz	r3, 13f16 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   13f14:	4798      	blx	r3
   13f16:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13f18:	06da      	lsls	r2, r3, #27
   13f1a:	d106      	bne.n	13f2a <_k_thread_single_abort+0x1e>
   13f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13f1e:	3201      	adds	r2, #1
   13f20:	d103      	bne.n	13f2a <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   13f22:	4620      	mov	r0, r4
   13f24:	f7ff fbe4 	bl	136f0 <_remove_thread_from_ready_q>
   13f28:	e00b      	b.n	13f42 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   13f2a:	079b      	lsls	r3, r3, #30
   13f2c:	d502      	bpl.n	13f34 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   13f2e:	4620      	mov	r0, r4
   13f30:	f7ff fc06 	bl	13740 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   13f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13f36:	3301      	adds	r3, #1
   13f38:	d003      	beq.n	13f42 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   13f3a:	f104 0014 	add.w	r0, r4, #20
   13f3e:	f7ff ff1b 	bl	13d78 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   13f42:	7a63      	ldrb	r3, [r4, #9]
   13f44:	f043 0308 	orr.w	r3, r3, #8
   13f48:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   13f4a:	bd10      	pop	{r4, pc}

00013f4c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   13f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13f4e:	4f21      	ldr	r7, [pc, #132]	; (13fd4 <_init_static_threads+0x88>)
   13f50:	4d21      	ldr	r5, [pc, #132]	; (13fd8 <_init_static_threads+0x8c>)
{
   13f52:	b087      	sub	sp, #28
   13f54:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   13f56:	42bd      	cmp	r5, r7
   13f58:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   13f5c:	d314      	bcc.n	13f88 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   13f5e:	4b1f      	ldr	r3, [pc, #124]	; (13fdc <_init_static_threads+0x90>)
   13f60:	689a      	ldr	r2, [r3, #8]
   13f62:	7ad3      	ldrb	r3, [r2, #11]
   13f64:	3b01      	subs	r3, #1
   13f66:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   13f68:	f04f 0320 	mov.w	r3, #32
   13f6c:	f3ef 8511 	mrs	r5, BASEPRI
   13f70:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13f74:	4c18      	ldr	r4, [pc, #96]	; (13fd8 <_init_static_threads+0x8c>)
   13f76:	42b4      	cmp	r4, r6
   13f78:	d31f      	bcc.n	13fba <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f7a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   13f7e:	b007      	add	sp, #28
   13f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   13f84:	f7ff bc22 	b.w	137cc <k_sched_unlock>
		_setup_new_thread(
   13f88:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13f8c:	9304      	str	r3, [sp, #16]
   13f8e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13f92:	9303      	str	r3, [sp, #12]
   13f94:	f854 3c14 	ldr.w	r3, [r4, #-20]
   13f98:	9302      	str	r3, [sp, #8]
   13f9a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   13f9e:	9301      	str	r3, [sp, #4]
   13fa0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   13fa4:	9300      	str	r3, [sp, #0]
   13fa6:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   13faa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   13fac:	f7ff ff76 	bl	13e9c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   13fb0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13fb4:	651d      	str	r5, [r3, #80]	; 0x50
   13fb6:	4625      	mov	r5, r4
   13fb8:	e7cd      	b.n	13f56 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   13fba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13fbc:	1c4b      	adds	r3, r1, #1
   13fbe:	d003      	beq.n	13fc8 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   13fc0:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   13fc2:	b919      	cbnz	r1, 13fcc <_init_static_threads+0x80>
   13fc4:	f7ff ff52 	bl	13e6c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   13fc8:	342c      	adds	r4, #44	; 0x2c
   13fca:	e7d4      	b.n	13f76 <_init_static_threads+0x2a>
   13fcc:	f7ff fef8 	bl	13dc0 <schedule_new_thread.part.11>
   13fd0:	e7fa      	b.n	13fc8 <_init_static_threads+0x7c>
   13fd2:	bf00      	nop
   13fd4:	20003f0c 	.word	0x20003f0c
   13fd8:	20003f0c 	.word	0x20003f0c
   13fdc:	20001950 	.word	0x20001950

00013fe0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13fe0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   13fe2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   13fe4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   13fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   13fea:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   13fec:	72c3      	strb	r3, [r0, #11]
   13fee:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   13ff0:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   13ff2:	61c3      	str	r3, [r0, #28]
	t->func = func;
   13ff4:	6283      	str	r3, [r0, #40]	; 0x28
   13ff6:	4770      	bx	lr

00013ff8 <k_work_submit_to_queue>:
{
   13ff8:	b500      	push	{lr}
   13ffa:	f101 0308 	add.w	r3, r1, #8
   13ffe:	f3bf 8f5b 	dmb	ish
   14002:	e853 2f00 	ldrex	r2, [r3]
   14006:	f042 0e01 	orr.w	lr, r2, #1
   1400a:	e843 ec00 	strex	ip, lr, [r3]
   1400e:	f1bc 0f00 	cmp.w	ip, #0
   14012:	d1f6      	bne.n	14002 <k_work_submit_to_queue+0xa>
   14014:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14018:	07d3      	lsls	r3, r2, #31
   1401a:	d403      	bmi.n	14024 <k_work_submit_to_queue+0x2c>
}
   1401c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14020:	f7ff ba94 	b.w	1354c <k_queue_append>
   14024:	f85d fb04 	ldr.w	pc, [sp], #4

00014028 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14028:	f1a0 010c 	sub.w	r1, r0, #12
   1402c:	6980      	ldr	r0, [r0, #24]
   1402e:	f7ff bfe3 	b.w	13ff8 <k_work_submit_to_queue>

00014032 <work_q_main>:
{
   14032:	b510      	push	{r4, lr}
   14034:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1403a:	4620      	mov	r0, r4
   1403c:	f7ff faaa 	bl	13594 <_impl_k_queue_get>
		if (!work) {
   14040:	4603      	mov	r3, r0
   14042:	2800      	cmp	r0, #0
   14044:	d0f7      	beq.n	14036 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14046:	3308      	adds	r3, #8
		handler = work->handler;
   14048:	6842      	ldr	r2, [r0, #4]
   1404a:	f3bf 8f5b 	dmb	ish
   1404e:	e853 1f00 	ldrex	r1, [r3]
   14052:	f021 0e01 	bic.w	lr, r1, #1
   14056:	e843 ec00 	strex	ip, lr, [r3]
   1405a:	f1bc 0f00 	cmp.w	ip, #0
   1405e:	d1f6      	bne.n	1404e <work_q_main+0x1c>
   14060:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14064:	07cb      	lsls	r3, r1, #31
   14066:	d500      	bpl.n	1406a <work_q_main+0x38>
			handler(work);
   14068:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1406a:	f7ff fcf5 	bl	13a58 <_impl_k_yield>
   1406e:	e7e2      	b.n	14036 <work_q_main+0x4>

00014070 <k_work_q_start>:
{
   14070:	b5f0      	push	{r4, r5, r6, r7, lr}
   14072:	b087      	sub	sp, #28
   14074:	4604      	mov	r4, r0
   14076:	461f      	mov	r7, r3
   14078:	460d      	mov	r5, r1
   1407a:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   1407c:	f7ff fa5e 	bl	1353c <_impl_k_queue_init>

   14080:	2000      	movs	r0, #0
   14082:	9005      	str	r0, [sp, #20]
   14084:	9004      	str	r0, [sp, #16]
   14086:	9002      	str	r0, [sp, #8]
   14088:	9001      	str	r0, [sp, #4]
   1408a:	9703      	str	r7, [sp, #12]
   1408c:	9400      	str	r4, [sp, #0]
   1408e:	4b04      	ldr	r3, [pc, #16]	; (140a0 <k_work_q_start+0x30>)
   14090:	4632      	mov	r2, r6
   14092:	4629      	mov	r1, r5
   14094:	f104 0010 	add.w	r0, r4, #16
   14098:	f7ff ff1a 	bl	13ed0 <_impl_k_thread_create>
}
   1409c:	b007      	add	sp, #28
   1409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140a0:	00014033 	.word	0x00014033

000140a4 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   140a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   140a8:	2300      	movs	r3, #0
   140aa:	61c2      	str	r2, [r0, #28]
	t->func = func;
   140ac:	4a04      	ldr	r2, [pc, #16]	; (140c0 <k_delayed_work_init+0x1c>)
   140ae:	6003      	str	r3, [r0, #0]
   140b0:	6041      	str	r1, [r0, #4]
   140b2:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   140b4:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   140b6:	6143      	str	r3, [r0, #20]
	t->func = func;
   140b8:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   140ba:	6243      	str	r3, [r0, #36]	; 0x24
   140bc:	4770      	bx	lr
   140be:	bf00      	nop
   140c0:	00014029 	.word	0x00014029

000140c4 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   140c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   140c6:	f04f 0320 	mov.w	r3, #32
   140ca:	f3ef 8411 	mrs	r4, BASEPRI
   140ce:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   140d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   140d4:	b923      	cbnz	r3, 140e0 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   140d6:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   140da:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   140de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   140e0:	f3bf 8f5b 	dmb	ish
   140e4:	6883      	ldr	r3, [r0, #8]
   140e6:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   140ea:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   140ec:	f100 0508 	add.w	r5, r0, #8
   140f0:	d533      	bpl.n	1415a <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   140f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   140f4:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   140f6:	2100      	movs	r1, #0
   140f8:	2b00      	cmp	r3, #0
   140fa:	d0ec      	beq.n	140d6 <k_delayed_work_cancel+0x12>
   140fc:	4298      	cmp	r0, r3
   140fe:	d127      	bne.n	14150 <k_delayed_work_cancel+0x8c>
   14100:	6803      	ldr	r3, [r0, #0]
   14102:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14104:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   14108:	b9c9      	cbnz	r1, 1413e <k_delayed_work_cancel+0x7a>
   1410a:	42b8      	cmp	r0, r7
	list->head = node;
   1410c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   1410e:	d100      	bne.n	14112 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14110:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14112:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14114:	f003 0303 	and.w	r3, r3, #3
   14118:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1411a:	2300      	movs	r3, #0
   1411c:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1411e:	f3bf 8f5b 	dmb	ish
   14122:	e855 2f00 	ldrex	r2, [r5]
   14126:	f022 0201 	bic.w	r2, r2, #1
   1412a:	e845 2100 	strex	r1, r2, [r5]
   1412e:	2900      	cmp	r1, #0
   14130:	d1f7      	bne.n	14122 <k_delayed_work_cancel+0x5e>
   14132:	f3bf 8f5b 	dmb	ish
   14136:	f384 8811 	msr	BASEPRI, r4
	return 0;
   1413a:	4618      	mov	r0, r3
   1413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1413e:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14140:	f006 0603 	and.w	r6, r6, #3
   14144:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   14146:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14148:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1414a:	bf08      	it	eq
   1414c:	6051      	streq	r1, [r2, #4]
   1414e:	e7e0      	b.n	14112 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14150:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   14152:	4619      	mov	r1, r3
   14154:	f026 0303 	bic.w	r3, r6, #3
   14158:	e7ce      	b.n	140f8 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1415a:	69c1      	ldr	r1, [r0, #28]
   1415c:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   1415e:	f100 020c 	add.w	r2, r0, #12
   14162:	d0da      	beq.n	1411a <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14164:	4b08      	ldr	r3, [pc, #32]	; (14188 <k_delayed_work_cancel+0xc4>)
   14166:	699b      	ldr	r3, [r3, #24]
   14168:	429a      	cmp	r2, r3
   1416a:	bf1f      	itttt	ne
   1416c:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1416e:	6913      	ldrne	r3, [r2, #16]
   14170:	185b      	addne	r3, r3, r1
   14172:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14174:	6903      	ldr	r3, [r0, #16]
   14176:	68c2      	ldr	r2, [r0, #12]
   14178:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1417a:	68c2      	ldr	r2, [r0, #12]
   1417c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1417e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14182:	61c3      	str	r3, [r0, #28]
   14184:	e7c9      	b.n	1411a <k_delayed_work_cancel+0x56>
   14186:	bf00      	nop
   14188:	20001950 	.word	0x20001950

0001418c <k_delayed_work_submit_to_queue>:
{
   1418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1418e:	4607      	mov	r7, r0
   14190:	460c      	mov	r4, r1
   14192:	4615      	mov	r5, r2
	__asm__ volatile(
   14194:	f04f 0320 	mov.w	r3, #32
   14198:	f3ef 8611 	mrs	r6, BASEPRI
   1419c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   141a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   141a2:	b123      	cbz	r3, 141ae <k_delayed_work_submit_to_queue+0x22>
   141a4:	4283      	cmp	r3, r0
   141a6:	d00b      	beq.n	141c0 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   141a8:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   141ac:	e00d      	b.n	141ca <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   141ae:	b138      	cbz	r0, 141c0 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   141b0:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   141b2:	b96d      	cbnz	r5, 141d0 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   141b4:	4621      	mov	r1, r4
   141b6:	4638      	mov	r0, r7
   141b8:	f7ff ff1e 	bl	13ff8 <k_work_submit_to_queue>
	err = 0;
   141bc:	2000      	movs	r0, #0
   141be:	e004      	b.n	141ca <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   141c0:	4620      	mov	r0, r4
   141c2:	f7ff ff7f 	bl	140c4 <k_delayed_work_cancel>
		if (err < 0) {
   141c6:	2800      	cmp	r0, #0
   141c8:	daf2      	bge.n	141b0 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141ca:	f386 8811 	msr	BASEPRI, r6
}
   141ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   141d0:	220a      	movs	r2, #10
   141d2:	3509      	adds	r5, #9
   141d4:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   141d8:	4a16      	ldr	r2, [pc, #88]	; (14234 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   141da:	2300      	movs	r3, #0
   141dc:	4611      	mov	r1, r2
   141de:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   141e0:	61a3      	str	r3, [r4, #24]
   141e2:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   141e6:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   141e8:	428b      	cmp	r3, r1
   141ea:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   141ee:	61e5      	str	r5, [r4, #28]
   141f0:	d106      	bne.n	14200 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   141f2:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   141f4:	6993      	ldr	r3, [r2, #24]
   141f6:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   141f8:	6993      	ldr	r3, [r2, #24]
   141fa:	601f      	str	r7, [r3, #0]
	list->tail = node;
   141fc:	6197      	str	r7, [r2, #24]
   141fe:	e7dd      	b.n	141bc <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14200:	2b00      	cmp	r3, #0
   14202:	d0f6      	beq.n	141f2 <k_delayed_work_submit_to_queue+0x66>
   14204:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   14208:	69e0      	ldr	r0, [r4, #28]
   1420a:	691d      	ldr	r5, [r3, #16]
   1420c:	42a8      	cmp	r0, r5
   1420e:	dc08      	bgt.n	14222 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14210:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14212:	1a28      	subs	r0, r5, r0
   14214:	6118      	str	r0, [r3, #16]
   14216:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14218:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   1421a:	685a      	ldr	r2, [r3, #4]
   1421c:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   1421e:	605f      	str	r7, [r3, #4]
   14220:	e7cc      	b.n	141bc <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   14222:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14224:	4573      	cmp	r3, lr
   14226:	61e0      	str	r0, [r4, #28]
   14228:	d0e3      	beq.n	141f2 <k_delayed_work_submit_to_queue+0x66>
   1422a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1422c:	2b00      	cmp	r3, #0
   1422e:	d1eb      	bne.n	14208 <k_delayed_work_submit_to_queue+0x7c>
   14230:	e7df      	b.n	141f2 <k_delayed_work_submit_to_queue+0x66>
   14232:	bf00      	nop
   14234:	20001950 	.word	0x20001950

00014238 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14238:	2314      	movs	r3, #20
   1423a:	b530      	push	{r4, r5, lr}
   1423c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14240:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   14242:	2900      	cmp	r1, #0
   14244:	da00      	bge.n	14248 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   14246:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14248:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   1424a:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   1424c:	f003 030f 	and.w	r3, r3, #15
   14250:	2b02      	cmp	r3, #2
   14252:	d003      	beq.n	1425c <clear_event_registrations+0x24>
   14254:	2b04      	cmp	r3, #4
   14256:	d001      	beq.n	1425c <clear_event_registrations+0x24>
   14258:	2b01      	cmp	r3, #1
   1425a:	d104      	bne.n	14266 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   1425c:	6843      	ldr	r3, [r0, #4]
   1425e:	6805      	ldr	r5, [r0, #0]
   14260:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   14262:	6805      	ldr	r5, [r0, #0]
   14264:	606b      	str	r3, [r5, #4]
   14266:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   1426a:	f04f 0320 	mov.w	r3, #32
   1426e:	f3ef 8211 	mrs	r2, BASEPRI
   14272:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   14276:	3901      	subs	r1, #1
   14278:	3814      	subs	r0, #20
   1427a:	e7e2      	b.n	14242 <clear_event_registrations+0xa>

0001427c <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   1427c:	6883      	ldr	r3, [r0, #8]
{
   1427e:	b570      	push	{r4, r5, r6, lr}
   14280:	4605      	mov	r5, r0
   14282:	460e      	mov	r6, r1
	if (!event->poller) {
   14284:	b1d3      	cbz	r3, 142bc <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   14286:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   14288:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   1428a:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   1428c:	7a63      	ldrb	r3, [r4, #9]
   1428e:	079a      	lsls	r2, r3, #30
   14290:	d514      	bpl.n	142bc <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   14292:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14294:	3302      	adds	r3, #2
   14296:	d01a      	beq.n	142ce <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14298:	4620      	mov	r0, r4
   1429a:	f7ff fa6e 	bl	1377a <_unpend_thread>
	_set_thread_return_value(thread,
   1429e:	2e00      	cmp	r6, #0
   142a0:	bf0c      	ite	eq
   142a2:	f06f 0303 	mvneq.w	r3, #3
   142a6:	2300      	movne	r3, #0
   142a8:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   142aa:	7a63      	ldrb	r3, [r4, #9]
   142ac:	06db      	lsls	r3, r3, #27
   142ae:	d105      	bne.n	142bc <signal_poll_event+0x40>
   142b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   142b2:	3301      	adds	r3, #1
   142b4:	d102      	bne.n	142bc <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   142b6:	4620      	mov	r0, r4
   142b8:	f7ff fac2 	bl	13840 <_add_thread_to_ready_q>
	event->state |= state;
   142bc:	7b6b      	ldrb	r3, [r5, #13]
   142be:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   142c2:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   142c6:	2000      	movs	r0, #0
	event->state |= state;
   142c8:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   142ca:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   142cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   142ce:	f06f 000a 	mvn.w	r0, #10
}
   142d2:	bd70      	pop	{r4, r5, r6, pc}

000142d4 <add_event>:
{
   142d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   142d6:	6803      	ldr	r3, [r0, #0]
   142d8:	4298      	cmp	r0, r3
   142da:	4604      	mov	r4, r0
   142dc:	460e      	mov	r6, r1
   142de:	4617      	mov	r7, r2
   142e0:	d106      	bne.n	142f0 <add_event+0x1c>
	node->next = list;
   142e2:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   142e4:	6863      	ldr	r3, [r4, #4]
   142e6:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   142e8:	6863      	ldr	r3, [r4, #4]
   142ea:	601e      	str	r6, [r3, #0]
	list->tail = node;
   142ec:	6066      	str	r6, [r4, #4]
   142ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   142f0:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   142f2:	2b00      	cmp	r3, #0
   142f4:	d0f5      	beq.n	142e2 <add_event+0xe>
   142f6:	689b      	ldr	r3, [r3, #8]
   142f8:	6811      	ldr	r1, [r2, #0]
   142fa:	6818      	ldr	r0, [r3, #0]
   142fc:	f7ff f9ee 	bl	136dc <_is_t1_higher_prio_than_t2>
   14300:	2800      	cmp	r0, #0
   14302:	d1ee      	bne.n	142e2 <add_event+0xe>
	return list->head == list;
   14304:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14306:	42ac      	cmp	r4, r5
   14308:	d0eb      	beq.n	142e2 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1430a:	2d00      	cmp	r5, #0
   1430c:	d0e9      	beq.n	142e2 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   1430e:	68ab      	ldr	r3, [r5, #8]
   14310:	6838      	ldr	r0, [r7, #0]
   14312:	6819      	ldr	r1, [r3, #0]
   14314:	f7ff f9e2 	bl	136dc <_is_t1_higher_prio_than_t2>
   14318:	b130      	cbz	r0, 14328 <add_event+0x54>
		node->prev = insert_point->prev;
   1431a:	686b      	ldr	r3, [r5, #4]
   1431c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   1431e:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14320:	686b      	ldr	r3, [r5, #4]
   14322:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   14324:	606e      	str	r6, [r5, #4]
   14326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14328:	6863      	ldr	r3, [r4, #4]
   1432a:	429d      	cmp	r5, r3
   1432c:	d0d9      	beq.n	142e2 <add_event+0xe>
   1432e:	682d      	ldr	r5, [r5, #0]
   14330:	e7eb      	b.n	1430a <add_event+0x36>

00014332 <k_poll_event_init>:
{
   14332:	b530      	push	{r4, r5, lr}
	event->type = type;
   14334:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   14336:	6103      	str	r3, [r0, #16]
	event->type = type;
   14338:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   1433c:	7b81      	ldrb	r1, [r0, #14]
   1433e:	f362 0100 	bfi	r1, r2, #0, #1
   14342:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   14344:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   14346:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   14348:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   1434c:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   14350:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   14352:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   14354:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14356:	bd30      	pop	{r4, r5, pc}

00014358 <_impl_k_poll>:
{
   14358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1435c:	4b3f      	ldr	r3, [pc, #252]	; (1445c <_impl_k_poll+0x104>)
{
   1435e:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14360:	689b      	ldr	r3, [r3, #8]
   14362:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   14364:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14366:	2301      	movs	r3, #1
{
   14368:	4607      	mov	r7, r0
   1436a:	468a      	mov	sl, r1
   1436c:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1436e:	9301      	str	r3, [sp, #4]
   14370:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   14372:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   14376:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   14378:	4556      	cmp	r6, sl
   1437a:	db10      	blt.n	1439e <_impl_k_poll+0x46>
   1437c:	f04f 0320 	mov.w	r3, #32
   14380:	f3ef 8611 	mrs	r6, BASEPRI
   14384:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   14388:	9c01      	ldr	r4, [sp, #4]
   1438a:	2c00      	cmp	r4, #0
   1438c:	d13f      	bne.n	1440e <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1438e:	4632      	mov	r2, r6
   14390:	4629      	mov	r1, r5
   14392:	4638      	mov	r0, r7
   14394:	f7ff ff50 	bl	14238 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14398:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   1439c:	e040      	b.n	14420 <_impl_k_poll+0xc8>
	__asm__ volatile(
   1439e:	f04f 0320 	mov.w	r3, #32
   143a2:	f3ef 8b11 	mrs	fp, BASEPRI
   143a6:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   143aa:	7b62      	ldrb	r2, [r4, #13]
   143ac:	f002 030f 	and.w	r3, r2, #15
   143b0:	2b02      	cmp	r3, #2
   143b2:	d003      	beq.n	143bc <_impl_k_poll+0x64>
   143b4:	2b04      	cmp	r3, #4
   143b6:	d004      	beq.n	143c2 <_impl_k_poll+0x6a>
   143b8:	2b01      	cmp	r3, #1
   143ba:	d106      	bne.n	143ca <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   143bc:	6921      	ldr	r1, [r4, #16]
   143be:	6889      	ldr	r1, [r1, #8]
   143c0:	e001      	b.n	143c6 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   143c2:	6921      	ldr	r1, [r4, #16]
   143c4:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   143c6:	2900      	cmp	r1, #0
   143c8:	d13d      	bne.n	14446 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   143ca:	f1b8 0f00 	cmp.w	r8, #0
   143ce:	d014      	beq.n	143fa <_impl_k_poll+0xa2>
   143d0:	9a01      	ldr	r2, [sp, #4]
   143d2:	b192      	cbz	r2, 143fa <_impl_k_poll+0xa2>
	switch (event->type) {
   143d4:	2b02      	cmp	r3, #2
   143d6:	d007      	beq.n	143e8 <_impl_k_poll+0x90>
   143d8:	2b04      	cmp	r3, #4
   143da:	d013      	beq.n	14404 <_impl_k_poll+0xac>
   143dc:	2b01      	cmp	r3, #1
   143de:	d109      	bne.n	143f4 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   143e0:	466a      	mov	r2, sp
   143e2:	4621      	mov	r1, r4
   143e4:	6920      	ldr	r0, [r4, #16]
   143e6:	e003      	b.n	143f0 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   143e8:	6920      	ldr	r0, [r4, #16]
   143ea:	466a      	mov	r2, sp
   143ec:	4621      	mov	r1, r4
   143ee:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   143f0:	f7ff ff70 	bl	142d4 <add_event>
	event->poller = poller;
   143f4:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   143f8:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143fa:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   143fe:	3601      	adds	r6, #1
   14400:	3414      	adds	r4, #20
   14402:	e7b9      	b.n	14378 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   14404:	6920      	ldr	r0, [r4, #16]
   14406:	466a      	mov	r2, sp
   14408:	4621      	mov	r1, r4
   1440a:	3008      	adds	r0, #8
   1440c:	e7f0      	b.n	143f0 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   1440e:	2300      	movs	r3, #0
   14410:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   14412:	f1b8 0f00 	cmp.w	r8, #0
   14416:	d107      	bne.n	14428 <_impl_k_poll+0xd0>
   14418:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   1441c:	f06f 040a 	mvn.w	r4, #10
}
   14420:	4620      	mov	r0, r4
   14422:	b005      	add	sp, #20
   14424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14428:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1442a:	4642      	mov	r2, r8
   1442c:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1442e:	9102      	str	r1, [sp, #8]
   14430:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14432:	f7ff fab3 	bl	1399c <_pend_current_thread>
   14436:	4604      	mov	r4, r0
	__asm__ volatile(
   14438:	f04f 0320 	mov.w	r3, #32
   1443c:	f3ef 8611 	mrs	r6, BASEPRI
   14440:	f383 8811 	msr	BASEPRI, r3
   14444:	e7a3      	b.n	1438e <_impl_k_poll+0x36>
	event->state |= state;
   14446:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1444a:	f363 1207 	bfi	r2, r3, #4, #4
   1444e:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   14450:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   14454:	f8cd 9004 	str.w	r9, [sp, #4]
   14458:	e7cf      	b.n	143fa <_impl_k_poll+0xa2>
   1445a:	bf00      	nop
   1445c:	20001950 	.word	0x20001950

00014460 <_handle_obj_poll_events>:
	return list->head == list;
   14460:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   14462:	4298      	cmp	r0, r3
   14464:	d007      	beq.n	14476 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   14466:	e893 0005 	ldmia.w	r3, {r0, r2}
   1446a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1446c:	6818      	ldr	r0, [r3, #0]
   1446e:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   14470:	4618      	mov	r0, r3
   14472:	f7ff bf03 	b.w	1427c <signal_poll_event>
   14476:	4770      	bx	lr

00014478 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   14478:	b538      	push	{r3, r4, r5, lr}
   1447a:	f04f 0320 	mov.w	r3, #32
   1447e:	f3ef 8511 	mrs	r5, BASEPRI
   14482:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14486:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   14488:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1448a:	4298      	cmp	r0, r3
	signal->signaled = 1;
   1448c:	f04f 0101 	mov.w	r1, #1
   14490:	6081      	str	r1, [r0, #8]
   14492:	d00d      	beq.n	144b0 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   14494:	e893 0005 	ldmia.w	r3, {r0, r2}
   14498:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   1449a:	6818      	ldr	r0, [r3, #0]
   1449c:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1449e:	4618      	mov	r0, r3
   144a0:	f7ff feec 	bl	1427c <signal_poll_event>
   144a4:	4604      	mov	r4, r0

	_reschedule(key);
   144a6:	4628      	mov	r0, r5
   144a8:	f7ff f972 	bl	13790 <_reschedule>
	return rc;
}
   144ac:	4620      	mov	r0, r4
   144ae:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   144b0:	f385 8811 	msr	BASEPRI, r5
		return 0;
   144b4:	2400      	movs	r4, #0
   144b6:	e7f9      	b.n	144ac <_impl_k_poll_signal+0x34>

000144b8 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   144b8:	4770      	bx	lr
