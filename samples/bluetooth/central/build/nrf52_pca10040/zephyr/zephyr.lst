
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002ce8 	.word	0x20002ce8
static struct device *uart_dev;

static int console_irq_input_hook(u8_t c);

static void uart_isr(struct device *dev)
{
       4:	00001af5 	.word	0x00001af5
static inline int _impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
       8:	00001b49 	.word	0x00001b49
	if (api->irq_rx_ready) {
       c:	0000198d 	.word	0x0000198d
      10:	0000198d 	.word	0x0000198d
		return api->irq_rx_ready(dev);
      14:	0000198d 	.word	0x0000198d
	}
}

static int console_irq_input_hook(u8_t c)
{
	int rx_next = (rx_put + 1) & (CONFIG_CONSOLE_GETCHAR_BUFSIZE - 1);
      18:	0000198d 	.word	0x0000198d
		console_putchar('~');
		console_putchar('\n');
		return 1;
	}

	rx_ringbuf[rx_put] = c;
      1c:	0000198d 	.word	0x0000198d
	if (api->fifo_read) {
      20:	0000198d 	.word	0x0000198d
		return api->fifo_read(dev, rx_data, size);
      24:	0000198d 	.word	0x0000198d
      28:	0000198d 	.word	0x0000198d
      2c:	00001595 	.word	0x00001595
	int rx_next = (rx_put + 1) & (CONFIG_CONSOLE_GETCHAR_BUFSIZE - 1);
      30:	0000198d 	.word	0x0000198d
      34:	0000198d 	.word	0x0000198d
      38:	00001551 	.word	0x00001551
	if (rx_next == rx_get) {
      3c:	0000198d 	.word	0x0000198d

00000040 <_irq_vector_table>:
		console_putchar('~');
      40:	00001ab9 0001110b 00001ab9 00001ab9     ................

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
      50:	00001ab9 00001ab9 00001ab9 00001ab9     ................
	if (api->irq_tx_ready) {
      60:	00001ab9 00001ab9 00001ab9 00001ab9     ................
		if (tx_get == tx_put) {
      70:	00001ab9 00001ab9 00001ab9 00001ab9     ................
}
      80:	00001ab9 00001ab9 00001ab9 00001ab9     ................
		return api->fifo_fill(dev, tx_data, size);
      90:	00001ab9 00001ab9 00001ab9 00001ab9     ................
      a0:	00001ab9 00001ab9 00001ab9 00001ab9     ................
      b0:	00001ab9 00001ab9 00001ab9 00001ab9     ................
      c0:	00001ab9 00001ab9 00001ab9 00001ab9     ................
      d0:	00001ab9 00001ab9 00001ab9              ............

000000dc <_sw_isr_table>:
      dc:	00000000 0000128d 00000000 00001905     ................
      ec:	20003f00 00013229 00000000 00001905     .?. )2..........
      fc:	00000000 00001905 00000000 00001905     ................
     10c:	00000000 0001311d 00000000 00001905     .....1..........
     11c:	00000000 00001905 00000000 00001905     ................
     12c:	00000000 00001905 00000000 000110d1     ................
     13c:	00000000 00001905 20003eb8 00013581     .........>. .5..
     14c:	00000000 00001905 00000000 00001905     ................
     15c:	00000000 00001905 00000000 000013b5     ................
     16c:	00000000 00001905 00000000 00001905     ................
     17c:	00000000 00001905 00000000 00001905     ................
     18c:	00000000 00001905 00000000 00001905     ................
     19c:	00000000 00011105 00000000 00001905     ................
     1ac:	00000000 00001905 00000000 00001905     ................
     1bc:	00000000 00001905 00000000 00001905     ................
     1cc:	00000000 00001905 00000000 00001905     ................
     1dc:	00000000 00001905 00000000 00001905     ................
     1ec:	00000000 00001905 00000000 00001905     ................
     1fc:	00000000 00001905 00000000 00001905     ................
     20c:	00000000 00001905                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb20 	bl	1bac <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00014b05 	.word	0x00014b05
     5b0:	00014b2e 	.word	0x00014b2e
     5b4:	00014b0c 	.word	0x00014b0c
     5b8:	00014b13 	.word	0x00014b13
     5bc:	00014b1d 	.word	0x00014b1d
     5c0:	00014b27 	.word	0x00014b27

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 fa51 	bl	4a72 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 faef 	bl	4bdc <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00014b51 	.word	0x00014b51
     604:	20000000 	.word	0x20000000
     608:	00014b6f 	.word	0x00014b6f

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 fa2a 	bl	4a72 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f004 fa1c 	bl	4a6c <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fd84 	bl	4154 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00014b9a 	.word	0x00014b9a
     664:	00014aa8 	.word	0x00014aa8
     668:	00000671 	.word	0x00000671
     66c:	00014bb8 	.word	0x00014bb8

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fdaf 	bl	41f8 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 f9e5 	bl	4a78 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00014b7e 	.word	0x00014b7e
     6bc:	00014aae 	.word	0x00014aae

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 fcd6 	bl	4074 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fe60 	bl	43a4 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 fd2e 	bl	4154 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00014bdb 	.word	0x00014bdb
     70c:	00014bfb 	.word	0x00014bfb
     710:	20003a28 	.word	0x20003a28
     714:	00014ab6 	.word	0x00014ab6
     718:	00000671 	.word	0x00000671
     71c:	00014bb8 	.word	0x00014bb8
     720:	00014c12 	.word	0x00014c12

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a5c 	.word	0x20003a5c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 fbb2 	bl	1400c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8e0 	bl	1a6c <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003a60 	.word	0x20003a60

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003a60 	.word	0x20003a60

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr
	...

00000fe4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fe6:	4c11      	ldr	r4, [pc, #68]	; (102c <sys_rand32_get+0x48>)
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	6820      	ldr	r0, [r4, #0]
     fee:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff2:	b960      	cbnz	r0, 100e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff4:	480e      	ldr	r0, [pc, #56]	; (1030 <sys_rand32_get+0x4c>)
     ff6:	f012 fb31 	bl	1365c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffa:	f3bf 8f5b 	dmb	ish
     ffe:	e854 3f00 	ldrex	r3, [r4]
    1002:	e844 0200 	strex	r2, r0, [r4]
    1006:	2a00      	cmp	r2, #0
    1008:	d1f9      	bne.n	ffe <sys_rand32_get+0x1a>
    100a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    100e:	6843      	ldr	r3, [r0, #4]
    1010:	2204      	movs	r2, #4
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	eb0d 0102 	add.w	r1, sp, r2
    1018:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101a:	2800      	cmp	r0, #0
    101c:	da02      	bge.n	1024 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    101e:	f000 fa43 	bl	14a8 <_timer_cycle_get_32>
    1022:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1024:	9801      	ldr	r0, [sp, #4]
    1026:	b002      	add	sp, #8
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	20000004 	.word	0x20000004
    1030:	00014c40 	.word	0x00014c40

00001034 <uart_poll_out>:
	return api->poll_out(dev, out_char);
    1034:	6843      	ldr	r3, [r0, #4]
    1036:	685b      	ldr	r3, [r3, #4]
    1038:	4718      	bx	r3

0000103a <debug_hook_out_nop>:
}

static UART_CONSOLE_OUT_DEBUG_HOOK_SIG(debug_hook_out_nop) {
	ARG_UNUSED(c);
	return !UART_CONSOLE_DEBUG_HOOK_HANDLED;
}
    103a:	2000      	movs	r0, #0
    103c:	4770      	bx	lr
	...

00001040 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    1040:	4b0a      	ldr	r3, [pc, #40]	; (106c <console_out+0x2c>)
{
    1042:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    1044:	b2c6      	uxtb	r6, r0
{
    1046:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	4630      	mov	r0, r6
    104c:	4798      	blx	r3

	if (handled_by_debug_server) {
    104e:	2801      	cmp	r0, #1
    1050:	d00a      	beq.n	1068 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1052:	2c0a      	cmp	r4, #10
    1054:	4d06      	ldr	r5, [pc, #24]	; (1070 <console_out+0x30>)
    1056:	d103      	bne.n	1060 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    1058:	210d      	movs	r1, #13
    105a:	6828      	ldr	r0, [r5, #0]
    105c:	f7ff ffea 	bl	1034 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    1060:	4631      	mov	r1, r6
    1062:	6828      	ldr	r0, [r5, #0]
    1064:	f7ff ffe6 	bl	1034 <uart_poll_out>

	return c;
}
    1068:	4620      	mov	r0, r4
    106a:	bd70      	pop	{r4, r5, r6, pc}
    106c:	20003a64 	.word	0x20003a64
    1070:	20000008 	.word	0x20000008

00001074 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1074:	4801      	ldr	r0, [pc, #4]	; (107c <uart_console_hook_install+0x8>)
    1076:	f7ff be43 	b.w	d00 <__printk_hook_install>
    107a:	bf00      	nop
    107c:	00001041 	.word	0x00001041

00001080 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1080:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1082:	4804      	ldr	r0, [pc, #16]	; (1094 <uart_console_init+0x14>)
    1084:	f012 faea 	bl	1365c <device_get_binding>
    1088:	4b03      	ldr	r3, [pc, #12]	; (1098 <uart_console_init+0x18>)
    108a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    108c:	f7ff fff2 	bl	1074 <uart_console_hook_install>

	return 0;
}
    1090:	2000      	movs	r0, #0
    1092:	bd08      	pop	{r3, pc}
    1094:	00014c4a 	.word	0x00014c4a
    1098:	20000008 	.word	0x20000008

0000109c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    109c:	b510      	push	{r4, lr}
	__asm__ volatile(
    109e:	f04f 0320 	mov.w	r3, #32
    10a2:	f3ef 8211 	mrs	r2, BASEPRI
    10a6:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    10aa:	4c11      	ldr	r4, [pc, #68]	; (10f0 <_m16src_stop+0x54>)
    10ac:	7823      	ldrb	r3, [r4, #0]
    10ae:	b923      	cbnz	r3, 10ba <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10b0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10b4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10b8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10ba:	3b01      	subs	r3, #1
    10bc:	b2db      	uxtb	r3, r3
    10be:	7023      	strb	r3, [r4, #0]
    10c0:	b123      	cbz	r3, 10cc <_m16src_stop+0x30>
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10c6:	f06f 000f 	mvn.w	r0, #15
    10ca:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10cc:	4b09      	ldr	r3, [pc, #36]	; (10f4 <_m16src_stop+0x58>)
    10ce:	7818      	ldrb	r0, [r3, #0]
    10d0:	2101      	movs	r1, #1
    10d2:	b128      	cbz	r0, 10e0 <_m16src_stop+0x44>
		m16src_ref++;
    10d4:	7021      	strb	r1, [r4, #0]
    10d6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10da:	f06f 000a 	mvn.w	r0, #10
    10de:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10e0:	7019      	strb	r1, [r3, #0]
    10e2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10ea:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10ec:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10ee:	bd10      	pop	{r4, pc}
    10f0:	2000000e 	.word	0x2000000e
    10f4:	2000000d 	.word	0x2000000d

000010f8 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10f8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10fa:	2200      	movs	r2, #0
    10fc:	4610      	mov	r0, r2
    10fe:	2101      	movs	r1, #1
    1100:	f000 fbe8 	bl	18d4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1104:	2000      	movs	r0, #0
    1106:	f000 fbb3 	bl	1870 <_arch_irq_enable>

	return 0;
}
    110a:	2000      	movs	r0, #0
    110c:	bd08      	pop	{r3, pc}
	...

00001110 <_m16src_start>:
{
    1110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1112:	f04f 0220 	mov.w	r2, #32
    1116:	f3ef 8311 	mrs	r3, BASEPRI
    111a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    111e:	4a25      	ldr	r2, [pc, #148]	; (11b4 <_m16src_start+0xa4>)
    1120:	7810      	ldrb	r0, [r2, #0]
    1122:	1c44      	adds	r4, r0, #1
    1124:	7014      	strb	r4, [r2, #0]
    1126:	b160      	cbz	r0, 1142 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1128:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1130:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1134:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1138:	bf14      	ite	ne
    113a:	2000      	movne	r0, #0
    113c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1142:	4d1d      	ldr	r5, [pc, #116]	; (11b8 <_m16src_start+0xa8>)
    1144:	782f      	ldrb	r7, [r5, #0]
    1146:	b12f      	cbz	r7, 1154 <_m16src_start+0x44>
		m16src_ref--;
    1148:	7010      	strb	r0, [r2, #0]
    114a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    114e:	f06f 000a 	mvn.w	r0, #10
    1152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1154:	2601      	movs	r6, #1
    1156:	702e      	strb	r6, [r5, #0]
    1158:	f383 8811 	msr	BASEPRI, r3
    115c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1160:	b319      	cbz	r1, 11aa <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1162:	4638      	mov	r0, r7
    1164:	f000 fb94 	bl	1890 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    116c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1170:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1174:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1176:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    117a:	b192      	cbz	r2, 11a2 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    117c:	2200      	movs	r2, #0
    117e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1182:	4a0e      	ldr	r2, [pc, #56]	; (11bc <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1184:	f013 0f01 	tst.w	r3, #1
    1188:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    118c:	bf08      	it	eq
    118e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1192:	2000      	movs	r0, #0
    1194:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1198:	f000 fb6a 	bl	1870 <_arch_irq_enable>
	m16src_grd = 0;
    119c:	2300      	movs	r3, #0
    119e:	702b      	strb	r3, [r5, #0]
    11a0:	e7c4      	b.n	112c <_m16src_start+0x1c>
			__WFE();
    11a2:	bf20      	wfe
			__SEV();
    11a4:	bf40      	sev
			__WFE();
    11a6:	bf20      	wfe
    11a8:	e7e5      	b.n	1176 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    11ae:	6026      	str	r6, [r4, #0]
    11b0:	e7f4      	b.n	119c <_m16src_start+0x8c>
    11b2:	bf00      	nop
    11b4:	2000000e 	.word	0x2000000e
    11b8:	2000000d 	.word	0x2000000d
    11bc:	e000e100 	.word	0xe000e100

000011c0 <_k32src_start>:
{
    11c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11c2:	4606      	mov	r6, r0
    11c4:	460c      	mov	r4, r1
	__asm__ volatile(
    11c6:	f04f 0220 	mov.w	r2, #32
    11ca:	f3ef 8311 	mrs	r3, BASEPRI
    11ce:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11d2:	4a2c      	ldr	r2, [pc, #176]	; (1284 <_k32src_start+0xc4>)
    11d4:	7815      	ldrb	r5, [r2, #0]
    11d6:	b165      	cbz	r5, 11f2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11d8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11e0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11e8:	bf0c      	ite	eq
    11ea:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11ee:	2000      	movne	r0, #0
    11f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11f2:	2701      	movs	r7, #1
    11f4:	7017      	strb	r7, [r2, #0]
    11f6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11fa:	4628      	mov	r0, r5
    11fc:	f000 fb48 	bl	1890 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1204:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1206:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    120a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    120e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1212:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1216:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1218:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    121c:	b371      	cbz	r1, 127c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    121e:	0792      	lsls	r2, r2, #30
    1220:	4f19      	ldr	r7, [pc, #100]	; (1288 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1226:	f04f 0100 	mov.w	r1, #0
    122a:	f04f 0501 	mov.w	r5, #1
    122e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1232:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1236:	bf58      	it	pl
    1238:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    123c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1240:	f000 fb16 	bl	1870 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1248:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    124a:	2218      	movs	r2, #24
    124c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1250:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1254:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1258:	f014 0103 	ands.w	r1, r4, #3
    125c:	d1be      	bne.n	11dc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    125e:	2010      	movs	r0, #16
    1260:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1268:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    126a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    126e:	f7ff ff4f 	bl	1110 <_m16src_start>
		if (!err) {
    1272:	2800      	cmp	r0, #0
    1274:	d1b2      	bne.n	11dc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1276:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    127a:	e7af      	b.n	11dc <_k32src_start+0x1c>
		__WFE();
    127c:	bf20      	wfe
		__SEV();
    127e:	bf40      	sev
		__WFE();
    1280:	bf20      	wfe
    1282:	e7c9      	b.n	1218 <_k32src_start+0x58>
    1284:	2000000c 	.word	0x2000000c
    1288:	e000e100 	.word	0xe000e100

0000128c <_power_clock_isr>:
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    128e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1292:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1294:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1298:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    129c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    12a0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    12a4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    12a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    12ac:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    12b0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12b4:	f1be 0f00 	cmp.w	lr, #0
    12b8:	d003      	beq.n	12c2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12ba:	f04f 0e00 	mov.w	lr, #0
    12be:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12c2:	b127      	cbz	r7, 12ce <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12c8:	2700      	movs	r7, #0
    12ca:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ce:	b13a      	cbz	r2, 12e0 <_power_clock_isr+0x54>
    12d0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12d2:	bf41      	itttt	mi
    12d4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12d8:	2201      	movmi	r2, #1
    12da:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12de:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12e0:	b120      	cbz	r0, 12ec <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12e6:	2200      	movs	r2, #0
    12e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12ec:	b149      	cbz	r1, 1302 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12f2:	2100      	movs	r1, #0
    12f4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12f8:	4628      	mov	r0, r5
    12fa:	f7ff fecf 	bl	109c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12fe:	2301      	movs	r3, #1
    1300:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1302:	b176      	cbz	r6, 1322 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1308:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    130a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    130c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1310:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1312:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1316:	f7ff fefb 	bl	1110 <_m16src_start>
		if (!err) {
    131a:	b910      	cbnz	r0, 1322 <_power_clock_isr+0x96>
    131c:	4b01      	ldr	r3, [pc, #4]	; (1324 <_power_clock_isr+0x98>)
    131e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1324:	e000e100 	.word	0xe000e100

00001328 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <rtc_compare_set+0x24>)
    132a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    132e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1332:	1ac0      	subs	r0, r0, r3
    1334:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1338:	4b05      	ldr	r3, [pc, #20]	; (1350 <rtc_compare_set+0x28>)
    133a:	3802      	subs	r0, #2
    133c:	4298      	cmp	r0, r3
    133e:	bf82      	ittt	hi
    1340:	4b04      	ldrhi	r3, [pc, #16]	; (1354 <rtc_compare_set+0x2c>)
    1342:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1346:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    134a:	4770      	bx	lr
    134c:	40011000 	.word	0x40011000
    1350:	007ffffd 	.word	0x007ffffd
    1354:	e000e100 	.word	0xe000e100

00001358 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1358:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    135a:	4b11      	ldr	r3, [pc, #68]	; (13a0 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    135c:	4c11      	ldr	r4, [pc, #68]	; (13a4 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    135e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1362:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1364:	4d10      	ldr	r5, [pc, #64]	; (13a8 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1366:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1368:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    136a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    136e:	4298      	cmp	r0, r3
    1370:	d30f      	bcc.n	1392 <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    1372:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1376:	490d      	ldr	r1, [pc, #52]	; (13ac <rtc_announce_set_next+0x54>)
    1378:	6809      	ldr	r1, [r1, #0]
    137a:	4288      	cmp	r0, r1
    137c:	bf28      	it	cs
    137e:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1380:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1384:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1388:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    138a:	4b09      	ldr	r3, [pc, #36]	; (13b0 <rtc_announce_set_next+0x58>)
    138c:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    138e:	f012 feb5 	bl	140fc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1392:	6820      	ldr	r0, [r4, #0]
    1394:	682b      	ldr	r3, [r5, #0]
    1396:	4418      	add	r0, r3
}
    1398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    139c:	f7ff bfc4 	b.w	1328 <rtc_compare_set>
    13a0:	40011000 	.word	0x40011000
    13a4:	20000014 	.word	0x20000014
    13a8:	20003e78 	.word	0x20003e78
    13ac:	20000010 	.word	0x20000010
    13b0:	20003e74 	.word	0x20003e74

000013b4 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <rtc1_nrf5_isr+0xc>)
    13b6:	2200      	movs	r2, #0
    13b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13bc:	f7ff bfcc 	b.w	1358 <rtc_announce_set_next>
    13c0:	40011000 	.word	0x40011000

000013c4 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13c4:	1e03      	subs	r3, r0, #0
    13c6:	4a0a      	ldr	r2, [pc, #40]	; (13f0 <_timer_idle_enter+0x2c>)
    13c8:	480a      	ldr	r0, [pc, #40]	; (13f4 <_timer_idle_enter+0x30>)
    13ca:	db04      	blt.n	13d6 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13cc:	6811      	ldr	r1, [r2, #0]
    13ce:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13d2:	428b      	cmp	r3, r1
    13d4:	dd02      	ble.n	13dc <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13d6:	6813      	ldr	r3, [r2, #0]
    13d8:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13dc:	6810      	ldr	r0, [r2, #0]
    13de:	4a06      	ldr	r2, [pc, #24]	; (13f8 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13e0:	4906      	ldr	r1, [pc, #24]	; (13fc <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13e2:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13e4:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13e6:	fb00 2003 	mla	r0, r0, r3, r2
    13ea:	f7ff bf9d 	b.w	1328 <rtc_compare_set>
    13ee:	bf00      	nop
    13f0:	20003e78 	.word	0x20003e78
    13f4:	007fffff 	.word	0x007fffff
    13f8:	20000014 	.word	0x20000014
    13fc:	20000010 	.word	0x20000010

00001400 <_timer_idle_exit>:
{
    1400:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1402:	4b07      	ldr	r3, [pc, #28]	; (1420 <_timer_idle_exit+0x20>)
    1404:	2200      	movs	r2, #0
    1406:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <_timer_idle_exit+0x24>)
    140c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1410:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1414:	f7ff ffa0 	bl	1358 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1418:	4b03      	ldr	r3, [pc, #12]	; (1428 <_timer_idle_exit+0x28>)
    141a:	2201      	movs	r2, #1
    141c:	601a      	str	r2, [r3, #0]
    141e:	bd08      	pop	{r3, pc}
    1420:	40011000 	.word	0x40011000
    1424:	e000e100 	.word	0xe000e100
    1428:	20000010 	.word	0x20000010

0000142c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    142c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    142e:	4818      	ldr	r0, [pc, #96]	; (1490 <_sys_clock_driver_init+0x64>)
    1430:	f012 f914 	bl	1365c <device_get_binding>
	if (!clock) {
    1434:	b348      	cbz	r0, 148a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1436:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1438:	4d16      	ldr	r5, [pc, #88]	; (1494 <_sys_clock_driver_init+0x68>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	2101      	movs	r1, #1
    143e:	4798      	blx	r3
	rtc_past = 0;
    1440:	4b15      	ldr	r3, [pc, #84]	; (1498 <_sys_clock_driver_init+0x6c>)
    1442:	2400      	movs	r4, #0
    1444:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1446:	4b15      	ldr	r3, [pc, #84]	; (149c <_sys_clock_driver_init+0x70>)
    1448:	2601      	movs	r6, #1
    144a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    144c:	4b14      	ldr	r3, [pc, #80]	; (14a0 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    144e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    145c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1460:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1464:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1466:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    146a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    146e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1472:	4631      	mov	r1, r6
    1474:	4622      	mov	r2, r4
    1476:	2011      	movs	r0, #17
    1478:	f000 fa2c 	bl	18d4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    147c:	2011      	movs	r0, #17
    147e:	f000 f9f7 	bl	1870 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1482:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1484:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1486:	602e      	str	r6, [r5, #0]
	return 0;
    1488:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    148a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    148e:	bd70      	pop	{r4, r5, r6, pc}
    1490:	00014c6c 	.word	0x00014c6c
    1494:	40011000 	.word	0x40011000
    1498:	20000014 	.word	0x20000014
    149c:	20000010 	.word	0x20000010
    14a0:	20003e78 	.word	0x20003e78
    14a4:	e000e100 	.word	0xe000e100

000014a8 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    14a8:	4a0a      	ldr	r2, [pc, #40]	; (14d4 <_timer_cycle_get_32+0x2c>)
{
    14aa:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    14ac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    14b0:	4d09      	ldr	r5, [pc, #36]	; (14d8 <_timer_cycle_get_32+0x30>)
    14b2:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14b6:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14ba:	42a3      	cmp	r3, r4
    14bc:	d107      	bne.n	14ce <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14be:	4a07      	ldr	r2, [pc, #28]	; (14dc <_timer_cycle_get_32+0x34>)
    14c0:	6812      	ldr	r2, [r2, #0]
    14c2:	4350      	muls	r0, r2
    14c4:	1a1b      	subs	r3, r3, r0
    14c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14ca:	4418      	add	r0, r3
    14cc:	bd30      	pop	{r4, r5, pc}
    14ce:	4623      	mov	r3, r4
    14d0:	e7ef      	b.n	14b2 <_timer_cycle_get_32+0xa>
    14d2:	bf00      	nop
    14d4:	40011000 	.word	0x40011000
    14d8:	20001988 	.word	0x20001988
    14dc:	20003e78 	.word	0x20003e78

000014e0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14e0:	4807      	ldr	r0, [pc, #28]	; (1500 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14e2:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14e4:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14e6:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14e8:	d008      	beq.n	14fc <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14ea:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14ec:	f012 fd40 	bl	13f70 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14f0:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14f4:	4903      	ldr	r1, [pc, #12]	; (1504 <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    14f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14fa:	600a      	str	r2, [r1, #0]

000014fc <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14fc:	4770      	bx	lr
    14fe:	0000      	.short	0x0000
    ldr r0, =_kernel
    1500:	20001950 	.word	0x20001950
    ldr r1, =_SCS_ICSR
    1504:	e000ed04 	.word	0xe000ed04

00001508 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1508:	4804      	ldr	r0, [pc, #16]	; (151c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    150a:	2300      	movs	r3, #0
    150c:	2120      	movs	r1, #32
    150e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1510:	3301      	adds	r3, #1
    1512:	2b27      	cmp	r3, #39	; 0x27
    1514:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1518:	d1f9      	bne.n	150e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    151a:	4770      	bx	lr
    151c:	e000e100 	.word	0xe000e100

00001520 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1520:	4a08      	ldr	r2, [pc, #32]	; (1544 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1522:	4909      	ldr	r1, [pc, #36]	; (1548 <__swap+0x28>)
	_current->arch.basepri = key;
    1524:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1526:	6809      	ldr	r1, [r1, #0]
    1528:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    152a:	4908      	ldr	r1, [pc, #32]	; (154c <__swap+0x2c>)
	_current->arch.basepri = key;
    152c:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    152e:	684b      	ldr	r3, [r1, #4]
    1530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1534:	604b      	str	r3, [r1, #4]
    1536:	2300      	movs	r3, #0
    1538:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    153c:	6893      	ldr	r3, [r2, #8]
}
    153e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	20001950 	.word	0x20001950
    1548:	000188f8 	.word	0x000188f8
    154c:	e000ed00 	.word	0xe000ed00

00001550 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1550:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1552:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1556:	490d      	ldr	r1, [pc, #52]	; (158c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1558:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    155a:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    155c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    155e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1562:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    1566:	4f0a      	ldr	r7, [pc, #40]	; (1590 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1568:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    156c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    156e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1570:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1572:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1574:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1576:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1578:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    157c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1580:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1584:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1588:	4770      	bx	lr
    158a:	0000      	.short	0x0000
    ldr r1, =_kernel
    158c:	20001950 	.word	0x20001950
    ldr v4, =_SCS_ICSR
    1590:	e000ed04 	.word	0xe000ed04

00001594 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1594:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1598:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    159a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    159e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15a2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    15a4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    15a8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    15ac:	2902      	cmp	r1, #2
    beq _oops
    15ae:	d0ff      	beq.n	15b0 <_oops>

000015b0 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    15b0:	b500      	push	{lr}
    blx _do_kernel_oops
    15b2:	f000 fa2b 	bl	1a0c <_do_kernel_oops>
    pop {pc}
    15b6:	bd00      	pop	{pc}

000015b8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15b8:	b510      	push	{r4, lr}
    15ba:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15bc:	f012 fd26 	bl	1400c <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15c0:	6822      	ldr	r2, [r4, #0]
    15c2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15c8:	4801      	ldr	r0, [pc, #4]	; (15d0 <_FaultThreadShow.isra.2+0x18>)
    15ca:	f7ff bcdf 	b.w	f8c <printk>
    15ce:	bf00      	nop
    15d0:	00014dc5 	.word	0x00014dc5

000015d4 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15d4:	b538      	push	{r3, r4, r5, lr}
    15d6:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15d8:	481a      	ldr	r0, [pc, #104]	; (1644 <_MpuFault+0x70>)
{
    15da:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15dc:	f7ff fcd6 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15e0:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15e4:	4c18      	ldr	r4, [pc, #96]	; (1648 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15e6:	f7ff ffe7 	bl	15b8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	06d9      	lsls	r1, r3, #27
    15ee:	d502      	bpl.n	15f6 <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15f0:	4816      	ldr	r0, [pc, #88]	; (164c <_MpuFault+0x78>)
    15f2:	f7ff fccb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f8:	071a      	lsls	r2, r3, #28
    15fa:	d502      	bpl.n	1602 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15fc:	4814      	ldr	r0, [pc, #80]	; (1650 <_MpuFault+0x7c>)
    15fe:	f7ff fcc5 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1604:	079b      	lsls	r3, r3, #30
    1606:	d50e      	bpl.n	1626 <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    1608:	4812      	ldr	r0, [pc, #72]	; (1654 <_MpuFault+0x80>)
    160a:	f7ff fcbf 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    160e:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1610:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1612:	0618      	lsls	r0, r3, #24
    1614:	d507      	bpl.n	1626 <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1616:	4810      	ldr	r0, [pc, #64]	; (1658 <_MpuFault+0x84>)
    1618:	f7ff fcb8 	bl	f8c <printk>
			if (fromHardFault) {
    161c:	b11d      	cbz	r5, 1626 <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    161e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1624:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1626:	4c08      	ldr	r4, [pc, #32]	; (1648 <_MpuFault+0x74>)
    1628:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    162a:	07d2      	lsls	r2, r2, #31
    162c:	d502      	bpl.n	1634 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    162e:	480b      	ldr	r0, [pc, #44]	; (165c <_MpuFault+0x88>)
    1630:	f7ff fcac 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1636:	069b      	lsls	r3, r3, #26
    1638:	d502      	bpl.n	1640 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    163a:	4809      	ldr	r0, [pc, #36]	; (1660 <_MpuFault+0x8c>)
    163c:	f7ff fca6 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1640:	2000      	movs	r0, #0
    1642:	bd38      	pop	{r3, r4, r5, pc}
    1644:	00014e0f 	.word	0x00014e0f
    1648:	e000ed00 	.word	0xe000ed00
    164c:	00014e26 	.word	0x00014e26
    1650:	00014e38 	.word	0x00014e38
    1654:	00014e4c 	.word	0x00014e4c
    1658:	00014e65 	.word	0x00014e65
    165c:	00014e76 	.word	0x00014e76
    1660:	00014e96 	.word	0x00014e96

00001664 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1664:	b510      	push	{r4, lr}
    1666:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1668:	481a      	ldr	r0, [pc, #104]	; (16d4 <_UsageFault+0x70>)
    166a:	f7ff fc8f 	bl	f8c <printk>

	_FaultThreadShow(esf);
    166e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1672:	4c19      	ldr	r4, [pc, #100]	; (16d8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1674:	f7ff ffa0 	bl	15b8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	019a      	lsls	r2, r3, #6
    167c:	d502      	bpl.n	1684 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    167e:	4817      	ldr	r0, [pc, #92]	; (16dc <_UsageFault+0x78>)
    1680:	f7ff fc84 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1686:	01db      	lsls	r3, r3, #7
    1688:	d502      	bpl.n	1690 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    168a:	4815      	ldr	r0, [pc, #84]	; (16e0 <_UsageFault+0x7c>)
    168c:	f7ff fc7e 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1692:	0318      	lsls	r0, r3, #12
    1694:	d502      	bpl.n	169c <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    1696:	4813      	ldr	r0, [pc, #76]	; (16e4 <_UsageFault+0x80>)
    1698:	f7ff fc78 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    169c:	4c0e      	ldr	r4, [pc, #56]	; (16d8 <_UsageFault+0x74>)
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	0359      	lsls	r1, r3, #13
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    16a4:	4810      	ldr	r0, [pc, #64]	; (16e8 <_UsageFault+0x84>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    16aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ac:	039a      	lsls	r2, r3, #14
    16ae:	d502      	bpl.n	16b6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    16b0:	480e      	ldr	r0, [pc, #56]	; (16ec <_UsageFault+0x88>)
    16b2:	f7ff fc6b 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16b8:	03db      	lsls	r3, r3, #15
    16ba:	d502      	bpl.n	16c2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16bc:	480c      	ldr	r0, [pc, #48]	; (16f0 <_UsageFault+0x8c>)
    16be:	f7ff fc65 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16c2:	4a05      	ldr	r2, [pc, #20]	; (16d8 <_UsageFault+0x74>)
    16c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16c6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16ca:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16ce:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16d0:	2000      	movs	r0, #0
    16d2:	bd10      	pop	{r4, pc}
    16d4:	00014ec6 	.word	0x00014ec6
    16d8:	e000ed00 	.word	0xe000ed00
    16dc:	00014edf 	.word	0x00014edf
    16e0:	00014ef3 	.word	0x00014ef3
    16e4:	00014f0e 	.word	0x00014f0e
    16e8:	00014f2d 	.word	0x00014f2d
    16ec:	00014f53 	.word	0x00014f53
    16f0:	00014f6e 	.word	0x00014f6e

000016f4 <_BusFault>:
{
    16f4:	b538      	push	{r3, r4, r5, lr}
    16f6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16f8:	481d      	ldr	r0, [pc, #116]	; (1770 <_BusFault+0x7c>)
{
    16fa:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16fc:	f7ff fc46 	bl	f8c <printk>
	_FaultThreadShow(esf);
    1700:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1704:	4c1b      	ldr	r4, [pc, #108]	; (1774 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1706:	f7ff ff57 	bl	15b8 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    170a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    170c:	04d8      	lsls	r0, r3, #19
    170e:	d504      	bpl.n	171a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1710:	4819      	ldr	r0, [pc, #100]	; (1778 <_BusFault+0x84>)
}
    1712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1716:	f7ff bc39 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    171a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171c:	0519      	lsls	r1, r3, #20
    171e:	d501      	bpl.n	1724 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1720:	4816      	ldr	r0, [pc, #88]	; (177c <_BusFault+0x88>)
    1722:	e7f6      	b.n	1712 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1724:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1726:	059a      	lsls	r2, r3, #22
    1728:	d514      	bpl.n	1754 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    172a:	4815      	ldr	r0, [pc, #84]	; (1780 <_BusFault+0x8c>)
    172c:	f7ff fc2e 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1734:	041b      	lsls	r3, r3, #16
    1736:	d507      	bpl.n	1748 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1738:	4812      	ldr	r0, [pc, #72]	; (1784 <_BusFault+0x90>)
    173a:	f7ff fc27 	bl	f8c <printk>
			if (fromHardFault) {
    173e:	b11d      	cbz	r5, 1748 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1746:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1748:	4b0a      	ldr	r3, [pc, #40]	; (1774 <_BusFault+0x80>)
    174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    174c:	0558      	lsls	r0, r3, #21
    174e:	d50e      	bpl.n	176e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1750:	480d      	ldr	r0, [pc, #52]	; (1788 <_BusFault+0x94>)
    1752:	e7de      	b.n	1712 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1756:	0559      	lsls	r1, r3, #21
    1758:	d4fa      	bmi.n	1750 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    175a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    175c:	05da      	lsls	r2, r3, #23
    175e:	d501      	bpl.n	1764 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1760:	480a      	ldr	r0, [pc, #40]	; (178c <_BusFault+0x98>)
    1762:	e7d6      	b.n	1712 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1766:	049b      	lsls	r3, r3, #18
    1768:	d501      	bpl.n	176e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    176a:	4809      	ldr	r0, [pc, #36]	; (1790 <_BusFault+0x9c>)
    176c:	e7d1      	b.n	1712 <_BusFault+0x1e>
    176e:	bd38      	pop	{r3, r4, r5, pc}
    1770:	00014c8c 	.word	0x00014c8c
    1774:	e000ed00 	.word	0xe000ed00
    1778:	00014e26 	.word	0x00014e26
    177c:	00014e38 	.word	0x00014e38
    1780:	00014ca3 	.word	0x00014ca3
    1784:	00014e65 	.word	0x00014e65
    1788:	00014cbd 	.word	0x00014cbd
    178c:	00014cd9 	.word	0x00014cd9
    1790:	00014e96 	.word	0x00014e96

00001794 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1794:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1796:	4c27      	ldr	r4, [pc, #156]	; (1834 <_Fault+0xa0>)
    1798:	6863      	ldr	r3, [r4, #4]
    179a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    179e:	1eda      	subs	r2, r3, #3
{
    17a0:	4605      	mov	r5, r0
	switch (fault) {
    17a2:	2a09      	cmp	r2, #9
    17a4:	d83b      	bhi.n	181e <_Fault+0x8a>
    17a6:	e8df f002 	tbb	[pc, r2]
    17aa:	3405      	.short	0x3405
    17ac:	3a3a3036 	.word	0x3a3a3036
    17b0:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17b4:	4820      	ldr	r0, [pc, #128]	; (1838 <_Fault+0xa4>)
    17b6:	f7ff fbe9 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17bc:	079a      	lsls	r2, r3, #30
    17be:	d503      	bpl.n	17c8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17c0:	481e      	ldr	r0, [pc, #120]	; (183c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17c2:	f7ff fbe3 	bl	f8c <printk>
    17c6:	e002      	b.n	17ce <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17ca:	005b      	lsls	r3, r3, #1
    17cc:	d401      	bmi.n	17d2 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17ce:	2000      	movs	r0, #0
    17d0:	e009      	b.n	17e6 <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17d2:	481b      	ldr	r0, [pc, #108]	; (1840 <_Fault+0xac>)
    17d4:	f7ff fbda 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17d8:	4b1a      	ldr	r3, [pc, #104]	; (1844 <_Fault+0xb0>)
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	b143      	cbz	r3, 17f0 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17de:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17e0:	4628      	mov	r0, r5
    17e2:	f7ff fef7 	bl	15d4 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17e6:	4629      	mov	r1, r5
}
    17e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17ec:	f000 b912 	b.w	1a14 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17f0:	4b15      	ldr	r3, [pc, #84]	; (1848 <_Fault+0xb4>)
    17f2:	781b      	ldrb	r3, [r3, #0]
    17f4:	b123      	cbz	r3, 1800 <_Fault+0x6c>
			_BusFault(esf, 1);
    17f6:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17f8:	4628      	mov	r0, r5
    17fa:	f7ff ff7b 	bl	16f4 <_BusFault>
    17fe:	e7e6      	b.n	17ce <_Fault+0x3a>
		} else if (SCB_UFSR) {
    1800:	4b12      	ldr	r3, [pc, #72]	; (184c <_Fault+0xb8>)
    1802:	881b      	ldrh	r3, [r3, #0]
    1804:	b29b      	uxth	r3, r3
    1806:	2b00      	cmp	r3, #0
    1808:	d0e1      	beq.n	17ce <_Fault+0x3a>
		reason = _UsageFault(esf);
    180a:	4628      	mov	r0, r5
    180c:	f7ff ff2a 	bl	1664 <_UsageFault>
    1810:	e7e9      	b.n	17e6 <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1812:	2100      	movs	r1, #0
    1814:	e7e4      	b.n	17e0 <_Fault+0x4c>
		_BusFault(esf, 0);
    1816:	2100      	movs	r1, #0
    1818:	e7ee      	b.n	17f8 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    181a:	480d      	ldr	r0, [pc, #52]	; (1850 <_Fault+0xbc>)
    181c:	e7d1      	b.n	17c2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    181e:	480d      	ldr	r0, [pc, #52]	; (1854 <_Fault+0xc0>)
    1820:	490d      	ldr	r1, [pc, #52]	; (1858 <_Fault+0xc4>)
    1822:	f1a3 0210 	sub.w	r2, r3, #16
    1826:	2b0f      	cmp	r3, #15
    1828:	bfd8      	it	le
    182a:	4601      	movle	r1, r0
    182c:	480b      	ldr	r0, [pc, #44]	; (185c <_Fault+0xc8>)
    182e:	f7ff fbad 	bl	f8c <printk>
    1832:	e7cc      	b.n	17ce <_Fault+0x3a>
    1834:	e000ed00 	.word	0xe000ed00
    1838:	00014d20 	.word	0x00014d20
    183c:	00014d38 	.word	0x00014d38
    1840:	00014d5a 	.word	0x00014d5a
    1844:	e000ed28 	.word	0xe000ed28
    1848:	e000ed29 	.word	0xe000ed29
    184c:	e000ed2a 	.word	0xe000ed2a
    1850:	00014d7a 	.word	0x00014d7a
    1854:	00014cf2 	.word	0x00014cf2
    1858:	00014d07 	.word	0x00014d07
    185c:	00014db1 	.word	0x00014db1

00001860 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1860:	4a02      	ldr	r2, [pc, #8]	; (186c <_FaultInit+0xc>)
    1862:	6953      	ldr	r3, [r2, #20]
    1864:	f043 0310 	orr.w	r3, r3, #16
    1868:	6153      	str	r3, [r2, #20]
    186a:	4770      	bx	lr
    186c:	e000ed00 	.word	0xe000ed00

00001870 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1870:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1872:	2b00      	cmp	r3, #0
    1874:	db08      	blt.n	1888 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1876:	2201      	movs	r2, #1
    1878:	f000 001f 	and.w	r0, r0, #31
    187c:	fa02 f000 	lsl.w	r0, r2, r0
    1880:	095b      	lsrs	r3, r3, #5
    1882:	4a02      	ldr	r2, [pc, #8]	; (188c <_arch_irq_enable+0x1c>)
    1884:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1888:	4770      	bx	lr
    188a:	bf00      	nop
    188c:	e000e100 	.word	0xe000e100

00001890 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1890:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1892:	2b00      	cmp	r3, #0
    1894:	db0d      	blt.n	18b2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1896:	2201      	movs	r2, #1
    1898:	095b      	lsrs	r3, r3, #5
    189a:	f000 001f 	and.w	r0, r0, #31
    189e:	fa02 f000 	lsl.w	r0, r2, r0
    18a2:	3320      	adds	r3, #32
    18a4:	4a03      	ldr	r2, [pc, #12]	; (18b4 <_arch_irq_disable+0x24>)
    18a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    18aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18ae:	f3bf 8f6f 	isb	sy
    18b2:	4770      	bx	lr
    18b4:	e000e100 	.word	0xe000e100

000018b8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18b8:	0942      	lsrs	r2, r0, #5
    18ba:	4b05      	ldr	r3, [pc, #20]	; (18d0 <_arch_irq_is_enabled+0x18>)
    18bc:	f000 001f 	and.w	r0, r0, #31
    18c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18c4:	2301      	movs	r3, #1
    18c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    18ca:	4010      	ands	r0, r2
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop
    18d0:	e000e100 	.word	0xe000e100

000018d4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18d6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18d8:	bfa8      	it	ge
    18da:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18de:	f101 0101 	add.w	r1, r1, #1
    18e2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18e6:	bfad      	iteet	ge
    18e8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ec:	f000 000f 	andlt.w	r0, r0, #15
    18f0:	4b03      	ldrlt	r3, [pc, #12]	; (1900 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f2:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f4:	bfb6      	itet	lt
    18f6:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18fc:	5419      	strblt	r1, [r3, r0]
    18fe:	4770      	bx	lr
    1900:	e000ed14 	.word	0xe000ed14

00001904 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1904:	f000 b842 	b.w	198c <__bus_fault>

00001908 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1908:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    190a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    190c:	4b04      	ldr	r3, [pc, #16]	; (1920 <_arch_isr_direct_pm+0x18>)
    190e:	69d8      	ldr	r0, [r3, #28]
    1910:	b118      	cbz	r0, 191a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1912:	2200      	movs	r2, #0
    1914:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    1916:	f011 fec7 	bl	136a8 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    191a:	b662      	cpsie	i
    191c:	bd08      	pop	{r3, pc}
    191e:	bf00      	nop
    1920:	20001950 	.word	0x20001950

00001924 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1926:	460c      	mov	r4, r1
    1928:	4616      	mov	r6, r2
    192a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    192c:	2204      	movs	r2, #4
    192e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1930:	9909      	ldr	r1, [sp, #36]	; 0x24
    1932:	4605      	mov	r5, r0
    1934:	f012 fdfe 	bl	14534 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1938:	f1a6 0120 	sub.w	r1, r6, #32
    193c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    193e:	4a0c      	ldr	r2, [pc, #48]	; (1970 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1940:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1942:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1946:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1948:	f022 0201 	bic.w	r2, r2, #1
    194c:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    194e:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1950:	662e      	str	r6, [r5, #96]	; 0x60
    1952:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1954:	9a06      	ldr	r2, [sp, #24]
    1956:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1958:	9a07      	ldr	r2, [sp, #28]
    195a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    195c:	9a08      	ldr	r2, [sp, #32]
    195e:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1960:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1966:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1968:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    196a:	66ab      	str	r3, [r5, #104]	; 0x68
    196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    196e:	bf00      	nop
    1970:	00000899 	.word	0x00000899

00001974 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1974:	4901      	ldr	r1, [pc, #4]	; (197c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1976:	2210      	movs	r2, #16
	str r2, [r1]
    1978:	600a      	str	r2, [r1, #0]
	bx lr
    197a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    197c:	e000ed10 	.word	0xe000ed10

00001980 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1980:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1982:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1986:	bf30      	wfi

	bx lr
    1988:	4770      	bx	lr
    198a:	bf00      	nop

0000198c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    198c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    198e:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1992:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19b0 <__bus_fault+0x24>
	ldr ip, [ip]
    1996:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    199a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    199e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    19a0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    19a4:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19a8:	b500      	push	{lr}
	bl _Fault
    19aa:	f7ff fef3 	bl	1794 <_Fault>

	pop {pc}
    19ae:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19b0:	e000ed04 	.word	0xe000ed04

000019b4 <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    19b4:	2804      	cmp	r0, #4
{
    19b6:	b538      	push	{r3, r4, r5, lr}
    19b8:	4604      	mov	r4, r0
    19ba:	460d      	mov	r5, r1
	switch (reason) {
    19bc:	d013      	beq.n	19e6 <_NanoFatalErrorHandler+0x32>
    19be:	2805      	cmp	r0, #5
    19c0:	d013      	beq.n	19ea <_NanoFatalErrorHandler+0x36>
    19c2:	2803      	cmp	r0, #3
    19c4:	d113      	bne.n	19ee <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19c6:	480c      	ldr	r0, [pc, #48]	; (19f8 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    19c8:	f7ff fae0 	bl	f8c <printk>
    19cc:	f012 fb1e 	bl	1400c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19d0:	69aa      	ldr	r2, [r5, #24]
    19d2:	4601      	mov	r1, r0
    19d4:	4809      	ldr	r0, [pc, #36]	; (19fc <_NanoFatalErrorHandler+0x48>)
    19d6:	f7ff fad9 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19da:	4629      	mov	r1, r5
    19dc:	4620      	mov	r0, r4
}
    19de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19e2:	f000 b817 	b.w	1a14 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    19e6:	4806      	ldr	r0, [pc, #24]	; (1a00 <_NanoFatalErrorHandler+0x4c>)
    19e8:	e7ee      	b.n	19c8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    19ea:	4806      	ldr	r0, [pc, #24]	; (1a04 <_NanoFatalErrorHandler+0x50>)
    19ec:	e7ec      	b.n	19c8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19ee:	4601      	mov	r1, r0
    19f0:	4805      	ldr	r0, [pc, #20]	; (1a08 <_NanoFatalErrorHandler+0x54>)
    19f2:	f7ff facb 	bl	f8c <printk>
		break;
    19f6:	e7e9      	b.n	19cc <_NanoFatalErrorHandler+0x18>
    19f8:	00014f9a 	.word	0x00014f9a
    19fc:	00015018 	.word	0x00015018
    1a00:	00014fc0 	.word	0x00014fc0
    1a04:	00014fda 	.word	0x00014fda
    1a08:	00014ff5 	.word	0x00014ff5

00001a0c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a0c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a0e:	6800      	ldr	r0, [r0, #0]
    1a10:	f7ff bfd0 	b.w	19b4 <_NanoFatalErrorHandler>

00001a14 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a14:	2805      	cmp	r0, #5
{
    1a16:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a18:	d00c      	beq.n	1a34 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a1a:	f012 fcb9 	bl	14390 <k_is_in_isr>
    1a1e:	b160      	cbz	r0, 1a3a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a20:	f012 fcb6 	bl	14390 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a24:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <_SysFatalErrorHandler+0x44>)
    1a26:	490d      	ldr	r1, [pc, #52]	; (1a5c <_SysFatalErrorHandler+0x48>)
    1a28:	2800      	cmp	r0, #0
    1a2a:	bf08      	it	eq
    1a2c:	4619      	moveq	r1, r3
    1a2e:	480c      	ldr	r0, [pc, #48]	; (1a60 <_SysFatalErrorHandler+0x4c>)
    1a30:	f7ff faac 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a34:	f7ff ffa4 	bl	1980 <k_cpu_idle>
    1a38:	e7fc      	b.n	1a34 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a3a:	f012 fcb9 	bl	143b0 <_is_thread_essential>
    1a3e:	2800      	cmp	r0, #0
    1a40:	d1ee      	bne.n	1a20 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a42:	4c08      	ldr	r4, [pc, #32]	; (1a64 <_SysFatalErrorHandler+0x50>)
    1a44:	4808      	ldr	r0, [pc, #32]	; (1a68 <_SysFatalErrorHandler+0x54>)
    1a46:	68a1      	ldr	r1, [r4, #8]
    1a48:	f7ff faa0 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a4c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a52:	f000 b80b 	b.w	1a6c <_impl_k_thread_abort>
    1a56:	bf00      	nop
    1a58:	00015058 	.word	0x00015058
    1a5c:	00015054 	.word	0x00015054
    1a60:	00015069 	.word	0x00015069
    1a64:	20001950 	.word	0x20001950
    1a68:	00015089 	.word	0x00015089

00001a6c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a6c:	b538      	push	{r3, r4, r5, lr}
    1a6e:	4605      	mov	r5, r0
	__asm__ volatile(
    1a70:	f04f 0320 	mov.w	r3, #32
    1a74:	f3ef 8411 	mrs	r4, BASEPRI
    1a78:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a7c:	f012 fcf0 	bl	14460 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <_impl_k_thread_abort+0x44>)
    1a82:	689b      	ldr	r3, [r3, #8]
    1a84:	429d      	cmp	r5, r3
    1a86:	d10d      	bne.n	1aa4 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a88:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <_impl_k_thread_abort+0x48>)
    1a8a:	685a      	ldr	r2, [r3, #4]
    1a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a90:	b922      	cbnz	r2, 1a9c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1a92:	f012 fa6d 	bl	13f70 <_update_time_slice_before_swap>

	return __swap(key);
    1a96:	4620      	mov	r0, r4
    1a98:	f7ff fd42 	bl	1520 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a9c:	685a      	ldr	r2, [r3, #4]
    1a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1aa2:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1aa4:	4620      	mov	r0, r4
}
    1aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1aaa:	f012 b91b 	b.w	13ce4 <_reschedule>
    1aae:	bf00      	nop
    1ab0:	20001950 	.word	0x20001950
    1ab4:	e000ed00 	.word	0xe000ed00

00001ab8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1ab8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1aba:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1abc:	4a0b      	ldr	r2, [pc, #44]	; (1aec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1abe:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1ac0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ac2:	bf1e      	ittt	ne
	movne	r1, #0
    1ac4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ac6:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ac8:	f011 fdee 	blne	136a8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1acc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ace:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ad2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ad6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ada:	4905      	ldr	r1, [pc, #20]	; (1af0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1adc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1ade:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1ae0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1ae2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1ae6:	f7ff bcfb 	b.w	14e0 <_ExcExit>
    1aea:	0000      	.short	0x0000
	ldr r2, =_kernel
    1aec:	20001950 	.word	0x20001950
	ldr r1, =_sw_isr_table
    1af0:	000000dc 	.word	0x000000dc

00001af4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1af4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1af6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1afa:	4806      	ldr	r0, [pc, #24]	; (1b14 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b00:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b02:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b06:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b08:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b0c:	f3bf 8f6f 	isb	sy

    b _PrepC
    1b10:	f000 b806 	b.w	1b20 <_PrepC>
    ldr r0, =_interrupt_stack
    1b14:	20002e28 	.word	0x20002e28

00001b18 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b18:	bf30      	wfi
    b _SysNmiOnReset
    1b1a:	f7ff bffd 	b.w	1b18 <_SysNmiOnReset>
    1b1e:	bf00      	nop

00001b20 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b20:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b22:	4b07      	ldr	r3, [pc, #28]	; (1b40 <_PrepC+0x20>)
    1b24:	4a07      	ldr	r2, [pc, #28]	; (1b44 <_PrepC+0x24>)
    1b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b2a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b30:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b34:	f011 fde8 	bl	13708 <_bss_zero>
	_data_copy();
    1b38:	f011 fdf0 	bl	1371c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b3c:	f011 fe12 	bl	13764 <_Cstart>
    1b40:	00000000 	.word	0x00000000
    1b44:	e000ed00 	.word	0xe000ed00

00001b48 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b48:	b508      	push	{r3, lr}
	handler();
    1b4a:	f7ff ffe5 	bl	1b18 <_SysNmiOnReset>
	_ExcExit();
}
    1b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b52:	f7ff bcc5 	b.w	14e0 <_ExcExit>
	...

00001b58 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b58:	4912      	ldr	r1, [pc, #72]	; (1ba4 <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b5a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b5c:	680d      	ldr	r5, [r1, #0]
    1b5e:	2d08      	cmp	r5, #8
    1b60:	d80d      	bhi.n	1b7e <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b62:	4a11      	ldr	r2, [pc, #68]	; (1ba8 <arm_mpu_init+0x50>)
    1b64:	6848      	ldr	r0, [r1, #4]
    1b66:	2300      	movs	r3, #0
    1b68:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b6a:	429d      	cmp	r5, r3
    1b6c:	f100 000c 	add.w	r0, r0, #12
    1b70:	d107      	bne.n	1b82 <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b72:	2305      	movs	r3, #5
    1b74:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b7a:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b7e:	2000      	movs	r0, #0
    1b80:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b82:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b86:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b8a:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b8c:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b90:	f041 0110 	orr.w	r1, r1, #16
    1b94:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b96:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b9a:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b9c:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1b9e:	6114      	str	r4, [r2, #16]
    1ba0:	e7e3      	b.n	1b6a <arm_mpu_init+0x12>
    1ba2:	bf00      	nop
    1ba4:	20003a3c 	.word	0x20003a3c
    1ba8:	e000ed90 	.word	0xe000ed90

00001bac <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1bac:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1bae:	4603      	mov	r3, r0
    1bb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bb4:	b90a      	cbnz	r2, 1bba <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bb6:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bb8:	4770      	bx	lr
		*d = *s;
    1bba:	f803 2b01 	strb.w	r2, [r3], #1
    1bbe:	e7f7      	b.n	1bb0 <strcpy+0x4>

00001bc0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bc0:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bc2:	4603      	mov	r3, r0
    1bc4:	1a98      	subs	r0, r3, r2
    1bc6:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bca:	2900      	cmp	r1, #0
    1bcc:	d1fa      	bne.n	1bc4 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bce:	4770      	bx	lr

00001bd0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bd0:	3801      	subs	r0, #1
    1bd2:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1bd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1bd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bdc:	4293      	cmp	r3, r2
    1bde:	d102      	bne.n	1be6 <strcmp+0x16>
    1be0:	2b00      	cmp	r3, #0
    1be2:	d1f7      	bne.n	1bd4 <strcmp+0x4>
    1be4:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1be6:	1a98      	subs	r0, r3, r2
    1be8:	4770      	bx	lr

00001bea <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bea:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bec:	b182      	cbz	r2, 1c10 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bee:	3a01      	subs	r2, #1
    1bf0:	460c      	mov	r4, r1
    1bf2:	4603      	mov	r3, r0
    1bf4:	d103      	bne.n	1bfe <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1bf6:	781a      	ldrb	r2, [r3, #0]
    1bf8:	7820      	ldrb	r0, [r4, #0]
    1bfa:	1a10      	subs	r0, r2, r0
    1bfc:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1bfe:	781e      	ldrb	r6, [r3, #0]
    1c00:	7825      	ldrb	r5, [r4, #0]
    1c02:	42ae      	cmp	r6, r5
    1c04:	f100 0001 	add.w	r0, r0, #1
    1c08:	f101 0101 	add.w	r1, r1, #1
    1c0c:	d0ef      	beq.n	1bee <memcmp+0x4>
    1c0e:	e7f2      	b.n	1bf6 <memcmp+0xc>
		return 0;
    1c10:	4610      	mov	r0, r2
}
    1c12:	bd70      	pop	{r4, r5, r6, pc}

00001c14 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c14:	ea81 0300 	eor.w	r3, r1, r0
    1c18:	f013 0f03 	tst.w	r3, #3
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
    1c1e:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c20:	d00b      	beq.n	1c3a <memcpy+0x26>
    1c22:	3b01      	subs	r3, #1
    1c24:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c26:	4291      	cmp	r1, r2
    1c28:	d11b      	bne.n	1c62 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c2a:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c2c:	2a00      	cmp	r2, #0
    1c2e:	d0fc      	beq.n	1c2a <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c30:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c34:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c38:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c3a:	079c      	lsls	r4, r3, #30
    1c3c:	d1f6      	bne.n	1c2c <memcpy+0x18>
    1c3e:	1f1e      	subs	r6, r3, #4
    1c40:	460d      	mov	r5, r1
    1c42:	1b54      	subs	r4, r2, r5
    1c44:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c46:	2c03      	cmp	r4, #3
    1c48:	d806      	bhi.n	1c58 <memcpy+0x44>
    1c4a:	f022 0403 	bic.w	r4, r2, #3
    1c4e:	4421      	add	r1, r4
    1c50:	4423      	add	r3, r4
    1c52:	f002 0203 	and.w	r2, r2, #3
    1c56:	e7e4      	b.n	1c22 <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c58:	f855 4b04 	ldr.w	r4, [r5], #4
    1c5c:	f846 4f04 	str.w	r4, [r6, #4]!
    1c60:	e7ef      	b.n	1c42 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c62:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c66:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c6a:	e7dc      	b.n	1c26 <memcpy+0x12>

00001c6c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c6c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c6e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c70:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c72:	079c      	lsls	r4, r3, #30
    1c74:	d111      	bne.n	1c9a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c76:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c7a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c7e:	461e      	mov	r6, r3
    1c80:	1b95      	subs	r5, r2, r6
    1c82:	441d      	add	r5, r3
    1c84:	2d03      	cmp	r5, #3
    1c86:	d80e      	bhi.n	1ca6 <memset+0x3a>
    1c88:	f022 0403 	bic.w	r4, r2, #3
    1c8c:	4423      	add	r3, r4
    1c8e:	f002 0203 	and.w	r2, r2, #3
    1c92:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1c94:	4293      	cmp	r3, r2
    1c96:	d109      	bne.n	1cac <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1c98:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1c9a:	2a00      	cmp	r2, #0
    1c9c:	d0fc      	beq.n	1c98 <memset+0x2c>
		*(d_byte++) = c_byte;
    1c9e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1ca2:	3a01      	subs	r2, #1
    1ca4:	e7e5      	b.n	1c72 <memset+0x6>
		*(d_word++) = c_word;
    1ca6:	f846 4b04 	str.w	r4, [r6], #4
    1caa:	e7e9      	b.n	1c80 <memset+0x14>
		*(d_byte++) = c_byte;
    1cac:	f803 1b01 	strb.w	r1, [r3], #1
    1cb0:	e7f0      	b.n	1c94 <memset+0x28>
	...

00001cb4 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1cb4:	b570      	push	{r4, r5, r6, lr}
    1cb6:	f04f 0320 	mov.w	r3, #32
    1cba:	f3ef 8511 	mrs	r5, BASEPRI
    1cbe:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cc2:	4c14      	ldr	r4, [pc, #80]	; (1d14 <bt_hex+0x60>)
    1cc4:	4e14      	ldr	r6, [pc, #80]	; (1d18 <bt_hex+0x64>)
    1cc6:	7823      	ldrb	r3, [r4, #0]
    1cc8:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1ccc:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cce:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cd2:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1cd4:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1cd6:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1cda:	2940      	cmp	r1, #64	; 0x40
    1cdc:	bf28      	it	cs
    1cde:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1ce0:	4d0e      	ldr	r5, [pc, #56]	; (1d1c <bt_hex+0x68>)
    1ce2:	3801      	subs	r0, #1
    1ce4:	4613      	mov	r3, r2
    1ce6:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cea:	42b3      	cmp	r3, r6
    1cec:	d104      	bne.n	1cf8 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cee:	2300      	movs	r3, #0
    1cf0:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1cf4:	4610      	mov	r0, r2
    1cf6:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1cf8:	7844      	ldrb	r4, [r0, #1]
    1cfa:	0924      	lsrs	r4, r4, #4
    1cfc:	3302      	adds	r3, #2
    1cfe:	5d2c      	ldrb	r4, [r5, r4]
    1d00:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d04:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d08:	f004 040f 	and.w	r4, r4, #15
    1d0c:	5d2c      	ldrb	r4, [r5, r4]
    1d0e:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d12:	e7ea      	b.n	1cea <bt_hex+0x36>
    1d14:	20000074 	.word	0x20000074
    1d18:	20000075 	.word	0x20000075
    1d1c:	000150cc 	.word	0x000150cc

00001d20 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d20:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d22:	4a0f      	ldr	r2, [pc, #60]	; (1d60 <bt_addr_str+0x40>)
    1d24:	4c0f      	ldr	r4, [pc, #60]	; (1d64 <bt_addr_str+0x44>)
    1d26:	7813      	ldrb	r3, [r2, #0]
    1d28:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d2c:	3301      	adds	r3, #1
{
    1d2e:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d30:	f003 0301 	and.w	r3, r3, #1
    1d34:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d36:	7802      	ldrb	r2, [r0, #0]
    1d38:	7943      	ldrb	r3, [r0, #5]
    1d3a:	9204      	str	r2, [sp, #16]
    1d3c:	7842      	ldrb	r2, [r0, #1]
    1d3e:	9203      	str	r2, [sp, #12]
    1d40:	7882      	ldrb	r2, [r0, #2]
    1d42:	9202      	str	r2, [sp, #8]
    1d44:	78c2      	ldrb	r2, [r0, #3]
    1d46:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d48:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d4c:	7902      	ldrb	r2, [r0, #4]
    1d4e:	9200      	str	r2, [sp, #0]
    1d50:	2112      	movs	r1, #18
    1d52:	4a05      	ldr	r2, [pc, #20]	; (1d68 <bt_addr_str+0x48>)
    1d54:	4620      	mov	r0, r4
    1d56:	f7ff f927 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d5a:	4620      	mov	r0, r4
    1d5c:	b006      	add	sp, #24
    1d5e:	bd10      	pop	{r4, pc}
    1d60:	20000072 	.word	0x20000072
    1d64:	20000018 	.word	0x20000018
    1d68:	000150ae 	.word	0x000150ae

00001d6c <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d6e:	4a1d      	ldr	r2, [pc, #116]	; (1de4 <bt_addr_le_str+0x78>)
    1d70:	491d      	ldr	r1, [pc, #116]	; (1de8 <bt_addr_le_str+0x7c>)
    1d72:	7813      	ldrb	r3, [r2, #0]
    1d74:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d78:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d7a:	f003 0301 	and.w	r3, r3, #1
    1d7e:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d80:	7803      	ldrb	r3, [r0, #0]
{
    1d82:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d84:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d88:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d8a:	440e      	add	r6, r1
    1d8c:	ad07      	add	r5, sp, #28
    1d8e:	2b03      	cmp	r3, #3
    1d90:	d821      	bhi.n	1dd6 <bt_addr_le_str+0x6a>
    1d92:	e8df f003 	tbb	[pc, r3]
    1d96:	1a02      	.short	0x1a02
    1d98:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1d9a:	4914      	ldr	r1, [pc, #80]	; (1dec <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1d9c:	4628      	mov	r0, r5
    1d9e:	f7ff ff05 	bl	1bac <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1da2:	7862      	ldrb	r2, [r4, #1]
    1da4:	9204      	str	r2, [sp, #16]
    1da6:	78a2      	ldrb	r2, [r4, #2]
    1da8:	9203      	str	r2, [sp, #12]
    1daa:	78e2      	ldrb	r2, [r4, #3]
    1dac:	9202      	str	r2, [sp, #8]
    1dae:	7922      	ldrb	r2, [r4, #4]
    1db0:	9201      	str	r2, [sp, #4]
    1db2:	7962      	ldrb	r2, [r4, #5]
    1db4:	9200      	str	r2, [sp, #0]
    1db6:	79a3      	ldrb	r3, [r4, #6]
    1db8:	9505      	str	r5, [sp, #20]
    1dba:	4a0d      	ldr	r2, [pc, #52]	; (1df0 <bt_addr_le_str+0x84>)
    1dbc:	211b      	movs	r1, #27
    1dbe:	4630      	mov	r0, r6
    1dc0:	f7ff f8f2 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dc4:	4630      	mov	r0, r6
    1dc6:	b00a      	add	sp, #40	; 0x28
    1dc8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dca:	490a      	ldr	r1, [pc, #40]	; (1df4 <bt_addr_le_str+0x88>)
    1dcc:	e7e6      	b.n	1d9c <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1dce:	490a      	ldr	r1, [pc, #40]	; (1df8 <bt_addr_le_str+0x8c>)
    1dd0:	e7e4      	b.n	1d9c <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dd2:	490a      	ldr	r1, [pc, #40]	; (1dfc <bt_addr_le_str+0x90>)
    1dd4:	e7e2      	b.n	1d9c <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1dd6:	4a0a      	ldr	r2, [pc, #40]	; (1e00 <bt_addr_le_str+0x94>)
    1dd8:	210a      	movs	r1, #10
    1dda:	4628      	mov	r0, r5
    1ddc:	f7ff f8e4 	bl	fa8 <snprintk>
    1de0:	e7df      	b.n	1da2 <bt_addr_le_str+0x36>
    1de2:	bf00      	nop
    1de4:	20000073 	.word	0x20000073
    1de8:	2000003c 	.word	0x2000003c
    1dec:	00014b05 	.word	0x00014b05
    1df0:	00014b2e 	.word	0x00014b2e
    1df4:	00014b0c 	.word	0x00014b0c
    1df8:	00014b13 	.word	0x00014b13
    1dfc:	00014b1d 	.word	0x00014b1d
    1e00:	00014b27 	.word	0x00014b27

00001e04 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e04:	b530      	push	{r4, r5, lr}
    1e06:	b085      	sub	sp, #20
    1e08:	4604      	mov	r4, r0
    1e0a:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e0c:	4668      	mov	r0, sp
    1e0e:	2203      	movs	r2, #3
    1e10:	f7ff ff00 	bl	1c14 <memcpy>
	memset(res + 3, 0, 13);
    1e14:	220d      	movs	r2, #13
    1e16:	2100      	movs	r1, #0
    1e18:	f10d 0003 	add.w	r0, sp, #3
    1e1c:	f7ff ff26 	bl	1c6c <memset>

	err = bt_encrypt_le(irk, res, res);
    1e20:	4620      	mov	r0, r4
    1e22:	466a      	mov	r2, sp
    1e24:	4669      	mov	r1, sp
    1e26:	f006 f97b 	bl	8120 <bt_encrypt_le>
	if (err) {
    1e2a:	4604      	mov	r4, r0
    1e2c:	b920      	cbnz	r0, 1e38 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e2e:	2203      	movs	r2, #3
    1e30:	4669      	mov	r1, sp
    1e32:	4628      	mov	r0, r5
    1e34:	f7ff feee 	bl	1c14 <memcpy>

	return 0;
}
    1e38:	4620      	mov	r0, r4
    1e3a:	b005      	add	sp, #20
    1e3c:	bd30      	pop	{r4, r5, pc}

00001e3e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e3e:	b513      	push	{r0, r1, r4, lr}
    1e40:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e42:	aa01      	add	r2, sp, #4
    1e44:	3103      	adds	r1, #3
    1e46:	f7ff ffdd 	bl	1e04 <ah>
	if (err) {
    1e4a:	b948      	cbnz	r0, 1e60 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e4c:	2203      	movs	r2, #3
    1e4e:	a901      	add	r1, sp, #4
    1e50:	4620      	mov	r0, r4
    1e52:	f7ff feca 	bl	1bea <memcmp>
    1e56:	fab0 f080 	clz	r0, r0
    1e5a:	0940      	lsrs	r0, r0, #5
}
    1e5c:	b002      	add	sp, #8
    1e5e:	bd10      	pop	{r4, pc}
		return false;
    1e60:	2000      	movs	r0, #0
    1e62:	e7fb      	b.n	1e5c <bt_rpa_irk_matches+0x1e>

00001e64 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e64:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e66:	1ccd      	adds	r5, r1, #3
{
    1e68:	4606      	mov	r6, r0
    1e6a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e6c:	4628      	mov	r0, r5
    1e6e:	2103      	movs	r1, #3
    1e70:	f006 f93a 	bl	80e8 <bt_rand>
	if (err) {
    1e74:	b960      	cbnz	r0, 1e90 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e76:	7963      	ldrb	r3, [r4, #5]
    1e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e80:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e82:	4622      	mov	r2, r4
    1e84:	4629      	mov	r1, r5
    1e86:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e8c:	f7ff bfba 	b.w	1e04 <ah>
}
    1e90:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e94 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1e94:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1e96:	7802      	ldrb	r2, [r0, #0]
    1e98:	2a01      	cmp	r2, #1
{
    1e9a:	4604      	mov	r4, r0
    1e9c:	460b      	mov	r3, r1
	switch (src->type) {
    1e9e:	d017      	beq.n	1ed0 <uuid_to_uuid128+0x3c>
    1ea0:	d303      	bcc.n	1eaa <uuid_to_uuid128+0x16>
    1ea2:	2a02      	cmp	r2, #2
    1ea4:	d02c      	beq.n	1f00 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1ea6:	bcf0      	pop	{r4, r5, r6, r7}
    1ea8:	4770      	bx	lr
		*dst = uuid128_base;
    1eaa:	4a18      	ldr	r2, [pc, #96]	; (1f0c <uuid_to_uuid128+0x78>)
    1eac:	460d      	mov	r5, r1
    1eae:	f102 0710 	add.w	r7, r2, #16
    1eb2:	6810      	ldr	r0, [r2, #0]
    1eb4:	6851      	ldr	r1, [r2, #4]
    1eb6:	462e      	mov	r6, r5
    1eb8:	c603      	stmia	r6!, {r0, r1}
    1eba:	3208      	adds	r2, #8
    1ebc:	42ba      	cmp	r2, r7
    1ebe:	4635      	mov	r5, r6
    1ec0:	d1f7      	bne.n	1eb2 <uuid_to_uuid128+0x1e>
    1ec2:	7812      	ldrb	r2, [r2, #0]
    1ec4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1ec6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ec8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1eca:	0a12      	lsrs	r2, r2, #8
    1ecc:	739a      	strb	r2, [r3, #14]
    1ece:	e7ea      	b.n	1ea6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1ed0:	4a0e      	ldr	r2, [pc, #56]	; (1f0c <uuid_to_uuid128+0x78>)
    1ed2:	460d      	mov	r5, r1
    1ed4:	f102 0710 	add.w	r7, r2, #16
    1ed8:	6810      	ldr	r0, [r2, #0]
    1eda:	6851      	ldr	r1, [r2, #4]
    1edc:	462e      	mov	r6, r5
    1ede:	c603      	stmia	r6!, {r0, r1}
    1ee0:	3208      	adds	r2, #8
    1ee2:	42ba      	cmp	r2, r7
    1ee4:	4635      	mov	r5, r6
    1ee6:	d1f7      	bne.n	1ed8 <uuid_to_uuid128+0x44>
    1ee8:	7812      	ldrb	r2, [r2, #0]
    1eea:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1eec:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1eee:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ef0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1ef4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1ef6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1ef8:	0a12      	lsrs	r2, r2, #8
    1efa:	7399      	strb	r1, [r3, #14]
    1efc:	741a      	strb	r2, [r3, #16]
    1efe:	e7d2      	b.n	1ea6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1f00:	4601      	mov	r1, r0
    1f02:	2211      	movs	r2, #17
    1f04:	4618      	mov	r0, r3
}
    1f06:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1f08:	f7ff be84 	b.w	1c14 <memcpy>
    1f0c:	000150dd 	.word	0x000150dd

00001f10 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1f10:	b510      	push	{r4, lr}
    1f12:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1f14:	7801      	ldrb	r1, [r0, #0]
    1f16:	7822      	ldrb	r2, [r4, #0]
    1f18:	428a      	cmp	r2, r1
{
    1f1a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f1c:	d00e      	beq.n	1f3c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f1e:	4669      	mov	r1, sp
    1f20:	f7ff ffb8 	bl	1e94 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f24:	a905      	add	r1, sp, #20
    1f26:	4620      	mov	r0, r4
    1f28:	f7ff ffb4 	bl	1e94 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f2c:	2210      	movs	r2, #16
    1f2e:	f10d 0115 	add.w	r1, sp, #21
    1f32:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f36:	f7ff fe58 	bl	1bea <memcmp>
    1f3a:	e00a      	b.n	1f52 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f3c:	2a01      	cmp	r2, #1
    1f3e:	d00a      	beq.n	1f56 <bt_uuid_cmp+0x46>
    1f40:	d304      	bcc.n	1f4c <bt_uuid_cmp+0x3c>
    1f42:	2a02      	cmp	r2, #2
    1f44:	d00a      	beq.n	1f5c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f46:	f06f 0015 	mvn.w	r0, #21
    1f4a:	e002      	b.n	1f52 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f4c:	8840      	ldrh	r0, [r0, #2]
    1f4e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f50:	1ac0      	subs	r0, r0, r3
}
    1f52:	b00a      	add	sp, #40	; 0x28
    1f54:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f56:	6840      	ldr	r0, [r0, #4]
    1f58:	6863      	ldr	r3, [r4, #4]
    1f5a:	e7f9      	b.n	1f50 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f5c:	2210      	movs	r2, #16
    1f5e:	1c61      	adds	r1, r4, #1
    1f60:	3001      	adds	r0, #1
    1f62:	e7e8      	b.n	1f36 <bt_uuid_cmp+0x26>

00001f64 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f64:	4770      	bx	lr
	...

00001f68 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f68:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f6a:	4d0b      	ldr	r5, [pc, #44]	; (1f98 <ver_str+0x30>)
{
    1f6c:	4606      	mov	r6, r0
	const char * const str[] = {
    1f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f70:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f72:	466c      	mov	r4, sp
    1f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f7a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f7e:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f80:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f84:	bf9b      	ittet	ls
    1f86:	ab0a      	addls	r3, sp, #40	; 0x28
    1f88:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f8c:	4803      	ldrhi	r0, [pc, #12]	; (1f9c <ver_str+0x34>)
		return str[ver];
    1f8e:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f92:	b00a      	add	sp, #40	; 0x28
    1f94:	bd70      	pop	{r4, r5, r6, pc}
    1f96:	bf00      	nop
    1f98:	00014abc 	.word	0x00014abc
    1f9c:	000163dc 	.word	0x000163dc

00001fa0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fa0:	2207      	movs	r2, #7
    1fa2:	f7ff be37 	b.w	1c14 <memcpy>

00001fa6 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1fa6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1fa8:	f3bf 8f5b 	dmb	ish
    1fac:	e850 3f00 	ldrex	r3, [r0]
    1fb0:	ea43 0201 	orr.w	r2, r3, r1
    1fb4:	e840 2e00 	strex	lr, r2, [r0]
    1fb8:	f1be 0f00 	cmp.w	lr, #0
    1fbc:	d1f6      	bne.n	1fac <atomic_or+0x6>
    1fbe:	f3bf 8f5b 	dmb	ish
    1fc2:	4618      	mov	r0, r3
    1fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001fc8 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fc8:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fca:	f3bf 8f5b 	dmb	ish
    1fce:	e850 3f00 	ldrex	r3, [r0]
    1fd2:	ea03 0201 	and.w	r2, r3, r1
    1fd6:	e840 2e00 	strex	lr, r2, [r0]
    1fda:	f1be 0f00 	cmp.w	lr, #0
    1fde:	d1f6      	bne.n	1fce <atomic_and+0x6>
    1fe0:	f3bf 8f5b 	dmb	ish
    1fe4:	4618      	mov	r0, r3
    1fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001fec <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1fec:	78c3      	ldrb	r3, [r0, #3]
    1fee:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ff0:	f241 3288 	movw	r2, #5000	; 0x1388
    1ff4:	f100 0170 	add.w	r1, r0, #112	; 0x70
    1ff8:	bf08      	it	eq
    1ffa:	2200      	moveq	r2, #0
    1ffc:	4801      	ldr	r0, [pc, #4]	; (2004 <update_conn_param+0x18>)
    1ffe:	f012 bb6f 	b.w	146e0 <k_delayed_work_submit_to_queue>
    2002:	bf00      	nop
    2004:	20001990 	.word	0x20001990

00002008 <hci_cmd_done>:
{
    2008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    200c:	b087      	sub	sp, #28
    200e:	4615      	mov	r5, r2
    2010:	4688      	mov	r8, r1
    2012:	4607      	mov	r7, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2014:	f011 fffa 	bl	1400c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2018:	4e2c      	ldr	r6, [pc, #176]	; (20cc <hci_cmd_done+0xc4>)
    201a:	9001      	str	r0, [sp, #4]
    201c:	4b2c      	ldr	r3, [pc, #176]	; (20d0 <hci_cmd_done+0xc8>)
    201e:	4a2d      	ldr	r2, [pc, #180]	; (20d4 <hci_cmd_done+0xcc>)
    2020:	492d      	ldr	r1, [pc, #180]	; (20d8 <hci_cmd_done+0xd0>)
    2022:	9605      	str	r6, [sp, #20]
    2024:	9504      	str	r5, [sp, #16]
    2026:	f8cd 800c 	str.w	r8, [sp, #12]
    202a:	9702      	str	r7, [sp, #8]
    202c:	9600      	str	r6, [sp, #0]
    202e:	482b      	ldr	r0, [pc, #172]	; (20dc <hci_cmd_done+0xd4>)
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2030:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 20f0 <hci_cmd_done+0xe8>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    2034:	f7fe ffaa 	bl	f8c <printk>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2038:	79a8      	ldrb	r0, [r5, #6]
    203a:	f010 fdf9 	bl	12c30 <net_buf_pool_get>
    203e:	4581      	cmp	r9, r0
    2040:	d013      	beq.n	206a <hci_cmd_done+0x62>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2042:	79ac      	ldrb	r4, [r5, #6]
    2044:	4620      	mov	r0, r4
    2046:	f010 fdf3 	bl	12c30 <net_buf_pool_get>
    204a:	9605      	str	r6, [sp, #20]
    204c:	9003      	str	r0, [sp, #12]
    204e:	f8cd 9010 	str.w	r9, [sp, #16]
    2052:	9402      	str	r4, [sp, #8]
    2054:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2058:	4b1d      	ldr	r3, [pc, #116]	; (20d0 <hci_cmd_done+0xc8>)
    205a:	4a21      	ldr	r2, [pc, #132]	; (20e0 <hci_cmd_done+0xd8>)
    205c:	491e      	ldr	r1, [pc, #120]	; (20d8 <hci_cmd_done+0xd0>)
    205e:	4821      	ldr	r0, [pc, #132]	; (20e4 <hci_cmd_done+0xdc>)
    2060:	f7fe ff94 	bl	f8c <printk>
}
    2064:	b007      	add	sp, #28
    2066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    206a:	4628      	mov	r0, r5
    206c:	f010 fde6 	bl	12c3c <net_buf_id>
    2070:	4c1d      	ldr	r4, [pc, #116]	; (20e8 <hci_cmd_done+0xe0>)
    2072:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2076:	8843      	ldrh	r3, [r0, #2]
    2078:	42bb      	cmp	r3, r7
    207a:	d00f      	beq.n	209c <hci_cmd_done+0x94>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    207c:	4628      	mov	r0, r5
    207e:	f010 fddd 	bl	12c3c <net_buf_id>
    2082:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2086:	9603      	str	r6, [sp, #12]
    2088:	8843      	ldrh	r3, [r0, #2]
    208a:	9302      	str	r3, [sp, #8]
    208c:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2090:	4b0f      	ldr	r3, [pc, #60]	; (20d0 <hci_cmd_done+0xc8>)
    2092:	4a13      	ldr	r2, [pc, #76]	; (20e0 <hci_cmd_done+0xd8>)
    2094:	4910      	ldr	r1, [pc, #64]	; (20d8 <hci_cmd_done+0xd0>)
    2096:	4815      	ldr	r0, [pc, #84]	; (20ec <hci_cmd_done+0xe4>)
    2098:	f7fe ff78 	bl	f8c <printk>
	if (cmd(buf)->sync) {
    209c:	4628      	mov	r0, r5
    209e:	f010 fdcd 	bl	12c3c <net_buf_id>
    20a2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20a6:	6843      	ldr	r3, [r0, #4]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d0db      	beq.n	2064 <hci_cmd_done+0x5c>
		cmd(buf)->status = status;
    20ac:	4628      	mov	r0, r5
    20ae:	f010 fdc5 	bl	12c3c <net_buf_id>
    20b2:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20b6:	4628      	mov	r0, r5
    20b8:	f010 fdc0 	bl	12c3c <net_buf_id>
    20bc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20c0:	6840      	ldr	r0, [r0, #4]
}
    20c2:	b007      	add	sp, #28
    20c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20c8:	f011 bfaf 	b.w	1402a <_impl_k_sem_give>
    20cc:	00014b99 	.word	0x00014b99
    20d0:	0001523e 	.word	0x0001523e
    20d4:	00015f9d 	.word	0x00015f9d
    20d8:	00015fa4 	.word	0x00015fa4
    20dc:	00015fa7 	.word	0x00015fa7
    20e0:	00015fdf 	.word	0x00015fdf
    20e4:	00015fe6 	.word	0x00015fe6
    20e8:	2000027c 	.word	0x2000027c
    20ec:	0001602b 	.word	0x0001602b
    20f0:	20003f8c 	.word	0x20003f8c

000020f4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20f4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20f6:	f3bf 8f5b 	dmb	ish
    20fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20fe:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2102:	f001 011f 	and.w	r1, r1, #31
    2106:	4108      	asrs	r0, r1
}
    2108:	f000 0001 	and.w	r0, r0, #1
    210c:	4770      	bx	lr
	...

00002110 <bt_hci_cmd_create>:
{
    2110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2114:	b086      	sub	sp, #24
    2116:	4606      	mov	r6, r0
    2118:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    211a:	f011 ff77 	bl	1400c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    211e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 21c0 <bt_hci_cmd_create+0xb0>
    2122:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 21c4 <bt_hci_cmd_create+0xb4>
    2126:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 21c8 <bt_hci_cmd_create+0xb8>
    212a:	4d20      	ldr	r5, [pc, #128]	; (21ac <bt_hci_cmd_create+0x9c>)
    212c:	9504      	str	r5, [sp, #16]
    212e:	4653      	mov	r3, sl
    2130:	464a      	mov	r2, r9
    2132:	9001      	str	r0, [sp, #4]
    2134:	9500      	str	r5, [sp, #0]
    2136:	4641      	mov	r1, r8
    2138:	9703      	str	r7, [sp, #12]
    213a:	9602      	str	r6, [sp, #8]
    213c:	481c      	ldr	r0, [pc, #112]	; (21b0 <bt_hci_cmd_create+0xa0>)
    213e:	f7fe ff25 	bl	f8c <printk>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2146:	481b      	ldr	r0, [pc, #108]	; (21b4 <bt_hci_cmd_create+0xa4>)
    2148:	f010 fe06 	bl	12d58 <net_buf_alloc_fixed>
    214c:	4604      	mov	r4, r0
    214e:	f011 ff5d 	bl	1400c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    2152:	464a      	mov	r2, r9
    2154:	4653      	mov	r3, sl
    2156:	9503      	str	r5, [sp, #12]
    2158:	9001      	str	r0, [sp, #4]
    215a:	9500      	str	r5, [sp, #0]
    215c:	4641      	mov	r1, r8
    215e:	9402      	str	r4, [sp, #8]
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2160:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    2164:	4814      	ldr	r0, [pc, #80]	; (21b8 <bt_hci_cmd_create+0xa8>)
	cmd(buf)->opcode = opcode;
    2166:	4d15      	ldr	r5, [pc, #84]	; (21bc <bt_hci_cmd_create+0xac>)
	BT_DBG("buf %p", buf);
    2168:	f7fe ff10 	bl	f8c <printk>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    216c:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2170:	2100      	movs	r1, #0
    2172:	4640      	mov	r0, r8
    2174:	f010 fe0f 	bl	12d96 <net_buf_simple_reserve>
    2178:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    217c:	4620      	mov	r0, r4
    217e:	f010 fd5d 	bl	12c3c <net_buf_id>
    2182:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2186:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2188:	4620      	mov	r0, r4
    218a:	f010 fd57 	bl	12c3c <net_buf_id>
    218e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2192:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2194:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2198:	4640      	mov	r0, r8
    219a:	f010 fe3f 	bl	12e1c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    219e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    21a0:	7087      	strb	r7, [r0, #2]
}
    21a2:	4620      	mov	r0, r4
    21a4:	b006      	add	sp, #24
    21a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21aa:	bf00      	nop
    21ac:	00014b99 	.word	0x00014b99
    21b0:	00015558 	.word	0x00015558
    21b4:	20003f8c 	.word	0x20003f8c
    21b8:	00015588 	.word	0x00015588
    21bc:	2000027c 	.word	0x2000027c
    21c0:	000150ee 	.word	0x000150ee
    21c4:	00015f9d 	.word	0x00015f9d
    21c8:	00015fa4 	.word	0x00015fa4

000021cc <bt_hci_cmd_send_sync>:
{
    21cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21d0:	4681      	mov	r9, r0
    21d2:	b08d      	sub	sp, #52	; 0x34
    21d4:	4615      	mov	r5, r2
	if (!buf) {
    21d6:	460c      	mov	r4, r1
    21d8:	b921      	cbnz	r1, 21e4 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    21da:	f7ff ff99 	bl	2110 <bt_hci_cmd_create>
		if (!buf) {
    21de:	4604      	mov	r4, r0
    21e0:	2800      	cmp	r0, #0
    21e2:	d053      	beq.n	228c <bt_hci_cmd_send_sync+0xc0>
    21e4:	f011 ff12 	bl	1400c <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    21e8:	4e2a      	ldr	r6, [pc, #168]	; (2294 <bt_hci_cmd_send_sync+0xc8>)
    21ea:	9605      	str	r6, [sp, #20]
    21ec:	89a3      	ldrh	r3, [r4, #12]
    21ee:	9304      	str	r3, [sp, #16]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    21f0:	f10d 0818 	add.w	r8, sp, #24
    21f4:	4b28      	ldr	r3, [pc, #160]	; (2298 <bt_hci_cmd_send_sync+0xcc>)
    21f6:	9001      	str	r0, [sp, #4]
    21f8:	4a28      	ldr	r2, [pc, #160]	; (229c <bt_hci_cmd_send_sync+0xd0>)
    21fa:	4929      	ldr	r1, [pc, #164]	; (22a0 <bt_hci_cmd_send_sync+0xd4>)
    21fc:	f8cd 900c 	str.w	r9, [sp, #12]
    2200:	9402      	str	r4, [sp, #8]
    2202:	9600      	str	r6, [sp, #0]
    2204:	4827      	ldr	r0, [pc, #156]	; (22a4 <bt_hci_cmd_send_sync+0xd8>)
	cmd(buf)->sync = &sync_sem;
    2206:	4f28      	ldr	r7, [pc, #160]	; (22a8 <bt_hci_cmd_send_sync+0xdc>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2208:	f7fe fec0 	bl	f8c <printk>
    220c:	2201      	movs	r2, #1
    220e:	2100      	movs	r1, #0
    2210:	4640      	mov	r0, r8
    2212:	f011 ff01 	bl	14018 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2216:	4620      	mov	r0, r4
    2218:	f010 fd10 	bl	12c3c <net_buf_id>
    221c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    2220:	f8c0 8004 	str.w	r8, [r0, #4]
	net_buf_ref(buf);
    2224:	4620      	mov	r0, r4
    2226:	f010 fdf5 	bl	12e14 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    222a:	4621      	mov	r1, r4
    222c:	481f      	ldr	r0, [pc, #124]	; (22ac <bt_hci_cmd_send_sync+0xe0>)
    222e:	f010 fdb6 	bl	12d9e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2232:	f242 7110 	movw	r1, #10000	; 0x2710
    2236:	4640      	mov	r0, r8
    2238:	f011 ff1f 	bl	1407a <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    223c:	f011 fee6 	bl	1400c <_impl_k_current_get>
    2240:	4680      	mov	r8, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    2242:	4620      	mov	r0, r4
    2244:	f010 fcfa 	bl	12c3c <net_buf_id>
    2248:	9604      	str	r6, [sp, #16]
    224a:	f817 3030 	ldrb.w	r3, [r7, r0, lsl #3]
    224e:	9303      	str	r3, [sp, #12]
    2250:	4a12      	ldr	r2, [pc, #72]	; (229c <bt_hci_cmd_send_sync+0xd0>)
    2252:	4b11      	ldr	r3, [pc, #68]	; (2298 <bt_hci_cmd_send_sync+0xcc>)
    2254:	4912      	ldr	r1, [pc, #72]	; (22a0 <bt_hci_cmd_send_sync+0xd4>)
    2256:	4816      	ldr	r0, [pc, #88]	; (22b0 <bt_hci_cmd_send_sync+0xe4>)
    2258:	e88d 0340 	stmia.w	sp, {r6, r8, r9}
    225c:	f7fe fe96 	bl	f8c <printk>
	if (cmd(buf)->status) {
    2260:	4620      	mov	r0, r4
    2262:	f010 fceb 	bl	12c3c <net_buf_id>
    2266:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    226a:	b138      	cbz	r0, 227c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    226c:	4620      	mov	r0, r4
    226e:	f010 fda3 	bl	12db8 <net_buf_unref>
		err = -EIO;
    2272:	f06f 0004 	mvn.w	r0, #4
}
    2276:	b00d      	add	sp, #52	; 0x34
    2278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (rsp) {
    227c:	b10d      	cbz	r5, 2282 <bt_hci_cmd_send_sync+0xb6>
			*rsp = buf;
    227e:	602c      	str	r4, [r5, #0]
    2280:	e7f9      	b.n	2276 <bt_hci_cmd_send_sync+0xaa>
			net_buf_unref(buf);
    2282:	4620      	mov	r0, r4
    2284:	f010 fd98 	bl	12db8 <net_buf_unref>
		err = 0;
    2288:	4628      	mov	r0, r5
    228a:	e7f4      	b.n	2276 <bt_hci_cmd_send_sync+0xaa>
			return -ENOBUFS;
    228c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2290:	e7f1      	b.n	2276 <bt_hci_cmd_send_sync+0xaa>
    2292:	bf00      	nop
    2294:	00014b99 	.word	0x00014b99
    2298:	00015110 	.word	0x00015110
    229c:	00015f9d 	.word	0x00015f9d
    22a0:	00015fa4 	.word	0x00015fa4
    22a4:	00015600 	.word	0x00015600
    22a8:	2000027c 	.word	0x2000027c
    22ac:	20003b2c 	.word	0x20003b2c
    22b0:	00015631 	.word	0x00015631

000022b4 <set_le_scan_enable>:
{
    22b4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22b6:	2102      	movs	r1, #2
{
    22b8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22ba:	f242 000c 	movw	r0, #8204	; 0x200c
    22be:	f7ff ff27 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    22c2:	4604      	mov	r4, r0
    22c4:	b330      	cbz	r0, 2314 <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    22c6:	2102      	movs	r1, #2
    22c8:	3008      	adds	r0, #8
    22ca:	f010 fda7 	bl	12e1c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22ce:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    22d0:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22d2:	d116      	bne.n	2302 <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    22d4:	210b      	movs	r1, #11
    22d6:	4811      	ldr	r0, [pc, #68]	; (231c <set_le_scan_enable+0x68>)
    22d8:	f7ff ff0c 	bl	20f4 <atomic_test_bit>
    22dc:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    22de:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    22e0:	4621      	mov	r1, r4
    22e2:	2200      	movs	r2, #0
    22e4:	f242 000c 	movw	r0, #8204	; 0x200c
    22e8:	f7ff ff70 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    22ec:	4604      	mov	r4, r0
    22ee:	b930      	cbnz	r0, 22fe <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22f0:	2d01      	cmp	r5, #1
    22f2:	d109      	bne.n	2308 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    22f8:	4808      	ldr	r0, [pc, #32]	; (231c <set_le_scan_enable+0x68>)
    22fa:	f7ff fe54 	bl	1fa6 <atomic_or>
}
    22fe:	4620      	mov	r0, r4
    2300:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2302:	2300      	movs	r3, #0
    2304:	7043      	strb	r3, [r0, #1]
    2306:	e7ea      	b.n	22de <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2308:	f46f 7180 	mvn.w	r1, #256	; 0x100
    230c:	4803      	ldr	r0, [pc, #12]	; (231c <set_le_scan_enable+0x68>)
    230e:	f7ff fe5b 	bl	1fc8 <atomic_and>
    2312:	e7f4      	b.n	22fe <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    2314:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2318:	e7f1      	b.n	22fe <set_le_scan_enable+0x4a>
    231a:	bf00      	nop
    231c:	20003ad8 	.word	0x20003ad8

00002320 <set_random_address>:
{
    2320:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2322:	4605      	mov	r5, r0
    2324:	f011 fe72 	bl	1400c <_impl_k_current_get>
    2328:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    232a:	4628      	mov	r0, r5
    232c:	f7ff fcf8 	bl	1d20 <bt_addr_str>
    2330:	4b1a      	ldr	r3, [pc, #104]	; (239c <set_random_address+0x7c>)
	return memcmp(a, b, sizeof(*a));
    2332:	4e1b      	ldr	r6, [pc, #108]	; (23a0 <set_random_address+0x80>)
    2334:	9303      	str	r3, [sp, #12]
    2336:	e88d 0018 	stmia.w	sp, {r3, r4}
    233a:	9002      	str	r0, [sp, #8]
    233c:	4b19      	ldr	r3, [pc, #100]	; (23a4 <set_random_address+0x84>)
    233e:	4a1a      	ldr	r2, [pc, #104]	; (23a8 <set_random_address+0x88>)
    2340:	491a      	ldr	r1, [pc, #104]	; (23ac <set_random_address+0x8c>)
    2342:	481b      	ldr	r0, [pc, #108]	; (23b0 <set_random_address+0x90>)
    2344:	f7fe fe22 	bl	f8c <printk>
    2348:	2206      	movs	r2, #6
    234a:	f106 0108 	add.w	r1, r6, #8
    234e:	4628      	mov	r0, r5
    2350:	f7ff fc4b 	bl	1bea <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2354:	4604      	mov	r4, r0
    2356:	b1d8      	cbz	r0, 2390 <set_random_address+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2358:	2106      	movs	r1, #6
    235a:	f242 0005 	movw	r0, #8197	; 0x2005
    235e:	f7ff fed7 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    2362:	4604      	mov	r4, r0
    2364:	b1b8      	cbz	r0, 2396 <set_random_address+0x76>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2366:	2206      	movs	r2, #6
    2368:	4629      	mov	r1, r5
    236a:	3008      	adds	r0, #8
    236c:	f010 fd5c 	bl	12e28 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2370:	4621      	mov	r1, r4
    2372:	2200      	movs	r2, #0
    2374:	f242 0005 	movw	r0, #8197	; 0x2005
    2378:	f7ff ff28 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    237c:	4604      	mov	r4, r0
    237e:	b938      	cbnz	r0, 2390 <set_random_address+0x70>
	memcpy(dst, src, sizeof(*dst));
    2380:	2206      	movs	r2, #6
    2382:	4629      	mov	r1, r5
    2384:	f106 0008 	add.w	r0, r6, #8
    2388:	f7ff fc44 	bl	1c14 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    238c:	2301      	movs	r3, #1
    238e:	71f3      	strb	r3, [r6, #7]
}
    2390:	4620      	mov	r0, r4
    2392:	b004      	add	sp, #16
    2394:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2396:	f06f 0436 	mvn.w	r4, #54	; 0x36
    239a:	e7f9      	b.n	2390 <set_random_address+0x70>
    239c:	00014b99 	.word	0x00014b99
    23a0:	20003a68 	.word	0x20003a68
    23a4:	00015125 	.word	0x00015125
    23a8:	00015f9d 	.word	0x00015f9d
    23ac:	00015fa4 	.word	0x00015fa4
    23b0:	000162e4 	.word	0x000162e4

000023b4 <le_set_private_addr>:
{
    23b4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    23b6:	2106      	movs	r1, #6
    23b8:	4668      	mov	r0, sp
    23ba:	f005 fe95 	bl	80e8 <bt_rand>
	if (err) {
    23be:	b940      	cbnz	r0, 23d2 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    23c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    23c4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    23c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    23ca:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    23ce:	f7ff ffa7 	bl	2320 <set_random_address>
}
    23d2:	b003      	add	sp, #12
    23d4:	f85d fb04 	ldr.w	pc, [sp], #4

000023d8 <set_advertise_enable>:
{
    23d8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    23da:	2101      	movs	r1, #1
{
    23dc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    23de:	f242 000a 	movw	r0, #8202	; 0x200a
    23e2:	f7ff fe95 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    23e6:	4604      	mov	r4, r0
    23e8:	b1d8      	cbz	r0, 2422 <set_advertise_enable+0x4a>
    23ea:	3008      	adds	r0, #8
	if (enable) {
    23ec:	b18d      	cbz	r5, 2412 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    23ee:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    23f0:	f010 fd23 	bl	12e3a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    23f4:	4621      	mov	r1, r4
    23f6:	2200      	movs	r2, #0
    23f8:	f242 000a 	movw	r0, #8202	; 0x200a
    23fc:	f7ff fee6 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2400:	4604      	mov	r4, r0
    2402:	b920      	cbnz	r0, 240e <set_advertise_enable+0x36>
	if (enable) {
    2404:	b13d      	cbz	r5, 2416 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2406:	2140      	movs	r1, #64	; 0x40
    2408:	4807      	ldr	r0, [pc, #28]	; (2428 <set_advertise_enable+0x50>)
    240a:	f7ff fdcc 	bl	1fa6 <atomic_or>
}
    240e:	4620      	mov	r0, r4
    2410:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2412:	4629      	mov	r1, r5
    2414:	e7ec      	b.n	23f0 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2416:	f06f 0140 	mvn.w	r1, #64	; 0x40
    241a:	4803      	ldr	r0, [pc, #12]	; (2428 <set_advertise_enable+0x50>)
    241c:	f7ff fdd4 	bl	1fc8 <atomic_and>
    2420:	e7f5      	b.n	240e <set_advertise_enable+0x36>
		return -ENOBUFS;
    2422:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2426:	e7f2      	b.n	240e <set_advertise_enable+0x36>
    2428:	20003ad8 	.word	0x20003ad8

0000242c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    242c:	8802      	ldrh	r2, [r0, #0]
    242e:	8843      	ldrh	r3, [r0, #2]
    2430:	429a      	cmp	r2, r3
{
    2432:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2434:	d818      	bhi.n	2468 <bt_le_conn_params_valid+0x3c>
    2436:	2a05      	cmp	r2, #5
    2438:	d916      	bls.n	2468 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    243a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    243e:	d813      	bhi.n	2468 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2440:	8884      	ldrh	r4, [r0, #4]
    2442:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2446:	d20f      	bcs.n	2468 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2448:	88c1      	ldrh	r1, [r0, #6]
    244a:	f1a1 020a 	sub.w	r2, r1, #10
    244e:	b292      	uxth	r2, r2
    2450:	f640 4076 	movw	r0, #3190	; 0xc76
    2454:	4282      	cmp	r2, r0
    2456:	d807      	bhi.n	2468 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2458:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    245c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2460:	bfb4      	ite	lt
    2462:	2001      	movlt	r0, #1
    2464:	2000      	movge	r0, #0
    2466:	bd10      	pop	{r4, pc}
		return false;
    2468:	2000      	movs	r0, #0
}
    246a:	bd10      	pop	{r4, pc}

0000246c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    246c:	2301      	movs	r3, #1
{
    246e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2470:	2106      	movs	r1, #6
{
    2472:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2474:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2478:	f005 fe36 	bl	80e8 <bt_rand>
	if (err) {
    247c:	b918      	cbnz	r0, 2486 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    247e:	79a3      	ldrb	r3, [r4, #6]
    2480:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2484:	71a3      	strb	r3, [r4, #6]
}
    2486:	bd10      	pop	{r4, pc}

00002488 <bt_set_static_addr>:
{
    2488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    248a:	4c11      	ldr	r4, [pc, #68]	; (24d0 <bt_set_static_addr+0x48>)
    248c:	7823      	ldrb	r3, [r4, #0]
    248e:	2b01      	cmp	r3, #1
    2490:	d104      	bne.n	249c <bt_set_static_addr+0x14>
    2492:	79a3      	ldrb	r3, [r4, #6]
    2494:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2498:	2bc0      	cmp	r3, #192	; 0xc0
    249a:	d00d      	beq.n	24b8 <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    249c:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <bt_set_static_addr+0x4c>)
    249e:	9301      	str	r3, [sp, #4]
    24a0:	9300      	str	r3, [sp, #0]
    24a2:	4a0d      	ldr	r2, [pc, #52]	; (24d8 <bt_set_static_addr+0x50>)
    24a4:	4b0d      	ldr	r3, [pc, #52]	; (24dc <bt_set_static_addr+0x54>)
    24a6:	490e      	ldr	r1, [pc, #56]	; (24e0 <bt_set_static_addr+0x58>)
    24a8:	480e      	ldr	r0, [pc, #56]	; (24e4 <bt_set_static_addr+0x5c>)
    24aa:	f7fe fd6f 	bl	f8c <printk>
    24ae:	f06f 0515 	mvn.w	r5, #21
}
    24b2:	4628      	mov	r0, r5
    24b4:	b003      	add	sp, #12
    24b6:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    24b8:	1c60      	adds	r0, r4, #1
    24ba:	f7ff ff31 	bl	2320 <set_random_address>
	if (err) {
    24be:	4605      	mov	r5, r0
    24c0:	2800      	cmp	r0, #0
    24c2:	d1f6      	bne.n	24b2 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    24c4:	2104      	movs	r1, #4
    24c6:	f104 0070 	add.w	r0, r4, #112	; 0x70
    24ca:	f7ff fd6c 	bl	1fa6 <atomic_or>
	return 0;
    24ce:	e7f0      	b.n	24b2 <bt_set_static_addr+0x2a>
    24d0:	20003a68 	.word	0x20003a68
    24d4:	00014b99 	.word	0x00014b99
    24d8:	00015f55 	.word	0x00015f55
    24dc:	0001539c 	.word	0x0001539c
    24e0:	00015fa4 	.word	0x00015fa4
    24e4:	00015f5c 	.word	0x00015f5c

000024e8 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    24e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    24ec:	4d1d      	ldr	r5, [pc, #116]	; (2564 <bt_dev_show_info+0x7c>)
    24ee:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2580 <bt_dev_show_info+0x98>
    24f2:	4f1d      	ldr	r7, [pc, #116]	; (2568 <bt_dev_show_info+0x80>)
    24f4:	4e1d      	ldr	r6, [pc, #116]	; (256c <bt_dev_show_info+0x84>)
    24f6:	4c1e      	ldr	r4, [pc, #120]	; (2570 <bt_dev_show_info+0x88>)
{
    24f8:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    24fa:	4628      	mov	r0, r5
    24fc:	f7ff fc36 	bl	1d6c <bt_addr_le_str>
    2500:	4643      	mov	r3, r8
    2502:	463a      	mov	r2, r7
    2504:	4631      	mov	r1, r6
    2506:	9001      	str	r0, [sp, #4]
    2508:	9402      	str	r4, [sp, #8]
    250a:	9400      	str	r4, [sp, #0]
    250c:	4819      	ldr	r0, [pc, #100]	; (2574 <bt_dev_show_info+0x8c>)
    250e:	f7fe fd3d 	bl	f8c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2512:	f895 900e 	ldrb.w	r9, [r5, #14]
    2516:	4648      	mov	r0, r9
    2518:	f7ff fd26 	bl	1f68 <ver_str>
    251c:	8aab      	ldrh	r3, [r5, #20]
    251e:	9304      	str	r3, [sp, #16]
    2520:	8a2b      	ldrh	r3, [r5, #16]
    2522:	9303      	str	r3, [sp, #12]
    2524:	463a      	mov	r2, r7
    2526:	4643      	mov	r3, r8
    2528:	4631      	mov	r1, r6
    252a:	f8cd 9008 	str.w	r9, [sp, #8]
    252e:	9001      	str	r0, [sp, #4]
    2530:	9405      	str	r4, [sp, #20]
    2532:	9400      	str	r4, [sp, #0]
    2534:	4810      	ldr	r0, [pc, #64]	; (2578 <bt_dev_show_info+0x90>)
    2536:	f7fe fd29 	bl	f8c <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    253a:	f895 900f 	ldrb.w	r9, [r5, #15]
    253e:	4648      	mov	r0, r9
    2540:	f7ff fd12 	bl	1f68 <ver_str>
    2544:	8a6b      	ldrh	r3, [r5, #18]
    2546:	9303      	str	r3, [sp, #12]
    2548:	9001      	str	r0, [sp, #4]
    254a:	9404      	str	r4, [sp, #16]
    254c:	f8cd 9008 	str.w	r9, [sp, #8]
    2550:	9400      	str	r4, [sp, #0]
    2552:	4643      	mov	r3, r8
    2554:	463a      	mov	r2, r7
    2556:	4631      	mov	r1, r6
    2558:	4808      	ldr	r0, [pc, #32]	; (257c <bt_dev_show_info+0x94>)
    255a:	f7fe fd17 	bl	f8c <printk>
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    255e:	b007      	add	sp, #28
    2560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2564:	20003a68 	.word	0x20003a68
    2568:	0001545a 	.word	0x0001545a
    256c:	00015fa4 	.word	0x00015fa4
    2570:	00014b99 	.word	0x00014b99
    2574:	00015461 	.word	0x00015461
    2578:	0001547e 	.word	0x0001547e
    257c:	000154cc 	.word	0x000154cc
    2580:	000153bd 	.word	0x000153bd

00002584 <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2584:	b510      	push	{r4, lr}
    2586:	4604      	mov	r4, r0
    2588:	b086      	sub	sp, #24
    258a:	f011 fd3f 	bl	1400c <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    258e:	7d22      	ldrb	r2, [r4, #20]
    2590:	4b0b      	ldr	r3, [pc, #44]	; (25c0 <bt_send+0x3c>)
    2592:	9204      	str	r2, [sp, #16]
    2594:	89a2      	ldrh	r2, [r4, #12]
    2596:	9305      	str	r3, [sp, #20]
    2598:	9203      	str	r2, [sp, #12]
    259a:	9001      	str	r0, [sp, #4]
    259c:	9300      	str	r3, [sp, #0]
    259e:	9402      	str	r4, [sp, #8]
    25a0:	4b08      	ldr	r3, [pc, #32]	; (25c4 <bt_send+0x40>)
    25a2:	4a09      	ldr	r2, [pc, #36]	; (25c8 <bt_send+0x44>)
    25a4:	4909      	ldr	r1, [pc, #36]	; (25cc <bt_send+0x48>)
    25a6:	480a      	ldr	r0, [pc, #40]	; (25d0 <bt_send+0x4c>)
    25a8:	f7fe fcf0 	bl	f8c <printk>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    25ac:	4b09      	ldr	r3, [pc, #36]	; (25d4 <bt_send+0x50>)
    25ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    25b2:	691b      	ldr	r3, [r3, #16]
    25b4:	4620      	mov	r0, r4
}
    25b6:	b006      	add	sp, #24
    25b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    25bc:	4718      	bx	r3
    25be:	bf00      	nop
    25c0:	00014b99 	.word	0x00014b99
    25c4:	000153e3 	.word	0x000153e3
    25c8:	00015f9d 	.word	0x00015f9d
    25cc:	00015fa4 	.word	0x00015fa4
    25d0:	00015f2a 	.word	0x00015f2a
    25d4:	20003a68 	.word	0x20003a68

000025d8 <bt_hci_cmd_send>:
{
    25d8:	b570      	push	{r4, r5, r6, lr}
    25da:	4605      	mov	r5, r0
    25dc:	b086      	sub	sp, #24
	if (!buf) {
    25de:	460c      	mov	r4, r1
    25e0:	b921      	cbnz	r1, 25ec <bt_hci_cmd_send+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    25e2:	f7ff fd95 	bl	2110 <bt_hci_cmd_create>
		if (!buf) {
    25e6:	4604      	mov	r4, r0
    25e8:	2800      	cmp	r0, #0
    25ea:	d02c      	beq.n	2646 <bt_hci_cmd_send+0x6e>
    25ec:	f011 fd0e 	bl	1400c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);
    25f0:	4e16      	ldr	r6, [pc, #88]	; (264c <bt_hci_cmd_send+0x74>)
    25f2:	9604      	str	r6, [sp, #16]
    25f4:	89a3      	ldrh	r3, [r4, #12]
    25f6:	9303      	str	r3, [sp, #12]
    25f8:	9001      	str	r0, [sp, #4]
    25fa:	4b15      	ldr	r3, [pc, #84]	; (2650 <bt_hci_cmd_send+0x78>)
    25fc:	9502      	str	r5, [sp, #8]
    25fe:	9600      	str	r6, [sp, #0]
    2600:	4a14      	ldr	r2, [pc, #80]	; (2654 <bt_hci_cmd_send+0x7c>)
    2602:	4915      	ldr	r1, [pc, #84]	; (2658 <bt_hci_cmd_send+0x80>)
    2604:	4815      	ldr	r0, [pc, #84]	; (265c <bt_hci_cmd_send+0x84>)
    2606:	f7fe fcc1 	bl	f8c <printk>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    260a:	f640 4335 	movw	r3, #3125	; 0xc35
    260e:	429d      	cmp	r5, r3
    2610:	d113      	bne.n	263a <bt_hci_cmd_send+0x62>
		err = bt_send(buf);
    2612:	4620      	mov	r0, r4
    2614:	f7ff ffb6 	bl	2584 <bt_send>
		if (err) {
    2618:	4605      	mov	r5, r0
    261a:	b158      	cbz	r0, 2634 <bt_hci_cmd_send+0x5c>
			BT_ERR("Unable to send to driver (err %d)", err);
    261c:	9001      	str	r0, [sp, #4]
    261e:	9602      	str	r6, [sp, #8]
    2620:	9600      	str	r6, [sp, #0]
    2622:	4b0b      	ldr	r3, [pc, #44]	; (2650 <bt_hci_cmd_send+0x78>)
    2624:	4a0e      	ldr	r2, [pc, #56]	; (2660 <bt_hci_cmd_send+0x88>)
    2626:	490c      	ldr	r1, [pc, #48]	; (2658 <bt_hci_cmd_send+0x80>)
    2628:	480e      	ldr	r0, [pc, #56]	; (2664 <bt_hci_cmd_send+0x8c>)
    262a:	f7fe fcaf 	bl	f8c <printk>
			net_buf_unref(buf);
    262e:	4620      	mov	r0, r4
    2630:	f010 fbc2 	bl	12db8 <net_buf_unref>
}
    2634:	4628      	mov	r0, r5
    2636:	b006      	add	sp, #24
    2638:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    263a:	4621      	mov	r1, r4
    263c:	480a      	ldr	r0, [pc, #40]	; (2668 <bt_hci_cmd_send+0x90>)
    263e:	f010 fbae 	bl	12d9e <net_buf_put>
	return 0;
    2642:	2500      	movs	r5, #0
    2644:	e7f6      	b.n	2634 <bt_hci_cmd_send+0x5c>
			return -ENOBUFS;
    2646:	f06f 0536 	mvn.w	r5, #54	; 0x36
    264a:	e7f3      	b.n	2634 <bt_hci_cmd_send+0x5c>
    264c:	00014b99 	.word	0x00014b99
    2650:	00015100 	.word	0x00015100
    2654:	00015f9d 	.word	0x00015f9d
    2658:	00015fa4 	.word	0x00015fa4
    265c:	000155a4 	.word	0x000155a4
    2660:	00015f55 	.word	0x00015f55
    2664:	000155ce 	.word	0x000155ce
    2668:	20003b2c 	.word	0x20003b2c

0000266c <start_le_scan>:
{
    266c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    266e:	4605      	mov	r5, r0
    2670:	460e      	mov	r6, r1
    2672:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    2674:	2100      	movs	r1, #0
    2676:	2207      	movs	r2, #7
    2678:	4668      	mov	r0, sp
    267a:	f7ff faf7 	bl	1c6c <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    267e:	4821      	ldr	r0, [pc, #132]	; (2704 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2680:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2684:	2300      	movs	r3, #0
    2686:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    268a:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    268c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    268e:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2692:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2696:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    269a:	d10a      	bne.n	26b2 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    269c:	2106      	movs	r1, #6
    269e:	3070      	adds	r0, #112	; 0x70
    26a0:	f7ff fd28 	bl	20f4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    26a4:	b928      	cbnz	r0, 26b2 <start_le_scan+0x46>
			err = le_set_private_addr();
    26a6:	f7ff fe85 	bl	23b4 <le_set_private_addr>
			if (err) {
    26aa:	4604      	mov	r4, r0
    26ac:	b9f0      	cbnz	r0, 26ec <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    26ae:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    26b2:	2107      	movs	r1, #7
    26b4:	f242 000b 	movw	r0, #8203	; 0x200b
    26b8:	f7ff fd2a 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    26bc:	4604      	mov	r4, r0
    26be:	b1f0      	cbz	r0, 26fe <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    26c0:	2207      	movs	r2, #7
    26c2:	4669      	mov	r1, sp
    26c4:	3008      	adds	r0, #8
    26c6:	f010 fbaf 	bl	12e28 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    26ca:	4621      	mov	r1, r4
    26cc:	f242 000b 	movw	r0, #8203	; 0x200b
    26d0:	f7ff ff82 	bl	25d8 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    26d4:	2001      	movs	r0, #1
    26d6:	f7ff fded 	bl	22b4 <set_le_scan_enable>
	if (err) {
    26da:	4604      	mov	r4, r0
    26dc:	b930      	cbnz	r0, 26ec <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    26de:	2d01      	cmp	r5, #1
    26e0:	d107      	bne.n	26f2 <start_le_scan+0x86>
    26e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    26e6:	4808      	ldr	r0, [pc, #32]	; (2708 <start_le_scan+0x9c>)
    26e8:	f7ff fc5d 	bl	1fa6 <atomic_or>
}
    26ec:	4620      	mov	r0, r4
    26ee:	b002      	add	sp, #8
    26f0:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26f2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    26f6:	4804      	ldr	r0, [pc, #16]	; (2708 <start_le_scan+0x9c>)
    26f8:	f7ff fc66 	bl	1fc8 <atomic_and>
    26fc:	e7f6      	b.n	26ec <start_le_scan+0x80>
		return -ENOBUFS;
    26fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2702:	e7f3      	b.n	26ec <start_le_scan+0x80>
    2704:	20003a68 	.word	0x20003a68
    2708:	20003ad8 	.word	0x20003ad8

0000270c <bt_le_scan_update>:
{
    270c:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    270e:	2109      	movs	r1, #9
{
    2710:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2712:	4816      	ldr	r0, [pc, #88]	; (276c <bt_le_scan_update+0x60>)
    2714:	f7ff fcee 	bl	20f4 <atomic_test_bit>
    2718:	4602      	mov	r2, r0
    271a:	b108      	cbz	r0, 2720 <bt_le_scan_update+0x14>
		return 0;
    271c:	2000      	movs	r0, #0
    271e:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2720:	2108      	movs	r1, #8
    2722:	4812      	ldr	r0, [pc, #72]	; (276c <bt_le_scan_update+0x60>)
    2724:	f7ff fce6 	bl	20f4 <atomic_test_bit>
    2728:	b9d0      	cbnz	r0, 2760 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    272a:	2101      	movs	r1, #1
    272c:	2000      	movs	r0, #0
    272e:	f002 f97b 	bl	4a28 <bt_conn_lookup_state_le>
		if (!conn) {
    2732:	4604      	mov	r4, r0
    2734:	2800      	cmp	r0, #0
    2736:	d0f1      	beq.n	271c <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2738:	f44f 6100 	mov.w	r1, #2048	; 0x800
    273c:	480b      	ldr	r0, [pc, #44]	; (276c <bt_le_scan_update+0x60>)
    273e:	f7ff fc32 	bl	1fa6 <atomic_or>
		bt_conn_unref(conn);
    2742:	4620      	mov	r0, r4
    2744:	f002 f992 	bl	4a6c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    2748:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    274a:	bf15      	itete	ne
    274c:	2230      	movne	r2, #48	; 0x30
    274e:	2212      	moveq	r2, #18
    2750:	2160      	movne	r1, #96	; 0x60
    2752:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    2756:	2000      	movs	r0, #0
}
    2758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    275c:	f7ff bf86 	b.w	266c <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2760:	4610      	mov	r0, r2
    2762:	f7ff fda7 	bl	22b4 <set_le_scan_enable>
		if (err) {
    2766:	2800      	cmp	r0, #0
    2768:	d0df      	beq.n	272a <bt_le_scan_update+0x1e>
    276a:	bd38      	pop	{r3, r4, r5, pc}
    276c:	20003ad8 	.word	0x20003ad8

00002770 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2774:	4e71      	ldr	r6, [pc, #452]	; (293c <bt_init+0x1cc>)
    2776:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    277a:	6899      	ldr	r1, [r3, #8]
    277c:	f011 0101 	ands.w	r1, r1, #1
{
    2780:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2782:	d131      	bne.n	27e8 <bt_init+0x78>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2784:	aa0c      	add	r2, sp, #48	; 0x30
    2786:	f640 4003 	movw	r0, #3075	; 0xc03
    278a:	f7ff fd1f 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    278e:	4605      	mov	r5, r0
    2790:	2800      	cmp	r0, #0
    2792:	f040 80ce 	bne.w	2932 <bt_init+0x1c2>
	u8_t status = buf->data[0];
    2796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2798:	689b      	ldr	r3, [r3, #8]
    279a:	781c      	ldrb	r4, [r3, #0]
    279c:	f011 fc36 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", status);
    27a0:	4b67      	ldr	r3, [pc, #412]	; (2940 <bt_init+0x1d0>)
    27a2:	9303      	str	r3, [sp, #12]
    27a4:	9001      	str	r0, [sp, #4]
    27a6:	9300      	str	r3, [sp, #0]
    27a8:	9402      	str	r4, [sp, #8]
    27aa:	4b66      	ldr	r3, [pc, #408]	; (2944 <bt_init+0x1d4>)
    27ac:	4a66      	ldr	r2, [pc, #408]	; (2948 <bt_init+0x1d8>)
    27ae:	4967      	ldr	r1, [pc, #412]	; (294c <bt_init+0x1dc>)
    27b0:	4867      	ldr	r0, [pc, #412]	; (2950 <bt_init+0x1e0>)
    27b2:	f7fe fbeb 	bl	f8c <printk>
	if (status) {
    27b6:	b9a4      	cbnz	r4, 27e2 <bt_init+0x72>
	scan_dev_found_cb = NULL;
    27b8:	4b66      	ldr	r3, [pc, #408]	; (2954 <bt_init+0x1e4>)
    27ba:	601c      	str	r4, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    27bc:	4633      	mov	r3, r6
    27be:	f3bf 8f5b 	dmb	ish
    27c2:	f853 2f70 	ldr.w	r2, [r3, #112]!
    27c6:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    27ca:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    27ce:	f3bf 8f5b 	dmb	ish
    27d2:	e853 1f00 	ldrex	r1, [r3]
    27d6:	e843 2000 	strex	r0, r2, [r3]
    27da:	2800      	cmp	r0, #0
    27dc:	d1f9      	bne.n	27d2 <bt_init+0x62>
    27de:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    27e2:	980c      	ldr	r0, [sp, #48]	; 0x30
    27e4:	f010 fae8 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    27e8:	aa0c      	add	r2, sp, #48	; 0x30
    27ea:	2100      	movs	r1, #0
    27ec:	f241 0003 	movw	r0, #4099	; 0x1003
    27f0:	f7ff fcec 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    27f4:	4605      	mov	r5, r0
    27f6:	2800      	cmp	r0, #0
    27f8:	f040 809b 	bne.w	2932 <bt_init+0x1c2>
    27fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_DBG("status %u", rp->status);
    27fe:	4c50      	ldr	r4, [pc, #320]	; (2940 <bt_init+0x1d0>)
    2800:	689f      	ldr	r7, [r3, #8]
    2802:	f011 fc03 	bl	1400c <_impl_k_current_get>
    2806:	9403      	str	r4, [sp, #12]
    2808:	f817 3b01 	ldrb.w	r3, [r7], #1
    280c:	9302      	str	r3, [sp, #8]
    280e:	9001      	str	r0, [sp, #4]
    2810:	4b51      	ldr	r3, [pc, #324]	; (2958 <bt_init+0x1e8>)
    2812:	4a4d      	ldr	r2, [pc, #308]	; (2948 <bt_init+0x1d8>)
    2814:	494d      	ldr	r1, [pc, #308]	; (294c <bt_init+0x1dc>)
    2816:	9400      	str	r4, [sp, #0]
    2818:	484d      	ldr	r0, [pc, #308]	; (2950 <bt_init+0x1e0>)
    281a:	f7fe fbb7 	bl	f8c <printk>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    281e:	2208      	movs	r2, #8
    2820:	4639      	mov	r1, r7
    2822:	484e      	ldr	r0, [pc, #312]	; (295c <bt_init+0x1ec>)
    2824:	f7ff f9f6 	bl	1c14 <memcpy>
	net_buf_unref(rsp);
    2828:	980c      	ldr	r0, [sp, #48]	; 0x30
    282a:	f010 fac5 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    282e:	4629      	mov	r1, r5
    2830:	aa0c      	add	r2, sp, #48	; 0x30
    2832:	f241 0001 	movw	r0, #4097	; 0x1001
    2836:	f7ff fcc9 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    283a:	4605      	mov	r5, r0
    283c:	2800      	cmp	r0, #0
    283e:	d178      	bne.n	2932 <bt_init+0x1c2>
    2840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2842:	689d      	ldr	r5, [r3, #8]
    2844:	f011 fbe2 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2848:	9403      	str	r4, [sp, #12]
    284a:	782b      	ldrb	r3, [r5, #0]
    284c:	493f      	ldr	r1, [pc, #252]	; (294c <bt_init+0x1dc>)
    284e:	9302      	str	r3, [sp, #8]
    2850:	9001      	str	r0, [sp, #4]
    2852:	4b43      	ldr	r3, [pc, #268]	; (2960 <bt_init+0x1f0>)
    2854:	4a3c      	ldr	r2, [pc, #240]	; (2948 <bt_init+0x1d8>)
    2856:	9400      	str	r4, [sp, #0]
    2858:	483d      	ldr	r0, [pc, #244]	; (2950 <bt_init+0x1e0>)
    285a:	f7fe fb97 	bl	f8c <printk>
	bt_dev.hci_version = rp->hci_version;
    285e:	786b      	ldrb	r3, [r5, #1]
    2860:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2862:	78ea      	ldrb	r2, [r5, #3]
    2864:	78ab      	ldrb	r3, [r5, #2]
	net_buf_unref(rsp);
    2866:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    286c:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    286e:	792b      	ldrb	r3, [r5, #4]
    2870:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2872:	7a2a      	ldrb	r2, [r5, #8]
    2874:	79eb      	ldrb	r3, [r5, #7]
    2876:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    287a:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    287c:	79aa      	ldrb	r2, [r5, #6]
    287e:	796b      	ldrb	r3, [r5, #5]
    2880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2884:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2886:	f010 fa97 	bl	12db8 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    288a:	2103      	movs	r1, #3
    288c:	4835      	ldr	r0, [pc, #212]	; (2964 <bt_init+0x1f4>)
    288e:	f7ff fc31 	bl	20f4 <atomic_test_bit>
    2892:	4601      	mov	r1, r0
    2894:	bb00      	cbnz	r0, 28d8 <bt_init+0x168>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2896:	aa0c      	add	r2, sp, #48	; 0x30
    2898:	f241 0009 	movw	r0, #4105	; 0x1009
    289c:	f7ff fc96 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    28a0:	4605      	mov	r5, r0
    28a2:	2800      	cmp	r0, #0
    28a4:	d145      	bne.n	2932 <bt_init+0x1c2>
    28a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28a8:	689f      	ldr	r7, [r3, #8]
    28aa:	f011 fbaf 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    28ae:	9403      	str	r4, [sp, #12]
    28b0:	f817 3b01 	ldrb.w	r3, [r7], #1
    28b4:	9302      	str	r3, [sp, #8]
    28b6:	9001      	str	r0, [sp, #4]
    28b8:	4b2b      	ldr	r3, [pc, #172]	; (2968 <bt_init+0x1f8>)
    28ba:	4a23      	ldr	r2, [pc, #140]	; (2948 <bt_init+0x1d8>)
    28bc:	4923      	ldr	r1, [pc, #140]	; (294c <bt_init+0x1dc>)
    28be:	9400      	str	r4, [sp, #0]
    28c0:	4823      	ldr	r0, [pc, #140]	; (2950 <bt_init+0x1e0>)
    28c2:	f7fe fb63 	bl	f8c <printk>
    28c6:	2206      	movs	r2, #6
    28c8:	4639      	mov	r1, r7
    28ca:	4828      	ldr	r0, [pc, #160]	; (296c <bt_init+0x1fc>)
    28cc:	f7ff f9a2 	bl	1c14 <memcpy>
		net_buf_unref(rsp);
    28d0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    28d2:	7035      	strb	r5, [r6, #0]
		net_buf_unref(rsp);
    28d4:	f010 fa70 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    28d8:	aa0c      	add	r2, sp, #48	; 0x30
    28da:	2100      	movs	r1, #0
    28dc:	f241 0002 	movw	r0, #4098	; 0x1002
    28e0:	f7ff fc74 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    28e4:	4605      	mov	r5, r0
    28e6:	bb20      	cbnz	r0, 2932 <bt_init+0x1c2>
    28e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28ea:	689f      	ldr	r7, [r3, #8]
    28ec:	f011 fb8e 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    28f0:	9403      	str	r4, [sp, #12]
    28f2:	f817 3b01 	ldrb.w	r3, [r7], #1
    28f6:	9302      	str	r3, [sp, #8]
    28f8:	9001      	str	r0, [sp, #4]
    28fa:	4b1d      	ldr	r3, [pc, #116]	; (2970 <bt_init+0x200>)
    28fc:	4a12      	ldr	r2, [pc, #72]	; (2948 <bt_init+0x1d8>)
    28fe:	4913      	ldr	r1, [pc, #76]	; (294c <bt_init+0x1dc>)
    2900:	9400      	str	r4, [sp, #0]
    2902:	4813      	ldr	r0, [pc, #76]	; (2950 <bt_init+0x1e0>)
    2904:	f7fe fb42 	bl	f8c <printk>
	memcpy(bt_dev.supported_commands, rp->commands,
    2908:	4639      	mov	r1, r7
    290a:	2240      	movs	r2, #64	; 0x40
    290c:	4819      	ldr	r0, [pc, #100]	; (2974 <bt_init+0x204>)
    290e:	f7ff f981 	bl	1c14 <memcpy>
	net_buf_unref(rsp);
    2912:	980c      	ldr	r0, [sp, #48]	; 0x30
    2914:	f010 fa50 	bl	12db8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2918:	7eb3      	ldrb	r3, [r6, #26]
    291a:	0659      	lsls	r1, r3, #25
    291c:	d432      	bmi.n	2984 <bt_init+0x214>
		BT_ERR("Non-LE capable controller detected!");
    291e:	9401      	str	r4, [sp, #4]
    2920:	9400      	str	r4, [sp, #0]
    2922:	4b15      	ldr	r3, [pc, #84]	; (2978 <bt_init+0x208>)
    2924:	4a15      	ldr	r2, [pc, #84]	; (297c <bt_init+0x20c>)
    2926:	4909      	ldr	r1, [pc, #36]	; (294c <bt_init+0x1dc>)
    2928:	4815      	ldr	r0, [pc, #84]	; (2980 <bt_init+0x210>)
    292a:	f7fe fb2f 	bl	f8c <printk>
		return -ENODEV;
    292e:	f06f 0512 	mvn.w	r5, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2932:	4628      	mov	r0, r5
    2934:	b00f      	add	sp, #60	; 0x3c
    2936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    293a:	bf00      	nop
    293c:	20003a68 	.word	0x20003a68
    2940:	00014b99 	.word	0x00014b99
    2944:	0001522b 	.word	0x0001522b
    2948:	00015f9d 	.word	0x00015f9d
    294c:	00015fa4 	.word	0x00015fa4
    2950:	00015685 	.word	0x00015685
    2954:	200002d8 	.word	0x200002d8
    2958:	0001535a 	.word	0x0001535a
    295c:	20003a7e 	.word	0x20003a7e
    2960:	000152bb 	.word	0x000152bb
    2964:	20003ad8 	.word	0x20003ad8
    2968:	000152d3 	.word	0x000152d3
    296c:	20003a69 	.word	0x20003a69
    2970:	00015339 	.word	0x00015339
    2974:	20003a86 	.word	0x20003a86
    2978:	00015394 	.word	0x00015394
    297c:	00015f55 	.word	0x00015f55
    2980:	000156a4 	.word	0x000156a4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2984:	4629      	mov	r1, r5
    2986:	aa0c      	add	r2, sp, #48	; 0x30
    2988:	f242 0003 	movw	r0, #8195	; 0x2003
    298c:	f7ff fc1e 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2990:	4605      	mov	r5, r0
    2992:	2800      	cmp	r0, #0
    2994:	d1cd      	bne.n	2932 <bt_init+0x1c2>
    2996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2998:	689f      	ldr	r7, [r3, #8]
    299a:	f011 fb37 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    299e:	9403      	str	r4, [sp, #12]
    29a0:	f817 3b01 	ldrb.w	r3, [r7], #1
    29a4:	9302      	str	r3, [sp, #8]
    29a6:	9001      	str	r0, [sp, #4]
    29a8:	4bb3      	ldr	r3, [pc, #716]	; (2c78 <bt_init+0x508>)
    29aa:	4ab4      	ldr	r2, [pc, #720]	; (2c7c <bt_init+0x50c>)
    29ac:	49b4      	ldr	r1, [pc, #720]	; (2c80 <bt_init+0x510>)
    29ae:	9400      	str	r4, [sp, #0]
    29b0:	48b4      	ldr	r0, [pc, #720]	; (2c84 <bt_init+0x514>)
    29b2:	f7fe faeb 	bl	f8c <printk>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    29b6:	2208      	movs	r2, #8
    29b8:	4639      	mov	r1, r7
    29ba:	48b3      	ldr	r0, [pc, #716]	; (2c88 <bt_init+0x518>)
    29bc:	f7ff f92a 	bl	1c14 <memcpy>
	net_buf_unref(rsp);
    29c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    29c2:	f010 f9f9 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    29c6:	4629      	mov	r1, r5
    29c8:	aa0c      	add	r2, sp, #48	; 0x30
    29ca:	f242 0002 	movw	r0, #8194	; 0x2002
    29ce:	f7ff fbfd 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    29d2:	4605      	mov	r5, r0
    29d4:	2800      	cmp	r0, #0
    29d6:	d1ac      	bne.n	2932 <bt_init+0x1c2>
    29d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    29da:	689d      	ldr	r5, [r3, #8]
    29dc:	f011 fb16 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29e0:	9403      	str	r4, [sp, #12]
    29e2:	782b      	ldrb	r3, [r5, #0]
    29e4:	9302      	str	r3, [sp, #8]
    29e6:	9001      	str	r0, [sp, #4]
    29e8:	4ba8      	ldr	r3, [pc, #672]	; (2c8c <bt_init+0x51c>)
    29ea:	9400      	str	r4, [sp, #0]
    29ec:	4aa3      	ldr	r2, [pc, #652]	; (2c7c <bt_init+0x50c>)
    29ee:	49a4      	ldr	r1, [pc, #656]	; (2c80 <bt_init+0x510>)
    29f0:	48a4      	ldr	r0, [pc, #656]	; (2c84 <bt_init+0x514>)
    29f2:	f7fe facb 	bl	f8c <printk>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    29f6:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    29fa:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    29fe:	b1bb      	cbz	r3, 2a30 <bt_init+0x2c0>
    2a00:	f011 fb04 	bl	1400c <_impl_k_current_get>
	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);
    2a04:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2a08:	9404      	str	r4, [sp, #16]
    2a0a:	9303      	str	r3, [sp, #12]
    2a0c:	78eb      	ldrb	r3, [r5, #3]
    2a0e:	9302      	str	r3, [sp, #8]
    2a10:	9001      	str	r0, [sp, #4]
    2a12:	4a9a      	ldr	r2, [pc, #616]	; (2c7c <bt_init+0x50c>)
    2a14:	499a      	ldr	r1, [pc, #616]	; (2c80 <bt_init+0x510>)
    2a16:	9400      	str	r4, [sp, #0]
    2a18:	4b9c      	ldr	r3, [pc, #624]	; (2c8c <bt_init+0x51c>)
    2a1a:	489d      	ldr	r0, [pc, #628]	; (2c90 <bt_init+0x520>)
    2a1c:	f7fe fab6 	bl	f8c <printk>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2a20:	78ea      	ldrb	r2, [r5, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2a22:	489c      	ldr	r0, [pc, #624]	; (2c94 <bt_init+0x524>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2a24:	2a02      	cmp	r2, #2
    2a26:	bf28      	it	cs
    2a28:	2202      	movcs	r2, #2
    2a2a:	4611      	mov	r1, r2
    2a2c:	f011 faf4 	bl	14018 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2a30:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a32:	f010 f9c1 	bl	12db8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2a36:	7eb5      	ldrb	r5, [r6, #26]
    2a38:	f015 0520 	ands.w	r5, r5, #32
    2a3c:	f000 8100 	beq.w	2c40 <bt_init+0x4d0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2a40:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2a44:	071a      	lsls	r2, r3, #28
    2a46:	d523      	bpl.n	2a90 <bt_init+0x320>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2a48:	aa0c      	add	r2, sp, #48	; 0x30
    2a4a:	2100      	movs	r1, #0
    2a4c:	f242 001c 	movw	r0, #8220	; 0x201c
    2a50:	f7ff fbbc 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    2a54:	4605      	mov	r5, r0
    2a56:	2800      	cmp	r0, #0
    2a58:	f47f af6b 	bne.w	2932 <bt_init+0x1c2>
    2a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2a5e:	689d      	ldr	r5, [r3, #8]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2a60:	f011 fad4 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a64:	9403      	str	r4, [sp, #12]
    2a66:	782b      	ldrb	r3, [r5, #0]
    2a68:	9302      	str	r3, [sp, #8]
    2a6a:	9001      	str	r0, [sp, #4]
    2a6c:	4b8a      	ldr	r3, [pc, #552]	; (2c98 <bt_init+0x528>)
    2a6e:	4a83      	ldr	r2, [pc, #524]	; (2c7c <bt_init+0x50c>)
    2a70:	9400      	str	r4, [sp, #0]
    2a72:	4983      	ldr	r1, [pc, #524]	; (2c80 <bt_init+0x510>)
    2a74:	4883      	ldr	r0, [pc, #524]	; (2c84 <bt_init+0x514>)
    2a76:	f7fe fa89 	bl	f8c <printk>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2a7a:	462b      	mov	r3, r5
		net_buf_unref(rsp);
    2a7c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a7e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2a82:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2a84:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    2a88:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2a8c:	f010 f994 	bl	12db8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    2a90:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    2a94:	069b      	lsls	r3, r3, #26
    2a96:	f100 8115 	bmi.w	2cc4 <bt_init+0x554>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2a9a:	2108      	movs	r1, #8
    2a9c:	f242 0001 	movw	r0, #8193	; 0x2001
    2aa0:	f7ff fb36 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    2aa4:	4605      	mov	r5, r0
    2aa6:	2800      	cmp	r0, #0
    2aa8:	f000 80d1 	beq.w	2c4e <bt_init+0x4de>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2aac:	2108      	movs	r1, #8
    2aae:	4408      	add	r0, r1
    2ab0:	f010 f9b4 	bl	12e1c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2ab4:	f896 1078 	ldrb.w	r1, [r6, #120]	; 0x78
    2ab8:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2aba:	bf4c      	ite	mi
    2abc:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2abe:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2ac0:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2ac2:	f896 1079 	ldrb.w	r1, [r6, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2ac6:	bf48      	it	mi
    2ac8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2acc:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2ad0:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    2ad4:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2ad8:	bf18      	it	ne
    2ada:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2ade:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2ae0:	bf08      	it	eq
    2ae2:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2ae6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2ae8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2aec:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2aee:	2200      	movs	r2, #0
    2af0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2af2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2af4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2af6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2af8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2afa:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2afc:	4629      	mov	r1, r5
    2afe:	f242 0001 	movw	r0, #8193	; 0x2001
    2b02:	f7ff fb63 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2b06:	4605      	mov	r5, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	f47f af12 	bne.w	2932 <bt_init+0x1c2>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2b0e:	7eb3      	ldrb	r3, [r6, #26]
    2b10:	069a      	lsls	r2, r3, #26
    2b12:	d43f      	bmi.n	2b94 <bt_init+0x424>
	if (bt_dev.le.mtu) {
    2b14:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    2b18:	2900      	cmp	r1, #0
    2b1a:	d13b      	bne.n	2b94 <bt_init+0x424>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    2b1c:	aa0c      	add	r2, sp, #48	; 0x30
    2b1e:	f241 0005 	movw	r0, #4101	; 0x1005
    2b22:	f7ff fb53 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2b26:	4605      	mov	r5, r0
    2b28:	2800      	cmp	r0, #0
    2b2a:	f47f af02 	bne.w	2932 <bt_init+0x1c2>
    2b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b30:	689d      	ldr	r5, [r3, #8]
    2b32:	f011 fa6b 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b36:	9403      	str	r4, [sp, #12]
    2b38:	782b      	ldrb	r3, [r5, #0]
    2b3a:	9302      	str	r3, [sp, #8]
    2b3c:	9001      	str	r0, [sp, #4]
    2b3e:	4b57      	ldr	r3, [pc, #348]	; (2c9c <bt_init+0x52c>)
    2b40:	9400      	str	r4, [sp, #0]
    2b42:	4a4e      	ldr	r2, [pc, #312]	; (2c7c <bt_init+0x50c>)
    2b44:	494e      	ldr	r1, [pc, #312]	; (2c80 <bt_init+0x510>)
    2b46:	484f      	ldr	r0, [pc, #316]	; (2c84 <bt_init+0x514>)
    2b48:	f7fe fa20 	bl	f8c <printk>
	if (bt_dev.le.mtu) {
    2b4c:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2b50:	b9eb      	cbnz	r3, 2b8e <bt_init+0x41e>
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2b52:	78aa      	ldrb	r2, [r5, #2]
    2b54:	786b      	ldrb	r3, [r5, #1]
    2b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b5a:	f8a6 3088 	strh.w	r3, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2b5e:	88ad      	ldrh	r5, [r5, #4]
    2b60:	f011 fa54 	bl	1400c <_impl_k_current_get>
	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);
    2b64:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    2b68:	9303      	str	r3, [sp, #12]
    2b6a:	9001      	str	r0, [sp, #4]
    2b6c:	4a43      	ldr	r2, [pc, #268]	; (2c7c <bt_init+0x50c>)
    2b6e:	4944      	ldr	r1, [pc, #272]	; (2c80 <bt_init+0x510>)
    2b70:	9404      	str	r4, [sp, #16]
    2b72:	9502      	str	r5, [sp, #8]
    2b74:	9400      	str	r4, [sp, #0]
    2b76:	4b49      	ldr	r3, [pc, #292]	; (2c9c <bt_init+0x52c>)
    2b78:	4849      	ldr	r0, [pc, #292]	; (2ca0 <bt_init+0x530>)
    2b7a:	f7fe fa07 	bl	f8c <printk>
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2b7e:	2d02      	cmp	r5, #2
    2b80:	462a      	mov	r2, r5
    2b82:	bf28      	it	cs
    2b84:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2b86:	4611      	mov	r1, r2
    2b88:	4842      	ldr	r0, [pc, #264]	; (2c94 <bt_init+0x524>)
    2b8a:	f011 fa45 	bl	14018 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2b8e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b90:	f010 f912 	bl	12db8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2b94:	2108      	movs	r1, #8
    2b96:	f640 4001 	movw	r0, #3073	; 0xc01
    2b9a:	f7ff fab9 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    2b9e:	4605      	mov	r5, r0
    2ba0:	2800      	cmp	r0, #0
    2ba2:	d054      	beq.n	2c4e <bt_init+0x4de>
	ev = net_buf_add(buf, sizeof(*ev));
    2ba4:	2108      	movs	r1, #8
    2ba6:	4408      	add	r0, r1
    2ba8:	f010 f938 	bl	12e1c <net_buf_simple_add>
	dst[0] = val;
    2bac:	2310      	movs	r3, #16
    2bae:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2bb0:	2388      	movs	r3, #136	; 0x88
    2bb2:	7043      	strb	r3, [r0, #1]
    2bb4:	2302      	movs	r3, #2
	dst[0] = val;
    2bb6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2bb8:	70c3      	strb	r3, [r0, #3]
    2bba:	2320      	movs	r3, #32
	dst[0] = val;
    2bbc:	7082      	strb	r2, [r0, #2]
    2bbe:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2bc0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2bc2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2bc4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2bc6:	4629      	mov	r1, r5
    2bc8:	f640 4001 	movw	r0, #3073	; 0xc01
    2bcc:	f7ff fafe 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2bd0:	4605      	mov	r5, r0
    2bd2:	2800      	cmp	r0, #0
    2bd4:	f47f aead 	bne.w	2932 <bt_init+0x1c2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2bd8:	4601      	mov	r1, r0
    2bda:	aa0c      	add	r2, sp, #48	; 0x30
    2bdc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2be0:	f7ff faf4 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2be4:	2800      	cmp	r0, #0
    2be6:	f000 809a 	beq.w	2d1e <bt_init+0x5ae>
		BT_WARN("Vendor HCI extensions not available");
    2bea:	4b2e      	ldr	r3, [pc, #184]	; (2ca4 <bt_init+0x534>)
    2bec:	4a2e      	ldr	r2, [pc, #184]	; (2ca8 <bt_init+0x538>)
    2bee:	4924      	ldr	r1, [pc, #144]	; (2c80 <bt_init+0x510>)
    2bf0:	482e      	ldr	r0, [pc, #184]	; (2cac <bt_init+0x53c>)
    2bf2:	9401      	str	r4, [sp, #4]
    2bf4:	9400      	str	r4, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    2bf6:	f7fe f9c9 	bl	f8c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2bfa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2bfc:	2207      	movs	r2, #7
    2bfe:	a90c      	add	r1, sp, #48	; 0x30
    2c00:	482b      	ldr	r0, [pc, #172]	; (2cb0 <bt_init+0x540>)
    2c02:	930c      	str	r3, [sp, #48]	; 0x30
    2c04:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2c08:	f7fe ffef 	bl	1bea <memcmp>
    2c0c:	2800      	cmp	r0, #0
    2c0e:	f040 8100 	bne.w	2e12 <bt_init+0x6a2>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2c12:	f011 f9fb 	bl	1400c <_impl_k_current_get>
		BT_DBG("No public address. Trying to set static random.");
    2c16:	4b27      	ldr	r3, [pc, #156]	; (2cb4 <bt_init+0x544>)
    2c18:	9001      	str	r0, [sp, #4]
    2c1a:	9402      	str	r4, [sp, #8]
    2c1c:	9400      	str	r4, [sp, #0]
    2c1e:	4a17      	ldr	r2, [pc, #92]	; (2c7c <bt_init+0x50c>)
    2c20:	4917      	ldr	r1, [pc, #92]	; (2c80 <bt_init+0x510>)
    2c22:	4825      	ldr	r0, [pc, #148]	; (2cb8 <bt_init+0x548>)
    2c24:	f7fe f9b2 	bl	f8c <printk>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2c28:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2c2c:	07db      	lsls	r3, r3, #31
    2c2e:	f100 8111 	bmi.w	2e54 <bt_init+0x6e4>
		BT_WARN("Read Static Addresses command not available");
    2c32:	9401      	str	r4, [sp, #4]
    2c34:	9400      	str	r4, [sp, #0]
    2c36:	4b21      	ldr	r3, [pc, #132]	; (2cbc <bt_init+0x54c>)
    2c38:	4a1b      	ldr	r2, [pc, #108]	; (2ca8 <bt_init+0x538>)
    2c3a:	4911      	ldr	r1, [pc, #68]	; (2c80 <bt_init+0x510>)
    2c3c:	4820      	ldr	r0, [pc, #128]	; (2cc0 <bt_init+0x550>)
    2c3e:	e116      	b.n	2e6e <bt_init+0x6fe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2c40:	2102      	movs	r1, #2
    2c42:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c46:	f7ff fa63 	bl	2110 <bt_hci_cmd_create>
		if (!buf) {
    2c4a:	4607      	mov	r7, r0
    2c4c:	b910      	cbnz	r0, 2c54 <bt_init+0x4e4>
		return -ENOBUFS;
    2c4e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2c52:	e66e      	b.n	2932 <bt_init+0x1c2>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2c54:	2102      	movs	r1, #2
    2c56:	3008      	adds	r0, #8
    2c58:	f010 f8e0 	bl	12e1c <net_buf_simple_add>
		cp_le->le = 0x01;
    2c5c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2c5e:	7045      	strb	r5, [r0, #1]
		cp_le->le = 0x01;
    2c60:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2c62:	462a      	mov	r2, r5
    2c64:	4639      	mov	r1, r7
    2c66:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c6a:	f7ff faaf 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    2c6e:	4605      	mov	r5, r0
    2c70:	2800      	cmp	r0, #0
    2c72:	f43f aee5 	beq.w	2a40 <bt_init+0x2d0>
    2c76:	e65c      	b.n	2932 <bt_init+0x1c2>
    2c78:	000152e8 	.word	0x000152e8
    2c7c:	00015f9d 	.word	0x00015f9d
    2c80:	00015fa4 	.word	0x00015fa4
    2c84:	00015685 	.word	0x00015685
    2c88:	20003ae0 	.word	0x20003ae0
    2c8c:	0001531c 	.word	0x0001531c
    2c90:	000156d8 	.word	0x000156d8
    2c94:	20003af4 	.word	0x20003af4
    2c98:	00015377 	.word	0x00015377
    2c9c:	00015302 	.word	0x00015302
    2ca0:	0001570c 	.word	0x0001570c
    2ca4:	000153ce 	.word	0x000153ce
    2ca8:	00015fdf 	.word	0x00015fdf
    2cac:	00015744 	.word	0x00015744
    2cb0:	20003a68 	.word	0x20003a68
    2cb4:	000153da 	.word	0x000153da
    2cb8:	00015878 	.word	0x00015878
    2cbc:	000153af 	.word	0x000153af
    2cc0:	00015926 	.word	0x00015926
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2cc4:	aa0c      	add	r2, sp, #48	; 0x30
    2cc6:	2100      	movs	r1, #0
    2cc8:	f242 002f 	movw	r0, #8239	; 0x202f
    2ccc:	f7ff fa7e 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    2cd0:	4605      	mov	r5, r0
    2cd2:	2800      	cmp	r0, #0
    2cd4:	f47f ae2d 	bne.w	2932 <bt_init+0x1c2>
		rp = (void *)rsp->data;
    2cd8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2cda:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2cdc:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2ce0:	f8b3 9003 	ldrh.w	r9, [r3, #3]
		net_buf_unref(rsp);
    2ce4:	f010 f868 	bl	12db8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2ce8:	2104      	movs	r1, #4
    2cea:	f242 0024 	movw	r0, #8228	; 0x2024
    2cee:	f7ff fa0f 	bl	2110 <bt_hci_cmd_create>
		if (!buf) {
    2cf2:	4607      	mov	r7, r0
    2cf4:	2800      	cmp	r0, #0
    2cf6:	d0aa      	beq.n	2c4e <bt_init+0x4de>
		cp = net_buf_add(buf, sizeof(*cp));
    2cf8:	2104      	movs	r1, #4
    2cfa:	3008      	adds	r0, #8
    2cfc:	f010 f88e 	bl	12e1c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d00:	462a      	mov	r2, r5
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2d02:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2d06:	f8a0 9002 	strh.w	r9, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2d0a:	4639      	mov	r1, r7
    2d0c:	f242 0024 	movw	r0, #8228	; 0x2024
    2d10:	f7ff fa5c 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    2d14:	4605      	mov	r5, r0
    2d16:	2800      	cmp	r0, #0
    2d18:	f43f aebf 	beq.w	2a9a <bt_init+0x32a>
    2d1c:	e609      	b.n	2932 <bt_init+0x1c2>
	rp.info = (void *)rsp->data;
    2d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2d20:	4971      	ldr	r1, [pc, #452]	; (2ee8 <bt_init+0x778>)
	rp.info = (void *)rsp->data;
    2d22:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d24:	4871      	ldr	r0, [pc, #452]	; (2eec <bt_init+0x77c>)
    2d26:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    2d2a:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2d2c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2d2e:	bf96      	itet	ls
    2d30:	4a6f      	ldrls	r2, [pc, #444]	; (2ef0 <bt_init+0x780>)
	return "unknown";
    2d32:	4a70      	ldrhi	r2, [pc, #448]	; (2ef4 <bt_init+0x784>)
		return plat_str[platform];
    2d34:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d38:	9201      	str	r2, [sp, #4]
    2d3a:	4b6f      	ldr	r3, [pc, #444]	; (2ef8 <bt_init+0x788>)
    2d3c:	4a6f      	ldr	r2, [pc, #444]	; (2efc <bt_init+0x78c>)
    2d3e:	9403      	str	r4, [sp, #12]
    2d40:	9400      	str	r4, [sp, #0]
    2d42:	f7fe f923 	bl	f8c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2d46:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2d4a:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2d4e:	2b02      	cmp	r3, #2
    2d50:	d13a      	bne.n	2dc8 <bt_init+0x658>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2d52:	2a02      	cmp	r2, #2
    2d54:	d838      	bhi.n	2dc8 <bt_init+0x658>
		return nordic_str[variant];
    2d56:	4b6a      	ldr	r3, [pc, #424]	; (2f00 <bt_init+0x790>)
    2d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2d5c:	9202      	str	r2, [sp, #8]
    2d5e:	9301      	str	r3, [sp, #4]
    2d60:	4a66      	ldr	r2, [pc, #408]	; (2efc <bt_init+0x78c>)
    2d62:	4b65      	ldr	r3, [pc, #404]	; (2ef8 <bt_init+0x788>)
    2d64:	4960      	ldr	r1, [pc, #384]	; (2ee8 <bt_init+0x778>)
    2d66:	9403      	str	r4, [sp, #12]
    2d68:	9400      	str	r4, [sp, #0]
    2d6a:	4866      	ldr	r0, [pc, #408]	; (2f04 <bt_init+0x794>)
    2d6c:	f7fe f90e 	bl	f8c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d70:	796b      	ldrb	r3, [r5, #5]
    2d72:	9406      	str	r4, [sp, #24]
    2d74:	f8d5 1009 	ldr.w	r1, [r5, #9]
    2d78:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2d7a:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d7c:	f8b5 1007 	ldrh.w	r1, [r5, #7]
		return var_str[variant];
    2d80:	bf98      	it	ls
    2d82:	4a61      	ldrls	r2, [pc, #388]	; (2f08 <bt_init+0x798>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d84:	9104      	str	r1, [sp, #16]
    2d86:	79a9      	ldrb	r1, [r5, #6]
		return var_str[variant];
    2d88:	bf94      	ite	ls
    2d8a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2d8e:	4a59      	ldrhi	r2, [pc, #356]	; (2ef4 <bt_init+0x784>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d90:	9103      	str	r1, [sp, #12]
    2d92:	9302      	str	r3, [sp, #8]
    2d94:	4954      	ldr	r1, [pc, #336]	; (2ee8 <bt_init+0x778>)
    2d96:	4b58      	ldr	r3, [pc, #352]	; (2ef8 <bt_init+0x788>)
    2d98:	9201      	str	r2, [sp, #4]
    2d9a:	9400      	str	r4, [sp, #0]
    2d9c:	4a57      	ldr	r2, [pc, #348]	; (2efc <bt_init+0x78c>)
    2d9e:	485b      	ldr	r0, [pc, #364]	; (2f0c <bt_init+0x79c>)
    2da0:	f7fe f8f4 	bl	f8c <printk>
	net_buf_unref(rsp);
    2da4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2da6:	f010 f807 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2daa:	aa0c      	add	r2, sp, #48	; 0x30
    2dac:	2100      	movs	r1, #0
    2dae:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2db2:	f7ff fa0b 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2db6:	4605      	mov	r5, r0
    2db8:	b140      	cbz	r0, 2dcc <bt_init+0x65c>
		BT_WARN("Failed to read supported vendor features");
    2dba:	9401      	str	r4, [sp, #4]
    2dbc:	9400      	str	r4, [sp, #0]
    2dbe:	4b4e      	ldr	r3, [pc, #312]	; (2ef8 <bt_init+0x788>)
    2dc0:	4a53      	ldr	r2, [pc, #332]	; (2f10 <bt_init+0x7a0>)
    2dc2:	4949      	ldr	r1, [pc, #292]	; (2ee8 <bt_init+0x778>)
    2dc4:	4853      	ldr	r0, [pc, #332]	; (2f14 <bt_init+0x7a4>)
    2dc6:	e716      	b.n	2bf6 <bt_init+0x486>
		return "unknown";
    2dc8:	4b4a      	ldr	r3, [pc, #296]	; (2ef4 <bt_init+0x784>)
    2dca:	e7c7      	b.n	2d5c <bt_init+0x5ec>
	rp.cmds = (void *)rsp->data;
    2dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2dce:	4852      	ldr	r0, [pc, #328]	; (2f18 <bt_init+0x7a8>)
    2dd0:	6899      	ldr	r1, [r3, #8]
    2dd2:	2202      	movs	r2, #2
    2dd4:	3101      	adds	r1, #1
    2dd6:	f7fe ff1d 	bl	1c14 <memcpy>
	net_buf_unref(rsp);
    2dda:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ddc:	f00f ffec 	bl	12db8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2de0:	aa0c      	add	r2, sp, #48	; 0x30
    2de2:	4629      	mov	r1, r5
    2de4:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2de8:	f7ff f9f0 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2dec:	b130      	cbz	r0, 2dfc <bt_init+0x68c>
		BT_WARN("Failed to read supported vendor commands");
    2dee:	9401      	str	r4, [sp, #4]
    2df0:	9400      	str	r4, [sp, #0]
    2df2:	4b41      	ldr	r3, [pc, #260]	; (2ef8 <bt_init+0x788>)
    2df4:	4a46      	ldr	r2, [pc, #280]	; (2f10 <bt_init+0x7a0>)
    2df6:	493c      	ldr	r1, [pc, #240]	; (2ee8 <bt_init+0x778>)
    2df8:	4848      	ldr	r0, [pc, #288]	; (2f1c <bt_init+0x7ac>)
    2dfa:	e6fc      	b.n	2bf6 <bt_init+0x486>
	rp.feat = (void *)rsp->data;
    2dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2dfe:	4848      	ldr	r0, [pc, #288]	; (2f20 <bt_init+0x7b0>)
    2e00:	6899      	ldr	r1, [r3, #8]
    2e02:	2201      	movs	r2, #1
    2e04:	4411      	add	r1, r2
    2e06:	f7fe ff05 	bl	1c14 <memcpy>
	net_buf_unref(rsp);
    2e0a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e0c:	f00f ffd4 	bl	12db8 <net_buf_unref>
    2e10:	e6f3      	b.n	2bfa <bt_init+0x48a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2e12:	4b44      	ldr	r3, [pc, #272]	; (2f24 <bt_init+0x7b4>)
    2e14:	6818      	ldr	r0, [r3, #0]
    2e16:	889a      	ldrh	r2, [r3, #4]
    2e18:	900a      	str	r0, [sp, #40]	; 0x28
    2e1a:	799b      	ldrb	r3, [r3, #6]
    2e1c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2e20:	a90a      	add	r1, sp, #40	; 0x28
    2e22:	2207      	movs	r2, #7
    2e24:	4840      	ldr	r0, [pc, #256]	; (2f28 <bt_init+0x7b8>)
    2e26:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2e2a:	f7fe fede 	bl	1bea <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2e2e:	2800      	cmp	r0, #0
    2e30:	f43f aeef 	beq.w	2c12 <bt_init+0x4a2>
		bt_dev_show_info();
    2e34:	f7ff fb58 	bl	24e8 <bt_dev_show_info>
		err = bt_conn_init();
    2e38:	f002 f85c 	bl	4ef4 <bt_conn_init>
		if (err) {
    2e3c:	4605      	mov	r5, r0
    2e3e:	2800      	cmp	r0, #0
    2e40:	f47f ad77 	bne.w	2932 <bt_init+0x1c2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e44:	2102      	movs	r1, #2
    2e46:	4839      	ldr	r0, [pc, #228]	; (2f2c <bt_init+0x7bc>)
    2e48:	f7ff f8ad 	bl	1fa6 <atomic_or>
	bt_le_scan_update(false);
    2e4c:	4628      	mov	r0, r5
    2e4e:	f7ff fc5d 	bl	270c <bt_le_scan_update>
    2e52:	e56e      	b.n	2932 <bt_init+0x1c2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2e54:	aa09      	add	r2, sp, #36	; 0x24
    2e56:	2100      	movs	r1, #0
    2e58:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2e5c:	f7ff f9b6 	bl	21cc <bt_hci_cmd_send_sync>
		if (err) {
    2e60:	b140      	cbz	r0, 2e74 <bt_init+0x704>
			BT_WARN("Failed to read static addresses");
    2e62:	4b33      	ldr	r3, [pc, #204]	; (2f30 <bt_init+0x7c0>)
    2e64:	4a2a      	ldr	r2, [pc, #168]	; (2f10 <bt_init+0x7a0>)
    2e66:	4920      	ldr	r1, [pc, #128]	; (2ee8 <bt_init+0x778>)
    2e68:	4832      	ldr	r0, [pc, #200]	; (2f34 <bt_init+0x7c4>)
    2e6a:	9401      	str	r4, [sp, #4]
    2e6c:	9400      	str	r4, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    2e6e:	f7fe f88d 	bl	f8c <printk>
    2e72:	e026      	b.n	2ec2 <bt_init+0x752>
		rp = (void *)rsp->data;
    2e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e76:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2e78:	784b      	ldrb	r3, [r1, #1]
    2e7a:	b1bb      	cbz	r3, 2eac <bt_init+0x73c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2e7c:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2e7e:	2206      	movs	r2, #6
    2e80:	3102      	adds	r1, #2
    2e82:	482d      	ldr	r0, [pc, #180]	; (2f38 <bt_init+0x7c8>)
    2e84:	7033      	strb	r3, [r6, #0]
    2e86:	f7fe fec5 	bl	1c14 <memcpy>
			net_buf_unref(rsp);
    2e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    2e8c:	f00f ff94 	bl	12db8 <net_buf_unref>
		return bt_set_static_addr();
    2e90:	f7ff fafa 	bl	2488 <bt_set_static_addr>
    2e94:	4605      	mov	r5, r0
		if (err) {
    2e96:	2800      	cmp	r0, #0
    2e98:	d0cc      	beq.n	2e34 <bt_init+0x6c4>
			BT_ERR("Unable to set identity address");
    2e9a:	9401      	str	r4, [sp, #4]
    2e9c:	9400      	str	r4, [sp, #0]
    2e9e:	4b27      	ldr	r3, [pc, #156]	; (2f3c <bt_init+0x7cc>)
    2ea0:	4a27      	ldr	r2, [pc, #156]	; (2f40 <bt_init+0x7d0>)
    2ea2:	4911      	ldr	r1, [pc, #68]	; (2ee8 <bt_init+0x778>)
    2ea4:	4827      	ldr	r0, [pc, #156]	; (2f44 <bt_init+0x7d4>)
    2ea6:	f7fe f871 	bl	f8c <printk>
    2eaa:	e542      	b.n	2932 <bt_init+0x1c2>
		BT_WARN("No static addresses stored in controller");
    2eac:	9401      	str	r4, [sp, #4]
    2eae:	9400      	str	r4, [sp, #0]
    2eb0:	4b1f      	ldr	r3, [pc, #124]	; (2f30 <bt_init+0x7c0>)
    2eb2:	4a17      	ldr	r2, [pc, #92]	; (2f10 <bt_init+0x7a0>)
    2eb4:	490c      	ldr	r1, [pc, #48]	; (2ee8 <bt_init+0x778>)
    2eb6:	4824      	ldr	r0, [pc, #144]	; (2f48 <bt_init+0x7d8>)
    2eb8:	f7fe f868 	bl	f8c <printk>
		net_buf_unref(rsp);
    2ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ebe:	f00f ff7b 	bl	12db8 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2ec2:	4819      	ldr	r0, [pc, #100]	; (2f28 <bt_init+0x7b8>)
    2ec4:	f7ff fad2 	bl	246c <bt_addr_le_create_static>
		if (err) {
    2ec8:	4605      	mov	r5, r0
    2eca:	2800      	cmp	r0, #0
    2ecc:	d1e5      	bne.n	2e9a <bt_init+0x72a>
		BT_WARN("Using temporary static random address %s",
    2ece:	481a      	ldr	r0, [pc, #104]	; (2f38 <bt_init+0x7c8>)
    2ed0:	f7fe ff26 	bl	1d20 <bt_addr_str>
    2ed4:	9402      	str	r4, [sp, #8]
    2ed6:	9001      	str	r0, [sp, #4]
    2ed8:	9400      	str	r4, [sp, #0]
    2eda:	4b15      	ldr	r3, [pc, #84]	; (2f30 <bt_init+0x7c0>)
    2edc:	4a0c      	ldr	r2, [pc, #48]	; (2f10 <bt_init+0x7a0>)
    2ede:	4902      	ldr	r1, [pc, #8]	; (2ee8 <bt_init+0x778>)
    2ee0:	481a      	ldr	r0, [pc, #104]	; (2f4c <bt_init+0x7dc>)
    2ee2:	f7fe f853 	bl	f8c <printk>
    2ee6:	e7d3      	b.n	2e90 <bt_init+0x720>
    2ee8:	00015fa4 	.word	0x00015fa4
    2eec:	00015778 	.word	0x00015778
    2ef0:	000162d4 	.word	0x000162d4
    2ef4:	000163dc 	.word	0x000163dc
    2ef8:	000153ce 	.word	0x000153ce
    2efc:	0001545a 	.word	0x0001545a
    2f00:	000162c8 	.word	0x000162c8
    2f04:	000157a1 	.word	0x000157a1
    2f08:	000163cc 	.word	0x000163cc
    2f0c:	000157c9 	.word	0x000157c9
    2f10:	00015fdf 	.word	0x00015fdf
    2f14:	00015806 	.word	0x00015806
    2f18:	20003ac7 	.word	0x20003ac7
    2f1c:	0001583f 	.word	0x0001583f
    2f20:	20003ac6 	.word	0x20003ac6
    2f24:	00014ae4 	.word	0x00014ae4
    2f28:	20003a68 	.word	0x20003a68
    2f2c:	20003ad8 	.word	0x20003ad8
    2f30:	000153af 	.word	0x000153af
    2f34:	000158bd 	.word	0x000158bd
    2f38:	20003a69 	.word	0x20003a69
    2f3c:	000153da 	.word	0x000153da
    2f40:	00015f55 	.word	0x00015f55
    2f44:	0001599b 	.word	0x0001599b
    2f48:	000158ed 	.word	0x000158ed
    2f4c:	00015962 	.word	0x00015962

00002f50 <init_work>:

static void init_work(struct k_work *work)
{
    2f50:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2f52:	f7ff fc0d 	bl	2770 <bt_init>
	if (ready_cb) {
    2f56:	4b03      	ldr	r3, [pc, #12]	; (2f64 <init_work+0x14>)
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	b113      	cbz	r3, 2f62 <init_work+0x12>
		ready_cb(err);
	}
}
    2f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2f60:	4718      	bx	r3
    2f62:	bd10      	pop	{r4, pc}
    2f64:	200002d4 	.word	0x200002d4

00002f68 <hci_le_set_phy.isra.27>:
static int hci_le_set_phy(struct bt_conn *conn)
    2f68:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2f6a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2f6c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2f6e:	f242 0032 	movw	r0, #8242	; 0x2032
    2f72:	f7ff f8cd 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    2f76:	4605      	mov	r5, r0
    2f78:	b198      	cbz	r0, 2fa2 <hci_le_set_phy.isra.27+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2f7a:	2107      	movs	r1, #7
    2f7c:	3008      	adds	r0, #8
    2f7e:	f00f ff4d 	bl	12e1c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2f82:	8823      	ldrh	r3, [r4, #0]
    2f84:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2f86:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f88:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2f8a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f8c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2f8e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2f90:	7144      	strb	r4, [r0, #5]
    2f92:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2f94:	4629      	mov	r1, r5
    2f96:	f242 0032 	movw	r0, #8242	; 0x2032
    2f9a:	f7ff fb1d 	bl	25d8 <bt_hci_cmd_send>
	return 0;
    2f9e:	4620      	mov	r0, r4
    2fa0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2fa2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2fa6:	bd38      	pop	{r3, r4, r5, pc}

00002fa8 <hci_le_set_data_len.isra.28>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2faa:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2fac:	aa01      	add	r2, sp, #4
    2fae:	2100      	movs	r1, #0
    2fb0:	f242 002f 	movw	r0, #8239	; 0x202f
    2fb4:	f7ff f90a 	bl	21cc <bt_hci_cmd_send_sync>
	if (err) {
    2fb8:	b9d8      	cbnz	r0, 2ff2 <hci_le_set_data_len.isra.28+0x4a>
	rp = (void *)rsp->data;
    2fba:	9801      	ldr	r0, [sp, #4]
    2fbc:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2fbe:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2fc2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2fc6:	f00f fef7 	bl	12db8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2fca:	2106      	movs	r1, #6
    2fcc:	f242 0022 	movw	r0, #8226	; 0x2022
    2fd0:	f7ff f89e 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    2fd4:	4604      	mov	r4, r0
    2fd6:	b170      	cbz	r0, 2ff6 <hci_le_set_data_len.isra.28+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2fd8:	2106      	movs	r1, #6
    2fda:	3008      	adds	r0, #8
    2fdc:	f00f ff1e 	bl	12e1c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2fe0:	883b      	ldrh	r3, [r7, #0]
    2fe2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2fe4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2fe6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2fe8:	4621      	mov	r1, r4
    2fea:	f242 0022 	movw	r0, #8226	; 0x2022
    2fee:	f7ff faf3 	bl	25d8 <bt_hci_cmd_send>
}
    2ff2:	b003      	add	sp, #12
    2ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2ff6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2ffa:	e7fa      	b.n	2ff2 <hci_le_set_data_len.isra.28+0x4a>

00002ffc <le_enh_conn_complete>:
{
    2ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3000:	b08d      	sub	sp, #52	; 0x34
    3002:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3004:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3008:	4e70      	ldr	r6, [pc, #448]	; (31cc <le_enh_conn_complete+0x1d0>)
    300a:	f010 ffff 	bl	1400c <_impl_k_current_get>
    300e:	1d2c      	adds	r4, r5, #4
    3010:	4681      	mov	r9, r0
    3012:	4620      	mov	r0, r4
    3014:	f895 a000 	ldrb.w	sl, [r5]
    3018:	f895 b003 	ldrb.w	fp, [r5, #3]
    301c:	f7fe fea6 	bl	1d6c <bt_addr_le_str>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3020:	fa1f f887 	uxth.w	r8, r7
	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
    3024:	9005      	str	r0, [sp, #20]
    3026:	4b6a      	ldr	r3, [pc, #424]	; (31d0 <le_enh_conn_complete+0x1d4>)
    3028:	9606      	str	r6, [sp, #24]
    302a:	f8cd b010 	str.w	fp, [sp, #16]
    302e:	f8cd 800c 	str.w	r8, [sp, #12]
    3032:	e88d 0640 	stmia.w	sp, {r6, r9, sl}
    3036:	4a67      	ldr	r2, [pc, #412]	; (31d4 <le_enh_conn_complete+0x1d8>)
    3038:	4967      	ldr	r1, [pc, #412]	; (31d8 <le_enh_conn_complete+0x1dc>)
    303a:	4868      	ldr	r0, [pc, #416]	; (31dc <le_enh_conn_complete+0x1e0>)
    303c:	f7fd ffa6 	bl	f8c <printk>
	if (evt->status) {
    3040:	782b      	ldrb	r3, [r5, #0]
    3042:	b183      	cbz	r3, 3066 <le_enh_conn_complete+0x6a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3044:	2102      	movs	r1, #2
    3046:	2000      	movs	r0, #0
    3048:	f001 fcee 	bl	4a28 <bt_conn_lookup_state_le>
		if (!conn) {
    304c:	4604      	mov	r4, r0
    304e:	b138      	cbz	r0, 3060 <le_enh_conn_complete+0x64>
		conn->err = evt->status;
    3050:	782b      	ldrb	r3, [r5, #0]
    3052:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3054:	2100      	movs	r1, #0
    3056:	f001 fbbf 	bl	47d8 <bt_conn_set_state>
		bt_conn_unref(conn);
    305a:	4620      	mov	r0, r4
    305c:	f001 fd06 	bl	4a6c <bt_conn_unref>
}
    3060:	b00d      	add	sp, #52	; 0x34
    3062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3066:	4621      	mov	r1, r4
    3068:	a80a      	add	r0, sp, #40	; 0x28
    306a:	f7fe ff99 	bl	1fa0 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    306e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3072:	3b02      	subs	r3, #2
    3074:	b2db      	uxtb	r3, r3
    3076:	2b01      	cmp	r3, #1
    3078:	d828      	bhi.n	30cc <le_enh_conn_complete+0xd0>
    307a:	2206      	movs	r2, #6
    307c:	f105 0111 	add.w	r1, r5, #17
    3080:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3084:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    3088:	f7fe fdc4 	bl	1c14 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    308c:	2301      	movs	r3, #1
    308e:	f88d 3020 	strb.w	r3, [sp, #32]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3092:	2102      	movs	r1, #2
    3094:	a80a      	add	r0, sp, #40	; 0x28
    3096:	f001 fcc7 	bl	4a28 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    309a:	78eb      	ldrb	r3, [r5, #3]
    309c:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    309e:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    30a0:	d109      	bne.n	30b6 <le_enh_conn_complete+0xba>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    30a2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    30a6:	484e      	ldr	r0, [pc, #312]	; (31e0 <le_enh_conn_complete+0x1e4>)
    30a8:	f7fe ff8e 	bl	1fc8 <atomic_and>
		if (!conn) {
    30ac:	b99c      	cbnz	r4, 30d6 <le_enh_conn_complete+0xda>
			conn = bt_conn_add_le(&id_addr);
    30ae:	a80a      	add	r0, sp, #40	; 0x28
    30b0:	f001 fb5e 	bl	4770 <bt_conn_add_le>
    30b4:	4604      	mov	r4, r0
	if (!conn) {
    30b6:	b974      	cbnz	r4, 30d6 <le_enh_conn_complete+0xda>
		BT_ERR("Unable to add new conn for handle %u", handle);
    30b8:	9602      	str	r6, [sp, #8]
    30ba:	e88d 0140 	stmia.w	sp, {r6, r8}
    30be:	4b44      	ldr	r3, [pc, #272]	; (31d0 <le_enh_conn_complete+0x1d4>)
    30c0:	4a48      	ldr	r2, [pc, #288]	; (31e4 <le_enh_conn_complete+0x1e8>)
    30c2:	4945      	ldr	r1, [pc, #276]	; (31d8 <le_enh_conn_complete+0x1dc>)
    30c4:	4848      	ldr	r0, [pc, #288]	; (31e8 <le_enh_conn_complete+0x1ec>)
    30c6:	f7fd ff61 	bl	f8c <printk>
		return;
    30ca:	e7c9      	b.n	3060 <le_enh_conn_complete+0x64>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    30cc:	4621      	mov	r1, r4
    30ce:	a808      	add	r0, sp, #32
    30d0:	f7fe ff66 	bl	1fa0 <bt_addr_le_copy>
    30d4:	e7dd      	b.n	3092 <le_enh_conn_complete+0x96>
	conn->handle   = handle;
    30d6:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    30d8:	a90a      	add	r1, sp, #40	; 0x28
	conn->handle   = handle;
    30da:	f820 7b44 	strh.w	r7, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    30de:	f7fe ff5f 	bl	1fa0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    30e2:	7e2a      	ldrb	r2, [r5, #24]
    30e4:	7deb      	ldrb	r3, [r5, #23]
    30e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    30ea:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    30ee:	7eaa      	ldrb	r2, [r5, #26]
    30f0:	7e6b      	ldrb	r3, [r5, #25]
    30f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    30f6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    30fa:	7eeb      	ldrb	r3, [r5, #27]
    30fc:	7f2a      	ldrb	r2, [r5, #28]
    30fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3102:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    3106:	78ee      	ldrb	r6, [r5, #3]
    3108:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    310a:	2e01      	cmp	r6, #1
    310c:	d11a      	bne.n	3144 <le_enh_conn_complete+0x148>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    310e:	4f37      	ldr	r7, [pc, #220]	; (31ec <le_enh_conn_complete+0x1f0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3110:	a908      	add	r1, sp, #32
    3112:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    3116:	f7fe ff43 	bl	1fa0 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    311a:	4639      	mov	r1, r7
    311c:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3120:	f7fe ff3e 	bl	1fa0 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3124:	2107      	movs	r1, #7
    3126:	f107 0070 	add.w	r0, r7, #112	; 0x70
    312a:	f7fe ffe3 	bl	20f4 <atomic_test_bit>
    312e:	b148      	cbz	r0, 3144 <le_enh_conn_complete+0x148>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3130:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3134:	2200      	movs	r2, #0
    3136:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    313a:	4313      	orrs	r3, r2
    313c:	d002      	beq.n	3144 <le_enh_conn_complete+0x148>
			set_advertise_enable(true);
    313e:	4630      	mov	r0, r6
    3140:	f7ff f94a 	bl	23d8 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3144:	2103      	movs	r1, #3
    3146:	4620      	mov	r0, r4
    3148:	f001 fb46 	bl	47d8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    314c:	7a63      	ldrb	r3, [r4, #9]
    314e:	2b03      	cmp	r3, #3
    3150:	d118      	bne.n	3184 <le_enh_conn_complete+0x188>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3152:	78eb      	ldrb	r3, [r5, #3]
    3154:	b123      	cbz	r3, 3160 <le_enh_conn_complete+0x164>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    3156:	4b25      	ldr	r3, [pc, #148]	; (31ec <le_enh_conn_complete+0x1f0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3158:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    315c:	0719      	lsls	r1, r3, #28
    315e:	d518      	bpl.n	3192 <le_enh_conn_complete+0x196>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3160:	2102      	movs	r1, #2
    3162:	f242 0016 	movw	r0, #8214	; 0x2016
    3166:	f7fe ffd3 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    316a:	4605      	mov	r5, r0
    316c:	b188      	cbz	r0, 3192 <le_enh_conn_complete+0x196>
	cp = net_buf_add(buf, sizeof(*cp));
    316e:	2102      	movs	r1, #2
    3170:	3008      	adds	r0, #8
    3172:	f00f fe53 	bl	12e1c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3176:	8823      	ldrh	r3, [r4, #0]
    3178:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    317a:	4629      	mov	r1, r5
    317c:	f242 0016 	movw	r0, #8214	; 0x2016
    3180:	f7ff fa2a 	bl	25d8 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    3184:	4620      	mov	r0, r4
    3186:	f001 fc71 	bl	4a6c <bt_conn_unref>
	bt_le_scan_update(false);
    318a:	2000      	movs	r0, #0
    318c:	f7ff fabe 	bl	270c <bt_le_scan_update>
    3190:	e766      	b.n	3060 <le_enh_conn_complete+0x64>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    3192:	4d16      	ldr	r5, [pc, #88]	; (31ec <le_enh_conn_complete+0x1f0>)
    3194:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3198:	07d2      	lsls	r2, r2, #31
    319a:	d508      	bpl.n	31ae <le_enh_conn_complete+0x1b2>
		err = hci_le_set_phy(conn);
    319c:	4620      	mov	r0, r4
    319e:	f7ff fee3 	bl	2f68 <hci_le_set_phy.isra.27>
		if (!err) {
    31a2:	b920      	cbnz	r0, 31ae <le_enh_conn_complete+0x1b2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    31a4:	2180      	movs	r1, #128	; 0x80
    31a6:	1d20      	adds	r0, r4, #4
    31a8:	f7fe fefd 	bl	1fa6 <atomic_or>
    31ac:	e7ea      	b.n	3184 <le_enh_conn_complete+0x188>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    31ae:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    31b2:	069b      	lsls	r3, r3, #26
    31b4:	d506      	bpl.n	31c4 <le_enh_conn_complete+0x1c8>
		err = hci_le_set_data_len(conn);
    31b6:	4620      	mov	r0, r4
    31b8:	f7ff fef6 	bl	2fa8 <hci_le_set_data_len.isra.28>
		if (!err) {
    31bc:	b910      	cbnz	r0, 31c4 <le_enh_conn_complete+0x1c8>
    31be:	f44f 7180 	mov.w	r1, #256	; 0x100
    31c2:	e7f0      	b.n	31a6 <le_enh_conn_complete+0x1aa>
	update_conn_param(conn);
    31c4:	4620      	mov	r0, r4
    31c6:	f7fe ff11 	bl	1fec <update_conn_param>
    31ca:	e7db      	b.n	3184 <le_enh_conn_complete+0x188>
    31cc:	00014b99 	.word	0x00014b99
    31d0:	0001516f 	.word	0x0001516f
    31d4:	00015f9d 	.word	0x00015f9d
    31d8:	00015fa4 	.word	0x00015fa4
    31dc:	0001623c 	.word	0x0001623c
    31e0:	20003ad8 	.word	0x20003ad8
    31e4:	00015f55 	.word	0x00015f55
    31e8:	00016270 	.word	0x00016270
    31ec:	20003a68 	.word	0x20003a68

000031f0 <le_conn_param_neg_reply>:
{
    31f0:	b570      	push	{r4, r5, r6, lr}
    31f2:	4606      	mov	r6, r0
    31f4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    31f6:	f242 0021 	movw	r0, #8225	; 0x2021
    31fa:	2103      	movs	r1, #3
    31fc:	f7fe ff88 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    3200:	4604      	mov	r4, r0
    3202:	b160      	cbz	r0, 321e <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3204:	2103      	movs	r1, #3
    3206:	3008      	adds	r0, #8
    3208:	f00f fe08 	bl	12e1c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    320c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    320e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3210:	4621      	mov	r1, r4
    3212:	f242 0021 	movw	r0, #8225	; 0x2021
}
    3216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    321a:	f7ff b9dd 	b.w	25d8 <bt_hci_cmd_send>
}
    321e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3222:	bd70      	pop	{r4, r5, r6, pc}

00003224 <hci_tx_thread>:
{
    3224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3228:	b089      	sub	sp, #36	; 0x24
    322a:	f010 feef 	bl	1400c <_impl_k_current_get>
	BT_DBG("Started");
    322e:	4c81      	ldr	r4, [pc, #516]	; (3434 <hci_tx_thread+0x210>)
    3230:	9001      	str	r0, [sp, #4]
    3232:	9402      	str	r4, [sp, #8]
    3234:	9400      	str	r4, [sp, #0]
    3236:	4b80      	ldr	r3, [pc, #512]	; (3438 <hci_tx_thread+0x214>)
    3238:	4a80      	ldr	r2, [pc, #512]	; (343c <hci_tx_thread+0x218>)
    323a:	4981      	ldr	r1, [pc, #516]	; (3440 <hci_tx_thread+0x21c>)
    323c:	4881      	ldr	r0, [pc, #516]	; (3444 <hci_tx_thread+0x220>)
		events[0].state = K_POLL_STATE_NOT_READY;
    323e:	f8df a210 	ldr.w	sl, [pc, #528]	; 3450 <hci_tx_thread+0x22c>
	BT_DBG("Started");
    3242:	f7fd fea3 	bl	f8c <printk>
		events[0].state = K_POLL_STATE_NOT_READY;
    3246:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    324a:	487f      	ldr	r0, [pc, #508]	; (3448 <hci_tx_thread+0x224>)
		events[0].state = K_POLL_STATE_NOT_READY;
    324c:	f36f 1307 	bfc	r3, #4, #4
    3250:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3254:	f001 fa44 	bl	46e0 <bt_conn_prepare_events>
    3258:	f100 0801 	add.w	r8, r0, #1
    325c:	f010 fed6 	bl	1400c <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3260:	4a76      	ldr	r2, [pc, #472]	; (343c <hci_tx_thread+0x218>)
    3262:	9001      	str	r0, [sp, #4]
    3264:	4976      	ldr	r1, [pc, #472]	; (3440 <hci_tx_thread+0x21c>)
    3266:	9403      	str	r4, [sp, #12]
    3268:	f8cd 8008 	str.w	r8, [sp, #8]
    326c:	9400      	str	r4, [sp, #0]
    326e:	4b72      	ldr	r3, [pc, #456]	; (3438 <hci_tx_thread+0x214>)
    3270:	4876      	ldr	r0, [pc, #472]	; (344c <hci_tx_thread+0x228>)
    3272:	f7fd fe8b 	bl	f8c <printk>

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    3276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    327a:	4641      	mov	r1, r8
    327c:	4874      	ldr	r0, [pc, #464]	; (3450 <hci_tx_thread+0x22c>)
    327e:	f011 fb15 	bl	148ac <_impl_k_poll>
		BT_ASSERT(err == 0);
    3282:	b168      	cbz	r0, 32a0 <hci_tx_thread+0x7c>
    3284:	4b6c      	ldr	r3, [pc, #432]	; (3438 <hci_tx_thread+0x214>)
    3286:	4a73      	ldr	r2, [pc, #460]	; (3454 <hci_tx_thread+0x230>)
    3288:	496d      	ldr	r1, [pc, #436]	; (3440 <hci_tx_thread+0x21c>)
    328a:	4873      	ldr	r0, [pc, #460]	; (3458 <hci_tx_thread+0x234>)
    328c:	9401      	str	r4, [sp, #4]
    328e:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf);
    3290:	f7fd fe7c 	bl	f8c <printk>
    3294:	4040      	eors	r0, r0
    3296:	f380 8811 	msr	BASEPRI, r0
    329a:	f04f 0004 	mov.w	r0, #4
    329e:	df02      	svc	2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    32a0:	f010 feb4 	bl	1400c <_impl_k_current_get>
	BT_DBG("count %d", count);
    32a4:	9403      	str	r4, [sp, #12]
    32a6:	9001      	str	r0, [sp, #4]
    32a8:	f8cd 8008 	str.w	r8, [sp, #8]
    32ac:	9400      	str	r4, [sp, #0]
    32ae:	4b6b      	ldr	r3, [pc, #428]	; (345c <hci_tx_thread+0x238>)
    32b0:	4a62      	ldr	r2, [pc, #392]	; (343c <hci_tx_thread+0x218>)
    32b2:	4963      	ldr	r1, [pc, #396]	; (3440 <hci_tx_thread+0x21c>)
    32b4:	486a      	ldr	r0, [pc, #424]	; (3460 <hci_tx_thread+0x23c>)
    32b6:	4d66      	ldr	r5, [pc, #408]	; (3450 <hci_tx_thread+0x22c>)
		BT_DBG("ev->state %u", ev->state);
    32b8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 345c <hci_tx_thread+0x238>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    32bc:	4e69      	ldr	r6, [pc, #420]	; (3464 <hci_tx_thread+0x240>)
	BT_DBG("count %d", count);
    32be:	f7fd fe65 	bl	f8c <printk>
	for (; count; ev++, count--) {
    32c2:	f1b8 0f00 	cmp.w	r8, #0
    32c6:	d102      	bne.n	32ce <hci_tx_thread+0xaa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    32c8:	f010 fe70 	bl	13fac <_impl_k_yield>
    32cc:	e7bb      	b.n	3246 <hci_tx_thread+0x22>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    32ce:	f010 fe9d 	bl	1400c <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    32d2:	7b6b      	ldrb	r3, [r5, #13]
    32d4:	9001      	str	r0, [sp, #4]
    32d6:	091b      	lsrs	r3, r3, #4
    32d8:	9302      	str	r3, [sp, #8]
    32da:	9403      	str	r4, [sp, #12]
    32dc:	465b      	mov	r3, fp
    32de:	9400      	str	r4, [sp, #0]
    32e0:	4a56      	ldr	r2, [pc, #344]	; (343c <hci_tx_thread+0x218>)
    32e2:	4957      	ldr	r1, [pc, #348]	; (3440 <hci_tx_thread+0x21c>)
    32e4:	4860      	ldr	r0, [pc, #384]	; (3468 <hci_tx_thread+0x244>)
    32e6:	f7fd fe51 	bl	f8c <printk>
		switch (ev->state) {
    32ea:	7b6b      	ldrb	r3, [r5, #13]
    32ec:	091b      	lsrs	r3, r3, #4
    32ee:	2b01      	cmp	r3, #1
    32f0:	f240 8081 	bls.w	33f6 <hci_tx_thread+0x1d2>
    32f4:	2b04      	cmp	r3, #4
    32f6:	f040 8092 	bne.w	341e <hci_tx_thread+0x1fa>
			if (ev->tag == BT_EVENT_CMD_TX) {
    32fa:	f895 900c 	ldrb.w	r9, [r5, #12]
    32fe:	f1b9 0f00 	cmp.w	r9, #0
    3302:	d17c      	bne.n	33fe <hci_tx_thread+0x1da>
    3304:	f010 fe82 	bl	1400c <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    3308:	4b58      	ldr	r3, [pc, #352]	; (346c <hci_tx_thread+0x248>)
    330a:	9001      	str	r0, [sp, #4]
    330c:	4a4b      	ldr	r2, [pc, #300]	; (343c <hci_tx_thread+0x218>)
    330e:	494c      	ldr	r1, [pc, #304]	; (3440 <hci_tx_thread+0x21c>)
    3310:	9402      	str	r4, [sp, #8]
    3312:	9400      	str	r4, [sp, #0]
    3314:	4856      	ldr	r0, [pc, #344]	; (3470 <hci_tx_thread+0x24c>)
    3316:	f7fd fe39 	bl	f8c <printk>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    331a:	4649      	mov	r1, r9
    331c:	4855      	ldr	r0, [pc, #340]	; (3474 <hci_tx_thread+0x250>)
    331e:	f00f fd21 	bl	12d64 <net_buf_get>
	BT_ASSERT(buf);
    3322:	4607      	mov	r7, r0
    3324:	b930      	cbnz	r0, 3334 <hci_tx_thread+0x110>
    3326:	9401      	str	r4, [sp, #4]
    3328:	9400      	str	r4, [sp, #0]
    332a:	4b50      	ldr	r3, [pc, #320]	; (346c <hci_tx_thread+0x248>)
    332c:	4a49      	ldr	r2, [pc, #292]	; (3454 <hci_tx_thread+0x230>)
    332e:	4944      	ldr	r1, [pc, #272]	; (3440 <hci_tx_thread+0x21c>)
    3330:	4851      	ldr	r0, [pc, #324]	; (3478 <hci_tx_thread+0x254>)
    3332:	e7ad      	b.n	3290 <hci_tx_thread+0x6c>
    3334:	f010 fe6a 	bl	1400c <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    3338:	4b4c      	ldr	r3, [pc, #304]	; (346c <hci_tx_thread+0x248>)
    333a:	9001      	str	r0, [sp, #4]
    333c:	4a3f      	ldr	r2, [pc, #252]	; (343c <hci_tx_thread+0x218>)
    333e:	4940      	ldr	r1, [pc, #256]	; (3440 <hci_tx_thread+0x21c>)
    3340:	9402      	str	r4, [sp, #8]
    3342:	9400      	str	r4, [sp, #0]
    3344:	484d      	ldr	r0, [pc, #308]	; (347c <hci_tx_thread+0x258>)
    3346:	f7fd fe21 	bl	f8c <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    334a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    334e:	484c      	ldr	r0, [pc, #304]	; (3480 <hci_tx_thread+0x25c>)
    3350:	f010 fe93 	bl	1407a <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3354:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    3358:	b16b      	cbz	r3, 3376 <hci_tx_thread+0x152>
		BT_ERR("Uncleared pending sent_cmd");
    335a:	4b44      	ldr	r3, [pc, #272]	; (346c <hci_tx_thread+0x248>)
    335c:	4a3d      	ldr	r2, [pc, #244]	; (3454 <hci_tx_thread+0x230>)
    335e:	4938      	ldr	r1, [pc, #224]	; (3440 <hci_tx_thread+0x21c>)
    3360:	9401      	str	r4, [sp, #4]
    3362:	9400      	str	r4, [sp, #0]
    3364:	4847      	ldr	r0, [pc, #284]	; (3484 <hci_tx_thread+0x260>)
    3366:	f7fd fe11 	bl	f8c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    336a:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    336e:	f00f fd23 	bl	12db8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3372:	f8c6 90c0 	str.w	r9, [r6, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    3376:	4638      	mov	r0, r7
    3378:	f00f fd4c 	bl	12e14 <net_buf_ref>
    337c:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3380:	f010 fe44 	bl	1400c <_impl_k_current_get>
    3384:	9007      	str	r0, [sp, #28]
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    3386:	4638      	mov	r0, r7
    3388:	f00f fc58 	bl	12c3c <net_buf_id>
    338c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3498 <hci_tx_thread+0x274>
    3390:	9404      	str	r4, [sp, #16]
    3392:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3396:	9703      	str	r7, [sp, #12]
    3398:	8842      	ldrh	r2, [r0, #2]
    339a:	9b07      	ldr	r3, [sp, #28]
    339c:	9202      	str	r2, [sp, #8]
    339e:	9301      	str	r3, [sp, #4]
    33a0:	9400      	str	r4, [sp, #0]
    33a2:	4b32      	ldr	r3, [pc, #200]	; (346c <hci_tx_thread+0x248>)
    33a4:	4a25      	ldr	r2, [pc, #148]	; (343c <hci_tx_thread+0x218>)
    33a6:	4926      	ldr	r1, [pc, #152]	; (3440 <hci_tx_thread+0x21c>)
    33a8:	4837      	ldr	r0, [pc, #220]	; (3488 <hci_tx_thread+0x264>)
    33aa:	f7fd fdef 	bl	f8c <printk>
	err = bt_send(buf);
    33ae:	4638      	mov	r0, r7
    33b0:	f7ff f8e8 	bl	2584 <bt_send>
	if (err) {
    33b4:	b1f8      	cbz	r0, 33f6 <hci_tx_thread+0x1d2>
		BT_ERR("Unable to send to driver (err %d)", err);
    33b6:	4b2d      	ldr	r3, [pc, #180]	; (346c <hci_tx_thread+0x248>)
    33b8:	4a26      	ldr	r2, [pc, #152]	; (3454 <hci_tx_thread+0x230>)
    33ba:	4921      	ldr	r1, [pc, #132]	; (3440 <hci_tx_thread+0x21c>)
    33bc:	9001      	str	r0, [sp, #4]
    33be:	9402      	str	r4, [sp, #8]
    33c0:	9400      	str	r4, [sp, #0]
    33c2:	4832      	ldr	r0, [pc, #200]	; (348c <hci_tx_thread+0x268>)
    33c4:	f7fd fde2 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    33c8:	482d      	ldr	r0, [pc, #180]	; (3480 <hci_tx_thread+0x25c>)
    33ca:	f010 fe2e 	bl	1402a <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    33ce:	4638      	mov	r0, r7
    33d0:	f00f fc34 	bl	12c3c <net_buf_id>
    33d4:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    33d8:	2200      	movs	r2, #0
    33da:	211f      	movs	r1, #31
    33dc:	8840      	ldrh	r0, [r0, #2]
    33de:	f7fe fe13 	bl	2008 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    33e2:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
    33e6:	f00f fce7 	bl	12db8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    33ea:	2300      	movs	r3, #0
		net_buf_unref(buf);
    33ec:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    33ee:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
		net_buf_unref(buf);
    33f2:	f00f fce1 	bl	12db8 <net_buf_unref>
	for (; count; ev++, count--) {
    33f6:	3514      	adds	r5, #20
    33f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    33fc:	e761      	b.n	32c2 <hci_tx_thread+0x9e>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    33fe:	f1b9 0f01 	cmp.w	r9, #1
    3402:	d104      	bne.n	340e <hci_tx_thread+0x1ea>
					conn = CONTAINER_OF(ev->fifo,
    3404:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    3406:	3818      	subs	r0, #24
    3408:	f001 f894 	bl	4534 <bt_conn_notify_tx>
    340c:	e7f3      	b.n	33f6 <hci_tx_thread+0x1d2>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    340e:	f1b9 0f02 	cmp.w	r9, #2
    3412:	d1f0      	bne.n	33f6 <hci_tx_thread+0x1d2>
					conn = CONTAINER_OF(ev->fifo,
    3414:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    3416:	3828      	subs	r0, #40	; 0x28
    3418:	f001 fcf0 	bl	4dfc <bt_conn_process_tx>
    341c:	e7eb      	b.n	33f6 <hci_tx_thread+0x1d2>
		switch (ev->state) {
    341e:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3420:	9402      	str	r4, [sp, #8]
    3422:	9400      	str	r4, [sp, #0]
    3424:	465b      	mov	r3, fp
    3426:	4a1a      	ldr	r2, [pc, #104]	; (3490 <hci_tx_thread+0x26c>)
    3428:	4905      	ldr	r1, [pc, #20]	; (3440 <hci_tx_thread+0x21c>)
    342a:	481a      	ldr	r0, [pc, #104]	; (3494 <hci_tx_thread+0x270>)
    342c:	f7fd fdae 	bl	f8c <printk>
    3430:	e7e1      	b.n	33f6 <hci_tx_thread+0x1d2>
    3432:	bf00      	nop
    3434:	00014b99 	.word	0x00014b99
    3438:	000152ad 	.word	0x000152ad
    343c:	00015f9d 	.word	0x00015f9d
    3440:	00015fa4 	.word	0x00015fa4
    3444:	0001606e 	.word	0x0001606e
    3448:	20003b54 	.word	0x20003b54
    344c:	0001608b 	.word	0x0001608b
    3450:	20003b40 	.word	0x20003b40
    3454:	00015f55 	.word	0x00015f55
    3458:	000160be 	.word	0x000160be
    345c:	0001529e 	.word	0x0001529e
    3460:	000160e8 	.word	0x000160e8
    3464:	20003a68 	.word	0x20003a68
    3468:	00016106 	.word	0x00016106
    346c:	00015295 	.word	0x00015295
    3470:	00016128 	.word	0x00016128
    3474:	20003b2c 	.word	0x20003b2c
    3478:	00016151 	.word	0x00016151
    347c:	00016176 	.word	0x00016176
    3480:	20003b10 	.word	0x20003b10
    3484:	000161a1 	.word	0x000161a1
    3488:	000161cc 	.word	0x000161cc
    348c:	000155ce 	.word	0x000155ce
    3490:	00015fdf 	.word	0x00015fdf
    3494:	0001620b 	.word	0x0001620b
    3498:	2000027c 	.word	0x2000027c

0000349c <bt_recv>:
{
    349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a0:	b097      	sub	sp, #92	; 0x5c
    34a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    34a4:	f010 fdb2 	bl	1400c <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    34a8:	4ead      	ldr	r6, [pc, #692]	; (3760 <bt_recv+0x2c4>)
    34aa:	89a3      	ldrh	r3, [r4, #12]
    34ac:	9303      	str	r3, [sp, #12]
    34ae:	9001      	str	r0, [sp, #4]
    34b0:	9604      	str	r6, [sp, #16]
    34b2:	9402      	str	r4, [sp, #8]
    34b4:	9600      	str	r6, [sp, #0]
    34b6:	4bab      	ldr	r3, [pc, #684]	; (3764 <bt_recv+0x2c8>)
    34b8:	4aab      	ldr	r2, [pc, #684]	; (3768 <bt_recv+0x2cc>)
    34ba:	49ac      	ldr	r1, [pc, #688]	; (376c <bt_recv+0x2d0>)
    34bc:	48ac      	ldr	r0, [pc, #688]	; (3770 <bt_recv+0x2d4>)
    34be:	f7fd fd65 	bl	f8c <printk>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    34c2:	7d27      	ldrb	r7, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    34c4:	2f01      	cmp	r7, #1
    34c6:	4635      	mov	r5, r6
    34c8:	d05b      	beq.n	3582 <bt_recv+0xe6>
    34ca:	2f03      	cmp	r7, #3
    34cc:	f040 8420 	bne.w	3d10 <bt_recv+0x874>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    34d0:	68a7      	ldr	r7, [r4, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    34d2:	887d      	ldrh	r5, [r7, #2]
    34d4:	f010 fd9a 	bl	1400c <_impl_k_current_get>
	BT_DBG("buf %p", buf);
    34d8:	4aa3      	ldr	r2, [pc, #652]	; (3768 <bt_recv+0x2cc>)
    34da:	9001      	str	r0, [sp, #4]
    34dc:	4ba5      	ldr	r3, [pc, #660]	; (3774 <bt_recv+0x2d8>)
    34de:	49a3      	ldr	r1, [pc, #652]	; (376c <bt_recv+0x2d0>)
    34e0:	9603      	str	r6, [sp, #12]
    34e2:	9402      	str	r4, [sp, #8]
    34e4:	9600      	str	r6, [sp, #0]
    34e6:	48a4      	ldr	r0, [pc, #656]	; (3778 <bt_recv+0x2dc>)
    34e8:	f7fd fd50 	bl	f8c <printk>
	handle = sys_le16_to_cpu(hdr->handle);
    34ec:	883b      	ldrh	r3, [r7, #0]
	flags = bt_acl_flags(handle);
    34ee:	0b1f      	lsrs	r7, r3, #12
	acl(buf)->handle = bt_acl_handle(handle);
    34f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    34f4:	82e3      	strh	r3, [r4, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    34f6:	23ff      	movs	r3, #255	; 0xff
    34f8:	7563      	strb	r3, [r4, #21]
	net_buf_pull(buf, sizeof(*hdr));
    34fa:	2104      	movs	r1, #4
    34fc:	f104 0008 	add.w	r0, r4, #8
    3500:	f00f fcab 	bl	12e5a <net_buf_simple_pull>
    3504:	f010 fd82 	bl	1400c <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);
    3508:	8ae3      	ldrh	r3, [r4, #22]
    350a:	9302      	str	r3, [sp, #8]
    350c:	9001      	str	r0, [sp, #4]
    350e:	4b99      	ldr	r3, [pc, #612]	; (3774 <bt_recv+0x2d8>)
    3510:	9605      	str	r6, [sp, #20]
    3512:	9704      	str	r7, [sp, #16]
    3514:	9503      	str	r5, [sp, #12]
    3516:	9600      	str	r6, [sp, #0]
    3518:	4a93      	ldr	r2, [pc, #588]	; (3768 <bt_recv+0x2cc>)
    351a:	4994      	ldr	r1, [pc, #592]	; (376c <bt_recv+0x2d0>)
    351c:	4897      	ldr	r0, [pc, #604]	; (377c <bt_recv+0x2e0>)
    351e:	f7fd fd35 	bl	f8c <printk>
	if (buf->len != len) {
    3522:	89a3      	ldrh	r3, [r4, #12]
    3524:	429d      	cmp	r5, r3
    3526:	d00d      	beq.n	3544 <bt_recv+0xa8>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3528:	9301      	str	r3, [sp, #4]
    352a:	9603      	str	r6, [sp, #12]
    352c:	9502      	str	r5, [sp, #8]
    352e:	9600      	str	r6, [sp, #0]
    3530:	4b90      	ldr	r3, [pc, #576]	; (3774 <bt_recv+0x2d8>)
    3532:	4a93      	ldr	r2, [pc, #588]	; (3780 <bt_recv+0x2e4>)
    3534:	498d      	ldr	r1, [pc, #564]	; (376c <bt_recv+0x2d0>)
    3536:	4893      	ldr	r0, [pc, #588]	; (3784 <bt_recv+0x2e8>)
    3538:	f7fd fd28 	bl	f8c <printk>
	net_buf_unref(buf);
    353c:	4620      	mov	r0, r4
    353e:	f00f fc3b 	bl	12db8 <net_buf_unref>
    3542:	e01a      	b.n	357a <bt_recv+0xde>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3544:	8ae0      	ldrh	r0, [r4, #22]
    3546:	f001 fa23 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    354a:	4605      	mov	r5, r0
    354c:	b950      	cbnz	r0, 3564 <bt_recv+0xc8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    354e:	8ae3      	ldrh	r3, [r4, #22]
    3550:	9301      	str	r3, [sp, #4]
    3552:	4a8b      	ldr	r2, [pc, #556]	; (3780 <bt_recv+0x2e4>)
    3554:	4b87      	ldr	r3, [pc, #540]	; (3774 <bt_recv+0x2d8>)
    3556:	4985      	ldr	r1, [pc, #532]	; (376c <bt_recv+0x2d0>)
    3558:	488b      	ldr	r0, [pc, #556]	; (3788 <bt_recv+0x2ec>)
    355a:	9602      	str	r6, [sp, #8]
    355c:	9600      	str	r6, [sp, #0]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    355e:	f7fd fd15 	bl	f8c <printk>
    3562:	e7eb      	b.n	353c <bt_recv+0xa0>
	acl(buf)->id = bt_conn_get_id(conn);
    3564:	f001 fcba 	bl	4edc <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    3568:	463a      	mov	r2, r7
	acl(buf)->id = bt_conn_get_id(conn);
    356a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    356c:	4621      	mov	r1, r4
    356e:	4628      	mov	r0, r5
    3570:	f000 ff20 	bl	43b4 <bt_conn_recv>
	bt_conn_unref(conn);
    3574:	4628      	mov	r0, r5
    3576:	f001 fa79 	bl	4a6c <bt_conn_unref>
		return 0;
    357a:	2000      	movs	r0, #0
}
    357c:	b017      	add	sp, #92	; 0x5c
    357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3582:	f8d4 8008 	ldr.w	r8, [r4, #8]
    3586:	f010 fd41 	bl	1400c <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    358a:	9603      	str	r6, [sp, #12]
    358c:	f898 3000 	ldrb.w	r3, [r8]
    3590:	9302      	str	r3, [sp, #8]
    3592:	9001      	str	r0, [sp, #4]
    3594:	4b7d      	ldr	r3, [pc, #500]	; (378c <bt_recv+0x2f0>)
    3596:	9600      	str	r6, [sp, #0]
    3598:	4a73      	ldr	r2, [pc, #460]	; (3768 <bt_recv+0x2cc>)
    359a:	4974      	ldr	r1, [pc, #464]	; (376c <bt_recv+0x2d0>)
    359c:	487c      	ldr	r0, [pc, #496]	; (3790 <bt_recv+0x2f4>)
    359e:	f7fd fcf5 	bl	f8c <printk>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    35a2:	f898 3000 	ldrb.w	r3, [r8]
    35a6:	2b13      	cmp	r3, #19
    35a8:	f200 83c1 	bhi.w	3d2e <bt_recv+0x892>
    35ac:	409f      	lsls	r7, r3
    35ae:	f417 2f0c 	tst.w	r7, #573440	; 0x8c000
    35b2:	f000 83bc 	beq.w	3d2e <bt_recv+0x892>
    35b6:	9601      	str	r6, [sp, #4]
    35b8:	9600      	str	r6, [sp, #0]
    35ba:	4b74      	ldr	r3, [pc, #464]	; (378c <bt_recv+0x2f0>)
    35bc:	4a70      	ldr	r2, [pc, #448]	; (3780 <bt_recv+0x2e4>)
    35be:	496b      	ldr	r1, [pc, #428]	; (376c <bt_recv+0x2d0>)
    35c0:	4874      	ldr	r0, [pc, #464]	; (3794 <bt_recv+0x2f8>)
    35c2:	f7fd fce3 	bl	f8c <printk>
    35c6:	4040      	eors	r0, r0
    35c8:	f380 8811 	msr	BASEPRI, r0
    35cc:	f04f 0004 	mov.w	r0, #4
    35d0:	df02      	svc	2
    35d2:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    35d4:	f8b7 9001 	ldrh.w	r9, [r7, #1]
    35d8:	f010 fd18 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u handle %u reason %u", evt->status, handle,
    35dc:	9505      	str	r5, [sp, #20]
    35de:	78fb      	ldrb	r3, [r7, #3]
    35e0:	9304      	str	r3, [sp, #16]
    35e2:	f8cd 900c 	str.w	r9, [sp, #12]
    35e6:	783b      	ldrb	r3, [r7, #0]
    35e8:	9302      	str	r3, [sp, #8]
    35ea:	9001      	str	r0, [sp, #4]
    35ec:	9500      	str	r5, [sp, #0]
    35ee:	4b6a      	ldr	r3, [pc, #424]	; (3798 <bt_recv+0x2fc>)
    35f0:	4a5d      	ldr	r2, [pc, #372]	; (3768 <bt_recv+0x2cc>)
    35f2:	495e      	ldr	r1, [pc, #376]	; (376c <bt_recv+0x2d0>)
    35f4:	4869      	ldr	r0, [pc, #420]	; (379c <bt_recv+0x300>)
    35f6:	f7fd fcc9 	bl	f8c <printk>
	if (evt->status) {
    35fa:	f897 8000 	ldrb.w	r8, [r7]
    35fe:	f1b8 0f00 	cmp.w	r8, #0
    3602:	d19b      	bne.n	353c <bt_recv+0xa0>
	conn = bt_conn_lookup_handle(handle);
    3604:	4648      	mov	r0, r9
    3606:	f001 f9c3 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    360a:	4606      	mov	r6, r0
    360c:	b9c0      	cbnz	r0, 3640 <bt_recv+0x1a4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    360e:	9502      	str	r5, [sp, #8]
    3610:	e88d 0220 	stmia.w	sp, {r5, r9}
    3614:	4b60      	ldr	r3, [pc, #384]	; (3798 <bt_recv+0x2fc>)
    3616:	4a5a      	ldr	r2, [pc, #360]	; (3780 <bt_recv+0x2e4>)
    3618:	4954      	ldr	r1, [pc, #336]	; (376c <bt_recv+0x2d0>)
    361a:	4861      	ldr	r0, [pc, #388]	; (37a0 <bt_recv+0x304>)
    361c:	f7fd fcb6 	bl	f8c <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3620:	2107      	movs	r1, #7
    3622:	4860      	ldr	r0, [pc, #384]	; (37a4 <bt_recv+0x308>)
    3624:	f7fe fd66 	bl	20f4 <atomic_test_bit>
    3628:	2800      	cmp	r0, #0
    362a:	d087      	beq.n	353c <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    362c:	2106      	movs	r1, #6
    362e:	485d      	ldr	r0, [pc, #372]	; (37a4 <bt_recv+0x308>)
    3630:	f7fe fd60 	bl	20f4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3634:	2800      	cmp	r0, #0
    3636:	d181      	bne.n	353c <bt_recv+0xa0>
		set_advertise_enable(true);
    3638:	2001      	movs	r0, #1
    363a:	f7fe fecd 	bl	23d8 <set_advertise_enable>
    363e:	e77d      	b.n	353c <bt_recv+0xa0>
	conn->err = evt->reason;
    3640:	78fb      	ldrb	r3, [r7, #3]
    3642:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    3644:	4958      	ldr	r1, [pc, #352]	; (37a8 <bt_recv+0x30c>)
    3646:	4859      	ldr	r0, [pc, #356]	; (37ac <bt_recv+0x310>)
    3648:	f010 fea0 	bl	1438c <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    364c:	4641      	mov	r1, r8
    364e:	4630      	mov	r0, r6
    3650:	f001 f8c2 	bl	47d8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    3654:	78b5      	ldrb	r5, [r6, #2]
	conn->handle = 0;
    3656:	f8a6 8000 	strh.w	r8, [r6]
	if (conn->type != BT_CONN_TYPE_LE) {
    365a:	b10d      	cbz	r5, 3660 <bt_recv+0x1c4>
	bt_conn_unref(conn);
    365c:	4630      	mov	r0, r6
    365e:	e0e7      	b.n	3830 <bt_recv+0x394>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3660:	4629      	mov	r1, r5
    3662:	1d30      	adds	r0, r6, #4
    3664:	f7fe fd46 	bl	20f4 <atomic_test_bit>
    3668:	b130      	cbz	r0, 3678 <bt_recv+0x1dc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    366a:	4630      	mov	r0, r6
    366c:	2101      	movs	r1, #1
    366e:	f001 f8b3 	bl	47d8 <bt_conn_set_state>
		bt_le_scan_update(false);
    3672:	4628      	mov	r0, r5
    3674:	f7ff f84a 	bl	270c <bt_le_scan_update>
	bt_conn_unref(conn);
    3678:	4630      	mov	r0, r6
    367a:	f001 f9f7 	bl	4a6c <bt_conn_unref>
    367e:	e7cf      	b.n	3620 <bt_recv+0x184>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3680:	68a6      	ldr	r6, [r4, #8]
    3682:	f010 fcc3 	bl	1400c <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    3686:	9503      	str	r5, [sp, #12]
    3688:	7833      	ldrb	r3, [r6, #0]
    368a:	9302      	str	r3, [sp, #8]
    368c:	9001      	str	r0, [sp, #4]
    368e:	4b48      	ldr	r3, [pc, #288]	; (37b0 <bt_recv+0x314>)
    3690:	4a35      	ldr	r2, [pc, #212]	; (3768 <bt_recv+0x2cc>)
    3692:	4936      	ldr	r1, [pc, #216]	; (376c <bt_recv+0x2d0>)
    3694:	9500      	str	r5, [sp, #0]
    3696:	4847      	ldr	r0, [pc, #284]	; (37b4 <bt_recv+0x318>)
    3698:	f7fd fc78 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    369c:	2101      	movs	r1, #1
    369e:	4638      	mov	r0, r7
    36a0:	f00f fbdb 	bl	12e5a <net_buf_simple_pull>
	switch (evt->subevent) {
    36a4:	7836      	ldrb	r6, [r6, #0]
    36a6:	1e73      	subs	r3, r6, #1
    36a8:	2b0b      	cmp	r3, #11
    36aa:	f200 8321 	bhi.w	3cf0 <bt_recv+0x854>
    36ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    36b2:	000c      	.short	0x000c
    36b4:	0089022f 	.word	0x0089022f
    36b8:	031f00c2 	.word	0x031f00c2
    36bc:	015700fb 	.word	0x015700fb
    36c0:	021301c2 	.word	0x021301c2
    36c4:	031f0087 	.word	0x031f0087
    36c8:	0189      	.short	0x0189
    36ca:	68a6      	ldr	r6, [r4, #8]
    36cc:	f010 fc9e 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u role %u %s", evt->status, evt->role,
    36d0:	1d37      	adds	r7, r6, #4
    36d2:	4680      	mov	r8, r0
    36d4:	4638      	mov	r0, r7
    36d6:	f896 9000 	ldrb.w	r9, [r6]
    36da:	f896 a003 	ldrb.w	sl, [r6, #3]
    36de:	f7fe fb45 	bl	1d6c <bt_addr_le_str>
    36e2:	4a21      	ldr	r2, [pc, #132]	; (3768 <bt_recv+0x2cc>)
    36e4:	9505      	str	r5, [sp, #20]
    36e6:	9004      	str	r0, [sp, #16]
    36e8:	e88d 0720 	stmia.w	sp, {r5, r8, r9, sl}
    36ec:	4b32      	ldr	r3, [pc, #200]	; (37b8 <bt_recv+0x31c>)
    36ee:	491f      	ldr	r1, [pc, #124]	; (376c <bt_recv+0x2d0>)
    36f0:	4832      	ldr	r0, [pc, #200]	; (37bc <bt_recv+0x320>)
    36f2:	f7fd fc4b 	bl	f8c <printk>
	enh.status         = evt->status;
    36f6:	7833      	ldrb	r3, [r6, #0]
    36f8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	enh.handle         = evt->handle;
    36fc:	f8b6 3001 	ldrh.w	r3, [r6, #1]
    3700:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.role           = evt->role;
    3704:	78f3      	ldrb	r3, [r6, #3]
    3706:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	enh.interval       = evt->interval;
    370a:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    370e:	f8ad 304f 	strh.w	r3, [sp, #79]	; 0x4f
	enh.latency        = evt->latency;
    3712:	f8b6 300d 	ldrh.w	r3, [r6, #13]
    3716:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
	enh.supv_timeout   = evt->supv_timeout;
    371a:	f8b6 300f 	ldrh.w	r3, [r6, #15]
    371e:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	enh.clock_accuracy = evt->clock_accuracy;
    3722:	7c73      	ldrb	r3, [r6, #17]
    3724:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    3728:	4639      	mov	r1, r7
    372a:	a80f      	add	r0, sp, #60	; 0x3c
    372c:	f7fe fc38 	bl	1fa0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3730:	2500      	movs	r5, #0
    3732:	2206      	movs	r2, #6
    3734:	a90a      	add	r1, sp, #40	; 0x28
    3736:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    373a:	950a      	str	r5, [sp, #40]	; 0x28
    373c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    3740:	f7fe fa68 	bl	1c14 <memcpy>
    3744:	2206      	movs	r2, #6
    3746:	a90c      	add	r1, sp, #48	; 0x30
    3748:	f10d 0049 	add.w	r0, sp, #73	; 0x49
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    374c:	950c      	str	r5, [sp, #48]	; 0x30
    374e:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    3752:	f7fe fa5f 	bl	1c14 <memcpy>
	le_enh_conn_complete(&enh);
    3756:	a80e      	add	r0, sp, #56	; 0x38
		le_enh_conn_complete((void *)buf->data);
    3758:	f7ff fc50 	bl	2ffc <le_enh_conn_complete>
    375c:	e6ee      	b.n	353c <bt_recv+0xa0>
    375e:	bf00      	nop
    3760:	00014b99 	.word	0x00014b99
    3764:	000153eb 	.word	0x000153eb
    3768:	00015f9d 	.word	0x00015f9d
    376c:	00015fa4 	.word	0x00015fa4
    3770:	000159ca 	.word	0x000159ca
    3774:	00015138 	.word	0x00015138
    3778:	00015588 	.word	0x00015588
    377c:	000159ed 	.word	0x000159ed
    3780:	00015f55 	.word	0x00015f55
    3784:	00015a1c 	.word	0x00015a1c
    3788:	00015a50 	.word	0x00015a50
    378c:	0001528b 	.word	0x0001528b
    3790:	00015a82 	.word	0x00015a82
    3794:	00015d4a 	.word	0x00015d4a
    3798:	0001515a 	.word	0x0001515a
    379c:	00015aa4 	.word	0x00015aa4
    37a0:	00015ad7 	.word	0x00015ad7
    37a4:	20003ad8 	.word	0x20003ad8
    37a8:	00015b0d 	.word	0x00015b0d
    37ac:	00001f65 	.word	0x00001f65
    37b0:	00015279 	.word	0x00015279
    37b4:	00015b11 	.word	0x00015b11
    37b8:	00015184 	.word	0x00015184
    37bc:	00015b36 	.word	0x00015b36
    37c0:	68a0      	ldr	r0, [r4, #8]
    37c2:	e7c9      	b.n	3758 <bt_recv+0x2bc>
    37c4:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    37c6:	f8b6 8001 	ldrh.w	r8, [r6, #1]
    37ca:	f010 fc1f 	bl	1400c <_impl_k_current_get>
	BT_DBG("status %u, handle %u", evt->status, handle);
    37ce:	9504      	str	r5, [sp, #16]
    37d0:	f8cd 800c 	str.w	r8, [sp, #12]
    37d4:	7833      	ldrb	r3, [r6, #0]
    37d6:	9302      	str	r3, [sp, #8]
    37d8:	9001      	str	r0, [sp, #4]
    37da:	4bad      	ldr	r3, [pc, #692]	; (3a90 <bt_recv+0x5f4>)
    37dc:	4aad      	ldr	r2, [pc, #692]	; (3a94 <bt_recv+0x5f8>)
    37de:	49ae      	ldr	r1, [pc, #696]	; (3a98 <bt_recv+0x5fc>)
    37e0:	9500      	str	r5, [sp, #0]
    37e2:	48ae      	ldr	r0, [pc, #696]	; (3a9c <bt_recv+0x600>)
    37e4:	f7fd fbd2 	bl	f8c <printk>
	conn = bt_conn_lookup_handle(handle);
    37e8:	4640      	mov	r0, r8
    37ea:	f001 f8d1 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    37ee:	4607      	mov	r7, r0
    37f0:	b938      	cbnz	r0, 3802 <bt_recv+0x366>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37f2:	e88d 0120 	stmia.w	sp, {r5, r8}
    37f6:	4ba6      	ldr	r3, [pc, #664]	; (3a90 <bt_recv+0x5f4>)
    37f8:	9502      	str	r5, [sp, #8]
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37fa:	4aa9      	ldr	r2, [pc, #676]	; (3aa0 <bt_recv+0x604>)
    37fc:	49a6      	ldr	r1, [pc, #664]	; (3a98 <bt_recv+0x5fc>)
    37fe:	48a9      	ldr	r0, [pc, #676]	; (3aa4 <bt_recv+0x608>)
    3800:	e6ad      	b.n	355e <bt_recv+0xc2>
	if (!evt->status) {
    3802:	7833      	ldrb	r3, [r6, #0]
    3804:	b99b      	cbnz	r3, 382e <bt_recv+0x392>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3806:	7932      	ldrb	r2, [r6, #4]
    3808:	78f3      	ldrb	r3, [r6, #3]
    380a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    380e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3812:	79b2      	ldrb	r2, [r6, #6]
    3814:	7973      	ldrb	r3, [r6, #5]
    3816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    381a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    381e:	79f3      	ldrb	r3, [r6, #7]
    3820:	7a32      	ldrb	r2, [r6, #8]
    3822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3826:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    382a:	f000 fd87 	bl	433c <notify_le_param_updated>
	bt_conn_unref(conn);
    382e:	4638      	mov	r0, r7
	bt_conn_unref(conn);
    3830:	f001 f91c 	bl	4a6c <bt_conn_unref>
    3834:	e682      	b.n	353c <bt_recv+0xa0>
    3836:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3838:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    383c:	4640      	mov	r0, r8
    383e:	f001 f8a7 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    3842:	4606      	mov	r6, r0
    3844:	b920      	cbnz	r0, 3850 <bt_recv+0x3b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3846:	9502      	str	r5, [sp, #8]
    3848:	e88d 0120 	stmia.w	sp, {r5, r8}
    384c:	4b96      	ldr	r3, [pc, #600]	; (3aa8 <bt_recv+0x60c>)
    384e:	e7d4      	b.n	37fa <bt_recv+0x35e>
	if (!evt->status) {
    3850:	783b      	ldrb	r3, [r7, #0]
    3852:	b923      	cbnz	r3, 385e <bt_recv+0x3c2>
		memcpy(conn->le.features, evt->features,
    3854:	2208      	movs	r2, #8
    3856:	1cf9      	adds	r1, r7, #3
    3858:	3064      	adds	r0, #100	; 0x64
    385a:	f7fe f9db 	bl	1c14 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    385e:	4d93      	ldr	r5, [pc, #588]	; (3aac <bt_recv+0x610>)
    3860:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3864:	07d2      	lsls	r2, r2, #31
    3866:	d50c      	bpl.n	3882 <bt_recv+0x3e6>
    3868:	f896 3065 	ldrb.w	r3, [r6, #101]	; 0x65
    386c:	07db      	lsls	r3, r3, #31
    386e:	d508      	bpl.n	3882 <bt_recv+0x3e6>
		err = hci_le_set_phy(conn);
    3870:	4630      	mov	r0, r6
    3872:	f7ff fb79 	bl	2f68 <hci_le_set_phy.isra.27>
		if (!err) {
    3876:	b920      	cbnz	r0, 3882 <bt_recv+0x3e6>
    3878:	2180      	movs	r1, #128	; 0x80
    387a:	1d30      	adds	r0, r6, #4
    387c:	f7fe fb93 	bl	1fa6 <atomic_or>
    3880:	e6ec      	b.n	365c <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3882:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3886:	069f      	lsls	r7, r3, #26
    3888:	f140 8098 	bpl.w	39bc <bt_recv+0x520>
    388c:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3890:	069d      	lsls	r5, r3, #26
    3892:	f140 8093 	bpl.w	39bc <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3896:	4630      	mov	r0, r6
    3898:	f7ff fb86 	bl	2fa8 <hci_le_set_data_len.isra.28>
		if (!err) {
    389c:	2800      	cmp	r0, #0
    389e:	f040 808d 	bne.w	39bc <bt_recv+0x520>
    38a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    38a6:	e7e8      	b.n	387a <bt_recv+0x3de>
    38a8:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    38aa:	78d9      	ldrb	r1, [r3, #3]
    38ac:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    38ae:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    38b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38b4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    38b8:	7959      	ldrb	r1, [r3, #5]
    38ba:	791a      	ldrb	r2, [r3, #4]
    38bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38c0:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
	param.latency = sys_le16_to_cpu(evt->latency);
    38c4:	799a      	ldrb	r2, [r3, #6]
    38c6:	79d9      	ldrb	r1, [r3, #7]
    38c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    38cc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38d0:	7a1a      	ldrb	r2, [r3, #8]
    38d2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    38d4:	b2be      	uxth	r6, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    38da:	4630      	mov	r0, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    38dc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	conn = bt_conn_lookup_handle(handle);
    38e0:	f001 f856 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    38e4:	4680      	mov	r8, r0
    38e6:	b968      	cbnz	r0, 3904 <bt_recv+0x468>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    38e8:	9502      	str	r5, [sp, #8]
    38ea:	e88d 0060 	stmia.w	sp, {r5, r6}
    38ee:	4b70      	ldr	r3, [pc, #448]	; (3ab0 <bt_recv+0x614>)
    38f0:	4a6b      	ldr	r2, [pc, #428]	; (3aa0 <bt_recv+0x604>)
    38f2:	4969      	ldr	r1, [pc, #420]	; (3a98 <bt_recv+0x5fc>)
    38f4:	486b      	ldr	r0, [pc, #428]	; (3aa4 <bt_recv+0x608>)
    38f6:	f7fd fb49 	bl	f8c <printk>
		return le_conn_param_neg_reply(handle,
    38fa:	2102      	movs	r1, #2
    38fc:	4630      	mov	r0, r6
    38fe:	f7ff fc77 	bl	31f0 <le_conn_param_neg_reply>
    3902:	e61b      	b.n	353c <bt_recv+0xa0>
	if (!le_param_req(conn, &param)) {
    3904:	a90e      	add	r1, sp, #56	; 0x38
    3906:	f000 fd2d 	bl	4364 <le_param_req>
    390a:	b928      	cbnz	r0, 3918 <bt_recv+0x47c>
		err = le_conn_param_neg_reply(handle,
    390c:	211e      	movs	r1, #30
    390e:	4630      	mov	r0, r6
    3910:	f7ff fc6e 	bl	31f0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3914:	4640      	mov	r0, r8
    3916:	e78b      	b.n	3830 <bt_recv+0x394>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3918:	210e      	movs	r1, #14
    391a:	f242 0020 	movw	r0, #8224	; 0x2020
    391e:	f7fe fbf7 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    3922:	4606      	mov	r6, r0
    3924:	2800      	cmp	r0, #0
    3926:	d0f5      	beq.n	3914 <bt_recv+0x478>
	cp = net_buf_add(buf, sizeof(*cp));
    3928:	210e      	movs	r1, #14
    392a:	3008      	adds	r0, #8
    392c:	f00f fa76 	bl	12e1c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3930:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    3932:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3934:	2100      	movs	r1, #0
    3936:	f7fe f999 	bl	1c6c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    393a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    393e:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    3940:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    3944:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3946:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    394a:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    394c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
	cp->handle = sys_cpu_to_le16(handle);
    3950:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3952:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3954:	4631      	mov	r1, r6
    3956:	f242 0020 	movw	r0, #8224	; 0x2020
    395a:	f7fe fe3d 	bl	25d8 <bt_hci_cmd_send>
    395e:	e7d9      	b.n	3914 <bt_recv+0x478>
    3960:	68a3      	ldr	r3, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3962:	f8b3 b000 	ldrh.w	fp, [r3]
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    3966:	885f      	ldrh	r7, [r3, #2]
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    3968:	f8b3 9006 	ldrh.w	r9, [r3, #6]
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    396c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    3970:	f8b3 a008 	ldrh.w	sl, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    3974:	4658      	mov	r0, fp
    3976:	f001 f80b 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    397a:	4606      	mov	r6, r0
    397c:	b920      	cbnz	r0, 3988 <bt_recv+0x4ec>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    397e:	9502      	str	r5, [sp, #8]
    3980:	e88d 0820 	stmia.w	sp, {r5, fp}
    3984:	4b4b      	ldr	r3, [pc, #300]	; (3ab4 <bt_recv+0x618>)
    3986:	e738      	b.n	37fa <bt_recv+0x35e>
    3988:	f010 fb40 	bl	1400c <_impl_k_current_get>
	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
    398c:	4b49      	ldr	r3, [pc, #292]	; (3ab4 <bt_recv+0x618>)
    398e:	9001      	str	r0, [sp, #4]
    3990:	4a40      	ldr	r2, [pc, #256]	; (3a94 <bt_recv+0x5f8>)
    3992:	4941      	ldr	r1, [pc, #260]	; (3a98 <bt_recv+0x5fc>)
    3994:	9506      	str	r5, [sp, #24]
    3996:	f8cd a014 	str.w	sl, [sp, #20]
    399a:	f8cd 9010 	str.w	r9, [sp, #16]
    399e:	f8cd 800c 	str.w	r8, [sp, #12]
    39a2:	9702      	str	r7, [sp, #8]
    39a4:	9500      	str	r5, [sp, #0]
    39a6:	4844      	ldr	r0, [pc, #272]	; (3ab8 <bt_recv+0x61c>)
    39a8:	f7fd faf0 	bl	f8c <printk>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39ac:	f46f 7180 	mvn.w	r1, #256	; 0x100
    39b0:	1d30      	adds	r0, r6, #4
    39b2:	f7fe fb09 	bl	1fc8 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    39b6:	05c0      	lsls	r0, r0, #23
    39b8:	f57f ae50 	bpl.w	365c <bt_recv+0x1c0>
	update_conn_param(conn);
    39bc:	4630      	mov	r0, r6
    39be:	f7fe fb15 	bl	1fec <update_conn_param>
    39c2:	e64b      	b.n	365c <bt_recv+0x1c0>
    39c4:	68a7      	ldr	r7, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    39c6:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    39ca:	4640      	mov	r0, r8
    39cc:	f000 ffe0 	bl	4990 <bt_conn_lookup_handle>
	if (!conn) {
    39d0:	4606      	mov	r6, r0
    39d2:	b920      	cbnz	r0, 39de <bt_recv+0x542>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    39d4:	9502      	str	r5, [sp, #8]
    39d6:	e88d 0120 	stmia.w	sp, {r5, r8}
    39da:	4b38      	ldr	r3, [pc, #224]	; (3abc <bt_recv+0x620>)
    39dc:	e70d      	b.n	37fa <bt_recv+0x35e>
    39de:	f010 fb15 	bl	1400c <_impl_k_current_get>
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    39e2:	9505      	str	r5, [sp, #20]
    39e4:	793b      	ldrb	r3, [r7, #4]
    39e6:	9304      	str	r3, [sp, #16]
    39e8:	78fb      	ldrb	r3, [r7, #3]
    39ea:	9303      	str	r3, [sp, #12]
    39ec:	783b      	ldrb	r3, [r7, #0]
    39ee:	9302      	str	r3, [sp, #8]
    39f0:	9001      	str	r0, [sp, #4]
    39f2:	9500      	str	r5, [sp, #0]
    39f4:	4b31      	ldr	r3, [pc, #196]	; (3abc <bt_recv+0x620>)
    39f6:	4a27      	ldr	r2, [pc, #156]	; (3a94 <bt_recv+0x5f8>)
    39f8:	4927      	ldr	r1, [pc, #156]	; (3a98 <bt_recv+0x5fc>)
    39fa:	4831      	ldr	r0, [pc, #196]	; (3ac0 <bt_recv+0x624>)
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    39fc:	1d35      	adds	r5, r6, #4
	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
    39fe:	f7fd fac5 	bl	f8c <printk>
    3a02:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3a06:	4628      	mov	r0, r5
    3a08:	f7fe fade 	bl	1fc8 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    3a0c:	0601      	lsls	r1, r0, #24
    3a0e:	f57f ae25 	bpl.w	365c <bt_recv+0x1c0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3a12:	4b26      	ldr	r3, [pc, #152]	; (3aac <bt_recv+0x610>)
    3a14:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3a18:	069a      	lsls	r2, r3, #26
    3a1a:	d5cf      	bpl.n	39bc <bt_recv+0x520>
    3a1c:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
    3a20:	069b      	lsls	r3, r3, #26
    3a22:	d5cb      	bpl.n	39bc <bt_recv+0x520>
		err = hci_le_set_data_len(conn);
    3a24:	4630      	mov	r0, r6
    3a26:	f7ff fabf 	bl	2fa8 <hci_le_set_data_len.isra.28>
		if (!err) {
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d1c6      	bne.n	39bc <bt_recv+0x520>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
    3a32:	4628      	mov	r0, r5
    3a34:	e722      	b.n	387c <bt_recv+0x3e0>
    3a36:	68a6      	ldr	r6, [r4, #8]
    3a38:	f010 fae8 	bl	1400c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3a3c:	9503      	str	r5, [sp, #12]
    3a3e:	7833      	ldrb	r3, [r6, #0]
    3a40:	9302      	str	r3, [sp, #8]
    3a42:	9001      	str	r0, [sp, #4]
    3a44:	4b1f      	ldr	r3, [pc, #124]	; (3ac4 <bt_recv+0x628>)
    3a46:	4a13      	ldr	r2, [pc, #76]	; (3a94 <bt_recv+0x5f8>)
    3a48:	4913      	ldr	r1, [pc, #76]	; (3a98 <bt_recv+0x5fc>)
    3a4a:	9500      	str	r5, [sp, #0]
    3a4c:	481e      	ldr	r0, [pc, #120]	; (3ac8 <bt_recv+0x62c>)
    3a4e:	f7fd fa9d 	bl	f8c <printk>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a52:	f06f 0120 	mvn.w	r1, #32
    3a56:	481d      	ldr	r0, [pc, #116]	; (3acc <bt_recv+0x630>)
    3a58:	f7fe fab6 	bl	1fc8 <atomic_and>
	if (!evt->status) {
    3a5c:	7833      	ldrb	r3, [r6, #0]
    3a5e:	b943      	cbnz	r3, 3a72 <bt_recv+0x5d6>
		memcpy(pub_key, evt->key, 64);
    3a60:	1c71      	adds	r1, r6, #1
    3a62:	2240      	movs	r2, #64	; 0x40
    3a64:	481a      	ldr	r0, [pc, #104]	; (3ad0 <bt_recv+0x634>)
    3a66:	f7fe f8d5 	bl	1c14 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a6a:	2110      	movs	r1, #16
    3a6c:	4817      	ldr	r0, [pc, #92]	; (3acc <bt_recv+0x630>)
    3a6e:	f7fe fa9a 	bl	1fa6 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a72:	4b18      	ldr	r3, [pc, #96]	; (3ad4 <bt_recv+0x638>)
    3a74:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    3a76:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a78:	2d00      	cmp	r5, #0
    3a7a:	f43f ad5f 	beq.w	353c <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    3a7e:	7832      	ldrb	r2, [r6, #0]
    3a80:	682b      	ldr	r3, [r5, #0]
    3a82:	2a00      	cmp	r2, #0
    3a84:	bf0c      	ite	eq
    3a86:	4638      	moveq	r0, r7
    3a88:	2000      	movne	r0, #0
    3a8a:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a8c:	686d      	ldr	r5, [r5, #4]
    3a8e:	e7f3      	b.n	3a78 <bt_recv+0x5dc>
    3a90:	000151f0 	.word	0x000151f0
    3a94:	00015f9d 	.word	0x00015f9d
    3a98:	00015fa4 	.word	0x00015fa4
    3a9c:	00015b60 	.word	0x00015b60
    3aa0:	00015f55 	.word	0x00015f55
    3aa4:	00015b8a 	.word	0x00015b8a
    3aa8:	0001519c 	.word	0x0001519c
    3aac:	20003a68 	.word	0x20003a68
    3ab0:	000151de 	.word	0x000151de
    3ab4:	000151b4 	.word	0x000151b4
    3ab8:	00015bbe 	.word	0x00015bbe
    3abc:	000151c7 	.word	0x000151c7
    3ac0:	00015bfa 	.word	0x00015bfa
    3ac4:	00015208 	.word	0x00015208
    3ac8:	00015c39 	.word	0x00015c39
    3acc:	20003ad8 	.word	0x20003ad8
    3ad0:	20000290 	.word	0x20000290
    3ad4:	200002d0 	.word	0x200002d0
    3ad8:	68a6      	ldr	r6, [r4, #8]
    3ada:	f010 fa97 	bl	1400c <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3ade:	9503      	str	r5, [sp, #12]
    3ae0:	7833      	ldrb	r3, [r6, #0]
    3ae2:	9500      	str	r5, [sp, #0]
	if (dh_key_cb) {
    3ae4:	4da0      	ldr	r5, [pc, #640]	; (3d68 <bt_recv+0x8cc>)
	BT_DBG("status: 0x%x", evt->status);
    3ae6:	9302      	str	r3, [sp, #8]
    3ae8:	9001      	str	r0, [sp, #4]
    3aea:	4aa0      	ldr	r2, [pc, #640]	; (3d6c <bt_recv+0x8d0>)
    3aec:	4ba0      	ldr	r3, [pc, #640]	; (3d70 <bt_recv+0x8d4>)
    3aee:	49a1      	ldr	r1, [pc, #644]	; (3d74 <bt_recv+0x8d8>)
    3af0:	48a1      	ldr	r0, [pc, #644]	; (3d78 <bt_recv+0x8dc>)
    3af2:	f7fd fa4b 	bl	f8c <printk>
	if (dh_key_cb) {
    3af6:	682a      	ldr	r2, [r5, #0]
    3af8:	2a00      	cmp	r2, #0
    3afa:	f43f ad1f 	beq.w	353c <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3afe:	7833      	ldrb	r3, [r6, #0]
    3b00:	b923      	cbnz	r3, 3b0c <bt_recv+0x670>
    3b02:	1c70      	adds	r0, r6, #1
    3b04:	4790      	blx	r2
		dh_key_cb = NULL;
    3b06:	2300      	movs	r3, #0
    3b08:	602b      	str	r3, [r5, #0]
    3b0a:	e517      	b.n	353c <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3b0c:	2000      	movs	r0, #0
    3b0e:	e7f9      	b.n	3b04 <bt_recv+0x668>
	u8_t num_reports = net_buf_pull_u8(buf);
    3b10:	4638      	mov	r0, r7
    3b12:	f00f f9aa 	bl	12e6a <net_buf_simple_pull_u8>
    3b16:	4680      	mov	r8, r0
    3b18:	f010 fa78 	bl	1400c <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3b1c:	9503      	str	r5, [sp, #12]
    3b1e:	9001      	str	r0, [sp, #4]
    3b20:	f8cd 8008 	str.w	r8, [sp, #8]
    3b24:	9500      	str	r5, [sp, #0]
    3b26:	4b95      	ldr	r3, [pc, #596]	; (3d7c <bt_recv+0x8e0>)
    3b28:	4a90      	ldr	r2, [pc, #576]	; (3d6c <bt_recv+0x8d0>)
    3b2a:	4992      	ldr	r1, [pc, #584]	; (3d74 <bt_recv+0x8d8>)
    3b2c:	4894      	ldr	r0, [pc, #592]	; (3d80 <bt_recv+0x8e4>)
    3b2e:	f7fd fa2d 	bl	f8c <printk>
	while (num_reports--) {
    3b32:	f1b8 0f00 	cmp.w	r8, #0
    3b36:	f43f ad01 	beq.w	353c <bt_recv+0xa0>
		info = (void *)buf->data;
    3b3a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3b3c:	2109      	movs	r1, #9
    3b3e:	4638      	mov	r0, r7
    3b40:	f00f f98b 	bl	12e5a <net_buf_simple_pull>
		rssi = info->data[info->length];
    3b44:	7a33      	ldrb	r3, [r6, #8]
    3b46:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3b48:	f106 0901 	add.w	r9, r6, #1
		rssi = info->data[info->length];
    3b4c:	f993 a009 	ldrsb.w	sl, [r3, #9]
    3b50:	f010 fa5c 	bl	1400c <_impl_k_current_get>
    3b54:	4683      	mov	fp, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3b56:	4648      	mov	r0, r9
    3b58:	f7fe f908 	bl	1d6c <bt_addr_le_str>
    3b5c:	9506      	str	r5, [sp, #24]
    3b5e:	f8cd a014 	str.w	sl, [sp, #20]
    3b62:	7a33      	ldrb	r3, [r6, #8]
    3b64:	9304      	str	r3, [sp, #16]
    3b66:	7833      	ldrb	r3, [r6, #0]
    3b68:	9303      	str	r3, [sp, #12]
    3b6a:	9002      	str	r0, [sp, #8]
    3b6c:	4b83      	ldr	r3, [pc, #524]	; (3d7c <bt_recv+0x8e0>)
    3b6e:	4981      	ldr	r1, [pc, #516]	; (3d74 <bt_recv+0x8d8>)
    3b70:	4a7e      	ldr	r2, [pc, #504]	; (3d6c <bt_recv+0x8d0>)
    3b72:	4884      	ldr	r0, [pc, #528]	; (3d84 <bt_recv+0x8e8>)
    3b74:	e88d 0820 	stmia.w	sp, {r5, fp}
    3b78:	f7fd fa08 	bl	f8c <printk>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b7c:	7873      	ldrb	r3, [r6, #1]
    3b7e:	3b02      	subs	r3, #2
    3b80:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3b82:	4649      	mov	r1, r9
    3b84:	a80e      	add	r0, sp, #56	; 0x38
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3b86:	f200 809d 	bhi.w	3cc4 <bt_recv+0x828>
			bt_addr_le_copy(&id_addr, &info->addr);
    3b8a:	f7fe fa09 	bl	1fa0 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3b8e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3b92:	3b02      	subs	r3, #2
    3b94:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		if (scan_dev_found_cb) {
    3b98:	f8df b218 	ldr.w	fp, [pc, #536]	; 3db4 <bt_recv+0x918>
    3b9c:	f8db 3000 	ldr.w	r3, [fp]
    3ba0:	b1bb      	cbz	r3, 3bd2 <bt_recv+0x736>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3ba2:	4638      	mov	r0, r7
    3ba4:	f00f f971 	bl	12e8a <net_buf_simple_headroom>
	state->len = buf->len;
    3ba8:	89a3      	ldrh	r3, [r4, #12]
    3baa:	9309      	str	r3, [sp, #36]	; 0x24
			buf->len = info->length;
    3bac:	7a33      	ldrb	r3, [r6, #8]
    3bae:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3bb0:	9008      	str	r0, [sp, #32]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3bb2:	463b      	mov	r3, r7
    3bb4:	7832      	ldrb	r2, [r6, #0]
    3bb6:	f8db b000 	ldr.w	fp, [fp]
    3bba:	4651      	mov	r1, sl
    3bbc:	a80e      	add	r0, sp, #56	; 0x38
    3bbe:	47d8      	blx	fp
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3bc0:	6923      	ldr	r3, [r4, #16]
    3bc2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    3bc6:	fa13 f382 	uxtah	r3, r3, r2
    3bca:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3bcc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3bd0:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3bd2:	2109      	movs	r1, #9
    3bd4:	486c      	ldr	r0, [pc, #432]	; (3d88 <bt_recv+0x8ec>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3bd6:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3bd8:	f7fe fa8c 	bl	20f4 <atomic_test_bit>
    3bdc:	4683      	mov	fp, r0
    3bde:	2800      	cmp	r0, #0
    3be0:	d166      	bne.n	3cb0 <bt_recv+0x814>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3be2:	2a01      	cmp	r2, #1
    3be4:	d864      	bhi.n	3cb0 <bt_recv+0x814>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3be6:	2101      	movs	r1, #1
    3be8:	a80e      	add	r0, sp, #56	; 0x38
    3bea:	f000 ff1d 	bl	4a28 <bt_conn_lookup_state_le>
	if (!conn) {
    3bee:	4682      	mov	sl, r0
    3bf0:	2800      	cmp	r0, #0
    3bf2:	d05d      	beq.n	3cb0 <bt_recv+0x814>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3bf4:	2108      	movs	r1, #8
    3bf6:	4864      	ldr	r0, [pc, #400]	; (3d88 <bt_recv+0x8ec>)
    3bf8:	f7fe fa7c 	bl	20f4 <atomic_test_bit>
    3bfc:	2800      	cmp	r0, #0
    3bfe:	d164      	bne.n	3cca <bt_recv+0x82e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3c00:	2102      	movs	r1, #2
    3c02:	4861      	ldr	r0, [pc, #388]	; (3d88 <bt_recv+0x8ec>)
    3c04:	f7fe fa76 	bl	20f4 <atomic_test_bit>
    3c08:	b110      	cbz	r0, 3c10 <bt_recv+0x774>
			set_random_address(&bt_dev.id_addr.a);
    3c0a:	4860      	ldr	r0, [pc, #384]	; (3d8c <bt_recv+0x8f0>)
    3c0c:	f7fe fb88 	bl	2320 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3c10:	495f      	ldr	r1, [pc, #380]	; (3d90 <bt_recv+0x8f4>)
    3c12:	f10a 004b 	add.w	r0, sl, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3c16:	f10a 0b52 	add.w	fp, sl, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3c1a:	f7fe f9c1 	bl	1fa0 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3c1e:	4649      	mov	r1, r9
    3c20:	4658      	mov	r0, fp
    3c22:	f7fe f9bd 	bl	1fa0 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3c26:	2119      	movs	r1, #25
    3c28:	f242 000d 	movw	r0, #8205	; 0x200d
    3c2c:	f7fe fa70 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    3c30:	4603      	mov	r3, r0
    3c32:	2800      	cmp	r0, #0
    3c34:	d04e      	beq.n	3cd4 <bt_recv+0x838>
	cp = net_buf_add(buf, sizeof(*cp));
    3c36:	2119      	movs	r1, #25
    3c38:	3008      	adds	r0, #8
    3c3a:	9309      	str	r3, [sp, #36]	; 0x24
    3c3c:	f00f f8ee 	bl	12e1c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3c40:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3c42:	4681      	mov	r9, r0
	memset(cp, 0, sizeof(*cp));
    3c44:	2100      	movs	r1, #0
    3c46:	f7fe f811 	bl	1c6c <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3c4a:	2200      	movs	r2, #0
    3c4c:	2160      	movs	r1, #96	; 0x60
    3c4e:	f889 1000 	strb.w	r1, [r9]
    3c52:	f889 2001 	strb.w	r2, [r9, #1]
	cp->scan_window = cp->scan_interval;
    3c56:	f889 1002 	strb.w	r1, [r9, #2]
    3c5a:	f889 2003 	strb.w	r2, [r9, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c5e:	4659      	mov	r1, fp
    3c60:	f109 0005 	add.w	r0, r9, #5
	cp->scan_window = cp->scan_interval;
    3c64:	9208      	str	r2, [sp, #32]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3c66:	f7fe f99b 	bl	1fa0 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3c6a:	f89a 104b 	ldrb.w	r1, [sl, #75]	; 0x4b
    3c6e:	f889 100c 	strb.w	r1, [r9, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3c72:	f8ba 105c 	ldrh.w	r1, [sl, #92]	; 0x5c
    3c76:	f8a9 100d 	strh.w	r1, [r9, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3c7a:	f8ba 105e 	ldrh.w	r1, [sl, #94]	; 0x5e
    3c7e:	f8a9 100f 	strh.w	r1, [r9, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3c82:	f8ba 1060 	ldrh.w	r1, [sl, #96]	; 0x60
    3c86:	f8a9 1011 	strh.w	r1, [r9, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3c8c:	f8ba 1062 	ldrh.w	r1, [sl, #98]	; 0x62
    3c90:	f8a9 1013 	strh.w	r1, [r9, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3c94:	9a08      	ldr	r2, [sp, #32]
    3c96:	4619      	mov	r1, r3
    3c98:	f242 000d 	movw	r0, #8205	; 0x200d
    3c9c:	f7fe fa96 	bl	21cc <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3ca0:	b9c0      	cbnz	r0, 3cd4 <bt_recv+0x838>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3ca2:	4650      	mov	r0, sl
    3ca4:	2102      	movs	r1, #2
    3ca6:	f000 fd97 	bl	47d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    3caa:	4650      	mov	r0, sl
    3cac:	f000 fede 	bl	4a6c <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3cb0:	7a31      	ldrb	r1, [r6, #8]
    3cb2:	4638      	mov	r0, r7
    3cb4:	3101      	adds	r1, #1
    3cb6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3cba:	f00f f8ce 	bl	12e5a <net_buf_simple_pull>
    3cbe:	fa5f f888 	uxtb.w	r8, r8
    3cc2:	e736      	b.n	3b32 <bt_recv+0x696>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3cc4:	f7fe f96c 	bl	1fa0 <bt_addr_le_copy>
    3cc8:	e766      	b.n	3b98 <bt_recv+0x6fc>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3cca:	4658      	mov	r0, fp
    3ccc:	f7fe faf2 	bl	22b4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d095      	beq.n	3c00 <bt_recv+0x764>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3cd4:	231f      	movs	r3, #31
    3cd6:	f88a 3008 	strb.w	r3, [sl, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3cda:	2100      	movs	r1, #0
    3cdc:	4650      	mov	r0, sl
    3cde:	f000 fd7b 	bl	47d8 <bt_conn_set_state>
	bt_conn_unref(conn);
    3ce2:	4650      	mov	r0, sl
    3ce4:	f000 fec2 	bl	4a6c <bt_conn_unref>
	bt_le_scan_update(false);
    3ce8:	2000      	movs	r0, #0
    3cea:	f7fe fd0f 	bl	270c <bt_le_scan_update>
    3cee:	e7df      	b.n	3cb0 <bt_recv+0x814>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3cf0:	89a7      	ldrh	r7, [r4, #12]
    3cf2:	68a0      	ldr	r0, [r4, #8]
    3cf4:	4639      	mov	r1, r7
    3cf6:	f7fd ffdd 	bl	1cb4 <bt_hex>
    3cfa:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3cfe:	9003      	str	r0, [sp, #12]
    3d00:	4b24      	ldr	r3, [pc, #144]	; (3d94 <bt_recv+0x8f8>)
    3d02:	4a25      	ldr	r2, [pc, #148]	; (3d98 <bt_recv+0x8fc>)
    3d04:	491b      	ldr	r1, [pc, #108]	; (3d74 <bt_recv+0x8d8>)
    3d06:	4825      	ldr	r0, [pc, #148]	; (3d9c <bt_recv+0x900>)
    3d08:	9504      	str	r5, [sp, #16]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3d0a:	f7fd f93f 	bl	f8c <printk>
    3d0e:	e415      	b.n	353c <bt_recv+0xa0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3d10:	4b23      	ldr	r3, [pc, #140]	; (3da0 <bt_recv+0x904>)
    3d12:	4a24      	ldr	r2, [pc, #144]	; (3da4 <bt_recv+0x908>)
    3d14:	4917      	ldr	r1, [pc, #92]	; (3d74 <bt_recv+0x8d8>)
    3d16:	9602      	str	r6, [sp, #8]
    3d18:	e88d 00c0 	stmia.w	sp, {r6, r7}
    3d1c:	4822      	ldr	r0, [pc, #136]	; (3da8 <bt_recv+0x90c>)
    3d1e:	f7fd f935 	bl	f8c <printk>
		net_buf_unref(buf);
    3d22:	4620      	mov	r0, r4
    3d24:	f00f f848 	bl	12db8 <net_buf_unref>
		return -EINVAL;
    3d28:	f06f 0015 	mvn.w	r0, #21
    3d2c:	e426      	b.n	357c <bt_recv+0xe0>
	net_buf_pull(buf, sizeof(*hdr));
    3d2e:	f104 0708 	add.w	r7, r4, #8
    3d32:	2102      	movs	r1, #2
    3d34:	4638      	mov	r0, r7
    3d36:	f00f f890 	bl	12e5a <net_buf_simple_pull>
	switch (hdr->evt) {
    3d3a:	f898 6000 	ldrb.w	r6, [r8]
    3d3e:	2e05      	cmp	r6, #5
    3d40:	f43f ac47 	beq.w	35d2 <bt_recv+0x136>
    3d44:	2e3e      	cmp	r6, #62	; 0x3e
    3d46:	f43f ac9b 	beq.w	3680 <bt_recv+0x1e4>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3d4a:	89a7      	ldrh	r7, [r4, #12]
    3d4c:	68a0      	ldr	r0, [r4, #8]
    3d4e:	4639      	mov	r1, r7
    3d50:	f7fd ffb0 	bl	1cb4 <bt_hex>
    3d54:	9504      	str	r5, [sp, #16]
    3d56:	9003      	str	r0, [sp, #12]
    3d58:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
    3d5c:	4b13      	ldr	r3, [pc, #76]	; (3dac <bt_recv+0x910>)
    3d5e:	4a0e      	ldr	r2, [pc, #56]	; (3d98 <bt_recv+0x8fc>)
    3d60:	4904      	ldr	r1, [pc, #16]	; (3d74 <bt_recv+0x8d8>)
    3d62:	4813      	ldr	r0, [pc, #76]	; (3db0 <bt_recv+0x914>)
    3d64:	e7d1      	b.n	3d0a <bt_recv+0x86e>
    3d66:	bf00      	nop
    3d68:	2000028c 	.word	0x2000028c
    3d6c:	00015f9d 	.word	0x00015f9d
    3d70:	00015219 	.word	0x00015219
    3d74:	00015fa4 	.word	0x00015fa4
    3d78:	00015c39 	.word	0x00015c39
    3d7c:	0001526b 	.word	0x0001526b
    3d80:	00015c5b 	.word	0x00015c5b
    3d84:	00015c89 	.word	0x00015c89
    3d88:	20003ad8 	.word	0x20003ad8
    3d8c:	20003a69 	.word	0x20003a69
    3d90:	20003a68 	.word	0x20003a68
    3d94:	00015279 	.word	0x00015279
    3d98:	00015fdf 	.word	0x00015fdf
    3d9c:	00015cbf 	.word	0x00015cbf
    3da0:	000153eb 	.word	0x000153eb
    3da4:	00015f55 	.word	0x00015f55
    3da8:	00015d26 	.word	0x00015d26
    3dac:	0001528b 	.word	0x0001528b
    3db0:	00015cf4 	.word	0x00015cf4
    3db4:	200002d8 	.word	0x200002d8

00003db8 <bt_recv_prio>:
{
    3db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3dbc:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3dbe:	6887      	ldr	r7, [r0, #8]
    3dc0:	4c80      	ldr	r4, [pc, #512]	; (3fc4 <bt_recv_prio+0x20c>)
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3dc2:	2b01      	cmp	r3, #1
{
    3dc4:	b089      	sub	sp, #36	; 0x24
    3dc6:	4605      	mov	r5, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3dc8:	d00d      	beq.n	3de6 <bt_recv_prio+0x2e>
    3dca:	4b7f      	ldr	r3, [pc, #508]	; (3fc8 <bt_recv_prio+0x210>)
    3dcc:	4a7f      	ldr	r2, [pc, #508]	; (3fcc <bt_recv_prio+0x214>)
    3dce:	4980      	ldr	r1, [pc, #512]	; (3fd0 <bt_recv_prio+0x218>)
    3dd0:	4880      	ldr	r0, [pc, #512]	; (3fd4 <bt_recv_prio+0x21c>)
    3dd2:	9401      	str	r4, [sp, #4]
    3dd4:	9400      	str	r4, [sp, #0]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3dd6:	f7fd f8d9 	bl	f8c <printk>
    3dda:	4040      	eors	r0, r0
    3ddc:	f380 8811 	msr	BASEPRI, r0
    3de0:	f04f 0004 	mov.w	r0, #4
    3de4:	df02      	svc	2
    3de6:	8982      	ldrh	r2, [r0, #12]
    3de8:	2a01      	cmp	r2, #1
    3dea:	d806      	bhi.n	3dfa <bt_recv_prio+0x42>
    3dec:	9401      	str	r4, [sp, #4]
    3dee:	9400      	str	r4, [sp, #0]
    3df0:	4b75      	ldr	r3, [pc, #468]	; (3fc8 <bt_recv_prio+0x210>)
    3df2:	4a76      	ldr	r2, [pc, #472]	; (3fcc <bt_recv_prio+0x214>)
    3df4:	4976      	ldr	r1, [pc, #472]	; (3fd0 <bt_recv_prio+0x218>)
    3df6:	4878      	ldr	r0, [pc, #480]	; (3fd8 <bt_recv_prio+0x220>)
    3df8:	e7ed      	b.n	3dd6 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3dfa:	783a      	ldrb	r2, [r7, #0]
    3dfc:	2a13      	cmp	r2, #19
    3dfe:	f200 80d9 	bhi.w	3fb4 <bt_recv_prio+0x1fc>
    3e02:	4093      	lsls	r3, r2
    3e04:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3e08:	f000 80d4 	beq.w	3fb4 <bt_recv_prio+0x1fc>
	net_buf_pull(buf, sizeof(*hdr));
    3e0c:	f100 0608 	add.w	r6, r0, #8
    3e10:	2102      	movs	r1, #2
    3e12:	4630      	mov	r0, r6
    3e14:	f00f f821 	bl	12e5a <net_buf_simple_pull>
	switch (hdr->evt) {
    3e18:	783b      	ldrb	r3, [r7, #0]
    3e1a:	2b0f      	cmp	r3, #15
    3e1c:	d02c      	beq.n	3e78 <bt_recv_prio+0xc0>
    3e1e:	2b13      	cmp	r3, #19
    3e20:	d049      	beq.n	3eb6 <bt_recv_prio+0xfe>
    3e22:	2b0e      	cmp	r3, #14
    3e24:	f040 80bc 	bne.w	3fa0 <bt_recv_prio+0x1e8>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3e28:	68ab      	ldr	r3, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3e2a:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3e2e:	f893 8000 	ldrb.w	r8, [r3]
    3e32:	f010 f8eb 	bl	1400c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3e36:	4b69      	ldr	r3, [pc, #420]	; (3fdc <bt_recv_prio+0x224>)
    3e38:	4a69      	ldr	r2, [pc, #420]	; (3fe0 <bt_recv_prio+0x228>)
    3e3a:	9001      	str	r0, [sp, #4]
    3e3c:	4964      	ldr	r1, [pc, #400]	; (3fd0 <bt_recv_prio+0x218>)
    3e3e:	9403      	str	r4, [sp, #12]
    3e40:	9702      	str	r7, [sp, #8]
    3e42:	9400      	str	r4, [sp, #0]
    3e44:	4867      	ldr	r0, [pc, #412]	; (3fe4 <bt_recv_prio+0x22c>)
    3e46:	f7fd f8a1 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3e4a:	2103      	movs	r1, #3
    3e4c:	4630      	mov	r0, r6
    3e4e:	f00f f804 	bl	12e5a <net_buf_simple_pull>
	status = buf->data[0];
    3e52:	68ab      	ldr	r3, [r5, #8]
	hci_cmd_done(opcode, status, buf);
    3e54:	462a      	mov	r2, r5
    3e56:	7819      	ldrb	r1, [r3, #0]
    3e58:	4638      	mov	r0, r7
    3e5a:	f7fe f8d5 	bl	2008 <hci_cmd_done>
	if (ncmd) {
    3e5e:	f1b8 0f00 	cmp.w	r8, #0
    3e62:	d002      	beq.n	3e6a <bt_recv_prio+0xb2>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3e64:	4860      	ldr	r0, [pc, #384]	; (3fe8 <bt_recv_prio+0x230>)
    3e66:	f010 f8e0 	bl	1402a <_impl_k_sem_give>
	net_buf_unref(buf);
    3e6a:	4628      	mov	r0, r5
    3e6c:	f00e ffa4 	bl	12db8 <net_buf_unref>
}
    3e70:	2000      	movs	r0, #0
    3e72:	b009      	add	sp, #36	; 0x24
    3e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3e78:	68af      	ldr	r7, [r5, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3e7a:	f8b7 8002 	ldrh.w	r8, [r7, #2]
	u8_t ncmd = evt->ncmd;
    3e7e:	f897 9001 	ldrb.w	r9, [r7, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3e82:	f010 f8c3 	bl	1400c <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    3e86:	4a56      	ldr	r2, [pc, #344]	; (3fe0 <bt_recv_prio+0x228>)
    3e88:	9001      	str	r0, [sp, #4]
    3e8a:	4b58      	ldr	r3, [pc, #352]	; (3fec <bt_recv_prio+0x234>)
    3e8c:	4950      	ldr	r1, [pc, #320]	; (3fd0 <bt_recv_prio+0x218>)
    3e8e:	9403      	str	r4, [sp, #12]
    3e90:	f8cd 8008 	str.w	r8, [sp, #8]
    3e94:	9400      	str	r4, [sp, #0]
    3e96:	4853      	ldr	r0, [pc, #332]	; (3fe4 <bt_recv_prio+0x22c>)
    3e98:	f7fd f878 	bl	f8c <printk>
	net_buf_pull(buf, sizeof(*evt));
    3e9c:	2104      	movs	r1, #4
    3e9e:	4630      	mov	r0, r6
    3ea0:	f00e ffdb 	bl	12e5a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3ea4:	462a      	mov	r2, r5
    3ea6:	7839      	ldrb	r1, [r7, #0]
    3ea8:	4640      	mov	r0, r8
    3eaa:	f7fe f8ad 	bl	2008 <hci_cmd_done>
	if (ncmd) {
    3eae:	f1b9 0f00 	cmp.w	r9, #0
    3eb2:	d0da      	beq.n	3e6a <bt_recv_prio+0xb2>
    3eb4:	e7d6      	b.n	3e64 <bt_recv_prio+0xac>
    3eb6:	f8d5 b008 	ldr.w	fp, [r5, #8]
		BT_DBG("handle %u count %u", handle, count);
    3eba:	f8df 9114 	ldr.w	r9, [pc, #276]	; 3fd0 <bt_recv_prio+0x218>
    3ebe:	f010 f8a5 	bl	1400c <_impl_k_current_get>
	BT_DBG("num_handles %u", evt->num_handles);
    3ec2:	9403      	str	r4, [sp, #12]
    3ec4:	f89b 3000 	ldrb.w	r3, [fp]
    3ec8:	9302      	str	r3, [sp, #8]
    3eca:	9001      	str	r0, [sp, #4]
    3ecc:	9400      	str	r4, [sp, #0]
    3ece:	4b48      	ldr	r3, [pc, #288]	; (3ff0 <bt_recv_prio+0x238>)
    3ed0:	4a43      	ldr	r2, [pc, #268]	; (3fe0 <bt_recv_prio+0x228>)
    3ed2:	493f      	ldr	r1, [pc, #252]	; (3fd0 <bt_recv_prio+0x218>)
    3ed4:	4847      	ldr	r0, [pc, #284]	; (3ff4 <bt_recv_prio+0x23c>)
    3ed6:	f7fd f859 	bl	f8c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    3eda:	f04f 0800 	mov.w	r8, #0
    3ede:	f89b 3000 	ldrb.w	r3, [fp]
    3ee2:	4598      	cmp	r8, r3
    3ee4:	dac1      	bge.n	3e6a <bt_recv_prio+0xb2>
    3ee6:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    3eea:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3eee:	f8b3 7003 	ldrh.w	r7, [r3, #3]
    3ef2:	f010 f88b 	bl	1400c <_impl_k_current_get>
		BT_DBG("handle %u count %u", handle, count);
    3ef6:	9404      	str	r4, [sp, #16]
    3ef8:	9001      	str	r0, [sp, #4]
    3efa:	9703      	str	r7, [sp, #12]
    3efc:	f8cd a008 	str.w	sl, [sp, #8]
    3f00:	9400      	str	r4, [sp, #0]
    3f02:	4b3b      	ldr	r3, [pc, #236]	; (3ff0 <bt_recv_prio+0x238>)
    3f04:	4a36      	ldr	r2, [pc, #216]	; (3fe0 <bt_recv_prio+0x228>)
    3f06:	483c      	ldr	r0, [pc, #240]	; (3ff8 <bt_recv_prio+0x240>)
    3f08:	4649      	mov	r1, r9
    3f0a:	f7fd f83f 	bl	f8c <printk>
	__asm__ volatile(
    3f0e:	f04f 0320 	mov.w	r3, #32
    3f12:	f3ef 8211 	mrs	r2, BASEPRI
    3f16:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    3f1a:	4650      	mov	r0, sl
    3f1c:	9207      	str	r2, [sp, #28]
    3f1e:	f000 fd37 	bl	4990 <bt_conn_lookup_handle>
		if (!conn) {
    3f22:	4606      	mov	r6, r0
    3f24:	b970      	cbnz	r0, 3f44 <bt_recv_prio+0x18c>
			BT_ERR("No connection for handle %u", handle);
    3f26:	9402      	str	r4, [sp, #8]
    3f28:	e88d 0410 	stmia.w	sp, {r4, sl}
    3f2c:	4b30      	ldr	r3, [pc, #192]	; (3ff0 <bt_recv_prio+0x238>)
    3f2e:	4a27      	ldr	r2, [pc, #156]	; (3fcc <bt_recv_prio+0x214>)
    3f30:	4832      	ldr	r0, [pc, #200]	; (3ffc <bt_recv_prio+0x244>)
    3f32:	4649      	mov	r1, r9
    3f34:	f7fd f82a 	bl	f8c <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f38:	9b07      	ldr	r3, [sp, #28]
    3f3a:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < evt->num_handles; i++) {
    3f3e:	f108 0801 	add.w	r8, r8, #1
    3f42:	e7cc      	b.n	3ede <bt_recv_prio+0x126>
    3f44:	9b07      	ldr	r3, [sp, #28]
    3f46:	f383 8811 	msr	BASEPRI, r3
			k_fifo_put(&conn->tx_notify, node);
    3f4a:	f100 0a18 	add.w	sl, r0, #24
		while (count--) {
    3f4e:	b1d7      	cbz	r7, 3f86 <bt_recv_prio+0x1ce>
	__asm__ volatile(
    3f50:	f04f 0320 	mov.w	r3, #32
    3f54:	f3ef 8011 	mrs	r0, BASEPRI
    3f58:	f383 8811 	msr	BASEPRI, r3
    3f5c:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3f5e:	b129      	cbz	r1, 3f6c <bt_recv_prio+0x1b4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f60:	6972      	ldr	r2, [r6, #20]
	return node->next;
    3f62:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    3f64:	6133      	str	r3, [r6, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3f66:	4291      	cmp	r1, r2
	list->tail = node;
    3f68:	bf08      	it	eq
    3f6a:	6173      	streq	r3, [r6, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f6c:	f380 8811 	msr	BASEPRI, r0
    3f70:	3f01      	subs	r7, #1
    3f72:	b2bf      	uxth	r7, r7
			if (!node) {
    3f74:	b959      	cbnz	r1, 3f8e <bt_recv_prio+0x1d6>
				BT_ERR("packets count mismatch");
    3f76:	9401      	str	r4, [sp, #4]
    3f78:	9400      	str	r4, [sp, #0]
    3f7a:	4b1d      	ldr	r3, [pc, #116]	; (3ff0 <bt_recv_prio+0x238>)
    3f7c:	4a13      	ldr	r2, [pc, #76]	; (3fcc <bt_recv_prio+0x214>)
    3f7e:	4820      	ldr	r0, [pc, #128]	; (4000 <bt_recv_prio+0x248>)
    3f80:	4649      	mov	r1, r9
    3f82:	f7fd f803 	bl	f8c <printk>
		bt_conn_unref(conn);
    3f86:	4630      	mov	r0, r6
    3f88:	f000 fd70 	bl	4a6c <bt_conn_unref>
    3f8c:	e7d7      	b.n	3f3e <bt_recv_prio+0x186>
			k_fifo_put(&conn->tx_notify, node);
    3f8e:	4650      	mov	r0, sl
    3f90:	f00f fd86 	bl	13aa0 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3f94:	4630      	mov	r0, r6
    3f96:	f000 f9cd 	bl	4334 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3f9a:	f010 f846 	bl	1402a <_impl_k_sem_give>
    3f9e:	e7d6      	b.n	3f4e <bt_recv_prio+0x196>
		net_buf_unref(buf);
    3fa0:	4628      	mov	r0, r5
    3fa2:	f00e ff09 	bl	12db8 <net_buf_unref>
		BT_ASSERT(0);
    3fa6:	9401      	str	r4, [sp, #4]
    3fa8:	9400      	str	r4, [sp, #0]
    3faa:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <bt_recv_prio+0x210>)
    3fac:	4a07      	ldr	r2, [pc, #28]	; (3fcc <bt_recv_prio+0x214>)
    3fae:	4908      	ldr	r1, [pc, #32]	; (3fd0 <bt_recv_prio+0x218>)
    3fb0:	4814      	ldr	r0, [pc, #80]	; (4004 <bt_recv_prio+0x24c>)
    3fb2:	e710      	b.n	3dd6 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3fb4:	9401      	str	r4, [sp, #4]
    3fb6:	9400      	str	r4, [sp, #0]
    3fb8:	4b03      	ldr	r3, [pc, #12]	; (3fc8 <bt_recv_prio+0x210>)
    3fba:	4a04      	ldr	r2, [pc, #16]	; (3fcc <bt_recv_prio+0x214>)
    3fbc:	4904      	ldr	r1, [pc, #16]	; (3fd0 <bt_recv_prio+0x218>)
    3fbe:	4812      	ldr	r0, [pc, #72]	; (4008 <bt_recv_prio+0x250>)
    3fc0:	e709      	b.n	3dd6 <bt_recv_prio+0x1e>
    3fc2:	bf00      	nop
    3fc4:	00014b99 	.word	0x00014b99
    3fc8:	000153f3 	.word	0x000153f3
    3fcc:	00015f55 	.word	0x00015f55
    3fd0:	00015fa4 	.word	0x00015fa4
    3fd4:	00015d89 	.word	0x00015d89
    3fd8:	00015dcd 	.word	0x00015dcd
    3fdc:	0001524b 	.word	0x0001524b
    3fe0:	00015f9d 	.word	0x00015f9d
    3fe4:	00015e07 	.word	0x00015e07
    3fe8:	20003b10 	.word	0x20003b10
    3fec:	0001525c 	.word	0x0001525c
    3ff0:	00015140 	.word	0x00015140
    3ff4:	00015e2a 	.word	0x00015e2a
    3ff8:	00015e4e 	.word	0x00015e4e
    3ffc:	00015e76 	.word	0x00015e76
    4000:	00015ea2 	.word	0x00015ea2
    4004:	00015ec9 	.word	0x00015ec9
    4008:	00015eec 	.word	0x00015eec

0000400c <bt_hci_driver_register>:
{
    400c:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    400e:	4b13      	ldr	r3, [pc, #76]	; (405c <bt_hci_driver_register+0x50>)
    4010:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
    4014:	b085      	sub	sp, #20
    4016:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    4018:	b9cc      	cbnz	r4, 404e <bt_hci_driver_register+0x42>
	if (!drv->open || !drv->send) {
    401a:	68c2      	ldr	r2, [r0, #12]
    401c:	b1d2      	cbz	r2, 4054 <bt_hci_driver_register+0x48>
    401e:	6902      	ldr	r2, [r0, #16]
    4020:	b1c2      	cbz	r2, 4054 <bt_hci_driver_register+0x48>
	bt_dev.drv = drv;
    4022:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4026:	f00f fff1 	bl	1400c <_impl_k_current_get>
    402a:	4a0d      	ldr	r2, [pc, #52]	; (4060 <bt_hci_driver_register+0x54>)
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    402c:	682b      	ldr	r3, [r5, #0]
    402e:	9203      	str	r2, [sp, #12]
    4030:	2b00      	cmp	r3, #0
    4032:	bf08      	it	eq
    4034:	4613      	moveq	r3, r2
    4036:	9302      	str	r3, [sp, #8]
    4038:	9001      	str	r0, [sp, #4]
    403a:	9200      	str	r2, [sp, #0]
    403c:	4b09      	ldr	r3, [pc, #36]	; (4064 <bt_hci_driver_register+0x58>)
    403e:	4a0a      	ldr	r2, [pc, #40]	; (4068 <bt_hci_driver_register+0x5c>)
    4040:	490a      	ldr	r1, [pc, #40]	; (406c <bt_hci_driver_register+0x60>)
    4042:	480b      	ldr	r0, [pc, #44]	; (4070 <bt_hci_driver_register+0x64>)
    4044:	f7fc ffa2 	bl	f8c <printk>
	return 0;
    4048:	4620      	mov	r0, r4
}
    404a:	b005      	add	sp, #20
    404c:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    404e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4052:	e7fa      	b.n	404a <bt_hci_driver_register+0x3e>
		return -EINVAL;
    4054:	f06f 0015 	mvn.w	r0, #21
    4058:	e7f7      	b.n	404a <bt_hci_driver_register+0x3e>
    405a:	bf00      	nop
    405c:	20003a68 	.word	0x20003a68
    4060:	00014b99 	.word	0x00014b99
    4064:	00015400 	.word	0x00015400
    4068:	00015f9d 	.word	0x00015f9d
    406c:	00015fa4 	.word	0x00015fa4
    4070:	00015662 	.word	0x00015662

00004074 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    4074:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4076:	4d2a      	ldr	r5, [pc, #168]	; (4120 <bt_enable+0xac>)
    4078:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
{
    407c:	b086      	sub	sp, #24
    407e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4080:	b96b      	cbnz	r3, 409e <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    4082:	4b28      	ldr	r3, [pc, #160]	; (4124 <bt_enable+0xb0>)
    4084:	9301      	str	r3, [sp, #4]
    4086:	9300      	str	r3, [sp, #0]
    4088:	4a27      	ldr	r2, [pc, #156]	; (4128 <bt_enable+0xb4>)
    408a:	4b28      	ldr	r3, [pc, #160]	; (412c <bt_enable+0xb8>)
    408c:	4928      	ldr	r1, [pc, #160]	; (4130 <bt_enable+0xbc>)
    408e:	4829      	ldr	r0, [pc, #164]	; (4134 <bt_enable+0xc0>)
    4090:	f7fc ff7c 	bl	f8c <printk>
		return -ENODEV;
    4094:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4098:	4620      	mov	r0, r4
    409a:	b006      	add	sp, #24
    409c:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    409e:	2101      	movs	r1, #1
    40a0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    40a4:	f7fd ff7f 	bl	1fa6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    40a8:	f010 0001 	ands.w	r0, r0, #1
    40ac:	d134      	bne.n	4118 <bt_enable+0xa4>
	ready_cb = cb;
    40ae:	4b22      	ldr	r3, [pc, #136]	; (4138 <bt_enable+0xc4>)

    40b0:	4922      	ldr	r1, [pc, #136]	; (413c <bt_enable+0xc8>)
    40b2:	601e      	str	r6, [r3, #0]
    40b4:	f06f 0308 	mvn.w	r3, #8
    40b8:	9005      	str	r0, [sp, #20]
    40ba:	9004      	str	r0, [sp, #16]
    40bc:	9303      	str	r3, [sp, #12]
    40be:	9002      	str	r0, [sp, #8]
    40c0:	9001      	str	r0, [sp, #4]
    40c2:	9000      	str	r0, [sp, #0]
    40c4:	4b1e      	ldr	r3, [pc, #120]	; (4140 <bt_enable+0xcc>)
    40c6:	481f      	ldr	r0, [pc, #124]	; (4144 <bt_enable+0xd0>)
    40c8:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    40cc:	f010 f9aa 	bl	14424 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    40d0:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    40d4:	68db      	ldr	r3, [r3, #12]
    40d6:	4798      	blx	r3
	if (err) {
    40d8:	4604      	mov	r4, r0
    40da:	b150      	cbz	r0, 40f2 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    40dc:	4b11      	ldr	r3, [pc, #68]	; (4124 <bt_enable+0xb0>)
    40de:	9302      	str	r3, [sp, #8]
    40e0:	e88d 0018 	stmia.w	sp, {r3, r4}
    40e4:	4a10      	ldr	r2, [pc, #64]	; (4128 <bt_enable+0xb4>)
    40e6:	4b11      	ldr	r3, [pc, #68]	; (412c <bt_enable+0xb8>)
    40e8:	4911      	ldr	r1, [pc, #68]	; (4130 <bt_enable+0xbc>)
    40ea:	4817      	ldr	r0, [pc, #92]	; (4148 <bt_enable+0xd4>)
    40ec:	f7fc ff4e 	bl	f8c <printk>
		return err;
    40f0:	e7d2      	b.n	4098 <bt_enable+0x24>
	if (!cb) {
    40f2:	b926      	cbnz	r6, 40fe <bt_enable+0x8a>
}
    40f4:	b006      	add	sp, #24
    40f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    40fa:	f7fe bb39 	b.w	2770 <bt_init>
    40fe:	2101      	movs	r1, #1
    4100:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    4104:	f7fd ff4f 	bl	1fa6 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4108:	07c3      	lsls	r3, r0, #31
    410a:	d4c5      	bmi.n	4098 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    410c:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4110:	480e      	ldr	r0, [pc, #56]	; (414c <bt_enable+0xd8>)
    4112:	f00f fcc5 	bl	13aa0 <k_queue_append>
    4116:	e7bf      	b.n	4098 <bt_enable+0x24>
		return -EALREADY;
    4118:	f06f 0444 	mvn.w	r4, #68	; 0x44
    411c:	e7bc      	b.n	4098 <bt_enable+0x24>
    411e:	bf00      	nop
    4120:	20003a68 	.word	0x20003a68
    4124:	00014b99 	.word	0x00014b99
    4128:	00015f55 	.word	0x00015f55
    412c:	00015417 	.word	0x00015417
    4130:	00015fa4 	.word	0x00015fa4
    4134:	00015503 	.word	0x00015503
    4138:	200002d4 	.word	0x200002d4
    413c:	20001a10 	.word	0x20001a10
    4140:	00003225 	.word	0x00003225
    4144:	200002dc 	.word	0x200002dc
    4148:	0001552c 	.word	0x0001552c
    414c:	20001990 	.word	0x20001990

00004150 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    4150:	2000      	movs	r0, #0
    4152:	4770      	bx	lr

00004154 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4154:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4156:	7803      	ldrb	r3, [r0, #0]
    4158:	2b01      	cmp	r3, #1
{
    415a:	4605      	mov	r5, r0
    415c:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    415e:	d810      	bhi.n	4182 <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4160:	7843      	ldrb	r3, [r0, #1]
    4162:	2b01      	cmp	r3, #1
    4164:	d80d      	bhi.n	4182 <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    4166:	8841      	ldrh	r1, [r0, #2]
    4168:	1f0b      	subs	r3, r1, #4
    416a:	b29b      	uxth	r3, r3
    416c:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4170:	4283      	cmp	r3, r0
    4172:	d806      	bhi.n	4182 <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4174:	88aa      	ldrh	r2, [r5, #4]
    4176:	1f13      	subs	r3, r2, #4
    4178:	b29b      	uxth	r3, r3
    417a:	4283      	cmp	r3, r0
    417c:	d801      	bhi.n	4182 <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    417e:	4291      	cmp	r1, r2
    4180:	d22b      	bcs.n	41da <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    4182:	f06f 0415 	mvn.w	r4, #21
    4186:	e00e      	b.n	41a6 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4188:	2108      	movs	r1, #8
    418a:	4819      	ldr	r0, [pc, #100]	; (41f0 <bt_le_scan_start+0x9c>)
    418c:	f7fd ffb2 	bl	20f4 <atomic_test_bit>
    4190:	b158      	cbz	r0, 41aa <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    4192:	4610      	mov	r0, r2
    4194:	f7fe f88e 	bl	22b4 <set_le_scan_enable>
		if (err) {
    4198:	4604      	mov	r4, r0
    419a:	b130      	cbz	r0, 41aa <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    419c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    41a0:	4813      	ldr	r0, [pc, #76]	; (41f0 <bt_le_scan_start+0x9c>)
    41a2:	f7fd ff11 	bl	1fc8 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    41a6:	4620      	mov	r0, r4
    41a8:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    41aa:	786b      	ldrb	r3, [r5, #1]
    41ac:	b17b      	cbz	r3, 41ce <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    41ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    41b2:	480f      	ldr	r0, [pc, #60]	; (41f0 <bt_le_scan_start+0x9c>)
    41b4:	f7fd fef7 	bl	1fa6 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    41b8:	88aa      	ldrh	r2, [r5, #4]
    41ba:	8869      	ldrh	r1, [r5, #2]
    41bc:	7828      	ldrb	r0, [r5, #0]
    41be:	f7fe fa55 	bl	266c <start_le_scan>
	if (err) {
    41c2:	4604      	mov	r4, r0
    41c4:	2800      	cmp	r0, #0
    41c6:	d1e9      	bne.n	419c <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    41c8:	4b0a      	ldr	r3, [pc, #40]	; (41f4 <bt_le_scan_start+0xa0>)
    41ca:	601e      	str	r6, [r3, #0]
	return 0;
    41cc:	e7eb      	b.n	41a6 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    41ce:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    41d2:	4807      	ldr	r0, [pc, #28]	; (41f0 <bt_le_scan_start+0x9c>)
    41d4:	f7fd fef8 	bl	1fc8 <atomic_and>
    41d8:	e7ee      	b.n	41b8 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    41da:	f44f 7100 	mov.w	r1, #512	; 0x200
    41de:	4804      	ldr	r0, [pc, #16]	; (41f0 <bt_le_scan_start+0x9c>)
    41e0:	f7fd fee1 	bl	1fa6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    41e4:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    41e8:	d0ce      	beq.n	4188 <bt_le_scan_start+0x34>
		return -EALREADY;
    41ea:	f06f 0444 	mvn.w	r4, #68	; 0x44
    41ee:	e7da      	b.n	41a6 <bt_le_scan_start+0x52>
    41f0:	20003ad8 	.word	0x20003ad8
    41f4:	200002d8 	.word	0x200002d8

000041f8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    41f8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    41fa:	f46f 7100 	mvn.w	r1, #512	; 0x200
    41fe:	4807      	ldr	r0, [pc, #28]	; (421c <bt_le_scan_stop+0x24>)
    4200:	f7fd fee2 	bl	1fc8 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4204:	0583      	lsls	r3, r0, #22
    4206:	d506      	bpl.n	4216 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    4208:	4b05      	ldr	r3, [pc, #20]	; (4220 <bt_le_scan_stop+0x28>)
    420a:	2000      	movs	r0, #0
    420c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    420e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    4212:	f7fe ba7b 	b.w	270c <bt_le_scan_update>
}
    4216:	f06f 0044 	mvn.w	r0, #68	; 0x44
    421a:	bd08      	pop	{r3, pc}
    421c:	20003ad8 	.word	0x20003ad8
    4220:	200002d8 	.word	0x200002d8

00004224 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4224:	b538      	push	{r3, r4, r5, lr}
    4226:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4228:	4805      	ldr	r0, [pc, #20]	; (4240 <bt_buf_get_rx+0x1c>)
    422a:	f00e fd95 	bl	12d58 <net_buf_alloc_fixed>
#endif

	if (buf) {
    422e:	4604      	mov	r4, r0
    4230:	b120      	cbz	r0, 423c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4232:	2100      	movs	r1, #0
    4234:	3008      	adds	r0, #8
    4236:	f00e fdae 	bl	12d96 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    423a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    423c:	4620      	mov	r0, r4
    423e:	bd38      	pop	{r3, r4, r5, pc}
    4240:	20003fac 	.word	0x20003fac

00004244 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4246:	4606      	mov	r6, r0
	__asm__ volatile(
    4248:	f04f 0320 	mov.w	r3, #32
    424c:	f3ef 8211 	mrs	r2, BASEPRI
    4250:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4254:	4b13      	ldr	r3, [pc, #76]	; (42a4 <bt_buf_get_cmd_complete+0x60>)
	bt_dev.sent_cmd = NULL;
    4256:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    4258:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    425c:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4260:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4264:	f00f fed2 	bl	1400c <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    4268:	4b0f      	ldr	r3, [pc, #60]	; (42a8 <bt_buf_get_cmd_complete+0x64>)
    426a:	9303      	str	r3, [sp, #12]
    426c:	9001      	str	r0, [sp, #4]
    426e:	9300      	str	r3, [sp, #0]
    4270:	9402      	str	r4, [sp, #8]
    4272:	4b0e      	ldr	r3, [pc, #56]	; (42ac <bt_buf_get_cmd_complete+0x68>)
    4274:	4a0e      	ldr	r2, [pc, #56]	; (42b0 <bt_buf_get_cmd_complete+0x6c>)
    4276:	490f      	ldr	r1, [pc, #60]	; (42b4 <bt_buf_get_cmd_complete+0x70>)
    4278:	480f      	ldr	r0, [pc, #60]	; (42b8 <bt_buf_get_cmd_complete+0x74>)
    427a:	f7fc fe87 	bl	f8c <printk>

	if (buf) {
    427e:	b934      	cbnz	r4, 428e <bt_buf_get_cmd_complete+0x4a>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4280:	4631      	mov	r1, r6
    4282:	2001      	movs	r0, #1
}
    4284:	b004      	add	sp, #16
    4286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    428a:	f7ff bfcb 	b.w	4224 <bt_buf_get_rx>
    428e:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4290:	f104 0008 	add.w	r0, r4, #8
    4294:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    4296:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4298:	4629      	mov	r1, r5
    429a:	f00e fd7c 	bl	12d96 <net_buf_simple_reserve>
}
    429e:	4620      	mov	r0, r4
    42a0:	b004      	add	sp, #16
    42a2:	bd70      	pop	{r4, r5, r6, pc}
    42a4:	20003a68 	.word	0x20003a68
    42a8:	00014b99 	.word	0x00014b99
    42ac:	00015421 	.word	0x00015421
    42b0:	00015f9d 	.word	0x00015f9d
    42b4:	00015fa4 	.word	0x00015fa4
    42b8:	00015439 	.word	0x00015439

000042bc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    42bc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    42be:	4b06      	ldr	r3, [pc, #24]	; (42d8 <notify_connected+0x1c>)
    42c0:	681c      	ldr	r4, [r3, #0]
{
    42c2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    42c4:	b904      	cbnz	r4, 42c8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    42c6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    42c8:	6823      	ldr	r3, [r4, #0]
    42ca:	b113      	cbz	r3, 42d2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    42cc:	7a29      	ldrb	r1, [r5, #8]
    42ce:	4628      	mov	r0, r5
    42d0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    42d2:	6924      	ldr	r4, [r4, #16]
    42d4:	e7f6      	b.n	42c4 <notify_connected+0x8>
    42d6:	bf00      	nop
    42d8:	2000034c 	.word	0x2000034c

000042dc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42dc:	f3bf 8f5b 	dmb	ish
    42e0:	6800      	ldr	r0, [r0, #0]
    42e2:	f3bf 8f5b 	dmb	ish
}
    42e6:	4770      	bx	lr

000042e8 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    42e8:	8943      	ldrh	r3, [r0, #10]
{
    42ea:	b510      	push	{r4, lr}
    42ec:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    42ee:	b12b      	cbz	r3, 42fc <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    42f0:	68c0      	ldr	r0, [r0, #12]
    42f2:	f00e fd61 	bl	12db8 <net_buf_unref>
	conn->rx = NULL;
    42f6:	2300      	movs	r3, #0
    42f8:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    42fa:	8163      	strh	r3, [r4, #10]
    42fc:	bd10      	pop	{r4, pc}

000042fe <atomic_dec>:
}
    42fe:	f3bf 8f5b 	dmb	ish
    4302:	e850 3f00 	ldrex	r3, [r0]
    4306:	1e5a      	subs	r2, r3, #1
    4308:	e840 2100 	strex	r1, r2, [r0]
    430c:	2900      	cmp	r1, #0
    430e:	d1f8      	bne.n	4302 <atomic_dec+0x4>
    4310:	f3bf 8f5b 	dmb	ish
    4314:	4618      	mov	r0, r3
    4316:	4770      	bx	lr

00004318 <atomic_inc>:
}
    4318:	f3bf 8f5b 	dmb	ish
    431c:	e850 3f00 	ldrex	r3, [r0]
    4320:	1c5a      	adds	r2, r3, #1
    4322:	e840 2100 	strex	r1, r2, [r0]
    4326:	2900      	cmp	r1, #0
    4328:	d1f8      	bne.n	431c <atomic_inc+0x4>
    432a:	f3bf 8f5b 	dmb	ish
    432e:	4618      	mov	r0, r3
    4330:	4770      	bx	lr
	...

00004334 <bt_conn_get_pkts>:
}
    4334:	4800      	ldr	r0, [pc, #0]	; (4338 <bt_conn_get_pkts+0x4>)
    4336:	4770      	bx	lr
    4338:	20003af4 	.word	0x20003af4

0000433c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    433c:	4b08      	ldr	r3, [pc, #32]	; (4360 <notify_le_param_updated+0x24>)
{
    433e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4340:	681c      	ldr	r4, [r3, #0]
{
    4342:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4344:	b904      	cbnz	r4, 4348 <notify_le_param_updated+0xc>
}
    4346:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4348:	68e6      	ldr	r6, [r4, #12]
    434a:	b13e      	cbz	r6, 435c <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    434c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4350:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    4354:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    4358:	4628      	mov	r0, r5
    435a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    435c:	6924      	ldr	r4, [r4, #16]
    435e:	e7f1      	b.n	4344 <notify_le_param_updated+0x8>
    4360:	2000034c 	.word	0x2000034c

00004364 <le_param_req>:
{
    4364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4366:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    4368:	4608      	mov	r0, r1
{
    436a:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    436c:	f7fe f85e 	bl	242c <bt_le_conn_params_valid>
    4370:	4605      	mov	r5, r0
    4372:	b910      	cbnz	r0, 437a <le_param_req+0x16>
		return false;
    4374:	2500      	movs	r5, #0
}
    4376:	4628      	mov	r0, r5
    4378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    437a:	4b09      	ldr	r3, [pc, #36]	; (43a0 <le_param_req+0x3c>)
    437c:	681c      	ldr	r4, [r3, #0]
    437e:	2c00      	cmp	r4, #0
    4380:	d0f9      	beq.n	4376 <le_param_req+0x12>
		if (!cb->le_param_req) {
    4382:	68a3      	ldr	r3, [r4, #8]
    4384:	b90b      	cbnz	r3, 438a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    4386:	6924      	ldr	r4, [r4, #16]
    4388:	e7f9      	b.n	437e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    438a:	4631      	mov	r1, r6
    438c:	4638      	mov	r0, r7
    438e:	4798      	blx	r3
    4390:	2800      	cmp	r0, #0
    4392:	d0ef      	beq.n	4374 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    4394:	4630      	mov	r0, r6
    4396:	f7fe f849 	bl	242c <bt_le_conn_params_valid>
    439a:	2800      	cmp	r0, #0
    439c:	d1f3      	bne.n	4386 <le_param_req+0x22>
    439e:	e7e9      	b.n	4374 <le_param_req+0x10>
    43a0:	2000034c 	.word	0x2000034c

000043a4 <bt_conn_cb_register>:
	cb->_next = callback_list;
    43a4:	4b02      	ldr	r3, [pc, #8]	; (43b0 <bt_conn_cb_register+0xc>)
    43a6:	681a      	ldr	r2, [r3, #0]
    43a8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    43aa:	6018      	str	r0, [r3, #0]
    43ac:	4770      	bx	lr
    43ae:	bf00      	nop
    43b0:	2000034c 	.word	0x2000034c

000043b4 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    43b4:	2a01      	cmp	r2, #1
{
    43b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    43b8:	4604      	mov	r4, r0
    43ba:	460d      	mov	r5, r1
	switch (flags) {
    43bc:	d01b      	beq.n	43f6 <bt_conn_recv+0x42>
    43be:	2a02      	cmp	r2, #2
    43c0:	d16b      	bne.n	449a <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    43c2:	688b      	ldr	r3, [r1, #8]
    43c4:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    43c6:	8943      	ldrh	r3, [r0, #10]
    43c8:	b15b      	cbz	r3, 43e2 <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    43ca:	4b3d      	ldr	r3, [pc, #244]	; (44c0 <bt_conn_recv+0x10c>)
    43cc:	9301      	str	r3, [sp, #4]
    43ce:	9300      	str	r3, [sp, #0]
    43d0:	4a3c      	ldr	r2, [pc, #240]	; (44c4 <bt_conn_recv+0x110>)
    43d2:	4b3d      	ldr	r3, [pc, #244]	; (44c8 <bt_conn_recv+0x114>)
    43d4:	493d      	ldr	r1, [pc, #244]	; (44cc <bt_conn_recv+0x118>)
    43d6:	483e      	ldr	r0, [pc, #248]	; (44d0 <bt_conn_recv+0x11c>)
    43d8:	f7fc fdd8 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    43dc:	4620      	mov	r0, r4
    43de:	f7ff ff83 	bl	42e8 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    43e2:	89ab      	ldrh	r3, [r5, #12]
    43e4:	1af3      	subs	r3, r6, r3
    43e6:	3304      	adds	r3, #4
    43e8:	b29b      	uxth	r3, r3
    43ea:	8163      	strh	r3, [r4, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    43ec:	2b00      	cmp	r3, #0
    43ee:	d042      	beq.n	4476 <bt_conn_recv+0xc2>
			conn->rx = buf;
    43f0:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    43f2:	b004      	add	sp, #16
    43f4:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    43f6:	8943      	ldrh	r3, [r0, #10]
    43f8:	b98b      	cbnz	r3, 441e <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    43fa:	4b31      	ldr	r3, [pc, #196]	; (44c0 <bt_conn_recv+0x10c>)
    43fc:	9301      	str	r3, [sp, #4]
    43fe:	9300      	str	r3, [sp, #0]
    4400:	4a30      	ldr	r2, [pc, #192]	; (44c4 <bt_conn_recv+0x110>)
    4402:	4b31      	ldr	r3, [pc, #196]	; (44c8 <bt_conn_recv+0x114>)
    4404:	4931      	ldr	r1, [pc, #196]	; (44cc <bt_conn_recv+0x118>)
    4406:	4833      	ldr	r0, [pc, #204]	; (44d4 <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    4408:	f7fc fdc0 	bl	f8c <printk>
			bt_conn_reset_rx_state(conn);
    440c:	4620      	mov	r0, r4
    440e:	f7ff ff6b 	bl	42e8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    4412:	4628      	mov	r0, r5
}
    4414:	b004      	add	sp, #16
    4416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    441a:	f00e bccd 	b.w	12db8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    441e:	898e      	ldrh	r6, [r1, #12]
    4420:	42b3      	cmp	r3, r6
    4422:	d207      	bcs.n	4434 <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    4424:	4b26      	ldr	r3, [pc, #152]	; (44c0 <bt_conn_recv+0x10c>)
    4426:	9301      	str	r3, [sp, #4]
    4428:	9300      	str	r3, [sp, #0]
    442a:	4a26      	ldr	r2, [pc, #152]	; (44c4 <bt_conn_recv+0x110>)
    442c:	4b26      	ldr	r3, [pc, #152]	; (44c8 <bt_conn_recv+0x114>)
    442e:	4927      	ldr	r1, [pc, #156]	; (44cc <bt_conn_recv+0x118>)
    4430:	4829      	ldr	r0, [pc, #164]	; (44d8 <bt_conn_recv+0x124>)
    4432:	e7e9      	b.n	4408 <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    4434:	68c0      	ldr	r0, [r0, #12]
    4436:	3008      	adds	r0, #8
    4438:	f00e fd2b 	bl	12e92 <net_buf_simple_tailroom>
    443c:	4286      	cmp	r6, r0
    443e:	d907      	bls.n	4450 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    4440:	4b1f      	ldr	r3, [pc, #124]	; (44c0 <bt_conn_recv+0x10c>)
    4442:	9301      	str	r3, [sp, #4]
    4444:	9300      	str	r3, [sp, #0]
    4446:	4a1f      	ldr	r2, [pc, #124]	; (44c4 <bt_conn_recv+0x110>)
    4448:	4b1f      	ldr	r3, [pc, #124]	; (44c8 <bt_conn_recv+0x114>)
    444a:	4920      	ldr	r1, [pc, #128]	; (44cc <bt_conn_recv+0x118>)
    444c:	4823      	ldr	r0, [pc, #140]	; (44dc <bt_conn_recv+0x128>)
    444e:	e7db      	b.n	4408 <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    4450:	68e0      	ldr	r0, [r4, #12]
    4452:	89aa      	ldrh	r2, [r5, #12]
    4454:	68a9      	ldr	r1, [r5, #8]
    4456:	3008      	adds	r0, #8
    4458:	f00e fce6 	bl	12e28 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    445c:	8963      	ldrh	r3, [r4, #10]
    445e:	89aa      	ldrh	r2, [r5, #12]
    4460:	1a9b      	subs	r3, r3, r2
    4462:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    4464:	4628      	mov	r0, r5
    4466:	f00e fca7 	bl	12db8 <net_buf_unref>
		if (conn->rx_len) {
    446a:	8963      	ldrh	r3, [r4, #10]
    446c:	2b00      	cmp	r3, #0
    446e:	d1c0      	bne.n	43f2 <bt_conn_recv+0x3e>
		buf = conn->rx;
    4470:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    4472:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    4474:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    4476:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    4478:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    447a:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    447c:	1d13      	adds	r3, r2, #4
    447e:	428b      	cmp	r3, r1
    4480:	d016      	beq.n	44b0 <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    4482:	4b0f      	ldr	r3, [pc, #60]	; (44c0 <bt_conn_recv+0x10c>)
    4484:	9303      	str	r3, [sp, #12]
    4486:	9102      	str	r1, [sp, #8]
    4488:	9201      	str	r2, [sp, #4]
    448a:	9300      	str	r3, [sp, #0]
    448c:	4a0d      	ldr	r2, [pc, #52]	; (44c4 <bt_conn_recv+0x110>)
    448e:	4b0e      	ldr	r3, [pc, #56]	; (44c8 <bt_conn_recv+0x114>)
    4490:	490e      	ldr	r1, [pc, #56]	; (44cc <bt_conn_recv+0x118>)
    4492:	4813      	ldr	r0, [pc, #76]	; (44e0 <bt_conn_recv+0x12c>)
    4494:	f7fc fd7a 	bl	f8c <printk>
    4498:	e7bb      	b.n	4412 <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    449a:	4b09      	ldr	r3, [pc, #36]	; (44c0 <bt_conn_recv+0x10c>)
    449c:	9302      	str	r3, [sp, #8]
	switch (flags) {
    449e:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    44a0:	9300      	str	r3, [sp, #0]
    44a2:	4a08      	ldr	r2, [pc, #32]	; (44c4 <bt_conn_recv+0x110>)
    44a4:	4b08      	ldr	r3, [pc, #32]	; (44c8 <bt_conn_recv+0x114>)
    44a6:	4909      	ldr	r1, [pc, #36]	; (44cc <bt_conn_recv+0x118>)
    44a8:	480e      	ldr	r0, [pc, #56]	; (44e4 <bt_conn_recv+0x130>)
    44aa:	f7fc fd6f 	bl	f8c <printk>
    44ae:	e7ad      	b.n	440c <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    44b0:	4629      	mov	r1, r5
    44b2:	4620      	mov	r0, r4
}
    44b4:	b004      	add	sp, #16
    44b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    44ba:	f000 bf53 	b.w	5364 <bt_l2cap_recv>
    44be:	bf00      	nop
    44c0:	00014b99 	.word	0x00014b99
    44c4:	00015f55 	.word	0x00015f55
    44c8:	000163e4 	.word	0x000163e4
    44cc:	00015fa4 	.word	0x00015fa4
    44d0:	00016430 	.word	0x00016430
    44d4:	0001645d 	.word	0x0001645d
    44d8:	0001648b 	.word	0x0001648b
    44dc:	000164af 	.word	0x000164af
    44e0:	00016514 	.word	0x00016514
    44e4:	000164e6 	.word	0x000164e6

000044e8 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    44e8:	7a43      	ldrb	r3, [r0, #9]
    44ea:	2b03      	cmp	r3, #3
{
    44ec:	b513      	push	{r0, r1, r4, lr}
    44ee:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    44f0:	d00f      	beq.n	4512 <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    44f2:	4b0b      	ldr	r3, [pc, #44]	; (4520 <bt_conn_send_cb+0x38>)
    44f4:	9301      	str	r3, [sp, #4]
    44f6:	9300      	str	r3, [sp, #0]
    44f8:	4a0a      	ldr	r2, [pc, #40]	; (4524 <bt_conn_send_cb+0x3c>)
    44fa:	4b0b      	ldr	r3, [pc, #44]	; (4528 <bt_conn_send_cb+0x40>)
    44fc:	490b      	ldr	r1, [pc, #44]	; (452c <bt_conn_send_cb+0x44>)
    44fe:	480c      	ldr	r0, [pc, #48]	; (4530 <bt_conn_send_cb+0x48>)
    4500:	f7fc fd44 	bl	f8c <printk>
		net_buf_unref(buf);
    4504:	4620      	mov	r0, r4
    4506:	f00e fc57 	bl	12db8 <net_buf_unref>
		return -ENOTCONN;
    450a:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    450e:	b002      	add	sp, #8
    4510:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    4512:	3028      	adds	r0, #40	; 0x28
	conn_tx(buf)->cb = cb;
    4514:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    4516:	f00e fc42 	bl	12d9e <net_buf_put>
	return 0;
    451a:	2000      	movs	r0, #0
    451c:	e7f7      	b.n	450e <bt_conn_send_cb+0x26>
    451e:	bf00      	nop
    4520:	00014b99 	.word	0x00014b99
    4524:	00015f55 	.word	0x00015f55
    4528:	000163f1 	.word	0x000163f1
    452c:	00015fa4 	.word	0x00015fa4
    4530:	00016540 	.word	0x00016540

00004534 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    4534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4538:	4d0d      	ldr	r5, [pc, #52]	; (4570 <bt_conn_notify_tx+0x3c>)
    453a:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    453c:	f100 0718 	add.w	r7, r0, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    4540:	f04f 0800 	mov.w	r8, #0
    4544:	2100      	movs	r1, #0
    4546:	4638      	mov	r0, r7
    4548:	f00f face 	bl	13ae8 <_impl_k_queue_get>
    454c:	4604      	mov	r4, r0
    454e:	b908      	cbnz	r0, 4554 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    4554:	6863      	ldr	r3, [r4, #4]
    4556:	b10b      	cbz	r3, 455c <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    4558:	4630      	mov	r0, r6
    455a:	4798      	blx	r3
    455c:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    455e:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    4560:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    4562:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4566:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    4568:	2b00      	cmp	r3, #0
    456a:	d1eb      	bne.n	4544 <bt_conn_notify_tx+0x10>
	list->tail = node;
    456c:	606c      	str	r4, [r5, #4]
    456e:	e7e7      	b.n	4540 <bt_conn_notify_tx+0xc>
    4570:	200003f8 	.word	0x200003f8

00004574 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4574:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4578:	4605      	mov	r5, r0
    457a:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    457c:	4844      	ldr	r0, [pc, #272]	; (4690 <send_frag+0x11c>)
    457e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4582:	4698      	mov	r8, r3
    4584:	4614      	mov	r4, r2
    4586:	f00f fd78 	bl	1407a <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    458a:	4b42      	ldr	r3, [pc, #264]	; (4694 <send_frag+0x120>)
    458c:	f103 0040 	add.w	r0, r3, #64	; 0x40
    4590:	f7ff fea4 	bl	42dc <atomic_get>
    4594:	b130      	cbz	r0, 45a4 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    4596:	7a5a      	ldrb	r2, [r3, #9]
    4598:	3a03      	subs	r2, #3
    459a:	2a01      	cmp	r2, #1
    459c:	d802      	bhi.n	45a4 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    459e:	4618      	mov	r0, r3
    45a0:	f7ff ffc8 	bl	4534 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    45a4:	7a6b      	ldrb	r3, [r5, #9]
    45a6:	2b03      	cmp	r3, #3
    45a8:	d153      	bne.n	4652 <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    45aa:	2104      	movs	r1, #4
    45ac:	f107 0008 	add.w	r0, r7, #8
    45b0:	f00e fc4b 	bl	12e4a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    45b4:	882a      	ldrh	r2, [r5, #0]
    45b6:	4e38      	ldr	r6, [pc, #224]	; (4698 <send_frag+0x124>)
    45b8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    45bc:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    45be:	89bb      	ldrh	r3, [r7, #12]
    45c0:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    45c2:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    45c4:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    45c6:	3b04      	subs	r3, #4
    45c8:	8043      	strh	r3, [r0, #2]
    45ca:	2302      	movs	r3, #2
    45cc:	753b      	strb	r3, [r7, #20]
	return node->next;
    45ce:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    45d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    45d2:	428c      	cmp	r4, r1
	list->tail = node;
    45d4:	bf08      	it	eq
    45d6:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    45d8:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    45da:	f04f 0320 	mov.w	r3, #32
    45de:	f3ef 8211 	mrs	r2, BASEPRI
    45e2:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    45e6:	2300      	movs	r3, #0
    45e8:	6023      	str	r3, [r4, #0]
    45ea:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    45ec:	2b00      	cmp	r3, #0
    45ee:	d13f      	bne.n	4670 <send_frag+0xfc>
	list->tail = node;
    45f0:	616c      	str	r4, [r5, #20]
	list->head = node;
    45f2:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    45f4:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    45f8:	4638      	mov	r0, r7
    45fa:	f7fd ffc3 	bl	2584 <bt_send>
	if (err) {
    45fe:	2800      	cmp	r0, #0
    4600:	d042      	beq.n	4688 <send_frag+0x114>
		BT_ERR("Unable to send to driver (err %d)", err);
    4602:	4b26      	ldr	r3, [pc, #152]	; (469c <send_frag+0x128>)
    4604:	9302      	str	r3, [sp, #8]
    4606:	9001      	str	r0, [sp, #4]
    4608:	9300      	str	r3, [sp, #0]
    460a:	4a25      	ldr	r2, [pc, #148]	; (46a0 <send_frag+0x12c>)
    460c:	4b25      	ldr	r3, [pc, #148]	; (46a4 <send_frag+0x130>)
    460e:	4926      	ldr	r1, [pc, #152]	; (46a8 <send_frag+0x134>)
    4610:	4826      	ldr	r0, [pc, #152]	; (46ac <send_frag+0x138>)
    4612:	f7fc fcbb 	bl	f8c <printk>
	__asm__ volatile(
    4616:	f04f 0320 	mov.w	r3, #32
    461a:	f3ef 8111 	mrs	r1, BASEPRI
    461e:	f383 8811 	msr	BASEPRI, r3
    4622:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4624:	2200      	movs	r2, #0
    4626:	b153      	cbz	r3, 463e <send_frag+0xca>
    4628:	429c      	cmp	r4, r3
    462a:	d12a      	bne.n	4682 <send_frag+0x10e>
    462c:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    462e:	bb12      	cbnz	r2, 4676 <send_frag+0x102>
    4630:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4632:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4634:	4294      	cmp	r4, r2
    4636:	d100      	bne.n	463a <send_frag+0xc6>
	list->tail = node;
    4638:	616b      	str	r3, [r5, #20]
	parent->next = child;
    463a:	2300      	movs	r3, #0
    463c:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    463e:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4642:	2300      	movs	r3, #0
    4644:	6063      	str	r3, [r4, #4]
    4646:	6833      	ldr	r3, [r6, #0]
    4648:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    464a:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    464c:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    464e:	b903      	cbnz	r3, 4652 <send_frag+0xde>
	list->tail = node;
    4650:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4652:	480f      	ldr	r0, [pc, #60]	; (4690 <send_frag+0x11c>)
    4654:	f00f fce9 	bl	1402a <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    4658:	f1b8 0f00 	cmp.w	r8, #0
    465c:	d004      	beq.n	4668 <send_frag+0xf4>
		net_buf_unref(buf);
    465e:	4638      	mov	r0, r7
    4660:	f00e fbaa 	bl	12db8 <net_buf_unref>
	}
	return false;
    4664:	f04f 0800 	mov.w	r8, #0
}
    4668:	4640      	mov	r0, r8
    466a:	b004      	add	sp, #16
    466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    4670:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4672:	616c      	str	r4, [r5, #20]
    4674:	e7be      	b.n	45f4 <send_frag+0x80>
	parent->next = child;
    4676:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4678:	696b      	ldr	r3, [r5, #20]
    467a:	429c      	cmp	r4, r3
	list->tail = node;
    467c:	bf08      	it	eq
    467e:	616a      	streq	r2, [r5, #20]
    4680:	e7db      	b.n	463a <send_frag+0xc6>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4682:	461a      	mov	r2, r3
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	e7ce      	b.n	4626 <send_frag+0xb2>
	return true;
    4688:	f04f 0801 	mov.w	r8, #1
    468c:	e7ec      	b.n	4668 <send_frag+0xf4>
    468e:	bf00      	nop
    4690:	20003af4 	.word	0x20003af4
    4694:	20000360 	.word	0x20000360
    4698:	200003f8 	.word	0x200003f8
    469c:	00014b99 	.word	0x00014b99
    46a0:	00015f55 	.word	0x00015f55
    46a4:	00016401 	.word	0x00016401
    46a8:	00015fa4 	.word	0x00015fa4
    46ac:	000155ce 	.word	0x000155ce

000046b0 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    46b0:	b538      	push	{r3, r4, r5, lr}
    46b2:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    46b4:	f100 0528 	add.w	r5, r0, #40	; 0x28
    46b8:	2100      	movs	r1, #0
    46ba:	4628      	mov	r0, r5
    46bc:	f00e fb52 	bl	12d64 <net_buf_get>
    46c0:	b958      	cbnz	r0, 46da <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    46c2:	4620      	mov	r0, r4
    46c4:	f7ff ff36 	bl	4534 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    46c8:	4620      	mov	r0, r4
    46ca:	f7ff fe0d 	bl	42e8 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    46ce:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    46d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    46d6:	f7ff be12 	b.w	42fe <atomic_dec>
		net_buf_unref(buf);
    46da:	f00e fb6d 	bl	12db8 <net_buf_unref>
    46de:	e7eb      	b.n	46b8 <conn_cleanup+0x8>

000046e0 <bt_conn_prepare_events>:
{
    46e0:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    46e2:	4b1f      	ldr	r3, [pc, #124]	; (4760 <bt_conn_prepare_events+0x80>)
    46e4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    46e6:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    46e8:	609a      	str	r2, [r3, #8]
{
    46ea:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    46ec:	f010 f8cb 	bl	14886 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    46f0:	4b1c      	ldr	r3, [pc, #112]	; (4764 <bt_conn_prepare_events+0x84>)
    46f2:	f103 0040 	add.w	r0, r3, #64	; 0x40
    46f6:	f7ff fdf1 	bl	42dc <atomic_get>
    46fa:	4619      	mov	r1, r3
    46fc:	b908      	cbnz	r0, 4702 <bt_conn_prepare_events+0x22>
			continue;
    46fe:	2001      	movs	r0, #1
    4700:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    4702:	7a5a      	ldrb	r2, [r3, #9]
    4704:	b99a      	cbnz	r2, 472e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4706:	f3bf 8f5b 	dmb	ish
    470a:	1d1a      	adds	r2, r3, #4
    470c:	e852 0f00 	ldrex	r0, [r2]
    4710:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    4714:	e842 4e00 	strex	lr, r4, [r2]
    4718:	f1be 0f00 	cmp.w	lr, #0
    471c:	d1f6      	bne.n	470c <bt_conn_prepare_events+0x2c>
    471e:	f3bf 8f5b 	dmb	ish
    4722:	0642      	lsls	r2, r0, #25
    4724:	d503      	bpl.n	472e <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    4726:	4618      	mov	r0, r3
    4728:	f7ff ffc2 	bl	46b0 <conn_cleanup>
    472c:	e7e7      	b.n	46fe <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    472e:	7a4c      	ldrb	r4, [r1, #9]
    4730:	2c03      	cmp	r4, #3
    4732:	d1e4      	bne.n	46fe <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    4734:	f105 0014 	add.w	r0, r5, #20
    4738:	4b0b      	ldr	r3, [pc, #44]	; (4768 <bt_conn_prepare_events+0x88>)
    473a:	2200      	movs	r2, #0
    473c:	2104      	movs	r1, #4
    473e:	f010 f8a2 	bl	14886 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4742:	2301      	movs	r3, #1
    4744:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    4748:	f105 0028 	add.w	r0, r5, #40	; 0x28
    474c:	4b07      	ldr	r3, [pc, #28]	; (476c <bt_conn_prepare_events+0x8c>)
    474e:	2200      	movs	r2, #0
    4750:	2104      	movs	r1, #4
    4752:	f010 f898 	bl	14886 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4756:	2302      	movs	r3, #2
    4758:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    475c:	4620      	mov	r0, r4
}
    475e:	bd38      	pop	{r3, r4, r5, pc}
    4760:	20003b90 	.word	0x20003b90
    4764:	20000360 	.word	0x20000360
    4768:	20000378 	.word	0x20000378
    476c:	20000388 	.word	0x20000388

00004770 <bt_conn_add_le>:
{
    4770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    4772:	4c17      	ldr	r4, [pc, #92]	; (47d0 <bt_conn_add_le+0x60>)
    4774:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    4778:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    477a:	4630      	mov	r0, r6
    477c:	f7ff fdae 	bl	42dc <atomic_get>
    4780:	4605      	mov	r5, r0
    4782:	b108      	cbz	r0, 4788 <bt_conn_add_le+0x18>
		return NULL;
    4784:	2000      	movs	r0, #0
    4786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    4788:	4601      	mov	r1, r0
    478a:	2298      	movs	r2, #152	; 0x98
    478c:	4620      	mov	r0, r4
    478e:	f7fd fa6d 	bl	1c6c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4792:	f3bf 8f5b 	dmb	ish
    4796:	2301      	movs	r3, #1
    4798:	e856 2f00 	ldrex	r2, [r6]
    479c:	e846 3100 	strex	r1, r3, [r6]
    47a0:	2900      	cmp	r1, #0
    47a2:	d1f9      	bne.n	4798 <bt_conn_add_le+0x28>
    47a4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    47a8:	2207      	movs	r2, #7
    47aa:	4639      	mov	r1, r7
    47ac:	f104 0044 	add.w	r0, r4, #68	; 0x44
    47b0:	f7fd fa30 	bl	1c14 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    47b4:	2318      	movs	r3, #24
    47b6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47ba:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47bc:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    47c0:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47c2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47c6:	4903      	ldr	r1, [pc, #12]	; (47d4 <bt_conn_add_le+0x64>)
    47c8:	f00f ff16 	bl	145f8 <k_delayed_work_init>
			conn = &conns[i];
    47cc:	4620      	mov	r0, r4
}
    47ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d0:	20000360 	.word	0x20000360
    47d4:	00004d25 	.word	0x00004d25

000047d8 <bt_conn_set_state>:
{
    47d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    47da:	7a45      	ldrb	r5, [r0, #9]
    47dc:	428d      	cmp	r5, r1
{
    47de:	b085      	sub	sp, #20
    47e0:	4604      	mov	r4, r0
    47e2:	460e      	mov	r6, r1
	if (conn->state == state) {
    47e4:	d10a      	bne.n	47fc <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    47e6:	4b5f      	ldr	r3, [pc, #380]	; (4964 <bt_conn_set_state+0x18c>)
    47e8:	9301      	str	r3, [sp, #4]
    47ea:	9300      	str	r3, [sp, #0]
    47ec:	4a5e      	ldr	r2, [pc, #376]	; (4968 <bt_conn_set_state+0x190>)
    47ee:	4b5f      	ldr	r3, [pc, #380]	; (496c <bt_conn_set_state+0x194>)
    47f0:	495f      	ldr	r1, [pc, #380]	; (4970 <bt_conn_set_state+0x198>)
    47f2:	4860      	ldr	r0, [pc, #384]	; (4974 <bt_conn_set_state+0x19c>)
    47f4:	f7fc fbca 	bl	f8c <printk>
}
    47f8:	b005      	add	sp, #20
    47fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    47fc:	7261      	strb	r1, [r4, #9]
	switch (old_state) {
    47fe:	b19d      	cbz	r5, 4828 <bt_conn_set_state+0x50>
    4800:	2d02      	cmp	r5, #2
    4802:	d015      	beq.n	4830 <bt_conn_set_state+0x58>
	switch (conn->state) {
    4804:	7a63      	ldrb	r3, [r4, #9]
    4806:	2b04      	cmp	r3, #4
    4808:	f200 80a1 	bhi.w	494e <bt_conn_set_state+0x176>
    480c:	a201      	add	r2, pc, #4	; (adr r2, 4814 <bt_conn_set_state+0x3c>)
    480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4812:	bf00      	nop
    4814:	00004875 	.word	0x00004875
    4818:	000047f9 	.word	0x000047f9
    481c:	00004933 	.word	0x00004933
    4820:	0000483f 	.word	0x0000483f
    4824:	000047f9 	.word	0x000047f9
	atomic_inc(&conn->ref);
    4828:	3040      	adds	r0, #64	; 0x40
    482a:	f7ff fd75 	bl	4318 <atomic_inc>
    482e:	e7e9      	b.n	4804 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4830:	7883      	ldrb	r3, [r0, #2]
    4832:	2b00      	cmp	r3, #0
    4834:	d1e6      	bne.n	4804 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    4836:	3070      	adds	r0, #112	; 0x70
    4838:	f00f feee 	bl	14618 <k_delayed_work_cancel>
    483c:	e7e2      	b.n	4804 <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    483e:	78a3      	ldrb	r3, [r4, #2]
    4840:	2b02      	cmp	r3, #2
    4842:	d0d9      	beq.n	47f8 <bt_conn_set_state+0x20>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4844:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4848:	f00f f922 	bl	13a90 <_impl_k_queue_init>
    484c:	f104 0018 	add.w	r0, r4, #24
    4850:	f00f f91e 	bl	13a90 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4854:	2100      	movs	r1, #0
    4856:	4848      	ldr	r0, [pc, #288]	; (4978 <bt_conn_set_state+0x1a0>)
    4858:	f010 f8b8 	bl	149cc <_impl_k_poll_signal>
	list->head = NULL;
    485c:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    485e:	4620      	mov	r0, r4
    4860:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    4862:	63e3      	str	r3, [r4, #60]	; 0x3c
    4864:	f000 fc1c 	bl	50a0 <bt_l2cap_connected>
		notify_connected(conn);
    4868:	4620      	mov	r0, r4
}
    486a:	b005      	add	sp, #20
    486c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    4870:	f7ff bd24 	b.w	42bc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    4874:	78a3      	ldrb	r3, [r4, #2]
    4876:	2b02      	cmp	r3, #2
    4878:	d106      	bne.n	4888 <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    487a:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    487e:	b005      	add	sp, #20
    4880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    4884:	f7ff bd3b 	b.w	42fe <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    4888:	1eeb      	subs	r3, r5, #3
    488a:	2b01      	cmp	r3, #1
    488c:	d844      	bhi.n	4918 <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    488e:	4620      	mov	r0, r4
    4890:	f000 fc40 	bl	5114 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4894:	4b39      	ldr	r3, [pc, #228]	; (497c <bt_conn_set_state+0x1a4>)
    4896:	681d      	ldr	r5, [r3, #0]
    4898:	b9ed      	cbnz	r5, 48d6 <bt_conn_set_state+0xfe>
    489a:	4e39      	ldr	r6, [pc, #228]	; (4980 <bt_conn_set_state+0x1a8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    489c:	4f39      	ldr	r7, [pc, #228]	; (4984 <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    489e:	f04f 0320 	mov.w	r3, #32
    48a2:	f3ef 8111 	mrs	r1, BASEPRI
    48a6:	f383 8811 	msr	BASEPRI, r3
    48aa:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    48ac:	b12b      	cbz	r3, 48ba <bt_conn_set_state+0xe2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48ae:	6960      	ldr	r0, [r4, #20]
	return node->next;
    48b0:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    48b2:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    48b4:	4283      	cmp	r3, r0
	list->tail = node;
    48b6:	bf08      	it	eq
    48b8:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    48ba:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    48be:	b18b      	cbz	r3, 48e4 <bt_conn_set_state+0x10c>
    48c0:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    48c2:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    48c4:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    48c6:	605d      	str	r5, [r3, #4]
	list->head = node;
    48c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    48ca:	b902      	cbnz	r2, 48ce <bt_conn_set_state+0xf6>
	list->tail = node;
    48cc:	6073      	str	r3, [r6, #4]
    48ce:	4638      	mov	r0, r7
    48d0:	f00f fbab 	bl	1402a <_impl_k_sem_give>
    48d4:	e7e3      	b.n	489e <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    48d6:	686b      	ldr	r3, [r5, #4]
    48d8:	b113      	cbz	r3, 48e0 <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    48da:	7a21      	ldrb	r1, [r4, #8]
    48dc:	4620      	mov	r0, r4
    48de:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    48e0:	692d      	ldr	r5, [r5, #16]
    48e2:	e7d9      	b.n	4898 <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    48e4:	78a3      	ldrb	r3, [r4, #2]
    48e6:	b91b      	cbnz	r3, 48f0 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    48e8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    48ec:	f00f fe94 	bl	14618 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    48f0:	f3bf 8f5b 	dmb	ish
    48f4:	3404      	adds	r4, #4
    48f6:	e854 3f00 	ldrex	r3, [r4]
    48fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    48fe:	e844 3200 	strex	r2, r3, [r4]
    4902:	2a00      	cmp	r2, #0
    4904:	d1f7      	bne.n	48f6 <bt_conn_set_state+0x11e>
    4906:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    490a:	481b      	ldr	r0, [pc, #108]	; (4978 <bt_conn_set_state+0x1a0>)
    490c:	2100      	movs	r1, #0
}
    490e:	b005      	add	sp, #20
    4910:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4914:	f010 b85a 	b.w	149cc <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4918:	2d02      	cmp	r5, #2
    491a:	d103      	bne.n	4924 <bt_conn_set_state+0x14c>
			notify_connected(conn);
    491c:	4620      	mov	r0, r4
    491e:	f7ff fccd 	bl	42bc <notify_connected>
    4922:	e7aa      	b.n	487a <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4924:	2d01      	cmp	r5, #1
    4926:	f47f af67 	bne.w	47f8 <bt_conn_set_state+0x20>
			if (conn->err) {
    492a:	7a23      	ldrb	r3, [r4, #8]
    492c:	2b00      	cmp	r3, #0
    492e:	d0a4      	beq.n	487a <bt_conn_set_state+0xa2>
    4930:	e7f4      	b.n	491c <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4932:	78a3      	ldrb	r3, [r4, #2]
    4934:	2b00      	cmp	r3, #0
    4936:	f47f af5f 	bne.w	47f8 <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    493a:	4813      	ldr	r0, [pc, #76]	; (4988 <bt_conn_set_state+0x1b0>)
    493c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    4940:	f104 0170 	add.w	r1, r4, #112	; 0x70
}
    4944:	b005      	add	sp, #20
    4946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    494a:	f00f bec9 	b.w	146e0 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    494e:	4b05      	ldr	r3, [pc, #20]	; (4964 <bt_conn_set_state+0x18c>)
    4950:	9302      	str	r3, [sp, #8]
    4952:	e88d 0048 	stmia.w	sp, {r3, r6}
    4956:	4a04      	ldr	r2, [pc, #16]	; (4968 <bt_conn_set_state+0x190>)
    4958:	4b04      	ldr	r3, [pc, #16]	; (496c <bt_conn_set_state+0x194>)
    495a:	4905      	ldr	r1, [pc, #20]	; (4970 <bt_conn_set_state+0x198>)
    495c:	480b      	ldr	r0, [pc, #44]	; (498c <bt_conn_set_state+0x1b4>)
    495e:	f7fc fb15 	bl	f8c <printk>
		break;
    4962:	e749      	b.n	47f8 <bt_conn_set_state+0x20>
    4964:	00014b99 	.word	0x00014b99
    4968:	00015fdf 	.word	0x00015fdf
    496c:	0001641e 	.word	0x0001641e
    4970:	00015fa4 	.word	0x00015fa4
    4974:	0001655f 	.word	0x0001655f
    4978:	20003b90 	.word	0x20003b90
    497c:	2000034c 	.word	0x2000034c
    4980:	200003f8 	.word	0x200003f8
    4984:	20003af4 	.word	0x20003af4
    4988:	20001990 	.word	0x20001990
    498c:	0001657d 	.word	0x0001657d

00004990 <bt_conn_lookup_handle>:
{
    4990:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4992:	4c0b      	ldr	r4, [pc, #44]	; (49c0 <bt_conn_lookup_handle+0x30>)
{
    4994:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    4996:	f104 0040 	add.w	r0, r4, #64	; 0x40
    499a:	f7ff fc9f 	bl	42dc <atomic_get>
    499e:	b168      	cbz	r0, 49bc <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    49a0:	7a63      	ldrb	r3, [r4, #9]
    49a2:	3b03      	subs	r3, #3
    49a4:	2b01      	cmp	r3, #1
    49a6:	d808      	bhi.n	49ba <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    49a8:	8823      	ldrh	r3, [r4, #0]
    49aa:	4293      	cmp	r3, r2
    49ac:	d105      	bne.n	49ba <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    49ae:	f104 0040 	add.w	r0, r4, #64	; 0x40
    49b2:	f7ff fcb1 	bl	4318 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    49b6:	4620      	mov	r0, r4
    49b8:	bd10      	pop	{r4, pc}
	return NULL;
    49ba:	2000      	movs	r0, #0
}
    49bc:	bd10      	pop	{r4, pc}
    49be:	bf00      	nop
    49c0:	20000360 	.word	0x20000360

000049c4 <bt_conn_addr_le_cmp>:
{
    49c4:	b538      	push	{r3, r4, r5, lr}
    49c6:	460d      	mov	r5, r1
    49c8:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    49ca:	f100 0144 	add.w	r1, r0, #68	; 0x44
    49ce:	2207      	movs	r2, #7
    49d0:	4628      	mov	r0, r5
    49d2:	f7fd f90a 	bl	1bea <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    49d6:	b160      	cbz	r0, 49f2 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    49d8:	78e3      	ldrb	r3, [r4, #3]
    49da:	2207      	movs	r2, #7
    49dc:	b933      	cbnz	r3, 49ec <bt_conn_addr_le_cmp+0x28>
    49de:	f104 0152 	add.w	r1, r4, #82	; 0x52
    49e2:	4628      	mov	r0, r5
}
    49e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    49e8:	f7fd b8ff 	b.w	1bea <memcmp>
    49ec:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    49f0:	e7f7      	b.n	49e2 <bt_conn_addr_le_cmp+0x1e>
    49f2:	bd38      	pop	{r3, r4, r5, pc}

000049f4 <bt_conn_lookup_addr_le>:
{
    49f4:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    49f6:	4c0b      	ldr	r4, [pc, #44]	; (4a24 <bt_conn_lookup_addr_le+0x30>)
{
    49f8:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    49fa:	f104 0040 	add.w	r0, r4, #64	; 0x40
    49fe:	f7ff fc6d 	bl	42dc <atomic_get>
    4a02:	b908      	cbnz	r0, 4a08 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    4a04:	2000      	movs	r0, #0
    4a06:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4a08:	78a3      	ldrb	r3, [r4, #2]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d1fa      	bne.n	4a04 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a0e:	4620      	mov	r0, r4
    4a10:	f7ff ffd8 	bl	49c4 <bt_conn_addr_le_cmp>
    4a14:	2800      	cmp	r0, #0
    4a16:	d1f5      	bne.n	4a04 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    4a18:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4a1c:	f7ff fc7c 	bl	4318 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a20:	4620      	mov	r0, r4
}
    4a22:	bd10      	pop	{r4, pc}
    4a24:	20000360 	.word	0x20000360

00004a28 <bt_conn_lookup_state_le>:
{
    4a28:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4a2a:	4c0e      	ldr	r4, [pc, #56]	; (4a64 <bt_conn_lookup_state_le+0x3c>)
{
    4a2c:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    4a2e:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    4a32:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4a34:	f7ff fc52 	bl	42dc <atomic_get>
    4a38:	b908      	cbnz	r0, 4a3e <bt_conn_lookup_state_le+0x16>
	return NULL;
    4a3a:	2000      	movs	r0, #0
    4a3c:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4a3e:	78a2      	ldrb	r2, [r4, #2]
    4a40:	2a00      	cmp	r2, #0
    4a42:	d1fa      	bne.n	4a3a <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a44:	b93b      	cbnz	r3, 4a56 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    4a46:	7a63      	ldrb	r3, [r4, #9]
    4a48:	42ab      	cmp	r3, r5
    4a4a:	d1f6      	bne.n	4a3a <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    4a4c:	4806      	ldr	r0, [pc, #24]	; (4a68 <bt_conn_lookup_state_le+0x40>)
    4a4e:	f7ff fc63 	bl	4318 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    4a52:	4804      	ldr	r0, [pc, #16]	; (4a64 <bt_conn_lookup_state_le+0x3c>)
}
    4a54:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a56:	4619      	mov	r1, r3
    4a58:	4620      	mov	r0, r4
    4a5a:	f7ff ffb3 	bl	49c4 <bt_conn_addr_le_cmp>
    4a5e:	2800      	cmp	r0, #0
    4a60:	d1eb      	bne.n	4a3a <bt_conn_lookup_state_le+0x12>
    4a62:	e7f0      	b.n	4a46 <bt_conn_lookup_state_le+0x1e>
    4a64:	20000360 	.word	0x20000360
    4a68:	200003a0 	.word	0x200003a0

00004a6c <bt_conn_unref>:
	atomic_dec(&conn->ref);
    4a6c:	3040      	adds	r0, #64	; 0x40
    4a6e:	f7ff bc46 	b.w	42fe <atomic_dec>

00004a72 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4a72:	3044      	adds	r0, #68	; 0x44
    4a74:	4770      	bx	lr
	...

00004a78 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    4a78:	b570      	push	{r4, r5, r6, lr}
    4a7a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    4a7c:	4608      	mov	r0, r1
{
    4a7e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    4a80:	f7fd fcd4 	bl	242c <bt_le_conn_params_valid>
    4a84:	b908      	cbnz	r0, 4a8a <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    4a86:	2400      	movs	r4, #0
    4a88:	e01d      	b.n	4ac6 <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4a8a:	481e      	ldr	r0, [pc, #120]	; (4b04 <bt_conn_create_le+0x8c>)
    4a8c:	f7ff fc26 	bl	42dc <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4a90:	0583      	lsls	r3, r0, #22
    4a92:	d4f8      	bmi.n	4a86 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    4a94:	4630      	mov	r0, r6
    4a96:	f7ff ffad 	bl	49f4 <bt_conn_lookup_addr_le>
	if (conn) {
    4a9a:	4604      	mov	r4, r0
    4a9c:	b1a8      	cbz	r0, 4aca <bt_conn_create_le+0x52>
		switch (conn->state) {
    4a9e:	7a43      	ldrb	r3, [r0, #9]
    4aa0:	2b01      	cmp	r3, #1
    4aa2:	d007      	beq.n	4ab4 <bt_conn_create_le+0x3c>
    4aa4:	d301      	bcc.n	4aaa <bt_conn_create_le+0x32>
    4aa6:	2b03      	cmp	r3, #3
    4aa8:	d90d      	bls.n	4ac6 <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    4aaa:	f104 0040 	add.w	r0, r4, #64	; 0x40
    4aae:	f7ff fc26 	bl	42fe <atomic_dec>
    4ab2:	e7e8      	b.n	4a86 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4ab4:	886b      	ldrh	r3, [r5, #2]
    4ab6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	conn->le.latency = param->latency;
    4aba:	88ab      	ldrh	r3, [r5, #4]
    4abc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4ac0:	88eb      	ldrh	r3, [r5, #6]
    4ac2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4ac6:	4620      	mov	r0, r4
    4ac8:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4aca:	4630      	mov	r0, r6
    4acc:	f7ff fe50 	bl	4770 <bt_conn_add_le>
	if (!conn) {
    4ad0:	4604      	mov	r4, r0
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d0f7      	beq.n	4ac6 <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    4ad6:	2207      	movs	r2, #7
    4ad8:	4631      	mov	r1, r6
    4ada:	3052      	adds	r0, #82	; 0x52
    4adc:	f7fd f89a 	bl	1c14 <memcpy>
	conn->le.interval_max = param->interval_max;
    4ae0:	886b      	ldrh	r3, [r5, #2]
    4ae2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4ae6:	88ab      	ldrh	r3, [r5, #4]
    4ae8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4aec:	88eb      	ldrh	r3, [r5, #6]
    4aee:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4af2:	4620      	mov	r0, r4
    4af4:	2101      	movs	r1, #1
    4af6:	f7ff fe6f 	bl	47d8 <bt_conn_set_state>
	bt_le_scan_update(true);
    4afa:	2001      	movs	r0, #1
    4afc:	f7fd fe06 	bl	270c <bt_le_scan_update>
	return conn;
    4b00:	e7e1      	b.n	4ac6 <bt_conn_create_le+0x4e>
    4b02:	bf00      	nop
    4b04:	20003ad8 	.word	0x20003ad8

00004b08 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4b08:	b570      	push	{r4, r5, r6, lr}
    4b0a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4b0c:	460d      	mov	r5, r1
    4b0e:	2900      	cmp	r1, #0
    4b10:	d13d      	bne.n	4b8e <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    4b12:	4630      	mov	r0, r6
    4b14:	f7ff ff6e 	bl	49f4 <bt_conn_lookup_addr_le>
	if (!conn) {
    4b18:	4604      	mov	r4, r0
    4b1a:	b928      	cbnz	r0, 4b28 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4b1c:	4630      	mov	r0, r6
    4b1e:	f7ff fe27 	bl	4770 <bt_conn_add_le>
		if (!conn) {
    4b22:	4604      	mov	r4, r0
    4b24:	2800      	cmp	r0, #0
    4b26:	d053      	beq.n	4bd0 <bt_le_set_auto_conn+0xc8>
    4b28:	1d23      	adds	r3, r4, #4
    4b2a:	f104 0640 	add.w	r6, r4, #64	; 0x40
			return -ENOMEM;
		}
	}

	if (param) {
    4b2e:	2d00      	cmp	r5, #0
    4b30:	d035      	beq.n	4b9e <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    4b32:	886a      	ldrh	r2, [r5, #2]
    4b34:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
	conn->le.latency = param->latency;
    4b38:	88aa      	ldrh	r2, [r5, #4]
    4b3a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
	conn->le.timeout = param->timeout;
    4b3e:	88ea      	ldrh	r2, [r5, #6]
    4b40:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4b44:	f3bf 8f5b 	dmb	ish
    4b48:	e853 2f00 	ldrex	r2, [r3]
    4b4c:	f042 0101 	orr.w	r1, r2, #1
    4b50:	e843 1000 	strex	r0, r1, [r3]
    4b54:	2800      	cmp	r0, #0
    4b56:	d1f7      	bne.n	4b48 <bt_le_set_auto_conn+0x40>
    4b58:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    4b5c:	07d1      	lsls	r1, r2, #31
    4b5e:	d402      	bmi.n	4b66 <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    4b60:	4630      	mov	r0, r6
    4b62:	f7ff fbd9 	bl	4318 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    4b66:	7a63      	ldrb	r3, [r4, #9]
    4b68:	b963      	cbnz	r3, 4b84 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b6a:	481b      	ldr	r0, [pc, #108]	; (4bd8 <bt_le_set_auto_conn+0xd0>)
    4b6c:	f7ff fbb6 	bl	42dc <atomic_get>
    4b70:	0783      	lsls	r3, r0, #30
    4b72:	d507      	bpl.n	4b84 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    4b74:	b11d      	cbz	r5, 4b7e <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4b76:	2101      	movs	r1, #1
    4b78:	4620      	mov	r0, r4
    4b7a:	f7ff fe2d 	bl	47d8 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    4b7e:	2000      	movs	r0, #0
    4b80:	f7fd fdc4 	bl	270c <bt_le_scan_update>
	atomic_dec(&conn->ref);
    4b84:	4630      	mov	r0, r6
    4b86:	f7ff fbba 	bl	42fe <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    4b8a:	2000      	movs	r0, #0
    4b8c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    4b8e:	4608      	mov	r0, r1
    4b90:	f7fd fc4c 	bl	242c <bt_le_conn_params_valid>
    4b94:	2800      	cmp	r0, #0
    4b96:	d1bc      	bne.n	4b12 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    4b98:	f06f 0015 	mvn.w	r0, #21
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b9e:	f3bf 8f5b 	dmb	ish
    4ba2:	e853 2f00 	ldrex	r2, [r3]
    4ba6:	f022 0101 	bic.w	r1, r2, #1
    4baa:	e843 1000 	strex	r0, r1, [r3]
    4bae:	2800      	cmp	r0, #0
    4bb0:	d1f7      	bne.n	4ba2 <bt_le_set_auto_conn+0x9a>
    4bb2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    4bb6:	07d2      	lsls	r2, r2, #31
    4bb8:	d5d5      	bpl.n	4b66 <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    4bba:	4630      	mov	r0, r6
    4bbc:	f7ff fb9f 	bl	42fe <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4bc0:	7a63      	ldrb	r3, [r4, #9]
    4bc2:	2b01      	cmp	r3, #1
    4bc4:	d1cf      	bne.n	4b66 <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4bc6:	4629      	mov	r1, r5
    4bc8:	4620      	mov	r0, r4
    4bca:	f7ff fe05 	bl	47d8 <bt_conn_set_state>
    4bce:	e7ca      	b.n	4b66 <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    4bd0:	f06f 000b 	mvn.w	r0, #11
}
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
    4bd6:	bf00      	nop
    4bd8:	20003ad8 	.word	0x20003ad8

00004bdc <bt_conn_disconnect>:
{
    4bdc:	b570      	push	{r4, r5, r6, lr}
    4bde:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4be0:	7881      	ldrb	r1, [r0, #2]
{
    4be2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4be4:	b911      	cbnz	r1, 4bec <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    4be6:	3044      	adds	r0, #68	; 0x44
    4be8:	f7ff ff8e 	bl	4b08 <bt_le_set_auto_conn>
	switch (conn->state) {
    4bec:	7a63      	ldrb	r3, [r4, #9]
    4bee:	3b01      	subs	r3, #1
    4bf0:	2b03      	cmp	r3, #3
    4bf2:	d803      	bhi.n	4bfc <bt_conn_disconnect+0x20>
    4bf4:	e8df f003 	tbb	[pc, r3]
    4bf8:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4bfc:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4c00:	4628      	mov	r0, r5
    4c02:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c04:	4620      	mov	r0, r4
		conn->err = reason;
    4c06:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c08:	2100      	movs	r1, #0
    4c0a:	f7ff fde5 	bl	47d8 <bt_conn_set_state>
		bt_le_scan_update(false);
    4c0e:	2000      	movs	r0, #0
    4c10:	f7fd fd7c 	bl	270c <bt_le_scan_update>
		return 0;
    4c14:	2500      	movs	r5, #0
    4c16:	e7f3      	b.n	4c00 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4c18:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4c1c:	f00f fcfc 	bl	14618 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4c20:	2100      	movs	r1, #0
    4c22:	f242 000e 	movw	r0, #8206	; 0x200e
}
    4c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4c2a:	f7fd bcd5 	b.w	25d8 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4c2e:	2103      	movs	r1, #3
    4c30:	f240 4006 	movw	r0, #1030	; 0x406
    4c34:	f7fd fa6c 	bl	2110 <bt_hci_cmd_create>
	if (!buf) {
    4c38:	4605      	mov	r5, r0
    4c3a:	b198      	cbz	r0, 4c64 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4c3c:	2103      	movs	r1, #3
    4c3e:	3008      	adds	r0, #8
    4c40:	f00e f8ec 	bl	12e1c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4c44:	8823      	ldrh	r3, [r4, #0]
    4c46:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4c48:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4c4a:	4629      	mov	r1, r5
    4c4c:	f240 4006 	movw	r0, #1030	; 0x406
    4c50:	f7fd fcc2 	bl	25d8 <bt_hci_cmd_send>
	if (err) {
    4c54:	4605      	mov	r5, r0
    4c56:	2800      	cmp	r0, #0
    4c58:	d1d2      	bne.n	4c00 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4c5a:	2104      	movs	r1, #4
    4c5c:	4620      	mov	r0, r4
    4c5e:	f7ff fdbb 	bl	47d8 <bt_conn_set_state>
    4c62:	e7cd      	b.n	4c00 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    4c64:	f06f 0536 	mvn.w	r5, #54	; 0x36
    4c68:	e7ca      	b.n	4c00 <bt_conn_disconnect+0x24>

00004c6a <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c6c:	4607      	mov	r7, r0
    4c6e:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4c70:	f242 0013 	movw	r0, #8211	; 0x2013
    4c74:	210e      	movs	r1, #14
    4c76:	f7fd fa4b 	bl	2110 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4c7a:	4606      	mov	r6, r0
    4c7c:	b1c8      	cbz	r0, 4cb2 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4c7e:	210e      	movs	r1, #14
    4c80:	3008      	adds	r0, #8
    4c82:	f00e f8cb 	bl	12e1c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    4c86:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4c88:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4c8a:	220e      	movs	r2, #14
    4c8c:	f7fc ffee 	bl	1c6c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4c90:	883b      	ldrh	r3, [r7, #0]
    4c92:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4c94:	882b      	ldrh	r3, [r5, #0]
    4c96:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4c98:	886b      	ldrh	r3, [r5, #2]
    4c9a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4c9c:	88ab      	ldrh	r3, [r5, #4]
    4c9e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4ca0:	88eb      	ldrh	r3, [r5, #6]
    4ca2:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4ca4:	4631      	mov	r1, r6
    4ca6:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4cae:	f7fd bc93 	b.w	25d8 <bt_hci_cmd_send>
}
    4cb2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004cb8 <bt_conn_le_param_update>:
{
    4cb8:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    4cba:	880a      	ldrh	r2, [r1, #0]
    4cbc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    4cc0:	429a      	cmp	r2, r3
{
    4cc2:	4604      	mov	r4, r0
    4cc4:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    4cc6:	d80c      	bhi.n	4ce2 <bt_conn_le_param_update+0x2a>
    4cc8:	884a      	ldrh	r2, [r1, #2]
    4cca:	429a      	cmp	r2, r3
    4ccc:	d309      	bcc.n	4ce2 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    4cce:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    4cd2:	888b      	ldrh	r3, [r1, #4]
    4cd4:	429a      	cmp	r2, r3
    4cd6:	d104      	bne.n	4ce2 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    4cd8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    4cdc:	88cb      	ldrh	r3, [r1, #6]
    4cde:	429a      	cmp	r2, r3
    4ce0:	d01a      	beq.n	4d18 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    4ce2:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4ce6:	f00f fc97 	bl	14618 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4cea:	4b0d      	ldr	r3, [pc, #52]	; (4d20 <bt_conn_le_param_update+0x68>)
    4cec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4cf0:	079a      	lsls	r2, r3, #30
    4cf2:	d503      	bpl.n	4cfc <bt_conn_le_param_update+0x44>
    4cf4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4cf8:	079b      	lsls	r3, r3, #30
    4cfa:	d401      	bmi.n	4d00 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4cfc:	78e3      	ldrb	r3, [r4, #3]
    4cfe:	b92b      	cbnz	r3, 4d0c <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    4d00:	4629      	mov	r1, r5
    4d02:	4620      	mov	r0, r4
}
    4d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4d08:	f7ff bfaf 	b.w	4c6a <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    4d0c:	4629      	mov	r1, r5
    4d0e:	4620      	mov	r0, r4
}
    4d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4d14:	f000 bb66 	b.w	53e4 <bt_l2cap_update_conn_param>
}
    4d18:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4d1c:	bd38      	pop	{r3, r4, r5, pc}
    4d1e:	bf00      	nop
    4d20:	20003a68 	.word	0x20003a68

00004d24 <le_conn_update>:
{
    4d24:	4603      	mov	r3, r0
    4d26:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d28:	f813 2c67 	ldrb.w	r2, [r3, #-103]
    4d2c:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    4d2e:	f1a0 0070 	sub.w	r0, r0, #112	; 0x70
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4d32:	d105      	bne.n	4d40 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    4d34:	2113      	movs	r1, #19
    4d36:	f7ff ff51 	bl	4bdc <bt_conn_disconnect>
}
    4d3a:	b003      	add	sp, #12
    4d3c:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4d40:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    4d44:	f8ad 2000 	strh.w	r2, [sp]
    4d48:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    4d4c:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    4d50:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4d52:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    4d56:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4d5a:	f8ad 2004 	strh.w	r2, [sp, #4]
    4d5e:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4d62:	f7ff ffa9 	bl	4cb8 <bt_conn_le_param_update>
    4d66:	e7e8      	b.n	4d3a <le_conn_update+0x16>

00004d68 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4d68:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4d6a:	4b08      	ldr	r3, [pc, #32]	; (4d8c <bt_conn_create_pdu+0x24>)
{
    4d6c:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4d6e:	2800      	cmp	r0, #0
    4d70:	bf08      	it	eq
    4d72:	4618      	moveq	r0, r3
    4d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d78:	f00d ffee 	bl	12d58 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4d7c:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4d7e:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4d80:	3008      	adds	r0, #8
    4d82:	f00e f808 	bl	12d96 <net_buf_simple_reserve>

	return buf;
}
    4d86:	4620      	mov	r0, r4
    4d88:	bd38      	pop	{r3, r4, r5, pc}
    4d8a:	bf00      	nop
    4d8c:	20003f4c 	.word	0x20003f4c

00004d90 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d94:	4606      	mov	r6, r0
    4d96:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4d98:	4816      	ldr	r0, [pc, #88]	; (4df4 <create_frag.isra.8+0x64>)
    4d9a:	2100      	movs	r1, #0
    4d9c:	f7ff ffe4 	bl	4d68 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4da0:	7833      	ldrb	r3, [r6, #0]
    4da2:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4da4:	4605      	mov	r5, r0
    4da6:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4daa:	d005      	beq.n	4db8 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4dac:	f00e f804 	bl	12db8 <net_buf_unref>
		return NULL;
    4db0:	4635      	mov	r5, r6
}
    4db2:	4628      	mov	r0, r5
    4db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    4db8:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4dba:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4dbe:	4e0e      	ldr	r6, [pc, #56]	; (4df8 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4dc0:	4638      	mov	r0, r7
    4dc2:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    4dc6:	f00e f864 	bl	12e92 <net_buf_simple_tailroom>
    4dca:	4580      	cmp	r8, r0
    4dcc:	d20c      	bcs.n	4de8 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4dce:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4dd2:	f854 1f08 	ldr.w	r1, [r4, #8]!
    4dd6:	4632      	mov	r2, r6
    4dd8:	4638      	mov	r0, r7
    4dda:	f00e f825 	bl	12e28 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4dde:	4631      	mov	r1, r6
    4de0:	4620      	mov	r0, r4
    4de2:	f00e f83a 	bl	12e5a <net_buf_simple_pull>
    4de6:	e7e4      	b.n	4db2 <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4de8:	4638      	mov	r0, r7
    4dea:	f00e f852 	bl	12e92 <net_buf_simple_tailroom>
    4dee:	b286      	uxth	r6, r0
    4df0:	e7ef      	b.n	4dd2 <create_frag.isra.8+0x42>
    4df2:	bf00      	nop
    4df4:	20003f6c 	.word	0x20003f6c
    4df8:	20003a68 	.word	0x20003a68

00004dfc <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    4dfc:	7a43      	ldrb	r3, [r0, #9]
{
    4dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e00:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    4e02:	b99b      	cbnz	r3, 4e2c <bt_conn_process_tx+0x30>
    4e04:	f3bf 8f5b 	dmb	ish
    4e08:	1d03      	adds	r3, r0, #4
    4e0a:	e853 2f00 	ldrex	r2, [r3]
    4e0e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4e12:	e843 1400 	strex	r4, r1, [r3]
    4e16:	2c00      	cmp	r4, #0
    4e18:	d1f7      	bne.n	4e0a <bt_conn_process_tx+0xe>
    4e1a:	f3bf 8f5b 	dmb	ish
    4e1e:	0653      	lsls	r3, r2, #25
    4e20:	d504      	bpl.n	4e2c <bt_conn_process_tx+0x30>
}
    4e22:	b003      	add	sp, #12
    4e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    4e28:	f7ff bc42 	b.w	46b0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4e2c:	2100      	movs	r1, #0
    4e2e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4e32:	f00d ff97 	bl	12d64 <net_buf_get>
	BT_ASSERT(buf);
    4e36:	4604      	mov	r4, r0
    4e38:	b970      	cbnz	r0, 4e58 <bt_conn_process_tx+0x5c>
    4e3a:	4b22      	ldr	r3, [pc, #136]	; (4ec4 <bt_conn_process_tx+0xc8>)
    4e3c:	9301      	str	r3, [sp, #4]
    4e3e:	9300      	str	r3, [sp, #0]
    4e40:	4a21      	ldr	r2, [pc, #132]	; (4ec8 <bt_conn_process_tx+0xcc>)
    4e42:	4b22      	ldr	r3, [pc, #136]	; (4ecc <bt_conn_process_tx+0xd0>)
    4e44:	4922      	ldr	r1, [pc, #136]	; (4ed0 <bt_conn_process_tx+0xd4>)
    4e46:	4823      	ldr	r0, [pc, #140]	; (4ed4 <bt_conn_process_tx+0xd8>)
    4e48:	f7fc f8a0 	bl	f8c <printk>
    4e4c:	4040      	eors	r0, r0
    4e4e:	f380 8811 	msr	BASEPRI, r0
    4e52:	f04f 0004 	mov.w	r0, #4
    4e56:	df02      	svc	2
	return bt_dev.le.mtu;
    4e58:	4e1f      	ldr	r6, [pc, #124]	; (4ed8 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    4e5a:	8981      	ldrh	r1, [r0, #12]
    4e5c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4e60:	4291      	cmp	r1, r2
    4e62:	d808      	bhi.n	4e76 <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4e64:	2300      	movs	r3, #0
    4e66:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4e68:	4621      	mov	r1, r4
    4e6a:	4628      	mov	r0, r5
    4e6c:	f7ff fb82 	bl	4574 <send_frag>
	if (!send_buf(conn, buf)) {
    4e70:	b148      	cbz	r0, 4e86 <bt_conn_process_tx+0x8a>
}
    4e72:	b003      	add	sp, #12
    4e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e76:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    4e7a:	4601      	mov	r1, r0
    4e7c:	4638      	mov	r0, r7
    4e7e:	f7ff ff87 	bl	4d90 <create_frag.isra.8>
	if (!frag) {
    4e82:	4601      	mov	r1, r0
    4e84:	b928      	cbnz	r0, 4e92 <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    4e86:	4620      	mov	r0, r4
}
    4e88:	b003      	add	sp, #12
    4e8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    4e8e:	f00d bf93 	b.w	12db8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4e92:	2301      	movs	r3, #1
    4e94:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4e96:	4628      	mov	r0, r5
    4e98:	f7ff fb6c 	bl	4574 <send_frag>
    4e9c:	2800      	cmp	r0, #0
    4e9e:	d0f2      	beq.n	4e86 <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    4ea0:	89a2      	ldrh	r2, [r4, #12]
    4ea2:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4ea6:	429a      	cmp	r2, r3
    4ea8:	d802      	bhi.n	4eb0 <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4eaa:	2300      	movs	r3, #0
    4eac:	2201      	movs	r2, #1
    4eae:	e7db      	b.n	4e68 <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    4eb0:	4621      	mov	r1, r4
    4eb2:	4638      	mov	r0, r7
    4eb4:	f7ff ff6c 	bl	4d90 <create_frag.isra.8>
		if (!frag) {
    4eb8:	4601      	mov	r1, r0
    4eba:	2800      	cmp	r0, #0
    4ebc:	d0e3      	beq.n	4e86 <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ebe:	2301      	movs	r3, #1
    4ec0:	461a      	mov	r2, r3
    4ec2:	e7e8      	b.n	4e96 <bt_conn_process_tx+0x9a>
    4ec4:	00014b99 	.word	0x00014b99
    4ec8:	00015f55 	.word	0x00015f55
    4ecc:	0001640b 	.word	0x0001640b
    4ed0:	00015fa4 	.word	0x00015fa4
    4ed4:	00016151 	.word	0x00016151
    4ed8:	20003a68 	.word	0x20003a68

00004edc <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4edc:	4b03      	ldr	r3, [pc, #12]	; (4eec <bt_conn_get_id+0x10>)
    4ede:	1ac0      	subs	r0, r0, r3
    4ee0:	4b03      	ldr	r3, [pc, #12]	; (4ef0 <bt_conn_get_id+0x14>)
    4ee2:	10c0      	asrs	r0, r0, #3
    4ee4:	4358      	muls	r0, r3
}
    4ee6:	b2c0      	uxtb	r0, r0
    4ee8:	4770      	bx	lr
    4eea:	bf00      	nop
    4eec:	20000360 	.word	0x20000360
    4ef0:	286bca1b 	.word	0x286bca1b

00004ef4 <bt_conn_init>:
	parent->next = child;
    4ef4:	4b12      	ldr	r3, [pc, #72]	; (4f40 <bt_conn_init+0x4c>)
    4ef6:	4a13      	ldr	r2, [pc, #76]	; (4f44 <bt_conn_init+0x50>)
    4ef8:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4efa:	b510      	push	{r4, lr}
    4efc:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4efe:	6859      	ldr	r1, [r3, #4]
    4f00:	b901      	cbnz	r1, 4f04 <bt_conn_init+0x10>
	list->tail = node;
    4f02:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4f04:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4f06:	6092      	str	r2, [r2, #8]
	list->head = node;
    4f08:	4a0f      	ldr	r2, [pc, #60]	; (4f48 <bt_conn_init+0x54>)
    4f0a:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4f0c:	b901      	cbnz	r1, 4f10 <bt_conn_init+0x1c>
	list->tail = node;
    4f0e:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4f10:	f001 fb56 	bl	65c0 <bt_att_init>

	err = bt_smp_init();
    4f14:	f002 f882 	bl	701c <bt_smp_init>
	if (err) {
    4f18:	4604      	mov	r4, r0
    4f1a:	b970      	cbnz	r0, 4f3a <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4f1c:	f000 fa8a 	bl	5434 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4f20:	480a      	ldr	r0, [pc, #40]	; (4f4c <bt_conn_init+0x58>)
    4f22:	f7ff f9db 	bl	42dc <atomic_get>
    4f26:	b140      	cbz	r0, 4f3a <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4f28:	4809      	ldr	r0, [pc, #36]	; (4f50 <bt_conn_init+0x5c>)
    4f2a:	f7ff f9d7 	bl	42dc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4f2e:	07c3      	lsls	r3, r0, #31
    4f30:	d503      	bpl.n	4f3a <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4f32:	2101      	movs	r1, #1
    4f34:	4807      	ldr	r0, [pc, #28]	; (4f54 <bt_conn_init+0x60>)
    4f36:	f7ff fc4f 	bl	47d8 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4f3a:	4620      	mov	r0, r4
    4f3c:	bd10      	pop	{r4, pc}
    4f3e:	bf00      	nop
    4f40:	200003f8 	.word	0x200003f8
    4f44:	20000350 	.word	0x20000350
    4f48:	20000358 	.word	0x20000358
    4f4c:	200003a0 	.word	0x200003a0
    4f50:	20000364 	.word	0x20000364
    4f54:	20000360 	.word	0x20000360

00004f58 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4f58:	4770      	bx	lr
	...

00004f5c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4f5e:	4a0b      	ldr	r2, [pc, #44]	; (4f8c <l2cap_accept+0x30>)
    4f60:	6813      	ldr	r3, [r2, #0]
    4f62:	b933      	cbnz	r3, 4f72 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4f64:	480a      	ldr	r0, [pc, #40]	; (4f90 <l2cap_accept+0x34>)
    4f66:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4f68:	600a      	str	r2, [r1, #0]

		return 0;
    4f6a:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4f6c:	b005      	add	sp, #20
    4f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    4f72:	4b08      	ldr	r3, [pc, #32]	; (4f94 <l2cap_accept+0x38>)
    4f74:	9302      	str	r3, [sp, #8]
    4f76:	9001      	str	r0, [sp, #4]
    4f78:	9300      	str	r3, [sp, #0]
    4f7a:	4a07      	ldr	r2, [pc, #28]	; (4f98 <l2cap_accept+0x3c>)
    4f7c:	4b07      	ldr	r3, [pc, #28]	; (4f9c <l2cap_accept+0x40>)
    4f7e:	4908      	ldr	r1, [pc, #32]	; (4fa0 <l2cap_accept+0x44>)
    4f80:	4808      	ldr	r0, [pc, #32]	; (4fa4 <l2cap_accept+0x48>)
    4f82:	f7fc f803 	bl	f8c <printk>
	return -ENOMEM;
    4f86:	f06f 000b 	mvn.w	r0, #11
    4f8a:	e7ef      	b.n	4f6c <l2cap_accept+0x10>
    4f8c:	20000400 	.word	0x20000400
    4f90:	20003bac 	.word	0x20003bac
    4f94:	00014b99 	.word	0x00014b99
    4f98:	00015f55 	.word	0x00015f55
    4f9c:	00016622 	.word	0x00016622
    4fa0:	00015fa4 	.word	0x00015fa4
    4fa4:	00016691 	.word	0x00016691

00004fa8 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4faa:	4607      	mov	r7, r0
    4fac:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fae:	2000      	movs	r0, #0
    4fb0:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4fb2:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fb4:	f7ff fed8 	bl	4d68 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4fb8:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fba:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4fbc:	3008      	adds	r0, #8
    4fbe:	f00d ff2d 	bl	12e1c <net_buf_simple_add>
	hdr->code = code;
    4fc2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4fc4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4fc6:	8045      	strh	r5, [r0, #2]
}
    4fc8:	4620      	mov	r0, r4
    4fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004fcc <l2cap_connected>:
    4fcc:	4770      	bx	lr
	...

00004fd0 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4fd0:	2300      	movs	r3, #0
    4fd2:	6083      	str	r3, [r0, #8]
    4fd4:	4b05      	ldr	r3, [pc, #20]	; (4fec <bt_l2cap_le_fixed_chan_register+0x1c>)
    4fd6:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4fd8:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4fdc:	b911      	cbnz	r1, 4fe4 <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4fde:	605a      	str	r2, [r3, #4]
	list->head = node;
    4fe0:	601a      	str	r2, [r3, #0]
    4fe2:	4770      	bx	lr
	parent->next = child;
    4fe4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4fe6:	605a      	str	r2, [r3, #4]
    4fe8:	4770      	bx	lr
    4fea:	bf00      	nop
    4fec:	20000498 	.word	0x20000498

00004ff0 <bt_l2cap_chan_remove>:
{
    4ff0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4ff2:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4ff4:	b113      	cbz	r3, 4ffc <bt_l2cap_chan_remove+0xc>
    4ff6:	3b08      	subs	r3, #8
    4ff8:	2200      	movs	r2, #0
    4ffa:	b903      	cbnz	r3, 4ffe <bt_l2cap_chan_remove+0xe>
    4ffc:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4ffe:	428b      	cmp	r3, r1
    5000:	f103 0408 	add.w	r4, r3, #8
    5004:	d10f      	bne.n	5026 <bt_l2cap_chan_remove+0x36>
    5006:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    5008:	b93a      	cbnz	r2, 501a <bt_l2cap_chan_remove+0x2a>
    500a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	list->head = node;
    500c:	6381      	str	r1, [r0, #56]	; 0x38
Z_GENLIST_REMOVE(slist, snode);
    500e:	4294      	cmp	r4, r2
    5010:	d100      	bne.n	5014 <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    5012:	63c1      	str	r1, [r0, #60]	; 0x3c
	parent->next = child;
    5014:	2200      	movs	r2, #0
    5016:	609a      	str	r2, [r3, #8]
    5018:	bd10      	pop	{r4, pc}
    501a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    501c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    501e:	428c      	cmp	r4, r1
	list->tail = node;
    5020:	bf08      	it	eq
    5022:	63c2      	streq	r2, [r0, #60]	; 0x3c
    5024:	e7f6      	b.n	5014 <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    5026:	4622      	mov	r2, r4
    5028:	2c00      	cmp	r4, #0
    502a:	d0e7      	beq.n	4ffc <bt_l2cap_chan_remove+0xc>
	return node->next;
    502c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    502e:	2b00      	cmp	r3, #0
    5030:	d0e4      	beq.n	4ffc <bt_l2cap_chan_remove+0xc>
    5032:	3b08      	subs	r3, #8
    5034:	e7e1      	b.n	4ffa <bt_l2cap_chan_remove+0xa>

00005036 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    5036:	6803      	ldr	r3, [r0, #0]
{
    5038:	b510      	push	{r4, lr}
    503a:	4604      	mov	r4, r0
	if (!chan->conn) {
    503c:	b12b      	cbz	r3, 504a <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    503e:	6843      	ldr	r3, [r0, #4]
    5040:	685b      	ldr	r3, [r3, #4]
    5042:	b103      	cbz	r3, 5046 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    5044:	4798      	blx	r3
	chan->conn = NULL;
    5046:	2300      	movs	r3, #0
    5048:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    504a:	68e3      	ldr	r3, [r4, #12]
    504c:	b11b      	cbz	r3, 5056 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    504e:	4620      	mov	r0, r4
}
    5050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    5054:	4718      	bx	r3
    5056:	bd10      	pop	{r4, pc}

00005058 <l2cap_rtx_timeout>:
{
    5058:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    505a:	4b0c      	ldr	r3, [pc, #48]	; (508c <l2cap_rtx_timeout+0x34>)
    505c:	4a0c      	ldr	r2, [pc, #48]	; (5090 <l2cap_rtx_timeout+0x38>)
    505e:	490d      	ldr	r1, [pc, #52]	; (5094 <l2cap_rtx_timeout+0x3c>)
{
    5060:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    5062:	f1a0 0410 	sub.w	r4, r0, #16
{
    5066:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    5068:	9302      	str	r3, [sp, #8]
    506a:	e88d 0018 	stmia.w	sp, {r3, r4}
    506e:	480a      	ldr	r0, [pc, #40]	; (5098 <l2cap_rtx_timeout+0x40>)
    5070:	4b0a      	ldr	r3, [pc, #40]	; (509c <l2cap_rtx_timeout+0x44>)
    5072:	f7fb ff8b 	bl	f8c <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5076:	f855 0c10 	ldr.w	r0, [r5, #-16]
    507a:	4621      	mov	r1, r4
    507c:	f7ff ffb8 	bl	4ff0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5080:	4620      	mov	r0, r4
}
    5082:	b005      	add	sp, #20
    5084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    5088:	f7ff bfd5 	b.w	5036 <bt_l2cap_chan_del>
    508c:	00014b99 	.word	0x00014b99
    5090:	00015f55 	.word	0x00015f55
    5094:	00015fa4 	.word	0x00015fa4
    5098:	000167e5 	.word	0x000167e5
    509c:	000165cc 	.word	0x000165cc

000050a0 <bt_l2cap_connected>:
{
    50a0:	4b1a      	ldr	r3, [pc, #104]	; (510c <bt_l2cap_connected+0x6c>)
    50a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    50a6:	681c      	ldr	r4, [r3, #0]
    50a8:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    50aa:	b12c      	cbz	r4, 50b8 <bt_l2cap_connected+0x18>
	parent->next = child;
    50ac:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    50ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5110 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    50b2:	3c08      	subs	r4, #8
    50b4:	46b9      	mov	r9, r7
    50b6:	b914      	cbnz	r4, 50be <bt_l2cap_connected+0x1e>
}
    50b8:	b003      	add	sp, #12
    50ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    50be:	6863      	ldr	r3, [r4, #4]
    50c0:	a901      	add	r1, sp, #4
    50c2:	4630      	mov	r0, r6
    50c4:	4798      	blx	r3
    50c6:	2800      	cmp	r0, #0
    50c8:	db18      	blt.n	50fc <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    50ca:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    50cc:	8823      	ldrh	r3, [r4, #0]
    50ce:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    50d0:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    50d4:	4641      	mov	r1, r8
    50d6:	f105 0010 	add.w	r0, r5, #16
    50da:	f00f fa8d 	bl	145f8 <k_delayed_work_init>
    50de:	60af      	str	r7, [r5, #8]
    50e0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	sys_slist_append(&conn->channels, &chan->node);
    50e2:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    50e6:	b972      	cbnz	r2, 5106 <bt_l2cap_connected+0x66>
	list->tail = node;
    50e8:	63f3      	str	r3, [r6, #60]	; 0x3c
	list->head = node;
    50ea:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    50ec:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    50ee:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    50f0:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    50f2:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	b103      	cbz	r3, 50fc <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    50fa:	4798      	blx	r3
	return node->next;
    50fc:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    50fe:	2c00      	cmp	r4, #0
    5100:	d0da      	beq.n	50b8 <bt_l2cap_connected+0x18>
    5102:	3c08      	subs	r4, #8
    5104:	e7d7      	b.n	50b6 <bt_l2cap_connected+0x16>
	parent->next = child;
    5106:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5108:	63f3      	str	r3, [r6, #60]	; 0x3c
    510a:	e7ef      	b.n	50ec <bt_l2cap_connected+0x4c>
    510c:	20000498 	.word	0x20000498
    5110:	00005059 	.word	0x00005059

00005114 <bt_l2cap_disconnected>:
{
    5114:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5116:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5118:	b1a3      	cbz	r3, 5144 <bt_l2cap_disconnected+0x30>
    511a:	f1b3 0008 	subs.w	r0, r3, #8
    511e:	d10a      	bne.n	5136 <bt_l2cap_disconnected+0x22>
    5120:	bd10      	pop	{r4, pc}
    5122:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5124:	f7ff ff87 	bl	5036 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5128:	b164      	cbz	r4, 5144 <bt_l2cap_disconnected+0x30>
	return node->next;
    512a:	68a3      	ldr	r3, [r4, #8]
    512c:	b103      	cbz	r3, 5130 <bt_l2cap_disconnected+0x1c>
    512e:	3b08      	subs	r3, #8
{
    5130:	4620      	mov	r0, r4
    5132:	461c      	mov	r4, r3
    5134:	e7f6      	b.n	5124 <bt_l2cap_disconnected+0x10>
    5136:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5138:	2c00      	cmp	r4, #0
    513a:	d1f2      	bne.n	5122 <bt_l2cap_disconnected+0xe>
}
    513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    5140:	f7ff bf79 	b.w	5036 <bt_l2cap_chan_del>
    5144:	bd10      	pop	{r4, pc}

00005146 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5146:	3104      	adds	r1, #4
    5148:	f7ff be0e 	b.w	4d68 <bt_conn_create_pdu>

0000514c <bt_l2cap_send_cb>:
{
    514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    514e:	4614      	mov	r4, r2
    5150:	4605      	mov	r5, r0
    5152:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    5154:	f102 0008 	add.w	r0, r2, #8
    5158:	2104      	movs	r1, #4
{
    515a:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    515c:	f00d fe75 	bl	12e4a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5160:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    5162:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5164:	3904      	subs	r1, #4
    5166:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    5168:	4632      	mov	r2, r6
    516a:	4621      	mov	r1, r4
    516c:	4628      	mov	r0, r5
}
    516e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    5172:	f7ff b9b9 	b.w	44e8 <bt_conn_send_cb>
	...

00005178 <l2cap_recv>:
{
    5178:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    517a:	898b      	ldrh	r3, [r1, #12]
    517c:	2b03      	cmp	r3, #3
{
    517e:	b087      	sub	sp, #28
    5180:	4607      	mov	r7, r0
    5182:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5184:	d809      	bhi.n	519a <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    5186:	4b5a      	ldr	r3, [pc, #360]	; (52f0 <l2cap_recv+0x178>)
    5188:	9301      	str	r3, [sp, #4]
    518a:	9300      	str	r3, [sp, #0]
    518c:	4a59      	ldr	r2, [pc, #356]	; (52f4 <l2cap_recv+0x17c>)
    518e:	4b5a      	ldr	r3, [pc, #360]	; (52f8 <l2cap_recv+0x180>)
    5190:	495a      	ldr	r1, [pc, #360]	; (52fc <l2cap_recv+0x184>)
    5192:	485b      	ldr	r0, [pc, #364]	; (5300 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5194:	f7fb fefa 	bl	f8c <printk>
		return;
    5198:	e014      	b.n	51c4 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    519a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    519c:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    519e:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    51a2:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    51a4:	f00d fe59 	bl	12e5a <net_buf_simple_pull>
	if (buf->len != len) {
    51a8:	89aa      	ldrh	r2, [r5, #12]
    51aa:	4296      	cmp	r6, r2
    51ac:	d00c      	beq.n	51c8 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    51ae:	4b50      	ldr	r3, [pc, #320]	; (52f0 <l2cap_recv+0x178>)
    51b0:	9303      	str	r3, [sp, #12]
    51b2:	9201      	str	r2, [sp, #4]
    51b4:	9300      	str	r3, [sp, #0]
    51b6:	9602      	str	r6, [sp, #8]
    51b8:	4b4f      	ldr	r3, [pc, #316]	; (52f8 <l2cap_recv+0x180>)
    51ba:	4a4e      	ldr	r2, [pc, #312]	; (52f4 <l2cap_recv+0x17c>)
    51bc:	494f      	ldr	r1, [pc, #316]	; (52fc <l2cap_recv+0x184>)
    51be:	4851      	ldr	r0, [pc, #324]	; (5304 <l2cap_recv+0x18c>)
    51c0:	f7fb fee4 	bl	f8c <printk>
}
    51c4:	b007      	add	sp, #28
    51c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    51c8:	7861      	ldrb	r1, [r4, #1]
    51ca:	b939      	cbnz	r1, 51dc <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    51cc:	4b48      	ldr	r3, [pc, #288]	; (52f0 <l2cap_recv+0x178>)
    51ce:	9301      	str	r3, [sp, #4]
    51d0:	9300      	str	r3, [sp, #0]
    51d2:	4a48      	ldr	r2, [pc, #288]	; (52f4 <l2cap_recv+0x17c>)
    51d4:	4b48      	ldr	r3, [pc, #288]	; (52f8 <l2cap_recv+0x180>)
    51d6:	4949      	ldr	r1, [pc, #292]	; (52fc <l2cap_recv+0x184>)
    51d8:	484b      	ldr	r0, [pc, #300]	; (5308 <l2cap_recv+0x190>)
    51da:	e7db      	b.n	5194 <l2cap_recv+0x1c>
	switch (hdr->code) {
    51dc:	7823      	ldrb	r3, [r4, #0]
    51de:	2b12      	cmp	r3, #18
    51e0:	d029      	beq.n	5236 <l2cap_recv+0xbe>
    51e2:	2b13      	cmp	r3, #19
    51e4:	d01d      	beq.n	5222 <l2cap_recv+0xaa>
    51e6:	2b01      	cmp	r3, #1
    51e8:	d0ec      	beq.n	51c4 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    51ea:	4a41      	ldr	r2, [pc, #260]	; (52f0 <l2cap_recv+0x178>)
    51ec:	9202      	str	r2, [sp, #8]
    51ee:	e88d 000c 	stmia.w	sp, {r2, r3}
    51f2:	4942      	ldr	r1, [pc, #264]	; (52fc <l2cap_recv+0x184>)
    51f4:	4b40      	ldr	r3, [pc, #256]	; (52f8 <l2cap_recv+0x180>)
    51f6:	4a45      	ldr	r2, [pc, #276]	; (530c <l2cap_recv+0x194>)
    51f8:	4845      	ldr	r0, [pc, #276]	; (5310 <l2cap_recv+0x198>)
    51fa:	f7fb fec7 	bl	f8c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    51fe:	2202      	movs	r2, #2
    5200:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    5202:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5204:	2001      	movs	r0, #1
    5206:	f7ff fecf 	bl	4fa8 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    520a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    520c:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    520e:	3008      	adds	r0, #8
    5210:	f00d fe04 	bl	12e1c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5214:	2300      	movs	r3, #0
    5216:	7003      	strb	r3, [r0, #0]
    5218:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    521a:	4622      	mov	r2, r4
    521c:	2105      	movs	r1, #5
    521e:	4628      	mov	r0, r5
    5220:	e025      	b.n	526e <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    5222:	2e01      	cmp	r6, #1
    5224:	d8ce      	bhi.n	51c4 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    5226:	4b32      	ldr	r3, [pc, #200]	; (52f0 <l2cap_recv+0x178>)
    5228:	9301      	str	r3, [sp, #4]
    522a:	9300      	str	r3, [sp, #0]
    522c:	4a31      	ldr	r2, [pc, #196]	; (52f4 <l2cap_recv+0x17c>)
    522e:	4b39      	ldr	r3, [pc, #228]	; (5314 <l2cap_recv+0x19c>)
    5230:	4932      	ldr	r1, [pc, #200]	; (52fc <l2cap_recv+0x184>)
    5232:	4839      	ldr	r0, [pc, #228]	; (5318 <l2cap_recv+0x1a0>)
    5234:	e7ae      	b.n	5194 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    5236:	2e07      	cmp	r6, #7
    5238:	d807      	bhi.n	524a <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    523a:	4b2d      	ldr	r3, [pc, #180]	; (52f0 <l2cap_recv+0x178>)
    523c:	9301      	str	r3, [sp, #4]
    523e:	9300      	str	r3, [sp, #0]
    5240:	4a2c      	ldr	r2, [pc, #176]	; (52f4 <l2cap_recv+0x17c>)
    5242:	4b36      	ldr	r3, [pc, #216]	; (531c <l2cap_recv+0x1a4>)
    5244:	492d      	ldr	r1, [pc, #180]	; (52fc <l2cap_recv+0x184>)
    5246:	4836      	ldr	r0, [pc, #216]	; (5320 <l2cap_recv+0x1a8>)
    5248:	e7a4      	b.n	5194 <l2cap_recv+0x1c>
    524a:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    524c:	78e6      	ldrb	r6, [r4, #3]
    524e:	b18e      	cbz	r6, 5274 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5250:	2202      	movs	r2, #2
    5252:	2001      	movs	r0, #1
    5254:	f7ff fea8 	bl	4fa8 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    5258:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    525a:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    525c:	3008      	adds	r0, #8
    525e:	f00d fddd 	bl	12e1c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    5262:	2300      	movs	r3, #0
    5264:	7003      	strb	r3, [r0, #0]
    5266:	7043      	strb	r3, [r0, #1]
    5268:	462a      	mov	r2, r5
    526a:	2105      	movs	r1, #5
    526c:	4620      	mov	r0, r4
    526e:	f7ff ff6d 	bl	514c <bt_l2cap_send_cb>
    5272:	e7a7      	b.n	51c4 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    5274:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    5276:	7858      	ldrb	r0, [r3, #1]
    5278:	781a      	ldrb	r2, [r3, #0]
    527a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    527e:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    5282:	78d8      	ldrb	r0, [r3, #3]
    5284:	789a      	ldrb	r2, [r3, #2]
    5286:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    528a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    528e:	7958      	ldrb	r0, [r3, #5]
    5290:	791a      	ldrb	r2, [r3, #4]
    5292:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    5296:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    529a:	799a      	ldrb	r2, [r3, #6]
    529c:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    529e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    52a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52a4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    52a6:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52aa:	f7ff fe7d 	bl	4fa8 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    52ae:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    52b0:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    52b2:	4620      	mov	r0, r4
    52b4:	f7ff f856 	bl	4364 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    52b8:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    52ba:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    52bc:	f107 0008 	add.w	r0, r7, #8
    52c0:	f00d fdac 	bl	12e1c <net_buf_simple_add>
	if (accepted) {
    52c4:	b17d      	cbz	r5, 52e6 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    52c6:	7006      	strb	r6, [r0, #0]
    52c8:	7046      	strb	r6, [r0, #1]
    52ca:	2300      	movs	r3, #0
    52cc:	463a      	mov	r2, r7
    52ce:	2105      	movs	r1, #5
    52d0:	4620      	mov	r0, r4
    52d2:	f7ff ff3b 	bl	514c <bt_l2cap_send_cb>
	if (accepted) {
    52d6:	2d00      	cmp	r5, #0
    52d8:	f43f af74 	beq.w	51c4 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    52dc:	a904      	add	r1, sp, #16
    52de:	4620      	mov	r0, r4
    52e0:	f7ff fcc3 	bl	4c6a <bt_conn_le_conn_update>
    52e4:	e76e      	b.n	51c4 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    52e6:	2301      	movs	r3, #1
    52e8:	7003      	strb	r3, [r0, #0]
    52ea:	7045      	strb	r5, [r0, #1]
    52ec:	e7ed      	b.n	52ca <l2cap_recv+0x152>
    52ee:	bf00      	nop
    52f0:	00014b99 	.word	0x00014b99
    52f4:	00015f55 	.word	0x00015f55
    52f8:	00016609 	.word	0x00016609
    52fc:	00015fa4 	.word	0x00015fa4
    5300:	000166c8 	.word	0x000166c8
    5304:	000166f6 	.word	0x000166f6
    5308:	00016727 	.word	0x00016727
    530c:	00015fdf 	.word	0x00015fdf
    5310:	000167b7 	.word	0x000167b7
    5314:	000165de 	.word	0x000165de
    5318:	00016758 	.word	0x00016758
    531c:	000165f0 	.word	0x000165f0
    5320:	00016784 	.word	0x00016784

00005324 <bt_l2cap_le_lookup_tx_cid>:
{
    5324:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5326:	b100      	cbz	r0, 532a <bt_l2cap_le_lookup_tx_cid+0x6>
    5328:	3808      	subs	r0, #8
    532a:	b900      	cbnz	r0, 532e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    532c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    532e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5332:	428b      	cmp	r3, r1
    5334:	d0fa      	beq.n	532c <bt_l2cap_le_lookup_tx_cid+0x8>
    5336:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5338:	2000      	movs	r0, #0
    533a:	2b00      	cmp	r3, #0
    533c:	d0f6      	beq.n	532c <bt_l2cap_le_lookup_tx_cid+0x8>
    533e:	f1a3 0008 	sub.w	r0, r3, #8
    5342:	e7f2      	b.n	532a <bt_l2cap_le_lookup_tx_cid+0x6>

00005344 <bt_l2cap_le_lookup_rx_cid>:
{
    5344:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5346:	b100      	cbz	r0, 534a <bt_l2cap_le_lookup_rx_cid+0x6>
    5348:	3808      	subs	r0, #8
    534a:	b900      	cbnz	r0, 534e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    534c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    534e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5350:	428b      	cmp	r3, r1
    5352:	d0fb      	beq.n	534c <bt_l2cap_le_lookup_rx_cid+0x8>
    5354:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5356:	2000      	movs	r0, #0
    5358:	2b00      	cmp	r3, #0
    535a:	d0f7      	beq.n	534c <bt_l2cap_le_lookup_rx_cid+0x8>
    535c:	f1a3 0008 	sub.w	r0, r3, #8
    5360:	e7f3      	b.n	534a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00005364 <bt_l2cap_recv>:
{
    5364:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    5366:	898b      	ldrh	r3, [r1, #12]
    5368:	2b03      	cmp	r3, #3
{
    536a:	4606      	mov	r6, r0
    536c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    536e:	d80e      	bhi.n	538e <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    5370:	4b15      	ldr	r3, [pc, #84]	; (53c8 <bt_l2cap_recv+0x64>)
    5372:	9301      	str	r3, [sp, #4]
    5374:	9300      	str	r3, [sp, #0]
    5376:	4a15      	ldr	r2, [pc, #84]	; (53cc <bt_l2cap_recv+0x68>)
    5378:	4b15      	ldr	r3, [pc, #84]	; (53d0 <bt_l2cap_recv+0x6c>)
    537a:	4916      	ldr	r1, [pc, #88]	; (53d4 <bt_l2cap_recv+0x70>)
    537c:	4816      	ldr	r0, [pc, #88]	; (53d8 <bt_l2cap_recv+0x74>)
    537e:	f7fb fe05 	bl	f8c <printk>
	net_buf_unref(buf);
    5382:	4620      	mov	r0, r4
}
    5384:	b004      	add	sp, #16
    5386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    538a:	f00d bd15 	b.w	12db8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    538e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5390:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5392:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5396:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5398:	f00d fd5f 	bl	12e5a <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    539c:	4629      	mov	r1, r5
    539e:	4630      	mov	r0, r6
    53a0:	f7ff ffd0 	bl	5344 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    53a4:	b950      	cbnz	r0, 53bc <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    53a6:	4b08      	ldr	r3, [pc, #32]	; (53c8 <bt_l2cap_recv+0x64>)
    53a8:	9302      	str	r3, [sp, #8]
    53aa:	e88d 0028 	stmia.w	sp, {r3, r5}
    53ae:	4a0b      	ldr	r2, [pc, #44]	; (53dc <bt_l2cap_recv+0x78>)
    53b0:	4b07      	ldr	r3, [pc, #28]	; (53d0 <bt_l2cap_recv+0x6c>)
    53b2:	4908      	ldr	r1, [pc, #32]	; (53d4 <bt_l2cap_recv+0x70>)
    53b4:	480a      	ldr	r0, [pc, #40]	; (53e0 <bt_l2cap_recv+0x7c>)
    53b6:	f7fb fde9 	bl	f8c <printk>
    53ba:	e7e2      	b.n	5382 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    53bc:	6843      	ldr	r3, [r0, #4]
    53be:	4621      	mov	r1, r4
    53c0:	691b      	ldr	r3, [r3, #16]
    53c2:	4798      	blx	r3
    53c4:	e7dd      	b.n	5382 <bt_l2cap_recv+0x1e>
    53c6:	bf00      	nop
    53c8:	00014b99 	.word	0x00014b99
    53cc:	00015f55 	.word	0x00015f55
    53d0:	00016614 	.word	0x00016614
    53d4:	00015fa4 	.word	0x00015fa4
    53d8:	0001662f 	.word	0x0001662f
    53dc:	00015fdf 	.word	0x00015fdf
    53e0:	0001665c 	.word	0x0001665c

000053e4 <bt_l2cap_update_conn_param>:
{
    53e4:	b570      	push	{r4, r5, r6, lr}
	ident++;
    53e6:	4b12      	ldr	r3, [pc, #72]	; (5430 <bt_l2cap_update_conn_param+0x4c>)
    53e8:	781a      	ldrb	r2, [r3, #0]
    53ea:	3201      	adds	r2, #1
	if (!ident) {
    53ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    53f0:	bf08      	it	eq
    53f2:	2201      	moveq	r2, #1
    53f4:	701a      	strb	r2, [r3, #0]
{
    53f6:	460c      	mov	r4, r1
    53f8:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    53fa:	7819      	ldrb	r1, [r3, #0]
    53fc:	2208      	movs	r2, #8
    53fe:	2012      	movs	r0, #18
    5400:	f7ff fdd2 	bl	4fa8 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    5404:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5406:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5408:	4408      	add	r0, r1
    540a:	f00d fd07 	bl	12e1c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    540e:	8823      	ldrh	r3, [r4, #0]
    5410:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5412:	8863      	ldrh	r3, [r4, #2]
    5414:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5416:	88a3      	ldrh	r3, [r4, #4]
    5418:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    541a:	88e3      	ldrh	r3, [r4, #6]
    541c:	80c3      	strh	r3, [r0, #6]
    541e:	4632      	mov	r2, r6
    5420:	4628      	mov	r0, r5
    5422:	2300      	movs	r3, #0
    5424:	2105      	movs	r1, #5
    5426:	f7ff fe91 	bl	514c <bt_l2cap_send_cb>
}
    542a:	2000      	movs	r0, #0
    542c:	bd70      	pop	{r4, r5, r6, pc}
    542e:	bf00      	nop
    5430:	20000494 	.word	0x20000494

00005434 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5434:	4801      	ldr	r0, [pc, #4]	; (543c <bt_l2cap_init+0x8>)
    5436:	f7ff bdcb 	b.w	4fd0 <bt_l2cap_le_fixed_chan_register>
    543a:	bf00      	nop
    543c:	20003ba0 	.word	0x20003ba0

00005440 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5440:	2006      	movs	r0, #6
    5442:	4770      	bx	lr

00005444 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5444:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5446:	4a0a      	ldr	r2, [pc, #40]	; (5470 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5448:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    544a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    544e:	4284      	cmp	r4, r0
    5450:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5454:	d102      	bne.n	545c <att_op_get_type+0x18>
			return handlers[i].type;
    5456:	440a      	add	r2, r1
    5458:	7890      	ldrb	r0, [r2, #2]
    545a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    545c:	3301      	adds	r3, #1
    545e:	2b1b      	cmp	r3, #27
    5460:	d1f3      	bne.n	544a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5462:	f010 0f40 	tst.w	r0, #64	; 0x40
    5466:	bf14      	ite	ne
    5468:	2000      	movne	r0, #0
    546a:	2006      	moveq	r0, #6
}
    546c:	bd10      	pop	{r4, pc}
    546e:	bf00      	nop
    5470:	00016adc 	.word	0x00016adc

00005474 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    5476:	4d11      	ldr	r5, [pc, #68]	; (54bc <bt_att_accept+0x48>)
    5478:	682c      	ldr	r4, [r5, #0]
{
    547a:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    547c:	b984      	cbnz	r4, 54a0 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    547e:	22e4      	movs	r2, #228	; 0xe4
    5480:	4621      	mov	r1, r4
    5482:	4628      	mov	r0, r5
    5484:	f7fc fbf2 	bl	1c6c <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5488:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    548a:	4b0d      	ldr	r3, [pc, #52]	; (54c0 <bt_att_accept+0x4c>)
    548c:	606b      	str	r3, [r5, #4]
    548e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    5492:	4611      	mov	r1, r2
    5494:	f00e fdc0 	bl	14018 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    5498:	6035      	str	r5, [r6, #0]

		return 0;
    549a:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    549c:	b004      	add	sp, #16
    549e:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    54a0:	4b08      	ldr	r3, [pc, #32]	; (54c4 <bt_att_accept+0x50>)
    54a2:	9302      	str	r3, [sp, #8]
    54a4:	9001      	str	r0, [sp, #4]
    54a6:	9300      	str	r3, [sp, #0]
    54a8:	4a07      	ldr	r2, [pc, #28]	; (54c8 <bt_att_accept+0x54>)
    54aa:	4b08      	ldr	r3, [pc, #32]	; (54cc <bt_att_accept+0x58>)
    54ac:	4908      	ldr	r1, [pc, #32]	; (54d0 <bt_att_accept+0x5c>)
    54ae:	4809      	ldr	r0, [pc, #36]	; (54d4 <bt_att_accept+0x60>)
    54b0:	f7fb fd6c 	bl	f8c <printk>
	return -ENOMEM;
    54b4:	f06f 000b 	mvn.w	r0, #11
    54b8:	e7f0      	b.n	549c <bt_att_accept+0x28>
    54ba:	bf00      	nop
    54bc:	200004a0 	.word	0x200004a0
    54c0:	20003bcc 	.word	0x20003bcc
    54c4:	00014b99 	.word	0x00014b99
    54c8:	00015f55 	.word	0x00015f55
    54cc:	00016884 	.word	0x00016884
    54d0:	00015fa4 	.word	0x00015fa4
    54d4:	00016994 	.word	0x00016994

000054d8 <att_req_destroy>:
{
    54d8:	b510      	push	{r4, lr}
    54da:	4604      	mov	r4, r0
	if (req->buf) {
    54dc:	6900      	ldr	r0, [r0, #16]
    54de:	b108      	cbz	r0, 54e4 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    54e0:	f00d fc6a 	bl	12db8 <net_buf_unref>
	if (req->destroy) {
    54e4:	68a3      	ldr	r3, [r4, #8]
    54e6:	b10b      	cbz	r3, 54ec <att_req_destroy+0x14>
		req->destroy(req);
    54e8:	4620      	mov	r0, r4
    54ea:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    54ec:	4620      	mov	r0, r4
    54ee:	2214      	movs	r2, #20
    54f0:	2100      	movs	r1, #0
}
    54f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    54f6:	f7fc bbb9 	b.w	1c6c <memset>

000054fa <att_notify>:
{
    54fa:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    54fc:	f101 0008 	add.w	r0, r1, #8
    5500:	f00d fcbb 	bl	12e7a <net_buf_simple_pull_le16>
}
    5504:	2000      	movs	r0, #0
    5506:	bd08      	pop	{r3, pc}

00005508 <read_group_cb>:
{
    5508:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    550c:	680d      	ldr	r5, [r1, #0]
{
    550e:	4606      	mov	r6, r0
    5510:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5512:	f04f 0800 	mov.w	r8, #0
    5516:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    551a:	a902      	add	r1, sp, #8
    551c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    551e:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5520:	f88d 8008 	strb.w	r8, [sp, #8]
    5524:	f8ad 300a 	strh.w	r3, [sp, #10]
    5528:	f7fc fcf2 	bl	1f10 <bt_uuid_cmp>
    552c:	b198      	cbz	r0, 5556 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    552e:	f642 0301 	movw	r3, #10241	; 0x2801
    5532:	a903      	add	r1, sp, #12
    5534:	6830      	ldr	r0, [r6, #0]
    5536:	f88d 800c 	strb.w	r8, [sp, #12]
    553a:	f8ad 300e 	strh.w	r3, [sp, #14]
    553e:	f7fc fce7 	bl	1f10 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5542:	b140      	cbz	r0, 5556 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5544:	6923      	ldr	r3, [r4, #16]
    5546:	b123      	cbz	r3, 5552 <read_group_cb+0x4a>
    5548:	8a32      	ldrh	r2, [r6, #16]
    554a:	8859      	ldrh	r1, [r3, #2]
    554c:	4291      	cmp	r1, r2
    554e:	d200      	bcs.n	5552 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5550:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5552:	2001      	movs	r0, #1
    5554:	e012      	b.n	557c <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5556:	6861      	ldr	r1, [r4, #4]
    5558:	6830      	ldr	r0, [r6, #0]
    555a:	f7fc fcd9 	bl	1f10 <bt_uuid_cmp>
    555e:	b110      	cbz	r0, 5566 <read_group_cb+0x5e>
		data->group = NULL;
    5560:	2300      	movs	r3, #0
    5562:	6123      	str	r3, [r4, #16]
    5564:	e7f5      	b.n	5552 <read_group_cb+0x4a>
	if (data->rsp->len &&
    5566:	68e3      	ldr	r3, [r4, #12]
    5568:	68a0      	ldr	r0, [r4, #8]
    556a:	781a      	ldrb	r2, [r3, #0]
    556c:	b14a      	cbz	r2, 5582 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    556e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5572:	8981      	ldrh	r1, [r0, #12]
    5574:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5576:	4293      	cmp	r3, r2
    5578:	da03      	bge.n	5582 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    557a:	2000      	movs	r0, #0
}
    557c:	b004      	add	sp, #16
    557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5582:	2104      	movs	r1, #4
    5584:	3008      	adds	r0, #8
    5586:	f00d fc49 	bl	12e1c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    558a:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    558c:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    558e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5590:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5592:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5594:	898a      	ldrh	r2, [r1, #12]
    5596:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    559a:	6889      	ldr	r1, [r1, #8]
    559c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    55a0:	1a9b      	subs	r3, r3, r2
    55a2:	2500      	movs	r5, #0
    55a4:	440a      	add	r2, r1
    55a6:	9500      	str	r5, [sp, #0]
    55a8:	4631      	mov	r1, r6
    55aa:	b29b      	uxth	r3, r3
    55ac:	4638      	mov	r0, r7
    55ae:	47c0      	blx	r8
	if (read < 0) {
    55b0:	1e01      	subs	r1, r0, #0
    55b2:	dbe2      	blt.n	557a <read_group_cb+0x72>
	if (!data->rsp->len) {
    55b4:	68e0      	ldr	r0, [r4, #12]
    55b6:	7802      	ldrb	r2, [r0, #0]
    55b8:	1d0b      	adds	r3, r1, #4
    55ba:	b92a      	cbnz	r2, 55c8 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    55bc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    55be:	68a0      	ldr	r0, [r4, #8]
    55c0:	3008      	adds	r0, #8
    55c2:	f00d fc2b 	bl	12e1c <net_buf_simple_add>
    55c6:	e7c4      	b.n	5552 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    55c8:	429a      	cmp	r2, r3
    55ca:	d0f8      	beq.n	55be <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    55cc:	68a2      	ldr	r2, [r4, #8]
    55ce:	8993      	ldrh	r3, [r2, #12]
    55d0:	3b04      	subs	r3, #4
    55d2:	8193      	strh	r3, [r2, #12]
    55d4:	e7d1      	b.n	557a <read_group_cb+0x72>

000055d6 <find_info_cb>:
	if (!data->rsp) {
    55d6:	688b      	ldr	r3, [r1, #8]
{
    55d8:	b570      	push	{r4, r5, r6, lr}
    55da:	4605      	mov	r5, r0
    55dc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    55de:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    55e0:	b963      	cbnz	r3, 55fc <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    55e2:	6848      	ldr	r0, [r1, #4]
    55e4:	2101      	movs	r1, #1
    55e6:	3008      	adds	r0, #8
    55e8:	f00d fc18 	bl	12e1c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    55ec:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    55ee:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    55f0:	781b      	ldrb	r3, [r3, #0]
    55f2:	2b00      	cmp	r3, #0
    55f4:	bf0c      	ite	eq
    55f6:	2301      	moveq	r3, #1
    55f8:	2302      	movne	r3, #2
    55fa:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    55fc:	68a3      	ldr	r3, [r4, #8]
    55fe:	781b      	ldrb	r3, [r3, #0]
    5600:	2b01      	cmp	r3, #1
    5602:	d003      	beq.n	560c <find_info_cb+0x36>
    5604:	2b02      	cmp	r3, #2
    5606:	d01a      	beq.n	563e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5608:	2000      	movs	r0, #0
}
    560a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    560c:	682b      	ldr	r3, [r5, #0]
    560e:	781b      	ldrb	r3, [r3, #0]
    5610:	2b00      	cmp	r3, #0
    5612:	d1f9      	bne.n	5608 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5614:	6860      	ldr	r0, [r4, #4]
    5616:	2104      	movs	r1, #4
    5618:	3008      	adds	r0, #8
    561a:	f00d fbff 	bl	12e1c <net_buf_simple_add>
    561e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5620:	8a2b      	ldrh	r3, [r5, #16]
    5622:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5624:	682b      	ldr	r3, [r5, #0]
    5626:	885b      	ldrh	r3, [r3, #2]
    5628:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    562a:	6863      	ldr	r3, [r4, #4]
    562c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5630:	899b      	ldrh	r3, [r3, #12]
    5632:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5634:	2804      	cmp	r0, #4
    5636:	bf94      	ite	ls
    5638:	2000      	movls	r0, #0
    563a:	2001      	movhi	r0, #1
    563c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    563e:	682b      	ldr	r3, [r5, #0]
    5640:	781b      	ldrb	r3, [r3, #0]
    5642:	2b02      	cmp	r3, #2
    5644:	d1e0      	bne.n	5608 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5646:	6860      	ldr	r0, [r4, #4]
    5648:	2112      	movs	r1, #18
    564a:	3008      	adds	r0, #8
    564c:	f00d fbe6 	bl	12e1c <net_buf_simple_add>
    5650:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5652:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5654:	8a2b      	ldrh	r3, [r5, #16]
    5656:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    565a:	2210      	movs	r2, #16
    565c:	3101      	adds	r1, #1
    565e:	f7fc fad9 	bl	1c14 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5662:	6863      	ldr	r3, [r4, #4]
    5664:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5668:	899b      	ldrh	r3, [r3, #12]
    566a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    566c:	2812      	cmp	r0, #18
    566e:	e7e2      	b.n	5636 <find_info_cb+0x60>

00005670 <find_type_cb>:
{
    5670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5674:	680e      	ldr	r6, [r1, #0]
{
    5676:	b088      	sub	sp, #32
    5678:	4605      	mov	r5, r0
    567a:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    567c:	2700      	movs	r7, #0
    567e:	f642 0301 	movw	r3, #10241	; 0x2801
    5682:	a902      	add	r1, sp, #8
    5684:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5686:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    568a:	f88d 7008 	strb.w	r7, [sp, #8]
    568e:	f8ad 300a 	strh.w	r3, [sp, #10]
    5692:	f7fc fc3d 	bl	1f10 <bt_uuid_cmp>
    5696:	b928      	cbnz	r0, 56a4 <find_type_cb+0x34>
		data->group = NULL;
    5698:	2300      	movs	r3, #0
    569a:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    569c:	2001      	movs	r0, #1
}
    569e:	b008      	add	sp, #32
    56a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    56a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    56a8:	a903      	add	r1, sp, #12
    56aa:	6828      	ldr	r0, [r5, #0]
    56ac:	f88d 700c 	strb.w	r7, [sp, #12]
    56b0:	f8ad 300e 	strh.w	r3, [sp, #14]
    56b4:	f7fc fc2c 	bl	1f10 <bt_uuid_cmp>
    56b8:	b140      	cbz	r0, 56cc <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    56ba:	68a3      	ldr	r3, [r4, #8]
    56bc:	2b00      	cmp	r3, #0
    56be:	d0ed      	beq.n	569c <find_type_cb+0x2c>
    56c0:	8a2a      	ldrh	r2, [r5, #16]
    56c2:	8859      	ldrh	r1, [r3, #2]
    56c4:	4291      	cmp	r1, r2
    56c6:	d2e9      	bcs.n	569c <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    56c8:	805a      	strh	r2, [r3, #2]
    56ca:	e7e7      	b.n	569c <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    56cc:	6862      	ldr	r2, [r4, #4]
    56ce:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    56d2:	8992      	ldrh	r2, [r2, #12]
    56d4:	1a9b      	subs	r3, r3, r2
    56d6:	2b03      	cmp	r3, #3
    56d8:	d9e1      	bls.n	569e <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    56da:	2310      	movs	r3, #16
    56dc:	9000      	str	r0, [sp, #0]
    56de:	eb0d 0203 	add.w	r2, sp, r3
    56e2:	686e      	ldr	r6, [r5, #4]
    56e4:	4629      	mov	r1, r5
    56e6:	4640      	mov	r0, r8
    56e8:	47b0      	blx	r6
	if (read < 0) {
    56ea:	1e02      	subs	r2, r0, #0
    56ec:	dbd4      	blt.n	5698 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    56ee:	7c23      	ldrb	r3, [r4, #16]
    56f0:	429a      	cmp	r2, r3
    56f2:	d1d1      	bne.n	5698 <find_type_cb+0x28>
    56f4:	a904      	add	r1, sp, #16
    56f6:	68e0      	ldr	r0, [r4, #12]
    56f8:	f7fc fa77 	bl	1bea <memcmp>
    56fc:	2800      	cmp	r0, #0
    56fe:	d1cb      	bne.n	5698 <find_type_cb+0x28>
	data->err = 0x00;
    5700:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5702:	6860      	ldr	r0, [r4, #4]
    5704:	2104      	movs	r1, #4
    5706:	3008      	adds	r0, #8
    5708:	f00d fb88 	bl	12e1c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    570c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    570e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5710:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5712:	8043      	strh	r3, [r0, #2]
    5714:	e7c2      	b.n	569c <find_type_cb+0x2c>
	...

00005718 <bt_att_connected>:
{
    5718:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    571a:	2317      	movs	r3, #23
{
    571c:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    571e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5722:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5724:	4906      	ldr	r1, [pc, #24]	; (5740 <bt_att_connected+0x28>)
    5726:	30a4      	adds	r0, #164	; 0xa4
    5728:	f00e ff66 	bl	145f8 <k_delayed_work_init>
	list->head = NULL;
    572c:	2300      	movs	r3, #0
    572e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    5732:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	bt_gatt_connected(ch->chan.conn);
    5736:	6820      	ldr	r0, [r4, #0]
}
    5738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    573c:	f001 bc00 	b.w	6f40 <bt_gatt_connected>
    5740:	00005c65 	.word	0x00005c65

00005744 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5744:	f011 0f01 	tst.w	r1, #1
    5748:	7c83      	ldrb	r3, [r0, #18]
    574a:	d004      	beq.n	5756 <check_perm.isra.5+0x12>
    574c:	f013 0f15 	tst.w	r3, #21
    5750:	d012      	beq.n	5778 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    5752:	6842      	ldr	r2, [r0, #4]
    5754:	b182      	cbz	r2, 5778 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    5756:	078a      	lsls	r2, r1, #30
    5758:	d504      	bpl.n	5764 <check_perm.isra.5+0x20>
    575a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    575e:	d00d      	beq.n	577c <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    5760:	6882      	ldr	r2, [r0, #8]
    5762:	b15a      	cbz	r2, 577c <check_perm.isra.5+0x38>
	mask &= attr->perm;
    5764:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    5766:	f011 0f30 	tst.w	r1, #48	; 0x30
    576a:	d109      	bne.n	5780 <check_perm.isra.5+0x3c>
	return 0;
    576c:	f011 0f0c 	tst.w	r1, #12
    5770:	bf14      	ite	ne
    5772:	200f      	movne	r0, #15
    5774:	2000      	moveq	r0, #0
    5776:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    5778:	2002      	movs	r0, #2
    577a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    577c:	2003      	movs	r0, #3
    577e:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    5780:	2005      	movs	r0, #5
}
    5782:	4770      	bx	lr

00005784 <read_type_cb>:
{
    5784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    5788:	680f      	ldr	r7, [r1, #0]
{
    578a:	4606      	mov	r6, r0
    578c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    578e:	6800      	ldr	r0, [r0, #0]
    5790:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    5792:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5796:	f7fc fbbb 	bl	1f10 <bt_uuid_cmp>
    579a:	4680      	mov	r8, r0
    579c:	2800      	cmp	r0, #0
    579e:	d14d      	bne.n	583c <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    57a0:	2115      	movs	r1, #21
    57a2:	4630      	mov	r0, r6
    57a4:	f7ff ffce 	bl	5744 <check_perm.isra.5>
    57a8:	4605      	mov	r5, r0
    57aa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    57ac:	b148      	cbz	r0, 57c2 <read_type_cb+0x3e>
		if (data->rsp->len) {
    57ae:	68e3      	ldr	r3, [r4, #12]
    57b0:	781d      	ldrb	r5, [r3, #0]
    57b2:	b115      	cbz	r5, 57ba <read_type_cb+0x36>
			data->err = 0x00;
    57b4:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    57b8:	4645      	mov	r5, r8
}
    57ba:	4628      	mov	r0, r5
    57bc:	b003      	add	sp, #12
    57be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    57c2:	68a0      	ldr	r0, [r4, #8]
    57c4:	2102      	movs	r1, #2
    57c6:	3008      	adds	r0, #8
    57c8:	f00d fb28 	bl	12e1c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    57cc:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57ce:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    57d0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    57d2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    57d4:	898a      	ldrh	r2, [r1, #12]
    57d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    57da:	6889      	ldr	r1, [r1, #8]
    57dc:	f8d6 8004 	ldr.w	r8, [r6, #4]
    57e0:	9500      	str	r5, [sp, #0]
    57e2:	1a9b      	subs	r3, r3, r2
    57e4:	b29b      	uxth	r3, r3
    57e6:	440a      	add	r2, r1
    57e8:	4648      	mov	r0, r9
    57ea:	4631      	mov	r1, r6
    57ec:	47c0      	blx	r8
	if (read < 0) {
    57ee:	1e01      	subs	r1, r0, #0
    57f0:	da08      	bge.n	5804 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    57f2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    57f6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    57f8:	bf9a      	itte	ls
    57fa:	4249      	negls	r1, r1
    57fc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    57fe:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5800:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    5802:	e7da      	b.n	57ba <read_type_cb+0x36>
	if (!data->rsp->len) {
    5804:	68e0      	ldr	r0, [r4, #12]
    5806:	7802      	ldrb	r2, [r0, #0]
    5808:	1c8b      	adds	r3, r1, #2
    580a:	b982      	cbnz	r2, 582e <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    580c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    580e:	68a0      	ldr	r0, [r4, #8]
    5810:	3008      	adds	r0, #8
    5812:	f00d fb03 	bl	12e1c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5816:	68a3      	ldr	r3, [r4, #8]
    5818:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    581c:	899b      	ldrh	r3, [r3, #12]
    581e:	1aed      	subs	r5, r5, r3
    5820:	68e3      	ldr	r3, [r4, #12]
    5822:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5824:	429d      	cmp	r5, r3
    5826:	bfd4      	ite	le
    5828:	2500      	movle	r5, #0
    582a:	2501      	movgt	r5, #1
    582c:	e7c5      	b.n	57ba <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    582e:	429a      	cmp	r2, r3
    5830:	d0ed      	beq.n	580e <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    5832:	68a2      	ldr	r2, [r4, #8]
    5834:	8993      	ldrh	r3, [r2, #12]
    5836:	3b02      	subs	r3, #2
    5838:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    583a:	e7be      	b.n	57ba <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    583c:	2501      	movs	r5, #1
    583e:	e7bc      	b.n	57ba <read_type_cb+0x36>

00005840 <uuid_create>:
{
    5840:	b510      	push	{r4, lr}
	switch (buf->len) {
    5842:	898a      	ldrh	r2, [r1, #12]
    5844:	2a02      	cmp	r2, #2
{
    5846:	4604      	mov	r4, r0
	switch (buf->len) {
    5848:	d003      	beq.n	5852 <uuid_create+0x12>
    584a:	2a10      	cmp	r2, #16
    584c:	d00a      	beq.n	5864 <uuid_create+0x24>
	return false;
    584e:	2000      	movs	r0, #0
}
    5850:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    5852:	2300      	movs	r3, #0
    5854:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5856:	f101 0008 	add.w	r0, r1, #8
    585a:	f00d fb0e 	bl	12e7a <net_buf_simple_pull_le16>
    585e:	8060      	strh	r0, [r4, #2]
		return true;
    5860:	2001      	movs	r0, #1
    5862:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    5864:	2302      	movs	r3, #2
    5866:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    586a:	6889      	ldr	r1, [r1, #8]
    586c:	f7fc f9d2 	bl	1c14 <memcpy>
    5870:	e7f6      	b.n	5860 <uuid_create+0x20>
	...

00005874 <att_req_sent>:
{
    5874:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5876:	2104      	movs	r1, #4
    5878:	f7ff fd54 	bl	5324 <bt_l2cap_le_lookup_tx_cid>
    587c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    587e:	30cc      	adds	r0, #204	; 0xcc
    5880:	f00e fbd3 	bl	1402a <_impl_k_sem_give>
	if (att->req) {
    5884:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5888:	b143      	cbz	r3, 589c <att_req_sent+0x28>
    588a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    588e:	f247 5230 	movw	r2, #30000	; 0x7530
    5892:	4803      	ldr	r0, [pc, #12]	; (58a0 <att_req_sent+0x2c>)
}
    5894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5898:	f00e bf22 	b.w	146e0 <k_delayed_work_submit_to_queue>
    589c:	bd10      	pop	{r4, pc}
    589e:	bf00      	nop
    58a0:	20001990 	.word	0x20001990

000058a4 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    58a4:	6803      	ldr	r3, [r0, #0]
    58a6:	7a5b      	ldrb	r3, [r3, #9]
    58a8:	2b03      	cmp	r3, #3
    58aa:	d10a      	bne.n	58c2 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58ac:	f3bf 8f5b 	dmb	ish
    58b0:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    58b4:	f3bf 8f5b 	dmb	ish
    58b8:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    58bc:	f000 0001 	and.w	r0, r0, #1
    58c0:	4770      	bx	lr
    58c2:	2001      	movs	r0, #1
}
    58c4:	4770      	bx	lr

000058c6 <att_prepare_write_req>:
    58c6:	2006      	movs	r0, #6
    58c8:	4770      	bx	lr

000058ca <att_pdu_sent>:
{
    58ca:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    58cc:	2104      	movs	r1, #4
    58ce:	f7ff fd29 	bl	5324 <bt_l2cap_le_lookup_tx_cid>
}
    58d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58d6:	30cc      	adds	r0, #204	; 0xcc
    58d8:	f00e bba7 	b.w	1402a <_impl_k_sem_give>

000058dc <att_rsp_sent>:
{
    58dc:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    58de:	2104      	movs	r1, #4
    58e0:	f7ff fd20 	bl	5324 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58e4:	f3bf 8f5b 	dmb	ish
    58e8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    58ec:	e853 2f00 	ldrex	r2, [r3]
    58f0:	f022 0201 	bic.w	r2, r2, #1
    58f4:	e843 2100 	strex	r1, r2, [r3]
    58f8:	2900      	cmp	r1, #0
    58fa:	d1f7      	bne.n	58ec <att_rsp_sent+0x10>
    58fc:	f3bf 8f5b 	dmb	ish
    5900:	30cc      	adds	r0, #204	; 0xcc
}
    5902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5906:	f00e bb90 	b.w	1402a <_impl_k_sem_give>

0000590a <att_cfm_sent>:
{
    590a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    590c:	2104      	movs	r1, #4
    590e:	f7ff fd09 	bl	5324 <bt_l2cap_le_lookup_tx_cid>
    5912:	f3bf 8f5b 	dmb	ish
    5916:	f100 0394 	add.w	r3, r0, #148	; 0x94
    591a:	e853 2f00 	ldrex	r2, [r3]
    591e:	f022 0202 	bic.w	r2, r2, #2
    5922:	e843 2100 	strex	r1, r2, [r3]
    5926:	2900      	cmp	r1, #0
    5928:	d1f7      	bne.n	591a <att_cfm_sent+0x10>
    592a:	f3bf 8f5b 	dmb	ish
    592e:	30cc      	adds	r0, #204	; 0xcc
}
    5930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5934:	f00e bb79 	b.w	1402a <_impl_k_sem_give>

00005938 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5938:	7a43      	ldrb	r3, [r0, #9]
    593a:	2b03      	cmp	r3, #3
{
    593c:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    593e:	d00b      	beq.n	5958 <att_chan_get+0x20>
		BT_WARN("Not connected");
    5940:	4b15      	ldr	r3, [pc, #84]	; (5998 <att_chan_get+0x60>)
    5942:	9301      	str	r3, [sp, #4]
    5944:	9300      	str	r3, [sp, #0]
    5946:	4a15      	ldr	r2, [pc, #84]	; (599c <att_chan_get+0x64>)
    5948:	4b15      	ldr	r3, [pc, #84]	; (59a0 <att_chan_get+0x68>)
    594a:	4916      	ldr	r1, [pc, #88]	; (59a4 <att_chan_get+0x6c>)
    594c:	4816      	ldr	r0, [pc, #88]	; (59a8 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    594e:	f7fb fb1d 	bl	f8c <printk>
		return NULL;
    5952:	2000      	movs	r0, #0
}
    5954:	b002      	add	sp, #8
    5956:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5958:	2104      	movs	r1, #4
    595a:	f7ff fcf3 	bl	5344 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    595e:	4604      	mov	r4, r0
    5960:	b950      	cbnz	r0, 5978 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    5962:	4b0d      	ldr	r3, [pc, #52]	; (5998 <att_chan_get+0x60>)
    5964:	9301      	str	r3, [sp, #4]
    5966:	9300      	str	r3, [sp, #0]
    5968:	4a10      	ldr	r2, [pc, #64]	; (59ac <att_chan_get+0x74>)
    596a:	4b0d      	ldr	r3, [pc, #52]	; (59a0 <att_chan_get+0x68>)
    596c:	490d      	ldr	r1, [pc, #52]	; (59a4 <att_chan_get+0x6c>)
    596e:	4810      	ldr	r0, [pc, #64]	; (59b0 <att_chan_get+0x78>)
    5970:	f7fb fb0c 	bl	f8c <printk>
    5974:	4620      	mov	r0, r4
    5976:	e7ed      	b.n	5954 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5978:	f3bf 8f5b 	dmb	ish
    597c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    5980:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5984:	075b      	lsls	r3, r3, #29
    5986:	d5f5      	bpl.n	5974 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    5988:	4b03      	ldr	r3, [pc, #12]	; (5998 <att_chan_get+0x60>)
    598a:	9301      	str	r3, [sp, #4]
    598c:	9300      	str	r3, [sp, #0]
    598e:	4a03      	ldr	r2, [pc, #12]	; (599c <att_chan_get+0x64>)
    5990:	4b03      	ldr	r3, [pc, #12]	; (59a0 <att_chan_get+0x68>)
    5992:	4904      	ldr	r1, [pc, #16]	; (59a4 <att_chan_get+0x6c>)
    5994:	4807      	ldr	r0, [pc, #28]	; (59b4 <att_chan_get+0x7c>)
    5996:	e7da      	b.n	594e <att_chan_get+0x16>
    5998:	00014b99 	.word	0x00014b99
    599c:	00015fdf 	.word	0x00015fdf
    59a0:	00016859 	.word	0x00016859
    59a4:	00015fa4 	.word	0x00015fa4
    59a8:	00016892 	.word	0x00016892
    59ac:	00015f55 	.word	0x00015f55
    59b0:	000168b0 	.word	0x000168b0
    59b4:	000168db 	.word	0x000168db

000059b8 <write_cb>:
{
    59b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    59bc:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    59be:	f8d1 8000 	ldr.w	r8, [r1]
    59c2:	212a      	movs	r1, #42	; 0x2a
{
    59c4:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    59c6:	f7ff febd 	bl	5744 <check_perm.isra.5>
    59ca:	4605      	mov	r5, r0
    59cc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    59ce:	b9e0      	cbnz	r0, 5a0a <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    59d0:	8a62      	ldrh	r2, [r4, #18]
    59d2:	9001      	str	r0, [sp, #4]
    59d4:	9200      	str	r2, [sp, #0]
    59d6:	7c23      	ldrb	r3, [r4, #16]
    59d8:	68b7      	ldr	r7, [r6, #8]
    59da:	68e2      	ldr	r2, [r4, #12]
    59dc:	4631      	mov	r1, r6
    59de:	4640      	mov	r0, r8
    59e0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    59e2:	2800      	cmp	r0, #0
    59e4:	db02      	blt.n	59ec <write_cb+0x34>
    59e6:	7c23      	ldrb	r3, [r4, #16]
    59e8:	4298      	cmp	r0, r3
    59ea:	d00b      	beq.n	5a04 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    59ec:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    59f0:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    59f2:	bf9a      	itte	ls
    59f4:	4240      	negls	r0, r0
    59f6:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    59f8:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    59fa:	7520      	strb	r0, [r4, #20]
}
    59fc:	4628      	mov	r0, r5
    59fe:	b002      	add	sp, #8
    5a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    5a04:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    5a06:	2501      	movs	r5, #1
    5a08:	e7f8      	b.n	59fc <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5a0a:	2500      	movs	r5, #0
    5a0c:	e7f6      	b.n	59fc <write_cb+0x44>
	...

00005a10 <att_send_req>:
{
    5a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a12:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    5a14:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    5a18:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    5a1c:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5a1e:	4630      	mov	r0, r6
    5a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a24:	f00e fb29 	bl	1407a <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5a28:	4628      	mov	r0, r5
    5a2a:	f7ff ff3b 	bl	58a4 <att_is_connected>
    5a2e:	b978      	cbnz	r0, 5a50 <att_send_req+0x40>
		BT_WARN("Disconnected");
    5a30:	4b18      	ldr	r3, [pc, #96]	; (5a94 <att_send_req+0x84>)
    5a32:	9301      	str	r3, [sp, #4]
    5a34:	9300      	str	r3, [sp, #0]
    5a36:	4a18      	ldr	r2, [pc, #96]	; (5a98 <att_send_req+0x88>)
    5a38:	4b18      	ldr	r3, [pc, #96]	; (5a9c <att_send_req+0x8c>)
    5a3a:	4919      	ldr	r1, [pc, #100]	; (5aa0 <att_send_req+0x90>)
    5a3c:	4819      	ldr	r0, [pc, #100]	; (5aa4 <att_send_req+0x94>)
    5a3e:	f7fb faa5 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5a42:	4630      	mov	r0, r6
    5a44:	f00e faf1 	bl	1402a <_impl_k_sem_give>
		return -ENOTCONN;
    5a48:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    5a4c:	b002      	add	sp, #8
    5a4e:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    5a50:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    5a52:	f106 0008 	add.w	r0, r6, #8
    5a56:	f00d fa18 	bl	12e8a <net_buf_simple_headroom>
	state->len = buf->len;
    5a5a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    5a5c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    5a5e:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a60:	6920      	ldr	r0, [r4, #16]
    5a62:	682d      	ldr	r5, [r5, #0]
    5a64:	f00d f9d6 	bl	12e14 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    5a68:	6923      	ldr	r3, [r4, #16]
    5a6a:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a6c:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    5a6e:	7818      	ldrb	r0, [r3, #0]
    5a70:	f7ff fce8 	bl	5444 <att_op_get_type>
    5a74:	3801      	subs	r0, #1
    5a76:	b2c0      	uxtb	r0, r0
    5a78:	2804      	cmp	r0, #4
    5a7a:	bf96      	itet	ls
    5a7c:	4b0a      	ldrls	r3, [pc, #40]	; (5aa8 <att_send_req+0x98>)
    5a7e:	4b0b      	ldrhi	r3, [pc, #44]	; (5aac <att_send_req+0x9c>)
    5a80:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    5a84:	4632      	mov	r2, r6
    5a86:	4628      	mov	r0, r5
    5a88:	2104      	movs	r1, #4
    5a8a:	f7ff fb5f 	bl	514c <bt_l2cap_send_cb>
	return 0;
    5a8e:	2000      	movs	r0, #0
    5a90:	e7dc      	b.n	5a4c <att_send_req+0x3c>
    5a92:	bf00      	nop
    5a94:	00014b99 	.word	0x00014b99
    5a98:	00015fdf 	.word	0x00015fdf
    5a9c:	0001681c 	.word	0x0001681c
    5aa0:	00015fa4 	.word	0x00015fa4
    5aa4:	00016936 	.word	0x00016936
    5aa8:	00016808 	.word	0x00016808
    5aac:	000058cb 	.word	0x000058cb

00005ab0 <att_handle_rsp>:
{
    5ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5ab4:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5ab6:	30a4      	adds	r0, #164	; 0xa4
{
    5ab8:	461e      	mov	r6, r3
    5aba:	460f      	mov	r7, r1
    5abc:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    5abe:	f00e fdab 	bl	14618 <k_delayed_work_cancel>
	if (!att->req) {
    5ac2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5ac6:	b9db      	cbnz	r3, 5b00 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    5ac8:	4b1c      	ldr	r3, [pc, #112]	; (5b3c <att_handle_rsp+0x8c>)
    5aca:	9301      	str	r3, [sp, #4]
    5acc:	9300      	str	r3, [sp, #0]
    5ace:	4a1c      	ldr	r2, [pc, #112]	; (5b40 <att_handle_rsp+0x90>)
    5ad0:	4b1c      	ldr	r3, [pc, #112]	; (5b44 <att_handle_rsp+0x94>)
    5ad2:	491d      	ldr	r1, [pc, #116]	; (5b48 <att_handle_rsp+0x98>)
    5ad4:	481d      	ldr	r0, [pc, #116]	; (5b4c <att_handle_rsp+0x9c>)
    5ad6:	f7fb fa59 	bl	f8c <printk>
    5ada:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
Z_GENLIST_GET(slist, snode);
    5ade:	b159      	cbz	r1, 5af8 <att_handle_rsp+0x48>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5ae0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	return node->next;
    5ae4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5ae6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5aea:	4291      	cmp	r1, r2
	list->tail = node;
    5aec:	bf08      	it	eq
    5aee:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    5af2:	4620      	mov	r0, r4
    5af4:	f7ff ff8c 	bl	5a10 <att_send_req>
}
    5af8:	2000      	movs	r0, #0
    5afa:	b003      	add	sp, #12
    5afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    5b00:	6918      	ldr	r0, [r3, #16]
    5b02:	b128      	cbz	r0, 5b10 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    5b04:	f00d f958 	bl	12db8 <net_buf_unref>
		att->req->buf = NULL;
    5b08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5b0c:	2200      	movs	r2, #0
    5b0e:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    5b10:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5b14:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5b16:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5b1a:	2500      	movs	r5, #0
    5b1c:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5b1e:	463a      	mov	r2, r7
    5b20:	9300      	str	r3, [sp, #0]
    5b22:	4631      	mov	r1, r6
    5b24:	4643      	mov	r3, r8
    5b26:	47c8      	blx	r9
	if (!att->req->func) {
    5b28:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5b2c:	6843      	ldr	r3, [r0, #4]
    5b2e:	b90b      	cbnz	r3, 5b34 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    5b30:	f7ff fcd2 	bl	54d8 <att_req_destroy>
	att->req = NULL;
    5b34:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    5b38:	e7cf      	b.n	5ada <att_handle_rsp+0x2a>
    5b3a:	bf00      	nop
    5b3c:	00014b99 	.word	0x00014b99
    5b40:	00015fdf 	.word	0x00015fdf
    5b44:	00016829 	.word	0x00016829
    5b48:	00015fa4 	.word	0x00015fa4
    5b4c:	0001690f 	.word	0x0001690f

00005b50 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    5b50:	898a      	ldrh	r2, [r1, #12]
    5b52:	6889      	ldr	r1, [r1, #8]
    5b54:	2300      	movs	r3, #0
    5b56:	f7ff bfab 	b.w	5ab0 <att_handle_rsp>

00005b5a <att_handle_exec_write_rsp>:
    5b5a:	f7ff bff9 	b.w	5b50 <att_confirm>

00005b5e <att_handle_prepare_write_rsp>:
    5b5e:	f7ff bff7 	b.w	5b50 <att_confirm>

00005b62 <att_handle_write_rsp>:
    5b62:	f7ff bff5 	b.w	5b50 <att_confirm>

00005b66 <att_handle_read_mult_rsp>:
    5b66:	f7ff bff3 	b.w	5b50 <att_confirm>

00005b6a <att_handle_read_blob_rsp>:
    5b6a:	f7ff bff1 	b.w	5b50 <att_confirm>

00005b6e <att_handle_read_rsp>:
    5b6e:	f7ff bfef 	b.w	5b50 <att_confirm>

00005b72 <att_handle_read_type_rsp>:
    5b72:	f7ff bfed 	b.w	5b50 <att_confirm>

00005b76 <att_handle_find_type_rsp>:
    5b76:	f7ff bfeb 	b.w	5b50 <att_confirm>

00005b7a <att_handle_find_info_rsp>:
    5b7a:	f7ff bfe9 	b.w	5b50 <att_confirm>

00005b7e <att_mtu_rsp>:
{
    5b7e:	b410      	push	{r4}
    5b80:	460a      	mov	r2, r1
	if (!att) {
    5b82:	4603      	mov	r3, r0
    5b84:	b180      	cbz	r0, 5ba8 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    5b86:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5b88:	880c      	ldrh	r4, [r1, #0]
    5b8a:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    5b8c:	bf83      	ittte	hi
    5b8e:	2417      	movhi	r4, #23
    5b90:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5b92:	f8a3 405a 	strhhi.w	r4, [r3, #90]	; 0x5a
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5b96:	2200      	movls	r2, #0
    5b98:	bf99      	ittee	ls
    5b9a:	2304      	movls	r3, #4
    5b9c:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    5b9e:	2300      	movhi	r3, #0
    5ba0:	8992      	ldrhhi	r2, [r2, #12]
}
    5ba2:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5ba4:	f7ff bf84 	b.w	5ab0 <att_handle_rsp>
}
    5ba8:	bc10      	pop	{r4}
    5baa:	4770      	bx	lr

00005bac <att_error_rsp>:
{
    5bac:	b430      	push	{r4, r5}
	if (!att->req) {
    5bae:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    5bb2:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5bb4:	b16a      	cbz	r2, 5bd2 <att_error_rsp+0x26>
	if (att->req->buf) {
    5bb6:	6913      	ldr	r3, [r2, #16]
    5bb8:	b12b      	cbz	r3, 5bc6 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    5bba:	8995      	ldrh	r5, [r2, #12]
    5bbc:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    5bbe:	89d2      	ldrh	r2, [r2, #14]
    5bc0:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5bc2:	4429      	add	r1, r5
    5bc4:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5bc6:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5bc8:	2200      	movs	r2, #0
    5bca:	4611      	mov	r1, r2
}
    5bcc:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    5bce:	f7ff bf6f 	b.w	5ab0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5bd2:	230e      	movs	r3, #14
    5bd4:	e7f8      	b.n	5bc8 <att_error_rsp+0x1c>

00005bd6 <att_reset>:
{
    5bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5bd8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    5bdc:	4605      	mov	r5, r0
    5bde:	f3bf 8f5b 	dmb	ish
    5be2:	e853 2f00 	ldrex	r2, [r3]
    5be6:	f042 0204 	orr.w	r2, r2, #4
    5bea:	e843 2100 	strex	r1, r2, [r3]
    5bee:	2900      	cmp	r1, #0
    5bf0:	d1f7      	bne.n	5be2 <att_reset+0xc>
    5bf2:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5bf6:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    5bfa:	4620      	mov	r0, r4
    5bfc:	f00e fa15 	bl	1402a <_impl_k_sem_give>
    5c00:	4620      	mov	r0, r4
    5c02:	f00e fa12 	bl	1402a <_impl_k_sem_give>
    5c06:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5c0a:	b98c      	cbnz	r4, 5c30 <att_reset+0x5a>
	if (!att->req) {
    5c0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    5c10:	2200      	movs	r2, #0
    5c12:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    5c16:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    5c1a:	b90b      	cbnz	r3, 5c20 <att_reset+0x4a>
}
    5c1c:	b003      	add	sp, #12
    5c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5c20:	230e      	movs	r3, #14
    5c22:	4611      	mov	r1, r2
    5c24:	4628      	mov	r0, r5
}
    5c26:	b003      	add	sp, #12
    5c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5c2c:	f7ff bf40 	b.w	5ab0 <att_handle_rsp>
	return node->next;
    5c30:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5c32:	6867      	ldr	r7, [r4, #4]
    5c34:	b12f      	cbz	r7, 5c42 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5c36:	2300      	movs	r3, #0
    5c38:	9400      	str	r4, [sp, #0]
    5c3a:	461a      	mov	r2, r3
    5c3c:	210e      	movs	r1, #14
    5c3e:	4618      	mov	r0, r3
    5c40:	47b8      	blx	r7
		att_req_destroy(req);
    5c42:	4620      	mov	r0, r4
    5c44:	f7ff fc48 	bl	54d8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5c48:	2e00      	cmp	r6, #0
    5c4a:	d0df      	beq.n	5c0c <att_reset+0x36>
    5c4c:	4634      	mov	r4, r6
    5c4e:	6836      	ldr	r6, [r6, #0]
    5c50:	e7ef      	b.n	5c32 <att_reset+0x5c>

00005c52 <bt_att_disconnected>:
{
    5c52:	b510      	push	{r4, lr}
    5c54:	4604      	mov	r4, r0
	att_reset(att);
    5c56:	f7ff ffbe 	bl	5bd6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5c5a:	6820      	ldr	r0, [r4, #0]
}
    5c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    5c60:	f001 b978 	b.w	6f54 <bt_gatt_disconnected>

00005c64 <att_timeout>:
{
    5c64:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    5c66:	4b0b      	ldr	r3, [pc, #44]	; (5c94 <att_timeout+0x30>)
    5c68:	4a0b      	ldr	r2, [pc, #44]	; (5c98 <att_timeout+0x34>)
    5c6a:	490c      	ldr	r1, [pc, #48]	; (5c9c <att_timeout+0x38>)
    5c6c:	9301      	str	r3, [sp, #4]
{
    5c6e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    5c70:	9300      	str	r3, [sp, #0]
    5c72:	480b      	ldr	r0, [pc, #44]	; (5ca0 <att_timeout+0x3c>)
    5c74:	4b0b      	ldr	r3, [pc, #44]	; (5ca4 <att_timeout+0x40>)
    5c76:	f7fb f989 	bl	f8c <printk>
	att_reset(att);
    5c7a:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    5c7e:	f7ff ffaa 	bl	5bd6 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    5c82:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    5c86:	f001 f965 	bl	6f54 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5c8a:	2300      	movs	r3, #0
    5c8c:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    5c90:	b002      	add	sp, #8
    5c92:	bd10      	pop	{r4, pc}
    5c94:	00014b99 	.word	0x00014b99
    5c98:	00015f55 	.word	0x00015f55
    5c9c:	00015fa4 	.word	0x00015fa4
    5ca0:	00016978 	.word	0x00016978
    5ca4:	00016878 	.word	0x00016878

00005ca8 <read_cb>:
{
    5ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5cac:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5cae:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5cb0:	f8d1 9000 	ldr.w	r9, [r1]
{
    5cb4:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5cb6:	3008      	adds	r0, #8
    5cb8:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5cba:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5cbe:	f00d f8ad 	bl	12e1c <net_buf_simple_add>
	data->err = 0x00;
    5cc2:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5cc4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5cc6:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5cc8:	2115      	movs	r1, #21
    5cca:	4630      	mov	r0, r6
    5ccc:	f7ff fd3a 	bl	5744 <check_perm.isra.5>
    5cd0:	4605      	mov	r5, r0
    5cd2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5cd4:	bb08      	cbnz	r0, 5d1a <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5cd6:	68a1      	ldr	r1, [r4, #8]
    5cd8:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    5cdc:	898a      	ldrh	r2, [r1, #12]
    5cde:	6889      	ldr	r1, [r1, #8]
    5ce0:	88a0      	ldrh	r0, [r4, #4]
    5ce2:	9000      	str	r0, [sp, #0]
    5ce4:	1a9b      	subs	r3, r3, r2
    5ce6:	6877      	ldr	r7, [r6, #4]
    5ce8:	440a      	add	r2, r1
    5cea:	b29b      	uxth	r3, r3
    5cec:	4631      	mov	r1, r6
    5cee:	4640      	mov	r0, r8
    5cf0:	47b8      	blx	r7
	if (read < 0) {
    5cf2:	1e01      	subs	r1, r0, #0
    5cf4:	da0b      	bge.n	5d0e <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5cf6:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5cfa:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5cfc:	bf9a      	itte	ls
    5cfe:	4249      	negls	r1, r1
    5d00:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5d02:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5d04:	7421      	strb	r1, [r4, #16]
}
    5d06:	4628      	mov	r0, r5
    5d08:	b003      	add	sp, #12
    5d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5d0e:	68a0      	ldr	r0, [r4, #8]
    5d10:	3008      	adds	r0, #8
    5d12:	f00d f883 	bl	12e1c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5d16:	2501      	movs	r5, #1
    5d18:	e7f5      	b.n	5d06 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5d1a:	463d      	mov	r5, r7
    5d1c:	e7f3      	b.n	5d06 <read_cb+0x5e>
	...

00005d20 <bt_att_create_pdu>:
{
    5d20:	b530      	push	{r4, r5, lr}
    5d22:	b085      	sub	sp, #20
    5d24:	460d      	mov	r5, r1
    5d26:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5d28:	f7ff fe06 	bl	5938 <att_chan_get>
	if (!att) {
    5d2c:	b1f0      	cbz	r0, 5d6c <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    5d2e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    5d32:	3401      	adds	r4, #1
    5d34:	428c      	cmp	r4, r1
    5d36:	d90e      	bls.n	5d56 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5d38:	4b0d      	ldr	r3, [pc, #52]	; (5d70 <bt_att_create_pdu+0x50>)
    5d3a:	9303      	str	r3, [sp, #12]
    5d3c:	9402      	str	r4, [sp, #8]
    5d3e:	9101      	str	r1, [sp, #4]
    5d40:	9300      	str	r3, [sp, #0]
    5d42:	4a0c      	ldr	r2, [pc, #48]	; (5d74 <bt_att_create_pdu+0x54>)
    5d44:	4b0c      	ldr	r3, [pc, #48]	; (5d78 <bt_att_create_pdu+0x58>)
    5d46:	490d      	ldr	r1, [pc, #52]	; (5d7c <bt_att_create_pdu+0x5c>)
    5d48:	480d      	ldr	r0, [pc, #52]	; (5d80 <bt_att_create_pdu+0x60>)
    5d4a:	f7fb f91f 	bl	f8c <printk>
		return NULL;
    5d4e:	2400      	movs	r4, #0
}
    5d50:	4620      	mov	r0, r4
    5d52:	b005      	add	sp, #20
    5d54:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    5d56:	2100      	movs	r1, #0
    5d58:	4608      	mov	r0, r1
    5d5a:	f7ff f9f4 	bl	5146 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5d5e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5d60:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5d62:	3008      	adds	r0, #8
    5d64:	f00d f85a 	bl	12e1c <net_buf_simple_add>
	hdr->code = op;
    5d68:	7005      	strb	r5, [r0, #0]
	return buf;
    5d6a:	e7f1      	b.n	5d50 <bt_att_create_pdu+0x30>
		return NULL;
    5d6c:	4604      	mov	r4, r0
    5d6e:	e7ef      	b.n	5d50 <bt_att_create_pdu+0x30>
    5d70:	00014b99 	.word	0x00014b99
    5d74:	00015fdf 	.word	0x00015fdf
    5d78:	00016866 	.word	0x00016866
    5d7c:	00015fa4 	.word	0x00015fa4
    5d80:	000169c9 	.word	0x000169c9

00005d84 <att_indicate>:
{
    5d84:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5d86:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5d88:	f101 0008 	add.w	r0, r1, #8
    5d8c:	f00d f875 	bl	12e7a <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5d90:	2200      	movs	r2, #0
    5d92:	211e      	movs	r1, #30
    5d94:	4620      	mov	r0, r4
    5d96:	f7ff ffc3 	bl	5d20 <bt_att_create_pdu>
	if (!buf) {
    5d9a:	4602      	mov	r2, r0
    5d9c:	b120      	cbz	r0, 5da8 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5d9e:	4b03      	ldr	r3, [pc, #12]	; (5dac <att_indicate+0x28>)
    5da0:	2104      	movs	r1, #4
    5da2:	4620      	mov	r0, r4
    5da4:	f7ff f9d2 	bl	514c <bt_l2cap_send_cb>
}
    5da8:	2000      	movs	r0, #0
    5daa:	bd10      	pop	{r4, pc}
    5dac:	0000590b 	.word	0x0000590b

00005db0 <att_mtu_req>:
{
    5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5db4:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5db6:	881b      	ldrh	r3, [r3, #0]
    5db8:	2b16      	cmp	r3, #22
{
    5dba:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5dbc:	d91c      	bls.n	5df8 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5dbe:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5dc2:	2202      	movs	r2, #2
    5dc4:	2103      	movs	r1, #3
    5dc6:	4640      	mov	r0, r8
    5dc8:	f7ff ffaa 	bl	5d20 <bt_att_create_pdu>
	if (!pdu) {
    5dcc:	4607      	mov	r7, r0
    5dce:	b1b0      	cbz	r0, 5dfe <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5dd0:	2102      	movs	r1, #2
    5dd2:	3008      	adds	r0, #8
    5dd4:	f00d f822 	bl	12e1c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5dd8:	2617      	movs	r6, #23
    5dda:	2400      	movs	r4, #0
    5ddc:	7006      	strb	r6, [r0, #0]
    5dde:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5de0:	4b08      	ldr	r3, [pc, #32]	; (5e04 <att_mtu_req+0x54>)
    5de2:	4640      	mov	r0, r8
    5de4:	463a      	mov	r2, r7
    5de6:	2104      	movs	r1, #4
    5de8:	f7ff f9b0 	bl	514c <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5dec:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5dee:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
	return 0;
    5df2:	4620      	mov	r0, r4
    5df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5df8:	2004      	movs	r0, #4
    5dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5dfe:	200e      	movs	r0, #14
}
    5e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e04:	000058dd 	.word	0x000058dd

00005e08 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e0c:	4688      	mov	r8, r1
    5e0e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5e10:	2101      	movs	r1, #1
    5e12:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5e14:	4605      	mov	r5, r0
    5e16:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5e18:	f7ff ff82 	bl	5d20 <bt_att_create_pdu>
	if (!buf) {
    5e1c:	4604      	mov	r4, r0
    5e1e:	b180      	cbz	r0, 5e42 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5e20:	2104      	movs	r1, #4
    5e22:	3008      	adds	r0, #8
    5e24:	f00c fffa 	bl	12e1c <net_buf_simple_add>
	rsp->request = req;
    5e28:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5e2c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5e2e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5e32:	4622      	mov	r2, r4
    5e34:	4628      	mov	r0, r5
    5e36:	4b04      	ldr	r3, [pc, #16]	; (5e48 <send_err_rsp.part.11+0x40>)
    5e38:	2104      	movs	r1, #4
}
    5e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5e3e:	f7ff b985 	b.w	514c <bt_l2cap_send_cb>
    5e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e46:	bf00      	nop
    5e48:	000058dd 	.word	0x000058dd

00005e4c <bt_att_recv>:
{
    5e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5e4e:	898b      	ldrh	r3, [r1, #12]
{
    5e50:	b085      	sub	sp, #20
    5e52:	4604      	mov	r4, r0
    5e54:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5e56:	b953      	cbnz	r3, 5e6e <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    5e58:	4b4b      	ldr	r3, [pc, #300]	; (5f88 <bt_att_recv+0x13c>)
    5e5a:	9301      	str	r3, [sp, #4]
    5e5c:	9300      	str	r3, [sp, #0]
    5e5e:	4a4b      	ldr	r2, [pc, #300]	; (5f8c <bt_att_recv+0x140>)
    5e60:	4b4b      	ldr	r3, [pc, #300]	; (5f90 <bt_att_recv+0x144>)
    5e62:	494c      	ldr	r1, [pc, #304]	; (5f94 <bt_att_recv+0x148>)
    5e64:	484c      	ldr	r0, [pc, #304]	; (5f98 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    5e66:	f7fb f891 	bl	f8c <printk>
}
    5e6a:	b005      	add	sp, #20
    5e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5e6e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5e70:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5e72:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5e76:	f00c fff0 	bl	12e5a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5e7a:	4a48      	ldr	r2, [pc, #288]	; (5f9c <bt_att_recv+0x150>)
    5e7c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e7e:	2300      	movs	r3, #0
    5e80:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5e82:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5e86:	4286      	cmp	r6, r0
    5e88:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5e8c:	d11c      	bne.n	5ec8 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    5e8e:	4472      	add	r2, lr
    5e90:	7896      	ldrb	r6, [r2, #2]
    5e92:	2e01      	cmp	r6, #1
    5e94:	d136      	bne.n	5f04 <bt_att_recv+0xb8>
    5e96:	f3bf 8f5b 	dmb	ish
    5e9a:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5e9e:	e852 3f00 	ldrex	r3, [r2]
    5ea2:	f043 0001 	orr.w	r0, r3, #1
    5ea6:	e842 0c00 	strex	ip, r0, [r2]
    5eaa:	f1bc 0f00 	cmp.w	ip, #0
    5eae:	d1f6      	bne.n	5e9e <bt_att_recv+0x52>
    5eb0:	f3bf 8f5b 	dmb	ish
    5eb4:	07da      	lsls	r2, r3, #31
    5eb6:	d540      	bpl.n	5f3a <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    5eb8:	4b33      	ldr	r3, [pc, #204]	; (5f88 <bt_att_recv+0x13c>)
    5eba:	9301      	str	r3, [sp, #4]
    5ebc:	9300      	str	r3, [sp, #0]
    5ebe:	4a38      	ldr	r2, [pc, #224]	; (5fa0 <bt_att_recv+0x154>)
    5ec0:	4b33      	ldr	r3, [pc, #204]	; (5f90 <bt_att_recv+0x144>)
    5ec2:	4934      	ldr	r1, [pc, #208]	; (5f94 <bt_att_recv+0x148>)
    5ec4:	4837      	ldr	r0, [pc, #220]	; (5fa4 <bt_att_recv+0x158>)
    5ec6:	e7ce      	b.n	5e66 <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5ec8:	3301      	adds	r3, #1
    5eca:	2b1b      	cmp	r3, #27
    5ecc:	d1d9      	bne.n	5e82 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5ece:	4b2e      	ldr	r3, [pc, #184]	; (5f88 <bt_att_recv+0x13c>)
    5ed0:	9302      	str	r3, [sp, #8]
    5ed2:	9001      	str	r0, [sp, #4]
    5ed4:	9300      	str	r3, [sp, #0]
    5ed6:	4a32      	ldr	r2, [pc, #200]	; (5fa0 <bt_att_recv+0x154>)
    5ed8:	4b2d      	ldr	r3, [pc, #180]	; (5f90 <bt_att_recv+0x144>)
    5eda:	492e      	ldr	r1, [pc, #184]	; (5f94 <bt_att_recv+0x148>)
    5edc:	4832      	ldr	r0, [pc, #200]	; (5fa8 <bt_att_recv+0x15c>)
    5ede:	f7fb f855 	bl	f8c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5ee2:	782d      	ldrb	r5, [r5, #0]
    5ee4:	4628      	mov	r0, r5
    5ee6:	f7ff faad 	bl	5444 <att_op_get_type>
    5eea:	2800      	cmp	r0, #0
    5eec:	d0bd      	beq.n	5e6a <bt_att_recv+0x1e>
	if (!req) {
    5eee:	2d00      	cmp	r5, #0
    5ef0:	d0bb      	beq.n	5e6a <bt_att_recv+0x1e>
    5ef2:	2306      	movs	r3, #6
    5ef4:	2200      	movs	r2, #0
    5ef6:	4629      	mov	r1, r5
    5ef8:	6820      	ldr	r0, [r4, #0]
}
    5efa:	b005      	add	sp, #20
    5efc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5f00:	f7ff bf82 	b.w	5e08 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5f04:	2e05      	cmp	r6, #5
    5f06:	d118      	bne.n	5f3a <bt_att_recv+0xee>
    5f08:	f3bf 8f5b 	dmb	ish
    5f0c:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5f10:	e852 3f00 	ldrex	r3, [r2]
    5f14:	f043 0002 	orr.w	r0, r3, #2
    5f18:	e842 0c00 	strex	ip, r0, [r2]
    5f1c:	f1bc 0f00 	cmp.w	ip, #0
    5f20:	d1f6      	bne.n	5f10 <bt_att_recv+0xc4>
    5f22:	f3bf 8f5b 	dmb	ish
    5f26:	079b      	lsls	r3, r3, #30
    5f28:	d507      	bpl.n	5f3a <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    5f2a:	4b17      	ldr	r3, [pc, #92]	; (5f88 <bt_att_recv+0x13c>)
    5f2c:	9301      	str	r3, [sp, #4]
    5f2e:	9300      	str	r3, [sp, #0]
    5f30:	4a1b      	ldr	r2, [pc, #108]	; (5fa0 <bt_att_recv+0x154>)
    5f32:	4b17      	ldr	r3, [pc, #92]	; (5f90 <bt_att_recv+0x144>)
    5f34:	4917      	ldr	r1, [pc, #92]	; (5f94 <bt_att_recv+0x148>)
    5f36:	481d      	ldr	r0, [pc, #116]	; (5fac <bt_att_recv+0x160>)
    5f38:	e795      	b.n	5e66 <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    5f3a:	eb01 030e 	add.w	r3, r1, lr
    5f3e:	89ba      	ldrh	r2, [r7, #12]
    5f40:	7859      	ldrb	r1, [r3, #1]
    5f42:	4291      	cmp	r1, r2
    5f44:	d90f      	bls.n	5f66 <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5f46:	4b10      	ldr	r3, [pc, #64]	; (5f88 <bt_att_recv+0x13c>)
    5f48:	9303      	str	r3, [sp, #12]
    5f4a:	7829      	ldrb	r1, [r5, #0]
    5f4c:	9102      	str	r1, [sp, #8]
    5f4e:	9201      	str	r2, [sp, #4]
    5f50:	9300      	str	r3, [sp, #0]
    5f52:	4a0e      	ldr	r2, [pc, #56]	; (5f8c <bt_att_recv+0x140>)
    5f54:	4b0e      	ldr	r3, [pc, #56]	; (5f90 <bt_att_recv+0x144>)
    5f56:	490f      	ldr	r1, [pc, #60]	; (5f94 <bt_att_recv+0x148>)
    5f58:	4815      	ldr	r0, [pc, #84]	; (5fb0 <bt_att_recv+0x164>)
    5f5a:	f7fb f817 	bl	f8c <printk>
	if (handler->type == ATT_REQUEST && err) {
    5f5e:	2e01      	cmp	r6, #1
    5f60:	d183      	bne.n	5e6a <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    5f62:	2304      	movs	r3, #4
    5f64:	e00a      	b.n	5f7c <bt_att_recv+0x130>
		err = handler->func(att, buf);
    5f66:	685b      	ldr	r3, [r3, #4]
    5f68:	4639      	mov	r1, r7
    5f6a:	4620      	mov	r0, r4
    5f6c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5f6e:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5f70:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5f72:	f47f af7a 	bne.w	5e6a <bt_att_recv+0x1e>
    5f76:	2800      	cmp	r0, #0
    5f78:	f43f af77 	beq.w	5e6a <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5f7c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5f7e:	2900      	cmp	r1, #0
    5f80:	f43f af73 	beq.w	5e6a <bt_att_recv+0x1e>
    5f84:	2200      	movs	r2, #0
    5f86:	e7b7      	b.n	5ef8 <bt_att_recv+0xac>
    5f88:	00014b99 	.word	0x00014b99
    5f8c:	00015f55 	.word	0x00015f55
    5f90:	0001684d 	.word	0x0001684d
    5f94:	00015fa4 	.word	0x00015fa4
    5f98:	000169fe 	.word	0x000169fe
    5f9c:	00016adc 	.word	0x00016adc
    5fa0:	00015fdf 	.word	0x00015fdf
    5fa4:	00016a29 	.word	0x00016a29
    5fa8:	00016ab3 	.word	0x00016ab3
    5fac:	00016a55 	.word	0x00016a55
    5fb0:	00016a84 	.word	0x00016a84

00005fb4 <att_read_group_req>:
{
    5fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5fb8:	898b      	ldrh	r3, [r1, #12]
    5fba:	2b06      	cmp	r3, #6
{
    5fbc:	b08d      	sub	sp, #52	; 0x34
    5fbe:	4680      	mov	r8, r0
    5fc0:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5fc2:	d001      	beq.n	5fc8 <att_read_group_req+0x14>
    5fc4:	2b14      	cmp	r3, #20
    5fc6:	d168      	bne.n	609a <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5fc8:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5fca:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5fcc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5fd0:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5fd4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5fd6:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5fd8:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5fda:	f00c ff3e 	bl	12e5a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5fde:	4621      	mov	r1, r4
    5fe0:	4638      	mov	r0, r7
    5fe2:	f7ff fc2d 	bl	5840 <uuid_create>
    5fe6:	2800      	cmp	r0, #0
    5fe8:	d059      	beq.n	609e <att_read_group_req+0xea>
	if (!start || !end) {
    5fea:	2d00      	cmp	r5, #0
    5fec:	d05a      	beq.n	60a4 <att_read_group_req+0xf0>
    5fee:	2400      	movs	r4, #0
    5ff0:	2e00      	cmp	r6, #0
    5ff2:	d056      	beq.n	60a2 <att_read_group_req+0xee>
	if (start > end) {
    5ff4:	42b5      	cmp	r5, r6
    5ff6:	d855      	bhi.n	60a4 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5ff8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5ffc:	4669      	mov	r1, sp
    5ffe:	4638      	mov	r0, r7
    6000:	f88d 4000 	strb.w	r4, [sp]
    6004:	f8ad 3002 	strh.w	r3, [sp, #2]
    6008:	f7fb ff82 	bl	1f10 <bt_uuid_cmp>
    600c:	bb38      	cbnz	r0, 605e <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    600e:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    6012:	2214      	movs	r2, #20
    6014:	2100      	movs	r1, #0
    6016:	a807      	add	r0, sp, #28
    6018:	f7fb fe28 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    601c:	2201      	movs	r2, #1
    601e:	2111      	movs	r1, #17
    6020:	4648      	mov	r0, r9
    6022:	f7ff fe7d 	bl	5d20 <bt_att_create_pdu>
    6026:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6028:	2800      	cmp	r0, #0
    602a:	d038      	beq.n	609e <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    602c:	2101      	movs	r1, #1
    602e:	3008      	adds	r0, #8
	data.uuid = uuid;
    6030:	9708      	str	r7, [sp, #32]
	data.att = att;
    6032:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6036:	f00c fef1 	bl	12e1c <net_buf_simple_add>
	data.rsp->len = 0;
    603a:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    603c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    603e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    6040:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6042:	4a1c      	ldr	r2, [pc, #112]	; (60b4 <att_read_group_req+0x100>)
	data.group = NULL;
    6044:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6046:	4631      	mov	r1, r6
    6048:	4628      	mov	r0, r5
    604a:	f000 fe91 	bl	6d70 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6050:	781c      	ldrb	r4, [r3, #0]
    6052:	b9d4      	cbnz	r4, 608a <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6054:	9809      	ldr	r0, [sp, #36]	; 0x24
    6056:	f00c feaf 	bl	12db8 <net_buf_unref>
    605a:	230a      	movs	r3, #10
    605c:	e00c      	b.n	6078 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    605e:	f642 0301 	movw	r3, #10241	; 0x2801
    6062:	a901      	add	r1, sp, #4
    6064:	4638      	mov	r0, r7
    6066:	f88d 4004 	strb.w	r4, [sp, #4]
    606a:	f8ad 3006 	strh.w	r3, [sp, #6]
    606e:	f7fb ff4f 	bl	1f10 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6072:	2800      	cmp	r0, #0
    6074:	d0cb      	beq.n	600e <att_read_group_req+0x5a>
    6076:	2310      	movs	r3, #16
    6078:	462a      	mov	r2, r5
    607a:	2110      	movs	r1, #16
    607c:	4648      	mov	r0, r9
    607e:	f7ff fec3 	bl	5e08 <send_err_rsp.part.11>
}
    6082:	4620      	mov	r0, r4
    6084:	b00d      	add	sp, #52	; 0x34
    6086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    608a:	4b0b      	ldr	r3, [pc, #44]	; (60b8 <att_read_group_req+0x104>)
    608c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    608e:	2104      	movs	r1, #4
    6090:	4648      	mov	r0, r9
    6092:	f7ff f85b 	bl	514c <bt_l2cap_send_cb>
		return 0;
    6096:	2400      	movs	r4, #0
    6098:	e7f3      	b.n	6082 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    609a:	2404      	movs	r4, #4
    609c:	e7f1      	b.n	6082 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    609e:	240e      	movs	r4, #14
    60a0:	e7ef      	b.n	6082 <att_read_group_req+0xce>
			*err = 0;
    60a2:	4635      	mov	r5, r6
    60a4:	2301      	movs	r3, #1
    60a6:	462a      	mov	r2, r5
    60a8:	2110      	movs	r1, #16
    60aa:	4648      	mov	r0, r9
    60ac:	f7ff feac 	bl	5e08 <send_err_rsp.part.11>
    60b0:	e7f1      	b.n	6096 <att_read_group_req+0xe2>
    60b2:	bf00      	nop
    60b4:	00005509 	.word	0x00005509
    60b8:	000058dd 	.word	0x000058dd

000060bc <att_read_mult_req>:
{
    60bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    60c0:	6804      	ldr	r4, [r0, #0]
{
    60c2:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    60c4:	2214      	movs	r2, #20
{
    60c6:	4606      	mov	r6, r0
    60c8:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    60ca:	a801      	add	r0, sp, #4
    60cc:	2100      	movs	r1, #0
    60ce:	f7fb fdcd 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    60d2:	2200      	movs	r2, #0
    60d4:	210f      	movs	r1, #15
    60d6:	4620      	mov	r0, r4
    60d8:	f7ff fe22 	bl	5d20 <bt_att_create_pdu>
    60dc:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    60de:	b368      	cbz	r0, 613c <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    60e0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6144 <att_read_mult_req+0x88>
	data.att = att;
    60e4:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    60e6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    60ea:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    60ee:	89ab      	ldrh	r3, [r5, #12]
    60f0:	2b01      	cmp	r3, #1
    60f2:	d806      	bhi.n	6102 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    60f4:	4b12      	ldr	r3, [pc, #72]	; (6140 <att_read_mult_req+0x84>)
    60f6:	9a03      	ldr	r2, [sp, #12]
    60f8:	2104      	movs	r1, #4
    60fa:	4620      	mov	r0, r4
    60fc:	f7ff f826 	bl	514c <bt_l2cap_send_cb>
    6100:	e018      	b.n	6134 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    6102:	4638      	mov	r0, r7
    6104:	f00c feb9 	bl	12e7a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6108:	ab01      	add	r3, sp, #4
    610a:	464a      	mov	r2, r9
    610c:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    610e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6110:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6114:	f000 fe2c 	bl	6d70 <bt_gatt_foreach_attr>
		if (data.err) {
    6118:	f89d 3014 	ldrb.w	r3, [sp, #20]
    611c:	2b00      	cmp	r3, #0
    611e:	d0e6      	beq.n	60ee <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    6120:	9803      	ldr	r0, [sp, #12]
    6122:	f00c fe49 	bl	12db8 <net_buf_unref>
    6126:	f89d 3014 	ldrb.w	r3, [sp, #20]
    612a:	4632      	mov	r2, r6
    612c:	210e      	movs	r1, #14
    612e:	4620      	mov	r0, r4
    6130:	f7ff fe6a 	bl	5e08 <send_err_rsp.part.11>
	return 0;
    6134:	2000      	movs	r0, #0
}
    6136:	b007      	add	sp, #28
    6138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    613c:	200e      	movs	r0, #14
    613e:	e7fa      	b.n	6136 <att_read_mult_req+0x7a>
    6140:	000058dd 	.word	0x000058dd
    6144:	00005ca9 	.word	0x00005ca9

00006148 <att_read_rsp>:
{
    6148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    614c:	4607      	mov	r7, r0
    614e:	b086      	sub	sp, #24
    6150:	460c      	mov	r4, r1
    6152:	4690      	mov	r8, r2
	if (!handle) {
    6154:	461d      	mov	r5, r3
    6156:	b3a3      	cbz	r3, 61c2 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    6158:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    615a:	2214      	movs	r2, #20
    615c:	2100      	movs	r1, #0
    615e:	a801      	add	r0, sp, #4
    6160:	f7fb fd84 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6164:	2200      	movs	r2, #0
    6166:	4641      	mov	r1, r8
    6168:	4630      	mov	r0, r6
    616a:	f7ff fdd9 	bl	5d20 <bt_att_create_pdu>
    616e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6170:	b348      	cbz	r0, 61c6 <att_read_rsp+0x7e>
	data.offset = offset;
    6172:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    6176:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    617a:	2301      	movs	r3, #1
    617c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6180:	4a12      	ldr	r2, [pc, #72]	; (61cc <att_read_rsp+0x84>)
	data.att = att;
    6182:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6184:	ab01      	add	r3, sp, #4
    6186:	4629      	mov	r1, r5
    6188:	4628      	mov	r0, r5
    618a:	f000 fdf1 	bl	6d70 <bt_gatt_foreach_attr>
	if (data.err) {
    618e:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6192:	b17f      	cbz	r7, 61b4 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    6194:	9803      	ldr	r0, [sp, #12]
    6196:	f00c fe0f 	bl	12db8 <net_buf_unref>
	if (!req) {
    619a:	b13c      	cbz	r4, 61ac <att_read_rsp+0x64>
    619c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    61a0:	462a      	mov	r2, r5
    61a2:	4621      	mov	r1, r4
    61a4:	4630      	mov	r0, r6
    61a6:	f7ff fe2f 	bl	5e08 <send_err_rsp.part.11>
		return 0;
    61aa:	2400      	movs	r4, #0
}
    61ac:	4620      	mov	r0, r4
    61ae:	b006      	add	sp, #24
    61b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    61b4:	4b06      	ldr	r3, [pc, #24]	; (61d0 <att_read_rsp+0x88>)
    61b6:	9a03      	ldr	r2, [sp, #12]
    61b8:	2104      	movs	r1, #4
    61ba:	4630      	mov	r0, r6
    61bc:	f7fe ffc6 	bl	514c <bt_l2cap_send_cb>
    61c0:	e7f3      	b.n	61aa <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    61c2:	2401      	movs	r4, #1
    61c4:	e7f2      	b.n	61ac <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    61c6:	240e      	movs	r4, #14
    61c8:	e7f0      	b.n	61ac <att_read_rsp+0x64>
    61ca:	bf00      	nop
    61cc:	00005ca9 	.word	0x00005ca9
    61d0:	000058dd 	.word	0x000058dd

000061d4 <att_read_blob_req>:
{
    61d4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    61d6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    61d8:	8813      	ldrh	r3, [r2, #0]
    61da:	8852      	ldrh	r2, [r2, #2]
    61dc:	9200      	str	r2, [sp, #0]
    61de:	210c      	movs	r1, #12
    61e0:	220d      	movs	r2, #13
    61e2:	f7ff ffb1 	bl	6148 <att_read_rsp>
}
    61e6:	b003      	add	sp, #12
    61e8:	f85d fb04 	ldr.w	pc, [sp], #4

000061ec <att_read_req>:
{
    61ec:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    61ee:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    61f0:	2200      	movs	r2, #0
    61f2:	881b      	ldrh	r3, [r3, #0]
    61f4:	9200      	str	r2, [sp, #0]
    61f6:	210a      	movs	r1, #10
    61f8:	220b      	movs	r2, #11
    61fa:	f7ff ffa5 	bl	6148 <att_read_rsp>
}
    61fe:	b003      	add	sp, #12
    6200:	f85d fb04 	ldr.w	pc, [sp], #4

00006204 <att_read_type_req>:
{
    6204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6208:	898b      	ldrh	r3, [r1, #12]
    620a:	2b06      	cmp	r3, #6
{
    620c:	b08d      	sub	sp, #52	; 0x34
    620e:	4607      	mov	r7, r0
    6210:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6212:	d001      	beq.n	6218 <att_read_type_req+0x14>
    6214:	2b14      	cmp	r3, #20
    6216:	d152      	bne.n	62be <att_read_type_req+0xba>
	req = (void *)buf->data;
    6218:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    621a:	2104      	movs	r1, #4
	req = (void *)buf->data;
    621c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6220:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6224:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6226:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6228:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    622c:	f00c fe15 	bl	12e5a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6230:	4631      	mov	r1, r6
    6232:	4640      	mov	r0, r8
    6234:	f7ff fb04 	bl	5840 <uuid_create>
    6238:	b198      	cbz	r0, 6262 <att_read_type_req+0x5e>
	if (!start || !end) {
    623a:	2d00      	cmp	r5, #0
    623c:	d042      	beq.n	62c4 <att_read_type_req+0xc0>
    623e:	2c00      	cmp	r4, #0
    6240:	d03f      	beq.n	62c2 <att_read_type_req+0xbe>
	if (start > end) {
    6242:	42a5      	cmp	r5, r4
    6244:	d83e      	bhi.n	62c4 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    6246:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    6248:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    624a:	2100      	movs	r1, #0
    624c:	eb0d 0002 	add.w	r0, sp, r2
    6250:	f7fb fd0c 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6254:	2201      	movs	r2, #1
    6256:	2109      	movs	r1, #9
    6258:	4630      	mov	r0, r6
    625a:	f7ff fd61 	bl	5d20 <bt_att_create_pdu>
    625e:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6260:	b908      	cbnz	r0, 6266 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6262:	240e      	movs	r4, #14
    6264:	e027      	b.n	62b6 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6266:	2101      	movs	r1, #1
    6268:	3008      	adds	r0, #8
	data.att = att;
    626a:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    626c:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6270:	f00c fdd4 	bl	12e1c <net_buf_simple_add>
	data.rsp->len = 0;
    6274:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6276:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6278:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    627a:	4621      	mov	r1, r4
	data.rsp->len = 0;
    627c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    627e:	4a14      	ldr	r2, [pc, #80]	; (62d0 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6280:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6284:	4628      	mov	r0, r5
    6286:	ab06      	add	r3, sp, #24
    6288:	f000 fd72 	bl	6d70 <bt_gatt_foreach_attr>
	if (data.err) {
    628c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6290:	b15c      	cbz	r4, 62aa <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6292:	9808      	ldr	r0, [sp, #32]
    6294:	f00c fd90 	bl	12db8 <net_buf_unref>
    6298:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    629c:	462a      	mov	r2, r5
    629e:	2108      	movs	r1, #8
    62a0:	4630      	mov	r0, r6
    62a2:	f7ff fdb1 	bl	5e08 <send_err_rsp.part.11>
		return 0;
    62a6:	2400      	movs	r4, #0
    62a8:	e005      	b.n	62b6 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    62aa:	4b0a      	ldr	r3, [pc, #40]	; (62d4 <att_read_type_req+0xd0>)
    62ac:	9a08      	ldr	r2, [sp, #32]
    62ae:	2104      	movs	r1, #4
    62b0:	4630      	mov	r0, r6
    62b2:	f7fe ff4b 	bl	514c <bt_l2cap_send_cb>
}
    62b6:	4620      	mov	r0, r4
    62b8:	b00d      	add	sp, #52	; 0x34
    62ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    62be:	2404      	movs	r4, #4
    62c0:	e7f9      	b.n	62b6 <att_read_type_req+0xb2>
			*err = 0;
    62c2:	4625      	mov	r5, r4
    62c4:	2301      	movs	r3, #1
    62c6:	462a      	mov	r2, r5
    62c8:	2108      	movs	r1, #8
    62ca:	4648      	mov	r0, r9
    62cc:	e7e9      	b.n	62a2 <att_read_type_req+0x9e>
    62ce:	bf00      	nop
    62d0:	00005785 	.word	0x00005785
    62d4:	000058dd 	.word	0x000058dd

000062d8 <att_find_type_req>:
{
    62d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    62dc:	f8d0 9000 	ldr.w	r9, [r0]
{
    62e0:	4680      	mov	r8, r0
	req = (void *)buf->data;
    62e2:	4608      	mov	r0, r1
{
    62e4:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    62e6:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    62ea:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    62ec:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    62ee:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    62f0:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    62f2:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    62f4:	f00c fdb1 	bl	12e5a <net_buf_simple_pull>
    62f8:	4682      	mov	sl, r0
	if (!start || !end) {
    62fa:	2d00      	cmp	r5, #0
    62fc:	d057      	beq.n	63ae <att_find_type_req+0xd6>
    62fe:	2400      	movs	r4, #0
    6300:	2f00      	cmp	r7, #0
    6302:	d053      	beq.n	63ac <att_find_type_req+0xd4>
	if (start > end) {
    6304:	42bd      	cmp	r5, r7
    6306:	d852      	bhi.n	63ae <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6308:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    630c:	a902      	add	r1, sp, #8
    630e:	a801      	add	r0, sp, #4
    6310:	f8ad 6006 	strh.w	r6, [sp, #6]
    6314:	f88d 4004 	strb.w	r4, [sp, #4]
    6318:	f88d 4008 	strb.w	r4, [sp, #8]
    631c:	f8ad 300a 	strh.w	r3, [sp, #10]
    6320:	f7fb fdf6 	bl	1f10 <bt_uuid_cmp>
    6324:	4606      	mov	r6, r0
    6326:	b148      	cbz	r0, 633c <att_find_type_req+0x64>
    6328:	230a      	movs	r3, #10
    632a:	462a      	mov	r2, r5
    632c:	2106      	movs	r1, #6
    632e:	4648      	mov	r0, r9
    6330:	f7ff fd6a 	bl	5e08 <send_err_rsp.part.11>
}
    6334:	4620      	mov	r0, r4
    6336:	b009      	add	sp, #36	; 0x24
    6338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    633c:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    6340:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    6344:	2214      	movs	r2, #20
    6346:	4631      	mov	r1, r6
    6348:	a803      	add	r0, sp, #12
    634a:	f7fb fc8f 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    634e:	4632      	mov	r2, r6
    6350:	2107      	movs	r1, #7
    6352:	4648      	mov	r0, r9
    6354:	f7ff fce4 	bl	5d20 <bt_att_create_pdu>
    6358:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    635a:	b328      	cbz	r0, 63a8 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    635c:	230a      	movs	r3, #10
    635e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6362:	4a14      	ldr	r2, [pc, #80]	; (63b4 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6364:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6368:	ab03      	add	r3, sp, #12
    636a:	4639      	mov	r1, r7
    636c:	4628      	mov	r0, r5
	data.att = att;
    636e:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    6372:	9605      	str	r6, [sp, #20]
	data.value = value;
    6374:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6378:	f000 fcfa 	bl	6d70 <bt_gatt_foreach_attr>
	if (data.err) {
    637c:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6380:	b15c      	cbz	r4, 639a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6382:	9804      	ldr	r0, [sp, #16]
    6384:	f00c fd18 	bl	12db8 <net_buf_unref>
    6388:	f89d 301d 	ldrb.w	r3, [sp, #29]
    638c:	462a      	mov	r2, r5
    638e:	2106      	movs	r1, #6
    6390:	4648      	mov	r0, r9
    6392:	f7ff fd39 	bl	5e08 <send_err_rsp.part.11>
		return 0;
    6396:	2400      	movs	r4, #0
    6398:	e7cc      	b.n	6334 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    639a:	4b07      	ldr	r3, [pc, #28]	; (63b8 <att_find_type_req+0xe0>)
    639c:	9a04      	ldr	r2, [sp, #16]
    639e:	2104      	movs	r1, #4
    63a0:	4648      	mov	r0, r9
    63a2:	f7fe fed3 	bl	514c <bt_l2cap_send_cb>
    63a6:	e7c5      	b.n	6334 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    63a8:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    63aa:	e7c3      	b.n	6334 <att_find_type_req+0x5c>
			*err = 0;
    63ac:	463d      	mov	r5, r7
    63ae:	2301      	movs	r3, #1
    63b0:	e7ec      	b.n	638c <att_find_type_req+0xb4>
    63b2:	bf00      	nop
    63b4:	00005671 	.word	0x00005671
    63b8:	000058dd 	.word	0x000058dd

000063bc <att_find_info_req>:
{
    63bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    63be:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    63c0:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    63c2:	881d      	ldrh	r5, [r3, #0]
{
    63c4:	b085      	sub	sp, #20
    63c6:	4607      	mov	r7, r0
	if (!start || !end) {
    63c8:	b375      	cbz	r5, 6428 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    63ca:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    63cc:	b35c      	cbz	r4, 6426 <att_find_info_req+0x6a>
	if (start > end) {
    63ce:	42a5      	cmp	r5, r4
    63d0:	d82a      	bhi.n	6428 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    63d2:	2210      	movs	r2, #16
    63d4:	2100      	movs	r1, #0
    63d6:	4668      	mov	r0, sp
    63d8:	f7fb fc48 	bl	1c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    63dc:	2200      	movs	r2, #0
    63de:	2105      	movs	r1, #5
    63e0:	4630      	mov	r0, r6
    63e2:	f7ff fc9d 	bl	5d20 <bt_att_create_pdu>
    63e6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    63e8:	b910      	cbnz	r0, 63f0 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    63ea:	200e      	movs	r0, #14
}
    63ec:	b005      	add	sp, #20
    63ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    63f0:	4621      	mov	r1, r4
    63f2:	466b      	mov	r3, sp
    63f4:	4a0d      	ldr	r2, [pc, #52]	; (642c <att_find_info_req+0x70>)
	data.att = att;
    63f6:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    63f8:	4628      	mov	r0, r5
    63fa:	f000 fcb9 	bl	6d70 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    63fe:	9c02      	ldr	r4, [sp, #8]
    6400:	b94c      	cbnz	r4, 6416 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    6402:	9801      	ldr	r0, [sp, #4]
    6404:	f00c fcd8 	bl	12db8 <net_buf_unref>
    6408:	230a      	movs	r3, #10
    640a:	462a      	mov	r2, r5
    640c:	2104      	movs	r1, #4
    640e:	4630      	mov	r0, r6
    6410:	f7ff fcfa 	bl	5e08 <send_err_rsp.part.11>
    6414:	e005      	b.n	6422 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6416:	4b06      	ldr	r3, [pc, #24]	; (6430 <att_find_info_req+0x74>)
    6418:	9a01      	ldr	r2, [sp, #4]
    641a:	2104      	movs	r1, #4
    641c:	4630      	mov	r0, r6
    641e:	f7fe fe95 	bl	514c <bt_l2cap_send_cb>
		return 0;
    6422:	2000      	movs	r0, #0
    6424:	e7e2      	b.n	63ec <att_find_info_req+0x30>
			*err = 0;
    6426:	4625      	mov	r5, r4
    6428:	2301      	movs	r3, #1
    642a:	e7ee      	b.n	640a <att_find_info_req+0x4e>
    642c:	000055d7 	.word	0x000055d7
    6430:	000058dd 	.word	0x000058dd

00006434 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6438:	b086      	sub	sp, #24
    643a:	4690      	mov	r8, r2
    643c:	4605      	mov	r5, r0
    643e:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6440:	2218      	movs	r2, #24
    6442:	2100      	movs	r1, #0
    6444:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6446:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    6448:	f7fb fc10 	bl	1c6c <memset>
	if (rsp) {
    644c:	f1b8 0f00 	cmp.w	r8, #0
    6450:	d11f      	bne.n	6492 <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    6452:	2300      	movs	r3, #0
    6454:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    645a:	9303      	str	r3, [sp, #12]
	data.len = len;
    645c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6460:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6464:	2301      	movs	r3, #1
    6466:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    646a:	4a1b      	ldr	r2, [pc, #108]	; (64d8 <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    646c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    646e:	466b      	mov	r3, sp
    6470:	4639      	mov	r1, r7
    6472:	4638      	mov	r0, r7
	data.op = op;
    6474:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6478:	f000 fc7a 	bl	6d70 <bt_gatt_foreach_attr>
	if (data.err) {
    647c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6480:	b98c      	cbnz	r4, 64a6 <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    6482:	9a01      	ldr	r2, [sp, #4]
    6484:	b1b2      	cbz	r2, 64b4 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6486:	4b15      	ldr	r3, [pc, #84]	; (64dc <att_write_rsp.part.12.constprop.17+0xa8>)
    6488:	2104      	movs	r1, #4
    648a:	4628      	mov	r0, r5
    648c:	f7fe fe5e 	bl	514c <bt_l2cap_send_cb>
    6490:	e011      	b.n	64b6 <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6492:	2200      	movs	r2, #0
    6494:	4641      	mov	r1, r8
    6496:	4628      	mov	r0, r5
    6498:	f7ff fc42 	bl	5d20 <bt_att_create_pdu>
    649c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    649e:	2800      	cmp	r0, #0
    64a0:	d1d7      	bne.n	6452 <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    64a2:	240e      	movs	r4, #14
    64a4:	e007      	b.n	64b6 <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    64a6:	f1b8 0f00 	cmp.w	r8, #0
    64aa:	d00f      	beq.n	64cc <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    64ac:	9801      	ldr	r0, [sp, #4]
    64ae:	f00c fc83 	bl	12db8 <net_buf_unref>
	if (!req) {
    64b2:	b926      	cbnz	r6, 64be <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    64b4:	2400      	movs	r4, #0
}
    64b6:	4620      	mov	r0, r4
    64b8:	b006      	add	sp, #24
    64ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64be:	f89d 3014 	ldrb.w	r3, [sp, #20]
    64c2:	463a      	mov	r2, r7
    64c4:	4631      	mov	r1, r6
    64c6:	4628      	mov	r0, r5
    64c8:	f7ff fc9e 	bl	5e08 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    64cc:	2e18      	cmp	r6, #24
    64ce:	d1f1      	bne.n	64b4 <att_write_rsp.part.12.constprop.17+0x80>
    64d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    64d4:	e7ef      	b.n	64b6 <att_write_rsp.part.12.constprop.17+0x82>
    64d6:	bf00      	nop
    64d8:	000059b9 	.word	0x000059b9
    64dc:	000058dd 	.word	0x000058dd

000064e0 <att_signed_write_cmd>:
{
    64e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    64e4:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    64e6:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    64e8:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    64ec:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    64ee:	4620      	mov	r0, r4
    64f0:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    64f2:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    64f6:	f00c fca8 	bl	12e4a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    64fa:	4629      	mov	r1, r5
    64fc:	4630      	mov	r0, r6
    64fe:	f000 fd8a 	bl	7016 <bt_smp_sign_verify>
	if (err) {
    6502:	4607      	mov	r7, r0
    6504:	b160      	cbz	r0, 6520 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    6506:	4b13      	ldr	r3, [pc, #76]	; (6554 <att_signed_write_cmd+0x74>)
    6508:	9301      	str	r3, [sp, #4]
    650a:	9300      	str	r3, [sp, #0]
    650c:	4a12      	ldr	r2, [pc, #72]	; (6558 <att_signed_write_cmd+0x78>)
    650e:	4b13      	ldr	r3, [pc, #76]	; (655c <att_signed_write_cmd+0x7c>)
    6510:	4913      	ldr	r1, [pc, #76]	; (6560 <att_signed_write_cmd+0x80>)
    6512:	4814      	ldr	r0, [pc, #80]	; (6564 <att_signed_write_cmd+0x84>)
    6514:	f7fa fd3a 	bl	f8c <printk>
    6518:	2000      	movs	r0, #0
}
    651a:	b002      	add	sp, #8
    651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6520:	2101      	movs	r1, #1
    6522:	4620      	mov	r0, r4
    6524:	f00c fc99 	bl	12e5a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6528:	2102      	movs	r1, #2
    652a:	4620      	mov	r0, r4
    652c:	f00c fc95 	bl	12e5a <net_buf_simple_pull>
	if (!handle) {
    6530:	f1b8 0f00 	cmp.w	r8, #0
    6534:	d00c      	beq.n	6550 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6536:	7b2b      	ldrb	r3, [r5, #12]
    6538:	3b0c      	subs	r3, #12
    653a:	b2db      	uxtb	r3, r3
    653c:	9301      	str	r3, [sp, #4]
    653e:	68ab      	ldr	r3, [r5, #8]
    6540:	9300      	str	r3, [sp, #0]
    6542:	463a      	mov	r2, r7
    6544:	4643      	mov	r3, r8
    6546:	4639      	mov	r1, r7
    6548:	4630      	mov	r0, r6
    654a:	f7ff ff73 	bl	6434 <att_write_rsp.part.12.constprop.17>
    654e:	e7e4      	b.n	651a <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    6550:	2001      	movs	r0, #1
    6552:	e7e2      	b.n	651a <att_signed_write_cmd+0x3a>
    6554:	00014b99 	.word	0x00014b99
    6558:	00015f55 	.word	0x00015f55
    655c:	00016838 	.word	0x00016838
    6560:	00015fa4 	.word	0x00015fa4
    6564:	00016953 	.word	0x00016953

00006568 <att_write_cmd>:
{
    6568:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    656a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    656c:	f101 0008 	add.w	r0, r1, #8
{
    6570:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6572:	f00c fc82 	bl	12e7a <net_buf_simple_pull_le16>
	if (!handle) {
    6576:	4603      	mov	r3, r0
    6578:	b150      	cbz	r0, 6590 <att_write_cmd+0x28>
    657a:	7b22      	ldrb	r2, [r4, #12]
    657c:	9201      	str	r2, [sp, #4]
    657e:	68a2      	ldr	r2, [r4, #8]
    6580:	9200      	str	r2, [sp, #0]
    6582:	2200      	movs	r2, #0
    6584:	4611      	mov	r1, r2
    6586:	4628      	mov	r0, r5
    6588:	f7ff ff54 	bl	6434 <att_write_rsp.part.12.constprop.17>
}
    658c:	b003      	add	sp, #12
    658e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6590:	2001      	movs	r0, #1
    6592:	e7fb      	b.n	658c <att_write_cmd+0x24>

00006594 <att_write_req>:
{
    6594:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6596:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6598:	f101 0008 	add.w	r0, r1, #8
{
    659c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    659e:	f00c fc6c 	bl	12e7a <net_buf_simple_pull_le16>
	if (!handle) {
    65a2:	4603      	mov	r3, r0
    65a4:	b150      	cbz	r0, 65bc <att_write_req+0x28>
    65a6:	7b22      	ldrb	r2, [r4, #12]
    65a8:	9201      	str	r2, [sp, #4]
    65aa:	68a2      	ldr	r2, [r4, #8]
    65ac:	9200      	str	r2, [sp, #0]
    65ae:	2112      	movs	r1, #18
    65b0:	2213      	movs	r2, #19
    65b2:	4628      	mov	r0, r5
    65b4:	f7ff ff3e 	bl	6434 <att_write_rsp.part.12.constprop.17>
}
    65b8:	b003      	add	sp, #12
    65ba:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    65bc:	2001      	movs	r0, #1
    65be:	e7fb      	b.n	65b8 <att_write_req+0x24>

000065c0 <bt_att_init>:

void bt_att_init(void)
{
    65c0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    65c2:	4803      	ldr	r0, [pc, #12]	; (65d0 <bt_att_init+0x10>)
    65c4:	f7fe fd04 	bl	4fd0 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    65c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    65cc:	f000 bbba 	b.w	6d44 <bt_gatt_init>
    65d0:	20003bc0 	.word	0x20003bc0

000065d4 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    65d4:	b510      	push	{r4, lr}
    65d6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    65d8:	b1d8      	cbz	r0, 6612 <bt_att_req_send+0x3e>
    65da:	b1d1      	cbz	r1, 6612 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    65dc:	f7ff f9ac 	bl	5938 <att_chan_get>
	if (!att) {
    65e0:	4603      	mov	r3, r0
    65e2:	b1c8      	cbz	r0, 6618 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    65e4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    65e8:	b172      	cbz	r2, 6608 <bt_att_req_send+0x34>
	parent->next = child;
    65ea:	2000      	movs	r0, #0
    65ec:	6020      	str	r0, [r4, #0]
    65ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
Z_GENLIST_APPEND(slist, snode);
    65f2:	b92a      	cbnz	r2, 6600 <bt_att_req_send+0x2c>
	list->tail = node;
    65f4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	list->head = node;
    65f8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    65fc:	4610      	mov	r0, r2
    65fe:	bd10      	pop	{r4, pc}
	parent->next = child;
    6600:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6602:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6606:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6608:	4621      	mov	r1, r4
}
    660a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    660e:	f7ff b9ff 	b.w	5a10 <att_send_req>
		return -EINVAL;
    6612:	f06f 0015 	mvn.w	r0, #21
    6616:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6618:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    661c:	bd10      	pop	{r4, pc}

0000661e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    661e:	4770      	bx	lr

00006620 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6620:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6622:	2000      	movs	r0, #0
    6624:	4770      	bx	lr

00006626 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6626:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6628:	2300      	movs	r3, #0
    662a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    662c:	461a      	mov	r2, r3
    662e:	42aa      	cmp	r2, r5
    6630:	d107      	bne.n	6642 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6632:	890a      	ldrh	r2, [r1, #8]
    6634:	429a      	cmp	r2, r3
    6636:	d00d      	beq.n	6654 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6638:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    663a:	68ca      	ldr	r2, [r1, #12]
	}
}
    663c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    663e:	4619      	mov	r1, r3
    6640:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6642:	680c      	ldr	r4, [r1, #0]
    6644:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6648:	3201      	adds	r2, #1
    664a:	8924      	ldrh	r4, [r4, #8]
    664c:	42a3      	cmp	r3, r4
    664e:	bf38      	it	cc
    6650:	4623      	movcc	r3, r4
    6652:	e7ec      	b.n	662e <gatt_ccc_changed+0x8>
}
    6654:	bc30      	pop	{r4, r5}
    6656:	4770      	bx	lr

00006658 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6658:	b410      	push	{r4}
    665a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    665c:	699c      	ldr	r4, [r3, #24]
    665e:	460a      	mov	r2, r1
    6660:	6959      	ldr	r1, [r3, #20]
    6662:	4623      	mov	r3, r4
}
    6664:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6666:	4718      	bx	r3

00006668 <gatt_register>:
{
    6668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    666a:	4a1e      	ldr	r2, [pc, #120]	; (66e4 <gatt_register+0x7c>)
    666c:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    666e:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    6672:	b14b      	cbz	r3, 6688 <gatt_register+0x20>
    6674:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6676:	2b00      	cmp	r3, #0
    6678:	d032      	beq.n	66e0 <gatt_register+0x78>
	handle = last->attrs[last->attr_count - 1].handle;
    667a:	e913 0018 	ldmdb	r3, {r3, r4}
    667e:	2614      	movs	r6, #20
    6680:	fb06 3304 	mla	r3, r6, r4, r3
    6684:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6688:	b2ad      	uxth	r5, r5
    668a:	2414      	movs	r4, #20
    668c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    6690:	b109      	cbz	r1, 6696 <gatt_register+0x2e>
    6692:	42a9      	cmp	r1, r5
    6694:	d108      	bne.n	66a8 <gatt_register+0x40>
	parent->next = child;
    6696:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6698:	f100 0108 	add.w	r1, r0, #8
    669c:	6083      	str	r3, [r0, #8]
    669e:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    66a0:	b9d0      	cbnz	r0, 66d8 <gatt_register+0x70>
	list->tail = node;
    66a2:	6051      	str	r1, [r2, #4]
	list->head = node;
    66a4:	6011      	str	r1, [r2, #0]
    66a6:	e015      	b.n	66d4 <gatt_register+0x6c>
		if (!attrs->handle) {
    66a8:	8a0c      	ldrh	r4, [r1, #16]
    66aa:	b92c      	cbnz	r4, 66b8 <gatt_register+0x50>
			attrs->handle = ++handle;
    66ac:	3301      	adds	r3, #1
    66ae:	b29c      	uxth	r4, r3
    66b0:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    66b2:	3114      	adds	r1, #20
    66b4:	4623      	mov	r3, r4
    66b6:	e7eb      	b.n	6690 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    66b8:	42a3      	cmp	r3, r4
    66ba:	d3fa      	bcc.n	66b2 <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    66bc:	4b0a      	ldr	r3, [pc, #40]	; (66e8 <gatt_register+0x80>)
    66be:	9302      	str	r3, [sp, #8]
    66c0:	e88d 0018 	stmia.w	sp, {r3, r4}
    66c4:	4a09      	ldr	r2, [pc, #36]	; (66ec <gatt_register+0x84>)
    66c6:	4b0a      	ldr	r3, [pc, #40]	; (66f0 <gatt_register+0x88>)
    66c8:	490a      	ldr	r1, [pc, #40]	; (66f4 <gatt_register+0x8c>)
    66ca:	480b      	ldr	r0, [pc, #44]	; (66f8 <gatt_register+0x90>)
    66cc:	f7fa fc5e 	bl	f8c <printk>
			return -EINVAL;
    66d0:	f06f 0015 	mvn.w	r0, #21
}
    66d4:	b004      	add	sp, #16
    66d6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    66d8:	6001      	str	r1, [r0, #0]
	list->tail = node;
    66da:	6051      	str	r1, [r2, #4]
	return 0;
    66dc:	4618      	mov	r0, r3
    66de:	e7f9      	b.n	66d4 <gatt_register+0x6c>
	handle = last->attrs[last->attr_count - 1].handle;
    66e0:	681b      	ldr	r3, [r3, #0]
    66e2:	deff      	udf	#255	; 0xff
    66e4:	20000584 	.word	0x20000584
    66e8:	00014b99 	.word	0x00014b99
    66ec:	00015f55 	.word	0x00015f55
    66f0:	00016bb4 	.word	0x00016bb4
    66f4:	00015fa4 	.word	0x00015fa4
    66f8:	00016d0e 	.word	0x00016d0e

000066fc <gatt_notify>:
{
    66fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6700:	468a      	mov	sl, r1
    6702:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6704:	211b      	movs	r1, #27
    6706:	1c9a      	adds	r2, r3, #2
{
    6708:	4680      	mov	r8, r0
    670a:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    670c:	f7ff fb08 	bl	5d20 <bt_att_create_pdu>
	if (!buf) {
    6710:	4604      	mov	r4, r0
    6712:	b968      	cbnz	r0, 6730 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    6714:	4b13      	ldr	r3, [pc, #76]	; (6764 <gatt_notify+0x68>)
    6716:	9301      	str	r3, [sp, #4]
    6718:	9300      	str	r3, [sp, #0]
    671a:	4a13      	ldr	r2, [pc, #76]	; (6768 <gatt_notify+0x6c>)
    671c:	4b13      	ldr	r3, [pc, #76]	; (676c <gatt_notify+0x70>)
    671e:	4914      	ldr	r1, [pc, #80]	; (6770 <gatt_notify+0x74>)
    6720:	4814      	ldr	r0, [pc, #80]	; (6774 <gatt_notify+0x78>)
    6722:	f7fa fc33 	bl	f8c <printk>
    6726:	f06f 000b 	mvn.w	r0, #11
}
    672a:	b002      	add	sp, #8
    672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    6730:	f100 0708 	add.w	r7, r0, #8
    6734:	2102      	movs	r1, #2
    6736:	4638      	mov	r0, r7
    6738:	f00c fb70 	bl	12e1c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    673c:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    673e:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6740:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6744:	4638      	mov	r0, r7
    6746:	f00c fb69 	bl	12e1c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    674a:	4632      	mov	r2, r6
    674c:	4649      	mov	r1, r9
    674e:	4628      	mov	r0, r5
    6750:	f7fb fa60 	bl	1c14 <memcpy>
    6754:	4640      	mov	r0, r8
    6756:	2300      	movs	r3, #0
    6758:	4622      	mov	r2, r4
    675a:	2104      	movs	r1, #4
    675c:	f7fe fcf6 	bl	514c <bt_l2cap_send_cb>
	return 0;
    6760:	2000      	movs	r0, #0
    6762:	e7e2      	b.n	672a <gatt_notify+0x2e>
    6764:	00014b99 	.word	0x00014b99
    6768:	00015fdf 	.word	0x00015fdf
    676c:	00016bf0 	.word	0x00016bf0
    6770:	00015fa4 	.word	0x00015fa4
    6774:	00016cd5 	.word	0x00016cd5

00006778 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    677c:	694b      	ldr	r3, [r1, #20]
{
    677e:	b087      	sub	sp, #28
    6780:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    6782:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6784:	6818      	ldr	r0, [r3, #0]
    6786:	2300      	movs	r3, #0
{
    6788:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    678a:	f88d 3014 	strb.w	r3, [sp, #20]
    678e:	a905      	add	r1, sp, #20
    6790:	f642 0303 	movw	r3, #10243	; 0x2803
    6794:	f8ad 3016 	strh.w	r3, [sp, #22]
    6798:	f7fb fbba 	bl	1f10 <bt_uuid_cmp>
    679c:	b930      	cbnz	r0, 67ac <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    679e:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    67a0:	68db      	ldr	r3, [r3, #12]
    67a2:	791b      	ldrb	r3, [r3, #4]
    67a4:	069b      	lsls	r3, r3, #26
    67a6:	d544      	bpl.n	6832 <gatt_indicate+0xba>
			return -EINVAL;
		}

		value_handle += 1;
    67a8:	3501      	adds	r5, #1
    67aa:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    67ac:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    67ae:	211d      	movs	r1, #29
    67b0:	3202      	adds	r2, #2
    67b2:	4648      	mov	r0, r9
    67b4:	f7ff fab4 	bl	5d20 <bt_att_create_pdu>
	if (!buf) {
    67b8:	4606      	mov	r6, r0
    67ba:	b970      	cbnz	r0, 67da <gatt_indicate+0x62>
		BT_WARN("No buffer available to send indication");
    67bc:	4b1e      	ldr	r3, [pc, #120]	; (6838 <gatt_indicate+0xc0>)
    67be:	9301      	str	r3, [sp, #4]
    67c0:	9300      	str	r3, [sp, #0]
    67c2:	4a1e      	ldr	r2, [pc, #120]	; (683c <gatt_indicate+0xc4>)
    67c4:	4b1e      	ldr	r3, [pc, #120]	; (6840 <gatt_indicate+0xc8>)
    67c6:	491f      	ldr	r1, [pc, #124]	; (6844 <gatt_indicate+0xcc>)
    67c8:	481f      	ldr	r0, [pc, #124]	; (6848 <gatt_indicate+0xd0>)
    67ca:	f7fa fbdf 	bl	f8c <printk>
		return -ENOMEM;
    67ce:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    67d2:	4620      	mov	r0, r4
    67d4:	b007      	add	sp, #28
    67d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    67da:	f100 0708 	add.w	r7, r0, #8
    67de:	2102      	movs	r1, #2
    67e0:	4638      	mov	r0, r7
    67e2:	f00c fb1b 	bl	12e1c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    67e6:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    67e8:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    67ea:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    67ee:	4638      	mov	r0, r7
    67f0:	f00c fb14 	bl	12e1c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    67f4:	8c22      	ldrh	r2, [r4, #32]
    67f6:	69e1      	ldr	r1, [r4, #28]
    67f8:	4640      	mov	r0, r8
    67fa:	f7fb fa0b 	bl	1c14 <memcpy>
		req->func = func;
    67fe:	4b13      	ldr	r3, [pc, #76]	; (684c <gatt_indicate+0xd4>)
    6800:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6802:	2300      	movs	r3, #0
		req->buf = buf;
    6804:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    6806:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    6808:	4621      	mov	r1, r4
    680a:	4648      	mov	r0, r9
    680c:	f7ff fee2 	bl	65d4 <bt_att_req_send>
	if (err) {
    6810:	4604      	mov	r4, r0
    6812:	2800      	cmp	r0, #0
    6814:	d0dd      	beq.n	67d2 <gatt_indicate+0x5a>
		BT_ERR("Error sending ATT PDU: %d", err);
    6816:	4b08      	ldr	r3, [pc, #32]	; (6838 <gatt_indicate+0xc0>)
    6818:	9302      	str	r3, [sp, #8]
    681a:	e88d 0018 	stmia.w	sp, {r3, r4}
    681e:	4a0c      	ldr	r2, [pc, #48]	; (6850 <gatt_indicate+0xd8>)
    6820:	4b0c      	ldr	r3, [pc, #48]	; (6854 <gatt_indicate+0xdc>)
    6822:	4908      	ldr	r1, [pc, #32]	; (6844 <gatt_indicate+0xcc>)
    6824:	480c      	ldr	r0, [pc, #48]	; (6858 <gatt_indicate+0xe0>)
    6826:	f7fa fbb1 	bl	f8c <printk>
		net_buf_unref(buf);
    682a:	4630      	mov	r0, r6
    682c:	f00c fac4 	bl	12db8 <net_buf_unref>
    6830:	e7cf      	b.n	67d2 <gatt_indicate+0x5a>
			return -EINVAL;
    6832:	f06f 0415 	mvn.w	r4, #21
    6836:	e7cc      	b.n	67d2 <gatt_indicate+0x5a>
    6838:	00014b99 	.word	0x00014b99
    683c:	00015fdf 	.word	0x00015fdf
    6840:	00016c06 	.word	0x00016c06
    6844:	00015fa4 	.word	0x00015fa4
    6848:	00016c74 	.word	0x00016c74
    684c:	00006659 	.word	0x00006659
    6850:	00015f55 	.word	0x00015f55
    6854:	00016bfc 	.word	0x00016bfc
    6858:	00016cab 	.word	0x00016cab

0000685c <sc_indicate.constprop.15>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    685c:	b510      	push	{r4, lr}
    685e:	4b17      	ldr	r3, [pc, #92]	; (68bc <sc_indicate.constprop.15+0x60>)
    6860:	f3bf 8f5b 	dmb	ish
    6864:	f103 0250 	add.w	r2, r3, #80	; 0x50
    6868:	e852 4f00 	ldrex	r4, [r2]
    686c:	f044 0e01 	orr.w	lr, r4, #1
    6870:	e842 ec00 	strex	ip, lr, [r2]
    6874:	f1bc 0f00 	cmp.w	ip, #0
    6878:	d1f6      	bne.n	6868 <sc_indicate.constprop.15+0xc>
    687a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    687e:	07e2      	lsls	r2, r4, #31
    6880:	d402      	bmi.n	6888 <sc_indicate.constprop.15+0x2c>
		sc->start = start;
    6882:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6884:	84d9      	strh	r1, [r3, #38]	; 0x26
    6886:	e00a      	b.n	689e <sc_indicate.constprop.15+0x42>
	if (new_start >= *start && new_end <= *end) {
    6888:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    688a:	4282      	cmp	r2, r0
    688c:	d803      	bhi.n	6896 <sc_indicate.constprop.15+0x3a>
    688e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6890:	428a      	cmp	r2, r1
    6892:	d301      	bcc.n	6898 <sc_indicate.constprop.15+0x3c>
    6894:	bd10      	pop	{r4, pc}
		*start = new_start;
    6896:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    6898:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    689a:	428a      	cmp	r2, r1
    689c:	d3f2      	bcc.n	6884 <sc_indicate.constprop.15+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    689e:	f3bf 8f5b 	dmb	ish
    68a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    68a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    68a8:	079b      	lsls	r3, r3, #30
    68aa:	d406      	bmi.n	68ba <sc_indicate.constprop.15+0x5e>
    68ac:	220a      	movs	r2, #10
    68ae:	4904      	ldr	r1, [pc, #16]	; (68c0 <sc_indicate.constprop.15+0x64>)
    68b0:	4804      	ldr	r0, [pc, #16]	; (68c4 <sc_indicate.constprop.15+0x68>)
}
    68b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68b6:	f00d bf13 	b.w	146e0 <k_delayed_work_submit_to_queue>
    68ba:	bd10      	pop	{r4, pc}
    68bc:	2000058c 	.word	0x2000058c
    68c0:	200005b4 	.word	0x200005b4
    68c4:	20001990 	.word	0x20001990

000068c8 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    68c8:	6882      	ldr	r2, [r0, #8]
    68ca:	4b19      	ldr	r3, [pc, #100]	; (6930 <connected_cb+0x68>)
    68cc:	429a      	cmp	r2, r3
{
    68ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d2:	4607      	mov	r7, r0
    68d4:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    68d6:	d125      	bne.n	6924 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    68d8:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    68da:	2600      	movs	r6, #0
    68dc:	686b      	ldr	r3, [r5, #4]
    68de:	429e      	cmp	r6, r3
    68e0:	d220      	bcs.n	6924 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    68e2:	6829      	ldr	r1, [r5, #0]
    68e4:	ea4f 1806 	mov.w	r8, r6, lsl #4
    68e8:	4441      	add	r1, r8
    68ea:	4620      	mov	r0, r4
    68ec:	f7fe f86a 	bl	49c4 <bt_conn_addr_le_cmp>
    68f0:	b9d8      	cbnz	r0, 692a <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    68f2:	682b      	ldr	r3, [r5, #0]
    68f4:	4443      	add	r3, r8
    68f6:	891b      	ldrh	r3, [r3, #8]
    68f8:	b1bb      	cbz	r3, 692a <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    68fa:	4629      	mov	r1, r5
    68fc:	4638      	mov	r0, r7
    68fe:	f7ff fe92 	bl	6626 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    6902:	682c      	ldr	r4, [r5, #0]
    6904:	4b0b      	ldr	r3, [pc, #44]	; (6934 <connected_cb+0x6c>)
    6906:	429c      	cmp	r4, r3
    6908:	d10c      	bne.n	6924 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    690a:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    690c:	89a0      	ldrh	r0, [r4, #12]
    690e:	89e1      	ldrh	r1, [r4, #14]
    6910:	b900      	cbnz	r0, 6914 <connected_cb+0x4c>
    6912:	b139      	cbz	r1, 6924 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    6914:	f7ff ffa2 	bl	685c <sc_indicate.constprop.15>
	memset(cfg->data, 0, sizeof(cfg->data));
    6918:	2204      	movs	r2, #4
    691a:	2100      	movs	r1, #0
    691c:	f104 000c 	add.w	r0, r4, #12
    6920:	f7fb f9a4 	bl	1c6c <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    6924:	2001      	movs	r0, #1
    6926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    692a:	3601      	adds	r6, #1
    692c:	e7d6      	b.n	68dc <connected_cb+0x14>
    692e:	bf00      	nop
    6930:	00006b55 	.word	0x00006b55
    6934:	200005e0 	.word	0x200005e0

00006938 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6938:	490d      	ldr	r1, [pc, #52]	; (6970 <sc_indicate_rsp+0x38>)
    693a:	f3bf 8f5b 	dmb	ish
    693e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    6942:	e853 2f00 	ldrex	r2, [r3]
    6946:	f022 0202 	bic.w	r2, r2, #2
    694a:	e843 2000 	strex	r0, r2, [r3]
    694e:	2800      	cmp	r0, #0
    6950:	d1f7      	bne.n	6942 <sc_indicate_rsp+0xa>
    6952:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6956:	f3bf 8f5b 	dmb	ish
    695a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    695c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6960:	07db      	lsls	r3, r3, #31
    6962:	d504      	bpl.n	696e <sc_indicate_rsp+0x36>
    6964:	2200      	movs	r2, #0
    6966:	3128      	adds	r1, #40	; 0x28
    6968:	4802      	ldr	r0, [pc, #8]	; (6974 <sc_indicate_rsp+0x3c>)
    696a:	f00d beb9 	b.w	146e0 <k_delayed_work_submit_to_queue>
    696e:	4770      	bx	lr
    6970:	2000058c 	.word	0x2000058c
    6974:	20001990 	.word	0x20001990

00006978 <read_appearance>:
{
    6978:	b513      	push	{r0, r1, r4, lr}
    697a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    697e:	4610      	mov	r0, r2
	if (offset > value_len) {
    6980:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6982:	f04f 0200 	mov.w	r2, #0
    6986:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    698a:	d80d      	bhi.n	69a8 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    698c:	f1c1 0402 	rsb	r4, r1, #2
    6990:	429c      	cmp	r4, r3
    6992:	bfa8      	it	ge
    6994:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6996:	f10d 0306 	add.w	r3, sp, #6
    699a:	4622      	mov	r2, r4
    699c:	4419      	add	r1, r3
    699e:	f7fb f939 	bl	1c14 <memcpy>
}
    69a2:	4620      	mov	r0, r4
    69a4:	b002      	add	sp, #8
    69a6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    69a8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    69ac:	e7f9      	b.n	69a2 <read_appearance+0x2a>
	...

000069b0 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    69b0:	6882      	ldr	r2, [r0, #8]
    69b2:	4b27      	ldr	r3, [pc, #156]	; (6a50 <disconnected_cb+0xa0>)
    69b4:	429a      	cmp	r2, r3
{
    69b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    69ba:	4680      	mov	r8, r0
    69bc:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    69be:	d127      	bne.n	6a10 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    69c0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    69c2:	8923      	ldrh	r3, [r4, #8]
    69c4:	b323      	cbz	r3, 6a10 <disconnected_cb+0x60>
    69c6:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    69c8:	f101 0a44 	add.w	sl, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    69cc:	6863      	ldr	r3, [r4, #4]
    69ce:	429e      	cmp	r6, r3
    69d0:	d30b      	bcc.n	69ea <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    69d2:	2202      	movs	r2, #2
    69d4:	2100      	movs	r1, #0
    69d6:	f104 0008 	add.w	r0, r4, #8
    69da:	f7fb f947 	bl	1c6c <memset>
	if (ccc->cfg_changed) {
    69de:	68e3      	ldr	r3, [r4, #12]
    69e0:	b1b3      	cbz	r3, 6a10 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    69e2:	8921      	ldrh	r1, [r4, #8]
    69e4:	4640      	mov	r0, r8
    69e6:	4798      	blx	r3
    69e8:	e012      	b.n	6a10 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    69ea:	6821      	ldr	r1, [r4, #0]
    69ec:	0135      	lsls	r5, r6, #4
    69ee:	4429      	add	r1, r5
    69f0:	890b      	ldrh	r3, [r1, #8]
    69f2:	b19b      	cbz	r3, 6a1c <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    69f4:	4648      	mov	r0, r9
    69f6:	f7fd ffe5 	bl	49c4 <bt_conn_addr_le_cmp>
    69fa:	b188      	cbz	r0, 6a20 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    69fc:	6820      	ldr	r0, [r4, #0]
    69fe:	4428      	add	r0, r5
    6a00:	f7fd fff8 	bl	49f4 <bt_conn_lookup_addr_le>
			if (tmp) {
    6a04:	b150      	cbz	r0, 6a1c <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    6a06:	7a43      	ldrb	r3, [r0, #9]
    6a08:	2b03      	cmp	r3, #3
    6a0a:	d105      	bne.n	6a18 <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    6a0c:	f7fe f82e 	bl	4a6c <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6a10:	2001      	movs	r0, #1
    6a12:	b002      	add	sp, #8
    6a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    6a18:	f7fe f828 	bl	4a6c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    6a1c:	3601      	adds	r6, #1
    6a1e:	e7d5      	b.n	69cc <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6a20:	4650      	mov	r0, sl
    6a22:	f7fd fb95 	bl	4150 <bt_addr_le_is_bonded>
    6a26:	4607      	mov	r7, r0
    6a28:	6820      	ldr	r0, [r4, #0]
    6a2a:	b95f      	cbnz	r7, 6a44 <disconnected_cb+0x94>
    6a2c:	4428      	add	r0, r5
    6a2e:	2207      	movs	r2, #7
    6a30:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    6a32:	9700      	str	r7, [sp, #0]
    6a34:	f8cd 7003 	str.w	r7, [sp, #3]
    6a38:	f7fb f8ec 	bl	1c14 <memcpy>
				ccc->cfg[i].value = 0;
    6a3c:	6823      	ldr	r3, [r4, #0]
    6a3e:	441d      	add	r5, r3
    6a40:	812f      	strh	r7, [r5, #8]
    6a42:	e7eb      	b.n	6a1c <disconnected_cb+0x6c>
    6a44:	2207      	movs	r2, #7
    6a46:	4651      	mov	r1, sl
    6a48:	4428      	add	r0, r5
    6a4a:	f7fb f8e3 	bl	1c14 <memcpy>
    6a4e:	e7e5      	b.n	6a1c <disconnected_cb+0x6c>
    6a50:	00006b55 	.word	0x00006b55

00006a54 <read_name>:
{
    6a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    6a58:	4e0d      	ldr	r6, [pc, #52]	; (6a90 <read_name+0x3c>)
{
    6a5a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6a5e:	4630      	mov	r0, r6
{
    6a60:	4698      	mov	r8, r3
    6a62:	4617      	mov	r7, r2
				 strlen(gap_name));
    6a64:	f7fb f8ac 	bl	1bc0 <strlen>
	if (offset > value_len) {
    6a68:	b283      	uxth	r3, r0
    6a6a:	42ab      	cmp	r3, r5
    6a6c:	d30d      	bcc.n	6a8a <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6a6e:	1b5c      	subs	r4, r3, r5
    6a70:	4544      	cmp	r4, r8
    6a72:	4623      	mov	r3, r4
    6a74:	bfa8      	it	ge
    6a76:	4643      	movge	r3, r8
    6a78:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6a7a:	4622      	mov	r2, r4
    6a7c:	1971      	adds	r1, r6, r5
    6a7e:	4638      	mov	r0, r7
    6a80:	f7fb f8c8 	bl	1c14 <memcpy>
}
    6a84:	4620      	mov	r0, r4
    6a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6a8a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6a8e:	e7f9      	b.n	6a84 <read_name+0x30>
    6a90:	00016d3f 	.word	0x00016d3f

00006a94 <bt_gatt_attr_read_ccc>:
{
    6a94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6a98:	68ce      	ldr	r6, [r1, #12]
{
    6a9a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6a9e:	4604      	mov	r4, r0
    6aa0:	4690      	mov	r8, r2
    6aa2:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6aa4:	2500      	movs	r5, #0
    6aa6:	6873      	ldr	r3, [r6, #4]
    6aa8:	429d      	cmp	r5, r3
    6aaa:	d20e      	bcs.n	6aca <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6aac:	6831      	ldr	r1, [r6, #0]
    6aae:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6ab2:	4449      	add	r1, r9
    6ab4:	4620      	mov	r0, r4
    6ab6:	f7fd ff85 	bl	49c4 <bt_conn_addr_le_cmp>
    6aba:	b108      	cbz	r0, 6ac0 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6abc:	3501      	adds	r5, #1
    6abe:	e7f2      	b.n	6aa6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6ac0:	6832      	ldr	r2, [r6, #0]
    6ac2:	444a      	add	r2, r9
    6ac4:	8913      	ldrh	r3, [r2, #8]
    6ac6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    6aca:	6873      	ldr	r3, [r6, #4]
    6acc:	429d      	cmp	r5, r3
		value = 0x0000;
    6ace:	bf04      	itt	eq
    6ad0:	2300      	moveq	r3, #0
    6ad2:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    6ad6:	2f02      	cmp	r7, #2
    6ad8:	d80f      	bhi.n	6afa <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    6ada:	f1c7 0402 	rsb	r4, r7, #2
    6ade:	4554      	cmp	r4, sl
    6ae0:	bfa8      	it	ge
    6ae2:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6ae4:	f10d 0306 	add.w	r3, sp, #6
    6ae8:	4622      	mov	r2, r4
    6aea:	19d9      	adds	r1, r3, r7
    6aec:	4640      	mov	r0, r8
    6aee:	f7fb f891 	bl	1c14 <memcpy>
}
    6af2:	4620      	mov	r0, r4
    6af4:	b002      	add	sp, #8
    6af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6afa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6afe:	e7f8      	b.n	6af2 <bt_gatt_attr_read_ccc+0x5e>

00006b00 <bt_gatt_attr_read_service>:
{
    6b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    6b02:	68c9      	ldr	r1, [r1, #12]
{
    6b04:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    6b08:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    6b0a:	780a      	ldrb	r2, [r1, #0]
    6b0c:	b992      	cbnz	r2, 6b34 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6b0e:	884a      	ldrh	r2, [r1, #2]
    6b10:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    6b14:	2d02      	cmp	r5, #2
    6b16:	d819      	bhi.n	6b4c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6b18:	f1c5 0402 	rsb	r4, r5, #2
    6b1c:	429c      	cmp	r4, r3
    6b1e:	bfa8      	it	ge
    6b20:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6b22:	f10d 0306 	add.w	r3, sp, #6
    6b26:	4622      	mov	r2, r4
    6b28:	1959      	adds	r1, r3, r5
    6b2a:	f7fb f873 	bl	1c14 <memcpy>
}
    6b2e:	4620      	mov	r0, r4
    6b30:	b003      	add	sp, #12
    6b32:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    6b34:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    6b36:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    6b3a:	d807      	bhi.n	6b4c <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    6b3c:	f1c5 0410 	rsb	r4, r5, #16
    6b40:	429c      	cmp	r4, r3
    6b42:	bfa8      	it	ge
    6b44:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    6b46:	4622      	mov	r2, r4
    6b48:	4429      	add	r1, r5
    6b4a:	e7ee      	b.n	6b2a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b4c:	f06f 0406 	mvn.w	r4, #6
    6b50:	e7ed      	b.n	6b2e <bt_gatt_attr_read_service+0x2e>
	...

00006b54 <bt_gatt_attr_write_ccc>:
{
    6b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b58:	b087      	sub	sp, #28
    6b5a:	4688      	mov	r8, r1
    6b5c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6b60:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    6b64:	2902      	cmp	r1, #2
{
    6b66:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    6b68:	d85f      	bhi.n	6c2a <bt_gatt_attr_write_ccc+0xd6>
	if (offset + len > sizeof(u16_t)) {
    6b6a:	4419      	add	r1, r3
    6b6c:	2902      	cmp	r1, #2
    6b6e:	461f      	mov	r7, r3
    6b70:	dc5e      	bgt.n	6c30 <bt_gatt_attr_write_ccc+0xdc>
	return ((u16_t)src[1] << 8) | src[0];
    6b72:	7853      	ldrb	r3, [r2, #1]
    6b74:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    6b76:	2400      	movs	r4, #0
    6b78:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    6b7c:	686b      	ldr	r3, [r5, #4]
    6b7e:	429c      	cmp	r4, r3
    6b80:	d206      	bcs.n	6b90 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6b82:	6829      	ldr	r1, [r5, #0]
    6b84:	4648      	mov	r0, r9
    6b86:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    6b8a:	f7fd ff1b 	bl	49c4 <bt_conn_addr_le_cmp>
    6b8e:	b9b8      	cbnz	r0, 6bc0 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6b90:	686b      	ldr	r3, [r5, #4]
    6b92:	429c      	cmp	r4, r3
    6b94:	d12f      	bne.n	6bf6 <bt_gatt_attr_write_ccc+0xa2>
		if (!value) {
    6b96:	b356      	cbz	r6, 6bee <bt_gatt_attr_write_ccc+0x9a>
    6b98:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6b9a:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    6b9c:	686b      	ldr	r3, [r5, #4]
    6b9e:	429c      	cmp	r4, r3
    6ba0:	d217      	bcs.n	6bd2 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6ba2:	6828      	ldr	r0, [r5, #0]
    6ba4:	f8cd a008 	str.w	sl, [sp, #8]
    6ba8:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6bac:	2207      	movs	r2, #7
    6bae:	a902      	add	r1, sp, #8
    6bb0:	4458      	add	r0, fp
    6bb2:	f8cd a00b 	str.w	sl, [sp, #11]
    6bb6:	f7fb f818 	bl	1bea <memcmp>
    6bba:	b118      	cbz	r0, 6bc4 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6bbc:	3401      	adds	r4, #1
    6bbe:	e7ed      	b.n	6b9c <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6bc0:	3401      	adds	r4, #1
    6bc2:	e7db      	b.n	6b7c <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6bc4:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    6bc6:	2207      	movs	r2, #7
    6bc8:	f109 0144 	add.w	r1, r9, #68	; 0x44
    6bcc:	4458      	add	r0, fp
    6bce:	f7fb f821 	bl	1c14 <memcpy>
		if (i == ccc->cfg_len) {
    6bd2:	686b      	ldr	r3, [r5, #4]
    6bd4:	429c      	cmp	r4, r3
    6bd6:	d10e      	bne.n	6bf6 <bt_gatt_attr_write_ccc+0xa2>
			BT_WARN("No space to store CCC cfg");
    6bd8:	4b17      	ldr	r3, [pc, #92]	; (6c38 <bt_gatt_attr_write_ccc+0xe4>)
    6bda:	9301      	str	r3, [sp, #4]
    6bdc:	9300      	str	r3, [sp, #0]
    6bde:	4a17      	ldr	r2, [pc, #92]	; (6c3c <bt_gatt_attr_write_ccc+0xe8>)
    6be0:	4b17      	ldr	r3, [pc, #92]	; (6c40 <bt_gatt_attr_write_ccc+0xec>)
    6be2:	4918      	ldr	r1, [pc, #96]	; (6c44 <bt_gatt_attr_write_ccc+0xf0>)
    6be4:	4818      	ldr	r0, [pc, #96]	; (6c48 <bt_gatt_attr_write_ccc+0xf4>)
    6be6:	f7fa f9d1 	bl	f8c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6bea:	f06f 0710 	mvn.w	r7, #16
}
    6bee:	4638      	mov	r0, r7
    6bf0:	b007      	add	sp, #28
    6bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    6bf6:	682b      	ldr	r3, [r5, #0]
    6bf8:	0124      	lsls	r4, r4, #4
    6bfa:	4423      	add	r3, r4
    6bfc:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6bfe:	892b      	ldrh	r3, [r5, #8]
    6c00:	42b3      	cmp	r3, r6
    6c02:	d003      	beq.n	6c0c <bt_gatt_attr_write_ccc+0xb8>
		gatt_ccc_changed(attr, ccc);
    6c04:	4629      	mov	r1, r5
    6c06:	4640      	mov	r0, r8
    6c08:	f7ff fd0d 	bl	6626 <gatt_ccc_changed>
	if (!value) {
    6c0c:	2e00      	cmp	r6, #0
    6c0e:	d1ee      	bne.n	6bee <bt_gatt_attr_write_ccc+0x9a>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    6c10:	6828      	ldr	r0, [r5, #0]
    6c12:	9604      	str	r6, [sp, #16]
    6c14:	4420      	add	r0, r4
    6c16:	2207      	movs	r2, #7
    6c18:	a904      	add	r1, sp, #16
    6c1a:	f8cd 6013 	str.w	r6, [sp, #19]
    6c1e:	f7fa fff9 	bl	1c14 <memcpy>
		ccc->cfg[i].value = 0;
    6c22:	682b      	ldr	r3, [r5, #0]
    6c24:	441c      	add	r4, r3
    6c26:	8126      	strh	r6, [r4, #8]
    6c28:	e7e1      	b.n	6bee <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6c2a:	f06f 0706 	mvn.w	r7, #6
    6c2e:	e7de      	b.n	6bee <bt_gatt_attr_write_ccc+0x9a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6c30:	f06f 070c 	mvn.w	r7, #12
    6c34:	e7db      	b.n	6bee <bt_gatt_attr_write_ccc+0x9a>
    6c36:	bf00      	nop
    6c38:	00014b99 	.word	0x00014b99
    6c3c:	00015fdf 	.word	0x00015fdf
    6c40:	00016bd9 	.word	0x00016bd9
    6c44:	00015fa4 	.word	0x00015fa4
    6c48:	00016c4a 	.word	0x00016c4a

00006c4c <notify_cb>:
{
    6c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6c50:	f642 1302 	movw	r3, #10498	; 0x2902
{
    6c54:	4605      	mov	r5, r0
    6c56:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6c58:	2400      	movs	r4, #0
    6c5a:	4669      	mov	r1, sp
    6c5c:	6800      	ldr	r0, [r0, #0]
    6c5e:	f88d 4000 	strb.w	r4, [sp]
    6c62:	f8ad 3002 	strh.w	r3, [sp, #2]
    6c66:	f7fb f953 	bl	1f10 <bt_uuid_cmp>
    6c6a:	b178      	cbz	r0, 6c8c <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6c6c:	f642 0303 	movw	r3, #10243	; 0x2803
    6c70:	6828      	ldr	r0, [r5, #0]
    6c72:	f88d 4004 	strb.w	r4, [sp, #4]
    6c76:	a901      	add	r1, sp, #4
    6c78:	f8ad 3006 	strh.w	r3, [sp, #6]
    6c7c:	f7fb f948 	bl	1f10 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6c80:	1b00      	subs	r0, r0, r4
    6c82:	bf18      	it	ne
    6c84:	2001      	movne	r0, #1
}
    6c86:	b003      	add	sp, #12
    6c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6c8c:	68aa      	ldr	r2, [r5, #8]
    6c8e:	4b2b      	ldr	r3, [pc, #172]	; (6d3c <notify_cb+0xf0>)
    6c90:	429a      	cmp	r2, r3
    6c92:	d001      	beq.n	6c98 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6c94:	2001      	movs	r0, #1
    6c96:	e7f6      	b.n	6c86 <notify_cb+0x3a>
	ccc = attr->user_data;
    6c98:	68ef      	ldr	r7, [r5, #12]
    6c9a:	4d29      	ldr	r5, [pc, #164]	; (6d40 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    6c9c:	4604      	mov	r4, r0
    6c9e:	46a8      	mov	r8, r5
    6ca0:	4681      	mov	r9, r0
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	429c      	cmp	r4, r3
    6ca6:	d2f5      	bcs.n	6c94 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6ca8:	6838      	ldr	r0, [r7, #0]
    6caa:	88b3      	ldrh	r3, [r6, #4]
    6cac:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6cb0:	8902      	ldrh	r2, [r0, #8]
    6cb2:	429a      	cmp	r2, r3
    6cb4:	d114      	bne.n	6ce0 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6cb6:	f7fd fe9d 	bl	49f4 <bt_conn_lookup_addr_le>
		if (!conn) {
    6cba:	4683      	mov	fp, r0
    6cbc:	b9f8      	cbnz	r0, 6cfe <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6cbe:	683b      	ldr	r3, [r7, #0]
    6cc0:	4543      	cmp	r3, r8
    6cc2:	d10d      	bne.n	6ce0 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6cc4:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    6cc6:	a801      	add	r0, sp, #4
    6cc8:	8c1a      	ldrh	r2, [r3, #32]
    6cca:	69d9      	ldr	r1, [r3, #28]
    6ccc:	f7fa ffa2 	bl	1c14 <memcpy>
	if (!stored->start && !stored->end) {
    6cd0:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6cd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6cd6:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6cd8:	b928      	cbnz	r0, 6ce6 <notify_cb+0x9a>
    6cda:	b942      	cbnz	r2, 6cee <notify_cb+0xa2>
		*stored = data;
    6cdc:	9801      	ldr	r0, [sp, #4]
    6cde:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6ce0:	3401      	adds	r4, #1
    6ce2:	3510      	adds	r5, #16
    6ce4:	e7dd      	b.n	6ca2 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    6ce6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6cea:	4281      	cmp	r1, r0
    6cec:	d305      	bcc.n	6cfa <notify_cb+0xae>
    6cee:	429a      	cmp	r2, r3
    6cf0:	d2f6      	bcs.n	6ce0 <notify_cb+0x94>
	if (*end < new_end) {
    6cf2:	429a      	cmp	r2, r3
    6cf4:	d2f4      	bcs.n	6ce0 <notify_cb+0x94>
		*end = new_end;
    6cf6:	81eb      	strh	r3, [r5, #14]
    6cf8:	e7f2      	b.n	6ce0 <notify_cb+0x94>
		*start = new_start;
    6cfa:	81a9      	strh	r1, [r5, #12]
    6cfc:	e7f9      	b.n	6cf2 <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6cfe:	7a43      	ldrb	r3, [r0, #9]
    6d00:	2b03      	cmp	r3, #3
    6d02:	d002      	beq.n	6d0a <notify_cb+0xbe>
			bt_conn_unref(conn);
    6d04:	f7fd feb2 	bl	4a6c <bt_conn_unref>
    6d08:	e7ea      	b.n	6ce0 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6d0a:	88b3      	ldrh	r3, [r6, #4]
    6d0c:	2b02      	cmp	r3, #2
    6d0e:	d10c      	bne.n	6d2a <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6d10:	6971      	ldr	r1, [r6, #20]
    6d12:	f7ff fd31 	bl	6778 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    6d16:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6d18:	4658      	mov	r0, fp
    6d1a:	f7fd fea7 	bl	4a6c <bt_conn_unref>
		if (err < 0) {
    6d1e:	f1ba 0f00 	cmp.w	sl, #0
    6d22:	db09      	blt.n	6d38 <notify_cb+0xec>
		data->err = 0;
    6d24:	f8c6 9000 	str.w	r9, [r6]
    6d28:	e7da      	b.n	6ce0 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6d2a:	68b1      	ldr	r1, [r6, #8]
    6d2c:	8a33      	ldrh	r3, [r6, #16]
    6d2e:	68f2      	ldr	r2, [r6, #12]
    6d30:	8a09      	ldrh	r1, [r1, #16]
    6d32:	f7ff fce3 	bl	66fc <gatt_notify>
    6d36:	e7ee      	b.n	6d16 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6d38:	2000      	movs	r0, #0
    6d3a:	e7a4      	b.n	6c86 <notify_cb+0x3a>
    6d3c:	00006b55 	.word	0x00006b55
    6d40:	200005e0 	.word	0x200005e0

00006d44 <bt_gatt_init>:
{
    6d44:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6d46:	4806      	ldr	r0, [pc, #24]	; (6d60 <bt_gatt_init+0x1c>)
    6d48:	f7ff fc8e 	bl	6668 <gatt_register>
	gatt_register(&gatt_svc);
    6d4c:	4805      	ldr	r0, [pc, #20]	; (6d64 <bt_gatt_init+0x20>)
    6d4e:	f7ff fc8b 	bl	6668 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6d52:	4905      	ldr	r1, [pc, #20]	; (6d68 <bt_gatt_init+0x24>)
    6d54:	4805      	ldr	r0, [pc, #20]	; (6d6c <bt_gatt_init+0x28>)
}
    6d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6d5a:	f00d bc4d 	b.w	145f8 <k_delayed_work_init>
    6d5e:	bf00      	nop
    6d60:	20003ca4 	.word	0x20003ca4
    6d64:	20003d00 	.word	0x20003d00
    6d68:	00006df1 	.word	0x00006df1
    6d6c:	200005b4 	.word	0x200005b4

00006d70 <bt_gatt_foreach_attr>:
{
    6d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d74:	4699      	mov	r9, r3
    6d76:	4b12      	ldr	r3, [pc, #72]	; (6dc0 <bt_gatt_foreach_attr+0x50>)
    6d78:	681c      	ldr	r4, [r3, #0]
    6d7a:	4606      	mov	r6, r0
    6d7c:	460f      	mov	r7, r1
    6d7e:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6d80:	b1dc      	cbz	r4, 6dba <bt_gatt_foreach_attr+0x4a>
    6d82:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6d84:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6d88:	b1bc      	cbz	r4, 6dba <bt_gatt_foreach_attr+0x4a>
    6d8a:	2500      	movs	r5, #0
    6d8c:	e006      	b.n	6d9c <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6d8e:	6820      	ldr	r0, [r4, #0]
    6d90:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6d94:	8a03      	ldrh	r3, [r0, #16]
    6d96:	42b3      	cmp	r3, r6
    6d98:	d207      	bcs.n	6daa <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    6d9a:	3501      	adds	r5, #1
    6d9c:	6863      	ldr	r3, [r4, #4]
    6d9e:	42ab      	cmp	r3, r5
    6da0:	d8f5      	bhi.n	6d8e <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6da2:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6da4:	b14c      	cbz	r4, 6dba <bt_gatt_foreach_attr+0x4a>
    6da6:	3c08      	subs	r4, #8
    6da8:	e7ee      	b.n	6d88 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6daa:	42bb      	cmp	r3, r7
    6dac:	d8f5      	bhi.n	6d9a <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6dae:	4649      	mov	r1, r9
    6db0:	47c0      	blx	r8
    6db2:	2800      	cmp	r0, #0
    6db4:	d1f1      	bne.n	6d9a <bt_gatt_foreach_attr+0x2a>
    6db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6dbe:	bf00      	nop
    6dc0:	20000584 	.word	0x20000584

00006dc4 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    6dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6dc6:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6dca:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6dcc:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6dce:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6dd0:	2302      	movs	r3, #2
    6dd2:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6dd6:	4a05      	ldr	r2, [pc, #20]	; (6dec <bt_gatt_indicate.part.10+0x28>)
    6dd8:	8a00      	ldrh	r0, [r0, #16]
    6dda:	466b      	mov	r3, sp
    6ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6de0:	f7ff ffc6 	bl	6d70 <bt_gatt_foreach_attr>
}
    6de4:	9800      	ldr	r0, [sp, #0]
    6de6:	b007      	add	sp, #28
    6de8:	f85d fb04 	ldr.w	pc, [sp], #4
    6dec:	00006c4d 	.word	0x00006c4d

00006df0 <sc_process>:
{
    6df0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6df2:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6df6:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6dfa:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6dfc:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6e00:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6e04:	3828      	subs	r0, #40	; 0x28
    6e06:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e0a:	f3bf 8f5b 	dmb	ish
    6e0e:	e854 2f00 	ldrex	r2, [r4]
    6e12:	f022 0201 	bic.w	r2, r2, #1
    6e16:	e844 2100 	strex	r1, r2, [r4]
    6e1a:	2900      	cmp	r1, #0
    6e1c:	d1f7      	bne.n	6e0e <sc_process+0x1e>
    6e1e:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6e22:	2200      	movs	r2, #0
    6e24:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6e28:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6e2c:	4a0e      	ldr	r2, [pc, #56]	; (6e68 <sc_process+0x78>)
    6e2e:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6e32:	4a0e      	ldr	r2, [pc, #56]	; (6e6c <sc_process+0x7c>)
    6e34:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6e38:	aa01      	add	r2, sp, #4
    6e3a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6e3e:	2204      	movs	r2, #4
    6e40:	f823 2c08 	strh.w	r2, [r3, #-8]
    6e44:	f7ff ffbe 	bl	6dc4 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6e48:	b958      	cbnz	r0, 6e62 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e4a:	f3bf 8f5b 	dmb	ish
    6e4e:	e854 3f00 	ldrex	r3, [r4]
    6e52:	f043 0302 	orr.w	r3, r3, #2
    6e56:	e844 3200 	strex	r2, r3, [r4]
    6e5a:	2a00      	cmp	r2, #0
    6e5c:	d1f7      	bne.n	6e4e <sc_process+0x5e>
    6e5e:	f3bf 8f5b 	dmb	ish
}
    6e62:	b002      	add	sp, #8
    6e64:	bd10      	pop	{r4, pc}
    6e66:	bf00      	nop
    6e68:	20003cd8 	.word	0x20003cd8
    6e6c:	00006939 	.word	0x00006939

00006e70 <bt_gatt_attr_next>:
{
    6e70:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6e72:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6e74:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6e76:	3101      	adds	r1, #1
    6e78:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6e7a:	2200      	movs	r2, #0
    6e7c:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6e80:	4608      	mov	r0, r1
    6e82:	4a03      	ldr	r2, [pc, #12]	; (6e90 <bt_gatt_attr_next+0x20>)
    6e84:	f7ff ff74 	bl	6d70 <bt_gatt_foreach_attr>
}
    6e88:	9801      	ldr	r0, [sp, #4]
    6e8a:	b003      	add	sp, #12
    6e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    6e90:	00006621 	.word	0x00006621

00006e94 <bt_gatt_attr_read_chrc>:
{
    6e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6e98:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6e9c:	b08b      	sub	sp, #44	; 0x2c
    6e9e:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6ea0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6ea2:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6ea6:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6eaa:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6eae:	4688      	mov	r8, r1
    6eb0:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6eb2:	f7ff ffdd 	bl	6e70 <bt_gatt_attr_next>
	if (!next) {
    6eb6:	4605      	mov	r5, r0
    6eb8:	bb40      	cbnz	r0, 6f0c <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6eba:	4b1c      	ldr	r3, [pc, #112]	; (6f2c <bt_gatt_attr_read_chrc+0x98>)
    6ebc:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6ec0:	9302      	str	r3, [sp, #8]
    6ec2:	9201      	str	r2, [sp, #4]
    6ec4:	9300      	str	r3, [sp, #0]
    6ec6:	4a1a      	ldr	r2, [pc, #104]	; (6f30 <bt_gatt_attr_read_chrc+0x9c>)
    6ec8:	4b1a      	ldr	r3, [pc, #104]	; (6f34 <bt_gatt_attr_read_chrc+0xa0>)
    6eca:	491b      	ldr	r1, [pc, #108]	; (6f38 <bt_gatt_attr_read_chrc+0xa4>)
    6ecc:	481b      	ldr	r0, [pc, #108]	; (6f3c <bt_gatt_attr_read_chrc+0xa8>)
    6ece:	f7fa f85d 	bl	f8c <printk>
		pdu.value_handle = 0x0000;
    6ed2:	f88d 5015 	strb.w	r5, [sp, #21]
    6ed6:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6eda:	f8d9 1000 	ldr.w	r1, [r9]
    6ede:	780b      	ldrb	r3, [r1, #0]
    6ee0:	b9c3      	cbnz	r3, 6f14 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6ee2:	884b      	ldrh	r3, [r1, #2]
    6ee4:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6ee8:	2305      	movs	r3, #5
	if (offset > value_len) {
    6eea:	42b3      	cmp	r3, r6
    6eec:	d31a      	bcc.n	6f24 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    6eee:	1b9b      	subs	r3, r3, r6
    6ef0:	42a3      	cmp	r3, r4
    6ef2:	bfa8      	it	ge
    6ef4:	4623      	movge	r3, r4
    6ef6:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6ef8:	ab05      	add	r3, sp, #20
    6efa:	4622      	mov	r2, r4
    6efc:	1999      	adds	r1, r3, r6
    6efe:	4638      	mov	r0, r7
    6f00:	f7fa fe88 	bl	1c14 <memcpy>
}
    6f04:	4620      	mov	r0, r4
    6f06:	b00b      	add	sp, #44	; 0x2c
    6f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6f0c:	8a03      	ldrh	r3, [r0, #16]
    6f0e:	f8ad 3015 	strh.w	r3, [sp, #21]
    6f12:	e7e2      	b.n	6eda <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6f14:	2210      	movs	r2, #16
    6f16:	3101      	adds	r1, #1
    6f18:	f10d 0017 	add.w	r0, sp, #23
    6f1c:	f7fa fe7a 	bl	1c14 <memcpy>
		value_len += 16;
    6f20:	2313      	movs	r3, #19
    6f22:	e7e2      	b.n	6eea <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f24:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6f28:	e7ec      	b.n	6f04 <bt_gatt_attr_read_chrc+0x70>
    6f2a:	bf00      	nop
    6f2c:	00014b99 	.word	0x00014b99
    6f30:	00015fdf 	.word	0x00015fdf
    6f34:	00016bc2 	.word	0x00016bc2
    6f38:	00015fa4 	.word	0x00015fa4
    6f3c:	00016c14 	.word	0x00016c14

00006f40 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6f40:	4603      	mov	r3, r0
    6f42:	4a03      	ldr	r2, [pc, #12]	; (6f50 <bt_gatt_connected+0x10>)
    6f44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6f48:	2001      	movs	r0, #1
    6f4a:	f7ff bf11 	b.w	6d70 <bt_gatt_foreach_attr>
    6f4e:	bf00      	nop
    6f50:	000068c9 	.word	0x000068c9

00006f54 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6f54:	4603      	mov	r3, r0
    6f56:	4a03      	ldr	r2, [pc, #12]	; (6f64 <bt_gatt_disconnected+0x10>)
    6f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6f5c:	2001      	movs	r0, #1
    6f5e:	f7ff bf07 	b.w	6d70 <bt_gatt_foreach_attr>
    6f62:	bf00      	nop
    6f64:	000069b1 	.word	0x000069b1

00006f68 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6f68:	b570      	push	{r4, r5, r6, lr}
    6f6a:	b086      	sub	sp, #24
    6f6c:	4605      	mov	r5, r0
    6f6e:	460e      	mov	r6, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    6f70:	f00d f84c 	bl	1400c <_impl_k_current_get>
	int i;
	static struct bt_l2cap_chan_ops ops = {
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);
    6f74:	4c10      	ldr	r4, [pc, #64]	; (6fb8 <bt_smp_accept+0x50>)
    6f76:	882b      	ldrh	r3, [r5, #0]
    6f78:	9303      	str	r3, [sp, #12]
    6f7a:	9001      	str	r0, [sp, #4]
    6f7c:	4b0f      	ldr	r3, [pc, #60]	; (6fbc <bt_smp_accept+0x54>)
    6f7e:	9404      	str	r4, [sp, #16]
    6f80:	9502      	str	r5, [sp, #8]
    6f82:	9400      	str	r4, [sp, #0]
    6f84:	4a0e      	ldr	r2, [pc, #56]	; (6fc0 <bt_smp_accept+0x58>)
    6f86:	490f      	ldr	r1, [pc, #60]	; (6fc4 <bt_smp_accept+0x5c>)
    6f88:	480f      	ldr	r0, [pc, #60]	; (6fc8 <bt_smp_accept+0x60>)
    6f8a:	f7f9 ffff 	bl	f8c <printk>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6f8e:	4b0f      	ldr	r3, [pc, #60]	; (6fcc <bt_smp_accept+0x64>)
    6f90:	6818      	ldr	r0, [r3, #0]
    6f92:	b920      	cbnz	r0, 6f9e <bt_smp_accept+0x36>
			continue;
		}

		smp->chan.ops = &ops;
    6f94:	4a0e      	ldr	r2, [pc, #56]	; (6fd0 <bt_smp_accept+0x68>)
    6f96:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    6f98:	6033      	str	r3, [r6, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6f9a:	b006      	add	sp, #24
    6f9c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    6f9e:	9402      	str	r4, [sp, #8]
    6fa0:	e88d 0030 	stmia.w	sp, {r4, r5}
    6fa4:	4b05      	ldr	r3, [pc, #20]	; (6fbc <bt_smp_accept+0x54>)
    6fa6:	4a0b      	ldr	r2, [pc, #44]	; (6fd4 <bt_smp_accept+0x6c>)
    6fa8:	4906      	ldr	r1, [pc, #24]	; (6fc4 <bt_smp_accept+0x5c>)
    6faa:	480b      	ldr	r0, [pc, #44]	; (6fd8 <bt_smp_accept+0x70>)
    6fac:	f7f9 ffee 	bl	f8c <printk>
	return -ENOMEM;
    6fb0:	f06f 000b 	mvn.w	r0, #11
    6fb4:	e7f1      	b.n	6f9a <bt_smp_accept+0x32>
    6fb6:	bf00      	nop
    6fb8:	00014b99 	.word	0x00014b99
    6fbc:	00016d46 	.word	0x00016d46
    6fc0:	00015f9d 	.word	0x00015f9d
    6fc4:	00015fa4 	.word	0x00015fa4
    6fc8:	00016d54 	.word	0x00016d54
    6fcc:	200005f0 	.word	0x200005f0
    6fd0:	20003d18 	.word	0x20003d18
    6fd4:	00015f55 	.word	0x00015f55
    6fd8:	00016d7b 	.word	0x00016d7b

00006fdc <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6fdc:	2100      	movs	r1, #0
{
    6fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6fe2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6fe4:	4608      	mov	r0, r1
    6fe6:	f7fe f8ae 	bl	5146 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6fea:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6fee:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6ff0:	2101      	movs	r1, #1
    6ff2:	4630      	mov	r0, r6
    6ff4:	f00b ff12 	bl	12e1c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6ff8:	2505      	movs	r5, #5
    6ffa:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6ffc:	2101      	movs	r1, #1
    6ffe:	4630      	mov	r0, r6
    7000:	f00b ff0c 	bl	12e1c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    7004:	7005      	strb	r5, [r0, #0]
    7006:	4622      	mov	r2, r4
    7008:	4638      	mov	r0, r7
    700a:	2300      	movs	r3, #0
    700c:	2106      	movs	r1, #6
}
    700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7012:	f7fe b89b 	b.w	514c <bt_l2cap_send_cb>

00007016 <bt_smp_sign_verify>:
    7016:	f06f 0022 	mvn.w	r0, #34	; 0x22
    701a:	4770      	bx	lr

0000701c <bt_smp_init>:

int bt_smp_init(void)
{
    701c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    701e:	4802      	ldr	r0, [pc, #8]	; (7028 <bt_smp_init+0xc>)
    7020:	f7fd ffd6 	bl	4fd0 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    7024:	2000      	movs	r0, #0
    7026:	bd08      	pop	{r3, pc}
    7028:	20003d0c 	.word	0x20003d0c

0000702c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    702c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    702e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7030:	1dc3      	adds	r3, r0, #7
{
    7032:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7034:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7038:	1e50      	subs	r0, r2, #1
{
    703a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    703c:	b280      	uxth	r0, r0
{
    703e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7040:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7042:	2100      	movs	r1, #0
    7044:	2204      	movs	r2, #4
    7046:	fb06 5000 	mla	r0, r6, r0, r5
    704a:	f7fa fe0f 	bl	1c6c <memset>
    704e:	3c02      	subs	r4, #2
    7050:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    7052:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7056:	42bc      	cmp	r4, r7
    7058:	d101      	bne.n	705e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    705a:	b003      	add	sp, #12
    705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    705e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    7062:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7064:	2204      	movs	r2, #4
    7066:	1b80      	subs	r0, r0, r6
    7068:	eb0d 0102 	add.w	r1, sp, r2
    706c:	4428      	add	r0, r5
    706e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    7070:	9301      	str	r3, [sp, #4]
    7072:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7074:	f7fa fdce 	bl	1c14 <memcpy>
    7078:	e7ed      	b.n	7056 <mem_init+0x2a>

0000707a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    707a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    707c:	6805      	ldr	r5, [r0, #0]
{
    707e:	4606      	mov	r6, r0
	if (*mem_head) {
    7080:	b195      	cbz	r5, 70a8 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7082:	1deb      	adds	r3, r5, #7
    7084:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7088:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    708a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    708c:	4629      	mov	r1, r5
    708e:	eb0d 0002 	add.w	r0, sp, r2
    7092:	f7fa fdbf 	bl	1c14 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7096:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    7098:	3c01      	subs	r4, #1
    709a:	b2a4      	uxth	r4, r4
		if (head) {
    709c:	b11b      	cbz	r3, 70a6 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    709e:	1dda      	adds	r2, r3, #7
    70a0:	f022 0203 	bic.w	r2, r2, #3
    70a4:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    70a6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    70a8:	4628      	mov	r0, r5
    70aa:	b002      	add	sp, #8
    70ac:	bd70      	pop	{r4, r5, r6, pc}

000070ae <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    70ae:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    70b0:	680c      	ldr	r4, [r1, #0]
{
    70b2:	4606      	mov	r6, r0
    70b4:	460d      	mov	r5, r1
	if (*mem_head) {
    70b6:	b11c      	cbz	r4, 70c0 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    70b8:	1de3      	adds	r3, r4, #7
    70ba:	f023 0303 	bic.w	r3, r3, #3
    70be:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    70c0:	2204      	movs	r2, #4
    70c2:	4629      	mov	r1, r5
    70c4:	4630      	mov	r0, r6
    70c6:	f7fa fda5 	bl	1c14 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    70ca:	1df2      	adds	r2, r6, #7
    70cc:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    70d0:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    70d2:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    70d4:	602e      	str	r6, [r5, #0]
    70d6:	bd70      	pop	{r4, r5, r6, pc}

000070d8 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    70d8:	b118      	cbz	r0, 70e2 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    70da:	3007      	adds	r0, #7
    70dc:	f020 0003 	bic.w	r0, r0, #3
    70e0:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    70e2:	4770      	bx	lr

000070e4 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    70e4:	fb02 0001 	mla	r0, r2, r1, r0
    70e8:	4770      	bx	lr

000070ea <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    70ea:	1a40      	subs	r0, r0, r1
    70ec:	b280      	uxth	r0, r0
}
    70ee:	fbb0 f0f2 	udiv	r0, r0, r2
    70f2:	4770      	bx	lr

000070f4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    70f4:	b510      	push	{r4, lr}
	src += len;
    70f6:	4411      	add	r1, r2
    70f8:	3801      	subs	r0, #1
	while (len--) {
    70fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    70fe:	3a01      	subs	r2, #1
    7100:	b292      	uxth	r2, r2
    7102:	429a      	cmp	r2, r3
    7104:	d100      	bne.n	7108 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7106:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7108:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    710c:	f800 4f01 	strb.w	r4, [r0, #1]!
    7110:	e7f5      	b.n	70fe <mem_rcopy+0xa>

00007112 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7112:	4401      	add	r1, r0
	while (len--) {
    7114:	4288      	cmp	r0, r1
    7116:	d101      	bne.n	711c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7118:	2000      	movs	r0, #0
    711a:	4770      	bx	lr
		if (*src++) {
    711c:	f810 3b01 	ldrb.w	r3, [r0], #1
    7120:	2b00      	cmp	r3, #0
    7122:	d0f7      	beq.n	7114 <mem_nz+0x2>
			return 1;
    7124:	2001      	movs	r0, #1
}
    7126:	4770      	bx	lr

00007128 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7128:	6010      	str	r0, [r2, #0]
    712a:	6008      	str	r0, [r1, #0]

	return link;
}
    712c:	4770      	bx	lr

0000712e <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    712e:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    7130:	6814      	ldr	r4, [r2, #0]
    7132:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7134:	6814      	ldr	r4, [r2, #0]
    7136:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7138:	6010      	str	r0, [r2, #0]

	return link;
}
    713a:	bd10      	pop	{r4, pc}

0000713c <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    713c:	4288      	cmp	r0, r1
    713e:	d003      	beq.n	7148 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    7140:	b11a      	cbz	r2, 714a <memq_peek+0xe>
		*mem = head->mem;
    7142:	6843      	ldr	r3, [r0, #4]
    7144:	6013      	str	r3, [r2, #0]
    7146:	4770      	bx	lr
		return NULL;
    7148:	2000      	movs	r0, #0
	}

	return head;
}
    714a:	4770      	bx	lr

0000714c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    714c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    714e:	4283      	cmp	r3, r0
    7150:	d009      	beq.n	7166 <memq_dequeue+0x1a>
	if (mem) {
    7152:	b122      	cbz	r2, 715e <memq_dequeue+0x12>
		*mem = head->mem;
    7154:	6858      	ldr	r0, [r3, #4]
    7156:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7158:	681a      	ldr	r2, [r3, #0]
    715a:	600a      	str	r2, [r1, #0]

	return link;
    715c:	e001      	b.n	7162 <memq_dequeue+0x16>
	if (!link) {
    715e:	2b00      	cmp	r3, #0
    7160:	d1fa      	bne.n	7158 <memq_dequeue+0xc>
}
    7162:	4618      	mov	r0, r3
    7164:	4770      	bx	lr
		return NULL;
    7166:	2300      	movs	r3, #0
    7168:	e7fb      	b.n	7162 <memq_dequeue+0x16>
	...

0000716c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    7170:	4f11      	ldr	r7, [pc, #68]	; (71b8 <mayfly_init+0x4c>)
    7172:	f8df 9048 	ldr.w	r9, [pc, #72]	; 71bc <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7176:	2604      	movs	r6, #4
	while (callee_id--) {
    7178:	3e01      	subs	r6, #1
    717a:	b2f6      	uxtb	r6, r6
    717c:	2eff      	cmp	r6, #255	; 0xff
    717e:	d019      	beq.n	71b4 <mayfly_init+0x48>
    7180:	b233      	sxth	r3, r6
    7182:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7186:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    718a:	011d      	lsls	r5, r3, #4
    718c:	2404      	movs	r4, #4
    718e:	f04f 0a0c 	mov.w	sl, #12
    7192:	e00a      	b.n	71aa <mayfly_init+0x3e>
    7194:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    7198:	1d0a      	adds	r2, r1, #4
    719a:	eb04 0008 	add.w	r0, r4, r8
    719e:	443a      	add	r2, r7
    71a0:	4439      	add	r1, r7
    71a2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    71a6:	f7ff ffbf 	bl	7128 <memq_init>
		while (caller_id--) {
    71aa:	3c01      	subs	r4, #1
    71ac:	b2e4      	uxtb	r4, r4
    71ae:	2cff      	cmp	r4, #255	; 0xff
    71b0:	d1f0      	bne.n	7194 <mayfly_init+0x28>
    71b2:	e7e1      	b.n	7178 <mayfly_init+0xc>
    71b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71b8:	20000704 	.word	0x20000704
    71bc:	20000684 	.word	0x20000684

000071c0 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    71c0:	b4f0      	push	{r4, r5, r6, r7}
    71c2:	4b12      	ldr	r3, [pc, #72]	; (720c <mayfly_enable+0x4c>)
    71c4:	4605      	mov	r5, r0
    71c6:	460f      	mov	r7, r1
    71c8:	260c      	movs	r6, #12
    71ca:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    71cc:	b172      	cbz	r2, 71ec <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    71ce:	4361      	muls	r1, r4
    71d0:	fb06 1400 	mla	r4, r6, r0, r1
    71d4:	4423      	add	r3, r4
    71d6:	7a59      	ldrb	r1, [r3, #9]
    71d8:	7a18      	ldrb	r0, [r3, #8]
    71da:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    71dc:	bf04      	itt	eq
    71de:	3101      	addeq	r1, #1
    71e0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    71e2:	4628      	mov	r0, r5
    71e4:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    71e6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    71e8:	f00b bc12 	b.w	12a10 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    71ec:	434c      	muls	r4, r1
    71ee:	fb06 4400 	mla	r4, r6, r0, r4
    71f2:	4423      	add	r3, r4
    71f4:	7a9c      	ldrb	r4, [r3, #10]
    71f6:	7ada      	ldrb	r2, [r3, #11]
    71f8:	42a2      	cmp	r2, r4
    71fa:	d104      	bne.n	7206 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    71fc:	3201      	adds	r2, #1
    71fe:	729a      	strb	r2, [r3, #10]
}
    7200:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    7202:	f00b bc65 	b.w	12ad0 <mayfly_pend>
}
    7206:	bcf0      	pop	{r4, r5, r6, r7}
    7208:	4770      	bx	lr
    720a:	bf00      	nop
    720c:	20000704 	.word	0x20000704

00007210 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    7210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7212:	4605      	mov	r5, r0
    7214:	460e      	mov	r6, r1
    7216:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7218:	b18a      	cbz	r2, 723e <mayfly_enqueue+0x2e>
    721a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    721c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    721e:	7820      	ldrb	r0, [r4, #0]
    7220:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    7222:	f010 0703 	ands.w	r7, r0, #3
    7226:	d029      	beq.n	727c <mayfly_enqueue+0x6c>
		if (chain) {
    7228:	b303      	cbz	r3, 726c <mayfly_enqueue+0x5c>
			if (state != 1) {
    722a:	2f01      	cmp	r7, #1
    722c:	d039      	beq.n	72a2 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    722e:	3201      	adds	r2, #1
    7230:	b2d2      	uxtb	r2, r2
    7232:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7234:	4631      	mov	r1, r6
    7236:	4628      	mov	r0, r5
    7238:	f00b fc4a 	bl	12ad0 <mayfly_pend>
    723c:	e01c      	b.n	7278 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    723e:	f00b fc35 	bl	12aac <mayfly_prio_is_equal>
    7242:	2800      	cmp	r0, #0
    7244:	d0e9      	beq.n	721a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7246:	4631      	mov	r1, r6
    7248:	4628      	mov	r0, r5
    724a:	f00b fc09 	bl	12a60 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    724e:	2800      	cmp	r0, #0
    7250:	d0e3      	beq.n	721a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7252:	2330      	movs	r3, #48	; 0x30
    7254:	220c      	movs	r2, #12
    7256:	4373      	muls	r3, r6
    7258:	fb02 3305 	mla	r3, r2, r5, r3
    725c:	4a12      	ldr	r2, [pc, #72]	; (72a8 <mayfly_enqueue+0x98>)
    725e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    7260:	7a93      	ldrb	r3, [r2, #10]
    7262:	7ad2      	ldrb	r2, [r2, #11]
    7264:	1a9b      	subs	r3, r3, r2
    7266:	bf18      	it	ne
    7268:	2301      	movne	r3, #1
    726a:	e7d7      	b.n	721c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    726c:	3202      	adds	r2, #2
    726e:	b2d2      	uxtb	r2, r2
    7270:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    7272:	68e3      	ldr	r3, [r4, #12]
    7274:	68a0      	ldr	r0, [r4, #8]
    7276:	4798      	blx	r3
		return 0;
    7278:	2000      	movs	r0, #0
    727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    727c:	2b00      	cmp	r3, #0
    727e:	d0f8      	beq.n	7272 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    7280:	3201      	adds	r2, #1
    7282:	b2d2      	uxtb	r2, r2
    7284:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7286:	2304      	movs	r3, #4
    7288:	2230      	movs	r2, #48	; 0x30
    728a:	fb12 3206 	smlabb	r2, r2, r6, r3
    728e:	230c      	movs	r3, #12
    7290:	fb13 2305 	smlabb	r3, r3, r5, r2
    7294:	4a04      	ldr	r2, [pc, #16]	; (72a8 <mayfly_enqueue+0x98>)
    7296:	6860      	ldr	r0, [r4, #4]
    7298:	441a      	add	r2, r3
    729a:	4621      	mov	r1, r4
    729c:	f7ff ff47 	bl	712e <memq_enqueue>
    72a0:	e7c8      	b.n	7234 <mayfly_enqueue+0x24>
			return 1;
    72a2:	4638      	mov	r0, r7

	return 0;
}
    72a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72a6:	bf00      	nop
    72a8:	20000704 	.word	0x20000704

000072ac <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    72ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    72b4:	b089      	sub	sp, #36	; 0x24
    72b6:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    72b8:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    72bc:	4e43      	ldr	r6, [pc, #268]	; (73cc <mayfly_run+0x120>)
    72be:	9304      	str	r3, [sp, #16]
{
    72c0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    72c2:	2404      	movs	r4, #4
	u8_t disable = 0;
    72c4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    72c8:	3c01      	subs	r4, #1
    72ca:	b2e4      	uxtb	r4, r4
    72cc:	2cff      	cmp	r4, #255	; 0xff
    72ce:	d10b      	bne.n	72e8 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    72d0:	9b01      	ldr	r3, [sp, #4]
    72d2:	2b00      	cmp	r3, #0
    72d4:	d076      	beq.n	73c4 <mayfly_run+0x118>
    72d6:	f1b8 0f00 	cmp.w	r8, #0
    72da:	d173      	bne.n	73c4 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    72dc:	4642      	mov	r2, r8
    72de:	4629      	mov	r1, r5
    72e0:	4628      	mov	r0, r5
    72e2:	f00b fb95 	bl	12a10 <mayfly_enable_cb>
    72e6:	e06d      	b.n	73c4 <mayfly_run+0x118>
		struct mayfly *m = 0;
    72e8:	f10d 0b20 	add.w	fp, sp, #32
    72ec:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    72ee:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    72f0:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    72f4:	f04f 0930 	mov.w	r9, #48	; 0x30
    72f8:	fb07 f304 	mul.w	r3, r7, r4
    72fc:	fb09 3005 	mla	r0, r9, r5, r3
    7300:	1831      	adds	r1, r6, r0
    7302:	465a      	mov	r2, fp
    7304:	6849      	ldr	r1, [r1, #4]
    7306:	5830      	ldr	r0, [r6, r0]
    7308:	9302      	str	r3, [sp, #8]
    730a:	f7ff ff17 	bl	713c <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    730e:	9b04      	ldr	r3, [sp, #16]
    7310:	fb17 3704 	smlabb	r7, r7, r4, r3
    7314:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7316:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7318:	9303      	str	r3, [sp, #12]
		while (link) {
    731a:	f1ba 0f00 	cmp.w	sl, #0
    731e:	d119      	bne.n	7354 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7320:	2230      	movs	r2, #48	; 0x30
    7322:	230c      	movs	r3, #12
    7324:	436a      	muls	r2, r5
    7326:	fb03 2204 	mla	r2, r3, r4, r2
    732a:	4432      	add	r2, r6
    732c:	7a91      	ldrb	r1, [r2, #10]
    732e:	7ad0      	ldrb	r0, [r2, #11]
    7330:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7332:	bf1e      	ittt	ne
    7334:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7336:	2201      	movne	r2, #1
    7338:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    733a:	2230      	movs	r2, #48	; 0x30
    733c:	436a      	muls	r2, r5
    733e:	fb03 2304 	mla	r3, r3, r4, r2
    7342:	4433      	add	r3, r6
    7344:	7a1a      	ldrb	r2, [r3, #8]
    7346:	7a59      	ldrb	r1, [r3, #9]
    7348:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    734a:	bf1c      	itt	ne
    734c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    734e:	f04f 0801 	movne.w	r8, #1
    7352:	e7b9      	b.n	72c8 <mayfly_run+0x1c>
			req = m->_req;
    7354:	9b07      	ldr	r3, [sp, #28]
    7356:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7358:	785a      	ldrb	r2, [r3, #1]
    735a:	1abf      	subs	r7, r7, r2
    735c:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7360:	2f01      	cmp	r7, #1
    7362:	d104      	bne.n	736e <mayfly_run+0xc2>
				m->_ack--;
    7364:	3a01      	subs	r2, #1
    7366:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7368:	6898      	ldr	r0, [r3, #8]
    736a:	68da      	ldr	r2, [r3, #12]
    736c:	4790      	blx	r2
			req = m->_req;
    736e:	9a07      	ldr	r2, [sp, #28]
    7370:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7372:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7374:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7376:	1a9a      	subs	r2, r3, r2
    7378:	f002 0203 	and.w	r2, r2, #3
    737c:	2a01      	cmp	r2, #1
    737e:	9305      	str	r3, [sp, #20]
    7380:	d00d      	beq.n	739e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7382:	9b02      	ldr	r3, [sp, #8]
    7384:	9903      	ldr	r1, [sp, #12]
    7386:	fb09 3005 	mla	r0, r9, r5, r3
    738a:	4430      	add	r0, r6
    738c:	2200      	movs	r2, #0
    738e:	6840      	ldr	r0, [r0, #4]
    7390:	f7ff fedc 	bl	714c <memq_dequeue>
				m->_link = link;
    7394:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7396:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7398:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    739c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    739e:	9b02      	ldr	r3, [sp, #8]
    73a0:	fb09 3305 	mla	r3, r9, r5, r3
    73a4:	18f1      	adds	r1, r6, r3
    73a6:	465a      	mov	r2, fp
    73a8:	6849      	ldr	r1, [r1, #4]
    73aa:	58f0      	ldr	r0, [r6, r3]
    73ac:	f7ff fec6 	bl	713c <memq_peek>
			if (state == 1) {
    73b0:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    73b2:	4682      	mov	sl, r0
			if (state == 1) {
    73b4:	d1b1      	bne.n	731a <mayfly_run+0x6e>
				if (caller_id || link) {
    73b6:	b90c      	cbnz	r4, 73bc <mayfly_run+0x110>
    73b8:	2800      	cmp	r0, #0
    73ba:	d0b1      	beq.n	7320 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    73bc:	4629      	mov	r1, r5
    73be:	4628      	mov	r0, r5
    73c0:	f00b fb86 	bl	12ad0 <mayfly_pend>
	}
}
    73c4:	b009      	add	sp, #36	; 0x24
    73c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73ca:	bf00      	nop
    73cc:	20000704 	.word	0x20000704

000073d0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    73d0:	b510      	push	{r4, lr}
    73d2:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    73d4:	2000      	movs	r0, #0

	while (octets_len--) {
    73d6:	3901      	subs	r1, #1
    73d8:	b2c9      	uxtb	r1, r1
    73da:	29ff      	cmp	r1, #255	; 0xff
    73dc:	d100      	bne.n	73e0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    73de:	bd10      	pop	{r4, pc}
		bite = *octets;
    73e0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    73e4:	2b00      	cmp	r3, #0
    73e6:	d0f6      	beq.n	73d6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    73e8:	1e5c      	subs	r4, r3, #1
			one_count++;
    73ea:	3001      	adds	r0, #1
			bite &= (bite - 1);
    73ec:	4023      	ands	r3, r4
			one_count++;
    73ee:	b2c0      	uxtb	r0, r0
    73f0:	e7f8      	b.n	73e4 <util_ones_count_get+0x14>

000073f2 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    73f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    73f4:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    73f6:	6805      	ldr	r5, [r0, #0]
	current = previous;
    73f8:	461a      	mov	r2, r3
	total = 0;
    73fa:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    73fc:	2aff      	cmp	r2, #255	; 0xff
    73fe:	d101      	bne.n	7404 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7400:	2000      	movs	r0, #0
    7402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7404:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7408:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    740a:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    740e:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7412:	d004      	beq.n	741e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7414:	68b3      	ldr	r3, [r6, #8]
    7416:	441c      	add	r4, r3
		current = ticker_current->next;
    7418:	4613      	mov	r3, r2
    741a:	463a      	mov	r2, r7
    741c:	e7ee      	b.n	73fc <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    741e:	4293      	cmp	r3, r2
    7420:	d100      	bne.n	7424 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7422:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7424:	b21b      	sxth	r3, r3
    7426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    742a:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    742c:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    742e:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7432:	7833      	ldrb	r3, [r6, #0]
    7434:	2bff      	cmp	r3, #255	; 0xff
    7436:	d006      	beq.n	7446 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    743c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7440:	689a      	ldr	r2, [r3, #8]
    7442:	4402      	add	r2, r0
    7444:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7446:	4420      	add	r0, r4
    7448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000744a <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    744a:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    744c:	1a55      	subs	r5, r2, r1
    744e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7452:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7454:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7456:	d109      	bne.n	746c <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7458:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    745c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    745e:	42a2      	cmp	r2, r4
    7460:	d90e      	bls.n	7480 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7462:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7464:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7466:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7468:	6144      	str	r4, [r0, #20]
    746a:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    746c:	1a8a      	subs	r2, r1, r2
    746e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7472:	4293      	cmp	r3, r2
    7474:	d901      	bls.n	747a <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7476:	1a9a      	subs	r2, r3, r2
    7478:	e7f1      	b.n	745e <ticks_to_expire_prep+0x14>
    747a:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    747c:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    747e:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7480:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7482:	2200      	movs	r2, #0
    7484:	e7ef      	b.n	7466 <ticks_to_expire_prep+0x1c>

00007486 <ticker_job_op_cb>:
{
    7486:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7488:	2200      	movs	r2, #0
    748a:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    748e:	6259      	str	r1, [r3, #36]	; 0x24
{
    7490:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7492:	b10a      	cbz	r2, 7498 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7496:	4710      	bx	r2
    7498:	4770      	bx	lr

0000749a <ticker_worker>:
{
    749a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    749e:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    74a0:	2301      	movs	r3, #1
{
    74a2:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    74a4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    74a6:	2d00      	cmp	r5, #0
    74a8:	d14c      	bne.n	7544 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    74aa:	7f43      	ldrb	r3, [r0, #29]
    74ac:	2bff      	cmp	r3, #255	; 0xff
    74ae:	d102      	bne.n	74b6 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    74b0:	77c5      	strb	r5, [r0, #31]
		return;
    74b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    74b6:	f00a fe15 	bl	120e4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74ba:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    74bc:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    74be:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74c2:	1bc7      	subs	r7, r0, r7
    74c4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    74c8:	2eff      	cmp	r6, #255	; 0xff
    74ca:	d006      	beq.n	74da <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    74cc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    74d0:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    74d4:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    74d6:	429f      	cmp	r7, r3
    74d8:	d218      	bcs.n	750c <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    74da:	7aa2      	ldrb	r2, [r4, #10]
    74dc:	7ae3      	ldrb	r3, [r4, #11]
    74de:	4293      	cmp	r3, r2
    74e0:	d105      	bne.n	74ee <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    74e2:	3301      	adds	r3, #1
    74e4:	b2db      	uxtb	r3, r3
			last = 0;
    74e6:	2b02      	cmp	r3, #2
    74e8:	bf08      	it	eq
    74ea:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    74ec:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    74ee:	7ae3      	ldrb	r3, [r4, #11]
    74f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    74f4:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    74f6:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    74f8:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    74fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    74fc:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    74fe:	46ac      	mov	ip, r5
    7500:	4623      	mov	r3, r4
    7502:	2104      	movs	r1, #4
    7504:	2003      	movs	r0, #3
}
    7506:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    750a:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    750c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    750e:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7510:	788a      	ldrb	r2, [r1, #2]
    7512:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7514:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7518:	1a9b      	subs	r3, r3, r2
    751a:	b2db      	uxtb	r3, r3
    751c:	2b01      	cmp	r3, #1
    751e:	d1d3      	bne.n	74c8 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7520:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7524:	3a01      	subs	r2, #1
    7526:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7528:	f1b9 0f00 	cmp.w	r9, #0
    752c:	d0cc      	beq.n	74c8 <ticker_worker+0x2e>
					   ticks_expired -
    752e:	6948      	ldr	r0, [r1, #20]
    7530:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7532:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7534:	1a28      	subs	r0, r5, r0
    7536:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7538:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    753c:	690b      	ldr	r3, [r1, #16]
    753e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7540:	47c8      	blx	r9
    7542:	e7c1      	b.n	74c8 <ticker_worker+0x2e>
    7544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007548 <ticker_job>:
{
    7548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    754c:	7fc2      	ldrb	r2, [r0, #31]
{
    754e:	b095      	sub	sp, #84	; 0x54
    7550:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7552:	2a00      	cmp	r2, #0
    7554:	f040 83be 	bne.w	7cd4 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    7558:	6943      	ldr	r3, [r0, #20]
    755a:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    755c:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    755e:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7560:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7562:	7ac0      	ldrb	r0, [r0, #11]
    7564:	4298      	cmp	r0, r3
    7566:	f000 808f 	beq.w	7688 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    756a:	440b      	add	r3, r1
    756c:	b2db      	uxtb	r3, r3
			first = 0;
    756e:	2b02      	cmp	r3, #2
    7570:	bf08      	it	eq
    7572:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7574:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7578:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    757c:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    757e:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7582:	9b07      	ldr	r3, [sp, #28]
    7584:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7586:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    758a:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    758e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7592:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7594:	f8db 3000 	ldr.w	r3, [fp]
    7598:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    759a:	f8db 3004 	ldr.w	r3, [fp, #4]
    759e:	930d      	str	r3, [sp, #52]	; 0x34
    75a0:	f89b 3009 	ldrb.w	r3, [fp, #9]
    75a4:	3b01      	subs	r3, #1
    75a6:	b2db      	uxtb	r3, r3
    75a8:	9304      	str	r3, [sp, #16]
	pending = 0;
    75aa:	2300      	movs	r3, #0
    75ac:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    75ae:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    75b2:	9b04      	ldr	r3, [sp, #16]
    75b4:	2bff      	cmp	r3, #255	; 0xff
    75b6:	d16a      	bne.n	768e <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    75b8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    75bc:	9a05      	ldr	r2, [sp, #20]
    75be:	1a9b      	subs	r3, r3, r2
    75c0:	bf18      	it	ne
    75c2:	2301      	movne	r3, #1
    75c4:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    75c6:	9b03      	ldr	r3, [sp, #12]
    75c8:	b1e3      	cbz	r3, 7604 <ticker_job+0xbc>
	node = &instance->node[0];
    75ca:	f8db 3000 	ldr.w	r3, [fp]
    75ce:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    75d0:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    75d4:	f89b 601d 	ldrb.w	r6, [fp, #29]
    75d8:	2eff      	cmp	r6, #255	; 0xff
    75da:	d00c      	beq.n	75f6 <ticker_job+0xae>
		ticker = &node[id_expired];
    75dc:	b237      	sxth	r7, r6
    75de:	9b06      	ldr	r3, [sp, #24]
    75e0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    75e4:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    75e8:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    75ea:	4545      	cmp	r5, r8
    75ec:	f240 8136 	bls.w	785c <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    75f0:	eba5 0508 	sub.w	r5, r5, r8
    75f4:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    75f6:	9b04      	ldr	r3, [sp, #16]
    75f8:	9a03      	ldr	r2, [sp, #12]
    75fa:	9905      	ldr	r1, [sp, #20]
    75fc:	42b1      	cmp	r1, r6
    75fe:	bf18      	it	ne
    7600:	4613      	movne	r3, r2
    7602:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7604:	f8db 3000 	ldr.w	r3, [fp]
    7608:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    760a:	f8db 3004 	ldr.w	r3, [fp, #4]
    760e:	9312      	str	r3, [sp, #72]	; 0x48
    7610:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7614:	3b01      	subs	r3, #1
    7616:	b2db      	uxtb	r3, r3
    7618:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    761a:	9b03      	ldr	r3, [sp, #12]
    761c:	2bff      	cmp	r3, #255	; 0xff
    761e:	f040 8170 	bne.w	7902 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7622:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7626:	9a05      	ldr	r2, [sp, #20]
    7628:	4293      	cmp	r3, r2
	if (!pending) {
    762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    762c:	f040 8349 	bne.w	7cc2 <ticker_job+0x77a>
	if (!pending) {
    7630:	b95b      	cbnz	r3, 764a <ticker_job+0x102>
    7632:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7636:	f8db 3004 	ldr.w	r3, [fp, #4]
    763a:	9303      	str	r3, [sp, #12]
    763c:	3c01      	subs	r4, #1
    763e:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7640:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7644:	2cff      	cmp	r4, #255	; 0xff
    7646:	f040 82a0 	bne.w	7b8a <ticker_job+0x642>
	instance->job_guard = 0;
    764a:	2300      	movs	r3, #0
    764c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7650:	9b04      	ldr	r3, [sp, #16]
    7652:	b14b      	cbz	r3, 7668 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7654:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7658:	2bff      	cmp	r3, #255	; 0xff
    765a:	f040 82e9 	bne.w	7c30 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    765e:	f00a fd13 	bl	12088 <cntr_stop>
    7662:	b908      	cbnz	r0, 7668 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7664:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7668:	f89b 301f 	ldrb.w	r3, [fp, #31]
    766c:	2b00      	cmp	r3, #0
    766e:	f000 8331 	beq.w	7cd4 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7672:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7676:	465b      	mov	r3, fp
    7678:	2201      	movs	r2, #1
    767a:	2103      	movs	r1, #3
    767c:	2004      	movs	r0, #4
    767e:	46a4      	mov	ip, r4
}
    7680:	b015      	add	sp, #84	; 0x54
    7682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7686:	4760      	bx	ip
		flag_elapsed = 0;
    7688:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    768a:	4690      	mov	r8, r2
    768c:	e77f      	b.n	758e <ticker_job+0x46>
		user = &users[count_user];
    768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7690:	9a04      	ldr	r2, [sp, #16]
    7692:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    769a:	78f9      	ldrb	r1, [r7, #3]
    769c:	78be      	ldrb	r6, [r7, #2]
    769e:	428e      	cmp	r6, r1
    76a0:	f000 80d7 	beq.w	7852 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    76a4:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    76a6:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    76a8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    76ac:	0112      	lsls	r2, r2, #4
    76ae:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    76b0:	1c73      	adds	r3, r6, #1
    76b2:	b2db      	uxtb	r3, r3
				middle = 0;
    76b4:	4298      	cmp	r0, r3
    76b6:	bf08      	it	eq
    76b8:	2300      	moveq	r3, #0
			user->middle = middle;
    76ba:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    76bc:	9b08      	ldr	r3, [sp, #32]
    76be:	5c9a      	ldrb	r2, [r3, r2]
    76c0:	2a03      	cmp	r2, #3
    76c2:	d9eb      	bls.n	769c <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    76c4:	2a05      	cmp	r2, #5
    76c6:	d817      	bhi.n	76f8 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    76c8:	7869      	ldrb	r1, [r5, #1]
    76ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    76ce:	930c      	str	r3, [sp, #48]	; 0x30
    76d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    76d2:	9b06      	ldr	r3, [sp, #24]
    76d4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    76d8:	7863      	ldrb	r3, [r4, #1]
    76da:	78a0      	ldrb	r0, [r4, #2]
    76dc:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    76de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    76e2:	d009      	beq.n	76f8 <ticker_job+0x1b0>
			    (state == 0) ||
    76e4:	2a04      	cmp	r2, #4
    76e6:	d10c      	bne.n	7702 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    76e8:	686a      	ldr	r2, [r5, #4]
    76ea:	b952      	cbnz	r2, 7702 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    76ec:	68aa      	ldr	r2, [r5, #8]
    76ee:	b942      	cbnz	r2, 7702 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    76f0:	68ea      	ldr	r2, [r5, #12]
    76f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    76f6:	d104      	bne.n	7702 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    76f8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    76fa:	4628      	mov	r0, r5
    76fc:	f7ff fec3 	bl	7486 <ticker_job_op_cb>
    7700:	e7cb      	b.n	769a <ticker_job+0x152>
			if (state == 1) {
    7702:	2b01      	cmp	r3, #1
    7704:	f040 809b 	bne.w	783e <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7708:	4658      	mov	r0, fp
    770a:	f7ff fe72 	bl	73f2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    770e:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7710:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7712:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7714:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7716:	f040 8084 	bne.w	7822 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    771a:	f8db 3014 	ldr.w	r3, [fp, #20]
    771e:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7720:	f00a fce0 	bl	120e4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    7726:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7728:	1ac3      	subs	r3, r0, r3
    772a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    772e:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7730:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7732:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7734:	bf9e      	ittt	ls
    7736:	6962      	ldrls	r2, [r4, #20]
    7738:	1b92      	subls	r2, r2, r6
    773a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    773c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    773e:	bf96      	itet	ls
    7740:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7742:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7744:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7746:	b18a      	cbz	r2, 776c <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7748:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    774a:	b179      	cbz	r1, 776c <ticker_job+0x224>
		user_op->params.update.lazy--;
    774c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7750:	fa1f fe8e 	uxth.w	lr, lr
    7754:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7758:	429a      	cmp	r2, r3
    775a:	d32b      	bcc.n	77b4 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    775c:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7a84 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7760:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7764:	45e6      	cmp	lr, ip
    7766:	d847      	bhi.n	77f8 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7768:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    776c:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    776e:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    7770:	4413      	add	r3, r2
    7772:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7774:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7776:	6963      	ldr	r3, [r4, #20]
    7778:	4413      	add	r3, r2
    777a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    777c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    777e:	4620      	mov	r0, r4
    7780:	f7ff fe63 	bl	744a <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7784:	69a2      	ldr	r2, [r4, #24]
    7786:	892b      	ldrh	r3, [r5, #8]
    7788:	4413      	add	r3, r2
    778a:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    778c:	896a      	ldrh	r2, [r5, #10]
    778e:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7790:	bf8c      	ite	hi
    7792:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7794:	2300      	movls	r3, #0
    7796:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7798:	7bab      	ldrb	r3, [r5, #14]
    779a:	b103      	cbz	r3, 779e <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    779c:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    779e:	9b06      	ldr	r3, [sp, #24]
    77a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    77a2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    77a6:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    77a8:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    77ac:	3301      	adds	r3, #1
    77ae:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    77b0:	2100      	movs	r1, #0
    77b2:	e7a2      	b.n	76fa <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    77b4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    77b8:	45e6      	cmp	lr, ip
    77ba:	d2cf      	bcs.n	775c <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    77bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    77be:	4eaf      	ldr	r6, [pc, #700]	; (7a7c <ticker_job+0x534>)
    77c0:	48af      	ldr	r0, [pc, #700]	; (7a80 <ticker_job+0x538>)
    77c2:	198e      	adds	r6, r1, r6
    77c4:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    77c6:	bf81      	itttt	hi
    77c8:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    77cc:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    77d0:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    77d4:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    77d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    77d8:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    77da:	bf8c      	ite	hi
    77dc:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    77e0:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    77e4:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    77e6:	4491      	add	r9, r2
			ticker->lazy_current--;
    77e8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    77ec:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    77ee:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    77f2:	f8a4 c01e 	strh.w	ip, [r4, #30]
    77f6:	e7af      	b.n	7758 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    77f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    77fa:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    77fc:	48a0      	ldr	r0, [pc, #640]	; (7a80 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    77fe:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7800:	499e      	ldr	r1, [pc, #632]	; (7a7c <ticker_job+0x534>)
    7802:	1871      	adds	r1, r6, r1
    7804:	4281      	cmp	r1, r0
	return 0;
    7806:	bf8e      	itee	hi
    7808:	2100      	movhi	r1, #0
		return 1;
    780a:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    780c:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    780e:	4411      	add	r1, r2
			ticker->lazy_current++;
    7810:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7814:	bf8c      	ite	hi
    7816:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7818:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    781a:	440b      	add	r3, r1
			ticker->lazy_current++;
    781c:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7820:	e79e      	b.n	7760 <ticker_job+0x218>
		ticker->req = ticker->ack;
    7822:	78a3      	ldrb	r3, [r4, #2]
    7824:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7826:	786b      	ldrb	r3, [r5, #1]
    7828:	f89b 201c 	ldrb.w	r2, [fp, #28]
    782c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    782e:	bf01      	itttt	eq
    7830:	23ff      	moveq	r3, #255	; 0xff
    7832:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7836:	2300      	moveq	r3, #0
    7838:	f8cb 3018 	streq.w	r3, [fp, #24]
    783c:	e7b8      	b.n	77b0 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    783e:	2104      	movs	r1, #4
    7840:	465b      	mov	r3, fp
    7842:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7846:	2201      	movs	r2, #1
    7848:	4608      	mov	r0, r1
    784a:	47a0      	blx	r4
				pending = 1;
    784c:	2301      	movs	r3, #1
				user->middle = prev;
    784e:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7850:	9309      	str	r3, [sp, #36]	; 0x24
    7852:	9b04      	ldr	r3, [sp, #16]
    7854:	3b01      	subs	r3, #1
    7856:	b2db      	uxtb	r3, r3
    7858:	9304      	str	r3, [sp, #16]
    785a:	e6aa      	b.n	75b2 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    785c:	f8db 3018 	ldr.w	r3, [fp, #24]
    7860:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7862:	bf29      	itett	cs
    7864:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7866:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7868:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    786c:	2300      	movcs	r3, #0
    786e:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7872:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7874:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7876:	b11b      	cbz	r3, 7880 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7878:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    787c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7880:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7882:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    7884:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7886:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    788a:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    788e:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7892:	f1be 0f00 	cmp.w	lr, #0
    7896:	d030      	beq.n	78fa <ticker_job+0x3b2>
    7898:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    789a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 7a80 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    789e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    78a0:	6a21      	ldr	r1, [r4, #32]
    78a2:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    78a4:	4975      	ldr	r1, [pc, #468]	; (7a7c <ticker_job+0x534>)
    78a6:	1859      	adds	r1, r3, r1
    78a8:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    78aa:	bf9f      	itttt	ls
    78ac:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    78b0:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    78b4:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    78b8:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    78ba:	bf92      	itee	ls
    78bc:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    78be:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    78c0:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    78c2:	4473      	add	r3, lr
			while (count--) {
    78c4:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    78c8:	441a      	add	r2, r3
			while (count--) {
    78ca:	d2e8      	bcs.n	789e <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    78cc:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    78ce:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    78d0:	f8db 1014 	ldr.w	r1, [fp, #20]
    78d4:	eb03 0209 	add.w	r2, r3, r9
    78d8:	4620      	mov	r0, r4
    78da:	f7ff fdb6 	bl	744a <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    78de:	8ba3      	ldrh	r3, [r4, #28]
    78e0:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    78e2:	2300      	movs	r3, #0
    78e4:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    78e6:	9b06      	ldr	r3, [sp, #24]
    78e8:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    78ec:	7863      	ldrb	r3, [r4, #1]
    78ee:	3301      	adds	r3, #1
    78f0:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    78f2:	eba8 0805 	sub.w	r8, r8, r5
    78f6:	46b2      	mov	sl, r6
    78f8:	e66c      	b.n	75d4 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    78fa:	78a3      	ldrb	r3, [r4, #2]
    78fc:	7063      	strb	r3, [r4, #1]
    78fe:	4656      	mov	r6, sl
    7900:	e7f7      	b.n	78f2 <ticker_job+0x3aa>
		user = &users[count_user];
    7902:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7904:	9a03      	ldr	r2, [sp, #12]
    7906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    790a:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    790c:	685b      	ldr	r3, [r3, #4]
    790e:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    7910:	9b06      	ldr	r3, [sp, #24]
    7912:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    7916:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    791a:	f000 808e 	beq.w	7a3a <ticker_job+0x4f2>
				ticker = &node[id_insert];
    791e:	fa0f f38a 	sxth.w	r3, sl
    7922:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    7928:	46d0      	mov	r8, sl
    792a:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    792e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    7932:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    7934:	f8db 3000 	ldr.w	r3, [fp]
    7938:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    793a:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    793c:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    793e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7940:	8be3      	ldrh	r3, [r4, #30]
    7942:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    7944:	bf86      	itte	hi
    7946:	1a9b      	subhi	r3, r3, r2
    7948:	b29b      	uxthhi	r3, r3
		skip = 0;
    794a:	2300      	movls	r3, #0
    794c:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    794e:	fa0f f388 	sxth.w	r3, r8
    7952:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7956:	00db      	lsls	r3, r3, #3
    7958:	9313      	str	r3, [sp, #76]	; 0x4c
    795a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    795c:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    7960:	f8db 0018 	ldr.w	r0, [fp, #24]
    7964:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    7966:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    796a:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    796c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    7970:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7974:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    7976:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7978:	2bff      	cmp	r3, #255	; 0xff
    797a:	d007      	beq.n	798c <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    797c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    7980:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7984:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7986:	4281      	cmp	r1, r0
    7988:	f200 80a9 	bhi.w	7ade <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    798c:	f8de 0018 	ldr.w	r0, [lr, #24]
    7990:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    7992:	eb01 0c00 	add.w	ip, r1, r0
    7996:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7998:	2eff      	cmp	r6, #255	; 0xff
    799a:	f040 80ae 	bne.w	7afa <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    799e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    79a0:	b130      	cbz	r0, 79b0 <ticker_job+0x468>
    79a2:	9807      	ldr	r0, [sp, #28]
    79a4:	4281      	cmp	r1, r0
    79a6:	f0c0 80bf 	bcc.w	7b28 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    79aa:	2eff      	cmp	r6, #255	; 0xff
    79ac:	f040 818e 	bne.w	7ccc <ticker_job+0x784>
		if (previous == current) {
    79b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    79b2:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    79b6:	4283      	cmp	r3, r0
			node[previous].next = id;
    79b8:	bf18      	it	ne
    79ba:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    79be:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    79c2:	bf16      	itet	ne
    79c4:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    79c8:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    79cc:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    79d0:	2bff      	cmp	r3, #255	; 0xff
    79d2:	d006      	beq.n	79e2 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    79d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    79d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    79dc:	689a      	ldr	r2, [r3, #8]
    79de:	1a51      	subs	r1, r2, r1
    79e0:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    79e2:	78a3      	ldrb	r3, [r4, #2]
    79e4:	3301      	adds	r3, #1
    79e6:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    79e8:	2100      	movs	r1, #0
			if (user_op) {
    79ea:	2d00      	cmp	r5, #0
    79ec:	d093      	beq.n	7916 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    79ee:	4628      	mov	r0, r5
    79f0:	f7ff fd49 	bl	7486 <ticker_job_op_cb>
    79f4:	e78f      	b.n	7916 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    79f6:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    79fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79fc:	011b      	lsls	r3, r3, #4
    79fe:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    7a00:	f109 0201 	add.w	r2, r9, #1
    7a04:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7a08:	9a06      	ldr	r2, [sp, #24]
    7a0a:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7a0c:	454a      	cmp	r2, r9
    7a0e:	bf08      	it	eq
    7a10:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7a16:	5cd3      	ldrb	r3, [r2, r3]
    7a18:	2b03      	cmp	r3, #3
    7a1a:	d10e      	bne.n	7a3a <ticker_job+0x4f2>
				id_insert = user_op->id;
    7a1c:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    7a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a22:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    7a26:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7a2a:	7862      	ldrb	r2, [r4, #1]
    7a2c:	78a3      	ldrb	r3, [r4, #2]
    7a2e:	429a      	cmp	r2, r3
    7a30:	d009      	beq.n	7a46 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    7a32:	2101      	movs	r1, #1
    7a34:	4628      	mov	r0, r5
    7a36:	f7ff fd26 	bl	7486 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    7a3a:	9b06      	ldr	r3, [sp, #24]
    7a3c:	789b      	ldrb	r3, [r3, #2]
    7a3e:	454b      	cmp	r3, r9
    7a40:	d1d9      	bne.n	79f6 <ticker_job+0x4ae>
    7a42:	9b03      	ldr	r3, [sp, #12]
    7a44:	e5e6      	b.n	7614 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    7a46:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    7a48:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    7a4c:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7a4e:	692b      	ldr	r3, [r5, #16]
    7a50:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    7a52:	8aab      	ldrh	r3, [r5, #20]
    7a54:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    7a56:	69ab      	ldr	r3, [r5, #24]
    7a58:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7a5a:	69eb      	ldr	r3, [r5, #28]
    7a5c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7a5e:	6a2b      	ldr	r3, [r5, #32]
    7a60:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    7a62:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    7a64:	68ab      	ldr	r3, [r5, #8]
    7a66:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    7a68:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7a6a:	686a      	ldr	r2, [r5, #4]
    7a6c:	4620      	mov	r0, r4
    7a6e:	f7ff fcec 	bl	744a <ticks_to_expire_prep>
	ticker->force = 1;
    7a72:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    7a74:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    7a76:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7a78:	70e3      	strb	r3, [r4, #3]
    7a7a:	e75b      	b.n	7934 <ticker_job+0x3ec>
    7a7c:	ff172b5a 	.word	0xff172b5a
    7a80:	7f172b59 	.word	0x7f172b59
    7a84:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7a88:	6860      	ldr	r0, [r4, #4]
    7a8a:	2800      	cmp	r0, #0
    7a8c:	d07b      	beq.n	7b86 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    7a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7a90:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7a92:	4b92      	ldr	r3, [pc, #584]	; (7cdc <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    7a94:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7a96:	4992      	ldr	r1, [pc, #584]	; (7ce0 <ticker_job+0x798>)
    7a98:	18d3      	adds	r3, r2, r3
    7a9a:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7a9c:	bf9c      	itt	ls
    7a9e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    7aa2:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7aa6:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7aa8:	bf8b      	itete	hi
    7aaa:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7aac:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    7ab0:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    7ab2:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7ab4:	4403      	add	r3, r0
		return 1;
    7ab6:	bf98      	it	ls
    7ab8:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7aba:	4413      	add	r3, r2
			ticker->lazy_current++;
    7abc:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7abe:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    7ac0:	3201      	adds	r2, #1
    7ac2:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    7ac4:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    7ac6:	4293      	cmp	r3, r2
    7ac8:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7acc:	bf89      	itett	hi
    7ace:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    7ad0:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    7ad2:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7ad4:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7ad6:	bf9c      	itt	ls
    7ad8:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7ada:	60a1      	strls	r1, [r4, #8]
    7adc:	e73d      	b.n	795a <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    7ade:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    7ae0:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    7ae2:	b946      	cbnz	r6, 7af6 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7ae4:	9f07      	ldr	r7, [sp, #28]
    7ae6:	42b8      	cmp	r0, r7
    7ae8:	d200      	bcs.n	7aec <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7aea:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7aec:	930b      	str	r3, [sp, #44]	; 0x2c
    7aee:	9607      	str	r6, [sp, #28]
    7af0:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7af4:	e740      	b.n	7978 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7af6:	9308      	str	r3, [sp, #32]
    7af8:	e7f8      	b.n	7aec <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7afa:	b230      	sxth	r0, r6
    7afc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7b00:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7b04:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7b06:	68bf      	ldr	r7, [r7, #8]
    7b08:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    7b0a:	4567      	cmp	r7, ip
    7b0c:	d20a      	bcs.n	7b24 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    7b0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7b10:	69bf      	ldr	r7, [r7, #24]
    7b12:	2f00      	cmp	r7, #0
    7b14:	f47f af43 	bne.w	799e <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    7b18:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7b1a:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    7b1e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    7b22:	e739      	b.n	7998 <ticker_job+0x450>
			return TICKER_NULL;
    7b24:	26ff      	movs	r6, #255	; 0xff
    7b26:	e73a      	b.n	799e <ticker_job+0x456>
	while (id_insert !=
    7b28:	9b08      	ldr	r3, [sp, #32]
    7b2a:	4598      	cmp	r8, r3
    7b2c:	f43f af59 	beq.w	79e2 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    7b30:	9b08      	ldr	r3, [sp, #32]
    7b32:	2bff      	cmp	r3, #255	; 0xff
    7b34:	d0a8      	beq.n	7a88 <ticker_job+0x540>
    7b36:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    7b38:	b233      	sxth	r3, r6
    7b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b3e:	9307      	str	r3, [sp, #28]
    7b40:	9a07      	ldr	r2, [sp, #28]
    7b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b44:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    7b48:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    7b4a:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    7b4c:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    7b4e:	bf88      	it	hi
    7b50:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    7b52:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    7b54:	bf8c      	ite	hi
    7b56:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    7b58:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    7b5a:	2a00      	cmp	r2, #0
    7b5c:	d094      	beq.n	7a88 <ticker_job+0x540>
    7b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7b60:	4293      	cmp	r3, r2
    7b62:	d891      	bhi.n	7a88 <ticker_job+0x540>
			    skip_collide <= skip &&
    7b64:	78fa      	ldrb	r2, [r7, #3]
    7b66:	78e3      	ldrb	r3, [r4, #3]
    7b68:	429a      	cmp	r2, r3
    7b6a:	d28d      	bcs.n	7a88 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    7b6c:	4631      	mov	r1, r6
    7b6e:	4658      	mov	r0, fp
    7b70:	f7ff fc3f 	bl	73f2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7b74:	78bb      	ldrb	r3, [r7, #2]
    7b76:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7b78:	9a07      	ldr	r2, [sp, #28]
    7b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    7b7c:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    7b7e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    7b82:	46b2      	mov	sl, r6
    7b84:	e6e9      	b.n	795a <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7b86:	2101      	movs	r1, #1
    7b88:	e72f      	b.n	79ea <ticker_job+0x4a2>
		user = &users[count_user];
    7b8a:	9b03      	ldr	r3, [sp, #12]
    7b8c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    7b90:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    7b92:	786b      	ldrb	r3, [r5, #1]
    7b94:	78ea      	ldrb	r2, [r5, #3]
    7b96:	429a      	cmp	r2, r3
    7b98:	d102      	bne.n	7ba0 <ticker_job+0x658>
    7b9a:	3c01      	subs	r4, #1
    7b9c:	b2e4      	uxtb	r4, r4
    7b9e:	e551      	b.n	7644 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7ba4:	011b      	lsls	r3, r3, #4
    7ba6:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7ba8:	5cf3      	ldrb	r3, [r6, r3]
    7baa:	2b01      	cmp	r3, #1
    7bac:	d025      	beq.n	7bfa <ticker_job+0x6b2>
    7bae:	2b02      	cmp	r3, #2
    7bb0:	d12a      	bne.n	7c08 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    7bb2:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7bb6:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7bb8:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7bbc:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    7bc0:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7bc4:	28ff      	cmp	r0, #255	; 0xff
    7bc6:	d004      	beq.n	7bd2 <ticker_job+0x68a>
    7bc8:	6819      	ldr	r1, [r3, #0]
    7bca:	f8db 7014 	ldr.w	r7, [fp, #20]
    7bce:	42b9      	cmp	r1, r7
    7bd0:	d023      	beq.n	7c1a <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    7bd2:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7bd6:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7bda:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7bdc:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    7bde:	29ff      	cmp	r1, #255	; 0xff
    7be0:	d007      	beq.n	7bf2 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    7be2:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7be6:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7bea:	6987      	ldr	r7, [r0, #24]
    7bec:	6880      	ldr	r0, [r0, #8]
    7bee:	b1df      	cbz	r7, 7c28 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    7bf0:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    7bf2:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7bf6:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7bfa:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7bfc:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    7c00:	b113      	cbz	r3, 7c08 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    7c02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7c04:	2000      	movs	r0, #0
    7c06:	4798      	blx	r3
			first = user->first + 1;
    7c08:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7c0a:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7c0c:	3301      	adds	r3, #1
    7c0e:	b2db      	uxtb	r3, r3
				first = 0;
    7c10:	429a      	cmp	r2, r3
    7c12:	bf08      	it	eq
    7c14:	2300      	moveq	r3, #0
			user->first = first;
    7c16:	706b      	strb	r3, [r5, #1]
    7c18:	e7bb      	b.n	7b92 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    7c1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    7c1e:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    7c22:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    7c26:	e7da      	b.n	7bde <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    7c28:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    7c2a:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    7c2e:	e7d6      	b.n	7bde <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    7c30:	9b05      	ldr	r3, [sp, #20]
    7c32:	2bff      	cmp	r3, #255	; 0xff
    7c34:	d107      	bne.n	7c46 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    7c36:	f00a fa55 	bl	120e4 <cntr_cnt_get>
    7c3a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7c3c:	f00a fa16 	bl	1206c <cntr_start>
    7c40:	b908      	cbnz	r0, 7c46 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    7c42:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    7c46:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    7c4a:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    7c4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    7c52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7c56:	260a      	movs	r6, #10
    7c58:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    7c5a:	f00a fa43 	bl	120e4 <cntr_cnt_get>
		cc = instance->ticks_current;
    7c5e:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c62:	1b03      	subs	r3, r0, r4
    7c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    7c68:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    7c6a:	42ab      	cmp	r3, r5
    7c6c:	bf2c      	ite	cs
    7c6e:	18e4      	addcs	r4, r4, r3
    7c70:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    7c72:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7c76:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7c78:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7c7c:	4620      	mov	r0, r4
    7c7e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7c80:	f00a fa30 	bl	120e4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c84:	1bc0      	subs	r0, r0, r7
    7c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c8a:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7c8c:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7c8e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7c92:	42a0      	cmp	r0, r4
    7c94:	f67f ace8 	bls.w	7668 <ticker_job+0x120>
		LL_ASSERT(i);
    7c98:	3e01      	subs	r6, #1
    7c9a:	d1de      	bne.n	7c5a <ticker_job+0x712>
    7c9c:	4b11      	ldr	r3, [pc, #68]	; (7ce4 <ticker_job+0x79c>)
    7c9e:	9301      	str	r3, [sp, #4]
    7ca0:	9300      	str	r3, [sp, #0]
    7ca2:	4a11      	ldr	r2, [pc, #68]	; (7ce8 <ticker_job+0x7a0>)
    7ca4:	4b11      	ldr	r3, [pc, #68]	; (7cec <ticker_job+0x7a4>)
    7ca6:	4912      	ldr	r1, [pc, #72]	; (7cf0 <ticker_job+0x7a8>)
    7ca8:	4812      	ldr	r0, [pc, #72]	; (7cf4 <ticker_job+0x7ac>)
    7caa:	f7f9 f96f 	bl	f8c <printk>
    7cae:	4040      	eors	r0, r0
    7cb0:	f380 8811 	msr	BASEPRI, r0
    7cb4:	f04f 0004 	mov.w	r0, #4
    7cb8:	df02      	svc	2
	instance->job_guard = 0;
    7cba:	2300      	movs	r3, #0
    7cbc:	f88b 301e 	strb.w	r3, [fp, #30]
    7cc0:	e4c8      	b.n	7654 <ticker_job+0x10c>
	if (!pending) {
    7cc2:	2b00      	cmp	r3, #0
    7cc4:	d1f9      	bne.n	7cba <ticker_job+0x772>
		flag_compare_update = 1;
    7cc6:	2301      	movs	r3, #1
    7cc8:	9304      	str	r3, [sp, #16]
    7cca:	e4b2      	b.n	7632 <ticker_job+0xea>
	while (id_insert !=
    7ccc:	45b0      	cmp	r8, r6
    7cce:	f47f af33 	bne.w	7b38 <ticker_job+0x5f0>
    7cd2:	e686      	b.n	79e2 <ticker_job+0x49a>
}
    7cd4:	b015      	add	sp, #84	; 0x54
    7cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cda:	bf00      	nop
    7cdc:	ff172b5a 	.word	0xff172b5a
    7ce0:	7f172b59 	.word	0x7f172b59
    7ce4:	00014b99 	.word	0x00014b99
    7ce8:	00015f55 	.word	0x00015f55
    7cec:	00016db0 	.word	0x00016db0
    7cf0:	00015fa4 	.word	0x00015fa4
    7cf4:	00016dca 	.word	0x00016dca

00007cf8 <ticker_init>:
{
    7cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7cfa:	4d1a      	ldr	r5, [pc, #104]	; (7d64 <ticker_init+0x6c>)
{
    7cfc:	9f05      	ldr	r7, [sp, #20]
    7cfe:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7d02:	262c      	movs	r6, #44	; 0x2c
    7d04:	4346      	muls	r6, r0
    7d06:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7d0a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7d0c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7d10:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7d12:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7d16:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7d1a:	3b01      	subs	r3, #1
    7d1c:	b2db      	uxtb	r3, r3
    7d1e:	2bff      	cmp	r3, #255	; 0xff
    7d20:	d111      	bne.n	7d46 <ticker_init+0x4e>
	if (count_op) {
    7d22:	b9ec      	cbnz	r4, 7d60 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7d24:	222c      	movs	r2, #44	; 0x2c
    7d26:	fb02 5200 	mla	r2, r2, r0, r5
    7d2a:	9908      	ldr	r1, [sp, #32]
    7d2c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    7d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7d30:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7d32:	990a      	ldr	r1, [sp, #40]	; 0x28
    7d34:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7d36:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7d38:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    7d3a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    7d3c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    7d3e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7d40:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7d42:	4620      	mov	r0, r4
    7d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7d46:	b21a      	sxth	r2, r3
    7d48:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7d4c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7d4e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7d52:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7d56:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7d58:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7d5c:	b2e4      	uxtb	r4, r4
    7d5e:	e7dc      	b.n	7d1a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7d60:	2001      	movs	r0, #1
}
    7d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d64:	200007c4 	.word	0x200007c4

00007d68 <ticker_trigger>:
	instance = &_instance[instance_index];
    7d68:	4a07      	ldr	r2, [pc, #28]	; (7d88 <ticker_trigger+0x20>)
    7d6a:	212c      	movs	r1, #44	; 0x2c
    7d6c:	fb00 2301 	mla	r3, r0, r1, r2
{
    7d70:	b410      	push	{r4}
	if (instance->sched_cb) {
    7d72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7d74:	b12c      	cbz	r4, 7d82 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7d76:	46a4      	mov	ip, r4
    7d78:	2201      	movs	r2, #1
    7d7a:	2103      	movs	r1, #3
    7d7c:	2002      	movs	r0, #2
}
    7d7e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7d80:	4760      	bx	ip
}
    7d82:	bc10      	pop	{r4}
    7d84:	4770      	bx	lr
    7d86:	bf00      	nop
    7d88:	200007c4 	.word	0x200007c4

00007d8c <ticker_start>:
{
    7d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7d90:	4f25      	ldr	r7, [pc, #148]	; (7e28 <ticker_start+0x9c>)
    7d92:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7d96:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7d98:	fb08 7000 	mla	r0, r8, r0, r7
    7d9c:	fa0f fc81 	sxth.w	ip, r1
    7da0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7da4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7da8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7dac:	78f4      	ldrb	r4, [r6, #3]
    7dae:	1c65      	adds	r5, r4, #1
    7db0:	b2ed      	uxtb	r5, r5
		last = 0;
    7db2:	45ae      	cmp	lr, r5
    7db4:	bf98      	it	ls
    7db6:	2500      	movls	r5, #0
	if (last == user->first) {
    7db8:	f896 e001 	ldrb.w	lr, [r6, #1]
    7dbc:	45ae      	cmp	lr, r5
    7dbe:	d02f      	beq.n	7e20 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    7dc0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7dc4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7dc8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7dcc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7dd0:	f04f 0a03 	mov.w	sl, #3
    7dd4:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7dd8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7dda:	9b08      	ldr	r3, [sp, #32]
    7ddc:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7de0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7de4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7de8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7dea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7dee:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7df2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7df6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7df8:	2302      	movs	r3, #2
    7dfa:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7dfe:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7e02:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7e04:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7e06:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7e08:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7e0a:	6a03      	ldr	r3, [r0, #32]
    7e0c:	4608      	mov	r0, r1
    7e0e:	4798      	blx	r3
    7e10:	fb09 7308 	mla	r3, r9, r8, r7
    7e14:	2200      	movs	r2, #0
    7e16:	2104      	movs	r1, #4
    7e18:	47a8      	blx	r5
	return user_op->status;
    7e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7e20:	2001      	movs	r0, #1
}
    7e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e26:	bf00      	nop
    7e28:	200007c4 	.word	0x200007c4

00007e2c <ticker_update>:
{
    7e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7e30:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7ec4 <ticker_update+0x98>
    7e34:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7e38:	fb0a 8e00 	mla	lr, sl, r0, r8
    7e3c:	b20f      	sxth	r7, r1
    7e3e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7e42:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7e44:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7e48:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7e4c:	78c4      	ldrb	r4, [r0, #3]
    7e4e:	1c66      	adds	r6, r4, #1
    7e50:	b2f6      	uxtb	r6, r6
		last = 0;
    7e52:	42b5      	cmp	r5, r6
    7e54:	bf98      	it	ls
    7e56:	2600      	movls	r6, #0
	if (last == user->first) {
    7e58:	7845      	ldrb	r5, [r0, #1]
    7e5a:	42b5      	cmp	r5, r6
    7e5c:	d02f      	beq.n	7ebe <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7e5e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7e62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7e66:	0125      	lsls	r5, r4, #4
    7e68:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7e6c:	2704      	movs	r7, #4
    7e6e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7e72:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7e74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7e78:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7e7a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7e7e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7e80:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7e84:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7e86:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7e8a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7e8c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7e90:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7e92:	2302      	movs	r3, #2
    7e94:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7e98:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7e9c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7ea0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7ea2:	f8de 3020 	ldr.w	r3, [lr, #32]
    7ea6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7eaa:	4608      	mov	r0, r1
    7eac:	4798      	blx	r3
    7eae:	fb09 830a 	mla	r3, r9, sl, r8
    7eb2:	2200      	movs	r2, #0
    7eb4:	4639      	mov	r1, r7
    7eb6:	47a8      	blx	r5
	return user_op->status;
    7eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7ebe:	2001      	movs	r0, #1
}
    7ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ec4:	200007c4 	.word	0x200007c4

00007ec8 <ticker_stop>:
{
    7ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7ecc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7f3c <ticker_stop+0x74>
    7ed0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7ed4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7ed8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7eda:	f8de 0004 	ldr.w	r0, [lr, #4]
    7ede:	b20e      	sxth	r6, r1
    7ee0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7ee4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7ee8:	78fc      	ldrb	r4, [r7, #3]
    7eea:	1c65      	adds	r5, r4, #1
    7eec:	b2ed      	uxtb	r5, r5
		last = 0;
    7eee:	42a8      	cmp	r0, r5
    7ef0:	bf98      	it	ls
    7ef2:	2500      	movls	r5, #0
	if (last == user->first) {
    7ef4:	7878      	ldrb	r0, [r7, #1]
    7ef6:	42a8      	cmp	r0, r5
    7ef8:	d01d      	beq.n	7f36 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7efa:	6878      	ldr	r0, [r7, #4]
    7efc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7f00:	0124      	lsls	r4, r4, #4
    7f02:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7f04:	f04f 0c05 	mov.w	ip, #5
    7f08:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7f0c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7f0e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7f10:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7f12:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7f14:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7f16:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7f18:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7f1a:	f8de 3020 	ldr.w	r3, [lr, #32]
    7f1e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7f22:	4608      	mov	r0, r1
    7f24:	4798      	blx	r3
    7f26:	fb08 930a 	mla	r3, r8, sl, r9
    7f2a:	2200      	movs	r2, #0
    7f2c:	2104      	movs	r1, #4
    7f2e:	47a0      	blx	r4
	return user_op->status;
    7f30:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7f36:	2001      	movs	r0, #1
}
    7f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f3c:	200007c4 	.word	0x200007c4

00007f40 <ticker_next_slot_get>:
{
    7f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7f44:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7fc0 <ticker_next_slot_get+0x80>
    7f48:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7f4c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7f4e:	fb0a 8000 	mla	r0, sl, r0, r8
    7f52:	fa0f fe81 	sxth.w	lr, r1
    7f56:	6845      	ldr	r5, [r0, #4]
    7f58:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7f5c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7f60:	78fc      	ldrb	r4, [r7, #3]
    7f62:	1c66      	adds	r6, r4, #1
    7f64:	b2f6      	uxtb	r6, r6
		last = 0;
    7f66:	42b5      	cmp	r5, r6
    7f68:	bf98      	it	ls
    7f6a:	2600      	movls	r6, #0
	if (last == user->first) {
    7f6c:	787d      	ldrb	r5, [r7, #1]
    7f6e:	42b5      	cmp	r5, r6
    7f70:	d023      	beq.n	7fba <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7f72:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7f76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7f7a:	0125      	lsls	r5, r4, #4
    7f7c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7f80:	f04f 0e02 	mov.w	lr, #2
    7f84:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7f88:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7f8a:	9b08      	ldr	r3, [sp, #32]
    7f8c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f90:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7f92:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7f96:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7f98:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7f9a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7fa0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7fa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7fa4:	6a03      	ldr	r3, [r0, #32]
    7fa6:	4608      	mov	r0, r1
    7fa8:	4798      	blx	r3
    7faa:	fb09 830a 	mla	r3, r9, sl, r8
    7fae:	2200      	movs	r2, #0
    7fb0:	2104      	movs	r1, #4
    7fb2:	47a8      	blx	r5
	return user_op->status;
    7fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7fba:	2001      	movs	r0, #1
}
    7fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7fc0:	200007c4 	.word	0x200007c4

00007fc4 <ticker_job_idle_get>:
{
    7fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7fc8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    7fcc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7fd0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7fd4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7fd6:	f8de 0004 	ldr.w	r0, [lr, #4]
    7fda:	b20e      	sxth	r6, r1
    7fdc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7fe0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7fe4:	78fc      	ldrb	r4, [r7, #3]
    7fe6:	1c65      	adds	r5, r4, #1
    7fe8:	b2ed      	uxtb	r5, r5
		last = 0;
    7fea:	42a8      	cmp	r0, r5
    7fec:	bf98      	it	ls
    7fee:	2500      	movls	r5, #0
	if (last == user->first) {
    7ff0:	7878      	ldrb	r0, [r7, #1]
    7ff2:	42a8      	cmp	r0, r5
    7ff4:	d01d      	beq.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	user_op = &user->user_op[user->last];
    7ff6:	6878      	ldr	r0, [r7, #4]
    7ff8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7ffc:	0124      	lsls	r4, r4, #4
    7ffe:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    8000:	f04f 0c01 	mov.w	ip, #1
    8004:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    8008:	20ff      	movs	r0, #255	; 0xff
    800a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    800c:	2002      	movs	r0, #2
    800e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    8010:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    8012:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    8014:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8016:	f8de 3020 	ldr.w	r3, [lr, #32]
    801a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    801e:	4608      	mov	r0, r1
    8020:	4798      	blx	r3
    8022:	fb08 930a 	mla	r3, r8, sl, r9
    8026:	2200      	movs	r2, #0
    8028:	2104      	movs	r1, #4
    802a:	47a0      	blx	r4
	return user_op->status;
    802c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    802e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8032:	2001      	movs	r0, #1
}
    8034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8038:	200007c4 	.word	0x200007c4

0000803c <ticker_job_sched>:
{
    803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8040:	4c08      	ldr	r4, [pc, #32]	; (8064 <ticker_job_sched+0x28>)
    8042:	252c      	movs	r5, #44	; 0x2c
    8044:	fb05 4300 	mla	r3, r5, r0, r4
{
    8048:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    804a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    804c:	6a1b      	ldr	r3, [r3, #32]
    804e:	4608      	mov	r0, r1
    8050:	4798      	blx	r3
    8052:	fb06 4305 	mla	r3, r6, r5, r4
    8056:	46bc      	mov	ip, r7
    8058:	2200      	movs	r2, #0
    805a:	2104      	movs	r1, #4
}
    805c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8060:	4760      	bx	ip
    8062:	bf00      	nop
    8064:	200007c4 	.word	0x200007c4

00008068 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    8068:	f00a b83c 	b.w	120e4 <cntr_cnt_get>

0000806c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    806c:	1a40      	subs	r0, r0, r1
}
    806e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8072:	4770      	bx	lr

00008074 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8074:	b508      	push	{r3, lr}
    8076:	4603      	mov	r3, r0
	if (addr_type > 1) {
    8078:	2b01      	cmp	r3, #1
{
    807a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    807c:	d80e      	bhi.n	809c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    807e:	b133      	cbz	r3, 808e <ll_addr_get+0x1a>
		if (bdaddr) {
    8080:	b119      	cbz	r1, 808a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    8082:	2206      	movs	r2, #6
    8084:	4906      	ldr	r1, [pc, #24]	; (80a0 <ll_addr_get+0x2c>)
    8086:	f7f9 fdc5 	bl	1c14 <memcpy>
		}

		return rnd_addr;
    808a:	4805      	ldr	r0, [pc, #20]	; (80a0 <ll_addr_get+0x2c>)
    808c:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    808e:	b119      	cbz	r1, 8098 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    8090:	2206      	movs	r2, #6
    8092:	4904      	ldr	r1, [pc, #16]	; (80a4 <ll_addr_get+0x30>)
    8094:	f7f9 fdbe 	bl	1c14 <memcpy>
	}

	return pub_addr;
    8098:	4802      	ldr	r0, [pc, #8]	; (80a4 <ll_addr_get+0x30>)
}
    809a:	bd08      	pop	{r3, pc}
		return NULL;
    809c:	2000      	movs	r0, #0
    809e:	bd08      	pop	{r3, pc}
    80a0:	20000822 	.word	0x20000822
    80a4:	2000081c 	.word	0x2000081c

000080a8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    80a8:	b570      	push	{r4, r5, r6, lr}
    80aa:	4606      	mov	r6, r0
    80ac:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    80ae:	f008 f8b3 	bl	10218 <ll_adv_is_enabled>
    80b2:	4604      	mov	r4, r0
    80b4:	b110      	cbz	r0, 80bc <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    80b6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    80b8:	4620      	mov	r0, r4
    80ba:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    80bc:	f008 f8c0 	bl	10240 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    80c0:	f010 0f06 	tst.w	r0, #6
    80c4:	d1f7      	bne.n	80b6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    80c6:	2206      	movs	r2, #6
    80c8:	4629      	mov	r1, r5
	if (addr_type) {
    80ca:	b11e      	cbz	r6, 80d4 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    80cc:	4802      	ldr	r0, [pc, #8]	; (80d8 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    80ce:	f7f9 fda1 	bl	1c14 <memcpy>
    80d2:	e7f1      	b.n	80b8 <ll_addr_set+0x10>
    80d4:	4801      	ldr	r0, [pc, #4]	; (80dc <ll_addr_set+0x34>)
    80d6:	e7fa      	b.n	80ce <ll_addr_set+0x26>
    80d8:	20000822 	.word	0x20000822
    80dc:	2000081c 	.word	0x2000081c

000080e0 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    80e0:	2300      	movs	r3, #0
    80e2:	7003      	strb	r3, [r0, #0]
	*max = 0;
    80e4:	700b      	strb	r3, [r1, #0]
    80e6:	4770      	bx	lr

000080e8 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    80e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    80ea:	4607      	mov	r7, r0
    80ec:	460e      	mov	r6, r1
	while (len) {
    80ee:	460c      	mov	r4, r1
    80f0:	1b35      	subs	r5, r6, r4
    80f2:	443d      	add	r5, r7
    80f4:	b18c      	cbz	r4, 811a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    80f6:	f7f8 ff75 	bl	fe4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    80fa:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    80fc:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    80fe:	d907      	bls.n	8110 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    8100:	2204      	movs	r2, #4
    8102:	eb0d 0102 	add.w	r1, sp, r2
    8106:	4628      	mov	r0, r5
    8108:	f7f9 fd84 	bl	1c14 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    810c:	3c04      	subs	r4, #4
    810e:	e7ef      	b.n	80f0 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    8110:	4622      	mov	r2, r4
    8112:	a901      	add	r1, sp, #4
    8114:	4628      	mov	r0, r5
    8116:	f7f9 fd7d 	bl	1c14 <memcpy>
			break;
		}
	}

	return 0;
}
    811a:	2000      	movs	r0, #0
    811c:	b003      	add	sp, #12
    811e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008120 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8120:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    8122:	2300      	movs	r3, #0
    8124:	f00a f812 	bl	1214c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    8128:	2000      	movs	r0, #0
    812a:	bd08      	pop	{r3, pc}

0000812c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    812c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    812e:	4802      	ldr	r0, [pc, #8]	; (8138 <_hci_driver_init+0xc>)
    8130:	f7fb ff6c 	bl	400c <bt_hci_driver_register>

	return 0;
}
    8134:	2000      	movs	r0, #0
    8136:	bd08      	pop	{r3, pc}
    8138:	00016e1c 	.word	0x00016e1c

0000813c <recv_thread>:
{
    813c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    813e:	4d28      	ldr	r5, [pc, #160]	; (81e0 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8140:	2600      	movs	r6, #0
    8142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8146:	4628      	mov	r0, r5
    8148:	f00b fcce 	bl	13ae8 <_impl_k_queue_get>
		if (node_rx && !buf) {
    814c:	4604      	mov	r4, r0
    814e:	2800      	cmp	r0, #0
    8150:	d036      	beq.n	81c0 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    8152:	f001 fd0f 	bl	9b74 <hci_get_class>
	switch (class) {
    8156:	1e03      	subs	r3, r0, #0
    8158:	9403      	str	r4, [sp, #12]
    815a:	db03      	blt.n	8164 <recv_thread+0x28>
    815c:	2b02      	cmp	r3, #2
    815e:	dd10      	ble.n	8182 <recv_thread+0x46>
    8160:	2b03      	cmp	r3, #3
    8162:	d030      	beq.n	81c6 <recv_thread+0x8a>
		LL_ASSERT(0);
    8164:	4b1f      	ldr	r3, [pc, #124]	; (81e4 <recv_thread+0xa8>)
    8166:	9301      	str	r3, [sp, #4]
    8168:	9300      	str	r3, [sp, #0]
    816a:	4a1f      	ldr	r2, [pc, #124]	; (81e8 <recv_thread+0xac>)
    816c:	4b1f      	ldr	r3, [pc, #124]	; (81ec <recv_thread+0xb0>)
    816e:	4920      	ldr	r1, [pc, #128]	; (81f0 <recv_thread+0xb4>)
    8170:	4820      	ldr	r0, [pc, #128]	; (81f4 <recv_thread+0xb8>)
    8172:	f7f8 ff0b 	bl	f8c <printk>
    8176:	4040      	eors	r0, r0
    8178:	f380 8811 	msr	BASEPRI, r0
    817c:	f04f 0004 	mov.w	r0, #4
    8180:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8182:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8184:	bf0e      	itee	eq
    8186:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    818c:	2001      	movne	r0, #1
    818e:	f7fc f849 	bl	4224 <bt_buf_get_rx>
    8192:	4604      	mov	r4, r0
		if (buf) {
    8194:	b118      	cbz	r0, 819e <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    8196:	4601      	mov	r1, r0
    8198:	9803      	ldr	r0, [sp, #12]
    819a:	f001 f935 	bl	9408 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    819e:	9b03      	ldr	r3, [sp, #12]
    81a0:	2100      	movs	r1, #0
    81a2:	88d8      	ldrh	r0, [r3, #6]
    81a4:	f008 fcb6 	bl	10b14 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    81a8:	a804      	add	r0, sp, #16
    81aa:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    81ae:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    81b0:	f008 fc3a 	bl	10a28 <ll_rx_mem_release>
		if (buf) {
    81b4:	b124      	cbz	r4, 81c0 <recv_thread+0x84>
			if (buf->len) {
    81b6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    81b8:	4620      	mov	r0, r4
			if (buf->len) {
    81ba:	b173      	cbz	r3, 81da <recv_thread+0x9e>
				bt_recv(buf);
    81bc:	f7fb f96e 	bl	349c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    81c0:	f00b fef4 	bl	13fac <_impl_k_yield>
    81c4:	e7bd      	b.n	8142 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    81c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    81ca:	f7fc f82b 	bl	4224 <bt_buf_get_rx>
    81ce:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    81d0:	4601      	mov	r1, r0
    81d2:	9803      	ldr	r0, [sp, #12]
    81d4:	f001 f8d8 	bl	9388 <hci_acl_encode>
    81d8:	e7e1      	b.n	819e <recv_thread+0x62>
				net_buf_unref(buf);
    81da:	f00a fded 	bl	12db8 <net_buf_unref>
    81de:	e7ef      	b.n	81c0 <recv_thread+0x84>
    81e0:	20003f3c 	.word	0x20003f3c
    81e4:	00014b99 	.word	0x00014b99
    81e8:	00015f55 	.word	0x00015f55
    81ec:	00016ded 	.word	0x00016ded
    81f0:	00015fa4 	.word	0x00015fa4
    81f4:	00015ec9 	.word	0x00015ec9

000081f8 <hci_driver_send>:
{
    81f8:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    81fa:	8983      	ldrh	r3, [r0, #12]
{
    81fc:	b087      	sub	sp, #28
    81fe:	4605      	mov	r5, r0
	if (!buf->len) {
    8200:	b96b      	cbnz	r3, 821e <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    8202:	4b20      	ldr	r3, [pc, #128]	; (8284 <hci_driver_send+0x8c>)
    8204:	9301      	str	r3, [sp, #4]
    8206:	9300      	str	r3, [sp, #0]
    8208:	4a1f      	ldr	r2, [pc, #124]	; (8288 <hci_driver_send+0x90>)
    820a:	4b20      	ldr	r3, [pc, #128]	; (828c <hci_driver_send+0x94>)
    820c:	4920      	ldr	r1, [pc, #128]	; (8290 <hci_driver_send+0x98>)
    820e:	4821      	ldr	r0, [pc, #132]	; (8294 <hci_driver_send+0x9c>)
    8210:	f7f8 febc 	bl	f8c <printk>
		return -EINVAL;
    8214:	f06f 0415 	mvn.w	r4, #21
}
    8218:	4620      	mov	r0, r4
    821a:	b007      	add	sp, #28
    821c:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    821e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    8220:	b183      	cbz	r3, 8244 <hci_driver_send+0x4c>
    8222:	2b02      	cmp	r3, #2
    8224:	d11f      	bne.n	8266 <hci_driver_send+0x6e>
	err = hci_acl_handle(buf, &evt);
    8226:	a905      	add	r1, sp, #20
    8228:	f001 f81e 	bl	9268 <hci_acl_handle>
    822c:	4604      	mov	r4, r0
	if (evt) {
    822e:	9805      	ldr	r0, [sp, #20]
    8230:	b108      	cbz	r0, 8236 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    8232:	f7fb fdc1 	bl	3db8 <bt_recv_prio>
	if (!err) {
    8236:	2c00      	cmp	r4, #0
    8238:	d1ee      	bne.n	8218 <hci_driver_send+0x20>
		net_buf_unref(buf);
    823a:	4628      	mov	r0, r5
    823c:	f00a fdbc 	bl	12db8 <net_buf_unref>
    8240:	2400      	movs	r4, #0
    8242:	e7e9      	b.n	8218 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    8244:	f000 faaa 	bl	879c <hci_cmd_handle>
	if (evt) {
    8248:	4602      	mov	r2, r0
    824a:	2800      	cmp	r0, #0
    824c:	d0f5      	beq.n	823a <hci_driver_send+0x42>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    824e:	6883      	ldr	r3, [r0, #8]
    8250:	7819      	ldrb	r1, [r3, #0]
    8252:	2913      	cmp	r1, #19
    8254:	d812      	bhi.n	827c <hci_driver_send+0x84>
    8256:	2301      	movs	r3, #1
    8258:	408b      	lsls	r3, r1
    825a:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    825e:	d00d      	beq.n	827c <hci_driver_send+0x84>
			bt_recv_prio(evt);
    8260:	f7fb fdaa 	bl	3db8 <bt_recv_prio>
    8264:	e7e9      	b.n	823a <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    8266:	4a07      	ldr	r2, [pc, #28]	; (8284 <hci_driver_send+0x8c>)
    8268:	9202      	str	r2, [sp, #8]
    826a:	e88d 000c 	stmia.w	sp, {r2, r3}
    826e:	4908      	ldr	r1, [pc, #32]	; (8290 <hci_driver_send+0x98>)
    8270:	4b06      	ldr	r3, [pc, #24]	; (828c <hci_driver_send+0x94>)
    8272:	4a05      	ldr	r2, [pc, #20]	; (8288 <hci_driver_send+0x90>)
    8274:	4808      	ldr	r0, [pc, #32]	; (8298 <hci_driver_send+0xa0>)
    8276:	f7f8 fe89 	bl	f8c <printk>
    827a:	e7cb      	b.n	8214 <hci_driver_send+0x1c>
			bt_recv(evt);
    827c:	4610      	mov	r0, r2
    827e:	f7fb f90d 	bl	349c <bt_recv>
    8282:	e7da      	b.n	823a <hci_driver_send+0x42>
    8284:	00014b99 	.word	0x00014b99
    8288:	00015f55 	.word	0x00015f55
    828c:	00016df9 	.word	0x00016df9
    8290:	00015fa4 	.word	0x00015fa4
    8294:	00016e5d 	.word	0x00016e5d
    8298:	00016e7e 	.word	0x00016e7e

0000829c <prio_recv_thread>:
{
    829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    829e:	4d14      	ldr	r5, [pc, #80]	; (82f0 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    82a0:	4e14      	ldr	r6, [pc, #80]	; (82f4 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    82a2:	f10d 0102 	add.w	r1, sp, #2
    82a6:	a801      	add	r0, sp, #4
    82a8:	f008 fb86 	bl	109b8 <ll_rx_get>
    82ac:	4604      	mov	r4, r0
    82ae:	b940      	cbnz	r0, 82c2 <prio_recv_thread+0x26>
		if (node_rx) {
    82b0:	9b01      	ldr	r3, [sp, #4]
    82b2:	b1bb      	cbz	r3, 82e4 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    82b4:	f008 fe62 	bl	10f7c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    82b8:	9901      	ldr	r1, [sp, #4]
    82ba:	4630      	mov	r0, r6
    82bc:	f00b fbf0 	bl	13aa0 <k_queue_append>
    82c0:	e7ef      	b.n	82a2 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    82c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    82c6:	2001      	movs	r0, #1
    82c8:	f7fb ffac 	bl	4224 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    82cc:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    82ce:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    82d0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    82d4:	f001 fc3a 	bl	9b4c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    82d8:	4638      	mov	r0, r7
    82da:	f7fb fd6d 	bl	3db8 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    82de:	f00b fe65 	bl	13fac <_impl_k_yield>
    82e2:	e7de      	b.n	82a2 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    82e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    82e8:	4628      	mov	r0, r5
    82ea:	f00b fec6 	bl	1407a <_impl_k_sem_take>
    82ee:	e7d8      	b.n	82a2 <prio_recv_thread+0x6>
    82f0:	20003f24 	.word	0x20003f24
    82f4:	20003f3c 	.word	0x20003f3c

000082f8 <hci_driver_open>:
{
    82f8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    82fa:	481a      	ldr	r0, [pc, #104]	; (8364 <hci_driver_open+0x6c>)
{
    82fc:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    82fe:	f008 ff1b 	bl	11138 <ll_init>
	if (err) {
    8302:	4604      	mov	r4, r0
    8304:	b160      	cbz	r0, 8320 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    8306:	4b18      	ldr	r3, [pc, #96]	; (8368 <hci_driver_open+0x70>)
    8308:	9302      	str	r3, [sp, #8]
    830a:	e88d 0018 	stmia.w	sp, {r3, r4}
    830e:	4a17      	ldr	r2, [pc, #92]	; (836c <hci_driver_open+0x74>)
    8310:	4b17      	ldr	r3, [pc, #92]	; (8370 <hci_driver_open+0x78>)
    8312:	4918      	ldr	r1, [pc, #96]	; (8374 <hci_driver_open+0x7c>)
    8314:	4818      	ldr	r0, [pc, #96]	; (8378 <hci_driver_open+0x80>)
    8316:	f7f8 fe39 	bl	f8c <printk>
}
    831a:	4620      	mov	r0, r4
    831c:	b006      	add	sp, #24
    831e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    8320:	f001 fc40 	bl	9ba4 <hci_init>

    8324:	f06f 0309 	mvn.w	r3, #9
    8328:	9303      	str	r3, [sp, #12]
    832a:	9405      	str	r4, [sp, #20]
    832c:	9404      	str	r4, [sp, #16]
    832e:	9402      	str	r4, [sp, #8]
    8330:	9401      	str	r4, [sp, #4]
    8332:	9400      	str	r4, [sp, #0]
    8334:	4b11      	ldr	r3, [pc, #68]	; (837c <hci_driver_open+0x84>)
    8336:	4912      	ldr	r1, [pc, #72]	; (8380 <hci_driver_open+0x88>)
    8338:	4812      	ldr	r0, [pc, #72]	; (8384 <hci_driver_open+0x8c>)
    833a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    833e:	f00c f871 	bl	14424 <_impl_k_thread_create>
    8342:	f06f 0307 	mvn.w	r3, #7
    8346:	9303      	str	r3, [sp, #12]
    8348:	9405      	str	r4, [sp, #20]
    834a:	9404      	str	r4, [sp, #16]
    834c:	9402      	str	r4, [sp, #8]
    834e:	9401      	str	r4, [sp, #4]
    8350:	9400      	str	r4, [sp, #0]
    8352:	4b0d      	ldr	r3, [pc, #52]	; (8388 <hci_driver_open+0x90>)
    8354:	490d      	ldr	r1, [pc, #52]	; (838c <hci_driver_open+0x94>)
    8356:	480e      	ldr	r0, [pc, #56]	; (8390 <hci_driver_open+0x98>)
    8358:	f240 522c 	movw	r2, #1324	; 0x52c
    835c:	f00c f862 	bl	14424 <_impl_k_thread_create>
    8360:	e7db      	b.n	831a <hci_driver_open+0x22>
    8362:	bf00      	nop
    8364:	20003f24 	.word	0x20003f24
    8368:	00014b99 	.word	0x00014b99
    836c:	00015f55 	.word	0x00015f55
    8370:	00016e09 	.word	0x00016e09
    8374:	00015fa4 	.word	0x00015fa4
    8378:	00016e30 	.word	0x00016e30
    837c:	0000829d 	.word	0x0000829d
    8380:	200020c8 	.word	0x200020c8
    8384:	200018a4 	.word	0x200018a4
    8388:	0000813d 	.word	0x0000813d
    838c:	200023b8 	.word	0x200023b8
    8390:	20001834 	.word	0x20001834

00008394 <sys_put_le32>:
	dst[1] = val >> 8;
    8394:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    8398:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    839a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    839c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    839e:	0a00      	lsrs	r0, r0, #8
    83a0:	704b      	strb	r3, [r1, #1]
    83a2:	70c8      	strb	r0, [r1, #3]
    83a4:	4770      	bx	lr

000083a6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    83a6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    83a8:	3008      	adds	r0, #8
{
    83aa:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    83ac:	2102      	movs	r1, #2
{
    83ae:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    83b0:	f00a fd34 	bl	12e1c <net_buf_simple_add>
	hdr->evt = evt;
    83b4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    83b6:	7044      	strb	r4, [r0, #1]
    83b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000083bc <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    83bc:	b538      	push	{r3, r4, r5, lr}
    83be:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    83c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    83c4:	f7fb ff3e 	bl	4244 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    83c8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    83ca:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    83cc:	210f      	movs	r1, #15
    83ce:	f7ff ffea 	bl	83a6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    83d2:	2104      	movs	r1, #4
    83d4:	f104 0008 	add.w	r0, r4, #8
    83d8:	f00a fd20 	bl	12e1c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    83dc:	2301      	movs	r3, #1
    83de:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    83e0:	4b02      	ldr	r3, [pc, #8]	; (83ec <cmd_status+0x30>)
	cs->status = status;
    83e2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    83e4:	881b      	ldrh	r3, [r3, #0]
    83e6:	8043      	strh	r3, [r0, #2]

	return buf;
}
    83e8:	4620      	mov	r0, r4
    83ea:	bd38      	pop	{r3, r4, r5, pc}
    83ec:	20000828 	.word	0x20000828

000083f0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    83f0:	b570      	push	{r4, r5, r6, lr}
    83f2:	4604      	mov	r4, r0
    83f4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    83f6:	3201      	adds	r2, #1
{
    83f8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    83fa:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    83fc:	b2d2      	uxtb	r2, r2
    83fe:	213e      	movs	r1, #62	; 0x3e
    8400:	f7ff ffd1 	bl	83a6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8404:	2101      	movs	r1, #1
    8406:	4620      	mov	r0, r4
    8408:	f00a fd08 	bl	12e1c <net_buf_simple_add>
	me->subevent = subevt;
    840c:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    840e:	4629      	mov	r1, r5
    8410:	4620      	mov	r0, r4
}
    8412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8416:	f00a bd01 	b.w	12e1c <net_buf_simple_add>
	...

0000841c <cmd_complete>:
{
    841c:	b538      	push	{r3, r4, r5, lr}
    841e:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8424:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8426:	f7fb ff0d 	bl	4244 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    842a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    842c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    842e:	b2d2      	uxtb	r2, r2
    8430:	210e      	movs	r1, #14
    8432:	f7ff ffb8 	bl	83a6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8436:	6820      	ldr	r0, [r4, #0]
    8438:	2103      	movs	r1, #3
    843a:	3008      	adds	r0, #8
    843c:	f00a fcee 	bl	12e1c <net_buf_simple_add>
	cc->ncmd = 1;
    8440:	2301      	movs	r3, #1
    8442:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8444:	4b05      	ldr	r3, [pc, #20]	; (845c <cmd_complete+0x40>)
    8446:	881b      	ldrh	r3, [r3, #0]
    8448:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    844c:	6820      	ldr	r0, [r4, #0]
    844e:	4629      	mov	r1, r5
    8450:	3008      	adds	r0, #8
}
    8452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8456:	f00a bce1 	b.w	12e1c <net_buf_simple_add>
    845a:	bf00      	nop
    845c:	20000828 	.word	0x20000828

00008460 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8460:	4b0e      	ldr	r3, [pc, #56]	; (849c <encrypt_change+0x3c>)
{
    8462:	b570      	push	{r4, r5, r6, lr}
    8464:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8466:	e9d3 2300 	ldrd	r2, r3, [r3]
    846a:	2300      	movs	r3, #0
    846c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8470:	4313      	orrs	r3, r2
{
    8472:	4604      	mov	r4, r0
    8474:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8476:	d010      	beq.n	849a <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8478:	2204      	movs	r2, #4
    847a:	2108      	movs	r1, #8
    847c:	4628      	mov	r0, r5
    847e:	f7ff ff92 	bl	83a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8482:	2104      	movs	r1, #4
    8484:	f105 0008 	add.w	r0, r5, #8
    8488:	f00a fcc8 	bl	12e1c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    848c:	fab4 f384 	clz	r3, r4
    8490:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8492:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8494:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8498:	70c3      	strb	r3, [r0, #3]
    849a:	bd70      	pop	{r4, r5, r6, pc}
    849c:	20003d30 	.word	0x20003d30

000084a0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    84a0:	b570      	push	{r4, r5, r6, lr}
    84a2:	4604      	mov	r4, r0
    84a4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84a6:	4b13      	ldr	r3, [pc, #76]	; (84f4 <le_remote_feat_complete+0x54>)
{
    84a8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    84ae:	2200      	movs	r2, #0
    84b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    84b4:	4313      	orrs	r3, r2
{
    84b6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84b8:	d01b      	beq.n	84f2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    84ba:	4b0f      	ldr	r3, [pc, #60]	; (84f8 <le_remote_feat_complete+0x58>)
    84bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    84c0:	2300      	movs	r3, #0
    84c2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84c6:	4313      	orrs	r3, r2
    84c8:	d013      	beq.n	84f2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    84ca:	220b      	movs	r2, #11
    84cc:	2104      	movs	r1, #4
    84ce:	f7ff ff8f 	bl	83f0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    84d2:	2208      	movs	r2, #8
	sep->status = status;
    84d4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    84d6:	f8a0 6001 	strh.w	r6, [r0, #1]
    84da:	3003      	adds	r0, #3
	if (!status) {
    84dc:	b924      	cbnz	r4, 84e8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    84de:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    84e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    84e4:	f7f9 bb96 	b.w	1c14 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    84e8:	2100      	movs	r1, #0
}
    84ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    84ee:	f7f9 bbbd 	b.w	1c6c <memset>
    84f2:	bd70      	pop	{r4, r5, r6, pc}
    84f4:	20003d30 	.word	0x20003d30
    84f8:	20003d38 	.word	0x20003d38

000084fc <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    84fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8500:	4605      	mov	r5, r0
    8502:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8504:	4b46      	ldr	r3, [pc, #280]	; (8620 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8506:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8508:	e9d3 2300 	ldrd	r2, r3, [r3]
    850c:	f240 2801 	movw	r8, #513	; 0x201
    8510:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8514:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8518:	ea03 0309 	and.w	r3, r3, r9
    851c:	ea02 0208 	and.w	r2, r2, r8
    8520:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    8522:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8524:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8528:	d077      	beq.n	861a <le_conn_complete.part.39+0x11e>
	if (!status) {
    852a:	2d00      	cmp	r5, #0
    852c:	d150      	bne.n	85d0 <le_conn_complete.part.39+0xd4>
		conn_count++;
    852e:	4a3d      	ldr	r2, [pc, #244]	; (8624 <le_conn_complete.part.39+0x128>)
    8530:	6813      	ldr	r3, [r2, #0]
    8532:	3301      	adds	r3, #1
    8534:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8536:	ea5a 030b 	orrs.w	r3, sl, fp
    853a:	f101 0803 	add.w	r8, r1, #3
    853e:	d151      	bne.n	85e4 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8540:	2212      	movs	r2, #18
    8542:	2101      	movs	r1, #1
    8544:	f7ff ff54 	bl	83f0 <meta_evt>
	lecc->status = 0x00;
    8548:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    854a:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    854e:	7863      	ldrb	r3, [r4, #1]
    8550:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    8552:	78a3      	ldrb	r3, [r4, #2]
    8554:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8556:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    8558:	2206      	movs	r2, #6
    855a:	4641      	mov	r1, r8
    855c:	3005      	adds	r0, #5
    855e:	f7f9 fb59 	bl	1c14 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8562:	8ae3      	ldrh	r3, [r4, #22]
    8564:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8568:	8b23      	ldrh	r3, [r4, #24]
    856a:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    856e:	8b63      	ldrh	r3, [r4, #26]
    8570:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8574:	7f23      	ldrb	r3, [r4, #28]
    8576:	747b      	strb	r3, [r7, #17]
    8578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    857c:	221e      	movs	r2, #30
    857e:	210a      	movs	r1, #10
    8580:	f7ff ff36 	bl	83f0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8584:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8586:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    8588:	2100      	movs	r1, #0
    858a:	f7f9 fb6f 	bl	1c6c <memset>
		lecc->status = status;
    858e:	7025      	strb	r5, [r4, #0]
    8590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8594:	7d63      	ldrb	r3, [r4, #21]
    8596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    859a:	2b40      	cmp	r3, #64	; 0x40
    859c:	d138      	bne.n	8610 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    859e:	2206      	movs	r2, #6
    85a0:	f104 0110 	add.w	r1, r4, #16
    85a4:	f7f9 fb36 	bl	1c14 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    85a8:	2206      	movs	r2, #6
    85aa:	f104 0109 	add.w	r1, r4, #9
    85ae:	f107 0011 	add.w	r0, r7, #17
    85b2:	f7f9 fb2f 	bl	1c14 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    85b6:	8ae3      	ldrh	r3, [r4, #22]
    85b8:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    85bc:	8b23      	ldrh	r3, [r4, #24]
    85be:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    85c2:	8b63      	ldrh	r3, [r4, #26]
    85c4:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    85c8:	7f23      	ldrb	r3, [r4, #28]
    85ca:	777b      	strb	r3, [r7, #29]
    85cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    85d0:	ea5a 030b 	orrs.w	r3, sl, fp
    85d4:	d1d2      	bne.n	857c <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    85d6:	2212      	movs	r2, #18
    85d8:	2101      	movs	r1, #1
    85da:	f7ff ff09 	bl	83f0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    85de:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    85e0:	4604      	mov	r4, r0
    85e2:	e7d1      	b.n	8588 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    85e4:	221e      	movs	r2, #30
    85e6:	210a      	movs	r1, #10
    85e8:	f7ff ff02 	bl	83f0 <meta_evt>
		leecc->status = 0x00;
    85ec:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    85ee:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    85f2:	7863      	ldrb	r3, [r4, #1]
    85f4:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    85f6:	78a3      	ldrb	r3, [r4, #2]
    85f8:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    85fa:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    85fc:	2206      	movs	r2, #6
    85fe:	4641      	mov	r1, r8
    8600:	3005      	adds	r0, #5
    8602:	f7f9 fb07 	bl	1c14 <memcpy>
		if ((radio_cc->own_addr_type) &&
    8606:	7be3      	ldrb	r3, [r4, #15]
    8608:	f107 000b 	add.w	r0, r7, #11
    860c:	2b00      	cmp	r3, #0
    860e:	d1c1      	bne.n	8594 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    8610:	2206      	movs	r2, #6
    8612:	2100      	movs	r1, #0
    8614:	f7f9 fb2a 	bl	1c6c <memset>
    8618:	e7c6      	b.n	85a8 <le_conn_complete.part.39+0xac>
    861a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    861e:	bf00      	nop
    8620:	20003d38 	.word	0x20003d38
    8624:	2000082c 	.word	0x2000082c

00008628 <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8628:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    862a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    862c:	b08a      	sub	sp, #40	; 0x28
    862e:	4604      	mov	r4, r0
    8630:	460e      	mov	r6, r1
    8632:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    8634:	2b03      	cmp	r3, #3
    8636:	d820      	bhi.n	867a <bt_addr_le_to_str.constprop.70+0x52>
    8638:	e8df f003 	tbb	[pc, r3]
    863c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    8640:	4911      	ldr	r1, [pc, #68]	; (8688 <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    8642:	4628      	mov	r0, r5
    8644:	f7f9 fab2 	bl	1bac <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8648:	7862      	ldrb	r2, [r4, #1]
    864a:	9204      	str	r2, [sp, #16]
    864c:	78a2      	ldrb	r2, [r4, #2]
    864e:	9203      	str	r2, [sp, #12]
    8650:	78e2      	ldrb	r2, [r4, #3]
    8652:	9202      	str	r2, [sp, #8]
    8654:	7922      	ldrb	r2, [r4, #4]
    8656:	9201      	str	r2, [sp, #4]
    8658:	7962      	ldrb	r2, [r4, #5]
    865a:	9200      	str	r2, [sp, #0]
    865c:	79a3      	ldrb	r3, [r4, #6]
    865e:	9505      	str	r5, [sp, #20]
    8660:	4a0a      	ldr	r2, [pc, #40]	; (868c <bt_addr_le_to_str.constprop.70+0x64>)
    8662:	211b      	movs	r1, #27
    8664:	4630      	mov	r0, r6
    8666:	f7f8 fc9f 	bl	fa8 <snprintk>
}
    866a:	b00a      	add	sp, #40	; 0x28
    866c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    866e:	4908      	ldr	r1, [pc, #32]	; (8690 <bt_addr_le_to_str.constprop.70+0x68>)
    8670:	e7e7      	b.n	8642 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    8672:	4908      	ldr	r1, [pc, #32]	; (8694 <bt_addr_le_to_str.constprop.70+0x6c>)
    8674:	e7e5      	b.n	8642 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    8676:	4908      	ldr	r1, [pc, #32]	; (8698 <bt_addr_le_to_str.constprop.70+0x70>)
    8678:	e7e3      	b.n	8642 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    867a:	4a08      	ldr	r2, [pc, #32]	; (869c <bt_addr_le_to_str.constprop.70+0x74>)
    867c:	210a      	movs	r1, #10
    867e:	4628      	mov	r0, r5
    8680:	f7f8 fc92 	bl	fa8 <snprintk>
    8684:	e7e0      	b.n	8648 <bt_addr_le_to_str.constprop.70+0x20>
    8686:	bf00      	nop
    8688:	00014b05 	.word	0x00014b05
    868c:	00014b2e 	.word	0x00014b2e
    8690:	00014b0c 	.word	0x00014b0c
    8694:	00014b13 	.word	0x00014b13
    8698:	00014b1d 	.word	0x00014b1d
    869c:	00014b27 	.word	0x00014b27

000086a0 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    86a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86a4:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    86a6:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    86a8:	4d32      	ldr	r5, [pc, #200]	; (8774 <le_adv_ext_report.isra.66+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    86aa:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    86ac:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    86ae:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    86b0:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    86b2:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    86b4:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    86b6:	b25b      	sxtb	r3, r3
    86b8:	9306      	str	r3, [sp, #24]
    86ba:	7823      	ldrb	r3, [r4, #0]
    86bc:	9201      	str	r2, [sp, #4]
    86be:	09d9      	lsrs	r1, r3, #7
    86c0:	9105      	str	r1, [sp, #20]
    86c2:	f3c3 1180 	ubfx	r1, r3, #6, #1
    86c6:	f003 030f 	and.w	r3, r3, #15
    86ca:	9104      	str	r1, [sp, #16]
    86cc:	9302      	str	r3, [sp, #8]
    86ce:	9500      	str	r5, [sp, #0]
    86d0:	4b29      	ldr	r3, [pc, #164]	; (8778 <le_adv_ext_report.isra.66+0xd8>)
    86d2:	4a2a      	ldr	r2, [pc, #168]	; (877c <le_adv_ext_report.isra.66+0xdc>)
    86d4:	492a      	ldr	r1, [pc, #168]	; (8780 <le_adv_ext_report.isra.66+0xe0>)
    86d6:	482b      	ldr	r0, [pc, #172]	; (8784 <le_adv_ext_report.isra.66+0xe4>)
    86d8:	f7f8 fc58 	bl	f8c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    86dc:	7823      	ldrb	r3, [r4, #0]
    86de:	f003 030f 	and.w	r3, r3, #15
    86e2:	2b07      	cmp	r3, #7
    86e4:	d143      	bne.n	876e <le_adv_ext_report.isra.66+0xce>
    86e6:	7863      	ldrb	r3, [r4, #1]
    86e8:	2b00      	cmp	r3, #0
    86ea:	d040      	beq.n	876e <le_adv_ext_report.isra.66+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    86ec:	78a3      	ldrb	r3, [r4, #2]
    86ee:	4924      	ldr	r1, [pc, #144]	; (8780 <le_adv_ext_report.isra.66+0xe0>)
    86f0:	9503      	str	r5, [sp, #12]
    86f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    86f6:	099b      	lsrs	r3, r3, #6
    86f8:	9202      	str	r2, [sp, #8]
    86fa:	9301      	str	r3, [sp, #4]
    86fc:	9500      	str	r5, [sp, #0]
    86fe:	4b1e      	ldr	r3, [pc, #120]	; (8778 <le_adv_ext_report.isra.66+0xd8>)
    8700:	4a1e      	ldr	r2, [pc, #120]	; (877c <le_adv_ext_report.isra.66+0xdc>)
    8702:	4821      	ldr	r0, [pc, #132]	; (8788 <le_adv_ext_report.isra.66+0xe8>)
    8704:	f7f8 fc42 	bl	f8c <printk>
		if (!p->ext_hdr_len) {
    8708:	78a3      	ldrb	r3, [r4, #2]
    870a:	0699      	lsls	r1, r3, #26
    870c:	d02f      	beq.n	876e <le_adv_ext_report.isra.66+0xce>
		if (h->adv_addr) {
    870e:	78e3      	ldrb	r3, [r4, #3]
    8710:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    8712:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    8716:	d51c      	bpl.n	8752 <le_adv_ext_report.isra.66+0xb2>
			addr.type = adv->tx_addr;
    8718:	7823      	ldrb	r3, [r4, #0]
    871a:	af12      	add	r7, sp, #72	; 0x48
    871c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8720:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8724:	2206      	movs	r2, #6
    8726:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8728:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    872c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    8730:	f7f9 fa70 	bl	1c14 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8734:	4641      	mov	r1, r8
    8736:	4638      	mov	r0, r7
    8738:	f7ff ff76 	bl	8628 <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    873c:	9502      	str	r5, [sp, #8]
    873e:	e88d 0120 	stmia.w	sp, {r5, r8}
    8742:	4b0d      	ldr	r3, [pc, #52]	; (8778 <le_adv_ext_report.isra.66+0xd8>)
    8744:	4a0d      	ldr	r2, [pc, #52]	; (877c <le_adv_ext_report.isra.66+0xdc>)
    8746:	490e      	ldr	r1, [pc, #56]	; (8780 <le_adv_ext_report.isra.66+0xe0>)
    8748:	4810      	ldr	r0, [pc, #64]	; (878c <le_adv_ext_report.isra.66+0xec>)
			ptr += BDADDR_SIZE;
    874a:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    874e:	f7f8 fc1d 	bl	f8c <printk>
		if (h->tx_pwr) {
    8752:	78e3      	ldrb	r3, [r4, #3]
    8754:	065b      	lsls	r3, r3, #25
    8756:	d50a      	bpl.n	876e <le_adv_ext_report.isra.66+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8758:	9502      	str	r5, [sp, #8]
    875a:	f996 3000 	ldrsb.w	r3, [r6]
    875e:	9301      	str	r3, [sp, #4]
    8760:	9500      	str	r5, [sp, #0]
    8762:	4b05      	ldr	r3, [pc, #20]	; (8778 <le_adv_ext_report.isra.66+0xd8>)
    8764:	4a05      	ldr	r2, [pc, #20]	; (877c <le_adv_ext_report.isra.66+0xdc>)
    8766:	4906      	ldr	r1, [pc, #24]	; (8780 <le_adv_ext_report.isra.66+0xe0>)
    8768:	4809      	ldr	r0, [pc, #36]	; (8790 <le_adv_ext_report.isra.66+0xf0>)
    876a:	f7f8 fc0f 	bl	f8c <printk>
}
    876e:	b012      	add	sp, #72	; 0x48
    8770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8774:	00014b99 	.word	0x00014b99
    8778:	00016eec 	.word	0x00016eec
    877c:	00015fdf 	.word	0x00015fdf
    8780:	00015fa4 	.word	0x00015fa4
    8784:	00017149 	.word	0x00017149
    8788:	00017196 	.word	0x00017196
    878c:	000171c7 	.word	0x000171c7
    8790:	000171e0 	.word	0x000171e0

00008794 <sys_get_le64>:
{
    8794:	4603      	mov	r3, r0
}
    8796:	6800      	ldr	r0, [r0, #0]
    8798:	6859      	ldr	r1, [r3, #4]
    879a:	4770      	bx	lr

0000879c <hci_cmd_handle>:
{
    879c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    879e:	8981      	ldrh	r1, [r0, #12]
{
    87a0:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    87a2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    87a4:	2902      	cmp	r1, #2
{
    87a6:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    87a8:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    87aa:	d80b      	bhi.n	87c4 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    87ac:	4bbe      	ldr	r3, [pc, #760]	; (8aa8 <hci_cmd_handle+0x30c>)
    87ae:	9301      	str	r3, [sp, #4]
    87b0:	9300      	str	r3, [sp, #0]
    87b2:	4abe      	ldr	r2, [pc, #760]	; (8aac <hci_cmd_handle+0x310>)
    87b4:	4bbe      	ldr	r3, [pc, #760]	; (8ab0 <hci_cmd_handle+0x314>)
    87b6:	49bf      	ldr	r1, [pc, #764]	; (8ab4 <hci_cmd_handle+0x318>)
    87b8:	48bf      	ldr	r0, [pc, #764]	; (8ab8 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    87ba:	f7f8 fbe7 	bl	f8c <printk>
		return NULL;
    87be:	4628      	mov	r0, r5
}
    87c0:	b013      	add	sp, #76	; 0x4c
    87c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    87c4:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    87c6:	4ebd      	ldr	r6, [pc, #756]	; (8abc <hci_cmd_handle+0x320>)
    87c8:	781a      	ldrb	r2, [r3, #0]
    87ca:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    87cc:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    87ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    87d2:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    87d4:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    87d6:	d907      	bls.n	87e8 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    87d8:	4bb3      	ldr	r3, [pc, #716]	; (8aa8 <hci_cmd_handle+0x30c>)
    87da:	9301      	str	r3, [sp, #4]
    87dc:	9300      	str	r3, [sp, #0]
    87de:	4ab3      	ldr	r2, [pc, #716]	; (8aac <hci_cmd_handle+0x310>)
    87e0:	4bb3      	ldr	r3, [pc, #716]	; (8ab0 <hci_cmd_handle+0x314>)
    87e2:	49b4      	ldr	r1, [pc, #720]	; (8ab4 <hci_cmd_handle+0x318>)
    87e4:	48b6      	ldr	r0, [pc, #728]	; (8ac0 <hci_cmd_handle+0x324>)
    87e6:	e7e8      	b.n	87ba <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    87e8:	2103      	movs	r1, #3
    87ea:	f104 0008 	add.w	r0, r4, #8
    87ee:	f00a fb34 	bl	12e5a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    87f2:	8833      	ldrh	r3, [r6, #0]
    87f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    87f8:	0a9b      	lsrs	r3, r3, #10
    87fa:	2b04      	cmp	r3, #4
    87fc:	f000 80bc 	beq.w	8978 <hci_cmd_handle+0x1dc>
    8800:	d809      	bhi.n	8816 <hci_cmd_handle+0x7a>
    8802:	2b01      	cmp	r3, #1
    8804:	d026      	beq.n	8854 <hci_cmd_handle+0xb8>
    8806:	2b03      	cmp	r3, #3
    8808:	d03b      	beq.n	8882 <hci_cmd_handle+0xe6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    880a:	2101      	movs	r1, #1
    880c:	a807      	add	r0, sp, #28
    880e:	f7ff fe05 	bl	841c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8812:	2301      	movs	r3, #1
    8814:	e298      	b.n	8d48 <hci_cmd_handle+0x5ac>
	switch (BT_OGF(_opcode)) {
    8816:	2b08      	cmp	r3, #8
    8818:	f000 8168 	beq.w	8aec <hci_cmd_handle+0x350>
    881c:	2b3f      	cmp	r3, #63	; 0x3f
    881e:	d1f4      	bne.n	880a <hci_cmd_handle+0x6e>
	switch (ocf) {
    8820:	3a01      	subs	r2, #1
    8822:	2a09      	cmp	r2, #9
    8824:	d8f1      	bhi.n	880a <hci_cmd_handle+0x6e>
    8826:	a301      	add	r3, pc, #4	; (adr r3, 882c <hci_cmd_handle+0x90>)
    8828:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    882c:	00009081 	.word	0x00009081
    8830:	000090b1 	.word	0x000090b1
    8834:	000090db 	.word	0x000090db
    8838:	0000880b 	.word	0x0000880b
    883c:	0000880b 	.word	0x0000880b
    8840:	00009121 	.word	0x00009121
    8844:	0000880b 	.word	0x0000880b
    8848:	000090f3 	.word	0x000090f3
    884c:	0000912d 	.word	0x0000912d
    8850:	0000919b 	.word	0x0000919b
	switch (ocf) {
    8854:	2a06      	cmp	r2, #6
    8856:	d006      	beq.n	8866 <hci_cmd_handle+0xca>
    8858:	2a1d      	cmp	r2, #29
    885a:	d1d6      	bne.n	880a <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    885c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    885e:	8818      	ldrh	r0, [r3, #0]
    8860:	f007 ffbf 	bl	107e2 <ll_version_ind_send>
    8864:	e004      	b.n	8870 <hci_cmd_handle+0xd4>
    8866:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8868:	7899      	ldrb	r1, [r3, #2]
    886a:	8818      	ldrh	r0, [r3, #0]
    886c:	f007 ffcd 	bl	1080a <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8870:	2800      	cmp	r0, #0
    8872:	bf14      	ite	ne
    8874:	200c      	movne	r0, #12
    8876:	2000      	moveq	r0, #0
    8878:	f7ff fda0 	bl	83bc <cmd_status>
    887c:	9007      	str	r0, [sp, #28]
	return evt;
    887e:	9807      	ldr	r0, [sp, #28]
    8880:	e79e      	b.n	87c0 <hci_cmd_handle+0x24>
	switch (ocf) {
    8882:	2a2d      	cmp	r2, #45	; 0x2d
    8884:	d03a      	beq.n	88fc <hci_cmd_handle+0x160>
    8886:	d820      	bhi.n	88ca <hci_cmd_handle+0x12e>
    8888:	2a01      	cmp	r2, #1
    888a:	d02b      	beq.n	88e4 <hci_cmd_handle+0x148>
    888c:	2a03      	cmp	r2, #3
    888e:	d1bc      	bne.n	880a <hci_cmd_handle+0x6e>
	dup_count = -1;
    8890:	4b8c      	ldr	r3, [pc, #560]	; (8ac4 <hci_cmd_handle+0x328>)
    8892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8896:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    8898:	4b8b      	ldr	r3, [pc, #556]	; (8ac8 <hci_cmd_handle+0x32c>)
    889a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    889e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    88a2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    88a6:	4b89      	ldr	r3, [pc, #548]	; (8acc <hci_cmd_handle+0x330>)
    88a8:	2000      	movs	r0, #0
    88aa:	2100      	movs	r1, #0
    88ac:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    88b0:	4b87      	ldr	r3, [pc, #540]	; (8ad0 <hci_cmd_handle+0x334>)
    88b2:	201f      	movs	r0, #31
    88b4:	2100      	movs	r1, #0
    88b6:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    88ba:	f007 fc5d 	bl	10178 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    88be:	2101      	movs	r1, #1
    88c0:	a807      	add	r0, sp, #28
    88c2:	f7ff fdab 	bl	841c <cmd_complete>
	ccst->status = 0x00;
    88c6:	2300      	movs	r3, #0
    88c8:	e23e      	b.n	8d48 <hci_cmd_handle+0x5ac>
	switch (ocf) {
    88ca:	2a7b      	cmp	r2, #123	; 0x7b
    88cc:	d02c      	beq.n	8928 <hci_cmd_handle+0x18c>
    88ce:	2a7c      	cmp	r2, #124	; 0x7c
    88d0:	d041      	beq.n	8956 <hci_cmd_handle+0x1ba>
    88d2:	2a63      	cmp	r2, #99	; 0x63
    88d4:	d199      	bne.n	880a <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    88d6:	68a0      	ldr	r0, [r4, #8]
    88d8:	f7ff ff5c 	bl	8794 <sys_get_le64>
    88dc:	4b7b      	ldr	r3, [pc, #492]	; (8acc <hci_cmd_handle+0x330>)
	le_event_mask = sys_get_le64(cmd->events);
    88de:	e9c3 0100 	strd	r0, r1, [r3]
    88e2:	e7ec      	b.n	88be <hci_cmd_handle+0x122>
	event_mask = sys_get_le64(cmd->events);
    88e4:	68a0      	ldr	r0, [r4, #8]
    88e6:	f7ff ff55 	bl	8794 <sys_get_le64>
    88ea:	4b77      	ldr	r3, [pc, #476]	; (8ac8 <hci_cmd_handle+0x32c>)
    88ec:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    88f0:	4611      	mov	r1, r2
    88f2:	a807      	add	r0, sp, #28
    88f4:	f7ff fd92 	bl	841c <cmd_complete>
	ccst->status = 0x00;
    88f8:	7005      	strb	r5, [r0, #0]
    88fa:	e7c0      	b.n	887e <hci_cmd_handle+0xe2>
    88fc:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    88fe:	2104      	movs	r1, #4
    8900:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8902:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8904:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8906:	f7ff fd89 	bl	841c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    890a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    890c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    890e:	1cc2      	adds	r2, r0, #3
    8910:	4639      	mov	r1, r7
    8912:	4630      	mov	r0, r6
    8914:	f007 ff8d 	bl	10832 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8918:	2800      	cmp	r0, #0
    891a:	bf14      	ite	ne
    891c:	2302      	movne	r3, #2
    891e:	2300      	moveq	r3, #0
    8920:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8922:	f8a4 5001 	strh.w	r5, [r4, #1]
    8926:	e7aa      	b.n	887e <hci_cmd_handle+0xe2>
	handle = sys_le16_to_cpu(cmd->handle);
    8928:	68a3      	ldr	r3, [r4, #8]
    892a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    892c:	a908      	add	r1, sp, #32
    892e:	b2a0      	uxth	r0, r4
    8930:	f007 ff89 	bl	10846 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8934:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8936:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8938:	a807      	add	r0, sp, #28
    893a:	f7ff fd6f 	bl	841c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    893e:	2d00      	cmp	r5, #0
    8940:	bf14      	ite	ne
    8942:	230c      	movne	r3, #12
    8944:	2300      	moveq	r3, #0
    8946:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8948:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    894c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8950:	f8a0 3003 	strh.w	r3, [r0, #3]
    8954:	e793      	b.n	887e <hci_cmd_handle+0xe2>
    8956:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8958:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    895a:	8859      	ldrh	r1, [r3, #2]
    895c:	b2a0      	uxth	r0, r4
    895e:	f007 ff86 	bl	1086e <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8962:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8964:	2103      	movs	r1, #3
    8966:	a807      	add	r0, sp, #28
    8968:	f7ff fd58 	bl	841c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    896c:	2d00      	cmp	r5, #0
    896e:	bf14      	ite	ne
    8970:	230c      	movne	r3, #12
    8972:	2300      	moveq	r3, #0
    8974:	7003      	strb	r3, [r0, #0]
    8976:	e27d      	b.n	8e74 <hci_cmd_handle+0x6d8>
	switch (ocf) {
    8978:	3a01      	subs	r2, #1
    897a:	2a08      	cmp	r2, #8
    897c:	f63f af45 	bhi.w	880a <hci_cmd_handle+0x6e>
    8980:	a301      	add	r3, pc, #4	; (adr r3, 8988 <hci_cmd_handle+0x1ec>)
    8982:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8986:	bf00      	nop
    8988:	000089ad 	.word	0x000089ad
    898c:	000089d7 	.word	0x000089d7
    8990:	00008a8b 	.word	0x00008a8b
    8994:	0000880b 	.word	0x0000880b
    8998:	0000880b 	.word	0x0000880b
    899c:	0000880b 	.word	0x0000880b
    89a0:	0000880b 	.word	0x0000880b
    89a4:	0000880b 	.word	0x0000880b
    89a8:	00008ad5 	.word	0x00008ad5
	rp = cmd_complete(evt, sizeof(*rp));
    89ac:	2109      	movs	r1, #9
    89ae:	a807      	add	r0, sp, #28
    89b0:	f7ff fd34 	bl	841c <cmd_complete>
	rp->status = 0x00;
    89b4:	2300      	movs	r3, #0
    89b6:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    89b8:	7083      	strb	r3, [r0, #2]
    89ba:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    89bc:	f06f 030e 	mvn.w	r3, #14
    89c0:	7143      	strb	r3, [r0, #5]
    89c2:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    89c4:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    89c6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    89c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    89cc:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    89ce:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    89d0:	71c3      	strb	r3, [r0, #7]
    89d2:	7203      	strb	r3, [r0, #8]
    89d4:	e753      	b.n	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    89d6:	2141      	movs	r1, #65	; 0x41
    89d8:	a807      	add	r0, sp, #28
    89da:	f7ff fd1f 	bl	841c <cmd_complete>
	rp->status = 0x00;
    89de:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    89e0:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    89e2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    89e4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    89e8:	f7f9 f940 	bl	1c6c <memset>
	rp->commands[2] |= BIT(7);
    89ec:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    89ee:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    89f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    89f4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    89f6:	79a3      	ldrb	r3, [r4, #6]
    89f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    89fc:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    89fe:	7ae3      	ldrb	r3, [r4, #11]
    8a00:	f043 0304 	orr.w	r3, r3, #4
    8a04:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8a06:	7be3      	ldrb	r3, [r4, #15]
    8a08:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    8a0c:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    8a0e:	7c23      	ldrb	r3, [r4, #16]
    8a10:	f043 0302 	orr.w	r3, r3, #2
    8a14:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    8a16:	7de3      	ldrb	r3, [r4, #23]
    8a18:	f043 0304 	orr.w	r3, r3, #4
    8a1c:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    8a1e:	7ea3      	ldrb	r3, [r4, #26]
    8a20:	f043 0317 	orr.w	r3, r3, #23
    8a24:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    8a26:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    8a28:	f043 0309 	orr.w	r3, r3, #9
    8a2c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    8a2e:	7863      	ldrb	r3, [r4, #1]
    8a30:	f043 0320 	orr.w	r3, r3, #32
    8a34:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8a36:	23ff      	movs	r3, #255	; 0xff
    8a38:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    8a3a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    8a3e:	f063 030f 	orn	r3, r3, #15
    8a42:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    8a46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    8a4a:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8a4e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    8a52:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8a54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8a58:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8a5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8a60:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8a64:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    8a68:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8a6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a70:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8a74:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a78:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8a7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a80:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8a84:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    8a88:	e6f9      	b.n	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8a8a:	2109      	movs	r1, #9
    8a8c:	a807      	add	r0, sp, #28
    8a8e:	f7ff fcc5 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8a92:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8a94:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8a96:	2208      	movs	r2, #8
	rp->status = 0x00;
    8a98:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8a9c:	f7f9 f8e6 	bl	1c6c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8aa0:	2360      	movs	r3, #96	; 0x60
    8aa2:	7163      	strb	r3, [r4, #5]
    8aa4:	e6eb      	b.n	887e <hci_cmd_handle+0xe2>
    8aa6:	bf00      	nop
    8aa8:	00014b99 	.word	0x00014b99
    8aac:	00015f55 	.word	0x00015f55
    8ab0:	00016eb8 	.word	0x00016eb8
    8ab4:	00015fa4 	.word	0x00015fa4
    8ab8:	00016ffb 	.word	0x00016ffb
    8abc:	20000828 	.word	0x20000828
    8ac0:	00017021 	.word	0x00017021
    8ac4:	20000830 	.word	0x20000830
    8ac8:	20003d30 	.word	0x20003d30
    8acc:	200008b8 	.word	0x200008b8
    8ad0:	20003d38 	.word	0x20003d38
	rp = cmd_complete(evt, sizeof(*rp));
    8ad4:	2107      	movs	r1, #7
    8ad6:	a807      	add	r0, sp, #28
    8ad8:	f7ff fca0 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8adc:	4601      	mov	r1, r0
    8ade:	2300      	movs	r3, #0
    8ae0:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8ae4:	4618      	mov	r0, r3
    8ae6:	f7ff fac5 	bl	8074 <ll_addr_get>
    8aea:	e6c8      	b.n	887e <hci_cmd_handle+0xe2>
	switch (ocf) {
    8aec:	3a01      	subs	r2, #1
    8aee:	2a4d      	cmp	r2, #77	; 0x4d
    8af0:	f63f ae8b 	bhi.w	880a <hci_cmd_handle+0x6e>
    8af4:	a301      	add	r3, pc, #4	; (adr r3, 8afc <hci_cmd_handle+0x360>)
    8af6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8afa:	bf00      	nop
    8afc:	00008c35 	.word	0x00008c35
    8b00:	00008c3f 	.word	0x00008c3f
    8b04:	00008c57 	.word	0x00008c57
    8b08:	0000880b 	.word	0x0000880b
    8b0c:	00008c7b 	.word	0x00008c7b
    8b10:	0000880b 	.word	0x0000880b
    8b14:	0000880b 	.word	0x0000880b
    8b18:	0000880b 	.word	0x0000880b
    8b1c:	0000880b 	.word	0x0000880b
    8b20:	0000880b 	.word	0x0000880b
    8b24:	00008d1f 	.word	0x00008d1f
    8b28:	00008d4d 	.word	0x00008d4d
    8b2c:	00008d6d 	.word	0x00008d6d
    8b30:	00008d97 	.word	0x00008d97
    8b34:	00008c87 	.word	0x00008c87
    8b38:	00008c9d 	.word	0x00008c9d
    8b3c:	00008caf 	.word	0x00008caf
    8b40:	00008cb7 	.word	0x00008cb7
    8b44:	00008e37 	.word	0x00008e37
    8b48:	00008df7 	.word	0x00008df7
    8b4c:	00008e13 	.word	0x00008e13
    8b50:	00008e2d 	.word	0x00008e2d
    8b54:	00008cbf 	.word	0x00008cbf
    8b58:	00008ce5 	.word	0x00008ce5
    8b5c:	00008dff 	.word	0x00008dff
    8b60:	0000880b 	.word	0x0000880b
    8b64:	0000880b 	.word	0x0000880b
    8b68:	00008cfb 	.word	0x00008cfb
    8b6c:	0000880b 	.word	0x0000880b
    8b70:	0000880b 	.word	0x0000880b
    8b74:	0000880b 	.word	0x0000880b
    8b78:	00008e51 	.word	0x00008e51
    8b7c:	00008e7b 	.word	0x00008e7b
    8b80:	00008e89 	.word	0x00008e89
    8b84:	00008e99 	.word	0x00008e99
    8b88:	00008eb1 	.word	0x00008eb1
    8b8c:	0000880b 	.word	0x0000880b
    8b90:	0000880b 	.word	0x0000880b
    8b94:	00008fc9 	.word	0x00008fc9
    8b98:	00008fd7 	.word	0x00008fd7
    8b9c:	00008fdf 	.word	0x00008fdf
    8ba0:	00008fef 	.word	0x00008fef
    8ba4:	00009001 	.word	0x00009001
    8ba8:	0000901f 	.word	0x0000901f
    8bac:	0000903d 	.word	0x0000903d
    8bb0:	00009053 	.word	0x00009053
    8bb4:	00008ecd 	.word	0x00008ecd
    8bb8:	00008ef9 	.word	0x00008ef9
    8bbc:	00008f4f 	.word	0x00008f4f
    8bc0:	00008f6d 	.word	0x00008f6d
    8bc4:	0000880b 	.word	0x0000880b
    8bc8:	0000880b 	.word	0x0000880b
    8bcc:	0000880b 	.word	0x0000880b
    8bd0:	0000880b 	.word	0x0000880b
    8bd4:	0000880b 	.word	0x0000880b
    8bd8:	0000880b 	.word	0x0000880b
    8bdc:	0000880b 	.word	0x0000880b
    8be0:	0000880b 	.word	0x0000880b
    8be4:	0000880b 	.word	0x0000880b
    8be8:	0000880b 	.word	0x0000880b
    8bec:	0000880b 	.word	0x0000880b
    8bf0:	0000880b 	.word	0x0000880b
    8bf4:	0000880b 	.word	0x0000880b
    8bf8:	0000880b 	.word	0x0000880b
    8bfc:	0000880b 	.word	0x0000880b
    8c00:	0000880b 	.word	0x0000880b
    8c04:	0000880b 	.word	0x0000880b
    8c08:	0000880b 	.word	0x0000880b
    8c0c:	0000880b 	.word	0x0000880b
    8c10:	0000880b 	.word	0x0000880b
    8c14:	0000880b 	.word	0x0000880b
    8c18:	0000880b 	.word	0x0000880b
    8c1c:	0000880b 	.word	0x0000880b
    8c20:	0000880b 	.word	0x0000880b
    8c24:	00009067 	.word	0x00009067
    8c28:	0000880b 	.word	0x0000880b
    8c2c:	0000880b 	.word	0x0000880b
    8c30:	0000905d 	.word	0x0000905d
	le_event_mask = sys_get_le64(cmd->events);
    8c34:	68a0      	ldr	r0, [r4, #8]
    8c36:	f7ff fdad 	bl	8794 <sys_get_le64>
    8c3a:	4baa      	ldr	r3, [pc, #680]	; (8ee4 <hci_cmd_handle+0x748>)
    8c3c:	e64f      	b.n	88de <hci_cmd_handle+0x142>
	rp = cmd_complete(evt, sizeof(*rp));
    8c3e:	2104      	movs	r1, #4
    8c40:	a807      	add	r0, sp, #28
    8c42:	f7ff fbeb 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8c46:	2300      	movs	r3, #0
    8c48:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8c4a:	221b      	movs	r2, #27
    8c4c:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8c4e:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8c50:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8c52:	70c3      	strb	r3, [r0, #3]
    8c54:	e613      	b.n	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8c56:	2109      	movs	r1, #9
    8c58:	a807      	add	r0, sp, #28
    8c5a:	f7ff fbdf 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8c5e:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8c60:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8c62:	2208      	movs	r2, #8
	rp->status = 0x00;
    8c64:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8c68:	f7f9 f800 	bl	1c6c <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8c6c:	23ff      	movs	r3, #255	; 0xff
    8c6e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8c70:	2341      	movs	r3, #65	; 0x41
    8c72:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8c74:	2301      	movs	r3, #1
    8c76:	70e3      	strb	r3, [r4, #3]
    8c78:	e601      	b.n	887e <hci_cmd_handle+0xe2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8c7a:	68a1      	ldr	r1, [r4, #8]
    8c7c:	2001      	movs	r0, #1
    8c7e:	f7ff fa13 	bl	80a8 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8c82:	4604      	mov	r4, r0
    8c84:	e0af      	b.n	8de6 <hci_cmd_handle+0x64a>
	rp = cmd_complete(evt, sizeof(*rp));
    8c86:	2102      	movs	r1, #2
    8c88:	a807      	add	r0, sp, #28
    8c8a:	f7ff fbc7 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8c8e:	2300      	movs	r3, #0
    8c90:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8c92:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8c94:	f008 fd32 	bl	116fc <ll_wl_size_get>
    8c98:	7060      	strb	r0, [r4, #1]
    8c9a:	e5f0      	b.n	887e <hci_cmd_handle+0xe2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c9c:	2101      	movs	r1, #1
    8c9e:	a807      	add	r0, sp, #28
    8ca0:	f7ff fbbc 	bl	841c <cmd_complete>
    8ca4:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8ca6:	f008 fd2b 	bl	11700 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8caa:	7020      	strb	r0, [r4, #0]
    8cac:	e5e7      	b.n	887e <hci_cmd_handle+0xe2>
	status = ll_wl_add(&cmd->addr);
    8cae:	68a0      	ldr	r0, [r4, #8]
    8cb0:	f008 fdd2 	bl	11858 <ll_wl_add>
    8cb4:	e7e5      	b.n	8c82 <hci_cmd_handle+0x4e6>
	status = ll_wl_remove(&cmd->addr);
    8cb6:	68a0      	ldr	r0, [r4, #8]
    8cb8:	f008 fd42 	bl	11740 <ll_wl_remove>
    8cbc:	e7e1      	b.n	8c82 <hci_cmd_handle+0x4e6>
    8cbe:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8cc0:	2300      	movs	r3, #0
    8cc2:	aa08      	add	r2, sp, #32
    8cc4:	f100 0110 	add.w	r1, r0, #16
    8cc8:	f009 fa40 	bl	1214c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8ccc:	2111      	movs	r1, #17
    8cce:	a807      	add	r0, sp, #28
    8cd0:	f7ff fba4 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8cd4:	2300      	movs	r3, #0
    8cd6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8cda:	2210      	movs	r2, #16
    8cdc:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8cde:	f7f8 ff99 	bl	1c14 <memcpy>
    8ce2:	e5cc      	b.n	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8ce4:	2109      	movs	r1, #9
    8ce6:	a807      	add	r0, sp, #28
    8ce8:	f7ff fb98 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8cec:	2300      	movs	r3, #0
    8cee:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8cf2:	2108      	movs	r1, #8
    8cf4:	f7ff f9f8 	bl	80e8 <bt_rand>
    8cf8:	e5c1      	b.n	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    8cfa:	2109      	movs	r1, #9
    8cfc:	a807      	add	r0, sp, #28
    8cfe:	f7ff fb8d 	bl	841c <cmd_complete>
	rp->status = 0x00;
    8d02:	4601      	mov	r1, r0
    8d04:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8d06:	4602      	mov	r2, r0
	rp->status = 0x00;
    8d08:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8d0c:	4876      	ldr	r0, [pc, #472]	; (8ee8 <hci_cmd_handle+0x74c>)
    8d0e:	f7ff fb41 	bl	8394 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8d12:	f240 203f 	movw	r0, #575	; 0x23f
    8d16:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8d18:	f7ff fb3c 	bl	8394 <sys_put_le32>
    8d1c:	e5af      	b.n	887e <hci_cmd_handle+0xe2>
    8d1e:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8d20:	7963      	ldrb	r3, [r4, #5]
    8d22:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8d26:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8d2a:	7820      	ldrb	r0, [r4, #0]
    8d2c:	79a4      	ldrb	r4, [r4, #6]
    8d2e:	9400      	str	r4, [sp, #0]
    8d30:	f008 faa8 	bl	11284 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8d34:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8d36:	2101      	movs	r1, #1
    8d38:	a807      	add	r0, sp, #28
    8d3a:	f7ff fb6f 	bl	841c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8d3e:	2c00      	cmp	r4, #0
    8d40:	bf18      	it	ne
    8d42:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8d44:	bf08      	it	eq
    8d46:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8d48:	7003      	strb	r3, [r0, #0]
    8d4a:	e598      	b.n	887e <hci_cmd_handle+0xe2>
    8d4c:	68a2      	ldr	r2, [r4, #8]
    8d4e:	4b67      	ldr	r3, [pc, #412]	; (8eec <hci_cmd_handle+0x750>)
	if (cmd->enable && cmd->filter_dup) {
    8d50:	7810      	ldrb	r0, [r2, #0]
    8d52:	b140      	cbz	r0, 8d66 <hci_cmd_handle+0x5ca>
    8d54:	7852      	ldrb	r2, [r2, #1]
    8d56:	b132      	cbz	r2, 8d66 <hci_cmd_handle+0x5ca>
		dup_count = 0;
    8d58:	2200      	movs	r2, #0
    8d5a:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8d5c:	4b64      	ldr	r3, [pc, #400]	; (8ef0 <hci_cmd_handle+0x754>)
		dup_count = -1;
    8d5e:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8d60:	f008 fab0 	bl	112c4 <ll_scan_enable>
    8d64:	e7e6      	b.n	8d34 <hci_cmd_handle+0x598>
		dup_count = -1;
    8d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d6a:	e7f8      	b.n	8d5e <hci_cmd_handle+0x5c2>
    8d6c:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8d6e:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8d72:	7963      	ldrb	r3, [r4, #5]
    8d74:	7922      	ldrb	r2, [r4, #4]
    8d76:	8861      	ldrh	r1, [r4, #2]
    8d78:	8820      	ldrh	r0, [r4, #0]
    8d7a:	9504      	str	r5, [sp, #16]
    8d7c:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8d80:	9503      	str	r5, [sp, #12]
    8d82:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8d86:	9502      	str	r5, [sp, #8]
    8d88:	7b25      	ldrb	r5, [r4, #12]
    8d8a:	9501      	str	r5, [sp, #4]
    8d8c:	3406      	adds	r4, #6
    8d8e:	9400      	str	r4, [sp, #0]
    8d90:	f008 fad2 	bl	11338 <ll_create_connection>
    8d94:	e56c      	b.n	8870 <hci_cmd_handle+0xd4>
	status = ll_connect_disable();
    8d96:	f008 f8e7 	bl	10f68 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8d9a:	4606      	mov	r6, r0
    8d9c:	bb48      	cbnz	r0, 8df2 <hci_cmd_handle+0x656>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8da2:	2001      	movs	r0, #1
    8da4:	f7fb fa3e 	bl	4224 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8da8:	4a52      	ldr	r2, [pc, #328]	; (8ef4 <hci_cmd_handle+0x758>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8daa:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8dac:	e9d2 4500 	ldrd	r4, r5, [r2]
    8db0:	2400      	movs	r4, #0
    8db2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8db6:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8dba:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8dbc:	d004      	beq.n	8dc8 <hci_cmd_handle+0x62c>
    8dbe:	4632      	mov	r2, r6
    8dc0:	4631      	mov	r1, r6
    8dc2:	2002      	movs	r0, #2
    8dc4:	f7ff fb9a 	bl	84fc <le_conn_complete.part.39>
		if ((*evt)->len) {
    8dc8:	9807      	ldr	r0, [sp, #28]
    8dca:	8984      	ldrh	r4, [r0, #12]
    8dcc:	b14c      	cbz	r4, 8de2 <hci_cmd_handle+0x646>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8dce:	2101      	movs	r1, #1
    8dd0:	a808      	add	r0, sp, #32
    8dd2:	f7ff fb23 	bl	841c <cmd_complete>
			ccst->status = cmd_status;
    8dd6:	2300      	movs	r3, #0
    8dd8:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8dda:	9808      	ldr	r0, [sp, #32]
    8ddc:	f7fa ffec 	bl	3db8 <bt_recv_prio>
    8de0:	e54d      	b.n	887e <hci_cmd_handle+0xe2>
			net_buf_unref(*evt);
    8de2:	f009 ffe9 	bl	12db8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8de6:	2101      	movs	r1, #1
    8de8:	a807      	add	r0, sp, #28
    8dea:	f7ff fb17 	bl	841c <cmd_complete>
	ccst->status = status;
    8dee:	7004      	strb	r4, [r0, #0]
    8df0:	e545      	b.n	887e <hci_cmd_handle+0xe2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8df2:	240c      	movs	r4, #12
    8df4:	e7f7      	b.n	8de6 <hci_cmd_handle+0x64a>
	status = ll_chm_update(&cmd->ch_map[0]);
    8df6:	68a0      	ldr	r0, [r4, #8]
    8df8:	f007 fc88 	bl	1070c <ll_chm_update>
    8dfc:	e79a      	b.n	8d34 <hci_cmd_handle+0x598>
    8dfe:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8e00:	f100 030c 	add.w	r3, r0, #12
    8e04:	f100 020a 	add.w	r2, r0, #10
    8e08:	1c81      	adds	r1, r0, #2
    8e0a:	8800      	ldrh	r0, [r0, #0]
    8e0c:	f007 ff32 	bl	10c74 <ll_enc_req_send>
    8e10:	e52e      	b.n	8870 <hci_cmd_handle+0xd4>
	handle = sys_le16_to_cpu(cmd->handle);
    8e12:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8e14:	2108      	movs	r1, #8
    8e16:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8e18:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8e1a:	f7ff faff 	bl	841c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8e1e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8e20:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8e22:	1cc1      	adds	r1, r0, #3
    8e24:	4630      	mov	r0, r6
    8e26:	f007 fcb3 	bl	10790 <ll_chm_get>
    8e2a:	e575      	b.n	8918 <hci_cmd_handle+0x17c>
	handle = sys_le16_to_cpu(cmd->handle);
    8e2c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8e2e:	8818      	ldrh	r0, [r3, #0]
    8e30:	f007 fcc3 	bl	107ba <ll_feature_req_send>
    8e34:	e51c      	b.n	8870 <hci_cmd_handle+0xd4>
    8e36:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8e38:	8911      	ldrh	r1, [r2, #8]
    8e3a:	8893      	ldrh	r3, [r2, #4]
    8e3c:	8810      	ldrh	r0, [r2, #0]
    8e3e:	9101      	str	r1, [sp, #4]
    8e40:	88d2      	ldrh	r2, [r2, #6]
    8e42:	9200      	str	r2, [sp, #0]
    8e44:	2200      	movs	r2, #0
    8e46:	4611      	mov	r1, r2
    8e48:	f007 fbe8 	bl	1061c <ll_conn_update>
	*evt = cmd_status(status);
    8e4c:	b2c0      	uxtb	r0, r0
    8e4e:	e513      	b.n	8878 <hci_cmd_handle+0xdc>
    8e50:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8e52:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e54:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8e56:	8893      	ldrh	r3, [r2, #4]
    8e58:	9101      	str	r1, [sp, #4]
    8e5a:	88d2      	ldrh	r2, [r2, #6]
    8e5c:	9200      	str	r2, [sp, #0]
    8e5e:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8e60:	2102      	movs	r1, #2
    8e62:	b2a0      	uxth	r0, r4
    8e64:	f007 fbda 	bl	1061c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8e68:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8e6a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8e6c:	a807      	add	r0, sp, #28
    8e6e:	f7ff fad5 	bl	841c <cmd_complete>
	rp->status = status;
    8e72:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8e74:	f8a0 4001 	strh.w	r4, [r0, #1]
    8e78:	e501      	b.n	887e <hci_cmd_handle+0xe2>
    8e7a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e7c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8e7e:	789a      	ldrb	r2, [r3, #2]
    8e80:	2300      	movs	r3, #0
    8e82:	9301      	str	r3, [sp, #4]
    8e84:	9300      	str	r3, [sp, #0]
    8e86:	e7eb      	b.n	8e60 <hci_cmd_handle+0x6c4>
    8e88:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e8a:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8e8c:	889a      	ldrh	r2, [r3, #4]
    8e8e:	8859      	ldrh	r1, [r3, #2]
    8e90:	b2a0      	uxth	r0, r4
    8e92:	f007 fd02 	bl	1089a <ll_length_req_send>
    8e96:	e564      	b.n	8962 <hci_cmd_handle+0x1c6>
	rp = cmd_complete(evt, sizeof(*rp));
    8e98:	2105      	movs	r1, #5
    8e9a:	a807      	add	r0, sp, #28
    8e9c:	f7ff fabe 	bl	841c <cmd_complete>
    8ea0:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8ea2:	1cc1      	adds	r1, r0, #3
    8ea4:	3001      	adds	r0, #1
    8ea6:	f007 fd1b 	bl	108e0 <ll_length_default_get>
	rp->status = 0x00;
    8eaa:	2300      	movs	r3, #0
    8eac:	7023      	strb	r3, [r4, #0]
    8eae:	e4e6      	b.n	887e <hci_cmd_handle+0xe2>
    8eb0:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8eb2:	8859      	ldrh	r1, [r3, #2]
    8eb4:	8818      	ldrh	r0, [r3, #0]
    8eb6:	f007 fd1d 	bl	108f4 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8eba:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8ebc:	2101      	movs	r1, #1
    8ebe:	a807      	add	r0, sp, #28
    8ec0:	f7ff faac 	bl	841c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8ec4:	2c00      	cmp	r4, #0
    8ec6:	bf18      	it	ne
    8ec8:	231e      	movne	r3, #30
    8eca:	e73b      	b.n	8d44 <hci_cmd_handle+0x5a8>
	rp = cmd_complete(evt, sizeof(*rp));
    8ecc:	2109      	movs	r1, #9
    8ece:	a807      	add	r0, sp, #28
    8ed0:	f7ff faa4 	bl	841c <cmd_complete>
    8ed4:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8ed6:	1dc3      	adds	r3, r0, #7
    8ed8:	1d42      	adds	r2, r0, #5
    8eda:	1cc1      	adds	r1, r0, #3
    8edc:	3001      	adds	r0, #1
    8ede:	f007 fd13 	bl	10908 <ll_length_max_get>
    8ee2:	e7e2      	b.n	8eaa <hci_cmd_handle+0x70e>
    8ee4:	20003d38 	.word	0x20003d38
    8ee8:	130f3370 	.word	0x130f3370
    8eec:	20000830 	.word	0x20000830
    8ef0:	20000834 	.word	0x20000834
    8ef4:	20003d30 	.word	0x20003d30
	handle = sys_le16_to_cpu(cmd->handle);
    8ef8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8efa:	2105      	movs	r1, #5
    8efc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8efe:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8f00:	f7ff fa8c 	bl	841c <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8f04:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8f06:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8f08:	1d02      	adds	r2, r0, #4
    8f0a:	1cc1      	adds	r1, r0, #3
    8f0c:	4630      	mov	r0, r6
    8f0e:	f007 fd04 	bl	1091a <ll_phy_get>
	return __builtin_ffs(op);
    8f12:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8f14:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8f18:	2800      	cmp	r0, #0
    8f1a:	bf14      	ite	ne
    8f1c:	230c      	movne	r3, #12
    8f1e:	2300      	moveq	r3, #0
    8f20:	7023      	strb	r3, [r4, #0]
    8f22:	2a00      	cmp	r2, #0
    8f24:	fa92 f3a2 	rbit	r3, r2
    8f28:	fab3 f383 	clz	r3, r3
    8f2c:	7922      	ldrb	r2, [r4, #4]
    8f2e:	bf08      	it	eq
    8f30:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8f34:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8f36:	70e3      	strb	r3, [r4, #3]
    8f38:	2a00      	cmp	r2, #0
    8f3a:	fa92 f3a2 	rbit	r3, r2
    8f3e:	fab3 f383 	clz	r3, r3
    8f42:	bf08      	it	eq
    8f44:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8f48:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8f4a:	7123      	strb	r3, [r4, #4]
    8f4c:	e497      	b.n	887e <hci_cmd_handle+0xe2>
    8f4e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8f50:	781a      	ldrb	r2, [r3, #0]
    8f52:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8f54:	bf44      	itt	mi
    8f56:	2107      	movmi	r1, #7
    8f58:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8f5a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8f5c:	bf44      	itt	mi
    8f5e:	2207      	movmi	r2, #7
    8f60:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8f62:	7899      	ldrb	r1, [r3, #2]
    8f64:	7858      	ldrb	r0, [r3, #1]
    8f66:	f007 fced 	bl	10944 <ll_phy_default_set>
    8f6a:	e7a6      	b.n	8eba <hci_cmd_handle+0x71e>
    8f6c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8f6e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8f70:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8f72:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8f76:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8f78:	bf44      	itt	mi
    8f7a:	2103      	movmi	r1, #3
    8f7c:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8f7e:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8f80:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8f82:	bf44      	itt	mi
    8f84:	2203      	movmi	r2, #3
    8f86:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8f88:	074d      	lsls	r5, r1, #29
    8f8a:	d002      	beq.n	8f92 <hci_cmd_handle+0x7f6>
	    !(cmd->rx_phys & 0x07)) {
    8f8c:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8f8e:	075a      	lsls	r2, r3, #29
    8f90:	d105      	bne.n	8f9e <hci_cmd_handle+0x802>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8f92:	2101      	movs	r1, #1
    8f94:	a807      	add	r0, sp, #28
    8f96:	f7ff fa41 	bl	841c <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8f9a:	2312      	movs	r3, #18
    8f9c:	e6d4      	b.n	8d48 <hci_cmd_handle+0x5ac>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8f9e:	ea41 0203 	orr.w	r2, r1, r3
    8fa2:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8fa6:	d005      	beq.n	8fb4 <hci_cmd_handle+0x818>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8fa8:	2101      	movs	r1, #1
    8faa:	a807      	add	r0, sp, #28
    8fac:	f7ff fa36 	bl	841c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8fb0:	2311      	movs	r3, #17
    8fb2:	e6c9      	b.n	8d48 <hci_cmd_handle+0x5ac>
	if (phy_opts & 0x03) {
    8fb4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8fb8:	bf1c      	itt	ne
    8fba:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8fbe:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8fc2:	f007 fcc9 	bl	10958 <ll_phy_req_send>
    8fc6:	e453      	b.n	8870 <hci_cmd_handle+0xd4>
    8fc8:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8fca:	f100 0217 	add.w	r2, r0, #23
    8fce:	1dc1      	adds	r1, r0, #7
    8fd0:	f008 fe4c 	bl	11c6c <ll_rl_add>
    8fd4:	e655      	b.n	8c82 <hci_cmd_handle+0x4e6>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8fd6:	68a0      	ldr	r0, [r4, #8]
    8fd8:	f008 feea 	bl	11db0 <ll_rl_remove>
    8fdc:	e651      	b.n	8c82 <hci_cmd_handle+0x4e6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8fde:	2101      	movs	r1, #1
    8fe0:	a807      	add	r0, sp, #28
    8fe2:	f7ff fa1b 	bl	841c <cmd_complete>
    8fe6:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8fe8:	f008 fe26 	bl	11c38 <ll_rl_clear>
    8fec:	e65d      	b.n	8caa <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    8fee:	2102      	movs	r1, #2
    8ff0:	a807      	add	r0, sp, #28
    8ff2:	f7ff fa13 	bl	841c <cmd_complete>
    8ff6:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8ff8:	f008 fe1c 	bl	11c34 <ll_rl_size_get>
    8ffc:	7060      	strb	r0, [r4, #1]
    8ffe:	e754      	b.n	8eaa <hci_cmd_handle+0x70e>
    9000:	2207      	movs	r2, #7
    9002:	68a1      	ldr	r1, [r4, #8]
    9004:	a808      	add	r0, sp, #32
    9006:	f7f8 fe05 	bl	1c14 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    900a:	2107      	movs	r1, #7
    900c:	a807      	add	r0, sp, #28
    900e:	f7ff fa05 	bl	841c <cmd_complete>
    9012:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    9014:	1c41      	adds	r1, r0, #1
    9016:	a808      	add	r0, sp, #32
    9018:	f008 ff58 	bl	11ecc <ll_rl_crpa_get>
    901c:	e645      	b.n	8caa <hci_cmd_handle+0x50e>
    901e:	2207      	movs	r2, #7
    9020:	68a1      	ldr	r1, [r4, #8]
    9022:	a808      	add	r0, sp, #32
    9024:	f7f8 fdf6 	bl	1c14 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9028:	2107      	movs	r1, #7
    902a:	a807      	add	r0, sp, #28
    902c:	f7ff f9f6 	bl	841c <cmd_complete>
    9030:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9032:	1c41      	adds	r1, r0, #1
    9034:	a808      	add	r0, sp, #32
    9036:	f008 ff69 	bl	11f0c <ll_rl_lrpa_get>
    903a:	e636      	b.n	8caa <hci_cmd_handle+0x50e>
	u8_t enable = cmd->enable;
    903c:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    903e:	2101      	movs	r1, #1
    9040:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    9042:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    9044:	f7ff f9ea 	bl	841c <cmd_complete>
    9048:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    904a:	4628      	mov	r0, r5
    904c:	f008 ff76 	bl	11f3c <ll_rl_enable>
    9050:	e62b      	b.n	8caa <hci_cmd_handle+0x50e>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9052:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    9054:	8818      	ldrh	r0, [r3, #0]
    9056:	f008 ff83 	bl	11f60 <ll_rl_timeout_set>
    905a:	e430      	b.n	88be <hci_cmd_handle+0x122>
    905c:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    905e:	79c1      	ldrb	r1, [r0, #7]
    9060:	f008 ff86 	bl	11f70 <ll_priv_mode_set>
    9064:	e60d      	b.n	8c82 <hci_cmd_handle+0x4e6>
	rp = cmd_complete(evt, sizeof(*rp));
    9066:	2103      	movs	r1, #3
    9068:	a807      	add	r0, sp, #28
    906a:	f7ff f9d7 	bl	841c <cmd_complete>
	rp->status = 0x00;
    906e:	4601      	mov	r1, r0
    9070:	2300      	movs	r3, #0
    9072:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    9076:	3001      	adds	r0, #1
    9078:	f7ff f832 	bl	80e0 <ll_tx_pwr_get>
    907c:	f7ff bbff 	b.w	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    9080:	210d      	movs	r1, #13
    9082:	a807      	add	r0, sp, #28
    9084:	f7ff f9ca 	bl	841c <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9088:	2202      	movs	r2, #2
    908a:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    908c:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    908e:	2201      	movs	r2, #1
    9090:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9092:	220c      	movs	r2, #12
	rp->status = 0x00;
    9094:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9096:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9098:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    909a:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    909c:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    909e:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    90a0:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    90a2:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    90a4:	7242      	strb	r2, [r0, #9]
    90a6:	7283      	strb	r3, [r0, #10]
    90a8:	72c3      	strb	r3, [r0, #11]
    90aa:	7303      	strb	r3, [r0, #12]
    90ac:	f7ff bbe7 	b.w	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    90b0:	2141      	movs	r1, #65	; 0x41
    90b2:	a807      	add	r0, sp, #28
    90b4:	f7ff f9b2 	bl	841c <cmd_complete>
	rp->status = 0x00;
    90b8:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    90ba:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    90bc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    90be:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    90c2:	f7f8 fdd3 	bl	1c6c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    90c6:	7863      	ldrb	r3, [r4, #1]
    90c8:	f063 0358 	orn	r3, r3, #88	; 0x58
    90cc:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    90ce:	78a3      	ldrb	r3, [r4, #2]
    90d0:	f043 0303 	orr.w	r3, r3, #3
    90d4:	70a3      	strb	r3, [r4, #2]
    90d6:	f7ff bbd2 	b.w	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    90da:	2109      	movs	r1, #9
    90dc:	a807      	add	r0, sp, #28
    90de:	f7ff f99d 	bl	841c <cmd_complete>
	rp->status = 0x00;
    90e2:	2100      	movs	r1, #0
    90e4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    90e8:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    90ea:	f7f8 fdbf 	bl	1c6c <memset>
    90ee:	f7ff bbc6 	b.w	887e <hci_cmd_handle+0xe2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    90f2:	4b5c      	ldr	r3, [pc, #368]	; (9264 <hci_cmd_handle+0xac8>)
    90f4:	aa08      	add	r2, sp, #32
    90f6:	f103 0628 	add.w	r6, r3, #40	; 0x28
    90fa:	4615      	mov	r5, r2
    90fc:	6818      	ldr	r0, [r3, #0]
    90fe:	6859      	ldr	r1, [r3, #4]
    9100:	4614      	mov	r4, r2
    9102:	c403      	stmia	r4!, {r0, r1}
    9104:	3308      	adds	r3, #8
    9106:	42b3      	cmp	r3, r6
    9108:	4622      	mov	r2, r4
    910a:	d1f7      	bne.n	90fc <hci_cmd_handle+0x960>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    910c:	2129      	movs	r1, #41	; 0x29
    910e:	a807      	add	r0, sp, #28
    9110:	f7ff f984 	bl	841c <cmd_complete>
	rp->status = 0x00;
    9114:	2300      	movs	r3, #0
    9116:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    911a:	2228      	movs	r2, #40	; 0x28
    911c:	4629      	mov	r1, r5
    911e:	e5de      	b.n	8cde <hci_cmd_handle+0x542>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9120:	68a1      	ldr	r1, [r4, #8]
    9122:	2000      	movs	r0, #0
    9124:	f7fe ffc0 	bl	80a8 <ll_addr_set>
    9128:	f7ff bbc9 	b.w	88be <hci_cmd_handle+0x122>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    912c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9130:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9134:	3201      	adds	r2, #1
    9136:	d106      	bne.n	9146 <hci_cmd_handle+0x9aa>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    913c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    9140:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    9142:	4293      	cmp	r3, r2
    9144:	d020      	beq.n	9188 <hci_cmd_handle+0x9ec>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    9146:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    914a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    914e:	07db      	lsls	r3, r3, #31
    9150:	d51a      	bpl.n	9188 <hci_cmd_handle+0x9ec>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    9152:	2118      	movs	r1, #24
    9154:	a807      	add	r0, sp, #28
    9156:	f7ff f961 	bl	841c <cmd_complete>
		rp->status = 0x00;
    915a:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    915c:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    915e:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    9160:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    9162:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    9164:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    9168:	1ca1      	adds	r1, r4, #2
    916a:	f7ff f913 	bl	8394 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    916e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    9172:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    9174:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    9178:	f063 033f 	orn	r3, r3, #63	; 0x3f
    917c:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    917e:	2210      	movs	r2, #16
    9180:	4631      	mov	r1, r6
    9182:	f104 0008 	add.w	r0, r4, #8
    9186:	e7b0      	b.n	90ea <hci_cmd_handle+0x94e>
	rp = cmd_complete(evt, sizeof(*rp));
    9188:	2102      	movs	r1, #2
    918a:	a807      	add	r0, sp, #28
    918c:	f7ff f946 	bl	841c <cmd_complete>
	rp->status = 0x00;
    9190:	2300      	movs	r3, #0
    9192:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    9194:	7043      	strb	r3, [r0, #1]
    9196:	f7ff bb72 	b.w	887e <hci_cmd_handle+0xe2>
	rp = cmd_complete(evt, sizeof(*rp));
    919a:	2121      	movs	r1, #33	; 0x21
    919c:	a807      	add	r0, sp, #28
    919e:	f7ff f93d 	bl	841c <cmd_complete>
	rp->status = 0x00;
    91a2:	4603      	mov	r3, r0
    91a4:	2200      	movs	r2, #0
    91a6:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    91aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    91ae:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    91b0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    91b4:	3101      	adds	r1, #1
    91b6:	d04b      	beq.n	9250 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    91b8:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    91bc:	3101      	adds	r1, #1
    91be:	d047      	beq.n	9250 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    91c0:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    91c4:	3101      	adds	r1, #1
    91c6:	d043      	beq.n	9250 <hci_cmd_handle+0xab4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    91c8:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    91cc:	3101      	adds	r1, #1
    91ce:	d03f      	beq.n	9250 <hci_cmd_handle+0xab4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    91d0:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    91d4:	4619      	mov	r1, r3
    91d6:	f7ff f8dd 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    91da:	1d61      	adds	r1, r4, #5
    91dc:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    91e0:	f7ff f8d8 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    91e4:	f104 0109 	add.w	r1, r4, #9
    91e8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    91ec:	f7ff f8d2 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    91f0:	f104 010d 	add.w	r1, r4, #13
    91f4:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    91f8:	f7ff f8cc 	bl	8394 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    91fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9200:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9204:	3301      	adds	r3, #1
    9206:	f104 0311 	add.w	r3, r4, #17
    920a:	d027      	beq.n	925c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    920c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9210:	3101      	adds	r1, #1
    9212:	d023      	beq.n	925c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9214:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    9218:	3101      	adds	r1, #1
    921a:	d01f      	beq.n	925c <hci_cmd_handle+0xac0>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    921c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9220:	3101      	adds	r1, #1
    9222:	d01b      	beq.n	925c <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9224:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    9228:	4619      	mov	r1, r3
    922a:	f7ff f8b3 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    922e:	f104 0115 	add.w	r1, r4, #21
    9232:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9236:	f7ff f8ad 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    923a:	f104 0119 	add.w	r1, r4, #25
    923e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    9242:	f7ff f8a7 	bl	8394 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    9246:	f104 011d 	add.w	r1, r4, #29
    924a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    924e:	e563      	b.n	8d18 <hci_cmd_handle+0x57c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9250:	2210      	movs	r2, #16
    9252:	2100      	movs	r1, #0
    9254:	4618      	mov	r0, r3
    9256:	f7f8 fd09 	bl	1c6c <memset>
    925a:	e7cf      	b.n	91fc <hci_cmd_handle+0xa60>
		memset(rp->er, 0x00, sizeof(rp->er));
    925c:	2210      	movs	r2, #16
    925e:	2100      	movs	r1, #0
    9260:	4618      	mov	r0, r3
    9262:	e742      	b.n	90ea <hci_cmd_handle+0x94e>
    9264:	0001704f 	.word	0x0001704f

00009268 <hci_acl_handle>:
{
    9268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    926c:	2300      	movs	r3, #0
    926e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9270:	8983      	ldrh	r3, [r0, #12]
    9272:	2b03      	cmp	r3, #3
{
    9274:	4606      	mov	r6, r0
    9276:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9278:	d80d      	bhi.n	9296 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    927a:	4b3a      	ldr	r3, [pc, #232]	; (9364 <hci_acl_handle+0xfc>)
    927c:	9301      	str	r3, [sp, #4]
    927e:	9300      	str	r3, [sp, #0]
    9280:	4a39      	ldr	r2, [pc, #228]	; (9368 <hci_acl_handle+0x100>)
    9282:	4b3a      	ldr	r3, [pc, #232]	; (936c <hci_acl_handle+0x104>)
    9284:	493a      	ldr	r1, [pc, #232]	; (9370 <hci_acl_handle+0x108>)
    9286:	483b      	ldr	r0, [pc, #236]	; (9374 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    9288:	f7f7 fe80 	bl	f8c <printk>
		return -EINVAL;
    928c:	f06f 0015 	mvn.w	r0, #21
}
    9290:	b003      	add	sp, #12
    9292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9296:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    929a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    929c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    929e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    92a0:	f009 fddb 	bl	12e5a <net_buf_simple_pull>
	if (buf->len < len) {
    92a4:	89b3      	ldrh	r3, [r6, #12]
    92a6:	42bb      	cmp	r3, r7
    92a8:	d207      	bcs.n	92ba <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    92aa:	4b2e      	ldr	r3, [pc, #184]	; (9364 <hci_acl_handle+0xfc>)
    92ac:	9301      	str	r3, [sp, #4]
    92ae:	9300      	str	r3, [sp, #0]
    92b0:	4a2d      	ldr	r2, [pc, #180]	; (9368 <hci_acl_handle+0x100>)
    92b2:	4b2e      	ldr	r3, [pc, #184]	; (936c <hci_acl_handle+0x104>)
    92b4:	492e      	ldr	r1, [pc, #184]	; (9370 <hci_acl_handle+0x108>)
    92b6:	4830      	ldr	r0, [pc, #192]	; (9378 <hci_acl_handle+0x110>)
    92b8:	e7e6      	b.n	9288 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    92ba:	f007 fc57 	bl	10b6c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    92be:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    92c2:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    92c4:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    92c8:	bb30      	cbnz	r0, 9318 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    92ca:	4b26      	ldr	r3, [pc, #152]	; (9364 <hci_acl_handle+0xfc>)
    92cc:	9301      	str	r3, [sp, #4]
    92ce:	9300      	str	r3, [sp, #0]
    92d0:	4a25      	ldr	r2, [pc, #148]	; (9368 <hci_acl_handle+0x100>)
    92d2:	4b26      	ldr	r3, [pc, #152]	; (936c <hci_acl_handle+0x104>)
    92d4:	4926      	ldr	r1, [pc, #152]	; (9370 <hci_acl_handle+0x108>)
    92d6:	4829      	ldr	r0, [pc, #164]	; (937c <hci_acl_handle+0x114>)
    92d8:	f7f7 fe58 	bl	f8c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    92dc:	4b28      	ldr	r3, [pc, #160]	; (9380 <hci_acl_handle+0x118>)
    92de:	e9d3 2300 	ldrd	r2, r3, [r3]
    92e2:	2300      	movs	r3, #0
    92e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    92e8:	4313      	orrs	r3, r2
    92ea:	d012      	beq.n	9312 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    92ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    92f0:	2001      	movs	r0, #1
    92f2:	f7fa ff97 	bl	4224 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    92f6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    92f8:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    92fc:	211a      	movs	r1, #26
    92fe:	f7ff f852 	bl	83a6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    9302:	f8d8 0000 	ldr.w	r0, [r8]
    9306:	2101      	movs	r1, #1
    9308:	3008      	adds	r0, #8
    930a:	f009 fd87 	bl	12e1c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    930e:	2301      	movs	r3, #1
    9310:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9312:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9316:	e7bb      	b.n	9290 <hci_acl_handle+0x28>
    9318:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    931a:	f1b9 0f00 	cmp.w	r9, #0
    931e:	d002      	beq.n	9326 <hci_acl_handle+0xbe>
    9320:	f1b9 0f02 	cmp.w	r9, #2
    9324:	d11c      	bne.n	9360 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9326:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9328:	f362 0301 	bfi	r3, r2, #0, #2
    932c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    932e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9330:	68b1      	ldr	r1, [r6, #8]
    9332:	463a      	mov	r2, r7
    9334:	1de0      	adds	r0, r4, #7
    9336:	f7f8 fc6d 	bl	1c14 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    933a:	4621      	mov	r1, r4
    933c:	4628      	mov	r0, r5
    933e:	f007 fc21 	bl	10b84 <ll_tx_mem_enqueue>
    9342:	2800      	cmp	r0, #0
    9344:	d0a4      	beq.n	9290 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    9346:	4b07      	ldr	r3, [pc, #28]	; (9364 <hci_acl_handle+0xfc>)
    9348:	9301      	str	r3, [sp, #4]
    934a:	9300      	str	r3, [sp, #0]
    934c:	4a06      	ldr	r2, [pc, #24]	; (9368 <hci_acl_handle+0x100>)
    934e:	4b07      	ldr	r3, [pc, #28]	; (936c <hci_acl_handle+0x104>)
    9350:	4907      	ldr	r1, [pc, #28]	; (9370 <hci_acl_handle+0x108>)
    9352:	480c      	ldr	r0, [pc, #48]	; (9384 <hci_acl_handle+0x11c>)
    9354:	f7f7 fe1a 	bl	f8c <printk>
		ll_tx_mem_release(node_tx);
    9358:	4620      	mov	r0, r4
    935a:	f007 fc0d 	bl	10b78 <ll_tx_mem_release>
    935e:	e795      	b.n	928c <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9360:	2201      	movs	r2, #1
    9362:	e7e1      	b.n	9328 <hci_acl_handle+0xc0>
    9364:	00014b99 	.word	0x00014b99
    9368:	00015f55 	.word	0x00015f55
    936c:	00016ec7 	.word	0x00016ec7
    9370:	00015fa4 	.word	0x00015fa4
    9374:	00016f65 	.word	0x00016f65
    9378:	00016f87 	.word	0x00016f87
    937c:	00016fb5 	.word	0x00016fb5
    9380:	20003d30 	.word	0x20003d30
    9384:	00016fd8 	.word	0x00016fd8

00009388 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9388:	7a03      	ldrb	r3, [r0, #8]
    938a:	f003 0303 	and.w	r3, r3, #3
    938e:	3b01      	subs	r3, #1
    9390:	2b01      	cmp	r3, #1
{
    9392:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9394:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    9396:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9398:	d81c      	bhi.n	93d4 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    939a:	f101 0608 	add.w	r6, r1, #8
    939e:	4630      	mov	r0, r6
    93a0:	2104      	movs	r1, #4
    93a2:	f009 fd3b 	bl	12e1c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    93a6:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    93a8:	7a61      	ldrb	r1, [r4, #9]
    93aa:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    93ac:	f003 0303 	and.w	r3, r3, #3
    93b0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    93b2:	bf0c      	ite	eq
    93b4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    93b8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    93bc:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    93be:	4630      	mov	r0, r6
    93c0:	f009 fd2c 	bl	12e1c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    93c4:	7a62      	ldrb	r2, [r4, #9]
    93c6:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    93ca:	b002      	add	sp, #8
    93cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    93d0:	f7f8 bc20 	b.w	1c14 <memcpy>
		LL_ASSERT(0);
    93d4:	4b07      	ldr	r3, [pc, #28]	; (93f4 <hci_acl_encode+0x6c>)
    93d6:	9301      	str	r3, [sp, #4]
    93d8:	9300      	str	r3, [sp, #0]
    93da:	4a07      	ldr	r2, [pc, #28]	; (93f8 <hci_acl_encode+0x70>)
    93dc:	4b07      	ldr	r3, [pc, #28]	; (93fc <hci_acl_encode+0x74>)
    93de:	4908      	ldr	r1, [pc, #32]	; (9400 <hci_acl_encode+0x78>)
    93e0:	4808      	ldr	r0, [pc, #32]	; (9404 <hci_acl_encode+0x7c>)
    93e2:	f7f7 fdd3 	bl	f8c <printk>
    93e6:	4040      	eors	r0, r0
    93e8:	f380 8811 	msr	BASEPRI, r0
    93ec:	f04f 0004 	mov.w	r0, #4
    93f0:	df02      	svc	2
    93f2:	bf00      	nop
    93f4:	00014b99 	.word	0x00014b99
    93f8:	00015f55 	.word	0x00015f55
    93fc:	00016f56 	.word	0x00016f56
    9400:	00015fa4 	.word	0x00015fa4
    9404:	00015ec9 	.word	0x00015ec9

00009408 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    940c:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    940e:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9410:	2b01      	cmp	r3, #1
{
    9412:	b093      	sub	sp, #76	; 0x4c
    9414:	4604      	mov	r4, r0
    9416:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    9418:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    941c:	f000 82a6 	beq.w	996c <hci_evt_encode+0x564>
	switch (node_rx->hdr.type) {
    9420:	3b02      	subs	r3, #2
    9422:	2b0a      	cmp	r3, #10
    9424:	f200 829a 	bhi.w	995c <hci_evt_encode+0x554>
    9428:	e8df f013 	tbh	[pc, r3, lsl #1]
    942c:	0134000b 	.word	0x0134000b
    9430:	013c013a 	.word	0x013c013a
    9434:	01ba0183 	.word	0x01ba0183
    9438:	01fd01d8 	.word	0x01fd01d8
    943c:	022a0215 	.word	0x022a0215
    9440:	0245      	.short	0x0245
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9442:	2301      	movs	r3, #1
    9444:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9448:	2303      	movs	r3, #3
    944a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    944e:	23ff      	movs	r3, #255	; 0xff
    9450:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9454:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9458:	2302      	movs	r3, #2
    945a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    945e:	7a43      	ldrb	r3, [r0, #9]
    9460:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9462:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9464:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9468:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    946a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    946e:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    9470:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9472:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9476:	d505      	bpl.n	9484 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9478:	f104 030a 	add.w	r3, r4, #10
    947c:	464a      	mov	r2, r9
    947e:	4608      	mov	r0, r1
    9480:	f008 fd02 	bl	11e88 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9484:	4bb8      	ldr	r3, [pc, #736]	; (9768 <hci_evt_encode+0x360>)
    9486:	e9d3 2300 	ldrd	r2, r3, [r3]
    948a:	2200      	movs	r2, #0
    948c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9490:	4313      	orrs	r3, r2
    9492:	f000 80b9 	beq.w	9608 <hci_evt_encode+0x200>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9496:	7a63      	ldrb	r3, [r4, #9]
    9498:	4423      	add	r3, r4
    949a:	f893 a00c 	ldrb.w	sl, [r3, #12]
    949e:	4bb3      	ldr	r3, [pc, #716]	; (976c <hci_evt_encode+0x364>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    94a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94a4:	f1ba 0f00 	cmp.w	sl, #0
    94a8:	d13d      	bne.n	9526 <hci_evt_encode+0x11e>
    94aa:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    94ae:	2300      	movs	r3, #0
    94b0:	4313      	orrs	r3, r2
    94b2:	f000 80a9 	beq.w	9608 <hci_evt_encode+0x200>
	if (dup_count >= 0) {
    94b6:	4bae      	ldr	r3, [pc, #696]	; (9770 <hci_evt_encode+0x368>)
    94b8:	681a      	ldr	r2, [r3, #0]
    94ba:	2a00      	cmp	r2, #0
    94bc:	4698      	mov	r8, r3
    94be:	db54      	blt.n	956a <hci_evt_encode+0x162>
    94c0:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 979c <hci_evt_encode+0x394>
    94c4:	2600      	movs	r6, #0
    94c6:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    94ca:	f8d8 2000 	ldr.w	r2, [r8]
    94ce:	4296      	cmp	r6, r2
    94d0:	db2c      	blt.n	952c <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    94d2:	4ea8      	ldr	r6, [pc, #672]	; (9774 <hci_evt_encode+0x36c>)
    94d4:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 9778 <hci_evt_encode+0x370>
    94d8:	6830      	ldr	r0, [r6, #0]
    94da:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    94de:	4619      	mov	r1, r3
    94e0:	2206      	movs	r2, #6
    94e2:	3002      	adds	r0, #2
    94e4:	f7f8 fb96 	bl	1c14 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    94e8:	6832      	ldr	r2, [r6, #0]
    94ea:	7a23      	ldrb	r3, [r4, #8]
    94ec:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    94f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    94f4:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    94f6:	7a23      	ldrb	r3, [r4, #8]
    94f8:	f003 010f 	and.w	r1, r3, #15
    94fc:	2301      	movs	r3, #1
    94fe:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9500:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    9504:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9508:	290f      	cmp	r1, #15
			dup_count++;
    950a:	bfd5      	itete	le
    950c:	3101      	addle	r1, #1
			dup_curr++;
    950e:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    9510:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    9512:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    9514:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    9516:	bfd8      	it	le
    9518:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    951c:	2a10      	cmp	r2, #16
    951e:	d124      	bne.n	956a <hci_evt_encode+0x162>
			dup_curr = 0;
    9520:	2200      	movs	r2, #0
    9522:	6032      	str	r2, [r6, #0]
    9524:	e021      	b.n	956a <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    9526:	f002 020b 	and.w	r2, r2, #11
    952a:	e7c0      	b.n	94ae <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    952c:	4618      	mov	r0, r3
    952e:	2206      	movs	r2, #6
    9530:	4659      	mov	r1, fp
    9532:	9307      	str	r3, [sp, #28]
    9534:	f7f8 fb59 	bl	1bea <memcmp>
    9538:	9b07      	ldr	r3, [sp, #28]
    953a:	bb00      	cbnz	r0, 957e <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    953c:	7a21      	ldrb	r1, [r4, #8]
    953e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    9542:	460a      	mov	r2, r1
    9544:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9548:	4281      	cmp	r1, r0
    954a:	d118      	bne.n	957e <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    954c:	488a      	ldr	r0, [pc, #552]	; (9778 <hci_evt_encode+0x370>)
    954e:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    9552:	f002 020f 	and.w	r2, r2, #15
    9556:	fa23 f102 	lsr.w	r1, r3, r2
    955a:	07c9      	lsls	r1, r1, #31
    955c:	d454      	bmi.n	9608 <hci_evt_encode+0x200>
				dup_filter[i].mask |= BIT(adv->type);
    955e:	2101      	movs	r1, #1
    9560:	fa01 f202 	lsl.w	r2, r1, r2
    9564:	4313      	orrs	r3, r2
    9566:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    956a:	f894 b008 	ldrb.w	fp, [r4, #8]
    956e:	7a63      	ldrb	r3, [r4, #9]
    9570:	f00b 0b0f 	and.w	fp, fp, #15
    9574:	f1bb 0f01 	cmp.w	fp, #1
    9578:	d105      	bne.n	9586 <hci_evt_encode+0x17e>
		data_len = 0;
    957a:	2600      	movs	r6, #0
    957c:	e005      	b.n	958a <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    957e:	3601      	adds	r6, #1
    9580:	f10b 0b08 	add.w	fp, fp, #8
    9584:	e7a1      	b.n	94ca <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    9586:	1f9e      	subs	r6, r3, #6
    9588:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    958a:	4423      	add	r3, r4
    958c:	f893 800a 	ldrb.w	r8, [r3, #10]
    9590:	f1c8 0800 	rsb	r8, r8, #0
    9594:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9598:	f1ba 0f00 	cmp.w	sl, #0
    959c:	d041      	beq.n	9622 <hci_evt_encode+0x21a>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    959e:	f1bb 0f01 	cmp.w	fp, #1
    95a2:	d00e      	beq.n	95c2 <hci_evt_encode+0x1ba>
    95a4:	4b75      	ldr	r3, [pc, #468]	; (977c <hci_evt_encode+0x374>)
    95a6:	9301      	str	r3, [sp, #4]
    95a8:	9300      	str	r3, [sp, #0]
    95aa:	4a75      	ldr	r2, [pc, #468]	; (9780 <hci_evt_encode+0x378>)
    95ac:	4b75      	ldr	r3, [pc, #468]	; (9784 <hci_evt_encode+0x37c>)
    95ae:	4976      	ldr	r1, [pc, #472]	; (9788 <hci_evt_encode+0x380>)
    95b0:	4876      	ldr	r0, [pc, #472]	; (978c <hci_evt_encode+0x384>)
		LL_ASSERT(0);
    95b2:	f7f7 fceb 	bl	f8c <printk>
    95b6:	4040      	eors	r0, r0
    95b8:	f380 8811 	msr	BASEPRI, r0
    95bc:	f04f 0004 	mov.w	r0, #4
    95c0:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    95c2:	2211      	movs	r2, #17
    95c4:	210b      	movs	r1, #11
    95c6:	4628      	mov	r0, r5
    95c8:	f7fe ff12 	bl	83f0 <meta_evt>
		drp->num_reports = 1;
    95cc:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    95d0:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    95d4:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    95d6:	f008 fb2d 	bl	11c34 <ll_rl_size_get>
    95da:	4581      	cmp	r9, r0
    95dc:	f105 0003 	add.w	r0, r5, #3
    95e0:	d215      	bcs.n	960e <hci_evt_encode+0x206>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    95e2:	4602      	mov	r2, r0
    95e4:	1ca9      	adds	r1, r5, #2
    95e6:	4648      	mov	r0, r9
    95e8:	f008 f9c2 	bl	11970 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    95ec:	78ab      	ldrb	r3, [r5, #2]
    95ee:	3302      	adds	r3, #2
    95f0:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    95f2:	2301      	movs	r3, #1
    95f4:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    95f6:	2206      	movs	r2, #6
    95f8:	f107 0108 	add.w	r1, r7, #8
    95fc:	f105 000a 	add.w	r0, r5, #10
    9600:	f7f8 fb08 	bl	1c14 <memcpy>
		dir_info->rssi = rssi;
    9604:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9608:	b013      	add	sp, #76	; 0x4c
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    960e:	7a23      	ldrb	r3, [r4, #8]
    9610:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9614:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    9616:	2206      	movs	r2, #6
    9618:	f104 010a 	add.w	r1, r4, #10
    961c:	f7f8 fafa 	bl	1c14 <memcpy>
    9620:	e7e7      	b.n	95f2 <hci_evt_encode+0x1ea>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9622:	f106 020b 	add.w	r2, r6, #11
    9626:	b2d2      	uxtb	r2, r2
    9628:	2102      	movs	r1, #2
    962a:	4628      	mov	r0, r5
    962c:	f7fe fee0 	bl	83f0 <meta_evt>
	sep->num_reports = 1;
    9630:	2301      	movs	r3, #1
    9632:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9634:	7a23      	ldrb	r3, [r4, #8]
    9636:	aa12      	add	r2, sp, #72	; 0x48
    9638:	f003 030f 	and.w	r3, r3, #15
    963c:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    963e:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    9640:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9644:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9646:	7a63      	ldrb	r3, [r4, #9]
    9648:	4423      	add	r3, r4
    964a:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    964e:	f008 faf1 	bl	11c34 <ll_rl_size_get>
    9652:	4581      	cmp	r9, r0
    9654:	f105 0003 	add.w	r0, r5, #3
    9658:	d212      	bcs.n	9680 <hci_evt_encode+0x278>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    965a:	4602      	mov	r2, r0
    965c:	1ca9      	adds	r1, r5, #2
    965e:	4648      	mov	r0, r9
    9660:	f008 f986 	bl	11970 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9664:	78ab      	ldrb	r3, [r5, #2]
    9666:	3302      	adds	r3, #2
    9668:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    966a:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    966c:	350a      	adds	r5, #10
    966e:	4632      	mov	r2, r6
    9670:	f107 0108 	add.w	r1, r7, #8
    9674:	4628      	mov	r0, r5
    9676:	f7f8 facd 	bl	1c14 <memcpy>
	*prssi = rssi;
    967a:	f805 8006 	strb.w	r8, [r5, r6]
    967e:	e7c3      	b.n	9608 <hci_evt_encode+0x200>
		adv_info->addr.type = adv->tx_addr;
    9680:	7a23      	ldrb	r3, [r4, #8]
    9682:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9686:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9688:	2206      	movs	r2, #6
    968a:	f104 010a 	add.w	r1, r4, #10
    968e:	f7f8 fac1 	bl	1c14 <memcpy>
    9692:	e7ea      	b.n	966a <hci_evt_encode+0x262>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9694:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9696:	4621      	mov	r1, r4
    9698:	4638      	mov	r0, r7
    969a:	f7ff f801 	bl	86a0 <le_adv_ext_report.isra.66>
    969e:	e7b3      	b.n	9608 <hci_evt_encode+0x200>
    96a0:	2204      	movs	r2, #4
    96a2:	e7f8      	b.n	9696 <hci_evt_encode+0x28e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96a4:	4b30      	ldr	r3, [pc, #192]	; (9768 <hci_evt_encode+0x360>)
    96a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    96aa:	2200      	movs	r2, #0
    96ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    96b0:	4313      	orrs	r3, r2
    96b2:	f100 060a 	add.w	r6, r0, #10
    96b6:	d007      	beq.n	96c8 <hci_evt_encode+0x2c0>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    96b8:	4b2c      	ldr	r3, [pc, #176]	; (976c <hci_evt_encode+0x364>)
    96ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    96be:	2300      	movs	r3, #0
    96c0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96c4:	4313      	orrs	r3, r2
    96c6:	d123      	bne.n	9710 <hci_evt_encode+0x308>
		addr.type = adv->tx_addr;
    96c8:	7a23      	ldrb	r3, [r4, #8]
    96ca:	ad12      	add	r5, sp, #72	; 0x48
    96cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    96d0:	2206      	movs	r2, #6
    96d2:	4631      	mov	r1, r6
    96d4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    96d8:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    96dc:	f7f8 fa9a 	bl	1c14 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    96e0:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    96e2:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    96e4:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    96e6:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    96e8:	4631      	mov	r1, r6
    96ea:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    96ec:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    96ee:	f7fe ff9b 	bl	8628 <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    96f2:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    96f4:	4b21      	ldr	r3, [pc, #132]	; (977c <hci_evt_encode+0x374>)
    96f6:	9304      	str	r3, [sp, #16]
    96f8:	2200      	movs	r2, #0
    96fa:	9201      	str	r2, [sp, #4]
    96fc:	9300      	str	r3, [sp, #0]
    96fe:	9403      	str	r4, [sp, #12]
    9700:	9602      	str	r6, [sp, #8]
    9702:	4b23      	ldr	r3, [pc, #140]	; (9790 <hci_evt_encode+0x388>)
    9704:	4a23      	ldr	r2, [pc, #140]	; (9794 <hci_evt_encode+0x38c>)
    9706:	4920      	ldr	r1, [pc, #128]	; (9788 <hci_evt_encode+0x380>)
    9708:	4823      	ldr	r0, [pc, #140]	; (9798 <hci_evt_encode+0x390>)
    970a:	f7f7 fc3f 	bl	f8c <printk>
    970e:	e77b      	b.n	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9710:	2208      	movs	r2, #8
    9712:	2113      	movs	r1, #19
    9714:	4628      	mov	r0, r5
    9716:	f7fe fe6b 	bl	83f0 <meta_evt>
	sep->handle = 0;
    971a:	2300      	movs	r3, #0
    971c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    971e:	7a23      	ldrb	r3, [r4, #8]
    9720:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9724:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9726:	2206      	movs	r2, #6
    9728:	4631      	mov	r1, r6
    972a:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    972c:	f7f8 fa72 	bl	1c14 <memcpy>
    9730:	e76a      	b.n	9608 <hci_evt_encode+0x200>
			le_conn_complete(cc->status, cc, handle, buf);
    9732:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9734:	b93f      	cbnz	r7, 9746 <hci_evt_encode+0x33e>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9736:	f100 0314 	add.w	r3, r0, #20
    973a:	f100 010e 	add.w	r1, r0, #14
    973e:	22ff      	movs	r2, #255	; 0xff
    9740:	7b40      	ldrb	r0, [r0, #13]
    9742:	f008 fba1 	bl	11e88 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9746:	4b08      	ldr	r3, [pc, #32]	; (9768 <hci_evt_encode+0x360>)
    9748:	e9d3 2300 	ldrd	r2, r3, [r3]
    974c:	2200      	movs	r2, #0
    974e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9752:	4313      	orrs	r3, r2
    9754:	f43f af58 	beq.w	9608 <hci_evt_encode+0x200>
    9758:	462b      	mov	r3, r5
    975a:	4632      	mov	r2, r6
    975c:	f104 010b 	add.w	r1, r4, #11
    9760:	4638      	mov	r0, r7
    9762:	f7fe fecb 	bl	84fc <le_conn_complete.part.39>
    9766:	e74f      	b.n	9608 <hci_evt_encode+0x200>
    9768:	20003d30 	.word	0x20003d30
    976c:	20003d38 	.word	0x20003d38
    9770:	20000830 	.word	0x20000830
    9774:	20000834 	.word	0x20000834
    9778:	20000838 	.word	0x20000838
    977c:	00014b99 	.word	0x00014b99
    9780:	00015f55 	.word	0x00015f55
    9784:	00016ed6 	.word	0x00016ed6
    9788:	00015fa4 	.word	0x00015fa4
    978c:	00017077 	.word	0x00017077
    9790:	00016efe 	.word	0x00016efe
    9794:	00015fdf 	.word	0x00015fdf
    9798:	000170bd 	.word	0x000170bd
    979c:	2000083a 	.word	0x2000083a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    97a0:	4bb2      	ldr	r3, [pc, #712]	; (9a6c <hci_evt_encode+0x664>)
    97a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    97a6:	2300      	movs	r3, #0
    97a8:	f002 0210 	and.w	r2, r2, #16
    97ac:	4313      	orrs	r3, r2
    97ae:	f43f af2b 	beq.w	9608 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    97b2:	2204      	movs	r2, #4
    97b4:	2105      	movs	r1, #5
    97b6:	4628      	mov	r0, r5
    97b8:	f7fe fdf5 	bl	83a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    97bc:	2104      	movs	r1, #4
    97be:	f105 0008 	add.w	r0, r5, #8
    97c2:	f009 fb2b 	bl	12e1c <net_buf_simple_add>
	ep->status = 0x00;
    97c6:	2300      	movs	r3, #0
	conn_count--;
    97c8:	4aa9      	ldr	r2, [pc, #676]	; (9a70 <hci_evt_encode+0x668>)
	ep->status = 0x00;
    97ca:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    97cc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    97d0:	7a23      	ldrb	r3, [r4, #8]
    97d2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    97d4:	6813      	ldr	r3, [r2, #0]
    97d6:	3b01      	subs	r3, #1
    97d8:	6013      	str	r3, [r2, #0]
    97da:	e715      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97dc:	4ba3      	ldr	r3, [pc, #652]	; (9a6c <hci_evt_encode+0x664>)
    97de:	e9d3 2300 	ldrd	r2, r3, [r3]
    97e2:	2200      	movs	r2, #0
    97e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    97e8:	4313      	orrs	r3, r2
    97ea:	f43f af0d 	beq.w	9608 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    97ee:	4ba1      	ldr	r3, [pc, #644]	; (9a74 <hci_evt_encode+0x66c>)
    97f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    97f4:	2300      	movs	r3, #0
    97f6:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97fa:	4313      	orrs	r3, r2
    97fc:	f43f af04 	beq.w	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9800:	2209      	movs	r2, #9
    9802:	2103      	movs	r1, #3
    9804:	4628      	mov	r0, r5
    9806:	f7fe fdf3 	bl	83f0 <meta_evt>
	sep->status = radio_cu->status;
    980a:	7ae3      	ldrb	r3, [r4, #11]
    980c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    980e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9810:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9814:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9818:	89e3      	ldrh	r3, [r4, #14]
    981a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    981e:	8a23      	ldrh	r3, [r4, #16]
    9820:	f8a0 3007 	strh.w	r3, [r0, #7]
    9824:	e6f0      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9826:	4b91      	ldr	r3, [pc, #580]	; (9a6c <hci_evt_encode+0x664>)
    9828:	e9d3 2300 	ldrd	r2, r3, [r3]
    982c:	2200      	movs	r2, #0
    982e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9832:	4313      	orrs	r3, r2
    9834:	f43f aee8 	beq.w	9608 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9838:	2203      	movs	r2, #3
    983a:	2130      	movs	r1, #48	; 0x30
    983c:	4628      	mov	r0, r5
    983e:	f7fe fdb2 	bl	83a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9842:	2103      	movs	r1, #3
    9844:	f105 0008 	add.w	r0, r5, #8
    9848:	f009 fae8 	bl	12e1c <net_buf_simple_add>
	ep->status = 0x00;
    984c:	2300      	movs	r3, #0
    984e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9850:	f8a0 6001 	strh.w	r6, [r0, #1]
    9854:	e6d8      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    9856:	4b88      	ldr	r3, [pc, #544]	; (9a78 <hci_evt_encode+0x670>)
    9858:	e9d3 2300 	ldrd	r2, r3, [r3]
    985c:	2300      	movs	r3, #0
    985e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9862:	4313      	orrs	r3, r2
    9864:	f43f aed0 	beq.w	9608 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9868:	2202      	movs	r2, #2
    986a:	2157      	movs	r1, #87	; 0x57
    986c:	4628      	mov	r0, r5
    986e:	f7fe fd9a 	bl	83a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9872:	2102      	movs	r1, #2
    9874:	f105 0008 	add.w	r0, r5, #8
    9878:	f009 fad0 	bl	12e1c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    987c:	8006      	strh	r6, [r0, #0]
    987e:	e6c3      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9880:	4b7a      	ldr	r3, [pc, #488]	; (9a6c <hci_evt_encode+0x664>)
    9882:	e9d3 2300 	ldrd	r2, r3, [r3]
    9886:	2200      	movs	r2, #0
    9888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    988c:	4313      	orrs	r3, r2
    988e:	f43f aebb 	beq.w	9608 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9892:	4b78      	ldr	r3, [pc, #480]	; (9a74 <hci_evt_encode+0x66c>)
    9894:	e9d3 2300 	ldrd	r2, r3, [r3]
    9898:	2300      	movs	r3, #0
    989a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    989e:	4313      	orrs	r3, r2
    98a0:	f43f aeb2 	beq.w	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    98a4:	2203      	movs	r2, #3
    98a6:	2114      	movs	r1, #20
    98a8:	4628      	mov	r0, r5
    98aa:	f7fe fda1 	bl	83f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    98ae:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    98b0:	7ae3      	ldrb	r3, [r4, #11]
    98b2:	7083      	strb	r3, [r0, #2]
    98b4:	e6a8      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98b6:	4b6d      	ldr	r3, [pc, #436]	; (9a6c <hci_evt_encode+0x664>)
    98b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    98bc:	2200      	movs	r2, #0
    98be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    98c2:	4313      	orrs	r3, r2
    98c4:	d007      	beq.n	98d6 <hci_evt_encode+0x4ce>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    98c6:	4b6b      	ldr	r3, [pc, #428]	; (9a74 <hci_evt_encode+0x66c>)
    98c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    98cc:	2300      	movs	r3, #0
    98ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98d2:	4313      	orrs	r3, r2
    98d4:	d122      	bne.n	991c <hci_evt_encode+0x514>
    98d6:	7b22      	ldrb	r2, [r4, #12]
    98d8:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    98da:	4868      	ldr	r0, [pc, #416]	; (9a7c <hci_evt_encode+0x674>)
    98dc:	2a00      	cmp	r2, #0
    98de:	fa92 f3a2 	rbit	r3, r2
    98e2:	fab3 f383 	clz	r3, r3
    98e6:	fa91 f2a1 	rbit	r2, r1
    98ea:	bf08      	it	eq
    98ec:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    98f0:	2900      	cmp	r1, #0
    98f2:	fab2 f282 	clz	r2, r2
    98f6:	bf08      	it	eq
    98f8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    98fc:	4960      	ldr	r1, [pc, #384]	; (9a80 <hci_evt_encode+0x678>)
    98fe:	9105      	str	r1, [sp, #20]
    9900:	3301      	adds	r3, #1
    9902:	3201      	adds	r2, #1
    9904:	9204      	str	r2, [sp, #16]
    9906:	9303      	str	r3, [sp, #12]
    9908:	7ae3      	ldrb	r3, [r4, #11]
    990a:	9302      	str	r3, [sp, #8]
    990c:	e88d 0042 	stmia.w	sp, {r1, r6}
    9910:	4b5c      	ldr	r3, [pc, #368]	; (9a84 <hci_evt_encode+0x67c>)
    9912:	4a5d      	ldr	r2, [pc, #372]	; (9a88 <hci_evt_encode+0x680>)
    9914:	495d      	ldr	r1, [pc, #372]	; (9a8c <hci_evt_encode+0x684>)
    9916:	f7f7 fb39 	bl	f8c <printk>
    991a:	e675      	b.n	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    991c:	2205      	movs	r2, #5
    991e:	210c      	movs	r1, #12
    9920:	4628      	mov	r0, r5
    9922:	f7fe fd65 	bl	83f0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9926:	7ae3      	ldrb	r3, [r4, #11]
    9928:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    992a:	f8a0 6001 	strh.w	r6, [r0, #1]
    992e:	7b22      	ldrb	r2, [r4, #12]
    9930:	2a00      	cmp	r2, #0
    9932:	fa92 f3a2 	rbit	r3, r2
    9936:	fab3 f383 	clz	r3, r3
    993a:	bf08      	it	eq
    993c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9940:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9942:	70c3      	strb	r3, [r0, #3]
    9944:	7b62      	ldrb	r2, [r4, #13]
    9946:	fa92 f3a2 	rbit	r3, r2
    994a:	2a00      	cmp	r2, #0
    994c:	fab3 f383 	clz	r3, r3
    9950:	bf08      	it	eq
    9952:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9956:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9958:	7103      	strb	r3, [r0, #4]
    995a:	e655      	b.n	9608 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    995c:	4b48      	ldr	r3, [pc, #288]	; (9a80 <hci_evt_encode+0x678>)
    995e:	9301      	str	r3, [sp, #4]
    9960:	9300      	str	r3, [sp, #0]
    9962:	4b4b      	ldr	r3, [pc, #300]	; (9a90 <hci_evt_encode+0x688>)
    9964:	4a4b      	ldr	r2, [pc, #300]	; (9a94 <hci_evt_encode+0x68c>)
    9966:	4949      	ldr	r1, [pc, #292]	; (9a8c <hci_evt_encode+0x684>)
    9968:	484b      	ldr	r0, [pc, #300]	; (9a98 <hci_evt_encode+0x690>)
    996a:	e622      	b.n	95b2 <hci_evt_encode+0x1aa>
	switch (pdu_data->llctrl.opcode) {
    996c:	7ac3      	ldrb	r3, [r0, #11]
    996e:	3b03      	subs	r3, #3
    9970:	2b12      	cmp	r3, #18
    9972:	f200 80d5 	bhi.w	9b20 <hci_evt_encode+0x718>
    9976:	e8df f003 	tbb	[pc, r3]
    997a:	d30a      	.short	0xd30a
    997c:	d3c02fd3 	.word	0xd3c02fd3
    9980:	3cd3d335 	.word	0x3cd3d335
    9984:	d35fd35b 	.word	0xd35fd35b
    9988:	a0d3d3d3 	.word	0xa0d3d3d3
    998c:	a0          	.byte	0xa0
    998d:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    998e:	4b37      	ldr	r3, [pc, #220]	; (9a6c <hci_evt_encode+0x664>)
    9990:	e9d3 2300 	ldrd	r2, r3, [r3]
    9994:	2200      	movs	r2, #0
    9996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    999a:	4313      	orrs	r3, r2
    999c:	f43f ae34 	beq.w	9608 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    99a0:	4b34      	ldr	r3, [pc, #208]	; (9a74 <hci_evt_encode+0x66c>)
    99a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    99a6:	2300      	movs	r3, #0
    99a8:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    99ac:	4313      	orrs	r3, r2
    99ae:	f43f ae2b 	beq.w	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    99b2:	220c      	movs	r2, #12
    99b4:	2105      	movs	r1, #5
    99b6:	4628      	mov	r0, r5
    99b8:	f7fe fd1a 	bl	83f0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    99bc:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    99be:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    99c0:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    99c4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    99c8:	f7f8 f924 	bl	1c14 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    99cc:	2202      	movs	r2, #2
    99ce:	f104 0114 	add.w	r1, r4, #20
    99d2:	f105 000a 	add.w	r0, r5, #10
    99d6:	e6a9      	b.n	972c <hci_evt_encode+0x324>
		encrypt_change(0x00, handle, buf);
    99d8:	460a      	mov	r2, r1
    99da:	2000      	movs	r0, #0
    99dc:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    99de:	f7fe fd3f 	bl	8460 <encrypt_change>
    99e2:	e611      	b.n	9608 <hci_evt_encode+0x200>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    99e4:	460b      	mov	r3, r1
    99e6:	4632      	mov	r2, r6
    99e8:	4639      	mov	r1, r7
    99ea:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    99ec:	f7fe fd58 	bl	84a0 <le_remote_feat_complete>
    99f0:	e60a      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    99f2:	4b1e      	ldr	r3, [pc, #120]	; (9a6c <hci_evt_encode+0x664>)
    99f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    99f8:	2300      	movs	r3, #0
    99fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    99fe:	4313      	orrs	r3, r2
    9a00:	f43f ae02 	beq.w	9608 <hci_evt_encode+0x200>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9a04:	2208      	movs	r2, #8
    9a06:	210c      	movs	r1, #12
    9a08:	4628      	mov	r0, r5
    9a0a:	f7fe fccc 	bl	83a6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9a0e:	2108      	movs	r1, #8
    9a10:	1868      	adds	r0, r5, r1
    9a12:	f009 fa03 	bl	12e1c <net_buf_simple_add>
	ep->status = 0x00;
    9a16:	2300      	movs	r3, #0
    9a18:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9a1a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9a1e:	7b23      	ldrb	r3, [r4, #12]
    9a20:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9a22:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9a26:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9a28:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9a2c:	80c3      	strh	r3, [r0, #6]
    9a2e:	e5eb      	b.n	9608 <hci_evt_encode+0x200>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9a30:	460a      	mov	r2, r1
    9a32:	7b00      	ldrb	r0, [r0, #12]
    9a34:	4631      	mov	r1, r6
    9a36:	e7d2      	b.n	99de <hci_evt_encode+0x5d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a38:	4b0c      	ldr	r3, [pc, #48]	; (9a6c <hci_evt_encode+0x664>)
    9a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a3e:	2200      	movs	r2, #0
    9a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9a44:	4313      	orrs	r3, r2
    9a46:	d007      	beq.n	9a58 <hci_evt_encode+0x650>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9a48:	4b0a      	ldr	r3, [pc, #40]	; (9a74 <hci_evt_encode+0x66c>)
    9a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4e:	2300      	movs	r3, #0
    9a50:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a54:	4313      	orrs	r3, r2
    9a56:	d121      	bne.n	9a9c <hci_evt_encode+0x694>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9a58:	2300      	movs	r3, #0
    9a5a:	9301      	str	r3, [sp, #4]
    9a5c:	9300      	str	r3, [sp, #0]
    9a5e:	221a      	movs	r2, #26
    9a60:	2102      	movs	r1, #2
    9a62:	4630      	mov	r0, r6
    9a64:	f006 fdda 	bl	1061c <ll_conn_update>
    9a68:	e5ce      	b.n	9608 <hci_evt_encode+0x200>
    9a6a:	bf00      	nop
    9a6c:	20003d30 	.word	0x20003d30
    9a70:	2000082c 	.word	0x2000082c
    9a74:	20003d38 	.word	0x20003d38
    9a78:	200008b8 	.word	0x200008b8
    9a7c:	000170f0 	.word	0x000170f0
    9a80:	00014b99 	.word	0x00014b99
    9a84:	00016f13 	.word	0x00016f13
    9a88:	00015fdf 	.word	0x00015fdf
    9a8c:	00015fa4 	.word	0x00015fa4
    9a90:	00016f27 	.word	0x00016f27
    9a94:	00015f55 	.word	0x00015f55
    9a98:	00015ec9 	.word	0x00015ec9
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9a9c:	220a      	movs	r2, #10
    9a9e:	2106      	movs	r1, #6
    9aa0:	4628      	mov	r0, r5
    9aa2:	f7fe fca5 	bl	83f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9aa6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9aa8:	89a3      	ldrh	r3, [r4, #12]
    9aaa:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9aac:	89e3      	ldrh	r3, [r4, #14]
    9aae:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9ab0:	8a23      	ldrh	r3, [r4, #16]
    9ab2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    9ab4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9ab6:	8103      	strh	r3, [r0, #8]
    9ab8:	e5a6      	b.n	9608 <hci_evt_encode+0x200>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9aba:	4b1c      	ldr	r3, [pc, #112]	; (9b2c <hci_evt_encode+0x724>)
    9abc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac0:	2200      	movs	r2, #0
    9ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9ac6:	4313      	orrs	r3, r2
    9ac8:	f43f ad9e 	beq.w	9608 <hci_evt_encode+0x200>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9acc:	4b18      	ldr	r3, [pc, #96]	; (9b30 <hci_evt_encode+0x728>)
    9ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ad2:	2300      	movs	r3, #0
    9ad4:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9ad8:	4313      	orrs	r3, r2
    9ada:	f43f ad95 	beq.w	9608 <hci_evt_encode+0x200>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9ade:	220a      	movs	r2, #10
    9ae0:	2107      	movs	r1, #7
    9ae2:	4628      	mov	r0, r5
    9ae4:	f7fe fc84 	bl	83f0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9ae8:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9aea:	8a23      	ldrh	r3, [r4, #16]
    9aec:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9aee:	8a63      	ldrh	r3, [r4, #18]
    9af0:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9af2:	89a3      	ldrh	r3, [r4, #12]
    9af4:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9af6:	89e3      	ldrh	r3, [r4, #14]
    9af8:	e7dd      	b.n	9ab6 <hci_evt_encode+0x6ae>
    9afa:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9afc:	2a0e      	cmp	r2, #14
    9afe:	d104      	bne.n	9b0a <hci_evt_encode+0x702>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9b00:	460b      	mov	r3, r1
    9b02:	4632      	mov	r2, r6
    9b04:	2100      	movs	r1, #0
    9b06:	201a      	movs	r0, #26
    9b08:	e770      	b.n	99ec <hci_evt_encode+0x5e4>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9b0a:	4b0a      	ldr	r3, [pc, #40]	; (9b34 <hci_evt_encode+0x72c>)
    9b0c:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9b0e:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9b10:	9300      	str	r3, [sp, #0]
    9b12:	4a09      	ldr	r2, [pc, #36]	; (9b38 <hci_evt_encode+0x730>)
    9b14:	4b09      	ldr	r3, [pc, #36]	; (9b3c <hci_evt_encode+0x734>)
    9b16:	490a      	ldr	r1, [pc, #40]	; (9b40 <hci_evt_encode+0x738>)
    9b18:	480a      	ldr	r0, [pc, #40]	; (9b44 <hci_evt_encode+0x73c>)
    9b1a:	f7f7 fa37 	bl	f8c <printk>
    9b1e:	e573      	b.n	9608 <hci_evt_encode+0x200>
		LL_ASSERT(0);
    9b20:	4b04      	ldr	r3, [pc, #16]	; (9b34 <hci_evt_encode+0x72c>)
    9b22:	9301      	str	r3, [sp, #4]
    9b24:	9300      	str	r3, [sp, #0]
    9b26:	4b08      	ldr	r3, [pc, #32]	; (9b48 <hci_evt_encode+0x740>)
    9b28:	e71c      	b.n	9964 <hci_evt_encode+0x55c>
    9b2a:	bf00      	nop
    9b2c:	20003d30 	.word	0x20003d30
    9b30:	20003d38 	.word	0x20003d38
    9b34:	00014b99 	.word	0x00014b99
    9b38:	00015fdf 	.word	0x00015fdf
    9b3c:	00016f36 	.word	0x00016f36
    9b40:	00015fa4 	.word	0x00015fa4
    9b44:	0001712c 	.word	0x0001712c
    9b48:	00016f45 	.word	0x00016f45

00009b4c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9b4c:	b570      	push	{r4, r5, r6, lr}
    9b4e:	4606      	mov	r6, r0
    9b50:	460d      	mov	r5, r1
    9b52:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9b54:	2113      	movs	r1, #19
    9b56:	2205      	movs	r2, #5
    9b58:	f7fe fc25 	bl	83a6 <evt_create>

	ep = net_buf_add(buf, len);
    9b5c:	2105      	movs	r1, #5
    9b5e:	f106 0008 	add.w	r0, r6, #8
    9b62:	f009 f95b 	bl	12e1c <net_buf_simple_add>
	ep->num_handles = num_handles;
    9b66:	2301      	movs	r3, #1
    9b68:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9b6a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9b6e:	f8a0 4003 	strh.w	r4, [r0, #3]
    9b72:	bd70      	pop	{r4, r5, r6, pc}

00009b74 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9b74:	7903      	ldrb	r3, [r0, #4]
    9b76:	2b01      	cmp	r3, #1
    9b78:	d006      	beq.n	9b88 <hci_get_class+0x14>
    9b7a:	3b02      	subs	r3, #2
    9b7c:	b2db      	uxtb	r3, r3
    9b7e:	2b0a      	cmp	r3, #10
    9b80:	d80a      	bhi.n	9b98 <hci_get_class+0x24>
    9b82:	4a07      	ldr	r2, [pc, #28]	; (9ba0 <hci_get_class+0x2c>)
    9b84:	56d0      	ldrsb	r0, [r2, r3]
    9b86:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9b88:	7a03      	ldrb	r3, [r0, #8]
    9b8a:	f003 0303 	and.w	r3, r3, #3
    9b8e:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9b90:	bf0c      	ite	eq
    9b92:	2002      	moveq	r0, #2
    9b94:	2003      	movne	r0, #3
    9b96:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	00016ead 	.word	0x00016ead

00009ba4 <hci_init>:
	dup_count = -1;
    9ba4:	4b0a      	ldr	r3, [pc, #40]	; (9bd0 <hci_init+0x2c>)
    9ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9baa:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    9bac:	4b09      	ldr	r3, [pc, #36]	; (9bd4 <hci_init+0x30>)
    9bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9bb2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9bb6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9bba:	4b07      	ldr	r3, [pc, #28]	; (9bd8 <hci_init+0x34>)
    9bbc:	2000      	movs	r0, #0
    9bbe:	2100      	movs	r1, #0
    9bc0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9bc4:	4b05      	ldr	r3, [pc, #20]	; (9bdc <hci_init+0x38>)
    9bc6:	201f      	movs	r0, #31
    9bc8:	2100      	movs	r1, #0
    9bca:	e9c3 0100 	strd	r0, r1, [r3]
    9bce:	4770      	bx	lr
    9bd0:	20000830 	.word	0x20000830
    9bd4:	20003d30 	.word	0x20003d30
    9bd8:	200008b8 	.word	0x200008b8
    9bdc:	20003d38 	.word	0x20003d38

00009be0 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9be0:	bf20      	wfe
	__SEV();
    9be2:	bf40      	sev
	__WFE();
    9be4:	bf20      	wfe
    9be6:	4770      	bx	lr

00009be8 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9be8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9bea:	4b0d      	ldr	r3, [pc, #52]	; (9c20 <pdu_len_cmp+0x38>)
{
    9bec:	b089      	sub	sp, #36	; 0x24
    9bee:	4605      	mov	r5, r0
    9bf0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9bf2:	aa01      	add	r2, sp, #4
    9bf4:	f103 0718 	add.w	r7, r3, #24
    9bf8:	6818      	ldr	r0, [r3, #0]
    9bfa:	6859      	ldr	r1, [r3, #4]
    9bfc:	4614      	mov	r4, r2
    9bfe:	c403      	stmia	r4!, {r0, r1}
    9c00:	3308      	adds	r3, #8
    9c02:	42bb      	cmp	r3, r7
    9c04:	4622      	mov	r2, r4
    9c06:	d1f7      	bne.n	9bf8 <pdu_len_cmp+0x10>
    9c08:	881b      	ldrh	r3, [r3, #0]
    9c0a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9c0c:	ab08      	add	r3, sp, #32
    9c0e:	441d      	add	r5, r3
    9c10:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9c14:	1b83      	subs	r3, r0, r6
    9c16:	4258      	negs	r0, r3
    9c18:	4158      	adcs	r0, r3
    9c1a:	b009      	add	sp, #36	; 0x24
    9c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c1e:	bf00      	nop
    9c20:	00014aeb 	.word	0x00014aeb

00009c24 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9c24:	6008      	str	r0, [r1, #0]
    9c26:	4770      	bx	lr

00009c28 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9c28:	b918      	cbnz	r0, 9c32 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9c2a:	680b      	ldr	r3, [r1, #0]
    9c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9c30:	600b      	str	r3, [r1, #0]
    9c32:	4770      	bx	lr

00009c34 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9c34:	b918      	cbnz	r0, 9c3e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9c36:	680b      	ldr	r3, [r1, #0]
    9c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9c3c:	600b      	str	r3, [r1, #0]
    9c3e:	4770      	bx	lr

00009c40 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9c40:	b570      	push	{r4, r5, r6, lr}
    9c42:	1d03      	adds	r3, r0, #4
    9c44:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9c46:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9c48:	429d      	cmp	r5, r3
    9c4a:	d101      	bne.n	9c50 <chan_sel_remap+0x10>
    9c4c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9c4e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9c50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9c54:	2200      	movs	r2, #0
    9c56:	18a0      	adds	r0, r4, r2
    9c58:	2a08      	cmp	r2, #8
    9c5a:	b2c0      	uxtb	r0, r0
    9c5c:	d101      	bne.n	9c62 <chan_sel_remap+0x22>
    9c5e:	4604      	mov	r4, r0
    9c60:	e7f2      	b.n	9c48 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9c62:	f016 0f01 	tst.w	r6, #1
    9c66:	d003      	beq.n	9c70 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9c68:	2900      	cmp	r1, #0
    9c6a:	d0f0      	beq.n	9c4e <chan_sel_remap+0xe>
				chan_index--;
    9c6c:	3901      	subs	r1, #1
    9c6e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9c70:	0876      	lsrs	r6, r6, #1
    9c72:	3201      	adds	r2, #1
    9c74:	e7ef      	b.n	9c56 <chan_sel_remap+0x16>
	...

00009c78 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9c78:	4b09      	ldr	r3, [pc, #36]	; (9ca0 <packet_rx_acquired_count_get+0x28>)
    9c7a:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9c7e:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9c82:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9c84:	bf3b      	ittet	cc
    9c86:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9c8a:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9c8e:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9c92:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9c94:	bf2c      	ite	cs
    9c96:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9c98:	1a80      	subcc	r0, r0, r2
    9c9a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9c9c:	4770      	bx	lr
    9c9e:	bf00      	nop
    9ca0:	200008c0 	.word	0x200008c0

00009ca4 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9ca4:	b508      	push	{r3, lr}
    9ca6:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9ca8:	f7ff ffe6 	bl	9c78 <packet_rx_acquired_count_get>
    9cac:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9cae:	bf21      	itttt	cs
    9cb0:	4b04      	ldrcs	r3, [pc, #16]	; (9cc4 <packet_rx_reserve_get+0x20>)
    9cb2:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9cb6:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9cba:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9cbe:	bf38      	it	cc
    9cc0:	2000      	movcc	r0, #0
}
    9cc2:	bd08      	pop	{r3, pc}
    9cc4:	200008c0 	.word	0x200008c0

00009cc8 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9cc8:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9cca:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9cce:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9cd2:	429c      	cmp	r4, r3
    9cd4:	d15a      	bne.n	9d8c <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9cd6:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9cda:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9cde:	428b      	cmp	r3, r1
    9ce0:	d154      	bne.n	9d8c <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9ce2:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	db25      	blt.n	9d36 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9cea:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9cec:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9cee:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9cf2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9cf4:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9cf8:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9cfa:	227d      	movs	r2, #125	; 0x7d
    9cfc:	434a      	muls	r2, r1
					      125 / 1000;
    9cfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9d02:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9d06:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9d0a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9d0e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9d10:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9d14:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9d16:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9d18:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9d1c:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9d1e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9d22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9d26:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9d2a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9d2e:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9d32:	4618      	mov	r0, r3
    9d34:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9d36:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9d3a:	06dc      	lsls	r4, r3, #27
    9d3c:	d428      	bmi.n	9d90 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9d3e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9d42:	069a      	lsls	r2, r3, #26
    9d44:	d503      	bpl.n	9d4e <conn_update_req+0x86>
		    (conn->llcp_features &
    9d46:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9d4a:	079b      	lsls	r3, r3, #30
    9d4c:	d520      	bpl.n	9d90 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9d4e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9d50:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9d52:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9d56:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9d58:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9d5c:	4354      	muls	r4, r2
						conn->supervision_reload *
    9d5e:	227d      	movs	r2, #125	; 0x7d
    9d60:	4362      	muls	r2, r4
						125 / 1000;
    9d62:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9d66:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9d6a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9d6e:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9d72:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9d74:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9d78:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9d7c:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9d7e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9d82:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9d86:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9d8a:	e7d2      	b.n	9d32 <conn_update_req+0x6a>
		return 1;
    9d8c:	2001      	movs	r0, #1
    9d8e:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9d90:	2002      	movs	r0, #2
}
    9d92:	bd30      	pop	{r4, r5, pc}

00009d94 <packet_rx_allocate>:
{
    9d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9d98:	4d22      	ldr	r5, [pc, #136]	; (9e24 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9d9a:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9d9e:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9da2:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9da6:	3401      	adds	r4, #1
    9da8:	4581      	cmp	r9, r0
    9daa:	b2e4      	uxtb	r4, r4
    9dac:	bf28      	it	cs
    9dae:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9db0:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9db4:	42a3      	cmp	r3, r4
    9db6:	bf08      	it	eq
    9db8:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9dba:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9dbe:	f1b9 0f00 	cmp.w	r9, #0
    9dc2:	d003      	beq.n	9dcc <packet_rx_allocate+0x38>
    9dc4:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9dc8:	429c      	cmp	r4, r3
    9dca:	d101      	bne.n	9dd0 <packet_rx_allocate+0x3c>
    9dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9dd0:	4638      	mov	r0, r7
    9dd2:	f7fd f952 	bl	707a <mem_acquire>
		if (!link) {
    9dd6:	4606      	mov	r6, r0
    9dd8:	2800      	cmp	r0, #0
    9dda:	d0f7      	beq.n	9dcc <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9ddc:	4640      	mov	r0, r8
    9dde:	f7fd f94c 	bl	707a <mem_acquire>
		if (!node_rx) {
    9de2:	b928      	cbnz	r0, 9df0 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9de4:	4630      	mov	r0, r6
    9de6:	4910      	ldr	r1, [pc, #64]	; (9e28 <packet_rx_allocate+0x94>)
}
    9de8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9dec:	f7fd b95f 	b.w	70ae <mem_release>
		node_rx->hdr.onion.link = link;
    9df0:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9df2:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9df6:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9dfa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9dfe:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9e02:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9e06:	3401      	adds	r4, #1
    9e08:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9e0a:	42a3      	cmp	r3, r4
    9e0c:	bf08      	it	eq
    9e0e:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9e10:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9e14:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9e18:	3b01      	subs	r3, #1
    9e1a:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9e1e:	fa5f f989 	uxtb.w	r9, r9
    9e22:	e7cc      	b.n	9dbe <packet_rx_allocate+0x2a>
    9e24:	200008c0 	.word	0x200008c0
    9e28:	20000a08 	.word	0x20000a08

00009e2c <common_init>:
{
    9e2c:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9e2e:	4c39      	ldr	r4, [pc, #228]	; (9f14 <common_init+0xe8>)
    9e30:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9e34:	2a00      	cmp	r2, #0
    9e36:	d040      	beq.n	9eba <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9e38:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9e3c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9e40:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9e44:	f7fd f8f2 	bl	702c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9e48:	4b33      	ldr	r3, [pc, #204]	; (9f18 <common_init+0xec>)
    9e4a:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9e4e:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9e52:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9e56:	f7fd f8e9 	bl	702c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9e5a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9e5e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9e62:	4b2e      	ldr	r3, [pc, #184]	; (9f1c <common_init+0xf0>)
    9e64:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9e68:	440a      	add	r2, r1
    9e6a:	2108      	movs	r1, #8
    9e6c:	f7fd f8de 	bl	702c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9e70:	4b2b      	ldr	r3, [pc, #172]	; (9f20 <common_init+0xf4>)
    9e72:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9e76:	2202      	movs	r2, #2
    9e78:	2124      	movs	r1, #36	; 0x24
    9e7a:	f7fd f8d7 	bl	702c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9e7e:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9e82:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9e86:	4b27      	ldr	r3, [pc, #156]	; (9f24 <common_init+0xf8>)
    9e88:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9e8c:	3a01      	subs	r2, #1
    9e8e:	b292      	uxth	r2, r2
    9e90:	f7fd f8cc 	bl	702c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9e94:	4821      	ldr	r0, [pc, #132]	; (9f1c <common_init+0xf0>)
    9e96:	f7fd f8f0 	bl	707a <mem_acquire>
	LL_ASSERT(link);
    9e9a:	b988      	cbnz	r0, 9ec0 <common_init+0x94>
    9e9c:	4b22      	ldr	r3, [pc, #136]	; (9f28 <common_init+0xfc>)
    9e9e:	9301      	str	r3, [sp, #4]
    9ea0:	9300      	str	r3, [sp, #0]
    9ea2:	4a22      	ldr	r2, [pc, #136]	; (9f2c <common_init+0x100>)
    9ea4:	4b22      	ldr	r3, [pc, #136]	; (9f30 <common_init+0x104>)
    9ea6:	4923      	ldr	r1, [pc, #140]	; (9f34 <common_init+0x108>)
    9ea8:	4823      	ldr	r0, [pc, #140]	; (9f38 <common_init+0x10c>)
    9eaa:	f7f7 f86f 	bl	f8c <printk>
    9eae:	4040      	eors	r0, r0
    9eb0:	f380 8811 	msr	BASEPRI, r0
    9eb4:	f04f 0004 	mov.w	r0, #4
    9eb8:	df02      	svc	2
		_radio.conn_free = NULL;
    9eba:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9ebe:	e7c3      	b.n	9e48 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9ec0:	4a1e      	ldr	r2, [pc, #120]	; (9f3c <common_init+0x110>)
    9ec2:	1f11      	subs	r1, r2, #4
    9ec4:	f7fd f930 	bl	7128 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9ec8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9ecc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9ed0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9ed4:	231f      	movs	r3, #31
    9ed6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9eda:	2325      	movs	r3, #37	; 0x25
    9edc:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9ee0:	231b      	movs	r3, #27
    9ee2:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9ee6:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9eea:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9eec:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9ef0:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9ef2:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9ef6:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9efa:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9efe:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9f02:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9f06:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9f0a:	b002      	add	sp, #8
    9f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9f10:	f7ff bf40 	b.w	9d94 <packet_rx_allocate>
    9f14:	200008c0 	.word	0x200008c0
    9f18:	200009f0 	.word	0x200009f0
    9f1c:	20000a08 	.word	0x20000a08
    9f20:	20000a1c 	.word	0x20000a1c
    9f24:	20000a24 	.word	0x20000a24
    9f28:	00014b99 	.word	0x00014b99
    9f2c:	00015f55 	.word	0x00015f55
    9f30:	000171fe 	.word	0x000171fe
    9f34:	00015fa4 	.word	0x00015fa4
    9f38:	0001767b 	.word	0x0001767b
    9f3c:	20000a10 	.word	0x20000a10

00009f40 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9f44:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9f46:	4294      	cmp	r4, r2
{
    9f48:	4681      	mov	r9, r0
    9f4a:	460f      	mov	r7, r1
    9f4c:	4690      	mov	r8, r2
	if (_first == last) {
    9f4e:	d03d      	beq.n	9fcc <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9f50:	4e1f      	ldr	r6, [pc, #124]	; (9fd0 <tx_cmplt_get+0x90>)
    9f52:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9f56:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9f5a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9f5c:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9f5e:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9f62:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9f66:	b222      	sxth	r2, r4
    9f68:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9f6c:	f8b9 e000 	ldrh.w	lr, [r9]
    9f70:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9f74:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9f78:	4596      	cmp	lr, r2
    9f7a:	d120      	bne.n	9fbe <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9f7c:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9f7e:	2801      	cmp	r0, #1
    9f80:	f020 0303 	bic.w	r3, r0, #3
    9f84:	d90a      	bls.n	9f9c <tx_cmplt_get+0x5c>
    9f86:	b1f3      	cbz	r3, 9fc6 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9f88:	1d02      	adds	r2, r0, #4
    9f8a:	d01c      	beq.n	9fc6 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9f8c:	7942      	ldrb	r2, [r0, #5]
    9f8e:	b1d2      	cbz	r2, 9fc6 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9f90:	7902      	ldrb	r2, [r0, #4]
    9f92:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9f96:	3a01      	subs	r2, #1
    9f98:	2a01      	cmp	r2, #1
    9f9a:	d814      	bhi.n	9fc6 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9f9c:	2201      	movs	r2, #1
			cmplt++;
    9f9e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9fa0:	604a      	str	r2, [r1, #4]
			cmplt++;
    9fa2:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9fa4:	b113      	cbz	r3, 9fac <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9fa6:	4651      	mov	r1, sl
    9fa8:	f7fd f881 	bl	70ae <mem_release>
		}

		_first = _first + 1;
    9fac:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9fae:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9fb2:	b2e4      	uxtb	r4, r4
			_first = 0;
    9fb4:	42a2      	cmp	r2, r4
    9fb6:	bf08      	it	eq
    9fb8:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9fba:	4544      	cmp	r4, r8
    9fbc:	d1d3      	bne.n	9f66 <tx_cmplt_get+0x26>

	*first = _first;
    9fbe:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9fc0:	4628      	mov	r0, r5
    9fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9fc6:	f8c1 b004 	str.w	fp, [r1, #4]
    9fca:	e7eb      	b.n	9fa4 <tx_cmplt_get+0x64>
		return 0;
    9fcc:	2500      	movs	r5, #0
    9fce:	e7f7      	b.n	9fc0 <tx_cmplt_get+0x80>
    9fd0:	200008c0 	.word	0x200008c0

00009fd4 <connection_get>:
{
    9fd4:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9fd6:	4b09      	ldr	r3, [pc, #36]	; (9ffc <connection_get+0x28>)
    9fd8:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9fdc:	4282      	cmp	r2, r0
{
    9fde:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9fe0:	d90a      	bls.n	9ff8 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9fe2:	4602      	mov	r2, r0
    9fe4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9fe8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9fec:	f7fd f87a 	bl	70e4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9ff0:	b110      	cbz	r0, 9ff8 <connection_get+0x24>
    9ff2:	8c03      	ldrh	r3, [r0, #32]
    9ff4:	42a3      	cmp	r3, r4
    9ff6:	d000      	beq.n	9ffa <connection_get+0x26>
	return 0;
    9ff8:	2000      	movs	r0, #0
}
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	200008c0 	.word	0x200008c0

0000a000 <role_disable>:
{
    a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a004:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a006:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a008:	2805      	cmp	r0, #5
{
    a00a:	4605      	mov	r5, r0
    a00c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a00e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a010:	d00c      	beq.n	a02c <role_disable+0x2c>
    a012:	2806      	cmp	r0, #6
    a014:	d040      	beq.n	a098 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a016:	d945      	bls.n	a0a4 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    a018:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a01a:	b280      	uxth	r0, r0
    a01c:	f7ff ffda 	bl	9fd4 <connection_get>
			if (!conn) {
    a020:	2800      	cmp	r0, #0
    a022:	f000 8123 	beq.w	a26c <role_disable+0x26c>
			ticks_active_to_start =
    a026:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a02a:	e00f      	b.n	a04c <role_disable+0x4c>
		ticks_xtal_to_start =
    a02c:	4b90      	ldr	r3, [pc, #576]	; (a270 <role_disable+0x270>)
    a02e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a030:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a034:	ab02      	add	r3, sp, #8
    a036:	9300      	str	r3, [sp, #0]
    a038:	460a      	mov	r2, r1
    a03a:	4b8e      	ldr	r3, [pc, #568]	; (a274 <role_disable+0x274>)
    a03c:	2103      	movs	r1, #3
    a03e:	2000      	movs	r0, #0
    a040:	f7fd ff42 	bl	7ec8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a044:	2802      	cmp	r0, #2
    a046:	d011      	beq.n	a06c <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a048:	9b02      	ldr	r3, [sp, #8]
    a04a:	b99b      	cbnz	r3, a074 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    a04c:	4c88      	ldr	r4, [pc, #544]	; (a270 <role_disable+0x270>)
    a04e:	7ca3      	ldrb	r3, [r4, #18]
    a050:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a054:	2b00      	cmp	r3, #0
    a056:	d02d      	beq.n	a0b4 <role_disable+0xb4>
    a058:	4b87      	ldr	r3, [pc, #540]	; (a278 <role_disable+0x278>)
    a05a:	9301      	str	r3, [sp, #4]
    a05c:	9300      	str	r3, [sp, #0]
    a05e:	4a87      	ldr	r2, [pc, #540]	; (a27c <role_disable+0x27c>)
    a060:	4b87      	ldr	r3, [pc, #540]	; (a280 <role_disable+0x280>)
    a062:	4988      	ldr	r1, [pc, #544]	; (a284 <role_disable+0x284>)
    a064:	4888      	ldr	r0, [pc, #544]	; (a288 <role_disable+0x288>)
    a066:	e00f      	b.n	a088 <role_disable+0x88>
				cpu_sleep();
    a068:	f7ff fdba 	bl	9be0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a06c:	9b02      	ldr	r3, [sp, #8]
    a06e:	2b02      	cmp	r3, #2
    a070:	d0fa      	beq.n	a068 <role_disable+0x68>
    a072:	e7e9      	b.n	a048 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a074:	9b02      	ldr	r3, [sp, #8]
    a076:	2b01      	cmp	r3, #1
    a078:	d0e8      	beq.n	a04c <role_disable+0x4c>
    a07a:	4b7f      	ldr	r3, [pc, #508]	; (a278 <role_disable+0x278>)
    a07c:	9301      	str	r3, [sp, #4]
    a07e:	9300      	str	r3, [sp, #0]
    a080:	4a7e      	ldr	r2, [pc, #504]	; (a27c <role_disable+0x27c>)
    a082:	4b7f      	ldr	r3, [pc, #508]	; (a280 <role_disable+0x280>)
    a084:	497f      	ldr	r1, [pc, #508]	; (a284 <role_disable+0x284>)
    a086:	4881      	ldr	r0, [pc, #516]	; (a28c <role_disable+0x28c>)
			LL_ASSERT(0);
    a088:	f7f6 ff80 	bl	f8c <printk>
    a08c:	4040      	eors	r0, r0
    a08e:	f380 8811 	msr	BASEPRI, r0
    a092:	f04f 0004 	mov.w	r0, #4
    a096:	df02      	svc	2
		ticks_xtal_to_start =
    a098:	4b75      	ldr	r3, [pc, #468]	; (a270 <role_disable+0x270>)
    a09a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    a09e:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    a0a2:	e7d3      	b.n	a04c <role_disable+0x4c>
			LL_ASSERT(0);
    a0a4:	4b74      	ldr	r3, [pc, #464]	; (a278 <role_disable+0x278>)
    a0a6:	9301      	str	r3, [sp, #4]
    a0a8:	9300      	str	r3, [sp, #0]
    a0aa:	4b75      	ldr	r3, [pc, #468]	; (a280 <role_disable+0x280>)
    a0ac:	4a73      	ldr	r2, [pc, #460]	; (a27c <role_disable+0x27c>)
    a0ae:	4975      	ldr	r1, [pc, #468]	; (a284 <role_disable+0x284>)
    a0b0:	4877      	ldr	r0, [pc, #476]	; (a290 <role_disable+0x290>)
    a0b2:	e7e9      	b.n	a088 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    a0b4:	ab06      	add	r3, sp, #24
    a0b6:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a0b8:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a0ba:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0be:	2103      	movs	r1, #3
    a0c0:	9300      	str	r3, [sp, #0]
    a0c2:	462a      	mov	r2, r5
    a0c4:	4b6b      	ldr	r3, [pc, #428]	; (a274 <role_disable+0x274>)
    a0c6:	f7fd feff 	bl	7ec8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a0ca:	2802      	cmp	r0, #2
    a0cc:	d025      	beq.n	a11a <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a0ce:	9b02      	ldr	r3, [sp, #8]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d169      	bne.n	a1a8 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a0d4:	7c23      	ldrb	r3, [r4, #16]
    a0d6:	429d      	cmp	r5, r3
    a0d8:	d002      	beq.n	a0e0 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a0da:	7c63      	ldrb	r3, [r4, #17]
    a0dc:	429d      	cmp	r5, r3
    a0de:	d15f      	bne.n	a1a0 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a0e0:	ab06      	add	r3, sp, #24
    a0e2:	2202      	movs	r2, #2
    a0e4:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0e8:	2200      	movs	r2, #0
    a0ea:	9300      	str	r3, [sp, #0]
    a0ec:	2103      	movs	r1, #3
    a0ee:	4b61      	ldr	r3, [pc, #388]	; (a274 <role_disable+0x274>)
    a0f0:	4610      	mov	r0, r2
    a0f2:	f7fd fee9 	bl	7ec8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a0f6:	2802      	cmp	r0, #2
    a0f8:	d11d      	bne.n	a136 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a0fa:	2201      	movs	r2, #1
    a0fc:	4611      	mov	r1, r2
    a0fe:	2003      	movs	r0, #3
    a100:	f7fd f85e 	bl	71c0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a104:	9b03      	ldr	r3, [sp, #12]
    a106:	2b02      	cmp	r3, #2
    a108:	d115      	bne.n	a136 <role_disable+0x136>
    a10a:	4b5b      	ldr	r3, [pc, #364]	; (a278 <role_disable+0x278>)
    a10c:	9301      	str	r3, [sp, #4]
    a10e:	9300      	str	r3, [sp, #0]
    a110:	4a5a      	ldr	r2, [pc, #360]	; (a27c <role_disable+0x27c>)
    a112:	4b60      	ldr	r3, [pc, #384]	; (a294 <role_disable+0x294>)
    a114:	495b      	ldr	r1, [pc, #364]	; (a284 <role_disable+0x284>)
    a116:	4860      	ldr	r0, [pc, #384]	; (a298 <role_disable+0x298>)
    a118:	e7b6      	b.n	a088 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a11a:	7c63      	ldrb	r3, [r4, #17]
    a11c:	429d      	cmp	r5, r3
    a11e:	d104      	bne.n	a12a <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a120:	2201      	movs	r2, #1
    a122:	4611      	mov	r1, r2
    a124:	2003      	movs	r0, #3
    a126:	f7fd f84b 	bl	71c0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a12a:	9b02      	ldr	r3, [sp, #8]
    a12c:	2b02      	cmp	r3, #2
    a12e:	d1ce      	bne.n	a0ce <role_disable+0xce>
			cpu_sleep();
    a130:	f7ff fd56 	bl	9be0 <cpu_sleep>
    a134:	e7f9      	b.n	a12a <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a136:	9803      	ldr	r0, [sp, #12]
    a138:	2800      	cmp	r0, #0
    a13a:	d150      	bne.n	a1de <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a13c:	2302      	movs	r3, #2
    a13e:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a140:	7c23      	ldrb	r3, [r4, #16]
    a142:	b93b      	cbnz	r3, a154 <role_disable+0x154>
    a144:	4b4c      	ldr	r3, [pc, #304]	; (a278 <role_disable+0x278>)
    a146:	9301      	str	r3, [sp, #4]
    a148:	9300      	str	r3, [sp, #0]
    a14a:	4a4c      	ldr	r2, [pc, #304]	; (a27c <role_disable+0x27c>)
    a14c:	4b51      	ldr	r3, [pc, #324]	; (a294 <role_disable+0x294>)
    a14e:	494d      	ldr	r1, [pc, #308]	; (a284 <role_disable+0x284>)
    a150:	4852      	ldr	r0, [pc, #328]	; (a29c <role_disable+0x29c>)
    a152:	e799      	b.n	a088 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a154:	ab04      	add	r3, sp, #16
    a156:	9300      	str	r3, [sp, #0]
    a158:	2201      	movs	r2, #1
    a15a:	4b46      	ldr	r3, [pc, #280]	; (a274 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    a15c:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a15e:	2103      	movs	r1, #3
    a160:	f7fd feb2 	bl	7ec8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a164:	2802      	cmp	r0, #2
    a166:	d10f      	bne.n	a188 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a168:	2201      	movs	r2, #1
    a16a:	4611      	mov	r1, r2
    a16c:	2003      	movs	r0, #3
    a16e:	f7fd f827 	bl	71c0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a172:	9b04      	ldr	r3, [sp, #16]
    a174:	2b02      	cmp	r3, #2
    a176:	d107      	bne.n	a188 <role_disable+0x188>
    a178:	4b3f      	ldr	r3, [pc, #252]	; (a278 <role_disable+0x278>)
    a17a:	9301      	str	r3, [sp, #4]
    a17c:	9300      	str	r3, [sp, #0]
    a17e:	4a3f      	ldr	r2, [pc, #252]	; (a27c <role_disable+0x27c>)
    a180:	4b44      	ldr	r3, [pc, #272]	; (a294 <role_disable+0x294>)
    a182:	4940      	ldr	r1, [pc, #256]	; (a284 <role_disable+0x284>)
    a184:	4846      	ldr	r0, [pc, #280]	; (a2a0 <role_disable+0x2a0>)
    a186:	e77f      	b.n	a088 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a188:	9a04      	ldr	r2, [sp, #16]
    a18a:	b99a      	cbnz	r2, a1b4 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a18c:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a190:	45b0      	cmp	r8, r6
    a192:	d922      	bls.n	a1da <role_disable+0x1da>
				ret = mayfly_enqueue(
    a194:	4b43      	ldr	r3, [pc, #268]	; (a2a4 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a196:	4611      	mov	r1, r2
    a198:	2003      	movs	r0, #3
    a19a:	f7fd f839 	bl	7210 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a19e:	b9a0      	cbnz	r0, a1ca <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    a1a0:	7ca3      	ldrb	r3, [r4, #18]
    a1a2:	b90b      	cbnz	r3, a1a8 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    a1a4:	2301      	movs	r3, #1
    a1a6:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a1a8:	2300      	movs	r3, #0
    a1aa:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a1ac:	9802      	ldr	r0, [sp, #8]
}
    a1ae:	b006      	add	sp, #24
    a1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a1b4:	9b04      	ldr	r3, [sp, #16]
    a1b6:	2b01      	cmp	r3, #1
    a1b8:	d153      	bne.n	a262 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a1ba:	2200      	movs	r2, #0
    a1bc:	4611      	mov	r1, r2
    a1be:	4b39      	ldr	r3, [pc, #228]	; (a2a4 <role_disable+0x2a4>)
    a1c0:	2003      	movs	r0, #3
    a1c2:	f7fd f825 	bl	7210 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a1c6:	4602      	mov	r2, r0
    a1c8:	b138      	cbz	r0, a1da <role_disable+0x1da>
			LL_ASSERT(!ret);
    a1ca:	4b2b      	ldr	r3, [pc, #172]	; (a278 <role_disable+0x278>)
    a1cc:	9301      	str	r3, [sp, #4]
    a1ce:	9300      	str	r3, [sp, #0]
    a1d0:	4a2a      	ldr	r2, [pc, #168]	; (a27c <role_disable+0x27c>)
    a1d2:	4b30      	ldr	r3, [pc, #192]	; (a294 <role_disable+0x294>)
    a1d4:	492b      	ldr	r1, [pc, #172]	; (a284 <role_disable+0x284>)
    a1d6:	4834      	ldr	r0, [pc, #208]	; (a2a8 <role_disable+0x2a8>)
    a1d8:	e756      	b.n	a088 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a1da:	4b34      	ldr	r3, [pc, #208]	; (a2ac <role_disable+0x2ac>)
    a1dc:	e7db      	b.n	a196 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a1de:	9d03      	ldr	r5, [sp, #12]
    a1e0:	2d01      	cmp	r5, #1
    a1e2:	d13e      	bne.n	a262 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    a1e4:	2fff      	cmp	r7, #255	; 0xff
    a1e6:	d029      	beq.n	a23c <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a1e8:	ab06      	add	r3, sp, #24
    a1ea:	2202      	movs	r2, #2
    a1ec:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1f0:	2103      	movs	r1, #3
    a1f2:	9300      	str	r3, [sp, #0]
    a1f4:	463a      	mov	r2, r7
    a1f6:	4b1f      	ldr	r3, [pc, #124]	; (a274 <role_disable+0x274>)
    a1f8:	2000      	movs	r0, #0
    a1fa:	f7fd fe65 	bl	7ec8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a1fe:	2802      	cmp	r0, #2
    a200:	d10f      	bne.n	a222 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a202:	462a      	mov	r2, r5
    a204:	4629      	mov	r1, r5
    a206:	2003      	movs	r0, #3
    a208:	f7fc ffda 	bl	71c0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a20c:	9b05      	ldr	r3, [sp, #20]
    a20e:	2b02      	cmp	r3, #2
    a210:	d107      	bne.n	a222 <role_disable+0x222>
    a212:	4b19      	ldr	r3, [pc, #100]	; (a278 <role_disable+0x278>)
    a214:	9301      	str	r3, [sp, #4]
    a216:	9300      	str	r3, [sp, #0]
    a218:	4a18      	ldr	r2, [pc, #96]	; (a27c <role_disable+0x27c>)
    a21a:	4b1e      	ldr	r3, [pc, #120]	; (a294 <role_disable+0x294>)
    a21c:	4919      	ldr	r1, [pc, #100]	; (a284 <role_disable+0x284>)
    a21e:	4824      	ldr	r0, [pc, #144]	; (a2b0 <role_disable+0x2b0>)
    a220:	e732      	b.n	a088 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a222:	9b05      	ldr	r3, [sp, #20]
    a224:	b153      	cbz	r3, a23c <role_disable+0x23c>
    a226:	9b05      	ldr	r3, [sp, #20]
    a228:	2b01      	cmp	r3, #1
    a22a:	d007      	beq.n	a23c <role_disable+0x23c>
    a22c:	4b12      	ldr	r3, [pc, #72]	; (a278 <role_disable+0x278>)
    a22e:	9301      	str	r3, [sp, #4]
    a230:	9300      	str	r3, [sp, #0]
    a232:	4a12      	ldr	r2, [pc, #72]	; (a27c <role_disable+0x27c>)
    a234:	4b17      	ldr	r3, [pc, #92]	; (a294 <role_disable+0x294>)
    a236:	4913      	ldr	r1, [pc, #76]	; (a284 <role_disable+0x284>)
    a238:	481e      	ldr	r0, [pc, #120]	; (a2b4 <role_disable+0x2b4>)
    a23a:	e725      	b.n	a088 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    a23c:	7ce3      	ldrb	r3, [r4, #19]
    a23e:	2b00      	cmp	r3, #0
    a240:	d0ae      	beq.n	a1a0 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a242:	4b1d      	ldr	r3, [pc, #116]	; (a2b8 <role_disable+0x2b8>)
    a244:	2204      	movs	r2, #4
    a246:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a248:	2200      	movs	r2, #0
    a24a:	4611      	mov	r1, r2
    a24c:	2003      	movs	r0, #3
    a24e:	f7fc ffdf 	bl	7210 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a252:	2800      	cmp	r0, #0
    a254:	d1b9      	bne.n	a1ca <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    a256:	7ce3      	ldrb	r3, [r4, #19]
    a258:	2b00      	cmp	r3, #0
    a25a:	d0a1      	beq.n	a1a0 <role_disable+0x1a0>
				cpu_sleep();
    a25c:	f7ff fcc0 	bl	9be0 <cpu_sleep>
    a260:	e7f9      	b.n	a256 <role_disable+0x256>
		LL_ASSERT(0);
    a262:	4b05      	ldr	r3, [pc, #20]	; (a278 <role_disable+0x278>)
    a264:	9301      	str	r3, [sp, #4]
    a266:	9300      	str	r3, [sp, #0]
    a268:	4b0a      	ldr	r3, [pc, #40]	; (a294 <role_disable+0x294>)
    a26a:	e71f      	b.n	a0ac <role_disable+0xac>
				return 1;
    a26c:	2001      	movs	r0, #1
    a26e:	e79e      	b.n	a1ae <role_disable+0x1ae>
    a270:	200008c0 	.word	0x200008c0
    a274:	00009c25 	.word	0x00009c25
    a278:	00014b99 	.word	0x00014b99
    a27c:	00015f55 	.word	0x00015f55
    a280:	00017620 	.word	0x00017620
    a284:	00015fa4 	.word	0x00015fa4
    a288:	00017f92 	.word	0x00017f92
    a28c:	00017f52 	.word	0x00017f52
    a290:	00015ec9 	.word	0x00015ec9
    a294:	0001760c 	.word	0x0001760c
    a298:	00017fca 	.word	0x00017fca
    a29c:	00017ffb 	.word	0x00017ffb
    a2a0:	00018035 	.word	0x00018035
    a2a4:	20003d60 	.word	0x20003d60
    a2a8:	00018065 	.word	0x00018065
    a2ac:	20003e00 	.word	0x20003e00
    a2b0:	0001808b 	.word	0x0001808b
    a2b4:	000180bd 	.word	0x000180bd
    a2b8:	20003d80 	.word	0x20003d80

0000a2bc <mayfly_xtal_retain>:
{
    a2bc:	b513      	push	{r0, r1, r4, lr}
    a2be:	4b1d      	ldr	r3, [pc, #116]	; (a334 <mayfly_xtal_retain+0x78>)
    a2c0:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a2c2:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a2c4:	b301      	cbz	r1, a308 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    a2c6:	2a00      	cmp	r2, #0
    a2c8:	d132      	bne.n	a330 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a2ca:	2801      	cmp	r0, #1
    a2cc:	d00e      	beq.n	a2ec <mayfly_xtal_retain+0x30>
    a2ce:	4b1a      	ldr	r3, [pc, #104]	; (a338 <mayfly_xtal_retain+0x7c>)
    a2d0:	9301      	str	r3, [sp, #4]
    a2d2:	9300      	str	r3, [sp, #0]
    a2d4:	4a19      	ldr	r2, [pc, #100]	; (a33c <mayfly_xtal_retain+0x80>)
    a2d6:	4b1a      	ldr	r3, [pc, #104]	; (a340 <mayfly_xtal_retain+0x84>)
    a2d8:	491a      	ldr	r1, [pc, #104]	; (a344 <mayfly_xtal_retain+0x88>)
    a2da:	481b      	ldr	r0, [pc, #108]	; (a348 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    a2dc:	f7f6 fe56 	bl	f8c <printk>
    a2e0:	4040      	eors	r0, r0
    a2e2:	f380 8811 	msr	BASEPRI, r0
    a2e6:	f04f 0004 	mov.w	r0, #4
    a2ea:	df02      	svc	2
			s_xtal_retained = 1;
    a2ec:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a2ee:	4b17      	ldr	r3, [pc, #92]	; (a34c <mayfly_xtal_retain+0x90>)
    a2f0:	4611      	mov	r1, r2
    a2f2:	f7fc ff8d 	bl	7210 <mayfly_enqueue>
			LL_ASSERT(!retval);
    a2f6:	b1d8      	cbz	r0, a330 <mayfly_xtal_retain+0x74>
    a2f8:	4b0f      	ldr	r3, [pc, #60]	; (a338 <mayfly_xtal_retain+0x7c>)
    a2fa:	9301      	str	r3, [sp, #4]
    a2fc:	9300      	str	r3, [sp, #0]
    a2fe:	4a0f      	ldr	r2, [pc, #60]	; (a33c <mayfly_xtal_retain+0x80>)
    a300:	4b0f      	ldr	r3, [pc, #60]	; (a340 <mayfly_xtal_retain+0x84>)
    a302:	4910      	ldr	r1, [pc, #64]	; (a344 <mayfly_xtal_retain+0x88>)
    a304:	4812      	ldr	r0, [pc, #72]	; (a350 <mayfly_xtal_retain+0x94>)
    a306:	e7e9      	b.n	a2dc <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    a308:	b192      	cbz	r2, a330 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    a30a:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a30c:	b170      	cbz	r0, a32c <mayfly_xtal_retain+0x70>
    a30e:	2801      	cmp	r0, #1
    a310:	d104      	bne.n	a31c <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a312:	4b10      	ldr	r3, [pc, #64]	; (a354 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    a314:	2200      	movs	r2, #0
    a316:	4611      	mov	r1, r2
    a318:	4620      	mov	r0, r4
    a31a:	e7ea      	b.n	a2f2 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    a31c:	4b06      	ldr	r3, [pc, #24]	; (a338 <mayfly_xtal_retain+0x7c>)
    a31e:	9301      	str	r3, [sp, #4]
    a320:	9300      	str	r3, [sp, #0]
    a322:	4a06      	ldr	r2, [pc, #24]	; (a33c <mayfly_xtal_retain+0x80>)
    a324:	4b06      	ldr	r3, [pc, #24]	; (a340 <mayfly_xtal_retain+0x84>)
    a326:	4907      	ldr	r1, [pc, #28]	; (a344 <mayfly_xtal_retain+0x88>)
    a328:	480b      	ldr	r0, [pc, #44]	; (a358 <mayfly_xtal_retain+0x9c>)
    a32a:	e7d7      	b.n	a2dc <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a32c:	4b0b      	ldr	r3, [pc, #44]	; (a35c <mayfly_xtal_retain+0xa0>)
    a32e:	e7f1      	b.n	a314 <mayfly_xtal_retain+0x58>
}
    a330:	b002      	add	sp, #8
    a332:	bd10      	pop	{r4, pc}
    a334:	20000ac0 	.word	0x20000ac0
    a338:	00014b99 	.word	0x00014b99
    a33c:	00015f55 	.word	0x00015f55
    a340:	000173c5 	.word	0x000173c5
    a344:	00015fa4 	.word	0x00015fa4
    a348:	00017dab 	.word	0x00017dab
    a34c:	20003dd0 	.word	0x20003dd0
    a350:	00017ddb 	.word	0x00017ddb
    a354:	20003df0 	.word	0x20003df0
    a358:	00015ec9 	.word	0x00015ec9
    a35c:	20003de0 	.word	0x20003de0

0000a360 <rx_packet_set>:
{
    a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a362:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a366:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a368:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a36a:	f004 0407 	and.w	r4, r4, #7
{
    a36e:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a370:	4620      	mov	r0, r4
    a372:	2100      	movs	r1, #0
    a374:	f007 ffe0 	bl	12338 <radio_phy_set>
	if (conn->enc_rx) {
    a378:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a37c:	f013 0f10 	tst.w	r3, #16
    a380:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a384:	d010      	beq.n	a3a8 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a386:	1d29      	adds	r1, r5, #4
    a388:	f042 0201 	orr.w	r2, r2, #1
    a38c:	b2c9      	uxtb	r1, r1
    a38e:	2008      	movs	r0, #8
    a390:	f008 f818 	bl	123c4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a394:	463a      	mov	r2, r7
    a396:	4621      	mov	r1, r4
    a398:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a39c:	f008 fa56 	bl	1284c <radio_ccm_rx_pkt_set>
}
    a3a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a3a4:	f008 b83c 	b.w	12420 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a3a8:	2008      	movs	r0, #8
    a3aa:	f042 0201 	orr.w	r2, r2, #1
    a3ae:	b2e9      	uxtb	r1, r5
    a3b0:	f008 f808 	bl	123c4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a3b4:	4638      	mov	r0, r7
    a3b6:	e7f3      	b.n	a3a0 <rx_packet_set+0x40>

0000a3b8 <tx_packet_set>:
{
    a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3ba:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a3bc:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a3c0:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a3c2:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a3c6:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a3c8:	09c9      	lsrs	r1, r1, #7
    a3ca:	4620      	mov	r0, r4
    a3cc:	f007 ffb4 	bl	12338 <radio_phy_set>
	if (conn->enc_tx) {
    a3d0:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a3d4:	f013 0f20 	tst.w	r3, #32
    a3d8:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a3dc:	d00f      	beq.n	a3fe <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a3de:	1d29      	adds	r1, r5, #4
    a3e0:	b2c9      	uxtb	r1, r1
    a3e2:	2008      	movs	r0, #8
    a3e4:	f042 0201 	orr.w	r2, r2, #1
    a3e8:	f007 ffec 	bl	123c4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a3ec:	4639      	mov	r1, r7
    a3ee:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a3f2:	f008 fa67 	bl	128c4 <radio_ccm_tx_pkt_set>
}
    a3f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a3fa:	f008 b817 	b.w	1242c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a3fe:	2008      	movs	r0, #8
    a400:	f042 0201 	orr.w	r2, r2, #1
    a404:	b2e9      	uxtb	r1, r5
    a406:	f007 ffdd 	bl	123c4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a40a:	4638      	mov	r0, r7
    a40c:	e7f3      	b.n	a3f6 <tx_packet_set+0x3e>
	...

0000a410 <sched_free_win_offset_calc>:
{
    a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a414:	b08f      	sub	sp, #60	; 0x3c
    a416:	4692      	mov	sl, r2
    a418:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a41a:	6803      	ldr	r3, [r0, #0]
{
    a41c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a41e:	2b00      	cmp	r3, #0
{
    a420:	4680      	mov	r8, r0
    a422:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a424:	da3a      	bge.n	a49c <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    a426:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a42c:	4291      	cmp	r1, r2
    a42e:	bf2c      	ite	cs
    a430:	1a5a      	subcs	r2, r3, r1
    a432:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a434:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a436:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a43a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a43c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a43e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a440:	18d3      	adds	r3, r2, r3
    a442:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a444:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a448:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a44c:	940c      	str	r4, [sp, #48]	; 0x30
    a44e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a450:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a452:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a454:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a456:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a458:	2302      	movs	r3, #2
    a45a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a45c:	ab0d      	add	r3, sp, #52	; 0x34
    a45e:	9302      	str	r3, [sp, #8]
    a460:	4b81      	ldr	r3, [pc, #516]	; (a668 <sched_free_win_offset_calc+0x258>)
    a462:	9301      	str	r3, [sp, #4]
    a464:	ab0b      	add	r3, sp, #44	; 0x2c
    a466:	9300      	str	r3, [sp, #0]
    a468:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a46c:	ab0c      	add	r3, sp, #48	; 0x30
    a46e:	2101      	movs	r1, #1
    a470:	2000      	movs	r0, #0
    a472:	f7fd fd65 	bl	7f40 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a476:	2802      	cmp	r0, #2
    a478:	d019      	beq.n	a4ae <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a47c:	b1db      	cbz	r3, a4b6 <sched_free_win_offset_calc+0xa6>
    a47e:	4b7b      	ldr	r3, [pc, #492]	; (a66c <sched_free_win_offset_calc+0x25c>)
    a480:	9301      	str	r3, [sp, #4]
    a482:	9300      	str	r3, [sp, #0]
    a484:	4a7a      	ldr	r2, [pc, #488]	; (a670 <sched_free_win_offset_calc+0x260>)
    a486:	4b7b      	ldr	r3, [pc, #492]	; (a674 <sched_free_win_offset_calc+0x264>)
    a488:	497b      	ldr	r1, [pc, #492]	; (a678 <sched_free_win_offset_calc+0x268>)
    a48a:	487c      	ldr	r0, [pc, #496]	; (a67c <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    a48c:	f7f6 fd7e 	bl	f8c <printk>
    a490:	4040      	eors	r0, r0
    a492:	f380 8811 	msr	BASEPRI, r0
    a496:	f04f 0004 	mov.w	r0, #4
    a49a:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a49c:	4293      	cmp	r3, r2
    a49e:	bf38      	it	cc
    a4a0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a4a2:	2200      	movs	r2, #0
    a4a4:	e7c6      	b.n	a434 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a4a6:	2101      	movs	r1, #1
    a4a8:	2000      	movs	r0, #0
    a4aa:	f7fd fdc7 	bl	803c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4b0:	2b02      	cmp	r3, #2
    a4b2:	d0f8      	beq.n	a4a6 <sched_free_win_offset_calc+0x96>
    a4b4:	e7e1      	b.n	a47a <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a4b6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a4ba:	2aff      	cmp	r2, #255	; 0xff
    a4bc:	d065      	beq.n	a58a <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    a4be:	2fff      	cmp	r7, #255	; 0xff
    a4c0:	d00a      	beq.n	a4d8 <sched_free_win_offset_calc+0xc8>
    a4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a4c4:	4599      	cmp	r9, r3
    a4c6:	d007      	beq.n	a4d8 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    a4c8:	4b68      	ldr	r3, [pc, #416]	; (a66c <sched_free_win_offset_calc+0x25c>)
    a4ca:	9301      	str	r3, [sp, #4]
    a4cc:	9300      	str	r3, [sp, #0]
    a4ce:	4a68      	ldr	r2, [pc, #416]	; (a670 <sched_free_win_offset_calc+0x260>)
    a4d0:	4b68      	ldr	r3, [pc, #416]	; (a674 <sched_free_win_offset_calc+0x264>)
    a4d2:	4969      	ldr	r1, [pc, #420]	; (a678 <sched_free_win_offset_calc+0x268>)
    a4d4:	486a      	ldr	r0, [pc, #424]	; (a680 <sched_free_win_offset_calc+0x270>)
    a4d6:	e7d9      	b.n	a48c <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a4d8:	2a05      	cmp	r2, #5
    a4da:	d951      	bls.n	a580 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    a4dc:	4869      	ldr	r0, [pc, #420]	; (a684 <sched_free_win_offset_calc+0x274>)
    a4de:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a4e2:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a4e4:	429a      	cmp	r2, r3
    a4e6:	da4b      	bge.n	a580 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a4e8:	2a06      	cmp	r2, #6
    a4ea:	f000 8092 	beq.w	a612 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    a4ee:	9b06      	ldr	r3, [sp, #24]
    a4f0:	2bff      	cmp	r3, #255	; 0xff
    a4f2:	d14a      	bne.n	a58a <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a4f4:	3a07      	subs	r2, #7
    a4f6:	b292      	uxth	r2, r2
    a4f8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a4fc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a500:	f7fc fdf0 	bl	70e4 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a504:	4580      	cmp	r8, r0
    a506:	d03b      	beq.n	a580 <sched_free_win_offset_calc+0x170>
    a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a50a:	b91b      	cbnz	r3, a514 <sched_free_win_offset_calc+0x104>
    a50c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a510:	2b00      	cmp	r3, #0
    a512:	db35      	blt.n	a580 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    a514:	9b05      	ldr	r3, [sp, #20]
    a516:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a518:	6841      	ldr	r1, [r0, #4]
    a51a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a51c:	6803      	ldr	r3, [r0, #0]
    a51e:	2b00      	cmp	r3, #0
    a520:	da4e      	bge.n	a5c0 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    a522:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a528:	428a      	cmp	r2, r1
    a52a:	bf2c      	ite	cs
    a52c:	18b6      	addcs	r6, r6, r2
    a52e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a530:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a532:	68c2      	ldr	r2, [r0, #12]
    a534:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a538:	444b      	add	r3, r9
    a53a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a53c:	f8da 3000 	ldr.w	r3, [sl]
    a540:	429e      	cmp	r6, r3
    a542:	d916      	bls.n	a572 <sched_free_win_offset_calc+0x162>
    a544:	429d      	cmp	r5, r3
    a546:	bf38      	it	cc
    a548:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a54a:	9b07      	ldr	r3, [sp, #28]
    a54c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a550:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	42a3      	cmp	r3, r4
    a556:	d905      	bls.n	a564 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    a558:	4629      	mov	r1, r5
    a55a:	4630      	mov	r0, r6
    a55c:	f7fd fd86 	bl	806c <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a560:	42b8      	cmp	r0, r7
    a562:	d231      	bcs.n	a5c8 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    a564:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a568:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a56a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a56e:	4293      	cmp	r3, r2
    a570:	d20b      	bcs.n	a58a <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    a572:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a576:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a57a:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a57e:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a580:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	42a3      	cmp	r3, r4
    a586:	f63f af67 	bhi.w	a458 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a58a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a58e:	2bff      	cmp	r3, #255	; 0xff
    a590:	d111      	bne.n	a5b6 <sched_free_win_offset_calc+0x1a6>
    a592:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a596:	f8df 80f0 	ldr.w	r8, [pc, #240]	; a688 <sched_free_win_offset_calc+0x278>
    a59a:	a731      	add	r7, pc, #196	; (adr r7, a660 <sched_free_win_offset_calc+0x250>)
    a59c:	e9d7 6700 	ldrd	r6, r7, [r7]
    a5a0:	429d      	cmp	r5, r3
    a5a2:	bf38      	it	cc
    a5a4:	461d      	movcc	r5, r3
    a5a6:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a5aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a5ac:	781b      	ldrb	r3, [r3, #0]
    a5ae:	42a3      	cmp	r3, r4
    a5b0:	d831      	bhi.n	a616 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a5b2:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a5b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a5b8:	701c      	strb	r4, [r3, #0]
}
    a5ba:	b00f      	add	sp, #60	; 0x3c
    a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a5c0:	428b      	cmp	r3, r1
    a5c2:	bf38      	it	cc
    a5c4:	460b      	movcc	r3, r1
    a5c6:	e7b4      	b.n	a532 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a5c8:	4a2f      	ldr	r2, [pc, #188]	; (a688 <sched_free_win_offset_calc+0x278>)
    a5ca:	eb05 030b 	add.w	r3, r5, fp
    a5ce:	fba3 0102 	umull	r0, r1, r3, r2
    a5d2:	2207      	movs	r2, #7
    a5d4:	fb02 1103 	mla	r1, r2, r3, r1
    a5d8:	a321      	add	r3, pc, #132	; (adr r3, a660 <sched_free_win_offset_calc+0x250>)
    a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5de:	f7f5 fe19 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a5e2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a5e6:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a5ea:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a5ec:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a5ee:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a5f0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a5f4:	d20b      	bcs.n	a60e <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    a5f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a5f8:	2202      	movs	r2, #2
    a5fa:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a5fe:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a602:	3401      	adds	r4, #1
					memcpy(win_offset +
    a604:	f7f7 fb06 	bl	1c14 <memcpy>
					offset_index++;
    a608:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a60a:	3528      	adds	r5, #40	; 0x28
    a60c:	e7a0      	b.n	a550 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    a60e:	2500      	movs	r5, #0
    a610:	e7a8      	b.n	a564 <sched_free_win_offset_calc+0x154>
    a612:	9206      	str	r2, [sp, #24]
    a614:	e7b4      	b.n	a580 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a616:	eb05 030b 	add.w	r3, r5, fp
    a61a:	fba3 0108 	umull	r0, r1, r3, r8
    a61e:	fb09 1103 	mla	r1, r9, r3, r1
    a622:	4632      	mov	r2, r6
    a624:	463b      	mov	r3, r7
    a626:	f7f5 fdf5 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a62a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a62e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a632:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a634:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a636:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a638:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a63c:	d90b      	bls.n	a656 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a63e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a640:	2202      	movs	r2, #2
    a642:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a646:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a64a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a64c:	f7f7 fae2 	bl	1c14 <memcpy>
			offset_index++;
    a650:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a652:	3528      	adds	r5, #40	; 0x28
    a654:	e7a9      	b.n	a5aa <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    a656:	2500      	movs	r5, #0
    a658:	e7ab      	b.n	a5b2 <sched_free_win_offset_calc+0x1a2>
    a65a:	bf00      	nop
    a65c:	f3af 8000 	nop.w
    a660:	3b9aca00 	.word	0x3b9aca00
    a664:	00000000 	.word	0x00000000
    a668:	00009c25 	.word	0x00009c25
    a66c:	00014b99 	.word	0x00014b99
    a670:	00015f55 	.word	0x00015f55
    a674:	00017441 	.word	0x00017441
    a678:	00015fa4 	.word	0x00015fa4
    a67c:	00018160 	.word	0x00018160
    a680:	00015ec9 	.word	0x00015ec9
    a684:	200008c0 	.word	0x200008c0
    a688:	1afd498d 	.word	0x1afd498d

0000a68c <mayfly_sched_free_win_offset_calc>:
{
    a68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a68e:	2300      	movs	r3, #0
    a690:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a692:	2306      	movs	r3, #6
    a694:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a698:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a69c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a6a0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a6a2:	bfbe      	ittt	lt
    a6a4:	4602      	movlt	r2, r0
    a6a6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a6a8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a6ac:	9101      	str	r1, [sp, #4]
    a6ae:	f10d 010b 	add.w	r1, sp, #11
    a6b2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a6b4:	bfa8      	it	ge
    a6b6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a6b8:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a6bc:	2100      	movs	r1, #0
    a6be:	f7ff fea7 	bl	a410 <sched_free_win_offset_calc>
}
    a6c2:	b005      	add	sp, #20
    a6c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6c8 <mayfly_sched_win_offset_select>:
{
    a6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6cc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a6d0:	b089      	sub	sp, #36	; 0x24
    a6d2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6d4:	4840      	ldr	r0, [pc, #256]	; (a7d8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a6d6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a6d8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6da:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a6de:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6e2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a6e6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6e8:	fb03 1102 	mla	r1, r3, r2, r1
    a6ec:	a338      	add	r3, pc, #224	; (adr r3, a7d0 <mayfly_sched_win_offset_select+0x108>)
    a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a6f2:	9505      	str	r5, [sp, #20]
    a6f4:	6075      	str	r5, [r6, #4]
    a6f6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a6f8:	f7f5 fd8c 	bl	214 <__aeabi_uldivmod>
    a6fc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a6fe:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a702:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a706:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a70a:	9100      	str	r1, [sp, #0]
    a70c:	9601      	str	r6, [sp, #4]
    a70e:	2101      	movs	r1, #1
    a710:	4620      	mov	r0, r4
    a712:	f7ff fe7d 	bl	a410 <sched_free_win_offset_calc>
    a716:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a71a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a71e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a722:	2202      	movs	r2, #2
    a724:	4639      	mov	r1, r7
    a726:	f10d 000e 	add.w	r0, sp, #14
    a72a:	f7f7 fa73 	bl	1c14 <memcpy>
		while (offset_index_m < offset_m_max) {
    a72e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a732:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a736:	2300      	movs	r3, #0
    a738:	b2d9      	uxtb	r1, r3
    a73a:	4288      	cmp	r0, r1
    a73c:	d811      	bhi.n	a762 <mayfly_sched_win_offset_select+0x9a>
    a73e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a740:	4547      	cmp	r7, r8
    a742:	d1ee      	bne.n	a722 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a744:	b9b5      	cbnz	r5, a774 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a746:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a74a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a74e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a750:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a754:	2202      	movs	r2, #2
    a756:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a758:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a75c:	f7f7 fa5a 	bl	1c14 <memcpy>
    a760:	e027      	b.n	a7b2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a762:	454a      	cmp	r2, r9
    a764:	d004      	beq.n	a770 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a766:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a76a:	4291      	cmp	r1, r2
    a76c:	d024      	beq.n	a7b8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a76e:	2501      	movs	r5, #1
    a770:	3301      	adds	r3, #1
    a772:	e7e1      	b.n	a738 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a774:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a778:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a77c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a780:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a784:	4b15      	ldr	r3, [pc, #84]	; (a7dc <mayfly_sched_win_offset_select+0x114>)
    a786:	2200      	movs	r2, #0
    a788:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a78c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a790:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a794:	f042 0203 	orr.w	r2, r2, #3
    a798:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a79c:	2203      	movs	r2, #3
    a79e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a7a2:	2211      	movs	r2, #17
    a7a4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a7a8:	220f      	movs	r2, #15
    a7aa:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a7ae:	2220      	movs	r2, #32
    a7b0:	701a      	strb	r2, [r3, #0]
}
    a7b2:	b009      	add	sp, #36	; 0x24
    a7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a7b8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a7bc:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a7be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a7c2:	2202      	movs	r2, #2
    a7c4:	f10d 010e 	add.w	r1, sp, #14
    a7c8:	e7c6      	b.n	a758 <mayfly_sched_win_offset_select+0x90>
    a7ca:	bf00      	nop
    a7cc:	f3af 8000 	nop.w
    a7d0:	1afd498d 	.word	0x1afd498d
    a7d4:	00000007 	.word	0x00000007
    a7d8:	09ce5400 	.word	0x09ce5400
    a7dc:	200008c0 	.word	0x200008c0

0000a7e0 <sched_after_mstr_free_slot_get>:
{
    a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7e4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a7e6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a7e8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a7ea:	f8df 9140 	ldr.w	r9, [pc, #320]	; a92c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    a7ee:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a7f2:	4680      	mov	r8, r0
    a7f4:	4693      	mov	fp, r2
    a7f6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a7f8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a7fc:	601c      	str	r4, [r3, #0]
    a7fe:	9408      	str	r4, [sp, #32]
    a800:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a802:	2302      	movs	r3, #2
    a804:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a806:	ab09      	add	r3, sp, #36	; 0x24
    a808:	9302      	str	r3, [sp, #8]
    a80a:	4b41      	ldr	r3, [pc, #260]	; (a910 <sched_after_mstr_free_slot_get+0x130>)
    a80c:	9301      	str	r3, [sp, #4]
    a80e:	ab08      	add	r3, sp, #32
    a810:	9300      	str	r3, [sp, #0]
    a812:	f10d 021f 	add.w	r2, sp, #31
    a816:	465b      	mov	r3, fp
    a818:	4641      	mov	r1, r8
    a81a:	2000      	movs	r0, #0
    a81c:	f7fd fb90 	bl	7f40 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a820:	2802      	cmp	r0, #2
    a822:	d014      	beq.n	a84e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a826:	b1b3      	cbz	r3, a856 <sched_after_mstr_free_slot_get+0x76>
    a828:	4b3a      	ldr	r3, [pc, #232]	; (a914 <sched_after_mstr_free_slot_get+0x134>)
    a82a:	9301      	str	r3, [sp, #4]
    a82c:	9300      	str	r3, [sp, #0]
    a82e:	4a3a      	ldr	r2, [pc, #232]	; (a918 <sched_after_mstr_free_slot_get+0x138>)
    a830:	4b3a      	ldr	r3, [pc, #232]	; (a91c <sched_after_mstr_free_slot_get+0x13c>)
    a832:	493b      	ldr	r1, [pc, #236]	; (a920 <sched_after_mstr_free_slot_get+0x140>)
    a834:	483b      	ldr	r0, [pc, #236]	; (a924 <sched_after_mstr_free_slot_get+0x144>)
    a836:	f7f6 fba9 	bl	f8c <printk>
    a83a:	4040      	eors	r0, r0
    a83c:	f380 8811 	msr	BASEPRI, r0
    a840:	f04f 0004 	mov.w	r0, #4
    a844:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a846:	4641      	mov	r1, r8
    a848:	2000      	movs	r0, #0
    a84a:	f7fd fbf7 	bl	803c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a850:	2b02      	cmp	r3, #2
    a852:	d0f8      	beq.n	a846 <sched_after_mstr_free_slot_get+0x66>
    a854:	e7e6      	b.n	a824 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a856:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a85a:	2aff      	cmp	r2, #255	; 0xff
    a85c:	d04e      	beq.n	a8fc <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a85e:	2a06      	cmp	r2, #6
    a860:	d9cf      	bls.n	a802 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a862:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a866:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a868:	429a      	cmp	r2, r3
    a86a:	daca      	bge.n	a802 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a86c:	3a07      	subs	r2, #7
    a86e:	b292      	uxth	r2, r2
    a870:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a874:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a878:	f7fc fc34 	bl	70e4 <mem_get>
		if (conn && !conn->role) {
    a87c:	2800      	cmp	r0, #0
    a87e:	d0c0      	beq.n	a802 <sched_after_mstr_free_slot_get+0x22>
    a880:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a884:	2b00      	cmp	r3, #0
    a886:	dbbc      	blt.n	a802 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a888:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a88a:	9a08      	ldr	r2, [sp, #32]
    a88c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a890:	2b00      	cmp	r3, #0
    a892:	da12      	bge.n	a8ba <sched_after_mstr_free_slot_get+0xda>
    a894:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a89a:	4571      	cmp	r1, lr
    a89c:	bf2c      	ite	cs
    a89e:	1852      	addcs	r2, r2, r1
    a8a0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a8a2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a8a4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a8a6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a8a8:	f101 0104 	add.w	r1, r1, #4
    a8ac:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a8ae:	d108      	bne.n	a8c2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    a8b0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a8b4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a8b6:	4616      	mov	r6, r2
    a8b8:	e7a3      	b.n	a802 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a8ba:	4573      	cmp	r3, lr
    a8bc:	bf38      	it	cc
    a8be:	4673      	movcc	r3, lr
    a8c0:	e7f0      	b.n	a8a4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a8c2:	4631      	mov	r1, r6
    a8c4:	4610      	mov	r0, r2
    a8c6:	9305      	str	r3, [sp, #20]
    a8c8:	9204      	str	r2, [sp, #16]
    a8ca:	f7fd fbcf 	bl	806c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a8ce:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a8d2:	4288      	cmp	r0, r1
    a8d4:	9a04      	ldr	r2, [sp, #16]
    a8d6:	9b05      	ldr	r3, [sp, #20]
    a8d8:	d9ea      	bls.n	a8b0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a8da:	4813      	ldr	r0, [pc, #76]	; (a928 <sched_after_mstr_free_slot_get+0x148>)
    a8dc:	4434      	add	r4, r6
    a8de:	fba4 0100 	umull	r0, r1, r4, r0
    a8e2:	2307      	movs	r3, #7
    a8e4:	fb03 1104 	mla	r1, r3, r4, r1
    a8e8:	a307      	add	r3, pc, #28	; (adr r3, a908 <sched_after_mstr_free_slot_get+0x128>)
    a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8ee:	f7f5 fc91 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a8f2:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a8f4:	6038      	str	r0, [r7, #0]
}
    a8f6:	b00b      	add	sp, #44	; 0x2c
    a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a8fc:	2dff      	cmp	r5, #255	; 0xff
    a8fe:	d1ec      	bne.n	a8da <sched_after_mstr_free_slot_get+0xfa>
    a900:	e7f9      	b.n	a8f6 <sched_after_mstr_free_slot_get+0x116>
    a902:	bf00      	nop
    a904:	f3af 8000 	nop.w
    a908:	3b9aca00 	.word	0x3b9aca00
    a90c:	00000000 	.word	0x00000000
    a910:	00009c25 	.word	0x00009c25
    a914:	00014b99 	.word	0x00014b99
    a918:	00015f55 	.word	0x00015f55
    a91c:	00017401 	.word	0x00017401
    a920:	00015fa4 	.word	0x00015fa4
    a924:	00018160 	.word	0x00018160
    a928:	1afd498d 	.word	0x1afd498d
    a92c:	200008c0 	.word	0x200008c0

0000a930 <isr_adv_ci_adva_check>:
{
    a930:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a932:	7804      	ldrb	r4, [r0, #0]
    a934:	780a      	ldrb	r2, [r1, #0]
    a936:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a93a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a93e:	d119      	bne.n	a974 <isr_adv_ci_adva_check+0x44>
    a940:	f004 040f 	and.w	r4, r4, #15
    a944:	2c01      	cmp	r4, #1
    a946:	f101 0608 	add.w	r6, r1, #8
    a94a:	f100 0502 	add.w	r5, r0, #2
    a94e:	d008      	beq.n	a962 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a950:	2206      	movs	r2, #6
    a952:	4631      	mov	r1, r6
    a954:	4628      	mov	r0, r5
    a956:	f7f7 f948 	bl	1bea <memcmp>
			 BDADDR_SIZE)) ||
    a95a:	fab0 f080 	clz	r0, r0
    a95e:	0940      	lsrs	r0, r0, #5
    a960:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a962:	2206      	movs	r2, #6
    a964:	4631      	mov	r1, r6
    a966:	4628      	mov	r0, r5
    a968:	f7f7 f93f 	bl	1bea <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a96c:	2800      	cmp	r0, #0
    a96e:	d1ef      	bne.n	a950 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a970:	4620      	mov	r0, r4
    a972:	bd70      	pop	{r4, r5, r6, pc}
    a974:	2000      	movs	r0, #0
}
    a976:	bd70      	pop	{r4, r5, r6, pc}

0000a978 <packet_rx_enqueue>:
{
    a978:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a97a:	4a1e      	ldr	r2, [pc, #120]	; (a9f4 <packet_rx_enqueue+0x7c>)
    a97c:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a980:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a984:	4299      	cmp	r1, r3
    a986:	d10e      	bne.n	a9a6 <packet_rx_enqueue+0x2e>
    a988:	4b1b      	ldr	r3, [pc, #108]	; (a9f8 <packet_rx_enqueue+0x80>)
    a98a:	9301      	str	r3, [sp, #4]
    a98c:	9300      	str	r3, [sp, #0]
    a98e:	4a1b      	ldr	r2, [pc, #108]	; (a9fc <packet_rx_enqueue+0x84>)
    a990:	4b1b      	ldr	r3, [pc, #108]	; (aa00 <packet_rx_enqueue+0x88>)
    a992:	491c      	ldr	r1, [pc, #112]	; (aa04 <packet_rx_enqueue+0x8c>)
    a994:	481c      	ldr	r0, [pc, #112]	; (aa08 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    a996:	f7f6 faf9 	bl	f8c <printk>
    a99a:	4040      	eors	r0, r0
    a99c:	f380 8811 	msr	BASEPRI, r0
    a9a0:	f04f 0004 	mov.w	r0, #4
    a9a4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a9a6:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a9aa:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a9ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a9b2:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a9b6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a9b8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a9ba:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a9be:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a9c2:	3301      	adds	r3, #1
    a9c4:	b2db      	uxtb	r3, r3
		last = 0;
    a9c6:	429c      	cmp	r4, r3
    a9c8:	bf08      	it	eq
    a9ca:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a9cc:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a9d0:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a9d4:	f7fc fbab 	bl	712e <memq_enqueue>
	LL_ASSERT(link);
    a9d8:	b938      	cbnz	r0, a9ea <packet_rx_enqueue+0x72>
    a9da:	4b07      	ldr	r3, [pc, #28]	; (a9f8 <packet_rx_enqueue+0x80>)
    a9dc:	9301      	str	r3, [sp, #4]
    a9de:	9300      	str	r3, [sp, #0]
    a9e0:	4a06      	ldr	r2, [pc, #24]	; (a9fc <packet_rx_enqueue+0x84>)
    a9e2:	4b07      	ldr	r3, [pc, #28]	; (aa00 <packet_rx_enqueue+0x88>)
    a9e4:	4907      	ldr	r1, [pc, #28]	; (aa04 <packet_rx_enqueue+0x8c>)
    a9e6:	4809      	ldr	r0, [pc, #36]	; (aa0c <packet_rx_enqueue+0x94>)
    a9e8:	e7d5      	b.n	a996 <packet_rx_enqueue+0x1e>
}
    a9ea:	b002      	add	sp, #8
    a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a9f0:	f006 bb9c 	b.w	1112c <radio_event_callback>
    a9f4:	200008c0 	.word	0x200008c0
    a9f8:	00014b99 	.word	0x00014b99
    a9fc:	00015f55 	.word	0x00015f55
    aa00:	00017592 	.word	0x00017592
    aa04:	00015fa4 	.word	0x00015fa4
    aa08:	00017e58 	.word	0x00017e58
    aa0c:	0001767b 	.word	0x0001767b

0000aa10 <isr_scan_tgta_check>:
{
    aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa14:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    aa16:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    aa18:	f101 0808 	add.w	r8, r1, #8
{
    aa1c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    aa1e:	09c0      	lsrs	r0, r0, #7
    aa20:	4641      	mov	r1, r8
{
    aa22:	4691      	mov	r9, r2
    aa24:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    aa26:	f007 f81d 	bl	11a64 <ctrl_rl_addr_resolve>
    aa2a:	4604      	mov	r4, r0
    aa2c:	b9d8      	cbnz	r0, aa66 <isr_scan_tgta_check+0x56>
    aa2e:	4f1c      	ldr	r7, [pc, #112]	; (aaa0 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    aa30:	f1ba 0f00 	cmp.w	sl, #0
    aa34:	d10e      	bne.n	aa54 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    aa36:	782b      	ldrb	r3, [r5, #0]
    aa38:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    aa3c:	09db      	lsrs	r3, r3, #7
    aa3e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    aa42:	d113      	bne.n	aa6c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    aa44:	2206      	movs	r2, #6
    aa46:	4641      	mov	r1, r8
    aa48:	4816      	ldr	r0, [pc, #88]	; (aaa4 <isr_scan_tgta_check+0x94>)
    aa4a:	f7f7 f8ce 	bl	1bea <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    aa4e:	b968      	cbnz	r0, aa6c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    aa50:	2001      	movs	r0, #1
    aa52:	e012      	b.n	aa7a <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    aa54:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    aa58:	07db      	lsls	r3, r3, #31
    aa5a:	d5ec      	bpl.n	aa36 <isr_scan_tgta_check+0x26>
    aa5c:	4648      	mov	r0, r9
    aa5e:	f006 fd5d 	bl	1151c <ctrl_lrpa_get>
    aa62:	2800      	cmp	r0, #0
    aa64:	d0e7      	beq.n	aa36 <isr_scan_tgta_check+0x26>
}
    aa66:	4620      	mov	r0, r4
    aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    aa6c:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    aa70:	f3c0 1001 	ubfx	r0, r0, #4, #2
    aa74:	f010 0002 	ands.w	r0, r0, #2
    aa78:	d101      	bne.n	aa7e <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    aa7a:	4604      	mov	r4, r0
    aa7c:	e7f3      	b.n	aa66 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    aa7e:	f995 3000 	ldrsb.w	r3, [r5]
    aa82:	2b00      	cmp	r3, #0
    aa84:	da09      	bge.n	aa9a <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    aa86:	7b6b      	ldrb	r3, [r5, #13]
    aa88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    aa8c:	2b40      	cmp	r3, #64	; 0x40
    aa8e:	d104      	bne.n	aa9a <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    aa90:	2e00      	cmp	r6, #0
    aa92:	d0dd      	beq.n	aa50 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    aa94:	2001      	movs	r0, #1
    aa96:	7030      	strb	r0, [r6, #0]
    aa98:	e7ef      	b.n	aa7a <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    aa9a:	2000      	movs	r0, #0
    aa9c:	e7ed      	b.n	aa7a <isr_scan_tgta_check+0x6a>
    aa9e:	bf00      	nop
    aaa0:	200008c0 	.word	0x200008c0
    aaa4:	200009a4 	.word	0x200009a4

0000aaa8 <isr_rx_scan_report>:
{
    aaa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    aaac:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    aaae:	2003      	movs	r0, #3
{
    aab0:	460f      	mov	r7, r1
    aab2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    aab4:	f7ff f8f6 	bl	9ca4 <packet_rx_reserve_get>
	if (node_rx == 0) {
    aab8:	4604      	mov	r4, r0
    aaba:	2800      	cmp	r0, #0
    aabc:	d03e      	beq.n	ab3c <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    aabe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aac2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    aac4:	4b1e      	ldr	r3, [pc, #120]	; (ab40 <isr_rx_scan_report+0x98>)
    aac6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    aaca:	075a      	lsls	r2, r3, #29
    aacc:	d032      	beq.n	ab34 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    aace:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aad2:	b2da      	uxtb	r2, r3
    aad4:	2a01      	cmp	r2, #1
    aad6:	d010      	beq.n	aafa <isr_rx_scan_report+0x52>
    aad8:	2a04      	cmp	r2, #4
    aada:	d00f      	beq.n	aafc <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    aadc:	4b19      	ldr	r3, [pc, #100]	; (ab44 <isr_rx_scan_report+0x9c>)
    aade:	9301      	str	r3, [sp, #4]
    aae0:	9300      	str	r3, [sp, #0]
    aae2:	4a19      	ldr	r2, [pc, #100]	; (ab48 <isr_rx_scan_report+0xa0>)
    aae4:	4b19      	ldr	r3, [pc, #100]	; (ab4c <isr_rx_scan_report+0xa4>)
    aae6:	491a      	ldr	r1, [pc, #104]	; (ab50 <isr_rx_scan_report+0xa8>)
    aae8:	481a      	ldr	r0, [pc, #104]	; (ab54 <isr_rx_scan_report+0xac>)
    aaea:	f7f6 fa4f 	bl	f8c <printk>
    aaee:	4040      	eors	r0, r0
    aaf0:	f380 8811 	msr	BASEPRI, r0
    aaf4:	f04f 0004 	mov.w	r0, #4
    aaf8:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    aafa:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    aafc:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ab00:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    ab02:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ab06:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    ab0a:	f1b9 0f00 	cmp.w	r9, #0
    ab0e:	d013      	beq.n	ab38 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    ab10:	f007 fd34 	bl	1257c <radio_rssi_get>
			     pdu_adv_rx->len] =
    ab14:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    ab18:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ab1c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    ab1e:	442b      	add	r3, r5
    ab20:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    ab22:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    ab24:	441d      	add	r5, r3
    ab26:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    ab28:	f7ff ff26 	bl	a978 <packet_rx_enqueue>
	return 0;
    ab2c:	2000      	movs	r0, #0
}
    ab2e:	b003      	add	sp, #12
    ab30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    ab34:	2302      	movs	r3, #2
    ab36:	e7e1      	b.n	aafc <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    ab38:	207f      	movs	r0, #127	; 0x7f
    ab3a:	e7ed      	b.n	ab18 <isr_rx_scan_report+0x70>
		return 1;
    ab3c:	2001      	movs	r0, #1
    ab3e:	e7f6      	b.n	ab2e <isr_rx_scan_report+0x86>
    ab40:	200008c0 	.word	0x200008c0
    ab44:	00014b99 	.word	0x00014b99
    ab48:	00015f55 	.word	0x00015f55
    ab4c:	00017228 	.word	0x00017228
    ab50:	00015fa4 	.word	0x00015fa4
    ab54:	00015ec9 	.word	0x00015ec9

0000ab58 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    ab58:	4a0b      	ldr	r2, [pc, #44]	; (ab88 <rx_fc_lock+0x30>)
    ab5a:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ab5e:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    ab62:	4299      	cmp	r1, r3
    ab64:	d10e      	bne.n	ab84 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    ab66:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ab6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ab6e:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    ab72:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    ab76:	3301      	adds	r3, #1
    ab78:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    ab7a:	2b03      	cmp	r3, #3
    ab7c:	bf08      	it	eq
    ab7e:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    ab80:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    ab84:	4770      	bx	lr
    ab86:	bf00      	nop
    ab88:	200008c0 	.word	0x200008c0

0000ab8c <ticker_success_assert>:
{
    ab8c:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ab8e:	b170      	cbz	r0, abae <ticker_success_assert+0x22>
    ab90:	4b08      	ldr	r3, [pc, #32]	; (abb4 <ticker_success_assert+0x28>)
    ab92:	9301      	str	r3, [sp, #4]
    ab94:	9300      	str	r3, [sp, #0]
    ab96:	4a08      	ldr	r2, [pc, #32]	; (abb8 <ticker_success_assert+0x2c>)
    ab98:	4b08      	ldr	r3, [pc, #32]	; (abbc <ticker_success_assert+0x30>)
    ab9a:	4909      	ldr	r1, [pc, #36]	; (abc0 <ticker_success_assert+0x34>)
    ab9c:	4809      	ldr	r0, [pc, #36]	; (abc4 <ticker_success_assert+0x38>)
    ab9e:	f7f6 f9f5 	bl	f8c <printk>
    aba2:	4040      	eors	r0, r0
    aba4:	f380 8811 	msr	BASEPRI, r0
    aba8:	f04f 0004 	mov.w	r0, #4
    abac:	df02      	svc	2
}
    abae:	b003      	add	sp, #12
    abb0:	f85d fb04 	ldr.w	pc, [sp], #4
    abb4:	00014b99 	.word	0x00014b99
    abb8:	00015f55 	.word	0x00015f55
    abbc:	00017311 	.word	0x00017311
    abc0:	00015fa4 	.word	0x00015fa4
    abc4:	00018278 	.word	0x00018278

0000abc8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    abc8:	2801      	cmp	r0, #1
{
    abca:	b507      	push	{r0, r1, r2, lr}
    abcc:	4b11      	ldr	r3, [pc, #68]	; (ac14 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    abce:	d116      	bne.n	abfe <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    abd0:	7c9a      	ldrb	r2, [r3, #18]
    abd2:	2a05      	cmp	r2, #5
    abd4:	d104      	bne.n	abe0 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    abd6:	2200      	movs	r2, #0
    abd8:	749a      	strb	r2, [r3, #18]
}
    abda:	b003      	add	sp, #12
    abdc:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    abe0:	4b0d      	ldr	r3, [pc, #52]	; (ac18 <ticker_stop_adv_assert+0x50>)
    abe2:	9301      	str	r3, [sp, #4]
    abe4:	9300      	str	r3, [sp, #0]
    abe6:	4a0d      	ldr	r2, [pc, #52]	; (ac1c <ticker_stop_adv_assert+0x54>)
    abe8:	4b0d      	ldr	r3, [pc, #52]	; (ac20 <ticker_stop_adv_assert+0x58>)
    abea:	490e      	ldr	r1, [pc, #56]	; (ac24 <ticker_stop_adv_assert+0x5c>)
    abec:	480e      	ldr	r0, [pc, #56]	; (ac28 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    abee:	f7f6 f9cd 	bl	f8c <printk>
    abf2:	4040      	eors	r0, r0
    abf4:	f380 8811 	msr	BASEPRI, r0
    abf8:	f04f 0004 	mov.w	r0, #4
    abfc:	df02      	svc	2
    abfe:	7c1b      	ldrb	r3, [r3, #16]
    ac00:	2b05      	cmp	r3, #5
    ac02:	d1ea      	bne.n	abda <ticker_stop_adv_assert+0x12>
    ac04:	4b04      	ldr	r3, [pc, #16]	; (ac18 <ticker_stop_adv_assert+0x50>)
    ac06:	9301      	str	r3, [sp, #4]
    ac08:	9300      	str	r3, [sp, #0]
    ac0a:	4a04      	ldr	r2, [pc, #16]	; (ac1c <ticker_stop_adv_assert+0x54>)
    ac0c:	4b04      	ldr	r3, [pc, #16]	; (ac20 <ticker_stop_adv_assert+0x58>)
    ac0e:	4905      	ldr	r1, [pc, #20]	; (ac24 <ticker_stop_adv_assert+0x5c>)
    ac10:	4806      	ldr	r0, [pc, #24]	; (ac2c <ticker_stop_adv_assert+0x64>)
    ac12:	e7ec      	b.n	abee <ticker_stop_adv_assert+0x26>
    ac14:	200008c0 	.word	0x200008c0
    ac18:	00014b99 	.word	0x00014b99
    ac1c:	00015f55 	.word	0x00015f55
    ac20:	00017327 	.word	0x00017327
    ac24:	00015fa4 	.word	0x00015fa4
    ac28:	00015ec9 	.word	0x00015ec9
    ac2c:	000181fa 	.word	0x000181fa

0000ac30 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    ac30:	2801      	cmp	r0, #1
{
    ac32:	b507      	push	{r0, r1, r2, lr}
    ac34:	4b11      	ldr	r3, [pc, #68]	; (ac7c <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    ac36:	d116      	bne.n	ac66 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    ac38:	7c9a      	ldrb	r2, [r3, #18]
    ac3a:	2a06      	cmp	r2, #6
    ac3c:	d104      	bne.n	ac48 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    ac3e:	2200      	movs	r2, #0
    ac40:	749a      	strb	r2, [r3, #18]
}
    ac42:	b003      	add	sp, #12
    ac44:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    ac48:	4b0d      	ldr	r3, [pc, #52]	; (ac80 <ticker_stop_scan_assert+0x50>)
    ac4a:	9301      	str	r3, [sp, #4]
    ac4c:	9300      	str	r3, [sp, #0]
    ac4e:	4a0d      	ldr	r2, [pc, #52]	; (ac84 <ticker_stop_scan_assert+0x54>)
    ac50:	4b0d      	ldr	r3, [pc, #52]	; (ac88 <ticker_stop_scan_assert+0x58>)
    ac52:	490e      	ldr	r1, [pc, #56]	; (ac8c <ticker_stop_scan_assert+0x5c>)
    ac54:	480e      	ldr	r0, [pc, #56]	; (ac90 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    ac56:	f7f6 f999 	bl	f8c <printk>
    ac5a:	4040      	eors	r0, r0
    ac5c:	f380 8811 	msr	BASEPRI, r0
    ac60:	f04f 0004 	mov.w	r0, #4
    ac64:	df02      	svc	2
    ac66:	7c1b      	ldrb	r3, [r3, #16]
    ac68:	2b06      	cmp	r3, #6
    ac6a:	d1ea      	bne.n	ac42 <ticker_stop_scan_assert+0x12>
    ac6c:	4b04      	ldr	r3, [pc, #16]	; (ac80 <ticker_stop_scan_assert+0x50>)
    ac6e:	9301      	str	r3, [sp, #4]
    ac70:	9300      	str	r3, [sp, #0]
    ac72:	4a04      	ldr	r2, [pc, #16]	; (ac84 <ticker_stop_scan_assert+0x54>)
    ac74:	4b04      	ldr	r3, [pc, #16]	; (ac88 <ticker_stop_scan_assert+0x58>)
    ac76:	4905      	ldr	r1, [pc, #20]	; (ac8c <ticker_stop_scan_assert+0x5c>)
    ac78:	4806      	ldr	r0, [pc, #24]	; (ac94 <ticker_stop_scan_assert+0x64>)
    ac7a:	e7ec      	b.n	ac56 <ticker_stop_scan_assert+0x26>
    ac7c:	200008c0 	.word	0x200008c0
    ac80:	00014b99 	.word	0x00014b99
    ac84:	00015f55 	.word	0x00015f55
    ac88:	0001733e 	.word	0x0001733e
    ac8c:	00015fa4 	.word	0x00015fa4
    ac90:	00015ec9 	.word	0x00015ec9
    ac94:	00018239 	.word	0x00018239

0000ac98 <ticker_update_adv_assert>:
{
    ac98:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ac9a:	b190      	cbz	r0, acc2 <ticker_update_adv_assert+0x2a>
    ac9c:	4b0a      	ldr	r3, [pc, #40]	; (acc8 <ticker_update_adv_assert+0x30>)
    ac9e:	7c9b      	ldrb	r3, [r3, #18]
    aca0:	2b05      	cmp	r3, #5
    aca2:	d00e      	beq.n	acc2 <ticker_update_adv_assert+0x2a>
    aca4:	4b09      	ldr	r3, [pc, #36]	; (accc <ticker_update_adv_assert+0x34>)
    aca6:	9301      	str	r3, [sp, #4]
    aca8:	9300      	str	r3, [sp, #0]
    acaa:	4a09      	ldr	r2, [pc, #36]	; (acd0 <ticker_update_adv_assert+0x38>)
    acac:	4b09      	ldr	r3, [pc, #36]	; (acd4 <ticker_update_adv_assert+0x3c>)
    acae:	490a      	ldr	r1, [pc, #40]	; (acd8 <ticker_update_adv_assert+0x40>)
    acb0:	480a      	ldr	r0, [pc, #40]	; (acdc <ticker_update_adv_assert+0x44>)
    acb2:	f7f6 f96b 	bl	f8c <printk>
    acb6:	4040      	eors	r0, r0
    acb8:	f380 8811 	msr	BASEPRI, r0
    acbc:	f04f 0004 	mov.w	r0, #4
    acc0:	df02      	svc	2
}
    acc2:	b003      	add	sp, #12
    acc4:	f85d fb04 	ldr.w	pc, [sp], #4
    acc8:	200008c0 	.word	0x200008c0
    accc:	00014b99 	.word	0x00014b99
    acd0:	00015f55 	.word	0x00015f55
    acd4:	00017356 	.word	0x00017356
    acd8:	00015fa4 	.word	0x00015fa4
    acdc:	000182a5 	.word	0x000182a5

0000ace0 <ticker_update_slave_assert>:
{
    ace0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ace2:	b198      	cbz	r0, ad0c <ticker_update_slave_assert+0x2c>
    ace4:	4b0b      	ldr	r3, [pc, #44]	; (ad14 <ticker_update_slave_assert+0x34>)
    ace6:	7c9b      	ldrb	r3, [r3, #18]
    ace8:	b2c9      	uxtb	r1, r1
    acea:	4299      	cmp	r1, r3
    acec:	d00e      	beq.n	ad0c <ticker_update_slave_assert+0x2c>
    acee:	4b0a      	ldr	r3, [pc, #40]	; (ad18 <ticker_update_slave_assert+0x38>)
    acf0:	9301      	str	r3, [sp, #4]
    acf2:	9300      	str	r3, [sp, #0]
    acf4:	4a09      	ldr	r2, [pc, #36]	; (ad1c <ticker_update_slave_assert+0x3c>)
    acf6:	4b0a      	ldr	r3, [pc, #40]	; (ad20 <ticker_update_slave_assert+0x40>)
    acf8:	490a      	ldr	r1, [pc, #40]	; (ad24 <ticker_update_slave_assert+0x44>)
    acfa:	480b      	ldr	r0, [pc, #44]	; (ad28 <ticker_update_slave_assert+0x48>)
    acfc:	f7f6 f946 	bl	f8c <printk>
    ad00:	4040      	eors	r0, r0
    ad02:	f380 8811 	msr	BASEPRI, r0
    ad06:	f04f 0004 	mov.w	r0, #4
    ad0a:	df02      	svc	2
}
    ad0c:	b003      	add	sp, #12
    ad0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad12:	bf00      	nop
    ad14:	200008c0 	.word	0x200008c0
    ad18:	00014b99 	.word	0x00014b99
    ad1c:	00015f55 	.word	0x00015f55
    ad20:	0001736f 	.word	0x0001736f
    ad24:	00015fa4 	.word	0x00015fa4
    ad28:	000182f4 	.word	0x000182f4

0000ad2c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    ad2c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    ad2e:	b170      	cbz	r0, ad4e <ticker_op_latency_cancelled+0x22>
    ad30:	4b0b      	ldr	r3, [pc, #44]	; (ad60 <ticker_op_latency_cancelled+0x34>)
    ad32:	9301      	str	r3, [sp, #4]
    ad34:	9300      	str	r3, [sp, #0]
    ad36:	4a0b      	ldr	r2, [pc, #44]	; (ad64 <ticker_op_latency_cancelled+0x38>)
    ad38:	4b0b      	ldr	r3, [pc, #44]	; (ad68 <ticker_op_latency_cancelled+0x3c>)
    ad3a:	490c      	ldr	r1, [pc, #48]	; (ad6c <ticker_op_latency_cancelled+0x40>)
    ad3c:	480c      	ldr	r0, [pc, #48]	; (ad70 <ticker_op_latency_cancelled+0x44>)
    ad3e:	f7f6 f925 	bl	f8c <printk>
    ad42:	4040      	eors	r0, r0
    ad44:	f380 8811 	msr	BASEPRI, r0
    ad48:	f04f 0004 	mov.w	r0, #4
    ad4c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    ad4e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ad52:	f360 0341 	bfi	r3, r0, #1, #1
    ad56:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    ad5a:	b003      	add	sp, #12
    ad5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ad60:	00014b99 	.word	0x00014b99
    ad64:	00015f55 	.word	0x00015f55
    ad68:	0001764d 	.word	0x0001764d
    ad6c:	00015fa4 	.word	0x00015fa4
    ad70:	000181c6 	.word	0x000181c6

0000ad74 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ad74:	4b04      	ldr	r3, [pc, #16]	; (ad88 <ticker_job_disable+0x14>)
    ad76:	7d1b      	ldrb	r3, [r3, #20]
    ad78:	b123      	cbz	r3, ad84 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ad7a:	2101      	movs	r1, #1
    ad7c:	2200      	movs	r2, #0
    ad7e:	4608      	mov	r0, r1
    ad80:	f7fc ba1e 	b.w	71c0 <mayfly_enable>
    ad84:	4770      	bx	lr
    ad86:	bf00      	nop
    ad88:	200008c0 	.word	0x200008c0

0000ad8c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ad8c:	2806      	cmp	r0, #6
{
    ad8e:	b510      	push	{r4, lr}
    ad90:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ad92:	d90a      	bls.n	adaa <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ad94:	4b09      	ldr	r3, [pc, #36]	; (adbc <hdr_conn_get+0x30>)
    ad96:	1fc2      	subs	r2, r0, #7
    ad98:	b292      	uxth	r2, r2
    ad9a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ad9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ada2:	f7fc f99f 	bl	70e4 <mem_get>
    ada6:	6020      	str	r0, [r4, #0]
    ada8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    adaa:	2805      	cmp	r0, #5
    adac:	d004      	beq.n	adb8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    adae:	2806      	cmp	r0, #6
	return NULL;
    adb0:	4803      	ldr	r0, [pc, #12]	; (adc0 <hdr_conn_get+0x34>)
    adb2:	bf18      	it	ne
    adb4:	2000      	movne	r0, #0
    adb6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    adb8:	4802      	ldr	r0, [pc, #8]	; (adc4 <hdr_conn_get+0x38>)
}
    adba:	bd10      	pop	{r4, pc}
    adbc:	200008c0 	.word	0x200008c0
    adc0:	20000990 	.word	0x20000990
    adc4:	200008d8 	.word	0x200008d8

0000adc8 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    adc8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    adca:	4b07      	ldr	r3, [pc, #28]	; (ade8 <event_stop.part.10+0x20>)
    adcc:	9301      	str	r3, [sp, #4]
    adce:	9300      	str	r3, [sp, #0]
    add0:	4a06      	ldr	r2, [pc, #24]	; (adec <event_stop.part.10+0x24>)
    add2:	4b07      	ldr	r3, [pc, #28]	; (adf0 <event_stop.part.10+0x28>)
    add4:	4907      	ldr	r1, [pc, #28]	; (adf4 <event_stop.part.10+0x2c>)
    add6:	4808      	ldr	r0, [pc, #32]	; (adf8 <event_stop.part.10+0x30>)
    add8:	f7f6 f8d8 	bl	f8c <printk>
    addc:	4040      	eors	r0, r0
    adde:	f380 8811 	msr	BASEPRI, r0
    ade2:	f04f 0004 	mov.w	r0, #4
    ade6:	df02      	svc	2
    ade8:	00014b99 	.word	0x00014b99
    adec:	00015f55 	.word	0x00015f55
    adf0:	0001746e 	.word	0x0001746e
    adf4:	00015fa4 	.word	0x00015fa4
    adf8:	00017ddb 	.word	0x00017ddb

0000adfc <event_stop>:
	s_mfy_radio_stop.param = context;
    adfc:	4a06      	ldr	r2, [pc, #24]	; (ae18 <event_stop+0x1c>)
{
    adfe:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ae00:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ae02:	4613      	mov	r3, r2
    ae04:	2200      	movs	r2, #0
    ae06:	4611      	mov	r1, r2
    ae08:	4610      	mov	r0, r2
    ae0a:	f7fc fa01 	bl	7210 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ae0e:	b108      	cbz	r0, ae14 <event_stop+0x18>
    ae10:	f7ff ffda 	bl	adc8 <event_stop.part.10>
    ae14:	bd08      	pop	{r3, pc}
    ae16:	bf00      	nop
    ae18:	20003d70 	.word	0x20003d70

0000ae1c <event_active>:
{
    ae1c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ae1e:	2200      	movs	r2, #0
    ae20:	4b0b      	ldr	r3, [pc, #44]	; (ae50 <event_active+0x34>)
    ae22:	4611      	mov	r1, r2
    ae24:	4610      	mov	r0, r2
    ae26:	f7fc f9f3 	bl	7210 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ae2a:	b170      	cbz	r0, ae4a <event_active+0x2e>
    ae2c:	4b09      	ldr	r3, [pc, #36]	; (ae54 <event_active+0x38>)
    ae2e:	9301      	str	r3, [sp, #4]
    ae30:	9300      	str	r3, [sp, #0]
    ae32:	4a09      	ldr	r2, [pc, #36]	; (ae58 <event_active+0x3c>)
    ae34:	4b09      	ldr	r3, [pc, #36]	; (ae5c <event_active+0x40>)
    ae36:	490a      	ldr	r1, [pc, #40]	; (ae60 <event_active+0x44>)
    ae38:	480a      	ldr	r0, [pc, #40]	; (ae64 <event_active+0x48>)
    ae3a:	f7f6 f8a7 	bl	f8c <printk>
    ae3e:	4040      	eors	r0, r0
    ae40:	f380 8811 	msr	BASEPRI, r0
    ae44:	f04f 0004 	mov.w	r0, #4
    ae48:	df02      	svc	2
}
    ae4a:	b003      	add	sp, #12
    ae4c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae50:	20003d40 	.word	0x20003d40
    ae54:	00014b99 	.word	0x00014b99
    ae58:	00015f55 	.word	0x00015f55
    ae5c:	0001739e 	.word	0x0001739e
    ae60:	00015fa4 	.word	0x00015fa4
    ae64:	00017ddb 	.word	0x00017ddb

0000ae68 <event_xtal>:
{
    ae68:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ae6a:	2200      	movs	r2, #0
    ae6c:	4b0b      	ldr	r3, [pc, #44]	; (ae9c <event_xtal+0x34>)
    ae6e:	4611      	mov	r1, r2
    ae70:	4610      	mov	r0, r2
    ae72:	f7fc f9cd 	bl	7210 <mayfly_enqueue>
	LL_ASSERT(!retval);
    ae76:	b170      	cbz	r0, ae96 <event_xtal+0x2e>
    ae78:	4b09      	ldr	r3, [pc, #36]	; (aea0 <event_xtal+0x38>)
    ae7a:	9301      	str	r3, [sp, #4]
    ae7c:	9300      	str	r3, [sp, #0]
    ae7e:	4a09      	ldr	r2, [pc, #36]	; (aea4 <event_xtal+0x3c>)
    ae80:	4b09      	ldr	r3, [pc, #36]	; (aea8 <event_xtal+0x40>)
    ae82:	490a      	ldr	r1, [pc, #40]	; (aeac <event_xtal+0x44>)
    ae84:	480a      	ldr	r0, [pc, #40]	; (aeb0 <event_xtal+0x48>)
    ae86:	f7f6 f881 	bl	f8c <printk>
    ae8a:	4040      	eors	r0, r0
    ae8c:	f380 8811 	msr	BASEPRI, r0
    ae90:	f04f 0004 	mov.w	r0, #4
    ae94:	df02      	svc	2
}
    ae96:	b003      	add	sp, #12
    ae98:	f85d fb04 	ldr.w	pc, [sp], #4
    ae9c:	20003dc0 	.word	0x20003dc0
    aea0:	00014b99 	.word	0x00014b99
    aea4:	00015f55 	.word	0x00015f55
    aea8:	000173ba 	.word	0x000173ba
    aeac:	00015fa4 	.word	0x00015fa4
    aeb0:	00017ddb 	.word	0x00017ddb

0000aeb4 <mayfly_radio_active>:
{
    aeb4:	b507      	push	{r0, r1, r2, lr}
    aeb6:	4a12      	ldr	r2, [pc, #72]	; (af00 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    aeb8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    aeba:	b140      	cbz	r0, aece <mayfly_radio_active+0x1a>
		if (s_active++) {
    aebc:	1c59      	adds	r1, r3, #1
    aebe:	7011      	strb	r1, [r2, #0]
    aec0:	b9d3      	cbnz	r3, aef8 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    aec2:	2001      	movs	r0, #1
}
    aec4:	b003      	add	sp, #12
    aec6:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    aeca:	f006 b92d 	b.w	11128 <radio_active_callback>
		LL_ASSERT(s_active);
    aece:	b973      	cbnz	r3, aeee <mayfly_radio_active+0x3a>
    aed0:	4b0c      	ldr	r3, [pc, #48]	; (af04 <mayfly_radio_active+0x50>)
    aed2:	9301      	str	r3, [sp, #4]
    aed4:	9300      	str	r3, [sp, #0]
    aed6:	4a0c      	ldr	r2, [pc, #48]	; (af08 <mayfly_radio_active+0x54>)
    aed8:	4b0c      	ldr	r3, [pc, #48]	; (af0c <mayfly_radio_active+0x58>)
    aeda:	490d      	ldr	r1, [pc, #52]	; (af10 <mayfly_radio_active+0x5c>)
    aedc:	480d      	ldr	r0, [pc, #52]	; (af14 <mayfly_radio_active+0x60>)
    aede:	f7f6 f855 	bl	f8c <printk>
    aee2:	4040      	eors	r0, r0
    aee4:	f380 8811 	msr	BASEPRI, r0
    aee8:	f04f 0004 	mov.w	r0, #4
    aeec:	df02      	svc	2
		if (--s_active) {
    aeee:	3b01      	subs	r3, #1
    aef0:	b2db      	uxtb	r3, r3
    aef2:	7013      	strb	r3, [r2, #0]
    aef4:	2b00      	cmp	r3, #0
    aef6:	d0e5      	beq.n	aec4 <mayfly_radio_active+0x10>
}
    aef8:	b003      	add	sp, #12
    aefa:	f85d fb04 	ldr.w	pc, [sp], #4
    aefe:	bf00      	nop
    af00:	20000a64 	.word	0x20000a64
    af04:	00014b99 	.word	0x00014b99
    af08:	00015f55 	.word	0x00015f55
    af0c:	0001738a 	.word	0x0001738a
    af10:	00015fa4 	.word	0x00015fa4
    af14:	00017d30 	.word	0x00017d30

0000af18 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    af18:	2000      	movs	r0, #0
    af1a:	f7ff bfcb 	b.w	aeb4 <mayfly_radio_active>
	...

0000af20 <mayfly_radio_stop>:
{
    af20:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    af22:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    af24:	1f03      	subs	r3, r0, #4
    af26:	2b01      	cmp	r3, #1
    af28:	d90e      	bls.n	af48 <mayfly_radio_stop+0x28>
    af2a:	4b11      	ldr	r3, [pc, #68]	; (af70 <mayfly_radio_stop+0x50>)
    af2c:	9301      	str	r3, [sp, #4]
    af2e:	9300      	str	r3, [sp, #0]
    af30:	4a10      	ldr	r2, [pc, #64]	; (af74 <mayfly_radio_stop+0x54>)
    af32:	4b11      	ldr	r3, [pc, #68]	; (af78 <mayfly_radio_stop+0x58>)
    af34:	4911      	ldr	r1, [pc, #68]	; (af7c <mayfly_radio_stop+0x5c>)
    af36:	4812      	ldr	r0, [pc, #72]	; (af80 <mayfly_radio_stop+0x60>)
    af38:	f7f6 f828 	bl	f8c <printk>
    af3c:	4040      	eors	r0, r0
    af3e:	f380 8811 	msr	BASEPRI, r0
    af42:	f04f 0004 	mov.w	r0, #4
    af46:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    af48:	4a0e      	ldr	r2, [pc, #56]	; (af84 <mayfly_radio_stop+0x64>)
    af4a:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    af4c:	b143      	cbz	r3, af60 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    af4e:	3b04      	subs	r3, #4
    af50:	2b01      	cmp	r3, #1
    af52:	d905      	bls.n	af60 <mayfly_radio_stop+0x40>
			_radio.state = state;
    af54:	7510      	strb	r0, [r2, #20]
}
    af56:	b003      	add	sp, #12
    af58:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    af5c:	f007 ba86 	b.w	1246c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    af60:	f007 fab6 	bl	124d0 <radio_is_idle>
    af64:	2800      	cmp	r0, #0
    af66:	d0f6      	beq.n	af56 <mayfly_radio_stop+0x36>
}
    af68:	b003      	add	sp, #12
    af6a:	f85d fb04 	ldr.w	pc, [sp], #4
    af6e:	bf00      	nop
    af70:	00014b99 	.word	0x00014b99
    af74:	00015f55 	.word	0x00015f55
    af78:	0001745c 	.word	0x0001745c
    af7c:	00015fa4 	.word	0x00015fa4
    af80:	00017d5a 	.word	0x00017d5a
    af84:	200008c0 	.word	0x200008c0

0000af88 <pdu_node_tx_release>:
{
    af88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    af8a:	4a17      	ldr	r2, [pc, #92]	; (afe8 <pdu_node_tx_release+0x60>)
    af8c:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    af90:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    af94:	3301      	adds	r3, #1
    af96:	b2db      	uxtb	r3, r3
		last = 0;
    af98:	429c      	cmp	r4, r3
    af9a:	bf08      	it	eq
    af9c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    af9e:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    afa2:	429c      	cmp	r4, r3
    afa4:	d10e      	bne.n	afc4 <pdu_node_tx_release+0x3c>
    afa6:	4b11      	ldr	r3, [pc, #68]	; (afec <pdu_node_tx_release+0x64>)
    afa8:	9301      	str	r3, [sp, #4]
    afaa:	9300      	str	r3, [sp, #0]
    afac:	4a10      	ldr	r2, [pc, #64]	; (aff0 <pdu_node_tx_release+0x68>)
    afae:	4b11      	ldr	r3, [pc, #68]	; (aff4 <pdu_node_tx_release+0x6c>)
    afb0:	4911      	ldr	r1, [pc, #68]	; (aff8 <pdu_node_tx_release+0x70>)
    afb2:	4812      	ldr	r0, [pc, #72]	; (affc <pdu_node_tx_release+0x74>)
    afb4:	f7f5 ffea 	bl	f8c <printk>
    afb8:	4040      	eors	r0, r0
    afba:	f380 8811 	msr	BASEPRI, r0
    afbe:	f04f 0004 	mov.w	r0, #4
    afc2:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    afc4:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    afc8:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    afcc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    afd0:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    afd4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    afd8:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    afda:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    afde:	b003      	add	sp, #12
    afe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    afe4:	f006 b8a2 	b.w	1112c <radio_event_callback>
    afe8:	200008c0 	.word	0x200008c0
    afec:	00014b99 	.word	0x00014b99
    aff0:	00015f55 	.word	0x00015f55
    aff4:	000175a4 	.word	0x000175a4
    aff8:	00015fa4 	.word	0x00015fa4
    affc:	00017eab 	.word	0x00017eab

0000b000 <packet_tx_enqueue>:
{
    b000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b004:	4c24      	ldr	r4, [pc, #144]	; (b098 <packet_tx_enqueue+0x98>)
{
    b006:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    b008:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    b00a:	b12e      	cbz	r6, b018 <packet_tx_enqueue+0x18>
    b00c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    b010:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    b014:	429a      	cmp	r2, r3
    b016:	d101      	bne.n	b01c <packet_tx_enqueue+0x1c>
    b018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b01c:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    b020:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b024:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    b028:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    b02c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b030:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    b034:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    b036:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    b038:	f7fc f854 	bl	70e4 <mem_get>
    b03c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    b03e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    b042:	8c1a      	ldrh	r2, [r3, #32]
    b044:	4282      	cmp	r2, r0
    b046:	d11f      	bne.n	b088 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    b048:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b04c:	b942      	cbnz	r2, b060 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    b04e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    b052:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    b056:	b91a      	cbnz	r2, b060 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    b058:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    b05c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    b060:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    b064:	b102      	cbz	r2, b068 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    b066:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    b068:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    b06c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    b070:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    b074:	3301      	adds	r3, #1
    b076:	b2db      	uxtb	r3, r3
			first = 0;
    b078:	429a      	cmp	r2, r3
    b07a:	bf08      	it	eq
    b07c:	2300      	moveq	r3, #0
    b07e:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    b080:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    b084:	b2f6      	uxtb	r6, r6
    b086:	e7c0      	b.n	b00a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b088:	792b      	ldrb	r3, [r5, #4]
    b08a:	f367 0301 	bfi	r3, r7, #0, #2
    b08e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    b090:	4629      	mov	r1, r5
    b092:	f7ff ff79 	bl	af88 <pdu_node_tx_release>
    b096:	e7e9      	b.n	b06c <packet_tx_enqueue+0x6c>
    b098:	200008c0 	.word	0x200008c0

0000b09c <connection_release>:
{
    b09c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b09e:	2201      	movs	r2, #1
{
    b0a0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b0a2:	4611      	mov	r1, r2
    b0a4:	2000      	movs	r0, #0
    b0a6:	f7fc f88b 	bl	71c0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0aa:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    b0ae:	2100      	movs	r1, #0
    b0b0:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b0b4:	3207      	adds	r2, #7
	ticker_status =
    b0b6:	9300      	str	r3, [sp, #0]
    b0b8:	4608      	mov	r0, r1
    b0ba:	4b3e      	ldr	r3, [pc, #248]	; (b1b4 <connection_release+0x118>)
    b0bc:	b2d2      	uxtb	r2, r2
    b0be:	f7fc ff03 	bl	7ec8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b0c2:	f030 0102 	bics.w	r1, r0, #2
    b0c6:	d00e      	beq.n	b0e6 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b0c8:	4b3b      	ldr	r3, [pc, #236]	; (b1b8 <connection_release+0x11c>)
    b0ca:	9301      	str	r3, [sp, #4]
    b0cc:	9300      	str	r3, [sp, #0]
    b0ce:	4a3b      	ldr	r2, [pc, #236]	; (b1bc <connection_release+0x120>)
    b0d0:	4b3b      	ldr	r3, [pc, #236]	; (b1c0 <connection_release+0x124>)
    b0d2:	493c      	ldr	r1, [pc, #240]	; (b1c4 <connection_release+0x128>)
    b0d4:	483c      	ldr	r0, [pc, #240]	; (b1c8 <connection_release+0x12c>)
    b0d6:	f7f5 ff59 	bl	f8c <printk>
    b0da:	4040      	eors	r0, r0
    b0dc:	f380 8811 	msr	BASEPRI, r0
    b0e0:	f04f 0004 	mov.w	r0, #4
    b0e4:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    b0e6:	4b39      	ldr	r3, [pc, #228]	; (b1cc <connection_release+0x130>)
    b0e8:	7d1a      	ldrb	r2, [r3, #20]
    b0ea:	2a05      	cmp	r2, #5
    b0ec:	461d      	mov	r5, r3
    b0ee:	d11b      	bne.n	b128 <connection_release+0x8c>
					  conn->handle))) {
    b0f0:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b0f2:	7c18      	ldrb	r0, [r3, #16]
    b0f4:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b0f6:	4290      	cmp	r0, r2
    b0f8:	d116      	bne.n	b128 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    b0fa:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b0fc:	f242 23fb 	movw	r3, #8955	; 0x22fb
    b100:	9300      	str	r3, [sp, #0]
    b102:	2201      	movs	r2, #1
    b104:	4b2b      	ldr	r3, [pc, #172]	; (b1b4 <connection_release+0x118>)
    b106:	4608      	mov	r0, r1
    b108:	f7fc fede 	bl	7ec8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b10c:	f030 0202 	bics.w	r2, r0, #2
    b110:	d1da      	bne.n	b0c8 <connection_release+0x2c>
		ticker_status =
    b112:	f242 3302 	movw	r3, #8962	; 0x2302
    b116:	9300      	str	r3, [sp, #0]
    b118:	4611      	mov	r1, r2
    b11a:	4b26      	ldr	r3, [pc, #152]	; (b1b4 <connection_release+0x118>)
    b11c:	4610      	mov	r0, r2
    b11e:	f7fc fed3 	bl	7ec8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b122:	f030 0302 	bics.w	r3, r0, #2
    b126:	d1cf      	bne.n	b0c8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b128:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b12c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b130:	4299      	cmp	r1, r3
    b132:	d003      	beq.n	b13c <connection_release+0xa0>
    b134:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b138:	4299      	cmp	r1, r3
    b13a:	d101      	bne.n	b140 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b13c:	4e24      	ldr	r6, [pc, #144]	; (b1d0 <connection_release+0x134>)
    b13e:	e012      	b.n	b166 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b140:	790b      	ldrb	r3, [r1, #4]
    b142:	f36f 0301 	bfc	r3, #0, #2
    b146:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b148:	680b      	ldr	r3, [r1, #0]
    b14a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b14e:	8c20      	ldrh	r0, [r4, #32]
    b150:	f7ff ff1a 	bl	af88 <pdu_node_tx_release>
    b154:	e7e8      	b.n	b128 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b156:	6803      	ldr	r3, [r0, #0]
    b158:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b15c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b160:	4631      	mov	r1, r6
    b162:	f7fb ffa4 	bl	70ae <mem_release>
	while ((conn->pkt_tx_head) &&
    b166:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b16a:	b118      	cbz	r0, b174 <connection_release+0xd8>
    b16c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b170:	4298      	cmp	r0, r3
    b172:	d1f0      	bne.n	b156 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    b174:	2300      	movs	r3, #0
    b176:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b17a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b17e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b182:	b951      	cbnz	r1, b19a <connection_release+0xfe>
	conn->handle = 0xffff;
    b184:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b188:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b18a:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b18e:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b190:	bf08      	it	eq
    b192:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b196:	b002      	add	sp, #8
    b198:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b19a:	790b      	ldrb	r3, [r1, #4]
    b19c:	f36f 0301 	bfc	r3, #0, #2
    b1a0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b1a2:	680b      	ldr	r3, [r1, #0]
    b1a4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b1a8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b1ac:	8c20      	ldrh	r0, [r4, #32]
    b1ae:	f7ff feeb 	bl	af88 <pdu_node_tx_release>
    b1b2:	e7e4      	b.n	b17e <connection_release+0xe2>
    b1b4:	0000ab8d 	.word	0x0000ab8d
    b1b8:	00014b99 	.word	0x00014b99
    b1bc:	00015f55 	.word	0x00015f55
    b1c0:	000175b8 	.word	0x000175b8
    b1c4:	00015fa4 	.word	0x00015fa4
    b1c8:	000176a1 	.word	0x000176a1
    b1cc:	200008c0 	.word	0x200008c0
    b1d0:	20000a1c 	.word	0x20000a1c

0000b1d4 <chan_set>:
	switch (chan) {
    b1d4:	2826      	cmp	r0, #38	; 0x26
{
    b1d6:	b513      	push	{r0, r1, r4, lr}
    b1d8:	4604      	mov	r4, r0
	switch (chan) {
    b1da:	d00c      	beq.n	b1f6 <chan_set+0x22>
    b1dc:	2827      	cmp	r0, #39	; 0x27
    b1de:	d00c      	beq.n	b1fa <chan_set+0x26>
    b1e0:	2825      	cmp	r0, #37	; 0x25
    b1e2:	d10c      	bne.n	b1fe <chan_set+0x2a>
		radio_freq_chan_set(2);
    b1e4:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b1e6:	f007 f8bd 	bl	12364 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b1ea:	4620      	mov	r0, r4
}
    b1ec:	b002      	add	sp, #8
    b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b1f2:	f007 b8bd 	b.w	12370 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b1f6:	201a      	movs	r0, #26
    b1f8:	e7f5      	b.n	b1e6 <chan_set+0x12>
		radio_freq_chan_set(80);
    b1fa:	2050      	movs	r0, #80	; 0x50
    b1fc:	e7f3      	b.n	b1e6 <chan_set+0x12>
		if (chan < 11) {
    b1fe:	280a      	cmp	r0, #10
    b200:	d802      	bhi.n	b208 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b202:	3002      	adds	r0, #2
    b204:	0040      	lsls	r0, r0, #1
    b206:	e7ee      	b.n	b1e6 <chan_set+0x12>
		} else if (chan < 40) {
    b208:	2827      	cmp	r0, #39	; 0x27
    b20a:	d801      	bhi.n	b210 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b20c:	3003      	adds	r0, #3
    b20e:	e7f9      	b.n	b204 <chan_set+0x30>
			LL_ASSERT(0);
    b210:	4b07      	ldr	r3, [pc, #28]	; (b230 <chan_set+0x5c>)
    b212:	9301      	str	r3, [sp, #4]
    b214:	9300      	str	r3, [sp, #0]
    b216:	4a07      	ldr	r2, [pc, #28]	; (b234 <chan_set+0x60>)
    b218:	4b07      	ldr	r3, [pc, #28]	; (b238 <chan_set+0x64>)
    b21a:	4908      	ldr	r1, [pc, #32]	; (b23c <chan_set+0x68>)
    b21c:	4808      	ldr	r0, [pc, #32]	; (b240 <chan_set+0x6c>)
    b21e:	f7f5 feb5 	bl	f8c <printk>
    b222:	4040      	eors	r0, r0
    b224:	f380 8811 	msr	BASEPRI, r0
    b228:	f04f 0004 	mov.w	r0, #4
    b22c:	df02      	svc	2
    b22e:	bf00      	nop
    b230:	00014b99 	.word	0x00014b99
    b234:	00015f55 	.word	0x00015f55
    b238:	0001748e 	.word	0x0001748e
    b23c:	00015fa4 	.word	0x00015fa4
    b240:	00015ec9 	.word	0x00015ec9

0000b244 <adv_setup>:
{
    b244:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b246:	4c31      	ldr	r4, [pc, #196]	; (b30c <adv_setup+0xc8>)
    b248:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b24c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b250:	429a      	cmp	r2, r3
    b252:	d051      	beq.n	b2f8 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b254:	3301      	adds	r3, #1
    b256:	b2db      	uxtb	r3, r3
			first = 0;
    b258:	2b02      	cmp	r3, #2
    b25a:	bf08      	it	eq
    b25c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b25e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b262:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b264:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b268:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b26c:	4299      	cmp	r1, r3
    b26e:	d007      	beq.n	b280 <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b270:	3301      	adds	r3, #1
    b272:	b2db      	uxtb	r3, r3
			first = 0;
    b274:	2b02      	cmp	r3, #2
    b276:	bf08      	it	eq
    b278:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b27a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b27e:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b280:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b284:	2327      	movs	r3, #39	; 0x27
    b286:	212b      	movs	r1, #43	; 0x2b
    b288:	fb13 1505 	smlabb	r5, r3, r5, r1
    b28c:	1966      	adds	r6, r4, r5
	if (upd) {
    b28e:	b142      	cbz	r2, b2a2 <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b290:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b294:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b298:	2206      	movs	r2, #6
    b29a:	1cb1      	adds	r1, r6, #2
    b29c:	307d      	adds	r0, #125	; 0x7d
    b29e:	f7f6 fcb9 	bl	1c14 <memcpy>
	radio_pkt_tx_set(pdu);
    b2a2:	4630      	mov	r0, r6
    b2a4:	f007 f8c2 	bl	1242c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b2a8:	5d63      	ldrb	r3, [r4, r5]
    b2aa:	f003 030f 	and.w	r3, r3, #15
    b2ae:	2b02      	cmp	r3, #2
    b2b0:	d024      	beq.n	b2fc <adv_setup+0xb8>
    b2b2:	2b07      	cmp	r3, #7
    b2b4:	d022      	beq.n	b2fc <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b2b6:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b2b8:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b2ba:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b2bc:	f007 f9cc 	bl	12658 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b2c0:	2000      	movs	r0, #0
    b2c2:	f007 f92d 	bl	12520 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b2c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b2ca:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b2ce:	b2d3      	uxtb	r3, r2
    b2d0:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b2d2:	2000      	movs	r0, #0
    b2d4:	07ce      	lsls	r6, r1, #31
    b2d6:	f100 0501 	add.w	r5, r0, #1
    b2da:	d514      	bpl.n	b306 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b2dc:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b2de:	4013      	ands	r3, r2
    b2e0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b2e4:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b2e6:	f363 0202 	bfi	r2, r3, #0, #3
    b2ea:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b2ee:	3025      	adds	r0, #37	; 0x25
}
    b2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b2f4:	f7ff bf6e 	b.w	b1d4 <chan_set>
	u8_t upd = 0;
    b2f8:	2200      	movs	r2, #0
    b2fa:	e7b3      	b.n	b264 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b2fc:	2303      	movs	r3, #3
    b2fe:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b300:	f007 f924 	bl	1254c <radio_switch_complete_and_disable>
    b304:	e7df      	b.n	b2c6 <adv_setup+0x82>
		bitmap >>= 1;
    b306:	0849      	lsrs	r1, r1, #1
    b308:	4628      	mov	r0, r5
    b30a:	e7e3      	b.n	b2d4 <adv_setup+0x90>
    b30c:	200008c0 	.word	0x200008c0

0000b310 <sched_after_mstr_free_offset_get>:
{
    b310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b312:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b314:	aa04      	add	r2, sp, #16
{
    b316:	461c      	mov	r4, r3
    b318:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b31a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b31e:	3127      	adds	r1, #39	; 0x27
    b320:	2001      	movs	r0, #1
    b322:	f7ff fa5d 	bl	a7e0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b326:	6823      	ldr	r3, [r4, #0]
    b328:	b363      	cbz	r3, b384 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b32a:	9803      	ldr	r0, [sp, #12]
    b32c:	1b83      	subs	r3, r0, r6
    b32e:	021b      	lsls	r3, r3, #8
    b330:	d50e      	bpl.n	b350 <sched_after_mstr_free_offset_get+0x40>
    b332:	4b19      	ldr	r3, [pc, #100]	; (b398 <sched_after_mstr_free_offset_get+0x88>)
    b334:	9301      	str	r3, [sp, #4]
    b336:	9300      	str	r3, [sp, #0]
    b338:	4a18      	ldr	r2, [pc, #96]	; (b39c <sched_after_mstr_free_offset_get+0x8c>)
    b33a:	4b19      	ldr	r3, [pc, #100]	; (b3a0 <sched_after_mstr_free_offset_get+0x90>)
    b33c:	4919      	ldr	r1, [pc, #100]	; (b3a4 <sched_after_mstr_free_offset_get+0x94>)
    b33e:	481a      	ldr	r0, [pc, #104]	; (b3a8 <sched_after_mstr_free_offset_get+0x98>)
    b340:	f7f5 fe24 	bl	f8c <printk>
    b344:	4040      	eors	r0, r0
    b346:	f380 8811 	msr	BASEPRI, r0
    b34a:	f04f 0004 	mov.w	r0, #4
    b34e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b350:	4631      	mov	r1, r6
    b352:	f7fc fe8b 	bl	806c <ticker_ticks_diff_get>
    b356:	4602      	mov	r2, r0
    b358:	4814      	ldr	r0, [pc, #80]	; (b3ac <sched_after_mstr_free_offset_get+0x9c>)
    b35a:	2307      	movs	r3, #7
    b35c:	fba2 0100 	umull	r0, r1, r2, r0
    b360:	fb03 1102 	mla	r1, r3, r2, r1
    b364:	a30a      	add	r3, pc, #40	; (adr r3, b390 <sched_after_mstr_free_offset_get+0x80>)
    b366:	e9d3 2300 	ldrd	r2, r3, [r3]
    b36a:	f7f4 ff53 	bl	214 <__aeabi_uldivmod>
    b36e:	6823      	ldr	r3, [r4, #0]
    b370:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b372:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b374:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b376:	db05      	blt.n	b384 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    b378:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b37c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b37e:	6823      	ldr	r3, [r4, #0]
    b380:	4298      	cmp	r0, r3
    b382:	d301      	bcc.n	b388 <sched_after_mstr_free_offset_get+0x78>
}
    b384:	b004      	add	sp, #16
    b386:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b388:	1a1b      	subs	r3, r3, r0
    b38a:	6023      	str	r3, [r4, #0]
    b38c:	e7f7      	b.n	b37e <sched_after_mstr_free_offset_get+0x6e>
    b38e:	bf00      	nop
    b390:	3b9aca00 	.word	0x3b9aca00
    b394:	00000000 	.word	0x00000000
    b398:	00014b99 	.word	0x00014b99
    b39c:	00015f55 	.word	0x00015f55
    b3a0:	00017420 	.word	0x00017420
    b3a4:	00015fa4 	.word	0x00015fa4
    b3a8:	00018107 	.word	0x00018107
    b3ac:	1afd498d 	.word	0x1afd498d

0000b3b0 <mayfly_sched_win_offset_use>:
{
    b3b0:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b3b2:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b3b6:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b3b8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b3bc:	68c1      	ldr	r1, [r0, #12]
    b3be:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b3c0:	f7ff ffa6 	bl	b310 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b3c4:	a902      	add	r1, sp, #8
    b3c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b3ca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b3ce:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b3d2:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b3d6:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b3d8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b3dc:	f7f6 fc1a 	bl	1c14 <memcpy>
}
    b3e0:	b002      	add	sp, #8
    b3e2:	bd10      	pop	{r4, pc}

0000b3e4 <mayfly_sched_after_mstr_free_offset_get>:
{
    b3e4:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b3e6:	4c05      	ldr	r4, [pc, #20]	; (b3fc <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b3e8:	4602      	mov	r2, r0
    b3ea:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b3ee:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b3f2:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b3f6:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b3f8:	f7ff bf8a 	b.w	b310 <sched_after_mstr_free_offset_get>
    b3fc:	200008c0 	.word	0x200008c0

0000b400 <terminate_ind_rx_enqueue>:
{
    b400:	b513      	push	{r0, r1, r4, lr}
    b402:	4603      	mov	r3, r0
    b404:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b406:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b40a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b40e:	b970      	cbnz	r0, b42e <terminate_ind_rx_enqueue+0x2e>
    b410:	4b16      	ldr	r3, [pc, #88]	; (b46c <terminate_ind_rx_enqueue+0x6c>)
    b412:	9301      	str	r3, [sp, #4]
    b414:	9300      	str	r3, [sp, #0]
    b416:	4a16      	ldr	r2, [pc, #88]	; (b470 <terminate_ind_rx_enqueue+0x70>)
    b418:	4b16      	ldr	r3, [pc, #88]	; (b474 <terminate_ind_rx_enqueue+0x74>)
    b41a:	4917      	ldr	r1, [pc, #92]	; (b478 <terminate_ind_rx_enqueue+0x78>)
    b41c:	4817      	ldr	r0, [pc, #92]	; (b47c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    b41e:	f7f5 fdb5 	bl	f8c <printk>
    b422:	4040      	eors	r0, r0
    b424:	f380 8811 	msr	BASEPRI, r0
    b428:	f04f 0004 	mov.w	r0, #4
    b42c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b42e:	8c1c      	ldrh	r4, [r3, #32]
    b430:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b434:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b438:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b43a:	4a11      	ldr	r2, [pc, #68]	; (b480 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b43c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b440:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b444:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b448:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b44c:	f7fb fe6f 	bl	712e <memq_enqueue>
	LL_ASSERT(link);
    b450:	b938      	cbnz	r0, b462 <terminate_ind_rx_enqueue+0x62>
    b452:	4b06      	ldr	r3, [pc, #24]	; (b46c <terminate_ind_rx_enqueue+0x6c>)
    b454:	9301      	str	r3, [sp, #4]
    b456:	9300      	str	r3, [sp, #0]
    b458:	4a05      	ldr	r2, [pc, #20]	; (b470 <terminate_ind_rx_enqueue+0x70>)
    b45a:	4b06      	ldr	r3, [pc, #24]	; (b474 <terminate_ind_rx_enqueue+0x74>)
    b45c:	4906      	ldr	r1, [pc, #24]	; (b478 <terminate_ind_rx_enqueue+0x78>)
    b45e:	4809      	ldr	r0, [pc, #36]	; (b484 <terminate_ind_rx_enqueue+0x84>)
    b460:	e7dd      	b.n	b41e <terminate_ind_rx_enqueue+0x1e>
}
    b462:	b002      	add	sp, #8
    b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b468:	f005 be60 	b.w	1112c <radio_event_callback>
    b46c:	00014b99 	.word	0x00014b99
    b470:	00015f55 	.word	0x00015f55
    b474:	000175cb 	.word	0x000175cb
    b478:	00015fa4 	.word	0x00015fa4
    b47c:	0001818d 	.word	0x0001818d
    b480:	200008c0 	.word	0x200008c0
    b484:	0001767b 	.word	0x0001767b

0000b488 <prepare_normal_set>:
{
    b488:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b48a:	6804      	ldr	r4, [r0, #0]
    b48c:	2c00      	cmp	r4, #0
{
    b48e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b490:	da26      	bge.n	b4e0 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    b492:	6843      	ldr	r3, [r0, #4]
    b494:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b496:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b498:	429d      	cmp	r5, r3
    b49a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b49e:	bf34      	ite	cc
    b4a0:	1ae4      	subcc	r4, r4, r3
    b4a2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b4a4:	4b0f      	ldr	r3, [pc, #60]	; (b4e4 <prepare_normal_set+0x5c>)
    b4a6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4a8:	b2a4      	uxth	r4, r4
		ticker_status =
    b4aa:	2300      	movs	r3, #0
    b4ac:	9304      	str	r3, [sp, #16]
    b4ae:	9303      	str	r3, [sp, #12]
    b4b0:	9302      	str	r3, [sp, #8]
    b4b2:	4618      	mov	r0, r3
    b4b4:	9401      	str	r4, [sp, #4]
    b4b6:	9400      	str	r4, [sp, #0]
    b4b8:	f7fc fcb8 	bl	7e2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b4bc:	f030 0302 	bics.w	r3, r0, #2
    b4c0:	d00e      	beq.n	b4e0 <prepare_normal_set+0x58>
    b4c2:	4b09      	ldr	r3, [pc, #36]	; (b4e8 <prepare_normal_set+0x60>)
    b4c4:	9301      	str	r3, [sp, #4]
    b4c6:	9300      	str	r3, [sp, #0]
    b4c8:	4a08      	ldr	r2, [pc, #32]	; (b4ec <prepare_normal_set+0x64>)
    b4ca:	4b09      	ldr	r3, [pc, #36]	; (b4f0 <prepare_normal_set+0x68>)
    b4cc:	4909      	ldr	r1, [pc, #36]	; (b4f4 <prepare_normal_set+0x6c>)
    b4ce:	480a      	ldr	r0, [pc, #40]	; (b4f8 <prepare_normal_set+0x70>)
    b4d0:	f7f5 fd5c 	bl	f8c <printk>
    b4d4:	4040      	eors	r0, r0
    b4d6:	f380 8811 	msr	BASEPRI, r0
    b4da:	f04f 0004 	mov.w	r0, #4
    b4de:	df02      	svc	2
}
    b4e0:	b009      	add	sp, #36	; 0x24
    b4e2:	bd30      	pop	{r4, r5, pc}
    b4e4:	00009c35 	.word	0x00009c35
    b4e8:	00014b99 	.word	0x00014b99
    b4ec:	00015f55 	.word	0x00015f55
    b4f0:	000173d8 	.word	0x000173d8
    b4f4:	00015fa4 	.word	0x00015fa4
    b4f8:	000176a1 	.word	0x000176a1
    b4fc:	00000000 	.word	0x00000000

0000b500 <mayfly_xtal_stop_calc>:
{
    b500:	b570      	push	{r4, r5, r6, lr}
    b502:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b504:	2302      	movs	r3, #2
    b506:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b508:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b50a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b50c:	4e7e      	ldr	r6, [pc, #504]	; (b708 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    b50e:	4d7f      	ldr	r5, [pc, #508]	; (b70c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    b510:	930a      	str	r3, [sp, #40]	; 0x28
{
    b512:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b514:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b516:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b51a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b51c:	ab09      	add	r3, sp, #36	; 0x24
    b51e:	9302      	str	r3, [sp, #8]
    b520:	ab0c      	add	r3, sp, #48	; 0x30
    b522:	9300      	str	r3, [sp, #0]
    b524:	9601      	str	r6, [sp, #4]
    b526:	ab0d      	add	r3, sp, #52	; 0x34
    b528:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b52c:	2101      	movs	r1, #1
    b52e:	2000      	movs	r0, #0
    b530:	f7fc fd06 	bl	7f40 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b534:	2802      	cmp	r0, #2
    b536:	d014      	beq.n	b562 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b538:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b53a:	b1b3      	cbz	r3, b56a <mayfly_xtal_stop_calc+0x6a>
    b53c:	4b74      	ldr	r3, [pc, #464]	; (b710 <mayfly_xtal_stop_calc+0x210>)
    b53e:	9301      	str	r3, [sp, #4]
    b540:	9300      	str	r3, [sp, #0]
    b542:	4a74      	ldr	r2, [pc, #464]	; (b714 <mayfly_xtal_stop_calc+0x214>)
    b544:	4b74      	ldr	r3, [pc, #464]	; (b718 <mayfly_xtal_stop_calc+0x218>)
    b546:	4975      	ldr	r1, [pc, #468]	; (b71c <mayfly_xtal_stop_calc+0x21c>)
    b548:	4875      	ldr	r0, [pc, #468]	; (b720 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    b54a:	f7f5 fd1f 	bl	f8c <printk>
    b54e:	4040      	eors	r0, r0
    b550:	f380 8811 	msr	BASEPRI, r0
    b554:	f04f 0004 	mov.w	r0, #4
    b558:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b55a:	2101      	movs	r1, #1
    b55c:	2000      	movs	r0, #0
    b55e:	f7fc fd6d 	bl	803c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b562:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b564:	2b02      	cmp	r3, #2
    b566:	d0f8      	beq.n	b55a <mayfly_xtal_stop_calc+0x5a>
    b568:	e7e6      	b.n	b538 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b56a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b56e:	2bff      	cmp	r3, #255	; 0xff
    b570:	d004      	beq.n	b57c <mayfly_xtal_stop_calc+0x7c>
    b572:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b576:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b578:	4293      	cmp	r3, r2
    b57a:	dacf      	bge.n	b51c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b57c:	1f5a      	subs	r2, r3, #5
    b57e:	b2d2      	uxtb	r2, r2
    b580:	2af9      	cmp	r2, #249	; 0xf9
    b582:	d805      	bhi.n	b590 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    b584:	4a61      	ldr	r2, [pc, #388]	; (b70c <mayfly_xtal_stop_calc+0x20c>)
    b586:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b58a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b58c:	4293      	cmp	r3, r2
    b58e:	db05      	blt.n	b59c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b590:	2100      	movs	r1, #0
    b592:	2001      	movs	r0, #1
    b594:	f7fe fe92 	bl	a2bc <mayfly_xtal_retain>
}
    b598:	b00e      	add	sp, #56	; 0x38
    b59a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b59c:	a90a      	add	r1, sp, #40	; 0x28
    b59e:	b2e0      	uxtb	r0, r4
    b5a0:	f7ff fbf4 	bl	ad8c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b5a4:	b938      	cbnz	r0, b5b6 <mayfly_xtal_stop_calc+0xb6>
    b5a6:	4b5a      	ldr	r3, [pc, #360]	; (b710 <mayfly_xtal_stop_calc+0x210>)
    b5a8:	9301      	str	r3, [sp, #4]
    b5aa:	9300      	str	r3, [sp, #0]
    b5ac:	4a59      	ldr	r2, [pc, #356]	; (b714 <mayfly_xtal_stop_calc+0x214>)
    b5ae:	4b5a      	ldr	r3, [pc, #360]	; (b718 <mayfly_xtal_stop_calc+0x218>)
    b5b0:	495a      	ldr	r1, [pc, #360]	; (b71c <mayfly_xtal_stop_calc+0x21c>)
    b5b2:	485c      	ldr	r0, [pc, #368]	; (b724 <mayfly_xtal_stop_calc+0x224>)
    b5b4:	e7c9      	b.n	b54a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b5b6:	6803      	ldr	r3, [r0, #0]
    b5b8:	6844      	ldr	r4, [r0, #4]
    b5ba:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b5bc:	bfb8      	it	lt
    b5be:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b5c0:	429c      	cmp	r4, r3
    b5c2:	bf38      	it	cc
    b5c4:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b5c6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b5c8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b5cc:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b5ce:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b5d0:	f7ff fbdc 	bl	ad8c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b5d4:	4605      	mov	r5, r0
    b5d6:	b938      	cbnz	r0, b5e8 <mayfly_xtal_stop_calc+0xe8>
    b5d8:	4b4d      	ldr	r3, [pc, #308]	; (b710 <mayfly_xtal_stop_calc+0x210>)
    b5da:	9301      	str	r3, [sp, #4]
    b5dc:	9300      	str	r3, [sp, #0]
    b5de:	4a4d      	ldr	r2, [pc, #308]	; (b714 <mayfly_xtal_stop_calc+0x214>)
    b5e0:	4b4d      	ldr	r3, [pc, #308]	; (b718 <mayfly_xtal_stop_calc+0x218>)
    b5e2:	494e      	ldr	r1, [pc, #312]	; (b71c <mayfly_xtal_stop_calc+0x21c>)
    b5e4:	4850      	ldr	r0, [pc, #320]	; (b728 <mayfly_xtal_stop_calc+0x228>)
    b5e6:	e7b0      	b.n	b54a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    b5e8:	6886      	ldr	r6, [r0, #8]
    b5ea:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b5ec:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b5ee:	429e      	cmp	r6, r3
    b5f0:	bf38      	it	cc
    b5f2:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b5f4:	2a00      	cmp	r2, #0
    b5f6:	da05      	bge.n	b604 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    b5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b5fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b5fe:	4433      	add	r3, r6
    b600:	1a9b      	subs	r3, r3, r2
    b602:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b606:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b60a:	4293      	cmp	r3, r2
    b60c:	d20a      	bcs.n	b624 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b60e:	2100      	movs	r1, #0
    b610:	2001      	movs	r0, #1
    b612:	f7fe fe53 	bl	a2bc <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b616:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b61a:	2101      	movs	r1, #1
    b61c:	4628      	mov	r0, r5
    b61e:	f7ff ff33 	bl	b488 <prepare_normal_set>
    b622:	e7b9      	b.n	b598 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b624:	2101      	movs	r1, #1
    b626:	4608      	mov	r0, r1
    b628:	f7fe fe48 	bl	a2bc <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b62c:	682b      	ldr	r3, [r5, #0]
    b62e:	2b00      	cmp	r3, #0
    b630:	db1c      	blt.n	b66c <mayfly_xtal_stop_calc+0x16c>
    b632:	429e      	cmp	r6, r3
    b634:	d21a      	bcs.n	b66c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b636:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b638:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b63a:	b29b      	uxth	r3, r3
			ticker_status =
    b63c:	493b      	ldr	r1, [pc, #236]	; (b72c <mayfly_xtal_stop_calc+0x22c>)
    b63e:	9105      	str	r1, [sp, #20]
    b640:	9302      	str	r3, [sp, #8]
    b642:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b646:	9506      	str	r5, [sp, #24]
    b648:	9004      	str	r0, [sp, #16]
    b64a:	9003      	str	r0, [sp, #12]
    b64c:	9001      	str	r0, [sp, #4]
    b64e:	9000      	str	r0, [sp, #0]
    b650:	2101      	movs	r1, #1
    b652:	f7fc fbeb 	bl	7e2c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b656:	f030 0302 	bics.w	r3, r0, #2
    b65a:	d007      	beq.n	b66c <mayfly_xtal_stop_calc+0x16c>
    b65c:	4b2c      	ldr	r3, [pc, #176]	; (b710 <mayfly_xtal_stop_calc+0x210>)
    b65e:	9301      	str	r3, [sp, #4]
    b660:	9300      	str	r3, [sp, #0]
    b662:	4a2c      	ldr	r2, [pc, #176]	; (b714 <mayfly_xtal_stop_calc+0x214>)
    b664:	4b2c      	ldr	r3, [pc, #176]	; (b718 <mayfly_xtal_stop_calc+0x218>)
    b666:	492d      	ldr	r1, [pc, #180]	; (b71c <mayfly_xtal_stop_calc+0x21c>)
    b668:	4831      	ldr	r0, [pc, #196]	; (b730 <mayfly_xtal_stop_calc+0x230>)
    b66a:	e76e      	b.n	b54a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    b66c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b66e:	2e00      	cmp	r6, #0
    b670:	d092      	beq.n	b598 <mayfly_xtal_stop_calc+0x98>
    b672:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b674:	2d00      	cmp	r5, #0
    b676:	d08f      	beq.n	b598 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b678:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b67a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b67c:	429a      	cmp	r2, r3
    b67e:	d18b      	bne.n	b598 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b680:	482c      	ldr	r0, [pc, #176]	; (b734 <mayfly_xtal_stop_calc+0x234>)
    b682:	b292      	uxth	r2, r2
    b684:	fba2 0100 	umull	r0, r1, r2, r0
    b688:	f240 1323 	movw	r3, #291	; 0x123
    b68c:	fb03 1102 	mla	r1, r3, r2, r1
    b690:	a31b      	add	r3, pc, #108	; (adr r3, b700 <mayfly_xtal_stop_calc+0x200>)
    b692:	e9d3 2300 	ldrd	r2, r3, [r3]
    b696:	f7f4 fdbd 	bl	214 <__aeabi_uldivmod>
    b69a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b69c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b6a0:	2200      	movs	r2, #0
    b6a2:	4298      	cmp	r0, r3
    b6a4:	d318      	bcc.n	b6d8 <mayfly_xtal_stop_calc+0x1d8>
    b6a6:	b102      	cbz	r2, b6aa <mayfly_xtal_stop_calc+0x1aa>
    b6a8:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b6aa:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b6ae:	2a00      	cmp	r2, #0
    b6b0:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b6b4:	da13      	bge.n	b6de <mayfly_xtal_stop_calc+0x1de>
    b6b6:	2a00      	cmp	r2, #0
    b6b8:	f6ff af6e 	blt.w	b598 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    b6bc:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b6be:	429c      	cmp	r4, r3
    b6c0:	f67f af6a 	bls.w	b598 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    b6c4:	4630      	mov	r0, r6
    b6c6:	f7fe faff 	bl	9cc8 <conn_update_req>
				if (status == 2) {
    b6ca:	2802      	cmp	r0, #2
    b6cc:	f47f af64 	bne.w	b598 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    b6d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b6d2:	f7fe faf9 	bl	9cc8 <conn_update_req>
    b6d6:	e75f      	b.n	b598 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    b6d8:	1a1b      	subs	r3, r3, r0
    b6da:	2201      	movs	r2, #1
    b6dc:	e7e1      	b.n	b6a2 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    b6de:	2a00      	cmp	r2, #0
    b6e0:	f6bf af5a 	bge.w	b598 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    b6e4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b6e6:	429c      	cmp	r4, r3
    b6e8:	f67f af56 	bls.w	b598 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    b6ec:	4628      	mov	r0, r5
    b6ee:	f7fe faeb 	bl	9cc8 <conn_update_req>
				if (status == 2) {
    b6f2:	2802      	cmp	r0, #2
    b6f4:	f47f af50 	bne.w	b598 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    b6f8:	980a      	ldr	r0, [sp, #40]	; 0x28
    b6fa:	e7ea      	b.n	b6d2 <mayfly_xtal_stop_calc+0x1d2>
    b6fc:	f3af 8000 	nop.w
    b700:	1afd498d 	.word	0x1afd498d
    b704:	00000007 	.word	0x00000007
    b708:	00009c25 	.word	0x00009c25
    b70c:	200008c0 	.word	0x200008c0
    b710:	00014b99 	.word	0x00014b99
    b714:	00015f55 	.word	0x00015f55
    b718:	000173eb 	.word	0x000173eb
    b71c:	00015fa4 	.word	0x00015fa4
    b720:	00018160 	.word	0x00018160
    b724:	00017e04 	.word	0x00017e04
    b728:	00017e2e 	.word	0x00017e2e
    b72c:	00009c29 	.word	0x00009c29
    b730:	000176a1 	.word	0x000176a1
    b734:	09ce5400 	.word	0x09ce5400

0000b738 <preempt_calc>:
{
    b738:	b570      	push	{r4, r5, r6, lr}
    b73a:	4614      	mov	r4, r2
    b73c:	460e      	mov	r6, r1
    b73e:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b740:	f7fc fc92 	bl	8068 <ticker_ticks_now_get>
	u32_t diff =
    b744:	4621      	mov	r1, r4
    b746:	f7fc fc91 	bl	806c <ticker_ticks_diff_get>
	diff += 3;
    b74a:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b74c:	2c09      	cmp	r4, #9
    b74e:	d90f      	bls.n	b770 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b750:	2100      	movs	r1, #0
    b752:	4608      	mov	r0, r1
    b754:	f7fe fdb2 	bl	a2bc <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b758:	4632      	mov	r2, r6
    b75a:	2100      	movs	r1, #0
    b75c:	4628      	mov	r0, r5
    b75e:	f7ff fe93 	bl	b488 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b762:	68ab      	ldr	r3, [r5, #8]
    b764:	441c      	add	r4, r3
		if (diff <
    b766:	2c26      	cmp	r4, #38	; 0x26
    b768:	d800      	bhi.n	b76c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b76a:	60ac      	str	r4, [r5, #8]
		return 1;
    b76c:	2001      	movs	r0, #1
}
    b76e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b770:	2000      	movs	r0, #0
    b772:	bd70      	pop	{r4, r5, r6, pc}

0000b774 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b774:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b776:	ad02      	add	r5, sp, #8
    b778:	4b10      	ldr	r3, [pc, #64]	; (b7bc <adv_scan_configure.constprop.30+0x48>)
    b77a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b77e:	4604      	mov	r4, r0
	radio_reset();
    b780:	f006 fdc0 	bl	12304 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b784:	2000      	movs	r0, #0
    b786:	f006 fde7 	bl	12358 <radio_tx_power_set>
	radio_isr_set(isr);
    b78a:	480d      	ldr	r0, [pc, #52]	; (b7c0 <adv_scan_configure.constprop.30+0x4c>)
    b78c:	f006 fd84 	bl	12298 <radio_isr_set>
	radio_phy_set(phy, flags);
    b790:	2101      	movs	r1, #1
    b792:	4620      	mov	r0, r4
    b794:	f006 fdd0 	bl	12338 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b798:	4628      	mov	r0, r5
    b79a:	f006 fdfb 	bl	12394 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b79e:	0062      	lsls	r2, r4, #1
    b7a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b7a4:	2125      	movs	r1, #37	; 0x25
    b7a6:	2008      	movs	r0, #8
    b7a8:	f006 fe0c 	bl	123c4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b7ac:	4905      	ldr	r1, [pc, #20]	; (b7c4 <adv_scan_configure.constprop.30+0x50>)
    b7ae:	f240 605b 	movw	r0, #1627	; 0x65b
    b7b2:	f006 fe97 	bl	124e4 <radio_crc_configure>
}
    b7b6:	b003      	add	sp, #12
    b7b8:	bd30      	pop	{r4, r5, pc}
    b7ba:	bf00      	nop
    b7bc:	8e89bed6 	.word	0x8e89bed6
    b7c0:	0000e721 	.word	0x0000e721
    b7c4:	00555555 	.word	0x00555555

0000b7c8 <event_scan>:
{
    b7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b7ca:	4b62      	ldr	r3, [pc, #392]	; (b954 <event_scan+0x18c>)
    b7cc:	7cda      	ldrb	r2, [r3, #19]
{
    b7ce:	b08d      	sub	sp, #52	; 0x34
    b7d0:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b7d2:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b7d6:	461c      	mov	r4, r3
    b7d8:	b172      	cbz	r2, b7f8 <event_scan+0x30>
    b7da:	4b5f      	ldr	r3, [pc, #380]	; (b958 <event_scan+0x190>)
    b7dc:	9301      	str	r3, [sp, #4]
    b7de:	9300      	str	r3, [sp, #0]
    b7e0:	4a5e      	ldr	r2, [pc, #376]	; (b95c <event_scan+0x194>)
    b7e2:	4b5f      	ldr	r3, [pc, #380]	; (b960 <event_scan+0x198>)
    b7e4:	495f      	ldr	r1, [pc, #380]	; (b964 <event_scan+0x19c>)
    b7e6:	4860      	ldr	r0, [pc, #384]	; (b968 <event_scan+0x1a0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b7e8:	f7f5 fbd0 	bl	f8c <printk>
    b7ec:	4040      	eors	r0, r0
    b7ee:	f380 8811 	msr	BASEPRI, r0
    b7f2:	f04f 0004 	mov.w	r0, #4
    b7f6:	df02      	svc	2
    b7f8:	7c1b      	ldrb	r3, [r3, #16]
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	2b06      	cmp	r3, #6
    b7fe:	d007      	beq.n	b810 <event_scan+0x48>
    b800:	4b55      	ldr	r3, [pc, #340]	; (b958 <event_scan+0x190>)
    b802:	9301      	str	r3, [sp, #4]
    b804:	9300      	str	r3, [sp, #0]
    b806:	4a55      	ldr	r2, [pc, #340]	; (b95c <event_scan+0x194>)
    b808:	4b55      	ldr	r3, [pc, #340]	; (b960 <event_scan+0x198>)
    b80a:	4956      	ldr	r1, [pc, #344]	; (b964 <event_scan+0x19c>)
    b80c:	4857      	ldr	r0, [pc, #348]	; (b96c <event_scan+0x1a4>)
    b80e:	e7eb      	b.n	b7e8 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    b810:	2202      	movs	r2, #2
    b812:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b814:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b816:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b818:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b81c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b81e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b822:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b824:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b828:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b82c:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b82e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b832:	f7ff ff9f 	bl	b774 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b836:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b83a:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b83e:	1c42      	adds	r2, r0, #1
    b840:	f362 0383 	bfi	r3, r2, #2, #2
    b844:	3025      	adds	r0, #37	; 0x25
    b846:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b84a:	f7ff fcc3 	bl	b1d4 <chan_set>
	if (_radio.scanner.chan == 3) {
    b84e:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b852:	f003 020c 	and.w	r2, r3, #12
    b856:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b858:	bf08      	it	eq
    b85a:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b85e:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b862:	bf08      	it	eq
    b864:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b868:	f006 fef6 	bl	12658 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b86c:	2300      	movs	r3, #0
    b86e:	4619      	mov	r1, r3
    b870:	461a      	mov	r2, r3
    b872:	4618      	mov	r0, r3
    b874:	f006 fe60 	bl	12538 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b878:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b87c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b880:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b884:	3008      	adds	r0, #8
    b886:	f006 fdcb 	bl	12420 <radio_pkt_rx_set>
	radio_rssi_measure();
    b88a:	f006 fe6d 	bl	12568 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b88e:	f006 f909 	bl	11aa4 <ctrl_rl_enabled>
    b892:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b896:	b340      	cbz	r0, b8ea <event_scan+0x122>
		struct ll_filter *filter =
    b898:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b89c:	f005 ff22 	bl	116e4 <ctrl_filter_get>
    b8a0:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b8a2:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b8a6:	f005 fe4d 	bl	11544 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b8aa:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b8ac:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b8ae:	1cb2      	adds	r2, r6, #2
    b8b0:	7830      	ldrb	r0, [r6, #0]
    b8b2:	f006 fe7b 	bl	125ac <radio_filter_configure>
		radio_ar_configure(count, irks);
    b8b6:	4639      	mov	r1, r7
    b8b8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b8bc:	f007 f850 	bl	12960 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b8c0:	68e2      	ldr	r2, [r4, #12]
    b8c2:	f105 0109 	add.w	r1, r5, #9
    b8c6:	2000      	movs	r0, #0
    b8c8:	f006 fed2 	bl	12670 <radio_tmr_start>
	radio_tmr_end_capture();
    b8cc:	f006 ffa0 	bl	12810 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b8d0:	2106      	movs	r1, #6
    b8d2:	462a      	mov	r2, r5
    b8d4:	4826      	ldr	r0, [pc, #152]	; (b970 <event_scan+0x1a8>)
    b8d6:	f7ff ff2f 	bl	b738 <preempt_calc>
    b8da:	4601      	mov	r1, r0
    b8dc:	b188      	cbz	r0, b902 <event_scan+0x13a>
		_radio.state = STATE_STOP;
    b8de:	2304      	movs	r3, #4
    b8e0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b8e2:	f006 fdc3 	bl	1246c <radio_disable>
}
    b8e6:	b00d      	add	sp, #52	; 0x34
    b8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b8ea:	f013 0f30 	tst.w	r3, #48	; 0x30
    b8ee:	d0e7      	beq.n	b8c0 <event_scan+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    b8f0:	2001      	movs	r0, #1
    b8f2:	f005 fef7 	bl	116e4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b8f6:	1c82      	adds	r2, r0, #2
    b8f8:	7841      	ldrb	r1, [r0, #1]
    b8fa:	7800      	ldrb	r0, [r0, #0]
    b8fc:	f006 fe56 	bl	125ac <radio_filter_configure>
    b900:	e7de      	b.n	b8c0 <event_scan+0xf8>
		ret = ticker_start(
    b902:	f641 1336 	movw	r3, #6454	; 0x1936
    b906:	9308      	str	r3, [sp, #32]
    b908:	4b1a      	ldr	r3, [pc, #104]	; (b974 <event_scan+0x1ac>)
    b90a:	9307      	str	r3, [sp, #28]
    b90c:	2204      	movs	r2, #4
    b90e:	4b1a      	ldr	r3, [pc, #104]	; (b978 <event_scan+0x1b0>)
    b910:	9206      	str	r2, [sp, #24]
    b912:	9305      	str	r3, [sp, #20]
    b914:	9004      	str	r0, [sp, #16]
    b916:	9003      	str	r0, [sp, #12]
    b918:	9002      	str	r0, [sp, #8]
    b91a:	9001      	str	r0, [sp, #4]
    b91c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b920:	3309      	adds	r3, #9
    b922:	9300      	str	r3, [sp, #0]
    b924:	462b      	mov	r3, r5
    b926:	f7fc fa31 	bl	7d8c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b92a:	f030 0302 	bics.w	r3, r0, #2
    b92e:	d007      	beq.n	b940 <event_scan+0x178>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b930:	4b09      	ldr	r3, [pc, #36]	; (b958 <event_scan+0x190>)
    b932:	9301      	str	r3, [sp, #4]
    b934:	9300      	str	r3, [sp, #0]
    b936:	4a09      	ldr	r2, [pc, #36]	; (b95c <event_scan+0x194>)
    b938:	4b09      	ldr	r3, [pc, #36]	; (b960 <event_scan+0x198>)
    b93a:	490a      	ldr	r1, [pc, #40]	; (b964 <event_scan+0x19c>)
    b93c:	480f      	ldr	r0, [pc, #60]	; (b97c <event_scan+0x1b4>)
    b93e:	e753      	b.n	b7e8 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b940:	4619      	mov	r1, r3
    b942:	4618      	mov	r0, r3
    b944:	4a0e      	ldr	r2, [pc, #56]	; (b980 <event_scan+0x1b8>)
    b946:	f7fc fb3d 	bl	7fc4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b94a:	f030 0302 	bics.w	r3, r0, #2
    b94e:	d1ef      	bne.n	b930 <event_scan+0x168>
    b950:	e7c9      	b.n	b8e6 <event_scan+0x11e>
    b952:	bf00      	nop
    b954:	200008c0 	.word	0x200008c0
    b958:	00014b99 	.word	0x00014b99
    b95c:	00015f55 	.word	0x00015f55
    b960:	000174ba 	.word	0x000174ba
    b964:	00015fa4 	.word	0x00015fa4
    b968:	000177bd 	.word	0x000177bd
    b96c:	000177f7 	.word	0x000177f7
    b970:	20000990 	.word	0x20000990
    b974:	0000ab8d 	.word	0x0000ab8d
    b978:	0000adfd 	.word	0x0000adfd
    b97c:	00017836 	.word	0x00017836
    b980:	0000ad75 	.word	0x0000ad75

0000b984 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b984:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b986:	4b05      	ldr	r3, [pc, #20]	; (b99c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b988:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b98a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b98c:	4611      	mov	r1, r2
    b98e:	4610      	mov	r0, r2
    b990:	f7fb fc3e 	bl	7210 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b994:	b108      	cbz	r0, b99a <event_stop.constprop.31+0x16>
    b996:	f7ff fa17 	bl	adc8 <event_stop.part.10>
    b99a:	bd08      	pop	{r3, pc}
    b99c:	20003d70 	.word	0x20003d70

0000b9a0 <event_common_prepare>:
{
    b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b9a4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b9a6:	681d      	ldr	r5, [r3, #0]
{
    b9a8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b9aa:	2c00      	cmp	r4, #0
{
    b9ac:	4681      	mov	r9, r0
    b9ae:	910b      	str	r1, [sp, #44]	; 0x2c
    b9b0:	4690      	mov	r8, r2
    b9b2:	469b      	mov	fp, r3
    b9b4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b9b8:	da03      	bge.n	b9c2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b9ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b9bc:	42ac      	cmp	r4, r5
    b9be:	bf38      	it	cc
    b9c0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b9c2:	42ac      	cmp	r4, r5
    b9c4:	4f56      	ldr	r7, [pc, #344]	; (bb20 <event_common_prepare+0x180>)
    b9c6:	d924      	bls.n	ba12 <event_common_prepare+0x72>
		ticker_status =
    b9c8:	f241 5374 	movw	r3, #5492	; 0x1574
    b9cc:	9308      	str	r3, [sp, #32]
    b9ce:	4b55      	ldr	r3, [pc, #340]	; (bb24 <event_common_prepare+0x184>)
    b9d0:	9305      	str	r3, [sp, #20]
    b9d2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b9d4:	1b63      	subs	r3, r4, r5
		ticker_status =
    b9d6:	9300      	str	r3, [sp, #0]
    b9d8:	9707      	str	r7, [sp, #28]
    b9da:	464b      	mov	r3, r9
    b9dc:	9106      	str	r1, [sp, #24]
    b9de:	9104      	str	r1, [sp, #16]
    b9e0:	9103      	str	r1, [sp, #12]
    b9e2:	9102      	str	r1, [sp, #8]
    b9e4:	9101      	str	r1, [sp, #4]
    b9e6:	2201      	movs	r2, #1
    b9e8:	4608      	mov	r0, r1
    b9ea:	f7fc f9cf 	bl	7d8c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9ee:	f030 0302 	bics.w	r3, r0, #2
    b9f2:	d034      	beq.n	ba5e <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9f4:	4b4c      	ldr	r3, [pc, #304]	; (bb28 <event_common_prepare+0x188>)
    b9f6:	9301      	str	r3, [sp, #4]
    b9f8:	9300      	str	r3, [sp, #0]
    b9fa:	4a4c      	ldr	r2, [pc, #304]	; (bb2c <event_common_prepare+0x18c>)
    b9fc:	4b4c      	ldr	r3, [pc, #304]	; (bb30 <event_common_prepare+0x190>)
    b9fe:	494d      	ldr	r1, [pc, #308]	; (bb34 <event_common_prepare+0x194>)
    ba00:	484d      	ldr	r0, [pc, #308]	; (bb38 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    ba02:	f7f5 fac3 	bl	f8c <printk>
    ba06:	4040      	eors	r0, r0
    ba08:	f380 8811 	msr	BASEPRI, r0
    ba0c:	f04f 0004 	mov.w	r0, #4
    ba10:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    ba12:	d21d      	bcs.n	ba50 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    ba14:	2300      	movs	r3, #0
    ba16:	461a      	mov	r2, r3
    ba18:	4619      	mov	r1, r3
    ba1a:	4618      	mov	r0, r3
    ba1c:	f7ff f9fe 	bl	ae1c <event_active>
		ticker_status =
    ba20:	f241 5389 	movw	r3, #5513	; 0x1589
    ba24:	2100      	movs	r1, #0
    ba26:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    ba28:	1b2c      	subs	r4, r5, r4
		ticker_status =
    ba2a:	4b44      	ldr	r3, [pc, #272]	; (bb3c <event_common_prepare+0x19c>)
    ba2c:	9305      	str	r3, [sp, #20]
    ba2e:	9707      	str	r7, [sp, #28]
    ba30:	464b      	mov	r3, r9
    ba32:	9106      	str	r1, [sp, #24]
    ba34:	9104      	str	r1, [sp, #16]
    ba36:	9103      	str	r1, [sp, #12]
    ba38:	9102      	str	r1, [sp, #8]
    ba3a:	9101      	str	r1, [sp, #4]
    ba3c:	9400      	str	r4, [sp, #0]
    ba3e:	2201      	movs	r2, #1
    ba40:	4608      	mov	r0, r1
    ba42:	f7fc f9a3 	bl	7d8c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba46:	f030 0302 	bics.w	r3, r0, #2
    ba4a:	d1d3      	bne.n	b9f4 <event_common_prepare+0x54>
    ba4c:	462c      	mov	r4, r5
    ba4e:	e00b      	b.n	ba68 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    ba50:	2300      	movs	r3, #0
    ba52:	461a      	mov	r2, r3
    ba54:	4619      	mov	r1, r3
    ba56:	4618      	mov	r0, r3
    ba58:	f7ff f9e0 	bl	ae1c <event_active>
		event_xtal(0, 0, 0, NULL);
    ba5c:	2300      	movs	r3, #0
    ba5e:	461a      	mov	r2, r3
    ba60:	4619      	mov	r1, r3
    ba62:	4618      	mov	r0, r3
    ba64:	f7ff fa00 	bl	ae68 <event_xtal>
	_radio.remainder_anchor = remainder;
    ba68:	4e35      	ldr	r6, [pc, #212]	; (bb40 <event_common_prepare+0x1a0>)
    ba6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ba6c:	60f3      	str	r3, [r6, #12]
	ticker_status =
    ba6e:	f241 53a1 	movw	r3, #5537	; 0x15a1
    ba72:	9308      	str	r3, [sp, #32]
    ba74:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba76:	9306      	str	r3, [sp, #24]
    ba78:	2200      	movs	r2, #0
    ba7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ba7c:	9305      	str	r3, [sp, #20]
    ba7e:	9707      	str	r7, [sp, #28]
    ba80:	464b      	mov	r3, r9
    ba82:	9204      	str	r2, [sp, #16]
    ba84:	9203      	str	r2, [sp, #12]
    ba86:	9202      	str	r2, [sp, #8]
    ba88:	9201      	str	r2, [sp, #4]
    ba8a:	9400      	str	r4, [sp, #0]
    ba8c:	4611      	mov	r1, r2
    ba8e:	4610      	mov	r0, r2
    ba90:	f7fc f97c 	bl	7d8c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba94:	f030 0302 	bics.w	r3, r0, #2
    ba98:	d1ac      	bne.n	b9f4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    ba9a:	2005      	movs	r0, #5
    ba9c:	f7ff ff72 	bl	b984 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    baa0:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    baa4:	429d      	cmp	r5, r3
    baa6:	d023      	beq.n	baf0 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    baa8:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    baac:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    bab0:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    bab2:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    bab4:	bfbc      	itt	lt
    bab6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    baba:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    babe:	f8d8 2000 	ldr.w	r2, [r8]
    bac2:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    bac6:	428a      	cmp	r2, r1
    bac8:	bf38      	it	cc
    baca:	460a      	movcc	r2, r1
		ticker_status =
    bacc:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    bad0:	b2a3      	uxth	r3, r4
    bad2:	b292      	uxth	r2, r2
		ticker_status =
    bad4:	9106      	str	r1, [sp, #24]
    bad6:	2100      	movs	r1, #0
    bad8:	9302      	str	r3, [sp, #8]
    bada:	9201      	str	r2, [sp, #4]
    badc:	9200      	str	r2, [sp, #0]
    bade:	9104      	str	r1, [sp, #16]
    bae0:	9103      	str	r1, [sp, #12]
    bae2:	4652      	mov	r2, sl
    bae4:	4608      	mov	r0, r1
    bae6:	f7fc f9a1 	bl	7e2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    baea:	f030 0302 	bics.w	r3, r0, #2
    baee:	d181      	bne.n	b9f4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    baf0:	20ff      	movs	r0, #255	; 0xff
    baf2:	f7ff fa85 	bl	b000 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    baf6:	4b13      	ldr	r3, [pc, #76]	; (bb44 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    baf8:	2201      	movs	r2, #1
    bafa:	4611      	mov	r1, r2
    bafc:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    bafe:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bb02:	f7fb fb85 	bl	7210 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bb06:	b138      	cbz	r0, bb18 <event_common_prepare+0x178>
    bb08:	4b07      	ldr	r3, [pc, #28]	; (bb28 <event_common_prepare+0x188>)
    bb0a:	9301      	str	r3, [sp, #4]
    bb0c:	9300      	str	r3, [sp, #0]
    bb0e:	4a07      	ldr	r2, [pc, #28]	; (bb2c <event_common_prepare+0x18c>)
    bb10:	4b07      	ldr	r3, [pc, #28]	; (bb30 <event_common_prepare+0x190>)
    bb12:	4908      	ldr	r1, [pc, #32]	; (bb34 <event_common_prepare+0x194>)
    bb14:	480c      	ldr	r0, [pc, #48]	; (bb48 <event_common_prepare+0x1a8>)
    bb16:	e774      	b.n	ba02 <event_common_prepare+0x62>
}
    bb18:	b00d      	add	sp, #52	; 0x34
    bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb1e:	bf00      	nop
    bb20:	0000ab8d 	.word	0x0000ab8d
    bb24:	0000ae1d 	.word	0x0000ae1d
    bb28:	00014b99 	.word	0x00014b99
    bb2c:	00015f55 	.word	0x00015f55
    bb30:	00017479 	.word	0x00017479
    bb34:	00015fa4 	.word	0x00015fa4
    bb38:	000176a1 	.word	0x000176a1
    bb3c:	0000ae69 	.word	0x0000ae69
    bb40:	200008c0 	.word	0x200008c0
    bb44:	20003e10 	.word	0x20003e10
    bb48:	00017ddb 	.word	0x00017ddb

0000bb4c <event_scan_prepare>:
{
    bb4c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bb4e:	4c25      	ldr	r4, [pc, #148]	; (bbe4 <event_scan_prepare+0x98>)
    bb50:	7c23      	ldrb	r3, [r4, #16]
{
    bb52:	b085      	sub	sp, #20
    bb54:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bb56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    bb5a:	b173      	cbz	r3, bb7a <event_scan_prepare+0x2e>
    bb5c:	4b22      	ldr	r3, [pc, #136]	; (bbe8 <event_scan_prepare+0x9c>)
    bb5e:	9301      	str	r3, [sp, #4]
    bb60:	9300      	str	r3, [sp, #0]
    bb62:	4a22      	ldr	r2, [pc, #136]	; (bbec <event_scan_prepare+0xa0>)
    bb64:	4b22      	ldr	r3, [pc, #136]	; (bbf0 <event_scan_prepare+0xa4>)
    bb66:	4923      	ldr	r1, [pc, #140]	; (bbf4 <event_scan_prepare+0xa8>)
    bb68:	4823      	ldr	r0, [pc, #140]	; (bbf8 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    bb6a:	f7f5 fa0f 	bl	f8c <printk>
    bb6e:	4040      	eors	r0, r0
    bb70:	f380 8811 	msr	BASEPRI, r0
    bb74:	f04f 0004 	mov.w	r0, #4
    bb78:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    bb7a:	2306      	movs	r3, #6
    bb7c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    bb7e:	9203      	str	r2, [sp, #12]
    bb80:	9301      	str	r3, [sp, #4]
    bb82:	4a1e      	ldr	r2, [pc, #120]	; (bbfc <event_scan_prepare+0xb0>)
    bb84:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    bb88:	9202      	str	r2, [sp, #8]
    bb8a:	9300      	str	r3, [sp, #0]
    bb8c:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    bb90:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    bb94:	f7ff ff04 	bl	b9a0 <event_common_prepare>
	if (_radio.scanner.conn) {
    bb98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    bb9c:	b303      	cbz	r3, bbe0 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    bb9e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    bba2:	2b00      	cmp	r3, #0
    bba4:	da0c      	bge.n	bbc0 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    bba6:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    bbaa:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    bbae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    bbb2:	4291      	cmp	r1, r2
    bbb4:	bf2c      	ite	cs
    bbb6:	ebc3 0301 	rsbcs	r3, r3, r1
    bbba:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    bbbe:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    bbc0:	4b0f      	ldr	r3, [pc, #60]	; (bc00 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbc2:	2201      	movs	r2, #1
    bbc4:	4611      	mov	r1, r2
    bbc6:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    bbc8:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bbca:	f7fb fb21 	bl	7210 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bbce:	b138      	cbz	r0, bbe0 <event_scan_prepare+0x94>
    bbd0:	4b05      	ldr	r3, [pc, #20]	; (bbe8 <event_scan_prepare+0x9c>)
    bbd2:	9301      	str	r3, [sp, #4]
    bbd4:	9300      	str	r3, [sp, #0]
    bbd6:	4a05      	ldr	r2, [pc, #20]	; (bbec <event_scan_prepare+0xa0>)
    bbd8:	4b05      	ldr	r3, [pc, #20]	; (bbf0 <event_scan_prepare+0xa4>)
    bbda:	4906      	ldr	r1, [pc, #24]	; (bbf4 <event_scan_prepare+0xa8>)
    bbdc:	4809      	ldr	r0, [pc, #36]	; (bc04 <event_scan_prepare+0xb8>)
    bbde:	e7c4      	b.n	bb6a <event_scan_prepare+0x1e>
}
    bbe0:	b005      	add	sp, #20
    bbe2:	bd30      	pop	{r4, r5, pc}
    bbe4:	200008c0 	.word	0x200008c0
    bbe8:	00014b99 	.word	0x00014b99
    bbec:	00015f55 	.word	0x00015f55
    bbf0:	000174a7 	.word	0x000174a7
    bbf4:	00015fa4 	.word	0x00015fa4
    bbf8:	00017f17 	.word	0x00017f17
    bbfc:	0000b7c9 	.word	0x0000b7c9
    bc00:	20003d90 	.word	0x20003d90
    bc04:	00017ddb 	.word	0x00017ddb

0000bc08 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    bc08:	4b02      	ldr	r3, [pc, #8]	; (bc14 <mayfly_xtal_start+0xc>)
    bc0a:	6818      	ldr	r0, [r3, #0]
    bc0c:	6843      	ldr	r3, [r0, #4]
    bc0e:	2100      	movs	r1, #0
    bc10:	681b      	ldr	r3, [r3, #0]
    bc12:	4718      	bx	r3
    bc14:	200008c0 	.word	0x200008c0

0000bc18 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    bc18:	4b02      	ldr	r3, [pc, #8]	; (bc24 <mayfly_xtal_stop+0xc>)
    bc1a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    bc1c:	6843      	ldr	r3, [r0, #4]
    bc1e:	2100      	movs	r1, #0
    bc20:	685b      	ldr	r3, [r3, #4]
    bc22:	4718      	bx	r3
    bc24:	200008c0 	.word	0x200008c0

0000bc28 <chan_sel_2>:
{
    bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    bc2a:	4048      	eors	r0, r1
    bc2c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bc2e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    bc32:	2608      	movs	r6, #8
	o = 0;
    bc34:	2400      	movs	r4, #0
		o |= (i & 1);
    bc36:	f00e 0501 	and.w	r5, lr, #1
    bc3a:	3e01      	subs	r6, #1
    bc3c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    bc40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    bc44:	b2ec      	uxtb	r4, r5
		i >>= 1;
    bc46:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bc4a:	d1f4      	bne.n	bc36 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bc4c:	0225      	lsls	r5, r4, #8
    bc4e:	b22d      	sxth	r5, r5
    bc50:	b2c0      	uxtb	r0, r0
    bc52:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    bc56:	4634      	mov	r4, r6
		o |= (i & 1);
    bc58:	f000 0601 	and.w	r6, r0, #1
    bc5c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    bc60:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    bc64:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    bc68:	b2e4      	uxtb	r4, r4
		i >>= 1;
    bc6a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bc6e:	d1f3      	bne.n	bc58 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bc70:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bc72:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    bc76:	3f01      	subs	r7, #1
    bc78:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    bc7a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bc7e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    bc80:	d1d5      	bne.n	bc2e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    bc82:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    bc84:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    bc86:	fbb1 f0f4 	udiv	r0, r1, r4
    bc8a:	fb04 1010 	mls	r0, r4, r0, r1
    bc8e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    bc90:	08c4      	lsrs	r4, r0, #3
    bc92:	f000 0507 	and.w	r5, r0, #7
    bc96:	5d14      	ldrb	r4, [r2, r4]
    bc98:	412c      	asrs	r4, r5
    bc9a:	07e4      	lsls	r4, r4, #31
    bc9c:	d407      	bmi.n	bcae <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    bc9e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    bca0:	f3c1 4107 	ubfx	r1, r1, #16, #8
    bca4:	4610      	mov	r0, r2
}
    bca6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    bcaa:	f7fd bfc9 	b.w	9c40 <chan_sel_remap>
}
    bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bcb0 <ctrl_tx_enqueue>:
{
    bcb0:	b510      	push	{r4, lr}
	    !conn->empty &&
    bcb2:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bcb6:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    bcba:	f014 0f80 	tst.w	r4, #128	; 0x80
    bcbe:	d118      	bne.n	bcf2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bcc0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    bcc4:	b1ab      	cbz	r3, bcf2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bcc6:	0724      	lsls	r4, r4, #28
    bcc8:	d413      	bmi.n	bcf2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    bcca:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    bcce:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    bcd0:	bf04      	itt	eq
    bcd2:	681c      	ldreq	r4, [r3, #0]
    bcd4:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    bcd8:	b992      	cbnz	r2, bd00 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    bcda:	681a      	ldr	r2, [r3, #0]
    bcdc:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    bcde:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    bce0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    bce4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    bce8:	680b      	ldr	r3, [r1, #0]
    bcea:	b90b      	cbnz	r3, bcf0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    bcec:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bcf0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    bcf2:	b92a      	cbnz	r2, bd00 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    bcf4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    bcf8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    bcfa:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    bcfe:	e7ef      	b.n	bce0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    bd00:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bd04:	681a      	ldr	r2, [r3, #0]
    bd06:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    bd08:	6019      	str	r1, [r3, #0]
    bd0a:	e7eb      	b.n	bce4 <ctrl_tx_enqueue+0x34>

0000bd0c <ctrl_tx_sec_enqueue>:
{
    bd0c:	b410      	push	{r4}
	if (conn->pause_tx) {
    bd0e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bd12:	0724      	lsls	r4, r4, #28
{
    bd14:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    bd16:	d50f      	bpl.n	bd38 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    bd18:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    bd1c:	b931      	cbnz	r1, bd2c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    bd1e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    bd22:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    bd24:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    bd28:	bc10      	pop	{r4}
    bd2a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    bd2c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bd30:	6819      	ldr	r1, [r3, #0]
    bd32:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    bd34:	601a      	str	r2, [r3, #0]
    bd36:	e7f7      	b.n	bd28 <ctrl_tx_sec_enqueue+0x1c>
}
    bd38:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    bd3a:	f7ff bfb9 	b.w	bcb0 <ctrl_tx_enqueue>
	...

0000bd40 <feature_rsp_send>:
{
    bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd42:	4f21      	ldr	r7, [pc, #132]	; (bdc8 <feature_rsp_send+0x88>)
{
    bd44:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd46:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    bd4a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd4c:	f7fb f995 	bl	707a <mem_acquire>
	if (!node_tx) {
    bd50:	4604      	mov	r4, r0
    bd52:	b3b0      	cbz	r0, bdc2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bd54:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    bd56:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bd58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bd5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    bd60:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    bd64:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    bd68:	f043 0310 	orr.w	r3, r3, #16
    bd6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    bd70:	79b1      	ldrb	r1, [r6, #6]
    bd72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bd76:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    bd7a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    bd7e:	400b      	ands	r3, r1
    bd80:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    bd84:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    bd88:	f043 0320 	orr.w	r3, r3, #32
    bd8c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd90:	7903      	ldrb	r3, [r0, #4]
    bd92:	f043 0303 	orr.w	r3, r3, #3
    bd96:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bd98:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    bd9a:	2309      	movs	r3, #9
    bd9c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    bd9e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bda0:	2100      	movs	r1, #0
    bda2:	4410      	add	r0, r2
    bda4:	f7f5 ff62 	bl	1c6c <memset>
		conn->llcp_features & 0xFF;
    bda8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    bdac:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    bdae:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    bdb0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    bdb2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    bdb4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    bdb6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    bdb8:	4621      	mov	r1, r4
    bdba:	f7ff ffa7 	bl	bd0c <ctrl_tx_sec_enqueue>
	return 0;
    bdbe:	2000      	movs	r0, #0
    bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    bdc2:	2001      	movs	r0, #1
}
    bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdc6:	bf00      	nop
    bdc8:	200008c0 	.word	0x200008c0

0000bdcc <start_enc_rsp_send>:
{
    bdcc:	b510      	push	{r4, lr}
    bdce:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    bdd0:	b9c9      	cbnz	r1, be06 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdd2:	480f      	ldr	r0, [pc, #60]	; (be10 <start_enc_rsp_send+0x44>)
    bdd4:	f7fb f951 	bl	707a <mem_acquire>
		if (!node_tx) {
    bdd8:	b1b8      	cbz	r0, be0a <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    bdda:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    bddc:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bde0:	f043 0320 	orr.w	r3, r3, #32
    bde4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bde8:	780b      	ldrb	r3, [r1, #0]
    bdea:	f043 0303 	orr.w	r3, r3, #3
    bdee:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bdf0:	2301      	movs	r3, #1
    bdf2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    bdf4:	2306      	movs	r3, #6
    bdf6:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    bdf8:	b140      	cbz	r0, be0c <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    bdfa:	4601      	mov	r1, r0
    bdfc:	4620      	mov	r0, r4
    bdfe:	f7ff ff57 	bl	bcb0 <ctrl_tx_enqueue>
	return 0;
    be02:	2000      	movs	r0, #0
    be04:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    be06:	2000      	movs	r0, #0
    be08:	e7e8      	b.n	bddc <start_enc_rsp_send+0x10>
			return 1;
    be0a:	2001      	movs	r0, #1
}
    be0c:	bd10      	pop	{r4, pc}
    be0e:	bf00      	nop
    be10:	20000a1c 	.word	0x20000a1c

0000be14 <reject_ext_ind_send>:
{
    be14:	b570      	push	{r4, r5, r6, lr}
    be16:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be18:	480b      	ldr	r0, [pc, #44]	; (be48 <reject_ext_ind_send+0x34>)
{
    be1a:	460e      	mov	r6, r1
    be1c:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be1e:	f7fb f92c 	bl	707a <mem_acquire>
	if (!node_tx) {
    be22:	b178      	cbz	r0, be44 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be24:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    be26:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be28:	f043 0303 	orr.w	r3, r3, #3
    be2c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    be2e:	2303      	movs	r3, #3
    be30:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    be32:	2311      	movs	r3, #17
    be34:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    be36:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    be38:	4601      	mov	r1, r0
    be3a:	4620      	mov	r0, r4
    be3c:	f7ff ff38 	bl	bcb0 <ctrl_tx_enqueue>
	return 0;
    be40:	2000      	movs	r0, #0
    be42:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    be44:	2001      	movs	r0, #1
}
    be46:	bd70      	pop	{r4, r5, r6, pc}
    be48:	20000a1c 	.word	0x20000a1c
    be4c:	00000000 	.word	0x00000000

0000be50 <event_connection_prepare>:
{
    be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    be54:	4db8      	ldr	r5, [pc, #736]	; (c138 <event_connection_prepare+0x2e8>)
{
    be56:	b08f      	sub	sp, #60	; 0x3c
    be58:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    be5a:	7c2b      	ldrb	r3, [r5, #16]
{
    be5c:	910c      	str	r1, [sp, #48]	; 0x30
    be5e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    be60:	b173      	cbz	r3, be80 <event_connection_prepare+0x30>
    be62:	4bb6      	ldr	r3, [pc, #728]	; (c13c <event_connection_prepare+0x2ec>)
    be64:	9301      	str	r3, [sp, #4]
    be66:	9300      	str	r3, [sp, #0]
    be68:	4ab5      	ldr	r2, [pc, #724]	; (c140 <event_connection_prepare+0x2f0>)
    be6a:	4bb6      	ldr	r3, [pc, #728]	; (c144 <event_connection_prepare+0x2f4>)
    be6c:	49b6      	ldr	r1, [pc, #728]	; (c148 <event_connection_prepare+0x2f8>)
    be6e:	48b7      	ldr	r0, [pc, #732]	; (c14c <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    be70:	f7f5 f88c 	bl	f8c <printk>
    be74:	4040      	eors	r0, r0
    be76:	f380 8811 	msr	BASEPRI, r0
    be7a:	f04f 0004 	mov.w	r0, #4
    be7e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    be80:	f894 3020 	ldrb.w	r3, [r4, #32]
    be84:	3307      	adds	r3, #7
    be86:	b2db      	uxtb	r3, r3
    be88:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    be8a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    be8e:	2b00      	cmp	r3, #0
    be90:	da09      	bge.n	bea6 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    be92:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    be94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    be96:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    be9a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    be9c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    be9e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    bea0:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    bea2:	bf88      	it	hi
    bea4:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    bea6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bea8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    beac:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    beae:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    beb0:	b292      	uxth	r2, r2
    beb2:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    beb4:	4432      	add	r2, r6
    beb6:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    beb8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bebc:	429a      	cmp	r2, r3
    bebe:	f040 81ba 	bne.w	c236 <event_connection_prepare+0x3e6>
    bec2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bec6:	075f      	lsls	r7, r3, #29
    bec8:	f100 84ab 	bmi.w	c822 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    becc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bed0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bed4:	429a      	cmp	r2, r3
    bed6:	f000 8096 	beq.w	c006 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    beda:	2005      	movs	r0, #5
    bedc:	f7ff fd52 	bl	b984 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    bee0:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bee4:	b113      	cbz	r3, beec <event_connection_prepare+0x9c>
    bee6:	429c      	cmp	r4, r3
    bee8:	f040 808d 	bne.w	c006 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    beec:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bef0:	f003 0307 	and.w	r3, r3, #7
    bef4:	2b05      	cmp	r3, #5
    bef6:	f200 815d 	bhi.w	c1b4 <event_connection_prepare+0x364>
    befa:	e8df f013 	tbh	[pc, r3, lsl #1]
    befe:	0006      	.short	0x0006
    bf00:	01310065 	.word	0x01310065
    bf04:	00840084 	.word	0x00840084
    bf08:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf0a:	4891      	ldr	r0, [pc, #580]	; (c150 <event_connection_prepare+0x300>)
    bf0c:	f7fb f8b5 	bl	707a <mem_acquire>
	if (!node_tx) {
    bf10:	4607      	mov	r7, r0
    bf12:	2800      	cmp	r0, #0
    bf14:	d077      	beq.n	c006 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    bf16:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bf1a:	2204      	movs	r2, #4
    bf1c:	f362 0302 	bfi	r3, r2, #0, #3
    bf20:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf24:	7903      	ldrb	r3, [r0, #4]
    bf26:	f043 0303 	orr.w	r3, r3, #3
    bf2a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bf2c:	2318      	movs	r3, #24
    bf2e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bf30:	230f      	movs	r3, #15
    bf32:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    bf34:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bf38:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    bf3a:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    bf3c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bf40:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    bf42:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bf46:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    bf48:	2300      	movs	r3, #0
    bf4a:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    bf4c:	74c3      	strb	r3, [r0, #19]
    bf4e:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    bf50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf54:	7543      	strb	r3, [r0, #21]
    bf56:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    bf58:	75c3      	strb	r3, [r0, #23]
    bf5a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bf5c:	7643      	strb	r3, [r0, #25]
    bf5e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bf60:	76c3      	strb	r3, [r0, #27]
    bf62:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    bf64:	7743      	strb	r3, [r0, #29]
    bf66:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    bf68:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bf6c:	4601      	mov	r1, r0
    bf6e:	4620      	mov	r0, r4
    bf70:	f7ff fe9e 	bl	bcb0 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bf74:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    bf76:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bf7a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bf7e:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    bf80:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    bf84:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bf88:	da0b      	bge.n	bfa2 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    bf8a:	68a3      	ldr	r3, [r4, #8]
    bf8c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bf8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bf92:	428b      	cmp	r3, r1
    bf94:	bf2c      	ite	cs
    bf96:	4443      	addcs	r3, r8
    bf98:	eb08 0301 	addcc.w	r3, r8, r1
    bf9c:	1a9b      	subs	r3, r3, r2
    bf9e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bfa2:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    bfa4:	4b6b      	ldr	r3, [pc, #428]	; (c154 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    bfa6:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bfaa:	2201      	movs	r2, #1
    bfac:	4611      	mov	r1, r2
    bfae:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bfb0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bfb2:	f7fb f92d 	bl	7210 <mayfly_enqueue>
		LL_ASSERT(!retval);
    bfb6:	b330      	cbz	r0, c006 <event_connection_prepare+0x1b6>
    bfb8:	4b60      	ldr	r3, [pc, #384]	; (c13c <event_connection_prepare+0x2ec>)
    bfba:	9301      	str	r3, [sp, #4]
    bfbc:	9300      	str	r3, [sp, #0]
    bfbe:	4b66      	ldr	r3, [pc, #408]	; (c158 <event_connection_prepare+0x308>)
    bfc0:	4a5f      	ldr	r2, [pc, #380]	; (c140 <event_connection_prepare+0x2f0>)
    bfc2:	4961      	ldr	r1, [pc, #388]	; (c148 <event_connection_prepare+0x2f8>)
    bfc4:	4865      	ldr	r0, [pc, #404]	; (c15c <event_connection_prepare+0x30c>)
    bfc6:	e753      	b.n	be70 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    bfc8:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bfcc:	b397      	cbz	r7, c034 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bfce:	4860      	ldr	r0, [pc, #384]	; (c150 <event_connection_prepare+0x300>)
    bfd0:	f7fb f853 	bl	707a <mem_acquire>
		if (!node_tx) {
    bfd4:	4601      	mov	r1, r0
    bfd6:	b1b0      	cbz	r0, c006 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bfd8:	7903      	ldrb	r3, [r0, #4]
    bfda:	f043 0303 	orr.w	r3, r3, #3
    bfde:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bfe0:	2311      	movs	r3, #17
    bfe2:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bfe4:	2303      	movs	r3, #3
    bfe6:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bfe8:	230f      	movs	r3, #15
    bfea:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bfec:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bff0:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bff2:	4620      	mov	r0, r4
    bff4:	f7ff fe5c 	bl	bcb0 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bff8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bffc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    c000:	2300      	movs	r3, #0
    c002:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c006:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    c00a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    c00e:	429a      	cmp	r2, r3
    c010:	f000 810a 	beq.w	c228 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    c014:	2005      	movs	r0, #5
    c016:	f7ff fcb5 	bl	b984 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    c01a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c01e:	f003 0203 	and.w	r2, r3, #3
    c022:	2a03      	cmp	r2, #3
    c024:	f200 8179 	bhi.w	c31a <event_connection_prepare+0x4ca>
    c028:	e8df f012 	tbh	[pc, r2, lsl #1]
    c02c:	00fe00cc 	.word	0x00fe00cc
    c030:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    c034:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c038:	2b00      	cmp	r3, #0
    c03a:	db3b      	blt.n	c0b4 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    c03c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    c040:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c044:	428b      	cmp	r3, r1
    c046:	d1de      	bne.n	c006 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c048:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    c04c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c050:	2205      	movs	r2, #5
    c052:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    c056:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c05a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    c05e:	2301      	movs	r3, #1
    c060:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    c064:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    c068:	b122      	cbz	r2, c074 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    c06a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    c06e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    c070:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    c074:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    c078:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c07c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    c080:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c084:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    c088:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c08c:	2202      	movs	r2, #2
    c08e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    c092:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    c096:	f082 0208 	eor.w	r2, r2, #8
    c09a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c09e:	f362 0382 	bfi	r3, r2, #2, #1
    c0a2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    c0a6:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    c0a8:	2301      	movs	r3, #1
    c0aa:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c0ae:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    c0b2:	e7a8      	b.n	c006 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0b4:	4826      	ldr	r0, [pc, #152]	; (c150 <event_connection_prepare+0x300>)
    c0b6:	f7fa ffe0 	bl	707a <mem_acquire>
	if (!node_tx) {
    c0ba:	4601      	mov	r1, r0
    c0bc:	2800      	cmp	r0, #0
    c0be:	d0a2      	beq.n	c006 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c0c0:	7903      	ldrb	r3, [r0, #4]
    c0c2:	f043 0303 	orr.w	r3, r3, #3
    c0c6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    c0c8:	2318      	movs	r3, #24
    c0ca:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    c0cc:	2310      	movs	r3, #16
    c0ce:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    c0d0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c0d4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    c0d6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    c0d8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c0dc:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    c0de:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c0e2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    c0e4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    c0e8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c0ea:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c0ee:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c0f2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c0f6:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c0fa:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c0fe:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c102:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c106:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c10a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c10e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c112:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c116:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c11a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c11e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c122:	4620      	mov	r0, r4
    c124:	f7ff fdc4 	bl	bcb0 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c128:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c12c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c130:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c134:	e767      	b.n	c006 <event_connection_prepare+0x1b6>
    c136:	bf00      	nop
    c138:	200008c0 	.word	0x200008c0
    c13c:	00014b99 	.word	0x00014b99
    c140:	00015f55 	.word	0x00015f55
    c144:	00017560 	.word	0x00017560
    c148:	00015fa4 	.word	0x00015fa4
    c14c:	00017f17 	.word	0x00017f17
    c150:	20000a1c 	.word	0x20000a1c
    c154:	20003db0 	.word	0x20003db0
    c158:	000174fc 	.word	0x000174fc
    c15c:	00017ddb 	.word	0x00017ddb
	if (conn->pause_tx) {
    c160:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c164:	0718      	lsls	r0, r3, #28
    c166:	f53f af4e 	bmi.w	c006 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    c16a:	2002      	movs	r0, #2
    c16c:	f7fd fd9a 	bl	9ca4 <packet_rx_reserve_get>
	if (!node_rx) {
    c170:	2800      	cmp	r0, #0
    c172:	f43f af48 	beq.w	c006 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c176:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c17a:	2203      	movs	r2, #3
    c17c:	f362 0302 	bfi	r3, r2, #0, #3
    c180:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c184:	8c23      	ldrh	r3, [r4, #32]
    c186:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c188:	2301      	movs	r3, #1
    c18a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c18c:	7a03      	ldrb	r3, [r0, #8]
    c18e:	4313      	orrs	r3, r2
    c190:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c192:	2318      	movs	r3, #24
    c194:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c196:	230f      	movs	r3, #15
    c198:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c19a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c19e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c1a0:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c1a2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c1a6:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c1a8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c1ac:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c1ae:	f7fe fbe3 	bl	a978 <packet_rx_enqueue>
    c1b2:	e728      	b.n	c006 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    c1b4:	4bb9      	ldr	r3, [pc, #740]	; (c49c <event_connection_prepare+0x64c>)
    c1b6:	9301      	str	r3, [sp, #4]
    c1b8:	9300      	str	r3, [sp, #0]
    c1ba:	4bb9      	ldr	r3, [pc, #740]	; (c4a0 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
    c1bc:	4ab9      	ldr	r2, [pc, #740]	; (c4a4 <event_connection_prepare+0x654>)
    c1be:	49ba      	ldr	r1, [pc, #744]	; (c4a8 <event_connection_prepare+0x658>)
    c1c0:	48ba      	ldr	r0, [pc, #744]	; (c4ac <event_connection_prepare+0x65c>)
    c1c2:	e655      	b.n	be70 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c1c4:	48ba      	ldr	r0, [pc, #744]	; (c4b0 <event_connection_prepare+0x660>)
    c1c6:	f7fa ff58 	bl	707a <mem_acquire>
		if (!node_tx) {
    c1ca:	4601      	mov	r1, r0
    c1cc:	b360      	cbz	r0, c228 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c1ce:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c1d2:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c1d6:	2201      	movs	r2, #1
    c1d8:	f362 0301 	bfi	r3, r2, #0, #2
    c1dc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c1e0:	b2db      	uxtb	r3, r3
    c1e2:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c1e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c1ea:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c1ee:	f363 07c5 	bfi	r7, r3, #3, #3
    c1f2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c1f6:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c1fa:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c1fe:	f367 1286 	bfi	r2, r7, #6, #1
    c202:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c206:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c208:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c20a:	f042 0203 	orr.w	r2, r2, #3
    c20e:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c210:	2203      	movs	r2, #3
    c212:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c214:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c216:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c218:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c21a:	4620      	mov	r0, r4
    c21c:	f7ff fd48 	bl	bcb0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c220:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c224:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c228:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c22c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c230:	429a      	cmp	r2, r3
    c232:	f000 82f6 	beq.w	c822 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c236:	2005      	movs	r0, #5
    c238:	f7ff fba4 	bl	b984 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c23c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c240:	3b01      	subs	r3, #1
    c242:	2b07      	cmp	r3, #7
    c244:	f200 85a7 	bhi.w	cd96 <event_connection_prepare+0xf46>
    c248:	e8df f013 	tbh	[pc, r3, lsl #1]
    c24c:	02c4006c 	.word	0x02c4006c
    c250:	045e0343 	.word	0x045e0343
    c254:	05a5048e 	.word	0x05a5048e
    c258:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c25c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c260:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c264:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c268:	0791      	lsls	r1, r2, #30
    c26a:	d544      	bpl.n	c2f6 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    c26c:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c26e:	f362 0384 	bfi	r3, r2, #2, #3
    c272:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c276:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c27a:	095a      	lsrs	r2, r3, #5
    c27c:	0790      	lsls	r0, r2, #30
    c27e:	d543      	bpl.n	c308 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    c280:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c282:	f362 1347 	bfi	r3, r2, #5, #3
    c286:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c28a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    c28e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c292:	f3c2 0182 	ubfx	r1, r2, #2, #3
    c296:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c29a:	428b      	cmp	r3, r1
    c29c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    c2a0:	bf14      	ite	ne
    c2a2:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    c2a6:	f36f 0384 	bfceq	r3, #2, #3
    c2aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c2ae:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c2b2:	0952      	lsrs	r2, r2, #5
    c2b4:	f003 0307 	and.w	r3, r3, #7
    c2b8:	4293      	cmp	r3, r2
    c2ba:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c2be:	bf14      	ite	ne
    c2c0:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c2c4:	f36f 1347 	bfceq	r3, #5, #3
    c2c8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c2cc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c2d0:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c2d4:	f043 0301 	orr.w	r3, r3, #1
    c2d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c2dc:	f362 0341 	bfi	r3, r2, #1, #1
    c2e0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c2e4:	2308      	movs	r3, #8
    c2e6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c2ea:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c2ee:	3b01      	subs	r3, #1
    c2f0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c2f4:	e798      	b.n	c228 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c2f6:	07d7      	lsls	r7, r2, #31
    c2f8:	d501      	bpl.n	c2fe <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    c2fa:	2201      	movs	r2, #1
    c2fc:	e7b7      	b.n	c26e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c2fe:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c302:	bf18      	it	ne
    c304:	2204      	movne	r2, #4
    c306:	e7b2      	b.n	c26e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c308:	07d1      	lsls	r1, r2, #31
    c30a:	d501      	bpl.n	c310 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    c30c:	2201      	movs	r2, #1
    c30e:	e7b8      	b.n	c282 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c310:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c314:	bf18      	it	ne
    c316:	2204      	movne	r2, #4
    c318:	e7b3      	b.n	c282 <event_connection_prepare+0x432>
		LL_ASSERT(0);
    c31a:	4b60      	ldr	r3, [pc, #384]	; (c49c <event_connection_prepare+0x64c>)
    c31c:	9301      	str	r3, [sp, #4]
    c31e:	9300      	str	r3, [sp, #0]
    c320:	4b64      	ldr	r3, [pc, #400]	; (c4b4 <event_connection_prepare+0x664>)
    c322:	e74b      	b.n	c1bc <event_connection_prepare+0x36c>
	if (!conn_upd) {
    c324:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c328:	b90b      	cbnz	r3, c32e <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    c32a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c32e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c332:	f013 0303 	ands.w	r3, r3, #3
    c336:	d068      	beq.n	c40a <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c338:	485d      	ldr	r0, [pc, #372]	; (c4b0 <event_connection_prepare+0x660>)
    c33a:	f7fa fe9e 	bl	707a <mem_acquire>
		if (!node_tx) {
    c33e:	4607      	mov	r7, r0
    c340:	2800      	cmp	r0, #0
    c342:	f000 826e 	beq.w	c822 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
    c346:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c34a:	f003 0303 	and.w	r3, r3, #3
    c34e:	2b01      	cmp	r3, #1
    c350:	d059      	beq.n	c406 <event_connection_prepare+0x5b6>
    c352:	2b02      	cmp	r3, #2
    c354:	d152      	bne.n	c3fc <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    c356:	4a58      	ldr	r2, [pc, #352]	; (c4b8 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c358:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c35c:	f36f 0301 	bfc	r3, #0, #2
    c360:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c364:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c366:	3306      	adds	r3, #6
    c368:	4433      	add	r3, r6
    c36a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c36c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c370:	7939      	ldrb	r1, [r7, #4]
    c372:	f041 0103 	orr.w	r1, r1, #3
    c376:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c378:	210c      	movs	r1, #12
    c37a:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c37c:	2100      	movs	r1, #0
    c37e:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c380:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c384:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c386:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c38a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c38e:	fbb1 f1f0 	udiv	r1, r1, r0
    c392:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c396:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c39a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c39e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c3a2:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c3a6:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c3aa:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c3ae:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c3b2:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c3b4:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c3b8:	2900      	cmp	r1, #0
    c3ba:	da0b      	bge.n	c3d4 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    c3bc:	68a3      	ldr	r3, [r4, #8]
    c3be:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c3c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c3c4:	4283      	cmp	r3, r0
    c3c6:	bf2c      	ite	cs
    c3c8:	4443      	addcs	r3, r8
    c3ca:	eb08 0300 	addcc.w	r3, r8, r0
    c3ce:	1a5b      	subs	r3, r3, r1
    c3d0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c3d4:	f107 0309 	add.w	r3, r7, #9
    c3d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c3dc:	4b37      	ldr	r3, [pc, #220]	; (c4bc <event_connection_prepare+0x66c>)
    c3de:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c3e0:	2201      	movs	r2, #1
    c3e2:	4611      	mov	r1, r2
    c3e4:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c3e6:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c3e8:	f7fa ff12 	bl	7210 <mayfly_enqueue>
		LL_ASSERT(!retval);
    c3ec:	2800      	cmp	r0, #0
    c3ee:	f000 8214 	beq.w	c81a <event_connection_prepare+0x9ca>
    c3f2:	4b2a      	ldr	r3, [pc, #168]	; (c49c <event_connection_prepare+0x64c>)
    c3f4:	9301      	str	r3, [sp, #4]
    c3f6:	9300      	str	r3, [sp, #0]
    c3f8:	4b31      	ldr	r3, [pc, #196]	; (c4c0 <event_connection_prepare+0x670>)
    c3fa:	e5e1      	b.n	bfc0 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    c3fc:	4b27      	ldr	r3, [pc, #156]	; (c49c <event_connection_prepare+0x64c>)
    c3fe:	9301      	str	r3, [sp, #4]
    c400:	9300      	str	r3, [sp, #0]
    c402:	4b30      	ldr	r3, [pc, #192]	; (c4c4 <event_connection_prepare+0x674>)
    c404:	e6da      	b.n	c1bc <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c406:	4a30      	ldr	r2, [pc, #192]	; (c4c8 <event_connection_prepare+0x678>)
    c408:	e7a6      	b.n	c358 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c40a:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c40e:	1bf7      	subs	r7, r6, r7
    c410:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c412:	043a      	lsls	r2, r7, #16
    c414:	f100 8205 	bmi.w	c822 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c418:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c41c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c420:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c424:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c428:	428a      	cmp	r2, r1
    c42a:	d009      	beq.n	c440 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c42c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c430:	f002 0207 	and.w	r2, r2, #7
    c434:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c436:	bf04      	itt	eq
    c438:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c43c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c440:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c444:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c446:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c448:	bf08      	it	eq
    c44a:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c44e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c450:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c452:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c456:	429a      	cmp	r2, r3
    c458:	d114      	bne.n	c484 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
    c45a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c45e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c460:	4299      	cmp	r1, r3
    c462:	d10f      	bne.n	c484 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c464:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c468:	435a      	muls	r2, r3
    c46a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c46e:	f242 7110 	movw	r1, #10000	; 0x2710
    c472:	fb01 2303 	mla	r3, r1, r3, r2
    c476:	3b01      	subs	r3, #1
    c478:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c47c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c47e:	b29b      	uxth	r3, r3
    c480:	429a      	cmp	r2, r3
    c482:	d036      	beq.n	c4f2 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
    c484:	2002      	movs	r0, #2
    c486:	f7fd fc0d 	bl	9ca4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c48a:	bb08      	cbnz	r0, c4d0 <event_connection_prepare+0x680>
    c48c:	4b03      	ldr	r3, [pc, #12]	; (c49c <event_connection_prepare+0x64c>)
    c48e:	9301      	str	r3, [sp, #4]
    c490:	9300      	str	r3, [sp, #0]
    c492:	4b0c      	ldr	r3, [pc, #48]	; (c4c4 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
    c494:	4a03      	ldr	r2, [pc, #12]	; (c4a4 <event_connection_prepare+0x654>)
    c496:	4904      	ldr	r1, [pc, #16]	; (c4a8 <event_connection_prepare+0x658>)
    c498:	480c      	ldr	r0, [pc, #48]	; (c4cc <event_connection_prepare+0x67c>)
    c49a:	e4e9      	b.n	be70 <event_connection_prepare+0x20>
    c49c:	00014b99 	.word	0x00014b99
    c4a0:	00017511 	.word	0x00017511
    c4a4:	00015f55 	.word	0x00015f55
    c4a8:	00015fa4 	.word	0x00015fa4
    c4ac:	00015ec9 	.word	0x00015ec9
    c4b0:	20000a1c 	.word	0x20000a1c
    c4b4:	00017536 	.word	0x00017536
    c4b8:	0000a6c9 	.word	0x0000a6c9
    c4bc:	20003da0 	.word	0x20003da0
    c4c0:	000174c5 	.word	0x000174c5
    c4c4:	000174d9 	.word	0x000174d9
    c4c8:	0000b3b1 	.word	0x0000b3b1
    c4cc:	00017d07 	.word	0x00017d07
			node_rx->hdr.handle = conn->handle;
    c4d0:	8c23      	ldrh	r3, [r4, #32]
    c4d2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c4d4:	2308      	movs	r3, #8
    c4d6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c4d8:	2300      	movs	r3, #0
    c4da:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c4dc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c4e0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c4e2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c4e6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c4e8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c4ec:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c4ee:	f7fe fa43 	bl	a978 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c4f2:	6823      	ldr	r3, [r4, #0]
    c4f4:	6866      	ldr	r6, [r4, #4]
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	da09      	bge.n	c50e <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
    c4fa:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c4fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c500:	42b0      	cmp	r0, r6
    c502:	bf2c      	ite	cs
    c504:	4480      	addcs	r8, r0
    c506:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c508:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c50a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c50e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c510:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c514:	49a0      	ldr	r1, [pc, #640]	; (c798 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c516:	fb13 f307 	smulbb	r3, r3, r7
    c51a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c51c:	fbb3 f2fa 	udiv	r2, r3, sl
    c520:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c524:	fb1a f009 	smulbb	r0, sl, r9
    c528:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c52a:	4283      	cmp	r3, r0
    c52c:	f080 80bf 	bcs.w	c6ae <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c530:	1ac0      	subs	r0, r0, r3
    c532:	f240 1223 	movw	r2, #291	; 0x123
    c536:	4342      	muls	r2, r0
    c538:	17c3      	asrs	r3, r0, #31
    c53a:	fb01 2303 	mla	r3, r1, r3, r2
    c53e:	fba0 0101 	umull	r0, r1, r0, r1
    c542:	4419      	add	r1, r3
    c544:	a392      	add	r3, pc, #584	; (adr r3, c790 <event_connection_prepare+0x940>)
    c546:	e9d3 2300 	ldrd	r2, r3, [r3]
    c54a:	f7f3 fe63 	bl	214 <__aeabi_uldivmod>
    c54e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c552:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c556:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c558:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c55a:	f8df b274 	ldr.w	fp, [pc, #628]	; c7d0 <event_connection_prepare+0x980>
    c55e:	1bdb      	subs	r3, r3, r7
    c560:	444b      	add	r3, r9
    c562:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c564:	6823      	ldr	r3, [r4, #0]
    c566:	42b3      	cmp	r3, r6
    c568:	bf38      	it	cc
    c56a:	4633      	movcc	r3, r6
    c56c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c56e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c572:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c576:	2b00      	cmp	r3, #0
    c578:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c57c:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c57e:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c582:	f280 80a5 	bge.w	c6d0 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
    c586:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c588:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c58a:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c58e:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c592:	4a82      	ldr	r2, [pc, #520]	; (c79c <event_connection_prepare+0x94c>)
    c594:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c598:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c59c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c5a4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c5a8:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c5aa:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c5ac:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c5b0:	4b7b      	ldr	r3, [pc, #492]	; (c7a0 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
    c5b2:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c5b6:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c5ba:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c5be:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c5c0:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c5c4:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c5c6:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c5c8:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c5ca:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c5cc:	429f      	cmp	r7, r3
    c5ce:	bf94      	ite	ls
    c5d0:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c5d2:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c5d4:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c5d6:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c5d8:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c5da:	fba0 010b 	umull	r0, r1, r0, fp
    c5de:	a36c      	add	r3, pc, #432	; (adr r3, c790 <event_connection_prepare+0x940>)
    c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5e4:	f7f3 fe16 	bl	214 <__aeabi_uldivmod>
    c5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ea:	1a1b      	subs	r3, r3, r0
    c5ec:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c5f0:	fbb3 f0f8 	udiv	r0, r3, r8
    c5f4:	fb08 f000 	mul.w	r0, r8, r0
    c5f8:	a365      	add	r3, pc, #404	; (adr r3, c790 <event_connection_prepare+0x940>)
    c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5fe:	fba0 010b 	umull	r0, r1, r0, fp
    c602:	f7f3 fe07 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c606:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c608:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c60c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c610:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c614:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c616:	f242 7110 	movw	r1, #10000	; 0x2710
    c61a:	fb01 6303 	mla	r3, r1, r3, r6
    c61e:	3b01      	subs	r3, #1
    c620:	fbb3 f3f6 	udiv	r3, r3, r6
    c624:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c626:	4b5f      	ldr	r3, [pc, #380]	; (c7a4 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c628:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c62c:	4433      	add	r3, r6
    c62e:	fbb3 f3f6 	udiv	r3, r3, r6
    c632:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c636:	4b5c      	ldr	r3, [pc, #368]	; (c7a8 <event_connection_prepare+0x958>)
    c638:	4433      	add	r3, r6
    c63a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c63e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c640:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c642:	4299      	cmp	r1, r3
    c644:	bfc4      	itt	gt
    c646:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c64a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c64c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c650:	bfc8      	it	gt
    c652:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c654:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c658:	bfc8      	it	gt
    c65a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c65c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c660:	bf08      	it	eq
    c662:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c666:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c66a:	2000      	movs	r0, #0
    c66c:	2101      	movs	r1, #1
    c66e:	f006 f9f7 	bl	12a60 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c672:	2200      	movs	r2, #0
    c674:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c676:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c678:	4610      	mov	r0, r2
    c67a:	f7fa fda1 	bl	71c0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c67e:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c682:	f641 2385 	movw	r3, #6789	; 0x1a85
    c686:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c688:	3207      	adds	r2, #7
		ticker_status =
    c68a:	9300      	str	r3, [sp, #0]
    c68c:	b2d2      	uxtb	r2, r2
    c68e:	4b47      	ldr	r3, [pc, #284]	; (c7ac <event_connection_prepare+0x95c>)
    c690:	4608      	mov	r0, r1
    c692:	f7fb fc19 	bl	7ec8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c696:	f030 0802 	bics.w	r8, r0, #2
    c69a:	d026      	beq.n	c6ea <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c69c:	4b44      	ldr	r3, [pc, #272]	; (c7b0 <event_connection_prepare+0x960>)
    c69e:	9301      	str	r3, [sp, #4]
    c6a0:	9300      	str	r3, [sp, #0]
    c6a2:	4a44      	ldr	r2, [pc, #272]	; (c7b4 <event_connection_prepare+0x964>)
    c6a4:	4b44      	ldr	r3, [pc, #272]	; (c7b8 <event_connection_prepare+0x968>)
    c6a6:	4945      	ldr	r1, [pc, #276]	; (c7bc <event_connection_prepare+0x96c>)
    c6a8:	4845      	ldr	r0, [pc, #276]	; (c7c0 <event_connection_prepare+0x970>)
    c6aa:	f7ff bbe1 	b.w	be70 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c6ae:	fb0a 3212 	mls	r2, sl, r2, r3
    c6b2:	b292      	uxth	r2, r2
    c6b4:	fba2 0101 	umull	r0, r1, r2, r1
    c6b8:	f240 1323 	movw	r3, #291	; 0x123
    c6bc:	fb03 1102 	mla	r1, r3, r2, r1
    c6c0:	a333      	add	r3, pc, #204	; (adr r3, c790 <event_connection_prepare+0x940>)
    c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6c6:	f7f3 fda5 	bl	214 <__aeabi_uldivmod>
    c6ca:	eba8 0300 	sub.w	r3, r8, r0
    c6ce:	e742      	b.n	c556 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c6d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    c6d2:	a32f      	add	r3, pc, #188	; (adr r3, c790 <event_connection_prepare+0x940>)
    c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6d8:	fba1 010b 	umull	r0, r1, r1, fp
    c6dc:	f7f3 fd9a 	bl	214 <__aeabi_uldivmod>
    c6e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c6e4:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c6e6:	4635      	mov	r5, r6
    c6e8:	e790      	b.n	c60c <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c6ea:	fba5 ab0b 	umull	sl, fp, r5, fp
    c6ee:	a328      	add	r3, pc, #160	; (adr r3, c790 <event_connection_prepare+0x940>)
    c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c6f4:	4650      	mov	r0, sl
    c6f6:	4659      	mov	r1, fp
    c6f8:	f7f3 fd8c 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c6fc:	4a31      	ldr	r2, [pc, #196]	; (c7c4 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c6fe:	f894 6020 	ldrb.w	r6, [r4, #32]
    c702:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c706:	2307      	movs	r3, #7
    c708:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c70c:	2100      	movs	r1, #0
    c70e:	4343      	muls	r3, r0
    c710:	fb02 3301 	mla	r3, r2, r1, r3
    c714:	fba0 0102 	umull	r0, r1, r0, r2
    c718:	ebba 0000 	subs.w	r0, sl, r0
    c71c:	4419      	add	r1, r3
    c71e:	eb6b 0101 	sbc.w	r1, fp, r1
    c722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c726:	2300      	movs	r3, #0
    c728:	f7f3 fd74 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c72c:	68e3      	ldr	r3, [r4, #12]
    c72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c730:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c734:	4924      	ldr	r1, [pc, #144]	; (c7c8 <event_connection_prepare+0x978>)
		ticker_status =
    c736:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c738:	441a      	add	r2, r3
    c73a:	4613      	mov	r3, r2
    c73c:	4a23      	ldr	r2, [pc, #140]	; (c7cc <event_connection_prepare+0x97c>)
		ticker_status =
    c73e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c740:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c744:	bf38      	it	cc
    c746:	460a      	movcc	r2, r1
    c748:	3607      	adds	r6, #7
		ticker_status =
    c74a:	f641 2195 	movw	r1, #6805	; 0x1a95
    c74e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c750:	b2f6      	uxtb	r6, r6
		ticker_status =
    c752:	4916      	ldr	r1, [pc, #88]	; (c7ac <event_connection_prepare+0x95c>)
    c754:	9107      	str	r1, [sp, #28]
    c756:	9205      	str	r2, [sp, #20]
    c758:	9406      	str	r4, [sp, #24]
    c75a:	f8cd 800c 	str.w	r8, [sp, #12]
    c75e:	9501      	str	r5, [sp, #4]
    c760:	9700      	str	r7, [sp, #0]
    c762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c764:	4632      	mov	r2, r6
    c766:	4641      	mov	r1, r8
    c768:	4640      	mov	r0, r8
    c76a:	f7fb fb0f 	bl	7d8c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c76e:	f030 0002 	bics.w	r0, r0, #2
    c772:	d193      	bne.n	c69c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
    c774:	f1b9 0f00 	cmp.w	r9, #0
    c778:	f000 8383 	beq.w	ce82 <event_connection_prepare+0x1032>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c77c:	2201      	movs	r2, #1
    c77e:	4611      	mov	r1, r2
}
    c780:	b00f      	add	sp, #60	; 0x3c
    c782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c786:	f7fa bd1b 	b.w	71c0 <mayfly_enable>
    c78a:	bf00      	nop
    c78c:	f3af 8000 	nop.w
    c790:	1afd498d 	.word	0x1afd498d
    c794:	00000007 	.word	0x00000007
    c798:	09ce5400 	.word	0x09ce5400
    c79c:	000178c0 	.word	0x000178c0
    c7a0:	000f4240 	.word	0x000f4240
    c7a4:	026259ff 	.word	0x026259ff
    c7a8:	01c9c37f 	.word	0x01c9c37f
    c7ac:	0000ab8d 	.word	0x0000ab8d
    c7b0:	00014b99 	.word	0x00014b99
    c7b4:	00015f55 	.word	0x00015f55
    c7b8:	000174d9 	.word	0x000174d9
    c7bc:	00015fa4 	.word	0x00015fa4
    c7c0:	000176a1 	.word	0x000176a1
    c7c4:	1afd498d 	.word	0x1afd498d
    c7c8:	0000d031 	.word	0x0000d031
    c7cc:	0000d035 	.word	0x0000d035
    c7d0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c7d4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d05e      	beq.n	c89a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7dc:	48c9      	ldr	r0, [pc, #804]	; (cb04 <event_connection_prepare+0xcb4>)
    c7de:	f7fa fc4c 	bl	707a <mem_acquire>
		if (node_tx) {
    c7e2:	4607      	mov	r7, r0
    c7e4:	b1e8      	cbz	r0, c822 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
    c7e6:	2300      	movs	r3, #0
    c7e8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c7ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c7ee:	3306      	adds	r3, #6
    c7f0:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c7f2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7f6:	7903      	ldrb	r3, [r0, #4]
    c7f8:	f043 0303 	orr.w	r3, r3, #3
    c7fc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c7fe:	2308      	movs	r3, #8
    c800:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c802:	2301      	movs	r3, #1
    c804:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c806:	2205      	movs	r2, #5
    c808:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c80c:	3008      	adds	r0, #8
    c80e:	f7f5 fa01 	bl	1c14 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c812:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c816:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c81a:	4639      	mov	r1, r7
    c81c:	4620      	mov	r0, r4
    c81e:	f7ff fa47 	bl	bcb0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c822:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c826:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c82a:	429a      	cmp	r2, r3
    c82c:	d01e      	beq.n	c86c <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c82e:	2005      	movs	r0, #5
    c830:	f7ff f8a8 	bl	b984 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c834:	48b3      	ldr	r0, [pc, #716]	; (cb04 <event_connection_prepare+0xcb4>)
    c836:	f7fa fc20 	bl	707a <mem_acquire>
		if (node_tx) {
    c83a:	4601      	mov	r1, r0
    c83c:	b1b0      	cbz	r0, c86c <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c83e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c842:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c846:	7903      	ldrb	r3, [r0, #4]
    c848:	f043 0303 	orr.w	r3, r3, #3
    c84c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c84e:	2302      	movs	r3, #2
    c850:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c852:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c854:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c858:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c85a:	4620      	mov	r0, r4
    c85c:	f7ff fa28 	bl	bcb0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c860:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c862:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c864:	bf98      	it	ls
    c866:	3301      	addls	r3, #1
    c868:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c86c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c870:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c874:	429a      	cmp	r2, r3
    c876:	f000 82eb 	beq.w	ce50 <event_connection_prepare+0x1000>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c87a:	2005      	movs	r0, #5
    c87c:	f7ff f882 	bl	b984 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c880:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c884:	f003 0303 	and.w	r3, r3, #3
    c888:	2b03      	cmp	r3, #3
    c88a:	f200 830c 	bhi.w	cea6 <event_connection_prepare+0x1056>
    c88e:	e8df f013 	tbh	[pc, r3, lsl #1]
    c892:	0288      	.short	0x0288
    c894:	02df02df 	.word	0x02df02df
    c898:	02fb      	.short	0x02fb
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c89a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c89e:	1af3      	subs	r3, r6, r3
    c8a0:	041f      	lsls	r7, r3, #16
    c8a2:	d4be      	bmi.n	c822 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    c8a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8a8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c8ac:	f104 0717 	add.w	r7, r4, #23
    c8b0:	2205      	movs	r2, #5
    c8b2:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c8b6:	4638      	mov	r0, r7
    c8b8:	f7f5 f9ac 	bl	1c14 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c8bc:	2105      	movs	r1, #5
    c8be:	4638      	mov	r0, r7
    c8c0:	f7fa fd86 	bl	73d0 <util_ones_count_get>
		conn->data_chan_count =
    c8c4:	7f63      	ldrb	r3, [r4, #29]
    c8c6:	f360 0305 	bfi	r3, r0, #0, #6
    c8ca:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c8cc:	2301      	movs	r3, #1
    c8ce:	7723      	strb	r3, [r4, #28]
    c8d0:	e7a7      	b.n	c822 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
    c8d2:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c8d6:	f1b9 0f00 	cmp.w	r9, #0
    c8da:	d1a2      	bne.n	c822 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c8dc:	4889      	ldr	r0, [pc, #548]	; (cb04 <event_connection_prepare+0xcb4>)
    c8de:	f7fa fbcc 	bl	707a <mem_acquire>
	if (!node_tx) {
    c8e2:	4607      	mov	r7, r0
    c8e4:	2800      	cmp	r0, #0
    c8e6:	d09c      	beq.n	c822 <event_connection_prepare+0x9d2>
	if (!conn->role) {
    c8e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c8ec:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c8ee:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c8f2:	db4d      	blt.n	c990 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c8f4:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c8f8:	465b      	mov	r3, fp
    c8fa:	464a      	mov	r2, r9
    c8fc:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c900:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c904:	f005 fc22 	bl	1214c <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c908:	2210      	movs	r2, #16
    c90a:	4659      	mov	r1, fp
    c90c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c910:	f7f5 f980 	bl	1c14 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c914:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c918:	2208      	movs	r2, #8
    c91a:	f204 1033 	addw	r0, r4, #307	; 0x133
    c91e:	f7f5 f979 	bl	1c14 <memcpy>
		conn->ccm_rx.direction = 0;
    c922:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c926:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c92a:	f369 0300 	bfi	r3, r9, #0, #1
    c92e:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c932:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c936:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c93a:	f043 0301 	orr.w	r3, r3, #1
    c93e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c942:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c946:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c94a:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c94e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c952:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c956:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c95a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c95e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c962:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c966:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c96a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c96e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c972:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c976:	4651      	mov	r1, sl
    c978:	4620      	mov	r0, r4
    c97a:	f7ff fa27 	bl	bdcc <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c97e:	4639      	mov	r1, r7
    c980:	4620      	mov	r0, r4
    c982:	f7ff f995 	bl	bcb0 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c986:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c98a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c98e:	e748      	b.n	c822 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
    c990:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c994:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c998:	2b08      	cmp	r3, #8
    c99a:	f000 80a2 	beq.w	cae2 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
    c99e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c9a2:	f1b9 0f00 	cmp.w	r9, #0
    c9a6:	d020      	beq.n	c9ea <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c9a8:	7903      	ldrb	r3, [r0, #4]
    c9aa:	f043 0303 	orr.w	r3, r3, #3
    c9ae:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c9b0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c9b4:	0698      	lsls	r0, r3, #26
    c9b6:	d512      	bpl.n	c9de <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c9b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c9bc:	0759      	lsls	r1, r3, #29
    c9be:	d50e      	bpl.n	c9de <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c9c0:	2311      	movs	r3, #17
    c9c2:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c9c4:	2303      	movs	r3, #3
    c9c6:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c9c8:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c9cc:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c9ce:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c9d0:	797b      	ldrb	r3, [r7, #5]
    c9d2:	3301      	adds	r3, #1
    c9d4:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c9d6:	2300      	movs	r3, #0
    c9d8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c9dc:	e7cf      	b.n	c97e <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c9de:	230d      	movs	r3, #13
    c9e0:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c9e2:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c9e6:	2301      	movs	r3, #1
    c9e8:	e7f1      	b.n	c9ce <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c9ea:	4846      	ldr	r0, [pc, #280]	; (cb04 <event_connection_prepare+0xcb4>)
    c9ec:	f7fa fb45 	bl	707a <mem_acquire>
	if (!node_tx) {
    c9f0:	4682      	mov	sl, r0
    c9f2:	2800      	cmp	r0, #0
    c9f4:	f000 8300 	beq.w	cff8 <event_connection_prepare+0x11a8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9f8:	7903      	ldrb	r3, [r0, #4]
    c9fa:	f043 0303 	orr.w	r3, r3, #3
    c9fe:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ca00:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    ca04:	230d      	movs	r3, #13
    ca06:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    ca08:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    ca0c:	f100 0308 	add.w	r3, r0, #8
    ca10:	4619      	mov	r1, r3
    ca12:	2208      	movs	r2, #8
    ca14:	6868      	ldr	r0, [r5, #4]
    ca16:	930d      	str	r3, [sp, #52]	; 0x34
    ca18:	f006 fe04 	bl	13624 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    ca1c:	f10a 0310 	add.w	r3, sl, #16
    ca20:	4619      	mov	r1, r3
    ca22:	465a      	mov	r2, fp
    ca24:	6868      	ldr	r0, [r5, #4]
    ca26:	930b      	str	r3, [sp, #44]	; 0x2c
    ca28:	f006 fdfc 	bl	13624 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    ca2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca2e:	2208      	movs	r2, #8
    ca30:	4619      	mov	r1, r3
    ca32:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    ca36:	f7f5 f8ed 	bl	1c14 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    ca3a:	465a      	mov	r2, fp
    ca3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ca3e:	f504 708b 	add.w	r0, r4, #278	; 0x116
    ca42:	f7f5 f8e7 	bl	1c14 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    ca46:	4651      	mov	r1, sl
    ca48:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ca4a:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    ca4e:	f7ff f92f 	bl	bcb0 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    ca52:	4653      	mov	r3, sl
    ca54:	464a      	mov	r2, r9
    ca56:	f104 0194 	add.w	r1, r4, #148	; 0x94
    ca5a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    ca5e:	f005 fb75 	bl	1214c <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    ca62:	2210      	movs	r2, #16
    ca64:	4651      	mov	r1, sl
    ca66:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    ca6a:	f7f5 f8d3 	bl	1c14 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    ca6e:	2208      	movs	r2, #8
    ca70:	f504 7189 	add.w	r1, r4, #274	; 0x112
    ca74:	f204 1033 	addw	r0, r4, #307	; 0x133
    ca78:	f7f5 f8cc 	bl	1c14 <memcpy>
			conn->ccm_rx.direction = 1;
    ca7c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    ca80:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    ca84:	f043 0301 	orr.w	r3, r3, #1
    ca88:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    ca8c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    ca90:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    ca94:	f369 0300 	bfi	r3, r9, #0, #1
    ca98:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    ca9c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    caa0:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    caa4:	f043 0310 	orr.w	r3, r3, #16
    caa8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    caac:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    caae:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cab2:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    cab6:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    caba:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    cabe:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    cac2:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    cac6:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    caca:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    cace:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    cad2:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cad6:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    cad8:	2301      	movs	r3, #1
    cada:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cadc:	2305      	movs	r3, #5
    cade:	71fb      	strb	r3, [r7, #7]
    cae0:	e74d      	b.n	c97e <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    cae2:	4651      	mov	r1, sl
    cae4:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    cae8:	f7ff f970 	bl	bdcc <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    caec:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    caf0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    caf4:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    caf8:	f369 03c3 	bfi	r3, r9, #3, #1
    cafc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    cb00:	e73d      	b.n	c97e <event_connection_prepare+0xb2e>
    cb02:	bf00      	nop
    cb04:	20000a1c 	.word	0x20000a1c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb08:	48b0      	ldr	r0, [pc, #704]	; (cdcc <event_connection_prepare+0xf7c>)
    cb0a:	f7fa fab6 	bl	707a <mem_acquire>
	if (node_tx) {
    cb0e:	4607      	mov	r7, r0
    cb10:	2800      	cmp	r0, #0
    cb12:	f43f ae86 	beq.w	c822 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cb16:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb1a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    cb1e:	4bac      	ldr	r3, [pc, #688]	; (cdd0 <event_connection_prepare+0xf80>)
    cb20:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb24:	7903      	ldrb	r3, [r0, #4]
    cb26:	f043 0303 	orr.w	r3, r3, #3
    cb2a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    cb2c:	2309      	movs	r3, #9
    cb2e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    cb30:	f994 301d 	ldrsb.w	r3, [r4, #29]
    cb34:	2b00      	cmp	r3, #0
    cb36:	bfac      	ite	ge
    cb38:	2308      	movge	r3, #8
    cb3a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    cb3c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    cb3e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    cb40:	2100      	movs	r1, #0
    cb42:	4410      	add	r0, r2
    cb44:	f7f5 f892 	bl	1c6c <memset>
			conn->llcp_features & 0xFF;
    cb48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    cb4c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    cb4e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    cb50:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    cb52:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    cb54:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    cb56:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    cb58:	4620      	mov	r0, r4
    cb5a:	f7ff f8a9 	bl	bcb0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cb5e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cb62:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    cb66:	e65c      	b.n	c822 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
    cb68:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    cb6c:	07da      	lsls	r2, r3, #31
    cb6e:	d424      	bmi.n	cbba <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb70:	4896      	ldr	r0, [pc, #600]	; (cdcc <event_connection_prepare+0xf7c>)
    cb72:	f7fa fa82 	bl	707a <mem_acquire>
		if (node_tx) {
    cb76:	4601      	mov	r1, r0
    cb78:	2800      	cmp	r0, #0
    cb7a:	f43f ae52 	beq.w	c822 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
    cb7e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb82:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    cb86:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    cb8a:	f043 0301 	orr.w	r3, r3, #1
    cb8e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb92:	7903      	ldrb	r3, [r0, #4]
    cb94:	f043 0303 	orr.w	r3, r3, #3
    cb98:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    cb9a:	2306      	movs	r3, #6
    cb9c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cb9e:	230c      	movs	r3, #12
    cba0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    cba2:	2309      	movs	r3, #9
    cba4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    cba6:	f06f 030e 	mvn.w	r3, #14
    cbaa:	7243      	strb	r3, [r0, #9]
    cbac:	2305      	movs	r3, #5
    cbae:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    cbb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbb4:	72c3      	strb	r3, [r0, #11]
    cbb6:	7303      	strb	r3, [r0, #12]
    cbb8:	e7ce      	b.n	cb58 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
    cbba:	079b      	lsls	r3, r3, #30
    cbbc:	d526      	bpl.n	cc0c <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
    cbbe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cbc2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    cbc6:	2002      	movs	r0, #2
    cbc8:	f7fd f86c 	bl	9ca4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cbcc:	b920      	cbnz	r0, cbd8 <event_connection_prepare+0xd88>
    cbce:	4b81      	ldr	r3, [pc, #516]	; (cdd4 <event_connection_prepare+0xf84>)
    cbd0:	9301      	str	r3, [sp, #4]
    cbd2:	9300      	str	r3, [sp, #0]
    cbd4:	4b80      	ldr	r3, [pc, #512]	; (cdd8 <event_connection_prepare+0xf88>)
    cbd6:	e45d      	b.n	c494 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
    cbd8:	8c23      	ldrh	r3, [r4, #32]
    cbda:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cbdc:	2301      	movs	r3, #1
    cbde:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cbe0:	7a03      	ldrb	r3, [r0, #8]
    cbe2:	f043 0303 	orr.w	r3, r3, #3
    cbe6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cbe8:	2306      	movs	r3, #6
    cbea:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    cbec:	230c      	movs	r3, #12
    cbee:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    cbf0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    cbf4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    cbf6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    cbfa:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    cbfe:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    cc02:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    cc06:	f7fd feb7 	bl	a978 <packet_rx_enqueue>
    cc0a:	e60a      	b.n	c822 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
    cc0c:	4b71      	ldr	r3, [pc, #452]	; (cdd4 <event_connection_prepare+0xf84>)
    cc0e:	9301      	str	r3, [sp, #4]
    cc10:	9300      	str	r3, [sp, #0]
    cc12:	4b71      	ldr	r3, [pc, #452]	; (cdd8 <event_connection_prepare+0xf88>)
    cc14:	f7ff bad2 	b.w	c1bc <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cc18:	486c      	ldr	r0, [pc, #432]	; (cdcc <event_connection_prepare+0xf7c>)
    cc1a:	f7fa fa2e 	bl	707a <mem_acquire>
	if (node_tx) {
    cc1e:	4601      	mov	r1, r0
    cc20:	2800      	cmp	r0, #0
    cc22:	f43f adfe 	beq.w	c822 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    cc26:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cc2a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cc2e:	7903      	ldrb	r3, [r0, #4]
    cc30:	f043 0303 	orr.w	r3, r3, #3
    cc34:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    cc36:	2301      	movs	r3, #1
    cc38:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    cc3a:	2312      	movs	r3, #18
    cc3c:	71c3      	strb	r3, [r0, #7]
    cc3e:	e78b      	b.n	cb58 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
    cc40:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    cc44:	07d7      	lsls	r7, r2, #31
    cc46:	d551      	bpl.n	ccec <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cc48:	4860      	ldr	r0, [pc, #384]	; (cdcc <event_connection_prepare+0xf7c>)
    cc4a:	f7fa fa16 	bl	707a <mem_acquire>
		if (node_tx) {
    cc4e:	4607      	mov	r7, r0
    cc50:	2800      	cmp	r0, #0
    cc52:	f43f ade6 	beq.w	c822 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
    cc56:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc5a:	f36f 0300 	bfc	r3, #0, #1
    cc5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    cc62:	b2db      	uxtb	r3, r3
    cc64:	f3c3 0982 	ubfx	r9, r3, #2, #3
    cc68:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    cc6c:	d138      	bne.n	cce0 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
    cc6e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cc72:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    cc76:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    cc78:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    cc7c:	d51a      	bpl.n	ccb4 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
    cc7e:	2002      	movs	r0, #2
    cc80:	f7fd f810 	bl	9ca4 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    cc84:	b920      	cbnz	r0, cc90 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
    cc86:	4b53      	ldr	r3, [pc, #332]	; (cdd4 <event_connection_prepare+0xf84>)
    cc88:	9301      	str	r3, [sp, #4]
    cc8a:	9300      	str	r3, [sp, #0]
    cc8c:	4b53      	ldr	r3, [pc, #332]	; (cddc <event_connection_prepare+0xf8c>)
    cc8e:	e401      	b.n	c494 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
    cc90:	8c23      	ldrh	r3, [r4, #32]
    cc92:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    cc94:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    cc98:	230c      	movs	r3, #12
    cc9a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    cc9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cca0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cca4:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    cca6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ccaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ccae:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    ccb0:	f7fd fe62 	bl	a978 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ccb4:	793b      	ldrb	r3, [r7, #4]
    ccb6:	f043 0303 	orr.w	r3, r3, #3
    ccba:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    ccbc:	2305      	movs	r3, #5
    ccbe:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ccc0:	2318      	movs	r3, #24
    ccc2:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    ccc4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ccc8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cccc:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    ccce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    ccd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
    ccd6:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    ccd8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    ccdc:	817b      	strh	r3, [r7, #10]
    ccde:	e59c      	b.n	c81a <event_connection_prepare+0x9ca>
								 conn->latency +
    cce0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cce2:	3306      	adds	r3, #6
    cce4:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    cce6:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    ccea:	e7e3      	b.n	ccb4 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    ccec:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    ccf0:	1af3      	subs	r3, r6, r3
    ccf2:	0419      	lsls	r1, r3, #16
    ccf4:	f53f ad95 	bmi.w	c822 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
    ccf8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ccfc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    cd00:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    cd04:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    cd08:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cd0c:	bf18      	it	ne
    cd0e:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    cd12:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cd16:	bf1c      	itt	ne
    cd18:	f367 03c5 	bfine	r3, r7, #3, #3
    cd1c:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    cd20:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    cd24:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    cd28:	d008      	beq.n	cd3c <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    cd2a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cd2e:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    cd32:	095b      	lsrs	r3, r3, #5
    cd34:	f363 0702 	bfi	r7, r3, #0, #3
    cd38:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    cd3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cd40:	461f      	mov	r7, r3
    cd42:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cd46:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cd4a:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    cd4c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cd50:	d40b      	bmi.n	cd6a <event_connection_prepare+0xf1a>
    cd52:	b2fb      	uxtb	r3, r7
    cd54:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cd58:	4283      	cmp	r3, r0
    cd5a:	d106      	bne.n	cd6a <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
    cd5c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cd60:	f003 0307 	and.w	r3, r3, #7
    cd64:	428b      	cmp	r3, r1
    cd66:	f43f ad5c 	beq.w	c822 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
    cd6a:	2002      	movs	r0, #2
    cd6c:	f7fc ff9a 	bl	9ca4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cd70:	2800      	cmp	r0, #0
    cd72:	d088      	beq.n	cc86 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
    cd74:	8c23      	ldrh	r3, [r4, #32]
    cd76:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    cd78:	230c      	movs	r3, #12
    cd7a:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    cd7c:	2300      	movs	r3, #0
    cd7e:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    cd80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cd84:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cd88:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    cd8a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cd8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cd92:	7343      	strb	r3, [r0, #13]
    cd94:	e737      	b.n	cc06 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
    cd96:	4b0f      	ldr	r3, [pc, #60]	; (cdd4 <event_connection_prepare+0xf84>)
    cd98:	9301      	str	r3, [sp, #4]
    cd9a:	9300      	str	r3, [sp, #0]
    cd9c:	4b10      	ldr	r3, [pc, #64]	; (cde0 <event_connection_prepare+0xf90>)
    cd9e:	f7ff ba0d 	b.w	c1bc <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
    cda2:	f7fc ff69 	bl	9c78 <packet_rx_acquired_count_get>
    cda6:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    cda8:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cdac:	f7fa f994 	bl	70d8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cdb0:	4438      	add	r0, r7
    cdb2:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cdb4:	28ff      	cmp	r0, #255	; 0xff
    cdb6:	d91d      	bls.n	cdf4 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
    cdb8:	4b06      	ldr	r3, [pc, #24]	; (cdd4 <event_connection_prepare+0xf84>)
    cdba:	9301      	str	r3, [sp, #4]
    cdbc:	9300      	str	r3, [sp, #0]
    cdbe:	4a09      	ldr	r2, [pc, #36]	; (cde4 <event_connection_prepare+0xf94>)
    cdc0:	4b09      	ldr	r3, [pc, #36]	; (cde8 <event_connection_prepare+0xf98>)
    cdc2:	490a      	ldr	r1, [pc, #40]	; (cdec <event_connection_prepare+0xf9c>)
    cdc4:	480a      	ldr	r0, [pc, #40]	; (cdf0 <event_connection_prepare+0xfa0>)
    cdc6:	f7ff b853 	b.w	be70 <event_connection_prepare+0x20>
    cdca:	bf00      	nop
    cdcc:	20000a1c 	.word	0x20000a1c
    cdd0:	000141ff 	.word	0x000141ff
    cdd4:	00014b99 	.word	0x00014b99
    cdd8:	000174ed 	.word	0x000174ed
    cddc:	00017549 	.word	0x00017549
    cde0:	00017560 	.word	0x00017560
    cde4:	00015f55 	.word	0x00015f55
    cde8:	00017527 	.word	0x00017527
    cdec:	00015fa4 	.word	0x00015fa4
    cdf0:	000176ef 	.word	0x000176ef
		if (_radio.packet_rx_data_count != free_count_rx) {
    cdf4:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cdf8:	4283      	cmp	r3, r0
    cdfa:	d129      	bne.n	ce50 <event_connection_prepare+0x1000>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cdfc:	4881      	ldr	r0, [pc, #516]	; (d004 <event_connection_prepare+0x11b4>)
    cdfe:	f7fa f93c 	bl	707a <mem_acquire>
		if (!node_tx) {
    ce02:	4601      	mov	r1, r0
    ce04:	b320      	cbz	r0, ce50 <event_connection_prepare+0x1000>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ce06:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    ce0a:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ce0e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    ce12:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ce14:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ce16:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    ce18:	f365 0301 	bfi	r3, r5, #0, #2
    ce1c:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce20:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    ce22:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce24:	f043 0303 	orr.w	r3, r3, #3
    ce28:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    ce2a:	2309      	movs	r3, #9
    ce2c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    ce2e:	2314      	movs	r3, #20
    ce30:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    ce32:	231b      	movs	r3, #27
    ce34:	720b      	strb	r3, [r1, #8]
    ce36:	2300      	movs	r3, #0
    ce38:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    ce3a:	2348      	movs	r3, #72	; 0x48
    ce3c:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    ce3e:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    ce40:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    ce42:	4620      	mov	r0, r4
    ce44:	f7fe ff34 	bl	bcb0 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ce48:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ce4c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    ce50:	f894 3020 	ldrb.w	r3, [r4, #32]
    ce54:	f994 501d 	ldrsb.w	r5, [r4, #29]
    ce58:	486b      	ldr	r0, [pc, #428]	; (d008 <event_connection_prepare+0x11b8>)
    ce5a:	496c      	ldr	r1, [pc, #432]	; (d00c <event_connection_prepare+0x11bc>)
    ce5c:	68a2      	ldr	r2, [r4, #8]
    ce5e:	9403      	str	r4, [sp, #12]
    ce60:	3307      	adds	r3, #7
    ce62:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    ce66:	bf38      	it	cc
    ce68:	4601      	movcc	r1, r0
    ce6a:	b2db      	uxtb	r3, r3
    ce6c:	e88d 000c 	stmia.w	sp, {r2, r3}
    ce70:	9102      	str	r1, [sp, #8]
    ce72:	1d23      	adds	r3, r4, #4
    ce74:	4622      	mov	r2, r4
    ce76:	990c      	ldr	r1, [sp, #48]	; 0x30
    ce78:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    ce7a:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    ce7c:	f7fe fd90 	bl	b9a0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    ce80:	8466      	strh	r6, [r4, #34]	; 0x22
}
    ce82:	b00f      	add	sp, #60	; 0x3c
    ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    ce88:	f7fc fef6 	bl	9c78 <packet_rx_acquired_count_get>
    ce8c:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ce8e:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ce92:	f7fa f921 	bl	70d8 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ce96:	4438      	add	r0, r7
    ce98:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ce9a:	28ff      	cmp	r0, #255	; 0xff
    ce9c:	d88c      	bhi.n	cdb8 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
    ce9e:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cea2:	4283      	cmp	r3, r0
    cea4:	d005      	beq.n	ceb2 <event_connection_prepare+0x1062>
		LL_ASSERT(0);
    cea6:	4b5a      	ldr	r3, [pc, #360]	; (d010 <event_connection_prepare+0x11c0>)
    cea8:	9301      	str	r3, [sp, #4]
    ceaa:	9300      	str	r3, [sp, #0]
    ceac:	4b59      	ldr	r3, [pc, #356]	; (d014 <event_connection_prepare+0x11c4>)
    ceae:	f7ff b985 	b.w	c1bc <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
    ceb2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ceb6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    ceba:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    cebe:	2100      	movs	r1, #0
    cec0:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    cec4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    cec8:	f361 02c3 	bfi	r2, r1, #3, #1
    cecc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    ced0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ced4:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    ced6:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    ceda:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    cedc:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    cee0:	f7fa f8fa 	bl	70d8 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    cee4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    cee8:	b10b      	cbz	r3, ceee <event_connection_prepare+0x109e>
			free_count_conn++;
    ceea:	3001      	adds	r0, #1
    ceec:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    ceee:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    cef2:	b10b      	cbz	r3, cef8 <event_connection_prepare+0x10a8>
			free_count_conn++;
    cef4:	3001      	adds	r0, #1
    cef6:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cef8:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cefa:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cefe:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cf00:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cf02:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cf06:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    cf08:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    cf0a:	d052      	beq.n	cfb2 <event_connection_prepare+0x1162>
    cf0c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    cf10:	42bb      	cmp	r3, r7
    cf12:	d34e      	bcc.n	cfb2 <event_connection_prepare+0x1162>
		node_rx = packet_rx_reserve_get(2);
    cf14:	2002      	movs	r0, #2
    cf16:	f7fc fec5 	bl	9ca4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cf1a:	2800      	cmp	r0, #0
    cf1c:	d155      	bne.n	cfca <event_connection_prepare+0x117a>
    cf1e:	4b3c      	ldr	r3, [pc, #240]	; (d010 <event_connection_prepare+0x11c0>)
    cf20:	9301      	str	r3, [sp, #4]
    cf22:	9300      	str	r3, [sp, #0]
    cf24:	4b3b      	ldr	r3, [pc, #236]	; (d014 <event_connection_prepare+0x11c4>)
    cf26:	f7ff bab5 	b.w	c494 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
    cf2a:	b90b      	cbnz	r3, cf30 <event_connection_prepare+0x10e0>
						_radio.packet_rx_count - 1;
    cf2c:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    cf30:	3b01      	subs	r3, #1
    cf32:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    cf36:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    cf3a:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    cf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cf42:	4649      	mov	r1, r9
    cf44:	6818      	ldr	r0, [r3, #0]
    cf46:	f7fa f8b2 	bl	70ae <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    cf4a:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cf4e:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cf52:	3a01      	subs	r2, #1
    cf54:	4293      	cmp	r3, r2
    cf56:	db08      	blt.n	cf6a <event_connection_prepare+0x111a>
    cf58:	4b2d      	ldr	r3, [pc, #180]	; (d010 <event_connection_prepare+0x11c0>)
    cf5a:	9301      	str	r3, [sp, #4]
    cf5c:	9300      	str	r3, [sp, #0]
    cf5e:	4a2e      	ldr	r2, [pc, #184]	; (d018 <event_connection_prepare+0x11c8>)
    cf60:	4b2c      	ldr	r3, [pc, #176]	; (d014 <event_connection_prepare+0x11c4>)
    cf62:	492e      	ldr	r1, [pc, #184]	; (d01c <event_connection_prepare+0x11cc>)
    cf64:	482e      	ldr	r0, [pc, #184]	; (d020 <event_connection_prepare+0x11d0>)
    cf66:	f7fe bf83 	b.w	be70 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
    cf6a:	3301      	adds	r3, #1
    cf6c:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cf70:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cf74:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    cf78:	4293      	cmp	r3, r2
    cf7a:	d1d6      	bne.n	cf2a <event_connection_prepare+0x10da>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cf7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    cf7e:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    cf82:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cf84:	bf9a      	itte	ls
    cf86:	2334      	movls	r3, #52	; 0x34
    cf88:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cf8c:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cf90:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    cf94:	fbb2 f2f1 	udiv	r2, r2, r1
    cf98:	b2d2      	uxtb	r2, r2
    cf9a:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cf9e:	b95a      	cbnz	r2, cfb8 <event_connection_prepare+0x1168>
    cfa0:	4b1b      	ldr	r3, [pc, #108]	; (d010 <event_connection_prepare+0x11c0>)
    cfa2:	9301      	str	r3, [sp, #4]
    cfa4:	9300      	str	r3, [sp, #0]
    cfa6:	4a1c      	ldr	r2, [pc, #112]	; (d018 <event_connection_prepare+0x11c8>)
    cfa8:	4b1a      	ldr	r3, [pc, #104]	; (d014 <event_connection_prepare+0x11c4>)
    cfaa:	491c      	ldr	r1, [pc, #112]	; (d01c <event_connection_prepare+0x11cc>)
    cfac:	481d      	ldr	r0, [pc, #116]	; (d024 <event_connection_prepare+0x11d4>)
    cfae:	f7fe bf5f 	b.w	be70 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
    cfb2:	f8df 9078 	ldr.w	r9, [pc, #120]	; d02c <event_connection_prepare+0x11dc>
    cfb6:	e7db      	b.n	cf70 <event_connection_prepare+0x1120>
			mem_init(_radio.pkt_rx_data_pool,
    cfb8:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cfbc:	4b1a      	ldr	r3, [pc, #104]	; (d028 <event_connection_prepare+0x11d8>)
    cfbe:	f7fa f835 	bl	702c <mem_init>
			packet_rx_allocate(4);
    cfc2:	2004      	movs	r0, #4
    cfc4:	f7fc fee6 	bl	9d94 <packet_rx_allocate>
    cfc8:	e7a4      	b.n	cf14 <event_connection_prepare+0x10c4>
		node_rx->hdr.handle = conn->handle;
    cfca:	8c23      	ldrh	r3, [r4, #32]
    cfcc:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cfce:	2301      	movs	r3, #1
    cfd0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cfd2:	7a03      	ldrb	r3, [r0, #8]
    cfd4:	f043 0303 	orr.w	r3, r3, #3
    cfd8:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cfda:	2309      	movs	r3, #9
    cfdc:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cfde:	2315      	movs	r3, #21
    cfe0:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cfe2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cfe4:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cfe6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cfe8:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cfea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cfec:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cfee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cff0:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cff2:	f7fd fcc1 	bl	a978 <packet_rx_enqueue>
    cff6:	e72b      	b.n	ce50 <event_connection_prepare+0x1000>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cff8:	4902      	ldr	r1, [pc, #8]	; (d004 <event_connection_prepare+0x11b4>)
    cffa:	4638      	mov	r0, r7
    cffc:	f7fa f857 	bl	70ae <mem_release>
    d000:	e40f      	b.n	c822 <event_connection_prepare+0x9d2>
    d002:	bf00      	nop
    d004:	20000a1c 	.word	0x20000a1c
    d008:	0000d35d 	.word	0x0000d35d
    d00c:	0000d075 	.word	0x0000d075
    d010:	00014b99 	.word	0x00014b99
    d014:	00017527 	.word	0x00017527
    d018:	00015f55 	.word	0x00015f55
    d01c:	00015fa4 	.word	0x00015fa4
    d020:	00017726 	.word	0x00017726
    d024:	00017780 	.word	0x00017780
    d028:	200009f0 	.word	0x200009f0
    d02c:	20000a08 	.word	0x20000a08

0000d030 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    d030:	f7fe bf0e 	b.w	be50 <event_connection_prepare>

0000d034 <event_slave_prepare>:
    d034:	f7fe bf0c 	b.w	be50 <event_connection_prepare>

0000d038 <connection_configure>:
{
    d038:	b510      	push	{r4, lr}
    d03a:	4604      	mov	r4, r0
	radio_reset();
    d03c:	f005 f962 	bl	12304 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d040:	2000      	movs	r0, #0
    d042:	f005 f989 	bl	12358 <radio_tx_power_set>
	radio_isr_set(isr);
    d046:	480a      	ldr	r0, [pc, #40]	; (d070 <connection_configure+0x38>)
    d048:	f005 f926 	bl	12298 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    d04c:	f104 0010 	add.w	r0, r4, #16
    d050:	f005 f9a0 	bl	12394 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    d054:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    d056:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    d058:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    d05a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    d05e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d060:	f240 605b 	movw	r0, #1627	; 0x65b
    d064:	4319      	orrs	r1, r3
}
    d066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d06a:	f005 ba3b 	b.w	124e4 <radio_crc_configure>
    d06e:	bf00      	nop
    d070:	0000e721 	.word	0x0000e721

0000d074 <event_slave>:
{
    d074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d078:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d07a:	4b71      	ldr	r3, [pc, #452]	; (d240 <event_slave+0x1cc>)
    d07c:	7cda      	ldrb	r2, [r3, #19]
{
    d07e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d080:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    d084:	461d      	mov	r5, r3
    d086:	b172      	cbz	r2, d0a6 <event_slave+0x32>
    d088:	4b6e      	ldr	r3, [pc, #440]	; (d244 <event_slave+0x1d0>)
    d08a:	9301      	str	r3, [sp, #4]
    d08c:	9300      	str	r3, [sp, #0]
    d08e:	4a6e      	ldr	r2, [pc, #440]	; (d248 <event_slave+0x1d4>)
    d090:	4b6e      	ldr	r3, [pc, #440]	; (d24c <event_slave+0x1d8>)
    d092:	496f      	ldr	r1, [pc, #444]	; (d250 <event_slave+0x1dc>)
    d094:	486f      	ldr	r0, [pc, #444]	; (d254 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d096:	f7f3 ff79 	bl	f8c <printk>
    d09a:	4040      	eors	r0, r0
    d09c:	f380 8811 	msr	BASEPRI, r0
    d0a0:	f04f 0004 	mov.w	r0, #4
    d0a4:	df02      	svc	2
    d0a6:	7c1b      	ldrb	r3, [r3, #16]
    d0a8:	8c22      	ldrh	r2, [r4, #32]
    d0aa:	b2db      	uxtb	r3, r3
    d0ac:	3207      	adds	r2, #7
    d0ae:	4293      	cmp	r3, r2
    d0b0:	d007      	beq.n	d0c2 <event_slave+0x4e>
    d0b2:	4b64      	ldr	r3, [pc, #400]	; (d244 <event_slave+0x1d0>)
    d0b4:	9301      	str	r3, [sp, #4]
    d0b6:	9300      	str	r3, [sp, #0]
    d0b8:	4a63      	ldr	r2, [pc, #396]	; (d248 <event_slave+0x1d4>)
    d0ba:	4b64      	ldr	r3, [pc, #400]	; (d24c <event_slave+0x1d8>)
    d0bc:	4964      	ldr	r1, [pc, #400]	; (d250 <event_slave+0x1dc>)
    d0be:	4866      	ldr	r0, [pc, #408]	; (d258 <event_slave+0x1e4>)
    d0c0:	e7e9      	b.n	d096 <event_slave+0x22>
	_radio.packet_counter = 0;
    d0c2:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d0c6:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d0ca:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d0cc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d0ce:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d0d0:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d0d2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d0d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d0d6:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d0da:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d0dc:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d0de:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d0e0:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d0e2:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d0e4:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d0e6:	f7ff ffa7 	bl	d038 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d0ea:	2096      	movs	r0, #150	; 0x96
    d0ec:	f005 fab4 	bl	12658 <radio_tmr_tifs_set>
				     conn->phy_flags);
    d0f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d0f4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d0f8:	09d3      	lsrs	r3, r2, #7
    d0fa:	4631      	mov	r1, r6
    d0fc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d100:	f000 0007 	and.w	r0, r0, #7
    d104:	f005 fa18 	bl	12538 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d108:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d10c:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d114:	4620      	mov	r0, r4
    d116:	3108      	adds	r1, #8
    d118:	f7fd f922 	bl	a360 <rx_packet_set>
	if (conn->data_chan_sel) {
    d11c:	7f63      	ldrb	r3, [r4, #29]
    d11e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d122:	f104 0217 	add.w	r2, r4, #23
    d126:	d05a      	beq.n	d1de <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d128:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d12a:	8be1      	ldrh	r1, [r4, #30]
    d12c:	3801      	subs	r0, #1
    d12e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d132:	b280      	uxth	r0, r0
    d134:	f7fe fd78 	bl	bc28 <chan_sel_2>
	chan_set(data_chan_use);
    d138:	f7fe f84c 	bl	b1d4 <chan_set>
	conn->slave.window_widening_event_us +=
    d13c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d13e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d140:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d142:	2200      	movs	r2, #0
    d144:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d146:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d148:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d14a:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d14c:	bf88      	it	hi
    d14e:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d150:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d152:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d154:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d156:	4413      	add	r3, r2
    d158:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d15a:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d15c:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d15e:	f107 0109 	add.w	r1, r7, #9
    d162:	4630      	mov	r0, r6
    d164:	f005 fa84 	bl	12670 <radio_tmr_start>
    d168:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d16a:	f005 fb1d 	bl	127a8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d16e:	4630      	mov	r0, r6
    d170:	f005 fb3c 	bl	127ec <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d174:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d176:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d178:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d17c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d180:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d184:	2101      	movs	r1, #1
    d186:	f000 0007 	and.w	r0, r0, #7
    d18a:	f005 f95c 	bl	12446 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d18e:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d190:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d192:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d196:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d19a:	2802      	cmp	r0, #2
    d19c:	d03f      	beq.n	d21e <event_slave+0x1aa>
		return 40;
    d19e:	2804      	cmp	r0, #4
    d1a0:	bf0c      	ite	eq
    d1a2:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d1a6:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d1a8:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d1aa:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d1ac:	f005 f94d 	bl	1244a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d1b0:	4430      	add	r0, r6
    d1b2:	f005 fadb 	bl	1276c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d1b6:	f894 1020 	ldrb.w	r1, [r4, #32]
    d1ba:	3107      	adds	r1, #7
    d1bc:	463a      	mov	r2, r7
    d1be:	b2c9      	uxtb	r1, r1
    d1c0:	4620      	mov	r0, r4
    d1c2:	f7fe fab9 	bl	b738 <preempt_calc>
    d1c6:	4603      	mov	r3, r0
    d1c8:	b358      	cbz	r0, d222 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
    d1ca:	2304      	movs	r3, #4
    d1cc:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d1ce:	f005 f94d 	bl	1246c <radio_disable>
	packet_tx_enqueue(2);
    d1d2:	2002      	movs	r0, #2
}
    d1d4:	b002      	add	sp, #8
    d1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d1da:	f7fd bf11 	b.w	b000 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d1de:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d1e0:	7fa6      	ldrb	r6, [r4, #30]
    d1e2:	fb01 6606 	mla	r6, r1, r6, r6
    d1e6:	7fe1      	ldrb	r1, [r4, #31]
    d1e8:	2025      	movs	r0, #37	; 0x25
    d1ea:	440e      	add	r6, r1
    d1ec:	fb96 f1f0 	sdiv	r1, r6, r0
    d1f0:	fb00 6611 	mls	r6, r0, r1, r6
    d1f4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d1f6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d1f8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d1fa:	5c51      	ldrb	r1, [r2, r1]
    d1fc:	f006 0607 	and.w	r6, r6, #7
    d200:	fa41 f606 	asr.w	r6, r1, r6
    d204:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d20a:	d495      	bmi.n	d138 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
    d20c:	fbb0 f1f3 	udiv	r1, r0, r3
    d210:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d214:	b2c9      	uxtb	r1, r1
    d216:	4610      	mov	r0, r2
    d218:	f7fc fd12 	bl	9c40 <chan_sel_remap>
    d21c:	e78c      	b.n	d138 <event_slave+0xc4>
		return 24;
    d21e:	2318      	movs	r3, #24
    d220:	e7c2      	b.n	d1a8 <event_slave+0x134>
		ticker_status =
    d222:	4a0e      	ldr	r2, [pc, #56]	; (d25c <event_slave+0x1e8>)
    d224:	4601      	mov	r1, r0
    d226:	f7fa fecd 	bl	7fc4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d22a:	f030 0302 	bics.w	r3, r0, #2
    d22e:	d0d0      	beq.n	d1d2 <event_slave+0x15e>
    d230:	4b04      	ldr	r3, [pc, #16]	; (d244 <event_slave+0x1d0>)
    d232:	9301      	str	r3, [sp, #4]
    d234:	9300      	str	r3, [sp, #0]
    d236:	4a04      	ldr	r2, [pc, #16]	; (d248 <event_slave+0x1d4>)
    d238:	4b04      	ldr	r3, [pc, #16]	; (d24c <event_slave+0x1d8>)
    d23a:	4905      	ldr	r1, [pc, #20]	; (d250 <event_slave+0x1dc>)
    d23c:	4808      	ldr	r0, [pc, #32]	; (d260 <event_slave+0x1ec>)
    d23e:	e72a      	b.n	d096 <event_slave+0x22>
    d240:	200008c0 	.word	0x200008c0
    d244:	00014b99 	.word	0x00014b99
    d248:	00015f55 	.word	0x00015f55
    d24c:	00017579 	.word	0x00017579
    d250:	00015fa4 	.word	0x00015fa4
    d254:	000177bd 	.word	0x000177bd
    d258:	00017870 	.word	0x00017870
    d25c:	0000ad75 	.word	0x0000ad75
    d260:	000176a1 	.word	0x000176a1

0000d264 <prepare_pdu_data_tx>:
	    conn->empty ||
    d264:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    d268:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d26e:	4604      	mov	r4, r0
    d270:	460e      	mov	r6, r1
	if (/* empty packet */
    d272:	d109      	bne.n	d288 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d274:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    d278:	b131      	cbz	r1, d288 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d27a:	f01c 0f08 	tst.w	ip, #8
    d27e:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    d282:	d022      	beq.n	d2ca <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    d284:	4571      	cmp	r1, lr
    d286:	d020      	beq.n	d2ca <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    d288:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d290:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d294:	f005 f93c 	bl	12510 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d298:	7803      	ldrb	r3, [r0, #0]
    d29a:	2201      	movs	r2, #1
    d29c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    d2a0:	2200      	movs	r2, #0
    d2a2:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    d2a4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d2a8:	7003      	strb	r3, [r0, #0]
    d2aa:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d2ac:	b152      	cbz	r2, d2c4 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    d2ae:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d2b2:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    d2b4:	7803      	ldrb	r3, [r0, #0]
    d2b6:	f36f 1347 	bfc	r3, #5, #3
    d2ba:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    d2bc:	2300      	movs	r3, #0
    d2be:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    d2c0:	6030      	str	r0, [r6, #0]
    d2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    d2c4:	f362 1304 	bfi	r3, r2, #4, #1
    d2c8:	e7f3      	b.n	d2b2 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    d2ca:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    d2ce:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    d2d2:	1d0d      	adds	r5, r1, #4
    d2d4:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    d2d6:	b913      	cbnz	r3, d2de <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    d2d8:	7843      	ldrb	r3, [r0, #1]
    d2da:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    d2de:	b122      	cbz	r2, d2ea <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d2e0:	5cab      	ldrb	r3, [r5, r2]
    d2e2:	2701      	movs	r7, #1
    d2e4:	f367 0301 	bfi	r3, r7, #0, #2
    d2e8:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    d2ea:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    d2ee:	1abf      	subs	r7, r7, r2
    d2f0:	b2ff      	uxtb	r7, r7
    d2f2:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    d2f4:	5cab      	ldrb	r3, [r5, r2]
    d2f6:	f36f 1304 	bfc	r3, #4, #1
    d2fa:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    d2fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d300:	f003 0307 	and.w	r3, r3, #7
    d304:	2b02      	cmp	r3, #2
    d306:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d308:	bf15      	itete	ne
    d30a:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d30c:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d30e:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d310:	3b0b      	subeq	r3, #11
    d312:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    d314:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    d318:	bf18      	it	ne
    d31a:	3b04      	subne	r3, #4
    d31c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    d320:	bf18      	it	ne
    d322:	b29b      	uxthne	r3, r3
    d324:	4563      	cmp	r3, ip
    d326:	bf28      	it	cs
    d328:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    d32a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    d32c:	bf81      	itttt	hi
    d32e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    d330:	5cab      	ldrbhi	r3, [r5, r2]
    d332:	f043 0310 	orrhi.w	r3, r3, #16
    d336:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    d338:	680b      	ldr	r3, [r1, #0]
    d33a:	b11b      	cbz	r3, d344 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    d33c:	5cab      	ldrb	r3, [r5, r2]
    d33e:	f043 0310 	orr.w	r3, r3, #16
    d342:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    d344:	f1be 0f00 	cmp.w	lr, #0
    d348:	d1b4      	bne.n	d2b4 <prepare_pdu_data_tx+0x50>
    d34a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d34e:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    d350:	bf1c      	itt	ne
    d352:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    d356:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    d35a:	e7ab      	b.n	d2b4 <prepare_pdu_data_tx+0x50>

0000d35c <event_master>:
{
    d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d360:	4b56      	ldr	r3, [pc, #344]	; (d4bc <event_master+0x160>)
    d362:	7cd9      	ldrb	r1, [r3, #19]
{
    d364:	b085      	sub	sp, #20
    d366:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d368:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d36c:	461d      	mov	r5, r3
    d36e:	b171      	cbz	r1, d38e <event_master+0x32>
    d370:	4b53      	ldr	r3, [pc, #332]	; (d4c0 <event_master+0x164>)
    d372:	9301      	str	r3, [sp, #4]
    d374:	9300      	str	r3, [sp, #0]
    d376:	4a53      	ldr	r2, [pc, #332]	; (d4c4 <event_master+0x168>)
    d378:	4b53      	ldr	r3, [pc, #332]	; (d4c8 <event_master+0x16c>)
    d37a:	4954      	ldr	r1, [pc, #336]	; (d4cc <event_master+0x170>)
    d37c:	4854      	ldr	r0, [pc, #336]	; (d4d0 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d37e:	f7f3 fe05 	bl	f8c <printk>
    d382:	4040      	eors	r0, r0
    d384:	f380 8811 	msr	BASEPRI, r0
    d388:	f04f 0004 	mov.w	r0, #4
    d38c:	df02      	svc	2
    d38e:	7c1b      	ldrb	r3, [r3, #16]
    d390:	8c21      	ldrh	r1, [r4, #32]
    d392:	b2db      	uxtb	r3, r3
    d394:	3107      	adds	r1, #7
    d396:	428b      	cmp	r3, r1
    d398:	d007      	beq.n	d3aa <event_master+0x4e>
    d39a:	4b49      	ldr	r3, [pc, #292]	; (d4c0 <event_master+0x164>)
    d39c:	9301      	str	r3, [sp, #4]
    d39e:	9300      	str	r3, [sp, #0]
    d3a0:	4a48      	ldr	r2, [pc, #288]	; (d4c4 <event_master+0x168>)
    d3a2:	4b49      	ldr	r3, [pc, #292]	; (d4c8 <event_master+0x16c>)
    d3a4:	4949      	ldr	r1, [pc, #292]	; (d4cc <event_master+0x170>)
    d3a6:	484b      	ldr	r0, [pc, #300]	; (d4d4 <event_master+0x178>)
    d3a8:	e7e9      	b.n	d37e <event_master+0x22>
	_radio.packet_counter = 0;
    d3aa:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d3ae:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d3b2:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d3b4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d3b6:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d3b8:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d3ba:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d3bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d3be:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d3c2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d3c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d3c6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d3c8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d3ca:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d3cc:	f7fd fe18 	bl	b000 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d3d0:	a903      	add	r1, sp, #12
    d3d2:	4620      	mov	r0, r4
    d3d4:	f7ff ff46 	bl	d264 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d3d8:	9903      	ldr	r1, [sp, #12]
    d3da:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d3de:	780b      	ldrb	r3, [r1, #0]
    d3e0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d3e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d3e8:	f362 0382 	bfi	r3, r2, #2, #1
    d3ec:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d3ee:	4620      	mov	r0, r4
    d3f0:	f7ff fe22 	bl	d038 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d3f4:	2096      	movs	r0, #150	; 0x96
    d3f6:	f005 f92f 	bl	12658 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d3fa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d3fe:	f000 0007 	and.w	r0, r0, #7
    d402:	f005 f88d 	bl	12520 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d406:	9903      	ldr	r1, [sp, #12]
    d408:	4620      	mov	r0, r4
    d40a:	f7fc ffd5 	bl	a3b8 <tx_packet_set>
	if (conn->data_chan_sel) {
    d40e:	7f63      	ldrb	r3, [r4, #29]
    d410:	f013 0f40 	tst.w	r3, #64	; 0x40
    d414:	f104 0217 	add.w	r2, r4, #23
    d418:	d021      	beq.n	d45e <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d41a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d41c:	8be1      	ldrh	r1, [r4, #30]
    d41e:	3801      	subs	r0, #1
    d420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d424:	b280      	uxth	r0, r0
    d426:	f7fe fbff 	bl	bc28 <chan_sel_2>
	chan_set(data_chan_use);
    d42a:	f7fd fed3 	bl	b1d4 <chan_set>
		remainder_us = radio_tmr_start(1,
    d42e:	68ea      	ldr	r2, [r5, #12]
    d430:	f107 0109 	add.w	r1, r7, #9
    d434:	2001      	movs	r0, #1
    d436:	f005 f91b 	bl	12670 <radio_tmr_start>
		radio_tmr_end_capture();
    d43a:	f005 f9e9 	bl	12810 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d43e:	f894 1020 	ldrb.w	r1, [r4, #32]
    d442:	3107      	adds	r1, #7
    d444:	463a      	mov	r2, r7
    d446:	b2c9      	uxtb	r1, r1
    d448:	4620      	mov	r0, r4
    d44a:	f7fe f975 	bl	b738 <preempt_calc>
	if (0 !=
    d44e:	4603      	mov	r3, r0
    d450:	b328      	cbz	r0, d49e <event_master+0x142>
		_radio.state = STATE_STOP;
    d452:	2304      	movs	r3, #4
    d454:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d456:	f005 f809 	bl	1246c <radio_disable>
}
    d45a:	b005      	add	sp, #20
    d45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d45e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d460:	7fa6      	ldrb	r6, [r4, #30]
    d462:	fb01 6606 	mla	r6, r1, r6, r6
    d466:	7fe1      	ldrb	r1, [r4, #31]
    d468:	2025      	movs	r0, #37	; 0x25
    d46a:	440e      	add	r6, r1
    d46c:	fb96 f1f0 	sdiv	r1, r6, r0
    d470:	fb00 6611 	mls	r6, r0, r1, r6
    d474:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d476:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d478:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d47a:	5c51      	ldrb	r1, [r2, r1]
    d47c:	f006 0607 	and.w	r6, r6, #7
    d480:	fa41 f606 	asr.w	r6, r1, r6
    d484:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d48a:	d4ce      	bmi.n	d42a <event_master+0xce>
		chan_index = chan_next % chan_count;
    d48c:	fbb0 f1f3 	udiv	r1, r0, r3
    d490:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d494:	b2c9      	uxtb	r1, r1
    d496:	4610      	mov	r0, r2
    d498:	f7fc fbd2 	bl	9c40 <chan_sel_remap>
    d49c:	e7c5      	b.n	d42a <event_master+0xce>
		ticker_status =
    d49e:	4a0e      	ldr	r2, [pc, #56]	; (d4d8 <event_master+0x17c>)
    d4a0:	4601      	mov	r1, r0
    d4a2:	f7fa fd8f 	bl	7fc4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d4a6:	f030 0302 	bics.w	r3, r0, #2
    d4aa:	d0d6      	beq.n	d45a <event_master+0xfe>
    d4ac:	4b04      	ldr	r3, [pc, #16]	; (d4c0 <event_master+0x164>)
    d4ae:	9301      	str	r3, [sp, #4]
    d4b0:	9300      	str	r3, [sp, #0]
    d4b2:	4a04      	ldr	r2, [pc, #16]	; (d4c4 <event_master+0x168>)
    d4b4:	4b04      	ldr	r3, [pc, #16]	; (d4c8 <event_master+0x16c>)
    d4b6:	4905      	ldr	r1, [pc, #20]	; (d4cc <event_master+0x170>)
    d4b8:	4808      	ldr	r0, [pc, #32]	; (d4dc <event_master+0x180>)
    d4ba:	e760      	b.n	d37e <event_master+0x22>
    d4bc:	200008c0 	.word	0x200008c0
    d4c0:	00014b99 	.word	0x00014b99
    d4c4:	00015f55 	.word	0x00015f55
    d4c8:	00017585 	.word	0x00017585
    d4cc:	00015fa4 	.word	0x00015fa4
    d4d0:	000177bd 	.word	0x000177bd
    d4d4:	00017870 	.word	0x00017870
    d4d8:	0000ad75 	.word	0x0000ad75
    d4dc:	000176a1 	.word	0x000176a1

0000d4e0 <isr_rx_conn_pkt_ctrl>:
{
    d4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d4e4:	7ac7      	ldrb	r7, [r0, #11]
{
    d4e6:	4604      	mov	r4, r0
    d4e8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d4ea:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d4ee:	2f19      	cmp	r7, #25
    d4f0:	f201 80e0 	bhi.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
    d4f4:	e8df f017 	tbh	[pc, r7, lsl #1]
    d4f8:	0081001a 	.word	0x0081001a
    d4fc:	00cc00bd 	.word	0x00cc00bd
    d500:	012200fa 	.word	0x012200fa
    d504:	05850154 	.word	0x05850154
    d508:	01c40190 	.word	0x01c40190
    d50c:	021c01f2 	.word	0x021c01f2
    d510:	02b6024d 	.word	0x02b6024d
    d514:	02ce01a6 	.word	0x02ce01a6
    d518:	04a40421 	.word	0x04a40421
    d51c:	057a0560 	.word	0x057a0560
    d520:	06480648 	.word	0x06480648
    d524:	07ea071d 	.word	0x07ea071d
    d528:	08ab0821 	.word	0x08ab0821
		if (!_radio.conn_curr->role ||
    d52c:	4ecb      	ldr	r6, [pc, #812]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d52e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d532:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d536:	2b00      	cmp	r3, #0
    d538:	f281 80bc 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d53c:	7a41      	ldrb	r1, [r0, #9]
    d53e:	2000      	movs	r0, #0
    d540:	f7fc fb52 	bl	9be8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d544:	2800      	cmp	r0, #0
    d546:	f001 80b5 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d54a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d54e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d550:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d552:	041b      	lsls	r3, r3, #16
    d554:	f101 80c4 	bmi.w	e6e0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d558:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d55c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d560:	429a      	cmp	r2, r3
    d562:	d007      	beq.n	d574 <isr_rx_conn_pkt_ctrl+0x94>
    d564:	4bbe      	ldr	r3, [pc, #760]	; (d860 <isr_rx_conn_pkt_ctrl+0x380>)
    d566:	9301      	str	r3, [sp, #4]
    d568:	9300      	str	r3, [sp, #0]
    d56a:	4bbe      	ldr	r3, [pc, #760]	; (d864 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d56c:	4abe      	ldr	r2, [pc, #760]	; (d868 <isr_rx_conn_pkt_ctrl+0x388>)
    d56e:	49bf      	ldr	r1, [pc, #764]	; (d86c <isr_rx_conn_pkt_ctrl+0x38c>)
    d570:	48bf      	ldr	r0, [pc, #764]	; (d870 <isr_rx_conn_pkt_ctrl+0x390>)
    d572:	e0f7      	b.n	d764 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
    d574:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d578:	b90a      	cbnz	r2, d57e <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
    d57a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d57e:	7b22      	ldrb	r2, [r4, #12]
    d580:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d584:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d588:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d58c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d58e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d592:	7c20      	ldrb	r0, [r4, #16]
    d594:	7be2      	ldrb	r2, [r4, #15]
    d596:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d59a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d59e:	7ca0      	ldrb	r0, [r4, #18]
    d5a0:	7c62      	ldrb	r2, [r4, #17]
    d5a2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d5a6:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d5aa:	7ce2      	ldrb	r2, [r4, #19]
    d5ac:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d5ae:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d5b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d5b6:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d5ba:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d5be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d5c2:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d5c6:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d5c8:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d5cc:	2201      	movs	r2, #1
    d5ce:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d5d2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d5d6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d5da:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d5de:	4293      	cmp	r3, r2
    d5e0:	d007      	beq.n	d5f2 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d5e2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d5e6:	f003 0307 	and.w	r3, r3, #7
    d5ea:	2b04      	cmp	r3, #4
    d5ec:	d101      	bne.n	d5f2 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d5ee:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d5f2:	2000      	movs	r0, #0
    d5f4:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d5f8:	e038      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d5fa:	4b98      	ldr	r3, [pc, #608]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d5fc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d600:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d604:	2b00      	cmp	r3, #0
    d606:	f281 8055 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d60a:	7a41      	ldrb	r1, [r0, #9]
    d60c:	2001      	movs	r0, #1
    d60e:	f7fc faeb 	bl	9be8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d612:	2800      	cmp	r0, #0
    d614:	f001 804e 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d618:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d61c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d61e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d620:	041f      	lsls	r7, r3, #16
    d622:	f101 805d 	bmi.w	e6e0 <isr_rx_conn_pkt_ctrl+0x1200>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d626:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d62a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d62e:	429a      	cmp	r2, r3
    d630:	d004      	beq.n	d63c <isr_rx_conn_pkt_ctrl+0x15c>
    d632:	4b8b      	ldr	r3, [pc, #556]	; (d860 <isr_rx_conn_pkt_ctrl+0x380>)
    d634:	9301      	str	r3, [sp, #4]
    d636:	9300      	str	r3, [sp, #0]
    d638:	4b8e      	ldr	r3, [pc, #568]	; (d874 <isr_rx_conn_pkt_ctrl+0x394>)
    d63a:	e797      	b.n	d56c <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
    d63c:	2205      	movs	r2, #5
    d63e:	f104 010c 	add.w	r1, r4, #12
    d642:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d646:	f7f4 fae5 	bl	1c14 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d64a:	7c63      	ldrb	r3, [r4, #17]
    d64c:	7ca2      	ldrb	r2, [r4, #18]
    d64e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d652:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d656:	2302      	movs	r3, #2
    d658:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d65c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d660:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d662:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d664:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d668:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d66c:	b003      	add	sp, #12
    d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d672:	7a41      	ldrb	r1, [r0, #9]
    d674:	2002      	movs	r0, #2
    d676:	f7fc fab7 	bl	9be8 <pdu_len_cmp>
    d67a:	2800      	cmp	r0, #0
    d67c:	f001 801a 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d680:	4b76      	ldr	r3, [pc, #472]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d682:	7b22      	ldrb	r2, [r4, #12]
    d684:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d688:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d68c:	2000      	movs	r0, #0
	return nack;
    d68e:	e7ed      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d690:	4e72      	ldr	r6, [pc, #456]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d692:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d696:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d69a:	2b00      	cmp	r3, #0
    d69c:	f281 800a 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d6a0:	7a41      	ldrb	r1, [r0, #9]
    d6a2:	2003      	movs	r0, #3
    d6a4:	f7fc faa0 	bl	9be8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d6a8:	2800      	cmp	r0, #0
    d6aa:	f001 8003 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d6ae:	2208      	movs	r2, #8
    d6b0:	f104 0116 	add.w	r1, r4, #22
    d6b4:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d6b8:	f7f4 faac 	bl	1c14 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d6bc:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d6c0:	2204      	movs	r2, #4
    d6c2:	f104 011e 	add.w	r1, r4, #30
    d6c6:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d6ca:	f7f4 faa3 	bl	1c14 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d6ce:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d6d2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d6d6:	f042 0204 	orr.w	r2, r2, #4
    d6da:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d6de:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d6e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d6e6:	2301      	movs	r3, #1
    d6e8:	702b      	strb	r3, [r5, #0]
    d6ea:	e7cf      	b.n	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    d6ec:	4d5b      	ldr	r5, [pc, #364]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d6ee:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d6f2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	f2c0 87dc 	blt.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d6fc:	7a41      	ldrb	r1, [r0, #9]
    d6fe:	2004      	movs	r0, #4
    d700:	f7fc fa72 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d704:	2800      	cmp	r0, #0
    d706:	f000 87d5 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d70a:	2208      	movs	r2, #8
    d70c:	f104 010c 	add.w	r1, r4, #12
    d710:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d714:	f7f4 fa7e 	bl	1c14 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d718:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d71c:	2204      	movs	r2, #4
    d71e:	f104 0114 	add.w	r1, r4, #20
    d722:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d726:	f7f4 fa75 	bl	1c14 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d72a:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d72e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d732:	f043 0304 	orr.w	r3, r3, #4
    d736:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d73a:	e7a7      	b.n	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d73c:	4b47      	ldr	r3, [pc, #284]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d73e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d742:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d746:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d74a:	42b3      	cmp	r3, r6
    d74c:	d012      	beq.n	d774 <isr_rx_conn_pkt_ctrl+0x294>
    d74e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d752:	2b03      	cmp	r3, #3
    d754:	d00e      	beq.n	d774 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d756:	4b42      	ldr	r3, [pc, #264]	; (d860 <isr_rx_conn_pkt_ctrl+0x380>)
    d758:	9301      	str	r3, [sp, #4]
    d75a:	9300      	str	r3, [sp, #0]
    d75c:	4a42      	ldr	r2, [pc, #264]	; (d868 <isr_rx_conn_pkt_ctrl+0x388>)
    d75e:	4b46      	ldr	r3, [pc, #280]	; (d878 <isr_rx_conn_pkt_ctrl+0x398>)
    d760:	4942      	ldr	r1, [pc, #264]	; (d86c <isr_rx_conn_pkt_ctrl+0x38c>)
    d762:	4846      	ldr	r0, [pc, #280]	; (d87c <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d764:	f7f3 fc12 	bl	f8c <printk>
    d768:	4040      	eors	r0, r0
    d76a:	f380 8811 	msr	BASEPRI, r0
    d76e:	f04f 0004 	mov.w	r0, #4
    d772:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d774:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d778:	2b00      	cmp	r3, #0
    d77a:	f2c0 879b 	blt.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d77e:	7a61      	ldrb	r1, [r4, #9]
    d780:	2005      	movs	r0, #5
    d782:	f7fc fa31 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d786:	2800      	cmp	r0, #0
    d788:	f000 8794 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d78c:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d78e:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d790:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d792:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d796:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d79a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d79e:	e765      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d7a0:	7a41      	ldrb	r1, [r0, #9]
    d7a2:	2006      	movs	r0, #6
    d7a4:	f7fc fa20 	bl	9be8 <pdu_len_cmp>
    d7a8:	2800      	cmp	r0, #0
    d7aa:	f000 8783 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_SLAVE) {
    d7ae:	4b2b      	ldr	r3, [pc, #172]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d7b0:	7cda      	ldrb	r2, [r3, #19]
    d7b2:	2a03      	cmp	r2, #3
    d7b4:	4619      	mov	r1, r3
    d7b6:	d124      	bne.n	d802 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d7b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d7bc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d7c0:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d7c4:	4290      	cmp	r0, r2
    d7c6:	d003      	beq.n	d7d0 <isr_rx_conn_pkt_ctrl+0x2f0>
    d7c8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d7cc:	2803      	cmp	r0, #3
    d7ce:	d1c2      	bne.n	d756 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d7d0:	2000      	movs	r0, #0
    d7d2:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d7d6:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d7d8:	2003      	movs	r0, #3
    d7da:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d7de:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d7e2:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d7e6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d7ea:	065e      	lsls	r6, r3, #25
    d7ec:	d505      	bpl.n	d7fa <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
    d7ee:	f36f 1386 	bfc	r3, #6, #1
    d7f2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d7f6:	2309      	movs	r3, #9
    d7f8:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d7fa:	2301      	movs	r3, #1
    d7fc:	702b      	strb	r3, [r5, #0]
				break;
    d7fe:	f000 bcbf 	b.w	e180 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
    d802:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d806:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d80a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d80e:	f36f 03c3 	bfc	r3, #3, #1
    d812:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d816:	e7e4      	b.n	d7e2 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
    d818:	4b10      	ldr	r3, [pc, #64]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d81a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d81e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d822:	2b00      	cmp	r3, #0
    d824:	f280 8746 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d828:	7a41      	ldrb	r1, [r0, #9]
    d82a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d82c:	f7fc f9dc 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d830:	2800      	cmp	r0, #0
    d832:	f000 873f 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d836:	4631      	mov	r1, r6
    d838:	4628      	mov	r0, r5
}
    d83a:	b003      	add	sp, #12
    d83c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d840:	f7fe ba7e 	b.w	bd40 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d844:	4b05      	ldr	r3, [pc, #20]	; (d85c <isr_rx_conn_pkt_ctrl+0x37c>)
    d846:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d84a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d84e:	2b00      	cmp	r3, #0
    d850:	f2c0 8730 	blt.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d854:	7a41      	ldrb	r1, [r0, #9]
    d856:	200e      	movs	r0, #14
    d858:	e7e8      	b.n	d82c <isr_rx_conn_pkt_ctrl+0x34c>
    d85a:	bf00      	nop
    d85c:	200008c0 	.word	0x200008c0
    d860:	00014b99 	.word	0x00014b99
    d864:	000175e4 	.word	0x000175e4
    d868:	00015f55 	.word	0x00015f55
    d86c:	00015fa4 	.word	0x00015fa4
    d870:	00017a6c 	.word	0x00017a6c
    d874:	000175f0 	.word	0x000175f0
    d878:	00017296 	.word	0x00017296
    d87c:	00017aae 	.word	0x00017aae
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d880:	7a41      	ldrb	r1, [r0, #9]
    d882:	2009      	movs	r0, #9
    d884:	f7fc f9b0 	bl	9be8 <pdu_len_cmp>
    d888:	2800      	cmp	r0, #0
    d88a:	f000 8713 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d88e:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d890:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d892:	48b2      	ldr	r0, [pc, #712]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d898:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d89c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d8a0:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d8a4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d8a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d8ac:	7ba1      	ldrb	r1, [r4, #14]
    d8ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d8b2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d8b6:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d8ba:	400b      	ands	r3, r1
    d8bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d8c0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d8c4:	f043 0320 	orr.w	r3, r3, #32
    d8c8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d8cc:	2301      	movs	r3, #1
    d8ce:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d8d0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d8d4:	2000      	movs	r0, #0
    d8d6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d8da:	e6c7      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
    d8dc:	4e9f      	ldr	r6, [pc, #636]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
    d8de:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d8e2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	f280 86e4 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d8ec:	7a41      	ldrb	r1, [r0, #9]
    d8ee:	200a      	movs	r0, #10
    d8f0:	f7fc f97a 	bl	9be8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d8f4:	2800      	cmp	r0, #0
    d8f6:	f000 86dd 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d8fa:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d8fe:	f7f9 fbbc 	bl	707a <mem_acquire>
		if (!node_tx) {
    d902:	4601      	mov	r1, r0
    d904:	b908      	cbnz	r0, d90a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d906:	2001      	movs	r0, #1
    d908:	e6b0      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
    d90a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d90e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d912:	f36f 1304 	bfc	r3, #4, #1
    d916:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d91a:	7903      	ldrb	r3, [r0, #4]
    d91c:	f043 0303 	orr.w	r3, r3, #3
    d920:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d922:	2301      	movs	r3, #1
    d924:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d926:	230b      	movs	r3, #11
    d928:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d92a:	4628      	mov	r0, r5
    d92c:	f000 bcdc 	b.w	e2e8 <isr_rx_conn_pkt_ctrl+0xe08>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d930:	7a41      	ldrb	r1, [r0, #9]
    d932:	200b      	movs	r0, #11
    d934:	f7fc f958 	bl	9be8 <pdu_len_cmp>
    d938:	2800      	cmp	r0, #0
    d93a:	f000 86bb 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d93e:	4887      	ldr	r0, [pc, #540]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
    d940:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d944:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d948:	2b00      	cmp	r3, #0
    d94a:	db1b      	blt.n	d984 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d94c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d950:	f7f9 fb93 	bl	707a <mem_acquire>
		if (!node_tx) {
    d954:	4601      	mov	r1, r0
    d956:	2800      	cmp	r0, #0
    d958:	d0d5      	beq.n	d906 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
    d95a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d95e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d962:	f043 0304 	orr.w	r3, r3, #4
    d966:	f36f 1304 	bfc	r3, #4, #1
    d96a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d96e:	7903      	ldrb	r3, [r0, #4]
    d970:	f043 0303 	orr.w	r3, r3, #3
    d974:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d976:	2301      	movs	r3, #1
    d978:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d97a:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d97c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d97e:	4620      	mov	r0, r4
    d980:	f000 bcb2 	b.w	e2e8 <isr_rx_conn_pkt_ctrl+0xe08>
		conn->enc_tx = 0;
    d984:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d988:	f36f 1345 	bfc	r3, #5, #1
    d98c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d990:	e67c      	b.n	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d992:	7a41      	ldrb	r1, [r0, #9]
    d994:	200c      	movs	r0, #12
    d996:	f7fc f927 	bl	9be8 <pdu_len_cmp>
    d99a:	2800      	cmp	r0, #0
    d99c:	f000 868a 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d9a0:	486e      	ldr	r0, [pc, #440]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
    d9a2:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d9a6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d9aa:	f013 0701 	ands.w	r7, r3, #1
    d9ae:	d150      	bne.n	da52 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d9b0:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d9b4:	f7f9 fb61 	bl	707a <mem_acquire>
		if (!node_tx) {
    d9b8:	4601      	mov	r1, r0
    d9ba:	2800      	cmp	r0, #0
    d9bc:	d0a3      	beq.n	d906 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
    d9be:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d9c2:	f043 0301 	orr.w	r3, r3, #1
    d9c6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9ca:	7903      	ldrb	r3, [r0, #4]
    d9cc:	f043 0303 	orr.w	r3, r3, #3
    d9d0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d9d2:	2306      	movs	r3, #6
    d9d4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d9d6:	230c      	movs	r3, #12
    d9d8:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d9da:	2309      	movs	r3, #9
    d9dc:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d9de:	f06f 030e 	mvn.w	r3, #14
    d9e2:	7243      	strb	r3, [r0, #9]
    d9e4:	2305      	movs	r3, #5
    d9e6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9ec:	72c3      	strb	r3, [r0, #11]
    d9ee:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d9f0:	4630      	mov	r0, r6
    d9f2:	f7fe f98b 	bl	bd0c <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d9f6:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d9fe:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    da02:	f004 fd85 	bl	12510 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    da06:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    da08:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    da0a:	2201      	movs	r2, #1
    da0c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    da10:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    da14:	7003      	strb	r3, [r0, #0]
    da16:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    da18:	b1c2      	cbz	r2, da4c <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
    da1a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    da1e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    da20:	7b23      	ldrb	r3, [r4, #12]
    da22:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    da26:	7ba2      	ldrb	r2, [r4, #14]
    da28:	7b63      	ldrb	r3, [r4, #13]
    da2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da2e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    da32:	7be3      	ldrb	r3, [r4, #15]
    da34:	7c22      	ldrb	r2, [r4, #16]
    da36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da3a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    da3e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    da42:	f043 0302 	orr.w	r3, r3, #2
    da46:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    da4a:	e61f      	b.n	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
    da4c:	f362 1304 	bfi	r3, r2, #4, #1
    da50:	e7e5      	b.n	da1e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
    da52:	f013 0302 	ands.w	r3, r3, #2
    da56:	f47f ae19 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
    da5a:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    da5e:	2301      	movs	r3, #1
    da60:	702b      	strb	r3, [r5, #0]
    da62:	e7dd      	b.n	da20 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    da64:	7a41      	ldrb	r1, [r0, #9]
    da66:	200d      	movs	r0, #13
    da68:	f7fc f8be 	bl	9be8 <pdu_len_cmp>
    da6c:	2800      	cmp	r0, #0
    da6e:	f000 8621 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->pause_rx = 0;
    da72:	4b3a      	ldr	r3, [pc, #232]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
    da74:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    da78:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    da7c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    da80:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    da84:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    da86:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    da8a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    da8e:	2301      	movs	r3, #1
    da90:	702b      	strb	r3, [r5, #0]
    da92:	e5eb      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    da94:	7a41      	ldrb	r1, [r0, #9]
    da96:	200f      	movs	r0, #15
    da98:	f7fc f8a6 	bl	9be8 <pdu_len_cmp>
    da9c:	2800      	cmp	r0, #0
    da9e:	f000 8609 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    daa2:	4b2e      	ldr	r3, [pc, #184]	; (db5c <isr_rx_conn_pkt_ctrl+0x67c>)
    daa4:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    daa8:	461a      	mov	r2, r3
    daaa:	b151      	cbz	r1, dac2 <isr_rx_conn_pkt_ctrl+0x5e2>
    daac:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    dab0:	4281      	cmp	r1, r0
    dab2:	d006      	beq.n	dac2 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    dab4:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    dab6:	210f      	movs	r1, #15
}
    dab8:	b003      	add	sp, #12
    daba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    dabe:	f7fe b9a9 	b.w	be14 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    dac2:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    dac6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    daca:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    dace:	2b00      	cmp	r3, #0
    dad0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    dad4:	f2c0 80a7 	blt.w	dc26 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
    dad8:	4299      	cmp	r1, r3
    dada:	d009      	beq.n	daf0 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
    dadc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    dae0:	f013 0307 	ands.w	r3, r3, #7
    dae4:	d002      	beq.n	daec <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
    dae6:	3b04      	subs	r3, #4
    dae8:	2b01      	cmp	r3, #1
    daea:	d801      	bhi.n	daf0 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
    daec:	2223      	movs	r2, #35	; 0x23
    daee:	e7e2      	b.n	dab6 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    daf0:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    daf4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    daf8:	4299      	cmp	r1, r3
    dafa:	d003      	beq.n	db04 <isr_rx_conn_pkt_ctrl+0x624>
    dafc:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    db00:	2b03      	cmp	r3, #3
    db02:	d105      	bne.n	db10 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    db04:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    db08:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    db0c:	4299      	cmp	r1, r3
    db0e:	d001      	beq.n	db14 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
    db10:	222a      	movs	r2, #42	; 0x2a
    db12:	e7d0      	b.n	dab6 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
    db14:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    db18:	4643      	mov	r3, r8
    db1a:	2b05      	cmp	r3, #5
    db1c:	d91b      	bls.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    db1e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    db20:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    db24:	d817      	bhi.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
    db26:	45b8      	cmp	r8, r7
    db28:	d815      	bhi.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
    db2a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    db2e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    db32:	d210      	bcs.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
    db34:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    db38:	f1ae 060a 	sub.w	r6, lr, #10
    db3c:	b2b6      	uxth	r6, r6
    db3e:	f640 4976 	movw	r9, #3190	; 0xc76
    db42:	454e      	cmp	r6, r9
    db44:	d807      	bhi.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
    db46:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    db4a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    db4e:	da02      	bge.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
    db50:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    db52:	428f      	cmp	r7, r1
    db54:	d204      	bcs.n	db60 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
    db56:	221e      	movs	r2, #30
    db58:	e7ad      	b.n	dab6 <isr_rx_conn_pkt_ctrl+0x5d6>
    db5a:	bf00      	nop
    db5c:	200008c0 	.word	0x200008c0
				conn->llcp_conn_param.interval = cpr->interval_min;
    db60:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    db64:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    db68:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    db6c:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    db70:	7da6      	ldrb	r6, [r4, #22]
    db72:	7d61      	ldrb	r1, [r4, #21]
    db74:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    db78:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    db7c:	7e26      	ldrb	r6, [r4, #24]
    db7e:	7de1      	ldrb	r1, [r4, #23]
    db80:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db84:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    db88:	7ea6      	ldrb	r6, [r4, #26]
    db8a:	7e61      	ldrb	r1, [r4, #25]
    db8c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db90:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    db94:	7f26      	ldrb	r6, [r4, #28]
    db96:	7ee1      	ldrb	r1, [r4, #27]
    db98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db9c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    dba0:	7fa6      	ldrb	r6, [r4, #30]
    dba2:	7f61      	ldrb	r1, [r4, #29]
    dba4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dba8:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    dbac:	7fe1      	ldrb	r1, [r4, #31]
    dbae:	f894 6020 	ldrb.w	r6, [r4, #32]
    dbb2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dbb6:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    dbba:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dbbe:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dbc2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    dbc6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    dbca:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    dbce:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dbd0:	428c      	cmp	r4, r1
    dbd2:	d10f      	bne.n	dbf4 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    dbd4:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    dbd6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbda:	4361      	muls	r1, r4
    dbdc:	f242 7410 	movw	r4, #10000	; 0x2710
    dbe0:	fb04 130e 	mla	r3, r4, lr, r1
    dbe4:	3b01      	subs	r3, #1
    dbe6:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    dbea:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    dbec:	b29b      	uxth	r3, r3
    dbee:	4299      	cmp	r1, r3
    dbf0:	f000 8092 	beq.w	dd18 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
    dbf4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    dbf8:	071c      	lsls	r4, r3, #28
    dbfa:	f140 8087 	bpl.w	dd0c <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
    dbfe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dc02:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    dc04:	f361 0302 	bfi	r3, r1, #0, #3
    dc08:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    dc0c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    dc10:	3b01      	subs	r3, #1
    dc12:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    dc16:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	f47f ad36 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
    dc20:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    dc24:	e532      	b.n	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    dc26:	4299      	cmp	r1, r3
    dc28:	d003      	beq.n	dc32 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    dc2a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dc2e:	0799      	lsls	r1, r3, #30
    dc30:	d17b      	bne.n	dd2a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
    dc32:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    dc36:	4643      	mov	r3, r8
    dc38:	2b05      	cmp	r3, #5
    dc3a:	d98c      	bls.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    dc3c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    dc3e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    dc42:	d888      	bhi.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
    dc44:	45b8      	cmp	r8, r7
    dc46:	d886      	bhi.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
    dc48:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    dc4c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    dc50:	d281      	bcs.n	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dc52:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    dc56:	f1ae 060a 	sub.w	r6, lr, #10
    dc5a:	b2b6      	uxth	r6, r6
    dc5c:	f640 4976 	movw	r9, #3190	; 0xc76
    dc60:	454e      	cmp	r6, r9
    dc62:	f63f af78 	bhi.w	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    dc66:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dc6a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    dc6e:	f6bf af72 	bge.w	db56 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    dc72:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    dc74:	428f      	cmp	r7, r1
    dc76:	f4ff af6e 	bcc.w	db56 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
    dc7a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dc7e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dc82:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dc86:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    dc8a:	7da6      	ldrb	r6, [r4, #22]
    dc8c:	7d61      	ldrb	r1, [r4, #21]
    dc8e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dc92:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dc96:	7e26      	ldrb	r6, [r4, #24]
    dc98:	7de1      	ldrb	r1, [r4, #23]
    dc9a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc9e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dca2:	7ea6      	ldrb	r6, [r4, #26]
    dca4:	7e61      	ldrb	r1, [r4, #25]
    dca6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dcaa:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dcae:	7f26      	ldrb	r6, [r4, #28]
    dcb0:	7ee1      	ldrb	r1, [r4, #27]
    dcb2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dcb6:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dcba:	7fa6      	ldrb	r6, [r4, #30]
    dcbc:	7f61      	ldrb	r1, [r4, #29]
    dcbe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dcc2:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dcc6:	7fe1      	ldrb	r1, [r4, #31]
    dcc8:	f894 6020 	ldrb.w	r6, [r4, #32]
    dccc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dcd0:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dcd4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dcd8:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dcdc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    dce0:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    dce4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    dce8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dcea:	428c      	cmp	r4, r1
    dcec:	d10e      	bne.n	dd0c <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    dcee:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    dcf0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dcf4:	4361      	muls	r1, r4
    dcf6:	f242 7410 	movw	r4, #10000	; 0x2710
    dcfa:	fb04 130e 	mla	r3, r4, lr, r1
    dcfe:	3b01      	subs	r3, #1
    dd00:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    dd04:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    dd06:	b29b      	uxth	r3, r3
    dd08:	4299      	cmp	r1, r3
    dd0a:	d005      	beq.n	dd18 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
    dd0c:	2301      	movs	r3, #1
    dd0e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    dd10:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dd14:	2103      	movs	r1, #3
    dd16:	e775      	b.n	dc04 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
    dd18:	2300      	movs	r3, #0
    dd1a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    dd1e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    dd22:	2101      	movs	r1, #1
    dd24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    dd28:	e76c      	b.n	dc04 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
    dd2a:	4bc9      	ldr	r3, [pc, #804]	; (e050 <isr_rx_conn_pkt_ctrl+0xb70>)
    dd2c:	9301      	str	r3, [sp, #4]
    dd2e:	9300      	str	r3, [sp, #0]
    dd30:	4ac8      	ldr	r2, [pc, #800]	; (e054 <isr_rx_conn_pkt_ctrl+0xb74>)
    dd32:	4bc9      	ldr	r3, [pc, #804]	; (e058 <isr_rx_conn_pkt_ctrl+0xb78>)
    dd34:	49c9      	ldr	r1, [pc, #804]	; (e05c <isr_rx_conn_pkt_ctrl+0xb7c>)
    dd36:	48ca      	ldr	r0, [pc, #808]	; (e060 <isr_rx_conn_pkt_ctrl+0xb80>)
    dd38:	e514      	b.n	d764 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
    dd3a:	4bca      	ldr	r3, [pc, #808]	; (e064 <isr_rx_conn_pkt_ctrl+0xb84>)
    dd3c:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    dd40:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dd44:	2b00      	cmp	r3, #0
    dd46:	f2c0 84b5 	blt.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    dd4a:	7a41      	ldrb	r1, [r0, #9]
    dd4c:	2010      	movs	r0, #16
    dd4e:	f7fb ff4b 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dd52:	2800      	cmp	r0, #0
    dd54:	f000 84ae 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (!_radio.conn_curr->role &&
    dd58:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    dd5c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    dd60:	429a      	cmp	r2, r3
    dd62:	f43f ac93 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
    dd66:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    dd6a:	f003 0307 	and.w	r3, r3, #7
    dd6e:	2b04      	cmp	r3, #4
    dd70:	f47f ac8c 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
    dd74:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    dd78:	fa1f f28e 	uxth.w	r2, lr
    dd7c:	2a05      	cmp	r2, #5
    dd7e:	d91b      	bls.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    dd80:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    dd82:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    dd86:	d817      	bhi.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
    dd88:	429a      	cmp	r2, r3
    dd8a:	d815      	bhi.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
    dd8c:	8a27      	ldrh	r7, [r4, #16]
    dd8e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    dd90:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    dd94:	d210      	bcs.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dd96:	8a66      	ldrh	r6, [r4, #18]
    dd98:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    dd9a:	f1a0 010a 	sub.w	r1, r0, #10
    dd9e:	b289      	uxth	r1, r1
    dda0:	f640 4c76 	movw	ip, #3190	; 0xc76
    dda4:	4561      	cmp	r1, ip
    dda6:	d807      	bhi.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    dda8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    ddac:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    ddb0:	da02      	bge.n	ddb8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    ddb2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    ddb4:	4293      	cmp	r3, r2
    ddb6:	d203      	bcs.n	ddc0 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
    ddb8:	221e      	movs	r2, #30
    ddba:	2110      	movs	r1, #16
    ddbc:	4628      	mov	r0, r5
    ddbe:	e67b      	b.n	dab8 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
    ddc0:	2000      	movs	r0, #0
    ddc2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    ddc6:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    ddca:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    ddce:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    ddd2:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    ddd6:	7da2      	ldrb	r2, [r4, #22]
    ddd8:	7d63      	ldrb	r3, [r4, #21]
    ddda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    ddde:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dde2:	7e22      	ldrb	r2, [r4, #24]
    dde4:	7de3      	ldrb	r3, [r4, #23]
    dde6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddea:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    ddee:	7ea2      	ldrb	r2, [r4, #26]
    ddf0:	7e63      	ldrb	r3, [r4, #25]
    ddf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddf6:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    ddfa:	7f22      	ldrb	r2, [r4, #28]
    ddfc:	7ee3      	ldrb	r3, [r4, #27]
    ddfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    de02:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    de06:	7fa2      	ldrb	r2, [r4, #30]
    de08:	7f63      	ldrb	r3, [r4, #29]
    de0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    de0e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    de12:	f894 2020 	ldrb.w	r2, [r4, #32]
    de16:	7fe3      	ldrb	r3, [r4, #31]
    de18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    de1c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    de20:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    de24:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    de28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    de2c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    de30:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    de34:	2201      	movs	r2, #1
    de36:	f362 0302 	bfi	r3, r2, #0, #3
    de3a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    de3e:	e415      	b.n	d66c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    de40:	7a41      	ldrb	r1, [r0, #9]
    de42:	2011      	movs	r0, #17
    de44:	f7fb fed0 	bl	9be8 <pdu_len_cmp>
    de48:	2800      	cmp	r0, #0
    de4a:	f000 8433 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    de4e:	4a85      	ldr	r2, [pc, #532]	; (e064 <isr_rx_conn_pkt_ctrl+0xb84>)
    de50:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    de54:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    de58:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    de5c:	4281      	cmp	r1, r0
    de5e:	7b21      	ldrb	r1, [r4, #12]
    de60:	d027      	beq.n	deb2 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    de62:	2916      	cmp	r1, #22
    de64:	f47f ac12 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
    de68:	7b61      	ldrb	r1, [r4, #13]
    de6a:	2923      	cmp	r1, #35	; 0x23
    de6c:	d00e      	beq.n	de8c <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
    de6e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    de72:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    de76:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    de7a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    de7e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    de82:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    de84:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    de88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    de8c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    de90:	0792      	lsls	r2, r2, #30
    de92:	f57f abfb 	bpl.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de96:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    de98:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de9a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    de9c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    dea0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dea4:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    dea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    deaa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    deae:	7363      	strb	r3, [r4, #13]
    deb0:	e419      	b.n	d6e6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
    deb2:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    deb6:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    deba:	42b8      	cmp	r0, r7
    debc:	d048      	beq.n	df50 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    debe:	290f      	cmp	r1, #15
    dec0:	f47f abe4 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
    dec4:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dec8:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    deca:	2800      	cmp	r0, #0
    decc:	db0e      	blt.n	deec <isr_rx_conn_pkt_ctrl+0xa0c>
    dece:	291a      	cmp	r1, #26
    ded0:	d10c      	bne.n	deec <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    ded2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    ded6:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    deda:	4294      	cmp	r4, r2
    dedc:	f000 80c8 	beq.w	e070 <isr_rx_conn_pkt_ctrl+0xb90>
    dee0:	4b5b      	ldr	r3, [pc, #364]	; (e050 <isr_rx_conn_pkt_ctrl+0xb70>)
    dee2:	9301      	str	r3, [sp, #4]
    dee4:	9300      	str	r3, [sp, #0]
    dee6:	4b60      	ldr	r3, [pc, #384]	; (e068 <isr_rx_conn_pkt_ctrl+0xb88>)
    dee8:	f7ff bb40 	b.w	d56c <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
    deec:	2923      	cmp	r1, #35	; 0x23
    deee:	d018      	beq.n	df22 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
    def0:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    def4:	42b3      	cmp	r3, r6
    def6:	d007      	beq.n	df08 <isr_rx_conn_pkt_ctrl+0xa28>
    def8:	4b55      	ldr	r3, [pc, #340]	; (e050 <isr_rx_conn_pkt_ctrl+0xb70>)
    defa:	9301      	str	r3, [sp, #4]
    defc:	9300      	str	r3, [sp, #0]
    defe:	4b5a      	ldr	r3, [pc, #360]	; (e068 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
    df00:	4a54      	ldr	r2, [pc, #336]	; (e054 <isr_rx_conn_pkt_ctrl+0xb74>)
    df02:	4956      	ldr	r1, [pc, #344]	; (e05c <isr_rx_conn_pkt_ctrl+0xb7c>)
    df04:	4859      	ldr	r0, [pc, #356]	; (e06c <isr_rx_conn_pkt_ctrl+0xb8c>)
    df06:	e42d      	b.n	d764 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
    df08:	2600      	movs	r6, #0
		if (conn->role) {
    df0a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    df0c:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    df10:	bfb8      	it	lt
    df12:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    df16:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    df1a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    df1e:	bfb8      	it	lt
    df20:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    df22:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    df26:	0717      	lsls	r7, r2, #28
    df28:	f57f abb0 	bpl.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
    df2c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    df2e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    df30:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    df32:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    df34:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    df36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    df38:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    df3a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    df3c:	237d      	movs	r3, #125	; 0x7d
    df3e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    df40:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    df42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    df46:	fb93 f3f2 	sdiv	r3, r3, r2
    df4a:	8223      	strh	r3, [r4, #16]
    df4c:	f7ff bbcb 	b.w	d6e6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
    df50:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    df54:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    df58:	4290      	cmp	r0, r2
    df5a:	d01a      	beq.n	df92 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    df5c:	2914      	cmp	r1, #20
    df5e:	f47f ab95 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
    df62:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    df66:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    df6a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    df6c:	f360 02c3 	bfi	r2, r0, #3, #1
    df70:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    df74:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    df76:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    df7a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    df7c:	2215      	movs	r2, #21
    df7e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    df80:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    df82:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    df84:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    df86:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    df88:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    df8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    df8c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    df8e:	8263      	strh	r3, [r4, #18]
    df90:	e57d      	b.n	da8e <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
    df92:	2903      	cmp	r1, #3
    df94:	f47f ab7a 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
    df98:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    df9c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    dfa0:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    dfa4:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    dfa6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    dfaa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    dfae:	230d      	movs	r3, #13
    dfb0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    dfb2:	7b63      	ldrb	r3, [r4, #13]
    dfb4:	7323      	strb	r3, [r4, #12]
    dfb6:	e56a      	b.n	da8e <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    dfb8:	7a41      	ldrb	r1, [r0, #9]
    dfba:	2012      	movs	r0, #18
    dfbc:	f7fb fe14 	bl	9be8 <pdu_len_cmp>
    dfc0:	2800      	cmp	r0, #0
    dfc2:	f000 8377 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		nack = ping_resp_send(_radio.conn_curr);
    dfc6:	4827      	ldr	r0, [pc, #156]	; (e064 <isr_rx_conn_pkt_ctrl+0xb84>)
    dfc8:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dfcc:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    dfd0:	f7f9 f853 	bl	707a <mem_acquire>
	if (!node_tx) {
    dfd4:	4601      	mov	r1, r0
    dfd6:	2800      	cmp	r0, #0
    dfd8:	f43f ac95 	beq.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dfdc:	7903      	ldrb	r3, [r0, #4]
    dfde:	f043 0303 	orr.w	r3, r3, #3
    dfe2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    dfe4:	2301      	movs	r3, #1
    dfe6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    dfe8:	2313      	movs	r3, #19
    dfea:	e4c7      	b.n	d97c <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    dfec:	7a41      	ldrb	r1, [r0, #9]
    dfee:	2013      	movs	r0, #19
    dff0:	f7fb fdfa 	bl	9be8 <pdu_len_cmp>
    dff4:	2800      	cmp	r0, #0
    dff6:	f000 835d 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		_radio.conn_curr->procedure_expire = 0;
    dffa:	4b1a      	ldr	r3, [pc, #104]	; (e064 <isr_rx_conn_pkt_ctrl+0xb84>)
    dffc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    e000:	e468      	b.n	d8d4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    e002:	7a41      	ldrb	r1, [r0, #9]
    e004:	2007      	movs	r0, #7
    e006:	f7fb fdef 	bl	9be8 <pdu_len_cmp>
    e00a:	2800      	cmp	r0, #0
    e00c:	f000 8352 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e010:	4a14      	ldr	r2, [pc, #80]	; (e064 <isr_rx_conn_pkt_ctrl+0xb84>)
    e012:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    e016:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    e01a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    e01e:	42b1      	cmp	r1, r6
    e020:	4611      	mov	r1, r2
    e022:	d077      	beq.n	e114 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
    e024:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    e028:	f040 0010 	orr.w	r0, r0, #16
    e02c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    e030:	f993 001d 	ldrsb.w	r0, [r3, #29]
    e034:	2800      	cmp	r0, #0
    e036:	db47      	blt.n	e0c8 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e038:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    e03c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    e040:	4294      	cmp	r4, r2
    e042:	d015      	beq.n	e070 <isr_rx_conn_pkt_ctrl+0xb90>
    e044:	4b02      	ldr	r3, [pc, #8]	; (e050 <isr_rx_conn_pkt_ctrl+0xb70>)
    e046:	9301      	str	r3, [sp, #4]
    e048:	9300      	str	r3, [sp, #0]
    e04a:	4b03      	ldr	r3, [pc, #12]	; (e058 <isr_rx_conn_pkt_ctrl+0xb78>)
    e04c:	f7ff ba8e 	b.w	d56c <isr_rx_conn_pkt_ctrl+0x8c>
    e050:	00014b99 	.word	0x00014b99
    e054:	00015f55 	.word	0x00015f55
    e058:	00017296 	.word	0x00017296
    e05c:	00015fa4 	.word	0x00015fa4
    e060:	00015ec9 	.word	0x00015ec9
    e064:	200008c0 	.word	0x200008c0
    e068:	0001725b 	.word	0x0001725b
    e06c:	00017b3e 	.word	0x00017b3e
				conn->llcp_conn_param.state =
    e070:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e074:	2105      	movs	r1, #5
    e076:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e07a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e07e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e082:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e086:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e08a:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e08e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e092:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e096:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e09a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e09c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e0a0:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e0a4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e0a8:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e0aa:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e0ae:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e0b0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e0b4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e0b8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e0bc:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e0c0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e0c4:	f7ff bad2 	b.w	d66c <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
    e0c8:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e0cc:	4293      	cmp	r3, r2
    e0ce:	d004      	beq.n	e0da <isr_rx_conn_pkt_ctrl+0xbfa>
    e0d0:	4bc9      	ldr	r3, [pc, #804]	; (e3f8 <isr_rx_conn_pkt_ctrl+0xf18>)
    e0d2:	9301      	str	r3, [sp, #4]
    e0d4:	9300      	str	r3, [sp, #0]
    e0d6:	4bc9      	ldr	r3, [pc, #804]	; (e3fc <isr_rx_conn_pkt_ctrl+0xf1c>)
    e0d8:	e712      	b.n	df00 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
    e0da:	2200      	movs	r2, #0
    e0dc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e0e0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e0e4:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e0e8:	0716      	lsls	r6, r2, #28
    e0ea:	f57f aacf 	bpl.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e0ee:	2208      	movs	r2, #8
    e0f0:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e0f2:	221a      	movs	r2, #26
    e0f4:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e0f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e0f8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e0fc:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e0fe:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e100:	237d      	movs	r3, #125	; 0x7d
    e102:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e104:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e10a:	fb93 f3f2 	sdiv	r3, r3, r2
    e10e:	8223      	strh	r3, [r4, #16]
    e110:	f7ff bb73 	b.w	d7fa <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
    e114:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e118:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e11c:	4290      	cmp	r0, r2
    e11e:	d009      	beq.n	e134 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
    e120:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e124:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e128:	f36f 02c3 	bfc	r2, #3, #1
    e12c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e130:	f7ff bb63 	b.w	d7fa <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e134:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e138:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e13c:	4290      	cmp	r0, r2
    e13e:	d01b      	beq.n	e178 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
    e140:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e144:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e148:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e14c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e150:	f362 0002 	bfi	r0, r2, #0, #3
    e154:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e158:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e15c:	0780      	lsls	r0, r0, #30
    e15e:	d50f      	bpl.n	e180 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e160:	200c      	movs	r0, #12
    e162:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e164:	2000      	movs	r0, #0
    e166:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e168:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e16a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e16e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e172:	7363      	strb	r3, [r4, #13]
    e174:	f7ff bb41 	b.w	d7fa <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
    e178:	7b23      	ldrb	r3, [r4, #12]
    e17a:	2b12      	cmp	r3, #18
    e17c:	f47f ab3d 	bne.w	d7fa <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
    e180:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e184:	f7ff bba6 	b.w	d8d4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e188:	7a41      	ldrb	r1, [r0, #9]
    e18a:	2014      	movs	r0, #20
    e18c:	f7fb fd2c 	bl	9be8 <pdu_len_cmp>
    e190:	2800      	cmp	r0, #0
    e192:	f000 828f 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e196:	2f14      	cmp	r7, #20
    e198:	d127      	bne.n	e1ea <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e19a:	4899      	ldr	r0, [pc, #612]	; (e400 <isr_rx_conn_pkt_ctrl+0xf20>)
    e19c:	f7f8 ff6d 	bl	707a <mem_acquire>
		if (!node_tx) {
    e1a0:	4606      	mov	r6, r0
    e1a2:	2800      	cmp	r0, #0
    e1a4:	f43f abaf 	beq.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e1a8:	4f96      	ldr	r7, [pc, #600]	; (e404 <isr_rx_conn_pkt_ctrl+0xf24>)
    e1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e1ae:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e1b2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e1b6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e1b8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e1ba:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e1bc:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e1c0:	45e0      	cmp	r8, ip
    e1c2:	46b9      	mov	r9, r7
    e1c4:	f894 800b 	ldrb.w	r8, [r4, #11]
    e1c8:	d111      	bne.n	e1ee <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
    e1ca:	f1b8 0f14 	cmp.w	r8, #20
    e1ce:	d01a      	beq.n	e206 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e1d0:	f1b8 0f15 	cmp.w	r8, #21
    e1d4:	f000 8292 	beq.w	e6fc <isr_rx_conn_pkt_ctrl+0x121c>
    e1d8:	4b87      	ldr	r3, [pc, #540]	; (e3f8 <isr_rx_conn_pkt_ctrl+0xf18>)
    e1da:	9301      	str	r3, [sp, #4]
    e1dc:	9300      	str	r3, [sp, #0]
    e1de:	4a8a      	ldr	r2, [pc, #552]	; (e408 <isr_rx_conn_pkt_ctrl+0xf28>)
    e1e0:	4b8a      	ldr	r3, [pc, #552]	; (e40c <isr_rx_conn_pkt_ctrl+0xf2c>)
    e1e2:	498b      	ldr	r1, [pc, #556]	; (e410 <isr_rx_conn_pkt_ctrl+0xf30>)
    e1e4:	488b      	ldr	r0, [pc, #556]	; (e414 <isr_rx_conn_pkt_ctrl+0xf34>)
    e1e6:	f7ff babd 	b.w	d764 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
    e1ea:	2600      	movs	r6, #0
    e1ec:	e7dc      	b.n	e1a8 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
    e1ee:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e1f2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e1f6:	2f01      	cmp	r7, #1
    e1f8:	d9e7      	bls.n	e1ca <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e1fa:	2f02      	cmp	r7, #2
    e1fc:	d1e8      	bne.n	e1d0 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    e1fe:	f1a8 0714 	sub.w	r7, r8, #20
    e202:	2f01      	cmp	r7, #1
    e204:	d8e4      	bhi.n	e1d0 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e206:	89a7      	ldrh	r7, [r4, #12]
    e208:	2f1a      	cmp	r7, #26
    e20a:	d934      	bls.n	e276 <isr_rx_conn_pkt_ctrl+0xd96>
			eff_tx_octets = min(lr->max_rx_octets,
    e20c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    e210:	4547      	cmp	r7, r8
    e212:	bf28      	it	cs
    e214:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e216:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    e21a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    e21e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    e222:	bf34      	ite	cc
    e224:	4693      	movcc	fp, r2
    e226:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    e22a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    e22e:	d324      	bcc.n	e27a <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_time = min(lr->max_rx_time,
    e230:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    e234:	45d0      	cmp	r8, sl
    e236:	bf28      	it	cs
    e238:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    e23a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    e23e:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    e242:	bf34      	ite	cc
    e244:	4682      	movcc	sl, r0
    e246:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    e24a:	455a      	cmp	r2, fp
    e24c:	d050      	beq.n	e2f0 <isr_rx_conn_pkt_ctrl+0xe10>
			free_count_rx = packet_rx_acquired_count_get() +
    e24e:	f7fb fd13 	bl	9c78 <packet_rx_acquired_count_get>
    e252:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    e254:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    e258:	f7f8 ff3e 	bl	70d8 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    e25c:	4420      	add	r0, r4
    e25e:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    e260:	28ff      	cmp	r0, #255	; 0xff
    e262:	d90c      	bls.n	e27e <isr_rx_conn_pkt_ctrl+0xd9e>
    e264:	4b64      	ldr	r3, [pc, #400]	; (e3f8 <isr_rx_conn_pkt_ctrl+0xf18>)
    e266:	9301      	str	r3, [sp, #4]
    e268:	9300      	str	r3, [sp, #0]
    e26a:	4a67      	ldr	r2, [pc, #412]	; (e408 <isr_rx_conn_pkt_ctrl+0xf28>)
    e26c:	4b67      	ldr	r3, [pc, #412]	; (e40c <isr_rx_conn_pkt_ctrl+0xf2c>)
    e26e:	4968      	ldr	r1, [pc, #416]	; (e410 <isr_rx_conn_pkt_ctrl+0xf30>)
    e270:	4869      	ldr	r0, [pc, #420]	; (e418 <isr_rx_conn_pkt_ctrl+0xf38>)
    e272:	f7ff ba77 	b.w	d764 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e276:	460f      	mov	r7, r1
    e278:	e7cd      	b.n	e216 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e27a:	46f0      	mov	r8, lr
    e27c:	e7dd      	b.n	e23a <isr_rx_conn_pkt_ctrl+0xd5a>
			if (_radio.packet_rx_data_count == free_count_rx) {
    e27e:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    e282:	4283      	cmp	r3, r0
    e284:	f040 8231 	bne.w	e6ea <isr_rx_conn_pkt_ctrl+0x120a>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e288:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    e28c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e290:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    e292:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    e294:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    e298:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    e29c:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    e2a0:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    e2a4:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    e2a8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    e2ac:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    e2b0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    e2b4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    e2b8:	2303      	movs	r3, #3
    e2ba:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    e2be:	2e00      	cmp	r6, #0
    e2c0:	f43f a9e4 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2c4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    e2c6:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    e2ca:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2ce:	f043 0303 	orr.w	r3, r3, #3
    e2d2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e2d4:	2309      	movs	r3, #9
    e2d6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e2d8:	2315      	movs	r3, #21
    e2da:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    e2dc:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    e2de:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    e2e2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    e2e6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    e2e8:	f7fd fce2 	bl	bcb0 <ctrl_tx_enqueue>
    e2ec:	f7ff b9ce 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
    e2f0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    e2f4:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    e2f8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    e2fc:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e300:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    e302:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    e306:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e30a:	d103      	bne.n	e314 <isr_rx_conn_pkt_ctrl+0xe34>
    e30c:	45c6      	cmp	lr, r8
    e30e:	d101      	bne.n	e314 <isr_rx_conn_pkt_ctrl+0xe34>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    e310:	4550      	cmp	r0, sl
    e312:	d0d4      	beq.n	e2be <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e314:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    e316:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    e31a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    e31e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    e320:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    e324:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    e326:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    e32a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    e32e:	702b      	strb	r3, [r5, #0]
    e330:	e7c5      	b.n	e2be <isr_rx_conn_pkt_ctrl+0xdde>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    e332:	7a41      	ldrb	r1, [r0, #9]
    e334:	2016      	movs	r0, #22
    e336:	f7fb fc57 	bl	9be8 <pdu_len_cmp>
    e33a:	2800      	cmp	r0, #0
    e33c:	f000 81ba 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if (_radio.role == ROLE_MASTER) {
    e340:	4830      	ldr	r0, [pc, #192]	; (e404 <isr_rx_conn_pkt_ctrl+0xf24>)
    e342:	7cc3      	ldrb	r3, [r0, #19]
    e344:	2b04      	cmp	r3, #4
    e346:	d169      	bne.n	e41c <isr_rx_conn_pkt_ctrl+0xf3c>
			if ((_radio.conn_curr->llcp_phy.ack !=
    e348:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    e34c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    e350:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    e354:	428b      	cmp	r3, r1
    e356:	d00a      	beq.n	e36e <isr_rx_conn_pkt_ctrl+0xe8e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e358:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e35c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e360:	3a01      	subs	r2, #1
    e362:	2a02      	cmp	r2, #2
    e364:	d803      	bhi.n	e36e <isr_rx_conn_pkt_ctrl+0xe8e>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e366:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e368:	2116      	movs	r1, #22
    e36a:	f7ff bba5 	b.w	dab8 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
    e36e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e372:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e376:	4295      	cmp	r5, r2
    e378:	d003      	beq.n	e382 <isr_rx_conn_pkt_ctrl+0xea2>
				     _radio.conn_curr->llcp_ack) &&
    e37a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e37e:	2a03      	cmp	r2, #3
    e380:	d105      	bne.n	e38e <isr_rx_conn_pkt_ctrl+0xeae>
				     LLCP_ENCRYPTION)) ||
    e382:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e386:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e38a:	4295      	cmp	r5, r2
    e38c:	d001      	beq.n	e392 <isr_rx_conn_pkt_ctrl+0xeb2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e38e:	222a      	movs	r2, #42	; 0x2a
    e390:	e7ea      	b.n	e368 <isr_rx_conn_pkt_ctrl+0xe88>
				_radio.conn_curr->llcp_phy.state =
    e392:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e396:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e398:	f042 0203 	orr.w	r2, r2, #3
    e39c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e3a0:	d116      	bne.n	e3d0 <isr_rx_conn_pkt_ctrl+0xef0>
					_radio.conn_curr->llcp_phy.ack--;
    e3a2:	3b01      	subs	r3, #1
    e3a4:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e3a8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e3ac:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e3b0:	f36f 0341 	bfc	r3, #1, #1
    e3b4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e3b8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e3bc:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e3c0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e3c4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e3c8:	f362 1347 	bfi	r3, r2, #5, #3
    e3cc:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e3d0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e3d4:	7b62      	ldrb	r2, [r4, #13]
    e3d6:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e3da:	400a      	ands	r2, r1
    e3dc:	f362 0384 	bfi	r3, r2, #2, #3
    e3e0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e3e4:	7b22      	ldrb	r2, [r4, #12]
    e3e6:	b2db      	uxtb	r3, r3
    e3e8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e3ec:	f362 1347 	bfi	r3, r2, #5, #3
    e3f0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e3f4:	f7ff b94a 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
    e3f8:	00014b99 	.word	0x00014b99
    e3fc:	00017296 	.word	0x00017296
    e400:	20000a1c 	.word	0x20000a1c
    e404:	200008c0 	.word	0x200008c0
    e408:	00015f55 	.word	0x00015f55
    e40c:	0001727d 	.word	0x0001727d
    e410:	00015fa4 	.word	0x00015fa4
    e414:	00017b77 	.word	0x00017b77
    e418:	000176ef 	.word	0x000176ef
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e41c:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e420:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e424:	f7f8 fe29 	bl	707a <mem_acquire>
	if (!node_tx) {
    e428:	4601      	mov	r1, r0
    e42a:	2800      	cmp	r0, #0
    e42c:	f43f aa6b 	beq.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e430:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e434:	2202      	movs	r2, #2
    e436:	f362 0301 	bfi	r3, r2, #0, #2
    e43a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e43e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e442:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e446:	4293      	cmp	r3, r2
    e448:	d11a      	bne.n	e480 <isr_rx_conn_pkt_ctrl+0xfa0>
		conn->llcp_phy.ack--;
    e44a:	3b01      	subs	r3, #1
    e44c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e450:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e454:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e458:	f36f 0341 	bfc	r3, #1, #1
    e45c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e460:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e464:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e468:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e46c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e470:	f362 1347 	bfi	r3, r2, #5, #3
    e474:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e478:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e47c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e480:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e484:	7b62      	ldrb	r2, [r4, #13]
    e486:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e48a:	4002      	ands	r2, r0
    e48c:	f362 0384 	bfi	r3, r2, #2, #3
    e490:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e494:	7b22      	ldrb	r2, [r4, #12]
    e496:	b2db      	uxtb	r3, r3
    e498:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e49c:	f362 1347 	bfi	r3, r2, #5, #3
    e4a0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e4a4:	790b      	ldrb	r3, [r1, #4]
    e4a6:	f043 0303 	orr.w	r3, r3, #3
    e4aa:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e4ac:	2303      	movs	r3, #3
    e4ae:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e4b0:	2317      	movs	r3, #23
    e4b2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e4b4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e4b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e4bc:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e4be:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e4c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e4c6:	724b      	strb	r3, [r1, #9]
    e4c8:	f7ff ba2f 	b.w	d92a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
    e4cc:	4e90      	ldr	r6, [pc, #576]	; (e710 <isr_rx_conn_pkt_ctrl+0x1230>)
    e4ce:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e4d2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	f2c0 80ec 	blt.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e4dc:	7a41      	ldrb	r1, [r0, #9]
    e4de:	2017      	movs	r0, #23
    e4e0:	f7fb fb82 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e4e4:	2800      	cmp	r0, #0
    e4e6:	f000 80e5 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		if ((_radio.role == ROLE_MASTER) &&
    e4ea:	7cf3      	ldrb	r3, [r6, #19]
    e4ec:	2b04      	cmp	r3, #4
    e4ee:	f47f a8cd 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
    e4f2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e4f6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e4fa:	429a      	cmp	r2, r3
    e4fc:	f43f a8c6 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
    e500:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e504:	f003 0203 	and.w	r2, r3, #3
    e508:	2a02      	cmp	r2, #2
    e50a:	f47f a8bf 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e50e:	f043 0303 	orr.w	r3, r3, #3
    e512:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e516:	7b62      	ldrb	r2, [r4, #13]
    e518:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e51c:	400a      	ands	r2, r1
    e51e:	f362 0384 	bfi	r3, r2, #2, #3
    e522:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e526:	7b22      	ldrb	r2, [r4, #12]
    e528:	b2db      	uxtb	r3, r3
    e52a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e52e:	f362 1347 	bfi	r3, r2, #5, #3
    e532:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e536:	f7ff b85c 	b.w	d5f2 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
    e53a:	4b75      	ldr	r3, [pc, #468]	; (e710 <isr_rx_conn_pkt_ctrl+0x1230>)
    e53c:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e540:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e544:	2b00      	cmp	r3, #0
    e546:	f280 80b5 	bge.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e54a:	7a41      	ldrb	r1, [r0, #9]
    e54c:	2018      	movs	r0, #24
    e54e:	f7fb fb4b 	bl	9be8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e552:	2800      	cmp	r0, #0
    e554:	f000 80ae 	beq.w	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e558:	7b27      	ldrb	r7, [r4, #12]
    e55a:	7b62      	ldrb	r2, [r4, #13]
    e55c:	ea47 0002 	orr.w	r0, r7, r2
    e560:	f010 0007 	ands.w	r0, r0, #7
    e564:	d125      	bne.n	e5b2 <isr_rx_conn_pkt_ctrl+0x10d2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e566:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e56a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e56e:	4293      	cmp	r3, r2
    e570:	f43f a88c 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e574:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e578:	f003 0303 	and.w	r3, r3, #3
    e57c:	2b02      	cmp	r3, #2
    e57e:	f47f a885 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
    e582:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e586:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e58a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e58c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e590:	f57f a87c 	bpl.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e594:	230c      	movs	r3, #12
		upd->status = 0;
    e596:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e598:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e59a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e59e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e5a2:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e5a4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e5a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e5ac:	7363      	strb	r3, [r4, #13]
    e5ae:	f7ff ba6e 	b.w	da8e <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e5b2:	89e0      	ldrh	r0, [r4, #14]
    e5b4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e5b6:	1ac3      	subs	r3, r0, r3
    e5b8:	041b      	lsls	r3, r3, #16
    e5ba:	f100 80a4 	bmi.w	e706 <isr_rx_conn_pkt_ctrl+0x1226>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e5be:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e5c2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e5c6:	428b      	cmp	r3, r1
    e5c8:	d005      	beq.n	e5d6 <isr_rx_conn_pkt_ctrl+0x10f6>
    e5ca:	4b52      	ldr	r3, [pc, #328]	; (e714 <isr_rx_conn_pkt_ctrl+0x1234>)
    e5cc:	9301      	str	r3, [sp, #4]
    e5ce:	9300      	str	r3, [sp, #0]
    e5d0:	4b51      	ldr	r3, [pc, #324]	; (e718 <isr_rx_conn_pkt_ctrl+0x1238>)
    e5d2:	f7fe bfcb 	b.w	d56c <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e5d6:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e5da:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e5de:	42a3      	cmp	r3, r4
    e5e0:	d014      	beq.n	e60c <isr_rx_conn_pkt_ctrl+0x112c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e5e2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e5e6:	f003 0303 	and.w	r3, r3, #3
    e5ea:	2b02      	cmp	r3, #2
    e5ec:	d10e      	bne.n	e60c <isr_rx_conn_pkt_ctrl+0x112c>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e5ee:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e5f2:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e5f6:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e5fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e5fe:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e602:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e604:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e608:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e60c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e610:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e614:	f002 0207 	and.w	r2, r2, #7
    e618:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e61c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e620:	f36f 0300 	bfc	r3, #0, #1
    e624:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e628:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e62a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e62c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e630:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e634:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e638:	2b00      	cmp	r3, #0
    e63a:	f43f a827 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e63e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e642:	f362 0302 	bfi	r3, r2, #0, #3
    e646:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e64a:	f7ff b81f 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
    e64e:	4e30      	ldr	r6, [pc, #192]	; (e710 <isr_rx_conn_pkt_ctrl+0x1230>)
    e650:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e654:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e658:	2b00      	cmp	r3, #0
    e65a:	db2b      	blt.n	e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e65c:	7a41      	ldrb	r1, [r0, #9]
    e65e:	2019      	movs	r0, #25
    e660:	f7fb fac2 	bl	9be8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e664:	b330      	cbz	r0, e6b4 <isr_rx_conn_pkt_ctrl+0x11d4>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e666:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e66a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e66e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e672:	7b22      	ldrb	r2, [r4, #12]
    e674:	f003 0307 	and.w	r3, r3, #7
    e678:	4213      	tst	r3, r2
    e67a:	f43f a807 	beq.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
    e67e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e682:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e686:	429a      	cmp	r2, r3
    e688:	f47f a800 	bne.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
    e68c:	2205      	movs	r2, #5
    e68e:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e692:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e696:	f7f3 fabd 	bl	1c14 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e69a:	2301      	movs	r3, #1
    e69c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e6a0:	2302      	movs	r3, #2
    e6a2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e6a6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e6aa:	3b01      	subs	r3, #1
    e6ac:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e6b0:	f7fe bfec 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
    e6b4:	4816      	ldr	r0, [pc, #88]	; (e710 <isr_rx_conn_pkt_ctrl+0x1230>)
    e6b6:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e6ba:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e6be:	f7f8 fcdc 	bl	707a <mem_acquire>
	if (!node_tx) {
    e6c2:	4601      	mov	r1, r0
    e6c4:	2800      	cmp	r0, #0
    e6c6:	f43f a91e 	beq.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e6ca:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e6cc:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e6ce:	f043 0303 	orr.w	r3, r3, #3
    e6d2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e6d4:	2302      	movs	r3, #2
    e6d6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e6d8:	2307      	movs	r3, #7
    e6da:	71c3      	strb	r3, [r0, #7]
    e6dc:	f7ff b94f 	b.w	d97e <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e6e0:	2328      	movs	r3, #40	; 0x28
    e6e2:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e6e6:	f7fe bfd1 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
    e6ea:	2e00      	cmp	r6, #0
    e6ec:	f43f a90b 	beq.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e6f0:	490a      	ldr	r1, [pc, #40]	; (e71c <isr_rx_conn_pkt_ctrl+0x123c>)
    e6f2:	4630      	mov	r0, r6
    e6f4:	f7f8 fcdb 	bl	70ae <mem_release>
    e6f8:	f7ff b905 	b.w	d906 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e6fc:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e6fe:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e700:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e702:	4693      	mov	fp, r2
    e704:	e5db      	b.n	e2be <isr_rx_conn_pkt_ctrl+0xdde>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e706:	2328      	movs	r3, #40	; 0x28
    e708:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e70c:	f7fe bfbe 	b.w	d68c <isr_rx_conn_pkt_ctrl+0x1ac>
    e710:	200008c0 	.word	0x200008c0
    e714:	00014b99 	.word	0x00014b99
    e718:	00017600 	.word	0x00017600
    e71c:	20000a1c 	.word	0x20000a1c

0000e720 <isr>:
{
    e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e724:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e726:	f003 fec9 	bl	124bc <radio_is_done>
    e72a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e72c:	b366      	cbz	r6, e788 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e72e:	f003 fee5 	bl	124fc <radio_crc_is_valid>
    e732:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e734:	f003 ff66 	bl	12604 <radio_filter_has_match>
    e738:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e73c:	f003 ff6c 	bl	12618 <radio_filter_match_get>
    e740:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e744:	f004 f950 	bl	129e8 <radio_ar_has_match>
    e748:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e74c:	f004 f93a 	bl	129c4 <radio_ar_match_get>
    e750:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e754:	f003 ff20 	bl	12598 <radio_rssi_is_ready>
    e758:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e75a:	4cb4      	ldr	r4, [pc, #720]	; (ea2c <isr+0x30c>)
	radio_status_reset();
    e75c:	f003 fe98 	bl	12490 <radio_status_reset>
	radio_tmr_status_reset();
    e760:	f003 ff6c 	bl	1263c <radio_tmr_status_reset>
	radio_filter_status_reset();
    e764:	f003 ff46 	bl	125f4 <radio_filter_status_reset>
	radio_ar_status_reset();
    e768:	f004 f932 	bl	129d0 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e76c:	f003 ff0c 	bl	12588 <radio_rssi_status_reset>
	switch (_radio.state) {
    e770:	7d23      	ldrb	r3, [r4, #20]
    e772:	2b05      	cmp	r3, #5
    e774:	f201 846e 	bhi.w	10054 <__kernel_ram_size+0x54>
    e778:	e8df f013 	tbh	[pc, r3, lsl #1]
    e77c:	00cd007c 	.word	0x00cd007c
    e780:	0a1c000e 	.word	0x0a1c000e
    e784:	0a1c0a1c 	.word	0x0a1c0a1c
		devmatch_id = irkmatch_id = 0xFF;
    e788:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e78c:	4635      	mov	r5, r6
    e78e:	46b2      	mov	sl, r6
    e790:	46b1      	mov	r9, r6
    e792:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e794:	46d8      	mov	r8, fp
    e796:	e7e0      	b.n	e75a <isr+0x3a>
	_radio.state = STATE_RX;
    e798:	2301      	movs	r3, #1
    e79a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e79c:	f004 f850 	bl	12840 <radio_tmr_tifs_base_get>
    e7a0:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e7a2:	2096      	movs	r0, #150	; 0x96
    e7a4:	f003 ff58 	bl	12658 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e7a8:	7ce3      	ldrb	r3, [r4, #19]
    e7aa:	3b01      	subs	r3, #1
    e7ac:	2b03      	cmp	r3, #3
    e7ae:	f200 80aa 	bhi.w	e906 <isr+0x1e6>
    e7b2:	e8df f003 	tbb	[pc, r3]
    e7b6:	3202      	.short	0x3202
    e7b8:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e7ba:	2300      	movs	r3, #0
    e7bc:	461a      	mov	r2, r3
    e7be:	4619      	mov	r1, r3
    e7c0:	4618      	mov	r0, r3
    e7c2:	f003 feb9 	bl	12538 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e7c6:	f003 fea7 	bl	12518 <radio_pkt_scratch_get>
    e7ca:	f003 fe29 	bl	12420 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e7ce:	f003 fe6b 	bl	124a8 <radio_is_ready>
    e7d2:	b138      	cbz	r0, e7e4 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
    e7d4:	4b96      	ldr	r3, [pc, #600]	; (ea30 <isr+0x310>)
    e7d6:	9301      	str	r3, [sp, #4]
    e7d8:	9300      	str	r3, [sp, #0]
    e7da:	4b96      	ldr	r3, [pc, #600]	; (ea34 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
    e7dc:	4a96      	ldr	r2, [pc, #600]	; (ea38 <isr+0x318>)
    e7de:	4997      	ldr	r1, [pc, #604]	; (ea3c <isr+0x31c>)
    e7e0:	4897      	ldr	r0, [pc, #604]	; (ea40 <isr+0x320>)
    e7e2:	e34b      	b.n	ee7c <isr+0x75c>
		if (ctrl_rl_enabled()) {
    e7e4:	f003 f95e 	bl	11aa4 <ctrl_rl_enabled>
    e7e8:	b138      	cbz	r0, e7fa <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
    e7ea:	a810      	add	r0, sp, #64	; 0x40
    e7ec:	f002 feaa 	bl	11544 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e7f0:	4601      	mov	r1, r0
    e7f2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e7f6:	f004 f8b3 	bl	12960 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e7fa:	2100      	movs	r1, #0
    e7fc:	4608      	mov	r0, r1
    e7fe:	f003 fe24 	bl	1244a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e802:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e804:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e806:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e808:	4608      	mov	r0, r1
    e80a:	f003 fe1a 	bl	12442 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e80e:	1a28      	subs	r0, r5, r0
    e810:	f003 ffac 	bl	1276c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e814:	f003 fffc 	bl	12810 <radio_tmr_end_capture>
    e818:	e02c      	b.n	e874 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e81a:	2300      	movs	r3, #0
    e81c:	461a      	mov	r2, r3
    e81e:	4619      	mov	r1, r3
    e820:	4618      	mov	r0, r3
    e822:	f003 fe89 	bl	12538 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e826:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e82a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e82e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e832:	3008      	adds	r0, #8
    e834:	f003 fdf4 	bl	12420 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e838:	f003 fe36 	bl	124a8 <radio_is_ready>
    e83c:	2800      	cmp	r0, #0
    e83e:	d1c9      	bne.n	e7d4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e840:	f003 f930 	bl	11aa4 <ctrl_rl_enabled>
    e844:	b138      	cbz	r0, e856 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
    e846:	a810      	add	r0, sp, #64	; 0x40
    e848:	f002 fe7c 	bl	11544 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e84c:	4601      	mov	r1, r0
    e84e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e852:	f004 f885 	bl	12960 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e856:	2100      	movs	r1, #0
    e858:	4608      	mov	r0, r1
    e85a:	f003 fdf6 	bl	1244a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e85e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e860:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e862:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e864:	4608      	mov	r0, r1
    e866:	f003 fdec 	bl	12442 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e86a:	1a28      	subs	r0, r5, r0
    e86c:	f003 ff7e 	bl	1276c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e870:	f003 fe7a 	bl	12568 <radio_rssi_measure>
}
    e874:	b013      	add	sp, #76	; 0x4c
    e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e87a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e87e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e882:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e886:	2100      	movs	r1, #0
    e888:	09d3      	lsrs	r3, r2, #7
    e88a:	f000 0007 	and.w	r0, r0, #7
    e88e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e892:	f003 fe51 	bl	12538 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e896:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e89a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e89e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e8a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e8a6:	3108      	adds	r1, #8
    e8a8:	f7fb fd5a 	bl	a360 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e8ac:	f003 fdfc 	bl	124a8 <radio_is_ready>
    e8b0:	2800      	cmp	r0, #0
    e8b2:	d18f      	bne.n	e7d4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e8b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e8b8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e8bc:	2101      	movs	r1, #1
    e8be:	f000 0007 	and.w	r0, r0, #7
    e8c2:	f003 fdc2 	bl	1244a <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e8c6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e8ca:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e8ce:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e8d2:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e8d4:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e8d6:	4405      	add	r5, r0
	switch (phy) {
    e8d8:	d013      	beq.n	e902 <isr+0x1e2>
		return 40;
    e8da:	2b04      	cmp	r3, #4
    e8dc:	bf0c      	ite	eq
    e8de:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e8e2:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e8e4:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e8e6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e8ea:	09c1      	lsrs	r1, r0, #7
    e8ec:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e8f0:	f003 fda7 	bl	12442 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e8f4:	1a28      	subs	r0, r5, r0
    e8f6:	f003 ff39 	bl	1276c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e8fa:	2001      	movs	r0, #1
    e8fc:	f7fc fb80 	bl	b000 <packet_tx_enqueue>
    e900:	e7b8      	b.n	e874 <isr+0x154>
		return 24;
    e902:	2018      	movs	r0, #24
    e904:	e7ee      	b.n	e8e4 <isr+0x1c4>
		LL_ASSERT(0);
    e906:	4b4a      	ldr	r3, [pc, #296]	; (ea30 <isr+0x310>)
    e908:	9301      	str	r3, [sp, #4]
    e90a:	9300      	str	r3, [sp, #0]
    e90c:	4b49      	ldr	r3, [pc, #292]	; (ea34 <isr+0x314>)
		LL_ASSERT(0);
    e90e:	4a4a      	ldr	r2, [pc, #296]	; (ea38 <isr+0x318>)
    e910:	494a      	ldr	r1, [pc, #296]	; (ea3c <isr+0x31c>)
    e912:	484c      	ldr	r0, [pc, #304]	; (ea44 <isr+0x324>)
    e914:	e2b2      	b.n	ee7c <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e916:	b926      	cbnz	r6, e922 <isr+0x202>
		_radio.state = STATE_CLOSE;
    e918:	2303      	movs	r3, #3
    e91a:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e91c:	f003 fda6 	bl	1246c <radio_disable>
    e920:	e7a8      	b.n	e874 <isr+0x154>
	switch (_radio.role) {
    e922:	7ce3      	ldrb	r3, [r4, #19]
    e924:	3b01      	subs	r3, #1
    e926:	2b03      	cmp	r3, #3
    e928:	f201 813e 	bhi.w	fba8 <isr+0x1488>
    e92c:	e8df f013 	tbh	[pc, r3, lsl #1]
    e930:	02ae0004 	.word	0x02ae0004
    e934:	05e305e3 	.word	0x05e305e3
		if (crc_ok) {
    e938:	2f00      	cmp	r7, #0
    e93a:	d0ed      	beq.n	e918 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e93c:	f1ba 0f00 	cmp.w	sl, #0
    e940:	d039      	beq.n	e9b6 <isr+0x296>
    e942:	4658      	mov	r0, fp
    e944:	f002 fe5c 	bl	11600 <ctrl_rl_irk_idx>
    e948:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e94c:	f003 fde4 	bl	12518 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e950:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e954:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e956:	232b      	movs	r3, #43	; 0x2b
    e958:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e95a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e95c:	fb11 3302 	smlabb	r3, r1, r2, r3
    e960:	930a      	str	r3, [sp, #40]	; 0x28
    e962:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e964:	f000 030f 	and.w	r3, r0, #15
    e968:	2b03      	cmp	r3, #3
    e96a:	d10a      	bne.n	e982 <isr+0x262>
    e96c:	7873      	ldrb	r3, [r6, #1]
    e96e:	2b0c      	cmp	r3, #12
    e970:	d107      	bne.n	e982 <isr+0x262>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e972:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e976:	065f      	lsls	r7, r3, #25
    e978:	d51f      	bpl.n	e9ba <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e97a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e97e:	0658      	lsls	r0, r3, #25
    e980:	d449      	bmi.n	ea16 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e982:	7830      	ldrb	r0, [r6, #0]
    e984:	f000 030f 	and.w	r3, r0, #15
    e988:	2b05      	cmp	r3, #5
    e98a:	d1c5      	bne.n	e918 <isr+0x1f8>
    e98c:	7873      	ldrb	r3, [r6, #1]
    e98e:	2b22      	cmp	r3, #34	; 0x22
    e990:	d1c2      	bne.n	e918 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e994:	5ce3      	ldrb	r3, [r4, r3]
    e996:	f003 030f 	and.w	r3, r3, #15
    e99a:	2b01      	cmp	r3, #1
    e99c:	f040 814f 	bne.w	ec3e <isr+0x51e>
					    ci->connect_ind.init_addr,
    e9a0:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e9a2:	aa10      	add	r2, sp, #64	; 0x40
    e9a4:	4639      	mov	r1, r7
    e9a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e9aa:	f003 f81f 	bl	119ec <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d14c      	bne.n	ea4c <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e9b2:	2000      	movs	r0, #0
    e9b4:	e05a      	b.n	ea6c <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e9b6:	20ff      	movs	r0, #255	; 0xff
    e9b8:	e7c6      	b.n	e948 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e9ba:	aa10      	add	r2, sp, #64	; 0x40
    e9bc:	1cb1      	adds	r1, r6, #2
    e9be:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e9c2:	f003 f813 	bl	119ec <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e9c6:	2800      	cmp	r0, #0
    e9c8:	d0d7      	beq.n	e97a <isr+0x25a>
	return (adv->tx_addr == sr->rx_addr) &&
    e9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9cc:	7832      	ldrb	r2, [r6, #0]
    e9ce:	5ce3      	ldrb	r3, [r4, r3]
    e9d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e9d4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e9d8:	d1d3      	bne.n	e982 <isr+0x262>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e9da:	2206      	movs	r2, #6
    e9dc:	f106 0108 	add.w	r1, r6, #8
    e9e0:	1ca8      	adds	r0, r5, #2
    e9e2:	f7f3 f902 	bl	1bea <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d1cb      	bne.n	e982 <isr+0x262>
		_radio.state = STATE_CLOSE;
    e9ea:	2303      	movs	r3, #3
    e9ec:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e9ee:	f003 fdad 	bl	1254c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e9f2:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e9f6:	2327      	movs	r3, #39	; 0x27
    e9f8:	fb03 4000 	mla	r0, r3, r0, r4
    e9fc:	307b      	adds	r0, #123	; 0x7b
    e9fe:	f003 fd15 	bl	1242c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    ea02:	f003 fd51 	bl	124a8 <radio_is_ready>
    ea06:	2800      	cmp	r0, #0
    ea08:	f43f af34 	beq.w	e874 <isr+0x154>
    ea0c:	4b08      	ldr	r3, [pc, #32]	; (ea30 <isr+0x310>)
    ea0e:	9301      	str	r3, [sp, #4]
    ea10:	9300      	str	r3, [sp, #0]
    ea12:	4b0d      	ldr	r3, [pc, #52]	; (ea48 <isr+0x328>)
    ea14:	e6e2      	b.n	e7dc <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    ea16:	f1b9 0f00 	cmp.w	r9, #0
    ea1a:	d1d6      	bne.n	e9ca <isr+0x2aa>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ea1c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ea20:	f002 fe34 	bl	1168c <ctrl_irk_whitelisted>
    ea24:	2800      	cmp	r0, #0
    ea26:	d1d0      	bne.n	e9ca <isr+0x2aa>
    ea28:	e7ab      	b.n	e982 <isr+0x262>
    ea2a:	bf00      	nop
    ea2c:	200008c0 	.word	0x200008c0
    ea30:	00014b99 	.word	0x00014b99
    ea34:	0001720a 	.word	0x0001720a
    ea38:	00015f55 	.word	0x00015f55
    ea3c:	00015fa4 	.word	0x00015fa4
    ea40:	000178d0 	.word	0x000178d0
    ea44:	00015ec9 	.word	0x00015ec9
    ea48:	0001721d 	.word	0x0001721d
		       isr_adv_ci_adva_check(adv, ci) &&
    ea4c:	4631      	mov	r1, r6
    ea4e:	4628      	mov	r0, r5
    ea50:	f7fb ff6e 	bl	a930 <isr_adv_ci_adva_check>
					    rl_idx) &&
    ea54:	2800      	cmp	r0, #0
    ea56:	d0ac      	beq.n	e9b2 <isr+0x292>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    ea58:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    ea5c:	2bff      	cmp	r3, #255	; 0xff
    ea5e:	f000 80db 	beq.w	ec18 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
    ea62:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    ea66:	1ac1      	subs	r1, r0, r3
    ea68:	4248      	negs	r0, r1
    ea6a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ea6c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    ea70:	2800      	cmp	r0, #0
    ea72:	f43f af51 	beq.w	e918 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    ea76:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ea7a:	b133      	cbz	r3, ea8a <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    ea7c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    ea80:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ea84:	429a      	cmp	r2, r3
    ea86:	f47f af47 	bne.w	e918 <isr+0x1f8>
    ea8a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    ea8e:	2b00      	cmp	r3, #0
    ea90:	f43f af42 	beq.w	e918 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
    ea94:	2004      	movs	r0, #4
    ea96:	f7fb f905 	bl	9ca4 <packet_rx_reserve_get>
		if (!node_rx) {
    ea9a:	4607      	mov	r7, r0
    ea9c:	2800      	cmp	r0, #0
    ea9e:	f43f af3b 	beq.w	e918 <isr+0x1f8>
		_radio.state = STATE_STOP;
    eaa2:	f04f 0904 	mov.w	r9, #4
    eaa6:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    eaaa:	f003 fcdf 	bl	1246c <radio_disable>
		conn = _radio.advertiser.conn;
    eaae:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eab2:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    eab6:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eab8:	f44f 72aa 	mov.w	r2, #340	; 0x154
    eabc:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    eabe:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eac2:	f7f8 fb12 	bl	70ea <mem_index_get>
		memcpy(&conn->access_addr[0],
    eac6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eaca:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    eacc:	2203      	movs	r2, #3
    eace:	f106 0112 	add.w	r1, r6, #18
    ead2:	f105 0014 	add.w	r0, r5, #20
    ead6:	f7f3 f89d 	bl	1c14 <memcpy>
		memcpy(&conn->data_chan_map[0],
    eada:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    eade:	464a      	mov	r2, r9
    eae0:	f106 010e 	add.w	r1, r6, #14
    eae4:	4650      	mov	r0, sl
    eae6:	f7f3 f895 	bl	1c14 <memcpy>
		memcpy(&conn->data_chan_map[0],
    eaea:	2205      	movs	r2, #5
    eaec:	f106 011e 	add.w	r1, r6, #30
    eaf0:	4640      	mov	r0, r8
    eaf2:	f7f3 f88f 	bl	1c14 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    eaf6:	2105      	movs	r1, #5
    eaf8:	4640      	mov	r0, r8
    eafa:	f7f8 fc69 	bl	73d0 <util_ones_count_get>
		conn->data_chan_count =
    eafe:	7f6b      	ldrb	r3, [r5, #29]
    eb00:	f360 0305 	bfi	r3, r0, #0, #6
    eb04:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    eb06:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    eb0a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    eb0e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    eb10:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    eb12:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    eb14:	f240 48e2 	movw	r8, #1250	; 0x4e2
    eb18:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    eb1c:	7ef2      	ldrb	r2, [r6, #27]
    eb1e:	7eb3      	ldrb	r3, [r6, #26]
    eb20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    eb24:	4651      	mov	r1, sl
    eb26:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    eb28:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    eb2a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    eb2e:	f7f3 f871 	bl	1c14 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eb32:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb34:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eb36:	f242 7210 	movw	r2, #10000	; 0x2710
    eb3a:	fb02 8303 	mla	r3, r2, r3, r8
    eb3e:	3b01      	subs	r3, #1
    eb40:	fbb3 f3f8 	udiv	r3, r3, r8
    eb44:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    eb46:	4b54      	ldr	r3, [pc, #336]	; (ec98 <isr+0x578>)
    eb48:	4443      	add	r3, r8
    eb4a:	fbb3 f3f8 	udiv	r3, r3, r8
    eb4e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb52:	4b52      	ldr	r3, [pc, #328]	; (ec9c <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb54:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb56:	4443      	add	r3, r8
    eb58:	fbb3 f3f8 	udiv	r3, r3, r8
    eb5c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb5e:	4282      	cmp	r2, r0
    eb60:	4613      	mov	r3, r2
    eb62:	bfc4      	itt	gt
    eb64:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    eb68:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb6a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb6e:	bfc4      	itt	gt
    eb70:	18d2      	addgt	r2, r2, r3
    eb72:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    eb74:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb76:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb7a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    eb7c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    eb7e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    eb80:	2300      	movs	r3, #0
    eb82:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    eb84:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb86:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    eb8a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb8c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb90:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    eb94:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb96:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eb9a:	464a      	mov	r2, r9
    eb9c:	f107 001b 	add.w	r0, r7, #27
    eba0:	f7f3 f838 	bl	1c14 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    eba4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eba8:	f107 030e 	add.w	r3, r7, #14
    ebac:	28ff      	cmp	r0, #255	; 0xff
    ebae:	930b      	str	r3, [sp, #44]	; 0x2c
    ebb0:	f106 0a02 	add.w	sl, r6, #2
    ebb4:	f107 0b14 	add.w	fp, r7, #20
    ebb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ebba:	d05f      	beq.n	ec7c <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
    ebbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ebbe:	f107 010d 	add.w	r1, r7, #13
    ebc2:	f002 fed5 	bl	11970 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    ebc6:	7b7b      	ldrb	r3, [r7, #13]
    ebc8:	3302      	adds	r3, #2
    ebca:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    ebcc:	464a      	mov	r2, r9
    ebce:	4651      	mov	r1, sl
    ebd0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ebd2:	f7f3 f81f 	bl	1c14 <memcpy>
			pdu_adv->connect_ind.interval;
    ebd6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    ebd8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ebdc:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ebde:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ebe2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ebe4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ebe8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ebec:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ebf4:	8c28      	ldrh	r0, [r5, #32]
    ebf6:	f7fb ffaf 	bl	ab58 <rx_fc_lock>
		packet_rx_enqueue();
    ebfa:	f7fb febd 	bl	a978 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ebfe:	2003      	movs	r0, #3
    ec00:	f7fb f850 	bl	9ca4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ec04:	2800      	cmp	r0, #0
    ec06:	d155      	bne.n	ecb4 <isr+0x594>
    ec08:	4b25      	ldr	r3, [pc, #148]	; (eca0 <isr+0x580>)
    ec0a:	9301      	str	r3, [sp, #4]
    ec0c:	9300      	str	r3, [sp, #0]
    ec0e:	4b25      	ldr	r3, [pc, #148]	; (eca4 <isr+0x584>)
			LL_ASSERT(node_rx);
    ec10:	4a25      	ldr	r2, [pc, #148]	; (eca8 <isr+0x588>)
    ec12:	4926      	ldr	r1, [pc, #152]	; (ecac <isr+0x58c>)
    ec14:	4826      	ldr	r0, [pc, #152]	; (ecb0 <isr+0x590>)
    ec16:	e131      	b.n	ee7c <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
    ec18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ec1a:	5ce2      	ldrb	r2, [r4, r3]
    ec1c:	7833      	ldrb	r3, [r6, #0]
    ec1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ec22:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ec26:	f47f aec4 	bne.w	e9b2 <isr+0x292>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    ec2a:	2206      	movs	r2, #6
    ec2c:	4639      	mov	r1, r7
    ec2e:	f105 0008 	add.w	r0, r5, #8
    ec32:	f7f2 ffda 	bl	1bea <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    ec36:	fab0 f080 	clz	r0, r0
    ec3a:	0940      	lsrs	r0, r0, #5
    ec3c:	e716      	b.n	ea6c <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ec3e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ec42:	09db      	lsrs	r3, r3, #7
    ec44:	d00d      	beq.n	ec62 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    ec46:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    ec4a:	09db      	lsrs	r3, r3, #7
    ec4c:	f43f aeb1 	beq.w	e9b2 <isr+0x292>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    ec50:	f1b9 0f00 	cmp.w	r9, #0
    ec54:	d10d      	bne.n	ec72 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ec56:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ec5a:	f002 fd17 	bl	1168c <ctrl_irk_whitelisted>
    ec5e:	b940      	cbnz	r0, ec72 <isr+0x552>
    ec60:	e6a7      	b.n	e9b2 <isr+0x292>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    ec62:	aa10      	add	r2, sp, #64	; 0x40
    ec64:	1cb1      	adds	r1, r6, #2
    ec66:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ec6a:	f002 febf 	bl	119ec <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ec6e:	2800      	cmp	r0, #0
    ec70:	d0e9      	beq.n	ec46 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
    ec72:	4631      	mov	r1, r6
    ec74:	4628      	mov	r0, r5
    ec76:	f7fb fe5b 	bl	a930 <isr_adv_ci_adva_check>
    ec7a:	e6f7      	b.n	ea6c <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    ec7c:	4619      	mov	r1, r3
    ec7e:	464a      	mov	r2, r9
    ec80:	4658      	mov	r0, fp
    ec82:	f7f2 fff3 	bl	1c6c <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ec86:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ec88:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ec8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ec8e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ec90:	464a      	mov	r2, r9
    ec92:	4651      	mov	r1, sl
    ec94:	e79d      	b.n	ebd2 <isr+0x4b2>
    ec96:	bf00      	nop
    ec98:	026259ff 	.word	0x026259ff
    ec9c:	01c9c37f 	.word	0x01c9c37f
    eca0:	00014b99 	.word	0x00014b99
    eca4:	0001721d 	.word	0x0001721d
    eca8:	00015f55 	.word	0x00015f55
    ecac:	00015fa4 	.word	0x00015fa4
    ecb0:	00017d07 	.word	0x00017d07
			node_rx->hdr.handle = conn->handle;
    ecb4:	8c2b      	ldrh	r3, [r5, #32]
    ecb6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ecb8:	230b      	movs	r3, #11
    ecba:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    ecbc:	7833      	ldrb	r3, [r6, #0]
    ecbe:	f013 0320 	ands.w	r3, r3, #32
    ecc2:	d00e      	beq.n	ece2 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
    ecc4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    ecc6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ecc8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    ecca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ecce:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    ecd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ecd4:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ecd6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ecd8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ecdc:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    ecde:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ece0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ece2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ece4:	f7fb fe48 	bl	a978 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ece8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    ecec:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ecf0:	497d      	ldr	r1, [pc, #500]	; (eee8 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ecf2:	0952      	lsrs	r2, r2, #5
    ecf4:	f362 0384 	bfi	r3, r2, #2, #3
    ecf8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ecfc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    ed00:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    ed04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ed08:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    ed0a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    ed0e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    ed12:	4a76      	ldr	r2, [pc, #472]	; (eeec <isr+0x7cc>)
    ed14:	f203 233f 	addw	r3, r3, #575	; 0x23f
    ed18:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    ed1c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    ed1e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    ed22:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    ed24:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    ed26:	7d73      	ldrb	r3, [r6, #21]
    ed28:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    ed2c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    ed2e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    ed32:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed34:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    ed36:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed38:	4638      	mov	r0, r7
    ed3a:	f003 fb84 	bl	12446 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed3e:	496c      	ldr	r1, [pc, #432]	; (eef0 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed40:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed42:	f200 4052 	addw	r0, r0, #1106	; 0x452
    ed46:	a366      	add	r3, pc, #408	; (adr r3, eee0 <isr+0x7c0>)
    ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed4c:	fba0 0101 	umull	r0, r1, r0, r1
    ed50:	f7f1 fa60 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ed54:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    ed58:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    ed5a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ed5c:	4293      	cmp	r3, r2
    ed5e:	bf38      	it	cc
    ed60:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ed66:	469a      	mov	sl, r3
		conn_interval_us -=
    ed68:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    ed6a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    ed6c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    ed6e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    ed70:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    ed74:	f003 fd5e 	bl	12834 <radio_tmr_end_get>
    ed78:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    ed7a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ed7c:	4639      	mov	r1, r7
		conn_offset_us +=
    ed7e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ed82:	4638      	mov	r0, r7
    ed84:	f003 fb5d 	bl	12442 <radio_tx_chain_delay_get>
    ed88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ed8a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    ed8e:	4499      	add	r9, r3
    ed90:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    ed94:	eba9 030b 	sub.w	r3, r9, fp
    ed98:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed9a:	f240 4383 	movw	r3, #1155	; 0x483
    ed9e:	9300      	str	r3, [sp, #0]
    eda0:	2205      	movs	r2, #5
    eda2:	4b54      	ldr	r3, [pc, #336]	; (eef4 <isr+0x7d4>)
    eda4:	f8df b148 	ldr.w	fp, [pc, #328]	; eef0 <isr+0x7d0>
    eda8:	4639      	mov	r1, r7
    edaa:	4638      	mov	r0, r7
    edac:	f7f9 f88c 	bl	7ec8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    edb0:	f240 4184 	movw	r1, #1156	; 0x484
    edb4:	f7fb ff08 	bl	abc8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    edb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    edba:	5ce3      	ldrb	r3, [r4, r3]
    edbc:	f003 030f 	and.w	r3, r3, #15
    edc0:	2b01      	cmp	r3, #1
    edc2:	d106      	bne.n	edd2 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    edc4:	9700      	str	r7, [sp, #0]
    edc6:	463b      	mov	r3, r7
    edc8:	2203      	movs	r2, #3
    edca:	4639      	mov	r1, r7
    edcc:	4638      	mov	r0, r7
    edce:	f7f9 f87b 	bl	7ec8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    edd2:	fba8 890b 	umull	r8, r9, r8, fp
    edd6:	a342      	add	r3, pc, #264	; (adr r3, eee0 <isr+0x7c0>)
    edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    eddc:	4640      	mov	r0, r8
    edde:	4649      	mov	r1, r9
    ede0:	f7f1 fa18 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ede4:	f895 3020 	ldrb.w	r3, [r5, #32]
    ede8:	68a4      	ldr	r4, [r4, #8]
    edea:	9506      	str	r5, [sp, #24]
    edec:	3307      	adds	r3, #7
    edee:	b2db      	uxtb	r3, r3
    edf0:	930a      	str	r3, [sp, #40]	; 0x28
    edf2:	f240 439b 	movw	r3, #1179	; 0x49b
    edf6:	9308      	str	r3, [sp, #32]
    edf8:	4b3f      	ldr	r3, [pc, #252]	; (eef8 <isr+0x7d8>)
    edfa:	9307      	str	r3, [sp, #28]
    edfc:	4b3f      	ldr	r3, [pc, #252]	; (eefc <isr+0x7dc>)
    edfe:	9305      	str	r3, [sp, #20]
    ee00:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee02:	4a3f      	ldr	r2, [pc, #252]	; (ef00 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee04:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ee06:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee08:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ee0e:	2307      	movs	r3, #7
    ee10:	2100      	movs	r1, #0
    ee12:	4343      	muls	r3, r0
    ee14:	fb02 3301 	mla	r3, r2, r1, r3
    ee18:	fba0 1202 	umull	r1, r2, r0, r2
    ee1c:	441a      	add	r2, r3
    ee1e:	4608      	mov	r0, r1
    ee20:	ebb8 0000 	subs.w	r0, r8, r0
    ee24:	4611      	mov	r1, r2
    ee26:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee2a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee30:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee32:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee34:	f7f1 f9ee 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee38:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee3a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee3c:	a328      	add	r3, pc, #160	; (adr r3, eee0 <isr+0x7c0>)
    ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee42:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee46:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee4a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee4c:	f7f1 f9e2 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee50:	eba4 040a 	sub.w	r4, r4, sl
    ee54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ee58:	9000      	str	r0, [sp, #0]
    ee5a:	4623      	mov	r3, r4
    ee5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ee5e:	4629      	mov	r1, r5
    ee60:	4628      	mov	r0, r5
    ee62:	f7f8 ff93 	bl	7d8c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ee66:	f030 0302 	bics.w	r3, r0, #2
    ee6a:	f43f ad03 	beq.w	e874 <isr+0x154>
    ee6e:	4b25      	ldr	r3, [pc, #148]	; (ef04 <isr+0x7e4>)
    ee70:	9301      	str	r3, [sp, #4]
    ee72:	9300      	str	r3, [sp, #0]
    ee74:	4b24      	ldr	r3, [pc, #144]	; (ef08 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ee76:	4a25      	ldr	r2, [pc, #148]	; (ef0c <isr+0x7ec>)
    ee78:	4925      	ldr	r1, [pc, #148]	; (ef10 <isr+0x7f0>)
    ee7a:	4826      	ldr	r0, [pc, #152]	; (ef14 <isr+0x7f4>)
		LL_ASSERT(0);
    ee7c:	f7f2 f886 	bl	f8c <printk>
    ee80:	4040      	eors	r0, r0
    ee82:	f380 8811 	msr	BASEPRI, r0
    ee86:	f04f 0004 	mov.w	r0, #4
    ee8a:	df02      	svc	2
		rl_idx = devmatch_ok ?
    ee8c:	f1b9 0f00 	cmp.w	r9, #0
    ee90:	d01c      	beq.n	eecc <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ee92:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ee96:	4641      	mov	r1, r8
    ee98:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ee9c:	f002 fb5c 	bl	11558 <ctrl_rl_idx>
    eea0:	4680      	mov	r8, r0
		if (crc_ok &&
    eea2:	b147      	cbz	r7, eeb6 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    eea4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eea8:	06da      	lsls	r2, r3, #27
    eeaa:	d535      	bpl.n	ef18 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    eeac:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    eeb0:	06db      	lsls	r3, r3, #27
    eeb2:	f100 811d 	bmi.w	f0f0 <isr+0x9d0>
			_radio.state = STATE_CLOSE;
    eeb6:	2303      	movs	r3, #3
    eeb8:	7523      	strb	r3, [r4, #20]
			radio_disable();
    eeba:	f003 fad7 	bl	1246c <radio_disable>
			_radio.scanner.state = 0;
    eebe:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    eec2:	f36f 0341 	bfc	r3, #1, #1
    eec6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    eeca:	e4d3      	b.n	e874 <isr+0x154>
		rl_idx = devmatch_ok ?
    eecc:	f1ba 0f00 	cmp.w	sl, #0
    eed0:	d003      	beq.n	eeda <isr+0x7ba>
    eed2:	4658      	mov	r0, fp
    eed4:	f002 fb94 	bl	11600 <ctrl_rl_irk_idx>
    eed8:	e7e2      	b.n	eea0 <isr+0x780>
    eeda:	f04f 08ff 	mov.w	r8, #255	; 0xff
    eede:	e7e0      	b.n	eea2 <isr+0x782>
    eee0:	1afd498d 	.word	0x1afd498d
    eee4:	00000007 	.word	0x00000007
    eee8:	000178c0 	.word	0x000178c0
    eeec:	000f4240 	.word	0x000f4240
    eef0:	3b9aca00 	.word	0x3b9aca00
    eef4:	0000abc9 	.word	0x0000abc9
    eef8:	0000ab8d 	.word	0x0000ab8d
    eefc:	0000d035 	.word	0x0000d035
    ef00:	1afd498d 	.word	0x1afd498d
    ef04:	00014b99 	.word	0x00014b99
    ef08:	0001721d 	.word	0x0001721d
    ef0c:	00015f55 	.word	0x00015f55
    ef10:	00015fa4 	.word	0x00015fa4
    ef14:	000176a1 	.word	0x000176a1
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ef18:	f1b9 0f00 	cmp.w	r9, #0
    ef1c:	d005      	beq.n	ef2a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ef1e:	4641      	mov	r1, r8
    ef20:	4650      	mov	r0, sl
    ef22:	f002 fcf1 	bl	11908 <ctrl_rl_idx_allowed>
    ef26:	2800      	cmp	r0, #0
    ef28:	d0c0      	beq.n	eeac <isr+0x78c>
	bool dir_report = false;
    ef2a:	2300      	movs	r3, #0
    ef2c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ef30:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ef34:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ef38:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ef40:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef44:	2b00      	cmp	r3, #0
    ef46:	f000 80ec 	beq.w	f122 <isr+0xa02>
    ef4a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ef4e:	b133      	cbz	r3, ef5e <isr+0x83e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ef50:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef54:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ef58:	429a      	cmp	r2, r3
    ef5a:	f040 80e2 	bne.w	f122 <isr+0xa02>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ef5e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ef62:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ef66:	2800      	cmp	r0, #0
    ef68:	f000 80cd 	beq.w	f106 <isr+0x9e6>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ef6c:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ef70:	f010 000f 	ands.w	r0, r0, #15
    ef74:	f040 814c 	bne.w	f210 <isr+0xaf0>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ef78:	f003 fc5c 	bl	12834 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ef7c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ef80:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ef84:	48b8      	ldr	r0, [pc, #736]	; (f268 <isr+0xb48>)
    ef86:	2207      	movs	r2, #7
    ef88:	fba3 0100 	umull	r0, r1, r3, r0
    ef8c:	fb02 1103 	mla	r1, r2, r3, r1
    ef90:	a3b3      	add	r3, pc, #716	; (adr r3, f260 <isr+0xb40>)
    ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef96:	f7f1 f93d 	bl	214 <__aeabi_uldivmod>
    ef9a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    ef9e:	4287      	cmp	r7, r0
    efa0:	f080 80bf 	bcs.w	f122 <isr+0xa02>
			node_rx = packet_rx_reserve_get(4);
    efa4:	2004      	movs	r0, #4
    efa6:	f7fa fe7d 	bl	9ca4 <packet_rx_reserve_get>
		if (node_rx == 0) {
    efaa:	4607      	mov	r7, r0
    efac:	2800      	cmp	r0, #0
    efae:	d082      	beq.n	eeb6 <isr+0x796>
		_radio.state = STATE_STOP;
    efb0:	2304      	movs	r3, #4
    efb2:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    efb4:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    efb6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    efba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    efbe:	f003 faab 	bl	12518 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    efc2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    efc4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    efc8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    efcc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    efce:	f899 3008 	ldrb.w	r3, [r9, #8]
    efd2:	7802      	ldrb	r2, [r0, #0]
    efd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    efd8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    efdc:	2322      	movs	r3, #34	; 0x22
    efde:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    efe0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    efe2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    efe4:	4640      	mov	r0, r8
    efe6:	f002 fa99 	bl	1151c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    efea:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    efee:	4601      	mov	r1, r0
    eff0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    eff2:	f013 0f01 	tst.w	r3, #1
    eff6:	f810 3b02 	ldrb.w	r3, [r0], #2
    effa:	f000 8114 	beq.w	f226 <isr+0xb06>
    effe:	2900      	cmp	r1, #0
    f000:	f000 8111 	beq.w	f226 <isr+0xb06>
			pdu_adv_tx->tx_addr = 1;
    f004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f008:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f00a:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f00c:	f7f2 fe02 	bl	1c14 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    f010:	f105 0308 	add.w	r3, r5, #8
    f014:	4618      	mov	r0, r3
    f016:	2206      	movs	r2, #6
    f018:	f109 010a 	add.w	r1, r9, #10
    f01c:	930a      	str	r3, [sp, #40]	; 0x28
    f01e:	f7f2 fdf9 	bl	1c14 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f022:	2204      	movs	r2, #4
    f024:	f106 0110 	add.w	r1, r6, #16
    f028:	f105 000e 	add.w	r0, r5, #14
    f02c:	f7f2 fdf2 	bl	1c14 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f030:	2203      	movs	r2, #3
    f032:	f106 0114 	add.w	r1, r6, #20
    f036:	f105 0012 	add.w	r0, r5, #18
    f03a:	f7f2 fdeb 	bl	1c14 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f03e:	2301      	movs	r3, #1
    f040:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f042:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f046:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f04a:	4353      	muls	r3, r2
    f04c:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f04e:	f003 fbf1 	bl	12834 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f052:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f054:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f058:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f05a:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f05e:	bfd8      	it	le
    f060:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f064:	f1bb 0f00 	cmp.w	fp, #0
    f068:	f040 80e8 	bne.w	f23c <isr+0xb1c>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f06c:	f885 b016 	strb.w	fp, [r5, #22]
    f070:	f885 b017 	strb.w	fp, [r5, #23]
    f074:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f076:	2100      	movs	r1, #0
    f078:	4608      	mov	r0, r1
    f07a:	f003 f9dd 	bl	12438 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f07e:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f080:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f084:	4608      	mov	r0, r1
    f086:	f003 f9dc 	bl	12442 <radio_tx_chain_delay_get>
    f08a:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f08e:	f100 031e 	add.w	r3, r0, #30
    f092:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f094:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f098:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f09a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f09e:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f0a0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f0a4:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f0a6:	f106 0117 	add.w	r1, r6, #23
    f0aa:	2205      	movs	r2, #5
    f0ac:	f105 001e 	add.w	r0, r5, #30
    f0b0:	f7f2 fdb0 	bl	1c14 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f0b4:	7fb2      	ldrb	r2, [r6, #30]
    f0b6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f0ba:	f362 0304 	bfi	r3, r2, #0, #5
    f0be:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f0c2:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f0c6:	f362 1347 	bfi	r3, r2, #5, #3
    f0ca:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f0ce:	f003 fa3d 	bl	1254c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f0d2:	4628      	mov	r0, r5
    f0d4:	f003 f9aa 	bl	1242c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f0d8:	f003 f9e6 	bl	124a8 <radio_is_ready>
    f0dc:	4683      	mov	fp, r0
    f0de:	2800      	cmp	r0, #0
    f0e0:	f000 80cc 	beq.w	f27c <isr+0xb5c>
		LL_ASSERT(!radio_is_ready());
    f0e4:	4b61      	ldr	r3, [pc, #388]	; (f26c <isr+0xb4c>)
    f0e6:	9301      	str	r3, [sp, #4]
    f0e8:	9300      	str	r3, [sp, #0]
    f0ea:	4b61      	ldr	r3, [pc, #388]	; (f270 <isr+0xb50>)
    f0ec:	f7ff bb76 	b.w	e7dc <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f0f0:	f1b9 0f00 	cmp.w	r9, #0
    f0f4:	f47f af19 	bne.w	ef2a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f0f8:	4640      	mov	r0, r8
    f0fa:	f002 fac7 	bl	1168c <ctrl_irk_whitelisted>
		if (crc_ok &&
    f0fe:	2800      	cmp	r0, #0
    f100:	f43f aed9 	beq.w	eeb6 <isr+0x796>
    f104:	e711      	b.n	ef2a <isr+0x80a>
	if (rl_idx != FILTER_IDX_NONE) {
    f106:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f10a:	d06f      	beq.n	f1ec <isr+0xacc>
		return (rl_idx == _radio.scanner.rl_idx);
    f10c:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f110:	eba0 0e08 	sub.w	lr, r0, r8
    f114:	f1de 0000 	rsbs	r0, lr, #0
    f118:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f11c:	2800      	cmp	r0, #0
    f11e:	f47f af25 	bne.w	ef6c <isr+0x84c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f122:	f899 0008 	ldrb.w	r0, [r9, #8]
    f126:	f010 000f 	ands.w	r0, r0, #15
    f12a:	d002      	beq.n	f132 <isr+0xa12>
    f12c:	2806      	cmp	r0, #6
    f12e:	f040 81ac 	bne.w	f48a <isr+0xd6a>
		 (_radio.scanner.type != 0) &&
    f132:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f136:	071f      	lsls	r7, r3, #28
    f138:	f140 8191 	bpl.w	f45e <isr+0xd3e>
		 (_radio.scanner.type != 0) &&
    f13c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f140:	2a00      	cmp	r2, #0
    f142:	f040 818c 	bne.w	f45e <isr+0xd3e>
		err = isr_rx_scan_report(rssi_ready,
    f146:	f1ba 0f00 	cmp.w	sl, #0
    f14a:	bf14      	ite	ne
    f14c:	4641      	movne	r1, r8
    f14e:	21ff      	moveq	r1, #255	; 0xff
    f150:	4628      	mov	r0, r5
    f152:	f7fb fca9 	bl	aaa8 <isr_rx_scan_report>
		if (err) {
    f156:	2800      	cmp	r0, #0
    f158:	f47f aead 	bne.w	eeb6 <isr+0x796>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f15c:	f003 f9dc 	bl	12518 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f160:	7803      	ldrb	r3, [r0, #0]
    f162:	2203      	movs	r2, #3
    f164:	f362 0303 	bfi	r3, r2, #0, #4
    f168:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f16a:	f899 3008 	ldrb.w	r3, [r9, #8]
    f16e:	7802      	ldrb	r2, [r0, #0]
    f170:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f174:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f178:	230c      	movs	r3, #12
    f17a:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f17c:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f17e:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f180:	4640      	mov	r0, r8
    f182:	f002 f9cb 	bl	1151c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f186:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f18a:	4601      	mov	r1, r0
    f18c:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f18e:	f013 0f01 	tst.w	r3, #1
    f192:	f810 3b02 	ldrb.w	r3, [r0], #2
    f196:	f000 8159 	beq.w	f44c <isr+0xd2c>
    f19a:	2900      	cmp	r1, #0
    f19c:	f000 8156 	beq.w	f44c <isr+0xd2c>
			pdu_adv_tx->tx_addr = 1;
    f1a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f1a4:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f1a6:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f1a8:	f7f2 fd34 	bl	1c14 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f1ac:	2206      	movs	r2, #6
    f1ae:	f109 010a 	add.w	r1, r9, #10
    f1b2:	f105 0008 	add.w	r0, r5, #8
    f1b6:	f7f2 fd2d 	bl	1c14 <memcpy>
		_radio.scanner.state = 1;
    f1ba:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f1be:	f043 0302 	orr.w	r3, r3, #2
    f1c2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    f1c6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    f1c8:	2302      	movs	r3, #2
    f1ca:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    f1cc:	f003 fa44 	bl	12658 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f1d0:	2000      	movs	r0, #0
    f1d2:	f003 f9a5 	bl	12520 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    f1d6:	4628      	mov	r0, r5
    f1d8:	f003 f928 	bl	1242c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    f1dc:	f003 fb18 	bl	12810 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    f1e0:	f003 f962 	bl	124a8 <radio_is_ready>
    f1e4:	2800      	cmp	r0, #0
    f1e6:	f43f ab45 	beq.w	e874 <isr+0x154>
    f1ea:	e77b      	b.n	f0e4 <isr+0x9c4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f1ec:	f899 2008 	ldrb.w	r2, [r9, #8]
    f1f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f1f4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f1f8:	4293      	cmp	r3, r2
    f1fa:	d18f      	bne.n	f11c <isr+0x9fc>
		(memcmp(&_radio.scanner.adv_addr[0],
    f1fc:	2206      	movs	r2, #6
    f1fe:	f109 010a 	add.w	r1, r9, #10
    f202:	481c      	ldr	r0, [pc, #112]	; (f274 <isr+0xb54>)
    f204:	f7f2 fcf1 	bl	1bea <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f208:	fab0 f080 	clz	r0, r0
    f20c:	0940      	lsrs	r0, r0, #5
    f20e:	e785      	b.n	f11c <isr+0x9fc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f210:	2801      	cmp	r0, #1
    f212:	d18b      	bne.n	f12c <isr+0xa0c>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    f214:	2300      	movs	r3, #0
    f216:	4642      	mov	r2, r8
    f218:	4631      	mov	r1, r6
    f21a:	f7fb fbf9 	bl	aa10 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f21e:	2800      	cmp	r0, #0
    f220:	f43f af7f 	beq.w	f122 <isr+0xa02>
    f224:	e6a8      	b.n	ef78 <isr+0x858>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f226:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f22a:	4913      	ldr	r1, [pc, #76]	; (f278 <isr+0xb58>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f22c:	09d2      	lsrs	r2, r2, #7
    f22e:	f362 1386 	bfi	r3, r2, #6, #1
    f232:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f234:	2206      	movs	r2, #6
    f236:	e6e9      	b.n	f00c <isr+0x8ec>
				conn_space_us += conn_interval_us;
    f238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f23a:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    f23c:	f1bb 0f00 	cmp.w	fp, #0
    f240:	dbfa      	blt.n	f238 <isr+0xb18>
    f242:	459b      	cmp	fp, r3
    f244:	d3f8      	bcc.n	f238 <isr+0xb18>
				(conn_space_us - conn_offset_us) / 1250;
    f246:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    f24a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f24e:	fbb3 f3f2 	udiv	r3, r3, r2
    f252:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    f254:	7d6b      	ldrb	r3, [r5, #21]
    f256:	3301      	adds	r3, #1
    f258:	756b      	strb	r3, [r5, #21]
    f25a:	e70c      	b.n	f076 <isr+0x956>
    f25c:	f3af 8000 	nop.w
    f260:	3b9aca00 	.word	0x3b9aca00
    f264:	00000000 	.word	0x00000000
    f268:	1afd498d 	.word	0x1afd498d
    f26c:	00014b99 	.word	0x00014b99
    f270:	0001723b 	.word	0x0001723b
    f274:	200009aa 	.word	0x200009aa
    f278:	200009a4 	.word	0x200009a4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f27c:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f280:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f284:	4630      	mov	r0, r6
    f286:	f7f7 ff30 	bl	70ea <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f28a:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f28c:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f28e:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    f292:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    f296:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f29a:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f29c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    f2a0:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f2a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f2a6:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f2a8:	2206      	movs	r2, #6
    f2aa:	f107 001b 	add.w	r0, r7, #27
    f2ae:	f7f2 fcb1 	bl	1c14 <memcpy>
    f2b2:	f107 0b0e 	add.w	fp, r7, #14
    f2b6:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    f2ba:	f1ba 0f00 	cmp.w	sl, #0
    f2be:	d032      	beq.n	f326 <isr+0xc06>
    f2c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f2c4:	d02f      	beq.n	f326 <isr+0xc06>
			ll_rl_id_addr_get(rl_idx,
    f2c6:	465a      	mov	r2, fp
    f2c8:	f107 010d 	add.w	r1, r7, #13
    f2cc:	4640      	mov	r0, r8
    f2ce:	930d      	str	r3, [sp, #52]	; 0x34
    f2d0:	f002 fb4e 	bl	11970 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f2d4:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2d8:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    f2da:	3202      	adds	r2, #2
    f2dc:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f2de:	4618      	mov	r0, r3
    f2e0:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f2e2:	f7f2 fc97 	bl	1c14 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    f2e6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f2ea:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    f2ee:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f2f2:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    f2f6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f2fa:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    f2fe:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f302:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f30a:	8c30      	ldrh	r0, [r6, #32]
    f30c:	f7fb fc24 	bl	ab58 <rx_fc_lock>
		packet_rx_enqueue();
    f310:	f7fb fb32 	bl	a978 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f314:	2003      	movs	r0, #3
    f316:	f7fa fcc5 	bl	9ca4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f31a:	b988      	cbnz	r0, f340 <isr+0xc20>
    f31c:	4bba      	ldr	r3, [pc, #744]	; (f608 <isr+0xee8>)
    f31e:	9301      	str	r3, [sp, #4]
    f320:	9300      	str	r3, [sp, #0]
    f322:	4bba      	ldr	r3, [pc, #744]	; (f60c <isr+0xeec>)
    f324:	e474      	b.n	ec10 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f326:	2206      	movs	r2, #6
    f328:	2100      	movs	r1, #0
    f32a:	4618      	mov	r0, r3
    f32c:	f7f2 fc9e 	bl	1c6c <memset>
				pdu_adv_tx->rx_addr;
    f330:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f332:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    f334:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f338:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f33a:	2206      	movs	r2, #6
    f33c:	4658      	mov	r0, fp
    f33e:	e7d0      	b.n	f2e2 <isr+0xbc2>
			node_rx->hdr.handle = conn->handle;
    f340:	8c33      	ldrh	r3, [r6, #32]
    f342:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f344:	230b      	movs	r3, #11
    f346:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f348:	f899 3008 	ldrb.w	r3, [r9, #8]
    f34c:	f013 0320 	ands.w	r3, r3, #32
    f350:	d00e      	beq.n	f370 <isr+0xc50>
					((u16_t)conn->access_addr[1] << 8) |
    f352:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f354:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f356:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f35c:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f35e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f362:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f364:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f366:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f36a:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f36c:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f36e:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f370:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f372:	f7fb fb01 	bl	a978 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f376:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f378:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f37c:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f37e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f382:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f384:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f386:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f38a:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f38c:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f38e:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f392:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f394:	4629      	mov	r1, r5
    f396:	9300      	str	r3, [sp, #0]
    f398:	4628      	mov	r0, r5
    f39a:	4b9d      	ldr	r3, [pc, #628]	; (f610 <isr+0xef0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f39c:	f8df a284 	ldr.w	sl, [pc, #644]	; f624 <isr+0xf04>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f3a0:	bf38      	it	cc
    f3a2:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3a4:	f7f8 fd90 	bl	7ec8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f3a8:	f240 6139 	movw	r1, #1593	; 0x639
    f3ac:	f7fb fc40 	bl	ac30 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3b0:	462b      	mov	r3, r5
    f3b2:	2204      	movs	r2, #4
    f3b4:	4629      	mov	r1, r5
    f3b6:	9500      	str	r5, [sp, #0]
    f3b8:	4628      	mov	r0, r5
    f3ba:	f7f8 fd85 	bl	7ec8 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3c0:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3c4:	68a3      	ldr	r3, [r4, #8]
    f3c6:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f3ca:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3cc:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f3d0:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f3d4:	9308      	str	r3, [sp, #32]
    f3d6:	4b8f      	ldr	r3, [pc, #572]	; (f614 <isr+0xef4>)
    f3d8:	9307      	str	r3, [sp, #28]
    f3da:	4b8f      	ldr	r3, [pc, #572]	; (f618 <isr+0xef8>)
    f3dc:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3de:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f3e0:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3e2:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f3e4:	4640      	mov	r0, r8
    f3e6:	a386      	add	r3, pc, #536	; (adr r3, f600 <isr+0xee0>)
    f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3ec:	4649      	mov	r1, r9
		ticker_status =
    f3ee:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f3f0:	f7f0 ff10 	bl	214 <__aeabi_uldivmod>
    f3f4:	4610      	mov	r0, r2
    f3f6:	4619      	mov	r1, r3
    f3f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f3fc:	2300      	movs	r3, #0
    f3fe:	f7f0 ff09 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f402:	a37f      	add	r3, pc, #508	; (adr r3, f600 <isr+0xee0>)
    f404:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f408:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f40a:	4649      	mov	r1, r9
    f40c:	4640      	mov	r0, r8
    f40e:	f7f0 ff01 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f412:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f414:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f416:	a37a      	add	r3, pc, #488	; (adr r3, f600 <isr+0xee0>)
    f418:	e9d3 2300 	ldrd	r2, r3, [r3]
    f41c:	fba1 010a 	umull	r0, r1, r1, sl
    f420:	f7f0 fef8 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f424:	3407      	adds	r4, #7
    f426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f42a:	b2e4      	uxtb	r4, r4
    f42c:	9000      	str	r0, [sp, #0]
    f42e:	465b      	mov	r3, fp
    f430:	4622      	mov	r2, r4
    f432:	4629      	mov	r1, r5
    f434:	4628      	mov	r0, r5
    f436:	f7f8 fca9 	bl	7d8c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f43a:	f030 0302 	bics.w	r3, r0, #2
    f43e:	f43f aa19 	beq.w	e874 <isr+0x154>
    f442:	4b71      	ldr	r3, [pc, #452]	; (f608 <isr+0xee8>)
    f444:	9301      	str	r3, [sp, #4]
    f446:	9300      	str	r3, [sp, #0]
    f448:	4b70      	ldr	r3, [pc, #448]	; (f60c <isr+0xeec>)
    f44a:	e514      	b.n	ee76 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f44c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f450:	4972      	ldr	r1, [pc, #456]	; (f61c <isr+0xefc>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f452:	09d2      	lsrs	r2, r2, #7
    f454:	f362 1386 	bfi	r3, r2, #6, #1
    f458:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f45a:	2206      	movs	r2, #6
    f45c:	e6a4      	b.n	f1a8 <isr+0xa88>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f45e:	b9a0      	cbnz	r0, f48a <isr+0xd6a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f460:	f899 3009 	ldrb.w	r3, [r9, #9]
    f464:	2b00      	cmp	r3, #0
    f466:	f43f ad26 	beq.w	eeb6 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f46a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f46e:	2b00      	cmp	r3, #0
    f470:	f47f ad21 	bne.w	eeb6 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
    f474:	f1ba 0f00 	cmp.w	sl, #0
    f478:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f47c:	bf14      	ite	ne
    f47e:	4641      	movne	r1, r8
    f480:	21ff      	moveq	r1, #255	; 0xff
    f482:	4628      	mov	r0, r5
    f484:	f7fb fb10 	bl	aaa8 <isr_rx_scan_report>
    f488:	e515      	b.n	eeb6 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f48a:	2801      	cmp	r0, #1
    f48c:	d00e      	beq.n	f4ac <isr+0xd8c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f48e:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f492:	f003 020b 	and.w	r2, r3, #11
    f496:	2a02      	cmp	r2, #2
    f498:	d0e2      	beq.n	f460 <isr+0xd40>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f49a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f49e:	2b07      	cmp	r3, #7
    f4a0:	d10d      	bne.n	f4be <isr+0xd9e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f4a2:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f4a6:	0758      	lsls	r0, r3, #29
    f4a8:	d1da      	bne.n	f460 <isr+0xd40>
    f4aa:	e504      	b.n	eeb6 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f4ac:	ab10      	add	r3, sp, #64	; 0x40
    f4ae:	4642      	mov	r2, r8
    f4b0:	4631      	mov	r1, r6
    f4b2:	2000      	movs	r0, #0
    f4b4:	f7fb faac 	bl	aa10 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f4b8:	2800      	cmp	r0, #0
    f4ba:	d1d1      	bne.n	f460 <isr+0xd40>
    f4bc:	e7e7      	b.n	f48e <isr+0xd6e>
		   (_radio.scanner.phy)) ||
    f4be:	2b04      	cmp	r3, #4
    f4c0:	f47f acf9 	bne.w	eeb6 <isr+0x796>
		   (_radio.scanner.state != 0) &&
    f4c4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f4c8:	0799      	lsls	r1, r3, #30
    f4ca:	f57f acf4 	bpl.w	eeb6 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f4ce:	f003 f823 	bl	12518 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f4d2:	f899 3008 	ldrb.w	r3, [r9, #8]
    f4d6:	7802      	ldrb	r2, [r0, #0]
    f4d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f4dc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f4e0:	f47f ace9 	bne.w	eeb6 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f4e4:	2206      	movs	r2, #6
    f4e6:	f109 010a 	add.w	r1, r9, #10
    f4ea:	3008      	adds	r0, #8
    f4ec:	f7f2 fb7d 	bl	1bea <memcmp>
		   (_radio.scanner.state != 0) &&
    f4f0:	2800      	cmp	r0, #0
    f4f2:	d0b5      	beq.n	f460 <isr+0xd40>
    f4f4:	e4df      	b.n	eeb6 <isr+0x796>
	_radio.packet_counter++;
    f4f6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f4fa:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f4fe:	3301      	adds	r3, #1
    f500:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f504:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f506:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f50a:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f50e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f512:	2301      	movs	r3, #1
    f514:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f518:	2f00      	cmp	r7, #0
    f51a:	f000 82d2 	beq.w	fac2 <isr+0x13a2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f51e:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f522:	f898 1008 	ldrb.w	r1, [r8, #8]
    f526:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f52a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f52e:	f003 0201 	and.w	r2, r3, #1
    f532:	4291      	cmp	r1, r2
    f534:	f000 819e 	beq.w	f874 <isr+0x1154>
		_radio.conn_curr->sn++;
    f538:	f082 0201 	eor.w	r2, r2, #1
    f53c:	f362 0300 	bfi	r3, r2, #0, #1
    f540:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f544:	7ce3      	ldrb	r3, [r4, #19]
    f546:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f548:	bf02      	ittt	eq
    f54a:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f54e:	f043 0301 	orreq.w	r3, r3, #1
    f552:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f556:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f55a:	061a      	lsls	r2, r3, #24
    f55c:	f100 8185 	bmi.w	f86a <isr+0x114a>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f560:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f564:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f568:	1d30      	adds	r0, r6, #4
    f56a:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f56e:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f572:	f1b9 0f00 	cmp.w	r9, #0
    f576:	f000 80ab 	beq.w	f6d0 <isr+0xfb0>
				if (_radio.conn_curr->enc_tx) {
    f57a:	069b      	lsls	r3, r3, #26
    f57c:	d50b      	bpl.n	f596 <isr+0xe76>
					_radio.conn_curr->ccm_tx.counter++;
    f57e:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f582:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f586:	f11b 0201 	adds.w	r2, fp, #1
    f58a:	f14c 0300 	adc.w	r3, ip, #0
    f58e:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f592:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f596:	5c43      	ldrb	r3, [r0, r1]
    f598:	f003 0303 	and.w	r3, r3, #3
    f59c:	2b03      	cmp	r3, #3
    f59e:	f040 8097 	bne.w	f6d0 <isr+0xfb0>
	switch (pdu_data_tx->llctrl.opcode) {
    f5a2:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f5a6:	3b02      	subs	r3, #2
    f5a8:	2b16      	cmp	r3, #22
    f5aa:	f200 8091 	bhi.w	f6d0 <isr+0xfb0>
    f5ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5b2:	0017      	.short	0x0017
    f5b4:	00c50073 	.word	0x00c50073
    f5b8:	008f008f 	.word	0x008f008f
    f5bc:	008f008f 	.word	0x008f008f
    f5c0:	0091008f 	.word	0x0091008f
    f5c4:	008f009c 	.word	0x008f009c
    f5c8:	008f00cc 	.word	0x008f00cc
    f5cc:	008f008f 	.word	0x008f008f
    f5d0:	008f008f 	.word	0x008f008f
    f5d4:	00d6008f 	.word	0x00d6008f
    f5d8:	00ee008f 	.word	0x00ee008f
    f5dc:	012000f5 	.word	0x012000f5
		_radio.state = STATE_CLOSE;
    f5e0:	2303      	movs	r3, #3
    f5e2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f5e4:	f002 ff42 	bl	1246c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f5e8:	f002 ff5e 	bl	124a8 <radio_is_ready>
    f5ec:	b1e0      	cbz	r0, f628 <isr+0xf08>
    f5ee:	4b06      	ldr	r3, [pc, #24]	; (f608 <isr+0xee8>)
    f5f0:	9301      	str	r3, [sp, #4]
    f5f2:	9300      	str	r3, [sp, #0]
    f5f4:	4b0a      	ldr	r3, [pc, #40]	; (f620 <isr+0xf00>)
    f5f6:	f7ff b8f1 	b.w	e7dc <isr+0xbc>
    f5fa:	bf00      	nop
    f5fc:	f3af 8000 	nop.w
    f600:	1afd498d 	.word	0x1afd498d
    f604:	00000007 	.word	0x00000007
    f608:	00014b99 	.word	0x00014b99
    f60c:	0001723b 	.word	0x0001723b
    f610:	0000ac31 	.word	0x0000ac31
    f614:	0000ab8d 	.word	0x0000ab8d
    f618:	0000d031 	.word	0x0000d031
    f61c:	200009a4 	.word	0x200009a4
    f620:	00017247 	.word	0x00017247
    f624:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f628:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f62c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f630:	2913      	cmp	r1, #19
    f632:	bf08      	it	eq
    f634:	2116      	moveq	r1, #22
    f636:	f7fb fee3 	bl	b400 <terminate_ind_rx_enqueue>
		terminate = 1;
    f63a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f63c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f640:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f644:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f646:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f64a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f64e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f650:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f654:	d11e      	bne.n	f694 <isr+0xf74>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f656:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f65a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f65e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f660:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f662:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f666:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f66a:	f040 80c9 	bne.w	f800 <isr+0x10e0>
		if (node_tx) {
    f66e:	b18e      	cbz	r6, f694 <isr+0xf74>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f670:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f674:	f8d3 e000 	ldr.w	lr, [r3]
    f678:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f67c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f67e:	bf06      	itte	eq
    f680:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f684:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f688:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f68c:	49cd      	ldr	r1, [pc, #820]	; (f9c4 <isr+0x12a4>)
    f68e:	4630      	mov	r0, r6
    f690:	f7f7 fd0d 	bl	70ae <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f694:	2600      	movs	r6, #0
    f696:	e0bc      	b.n	f812 <isr+0x10f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f698:	2208      	movs	r2, #8
    f69a:	f10a 010e 	add.w	r1, sl, #14
    f69e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f6a2:	f7f2 fab7 	bl	1c14 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f6a6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f6aa:	2204      	movs	r2, #4
    f6ac:	f10a 0116 	add.w	r1, sl, #22
    f6b0:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f6b4:	f7f2 faae 	bl	1c14 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f6b8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f6bc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f6c0:	f042 0208 	orr.w	r2, r2, #8
    f6c4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f6c8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f6cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f6d0:	2500      	movs	r5, #0
    f6d2:	e7b3      	b.n	f63c <isr+0xf1c>
		_radio.conn_curr->pause_tx = 1;
    f6d4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f6d8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f6dc:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f6e0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f6e4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f6e8:	e7f2      	b.n	f6d0 <isr+0xfb0>
		if (_radio.role == ROLE_MASTER) {
    f6ea:	f894 a013 	ldrb.w	sl, [r4, #19]
    f6ee:	fa5f fa8a 	uxtb.w	sl, sl
    f6f2:	f1ba 0f04 	cmp.w	sl, #4
    f6f6:	d121      	bne.n	f73c <isr+0x101c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6f8:	7933      	ldrb	r3, [r6, #4]
    f6fa:	f043 0303 	orr.w	r3, r3, #3
    f6fe:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f700:	2317      	movs	r3, #23
    f702:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f704:	2303      	movs	r3, #3
    f706:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f708:	2208      	movs	r2, #8
    f70a:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f70e:	3004      	adds	r0, #4
    f710:	f7f2 fa80 	bl	1c14 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f714:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f718:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f71a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f71e:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f720:	f106 0112 	add.w	r1, r6, #18
    f724:	2208      	movs	r2, #8
    f726:	6860      	ldr	r0, [r4, #4]
    f728:	f003 ff7c 	bl	13624 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f72c:	f106 011a 	add.w	r1, r6, #26
    f730:	4652      	mov	r2, sl
    f732:	6860      	ldr	r0, [r4, #4]
    f734:	f003 ff76 	bl	13624 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f738:	2600      	movs	r6, #0
    f73a:	e7c9      	b.n	f6d0 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f73c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f740:	f043 0308 	orr.w	r3, r3, #8
    f744:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f748:	e7c2      	b.n	f6d0 <isr+0xfb0>
		_radio.conn_curr->pause_rx = 0;
    f74a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f74e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f752:	f36f 03c3 	bfc	r3, #3, #1
    f756:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f75a:	2300      	movs	r3, #0
    f75c:	e7c2      	b.n	f6e4 <isr+0xfc4>
		if ((_radio.conn_curr->llcp_length.req !=
    f75e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f762:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f766:	429a      	cmp	r2, r3
    f768:	d0b2      	beq.n	f6d0 <isr+0xfb0>
		    (_radio.conn_curr->llcp_length.state ==
    f76a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f76e:	f003 0203 	and.w	r2, r3, #3
    f772:	2a01      	cmp	r2, #1
    f774:	d1ac      	bne.n	f6d0 <isr+0xfb0>
			_radio.conn_curr->pause_tx = 1;
    f776:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f77a:	f042 0208 	orr.w	r2, r2, #8
    f77e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f782:	2202      	movs	r2, #2
    f784:	f362 0301 	bfi	r3, r2, #0, #2
    f788:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f78c:	e7a0      	b.n	f6d0 <isr+0xfb0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f78e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f792:	2202      	movs	r2, #2
    f794:	f362 0301 	bfi	r3, r2, #0, #2
    f798:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f79c:	7ce3      	ldrb	r3, [r4, #19]
    f79e:	2b03      	cmp	r3, #3
    f7a0:	d196      	bne.n	f6d0 <isr+0xfb0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f7a2:	2301      	movs	r3, #1
    f7a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f7a8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f7ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f7b0:	2202      	movs	r2, #2
    f7b2:	2304      	movs	r3, #4
    f7b4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f7b8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f7bc:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f7c0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f7c4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f7c8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f7cc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f7d0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f7d4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f7d8:	f003 0307 	and.w	r3, r3, #7
    f7dc:	aa12      	add	r2, sp, #72	; 0x48
    f7de:	4413      	add	r3, r2
    f7e0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f7e4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f7e8:	f363 0202 	bfi	r2, r3, #0, #3
    f7ec:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f7f0:	e76e      	b.n	f6d0 <isr+0xfb0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f7f2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f7f6:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f7fa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f7fe:	e7f3      	b.n	f7e8 <isr+0x10c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f800:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f804:	4293      	cmp	r3, r2
    f806:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f808:	bf08      	it	eq
    f80a:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f80e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f812:	b37d      	cbz	r5, f874 <isr+0x1154>
		connection_release(_radio.conn_curr);
    f814:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f818:	f7fb fc40 	bl	b09c <connection_release>
		_radio.conn_curr = NULL;
    f81c:	2300      	movs	r3, #0
    f81e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f822:	f002 ffe9 	bl	127f8 <radio_tmr_aa_restore>
    f826:	b918      	cbnz	r0, f830 <isr+0x1110>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f828:	f002 ffda 	bl	127e0 <radio_tmr_aa_get>
    f82c:	f002 ffde 	bl	127ec <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f830:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f834:	2b00      	cmp	r3, #0
    f836:	f43f a81d 	beq.w	e874 <isr+0x154>
	if (tx_release) {
    f83a:	b11e      	cbz	r6, f844 <isr+0x1124>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f83c:	4631      	mov	r1, r6
    f83e:	8c18      	ldrh	r0, [r3, #32]
    f840:	f7fb fba2 	bl	af88 <pdu_node_tx_release>
	if (rx_enqueue) {
    f844:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f848:	2b00      	cmp	r3, #0
    f84a:	f43f a813 	beq.w	e874 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
    f84e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f852:	8c18      	ldrh	r0, [r3, #32]
    f854:	f7fb f980 	bl	ab58 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f858:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f85c:	8c1b      	ldrh	r3, [r3, #32]
    f85e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f862:	f7fb f889 	bl	a978 <packet_rx_enqueue>
    f866:	f7ff b805 	b.w	e874 <isr+0x154>
			_radio.conn_curr->empty = 0;
    f86a:	f36f 13c7 	bfc	r3, #7, #1
    f86e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f872:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f874:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f878:	f898 2008 	ldrb.w	r2, [r8, #8]
    f87c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f880:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f884:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f888:	429a      	cmp	r2, r3
    f88a:	f040 80e9 	bne.w	fa60 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f88e:	2003      	movs	r0, #3
    f890:	f7fa fa08 	bl	9ca4 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f894:	2800      	cmp	r0, #0
    f896:	f000 80e3 	beq.w	fa60 <isr+0x1340>
	    (packet_rx_reserve_get(3) != 0) &&
    f89a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f89e:	b393      	cbz	r3, f906 <isr+0x11e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f8a0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f8a4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f8a8:	4293      	cmp	r3, r2
    f8aa:	d105      	bne.n	f8b8 <isr+0x1198>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f8ac:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f8b0:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f8b4:	4291      	cmp	r1, r2
    f8b6:	d026      	beq.n	f906 <isr+0x11e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f8b8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f8bc:	4293      	cmp	r3, r2
    f8be:	f000 80cf 	beq.w	fa60 <isr+0x1340>
	      (_radio.fc_req != _radio.fc_ack) &&
    f8c2:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f8c6:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f8ca:	429a      	cmp	r2, r3
    f8cc:	f000 80c8 	beq.w	fa60 <isr+0x1340>
		(((_radio.fc_req == 0) &&
    f8d0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f8d4:	b933      	cbnz	r3, f8e4 <isr+0x11c4>
		   _radio.conn_curr->handle)) ||
    f8d6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f8da:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f8de:	8c1b      	ldrh	r3, [r3, #32]
    f8e0:	429a      	cmp	r2, r3
    f8e2:	d010      	beq.n	f906 <isr+0x11e6>
		 ((_radio.fc_req != 0) &&
    f8e4:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	f000 80b9 	beq.w	fa60 <isr+0x1340>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f8ee:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f8f2:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f8f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f8fa:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f8fe:	8c0b      	ldrh	r3, [r1, #32]
    f900:	429a      	cmp	r2, r3
    f902:	f040 80ad 	bne.w	fa60 <isr+0x1340>
		if (pdu_data_rx->len != 0) {
    f906:	f898 5009 	ldrb.w	r5, [r8, #9]
    f90a:	2d00      	cmp	r5, #0
    f90c:	f000 80b1 	beq.w	fa72 <isr+0x1352>
			if (_radio.conn_curr->enc_rx) {
    f910:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f914:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f918:	f015 0510 	ands.w	r5, r5, #16
    f91c:	d00c      	beq.n	f938 <isr+0x1218>
				done = radio_ccm_is_done();
    f91e:	f002 fff7 	bl	12910 <radio_ccm_is_done>
				LL_ASSERT(done);
    f922:	b940      	cbnz	r0, f936 <isr+0x1216>
    f924:	4b28      	ldr	r3, [pc, #160]	; (f9c8 <isr+0x12a8>)
    f926:	9301      	str	r3, [sp, #4]
    f928:	9300      	str	r3, [sp, #0]
    f92a:	4a28      	ldr	r2, [pc, #160]	; (f9cc <isr+0x12ac>)
    f92c:	4b28      	ldr	r3, [pc, #160]	; (f9d0 <isr+0x12b0>)
    f92e:	4929      	ldr	r1, [pc, #164]	; (f9d4 <isr+0x12b4>)
    f930:	4829      	ldr	r0, [pc, #164]	; (f9d8 <isr+0x12b8>)
    f932:	f7ff baa3 	b.w	ee7c <isr+0x75c>
				ccm_rx_increment = 1;
    f936:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f938:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f93c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f940:	06d9      	lsls	r1, r3, #27
    f942:	d42c      	bmi.n	f99e <isr+0x127e>
			    (_radio.conn_curr->pause_rx &&
    f944:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f948:	f898 3008 	ldrb.w	r3, [r8, #8]
    f94c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f950:	f012 0f04 	tst.w	r2, #4
    f954:	d142      	bne.n	f9dc <isr+0x12bc>
			_radio.conn_curr->appto_expire = 0;
    f956:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f958:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f95c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f960:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f964:	d004      	beq.n	f970 <isr+0x1250>
    f966:	2b02      	cmp	r3, #2
    f968:	d873      	bhi.n	fa52 <isr+0x1332>
				*rx_enqueue = 1;
    f96a:	2301      	movs	r3, #1
    f96c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f970:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f974:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f978:	f082 0202 	eor.w	r2, r2, #2
    f97c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f980:	2d00      	cmp	r5, #0
    f982:	d06d      	beq.n	fa60 <isr+0x1340>
				_radio.conn_curr->ccm_rx.counter++;
    f984:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f988:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f98c:	f119 0001 	adds.w	r0, r9, #1
    f990:	f14a 0100 	adc.w	r1, sl, #0
    f994:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f998:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f99c:	e060      	b.n	fa60 <isr+0x1340>
			     !radio_ccm_mic_is_valid()) ||
    f99e:	f002 ffd5 	bl	1294c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f9a2:	2800      	cmp	r0, #0
    f9a4:	d1ce      	bne.n	f944 <isr+0x1224>
				_radio.state = STATE_CLOSE;
    f9a6:	2303      	movs	r3, #3
    f9a8:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f9aa:	f002 fd5f 	bl	1246c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f9ae:	f002 fd7b 	bl	124a8 <radio_is_ready>
    f9b2:	4605      	mov	r5, r0
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d040      	beq.n	fa3a <isr+0x131a>
    f9b8:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <isr+0x12a8>)
    f9ba:	9301      	str	r3, [sp, #4]
    f9bc:	9300      	str	r3, [sp, #0]
    f9be:	4b04      	ldr	r3, [pc, #16]	; (f9d0 <isr+0x12b0>)
    f9c0:	f7fe bf0c 	b.w	e7dc <isr+0xbc>
    f9c4:	20000a1c 	.word	0x20000a1c
    f9c8:	00014b99 	.word	0x00014b99
    f9cc:	00015f55 	.word	0x00015f55
    f9d0:	000172ab 	.word	0x000172ab
    f9d4:	00015fa4 	.word	0x00015fa4
    f9d8:	00017903 	.word	0x00017903
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f9dc:	f003 0103 	and.w	r1, r3, #3
    f9e0:	2903      	cmp	r1, #3
    f9e2:	d1e0      	bne.n	f9a6 <isr+0x1286>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f9e4:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f9e8:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f9ec:	f1be 0f00 	cmp.w	lr, #0
    f9f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f9f4:	db15      	blt.n	fa22 <isr+0x1302>
	       (!conn->role &&
    f9f6:	b922      	cbnz	r2, fa02 <isr+0x12e2>
		((!conn->refresh &&
    f9f8:	2902      	cmp	r1, #2
    f9fa:	d0ac      	beq.n	f956 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f9fc:	2911      	cmp	r1, #17
    f9fe:	d8d2      	bhi.n	f9a6 <isr+0x1286>
    fa00:	e009      	b.n	fa16 <isr+0x12f6>
		 (conn->refresh &&
    fa02:	1e8a      	subs	r2, r1, #2
    fa04:	b2d2      	uxtb	r2, r2
    fa06:	2a09      	cmp	r2, #9
    fa08:	d8f8      	bhi.n	f9fc <isr+0x12dc>
    fa0a:	f240 2e05 	movw	lr, #517	; 0x205
    fa0e:	fa2e f202 	lsr.w	r2, lr, r2
    fa12:	07d2      	lsls	r2, r2, #31
    fa14:	d49f      	bmi.n	f956 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa16:	4aac      	ldr	r2, [pc, #688]	; (fcc8 <isr+0x15a8>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa18:	fa22 f101 	lsr.w	r1, r2, r1
    fa1c:	07ca      	lsls	r2, r1, #31
    fa1e:	d5c2      	bpl.n	f9a6 <isr+0x1286>
    fa20:	e799      	b.n	f956 <isr+0x1236>
	       (conn->role &&
    fa22:	b92a      	cbnz	r2, fa30 <isr+0x1310>
		((!conn->refresh &&
    fa24:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fa26:	d096      	beq.n	f956 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa28:	2911      	cmp	r1, #17
    fa2a:	d8bc      	bhi.n	f9a6 <isr+0x1286>
    fa2c:	4aa7      	ldr	r2, [pc, #668]	; (fccc <isr+0x15ac>)
    fa2e:	e7f3      	b.n	fa18 <isr+0x12f8>
		 (conn->refresh &&
    fa30:	1e8a      	subs	r2, r1, #2
    fa32:	2a01      	cmp	r2, #1
    fa34:	d98f      	bls.n	f956 <isr+0x1236>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fa36:	290b      	cmp	r1, #11
    fa38:	e7f5      	b.n	fa26 <isr+0x1306>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    fa3a:	213d      	movs	r1, #61	; 0x3d
    fa3c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa40:	f7fb fcde 	bl	b400 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    fa44:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa48:	f7fb fb28 	bl	b09c <connection_release>
				_radio.conn_curr = NULL;
    fa4c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    fa50:	e6e7      	b.n	f822 <isr+0x1102>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    fa52:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    fa56:	4640      	mov	r0, r8
    fa58:	f7fd fd42 	bl	d4e0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    fa5c:	2800      	cmp	r0, #0
    fa5e:	d087      	beq.n	f970 <isr+0x1250>
		_radio.conn_curr->supervision_expire = 0;
    fa60:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    fa64:	2300      	movs	r3, #0
    fa66:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    fa6a:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    fa6c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    fa70:	e03e      	b.n	faf0 <isr+0x13d0>
		} else if ((_radio.conn_curr->enc_rx) ||
    fa72:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fa76:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    fa7a:	f013 0f14 	tst.w	r3, #20
    fa7e:	f43f af77 	beq.w	f970 <isr+0x1250>
					    (conn->latency + 6)) ?
    fa82:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    fa84:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    fa88:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    fa8a:	4299      	cmp	r1, r3
    fa8c:	bfc4      	itt	gt
    fa8e:	1f8b      	subgt	r3, r1, #6
    fa90:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    fa92:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    fa96:	bfcc      	ite	gt
    fa98:	b29b      	uxthgt	r3, r3
    fa9a:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    fa9c:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    fa9e:	bf1e      	ittt	ne
    faa0:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    faa4:	2300      	movne	r3, #0
    faa6:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    faaa:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    faae:	2b00      	cmp	r3, #0
    fab0:	f47f af5e 	bne.w	f970 <isr+0x1250>
				conn->appto_expire = conn->appto_reload;
    fab4:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    fab8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    fabc:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    fac0:	e756      	b.n	f970 <isr+0x1250>
		if (_radio.crc_expire == 0) {
    fac2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    fac6:	b913      	cbnz	r3, face <isr+0x13ae>
			_radio.crc_expire = 2;
    fac8:	2302      	movs	r3, #2
    faca:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    face:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fad2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    fad6:	3b01      	subs	r3, #1
    fad8:	b2db      	uxtb	r3, r3
    fada:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fade:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    fae2:	fab3 f583 	clz	r5, r3
    fae6:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    fae8:	bb86      	cbnz	r6, fb4c <isr+0x142c>
			_radio.conn_curr->supervision_expire =
    faea:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    faec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    faf0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    faf4:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    faf6:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fafa:	f7fd fbb3 	bl	d264 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fafe:	7d23      	ldrb	r3, [r4, #20]
    fb00:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fb02:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb06:	d010      	beq.n	fb2a <isr+0x140a>
    fb08:	bb15      	cbnz	r5, fb50 <isr+0x1430>
    fb0a:	b137      	cbz	r7, fb1a <isr+0x13fa>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fb0c:	f898 3008 	ldrb.w	r3, [r8, #8]
    fb10:	06d8      	lsls	r0, r3, #27
    fb12:	d402      	bmi.n	fb1a <isr+0x13fa>
			 (pdu_data_tx->len == 0)) ||
    fb14:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fb16:	785b      	ldrb	r3, [r3, #1]
    fb18:	b1d3      	cbz	r3, fb50 <isr+0x1430>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    fb1a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    fb1e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb22:	2b00      	cmp	r3, #0
    fb24:	bf0c      	ite	eq
    fb26:	2302      	moveq	r3, #2
    fb28:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    fb2a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb2c:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    fb2e:	d12d      	bne.n	fb8c <isr+0x146c>
		if (_radio.role == ROLE_MASTER) {
    fb30:	7ce3      	ldrb	r3, [r4, #19]
    fb32:	2b04      	cmp	r3, #4
    fb34:	d10e      	bne.n	fb54 <isr+0x1434>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fb36:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb3a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fb3e:	f369 12c7 	bfi	r2, r9, #7, #1
    fb42:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    fb46:	f002 fc91 	bl	1246c <radio_disable>
    fb4a:	e66a      	b.n	f822 <isr+0x1102>
	struct radio_pdu_node_tx *tx_release = NULL;
    fb4c:	2600      	movs	r6, #0
    fb4e:	e7cf      	b.n	faf0 <isr+0x13d0>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb50:	2303      	movs	r3, #3
    fb52:	e7ea      	b.n	fb2a <isr+0x140a>
			radio_switch_complete_and_disable();
    fb54:	f002 fcfa 	bl	1254c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    fb58:	9910      	ldr	r1, [sp, #64]	; 0x40
    fb5a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fb5e:	780b      	ldrb	r3, [r1, #0]
    fb60:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    fb64:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    fb68:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fb6c:	f362 0382 	bfi	r3, r2, #2, #1
    fb70:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    fb72:	f7fa fc21 	bl	a3b8 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    fb76:	f002 fc97 	bl	124a8 <radio_is_ready>
    fb7a:	2800      	cmp	r0, #0
    fb7c:	f43f ae51 	beq.w	f822 <isr+0x1102>
    fb80:	4b53      	ldr	r3, [pc, #332]	; (fcd0 <isr+0x15b0>)
    fb82:	9301      	str	r3, [sp, #4]
    fb84:	9300      	str	r3, [sp, #0]
    fb86:	4b53      	ldr	r3, [pc, #332]	; (fcd4 <isr+0x15b4>)
    fb88:	f7fe be28 	b.w	e7dc <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
    fb8c:	2096      	movs	r0, #150	; 0x96
    fb8e:	f002 fd63 	bl	12658 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    fb92:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb96:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fb9a:	f000 0007 	and.w	r0, r0, #7
    fb9e:	f002 fcbf 	bl	12520 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    fba2:	f002 fe35 	bl	12810 <radio_tmr_end_capture>
    fba6:	e7d7      	b.n	fb58 <isr+0x1438>
		LL_ASSERT(0);
    fba8:	4b49      	ldr	r3, [pc, #292]	; (fcd0 <isr+0x15b0>)
    fbaa:	9301      	str	r3, [sp, #4]
    fbac:	9300      	str	r3, [sp, #0]
    fbae:	4b4a      	ldr	r3, [pc, #296]	; (fcd8 <isr+0x15b8>)
    fbb0:	f7fe bead 	b.w	e90e <isr+0x1ee>
	switch (_radio.role) {
    fbb4:	7ce2      	ldrb	r2, [r4, #19]
    fbb6:	2a04      	cmp	r2, #4
    fbb8:	f200 823a 	bhi.w	10030 <__kernel_ram_size+0x30>
    fbbc:	e8df f012 	tbh	[pc, r2, lsl #1]
    fbc0:	00050228 	.word	0x00050228
    fbc4:	00bf0058 	.word	0x00bf0058
    fbc8:	00bf      	.short	0x00bf
	if ((_radio.state == STATE_CLOSE) &&
    fbca:	2b03      	cmp	r3, #3
    fbcc:	d109      	bne.n	fbe2 <isr+0x14c2>
	    (_radio.advertiser.chan_map_current != 0)) {
    fbce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    fbd2:	0759      	lsls	r1, r3, #29
    fbd4:	d005      	beq.n	fbe2 <isr+0x14c2>
		adv_setup();
    fbd6:	f7fb fb35 	bl	b244 <adv_setup>
		radio_tx_enable();
    fbda:	f002 fc41 	bl	12460 <radio_tx_enable>
    fbde:	f7fe be19 	b.w	e814 <isr+0xf4>
		radio_filter_disable();
    fbe2:	f002 fcfd 	bl	125e0 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    fbe6:	7d23      	ldrb	r3, [r4, #20]
    fbe8:	2b03      	cmp	r3, #3
    fbea:	f040 808f 	bne.w	fd0c <isr+0x15ec>
		    (!_radio.advertiser.is_hdcd)) {
    fbee:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    fbf2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    fbf6:	f040 8089 	bne.w	fd0c <isr+0x15ec>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    fbfa:	2201      	movs	r2, #1
    fbfc:	a910      	add	r1, sp, #64	; 0x40
    fbfe:	6860      	ldr	r0, [r4, #4]
    fc00:	f003 fd10 	bl	13624 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    fc04:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc08:	4834      	ldr	r0, [pc, #208]	; (fcdc <isr+0x15bc>)
			random_delay %= 10;
    fc0a:	230a      	movs	r3, #10
    fc0c:	fbb1 f2f3 	udiv	r2, r1, r3
    fc10:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    fc14:	3201      	adds	r2, #1
    fc16:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc18:	b2d6      	uxtb	r6, r2
    fc1a:	fba6 0100 	umull	r0, r1, r6, r0
    fc1e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    fc20:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc24:	fb03 1106 	mla	r1, r3, r6, r1
    fc28:	a325      	add	r3, pc, #148	; (adr r3, fcc0 <isr+0x15a0>)
    fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc2e:	f7f0 faf1 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    fc32:	f640 734b 	movw	r3, #3915	; 0xf4b
    fc36:	9306      	str	r3, [sp, #24]
    fc38:	4b29      	ldr	r3, [pc, #164]	; (fce0 <isr+0x15c0>)
    fc3a:	9305      	str	r3, [sp, #20]
    fc3c:	9504      	str	r5, [sp, #16]
    fc3e:	b283      	uxth	r3, r0
    fc40:	9503      	str	r5, [sp, #12]
    fc42:	9502      	str	r5, [sp, #8]
    fc44:	9501      	str	r5, [sp, #4]
    fc46:	9500      	str	r5, [sp, #0]
    fc48:	2205      	movs	r2, #5
    fc4a:	4629      	mov	r1, r5
    fc4c:	4628      	mov	r0, r5
    fc4e:	f7f8 f8ed 	bl	7e2c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc52:	f030 0302 	bics.w	r3, r0, #2
    fc56:	d059      	beq.n	fd0c <isr+0x15ec>
    fc58:	7ca3      	ldrb	r3, [r4, #18]
    fc5a:	2b05      	cmp	r3, #5
    fc5c:	d056      	beq.n	fd0c <isr+0x15ec>
    fc5e:	4b1c      	ldr	r3, [pc, #112]	; (fcd0 <isr+0x15b0>)
    fc60:	9301      	str	r3, [sp, #4]
    fc62:	9300      	str	r3, [sp, #0]
    fc64:	4a1f      	ldr	r2, [pc, #124]	; (fce4 <isr+0x15c4>)
    fc66:	4b20      	ldr	r3, [pc, #128]	; (fce8 <isr+0x15c8>)
    fc68:	4920      	ldr	r1, [pc, #128]	; (fcec <isr+0x15cc>)
    fc6a:	4821      	ldr	r0, [pc, #132]	; (fcf0 <isr+0x15d0>)
    fc6c:	f7ff b906 	b.w	ee7c <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
    fc70:	2b03      	cmp	r3, #3
    fc72:	d13f      	bne.n	fcf4 <isr+0x15d4>
		radio_tmr_tifs_set(RADIO_TIFS);
    fc74:	2096      	movs	r0, #150	; 0x96
    fc76:	f002 fcef 	bl	12658 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fc7a:	2300      	movs	r3, #0
    fc7c:	4619      	mov	r1, r3
    fc7e:	461a      	mov	r2, r3
    fc80:	4618      	mov	r0, r3
    fc82:	f002 fc59 	bl	12538 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    fc86:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fc8a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    fc8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    fc92:	3008      	adds	r0, #8
    fc94:	f002 fbc4 	bl	12420 <radio_pkt_rx_set>
		radio_rssi_measure();
    fc98:	f002 fc66 	bl	12568 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    fc9c:	f001 ff02 	bl	11aa4 <ctrl_rl_enabled>
    fca0:	b138      	cbz	r0, fcb2 <isr+0x1592>
			u8_t count, *irks = ctrl_irks_get(&count);
    fca2:	a810      	add	r0, sp, #64	; 0x40
    fca4:	f001 fc4e 	bl	11544 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fca8:	4601      	mov	r1, r0
    fcaa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fcae:	f002 fe57 	bl	12960 <radio_ar_configure>
		_radio.state = STATE_RX;
    fcb2:	2301      	movs	r3, #1
    fcb4:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    fcb6:	f002 fbcd 	bl	12454 <radio_rx_enable>
    fcba:	f7fe bdab 	b.w	e814 <isr+0xf4>
    fcbe:	bf00      	nop
    fcc0:	1afd498d 	.word	0x1afd498d
    fcc4:	00000007 	.word	0x00000007
    fcc8:	00022060 	.word	0x00022060
    fccc:	00022040 	.word	0x00022040
    fcd0:	00014b99 	.word	0x00014b99
    fcd4:	000172bb 	.word	0x000172bb
    fcd8:	000172c7 	.word	0x000172c7
    fcdc:	d4a51000 	.word	0xd4a51000
    fce0:	0000ac99 	.word	0x0000ac99
    fce4:	00015f55 	.word	0x00015f55
    fce8:	000172da 	.word	0x000172da
    fcec:	00015fa4 	.word	0x00015fa4
    fcf0:	00017929 	.word	0x00017929
		radio_filter_disable();
    fcf4:	f002 fc74 	bl	125e0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    fcf8:	7d23      	ldrb	r3, [r4, #20]
    fcfa:	2b05      	cmp	r3, #5
    fcfc:	d106      	bne.n	fd0c <isr+0x15ec>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fcfe:	2300      	movs	r3, #0
    fd00:	9300      	str	r3, [sp, #0]
    fd02:	2204      	movs	r2, #4
    fd04:	4619      	mov	r1, r3
    fd06:	4618      	mov	r0, r3
    fd08:	f7f8 f8de 	bl	7ec8 <ticker_stop>
	_radio.role = ROLE_NONE;
    fd0c:	2500      	movs	r5, #0
    fd0e:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    fd10:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    fd12:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    fd14:	f002 fd1e 	bl	12754 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fd18:	462a      	mov	r2, r5
    fd1a:	4629      	mov	r1, r5
    fd1c:	4628      	mov	r0, r5
    fd1e:	4bb2      	ldr	r3, [pc, #712]	; (ffe8 <isr+0x18c8>)
    fd20:	f7f7 fa76 	bl	7210 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fd24:	4605      	mov	r5, r0
    fd26:	2800      	cmp	r0, #0
    fd28:	f000 8188 	beq.w	1003c <__kernel_ram_size+0x3c>
    fd2c:	4baf      	ldr	r3, [pc, #700]	; (ffec <isr+0x18cc>)
    fd2e:	9301      	str	r3, [sp, #4]
    fd30:	9300      	str	r3, [sp, #0]
    fd32:	4aaf      	ldr	r2, [pc, #700]	; (fff0 <isr+0x18d0>)
    fd34:	4baf      	ldr	r3, [pc, #700]	; (fff4 <isr+0x18d4>)
    fd36:	49b0      	ldr	r1, [pc, #704]	; (fff8 <isr+0x18d8>)
    fd38:	48b0      	ldr	r0, [pc, #704]	; (fffc <isr+0x18dc>)
    fd3a:	f7ff b89f 	b.w	ee7c <isr+0x75c>
	if (_radio.conn_curr == 0) {
    fd3e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fd42:	2800      	cmp	r0, #0
    fd44:	d0e2      	beq.n	fd0c <isr+0x15ec>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    fd46:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    fd4a:	b181      	cbz	r1, fd6e <isr+0x164e>
    fd4c:	7ce3      	ldrb	r3, [r4, #19]
    fd4e:	2b03      	cmp	r3, #3
    fd50:	d003      	beq.n	fd5a <isr+0x163a>
    fd52:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fd56:	07da      	lsls	r2, r3, #31
    fd58:	d509      	bpl.n	fd6e <isr+0x164e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fd5a:	f7fb fb51 	bl	b400 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fd5e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fd62:	f7fb f99b 	bl	b09c <connection_release>
			_radio.conn_curr = NULL;
    fd66:	2300      	movs	r3, #0
    fd68:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fd6c:	e7ce      	b.n	fd0c <isr+0x15ec>
	latency_event = _radio.conn_curr->latency_event;
    fd6e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    fd72:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    fd76:	f10b 0601 	add.w	r6, fp, #1
    fd7a:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    fd7c:	2f00      	cmp	r7, #0
    fd7e:	f000 8084 	beq.w	fe8a <isr+0x176a>
		if (_radio.role == ROLE_SLAVE) {
    fd82:	7ce3      	ldrb	r3, [r4, #19]
    fd84:	2b03      	cmp	r3, #3
    fd86:	d173      	bne.n	fe70 <isr+0x1750>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fd88:	f002 fd36 	bl	127f8 <radio_tmr_aa_restore>
    fd8c:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    fd8e:	f002 fd39 	bl	12804 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    fd92:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    fd96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    fd9a:	f003 0307 	and.w	r3, r3, #7
    fd9e:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fda0:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    fda4:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    fda6:	d052      	beq.n	fe4e <isr+0x172e>
		return 40;
    fda8:	2b04      	cmp	r3, #4
    fdaa:	bf0c      	ite	eq
    fdac:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    fdb0:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fdb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
    fdb8:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    fdba:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fdbc:	930a      	str	r3, [sp, #40]	; 0x28
    fdbe:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1000c <__kernel_ram_size+0xc>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fdc2:	a387      	add	r3, pc, #540	; (adr r3, ffe0 <isr+0x18c0>)
    fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    fdc8:	d844      	bhi.n	fe54 <isr+0x1734>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fdca:	fba0 010a 	umull	r0, r1, r0, sl
    fdce:	f7f0 fa21 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fdd4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdd6:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdda:	a381      	add	r3, pc, #516	; (adr r3, ffe0 <isr+0x18c0>)
    fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
    fde0:	fba0 010a 	umull	r0, r1, r0, sl
    fde4:	f7f0 fa16 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    fde8:	2300      	movs	r3, #0
    fdea:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    fdec:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    fdee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdf2:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    fdf6:	b3ab      	cbz	r3, fe64 <isr+0x1744>
				if (pdu_data_tx->len ||
    fdf8:	795b      	ldrb	r3, [r3, #5]
    fdfa:	b913      	cbnz	r3, fe02 <isr+0x16e2>
    fdfc:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    fe00:	b10b      	cbz	r3, fe06 <isr+0x16e6>
					_radio.conn_curr->latency_event = 0;
    fe02:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    fe04:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    fe06:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fe0a:	2200      	movs	r2, #0
    fe0c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    fe0e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fe12:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    fe16:	b1c3      	cbz	r3, fe4a <isr+0x172a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fe18:	429e      	cmp	r6, r3
    fe1a:	f080 80b0 	bcs.w	ff7e <isr+0x185e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe1e:	1b9b      	subs	r3, r3, r6
    fe20:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    fe22:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe24:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe26:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    fe2a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe2c:	f240 80a9 	bls.w	ff82 <isr+0x1862>
			else if (_radio.role == ROLE_SLAVE) {
    fe30:	7ce3      	ldrb	r3, [r4, #19]
    fe32:	2b03      	cmp	r3, #3
    fe34:	d109      	bne.n	fe4a <isr+0x172a>
				if (latency_event != 0) {
    fe36:	f1bb 0f00 	cmp.w	fp, #0
    fe3a:	f040 80a2 	bne.w	ff82 <isr+0x1862>
					force = _radio.conn_curr->slave.force & 0x01;
    fe3e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fe40:	087b      	lsrs	r3, r7, #1
					if (force) {
    fe42:	f017 0701 	ands.w	r7, r7, #1
    fe46:	d13d      	bne.n	fec4 <isr+0x17a4>
					_radio.conn_curr->slave.force >>= 1;
    fe48:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fe4a:	2700      	movs	r7, #0
    fe4c:	e03d      	b.n	feca <isr+0x17aa>
		return 24;
    fe4e:	f04f 0818 	mov.w	r8, #24
    fe52:	e7af      	b.n	fdb4 <isr+0x1694>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fe54:	fba9 010a 	umull	r0, r1, r9, sl
    fe58:	f7f0 f9dc 	bl	214 <__aeabi_uldivmod>
    fe5c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fe5e:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fe62:	e7ba      	b.n	fdda <isr+0x16ba>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fe64:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fe68:	07db      	lsls	r3, r3, #31
    fe6a:	d5cc      	bpl.n	fe06 <isr+0x16e6>
				_radio.conn_curr->latency_event =
    fe6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fe6e:	e7c9      	b.n	fe04 <isr+0x16e4>
		} else if (reason_peer) {
    fe70:	b149      	cbz	r1, fe86 <isr+0x1766>
			_radio.conn_curr->master.terminate_ack = 1;
    fe72:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fe76:	f043 0301 	orr.w	r3, r3, #1
    fe7a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fe7e:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fe82:	4645      	mov	r5, r8
    fe84:	e7bf      	b.n	fe06 <isr+0x16e6>
	ticks_drift_minus = 0;
    fe86:	4688      	mov	r8, r1
    fe88:	e7fb      	b.n	fe82 <isr+0x1762>
	else if (_radio.conn_curr->connect_expire) {
    fe8a:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fe8c:	b185      	cbz	r5, feb0 <isr+0x1790>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fe8e:	42ae      	cmp	r6, r5
    fe90:	d204      	bcs.n	fe9c <isr+0x177c>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fe92:	1bad      	subs	r5, r5, r6
    fe94:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fe96:	463d      	mov	r5, r7
    fe98:	46a8      	mov	r8, r5
    fe9a:	e7b8      	b.n	fe0e <isr+0x16ee>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fe9c:	213e      	movs	r1, #62	; 0x3e
    fe9e:	f7fb faaf 	bl	b400 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fea2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fea6:	f7fb f8f9 	bl	b09c <connection_release>
			_radio.conn_curr = NULL;
    feaa:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    feae:	e72d      	b.n	fd0c <isr+0x15ec>
		if (!_radio.conn_curr->supervision_expire) {
    feb0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    feb4:	f1b8 0f00 	cmp.w	r8, #0
    feb8:	d1ee      	bne.n	fe98 <isr+0x1778>
			_radio.conn_curr->supervision_expire =
    feba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    febc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fec0:	4645      	mov	r5, r8
    fec2:	e7a4      	b.n	fe0e <isr+0x16ee>
						_radio.conn_curr->slave.force |=
    fec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fec8:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    feca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    fece:	b123      	cbz	r3, feda <isr+0x17ba>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fed0:	429e      	cmp	r6, r3
    fed2:	d258      	bcs.n	ff86 <isr+0x1866>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fed4:	1b9b      	subs	r3, r3, r6
    fed6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    feda:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fede:	b123      	cbz	r3, feea <isr+0x17ca>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fee0:	429e      	cmp	r6, r3
    fee2:	d252      	bcs.n	ff8a <isr+0x186a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fee4:	1b9b      	subs	r3, r3, r6
    fee6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    feea:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    feee:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fef2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    fef6:	b123      	cbz	r3, ff02 <isr+0x17e2>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fef8:	429e      	cmp	r6, r3
    fefa:	d25c      	bcs.n	ffb6 <isr+0x1896>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fefc:	1b9e      	subs	r6, r3, r6
    fefe:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    ff02:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    ff06:	428b      	cmp	r3, r1
    ff08:	d006      	beq.n	ff18 <isr+0x17f8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    ff0a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    ff0e:	3b01      	subs	r3, #1
    ff10:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    ff12:	bf9c      	itt	ls
    ff14:	2300      	movls	r3, #0
    ff16:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    ff18:	b917      	cbnz	r7, ff20 <isr+0x1800>
    ff1a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    ff1c:	455b      	cmp	r3, fp
    ff1e:	d05c      	beq.n	ffda <isr+0x18ba>
		lazy = _radio.conn_curr->latency_event + 1;
    ff20:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    ff22:	3301      	adds	r3, #1
    ff24:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    ff26:	b935      	cbnz	r5, ff36 <isr+0x1816>
    ff28:	f1b8 0f00 	cmp.w	r8, #0
    ff2c:	d103      	bne.n	ff36 <isr+0x1816>
    ff2e:	b913      	cbnz	r3, ff36 <isr+0x1816>
	    (lazy != 0) || (force != 0)) {
    ff30:	2f00      	cmp	r7, #0
    ff32:	f43f aeeb 	beq.w	fd0c <isr+0x15ec>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff36:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    ff3a:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff3c:	3207      	adds	r2, #7
		ticker_status =
    ff3e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff40:	b2d6      	uxtb	r6, r2
		ticker_status =
    ff42:	4a2f      	ldr	r2, [pc, #188]	; (10000 <__kernel_ram_size>)
    ff44:	9205      	str	r2, [sp, #20]
    ff46:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    ff48:	9606      	str	r6, [sp, #24]
		ticker_status =
    ff4a:	9704      	str	r7, [sp, #16]
    ff4c:	9102      	str	r1, [sp, #8]
    ff4e:	9101      	str	r1, [sp, #4]
    ff50:	f8cd 8000 	str.w	r8, [sp]
    ff54:	4632      	mov	r2, r6
    ff56:	4608      	mov	r0, r1
    ff58:	f7f7 ff68 	bl	7e2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff5c:	f030 0302 	bics.w	r3, r0, #2
    ff60:	f43f aed4 	beq.w	fd0c <isr+0x15ec>
    ff64:	7ca3      	ldrb	r3, [r4, #18]
    ff66:	429e      	cmp	r6, r3
    ff68:	f43f aed0 	beq.w	fd0c <isr+0x15ec>
    ff6c:	4b1f      	ldr	r3, [pc, #124]	; (ffec <isr+0x18cc>)
    ff6e:	9301      	str	r3, [sp, #4]
    ff70:	9300      	str	r3, [sp, #0]
    ff72:	4a1f      	ldr	r2, [pc, #124]	; (fff0 <isr+0x18d0>)
    ff74:	4b23      	ldr	r3, [pc, #140]	; (10004 <__kernel_ram_size+0x4>)
    ff76:	4920      	ldr	r1, [pc, #128]	; (fff8 <isr+0x18d8>)
    ff78:	4823      	ldr	r0, [pc, #140]	; (10008 <__kernel_ram_size+0x8>)
    ff7a:	f7fe bf7f 	b.w	ee7c <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    ff7e:	2108      	movs	r1, #8
    ff80:	e6eb      	b.n	fd5a <isr+0x163a>
				force = 1;
    ff82:	2701      	movs	r7, #1
    ff84:	e7a1      	b.n	feca <isr+0x17aa>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    ff86:	2122      	movs	r1, #34	; 0x22
    ff88:	e6e7      	b.n	fd5a <isr+0x163a>
			_radio.conn_curr->apto_expire = 0;
    ff8a:	2300      	movs	r3, #0
    ff8c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    ff90:	2002      	movs	r0, #2
    ff92:	f7f9 fe87 	bl	9ca4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ff96:	b928      	cbnz	r0, ffa4 <isr+0x1884>
    ff98:	4b14      	ldr	r3, [pc, #80]	; (ffec <isr+0x18cc>)
    ff9a:	9301      	str	r3, [sp, #4]
    ff9c:	9300      	str	r3, [sp, #0]
    ff9e:	4b19      	ldr	r3, [pc, #100]	; (10004 <__kernel_ram_size+0x4>)
    ffa0:	f7fe be36 	b.w	ec10 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    ffa4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ffa8:	8c1b      	ldrh	r3, [r3, #32]
    ffaa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    ffac:	230a      	movs	r3, #10
    ffae:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    ffb0:	f7fa fce2 	bl	a978 <packet_rx_enqueue>
    ffb4:	e799      	b.n	feea <isr+0x17ca>
			_radio.conn_curr->appto_expire = 0;
    ffb6:	2300      	movs	r3, #0
    ffb8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    ffbc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    ffc0:	2b00      	cmp	r3, #0
    ffc2:	d19e      	bne.n	ff02 <isr+0x17e2>
    ffc4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    ffc8:	428b      	cmp	r3, r1
    ffca:	d19e      	bne.n	ff0a <isr+0x17ea>
				_radio.conn_curr->llcp_type = LLCP_PING;
    ffcc:	2307      	movs	r3, #7
    ffce:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    ffd2:	1e4b      	subs	r3, r1, #1
    ffd4:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    ffd8:	e793      	b.n	ff02 <isr+0x17e2>
	lazy = 0;
    ffda:	463b      	mov	r3, r7
    ffdc:	e7a3      	b.n	ff26 <isr+0x1806>
    ffde:	bf00      	nop
    ffe0:	1afd498d 	.word	0x1afd498d
    ffe4:	00000007 	.word	0x00000007
    ffe8:	20003d50 	.word	0x20003d50
    ffec:	00014b99 	.word	0x00014b99
    fff0:	00015f55 	.word	0x00015f55
    fff4:	000173ab 	.word	0x000173ab
    fff8:	00015fa4 	.word	0x00015fa4
    fffc:	00017ddb 	.word	0x00017ddb
   10000:	0000ace1 	.word	0x0000ace1
   10004:	000172e8 	.word	0x000172e8
   10008:	00017997 	.word	0x00017997
   1000c:	3b9aca00 	.word	0x3b9aca00
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10010:	3b04      	subs	r3, #4
   10012:	2b01      	cmp	r3, #1
   10014:	d908      	bls.n	10028 <__kernel_ram_size+0x28>
   10016:	4b12      	ldr	r3, [pc, #72]	; (10060 <__kernel_ram_size+0x60>)
   10018:	9301      	str	r3, [sp, #4]
   1001a:	9300      	str	r3, [sp, #0]
   1001c:	4a11      	ldr	r2, [pc, #68]	; (10064 <__kernel_ram_size+0x64>)
   1001e:	4b12      	ldr	r3, [pc, #72]	; (10068 <__kernel_ram_size+0x68>)
   10020:	4912      	ldr	r1, [pc, #72]	; (1006c <__kernel_ram_size+0x6c>)
   10022:	4813      	ldr	r0, [pc, #76]	; (10070 <__kernel_ram_size+0x70>)
   10024:	f7fe bf2a 	b.w	ee7c <isr+0x75c>
		_radio.state = STATE_NONE;
   10028:	2300      	movs	r3, #0
   1002a:	7523      	strb	r3, [r4, #20]
   1002c:	f7fe bc22 	b.w	e874 <isr+0x154>
		LL_ASSERT(0);
   10030:	4b0b      	ldr	r3, [pc, #44]	; (10060 <__kernel_ram_size+0x60>)
   10032:	9301      	str	r3, [sp, #4]
   10034:	9300      	str	r3, [sp, #0]
   10036:	4b0c      	ldr	r3, [pc, #48]	; (10068 <__kernel_ram_size+0x68>)
   10038:	f7fe bc69 	b.w	e90e <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   1003c:	6820      	ldr	r0, [r4, #0]
   1003e:	6843      	ldr	r3, [r0, #4]
   10040:	4629      	mov	r1, r5
   10042:	685b      	ldr	r3, [r3, #4]
   10044:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10046:	2201      	movs	r2, #1
   10048:	4611      	mov	r1, r2
   1004a:	4628      	mov	r0, r5
   1004c:	f7f7 f8b8 	bl	71c0 <mayfly_enable>
   10050:	f7fe bc10 	b.w	e874 <isr+0x154>
		LL_ASSERT(0);
   10054:	4b02      	ldr	r3, [pc, #8]	; (10060 <__kernel_ram_size+0x60>)
   10056:	9301      	str	r3, [sp, #4]
   10058:	9300      	str	r3, [sp, #0]
   1005a:	4b06      	ldr	r3, [pc, #24]	; (10074 <__kernel_ram_size+0x74>)
   1005c:	f7fe bc57 	b.w	e90e <isr+0x1ee>
   10060:	00014b99 	.word	0x00014b99
   10064:	00015f55 	.word	0x00015f55
   10068:	000172f7 	.word	0x000172f7
   1006c:	00015fa4 	.word	0x00015fa4
   10070:	00017a0d 	.word	0x00017a0d
   10074:	0001730d 	.word	0x0001730d

00010078 <radio_init>:
{
   10078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   1007c:	4e3d      	ldr	r6, [pc, #244]	; (10174 <radio_init+0xfc>)
{
   1007e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10080:	f89d c01c 	ldrb.w	ip, [sp, #28]
   10084:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   10088:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   1008c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   10090:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10092:	f44f 70aa 	mov.w	r0, #340	; 0x154
   10096:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   1009a:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   1009e:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   100a2:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   100a4:	f10c 0401 	add.w	r4, ip, #1
   100a8:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   100aa:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   100ac:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   100b0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   100b4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   100b6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   100b8:	bf98      	it	ls
   100ba:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   100be:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   100c2:	bf88      	it	hi
   100c4:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   100c8:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   100cc:	bf8c      	ite	hi
   100ce:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   100d2:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   100d6:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   100da:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   100de:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   100e2:	bf8c      	ite	hi
   100e4:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   100e8:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   100ea:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   100ee:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   100f2:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   100f6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   100fa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   100fe:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10102:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   10106:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1010a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1010c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   1010e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10112:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10114:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10118:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1011c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10120:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10122:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   10126:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1012a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1012e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10132:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10136:	340a      	adds	r4, #10
   10138:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1013c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1013e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10140:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   10144:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10148:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   1014a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   1014e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10152:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   10156:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   1015a:	d003      	beq.n	10164 <radio_init+0xec>
		return (retcode + mem_size);
   1015c:	442c      	add	r4, r5
}
   1015e:	4620      	mov	r0, r4
   10160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   10164:	2301      	movs	r3, #1
   10166:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   1016a:	f7f9 fe5f 	bl	9e2c <common_init>
	radio_setup();
   1016e:	f002 f8a7 	bl	122c0 <radio_setup>
	return retcode;
   10172:	e7f4      	b.n	1015e <radio_init+0xe6>
   10174:	200008c0 	.word	0x200008c0

00010178 <ll_reset>:
{
   10178:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1017a:	2103      	movs	r1, #3
   1017c:	2005      	movs	r0, #5
   1017e:	f7f9 ff3f 	bl	a000 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   10182:	2104      	movs	r1, #4
   10184:	2006      	movs	r0, #6
   10186:	f7f9 ff3b 	bl	a000 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1018a:	4c22      	ldr	r4, [pc, #136]	; (10214 <ll_reset+0x9c>)
   1018c:	2500      	movs	r5, #0
   1018e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   10192:	b2ab      	uxth	r3, r5
   10194:	429a      	cmp	r2, r3
   10196:	f105 0501 	add.w	r5, r5, #1
   1019a:	d834      	bhi.n	10206 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   1019c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   101a0:	f36f 13c7 	bfc	r3, #7, #1
   101a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   101a8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   101ac:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   101ae:	f360 0300 	bfi	r3, r0, #0, #1
   101b2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   101b6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   101b8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   101bc:	fbb3 f3f2 	udiv	r3, r3, r2
   101c0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   101c4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   101c8:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   101cc:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   101ce:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   101d2:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   101d6:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   101da:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   101de:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   101e2:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   101e6:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   101ea:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   101ee:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   101f2:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   101f6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   101fa:	f001 fee1 	bl	11fc0 <ll_filter_reset>
}
   101fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   10202:	f7f9 be13 	b.w	9e2c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10206:	1da8      	adds	r0, r5, #6
   10208:	21ff      	movs	r1, #255	; 0xff
   1020a:	b2c0      	uxtb	r0, r0
   1020c:	f7f9 fef8 	bl	a000 <role_disable>
   10210:	e7bd      	b.n	1018e <ll_reset+0x16>
   10212:	bf00      	nop
   10214:	200008c0 	.word	0x200008c0

00010218 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10218:	4b02      	ldr	r3, [pc, #8]	; (10224 <ll_adv_is_enabled+0xc>)
   1021a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1021e:	09c0      	lsrs	r0, r0, #7
   10220:	4770      	bx	lr
   10222:	bf00      	nop
   10224:	200008c0 	.word	0x200008c0

00010228 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10228:	4b04      	ldr	r3, [pc, #16]	; (1023c <radio_adv_filter_pol_get+0x14>)
   1022a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   1022e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10230:	bfba      	itte	lt
   10232:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   10236:	0980      	lsrlt	r0, r0, #6
   10238:	2000      	movge	r0, #0
}
   1023a:	4770      	bx	lr
   1023c:	200008c0 	.word	0x200008c0

00010240 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10240:	4a09      	ldr	r2, [pc, #36]	; (10268 <ll_scan_is_enabled+0x28>)
   10242:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   10246:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1024a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1024e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10252:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10254:	f003 0301 	and.w	r3, r3, #1
   10258:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   1025c:	bf14      	ite	ne
   1025e:	2004      	movne	r0, #4
   10260:	2000      	moveq	r0, #0
}
   10262:	4318      	orrs	r0, r3
   10264:	4770      	bx	lr
   10266:	bf00      	nop
   10268:	200008c0 	.word	0x200008c0

0001026c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1026c:	4b05      	ldr	r3, [pc, #20]	; (10284 <radio_scan_filter_pol_get+0x18>)
   1026e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   10272:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   10276:	bf1c      	itt	ne
   10278:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   1027c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   10280:	4770      	bx	lr
   10282:	bf00      	nop
   10284:	200008c0 	.word	0x200008c0

00010288 <radio_connect_enable>:
{
   10288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   1028c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 10614 <radio_connect_enable+0x38c>
{
   10290:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   10292:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   10296:	9303      	str	r3, [sp, #12]
   10298:	4683      	mov	fp, r0
   1029a:	468a      	mov	sl, r1
   1029c:	4691      	mov	r9, r2
   1029e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   102a0:	2e00      	cmp	r6, #0
   102a2:	f040 819c 	bne.w	105de <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   102a6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   102aa:	f7f6 fee6 	bl	707a <mem_acquire>
	if (!link) {
   102ae:	4607      	mov	r7, r0
   102b0:	b150      	cbz	r0, 102c8 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   102b2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   102b6:	f7f6 fee0 	bl	707a <mem_acquire>
	if (!conn) {
   102ba:	4604      	mov	r4, r0
   102bc:	b930      	cbnz	r0, 102cc <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   102be:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   102c2:	4638      	mov	r0, r7
   102c4:	f7f6 fef3 	bl	70ae <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   102c8:	2007      	movs	r0, #7
   102ca:	e15c      	b.n	10586 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   102cc:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   102d0:	f36b 1386 	bfi	r3, fp, #6, #1
   102d4:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   102d8:	2206      	movs	r2, #6
   102da:	4651      	mov	r1, sl
   102dc:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   102e0:	f7f1 fc98 	bl	1c14 <memcpy>
	_radio.scanner.conn_latency = latency;
   102e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   102e8:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   102ec:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   102ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   102f2:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   102f6:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   102f8:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   102fc:	f002 f89c 	bl	12438 <radio_tx_ready_delay_get>
   10300:	49bb      	ldr	r1, [pc, #748]	; (105f0 <radio_connect_enable+0x368>)
   10302:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10306:	a3b8      	add	r3, pc, #736	; (adr r3, 105e8 <radio_connect_enable+0x360>)
   10308:	e9d3 2300 	ldrd	r2, r3, [r3]
   1030c:	fba0 0101 	umull	r0, r1, r0, r1
   10310:	f7ef ff80 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10314:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10318:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1031c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10320:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10322:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 10618 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   10326:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1032a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   1032e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10330:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10334:	2104      	movs	r1, #4
   10336:	a805      	add	r0, sp, #20
   10338:	f7f7 fed6 	bl	80e8 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1033c:	f8dd c014 	ldr.w	ip, [sp, #20]
   10340:	2000      	movs	r0, #0
   10342:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10346:	231f      	movs	r3, #31
	transitions = 0;
   10348:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   1034a:	2101      	movs	r1, #1
	while (bit_idx--) {
   1034c:	3b01      	subs	r3, #1
   1034e:	b2db      	uxtb	r3, r3
   10350:	2bff      	cmp	r3, #255	; 0xff
   10352:	d103      	bne.n	1035c <radio_connect_enable+0xd4>
   10354:	b3d0      	cbz	r0, 103cc <radio_connect_enable+0x144>
   10356:	f8cd c014 	str.w	ip, [sp, #20]
   1035a:	e037      	b.n	103cc <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   1035c:	fa2c fe03 	lsr.w	lr, ip, r3
   10360:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   10364:	45d6      	cmp	lr, sl
   10366:	d11a      	bne.n	1039e <radio_connect_enable+0x116>
			consecutive_cnt++;
   10368:	3101      	adds	r1, #1
   1036a:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   1036c:	2906      	cmp	r1, #6
   1036e:	d807      	bhi.n	10380 <radio_connect_enable+0xf8>
   10370:	2b1b      	cmp	r3, #27
   10372:	d81a      	bhi.n	103aa <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   10374:	b122      	cbz	r2, 10380 <radio_connect_enable+0xf8>
   10376:	2b1b      	cmp	r3, #27
   10378:	d017      	beq.n	103aa <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   1037a:	2a01      	cmp	r2, #1
   1037c:	d815      	bhi.n	103aa <radio_connect_enable+0x122>
   1037e:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   10380:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   10384:	f1be 0f00 	cmp.w	lr, #0
   10388:	f000 8100 	beq.w	1058c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   1038c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   10390:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   10394:	3201      	adds	r2, #1
   10396:	2001      	movs	r0, #1
   10398:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1039a:	4601      	mov	r1, r0
   1039c:	e005      	b.n	103aa <radio_connect_enable+0x122>
			transitions++;
   1039e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   103a0:	2b1b      	cmp	r3, #27
			transitions++;
   103a2:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   103a4:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   103a8:	d9e5      	bls.n	10376 <radio_connect_enable+0xee>
		if (transitions > 24) {
   103aa:	2a18      	cmp	r2, #24
   103ac:	f240 80f6 	bls.w	1059c <radio_connect_enable+0x314>
   103b0:	b108      	cbz	r0, 103b6 <radio_connect_enable+0x12e>
   103b2:	f8cd c014 	str.w	ip, [sp, #20]
   103b6:	3301      	adds	r3, #1
   103b8:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   103ba:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   103be:	f1be 0f00 	cmp.w	lr, #0
   103c2:	f000 80e8 	beq.w	10596 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   103c6:	425b      	negs	r3, r3
   103c8:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   103ca:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   103cc:	9b05      	ldr	r3, [sp, #20]
   103ce:	a806      	add	r0, sp, #24
   103d0:	ea83 0308 	eor.w	r3, r3, r8
   103d4:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   103d8:	2104      	movs	r1, #4
   103da:	f7f6 fff9 	bl	73d0 <util_ones_count_get>
   103de:	2801      	cmp	r0, #1
   103e0:	f240 80e3 	bls.w	105aa <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   103e4:	9b05      	ldr	r3, [sp, #20]
   103e6:	b29a      	uxth	r2, r3
   103e8:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   103ec:	f000 80d8 	beq.w	105a0 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   103f0:	2204      	movs	r2, #4
   103f2:	a905      	add	r1, sp, #20
   103f4:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   103f8:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   103fa:	f7f1 fc0b 	bl	1c14 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   103fe:	2103      	movs	r1, #3
   10400:	f104 0014 	add.w	r0, r4, #20
   10404:	f7f7 fe70 	bl	80e8 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10408:	2205      	movs	r2, #5
   1040a:	497a      	ldr	r1, [pc, #488]	; (105f4 <radio_connect_enable+0x36c>)
   1040c:	f104 0017 	add.w	r0, r4, #23
   10410:	f7f1 fc00 	bl	1c14 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10414:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10418:	7f63      	ldrb	r3, [r4, #29]
   1041a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1041e:	f36f 1386 	bfc	r3, #6, #1
   10422:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10424:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10426:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10428:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1042a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1042c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10430:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10434:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10438:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1043a:	211b      	movs	r1, #27
   1043c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1043e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10440:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10444:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10446:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1044a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1044e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10450:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10452:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10456:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10458:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1045c:	2601      	movs	r6, #1
   1045e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   10462:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   10466:	f363 11c7 	bfi	r1, r3, #7, #1
   1046a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1046e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   10472:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   10476:	f366 0102 	bfi	r1, r6, #0, #3
   1047a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   1047e:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   10482:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   10484:	b2c9      	uxtb	r1, r1
   10486:	f36c 01c5 	bfi	r1, ip, #3, #3
   1048a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1048e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   10492:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   10494:	f366 0102 	bfi	r1, r6, #0, #3
   10498:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   1049c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   1049e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   104a0:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   104a4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   104a6:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   104a8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   104ac:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   104b0:	f363 0100 	bfi	r1, r3, #0, #1
   104b4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   104b8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   104bc:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   104c0:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   104c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   104c8:	1e56      	subs	r6, r2, #1
   104ca:	f242 7e10 	movw	lr, #10000	; 0x2710
   104ce:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   104d2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   104d6:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   104da:	4b47      	ldr	r3, [pc, #284]	; (105f8 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   104dc:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   104de:	4947      	ldr	r1, [pc, #284]	; (105fc <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   104e0:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   104e2:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   104e4:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   104e8:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   104ec:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   104ee:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   104f2:	1d81      	adds	r1, r0, #6
   104f4:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   104f6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   104fa:	dc6a      	bgt.n	105d2 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   104fc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10500:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   10504:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   10506:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1050a:	f360 0341 	bfi	r3, r0, #1, #1
   1050e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10512:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10516:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1051a:	f360 1304 	bfi	r3, r0, #4, #1
   1051e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10522:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10526:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1052e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10532:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10536:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1053a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1053e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10542:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10546:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1054a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1054e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10552:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10556:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1055a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1055e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   10562:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   10566:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1056a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1056e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   10572:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   10576:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1057a:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1057e:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   10582:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   10586:	b007      	add	sp, #28
   10588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   1058c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   10590:	f04f 0e01 	mov.w	lr, #1
   10594:	e6fe      	b.n	10394 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   10596:	3b01      	subs	r3, #1
   10598:	4313      	orrs	r3, r2
   1059a:	e716      	b.n	103ca <radio_connect_enable+0x142>
		if (transitions > 24) {
   1059c:	46f2      	mov	sl, lr
   1059e:	e6d5      	b.n	1034c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   105a0:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   105a2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   105a6:	f47f af23 	bne.w	103f0 <radio_connect_enable+0x168>
   105aa:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   105ac:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   105b0:	f47f aec0 	bne.w	10334 <radio_connect_enable+0xac>
   105b4:	4b12      	ldr	r3, [pc, #72]	; (10600 <radio_connect_enable+0x378>)
   105b6:	9301      	str	r3, [sp, #4]
   105b8:	9300      	str	r3, [sp, #0]
   105ba:	4a12      	ldr	r2, [pc, #72]	; (10604 <radio_connect_enable+0x37c>)
   105bc:	4b12      	ldr	r3, [pc, #72]	; (10608 <radio_connect_enable+0x380>)
   105be:	4913      	ldr	r1, [pc, #76]	; (1060c <radio_connect_enable+0x384>)
   105c0:	4813      	ldr	r0, [pc, #76]	; (10610 <radio_connect_enable+0x388>)
   105c2:	f7f0 fce3 	bl	f8c <printk>
   105c6:	4040      	eors	r0, r0
   105c8:	f380 8811 	msr	BASEPRI, r0
   105cc:	f04f 0004 	mov.w	r0, #4
   105d0:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   105d2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   105d6:	33fa      	adds	r3, #250	; 0xfa
   105d8:	441a      	add	r2, r3
   105da:	b292      	uxth	r2, r2
   105dc:	e78e      	b.n	104fc <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   105de:	200c      	movs	r0, #12
   105e0:	e7d1      	b.n	10586 <radio_connect_enable+0x2fe>
   105e2:	bf00      	nop
   105e4:	f3af 8000 	nop.w
   105e8:	1afd498d 	.word	0x1afd498d
   105ec:	00000007 	.word	0x00000007
   105f0:	3b9aca00 	.word	0x3b9aca00
   105f4:	200009da 	.word	0x200009da
   105f8:	01c9c37f 	.word	0x01c9c37f
   105fc:	026259ff 	.word	0x026259ff
   10600:	00014b99 	.word	0x00014b99
   10604:	00015f55 	.word	0x00015f55
   10608:	00017497 	.word	0x00017497
   1060c:	00015fa4 	.word	0x00015fa4
   10610:	00017ef0 	.word	0x00017ef0
   10614:	200008c0 	.word	0x200008c0
   10618:	8e89bed6 	.word	0x8e89bed6

0001061c <ll_conn_update>:
{
   1061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10620:	460c      	mov	r4, r1
   10622:	4690      	mov	r8, r2
   10624:	461d      	mov	r5, r3
   10626:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1062a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   1062e:	f7f9 fcd1 	bl	9fd4 <connection_get>
	if (!conn) {
   10632:	b330      	cbz	r0, 10682 <ll_conn_update+0x66>
	if (!cmd) {
   10634:	2c00      	cmp	r4, #0
   10636:	d14a      	bne.n	106ce <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   10638:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1063c:	06d9      	lsls	r1, r3, #27
   1063e:	d407      	bmi.n	10650 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10640:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10644:	069a      	lsls	r2, r3, #26
   10646:	d541      	bpl.n	106cc <ll_conn_update+0xb0>
		     (conn->llcp_features &
   10648:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   1064c:	079b      	lsls	r3, r3, #30
   1064e:	d43d      	bmi.n	106cc <ll_conn_update+0xb0>
		} else if (conn->role) {
   10650:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10654:	2b00      	cmp	r3, #0
   10656:	da17      	bge.n	10688 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10658:	201a      	movs	r0, #26
   1065a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   1065e:	428b      	cmp	r3, r1
   10660:	d00f      	beq.n	10682 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   10662:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   10666:	f003 0207 	and.w	r2, r3, #7
   1066a:	2a03      	cmp	r2, #3
   1066c:	d109      	bne.n	10682 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1066e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10672:	b2db      	uxtb	r3, r3
   10674:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   10678:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   1067c:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   10680:	e021      	b.n	106c6 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10682:	200c      	movs	r0, #12
   10684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   10688:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1068c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   10690:	429a      	cmp	r2, r3
   10692:	d1f6      	bne.n	10682 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10694:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   10698:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   1069c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1069e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   106a0:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   106a4:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   106a8:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   106aa:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   106ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   106b2:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   106b6:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   106ba:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   106be:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   106c2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   106c6:	2000      	movs	r0, #0
   106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   106cc:	2401      	movs	r4, #1
		cmd--;
   106ce:	3c01      	subs	r4, #1
		if (cmd) {
   106d0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   106d4:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   106d8:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   106dc:	d1bf      	bne.n	1065e <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   106de:	4299      	cmp	r1, r3
   106e0:	d1cf      	bne.n	10682 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   106e2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   106e6:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   106ea:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   106ee:	b2db      	uxtb	r3, r3
   106f0:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   106f4:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   106f6:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   106fa:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   106fe:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10702:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   10706:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1070a:	e7dc      	b.n	106c6 <ll_conn_update+0xaa>

0001070c <ll_chm_update>:
{
   1070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10710:	4c1e      	ldr	r4, [pc, #120]	; (1078c <ll_chm_update+0x80>)
   10712:	4601      	mov	r1, r0
   10714:	2205      	movs	r2, #5
{
   10716:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   10718:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1071c:	f7f1 fa7a 	bl	1c14 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10720:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10724:	2105      	movs	r1, #5
   10726:	f7f6 fe53 	bl	73d0 <util_ones_count_get>
	_radio.data_chan_count =
   1072a:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   1072e:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10732:	3c01      	subs	r4, #1
   10734:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   10736:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10738:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   1073c:	2cff      	cmp	r4, #255	; 0xff
   1073e:	d102      	bne.n	10746 <ll_chm_update+0x3a>
	return 0;
   10740:	2000      	movs	r0, #0
   10742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   10746:	4620      	mov	r0, r4
   10748:	f7f9 fc44 	bl	9fd4 <connection_get>
		if (!conn || conn->role) {
   1074c:	4606      	mov	r6, r0
   1074e:	b1b8      	cbz	r0, 10780 <ll_chm_update+0x74>
   10750:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10754:	2b00      	cmp	r3, #0
   10756:	db13      	blt.n	10780 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   10758:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1075c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10760:	429a      	cmp	r2, r3
   10762:	d110      	bne.n	10786 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   10764:	2205      	movs	r2, #5
   10766:	4629      	mov	r1, r5
   10768:	3079      	adds	r0, #121	; 0x79
   1076a:	f7f1 fa53 	bl	1c14 <memcpy>
		conn->llcp_req++;
   1076e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   10772:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   10776:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   10778:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   1077c:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   10780:	3c01      	subs	r4, #1
   10782:	b2e4      	uxtb	r4, r4
   10784:	e7da      	b.n	1073c <ll_chm_update+0x30>
			return 1;
   10786:	2001      	movs	r0, #1
}
   10788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1078c:	200008c0 	.word	0x200008c0

00010790 <ll_chm_get>:
{
   10790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10792:	460d      	mov	r5, r1
	conn = connection_get(handle);
   10794:	f7f9 fc1e 	bl	9fd4 <connection_get>
	if (!conn) {
   10798:	4604      	mov	r4, r0
   1079a:	b160      	cbz	r0, 107b6 <ll_chm_get+0x26>
		conn->chm_update = 0;
   1079c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1079e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   107a2:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   107a4:	2205      	movs	r2, #5
   107a6:	4631      	mov	r1, r6
   107a8:	4628      	mov	r0, r5
   107aa:	f7f1 fa33 	bl	1c14 <memcpy>
	} while (conn->chm_update);
   107ae:	7f20      	ldrb	r0, [r4, #28]
   107b0:	2800      	cmp	r0, #0
   107b2:	d1f6      	bne.n	107a2 <ll_chm_get+0x12>
   107b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   107b6:	2001      	movs	r0, #1
}
   107b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000107ba <ll_feature_req_send>:
{
   107ba:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   107bc:	f7f9 fc0a 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   107c0:	b168      	cbz	r0, 107de <ll_feature_req_send+0x24>
   107c2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   107c6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   107ca:	4293      	cmp	r3, r2
   107cc:	d107      	bne.n	107de <ll_feature_req_send+0x24>
	conn->llcp_req++;
   107ce:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   107d0:	2204      	movs	r2, #4
	conn->llcp_req++;
   107d2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   107d6:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   107da:	2000      	movs	r0, #0
   107dc:	bd08      	pop	{r3, pc}
		return 1;
   107de:	2001      	movs	r0, #1
}
   107e0:	bd08      	pop	{r3, pc}

000107e2 <ll_version_ind_send>:
{
   107e2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   107e4:	f7f9 fbf6 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   107e8:	b168      	cbz	r0, 10806 <ll_version_ind_send+0x24>
   107ea:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   107ee:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   107f2:	4293      	cmp	r3, r2
   107f4:	d107      	bne.n	10806 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   107f6:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   107f8:	2205      	movs	r2, #5
	conn->llcp_req++;
   107fa:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   107fe:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10802:	2000      	movs	r0, #0
   10804:	bd08      	pop	{r3, pc}
		return 1;
   10806:	2001      	movs	r0, #1
}
   10808:	bd08      	pop	{r3, pc}

0001080a <ll_terminate_ind_send>:
{
   1080a:	b510      	push	{r4, lr}
   1080c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1080e:	f7f9 fbe1 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10812:	b160      	cbz	r0, 1082e <ll_terminate_ind_send+0x24>
   10814:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   10818:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   1081c:	4293      	cmp	r3, r2
   1081e:	d106      	bne.n	1082e <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10820:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10822:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   10826:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1082a:	2000      	movs	r0, #0
   1082c:	bd10      	pop	{r4, pc}
		return 1;
   1082e:	2001      	movs	r0, #1
}
   10830:	bd10      	pop	{r4, pc}

00010832 <ll_tx_pwr_lvl_get>:
{
   10832:	b510      	push	{r4, lr}
   10834:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10836:	f7f9 fbcd 	bl	9fd4 <connection_get>
	if (!conn) {
   1083a:	b110      	cbz	r0, 10842 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   1083c:	2000      	movs	r0, #0
   1083e:	7020      	strb	r0, [r4, #0]
	return 0;
   10840:	bd10      	pop	{r4, pc}
		return 1;
   10842:	2001      	movs	r0, #1
}
   10844:	bd10      	pop	{r4, pc}

00010846 <ll_apto_get>:
{
   10846:	b510      	push	{r4, lr}
   10848:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1084a:	f7f9 fbc3 	bl	9fd4 <connection_get>
	if (!conn) {
   1084e:	b160      	cbz	r0, 1086a <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10850:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10852:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   10856:	435a      	muls	r2, r3
   10858:	237d      	movs	r3, #125	; 0x7d
   1085a:	4353      	muls	r3, r2
	return 0;
   1085c:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   1085e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10862:	fb93 f3f2 	sdiv	r3, r3, r2
   10866:	8023      	strh	r3, [r4, #0]
	return 0;
   10868:	bd10      	pop	{r4, pc}
		return 1;
   1086a:	2001      	movs	r0, #1
}
   1086c:	bd10      	pop	{r4, pc}

0001086e <ll_apto_set>:
{
   1086e:	b510      	push	{r4, lr}
   10870:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10872:	f7f9 fbaf 	bl	9fd4 <connection_get>
	if (!conn) {
   10876:	b170      	cbz	r0, 10896 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   10878:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   1087a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1087e:	4353      	muls	r3, r2
   10880:	f242 7110 	movw	r1, #10000	; 0x2710
   10884:	fb01 3404 	mla	r4, r1, r4, r3
   10888:	3c01      	subs	r4, #1
   1088a:	fb94 f4f3 	sdiv	r4, r4, r3
   1088e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   10892:	2000      	movs	r0, #0
   10894:	bd10      	pop	{r4, pc}
		return 1;
   10896:	2001      	movs	r0, #1
}
   10898:	bd10      	pop	{r4, pc}

0001089a <ll_length_req_send>:
{
   1089a:	b570      	push	{r4, r5, r6, lr}
   1089c:	460e      	mov	r6, r1
   1089e:	4615      	mov	r5, r2
	conn = connection_get(handle);
   108a0:	f7f9 fb98 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   108a4:	b1d0      	cbz	r0, 108dc <ll_length_req_send+0x42>
   108a6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   108aa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   108ae:	429a      	cmp	r2, r3
   108b0:	d114      	bne.n	108dc <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   108b2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   108b6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   108ba:	4293      	cmp	r3, r2
   108bc:	d10e      	bne.n	108dc <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   108be:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   108c2:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   108c6:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   108c8:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   108cc:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   108d0:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   108d4:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   108d8:	2000      	movs	r0, #0
   108da:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   108dc:	2001      	movs	r0, #1
}
   108de:	bd70      	pop	{r4, r5, r6, pc}

000108e0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   108e0:	4b03      	ldr	r3, [pc, #12]	; (108f0 <ll_length_default_get+0x10>)
   108e2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   108e6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   108e8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   108ec:	800b      	strh	r3, [r1, #0]
   108ee:	4770      	bx	lr
   108f0:	200008c0 	.word	0x200008c0

000108f4 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   108f4:	4b03      	ldr	r3, [pc, #12]	; (10904 <ll_length_default_set+0x10>)
   108f6:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   108fa:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   108fe:	2000      	movs	r0, #0
   10900:	4770      	bx	lr
   10902:	bf00      	nop
   10904:	200008c0 	.word	0x200008c0

00010908 <ll_length_max_get>:
{
   10908:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1090a:	241b      	movs	r4, #27
   1090c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1090e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10912:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10914:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10916:	8018      	strh	r0, [r3, #0]
   10918:	bd10      	pop	{r4, pc}

0001091a <ll_phy_get>:
{
   1091a:	b538      	push	{r3, r4, r5, lr}
   1091c:	460d      	mov	r5, r1
   1091e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10920:	f7f9 fb58 	bl	9fd4 <connection_get>
	if (!conn) {
   10924:	b158      	cbz	r0, 1093e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   10926:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1092a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1092e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10930:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10934:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10938:	7023      	strb	r3, [r4, #0]
	return 0;
   1093a:	2000      	movs	r0, #0
   1093c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1093e:	2001      	movs	r0, #1
}
   10940:	bd38      	pop	{r3, r4, r5, pc}
	...

00010944 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10944:	4b03      	ldr	r3, [pc, #12]	; (10954 <ll_phy_default_set+0x10>)
   10946:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1094a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   1094e:	2000      	movs	r0, #0
   10950:	4770      	bx	lr
   10952:	bf00      	nop
   10954:	200008c0 	.word	0x200008c0

00010958 <ll_phy_req_send>:
{
   10958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1095c:	4689      	mov	r9, r1
   1095e:	4690      	mov	r8, r2
   10960:	461f      	mov	r7, r3
	conn = connection_get(handle);
   10962:	f7f9 fb37 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10966:	b320      	cbz	r0, 109b2 <ll_phy_req_send+0x5a>
   10968:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1096c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10970:	429a      	cmp	r2, r3
   10972:	d11e      	bne.n	109b2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10974:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10978:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   1097c:	429d      	cmp	r5, r3
   1097e:	d118      	bne.n	109b2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10980:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   10984:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   10988:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   1098c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   10990:	f046 0102 	orr.w	r1, r6, #2
   10994:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   10998:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   1099a:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   1099c:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   109a0:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   109a4:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   109a8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   109ac:	2000      	movs	r0, #0
   109ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   109b2:	2001      	movs	r0, #1
}
   109b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000109b8 <ll_rx_get>:
{
   109b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   109bc:	4605      	mov	r5, r0
   109be:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   109c0:	4918      	ldr	r1, [pc, #96]	; (10a24 <ll_rx_get+0x6c>)
   109c2:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   109c6:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   109ca:	4293      	cmp	r3, r2
   109cc:	460f      	mov	r7, r1
   109ce:	d01f      	beq.n	10a10 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   109d0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   109d4:	f201 1177 	addw	r1, r1, #375	; 0x177
   109d8:	f898 2000 	ldrb.w	r2, [r8]
   109dc:	f7f9 fab0 	bl	9f40 <tx_cmplt_get>
		if (!cmplt) {
   109e0:	4604      	mov	r4, r0
   109e2:	b9e0      	cbnz	r0, 10a1e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   109e4:	ae02      	add	r6, sp, #8
   109e6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   109ea:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   109ee:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   109f2:	4631      	mov	r1, r6
   109f4:	f10d 0006 	add.w	r0, sp, #6
   109f8:	f7f9 faa2 	bl	9f40 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   109fc:	b934      	cbnz	r4, 10a0c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   109fe:	b928      	cbnz	r0, 10a0c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10a00:	f8c5 8000 	str.w	r8, [r5]
}
   10a04:	4620      	mov	r0, r4
   10a06:	b002      	add	sp, #8
   10a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   10a0c:	4604      	mov	r4, r0
   10a0e:	e7ee      	b.n	109ee <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10a10:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10a14:	f201 1177 	addw	r1, r1, #375	; 0x177
   10a18:	f7f9 fa92 	bl	9f40 <tx_cmplt_get>
   10a1c:	4604      	mov	r4, r0
		*node_rx = NULL;
   10a1e:	2300      	movs	r3, #0
   10a20:	602b      	str	r3, [r5, #0]
   10a22:	e7ef      	b.n	10a04 <ll_rx_get+0x4c>
   10a24:	200008c0 	.word	0x200008c0

00010a28 <ll_rx_mem_release>:
{
   10a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10a2c:	4c1c      	ldr	r4, [pc, #112]	; (10aa0 <ll_rx_mem_release+0x78>)
{
   10a2e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10a30:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10a32:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10a36:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10a3a:	b930      	cbnz	r0, 10a4a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   10a3c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10a3e:	20ff      	movs	r0, #255	; 0xff
}
   10a40:	b002      	add	sp, #8
   10a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10a46:	f7f9 b9a5 	b.w	9d94 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10a4a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10a4c:	f8d0 8000 	ldr.w	r8, [r0]
   10a50:	2a0c      	cmp	r2, #12
   10a52:	d807      	bhi.n	10a64 <ll_rx_mem_release+0x3c>
   10a54:	2301      	movs	r3, #1
   10a56:	4093      	lsls	r3, r2
   10a58:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10a5c:	4213      	tst	r3, r2
   10a5e:	d110      	bne.n	10a82 <ll_rx_mem_release+0x5a>
   10a60:	061b      	lsls	r3, r3, #24
   10a62:	d413      	bmi.n	10a8c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   10a64:	4b0f      	ldr	r3, [pc, #60]	; (10aa4 <ll_rx_mem_release+0x7c>)
   10a66:	9301      	str	r3, [sp, #4]
   10a68:	9300      	str	r3, [sp, #0]
   10a6a:	4a0f      	ldr	r2, [pc, #60]	; (10aa8 <ll_rx_mem_release+0x80>)
   10a6c:	4b0f      	ldr	r3, [pc, #60]	; (10aac <ll_rx_mem_release+0x84>)
   10a6e:	4910      	ldr	r1, [pc, #64]	; (10ab0 <ll_rx_mem_release+0x88>)
   10a70:	4810      	ldr	r0, [pc, #64]	; (10ab4 <ll_rx_mem_release+0x8c>)
   10a72:	f7f0 fa8b 	bl	f8c <printk>
   10a76:	4040      	eors	r0, r0
   10a78:	f380 8811 	msr	BASEPRI, r0
   10a7c:	f04f 0004 	mov.w	r0, #4
   10a80:	df02      	svc	2
			mem_release(_node_rx_free,
   10a82:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10a84:	f7f6 fb13 	bl	70ae <mem_release>
{
   10a88:	4640      	mov	r0, r8
   10a8a:	e7d6      	b.n	10a3a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10a8c:	88c2      	ldrh	r2, [r0, #6]
   10a8e:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10a92:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10a96:	f7f6 fb25 	bl	70e4 <mem_get>
			mem_release(conn, &_radio.conn_free);
   10a9a:	4639      	mov	r1, r7
   10a9c:	e7f2      	b.n	10a84 <ll_rx_mem_release+0x5c>
   10a9e:	bf00      	nop
   10aa0:	200009f0 	.word	0x200009f0
   10aa4:	00014b99 	.word	0x00014b99
   10aa8:	00015f55 	.word	0x00015f55
   10aac:	0001763b 	.word	0x0001763b
   10ab0:	00015fa4 	.word	0x00015fa4
   10ab4:	00015ec9 	.word	0x00015ec9

00010ab8 <do_radio_rx_fc_set>:
	if (req == ack) {
   10ab8:	4291      	cmp	r1, r2
{
   10aba:	b510      	push	{r4, lr}
   10abc:	4b14      	ldr	r3, [pc, #80]	; (10b10 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   10abe:	d119      	bne.n	10af4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10ac0:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10ac4:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10ac8:	4294      	cmp	r4, r2
   10aca:	d111      	bne.n	10af0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10acc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10ace:	bf14      	ite	ne
   10ad0:	460a      	movne	r2, r1
   10ad2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10ad4:	3a01      	subs	r2, #1
   10ad6:	b2d2      	uxtb	r2, r2
   10ad8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10adc:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10ae0:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   10ae4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10ae8:	4291      	cmp	r1, r2
   10aea:	d00f      	beq.n	10b0c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   10aec:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10af0:	2001      	movs	r0, #1
   10af2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10af4:	b929      	cbnz	r1, 10b02 <do_radio_rx_fc_set+0x4a>
   10af6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   10afa:	1a18      	subs	r0, r3, r0
   10afc:	bf18      	it	ne
   10afe:	2001      	movne	r0, #1
   10b00:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10b02:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10b06:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   10b0a:	e7f6      	b.n	10afa <do_radio_rx_fc_set+0x42>
	return 0;
   10b0c:	2000      	movs	r0, #0
}
   10b0e:	bd10      	pop	{r4, pc}
   10b10:	200008c0 	.word	0x200008c0

00010b14 <radio_rx_fc_set>:
{
   10b14:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10b16:	4b14      	ldr	r3, [pc, #80]	; (10b68 <radio_rx_fc_set+0x54>)
   10b18:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   10b1c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   10b1e:	b302      	cbz	r2, 10b62 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10b20:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10b24:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10b26:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   10b2a:	b135      	cbz	r5, 10b3a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   10b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10b30:	4298      	cmp	r0, r3
   10b32:	d016      	beq.n	10b62 <radio_rx_fc_set+0x4e>
}
   10b34:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10b36:	f7ff bfbf 	b.w	10ab8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10b3a:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   10b3e:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10b42:	42a0      	cmp	r0, r4
   10b44:	d10d      	bne.n	10b62 <radio_rx_fc_set+0x4e>
   10b46:	4291      	cmp	r1, r2
   10b48:	d00b      	beq.n	10b62 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10b4a:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10b4e:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10b52:	42a0      	cmp	r0, r4
   10b54:	d005      	beq.n	10b62 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10b56:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10b5a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10b5c:	bf08      	it	eq
   10b5e:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10b62:	2000      	movs	r0, #0
   10b64:	bc30      	pop	{r4, r5}
   10b66:	4770      	bx	lr
   10b68:	200008c0 	.word	0x200008c0

00010b6c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10b6c:	4801      	ldr	r0, [pc, #4]	; (10b74 <ll_tx_mem_acquire+0x8>)
   10b6e:	f7f6 ba84 	b.w	707a <mem_acquire>
   10b72:	bf00      	nop
   10b74:	20000a24 	.word	0x20000a24

00010b78 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10b78:	4901      	ldr	r1, [pc, #4]	; (10b80 <ll_tx_mem_release+0x8>)
   10b7a:	f7f6 ba98 	b.w	70ae <mem_release>
   10b7e:	bf00      	nop
   10b80:	20000a24 	.word	0x20000a24

00010b84 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10b86:	4d33      	ldr	r5, [pc, #204]	; (10c54 <ll_tx_mem_enqueue+0xd0>)
   10b88:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10b8c:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10b90:	3401      	adds	r4, #1
{
   10b92:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10b94:	b2e4      	uxtb	r4, r4
{
   10b96:	4607      	mov	r7, r0
   10b98:	460e      	mov	r6, r1
		last = 0;
   10b9a:	42a3      	cmp	r3, r4
   10b9c:	bf08      	it	eq
   10b9e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10ba0:	f7f9 fa18 	bl	9fd4 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10ba4:	2800      	cmp	r0, #0
   10ba6:	d052      	beq.n	10c4e <ll_tx_mem_enqueue+0xca>
   10ba8:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10bac:	429c      	cmp	r4, r3
   10bae:	d04e      	beq.n	10c4e <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10bb0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10bb4:	7972      	ldrb	r2, [r6, #5]
   10bb6:	3b07      	subs	r3, #7
   10bb8:	429a      	cmp	r2, r3
   10bba:	d90e      	bls.n	10bda <ll_tx_mem_enqueue+0x56>
   10bbc:	4b26      	ldr	r3, [pc, #152]	; (10c58 <ll_tx_mem_enqueue+0xd4>)
   10bbe:	9301      	str	r3, [sp, #4]
   10bc0:	9300      	str	r3, [sp, #0]
   10bc2:	4a26      	ldr	r2, [pc, #152]	; (10c5c <ll_tx_mem_enqueue+0xd8>)
   10bc4:	4b26      	ldr	r3, [pc, #152]	; (10c60 <ll_tx_mem_enqueue+0xdc>)
   10bc6:	4927      	ldr	r1, [pc, #156]	; (10c64 <ll_tx_mem_enqueue+0xe0>)
   10bc8:	4827      	ldr	r0, [pc, #156]	; (10c68 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10bca:	f7f0 f9df 	bl	f8c <printk>
   10bce:	4040      	eors	r0, r0
   10bd0:	f380 8811 	msr	BASEPRI, r0
   10bd4:	f04f 0004 	mov.w	r0, #4
   10bd8:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10bda:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10bde:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10be2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10be6:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10bea:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   10bec:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10bf0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10bf4:	2b00      	cmp	r3, #0
   10bf6:	db02      	blt.n	10bfe <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10bf8:	2000      	movs	r0, #0
}
   10bfa:	b009      	add	sp, #36	; 0x24
   10bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10bfe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10c00:	2b00      	cmp	r3, #0
   10c02:	d0f9      	beq.n	10bf8 <ll_tx_mem_enqueue+0x74>
   10c04:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10c08:	f012 0302 	ands.w	r3, r2, #2
   10c0c:	d1f4      	bne.n	10bf8 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   10c0e:	f042 0202 	orr.w	r2, r2, #2
   10c12:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10c16:	f890 2020 	ldrb.w	r2, [r0, #32]
   10c1a:	4914      	ldr	r1, [pc, #80]	; (10c6c <ll_tx_mem_enqueue+0xe8>)
   10c1c:	9105      	str	r1, [sp, #20]
   10c1e:	3207      	adds	r2, #7
   10c20:	2101      	movs	r1, #1
   10c22:	9006      	str	r0, [sp, #24]
   10c24:	9304      	str	r3, [sp, #16]
   10c26:	9103      	str	r1, [sp, #12]
   10c28:	9302      	str	r3, [sp, #8]
   10c2a:	9301      	str	r3, [sp, #4]
   10c2c:	9300      	str	r3, [sp, #0]
   10c2e:	4618      	mov	r0, r3
   10c30:	b2d2      	uxtb	r2, r2
   10c32:	2103      	movs	r1, #3
   10c34:	f7f7 f8fa 	bl	7e2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10c38:	f030 0302 	bics.w	r3, r0, #2
   10c3c:	d0dc      	beq.n	10bf8 <ll_tx_mem_enqueue+0x74>
   10c3e:	4b06      	ldr	r3, [pc, #24]	; (10c58 <ll_tx_mem_enqueue+0xd4>)
   10c40:	9301      	str	r3, [sp, #4]
   10c42:	9300      	str	r3, [sp, #0]
   10c44:	4a05      	ldr	r2, [pc, #20]	; (10c5c <ll_tx_mem_enqueue+0xd8>)
   10c46:	4b06      	ldr	r3, [pc, #24]	; (10c60 <ll_tx_mem_enqueue+0xdc>)
   10c48:	4906      	ldr	r1, [pc, #24]	; (10c64 <ll_tx_mem_enqueue+0xe0>)
   10c4a:	4809      	ldr	r0, [pc, #36]	; (10c70 <ll_tx_mem_enqueue+0xec>)
   10c4c:	e7bd      	b.n	10bca <ll_tx_mem_enqueue+0x46>
		return 1;
   10c4e:	2001      	movs	r0, #1
   10c50:	e7d3      	b.n	10bfa <ll_tx_mem_enqueue+0x76>
   10c52:	bf00      	nop
   10c54:	200008c0 	.word	0x200008c0
   10c58:	00014b99 	.word	0x00014b99
   10c5c:	00015f55 	.word	0x00015f55
   10c60:	00017669 	.word	0x00017669
   10c64:	00015fa4 	.word	0x00015fa4
   10c68:	00017c4f 	.word	0x00017c4f
   10c6c:	0000ad2d 	.word	0x0000ad2d
   10c70:	000176a1 	.word	0x000176a1

00010c74 <ll_enc_req_send>:
{
   10c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c78:	4607      	mov	r7, r0
   10c7a:	4688      	mov	r8, r1
   10c7c:	4616      	mov	r6, r2
   10c7e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10c80:	f7f9 f9a8 	bl	9fd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10c84:	4605      	mov	r5, r0
   10c86:	b910      	cbnz	r0, 10c8e <ll_enc_req_send+0x1a>
			return 1;
   10c88:	2001      	movs	r0, #1
   10c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10c8e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10c92:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10c96:	429a      	cmp	r2, r3
   10c98:	d1f6      	bne.n	10c88 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   10c9a:	f7ff ff67 	bl	10b6c <ll_tx_mem_acquire>
	if (node_tx) {
   10c9e:	4604      	mov	r4, r0
   10ca0:	2800      	cmp	r0, #0
   10ca2:	d0f1      	beq.n	10c88 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10ca4:	2210      	movs	r2, #16
   10ca6:	4649      	mov	r1, r9
   10ca8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   10cac:	f7f0 ffb2 	bl	1c14 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   10cb0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10cb4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10cb8:	d124      	bne.n	10d04 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cba:	7923      	ldrb	r3, [r4, #4]
   10cbc:	f043 0303 	orr.w	r3, r3, #3
   10cc0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   10cc2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10cc4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   10cc6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10cc8:	2303      	movs	r3, #3
   10cca:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10ccc:	4641      	mov	r1, r8
   10cce:	18a0      	adds	r0, r4, r2
   10cd0:	f7f0 ffa0 	bl	1c14 <memcpy>
			enc_req->ediv[0] = ediv[0];
   10cd4:	7833      	ldrb	r3, [r6, #0]
   10cd6:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10cd8:	7873      	ldrb	r3, [r6, #1]
   10cda:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   10cdc:	2108      	movs	r1, #8
   10cde:	f104 0012 	add.w	r0, r4, #18
   10ce2:	f7f7 fa01 	bl	80e8 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   10ce6:	2104      	movs	r1, #4
   10ce8:	f104 001a 	add.w	r0, r4, #26
   10cec:	f7f7 f9fc 	bl	80e8 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   10cf0:	4621      	mov	r1, r4
   10cf2:	4638      	mov	r0, r7
   10cf4:	f7ff ff46 	bl	10b84 <ll_tx_mem_enqueue>
   10cf8:	2601      	movs	r6, #1
   10cfa:	b1d0      	cbz	r0, 10d32 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   10cfc:	4620      	mov	r0, r4
   10cfe:	f7ff ff3b 	bl	10b78 <ll_tx_mem_release>
   10d02:	e7c1      	b.n	10c88 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   10d04:	2b30      	cmp	r3, #48	; 0x30
   10d06:	d1f9      	bne.n	10cfc <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   10d08:	2208      	movs	r2, #8
   10d0a:	4641      	mov	r1, r8
   10d0c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10d10:	f7f0 ff80 	bl	1c14 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10d14:	7833      	ldrb	r3, [r6, #0]
   10d16:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   10d1a:	7873      	ldrb	r3, [r6, #1]
   10d1c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d20:	7923      	ldrb	r3, [r4, #4]
   10d22:	f043 0303 	orr.w	r3, r3, #3
   10d26:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10d28:	2301      	movs	r3, #1
   10d2a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10d2c:	230a      	movs	r3, #10
   10d2e:	71e3      	strb	r3, [r4, #7]
   10d30:	e7de      	b.n	10cf0 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   10d32:	2303      	movs	r3, #3
   10d34:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   10d38:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   10d3c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   10d40:	3301      	adds	r3, #1
   10d42:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   10d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d4a:	0000      	movs	r0, r0
   10d4c:	0000      	movs	r0, r0
	...

00010d50 <radio_scan_enable>:
{
   10d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   10d54:	4c68      	ldr	r4, [pc, #416]	; (10ef8 <radio_scan_enable+0x1a8>)
   10d56:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   10d5a:	b08e      	sub	sp, #56	; 0x38
   10d5c:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   10d5e:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10d62:	f04f 0302 	mov.w	r3, #2
{
   10d66:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10d68:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10d6a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10d6c:	d003      	beq.n	10d76 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10d6e:	200c      	movs	r0, #12
}
   10d70:	b00e      	add	sp, #56	; 0x38
   10d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   10d76:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10d7a:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10d7e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   10d82:	0840      	lsrs	r0, r0, #1
   10d84:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10d88:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10d8c:	f360 0200 	bfi	r2, r0, #0, #1
   10d90:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10d94:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10d98:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10d9c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10da0:	2206      	movs	r2, #6
   10da2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10da6:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10daa:	4e54      	ldr	r6, [pc, #336]	; (10efc <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10dac:	f7f0 ff32 	bl	1c14 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10db0:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   10db4:	f04f 0991 	mov.w	r9, #145	; 0x91
   10db8:	fba2 0106 	umull	r0, r1, r2, r6
   10dbc:	fb09 1102 	mla	r1, r9, r2, r1
   10dc0:	a34b      	add	r3, pc, #300	; (adr r3, 10ef0 <radio_scan_enable+0x1a0>)
   10dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10dc6:	f7ef fa25 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10dca:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10dce:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   10dd2:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10dd6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10dda:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10dde:	b2ba      	uxth	r2, r7
   10de0:	fba2 6706 	umull	r6, r7, r2, r6
   10de4:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10de8:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   10dec:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   10dee:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   10df2:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   10df6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   10dfa:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10dfe:	a33c      	add	r3, pc, #240	; (adr r3, 10ef0 <radio_scan_enable+0x1a0>)
   10e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e04:	4630      	mov	r0, r6
   10e06:	4639      	mov	r1, r7
   10e08:	f7ef fa04 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   10e0c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10e10:	459a      	cmp	sl, r3
   10e12:	bf94      	ite	ls
   10e14:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10e18:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10e1c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10e20:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10e22:	bf38      	it	cc
   10e24:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10e28:	f7f7 f91e 	bl	8068 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   10e2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   10e30:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   10e32:	2b00      	cmp	r3, #0
   10e34:	d045      	beq.n	10ec2 <radio_scan_enable+0x172>
		us_offset = 0;
   10e36:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10e38:	980c      	ldr	r0, [sp, #48]	; 0x30
   10e3a:	4931      	ldr	r1, [pc, #196]	; (10f00 <radio_scan_enable+0x1b0>)
   10e3c:	a32c      	add	r3, pc, #176	; (adr r3, 10ef0 <radio_scan_enable+0x1a0>)
   10e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e42:	fba0 0101 	umull	r0, r1, r0, r1
   10e46:	f7ef f9e5 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e4a:	ab0b      	add	r3, sp, #44	; 0x2c
   10e4c:	9308      	str	r3, [sp, #32]
   10e4e:	4b2d      	ldr	r3, [pc, #180]	; (10f04 <radio_scan_enable+0x1b4>)
   10e50:	9307      	str	r3, [sp, #28]
   10e52:	4b2d      	ldr	r3, [pc, #180]	; (10f08 <radio_scan_enable+0x1b8>)
   10e54:	9305      	str	r3, [sp, #20]
   10e56:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10e5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e5e:	4443      	add	r3, r8
   10e60:	2500      	movs	r5, #0
   10e62:	4482      	add	sl, r0
   10e64:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10e66:	4630      	mov	r0, r6
   10e68:	a321      	add	r3, pc, #132	; (adr r3, 10ef0 <radio_scan_enable+0x1a0>)
   10e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e6e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e70:	9506      	str	r5, [sp, #24]
   10e72:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10e74:	f7ef f9ce 	bl	214 <__aeabi_uldivmod>
   10e78:	4610      	mov	r0, r2
   10e7a:	4619      	mov	r1, r3
   10e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10e80:	2300      	movs	r3, #0
   10e82:	f7ef f9c7 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e86:	e88d 0220 	stmia.w	sp, {r5, r9}
   10e8a:	9002      	str	r0, [sp, #8]
   10e8c:	4653      	mov	r3, sl
   10e8e:	2206      	movs	r2, #6
   10e90:	2103      	movs	r1, #3
   10e92:	4628      	mov	r0, r5
   10e94:	f7f6 ff7a 	bl	7d8c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10e98:	2802      	cmp	r0, #2
   10e9a:	d023      	beq.n	10ee4 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10e9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10e9e:	2d00      	cmp	r5, #0
   10ea0:	f47f af65 	bne.w	10d6e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10ea4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10ea8:	f043 0301 	orr.w	r3, r3, #1
   10eac:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10eb0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	db02      	blt.n	10ebe <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10eb8:	2002      	movs	r0, #2
   10eba:	f000 fea3 	bl	11c04 <ll_adv_scan_state_cb>
	return 0;
   10ebe:	4628      	mov	r0, r5
   10ec0:	e756      	b.n	10d70 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10ec2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10ec6:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10ec8:	aa0d      	add	r2, sp, #52	; 0x34
   10eca:	ab0c      	add	r3, sp, #48	; 0x30
   10ecc:	4441      	add	r1, r8
   10ece:	2003      	movs	r0, #3
   10ed0:	f7f9 fc86 	bl	a7e0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d0ae      	beq.n	10e38 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10eda:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10ede:	e7ab      	b.n	10e38 <radio_scan_enable+0xe8>
			cpu_sleep();
   10ee0:	f7f8 fe7e 	bl	9be0 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ee6:	2b02      	cmp	r3, #2
   10ee8:	d0fa      	beq.n	10ee0 <radio_scan_enable+0x190>
   10eea:	e7d7      	b.n	10e9c <radio_scan_enable+0x14c>
   10eec:	f3af 8000 	nop.w
   10ef0:	1afd498d 	.word	0x1afd498d
   10ef4:	00000007 	.word	0x00000007
   10ef8:	200008c0 	.word	0x200008c0
   10efc:	84e72a00 	.word	0x84e72a00
   10f00:	3b9aca00 	.word	0x3b9aca00
   10f04:	00009c25 	.word	0x00009c25
   10f08:	0000bb4d 	.word	0x0000bb4d

00010f0c <radio_scan_disable>:
{
   10f0c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10f0e:	2104      	movs	r1, #4
   10f10:	2006      	movs	r0, #6
   10f12:	f7f9 f875 	bl	a000 <role_disable>
	if (!status) {
   10f16:	4605      	mov	r5, r0
   10f18:	b9e8      	cbnz	r0, 10f56 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10f1a:	4c10      	ldr	r4, [pc, #64]	; (10f5c <radio_scan_disable+0x50>)
   10f1c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10f20:	f360 0200 	bfi	r2, r0, #0, #1
   10f24:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10f28:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10f2c:	2a00      	cmp	r2, #0
   10f2e:	db01      	blt.n	10f34 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10f30:	f000 fe68 	bl	11c04 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10f34:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10f38:	b15e      	cbz	r6, 10f52 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10f3a:	2300      	movs	r3, #0
   10f3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10f40:	4907      	ldr	r1, [pc, #28]	; (10f60 <radio_scan_disable+0x54>)
   10f42:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10f46:	f7f6 f8b2 	bl	70ae <mem_release>
			mem_release(conn, &_radio.conn_free);
   10f4a:	4906      	ldr	r1, [pc, #24]	; (10f64 <radio_scan_disable+0x58>)
   10f4c:	4630      	mov	r0, r6
   10f4e:	f7f6 f8ae 	bl	70ae <mem_release>
}
   10f52:	4628      	mov	r0, r5
   10f54:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10f56:	250c      	movs	r5, #12
   10f58:	e7fb      	b.n	10f52 <radio_scan_disable+0x46>
   10f5a:	bf00      	nop
   10f5c:	200008c0 	.word	0x200008c0
   10f60:	20000a08 	.word	0x20000a08
   10f64:	200009cc 	.word	0x200009cc

00010f68 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10f68:	4b03      	ldr	r3, [pc, #12]	; (10f78 <ll_connect_disable+0x10>)
   10f6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10f6e:	b10b      	cbz	r3, 10f74 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10f70:	f7ff bfcc 	b.w	10f0c <radio_scan_disable>
}
   10f74:	200c      	movs	r0, #12
   10f76:	4770      	bx	lr
   10f78:	200008c0 	.word	0x200008c0

00010f7c <ll_rx_dequeue>:
{
   10f7c:	b530      	push	{r4, r5, lr}
   10f7e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10f80:	4d47      	ldr	r5, [pc, #284]	; (110a0 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10f82:	aa04      	add	r2, sp, #16
   10f84:	2300      	movs	r3, #0
   10f86:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10f8a:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10f8e:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10f92:	f7f6 f8db 	bl	714c <memq_dequeue>
   10f96:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10f98:	b970      	cbnz	r0, 10fb8 <ll_rx_dequeue+0x3c>
   10f9a:	4b42      	ldr	r3, [pc, #264]	; (110a4 <ll_rx_dequeue+0x128>)
   10f9c:	9301      	str	r3, [sp, #4]
   10f9e:	9300      	str	r3, [sp, #0]
   10fa0:	4a41      	ldr	r2, [pc, #260]	; (110a8 <ll_rx_dequeue+0x12c>)
   10fa2:	4b42      	ldr	r3, [pc, #264]	; (110ac <ll_rx_dequeue+0x130>)
   10fa4:	4942      	ldr	r1, [pc, #264]	; (110b0 <ll_rx_dequeue+0x134>)
   10fa6:	4843      	ldr	r0, [pc, #268]	; (110b4 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10fa8:	f7ef fff0 	bl	f8c <printk>
   10fac:	4040      	eors	r0, r0
   10fae:	f380 8811 	msr	BASEPRI, r0
   10fb2:	f04f 0004 	mov.w	r0, #4
   10fb6:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10fb8:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   10fbc:	f7f6 f877 	bl	70ae <mem_release>
	switch (node_rx->hdr.type) {
   10fc0:	9a03      	ldr	r2, [sp, #12]
   10fc2:	7911      	ldrb	r1, [r2, #4]
   10fc4:	290c      	cmp	r1, #12
   10fc6:	d807      	bhi.n	10fd8 <ll_rx_dequeue+0x5c>
   10fc8:	2301      	movs	r3, #1
   10fca:	408b      	lsls	r3, r1
   10fcc:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10fd0:	4203      	tst	r3, r0
   10fd2:	d109      	bne.n	10fe8 <ll_rx_dequeue+0x6c>
   10fd4:	0618      	lsls	r0, r3, #24
   10fd6:	d419      	bmi.n	1100c <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   10fd8:	4b32      	ldr	r3, [pc, #200]	; (110a4 <ll_rx_dequeue+0x128>)
   10fda:	9301      	str	r3, [sp, #4]
   10fdc:	9300      	str	r3, [sp, #0]
   10fde:	4a32      	ldr	r2, [pc, #200]	; (110a8 <ll_rx_dequeue+0x12c>)
   10fe0:	4b32      	ldr	r3, [pc, #200]	; (110ac <ll_rx_dequeue+0x130>)
   10fe2:	4933      	ldr	r1, [pc, #204]	; (110b0 <ll_rx_dequeue+0x134>)
   10fe4:	4834      	ldr	r0, [pc, #208]	; (110b8 <ll_rx_dequeue+0x13c>)
   10fe6:	e7df      	b.n	10fa8 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   10fe8:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   10fec:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   10ff0:	3801      	subs	r0, #1
   10ff2:	4283      	cmp	r3, r0
   10ff4:	db07      	blt.n	11006 <ll_rx_dequeue+0x8a>
   10ff6:	4b2b      	ldr	r3, [pc, #172]	; (110a4 <ll_rx_dequeue+0x128>)
   10ff8:	9301      	str	r3, [sp, #4]
   10ffa:	9300      	str	r3, [sp, #0]
   10ffc:	4a2a      	ldr	r2, [pc, #168]	; (110a8 <ll_rx_dequeue+0x12c>)
   10ffe:	4b2b      	ldr	r3, [pc, #172]	; (110ac <ll_rx_dequeue+0x130>)
   11000:	492b      	ldr	r1, [pc, #172]	; (110b0 <ll_rx_dequeue+0x134>)
   11002:	482e      	ldr	r0, [pc, #184]	; (110bc <ll_rx_dequeue+0x140>)
   11004:	e7d0      	b.n	10fa8 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   11006:	3301      	adds	r3, #1
   11008:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1100c:	2906      	cmp	r1, #6
   1100e:	d136      	bne.n	1107e <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   11010:	7ad3      	ldrb	r3, [r2, #11]
   11012:	2b3c      	cmp	r3, #60	; 0x3c
   11014:	d00d      	beq.n	11032 <ll_rx_dequeue+0xb6>
   11016:	7b12      	ldrb	r2, [r2, #12]
   11018:	b9e2      	cbnz	r2, 11054 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   1101a:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   1101e:	07d9      	lsls	r1, r3, #31
   11020:	d42f      	bmi.n	11082 <ll_rx_dequeue+0x106>
   11022:	4b20      	ldr	r3, [pc, #128]	; (110a4 <ll_rx_dequeue+0x128>)
   11024:	9301      	str	r3, [sp, #4]
   11026:	9300      	str	r3, [sp, #0]
   11028:	4a1f      	ldr	r2, [pc, #124]	; (110a8 <ll_rx_dequeue+0x12c>)
   1102a:	4b20      	ldr	r3, [pc, #128]	; (110ac <ll_rx_dequeue+0x130>)
   1102c:	4920      	ldr	r1, [pc, #128]	; (110b0 <ll_rx_dequeue+0x134>)
   1102e:	4824      	ldr	r0, [pc, #144]	; (110c0 <ll_rx_dequeue+0x144>)
   11030:	e7ba      	b.n	10fa8 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   11032:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   11034:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   11038:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1103c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   11040:	2b00      	cmp	r3, #0
   11042:	db09      	blt.n	11058 <ll_rx_dequeue+0xdc>
   11044:	4b17      	ldr	r3, [pc, #92]	; (110a4 <ll_rx_dequeue+0x128>)
   11046:	9301      	str	r3, [sp, #4]
   11048:	9300      	str	r3, [sp, #0]
   1104a:	4a17      	ldr	r2, [pc, #92]	; (110a8 <ll_rx_dequeue+0x12c>)
   1104c:	4b17      	ldr	r3, [pc, #92]	; (110ac <ll_rx_dequeue+0x130>)
   1104e:	4918      	ldr	r1, [pc, #96]	; (110b0 <ll_rx_dequeue+0x134>)
   11050:	481c      	ldr	r0, [pc, #112]	; (110c4 <ll_rx_dequeue+0x148>)
   11052:	e7a9      	b.n	10fa8 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   11054:	2500      	movs	r5, #0
   11056:	e7f1      	b.n	1103c <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   11058:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1105c:	f36f 13c7 	bfc	r3, #7, #1
   11060:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   11064:	b995      	cbnz	r5, 1108c <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11066:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   1106a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1106e:	f000 0001 	and.w	r0, r0, #1
   11072:	0040      	lsls	r0, r0, #1
		if (!bm) {
   11074:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   11078:	d101      	bne.n	1107e <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   1107a:	f000 fdc3 	bl	11c04 <ll_adv_scan_state_cb>
}
   1107e:	b005      	add	sp, #20
   11080:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   11082:	f362 0300 	bfi	r3, r2, #0, #1
   11086:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   1108a:	e7ec      	b.n	11066 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   1108c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   11090:	490d      	ldr	r1, [pc, #52]	; (110c8 <ll_rx_dequeue+0x14c>)
   11092:	f7f6 f80c 	bl	70ae <mem_release>
			mem_release(conn, &_radio.conn_free);
   11096:	490d      	ldr	r1, [pc, #52]	; (110cc <ll_rx_dequeue+0x150>)
   11098:	4628      	mov	r0, r5
   1109a:	f7f6 f808 	bl	70ae <mem_release>
   1109e:	e7e2      	b.n	11066 <ll_rx_dequeue+0xea>
   110a0:	200008c0 	.word	0x200008c0
   110a4:	00014b99 	.word	0x00014b99
   110a8:	00015f55 	.word	0x00015f55
   110ac:	0001762d 	.word	0x0001762d
   110b0:	00015fa4 	.word	0x00015fa4
   110b4:	0001767b 	.word	0x0001767b
   110b8:	00015ec9 	.word	0x00015ec9
   110bc:	00017726 	.word	0x00017726
   110c0:	00017c14 	.word	0x00017c14
   110c4:	00017bd6 	.word	0x00017bd6
   110c8:	20000a08 	.word	0x20000a08
   110cc:	200009cc 	.word	0x200009cc

000110d0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   110d0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   110d2:	4c0b      	ldr	r4, [pc, #44]	; (11100 <rtc0_nrf5_isr+0x30>)
   110d4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   110d8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   110dc:	b122      	cbz	r2, 110e8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   110de:	2000      	movs	r0, #0
   110e0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   110e4:	f7f6 fe40 	bl	7d68 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   110e8:	b12d      	cbz	r5, 110f6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   110ea:	2300      	movs	r3, #0
   110ec:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   110f0:	2001      	movs	r0, #1
   110f2:	f7f6 fe39 	bl	7d68 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   110f6:	2000      	movs	r0, #0
}
   110f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   110fc:	f7f6 b8d6 	b.w	72ac <mayfly_run>
   11100:	4000b000 	.word	0x4000b000

00011104 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   11104:	2001      	movs	r0, #1
   11106:	f7f6 b8d1 	b.w	72ac <mayfly_run>

0001110a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1110a:	4668      	mov	r0, sp
   1110c:	f020 0107 	bic.w	r1, r0, #7
   11110:	468d      	mov	sp, r1
   11112:	b501      	push	{r0, lr}
	isr_radio();
   11114:	f001 f8b8 	bl	12288 <isr_radio>
	ISR_DIRECT_PM();
   11118:	f7f0 fbf6 	bl	1908 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1111c:	f7f0 f9e0 	bl	14e0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11120:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11124:	4685      	mov	sp, r0
   11126:	4770      	bx	lr

00011128 <radio_active_callback>:
{
   11128:	4770      	bx	lr
	...

0001112c <radio_event_callback>:
	k_sem_give(sem_recv);
   1112c:	4b01      	ldr	r3, [pc, #4]	; (11134 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1112e:	6818      	ldr	r0, [r3, #0]
   11130:	f002 bf7b 	b.w	1402a <_impl_k_sem_give>
   11134:	200011f0 	.word	0x200011f0

00011138 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   11138:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   1113a:	4b41      	ldr	r3, [pc, #260]	; (11240 <ll_init+0x108>)
{
   1113c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1113e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11140:	4840      	ldr	r0, [pc, #256]	; (11244 <ll_init+0x10c>)
   11142:	f002 fa8b 	bl	1365c <device_get_binding>
	if (!clk_k32) {
   11146:	b918      	cbnz	r0, 11150 <ll_init+0x18>
		return -ENODEV;
   11148:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   1114c:	b006      	add	sp, #24
   1114e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   11150:	6843      	ldr	r3, [r0, #4]
   11152:	2101      	movs	r1, #1
   11154:	681b      	ldr	r3, [r3, #0]
   11156:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   11158:	483b      	ldr	r0, [pc, #236]	; (11248 <ll_init+0x110>)
   1115a:	f002 fa7f 	bl	1365c <device_get_binding>
	if (!entropy) {
   1115e:	4604      	mov	r4, r0
   11160:	2800      	cmp	r0, #0
   11162:	d0f1      	beq.n	11148 <ll_init+0x10>
	cntr_init();
   11164:	f000 ff74 	bl	12050 <cntr_init>
	mayfly_init();
   11168:	f7f6 f800 	bl	716c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1116c:	4b37      	ldr	r3, [pc, #220]	; (1124c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1116e:	2203      	movs	r2, #3
   11170:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11172:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11174:	4a36      	ldr	r2, [pc, #216]	; (11250 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11176:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11178:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1117a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1117c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1117e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   11180:	9205      	str	r2, [sp, #20]
   11182:	4a34      	ldr	r2, [pc, #208]	; (11254 <ll_init+0x11c>)
   11184:	9204      	str	r2, [sp, #16]
   11186:	4a34      	ldr	r2, [pc, #208]	; (11258 <ll_init+0x120>)
   11188:	9203      	str	r2, [sp, #12]
   1118a:	4a34      	ldr	r2, [pc, #208]	; (1125c <ll_init+0x124>)
   1118c:	9202      	str	r2, [sp, #8]
   1118e:	220d      	movs	r2, #13
   11190:	9201      	str	r2, [sp, #4]
   11192:	9300      	str	r3, [sp, #0]
   11194:	4a32      	ldr	r2, [pc, #200]	; (11260 <ll_init+0x128>)
   11196:	2304      	movs	r3, #4
   11198:	f7f6 fdae 	bl	7cf8 <ticker_init>
	LL_ASSERT(!err);
   1119c:	b170      	cbz	r0, 111bc <ll_init+0x84>
   1119e:	4b31      	ldr	r3, [pc, #196]	; (11264 <ll_init+0x12c>)
   111a0:	9301      	str	r3, [sp, #4]
   111a2:	9300      	str	r3, [sp, #0]
   111a4:	4a30      	ldr	r2, [pc, #192]	; (11268 <ll_init+0x130>)
   111a6:	4b31      	ldr	r3, [pc, #196]	; (1126c <ll_init+0x134>)
   111a8:	4931      	ldr	r1, [pc, #196]	; (11270 <ll_init+0x138>)
   111aa:	4832      	ldr	r0, [pc, #200]	; (11274 <ll_init+0x13c>)
   111ac:	f7ef feee 	bl	f8c <printk>
   111b0:	4040      	eors	r0, r0
   111b2:	f380 8811 	msr	BASEPRI, r0
   111b6:	f04f 0004 	mov.w	r0, #4
   111ba:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   111bc:	482e      	ldr	r0, [pc, #184]	; (11278 <ll_init+0x140>)
   111be:	f002 fa4d 	bl	1365c <device_get_binding>
	if (!clk_m16) {
   111c2:	2800      	cmp	r0, #0
   111c4:	d0c0      	beq.n	11148 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   111c6:	4b2d      	ldr	r3, [pc, #180]	; (1127c <ll_init+0x144>)
   111c8:	9304      	str	r3, [sp, #16]
   111ca:	9501      	str	r5, [sp, #4]
   111cc:	231b      	movs	r3, #27
   111ce:	2501      	movs	r5, #1
   111d0:	f44f 7657 	mov.w	r6, #860	; 0x35c
   111d4:	9303      	str	r3, [sp, #12]
   111d6:	9302      	str	r3, [sp, #8]
   111d8:	4622      	mov	r2, r4
   111da:	9605      	str	r6, [sp, #20]
   111dc:	9500      	str	r5, [sp, #0]
   111de:	462b      	mov	r3, r5
   111e0:	2107      	movs	r1, #7
   111e2:	f7fe ff49 	bl	10078 <radio_init>
	if (err) {
   111e6:	4604      	mov	r4, r0
   111e8:	b160      	cbz	r0, 11204 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   111ea:	4b1e      	ldr	r3, [pc, #120]	; (11264 <ll_init+0x12c>)
   111ec:	9303      	str	r3, [sp, #12]
   111ee:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   111f2:	4a1d      	ldr	r2, [pc, #116]	; (11268 <ll_init+0x130>)
   111f4:	4b1d      	ldr	r3, [pc, #116]	; (1126c <ll_init+0x134>)
   111f6:	491e      	ldr	r1, [pc, #120]	; (11270 <ll_init+0x138>)
   111f8:	4821      	ldr	r0, [pc, #132]	; (11280 <ll_init+0x148>)
   111fa:	f7ef fec7 	bl	f8c <printk>
		return -ENOMEM;
   111fe:	f06f 000b 	mvn.w	r0, #11
   11202:	e7a3      	b.n	1114c <ll_init+0x14>
	ll_filter_reset(true);
   11204:	4628      	mov	r0, r5
   11206:	f000 fedb 	bl	11fc0 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1120a:	4622      	mov	r2, r4
   1120c:	4621      	mov	r1, r4
   1120e:	4628      	mov	r0, r5
   11210:	f7f0 fb60 	bl	18d4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11214:	4622      	mov	r2, r4
   11216:	4621      	mov	r1, r4
   11218:	200b      	movs	r0, #11
   1121a:	f7f0 fb5b 	bl	18d4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1121e:	4622      	mov	r2, r4
   11220:	4621      	mov	r1, r4
   11222:	2018      	movs	r0, #24
   11224:	f7f0 fb56 	bl	18d4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11228:	4628      	mov	r0, r5
   1122a:	f7f0 fb21 	bl	1870 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1122e:	200b      	movs	r0, #11
   11230:	f7f0 fb1e 	bl	1870 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11234:	2018      	movs	r0, #24
   11236:	f7f0 fb1b 	bl	1870 <_arch_irq_enable>
	return 0;
   1123a:	4620      	mov	r0, r4
   1123c:	e786      	b.n	1114c <ll_init+0x14>
   1123e:	bf00      	nop
   11240:	200011f0 	.word	0x200011f0
   11244:	00014c6c 	.word	0x00014c6c
   11248:	00014c40 	.word	0x00014c40
   1124c:	200011d0 	.word	0x200011d0
   11250:	00012c25 	.word	0x00012c25
   11254:	00012b81 	.word	0x00012b81
   11258:	00012b25 	.word	0x00012b25
   1125c:	20000f60 	.word	0x20000f60
   11260:	20000e20 	.word	0x20000e20
   11264:	00014b99 	.word	0x00014b99
   11268:	00015f55 	.word	0x00015f55
   1126c:	0001834b 	.word	0x0001834b
   11270:	00015fa4 	.word	0x00015fa4
   11274:	00018353 	.word	0x00018353
   11278:	00014c77 	.word	0x00014c77
   1127c:	20000ac4 	.word	0x20000ac4
   11280:	00018379 	.word	0x00018379

00011284 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   11284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11288:	4681      	mov	r9, r0
   1128a:	4688      	mov	r8, r1
   1128c:	4617      	mov	r7, r2
   1128e:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11290:	f7fe ffd6 	bl	10240 <ll_scan_is_enabled>
   11294:	b988      	cbnz	r0, 112ba <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11296:	4d0a      	ldr	r5, [pc, #40]	; (112c0 <ll_scan_params_set+0x3c>)
   11298:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1129a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1129e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   112a2:	4622      	mov	r2, r4
   112a4:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   112a8:	4613      	mov	r3, r2
   112aa:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   112ae:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   112b0:	f362 1387 	bfi	r3, r2, #6, #2
   112b4:	712b      	strb	r3, [r5, #4]

	return 0;
   112b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   112ba:	200c      	movs	r0, #12
}
   112bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   112c0:	200011f4 	.word	0x200011f4

000112c4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   112c6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   112c8:	b920      	cbnz	r0, 112d4 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   112ca:	b005      	add	sp, #20
   112cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   112d0:	f7ff be1c 	b.w	10f0c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   112d4:	f7fe ffb4 	bl	10240 <ll_scan_is_enabled>
   112d8:	4606      	mov	r6, r0
   112da:	bb40      	cbnz	r0, 1132e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   112dc:	4c15      	ldr	r4, [pc, #84]	; (11334 <ll_scan_enable+0x70>)
   112de:	7920      	ldrb	r0, [r4, #4]
   112e0:	0980      	lsrs	r0, r0, #6
   112e2:	f000 fa63 	bl	117ac <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   112e6:	7923      	ldrb	r3, [r4, #4]
   112e8:	f013 0501 	ands.w	r5, r3, #1
   112ec:	d006      	beq.n	112fc <ll_scan_enable+0x38>
   112ee:	f013 0520 	ands.w	r5, r3, #32
   112f2:	d003      	beq.n	112fc <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   112f4:	4630      	mov	r0, r6
   112f6:	f000 fbdd 	bl	11ab4 <ll_rl_rpa_update>
		rpa_gen = 1;
   112fa:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   112fc:	7926      	ldrb	r6, [r4, #4]
   112fe:	f006 070f 	and.w	r7, r6, #15
   11302:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11306:	2100      	movs	r1, #0
   11308:	4630      	mov	r0, r6
   1130a:	f7f6 feb3 	bl	8074 <ll_addr_get>
   1130e:	22ff      	movs	r2, #255	; 0xff
   11310:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11312:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11314:	8823      	ldrh	r3, [r4, #0]
   11316:	9502      	str	r5, [sp, #8]
   11318:	0992      	lsrs	r2, r2, #6
   1131a:	9201      	str	r2, [sp, #4]
   1131c:	8862      	ldrh	r2, [r4, #2]
   1131e:	9200      	str	r2, [sp, #0]
   11320:	4631      	mov	r1, r6
   11322:	4602      	mov	r2, r0
   11324:	4638      	mov	r0, r7
   11326:	f7ff fd13 	bl	10d50 <radio_scan_enable>
}
   1132a:	b005      	add	sp, #20
   1132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1132e:	2000      	movs	r0, #0
   11330:	e7fb      	b.n	1132a <ll_scan_enable+0x66>
   11332:	bf00      	nop
   11334:	200011f4 	.word	0x200011f4

00011338 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   11338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1133c:	b085      	sub	sp, #20
   1133e:	461e      	mov	r6, r3
   11340:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   11344:	9303      	str	r3, [sp, #12]
   11346:	4680      	mov	r8, r0
   11348:	4689      	mov	r9, r1
   1134a:	4615      	mov	r5, r2
   1134c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1134e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   11352:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   11356:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1135a:	f7fe ff71 	bl	10240 <ll_scan_is_enabled>
   1135e:	9b03      	ldr	r3, [sp, #12]
   11360:	bba0      	cbnz	r0, 113cc <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   11362:	9300      	str	r3, [sp, #0]
   11364:	4652      	mov	r2, sl
   11366:	465b      	mov	r3, fp
   11368:	4639      	mov	r1, r7
   1136a:	4630      	mov	r0, r6
   1136c:	f7fe ff8c 	bl	10288 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   11370:	bb68      	cbnz	r0, 113ce <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   11372:	4628      	mov	r0, r5
   11374:	f000 fa1a 	bl	117ac <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   11378:	b1dd      	cbz	r5, 113b2 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1137a:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1137c:	1ea3      	subs	r3, r4, #2
   1137e:	2b01      	cmp	r3, #1
   11380:	d822      	bhi.n	113c8 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   11382:	2000      	movs	r0, #0
   11384:	f000 fb96 	bl	11ab4 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   11388:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1138c:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1138e:	2100      	movs	r1, #0
   11390:	4620      	mov	r0, r4
   11392:	f7f6 fe6f 	bl	8074 <ll_addr_get>
   11396:	4643      	mov	r3, r8
   11398:	4602      	mov	r2, r0
   1139a:	4621      	mov	r1, r4
   1139c:	2000      	movs	r0, #0
   1139e:	9711      	str	r7, [sp, #68]	; 0x44
   113a0:	9610      	str	r6, [sp, #64]	; 0x40
   113a2:	950f      	str	r5, [sp, #60]	; 0x3c
   113a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   113a8:	b005      	add	sp, #20
   113aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   113ae:	f7ff bccf 	b.w	10d50 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   113b2:	f000 fb77 	bl	11aa4 <ctrl_rl_enabled>
   113b6:	2800      	cmp	r0, #0
   113b8:	d0df      	beq.n	1137a <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   113ba:	4639      	mov	r1, r7
   113bc:	462a      	mov	r2, r5
   113be:	4630      	mov	r0, r6
   113c0:	f000 fa16 	bl	117f0 <ll_rl_find>
   113c4:	4607      	mov	r7, r0
   113c6:	e7d9      	b.n	1137c <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   113c8:	2600      	movs	r6, #0
   113ca:	e7e0      	b.n	1138e <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   113cc:	200c      	movs	r0, #12
}
   113ce:	b005      	add	sp, #20
   113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000113d4 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   113d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113d8:	4688      	mov	r8, r1
	int i;

	if (free) {
   113da:	4615      	mov	r5, r2
   113dc:	b10a      	cbz	r2, 113e2 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   113de:	23ff      	movs	r3, #255	; 0xff
   113e0:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   113e2:	4e14      	ldr	r6, [pc, #80]	; (11434 <wl_find+0x60>)
{
   113e4:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   113e6:	f000 0701 	and.w	r7, r0, #1
   113ea:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   113ee:	07da      	lsls	r2, r3, #31
   113f0:	d51d      	bpl.n	1142e <wl_find+0x5a>
   113f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   113f6:	42bb      	cmp	r3, r7
   113f8:	d113      	bne.n	11422 <wl_find+0x4e>
   113fa:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   113fe:	2206      	movs	r2, #6
   11400:	4641      	mov	r1, r8
   11402:	3002      	adds	r0, #2
   11404:	f7f0 fbf1 	bl	1bea <memcmp>
   11408:	b910      	cbnz	r0, 11410 <wl_find+0x3c>
			return i;
   1140a:	b2e0      	uxtb	r0, r4
   1140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11410:	b13d      	cbz	r5, 11422 <wl_find+0x4e>
   11412:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11416:	07db      	lsls	r3, r3, #31
   11418:	d403      	bmi.n	11422 <wl_find+0x4e>
   1141a:	782b      	ldrb	r3, [r5, #0]
   1141c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1141e:	bf08      	it	eq
   11420:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11422:	3401      	adds	r4, #1
   11424:	2c08      	cmp	r4, #8
   11426:	d1e0      	bne.n	113ea <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11428:	20ff      	movs	r0, #255	; 0xff
   1142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1142e:	2d00      	cmp	r5, #0
   11430:	d1f3      	bne.n	1141a <wl_find+0x46>
   11432:	e7f6      	b.n	11422 <wl_find+0x4e>
   11434:	20001427 	.word	0x20001427

00011438 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   11438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1143c:	4d1a      	ldr	r5, [pc, #104]	; (114a8 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1143e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 114b4 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   11442:	1eae      	subs	r6, r5, #2
{
   11444:	2400      	movs	r4, #0
   11446:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   11448:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1144c:	07d9      	lsls	r1, r3, #31
   1144e:	d524      	bpl.n	1149a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11450:	f898 3000 	ldrb.w	r3, [r8]
   11454:	b15b      	cbz	r3, 1146e <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   11456:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1145a:	2a07      	cmp	r2, #7
   1145c:	d807      	bhi.n	1146e <filter_wl_update+0x36>
   1145e:	2328      	movs	r3, #40	; 0x28
   11460:	4353      	muls	r3, r2
   11462:	4a12      	ldr	r2, [pc, #72]	; (114ac <filter_wl_update+0x74>)
   11464:	5cd3      	ldrb	r3, [r2, r3]
   11466:	075a      	lsls	r2, r3, #29
   11468:	d501      	bpl.n	1146e <filter_wl_update+0x36>
   1146a:	06db      	lsls	r3, r3, #27
   1146c:	d515      	bpl.n	1149a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   1146e:	4810      	ldr	r0, [pc, #64]	; (114b0 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11470:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11474:	2201      	movs	r2, #1
   11476:	fa02 f104 	lsl.w	r1, r2, r4
   1147a:	7802      	ldrb	r2, [r0, #0]
   1147c:	430a      	orrs	r2, r1
   1147e:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11480:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11484:	7842      	ldrb	r2, [r0, #1]
   11486:	40a3      	lsls	r3, r4
   11488:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1148a:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1148c:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1148e:	fb02 0004 	mla	r0, r2, r4, r0
   11492:	4629      	mov	r1, r5
   11494:	3002      	adds	r0, #2
   11496:	f7f0 fbbd 	bl	1c14 <memcpy>
   1149a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1149c:	2c08      	cmp	r4, #8
   1149e:	f105 0508 	add.w	r5, r5, #8
   114a2:	d1d1      	bne.n	11448 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   114a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114a8:	20001429 	.word	0x20001429
   114ac:	200012b4 	.word	0x200012b4
   114b0:	20001467 	.word	0x20001467
   114b4:	200013f4 	.word	0x200013f4

000114b8 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   114b8:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   114ba:	f7fe fead 	bl	10218 <ll_adv_is_enabled>
   114be:	b928      	cbnz	r0, 114cc <rl_access_check.constprop.1+0x14>
   114c0:	f7fe febe 	bl	10240 <ll_scan_is_enabled>
   114c4:	fab0 f080 	clz	r0, r0
   114c8:	0940      	lsrs	r0, r0, #5
   114ca:	bd08      	pop	{r3, pc}
   114cc:	2000      	movs	r0, #0
}
   114ce:	bd08      	pop	{r3, pc}

000114d0 <filter_rl_update>:
{
   114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   114d2:	4e10      	ldr	r6, [pc, #64]	; (11514 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   114d4:	4d10      	ldr	r5, [pc, #64]	; (11518 <filter_rl_update+0x48>)
{
   114d6:	2400      	movs	r4, #0
		if (rl[i].taken) {
   114d8:	2728      	movs	r7, #40	; 0x28
   114da:	fb07 f104 	mul.w	r1, r7, r4
   114de:	5c73      	ldrb	r3, [r6, r1]
   114e0:	07da      	lsls	r2, r3, #31
   114e2:	d513      	bpl.n	1150c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   114e4:	2201      	movs	r2, #1
   114e6:	fa02 f004 	lsl.w	r0, r2, r4
   114ea:	782a      	ldrb	r2, [r5, #0]
   114ec:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   114ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   114f2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   114f4:	786a      	ldrb	r2, [r5, #1]
   114f6:	40a3      	lsls	r3, r4
   114f8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   114fa:	2206      	movs	r2, #6
   114fc:	3101      	adds	r1, #1
   114fe:	fb02 5004 	mla	r0, r2, r4, r5
   11502:	4431      	add	r1, r6
   11504:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11506:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11508:	f7f0 fb84 	bl	1c14 <memcpy>
   1150c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1150e:	2c08      	cmp	r4, #8
   11510:	d1e3      	bne.n	114da <filter_rl_update+0xa>
}
   11512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11514:	200012b4 	.word	0x200012b4
   11518:	200013f5 	.word	0x200013f5

0001151c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1151c:	2807      	cmp	r0, #7
   1151e:	d80c      	bhi.n	1153a <ctrl_lrpa_get+0x1e>
   11520:	2328      	movs	r3, #40	; 0x28
   11522:	4358      	muls	r0, r3
   11524:	4a06      	ldr	r2, [pc, #24]	; (11540 <ctrl_lrpa_get+0x24>)
   11526:	5c13      	ldrb	r3, [r2, r0]
   11528:	1811      	adds	r1, r2, r0
   1152a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1152e:	b128      	cbz	r0, 1153c <ctrl_lrpa_get+0x20>
   11530:	f3c3 0040 	ubfx	r0, r3, #1, #1
   11534:	b110      	cbz	r0, 1153c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   11536:	6a48      	ldr	r0, [r1, #36]	; 0x24
   11538:	4770      	bx	lr
		return NULL;
   1153a:	2000      	movs	r0, #0
}
   1153c:	4770      	bx	lr
   1153e:	bf00      	nop
   11540:	200012b4 	.word	0x200012b4

00011544 <ctrl_irks_get>:
	*count = peer_irk_count;
   11544:	4b02      	ldr	r3, [pc, #8]	; (11550 <ctrl_irks_get+0xc>)
   11546:	781b      	ldrb	r3, [r3, #0]
   11548:	7003      	strb	r3, [r0, #0]
}
   1154a:	4802      	ldr	r0, [pc, #8]	; (11554 <ctrl_irks_get+0x10>)
   1154c:	4770      	bx	lr
   1154e:	bf00      	nop
   11550:	2000122a 	.word	0x2000122a
   11554:	20001233 	.word	0x20001233

00011558 <ctrl_rl_idx>:
{
   11558:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1155a:	b320      	cbz	r0, 115a6 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1155c:	2907      	cmp	r1, #7
   1155e:	d90e      	bls.n	1157e <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   11560:	4b1d      	ldr	r3, [pc, #116]	; (115d8 <ctrl_rl_idx+0x80>)
   11562:	9301      	str	r3, [sp, #4]
   11564:	9300      	str	r3, [sp, #0]
   11566:	4a1d      	ldr	r2, [pc, #116]	; (115dc <ctrl_rl_idx+0x84>)
   11568:	4b1d      	ldr	r3, [pc, #116]	; (115e0 <ctrl_rl_idx+0x88>)
   1156a:	491e      	ldr	r1, [pc, #120]	; (115e4 <ctrl_rl_idx+0x8c>)
   1156c:	481e      	ldr	r0, [pc, #120]	; (115e8 <ctrl_rl_idx+0x90>)
   1156e:	f7ef fd0d 	bl	f8c <printk>
   11572:	4040      	eors	r0, r0
   11574:	f380 8811 	msr	BASEPRI, r0
   11578:	f04f 0004 	mov.w	r0, #4
   1157c:	df02      	svc	2
   1157e:	4b1b      	ldr	r3, [pc, #108]	; (115ec <ctrl_rl_idx+0x94>)
   11580:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   11584:	07d2      	lsls	r2, r2, #31
   11586:	d407      	bmi.n	11598 <ctrl_rl_idx+0x40>
   11588:	4b13      	ldr	r3, [pc, #76]	; (115d8 <ctrl_rl_idx+0x80>)
   1158a:	9301      	str	r3, [sp, #4]
   1158c:	9300      	str	r3, [sp, #0]
   1158e:	4a13      	ldr	r2, [pc, #76]	; (115dc <ctrl_rl_idx+0x84>)
   11590:	4b13      	ldr	r3, [pc, #76]	; (115e0 <ctrl_rl_idx+0x88>)
   11592:	4914      	ldr	r1, [pc, #80]	; (115e4 <ctrl_rl_idx+0x8c>)
   11594:	4816      	ldr	r0, [pc, #88]	; (115f0 <ctrl_rl_idx+0x98>)
   11596:	e7ea      	b.n	1156e <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   11598:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1159c:	7849      	ldrb	r1, [r1, #1]
}
   1159e:	4608      	mov	r0, r1
   115a0:	b003      	add	sp, #12
   115a2:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   115a6:	2907      	cmp	r1, #7
   115a8:	d907      	bls.n	115ba <ctrl_rl_idx+0x62>
   115aa:	4b0b      	ldr	r3, [pc, #44]	; (115d8 <ctrl_rl_idx+0x80>)
   115ac:	9301      	str	r3, [sp, #4]
   115ae:	9300      	str	r3, [sp, #0]
   115b0:	4a0a      	ldr	r2, [pc, #40]	; (115dc <ctrl_rl_idx+0x84>)
   115b2:	4b0b      	ldr	r3, [pc, #44]	; (115e0 <ctrl_rl_idx+0x88>)
   115b4:	490b      	ldr	r1, [pc, #44]	; (115e4 <ctrl_rl_idx+0x8c>)
   115b6:	480f      	ldr	r0, [pc, #60]	; (115f4 <ctrl_rl_idx+0x9c>)
   115b8:	e7d9      	b.n	1156e <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   115ba:	2328      	movs	r3, #40	; 0x28
   115bc:	434b      	muls	r3, r1
   115be:	4a0e      	ldr	r2, [pc, #56]	; (115f8 <ctrl_rl_idx+0xa0>)
   115c0:	5cd3      	ldrb	r3, [r2, r3]
   115c2:	07db      	lsls	r3, r3, #31
   115c4:	d4eb      	bmi.n	1159e <ctrl_rl_idx+0x46>
   115c6:	4b04      	ldr	r3, [pc, #16]	; (115d8 <ctrl_rl_idx+0x80>)
   115c8:	9301      	str	r3, [sp, #4]
   115ca:	9300      	str	r3, [sp, #0]
   115cc:	4a03      	ldr	r2, [pc, #12]	; (115dc <ctrl_rl_idx+0x84>)
   115ce:	4b04      	ldr	r3, [pc, #16]	; (115e0 <ctrl_rl_idx+0x88>)
   115d0:	4904      	ldr	r1, [pc, #16]	; (115e4 <ctrl_rl_idx+0x8c>)
   115d2:	480a      	ldr	r0, [pc, #40]	; (115fc <ctrl_rl_idx+0xa4>)
   115d4:	e7cb      	b.n	1156e <ctrl_rl_idx+0x16>
   115d6:	bf00      	nop
   115d8:	00014b99 	.word	0x00014b99
   115dc:	00015f55 	.word	0x00015f55
   115e0:	000183ae 	.word	0x000183ae
   115e4:	00015fa4 	.word	0x00015fa4
   115e8:	00018448 	.word	0x00018448
   115ec:	20001427 	.word	0x20001427
   115f0:	00018515 	.word	0x00018515
   115f4:	0001854c 	.word	0x0001854c
   115f8:	200012b4 	.word	0x200012b4
   115fc:	00018619 	.word	0x00018619

00011600 <ctrl_rl_irk_idx>:
{
   11600:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11602:	4b18      	ldr	r3, [pc, #96]	; (11664 <ctrl_rl_irk_idx+0x64>)
   11604:	781b      	ldrb	r3, [r3, #0]
   11606:	4283      	cmp	r3, r0
   11608:	d80e      	bhi.n	11628 <ctrl_rl_irk_idx+0x28>
   1160a:	4b17      	ldr	r3, [pc, #92]	; (11668 <ctrl_rl_irk_idx+0x68>)
   1160c:	9301      	str	r3, [sp, #4]
   1160e:	9300      	str	r3, [sp, #0]
   11610:	4a16      	ldr	r2, [pc, #88]	; (1166c <ctrl_rl_irk_idx+0x6c>)
   11612:	4b17      	ldr	r3, [pc, #92]	; (11670 <ctrl_rl_irk_idx+0x70>)
   11614:	4917      	ldr	r1, [pc, #92]	; (11674 <ctrl_rl_irk_idx+0x74>)
   11616:	4818      	ldr	r0, [pc, #96]	; (11678 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11618:	f7ef fcb8 	bl	f8c <printk>
   1161c:	4040      	eors	r0, r0
   1161e:	f380 8811 	msr	BASEPRI, r0
   11622:	f04f 0004 	mov.w	r0, #4
   11626:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11628:	4b14      	ldr	r3, [pc, #80]	; (1167c <ctrl_rl_irk_idx+0x7c>)
   1162a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1162c:	2807      	cmp	r0, #7
   1162e:	d907      	bls.n	11640 <ctrl_rl_irk_idx+0x40>
   11630:	4b0d      	ldr	r3, [pc, #52]	; (11668 <ctrl_rl_irk_idx+0x68>)
   11632:	9301      	str	r3, [sp, #4]
   11634:	9300      	str	r3, [sp, #0]
   11636:	4a0d      	ldr	r2, [pc, #52]	; (1166c <ctrl_rl_irk_idx+0x6c>)
   11638:	4b0d      	ldr	r3, [pc, #52]	; (11670 <ctrl_rl_irk_idx+0x70>)
   1163a:	490e      	ldr	r1, [pc, #56]	; (11674 <ctrl_rl_irk_idx+0x74>)
   1163c:	4810      	ldr	r0, [pc, #64]	; (11680 <ctrl_rl_irk_idx+0x80>)
   1163e:	e7eb      	b.n	11618 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   11640:	2328      	movs	r3, #40	; 0x28
   11642:	4343      	muls	r3, r0
   11644:	4a0f      	ldr	r2, [pc, #60]	; (11684 <ctrl_rl_irk_idx+0x84>)
   11646:	5cd3      	ldrb	r3, [r2, r3]
   11648:	07db      	lsls	r3, r3, #31
   1164a:	d407      	bmi.n	1165c <ctrl_rl_irk_idx+0x5c>
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <ctrl_rl_irk_idx+0x68>)
   1164e:	9301      	str	r3, [sp, #4]
   11650:	9300      	str	r3, [sp, #0]
   11652:	4a06      	ldr	r2, [pc, #24]	; (1166c <ctrl_rl_irk_idx+0x6c>)
   11654:	4b06      	ldr	r3, [pc, #24]	; (11670 <ctrl_rl_irk_idx+0x70>)
   11656:	4907      	ldr	r1, [pc, #28]	; (11674 <ctrl_rl_irk_idx+0x74>)
   11658:	480b      	ldr	r0, [pc, #44]	; (11688 <ctrl_rl_irk_idx+0x88>)
   1165a:	e7dd      	b.n	11618 <ctrl_rl_irk_idx+0x18>
}
   1165c:	b003      	add	sp, #12
   1165e:	f85d fb04 	ldr.w	pc, [sp], #4
   11662:	bf00      	nop
   11664:	2000122a 	.word	0x2000122a
   11668:	00014b99 	.word	0x00014b99
   1166c:	00015f55 	.word	0x00015f55
   11670:	000183ba 	.word	0x000183ba
   11674:	00015fa4 	.word	0x00015fa4
   11678:	00018646 	.word	0x00018646
   1167c:	2000122b 	.word	0x2000122b
   11680:	00018684 	.word	0x00018684
   11684:	200012b4 	.word	0x200012b4
   11688:	00018619 	.word	0x00018619

0001168c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1168c:	2807      	cmp	r0, #7
{
   1168e:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11690:	d819      	bhi.n	116c6 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   11692:	2328      	movs	r3, #40	; 0x28
   11694:	4358      	muls	r0, r3
   11696:	4b0d      	ldr	r3, [pc, #52]	; (116cc <ctrl_irk_whitelisted+0x40>)
   11698:	5c18      	ldrb	r0, [r3, r0]
   1169a:	07c3      	lsls	r3, r0, #31
   1169c:	d40e      	bmi.n	116bc <ctrl_irk_whitelisted+0x30>
   1169e:	4b0c      	ldr	r3, [pc, #48]	; (116d0 <ctrl_irk_whitelisted+0x44>)
   116a0:	9301      	str	r3, [sp, #4]
   116a2:	9300      	str	r3, [sp, #0]
   116a4:	4a0b      	ldr	r2, [pc, #44]	; (116d4 <ctrl_irk_whitelisted+0x48>)
   116a6:	4b0c      	ldr	r3, [pc, #48]	; (116d8 <ctrl_irk_whitelisted+0x4c>)
   116a8:	490c      	ldr	r1, [pc, #48]	; (116dc <ctrl_irk_whitelisted+0x50>)
   116aa:	480d      	ldr	r0, [pc, #52]	; (116e0 <ctrl_irk_whitelisted+0x54>)
   116ac:	f7ef fc6e 	bl	f8c <printk>
   116b0:	4040      	eors	r0, r0
   116b2:	f380 8811 	msr	BASEPRI, r0
   116b6:	f04f 0004 	mov.w	r0, #4
   116ba:	df02      	svc	2
	return rl[rl_idx].wl;
   116bc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   116c0:	b003      	add	sp, #12
   116c2:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   116c6:	2000      	movs	r0, #0
   116c8:	e7fa      	b.n	116c0 <ctrl_irk_whitelisted+0x34>
   116ca:	bf00      	nop
   116cc:	200012b4 	.word	0x200012b4
   116d0:	00014b99 	.word	0x00014b99
   116d4:	00015f55 	.word	0x00015f55
   116d8:	000183ca 	.word	0x000183ca
   116dc:	00015fa4 	.word	0x00015fa4
   116e0:	00018416 	.word	0x00018416

000116e4 <ctrl_filter_get>:
}
   116e4:	4b03      	ldr	r3, [pc, #12]	; (116f4 <ctrl_filter_get+0x10>)
   116e6:	4a04      	ldr	r2, [pc, #16]	; (116f8 <ctrl_filter_get+0x14>)
   116e8:	2800      	cmp	r0, #0
   116ea:	bf14      	ite	ne
   116ec:	4610      	movne	r0, r2
   116ee:	4618      	moveq	r0, r3
   116f0:	4770      	bx	lr
   116f2:	bf00      	nop
   116f4:	200013f5 	.word	0x200013f5
   116f8:	20001467 	.word	0x20001467

000116fc <ll_wl_size_get>:
   116fc:	2008      	movs	r0, #8
   116fe:	4770      	bx	lr

00011700 <ll_wl_clear>:
{
   11700:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11702:	f7fe fd91 	bl	10228 <radio_adv_filter_pol_get>
   11706:	4604      	mov	r4, r0
   11708:	b110      	cbz	r0, 11710 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1170a:	240c      	movs	r4, #12
}
   1170c:	4620      	mov	r0, r4
   1170e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11710:	f7fe fdac 	bl	1026c <radio_scan_filter_pol_get>
   11714:	07c3      	lsls	r3, r0, #31
   11716:	d4f8      	bmi.n	1170a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11718:	4a07      	ldr	r2, [pc, #28]	; (11738 <ll_wl_clear+0x38>)
   1171a:	4623      	mov	r3, r4
   1171c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11720:	f36f 0100 	bfc	r1, #0, #1
   11724:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11728:	3301      	adds	r3, #1
   1172a:	2b08      	cmp	r3, #8
   1172c:	d1f6      	bne.n	1171c <ll_wl_clear+0x1c>
	wl_anon = 0;
   1172e:	4b03      	ldr	r3, [pc, #12]	; (1173c <ll_wl_clear+0x3c>)
   11730:	2200      	movs	r2, #0
   11732:	701a      	strb	r2, [r3, #0]
	return 0;
   11734:	e7ea      	b.n	1170c <ll_wl_clear+0xc>
   11736:	bf00      	nop
   11738:	20001427 	.word	0x20001427
   1173c:	20001920 	.word	0x20001920

00011740 <ll_wl_remove>:
{
   11740:	b538      	push	{r3, r4, r5, lr}
   11742:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11744:	f7fe fd70 	bl	10228 <radio_adv_filter_pol_get>
   11748:	4604      	mov	r4, r0
   1174a:	b110      	cbz	r0, 11752 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1174c:	240c      	movs	r4, #12
}
   1174e:	4620      	mov	r0, r4
   11750:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11752:	f7fe fd8b 	bl	1026c <radio_scan_filter_pol_get>
   11756:	07c3      	lsls	r3, r0, #31
   11758:	d4f8      	bmi.n	1174c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1175a:	7828      	ldrb	r0, [r5, #0]
   1175c:	28ff      	cmp	r0, #255	; 0xff
   1175e:	d102      	bne.n	11766 <ll_wl_remove+0x26>
		wl_anon = 0;
   11760:	4b0f      	ldr	r3, [pc, #60]	; (117a0 <ll_wl_remove+0x60>)
   11762:	701c      	strb	r4, [r3, #0]
		return 0;
   11764:	e7f3      	b.n	1174e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   11766:	4622      	mov	r2, r4
   11768:	1c69      	adds	r1, r5, #1
   1176a:	f7ff fe33 	bl	113d4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1176e:	2807      	cmp	r0, #7
   11770:	d813      	bhi.n	1179a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11772:	4b0c      	ldr	r3, [pc, #48]	; (117a4 <ll_wl_remove+0x64>)
   11774:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11778:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1177a:	2d07      	cmp	r5, #7
   1177c:	d806      	bhi.n	1178c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1177e:	2228      	movs	r2, #40	; 0x28
   11780:	4909      	ldr	r1, [pc, #36]	; (117a8 <ll_wl_remove+0x68>)
   11782:	436a      	muls	r2, r5
   11784:	5c8d      	ldrb	r5, [r1, r2]
   11786:	f364 1545 	bfi	r5, r4, #5, #1
   1178a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1178c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11790:	f36f 0200 	bfc	r2, #0, #1
   11794:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11798:	e7d9      	b.n	1174e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1179a:	2402      	movs	r4, #2
   1179c:	e7d7      	b.n	1174e <ll_wl_remove+0xe>
   1179e:	bf00      	nop
   117a0:	20001920 	.word	0x20001920
   117a4:	20001427 	.word	0x20001427
   117a8:	200012b4 	.word	0x200012b4

000117ac <ll_filters_scan_update>:
{
   117ac:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   117ae:	4b0d      	ldr	r3, [pc, #52]	; (117e4 <ll_filters_scan_update+0x38>)
   117b0:	2200      	movs	r2, #0
   117b2:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   117b4:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   117b6:	07c3      	lsls	r3, r0, #31
   117b8:	d504      	bpl.n	117c4 <ll_filters_scan_update+0x18>
   117ba:	f7fe fd35 	bl	10228 <radio_adv_filter_pol_get>
   117be:	b908      	cbnz	r0, 117c4 <ll_filters_scan_update+0x18>
		filter_wl_update();
   117c0:	f7ff fe3a 	bl	11438 <filter_wl_update>
	filter->enable_bitmask = 0;
   117c4:	4b08      	ldr	r3, [pc, #32]	; (117e8 <ll_filters_scan_update+0x3c>)
   117c6:	2200      	movs	r2, #0
   117c8:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   117ca:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   117cc:	4b07      	ldr	r3, [pc, #28]	; (117ec <ll_filters_scan_update+0x40>)
   117ce:	781b      	ldrb	r3, [r3, #0]
   117d0:	b133      	cbz	r3, 117e0 <ll_filters_scan_update+0x34>
   117d2:	f7fe fd21 	bl	10218 <ll_adv_is_enabled>
   117d6:	b918      	cbnz	r0, 117e0 <ll_filters_scan_update+0x34>
}
   117d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   117dc:	f7ff be78 	b.w	114d0 <filter_rl_update>
   117e0:	bd08      	pop	{r3, pc}
   117e2:	bf00      	nop
   117e4:	20001467 	.word	0x20001467
   117e8:	200013f5 	.word	0x200013f5
   117ec:	200013f4 	.word	0x200013f4

000117f0 <ll_rl_find>:
{
   117f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   117f4:	468a      	mov	sl, r1
	if (free) {
   117f6:	4614      	mov	r4, r2
   117f8:	b10a      	cbz	r2, 117fe <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   117fa:	23ff      	movs	r3, #255	; 0xff
   117fc:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   117fe:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11854 <ll_rl_find+0x64>
{
   11802:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11804:	f000 0901 	and.w	r9, r0, #1
   11808:	2628      	movs	r6, #40	; 0x28
   1180a:	436e      	muls	r6, r5
   1180c:	b2ef      	uxtb	r7, r5
   1180e:	f818 3006 	ldrb.w	r3, [r8, r6]
   11812:	07da      	lsls	r2, r3, #31
   11814:	d51a      	bpl.n	1184c <ll_rl_find+0x5c>
   11816:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1181a:	454b      	cmp	r3, r9
   1181c:	d10f      	bne.n	1183e <ll_rl_find+0x4e>
   1181e:	1c70      	adds	r0, r6, #1
   11820:	2206      	movs	r2, #6
   11822:	4651      	mov	r1, sl
   11824:	4440      	add	r0, r8
   11826:	f7f0 f9e0 	bl	1bea <memcmp>
   1182a:	b160      	cbz	r0, 11846 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1182c:	b13c      	cbz	r4, 1183e <ll_rl_find+0x4e>
   1182e:	f818 3006 	ldrb.w	r3, [r8, r6]
   11832:	07db      	lsls	r3, r3, #31
   11834:	d403      	bmi.n	1183e <ll_rl_find+0x4e>
   11836:	7823      	ldrb	r3, [r4, #0]
   11838:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1183a:	bf08      	it	eq
   1183c:	7027      	strbeq	r7, [r4, #0]
   1183e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11840:	2d08      	cmp	r5, #8
   11842:	d1e1      	bne.n	11808 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   11844:	27ff      	movs	r7, #255	; 0xff
}
   11846:	4638      	mov	r0, r7
   11848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1184c:	2c00      	cmp	r4, #0
   1184e:	d1f2      	bne.n	11836 <ll_rl_find+0x46>
   11850:	e7f5      	b.n	1183e <ll_rl_find+0x4e>
   11852:	bf00      	nop
   11854:	200012b4 	.word	0x200012b4

00011858 <ll_wl_add>:
{
   11858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1185c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1185e:	f7fe fce3 	bl	10228 <radio_adv_filter_pol_get>
   11862:	4605      	mov	r5, r0
   11864:	b120      	cbz	r0, 11870 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11866:	250c      	movs	r5, #12
}
   11868:	4628      	mov	r0, r5
   1186a:	b002      	add	sp, #8
   1186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11870:	f7fe fcfc 	bl	1026c <radio_scan_filter_pol_get>
   11874:	07c3      	lsls	r3, r0, #31
   11876:	d4f6      	bmi.n	11866 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11878:	7838      	ldrb	r0, [r7, #0]
   1187a:	28ff      	cmp	r0, #255	; 0xff
   1187c:	d103      	bne.n	11886 <ll_wl_add+0x2e>
		wl_anon = 1;
   1187e:	4b1f      	ldr	r3, [pc, #124]	; (118fc <ll_wl_add+0xa4>)
   11880:	2201      	movs	r2, #1
   11882:	701a      	strb	r2, [r3, #0]
		return 0;
   11884:	e7f0      	b.n	11868 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11886:	f107 0801 	add.w	r8, r7, #1
   1188a:	f10d 0207 	add.w	r2, sp, #7
   1188e:	4641      	mov	r1, r8
   11890:	f7ff fda0 	bl	113d4 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11894:	2807      	cmp	r0, #7
   11896:	d92d      	bls.n	118f4 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11898:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1189c:	2e07      	cmp	r6, #7
   1189e:	d82b      	bhi.n	118f8 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   118a0:	4c17      	ldr	r4, [pc, #92]	; (11900 <ll_wl_add+0xa8>)
   118a2:	783a      	ldrb	r2, [r7, #0]
   118a4:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   118a8:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   118ac:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   118b0:	4641      	mov	r1, r8
   118b2:	2206      	movs	r2, #6
   118b4:	3002      	adds	r0, #2
   118b6:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   118ba:	f7f0 f9ab 	bl	1c14 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   118be:	462a      	mov	r2, r5
   118c0:	4641      	mov	r1, r8
   118c2:	7838      	ldrb	r0, [r7, #0]
   118c4:	f7ff ff94 	bl	117f0 <ll_rl_find>
   118c8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   118ca:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   118cc:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   118ce:	d80e      	bhi.n	118ee <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   118d0:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   118d2:	2328      	movs	r3, #40	; 0x28
   118d4:	4a0b      	ldr	r2, [pc, #44]	; (11904 <ll_wl_add+0xac>)
   118d6:	4358      	muls	r0, r3
   118d8:	5c13      	ldrb	r3, [r2, r0]
   118da:	f043 0320 	orr.w	r3, r3, #32
   118de:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   118e0:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   118e4:	f043 0301 	orr.w	r3, r3, #1
   118e8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   118ec:	e7bc      	b.n	11868 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   118ee:	22ff      	movs	r2, #255	; 0xff
   118f0:	705a      	strb	r2, [r3, #1]
   118f2:	e7f5      	b.n	118e0 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   118f4:	2512      	movs	r5, #18
   118f6:	e7b7      	b.n	11868 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   118f8:	2507      	movs	r5, #7
	return wl_add(addr);
   118fa:	e7b5      	b.n	11868 <ll_wl_add+0x10>
   118fc:	20001920 	.word	0x20001920
   11900:	20001427 	.word	0x20001427
   11904:	200012b4 	.word	0x200012b4

00011908 <ctrl_rl_idx_allowed>:
{
   11908:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1190a:	4b12      	ldr	r3, [pc, #72]	; (11954 <ctrl_rl_idx_allowed+0x4c>)
   1190c:	781b      	ldrb	r3, [r3, #0]
   1190e:	b1f3      	cbz	r3, 1194e <ctrl_rl_idx_allowed+0x46>
   11910:	2907      	cmp	r1, #7
   11912:	d81c      	bhi.n	1194e <ctrl_rl_idx_allowed+0x46>
   11914:	b9d8      	cbnz	r0, 1194e <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   11916:	2328      	movs	r3, #40	; 0x28
   11918:	4359      	muls	r1, r3
   1191a:	4b0f      	ldr	r3, [pc, #60]	; (11958 <ctrl_rl_idx_allowed+0x50>)
   1191c:	5c58      	ldrb	r0, [r3, r1]
   1191e:	07c2      	lsls	r2, r0, #31
   11920:	d40e      	bmi.n	11940 <ctrl_rl_idx_allowed+0x38>
   11922:	4b0e      	ldr	r3, [pc, #56]	; (1195c <ctrl_rl_idx_allowed+0x54>)
   11924:	9301      	str	r3, [sp, #4]
   11926:	9300      	str	r3, [sp, #0]
   11928:	4a0d      	ldr	r2, [pc, #52]	; (11960 <ctrl_rl_idx_allowed+0x58>)
   1192a:	4b0e      	ldr	r3, [pc, #56]	; (11964 <ctrl_rl_idx_allowed+0x5c>)
   1192c:	490e      	ldr	r1, [pc, #56]	; (11968 <ctrl_rl_idx_allowed+0x60>)
   1192e:	480f      	ldr	r0, [pc, #60]	; (1196c <ctrl_rl_idx_allowed+0x64>)
   11930:	f7ef fb2c 	bl	f8c <printk>
   11934:	4040      	eors	r0, r0
   11936:	f380 8811 	msr	BASEPRI, r0
   1193a:	f04f 0004 	mov.w	r0, #4
   1193e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11940:	0743      	lsls	r3, r0, #29
   11942:	d504      	bpl.n	1194e <ctrl_rl_idx_allowed+0x46>
   11944:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   11948:	b003      	add	sp, #12
   1194a:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   1194e:	2001      	movs	r0, #1
   11950:	e7fa      	b.n	11948 <ctrl_rl_idx_allowed+0x40>
   11952:	bf00      	nop
   11954:	200013f4 	.word	0x200013f4
   11958:	200012b4 	.word	0x200012b4
   1195c:	00014b99 	.word	0x00014b99
   11960:	00015f55 	.word	0x00015f55
   11964:	000183df 	.word	0x000183df
   11968:	00015fa4 	.word	0x00015fa4
   1196c:	00018416 	.word	0x00018416

00011970 <ll_rl_id_addr_get>:
{
   11970:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11972:	2b07      	cmp	r3, #7
{
   11974:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11976:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11978:	d90e      	bls.n	11998 <ll_rl_id_addr_get+0x28>
   1197a:	4b15      	ldr	r3, [pc, #84]	; (119d0 <ll_rl_id_addr_get+0x60>)
   1197c:	9301      	str	r3, [sp, #4]
   1197e:	9300      	str	r3, [sp, #0]
   11980:	4a14      	ldr	r2, [pc, #80]	; (119d4 <ll_rl_id_addr_get+0x64>)
   11982:	4b15      	ldr	r3, [pc, #84]	; (119d8 <ll_rl_id_addr_get+0x68>)
   11984:	4915      	ldr	r1, [pc, #84]	; (119dc <ll_rl_id_addr_get+0x6c>)
   11986:	4816      	ldr	r0, [pc, #88]	; (119e0 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   11988:	f7ef fb00 	bl	f8c <printk>
   1198c:	4040      	eors	r0, r0
   1198e:	f380 8811 	msr	BASEPRI, r0
   11992:	f04f 0004 	mov.w	r0, #4
   11996:	df02      	svc	2
   11998:	2528      	movs	r5, #40	; 0x28
   1199a:	4c12      	ldr	r4, [pc, #72]	; (119e4 <ll_rl_id_addr_get+0x74>)
   1199c:	fb05 f203 	mul.w	r2, r5, r3
   119a0:	5ca2      	ldrb	r2, [r4, r2]
   119a2:	f012 0f01 	tst.w	r2, #1
   119a6:	d107      	bne.n	119b8 <ll_rl_id_addr_get+0x48>
   119a8:	4b09      	ldr	r3, [pc, #36]	; (119d0 <ll_rl_id_addr_get+0x60>)
   119aa:	9301      	str	r3, [sp, #4]
   119ac:	9300      	str	r3, [sp, #0]
   119ae:	4a09      	ldr	r2, [pc, #36]	; (119d4 <ll_rl_id_addr_get+0x64>)
   119b0:	4b09      	ldr	r3, [pc, #36]	; (119d8 <ll_rl_id_addr_get+0x68>)
   119b2:	490a      	ldr	r1, [pc, #40]	; (119dc <ll_rl_id_addr_get+0x6c>)
   119b4:	480c      	ldr	r0, [pc, #48]	; (119e8 <ll_rl_id_addr_get+0x78>)
   119b6:	e7e7      	b.n	11988 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   119b8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   119bc:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   119be:	fb05 4103 	mla	r1, r5, r3, r4
   119c2:	2206      	movs	r2, #6
   119c4:	3101      	adds	r1, #1
}
   119c6:	b003      	add	sp, #12
   119c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   119cc:	f7f0 b922 	b.w	1c14 <memcpy>
   119d0:	00014b99 	.word	0x00014b99
   119d4:	00015f55 	.word	0x00015f55
   119d8:	000183f3 	.word	0x000183f3
   119dc:	00015fa4 	.word	0x00015fa4
   119e0:	000186ab 	.word	0x000186ab
   119e4:	200012b4 	.word	0x200012b4
   119e8:	00018416 	.word	0x00018416

000119ec <ctrl_rl_addr_allowed>:
{
   119ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   119f0:	4b1a      	ldr	r3, [pc, #104]	; (11a5c <ctrl_rl_addr_allowed+0x70>)
   119f2:	781b      	ldrb	r3, [r3, #0]
   119f4:	b37b      	cbz	r3, 11a56 <ctrl_rl_addr_allowed+0x6a>
   119f6:	7813      	ldrb	r3, [r2, #0]
   119f8:	2bff      	cmp	r3, #255	; 0xff
   119fa:	d12c      	bne.n	11a56 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   119fc:	4e18      	ldr	r6, [pc, #96]	; (11a60 <ctrl_rl_addr_allowed+0x74>)
   119fe:	2400      	movs	r4, #0
   11a00:	f04f 0828 	mov.w	r8, #40	; 0x28
   11a04:	46b6      	mov	lr, r6
   11a06:	fb08 f304 	mul.w	r3, r8, r4
   11a0a:	fa5f fc84 	uxtb.w	ip, r4
   11a0e:	5cf7      	ldrb	r7, [r6, r3]
   11a10:	f017 0f01 	tst.w	r7, #1
   11a14:	eb06 0503 	add.w	r5, r6, r3
   11a18:	d01a      	beq.n	11a50 <ctrl_rl_addr_allowed+0x64>
   11a1a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11a1e:	4287      	cmp	r7, r0
   11a20:	d116      	bne.n	11a50 <ctrl_rl_addr_allowed+0x64>
   11a22:	3306      	adds	r3, #6
   11a24:	1e4f      	subs	r7, r1, #1
   11a26:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11a28:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11a2c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11a30:	45ca      	cmp	sl, r9
   11a32:	d10d      	bne.n	11a50 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   11a34:	429d      	cmp	r5, r3
   11a36:	d1f7      	bne.n	11a28 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11a38:	2328      	movs	r3, #40	; 0x28
   11a3a:	435c      	muls	r4, r3
				*rl_idx = i;
   11a3c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11a40:	f81e 0004 	ldrb.w	r0, [lr, r4]
   11a44:	0743      	lsls	r3, r0, #29
   11a46:	d506      	bpl.n	11a56 <ctrl_rl_addr_allowed+0x6a>
   11a48:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a50:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11a52:	2c08      	cmp	r4, #8
   11a54:	d1d7      	bne.n	11a06 <ctrl_rl_addr_allowed+0x1a>
   11a56:	2001      	movs	r0, #1
}
   11a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11a5c:	200013f4 	.word	0x200013f4
   11a60:	200012b4 	.word	0x200012b4

00011a64 <ctrl_rl_addr_resolve>:
{
   11a64:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   11a66:	4c0d      	ldr	r4, [pc, #52]	; (11a9c <ctrl_rl_addr_resolve+0x38>)
   11a68:	7824      	ldrb	r4, [r4, #0]
   11a6a:	b1a4      	cbz	r4, 11a96 <ctrl_rl_addr_resolve+0x32>
   11a6c:	2a07      	cmp	r2, #7
   11a6e:	d812      	bhi.n	11a96 <ctrl_rl_addr_resolve+0x32>
   11a70:	2528      	movs	r5, #40	; 0x28
   11a72:	4c0b      	ldr	r4, [pc, #44]	; (11aa0 <ctrl_rl_addr_resolve+0x3c>)
   11a74:	fb05 f602 	mul.w	r6, r5, r2
   11a78:	5da6      	ldrb	r6, [r4, r6]
   11a7a:	0736      	lsls	r6, r6, #28
   11a7c:	d50b      	bpl.n	11a96 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11a7e:	b150      	cbz	r0, 11a96 <ctrl_rl_addr_resolve+0x32>
   11a80:	794b      	ldrb	r3, [r1, #5]
   11a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11a86:	2b40      	cmp	r3, #64	; 0x40
   11a88:	d105      	bne.n	11a96 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11a8a:	fb05 4202 	mla	r2, r5, r2, r4
   11a8e:	1dd0      	adds	r0, r2, #7
}
   11a90:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11a92:	f7f0 b9d4 	b.w	1e3e <bt_rpa_irk_matches>
}
   11a96:	2000      	movs	r0, #0
   11a98:	bc70      	pop	{r4, r5, r6}
   11a9a:	4770      	bx	lr
   11a9c:	200013f4 	.word	0x200013f4
   11aa0:	200012b4 	.word	0x200012b4

00011aa4 <ctrl_rl_enabled>:
	return rl_enable;
   11aa4:	4b02      	ldr	r3, [pc, #8]	; (11ab0 <ctrl_rl_enabled+0xc>)
   11aa6:	7818      	ldrb	r0, [r3, #0]
}
   11aa8:	3000      	adds	r0, #0
   11aaa:	bf18      	it	ne
   11aac:	2001      	movne	r0, #1
   11aae:	4770      	bx	lr
   11ab0:	200013f4 	.word	0x200013f4

00011ab4 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ab8:	b089      	sub	sp, #36	; 0x24
   11aba:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11abc:	f002 fb12 	bl	140e4 <_impl_k_uptime_get>
   11ac0:	4680      	mov	r8, r0
   11ac2:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11ac4:	2c00      	cmp	r4, #0
   11ac6:	d148      	bne.n	11b5a <ll_rl_rpa_update+0xa6>
   11ac8:	4b3b      	ldr	r3, [pc, #236]	; (11bb8 <ll_rl_rpa_update+0x104>)
   11aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ace:	1c5c      	adds	r4, r3, #1
   11ad0:	bf08      	it	eq
   11ad2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11ad6:	d040      	beq.n	11b5a <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11ad8:	1a82      	subs	r2, r0, r2
   11ada:	eb61 0303 	sbc.w	r3, r1, r3
   11ade:	4937      	ldr	r1, [pc, #220]	; (11bbc <ll_rl_rpa_update+0x108>)
   11ae0:	6808      	ldr	r0, [r1, #0]
   11ae2:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11ae4:	4282      	cmp	r2, r0
   11ae6:	418b      	sbcs	r3, r1
   11ae8:	bfac      	ite	ge
   11aea:	2601      	movge	r6, #1
   11aec:	2600      	movlt	r6, #0
   11aee:	4d34      	ldr	r5, [pc, #208]	; (11bc0 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11af0:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11af4:	2400      	movs	r4, #0
   11af6:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11af8:	2328      	movs	r3, #40	; 0x28
   11afa:	4363      	muls	r3, r4
   11afc:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11b00:	07d8      	lsls	r0, r3, #31
   11b02:	d54d      	bpl.n	11ba0 <ll_rl_rpa_update+0xec>
   11b04:	b90e      	cbnz	r6, 11b0a <ll_rl_rpa_update+0x56>
   11b06:	0799      	lsls	r1, r3, #30
   11b08:	d44a      	bmi.n	11ba0 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   11b0a:	2328      	movs	r3, #40	; 0x28
   11b0c:	4363      	muls	r3, r4
   11b0e:	5cfb      	ldrb	r3, [r7, r3]
   11b10:	075a      	lsls	r2, r3, #29
   11b12:	d524      	bpl.n	11b5e <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11b14:	7c2a      	ldrb	r2, [r5, #16]
   11b16:	4b2b      	ldr	r3, [pc, #172]	; (11bc4 <ll_rl_rpa_update+0x110>)
   11b18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   11b1c:	f103 0210 	add.w	r2, r3, #16
   11b20:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   11b24:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11b28:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   11b2c:	429a      	cmp	r2, r3
   11b2e:	d1f9      	bne.n	11b24 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11b30:	f105 0117 	add.w	r1, r5, #23
   11b34:	a804      	add	r0, sp, #16
   11b36:	f7f0 f995 	bl	1e64 <bt_rpa_create>
				LL_ASSERT(!err);
   11b3a:	b180      	cbz	r0, 11b5e <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   11b3c:	4b22      	ldr	r3, [pc, #136]	; (11bc8 <ll_rl_rpa_update+0x114>)
   11b3e:	9301      	str	r3, [sp, #4]
   11b40:	9300      	str	r3, [sp, #0]
   11b42:	4a22      	ldr	r2, [pc, #136]	; (11bcc <ll_rl_rpa_update+0x118>)
   11b44:	4b22      	ldr	r3, [pc, #136]	; (11bd0 <ll_rl_rpa_update+0x11c>)
   11b46:	4923      	ldr	r1, [pc, #140]	; (11bd4 <ll_rl_rpa_update+0x120>)
   11b48:	4823      	ldr	r0, [pc, #140]	; (11bd8 <ll_rl_rpa_update+0x124>)
   11b4a:	f7ef fa1f 	bl	f8c <printk>
   11b4e:	4040      	eors	r0, r0
   11b50:	f380 8811 	msr	BASEPRI, r0
   11b54:	f04f 0004 	mov.w	r0, #4
   11b58:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11b5a:	2601      	movs	r6, #1
   11b5c:	e7c7      	b.n	11aee <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11b5e:	2328      	movs	r3, #40	; 0x28
   11b60:	4363      	muls	r3, r4
   11b62:	5cfb      	ldrb	r3, [r7, r3]
   11b64:	071b      	lsls	r3, r3, #28
   11b66:	d515      	bpl.n	11b94 <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11b68:	f10d 0a10 	add.w	sl, sp, #16
   11b6c:	4651      	mov	r1, sl
   11b6e:	4628      	mov	r0, r5
   11b70:	f7f0 f978 	bl	1e64 <bt_rpa_create>
				LL_ASSERT(!err);
   11b74:	2800      	cmp	r0, #0
   11b76:	d1e1      	bne.n	11b3c <ll_rl_rpa_update+0x88>
   11b78:	4b18      	ldr	r3, [pc, #96]	; (11bdc <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11b7a:	f8c5 a01d 	str.w	sl, [r5, #29]
   11b7e:	2206      	movs	r2, #6
   11b80:	fb02 3304 	mla	r3, r2, r4, r3
   11b84:	4618      	mov	r0, r3
   11b86:	4651      	mov	r1, sl
   11b88:	9303      	str	r3, [sp, #12]
   11b8a:	f7f0 f843 	bl	1c14 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11b8e:	9b03      	ldr	r3, [sp, #12]
   11b90:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11b94:	2328      	movs	r3, #40	; 0x28
   11b96:	4363      	muls	r3, r4
   11b98:	5cfa      	ldrb	r2, [r7, r3]
   11b9a:	f042 0202 	orr.w	r2, r2, #2
   11b9e:	54fa      	strb	r2, [r7, r3]
   11ba0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11ba2:	2c08      	cmp	r4, #8
   11ba4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11ba8:	d1a6      	bne.n	11af8 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   11baa:	b116      	cbz	r6, 11bb2 <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   11bac:	4b02      	ldr	r3, [pc, #8]	; (11bb8 <ll_rl_rpa_update+0x104>)
   11bae:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   11bb2:	b009      	add	sp, #36	; 0x24
   11bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb8:	20001918 	.word	0x20001918
   11bbc:	2000194c 	.word	0x2000194c
   11bc0:	200012bb 	.word	0x200012bb
   11bc4:	20001233 	.word	0x20001233
   11bc8:	00014b99 	.word	0x00014b99
   11bcc:	00015f55 	.word	0x00015f55
   11bd0:	00018405 	.word	0x00018405
   11bd4:	00015fa4 	.word	0x00015fa4
   11bd8:	00018353 	.word	0x00018353
   11bdc:	200011fa 	.word	0x200011fa

00011be0 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11be0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   11be2:	2001      	movs	r0, #1
   11be4:	f7ff ff66 	bl	11ab4 <ll_rl_rpa_update>
   11be8:	4b03      	ldr	r3, [pc, #12]	; (11bf8 <rpa_timeout+0x18>)
   11bea:	4904      	ldr	r1, [pc, #16]	; (11bfc <rpa_timeout+0x1c>)
   11bec:	681a      	ldr	r2, [r3, #0]
   11bee:	4804      	ldr	r0, [pc, #16]	; (11c00 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11bf4:	f002 bd74 	b.w	146e0 <k_delayed_work_submit_to_queue>
   11bf8:	2000194c 	.word	0x2000194c
   11bfc:	20001924 	.word	0x20001924
   11c00:	20001990 	.word	0x20001990

00011c04 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   11c04:	4b07      	ldr	r3, [pc, #28]	; (11c24 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   11c06:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11c08:	b130      	cbz	r0, 11c18 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   11c0a:	b14b      	cbz	r3, 11c20 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11c0c:	4b06      	ldr	r3, [pc, #24]	; (11c28 <ll_adv_scan_state_cb+0x24>)
   11c0e:	4907      	ldr	r1, [pc, #28]	; (11c2c <ll_adv_scan_state_cb+0x28>)
   11c10:	681a      	ldr	r2, [r3, #0]
   11c12:	4807      	ldr	r0, [pc, #28]	; (11c30 <ll_adv_scan_state_cb+0x2c>)
   11c14:	f002 bd64 	b.w	146e0 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11c18:	b113      	cbz	r3, 11c20 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   11c1a:	4804      	ldr	r0, [pc, #16]	; (11c2c <ll_adv_scan_state_cb+0x28>)
   11c1c:	f002 bcfc 	b.w	14618 <k_delayed_work_cancel>
   11c20:	4770      	bx	lr
   11c22:	bf00      	nop
   11c24:	200013f4 	.word	0x200013f4
   11c28:	2000194c 	.word	0x2000194c
   11c2c:	20001924 	.word	0x20001924
   11c30:	20001990 	.word	0x20001990

00011c34 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   11c34:	2008      	movs	r0, #8
   11c36:	4770      	bx	lr

00011c38 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11c38:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   11c3a:	f7ff fc3d 	bl	114b8 <rl_access_check.constprop.1>
   11c3e:	b178      	cbz	r0, 11c60 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   11c40:	4908      	ldr	r1, [pc, #32]	; (11c64 <ll_rl_clear+0x2c>)
   11c42:	2300      	movs	r3, #0
   11c44:	2428      	movs	r4, #40	; 0x28
   11c46:	fb04 f203 	mul.w	r2, r4, r3
   11c4a:	3301      	adds	r3, #1
   11c4c:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11c4e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11c50:	f36f 0000 	bfc	r0, #0, #1
   11c54:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11c56:	d1f6      	bne.n	11c46 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11c58:	4b03      	ldr	r3, [pc, #12]	; (11c68 <ll_rl_clear+0x30>)
   11c5a:	2000      	movs	r0, #0
   11c5c:	7018      	strb	r0, [r3, #0]
   11c5e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11c60:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   11c62:	bd10      	pop	{r4, pc}
   11c64:	200012b4 	.word	0x200012b4
   11c68:	2000122a 	.word	0x2000122a

00011c6c <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c70:	b085      	sub	sp, #20
   11c72:	4607      	mov	r7, r0
   11c74:	4689      	mov	r9, r1
   11c76:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11c78:	f7ff fc1e 	bl	114b8 <rl_access_check.constprop.1>
   11c7c:	2800      	cmp	r0, #0
   11c7e:	f000 8086 	beq.w	11d8e <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   11c82:	f107 0801 	add.w	r8, r7, #1
   11c86:	f10d 020f 	add.w	r2, sp, #15
   11c8a:	4641      	mov	r1, r8
   11c8c:	7838      	ldrb	r0, [r7, #0]
   11c8e:	f7ff fdaf 	bl	117f0 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   11c92:	2807      	cmp	r0, #7
   11c94:	d97d      	bls.n	11d92 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   11c96:	f89d 500f 	ldrb.w	r5, [sp, #15]
   11c9a:	2d07      	cmp	r5, #7
   11c9c:	d87b      	bhi.n	11d96 <ll_rl_add+0x12a>
   11c9e:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11ca2:	4c3e      	ldr	r4, [pc, #248]	; (11d9c <ll_rl_add+0x130>)
   11ca4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11ca8:	2628      	movs	r6, #40	; 0x28
   11caa:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11cac:	f10b 0001 	add.w	r0, fp, #1
   11cb0:	2206      	movs	r2, #6
   11cb2:	4641      	mov	r1, r8
   11cb4:	4420      	add	r0, r4
   11cb6:	f7ef ffad 	bl	1c14 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   11cba:	7839      	ldrb	r1, [r7, #0]
   11cbc:	5da3      	ldrb	r3, [r4, r6]
   11cbe:	19a2      	adds	r2, r4, r6
   11cc0:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11cc4:	4648      	mov	r0, r9
   11cc6:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11cc8:	9201      	str	r2, [sp, #4]
   11cca:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11ccc:	f7f5 fa21 	bl	7112 <mem_nz>
   11cd0:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11cd2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11cd4:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11cd8:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11cda:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11cdc:	f7f5 fa19 	bl	7112 <mem_nz>
   11ce0:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   11ce2:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11ce4:	f000 0001 	and.w	r0, r0, #1
   11ce8:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   11cec:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11cf0:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   11cf2:	d138      	bne.n	11d66 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   11cf4:	b158      	cbz	r0, 11d0e <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   11cf6:	f10b 0007 	add.w	r0, fp, #7
   11cfa:	2210      	movs	r2, #16
   11cfc:	4651      	mov	r1, sl
   11cfe:	4420      	add	r0, r4
   11d00:	f7ef ff88 	bl	1c14 <memcpy>
		rl[i].local_rpa = NULL;
   11d04:	2328      	movs	r3, #40	; 0x28
   11d06:	fb03 4305 	mla	r3, r3, r5, r4
   11d0a:	2200      	movs	r2, #0
   11d0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   11d0e:	2628      	movs	r6, #40	; 0x28
   11d10:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11d12:	f10b 0018 	add.w	r0, fp, #24
   11d16:	2206      	movs	r2, #6
   11d18:	2100      	movs	r1, #0
   11d1a:	4420      	add	r0, r4
   11d1c:	f7ef ffa6 	bl	1c6c <memset>
	rl[i].rpas_ready = 0;
   11d20:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11d22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11d26:	f36f 1304 	bfc	r3, #4, #1
   11d2a:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11d2c:	2200      	movs	r2, #0
   11d2e:	4641      	mov	r1, r8
   11d30:	7838      	ldrb	r0, [r7, #0]
   11d32:	f7ff fb4f 	bl	113d4 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11d36:	2807      	cmp	r0, #7
   11d38:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   11d3a:	bf9d      	ittte	ls
   11d3c:	4a18      	ldrls	r2, [pc, #96]	; (11da0 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   11d3e:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11d42:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   11d46:	f36f 1345 	bfchi	r3, #5, #1
   11d4a:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   11d4c:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11d50:	bf98      	it	ls
   11d52:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   11d54:	435d      	muls	r5, r3

	return 0;
   11d56:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11d58:	5d63      	ldrb	r3, [r4, r5]
   11d5a:	f043 0301 	orr.w	r3, r3, #1
   11d5e:	5563      	strb	r3, [r4, r5]
}
   11d60:	b005      	add	sp, #20
   11d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   11d66:	4b0f      	ldr	r3, [pc, #60]	; (11da4 <ll_rl_add+0x138>)
   11d68:	7819      	ldrb	r1, [r3, #0]
   11d6a:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   11d6c:	4a0e      	ldr	r2, [pc, #56]	; (11da8 <ll_rl_add+0x13c>)
   11d6e:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11d70:	1c4a      	adds	r2, r1, #1
   11d72:	701a      	strb	r2, [r3, #0]
   11d74:	4b0d      	ldr	r3, [pc, #52]	; (11dac <ll_rl_add+0x140>)
   11d76:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   11d7a:	f109 0210 	add.w	r2, r9, #16
   11d7e:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11d80:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   11d84:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11d88:	454a      	cmp	r2, r9
   11d8a:	d1f9      	bne.n	11d80 <ll_rl_add+0x114>
   11d8c:	e7b2      	b.n	11cf4 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d8e:	200c      	movs	r0, #12
   11d90:	e7e6      	b.n	11d60 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11d92:	2012      	movs	r0, #18
   11d94:	e7e4      	b.n	11d60 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11d96:	2007      	movs	r0, #7
   11d98:	e7e2      	b.n	11d60 <ll_rl_add+0xf4>
   11d9a:	bf00      	nop
   11d9c:	200012b4 	.word	0x200012b4
   11da0:	20001427 	.word	0x20001427
   11da4:	2000122a 	.word	0x2000122a
   11da8:	2000122b 	.word	0x2000122b
   11dac:	20001233 	.word	0x20001233

00011db0 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   11db6:	f7ff fb7f 	bl	114b8 <rl_access_check.constprop.1>
   11dba:	2800      	cmp	r0, #0
   11dbc:	d053      	beq.n	11e66 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11dbe:	f109 0a01 	add.w	sl, r9, #1
   11dc2:	2200      	movs	r2, #0
   11dc4:	4651      	mov	r1, sl
   11dc6:	f899 0000 	ldrb.w	r0, [r9]
   11dca:	f7ff fd11 	bl	117f0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11dce:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11dd0:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   11dd2:	d84b      	bhi.n	11e6c <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   11dd4:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11dd8:	4c26      	ldr	r4, [pc, #152]	; (11e74 <ll_rl_remove+0xc4>)
   11dda:	fb0b f300 	mul.w	r3, fp, r0
   11dde:	18e2      	adds	r2, r4, r3
   11de0:	5ce3      	ldrb	r3, [r4, r3]
   11de2:	075b      	lsls	r3, r3, #29
   11de4:	d524      	bpl.n	11e30 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11de6:	4e24      	ldr	r6, [pc, #144]	; (11e78 <ll_rl_remove+0xc8>)
   11de8:	7835      	ldrb	r5, [r6, #0]
   11dea:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   11dec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11df0:	d01b      	beq.n	11e2a <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11df2:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   11df4:	42af      	cmp	r7, r5
   11df6:	d018      	beq.n	11e2a <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11df8:	4820      	ldr	r0, [pc, #128]	; (11e7c <ll_rl_remove+0xcc>)
   11dfa:	2210      	movs	r2, #16
   11dfc:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11e00:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   11e04:	f7ef ff06 	bl	1c14 <memcpy>
   11e08:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   11e0a:	fb0b f103 	mul.w	r1, fp, r3
   11e0e:	1862      	adds	r2, r4, r1
   11e10:	5c61      	ldrb	r1, [r4, r1]
   11e12:	f011 0f01 	tst.w	r1, #1
   11e16:	b2d8      	uxtb	r0, r3
   11e18:	d021      	beq.n	11e5e <ll_rl_remove+0xae>
   11e1a:	0749      	lsls	r1, r1, #29
   11e1c:	d51f      	bpl.n	11e5e <ll_rl_remove+0xae>
   11e1e:	7dd1      	ldrb	r1, [r2, #23]
   11e20:	42a9      	cmp	r1, r5
   11e22:	d11c      	bne.n	11e5e <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11e24:	4b16      	ldr	r3, [pc, #88]	; (11e80 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11e26:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11e28:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   11e2a:	7833      	ldrb	r3, [r6, #0]
   11e2c:	3b01      	subs	r3, #1
   11e2e:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11e30:	2200      	movs	r2, #0
   11e32:	4651      	mov	r1, sl
   11e34:	f899 0000 	ldrb.w	r0, [r9]
   11e38:	f7ff facc 	bl	113d4 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11e3c:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11e3e:	bf9f      	itttt	ls
   11e40:	4b10      	ldrls	r3, [pc, #64]	; (11e84 <ll_rl_remove+0xd4>)
   11e42:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   11e46:	23ff      	movls	r3, #255	; 0xff
   11e48:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11e4a:	2028      	movs	r0, #40	; 0x28
   11e4c:	fb00 f008 	mul.w	r0, r0, r8
   11e50:	5c23      	ldrb	r3, [r4, r0]
   11e52:	f36f 0300 	bfc	r3, #0, #1
   11e56:	5423      	strb	r3, [r4, r0]
		return 0;
   11e58:	2000      	movs	r0, #0
   11e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e5e:	3301      	adds	r3, #1
				for (k = 0;
   11e60:	2b08      	cmp	r3, #8
   11e62:	d1d2      	bne.n	11e0a <ll_rl_remove+0x5a>
   11e64:	e7e1      	b.n	11e2a <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e66:	200c      	movs	r0, #12
   11e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11e6c:	2002      	movs	r0, #2
}
   11e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e72:	bf00      	nop
   11e74:	200012b4 	.word	0x200012b4
   11e78:	2000122a 	.word	0x2000122a
   11e7c:	20001233 	.word	0x20001233
   11e80:	2000122b 	.word	0x2000122b
   11e84:	20001427 	.word	0x20001427

00011e88 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11e88:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11e8a:	795c      	ldrb	r4, [r3, #5]
   11e8c:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11e90:	2c40      	cmp	r4, #64	; 0x40
{
   11e92:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11e94:	d117      	bne.n	11ec6 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11e96:	b119      	cbz	r1, 11ea0 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11e98:	2200      	movs	r2, #0
   11e9a:	f7ff fca9 	bl	117f0 <ll_rl_find>
   11e9e:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11ea0:	2a07      	cmp	r2, #7
   11ea2:	d810      	bhi.n	11ec6 <ll_rl_crpa_set+0x3e>
   11ea4:	2128      	movs	r1, #40	; 0x28
   11ea6:	4c08      	ldr	r4, [pc, #32]	; (11ec8 <ll_rl_crpa_set+0x40>)
   11ea8:	fb01 f302 	mul.w	r3, r1, r2
   11eac:	5ce3      	ldrb	r3, [r4, r3]
   11eae:	07db      	lsls	r3, r3, #31
   11eb0:	d509      	bpl.n	11ec6 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11eb2:	2018      	movs	r0, #24
   11eb4:	fb11 0002 	smlabb	r0, r1, r2, r0
   11eb8:	4420      	add	r0, r4
   11eba:	4629      	mov	r1, r5
   11ebc:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11ec2:	f7ef bea7 	b.w	1c14 <memcpy>
   11ec6:	bd70      	pop	{r4, r5, r6, pc}
   11ec8:	200012b4 	.word	0x200012b4

00011ecc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11ecc:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ece:	2200      	movs	r2, #0
{
   11ed0:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11ed2:	1c41      	adds	r1, r0, #1
   11ed4:	7800      	ldrb	r0, [r0, #0]
   11ed6:	f7ff fc8b 	bl	117f0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11eda:	2807      	cmp	r0, #7
   11edc:	d901      	bls.n	11ee2 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ede:	2002      	movs	r0, #2
   11ee0:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11ee2:	2428      	movs	r4, #40	; 0x28
   11ee4:	2318      	movs	r3, #24
   11ee6:	fb14 3000 	smlabb	r0, r4, r0, r3
   11eea:	4c07      	ldr	r4, [pc, #28]	; (11f08 <ll_rl_crpa_get+0x3c>)
   11eec:	4404      	add	r4, r0
   11eee:	2106      	movs	r1, #6
   11ef0:	4620      	mov	r0, r4
   11ef2:	f7f5 f90e 	bl	7112 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11ef6:	2800      	cmp	r0, #0
   11ef8:	d0f1      	beq.n	11ede <ll_rl_crpa_get+0x12>
   11efa:	2206      	movs	r2, #6
   11efc:	4621      	mov	r1, r4
   11efe:	4628      	mov	r0, r5
   11f00:	f7ef fe88 	bl	1c14 <memcpy>
			return 0;
   11f04:	2000      	movs	r0, #0
}
   11f06:	bd38      	pop	{r3, r4, r5, pc}
   11f08:	200012b4 	.word	0x200012b4

00011f0c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11f0c:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11f0e:	2200      	movs	r2, #0
{
   11f10:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11f12:	1c41      	adds	r1, r0, #1
   11f14:	7800      	ldrb	r0, [r0, #0]
   11f16:	f7ff fc6b 	bl	117f0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11f1a:	2807      	cmp	r0, #7
   11f1c:	d80a      	bhi.n	11f34 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11f1e:	4b06      	ldr	r3, [pc, #24]	; (11f38 <ll_rl_lrpa_get+0x2c>)
   11f20:	2228      	movs	r2, #40	; 0x28
   11f22:	fb02 3000 	mla	r0, r2, r0, r3
   11f26:	2206      	movs	r2, #6
   11f28:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11f2a:	4620      	mov	r0, r4
   11f2c:	f7ef fe72 	bl	1c14 <memcpy>
		return 0;
   11f30:	2000      	movs	r0, #0
   11f32:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11f34:	2002      	movs	r0, #2
}
   11f36:	bd10      	pop	{r4, pc}
   11f38:	200012b4 	.word	0x200012b4

00011f3c <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11f3c:	b510      	push	{r4, lr}
   11f3e:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11f40:	f7ff faba 	bl	114b8 <rl_access_check.constprop.1>
   11f44:	b140      	cbz	r0, 11f58 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11f46:	b11c      	cbz	r4, 11f50 <ll_rl_enable+0x14>
   11f48:	2c01      	cmp	r4, #1
   11f4a:	d001      	beq.n	11f50 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11f4c:	2012      	movs	r0, #18
	}

	return 0;
}
   11f4e:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11f50:	4b02      	ldr	r3, [pc, #8]	; (11f5c <ll_rl_enable+0x20>)
   11f52:	701c      	strb	r4, [r3, #0]
	return 0;
   11f54:	2000      	movs	r0, #0
		break;
   11f56:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11f58:	200c      	movs	r0, #12
   11f5a:	bd10      	pop	{r4, pc}
   11f5c:	200013f4 	.word	0x200013f4

00011f60 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   11f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11f64:	4358      	muls	r0, r3
   11f66:	4b01      	ldr	r3, [pc, #4]	; (11f6c <ll_rl_timeout_set+0xc>)
   11f68:	6018      	str	r0, [r3, #0]
   11f6a:	4770      	bx	lr
   11f6c:	2000194c 	.word	0x2000194c

00011f70 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   11f70:	b538      	push	{r3, r4, r5, lr}
   11f72:	4605      	mov	r5, r0
   11f74:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   11f76:	f7ff fa9f 	bl	114b8 <rl_access_check.constprop.1>
   11f7a:	b1d8      	cbz	r0, 11fb4 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11f7c:	2200      	movs	r2, #0
   11f7e:	1c69      	adds	r1, r5, #1
   11f80:	7828      	ldrb	r0, [r5, #0]
   11f82:	f7ff fc35 	bl	117f0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11f86:	2807      	cmp	r0, #7
   11f88:	d816      	bhi.n	11fb8 <ll_priv_mode_set+0x48>
		switch (mode) {
   11f8a:	b11c      	cbz	r4, 11f94 <ll_priv_mode_set+0x24>
   11f8c:	2c01      	cmp	r4, #1
   11f8e:	d00a      	beq.n	11fa6 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   11f90:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   11f92:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   11f94:	2328      	movs	r3, #40	; 0x28
   11f96:	4a09      	ldr	r2, [pc, #36]	; (11fbc <ll_priv_mode_set+0x4c>)
   11f98:	4358      	muls	r0, r3
   11f9a:	5c13      	ldrb	r3, [r2, r0]
   11f9c:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   11fa0:	5413      	strb	r3, [r2, r0]
	return 0;
   11fa2:	2000      	movs	r0, #0
			break;
   11fa4:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   11fa6:	2328      	movs	r3, #40	; 0x28
   11fa8:	4a04      	ldr	r2, [pc, #16]	; (11fbc <ll_priv_mode_set+0x4c>)
   11faa:	4358      	muls	r0, r3
   11fac:	5c13      	ldrb	r3, [r2, r0]
   11fae:	f043 0310 	orr.w	r3, r3, #16
   11fb2:	e7f5      	b.n	11fa0 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11fb4:	200c      	movs	r0, #12
   11fb6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11fb8:	2002      	movs	r0, #2
   11fba:	bd38      	pop	{r3, r4, r5, pc}
   11fbc:	200012b4 	.word	0x200012b4

00011fc0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   11fc0:	4a19      	ldr	r2, [pc, #100]	; (12028 <ll_filter_reset+0x68>)
   11fc2:	2300      	movs	r3, #0
{
   11fc4:	b430      	push	{r4, r5}
	wl_anon = 0;
   11fc6:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   11fc8:	4a18      	ldr	r2, [pc, #96]	; (1202c <ll_filter_reset+0x6c>)
   11fca:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11fce:	f36f 0100 	bfc	r1, #0, #1
   11fd2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11fd6:	3301      	adds	r3, #1
   11fd8:	2b08      	cmp	r3, #8
   11fda:	d1f6      	bne.n	11fca <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   11fdc:	4a14      	ldr	r2, [pc, #80]	; (12030 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11fde:	4915      	ldr	r1, [pc, #84]	; (12034 <ll_filter_reset+0x74>)
	rl_enable = 0;
   11fe0:	2300      	movs	r3, #0
   11fe2:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   11fe4:	4a14      	ldr	r2, [pc, #80]	; (12038 <ll_filter_reset+0x78>)
   11fe6:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   11fe8:	4a14      	ldr	r2, [pc, #80]	; (1203c <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   11fea:	4915      	ldr	r1, [pc, #84]	; (12040 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   11fec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   11ff0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11ff4:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   11ff8:	2528      	movs	r5, #40	; 0x28
   11ffa:	fb05 f203 	mul.w	r2, r5, r3
   11ffe:	3301      	adds	r3, #1
   12000:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12002:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12004:	f36f 0400 	bfc	r4, #0, #1
   12008:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1200a:	d1f6      	bne.n	11ffa <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   1200c:	4b0d      	ldr	r3, [pc, #52]	; (12044 <ll_filter_reset+0x84>)
   1200e:	2200      	movs	r2, #0
   12010:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12012:	b120      	cbz	r0, 1201e <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12014:	490c      	ldr	r1, [pc, #48]	; (12048 <ll_filter_reset+0x88>)
   12016:	480d      	ldr	r0, [pc, #52]	; (1204c <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   12018:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1201a:	f002 baed 	b.w	145f8 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   1201e:	480b      	ldr	r0, [pc, #44]	; (1204c <ll_filter_reset+0x8c>)
}
   12020:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12022:	f002 baf9 	b.w	14618 <k_delayed_work_cancel>
   12026:	bf00      	nop
   12028:	20001920 	.word	0x20001920
   1202c:	20001427 	.word	0x20001427
   12030:	200013f4 	.word	0x200013f4
   12034:	000dbba0 	.word	0x000dbba0
   12038:	2000194c 	.word	0x2000194c
   1203c:	20001918 	.word	0x20001918
   12040:	200012b4 	.word	0x200012b4
   12044:	2000122a 	.word	0x2000122a
   12048:	00011be1 	.word	0x00011be1
   1204c:	20001924 	.word	0x20001924

00012050 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12050:	4b05      	ldr	r3, [pc, #20]	; (12068 <cntr_init+0x18>)
   12052:	2200      	movs	r2, #0
   12054:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   12058:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   1205c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12060:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   12064:	4770      	bx	lr
   12066:	bf00      	nop
   12068:	4000b000 	.word	0x4000b000

0001206c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   1206c:	4a04      	ldr	r2, [pc, #16]	; (12080 <cntr_start+0x14>)
   1206e:	7813      	ldrb	r3, [r2, #0]
   12070:	1c59      	adds	r1, r3, #1
   12072:	7011      	strb	r1, [r2, #0]
   12074:	2001      	movs	r0, #1
   12076:	b913      	cbnz	r3, 1207e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   12078:	4a02      	ldr	r2, [pc, #8]	; (12084 <cntr_start+0x18>)
   1207a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   1207c:	4618      	mov	r0, r3
}
   1207e:	4770      	bx	lr
   12080:	20001499 	.word	0x20001499
   12084:	4000b000 	.word	0x4000b000

00012088 <cntr_stop>:

u32_t cntr_stop(void)
{
   12088:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   1208a:	4b0f      	ldr	r3, [pc, #60]	; (120c8 <cntr_stop+0x40>)
   1208c:	7818      	ldrb	r0, [r3, #0]
   1208e:	b970      	cbnz	r0, 120ae <cntr_stop+0x26>
   12090:	4b0e      	ldr	r3, [pc, #56]	; (120cc <cntr_stop+0x44>)
   12092:	9301      	str	r3, [sp, #4]
   12094:	9300      	str	r3, [sp, #0]
   12096:	4a0e      	ldr	r2, [pc, #56]	; (120d0 <cntr_stop+0x48>)
   12098:	4b0e      	ldr	r3, [pc, #56]	; (120d4 <cntr_stop+0x4c>)
   1209a:	490f      	ldr	r1, [pc, #60]	; (120d8 <cntr_stop+0x50>)
   1209c:	480f      	ldr	r0, [pc, #60]	; (120dc <cntr_stop+0x54>)
   1209e:	f7ee ff75 	bl	f8c <printk>
   120a2:	4040      	eors	r0, r0
   120a4:	f380 8811 	msr	BASEPRI, r0
   120a8:	f04f 0004 	mov.w	r0, #4
   120ac:	df02      	svc	2

	if (--_refcount) {
   120ae:	3801      	subs	r0, #1
   120b0:	b2c0      	uxtb	r0, r0
   120b2:	7018      	strb	r0, [r3, #0]
   120b4:	2301      	movs	r3, #1
   120b6:	b920      	cbnz	r0, 120c2 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   120b8:	4a09      	ldr	r2, [pc, #36]	; (120e0 <cntr_stop+0x58>)
   120ba:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   120bc:	b003      	add	sp, #12
   120be:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   120c2:	4618      	mov	r0, r3
   120c4:	e7fa      	b.n	120bc <cntr_stop+0x34>
   120c6:	bf00      	nop
   120c8:	20001499 	.word	0x20001499
   120cc:	00014b99 	.word	0x00014b99
   120d0:	00015f55 	.word	0x00015f55
   120d4:	000186d7 	.word	0x000186d7
   120d8:	00015fa4 	.word	0x00015fa4
   120dc:	000186e1 	.word	0x000186e1
   120e0:	4000b000 	.word	0x4000b000

000120e4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   120e4:	4b01      	ldr	r3, [pc, #4]	; (120ec <cntr_cnt_get+0x8>)
   120e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   120ea:	4770      	bx	lr
   120ec:	4000b000 	.word	0x4000b000

000120f0 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   120f0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   120f4:	4b01      	ldr	r3, [pc, #4]	; (120fc <cntr_cmp_set+0xc>)
   120f6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   120fa:	4770      	bx	lr
   120fc:	4000b000 	.word	0x4000b000

00012100 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12100:	4b11      	ldr	r3, [pc, #68]	; (12148 <do_ecb+0x48>)
{
   12102:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   12104:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   12106:	2500      	movs	r5, #0
   12108:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   1210a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   1210c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12110:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   12114:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12118:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1211a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   1211e:	b934      	cbnz	r4, 1212e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12120:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12124:	b91c      	cbnz	r4, 1212e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   12126:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1212a:	2c00      	cmp	r4, #0
   1212c:	d1f5      	bne.n	1211a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   1212e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12130:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   12134:	2c00      	cmp	r4, #0
   12136:	d1e8      	bne.n	1210a <do_ecb+0xa>
   12138:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   1213c:	2e00      	cmp	r6, #0
   1213e:	d0e4      	beq.n	1210a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12140:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   12144:	bd70      	pop	{r4, r5, r6, pc}
   12146:	bf00      	nop
   12148:	4000e000 	.word	0x4000e000

0001214c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   1214c:	b570      	push	{r4, r5, r6, lr}
   1214e:	b08c      	sub	sp, #48	; 0x30
   12150:	460e      	mov	r6, r1
   12152:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12154:	4601      	mov	r1, r0
   12156:	2210      	movs	r2, #16
   12158:	4668      	mov	r0, sp
{
   1215a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1215c:	f7f4 ffca 	bl	70f4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12160:	2210      	movs	r2, #16
   12162:	eb0d 0002 	add.w	r0, sp, r2
   12166:	4631      	mov	r1, r6
   12168:	f7f4 ffc4 	bl	70f4 <mem_rcopy>

	do_ecb(&ecb);
   1216c:	4668      	mov	r0, sp
   1216e:	f7ff ffc7 	bl	12100 <do_ecb>

	if (cipher_text_le) {
   12172:	b125      	cbz	r5, 1217e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12174:	2210      	movs	r2, #16
   12176:	a908      	add	r1, sp, #32
   12178:	4628      	mov	r0, r5
   1217a:	f7f4 ffbb 	bl	70f4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1217e:	b124      	cbz	r4, 1218a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12180:	2210      	movs	r2, #16
   12182:	a908      	add	r1, sp, #32
   12184:	4620      	mov	r0, r4
   12186:	f7ef fd45 	bl	1c14 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1218a:	b00c      	add	sp, #48	; 0x30
   1218c:	bd70      	pop	{r4, r5, r6, pc}
	...

00012190 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12190:	4b07      	ldr	r3, [pc, #28]	; (121b0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   12192:	4a08      	ldr	r2, [pc, #32]	; (121b4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12194:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12198:	4907      	ldr	r1, [pc, #28]	; (121b8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   1219a:	4a08      	ldr	r2, [pc, #32]	; (121bc <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   1219c:	2800      	cmp	r0, #0
   1219e:	bf14      	ite	ne
   121a0:	4610      	movne	r0, r2
   121a2:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   121a4:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   121a6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   121aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   121ae:	4770      	bx	lr
   121b0:	4001f000 	.word	0x4001f000
   121b4:	40008140 	.word	0x40008140
   121b8:	40001004 	.word	0x40001004
   121bc:	40001000 	.word	0x40001000

000121c0 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   121c0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   121c2:	4e2c      	ldr	r6, [pc, #176]	; (12274 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   121c4:	4f2c      	ldr	r7, [pc, #176]	; (12278 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   121c6:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   121c8:	4b2c      	ldr	r3, [pc, #176]	; (1227c <sw_switch.isra.9+0xbc>)
   121ca:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   121ce:	b22b      	sxth	r3, r5
   121d0:	00dc      	lsls	r4, r3, #3
   121d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   121d6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   121da:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   121de:	f105 040b 	add.w	r4, r5, #11
   121e2:	b2e4      	uxtb	r4, r4
   121e4:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   121e6:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   121ea:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   121ee:	3fc0      	subs	r7, #192	; 0xc0
   121f0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   121f4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   121f8:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   121fc:	2800      	cmp	r0, #0
   121fe:	d034      	beq.n	1226a <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   12200:	f24a 075a 	movw	r7, #41050	; 0xa05a
   12204:	f649 4040 	movw	r0, #40000	; 0x9c40
   12208:	2a02      	cmp	r2, #2
   1220a:	bf0c      	ite	eq
   1220c:	4602      	moveq	r2, r0
   1220e:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   12210:	f242 47b8 	movw	r7, #9400	; 0x24b8
   12214:	f241 504a 	movw	r0, #5450	; 0x154a
   12218:	2902      	cmp	r1, #2
   1221a:	bf18      	it	ne
   1221c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1221e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   12222:	4401      	add	r1, r0
   12224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12228:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1222c:	4a14      	ldr	r2, [pc, #80]	; (12280 <sw_switch.isra.9+0xc0>)
   1222e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   12232:	009b      	lsls	r3, r3, #2
   12234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12238:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1223c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   12240:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12242:	bf8b      	itete	hi
   12244:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12248:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1224a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   1224c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12250:	bf88      	it	hi
   12252:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12256:	4b08      	ldr	r3, [pc, #32]	; (12278 <sw_switch.isra.9+0xb8>)
   12258:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1225c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   12260:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   12262:	f003 0301 	and.w	r3, r3, #1
   12266:	7033      	strb	r3, [r6, #0]
   12268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1226a:	4a06      	ldr	r2, [pc, #24]	; (12284 <sw_switch.isra.9+0xc4>)
   1226c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   12270:	212d      	movs	r1, #45	; 0x2d
   12272:	e7de      	b.n	12232 <sw_switch.isra.9+0x72>
   12274:	200016bc 	.word	0x200016bc
   12278:	4001f000 	.word	0x4001f000
   1227c:	4000110c 	.word	0x4000110c
   12280:	40001000 	.word	0x40001000
   12284:	40001004 	.word	0x40001004

00012288 <isr_radio>:
	if (sfp_radio_isr) {
   12288:	4b02      	ldr	r3, [pc, #8]	; (12294 <isr_radio+0xc>)
   1228a:	681b      	ldr	r3, [r3, #0]
   1228c:	b103      	cbz	r3, 12290 <isr_radio+0x8>
		sfp_radio_isr();
   1228e:	4718      	bx	r3
   12290:	4770      	bx	lr
   12292:	bf00      	nop
   12294:	200016b8 	.word	0x200016b8

00012298 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12298:	4b06      	ldr	r3, [pc, #24]	; (122b4 <radio_isr_set+0x1c>)
   1229a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   1229c:	4b06      	ldr	r3, [pc, #24]	; (122b8 <radio_isr_set+0x20>)
   1229e:	2210      	movs	r2, #16
   122a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   122a4:	4b05      	ldr	r3, [pc, #20]	; (122bc <radio_isr_set+0x24>)
   122a6:	2202      	movs	r2, #2
   122a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   122ac:	2001      	movs	r0, #1
   122ae:	f7ef badf 	b.w	1870 <_arch_irq_enable>
   122b2:	bf00      	nop
   122b4:	200016b8 	.word	0x200016b8
   122b8:	40001000 	.word	0x40001000
   122bc:	e000e100 	.word	0xe000e100

000122c0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   122c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   122c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   122c8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   122ca:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   122ce:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   122d2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   122d6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   122da:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   122de:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   122e2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   122e6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   122ea:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   122ee:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   122f2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   122f6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   122fa:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   122fe:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12302:	4770      	bx	lr

00012304 <radio_reset>:
{
   12304:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   12306:	2001      	movs	r0, #1
   12308:	f7ef fac2 	bl	1890 <_arch_irq_disable>
	NRF_RADIO->POWER =
   1230c:	4b08      	ldr	r3, [pc, #32]	; (12330 <radio_reset+0x2c>)
   1230e:	2200      	movs	r2, #0
   12310:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12314:	2201      	movs	r2, #1
   12316:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1231a:	4a06      	ldr	r2, [pc, #24]	; (12334 <radio_reset+0x30>)
   1231c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1231e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12322:	f023 0301 	bic.w	r3, r3, #1
   12326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1232a:	6013      	str	r3, [r2, #0]
   1232c:	bd08      	pop	{r3, pc}
   1232e:	bf00      	nop
   12330:	40001000 	.word	0x40001000
   12334:	40001774 	.word	0x40001774

00012338 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12338:	4b06      	ldr	r3, [pc, #24]	; (12354 <radio_phy_set+0x1c>)
	switch (phy) {
   1233a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1233c:	bf0c      	ite	eq
   1233e:	2204      	moveq	r2, #4
   12340:	2203      	movne	r2, #3
   12342:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12346:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1234a:	f042 0201 	orr.w	r2, r2, #1
   1234e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   12352:	4770      	bx	lr
   12354:	40001000 	.word	0x40001000

00012358 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12358:	4b01      	ldr	r3, [pc, #4]	; (12360 <radio_tx_power_set+0x8>)
   1235a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1235e:	4770      	bx	lr
   12360:	40001000 	.word	0x40001000

00012364 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12364:	4b01      	ldr	r3, [pc, #4]	; (1236c <radio_freq_chan_set+0x8>)
   12366:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1236a:	4770      	bx	lr
   1236c:	40001000 	.word	0x40001000

00012370 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   12370:	4b07      	ldr	r3, [pc, #28]	; (12390 <radio_whiten_iv_set+0x20>)
   12372:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12376:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1237a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1237e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   12382:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12386:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1238a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1238e:	4770      	bx	lr
   12390:	40001000 	.word	0x40001000

00012394 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12394:	4a0a      	ldr	r2, [pc, #40]	; (123c0 <radio_aa_set+0x2c>)
   12396:	2300      	movs	r3, #0
   12398:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1239c:	2301      	movs	r3, #1
   1239e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   123a2:	78c3      	ldrb	r3, [r0, #3]
   123a4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   123a8:	7843      	ldrb	r3, [r0, #1]
   123aa:	7881      	ldrb	r1, [r0, #2]
   123ac:	041b      	lsls	r3, r3, #16
   123ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   123b2:	7801      	ldrb	r1, [r0, #0]
   123b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   123b8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   123bc:	4770      	bx	lr
   123be:	bf00      	nop
   123c0:	40001000 	.word	0x40001000

000123c4 <radio_pkt_configure>:
	switch (phy) {
   123c4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   123c8:	2b02      	cmp	r3, #2
{
   123ca:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   123cc:	bf0c      	ite	eq
   123ce:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   123d2:	2400      	movne	r4, #0
	if (dc) {
   123d4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   123d6:	f1c0 0308 	rsb	r3, r0, #8
   123da:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   123de:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   123e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   123e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   123ea:	4a0b      	ldr	r2, [pc, #44]	; (12418 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   123ec:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   123f0:	bf48      	it	mi
   123f2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   123f6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   123f8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   123fc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   12400:	4b06      	ldr	r3, [pc, #24]	; (1241c <radio_pkt_configure+0x58>)
   12402:	4003      	ands	r3, r0
   12404:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12408:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1240c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   12410:	4319      	orrs	r1, r3
   12412:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12416:	bd10      	pop	{r4, pc}
   12418:	40001000 	.word	0x40001000
   1241c:	fef80000 	.word	0xfef80000

00012420 <radio_pkt_rx_set>:
   12420:	4b01      	ldr	r3, [pc, #4]	; (12428 <radio_pkt_rx_set+0x8>)
   12422:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12426:	4770      	bx	lr
   12428:	40001000 	.word	0x40001000

0001242c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   1242c:	4b01      	ldr	r3, [pc, #4]	; (12434 <radio_pkt_tx_set+0x8>)
   1242e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12432:	4770      	bx	lr
   12434:	40001000 	.word	0x40001000

00012438 <radio_tx_ready_delay_get>:
	switch (phy) {
   12438:	2802      	cmp	r0, #2
}
   1243a:	bf0c      	ite	eq
   1243c:	2028      	moveq	r0, #40	; 0x28
   1243e:	2029      	movne	r0, #41	; 0x29
   12440:	4770      	bx	lr

00012442 <radio_tx_chain_delay_get>:
}
   12442:	2001      	movs	r0, #1
   12444:	4770      	bx	lr

00012446 <radio_rx_ready_delay_get>:
}
   12446:	2029      	movs	r0, #41	; 0x29
   12448:	4770      	bx	lr

0001244a <radio_rx_chain_delay_get>:
	switch (phy) {
   1244a:	2802      	cmp	r0, #2
}
   1244c:	bf0c      	ite	eq
   1244e:	2006      	moveq	r0, #6
   12450:	200a      	movne	r0, #10
   12452:	4770      	bx	lr

00012454 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12454:	4b01      	ldr	r3, [pc, #4]	; (1245c <radio_rx_enable+0x8>)
   12456:	2201      	movs	r2, #1
   12458:	605a      	str	r2, [r3, #4]
   1245a:	4770      	bx	lr
   1245c:	40001000 	.word	0x40001000

00012460 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12460:	4b01      	ldr	r3, [pc, #4]	; (12468 <radio_tx_enable+0x8>)
   12462:	2201      	movs	r2, #1
   12464:	601a      	str	r2, [r3, #0]
   12466:	4770      	bx	lr
   12468:	40001000 	.word	0x40001000

0001246c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   1246c:	4a07      	ldr	r2, [pc, #28]	; (1248c <radio_disable+0x20>)
   1246e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12472:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12476:	2301      	movs	r3, #1
   12478:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1247a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1247c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12480:	2100      	movs	r1, #0
   12482:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12486:	6113      	str	r3, [r2, #16]
   12488:	4770      	bx	lr
   1248a:	bf00      	nop
   1248c:	4001f000 	.word	0x4001f000

00012490 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12490:	4b04      	ldr	r3, [pc, #16]	; (124a4 <radio_status_reset+0x14>)
   12492:	2200      	movs	r2, #0
   12494:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12498:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1249c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   124a0:	4770      	bx	lr
   124a2:	bf00      	nop
   124a4:	40001000 	.word	0x40001000

000124a8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   124a8:	4b03      	ldr	r3, [pc, #12]	; (124b8 <radio_is_ready+0x10>)
   124aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   124ae:	3000      	adds	r0, #0
   124b0:	bf18      	it	ne
   124b2:	2001      	movne	r0, #1
   124b4:	4770      	bx	lr
   124b6:	bf00      	nop
   124b8:	40001000 	.word	0x40001000

000124bc <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   124bc:	4b03      	ldr	r3, [pc, #12]	; (124cc <radio_is_done+0x10>)
   124be:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   124c2:	3000      	adds	r0, #0
   124c4:	bf18      	it	ne
   124c6:	2001      	movne	r0, #1
   124c8:	4770      	bx	lr
   124ca:	bf00      	nop
   124cc:	40001000 	.word	0x40001000

000124d0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   124d0:	4b03      	ldr	r3, [pc, #12]	; (124e0 <radio_is_idle+0x10>)
   124d2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   124d6:	fab0 f080 	clz	r0, r0
   124da:	0940      	lsrs	r0, r0, #5
   124dc:	4770      	bx	lr
   124de:	bf00      	nop
   124e0:	40001000 	.word	0x40001000

000124e4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   124e4:	4b04      	ldr	r3, [pc, #16]	; (124f8 <radio_crc_configure+0x14>)
   124e6:	f240 1203 	movw	r2, #259	; 0x103
   124ea:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   124ee:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   124f2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   124f6:	4770      	bx	lr
   124f8:	40001000 	.word	0x40001000

000124fc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   124fc:	4b03      	ldr	r3, [pc, #12]	; (1250c <radio_crc_is_valid+0x10>)
   124fe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12502:	3000      	adds	r0, #0
   12504:	bf18      	it	ne
   12506:	2001      	movne	r0, #1
   12508:	4770      	bx	lr
   1250a:	bf00      	nop
   1250c:	40001000 	.word	0x40001000

00012510 <radio_pkt_empty_get>:
}
   12510:	4800      	ldr	r0, [pc, #0]	; (12514 <radio_pkt_empty_get+0x4>)
   12512:	4770      	bx	lr
   12514:	200015ac 	.word	0x200015ac

00012518 <radio_pkt_scratch_get>:
}
   12518:	4800      	ldr	r0, [pc, #0]	; (1251c <radio_pkt_scratch_get+0x4>)
   1251a:	4770      	bx	lr
   1251c:	200015b0 	.word	0x200015b0

00012520 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12520:	4b04      	ldr	r3, [pc, #16]	; (12534 <radio_switch_complete_and_rx+0x14>)
   12522:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12524:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1252a:	4602      	mov	r2, r0
   1252c:	4608      	mov	r0, r1
   1252e:	f7ff be47 	b.w	121c0 <sw_switch.isra.9>
   12532:	bf00      	nop
   12534:	40001000 	.word	0x40001000

00012538 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12538:	4b03      	ldr	r3, [pc, #12]	; (12548 <radio_switch_complete_and_tx+0x10>)
   1253a:	2103      	movs	r1, #3
   1253c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12540:	4601      	mov	r1, r0
   12542:	2001      	movs	r0, #1
   12544:	f7ff be3c 	b.w	121c0 <sw_switch.isra.9>
   12548:	40001000 	.word	0x40001000

0001254c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1254c:	4b05      	ldr	r3, [pc, #20]	; (12564 <radio_switch_complete_and_disable+0x18>)
   1254e:	2203      	movs	r2, #3
   12550:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12554:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12558:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1255c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12560:	4770      	bx	lr
   12562:	bf00      	nop
   12564:	40001000 	.word	0x40001000

00012568 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12568:	4a03      	ldr	r2, [pc, #12]	; (12578 <radio_rssi_measure+0x10>)
   1256a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1256e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12572:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12576:	4770      	bx	lr
   12578:	40001000 	.word	0x40001000

0001257c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1257c:	4b01      	ldr	r3, [pc, #4]	; (12584 <radio_rssi_get+0x8>)
   1257e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12582:	4770      	bx	lr
   12584:	40001000 	.word	0x40001000

00012588 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12588:	4b02      	ldr	r3, [pc, #8]	; (12594 <radio_rssi_status_reset+0xc>)
   1258a:	2200      	movs	r2, #0
   1258c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12590:	4770      	bx	lr
   12592:	bf00      	nop
   12594:	40001000 	.word	0x40001000

00012598 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12598:	4b03      	ldr	r3, [pc, #12]	; (125a8 <radio_rssi_is_ready+0x10>)
   1259a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1259e:	3000      	adds	r0, #0
   125a0:	bf18      	it	ne
   125a2:	2001      	movne	r0, #1
   125a4:	4770      	bx	lr
   125a6:	bf00      	nop
   125a8:	40001000 	.word	0x40001000

000125ac <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   125ac:	b530      	push	{r4, r5, lr}
   125ae:	2400      	movs	r4, #0
   125b0:	00a3      	lsls	r3, r4, #2
   125b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   125b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   125ba:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   125bc:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   125c0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   125c2:	8895      	ldrh	r5, [r2, #4]
   125c4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   125c8:	2c08      	cmp	r4, #8
		bdaddr += 6;
   125ca:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   125ce:	d1ef      	bne.n	125b0 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   125d0:	4b02      	ldr	r3, [pc, #8]	; (125dc <radio_filter_configure+0x30>)
   125d2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   125d6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   125da:	bd30      	pop	{r4, r5, pc}
   125dc:	40001000 	.word	0x40001000

000125e0 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   125e0:	4a03      	ldr	r2, [pc, #12]	; (125f0 <radio_filter_disable+0x10>)
   125e2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   125e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   125ea:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   125ee:	4770      	bx	lr
   125f0:	40001000 	.word	0x40001000

000125f4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   125f4:	4b02      	ldr	r3, [pc, #8]	; (12600 <radio_filter_status_reset+0xc>)
   125f6:	2200      	movs	r2, #0
   125f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   125fc:	4770      	bx	lr
   125fe:	bf00      	nop
   12600:	40001000 	.word	0x40001000

00012604 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12604:	4b03      	ldr	r3, [pc, #12]	; (12614 <radio_filter_has_match+0x10>)
   12606:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1260a:	3000      	adds	r0, #0
   1260c:	bf18      	it	ne
   1260e:	2001      	movne	r0, #1
   12610:	4770      	bx	lr
   12612:	bf00      	nop
   12614:	40001000 	.word	0x40001000

00012618 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12618:	4b01      	ldr	r3, [pc, #4]	; (12620 <radio_filter_match_get+0x8>)
   1261a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1261e:	4770      	bx	lr
   12620:	40001000 	.word	0x40001000

00012624 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12624:	4b04      	ldr	r3, [pc, #16]	; (12638 <radio_bc_configure+0x14>)
   12626:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1262a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12636:	4770      	bx	lr
   12638:	40001000 	.word	0x40001000

0001263c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   1263c:	4b05      	ldr	r3, [pc, #20]	; (12654 <radio_tmr_status_reset+0x18>)
   1263e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12642:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12646:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1264a:	227f      	movs	r2, #127	; 0x7f
   1264c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12650:	4770      	bx	lr
   12652:	bf00      	nop
   12654:	4000b000 	.word	0x4000b000

00012658 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12658:	4b03      	ldr	r3, [pc, #12]	; (12668 <radio_tmr_tifs_set+0x10>)
   1265a:	4a04      	ldr	r2, [pc, #16]	; (1266c <radio_tmr_tifs_set+0x14>)
   1265c:	781b      	ldrb	r3, [r3, #0]
   1265e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12662:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12666:	4770      	bx	lr
   12668:	200016bc 	.word	0x200016bc
   1266c:	40009000 	.word	0x40009000

00012670 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12674:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12678:	4c30      	ldr	r4, [pc, #192]	; (1273c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   1267a:	4d31      	ldr	r5, [pc, #196]	; (12740 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1267c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12680:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12682:	bf88      	it	hi
   12684:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12688:	4b2e      	ldr	r3, [pc, #184]	; (12744 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   1268a:	4c2f      	ldr	r4, [pc, #188]	; (12748 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   1268c:	bf82      	ittt	hi
   1268e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12692:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12696:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   1269a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   1269c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   126a0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   126a2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   126a4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   126a8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   126aa:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   126ae:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   126b2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   126b6:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   126ba:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   126be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   126c2:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   126c6:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   126ca:	4920      	ldr	r1, [pc, #128]	; (1274c <radio_tmr_start+0xdc>)
   126cc:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   126d0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   126d4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   126d8:	f7ff fd5a 	bl	12190 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   126dc:	4b1c      	ldr	r3, [pc, #112]	; (12750 <radio_tmr_start+0xe0>)
   126de:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   126e0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   126e4:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   126e8:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   126ec:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   126ee:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   126f2:	3b74      	subs	r3, #116	; 0x74
   126f4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   126f8:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   126fc:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12700:	f503 739a 	add.w	r3, r3, #308	; 0x134
   12704:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   12708:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1270c:	33c4      	adds	r3, #196	; 0xc4
   1270e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   12712:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   12716:	3bc0      	subs	r3, #192	; 0xc0
   12718:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1271c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   12720:	33c8      	adds	r3, #200	; 0xc8
   12722:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12726:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1272a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1272e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12732:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   12736:	4628      	mov	r0, r5
   12738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1273c:	7ff0bdbf 	.word	0x7ff0bdbf
   12740:	000f4240 	.word	0x000f4240
   12744:	40008000 	.word	0x40008000
   12748:	4000b000 	.word	0x4000b000
   1274c:	4000b148 	.word	0x4000b148
   12750:	40009000 	.word	0x40009000

00012754 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12754:	4a04      	ldr	r2, [pc, #16]	; (12768 <radio_tmr_stop+0x14>)
   12756:	2301      	movs	r3, #1
   12758:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1275a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   1275c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12760:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   12762:	6113      	str	r3, [r2, #16]
   12764:	4770      	bx	lr
   12766:	bf00      	nop
   12768:	40008000 	.word	0x40008000

0001276c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   1276c:	4b0c      	ldr	r3, [pc, #48]	; (127a0 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1276e:	4a0d      	ldr	r2, [pc, #52]	; (127a4 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12770:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12774:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12778:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   1277c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12780:	3240      	adds	r2, #64	; 0x40
   12782:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   12786:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1278a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1278e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12792:	3a34      	subs	r2, #52	; 0x34
   12794:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12798:	2218      	movs	r2, #24
   1279a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1279e:	4770      	bx	lr
   127a0:	40008000 	.word	0x40008000
   127a4:	40001104 	.word	0x40001104

000127a8 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   127a8:	4b0b      	ldr	r3, [pc, #44]	; (127d8 <radio_tmr_aa_capture+0x30>)
   127aa:	4a0c      	ldr	r2, [pc, #48]	; (127dc <radio_tmr_aa_capture+0x34>)
   127ac:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   127b0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   127b4:	3240      	adds	r2, #64	; 0x40
   127b6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   127ba:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   127be:	3a3c      	subs	r2, #60	; 0x3c
   127c0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   127c4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   127c8:	3240      	adds	r2, #64	; 0x40
   127ca:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   127ce:	220c      	movs	r2, #12
   127d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   127d4:	4770      	bx	lr
   127d6:	bf00      	nop
   127d8:	4001f000 	.word	0x4001f000
   127dc:	40001100 	.word	0x40001100

000127e0 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   127e0:	4b01      	ldr	r3, [pc, #4]	; (127e8 <radio_tmr_aa_get+0x8>)
   127e2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   127e6:	4770      	bx	lr
   127e8:	40008000 	.word	0x40008000

000127ec <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   127ec:	4b01      	ldr	r3, [pc, #4]	; (127f4 <radio_tmr_aa_save+0x8>)
   127ee:	6018      	str	r0, [r3, #0]
   127f0:	4770      	bx	lr
   127f2:	bf00      	nop
   127f4:	200016b4 	.word	0x200016b4

000127f8 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   127f8:	4b01      	ldr	r3, [pc, #4]	; (12800 <radio_tmr_aa_restore+0x8>)
   127fa:	6818      	ldr	r0, [r3, #0]
   127fc:	4770      	bx	lr
   127fe:	bf00      	nop
   12800:	200016b4 	.word	0x200016b4

00012804 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12804:	4b01      	ldr	r3, [pc, #4]	; (1280c <radio_tmr_ready_get+0x8>)
   12806:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1280a:	4770      	bx	lr
   1280c:	40008000 	.word	0x40008000

00012810 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12810:	4b06      	ldr	r3, [pc, #24]	; (1282c <radio_tmr_end_capture+0x1c>)
   12812:	4a07      	ldr	r2, [pc, #28]	; (12830 <radio_tmr_end_capture+0x20>)
   12814:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12818:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1281c:	323c      	adds	r2, #60	; 0x3c
   1281e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12822:	2220      	movs	r2, #32
   12824:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12828:	4770      	bx	lr
   1282a:	bf00      	nop
   1282c:	4001f000 	.word	0x4001f000
   12830:	4000110c 	.word	0x4000110c

00012834 <radio_tmr_end_get>:
   12834:	4b01      	ldr	r3, [pc, #4]	; (1283c <radio_tmr_end_get+0x8>)
   12836:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1283a:	4770      	bx	lr
   1283c:	40008000 	.word	0x40008000

00012840 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12840:	4b01      	ldr	r3, [pc, #4]	; (12848 <radio_tmr_tifs_base_get+0x8>)
   12842:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   12846:	4770      	bx	lr
   12848:	40008000 	.word	0x40008000

0001284c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1284c:	4b16      	ldr	r3, [pc, #88]	; (128a8 <radio_ccm_rx_pkt_set+0x5c>)
{
   1284e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12850:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12852:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12854:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12858:	4e14      	ldr	r6, [pc, #80]	; (128ac <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1285a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1285e:	4d14      	ldr	r5, [pc, #80]	; (128b0 <radio_ccm_rx_pkt_set+0x64>)
   12860:	2902      	cmp	r1, #2
   12862:	bf0c      	ite	eq
   12864:	4629      	moveq	r1, r5
   12866:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12868:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1286c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12870:	4810      	ldr	r0, [pc, #64]	; (128b4 <radio_ccm_rx_pkt_set+0x68>)
   12872:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   12876:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1287a:	4a0f      	ldr	r2, [pc, #60]	; (128b8 <radio_ccm_rx_pkt_set+0x6c>)
   1287c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12880:	490e      	ldr	r1, [pc, #56]	; (128bc <radio_ccm_rx_pkt_set+0x70>)
   12882:	4a0f      	ldr	r2, [pc, #60]	; (128c0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   12884:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12888:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1288c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12890:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12894:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12898:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   1289c:	2140      	movs	r1, #64	; 0x40
   1289e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   128a2:	2201      	movs	r2, #1
   128a4:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   128a6:	bd70      	pop	{r4, r5, r6, pc}
   128a8:	4000f000 	.word	0x4000f000
   128ac:	01000001 	.word	0x01000001
   128b0:	01010001 	.word	0x01010001
   128b4:	200015b0 	.word	0x200015b0
   128b8:	200014a0 	.word	0x200014a0
   128bc:	40001104 	.word	0x40001104
   128c0:	4001f000 	.word	0x4001f000

000128c4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   128c4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   128c6:	4b0e      	ldr	r3, [pc, #56]	; (12900 <radio_ccm_tx_pkt_set+0x3c>)
   128c8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   128ca:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   128cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   128d0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   128d4:	4c0b      	ldr	r4, [pc, #44]	; (12904 <radio_ccm_tx_pkt_set+0x40>)
   128d6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   128da:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   128de:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   128e2:	4809      	ldr	r0, [pc, #36]	; (12908 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   128e4:	4909      	ldr	r1, [pc, #36]	; (1290c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   128e6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   128ea:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   128ee:	2101      	movs	r1, #1
   128f0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   128f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   128f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   128fc:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   128fe:	bd10      	pop	{r4, pc}
   12900:	4000f000 	.word	0x4000f000
   12904:	01010000 	.word	0x01010000
   12908:	200015b0 	.word	0x200015b0
   1290c:	200014a0 	.word	0x200014a0

00012910 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12910:	4b0c      	ldr	r3, [pc, #48]	; (12944 <radio_ccm_is_done+0x34>)
   12912:	2202      	movs	r2, #2
   12914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12918:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1291c:	b16a      	cbz	r2, 1293a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1291e:	2202      	movs	r2, #2
   12920:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12924:	4a08      	ldr	r2, [pc, #32]	; (12948 <radio_ccm_is_done+0x38>)
   12926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1292a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1292e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12932:	fab0 f080 	clz	r0, r0
   12936:	0940      	lsrs	r0, r0, #5
   12938:	4770      	bx	lr
		__WFE();
   1293a:	bf20      	wfe
		__SEV();
   1293c:	bf40      	sev
		__WFE();
   1293e:	bf20      	wfe
   12940:	e7ea      	b.n	12918 <radio_ccm_is_done+0x8>
   12942:	bf00      	nop
   12944:	4000f000 	.word	0x4000f000
   12948:	e000e100 	.word	0xe000e100

0001294c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1294c:	4b03      	ldr	r3, [pc, #12]	; (1295c <radio_ccm_mic_is_valid+0x10>)
   1294e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12952:	3000      	adds	r0, #0
   12954:	bf18      	it	ne
   12956:	2001      	movne	r0, #1
   12958:	4770      	bx	lr
   1295a:	bf00      	nop
   1295c:	4000f000 	.word	0x4000f000

00012960 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12960:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12962:	4c13      	ldr	r4, [pc, #76]	; (129b0 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12964:	4d13      	ldr	r5, [pc, #76]	; (129b4 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12966:	2303      	movs	r3, #3
   12968:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1296c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12970:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12974:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12978:	3b01      	subs	r3, #1
   1297a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   1297e:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12980:	4b0d      	ldr	r3, [pc, #52]	; (129b8 <radio_ar_configure+0x58>)
   12982:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   12986:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12988:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1298c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12990:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12994:	f7ff fe46 	bl	12624 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12998:	4b08      	ldr	r3, [pc, #32]	; (129bc <radio_ar_configure+0x5c>)
   1299a:	4a09      	ldr	r2, [pc, #36]	; (129c0 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1299c:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   129a0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   129a4:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   129a6:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   129aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   129ae:	bd38      	pop	{r3, r4, r5, pc}
   129b0:	4000f000 	.word	0x4000f000
   129b4:	40001000 	.word	0x40001000
   129b8:	2000149c 	.word	0x2000149c
   129bc:	4001f000 	.word	0x4001f000
   129c0:	40001128 	.word	0x40001128

000129c4 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   129c4:	4b01      	ldr	r3, [pc, #4]	; (129cc <radio_ar_match_get+0x8>)
   129c6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   129ca:	4770      	bx	lr
   129cc:	4000f000 	.word	0x4000f000

000129d0 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   129d0:	4a04      	ldr	r2, [pc, #16]	; (129e4 <radio_ar_status_reset+0x14>)
   129d2:	2300      	movs	r3, #0
   129d4:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   129d8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   129dc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   129e0:	4770      	bx	lr
   129e2:	bf00      	nop
   129e4:	40001000 	.word	0x40001000

000129e8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   129e8:	4b08      	ldr	r3, [pc, #32]	; (12a0c <radio_ar_has_match+0x24>)
   129ea:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   129ee:	b160      	cbz	r0, 12a0a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   129f0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   129f4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   129f8:	b138      	cbz	r0, 12a0a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   129fa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   129fe:	b120      	cbz	r0, 12a0a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12a00:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12a04:	fab0 f080 	clz	r0, r0
   12a08:	0940      	lsrs	r0, r0, #5
}
   12a0a:	4770      	bx	lr
   12a0c:	40001000 	.word	0x40001000

00012a10 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12a10:	2901      	cmp	r1, #1
{
   12a12:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12a14:	d00e      	beq.n	12a34 <mayfly_enable_cb+0x24>
   12a16:	4b0d      	ldr	r3, [pc, #52]	; (12a4c <mayfly_enable_cb+0x3c>)
   12a18:	9301      	str	r3, [sp, #4]
   12a1a:	9300      	str	r3, [sp, #0]
   12a1c:	4a0c      	ldr	r2, [pc, #48]	; (12a50 <mayfly_enable_cb+0x40>)
   12a1e:	4b0d      	ldr	r3, [pc, #52]	; (12a54 <mayfly_enable_cb+0x44>)
   12a20:	490d      	ldr	r1, [pc, #52]	; (12a58 <mayfly_enable_cb+0x48>)
   12a22:	480e      	ldr	r0, [pc, #56]	; (12a5c <mayfly_enable_cb+0x4c>)
   12a24:	f7ee fab2 	bl	f8c <printk>
   12a28:	4040      	eors	r0, r0
   12a2a:	f380 8811 	msr	BASEPRI, r0
   12a2e:	f04f 0004 	mov.w	r0, #4
   12a32:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12a34:	2018      	movs	r0, #24
	if (enable) {
   12a36:	b122      	cbz	r2, 12a42 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12a38:	b003      	add	sp, #12
   12a3a:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   12a3e:	f7ee bf17 	b.w	1870 <_arch_irq_enable>
}
   12a42:	b003      	add	sp, #12
   12a44:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   12a48:	f7ee bf22 	b.w	1890 <_arch_irq_disable>
   12a4c:	00014b99 	.word	0x00014b99
   12a50:	00015f55 	.word	0x00015f55
   12a54:	0001870c 	.word	0x0001870c
   12a58:	00015fa4 	.word	0x00015fa4
   12a5c:	0001873b 	.word	0x0001873b

00012a60 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12a60:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   12a62:	b181      	cbz	r1, 12a86 <mayfly_is_enabled+0x26>
   12a64:	2901      	cmp	r1, #1
   12a66:	d014      	beq.n	12a92 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12a68:	4b0b      	ldr	r3, [pc, #44]	; (12a98 <mayfly_is_enabled+0x38>)
   12a6a:	9301      	str	r3, [sp, #4]
   12a6c:	9300      	str	r3, [sp, #0]
   12a6e:	4a0b      	ldr	r2, [pc, #44]	; (12a9c <mayfly_is_enabled+0x3c>)
   12a70:	4b0b      	ldr	r3, [pc, #44]	; (12aa0 <mayfly_is_enabled+0x40>)
   12a72:	490c      	ldr	r1, [pc, #48]	; (12aa4 <mayfly_is_enabled+0x44>)
   12a74:	480c      	ldr	r0, [pc, #48]	; (12aa8 <mayfly_is_enabled+0x48>)
   12a76:	f7ee fa89 	bl	f8c <printk>
   12a7a:	4040      	eors	r0, r0
   12a7c:	f380 8811 	msr	BASEPRI, r0
   12a80:	f04f 0004 	mov.w	r0, #4
   12a84:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   12a86:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   12a88:	b003      	add	sp, #12
   12a8a:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   12a8e:	f7ee bf13 	b.w	18b8 <_arch_irq_is_enabled>
   12a92:	2018      	movs	r0, #24
   12a94:	e7f8      	b.n	12a88 <mayfly_is_enabled+0x28>
   12a96:	bf00      	nop
   12a98:	00014b99 	.word	0x00014b99
   12a9c:	00015f55 	.word	0x00015f55
   12aa0:	0001871d 	.word	0x0001871d
   12aa4:	00015fa4 	.word	0x00015fa4
   12aa8:	00015ec9 	.word	0x00015ec9

00012aac <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12aac:	4288      	cmp	r0, r1
   12aae:	d00a      	beq.n	12ac6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   12ab0:	b918      	cbnz	r0, 12aba <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12ab2:	1e4b      	subs	r3, r1, #1
   12ab4:	4258      	negs	r0, r3
   12ab6:	4158      	adcs	r0, r3
   12ab8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12aba:	2801      	cmp	r0, #1
   12abc:	d105      	bne.n	12aca <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12abe:	fab1 f081 	clz	r0, r1
   12ac2:	0940      	lsrs	r0, r0, #5
   12ac4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12ac6:	2001      	movs	r0, #1
   12ac8:	4770      	bx	lr
   12aca:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   12acc:	4770      	bx	lr
	...

00012ad0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12ad0:	b507      	push	{r0, r1, r2, lr}
   12ad2:	4b0e      	ldr	r3, [pc, #56]	; (12b0c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   12ad4:	b181      	cbz	r1, 12af8 <mayfly_pend+0x28>
   12ad6:	2901      	cmp	r1, #1
   12ad8:	d015      	beq.n	12b06 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   12ada:	4b0d      	ldr	r3, [pc, #52]	; (12b10 <mayfly_pend+0x40>)
   12adc:	9301      	str	r3, [sp, #4]
   12ade:	9300      	str	r3, [sp, #0]
   12ae0:	4a0c      	ldr	r2, [pc, #48]	; (12b14 <mayfly_pend+0x44>)
   12ae2:	4b0d      	ldr	r3, [pc, #52]	; (12b18 <mayfly_pend+0x48>)
   12ae4:	490d      	ldr	r1, [pc, #52]	; (12b1c <mayfly_pend+0x4c>)
   12ae6:	480e      	ldr	r0, [pc, #56]	; (12b20 <mayfly_pend+0x50>)
   12ae8:	f7ee fa50 	bl	f8c <printk>
   12aec:	4040      	eors	r0, r0
   12aee:	f380 8811 	msr	BASEPRI, r0
   12af2:	f04f 0004 	mov.w	r0, #4
   12af6:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12afc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12b00:	b003      	add	sp, #12
   12b02:	f85d fb04 	ldr.w	pc, [sp], #4
   12b06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12b0a:	e7f7      	b.n	12afc <mayfly_pend+0x2c>
   12b0c:	e000e100 	.word	0xe000e100
   12b10:	00014b99 	.word	0x00014b99
   12b14:	00015f55 	.word	0x00015f55
   12b18:	0001872f 	.word	0x0001872f
   12b1c:	00015fa4 	.word	0x00015fa4
   12b20:	00015ec9 	.word	0x00015ec9

00012b24 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12b24:	2803      	cmp	r0, #3
{
   12b26:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12b28:	d90e      	bls.n	12b48 <hal_ticker_instance0_caller_id_get+0x24>
   12b2a:	4b0e      	ldr	r3, [pc, #56]	; (12b64 <hal_ticker_instance0_caller_id_get+0x40>)
   12b2c:	9301      	str	r3, [sp, #4]
   12b2e:	9300      	str	r3, [sp, #0]
   12b30:	4a0d      	ldr	r2, [pc, #52]	; (12b68 <hal_ticker_instance0_caller_id_get+0x44>)
   12b32:	4b0e      	ldr	r3, [pc, #56]	; (12b6c <hal_ticker_instance0_caller_id_get+0x48>)
   12b34:	490e      	ldr	r1, [pc, #56]	; (12b70 <hal_ticker_instance0_caller_id_get+0x4c>)
   12b36:	480f      	ldr	r0, [pc, #60]	; (12b74 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12b38:	f7ee fa28 	bl	f8c <printk>
   12b3c:	4040      	eors	r0, r0
   12b3e:	f380 8811 	msr	BASEPRI, r0
   12b42:	f04f 0004 	mov.w	r0, #4
   12b46:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12b48:	4b0b      	ldr	r3, [pc, #44]	; (12b78 <hal_ticker_instance0_caller_id_get+0x54>)
   12b4a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12b4c:	b938      	cbnz	r0, 12b5e <hal_ticker_instance0_caller_id_get+0x3a>
   12b4e:	4b05      	ldr	r3, [pc, #20]	; (12b64 <hal_ticker_instance0_caller_id_get+0x40>)
   12b50:	9301      	str	r3, [sp, #4]
   12b52:	9300      	str	r3, [sp, #0]
   12b54:	4a04      	ldr	r2, [pc, #16]	; (12b68 <hal_ticker_instance0_caller_id_get+0x44>)
   12b56:	4b05      	ldr	r3, [pc, #20]	; (12b6c <hal_ticker_instance0_caller_id_get+0x48>)
   12b58:	4905      	ldr	r1, [pc, #20]	; (12b70 <hal_ticker_instance0_caller_id_get+0x4c>)
   12b5a:	4808      	ldr	r0, [pc, #32]	; (12b7c <hal_ticker_instance0_caller_id_get+0x58>)
   12b5c:	e7ec      	b.n	12b38 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   12b5e:	b003      	add	sp, #12
   12b60:	f85d fb04 	ldr.w	pc, [sp], #4
   12b64:	00014b99 	.word	0x00014b99
   12b68:	00015f55 	.word	0x00015f55
   12b6c:	0001876b 	.word	0x0001876b
   12b70:	00015fa4 	.word	0x00015fa4
   12b74:	000187ad 	.word	0x000187ad
   12b78:	000187a9 	.word	0x000187a9
   12b7c:	000187ee 	.word	0x000187ee

00012b80 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12b80:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12b82:	3802      	subs	r0, #2
{
   12b84:	461c      	mov	r4, r3
	switch (caller_id) {
   12b86:	2803      	cmp	r0, #3
   12b88:	d818      	bhi.n	12bbc <hal_ticker_instance0_sched+0x3c>
   12b8a:	e8df f000 	tbb	[pc, r0]
   12b8e:	0d02      	.short	0x0d02
   12b90:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12b92:	2903      	cmp	r1, #3
   12b94:	d112      	bne.n	12bbc <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   12b96:	4b19      	ldr	r3, [pc, #100]	; (12bfc <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12b98:	2100      	movs	r1, #0
			m.param = instance;
   12b9a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12b9c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12b9e:	b002      	add	sp, #8
   12ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12ba4:	f7f4 bb34 	b.w	7210 <mayfly_enqueue>
		switch (callee_id) {
   12ba8:	2904      	cmp	r1, #4
   12baa:	d107      	bne.n	12bbc <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12bac:	4b14      	ldr	r3, [pc, #80]	; (12c00 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12bae:	2101      	movs	r1, #1
			m.param = instance;
   12bb0:	609c      	str	r4, [r3, #8]
   12bb2:	e7f3      	b.n	12b9c <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   12bb4:	2903      	cmp	r1, #3
   12bb6:	d010      	beq.n	12bda <hal_ticker_instance0_sched+0x5a>
   12bb8:	2904      	cmp	r1, #4
   12bba:	d013      	beq.n	12be4 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   12bbc:	4b11      	ldr	r3, [pc, #68]	; (12c04 <hal_ticker_instance0_sched+0x84>)
   12bbe:	9301      	str	r3, [sp, #4]
   12bc0:	9300      	str	r3, [sp, #0]
   12bc2:	4a11      	ldr	r2, [pc, #68]	; (12c08 <hal_ticker_instance0_sched+0x88>)
   12bc4:	4b11      	ldr	r3, [pc, #68]	; (12c0c <hal_ticker_instance0_sched+0x8c>)
   12bc6:	4912      	ldr	r1, [pc, #72]	; (12c10 <hal_ticker_instance0_sched+0x90>)
   12bc8:	4812      	ldr	r0, [pc, #72]	; (12c14 <hal_ticker_instance0_sched+0x94>)
   12bca:	f7ee f9df 	bl	f8c <printk>
   12bce:	4040      	eors	r0, r0
   12bd0:	f380 8811 	msr	BASEPRI, r0
   12bd4:	f04f 0004 	mov.w	r0, #4
   12bd8:	df02      	svc	2
			m.param = instance;
   12bda:	4b0f      	ldr	r3, [pc, #60]	; (12c18 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12bdc:	2100      	movs	r1, #0
			m.param = instance;
   12bde:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12be0:	2001      	movs	r0, #1
   12be2:	e7dc      	b.n	12b9e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   12be4:	4b0d      	ldr	r3, [pc, #52]	; (12c1c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12be6:	2101      	movs	r1, #1
			m.param = instance;
   12be8:	609c      	str	r4, [r3, #8]
   12bea:	e7f9      	b.n	12be0 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   12bec:	2904      	cmp	r1, #4
   12bee:	d1e5      	bne.n	12bbc <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12bf0:	4b0b      	ldr	r3, [pc, #44]	; (12c20 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12bf2:	2101      	movs	r1, #1
			m.param = instance;
   12bf4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12bf6:	2003      	movs	r0, #3
   12bf8:	e7d1      	b.n	12b9e <hal_ticker_instance0_sched+0x1e>
   12bfa:	bf00      	nop
   12bfc:	20003e20 	.word	0x20003e20
   12c00:	20003e30 	.word	0x20003e30
   12c04:	00014b99 	.word	0x00014b99
   12c08:	00015f55 	.word	0x00015f55
   12c0c:	0001878e 	.word	0x0001878e
   12c10:	00015fa4 	.word	0x00015fa4
   12c14:	00015ec9 	.word	0x00015ec9
   12c18:	20003e40 	.word	0x20003e40
   12c1c:	20003e50 	.word	0x20003e50
   12c20:	20003e60 	.word	0x20003e60

00012c24 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12c24:	4601      	mov	r1, r0
   12c26:	2000      	movs	r0, #0
   12c28:	f7ff ba62 	b.w	120f0 <cntr_cmp_set>

00012c2c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   12c2c:	4770      	bx	lr
	...

00012c30 <net_buf_pool_get>:
}
   12c30:	4b01      	ldr	r3, [pc, #4]	; (12c38 <net_buf_pool_get+0x8>)
   12c32:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   12c36:	4770      	bx	lr
   12c38:	20003f4c 	.word	0x20003f4c

00012c3c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12c3c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   12c3e:	4b04      	ldr	r3, [pc, #16]	; (12c50 <net_buf_id+0x14>)
   12c40:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   12c44:	69db      	ldr	r3, [r3, #28]
   12c46:	1ac0      	subs	r0, r0, r3
}
   12c48:	4b02      	ldr	r3, [pc, #8]	; (12c54 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   12c4a:	10c0      	asrs	r0, r0, #3
}
   12c4c:	4358      	muls	r0, r3
   12c4e:	4770      	bx	lr
   12c50:	20003f4c 	.word	0x20003f4c
   12c54:	aaaaaaab 	.word	0xaaaaaaab

00012c58 <fixed_data_alloc>:
{
   12c58:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12c5a:	4b09      	ldr	r3, [pc, #36]	; (12c80 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12c5c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12c5e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   12c62:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12c64:	699b      	ldr	r3, [r3, #24]
   12c66:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12c68:	6823      	ldr	r3, [r4, #0]
   12c6a:	429a      	cmp	r2, r3
   12c6c:	bf94      	ite	ls
   12c6e:	600a      	strls	r2, [r1, #0]
   12c70:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12c72:	f7ff ffe3 	bl	12c3c <net_buf_id>
   12c76:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   12c7a:	fb02 3000 	mla	r0, r2, r0, r3
   12c7e:	bd10      	pop	{r4, pc}
   12c80:	20003f4c 	.word	0x20003f4c

00012c84 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12c84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12c88:	4605      	mov	r5, r0
   12c8a:	9101      	str	r1, [sp, #4]
   12c8c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12c8e:	f001 fa11 	bl	140b4 <_impl_k_uptime_get_32>
   12c92:	4607      	mov	r7, r0
	__asm__ volatile(
   12c94:	f04f 0320 	mov.w	r3, #32
   12c98:	f3ef 8811 	mrs	r8, BASEPRI
   12c9c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12ca0:	8a6b      	ldrh	r3, [r5, #18]
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d03d      	beq.n	12d22 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12ca6:	8a2a      	ldrh	r2, [r5, #16]
   12ca8:	429a      	cmp	r2, r3
   12caa:	d92a      	bls.n	12d02 <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12cac:	2100      	movs	r1, #0
   12cae:	4628      	mov	r0, r5
   12cb0:	f000 ff1a 	bl	13ae8 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   12cb4:	b328      	cbz	r0, 12d02 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12cb6:	f388 8811 	msr	BASEPRI, r8
   12cba:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   12cbc:	9b01      	ldr	r3, [sp, #4]
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	d03c      	beq.n	12d3c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   12cc2:	1c73      	adds	r3, r6, #1
   12cc4:	2b01      	cmp	r3, #1
   12cc6:	d906      	bls.n	12cd6 <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12cc8:	f001 f9f4 	bl	140b4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   12ccc:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   12cce:	42b0      	cmp	r0, r6
   12cd0:	bf94      	ite	ls
   12cd2:	1a36      	subls	r6, r6, r0
   12cd4:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12cd6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12cd8:	4f1e      	ldr	r7, [pc, #120]	; (12d54 <net_buf_alloc_len+0xd0>)
   12cda:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   12cde:	4632      	mov	r2, r6
   12ce0:	699b      	ldr	r3, [r3, #24]
   12ce2:	681b      	ldr	r3, [r3, #0]
   12ce4:	a901      	add	r1, sp, #4
   12ce6:	681b      	ldr	r3, [r3, #0]
   12ce8:	4620      	mov	r0, r4
   12cea:	4798      	blx	r3
   12cec:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   12cee:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12cf0:	bb28      	cbnz	r0, 12d3e <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12cf2:	79a0      	ldrb	r0, [r4, #6]
   12cf4:	4621      	mov	r1, r4
   12cf6:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   12cfa:	f000 fed6 	bl	13aaa <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   12cfe:	462c      	mov	r4, r5
   12d00:	e018      	b.n	12d34 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   12d02:	8a68      	ldrh	r0, [r5, #18]
   12d04:	1e43      	subs	r3, r0, #1
   12d06:	826b      	strh	r3, [r5, #18]
   12d08:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   12d0c:	8a2c      	ldrh	r4, [r5, #16]
   12d0e:	1a24      	subs	r4, r4, r0
   12d10:	69e8      	ldr	r0, [r5, #28]
   12d12:	2318      	movs	r3, #24
   12d14:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12d18:	4b0e      	ldr	r3, [pc, #56]	; (12d54 <net_buf_alloc_len+0xd0>)
   12d1a:	1aed      	subs	r5, r5, r3
   12d1c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   12d1e:	71a5      	strb	r5, [r4, #6]
		goto success;
   12d20:	e7cc      	b.n	12cbc <net_buf_alloc_len+0x38>
   12d22:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12d26:	4631      	mov	r1, r6
   12d28:	4628      	mov	r0, r5
   12d2a:	f000 fedd 	bl	13ae8 <_impl_k_queue_get>
		return NULL;
   12d2e:	4604      	mov	r4, r0
	if (!buf) {
   12d30:	2800      	cmp	r0, #0
   12d32:	d1c3      	bne.n	12cbc <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12d34:	4620      	mov	r0, r4
   12d36:	b002      	add	sp, #8
   12d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   12d3c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   12d3e:	2301      	movs	r3, #1
   12d40:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12d42:	2300      	movs	r3, #0
	buf->frags = NULL;
   12d44:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12d46:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12d48:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   12d4a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   12d4c:	6923      	ldr	r3, [r4, #16]
   12d4e:	81e2      	strh	r2, [r4, #14]
   12d50:	60a3      	str	r3, [r4, #8]
	return buf;
   12d52:	e7ef      	b.n	12d34 <net_buf_alloc_len+0xb0>
   12d54:	20003f4c 	.word	0x20003f4c

00012d58 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12d58:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   12d5a:	685b      	ldr	r3, [r3, #4]
   12d5c:	460a      	mov	r2, r1
   12d5e:	6819      	ldr	r1, [r3, #0]
   12d60:	f7ff bf90 	b.w	12c84 <net_buf_alloc_len>

00012d64 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12d64:	b570      	push	{r4, r5, r6, lr}
   12d66:	4606      	mov	r6, r0
   12d68:	f000 febe 	bl	13ae8 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12d6c:	4605      	mov	r5, r0
   12d6e:	b128      	cbz	r0, 12d7c <net_buf_get+0x18>
   12d70:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12d72:	7963      	ldrb	r3, [r4, #5]
   12d74:	f013 0301 	ands.w	r3, r3, #1
   12d78:	d102      	bne.n	12d80 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12d7a:	6023      	str	r3, [r4, #0]

	return buf;
}
   12d7c:	4628      	mov	r0, r5
   12d7e:	bd70      	pop	{r4, r5, r6, pc}
   12d80:	2100      	movs	r1, #0
   12d82:	4630      	mov	r0, r6
   12d84:	f000 feb0 	bl	13ae8 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12d88:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12d8a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   12d8c:	f023 0301 	bic.w	r3, r3, #1
   12d90:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12d92:	4604      	mov	r4, r0
   12d94:	e7ed      	b.n	12d72 <net_buf_get+0xe>

00012d96 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12d96:	6883      	ldr	r3, [r0, #8]
   12d98:	4419      	add	r1, r3
   12d9a:	6001      	str	r1, [r0, #0]
   12d9c:	4770      	bx	lr

00012d9e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12d9e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12da0:	460a      	mov	r2, r1
   12da2:	6814      	ldr	r4, [r2, #0]
   12da4:	b914      	cbnz	r4, 12dac <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12da6:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12da8:	f000 be84 	b.w	13ab4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   12dac:	7953      	ldrb	r3, [r2, #5]
   12dae:	f043 0301 	orr.w	r3, r3, #1
   12db2:	7153      	strb	r3, [r2, #5]
   12db4:	4622      	mov	r2, r4
   12db6:	e7f4      	b.n	12da2 <net_buf_put+0x4>

00012db8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dba:	4d15      	ldr	r5, [pc, #84]	; (12e10 <net_buf_unref+0x58>)
   12dbc:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12dbe:	2600      	movs	r6, #0
	while (buf) {
   12dc0:	b904      	cbnz	r4, 12dc4 <net_buf_unref+0xc>
   12dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   12dc4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12dc6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   12dc8:	3b01      	subs	r3, #1
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	7123      	strb	r3, [r4, #4]
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d1f7      	bne.n	12dc2 <net_buf_unref+0xa>
		if (buf->__buf) {
   12dd2:	6921      	ldr	r1, [r4, #16]
   12dd4:	b159      	cbz	r1, 12dee <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12dd6:	7963      	ldrb	r3, [r4, #5]
   12dd8:	079b      	lsls	r3, r3, #30
   12dda:	d407      	bmi.n	12dec <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12ddc:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12dde:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   12de2:	4620      	mov	r0, r4
   12de4:	699b      	ldr	r3, [r3, #24]
   12de6:	681b      	ldr	r3, [r3, #0]
   12de8:	689b      	ldr	r3, [r3, #8]
   12dea:	4798      	blx	r3
			buf->__buf = NULL;
   12dec:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   12dee:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12df0:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   12df2:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   12df6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   12df8:	695b      	ldr	r3, [r3, #20]
   12dfa:	b11b      	cbz	r3, 12e04 <net_buf_unref+0x4c>
			pool->destroy(buf);
   12dfc:	4620      	mov	r0, r4
   12dfe:	4798      	blx	r3
{
   12e00:	463c      	mov	r4, r7
   12e02:	e7dd      	b.n	12dc0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   12e04:	4621      	mov	r1, r4
   12e06:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   12e0a:	f000 fe4e 	bl	13aaa <k_queue_prepend>
   12e0e:	e7f7      	b.n	12e00 <net_buf_unref+0x48>
   12e10:	20003f4c 	.word	0x20003f4c

00012e14 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12e14:	7903      	ldrb	r3, [r0, #4]
   12e16:	3301      	adds	r3, #1
   12e18:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12e1a:	4770      	bx	lr

00012e1c <net_buf_simple_add>:
	return buf->data + buf->len;
   12e1c:	8883      	ldrh	r3, [r0, #4]
   12e1e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12e20:	4419      	add	r1, r3
   12e22:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12e24:	18d0      	adds	r0, r2, r3
   12e26:	4770      	bx	lr

00012e28 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12e28:	b430      	push	{r4, r5}
   12e2a:	8883      	ldrh	r3, [r0, #4]
   12e2c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   12e2e:	189d      	adds	r5, r3, r2
   12e30:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12e32:	18e0      	adds	r0, r4, r3
}
   12e34:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12e36:	f7ee beed 	b.w	1c14 <memcpy>

00012e3a <net_buf_simple_add_u8>:
   12e3a:	8883      	ldrh	r3, [r0, #4]
   12e3c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   12e3e:	b510      	push	{r4, lr}
	buf->len += len;
   12e40:	1c5c      	adds	r4, r3, #1
   12e42:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12e44:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12e46:	18d0      	adds	r0, r2, r3
   12e48:	bd10      	pop	{r4, pc}

00012e4a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12e4a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12e4c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12e4e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12e50:	4411      	add	r1, r2
	buf->data -= len;
   12e52:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12e54:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12e56:	4618      	mov	r0, r3
   12e58:	4770      	bx	lr

00012e5a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12e5a:	8883      	ldrh	r3, [r0, #4]
   12e5c:	1a5b      	subs	r3, r3, r1
   12e5e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12e60:	6803      	ldr	r3, [r0, #0]
   12e62:	4419      	add	r1, r3
   12e64:	6001      	str	r1, [r0, #0]
}
   12e66:	4608      	mov	r0, r1
   12e68:	4770      	bx	lr

00012e6a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12e6a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12e6c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12e6e:	2101      	movs	r1, #1
	val = buf->data[0];
   12e70:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12e72:	f7ff fff2 	bl	12e5a <net_buf_simple_pull>

	return val;
}
   12e76:	4610      	mov	r0, r2
   12e78:	bd08      	pop	{r3, pc}

00012e7a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12e7a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12e7c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12e7e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12e80:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12e82:	f7ff ffea 	bl	12e5a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12e86:	4610      	mov	r0, r2
   12e88:	bd08      	pop	{r3, pc}

00012e8a <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12e8a:	6802      	ldr	r2, [r0, #0]
   12e8c:	6880      	ldr	r0, [r0, #8]
}
   12e8e:	1a10      	subs	r0, r2, r0
   12e90:	4770      	bx	lr

00012e92 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12e92:	6802      	ldr	r2, [r0, #0]
   12e94:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12e96:	88c3      	ldrh	r3, [r0, #6]
   12e98:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12e9a:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12e9c:	1a9b      	subs	r3, r3, r2
}
   12e9e:	1a18      	subs	r0, r3, r0
   12ea0:	4770      	bx	lr

00012ea2 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ea2:	6800      	ldr	r0, [r0, #0]
   12ea4:	6880      	ldr	r0, [r0, #8]
   12ea6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ea8:	b941      	cbnz	r1, 12ebc <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12eaa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12eae:	fa21 f202 	lsr.w	r2, r1, r2
   12eb2:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12eb6:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12eb8:	2000      	movs	r0, #0
   12eba:	4770      	bx	lr
		*value = gpio->IN;
   12ebc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12ec0:	e7f9      	b.n	12eb6 <gpio_nrf5_read+0x14>

00012ec2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ec2:	6800      	ldr	r0, [r0, #0]
   12ec4:	6880      	ldr	r0, [r0, #8]
   12ec6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ec8:	b949      	cbnz	r1, 12ede <gpio_nrf5_write+0x1c>
   12eca:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12ecc:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12ece:	b11b      	cbz	r3, 12ed8 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12ed0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12ed4:	2000      	movs	r0, #0
   12ed6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12ed8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12edc:	e7fa      	b.n	12ed4 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12ede:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12ee2:	e7f7      	b.n	12ed4 <gpio_nrf5_write+0x12>

00012ee4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12ee4:	6883      	ldr	r3, [r0, #8]
   12ee6:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12ee8:	b172      	cbz	r2, 12f08 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12eea:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12eec:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12eee:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12ef0:	b902      	cbnz	r2, 12ef4 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12ef2:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12ef4:	2000      	movs	r0, #0
   12ef6:	4770      	bx	lr
	parent->next = child;
   12ef8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12efa:	6858      	ldr	r0, [r3, #4]
   12efc:	4281      	cmp	r1, r0
	list->tail = node;
   12efe:	bf08      	it	eq
   12f00:	605a      	streq	r2, [r3, #4]
   12f02:	e00d      	b.n	12f20 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12f04:	4602      	mov	r2, r0
   12f06:	6800      	ldr	r0, [r0, #0]
   12f08:	2800      	cmp	r0, #0
   12f0a:	d0f3      	beq.n	12ef4 <gpio_nrf5_manage_callback+0x10>
   12f0c:	4281      	cmp	r1, r0
   12f0e:	d1f9      	bne.n	12f04 <gpio_nrf5_manage_callback+0x20>
   12f10:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   12f12:	2a00      	cmp	r2, #0
   12f14:	d1f0      	bne.n	12ef8 <gpio_nrf5_manage_callback+0x14>
   12f16:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12f18:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   12f1a:	4291      	cmp	r1, r2
   12f1c:	d100      	bne.n	12f20 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   12f1e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   12f20:	2300      	movs	r3, #0
   12f22:	600b      	str	r3, [r1, #0]
   12f24:	e7e6      	b.n	12ef4 <gpio_nrf5_manage_callback+0x10>
	...

00012f28 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   12f28:	4b0c      	ldr	r3, [pc, #48]	; (12f5c <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   12f2a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12f2c:	4d0c      	ldr	r5, [pc, #48]	; (12f60 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   12f2e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12f30:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   12f32:	fa24 f203 	lsr.w	r2, r4, r3
   12f36:	07d2      	lsls	r2, r2, #31
   12f38:	d508      	bpl.n	12f4c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12f3a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   12f3e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   12f42:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   12f46:	4282      	cmp	r2, r0
   12f48:	d100      	bne.n	12f4c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   12f4a:	b121      	cbz	r1, 12f56 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   12f4c:	3301      	adds	r3, #1
   12f4e:	2b08      	cmp	r3, #8
   12f50:	d1ef      	bne.n	12f32 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   12f52:	f06f 0312 	mvn.w	r3, #18
}
   12f56:	4618      	mov	r0, r3
   12f58:	bd30      	pop	{r4, r5, pc}
   12f5a:	bf00      	nop
   12f5c:	200016f4 	.word	0x200016f4
   12f60:	40006000 	.word	0x40006000

00012f64 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   12f64:	b570      	push	{r4, r5, r6, lr}
   12f66:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12f68:	460d      	mov	r5, r1
   12f6a:	b9c9      	cbnz	r1, 12fa0 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12f6c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12f6e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12f70:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12f72:	4610      	mov	r0, r2
   12f74:	7919      	ldrb	r1, [r3, #4]
   12f76:	f7ff ffd7 	bl	12f28 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12f7a:	2800      	cmp	r0, #0
   12f7c:	db12      	blt.n	12fa4 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   12f7e:	68b2      	ldr	r2, [r6, #8]
   12f80:	2301      	movs	r3, #1
   12f82:	fa03 f404 	lsl.w	r4, r3, r4
   12f86:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   12f88:	f100 0140 	add.w	r1, r0, #64	; 0x40
   12f8c:	4a06      	ldr	r2, [pc, #24]	; (12fa8 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   12f8e:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   12f90:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   12f94:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   12f98:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   12f9c:	4628      	mov	r0, r5
   12f9e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12fa0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12fa4:	bd70      	pop	{r4, r5, r6, pc}
   12fa6:	bf00      	nop
   12fa8:	40006000 	.word	0x40006000

00012fac <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   12fac:	b570      	push	{r4, r5, r6, lr}
   12fae:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12fb0:	460d      	mov	r5, r1
   12fb2:	b9b1      	cbnz	r1, 12fe2 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   12fb4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12fb6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   12fb8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   12fba:	4610      	mov	r0, r2
   12fbc:	7919      	ldrb	r1, [r3, #4]
   12fbe:	f7ff ffb3 	bl	12f28 <gpiote_find_channel.isra.4>
		if (i < 0) {
   12fc2:	2800      	cmp	r0, #0
   12fc4:	db0f      	blt.n	12fe6 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   12fc6:	68b2      	ldr	r2, [r6, #8]
   12fc8:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   12fca:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   12fce:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   12fd2:	4b05      	ldr	r3, [pc, #20]	; (12fe8 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   12fd4:	ea22 0404 	bic.w	r4, r2, r4
   12fd8:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   12fda:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   12fde:	4628      	mov	r0, r5
   12fe0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   12fe2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   12fe6:	bd70      	pop	{r4, r5, r6, pc}
   12fe8:	40006000 	.word	0x40006000

00012fec <gpio_nrf5_config>:
{
   12fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ff0:	6806      	ldr	r6, [r0, #0]
{
   12ff2:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12ff4:	68b2      	ldr	r2, [r6, #8]
   12ff6:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   12ff8:	b119      	cbz	r1, 13002 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   12ffa:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13002:	f403 7240 	and.w	r2, r3, #768	; 0x300
   13006:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   1300a:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   1300e:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13012:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13016:	d058      	beq.n	130ca <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13018:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1301c:	bf0c      	ite	eq
   1301e:	2204      	moveq	r2, #4
   13020:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13022:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13026:	bf08      	it	eq
   13028:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1302a:	f013 0f01 	tst.w	r3, #1
   1302e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   13032:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 13100 <gpio_nrf5_config+0x114>
   13036:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   1303a:	d04f      	beq.n	130dc <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   1303c:	2a0c      	cmp	r2, #12
   1303e:	d146      	bne.n	130ce <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   13040:	2701      	movs	r7, #1
   13042:	40a7      	lsls	r7, r4
   13044:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13048:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   1304a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1304e:	f041 0103 	orr.w	r1, r1, #3
   13052:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13054:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   13058:	f013 0002 	ands.w	r0, r3, #2
   1305c:	d049      	beq.n	130f2 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1305e:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   13060:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13062:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13066:	d5c8      	bpl.n	12ffa <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13068:	065a      	lsls	r2, r3, #25
   1306a:	d43d      	bmi.n	130e8 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   1306c:	f013 0f04 	tst.w	r3, #4
   13070:	bf14      	ite	ne
   13072:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   13076:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   1307a:	4e1f      	ldr	r6, [pc, #124]	; (130f8 <gpio_nrf5_config+0x10c>)
   1307c:	6837      	ldr	r7, [r6, #0]
   1307e:	4638      	mov	r0, r7
   13080:	f7ed f8e0 	bl	244 <__popcountsi2>
   13084:	2808      	cmp	r0, #8
   13086:	d032      	beq.n	130ee <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   13088:	4641      	mov	r1, r8
   1308a:	4620      	mov	r0, r4
   1308c:	f7ff ff4c 	bl	12f28 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13090:	2800      	cmp	r0, #0
   13092:	da08      	bge.n	130a6 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   13094:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   13096:	fa93 f0a3 	rbit	r0, r3
   1309a:	2b00      	cmp	r3, #0
   1309c:	fab0 f080 	clz	r0, r0
   130a0:	bf08      	it	eq
   130a2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   130a6:	2301      	movs	r3, #1
   130a8:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   130aa:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   130ac:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   130ae:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   130b2:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   130b4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   130b8:	4b10      	ldr	r3, [pc, #64]	; (130fc <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   130ba:	f044 0401 	orr.w	r4, r4, #1
   130be:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   130c0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   130c4:	2000      	movs	r0, #0
   130c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   130ca:	220c      	movs	r2, #12
   130cc:	e7a9      	b.n	13022 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   130ce:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   130d0:	bf02      	ittt	eq
   130d2:	2701      	moveq	r7, #1
   130d4:	40a7      	lsleq	r7, r4
   130d6:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   130da:	e7b5      	b.n	13048 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   130dc:	4461      	add	r1, ip
   130de:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   130e2:	430a      	orrs	r2, r1
   130e4:	433a      	orrs	r2, r7
   130e6:	e7b5      	b.n	13054 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   130e8:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   130ec:	e7c5      	b.n	1307a <gpio_nrf5_config+0x8e>
			return -EIO;
   130ee:	f06f 0004 	mvn.w	r0, #4
}
   130f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130f6:	bf00      	nop
   130f8:	200016f4 	.word	0x200016f4
   130fc:	40006000 	.word	0x40006000
   13100:	0001882c 	.word	0x0001882c

00013104 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   13104:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   13106:	2200      	movs	r2, #0
   13108:	2105      	movs	r1, #5
   1310a:	2006      	movs	r0, #6
   1310c:	f7ee fbe2 	bl	18d4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13110:	2006      	movs	r0, #6
   13112:	f7ee fbad 	bl	1870 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13116:	2000      	movs	r0, #0
   13118:	bd08      	pop	{r3, pc}
	...

0001311c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1311c:	2100      	movs	r1, #0
{
   1311e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13120:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13122:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13124:	2501      	movs	r5, #1
   13126:	008b      	lsls	r3, r1, #2
   13128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1312c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13130:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13134:	b140      	cbz	r0, 13148 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13136:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   1313a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   1313e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13142:	fa05 f303 	lsl.w	r3, r5, r3
   13146:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13148:	3101      	adds	r1, #1
   1314a:	2908      	cmp	r1, #8
   1314c:	d1eb      	bne.n	13126 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   1314e:	4e08      	ldr	r6, [pc, #32]	; (13170 <gpio_nrf5_port_isr+0x54>)
   13150:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13152:	689d      	ldr	r5, [r3, #8]
   13154:	681c      	ldr	r4, [r3, #0]
   13156:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13158:	b14c      	cbz	r4, 1316e <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   1315a:	68a3      	ldr	r3, [r4, #8]
   1315c:	421d      	tst	r5, r3
   1315e:	d004      	beq.n	1316a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13160:	6863      	ldr	r3, [r4, #4]
   13162:	462a      	mov	r2, r5
   13164:	4621      	mov	r1, r4
   13166:	4630      	mov	r0, r6
   13168:	4798      	blx	r3
	return node->next;
   1316a:	6824      	ldr	r4, [r4, #0]
   1316c:	e7f4      	b.n	13158 <gpio_nrf5_port_isr+0x3c>
   1316e:	bd70      	pop	{r4, r5, r6, pc}
   13170:	20003edc 	.word	0x20003edc

00013174 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13174:	4b03      	ldr	r3, [pc, #12]	; (13184 <uart_nrfx_err_check+0x10>)
   13176:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13178:	b118      	cbz	r0, 13182 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1317a:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   1317e:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   13182:	4770      	bx	lr
   13184:	40002124 	.word	0x40002124

00013188 <uart_nrfx_irq_tx_enable>:
    p_reg->INTENSET = int_mask;
   13188:	4b02      	ldr	r3, [pc, #8]	; (13194 <uart_nrfx_irq_tx_enable+0xc>)
   1318a:	2280      	movs	r2, #128	; 0x80
   1318c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   13190:	4770      	bx	lr
   13192:	bf00      	nop
   13194:	40002000 	.word	0x40002000

00013198 <uart_nrfx_irq_tx_disable>:
    p_reg->INTENCLR = int_mask;
   13198:	4b02      	ldr	r3, [pc, #8]	; (131a4 <uart_nrfx_irq_tx_disable+0xc>)
   1319a:	2280      	movs	r2, #128	; 0x80
   1319c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   131a0:	4770      	bx	lr
   131a2:	bf00      	nop
   131a4:	40002000 	.word	0x40002000

000131a8 <uart_nrfx_irq_tx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   131a8:	4b02      	ldr	r3, [pc, #8]	; (131b4 <uart_nrfx_irq_tx_ready+0xc>)
   131aa:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven transfer ready function */
static int uart_nrfx_irq_tx_ready(struct device *dev)
{
	return nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY);
}
   131ac:	3000      	adds	r0, #0
   131ae:	bf18      	it	ne
   131b0:	2001      	movne	r0, #1
   131b2:	4770      	bx	lr
   131b4:	4000211c 	.word	0x4000211c

000131b8 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = int_mask;
   131b8:	4b02      	ldr	r3, [pc, #8]	; (131c4 <uart_nrfx_irq_rx_enable+0xc>)
   131ba:	2204      	movs	r2, #4
   131bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   131c0:	4770      	bx	lr
   131c2:	bf00      	nop
   131c4:	40002000 	.word	0x40002000

000131c8 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = int_mask;
   131c8:	4b02      	ldr	r3, [pc, #8]	; (131d4 <uart_nrfx_irq_rx_disable+0xc>)
   131ca:	2204      	movs	r2, #4
   131cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   131d0:	4770      	bx	lr
   131d2:	bf00      	nop
   131d4:	40002000 	.word	0x40002000

000131d8 <uart_nrfx_irq_tx_complete>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   131d8:	4b02      	ldr	r3, [pc, #8]	; (131e4 <uart_nrfx_irq_tx_complete+0xc>)
   131da:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven transfer empty function */
static int uart_nrfx_irq_tx_complete(struct device *dev)
{
	return !nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY);
}
   131dc:	fab0 f080 	clz	r0, r0
   131e0:	0940      	lsrs	r0, r0, #5
   131e2:	4770      	bx	lr
   131e4:	4000211c 	.word	0x4000211c

000131e8 <uart_nrfx_irq_rx_ready>:
   131e8:	4b02      	ldr	r3, [pc, #8]	; (131f4 <uart_nrfx_irq_rx_ready+0xc>)
   131ea:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY);
}
   131ec:	3000      	adds	r0, #0
   131ee:	bf18      	it	ne
   131f0:	2001      	movne	r0, #1
   131f2:	4770      	bx	lr
   131f4:	40002108 	.word	0x40002108

000131f8 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = int_mask;
   131f8:	4b02      	ldr	r3, [pc, #8]	; (13204 <uart_nrfx_irq_err_enable+0xc>)
   131fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   131fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   13202:	4770      	bx	lr
   13204:	40002000 	.word	0x40002000

00013208 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = int_mask;
   13208:	4b02      	ldr	r3, [pc, #8]	; (13214 <uart_nrfx_irq_err_disable+0xc>)
   1320a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1320e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   13212:	4770      	bx	lr
   13214:	40002000 	.word	0x40002000

00013218 <uart_nrfx_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrfx_irq_update(struct device *dev)
{
	return 1;
}
   13218:	2001      	movs	r0, #1
   1321a:	4770      	bx	lr

0001321c <uart_nrfx_irq_callback_set>:
/** Set the callback function */
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_t cb)
{
	(void)dev;
	m_irq_callback = cb;
   1321c:	4b01      	ldr	r3, [pc, #4]	; (13224 <uart_nrfx_irq_callback_set+0x8>)
   1321e:	6019      	str	r1, [r3, #0]
   13220:	4770      	bx	lr
   13222:	bf00      	nop
   13224:	200016f8 	.word	0x200016f8

00013228 <uart_nrfx_isr>:
 */
static void uart_nrfx_isr(void *arg)
{
	struct device *dev = arg;

	if (m_irq_callback) {
   13228:	4b02      	ldr	r3, [pc, #8]	; (13234 <uart_nrfx_isr+0xc>)
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	b103      	cbz	r3, 13230 <uart_nrfx_isr+0x8>
		m_irq_callback(dev);
   1322e:	4718      	bx	r3
   13230:	4770      	bx	lr
   13232:	bf00      	nop
   13234:	200016f8 	.word	0x200016f8

00013238 <uart_nrfx_irq_is_pending>:
    return (bool)(p_reg->INTENSET & int_mask);
   13238:	4b0a      	ldr	r3, [pc, #40]	; (13264 <uart_nrfx_irq_is_pending+0x2c>)
   1323a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   1323e:	0612      	lsls	r2, r2, #24
   13240:	d502      	bpl.n	13248 <uart_nrfx_irq_is_pending+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13242:	4a09      	ldr	r2, [pc, #36]	; (13268 <uart_nrfx_irq_is_pending+0x30>)
   13244:	6812      	ldr	r2, [r2, #0]
					   NRF_UART_INT_MASK_TXDRDY) &&
   13246:	b952      	cbnz	r2, 1325e <uart_nrfx_irq_is_pending+0x26>
    return (bool)(p_reg->INTENSET & int_mask);
   13248:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
		||
   1324c:	f010 0004 	ands.w	r0, r0, #4
   13250:	d006      	beq.n	13260 <uart_nrfx_irq_is_pending+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13252:	4b06      	ldr	r3, [pc, #24]	; (1326c <uart_nrfx_irq_is_pending+0x34>)
   13254:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   13256:	3000      	adds	r0, #0
   13258:	bf18      	it	ne
   1325a:	2001      	movne	r0, #1
   1325c:	4770      	bx	lr
		||
   1325e:	2001      	movs	r0, #1
}
   13260:	4770      	bx	lr
   13262:	bf00      	nop
   13264:	40002000 	.word	0x40002000
   13268:	4000211c 	.word	0x4000211c
   1326c:	40002108 	.word	0x40002108

00013270 <uart_nrfx_fifo_read>:
{
   13270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   13272:	2300      	movs	r3, #0
   13274:	4c09      	ldr	r4, [pc, #36]	; (1329c <uart_nrfx_fifo_read+0x2c>)
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

__STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type * p_reg)
{
    return p_reg->RXD;
   13276:	4f0a      	ldr	r7, [pc, #40]	; (132a0 <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13278:	461e      	mov	r6, r3
   1327a:	b2d8      	uxtb	r0, r3
   1327c:	1a15      	subs	r5, r2, r0
   1327e:	2d00      	cmp	r5, #0
   13280:	dd02      	ble.n	13288 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13282:	6825      	ldr	r5, [r4, #0]
   13284:	3301      	adds	r3, #1
   13286:	b90d      	cbnz	r5, 1328c <uart_nrfx_fifo_read+0x1c>
}
   13288:	b003      	add	sp, #12
   1328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1328c:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1328e:	6825      	ldr	r5, [r4, #0]
   13290:	9501      	str	r5, [sp, #4]
    (void)dummy;
   13292:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   13294:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   13298:	540d      	strb	r5, [r1, r0]
   1329a:	e7ee      	b.n	1327a <uart_nrfx_fifo_read+0xa>
   1329c:	40002108 	.word	0x40002108
   132a0:	40002000 	.word	0x40002000

000132a4 <uart_nrfx_fifo_fill>:
{
   132a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((len - num_tx > 0) &&
   132a6:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   132a8:	4c09      	ldr	r4, [pc, #36]	; (132d0 <uart_nrfx_fifo_fill+0x2c>)
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   132aa:	4f0a      	ldr	r7, [pc, #40]	; (132d4 <uart_nrfx_fifo_fill+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132ac:	461e      	mov	r6, r3
   132ae:	b2d8      	uxtb	r0, r3
   132b0:	1a15      	subs	r5, r2, r0
   132b2:	2d00      	cmp	r5, #0
   132b4:	dd02      	ble.n	132bc <uart_nrfx_fifo_fill+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   132b6:	6825      	ldr	r5, [r4, #0]
   132b8:	3301      	adds	r3, #1
   132ba:	b90d      	cbnz	r5, 132c0 <uart_nrfx_fifo_fill+0x1c>
}
   132bc:	b003      	add	sp, #12
   132be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132c0:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   132c2:	6825      	ldr	r5, [r4, #0]
   132c4:	9501      	str	r5, [sp, #4]
    p_reg->TXD = txd;
   132c6:	5c08      	ldrb	r0, [r1, r0]
    (void)dummy;
   132c8:	9d01      	ldr	r5, [sp, #4]
    p_reg->TXD = txd;
   132ca:	f8c7 051c 	str.w	r0, [r7, #1308]	; 0x51c
   132ce:	e7ee      	b.n	132ae <uart_nrfx_fifo_fill+0xa>
   132d0:	4000211c 	.word	0x4000211c
   132d4:	40002000 	.word	0x40002000

000132d8 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132d8:	4b07      	ldr	r3, [pc, #28]	; (132f8 <uart_nrfx_poll_out+0x20>)
   132da:	2200      	movs	r2, #0
   132dc:	601a      	str	r2, [r3, #0]
{
   132de:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   132e0:	681a      	ldr	r2, [r3, #0]
   132e2:	9201      	str	r2, [sp, #4]
    (void)dummy;
   132e4:	9a01      	ldr	r2, [sp, #4]
    p_reg->TXD = txd;
   132e6:	4a05      	ldr	r2, [pc, #20]	; (132fc <uart_nrfx_poll_out+0x24>)
   132e8:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   132ec:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   132ee:	2a00      	cmp	r2, #0
   132f0:	d0fc      	beq.n	132ec <uart_nrfx_poll_out+0x14>
}
   132f2:	4608      	mov	r0, r1
   132f4:	b002      	add	sp, #8
   132f6:	4770      	bx	lr
   132f8:	4000211c 	.word	0x4000211c
   132fc:	40002000 	.word	0x40002000

00013300 <uart_nrfx_poll_in>:
   13300:	4b08      	ldr	r3, [pc, #32]	; (13324 <uart_nrfx_poll_in+0x24>)
   13302:	681a      	ldr	r2, [r3, #0]
{
   13304:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   13306:	b152      	cbz	r2, 1331e <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13308:	2000      	movs	r0, #0
   1330a:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1330c:	681b      	ldr	r3, [r3, #0]
   1330e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   13310:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   13312:	4b05      	ldr	r3, [pc, #20]	; (13328 <uart_nrfx_poll_in+0x28>)
   13314:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   13318:	700b      	strb	r3, [r1, #0]
}
   1331a:	b002      	add	sp, #8
   1331c:	4770      	bx	lr
		return -1;
   1331e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13322:	e7fa      	b.n	1331a <uart_nrfx_poll_in+0x1a>
   13324:	40002108 	.word	0x40002108
   13328:	40002000 	.word	0x40002000

0001332c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1332c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   1332e:	481d      	ldr	r0, [pc, #116]	; (133a4 <uart_nrfx_init+0x78>)
   13330:	f000 f994 	bl	1365c <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   13334:	6843      	ldr	r3, [r0, #4]
   13336:	4604      	mov	r4, r0
   13338:	681d      	ldr	r5, [r3, #0]
   1333a:	2206      	movs	r2, #6
   1333c:	f240 1301 	movw	r3, #257	; 0x101
   13340:	2100      	movs	r1, #0
   13342:	47a8      	blx	r5
   13344:	6863      	ldr	r3, [r4, #4]
   13346:	681d      	ldr	r5, [r3, #0]
   13348:	2300      	movs	r3, #0
   1334a:	4619      	mov	r1, r3
   1334c:	2208      	movs	r2, #8
   1334e:	4620      	mov	r0, r4
   13350:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   13352:	4b15      	ldr	r3, [pc, #84]	; (133a8 <uart_nrfx_init+0x7c>)
   13354:	2208      	movs	r2, #8
   13356:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1335a:	2206      	movs	r2, #6
   1335c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13360:	2400      	movs	r4, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13362:	4a12      	ldr	r2, [pc, #72]	; (133ac <uart_nrfx_init+0x80>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13364:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   13368:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1336c:	2204      	movs	r2, #4
   1336e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13372:	4a0f      	ldr	r2, [pc, #60]	; (133b0 <uart_nrfx_init+0x84>)
   13374:	6014      	str	r4, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13376:	6812      	ldr	r2, [r2, #0]
   13378:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1337a:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1337c:	4a0d      	ldr	r2, [pc, #52]	; (133b4 <uart_nrfx_init+0x88>)
   1337e:	6014      	str	r4, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13380:	6812      	ldr	r2, [r2, #0]
   13382:	9200      	str	r2, [sp, #0]
    (void)dummy;
   13384:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13386:	4a0c      	ldr	r2, [pc, #48]	; (133b8 <uart_nrfx_init+0x8c>)
   13388:	2101      	movs	r1, #1
   1338a:	6011      	str	r1, [r2, #0]
	nrf_uart_task_trigger(NRF_UART0, NRF_UART_TASK_STARTTX);
	nrf_uart_task_trigger(NRF_UART0, NRF_UART_TASK_STARTRX);

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

	IRQ_CONNECT(NRFX_IRQ_NUMBER_GET(NRF_UART0),
   1338c:	2002      	movs	r0, #2
   1338e:	6019      	str	r1, [r3, #0]
   13390:	4622      	mov	r2, r4
   13392:	f7ee fa9f 	bl	18d4 <_irq_priority_set>
		    CONFIG_UART_0_IRQ_PRI,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
   13396:	2002      	movs	r0, #2
   13398:	f7ee fa6a 	bl	1870 <_arch_irq_enable>
#endif

	return 0;
}
   1339c:	4620      	mov	r0, r4
   1339e:	b003      	add	sp, #12
   133a0:	bd30      	pop	{r4, r5, pc}
   133a2:	bf00      	nop
   133a4:	00018890 	.word	0x00018890
   133a8:	40002000 	.word	0x40002000
   133ac:	01d7e000 	.word	0x01d7e000
   133b0:	4000211c 	.word	0x4000211c
   133b4:	40002108 	.word	0x40002108
   133b8:	40002008 	.word	0x40002008

000133bc <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   133c0:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   133c2:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   133c4:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   133c6:	42a3      	cmp	r3, r4
	d = &rand[octets];
   133c8:	440a      	add	r2, r1
	s = &rng->rand[first];
   133ca:	4406      	add	r6, r0
	if (first <= last) {
   133cc:	d81f      	bhi.n	1340e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   133ce:	1ae4      	subs	r4, r4, r3
   133d0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   133d2:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   133d4:	bf3e      	ittt	cc
   133d6:	1a64      	subcc	r4, r4, r1
   133d8:	b2e7      	uxtbcc	r7, r4
   133da:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   133dc:	4423      	add	r3, r4
		octets -= avail;
   133de:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   133e2:	bf28      	it	cs
   133e4:	2700      	movcs	r7, #0
		first += avail;
   133e6:	b2db      	uxtb	r3, r3
		octets -= avail;
   133e8:	b2c9      	uxtb	r1, r1
   133ea:	4434      	add	r4, r6

		while (avail--) {
   133ec:	42a6      	cmp	r6, r4
   133ee:	d109      	bne.n	13404 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   133f0:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   133f2:	7843      	ldrb	r3, [r0, #1]
   133f4:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   133f6:	bf82      	ittt	hi
   133f8:	4b20      	ldrhi	r3, [pc, #128]	; (1347c <get+0xc0>)
   133fa:	2201      	movhi	r2, #1
   133fc:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   133fe:	4608      	mov	r0, r1
   13400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13404:	f816 5b01 	ldrb.w	r5, [r6], #1
   13408:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1340c:	e7ee      	b.n	133ec <get+0x30>
		avail = rng->count - first;
   1340e:	7805      	ldrb	r5, [r0, #0]
   13410:	1aed      	subs	r5, r5, r3
   13412:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   13414:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   13416:	bf3f      	itttt	cc
   13418:	1a67      	subcc	r7, r4, r1
   1341a:	19ed      	addcc	r5, r5, r7
   1341c:	b2ef      	uxtbcc	r7, r5
   1341e:	460d      	movcc	r5, r1
			first += avail;
   13420:	bf38      	it	cc
   13422:	185b      	addcc	r3, r3, r1
		octets -= avail;
   13424:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   13428:	bf32      	itee	cc
   1342a:	b2db      	uxtbcc	r3, r3
   1342c:	4627      	movcs	r7, r4
			first = 0;
   1342e:	2300      	movcs	r3, #0
		octets -= avail;
   13430:	b2c9      	uxtb	r1, r1
   13432:	4696      	mov	lr, r2
   13434:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   13438:	4566      	cmp	r6, ip
   1343a:	d119      	bne.n	13470 <get+0xb4>
   1343c:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   1343e:	2900      	cmp	r1, #0
   13440:	d0d6      	beq.n	133f0 <get+0x34>
   13442:	2c00      	cmp	r4, #0
   13444:	d0d4      	beq.n	133f0 <get+0x34>
			if (octets < last) {
   13446:	428c      	cmp	r4, r1
   13448:	bf8a      	itet	hi
   1344a:	460b      	movhi	r3, r1
   1344c:	4623      	movls	r3, r4
				remaining = last - octets;
   1344e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   13450:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   13454:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   13458:	bf8c      	ite	hi
   1345a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   1345c:	2700      	movls	r7, #0
			octets -= last;
   1345e:	b2c9      	uxtb	r1, r1
   13460:	18f4      	adds	r4, r6, r3
			while (last--) {
   13462:	42a6      	cmp	r6, r4
   13464:	d0c4      	beq.n	133f0 <get+0x34>
				*(--d) = *s++;
   13466:	f816 5b01 	ldrb.w	r5, [r6], #1
   1346a:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1346e:	e7f8      	b.n	13462 <get+0xa6>
			*(--d) = *s++;
   13470:	f816 8b01 	ldrb.w	r8, [r6], #1
   13474:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13478:	e7de      	b.n	13438 <get+0x7c>
   1347a:	bf00      	nop
   1347c:	4000d000 	.word	0x4000d000

00013480 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13480:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13482:	b1d0      	cbz	r0, 134ba <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13484:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13486:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13488:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   1348a:	1c53      	adds	r3, r2, #1
   1348c:	b2db      	uxtb	r3, r3
		last = 0;
   1348e:	42ab      	cmp	r3, r5
   13490:	bf08      	it	eq
   13492:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13494:	42a3      	cmp	r3, r4
   13496:	d010      	beq.n	134ba <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13498:	b161      	cbz	r1, 134b4 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   1349a:	490a      	ldr	r1, [pc, #40]	; (134c4 <isr+0x44>)
   1349c:	4402      	add	r2, r0
   1349e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   134a2:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   134a4:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   134a6:	3301      	adds	r3, #1
   134a8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   134aa:	429d      	cmp	r5, r3
   134ac:	bf08      	it	eq
   134ae:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   134b0:	42a3      	cmp	r3, r4
   134b2:	d005      	beq.n	134c0 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   134b4:	f06f 000f 	mvn.w	r0, #15
   134b8:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   134ba:	f06f 0036 	mvn.w	r0, #54	; 0x36
   134be:	bd30      	pop	{r4, r5, pc}
		return 0;
   134c0:	2000      	movs	r0, #0
}
   134c2:	bd30      	pop	{r4, r5, pc}
   134c4:	4000d000 	.word	0x4000d000

000134c8 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   134c8:	07db      	lsls	r3, r3, #31
{
   134ca:	b570      	push	{r4, r5, r6, lr}
   134cc:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   134ce:	d507      	bpl.n	134e0 <entropy_nrf5_get_entropy_isr+0x18>
   134d0:	4613      	mov	r3, r2
   134d2:	4a0d      	ldr	r2, [pc, #52]	; (13508 <entropy_nrf5_get_entropy_isr+0x40>)
   134d4:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   134d6:	2500      	movs	r5, #0
	while (len) {
   134d8:	b94b      	cbnz	r3, 134ee <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   134da:	6050      	str	r0, [r2, #4]

	return cnt;
   134dc:	4620      	mov	r0, r4
}
   134de:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   134e0:	6880      	ldr	r0, [r0, #8]
   134e2:	460a      	mov	r2, r1
   134e4:	303c      	adds	r0, #60	; 0x3c
   134e6:	b2e1      	uxtb	r1, r4
   134e8:	f7ff ff68 	bl	133bc <get>
   134ec:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   134ee:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   134f2:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   134f4:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   134f8:	2e00      	cmp	r6, #0
   134fa:	d0fb      	beq.n	134f4 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   134fc:	3b01      	subs	r3, #1
   134fe:	b29b      	uxth	r3, r3
   13500:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13504:	54ce      	strb	r6, [r1, r3]
   13506:	e7e7      	b.n	134d8 <entropy_nrf5_get_entropy_isr+0x10>
   13508:	4000d000 	.word	0x4000d000

0001350c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1350c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1350e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   13510:	2201      	movs	r2, #1
   13512:	4611      	mov	r1, r2
   13514:	4620      	mov	r0, r4
   13516:	f000 fd7f 	bl	14018 <_impl_k_sem_init>
   1351a:	f104 0018 	add.w	r0, r4, #24
   1351e:	2201      	movs	r2, #1
   13520:	2100      	movs	r1, #0
   13522:	f000 fd79 	bl	14018 <_impl_k_sem_init>
	rng->threshold = threshold;
   13526:	2304      	movs	r3, #4
   13528:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   1352c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   1352e:	2500      	movs	r5, #0
	rng->threshold = threshold;
   13530:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
   13534:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13536:	4b11      	ldr	r3, [pc, #68]	; (1357c <entropy_nrf5_init+0x70>)
	rng->count = len;
   13538:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
   1353c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   1353e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
   13542:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
   13546:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
   1354a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   1354e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   13552:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   13556:	f042 0201 	orr.w	r2, r2, #1
   1355a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   1355e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   13560:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   13564:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   13566:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   1356a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   1356c:	462a      	mov	r2, r5
   1356e:	f7ee f9b1 	bl	18d4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13572:	4630      	mov	r0, r6
   13574:	f7ee f97c 	bl	1870 <_arch_irq_enable>

	return 0;
}
   13578:	4628      	mov	r0, r5
   1357a:	bd70      	pop	{r4, r5, r6, pc}
   1357c:	4000d000 	.word	0x4000d000

00013580 <isr_rand>:
{
   13580:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13582:	4b12      	ldr	r3, [pc, #72]	; (135cc <isr_rand+0x4c>)
   13584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13588:	b1fb      	cbz	r3, 135ca <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1358a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   1358c:	2101      	movs	r1, #1
   1358e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   13592:	f7ff ff75 	bl	13480 <isr>
		if (ret != -EBUSY) {
   13596:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1359a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   1359c:	d00d      	beq.n	135ba <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1359e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   135a2:	bf14      	ite	ne
   135a4:	2100      	movne	r1, #0
   135a6:	2101      	moveq	r1, #1
   135a8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   135ac:	f7ff ff68 	bl	13480 <isr>
   135b0:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   135b2:	f105 0018 	add.w	r0, r5, #24
   135b6:	f000 fd38 	bl	1402a <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   135ba:	4b04      	ldr	r3, [pc, #16]	; (135cc <isr_rand+0x4c>)
   135bc:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   135be:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   135c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   135c4:	bf1c      	itt	ne
   135c6:	2201      	movne	r2, #1
   135c8:	605a      	strne	r2, [r3, #4]
   135ca:	bd38      	pop	{r3, r4, r5, pc}
   135cc:	4000d000 	.word	0x4000d000

000135d0 <entropy_nrf5_get_entropy>:
{
   135d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   135d4:	6885      	ldr	r5, [r0, #8]
{
   135d6:	460f      	mov	r7, r1
   135d8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   135da:	f105 0818 	add.w	r8, r5, #24
	while (len) {
   135de:	b914      	cbnz	r4, 135e6 <entropy_nrf5_get_entropy+0x16>
}
   135e0:	4620      	mov	r0, r4
   135e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   135e6:	2cff      	cmp	r4, #255	; 0xff
   135e8:	4623      	mov	r3, r4
   135ea:	bf28      	it	cs
   135ec:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   135ee:	1ae4      	subs	r4, r4, r3
   135f0:	b2de      	uxtb	r6, r3
   135f2:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   135f4:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   135f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   135fc:	4628      	mov	r0, r5
   135fe:	f000 fd3c 	bl	1407a <_impl_k_sem_take>
   13602:	4631      	mov	r1, r6
   13604:	463a      	mov	r2, r7
   13606:	4648      	mov	r0, r9
   13608:	f7ff fed8 	bl	133bc <get>
   1360c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1360e:	4628      	mov	r0, r5
   13610:	f000 fd0b 	bl	1402a <_impl_k_sem_give>
			if (len8) {
   13614:	2e00      	cmp	r6, #0
   13616:	d0e2      	beq.n	135de <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1361c:	4640      	mov	r0, r8
   1361e:	f000 fd2c 	bl	1407a <_impl_k_sem_take>
   13622:	e7e9      	b.n	135f8 <entropy_nrf5_get_entropy+0x28>

00013624 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   13624:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   13626:	4802      	ldr	r0, [pc, #8]	; (13630 <entropy_nrf_get_entropy_isr+0xc>)
   13628:	460a      	mov	r2, r1
   1362a:	4619      	mov	r1, r3
   1362c:	f7ff bec6 	b.w	133bc <get>
   13630:	20001738 	.word	0x20001738

00013634 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13634:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13636:	4b08      	ldr	r3, [pc, #32]	; (13658 <_sys_device_do_config_level+0x24>)
   13638:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1363c:	3001      	adds	r0, #1
   1363e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13642:	4620      	mov	r0, r4
   13644:	42a8      	cmp	r0, r5
   13646:	f104 040c 	add.w	r4, r4, #12
   1364a:	d300      	bcc.n	1364e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   1364c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1364e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   13652:	685b      	ldr	r3, [r3, #4]
   13654:	4798      	blx	r3
   13656:	e7f4      	b.n	13642 <_sys_device_do_config_level+0xe>
   13658:	000188e4 	.word	0x000188e4

0001365c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   1365c:	4b10      	ldr	r3, [pc, #64]	; (136a0 <device_get_binding+0x44>)
{
   1365e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   13660:	4c10      	ldr	r4, [pc, #64]	; (136a4 <device_get_binding+0x48>)
{
   13662:	4605      	mov	r5, r0
   13664:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13666:	429c      	cmp	r4, r3
   13668:	d104      	bne.n	13674 <device_get_binding+0x18>
   1366a:	4c0e      	ldr	r4, [pc, #56]	; (136a4 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1366c:	42b4      	cmp	r4, r6
   1366e:	d109      	bne.n	13684 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13670:	2400      	movs	r4, #0
   13672:	e012      	b.n	1369a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13674:	6862      	ldr	r2, [r4, #4]
   13676:	b11a      	cbz	r2, 13680 <device_get_binding+0x24>
   13678:	6822      	ldr	r2, [r4, #0]
   1367a:	6812      	ldr	r2, [r2, #0]
   1367c:	42aa      	cmp	r2, r5
   1367e:	d00c      	beq.n	1369a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13680:	340c      	adds	r4, #12
   13682:	e7f0      	b.n	13666 <device_get_binding+0xa>
		if (!info->driver_api) {
   13684:	6863      	ldr	r3, [r4, #4]
   13686:	b90b      	cbnz	r3, 1368c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13688:	340c      	adds	r4, #12
   1368a:	e7ef      	b.n	1366c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1368c:	6823      	ldr	r3, [r4, #0]
   1368e:	4628      	mov	r0, r5
   13690:	6819      	ldr	r1, [r3, #0]
   13692:	f7ee fa9d 	bl	1bd0 <strcmp>
   13696:	2800      	cmp	r0, #0
   13698:	d1f6      	bne.n	13688 <device_get_binding+0x2c>
}
   1369a:	4620      	mov	r0, r4
   1369c:	bd70      	pop	{r4, r5, r6, pc}
   1369e:	bf00      	nop
   136a0:	20003f0c 	.word	0x20003f0c
   136a4:	20003e7c 	.word	0x20003e7c

000136a8 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   136a8:	1c43      	adds	r3, r0, #1
   136aa:	d003      	beq.n	136b4 <_sys_power_save_idle_exit+0xc>
   136ac:	4b03      	ldr	r3, [pc, #12]	; (136bc <_sys_power_save_idle_exit+0x14>)
   136ae:	681b      	ldr	r3, [r3, #0]
   136b0:	4298      	cmp	r0, r3
   136b2:	db01      	blt.n	136b8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   136b4:	f7ed bea4 	b.w	1400 <_timer_idle_exit>
   136b8:	4770      	bx	lr
   136ba:	bf00      	nop
   136bc:	20003e70 	.word	0x20003e70

000136c0 <idle>:
	return list->head == list;
   136c0:	4d0f      	ldr	r5, [pc, #60]	; (13700 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   136c2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   136c4:	4f0f      	ldr	r7, [pc, #60]	; (13704 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136c6:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   136ca:	f04f 0220 	mov.w	r2, #32
   136ce:	f3ef 8311 	mrs	r3, BASEPRI
   136d2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   136d6:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   136d8:	42b3      	cmp	r3, r6
   136da:	d00a      	beq.n	136f2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   136dc:	b14b      	cbz	r3, 136f2 <idle+0x32>
   136de:	691c      	ldr	r4, [r3, #16]
   136e0:	1c63      	adds	r3, r4, #1
   136e2:	d008      	beq.n	136f6 <idle+0x36>
   136e4:	683b      	ldr	r3, [r7, #0]
   136e6:	42a3      	cmp	r3, r4
   136e8:	dd05      	ble.n	136f6 <idle+0x36>
	_kernel.idle = ticks;
   136ea:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   136ec:	f7ee f948 	bl	1980 <k_cpu_idle>
   136f0:	e7eb      	b.n	136ca <idle+0xa>
   136f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   136f6:	4620      	mov	r0, r4
   136f8:	f7ed fe64 	bl	13c4 <_timer_idle_enter>
   136fc:	e7f5      	b.n	136ea <idle+0x2a>
   136fe:	bf00      	nop
   13700:	20001950 	.word	0x20001950
   13704:	20003e70 	.word	0x20003e70

00013708 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13708:	4802      	ldr	r0, [pc, #8]	; (13714 <_bss_zero+0xc>)
   1370a:	4a03      	ldr	r2, [pc, #12]	; (13718 <_bss_zero+0x10>)
   1370c:	2100      	movs	r1, #0
   1370e:	1a12      	subs	r2, r2, r0
   13710:	f7ee baac 	b.w	1c6c <memset>
   13714:	20000000 	.word	0x20000000
   13718:	20001a10 	.word	0x20001a10

0001371c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   1371c:	4802      	ldr	r0, [pc, #8]	; (13728 <_data_copy+0xc>)
   1371e:	4a03      	ldr	r2, [pc, #12]	; (1372c <_data_copy+0x10>)
   13720:	4903      	ldr	r1, [pc, #12]	; (13730 <_data_copy+0x14>)
   13722:	1a12      	subs	r2, r2, r0
   13724:	f7ee ba76 	b.w	1c14 <memcpy>
   13728:	20003a28 	.word	0x20003a28
   1372c:	20003fcc 	.word	0x20003fcc
   13730:	00018934 	.word	0x00018934

00013734 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13734:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13736:	2002      	movs	r0, #2
   13738:	f7ff ff7c 	bl	13634 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   1373c:	4807      	ldr	r0, [pc, #28]	; (1375c <bg_thread_main+0x28>)
   1373e:	f7ed fc25 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   13742:	2003      	movs	r0, #3
   13744:	f7ff ff76 	bl	13634 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13748:	f000 feaa 	bl	144a0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1374c:	f7ec ffb8 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   13750:	4a03      	ldr	r2, [pc, #12]	; (13760 <bg_thread_main+0x2c>)
   13752:	7a13      	ldrb	r3, [r2, #8]
   13754:	f023 0301 	bic.w	r3, r3, #1
   13758:	7213      	strb	r3, [r2, #8]
   1375a:	bd08      	pop	{r3, pc}
   1375c:	00018900 	.word	0x00018900
   13760:	200017bc 	.word	0x200017bc

00013764 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   13764:	b580      	push	{r7, lr}
   13766:	b086      	sub	sp, #24
   13768:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   1376a:	f7ed fecd 	bl	1508 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   1376e:	4b30      	ldr	r3, [pc, #192]	; (13830 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13770:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13774:	4b2f      	ldr	r3, [pc, #188]	; (13834 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13776:	4d30      	ldr	r5, [pc, #192]	; (13838 <_Cstart+0xd4>)
   13778:	4e30      	ldr	r6, [pc, #192]	; (1383c <_Cstart+0xd8>)
   1377a:	2400      	movs	r4, #0
   1377c:	22e0      	movs	r2, #224	; 0xe0
   1377e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13782:	77dc      	strb	r4, [r3, #31]
   13784:	761c      	strb	r4, [r3, #24]
   13786:	765c      	strb	r4, [r3, #25]
   13788:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1378a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1378c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13790:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13792:	f7ee f865 	bl	1860 <_FaultInit>
	_CpuIdleInit();
   13796:	f7ee f8ed 	bl	1974 <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1379a:	4620      	mov	r0, r4
   1379c:	f7ff ff4a 	bl	13634 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   137a0:	2001      	movs	r0, #1
   137a2:	f7ff ff47 	bl	13634 <_sys_device_do_config_level>
	_sched_init();
   137a6:	f000 fbf9 	bl	13f9c <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   137aa:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   137ac:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   137ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   137b2:	9304      	str	r3, [sp, #16]
   137b4:	9403      	str	r4, [sp, #12]
   137b6:	9402      	str	r4, [sp, #8]
   137b8:	9401      	str	r4, [sp, #4]
   137ba:	9400      	str	r4, [sp, #0]
   137bc:	4b20      	ldr	r3, [pc, #128]	; (13840 <_Cstart+0xdc>)
   137be:	4921      	ldr	r1, [pc, #132]	; (13844 <_Cstart+0xe0>)
   137c0:	4628      	mov	r0, r5
   137c2:	f000 fe15 	bl	143f0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   137c6:	7a6b      	ldrb	r3, [r5, #9]
   137c8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   137cc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   137d0:	726a      	strb	r2, [r5, #9]
   137d2:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   137d4:	d102      	bne.n	137dc <_Cstart+0x78>
   137d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   137d8:	3301      	adds	r3, #1
   137da:	d024      	beq.n	13826 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   137dc:	2301      	movs	r3, #1
   137de:	4e1a      	ldr	r6, [pc, #104]	; (13848 <_Cstart+0xe4>)
   137e0:	9304      	str	r3, [sp, #16]
   137e2:	230f      	movs	r3, #15
   137e4:	9303      	str	r3, [sp, #12]
   137e6:	2300      	movs	r3, #0
   137e8:	9302      	str	r3, [sp, #8]
   137ea:	9301      	str	r3, [sp, #4]
   137ec:	9300      	str	r3, [sp, #0]
   137ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
   137f2:	4b16      	ldr	r3, [pc, #88]	; (1384c <_Cstart+0xe8>)
   137f4:	4916      	ldr	r1, [pc, #88]	; (13850 <_Cstart+0xec>)
   137f6:	4630      	mov	r0, r6
   137f8:	f000 fdfa 	bl	143f0 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   137fc:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   137fe:	60e6      	str	r6, [r4, #12]
   13800:	f023 0304 	bic.w	r3, r3, #4
   13804:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   13806:	4b13      	ldr	r3, [pc, #76]	; (13854 <_Cstart+0xf0>)
   13808:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   1380a:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1380c:	4b12      	ldr	r3, [pc, #72]	; (13858 <_Cstart+0xf4>)

	_current = main_thread;
   1380e:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13810:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   13814:	4c11      	ldr	r4, [pc, #68]	; (1385c <_Cstart+0xf8>)
   13816:	4a0a      	ldr	r2, [pc, #40]	; (13840 <_Cstart+0xdc>)
   13818:	f383 8809 	msr	PSP, r3
   1381c:	2100      	movs	r1, #0
   1381e:	f381 8811 	msr	BASEPRI, r1
   13822:	4610      	mov	r0, r2
   13824:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13826:	4628      	mov	r0, r5
   13828:	f000 fab4 	bl	13d94 <_add_thread_to_ready_q>
   1382c:	e7d6      	b.n	137dc <_Cstart+0x78>
   1382e:	bf00      	nop
   13830:	20003628 	.word	0x20003628
   13834:	e000ed00 	.word	0xe000ed00
   13838:	200017bc 	.word	0x200017bc
   1383c:	20001950 	.word	0x20001950
   13840:	00013735 	.word	0x00013735
   13844:	200028e8 	.word	0x200028e8
   13848:	2000174c 	.word	0x2000174c
   1384c:	000136c1 	.word	0x000136c1
   13850:	20002ce8 	.word	0x20002ce8
   13854:	20001964 	.word	0x20001964
   13858:	20002ce8 	.word	0x20002ce8
   1385c:	00000899 	.word	0x00000899

00013860 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   13860:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   13862:	4c07      	ldr	r4, [pc, #28]	; (13880 <init_static_pools+0x20>)
   13864:	4d07      	ldr	r5, [pc, #28]	; (13884 <init_static_pools+0x24>)
   13866:	42ac      	cmp	r4, r5
   13868:	d301      	bcc.n	1386e <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   1386a:	2000      	movs	r0, #0
   1386c:	bd38      	pop	{r3, r4, r5, pc}
   1386e:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   13872:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13874:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13876:	4620      	mov	r0, r4
   13878:	f7ed f849 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1387c:	341c      	adds	r4, #28
   1387e:	e7f2      	b.n	13866 <init_static_pools+0x6>
   13880:	20003f0c 	.word	0x20003f0c
   13884:	20003f0c 	.word	0x20003f0c

00013888 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1388c:	1e1d      	subs	r5, r3, #0
{
   1388e:	b085      	sub	sp, #20
   13890:	4607      	mov	r7, r0
   13892:	460c      	mov	r4, r1
   13894:	4692      	mov	sl, r2
	if (timeout > 0) {
   13896:	dd4c      	ble.n	13932 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   13898:	f000 fc16 	bl	140c8 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1389c:	f105 0309 	add.w	r3, r5, #9
   138a0:	220a      	movs	r2, #10
   138a2:	fbb3 f3f2 	udiv	r3, r3, r2
   138a6:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   138aa:	4b23      	ldr	r3, [pc, #140]	; (13938 <k_mem_pool_alloc+0xb0>)
   138ac:	4e23      	ldr	r6, [pc, #140]	; (1393c <k_mem_pool_alloc+0xb4>)
   138ae:	1afb      	subs	r3, r7, r3
   138b0:	109b      	asrs	r3, r3, #2
   138b2:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   138b4:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   138b6:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   138ba:	9400      	str	r4, [sp, #0]
   138bc:	ab03      	add	r3, sp, #12
   138be:	aa02      	add	r2, sp, #8
   138c0:	4651      	mov	r1, sl
   138c2:	4638      	mov	r0, r7
   138c4:	f7ed f86e 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   138c8:	f110 0f0b 	cmn.w	r0, #11
   138cc:	d10b      	bne.n	138e6 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   138ce:	9400      	str	r4, [sp, #0]
   138d0:	ab03      	add	r3, sp, #12
   138d2:	aa02      	add	r2, sp, #8
   138d4:	4651      	mov	r1, sl
   138d6:	4638      	mov	r0, r7
   138d8:	f7ed f864 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   138dc:	f110 0f0b 	cmn.w	r0, #11
   138e0:	bf08      	it	eq
   138e2:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   138e6:	7963      	ldrb	r3, [r4, #5]
   138e8:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   138ea:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   138ec:	f362 0303 	bfi	r3, r2, #0, #4
   138f0:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   138f2:	6863      	ldr	r3, [r4, #4]
   138f4:	9a03      	ldr	r2, [sp, #12]
   138f6:	f362 331f 	bfi	r3, r2, #12, #20
   138fa:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   138fc:	b1b0      	cbz	r0, 1392c <k_mem_pool_alloc+0xa4>
   138fe:	b1ad      	cbz	r5, 1392c <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   13900:	f110 0f0c 	cmn.w	r0, #12
   13904:	d112      	bne.n	1392c <k_mem_pool_alloc+0xa4>
   13906:	f04f 0320 	mov.w	r3, #32
   1390a:	f3ef 8011 	mrs	r0, BASEPRI
   1390e:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13912:	462a      	mov	r2, r5
   13914:	4659      	mov	r1, fp
   13916:	f000 faeb 	bl	13ef0 <_pend_current_thread>

		if (timeout != K_FOREVER) {
   1391a:	1c6b      	adds	r3, r5, #1
   1391c:	d0cd      	beq.n	138ba <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   1391e:	f000 fbd3 	bl	140c8 <_tick_get>

			if (timeout < 0) {
   13922:	ebb8 0500 	subs.w	r5, r8, r0
   13926:	d5c8      	bpl.n	138ba <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   13928:	f06f 000a 	mvn.w	r0, #10
}
   1392c:	b005      	add	sp, #20
   1392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   13932:	f04f 0800 	mov.w	r8, #0
   13936:	e7b8      	b.n	138aa <k_mem_pool_alloc+0x22>
   13938:	20003f0c 	.word	0x20003f0c
   1393c:	b6db6db7 	.word	0xb6db6db7

00013940 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   13940:	b570      	push	{r4, r5, r6, lr}
   13942:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   13944:	6802      	ldr	r2, [r0, #0]
   13946:	7841      	ldrb	r1, [r0, #1]
   13948:	4e13      	ldr	r6, [pc, #76]	; (13998 <k_mem_pool_free_id+0x58>)
   1394a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1394e:	00a4      	lsls	r4, r4, #2
   13950:	0b12      	lsrs	r2, r2, #12
   13952:	f001 010f 	and.w	r1, r1, #15
   13956:	1930      	adds	r0, r6, r4
   13958:	f7ed f8d6 	bl	b08 <_sys_mem_pool_block_free>
   1395c:	f04f 0320 	mov.w	r3, #32
   13960:	f3ef 8511 	mrs	r5, BASEPRI
   13964:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   13968:	f104 0014 	add.w	r0, r4, #20
   1396c:	4430      	add	r0, r6
   1396e:	f000 fb05 	bl	13f7c <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   13972:	b140      	cbz	r0, 13986 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13974:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13978:	2b0d      	cmp	r3, #13
   1397a:	d804      	bhi.n	13986 <k_mem_pool_free_id+0x46>
   1397c:	b133      	cbz	r3, 1398c <k_mem_pool_free_id+0x4c>
   1397e:	4b07      	ldr	r3, [pc, #28]	; (1399c <k_mem_pool_free_id+0x5c>)
   13980:	685b      	ldr	r3, [r3, #4]
   13982:	051b      	lsls	r3, r3, #20
   13984:	d402      	bmi.n	1398c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13986:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1398a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1398c:	4628      	mov	r0, r5
}
   1398e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   13992:	f000 b9a7 	b.w	13ce4 <_reschedule>
   13996:	bf00      	nop
   13998:	20003f0c 	.word	0x20003f0c
   1399c:	e000ed00 	.word	0xe000ed00

000139a0 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   139a0:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   139a2:	1d0a      	adds	r2, r1, #4
   139a4:	d204      	bcs.n	139b0 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   139a6:	2300      	movs	r3, #0
   139a8:	4669      	mov	r1, sp
   139aa:	f7ff ff6d 	bl	13888 <k_mem_pool_alloc>
   139ae:	b118      	cbz	r0, 139b8 <k_mem_pool_malloc+0x18>
		return NULL;
   139b0:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   139b2:	b003      	add	sp, #12
   139b4:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   139b8:	2204      	movs	r2, #4
   139ba:	eb0d 0102 	add.w	r1, sp, r2
   139be:	9800      	ldr	r0, [sp, #0]
   139c0:	f7ee f928 	bl	1c14 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   139c4:	9800      	ldr	r0, [sp, #0]
   139c6:	3004      	adds	r0, #4
   139c8:	e7f3      	b.n	139b2 <k_mem_pool_malloc+0x12>

000139ca <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   139ca:	b110      	cbz	r0, 139d2 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   139cc:	3804      	subs	r0, #4
   139ce:	f7ff bfb7 	b.w	13940 <k_mem_pool_free_id>
   139d2:	4770      	bx	lr

000139d4 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   139d4:	4b03      	ldr	r3, [pc, #12]	; (139e4 <z_thread_malloc+0x10>)
   139d6:	689b      	ldr	r3, [r3, #8]
{
   139d8:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   139da:	6e58      	ldr	r0, [r3, #100]	; 0x64
   139dc:	b108      	cbz	r0, 139e2 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   139de:	f7ff bfdf 	b.w	139a0 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   139e2:	4770      	bx	lr
   139e4:	20001950 	.word	0x20001950

000139e8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139ea:	4605      	mov	r5, r0
   139ec:	460f      	mov	r7, r1
   139ee:	4614      	mov	r4, r2
	__asm__ volatile(
   139f0:	f04f 0220 	mov.w	r2, #32
   139f4:	f3ef 8611 	mrs	r6, BASEPRI
   139f8:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   139fc:	b1a3      	cbz	r3, 13a28 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   139fe:	2008      	movs	r0, #8
   13a00:	f7ff ffe8 	bl	139d4 <z_thread_malloc>
		if (!anode) {
   13a04:	2800      	cmp	r0, #0
   13a06:	d034      	beq.n	13a72 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13a08:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   13a0a:	6044      	str	r4, [r0, #4]
   13a0c:	6003      	str	r3, [r0, #0]
   13a0e:	4604      	mov	r4, r0
   13a10:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   13a12:	b95f      	cbnz	r7, 13a2c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a14:	682a      	ldr	r2, [r5, #0]
   13a16:	f003 0303 	and.w	r3, r3, #3
   13a1a:	4313      	orrs	r3, r2
   13a1c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13a1e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   13a20:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13a22:	b973      	cbnz	r3, 13a42 <queue_insert+0x5a>
	list->tail = node;
   13a24:	606c      	str	r4, [r5, #4]
   13a26:	e00c      	b.n	13a42 <queue_insert+0x5a>
	node->next_and_flags = flags;
   13a28:	6023      	str	r3, [r4, #0]
   13a2a:	e7f1      	b.n	13a10 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13a2c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   13a2e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a32:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   13a36:	d114      	bne.n	13a62 <queue_insert+0x7a>
   13a38:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a3a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13a3c:	b95a      	cbnz	r2, 13a56 <queue_insert+0x6e>
	list->tail = node;
   13a3e:	606c      	str	r4, [r5, #4]
	list->head = node;
   13a40:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   13a42:	2104      	movs	r1, #4
   13a44:	f105 0008 	add.w	r0, r5, #8
   13a48:	f000 ffb4 	bl	149b4 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   13a4c:	4630      	mov	r0, r6
   13a4e:	f000 f949 	bl	13ce4 <_reschedule>
	return 0;
   13a52:	2000      	movs	r0, #0
   13a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a56:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a58:	f003 0303 	and.w	r3, r3, #3
   13a5c:	4323      	orrs	r3, r4
   13a5e:	6013      	str	r3, [r2, #0]
   13a60:	e7e0      	b.n	13a24 <queue_insert+0x3c>
   13a62:	4313      	orrs	r3, r2
   13a64:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a66:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a68:	f002 0203 	and.w	r2, r2, #3
   13a6c:	4314      	orrs	r4, r2
   13a6e:	603c      	str	r4, [r7, #0]
   13a70:	e7e7      	b.n	13a42 <queue_insert+0x5a>
			return -ENOMEM;
   13a72:	f06f 000b 	mvn.w	r0, #11
}
   13a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a78 <z_queue_node_peek>:
{
   13a78:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   13a7a:	4604      	mov	r4, r0
   13a7c:	b130      	cbz	r0, 13a8c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a7e:	6802      	ldr	r2, [r0, #0]
   13a80:	0793      	lsls	r3, r2, #30
   13a82:	d003      	beq.n	13a8c <z_queue_node_peek+0x14>
		ret = anode->data;
   13a84:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13a86:	b109      	cbz	r1, 13a8c <z_queue_node_peek+0x14>
			k_free(anode);
   13a88:	f7ff ff9f 	bl	139ca <k_free>
}
   13a8c:	4620      	mov	r0, r4
   13a8e:	bd10      	pop	{r4, pc}

00013a90 <_impl_k_queue_init>:
	list->head = NULL;
   13a90:	2300      	movs	r3, #0
   13a92:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13a94:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   13a96:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   13a9a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13a9c:	60c3      	str	r3, [r0, #12]
   13a9e:	4770      	bx	lr

00013aa0 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   13aa0:	460a      	mov	r2, r1
   13aa2:	2300      	movs	r3, #0
   13aa4:	6841      	ldr	r1, [r0, #4]
   13aa6:	f7ff bf9f 	b.w	139e8 <queue_insert>

00013aaa <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13aaa:	2300      	movs	r3, #0
   13aac:	460a      	mov	r2, r1
   13aae:	4619      	mov	r1, r3
   13ab0:	f7ff bf9a 	b.w	139e8 <queue_insert>

00013ab4 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13ab4:	b538      	push	{r3, r4, r5, lr}
   13ab6:	f04f 0320 	mov.w	r3, #32
   13aba:	f3ef 8511 	mrs	r5, BASEPRI
   13abe:	f383 8811 	msr	BASEPRI, r3
   13ac2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13ac4:	b953      	cbnz	r3, 13adc <k_queue_append_list+0x28>
	list->head = node;
   13ac6:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13ac8:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13aca:	2104      	movs	r1, #4
   13acc:	3008      	adds	r0, #8
   13ace:	f000 ff71 	bl	149b4 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   13ad2:	4628      	mov	r0, r5
}
   13ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13ad8:	f000 b904 	b.w	13ce4 <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13adc:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13ade:	f004 0403 	and.w	r4, r4, #3
   13ae2:	4321      	orrs	r1, r4
   13ae4:	6019      	str	r1, [r3, #0]
   13ae6:	e7ef      	b.n	13ac8 <k_queue_append_list+0x14>

00013ae8 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aec:	4604      	mov	r4, r0
   13aee:	b086      	sub	sp, #24
   13af0:	460d      	mov	r5, r1
   13af2:	f04f 0320 	mov.w	r3, #32
   13af6:	f3ef 8711 	mrs	r7, BASEPRI
   13afa:	f383 8811 	msr	BASEPRI, r3
   13afe:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13b00:	b182      	cbz	r2, 13b24 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b02:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b04:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b06:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b0a:	428a      	cmp	r2, r1
	list->head = node;
   13b0c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   13b0e:	bf08      	it	eq
   13b10:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   13b12:	2101      	movs	r1, #1
   13b14:	4610      	mov	r0, r2
   13b16:	f7ff ffaf 	bl	13a78 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b1a:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13b1e:	b006      	add	sp, #24
   13b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   13b24:	b919      	cbnz	r1, 13b2e <_impl_k_queue_get+0x46>
   13b26:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   13b2a:	2000      	movs	r0, #0
   13b2c:	e7f7      	b.n	13b1e <_impl_k_queue_get+0x36>
   13b2e:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13b32:	2104      	movs	r1, #4
   13b34:	4603      	mov	r3, r0
   13b36:	eb0d 0001 	add.w	r0, sp, r1
   13b3a:	f000 fea4 	bl	14886 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13b3e:	1c6a      	adds	r2, r5, #1
   13b40:	d002      	beq.n	13b48 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13b42:	f000 fab7 	bl	140b4 <_impl_k_uptime_get_32>
   13b46:	4606      	mov	r6, r0
{
   13b48:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   13b4a:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   13b4e:	1bea      	subs	r2, r5, r7
   13b50:	f36f 1307 	bfc	r3, #4, #4
   13b54:	2101      	movs	r1, #1
   13b56:	a801      	add	r0, sp, #4
   13b58:	f88d 3011 	strb.w	r3, [sp, #17]
   13b5c:	f000 fea6 	bl	148ac <_impl_k_poll>
		if (err && err != -EAGAIN) {
   13b60:	b108      	cbz	r0, 13b66 <_impl_k_queue_get+0x7e>
   13b62:	300b      	adds	r0, #11
   13b64:	d1e1      	bne.n	13b2a <_impl_k_queue_get+0x42>
	__asm__ volatile(
   13b66:	f04f 0320 	mov.w	r3, #32
   13b6a:	f3ef 8811 	mrs	r8, BASEPRI
   13b6e:	f383 8811 	msr	BASEPRI, r3
   13b72:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13b74:	b138      	cbz	r0, 13b86 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b76:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b78:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b7a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b7e:	4290      	cmp	r0, r2
	list->head = node;
   13b80:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13b82:	bf08      	it	eq
   13b84:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   13b86:	2101      	movs	r1, #1
   13b88:	f7ff ff76 	bl	13a78 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b8c:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   13b90:	2800      	cmp	r0, #0
   13b92:	d1c4      	bne.n	13b1e <_impl_k_queue_get+0x36>
   13b94:	1c6b      	adds	r3, r5, #1
   13b96:	d0d8      	beq.n	13b4a <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13b98:	f000 fa8c 	bl	140b4 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   13b9c:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   13b9e:	42bd      	cmp	r5, r7
   13ba0:	dad3      	bge.n	13b4a <_impl_k_queue_get+0x62>
   13ba2:	e7c2      	b.n	13b2a <_impl_k_queue_get+0x42>

00013ba4 <sys_dlist_remove>:
	node->prev->next = node->next;
   13ba4:	e890 000c 	ldmia.w	r0, {r2, r3}
   13ba8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13baa:	6802      	ldr	r2, [r0, #0]
   13bac:	6053      	str	r3, [r2, #4]
   13bae:	4770      	bx	lr

00013bb0 <_abort_timeout>:
{
   13bb0:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13bb2:	6900      	ldr	r0, [r0, #16]
{
   13bb4:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13bb6:	1c43      	adds	r3, r0, #1
   13bb8:	d00e      	beq.n	13bd8 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13bba:	4b08      	ldr	r3, [pc, #32]	; (13bdc <_abort_timeout+0x2c>)
   13bbc:	699b      	ldr	r3, [r3, #24]
   13bbe:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   13bc0:	bf1f      	itttt	ne
   13bc2:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13bc4:	6913      	ldrne	r3, [r2, #16]
   13bc6:	18c0      	addne	r0, r0, r3
   13bc8:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13bca:	4608      	mov	r0, r1
   13bcc:	f7ff ffea 	bl	13ba4 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   13bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bd4:	610b      	str	r3, [r1, #16]
	return 0;
   13bd6:	2000      	movs	r0, #0
}
   13bd8:	bd08      	pop	{r3, pc}
   13bda:	bf00      	nop
   13bdc:	20001950 	.word	0x20001950

00013be0 <k_spin_lock.isra.11>:
	__asm__ volatile(
   13be0:	f04f 0320 	mov.w	r3, #32
   13be4:	f3ef 8011 	mrs	r0, BASEPRI
   13be8:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13bec:	4770      	bx	lr
	...

00013bf0 <update_cache>:
	return list->head == list;
   13bf0:	4b0d      	ldr	r3, [pc, #52]	; (13c28 <update_cache+0x38>)
   13bf2:	4619      	mov	r1, r3
   13bf4:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bf8:	428a      	cmp	r2, r1
   13bfa:	d000      	beq.n	13bfe <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
   13bfc:	b902      	cbnz	r2, 13c00 <update_cache+0x10>
   13bfe:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   13c00:	b970      	cbnz	r0, 13c20 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   13c02:	6899      	ldr	r1, [r3, #8]
   13c04:	b161      	cbz	r1, 13c20 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   13c06:	7a48      	ldrb	r0, [r1, #9]
   13c08:	06c0      	lsls	r0, r0, #27
   13c0a:	d109      	bne.n	13c20 <update_cache+0x30>
   13c0c:	6a48      	ldr	r0, [r1, #36]	; 0x24
   13c0e:	3001      	adds	r0, #1
   13c10:	d106      	bne.n	13c20 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   13c12:	8948      	ldrh	r0, [r1, #10]
   13c14:	287f      	cmp	r0, #127	; 0x7f
   13c16:	d903      	bls.n	13c20 <update_cache+0x30>
	return thread == _idle_thread;
   13c18:	4804      	ldr	r0, [pc, #16]	; (13c2c <update_cache+0x3c>)
	if (_is_idle(_current)) {
   13c1a:	6800      	ldr	r0, [r0, #0]
   13c1c:	4281      	cmp	r1, r0
   13c1e:	d101      	bne.n	13c24 <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
   13c20:	621a      	str	r2, [r3, #32]
   13c22:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
   13c24:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   13c26:	4770      	bx	lr
   13c28:	20001950 	.word	0x20001950
   13c2c:	000188fc 	.word	0x000188fc

00013c30 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   13c30:	f990 000a 	ldrsb.w	r0, [r0, #10]
   13c34:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   13c38:	4298      	cmp	r0, r3
   13c3a:	bfac      	ite	ge
   13c3c:	2000      	movge	r0, #0
   13c3e:	2001      	movlt	r0, #1
   13c40:	4770      	bx	lr
	...

00013c44 <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   13c44:	b510      	push	{r4, lr}
   13c46:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13c48:	f7ff ffca 	bl	13be0 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   13c4c:	7a4b      	ldrb	r3, [r1, #9]
   13c4e:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   13c50:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   13c52:	d50d      	bpl.n	13c70 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   13c54:	4608      	mov	r0, r1
   13c56:	f7ff ffa5 	bl	13ba4 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   13c5a:	7a4b      	ldrb	r3, [r1, #9]
   13c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13c60:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   13c62:	4b05      	ldr	r3, [pc, #20]	; (13c78 <_remove_thread_from_ready_q+0x34>)
   13c64:	6898      	ldr	r0, [r3, #8]
   13c66:	1a43      	subs	r3, r0, r1
   13c68:	4258      	negs	r0, r3
   13c6a:	4158      	adcs	r0, r3
   13c6c:	f7ff ffc0 	bl	13bf0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c70:	f384 8811 	msr	BASEPRI, r4
   13c74:	bd10      	pop	{r4, pc}
   13c76:	bf00      	nop
   13c78:	20001950 	.word	0x20001950

00013c7c <_find_first_thread_to_unpend>:
{
   13c7c:	b508      	push	{r3, lr}
   13c7e:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   13c80:	f7ff ffae 	bl	13be0 <k_spin_lock.isra.11>
	return list->head == list;
   13c84:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c86:	429a      	cmp	r2, r3
   13c88:	bf08      	it	eq
   13c8a:	2300      	moveq	r3, #0
   13c8c:	f380 8811 	msr	BASEPRI, r0
}
   13c90:	4618      	mov	r0, r3
   13c92:	bd08      	pop	{r3, pc}

00013c94 <_unpend_thread_no_timeout>:
{
   13c94:	b510      	push	{r4, lr}
   13c96:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13c98:	f7ff ffa2 	bl	13be0 <k_spin_lock.isra.11>
   13c9c:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c9e:	4608      	mov	r0, r1
   13ca0:	f7ff ff80 	bl	13ba4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13ca4:	7a4b      	ldrb	r3, [r1, #9]
   13ca6:	f023 0302 	bic.w	r3, r3, #2
   13caa:	724b      	strb	r3, [r1, #9]
   13cac:	f384 8811 	msr	BASEPRI, r4
   13cb0:	bd10      	pop	{r4, pc}

00013cb2 <_unpend_first_thread>:
{
   13cb2:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13cb4:	2100      	movs	r1, #0
   13cb6:	f7ff ffe1 	bl	13c7c <_find_first_thread_to_unpend>

	if (thread) {
   13cba:	4604      	mov	r4, r0
   13cbc:	b128      	cbz	r0, 13cca <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   13cbe:	f7ff ffe9 	bl	13c94 <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   13cc2:	f104 0014 	add.w	r0, r4, #20
   13cc6:	f7ff ff73 	bl	13bb0 <_abort_timeout>
}
   13cca:	4620      	mov	r0, r4
   13ccc:	bd10      	pop	{r4, pc}

00013cce <_unpend_thread>:
{
   13cce:	b510      	push	{r4, lr}
   13cd0:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   13cd2:	f7ff ffdf 	bl	13c94 <_unpend_thread_no_timeout>
   13cd6:	f104 0014 	add.w	r0, r4, #20
}
   13cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13cde:	f7ff bf67 	b.w	13bb0 <_abort_timeout>
	...

00013ce4 <_reschedule>:
   13ce4:	f3ef 8305 	mrs	r3, IPSR
   13ce8:	2b0d      	cmp	r3, #13
   13cea:	d809      	bhi.n	13d00 <_reschedule+0x1c>
   13cec:	b11b      	cbz	r3, 13cf6 <_reschedule+0x12>
   13cee:	4b09      	ldr	r3, [pc, #36]	; (13d14 <_reschedule+0x30>)
   13cf0:	685b      	ldr	r3, [r3, #4]
   13cf2:	051b      	lsls	r3, r3, #20
   13cf4:	d504      	bpl.n	13d00 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   13cf6:	4b08      	ldr	r3, [pc, #32]	; (13d18 <_reschedule+0x34>)
   13cf8:	689a      	ldr	r2, [r3, #8]
   13cfa:	6a1b      	ldr	r3, [r3, #32]
   13cfc:	429a      	cmp	r2, r3
   13cfe:	d103      	bne.n	13d08 <_reschedule+0x24>
   13d00:	f380 8811 	msr	BASEPRI, r0
}
   13d04:	2000      	movs	r0, #0
   13d06:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13d08:	4b04      	ldr	r3, [pc, #16]	; (13d1c <_reschedule+0x38>)
   13d0a:	2200      	movs	r2, #0
   13d0c:	601a      	str	r2, [r3, #0]
   13d0e:	f7ed bc07 	b.w	1520 <__swap>
   13d12:	bf00      	nop
   13d14:	e000ed00 	.word	0xe000ed00
   13d18:	20001950 	.word	0x20001950
   13d1c:	20001984 	.word	0x20001984

00013d20 <k_sched_unlock>:
{
   13d20:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   13d22:	f7ff ff5d 	bl	13be0 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   13d26:	4b0a      	ldr	r3, [pc, #40]	; (13d50 <k_sched_unlock+0x30>)
   13d28:	689a      	ldr	r2, [r3, #8]
   13d2a:	7ad3      	ldrb	r3, [r2, #11]
   13d2c:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   13d2e:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13d30:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   13d32:	2001      	movs	r0, #1
   13d34:	f7ff ff5c 	bl	13bf0 <update_cache>
   13d38:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   13d3c:	f04f 0320 	mov.w	r3, #32
   13d40:	f3ef 8011 	mrs	r0, BASEPRI
   13d44:	f383 8811 	msr	BASEPRI, r3
}
   13d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   13d4c:	f7ff bfca 	b.w	13ce4 <_reschedule>
   13d50:	20001950 	.word	0x20001950

00013d54 <_priq_dumb_add>:
{
   13d54:	b510      	push	{r4, lr}
	return list->head == list;
   13d56:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13d58:	4298      	cmp	r0, r3
   13d5a:	bf08      	it	eq
   13d5c:	2300      	moveq	r3, #0
   13d5e:	b193      	cbz	r3, 13d86 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   13d60:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13d64:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13d68:	4294      	cmp	r4, r2
   13d6a:	da06      	bge.n	13d7a <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   13d6c:	685a      	ldr	r2, [r3, #4]
   13d6e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13d70:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13d72:	685a      	ldr	r2, [r3, #4]
   13d74:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13d76:	6059      	str	r1, [r3, #4]
   13d78:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   13d7a:	6842      	ldr	r2, [r0, #4]
   13d7c:	4293      	cmp	r3, r2
   13d7e:	d002      	beq.n	13d86 <_priq_dumb_add+0x32>
   13d80:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13d82:	2b00      	cmp	r3, #0
   13d84:	d1eb      	bne.n	13d5e <_priq_dumb_add+0xa>
	node->next = list;
   13d86:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13d88:	6843      	ldr	r3, [r0, #4]
   13d8a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13d8c:	6843      	ldr	r3, [r0, #4]
   13d8e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13d90:	6041      	str	r1, [r0, #4]
   13d92:	bd10      	pop	{r4, pc}

00013d94 <_add_thread_to_ready_q>:
{
   13d94:	b538      	push	{r3, r4, r5, lr}
   13d96:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13d98:	f7ff ff22 	bl	13be0 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13d9c:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   13d9e:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13da0:	4806      	ldr	r0, [pc, #24]	; (13dbc <_add_thread_to_ready_q+0x28>)
   13da2:	f7ff ffd7 	bl	13d54 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13da6:	7a63      	ldrb	r3, [r4, #9]
   13da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dac:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13dae:	2000      	movs	r0, #0
   13db0:	f7ff ff1e 	bl	13bf0 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13db4:	f385 8811 	msr	BASEPRI, r5
   13db8:	bd38      	pop	{r3, r4, r5, pc}
   13dba:	bf00      	nop
   13dbc:	20001974 	.word	0x20001974

00013dc0 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13dc0:	7a42      	ldrb	r2, [r0, #9]
   13dc2:	06d2      	lsls	r2, r2, #27
   13dc4:	d104      	bne.n	13dd0 <_ready_thread+0x10>
   13dc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13dc8:	3301      	adds	r3, #1
   13dca:	d101      	bne.n	13dd0 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13dcc:	f7ff bfe2 	b.w	13d94 <_add_thread_to_ready_q>
   13dd0:	4770      	bx	lr
	...

00013dd4 <_add_timeout>:
{
   13dd4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13dd6:	610b      	str	r3, [r1, #16]
{
   13dd8:	4604      	mov	r4, r0
   13dda:	461d      	mov	r5, r3
	timeout->thread = thread;
   13ddc:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13dde:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   13de0:	bb03      	cbnz	r3, 13e24 <_add_timeout+0x50>
	__asm__ volatile(
   13de2:	f04f 0320 	mov.w	r3, #32
   13de6:	f3ef 8611 	mrs	r6, BASEPRI
   13dea:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13df2:	610b      	str	r3, [r1, #16]
	if (thread) {
   13df4:	b170      	cbz	r0, 13e14 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13df6:	68cb      	ldr	r3, [r1, #12]
   13df8:	b113      	cbz	r3, 13e00 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13dfa:	f7ff ff4b 	bl	13c94 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13dfe:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e00:	7a63      	ldrb	r3, [r4, #9]
   13e02:	f023 0304 	bic.w	r3, r3, #4
   13e06:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13e08:	4620      	mov	r0, r4
   13e0a:	f7ff ffd9 	bl	13dc0 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e0e:	f386 8811 	msr	BASEPRI, r6
   13e12:	bd70      	pop	{r4, r5, r6, pc}
   13e14:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13e18:	694b      	ldr	r3, [r1, #20]
   13e1a:	b32b      	cbz	r3, 13e68 <_add_timeout+0x94>
			timeout->func(timeout);
   13e1c:	4608      	mov	r0, r1
}
   13e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13e22:	4718      	bx	r3
	return list->head == list;
   13e24:	4a11      	ldr	r2, [pc, #68]	; (13e6c <_add_timeout+0x98>)
   13e26:	4610      	mov	r0, r2
   13e28:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e2c:	4283      	cmp	r3, r0
   13e2e:	d10c      	bne.n	13e4a <_add_timeout+0x76>
	node->next = list;
   13e30:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13e32:	6993      	ldr	r3, [r2, #24]
   13e34:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13e36:	6993      	ldr	r3, [r2, #24]
   13e38:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13e3a:	6191      	str	r1, [r2, #24]
   13e3c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   13e3e:	1b64      	subs	r4, r4, r5
   13e40:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   13e42:	6994      	ldr	r4, [r2, #24]
   13e44:	42a3      	cmp	r3, r4
   13e46:	d0f3      	beq.n	13e30 <_add_timeout+0x5c>
   13e48:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d0f0      	beq.n	13e30 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   13e4e:	690c      	ldr	r4, [r1, #16]
   13e50:	691d      	ldr	r5, [r3, #16]
   13e52:	42ac      	cmp	r4, r5
   13e54:	dcf3      	bgt.n	13e3e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13e56:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13e58:	1b2c      	subs	r4, r5, r4
   13e5a:	611c      	str	r4, [r3, #16]
   13e5c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13e5e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13e60:	685a      	ldr	r2, [r3, #4]
   13e62:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13e64:	6059      	str	r1, [r3, #4]
   13e66:	bd70      	pop	{r4, r5, r6, pc}
   13e68:	bd70      	pop	{r4, r5, r6, pc}
   13e6a:	bf00      	nop
   13e6c:	20001950 	.word	0x20001950

00013e70 <_move_thread_to_end_of_prio_q>:
{
   13e70:	b538      	push	{r3, r4, r5, lr}
   13e72:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13e74:	f7ff feb4 	bl	13be0 <k_spin_lock.isra.11>
   13e78:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13e7a:	4620      	mov	r0, r4
   13e7c:	f7ff fe92 	bl	13ba4 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13e80:	4621      	mov	r1, r4
   13e82:	4806      	ldr	r0, [pc, #24]	; (13e9c <_move_thread_to_end_of_prio_q+0x2c>)
   13e84:	f7ff ff66 	bl	13d54 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13e88:	7a63      	ldrb	r3, [r4, #9]
   13e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e8e:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13e90:	2000      	movs	r0, #0
   13e92:	f7ff fead 	bl	13bf0 <update_cache>
   13e96:	f385 8811 	msr	BASEPRI, r5
   13e9a:	bd38      	pop	{r3, r4, r5, pc}
   13e9c:	20001974 	.word	0x20001974

00013ea0 <pend>:
{
   13ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ea2:	4605      	mov	r5, r0
   13ea4:	4614      	mov	r4, r2
   13ea6:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13ea8:	f7ff fecc 	bl	13c44 <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13eac:	7a6b      	ldrb	r3, [r5, #9]
   13eae:	f043 0302 	orr.w	r3, r3, #2
   13eb2:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13eb4:	1c63      	adds	r3, r4, #1
   13eb6:	d012      	beq.n	13ede <pend+0x3e>
	__asm__ volatile(
   13eb8:	f04f 0320 	mov.w	r3, #32
   13ebc:	f3ef 8711 	mrs	r7, BASEPRI
   13ec0:	f383 8811 	msr	BASEPRI, r3
   13ec4:	230a      	movs	r3, #10
   13ec6:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13ec8:	4632      	mov	r2, r6
   13eca:	fbb4 f3f3 	udiv	r3, r4, r3
   13ece:	f105 0114 	add.w	r1, r5, #20
   13ed2:	3301      	adds	r3, #1
   13ed4:	4628      	mov	r0, r5
   13ed6:	f7ff ff7d 	bl	13dd4 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13eda:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   13ede:	b12e      	cbz	r6, 13eec <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   13ee0:	4629      	mov	r1, r5
   13ee2:	4630      	mov	r0, r6
}
   13ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13ee8:	f7ff bf34 	b.w	13d54 <_priq_dumb_add>
   13eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013ef0 <_pend_current_thread>:
{
   13ef0:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   13ef2:	4b06      	ldr	r3, [pc, #24]	; (13f0c <_pend_current_thread+0x1c>)
{
   13ef4:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13ef6:	6898      	ldr	r0, [r3, #8]
   13ef8:	f7ff ffd2 	bl	13ea0 <pend>
	_time_slice_elapsed = 0;
   13efc:	4b04      	ldr	r3, [pc, #16]	; (13f10 <_pend_current_thread+0x20>)
   13efe:	2200      	movs	r2, #0
   13f00:	4620      	mov	r0, r4
}
   13f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   13f06:	601a      	str	r2, [r3, #0]
   13f08:	f7ed bb0a 	b.w	1520 <__swap>
   13f0c:	20001950 	.word	0x20001950
   13f10:	20001984 	.word	0x20001984

00013f14 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f14:	4b13      	ldr	r3, [pc, #76]	; (13f64 <_is_thread_time_slicing+0x50>)
   13f16:	681b      	ldr	r3, [r3, #0]
   13f18:	2b00      	cmp	r3, #0
{
   13f1a:	b510      	push	{r4, lr}
   13f1c:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f1e:	dd1f      	ble.n	13f60 <_is_thread_time_slicing+0x4c>
   13f20:	8943      	ldrh	r3, [r0, #10]
   13f22:	2b7f      	cmp	r3, #127	; 0x7f
   13f24:	d81c      	bhi.n	13f60 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13f26:	4b10      	ldr	r3, [pc, #64]	; (13f68 <_is_thread_time_slicing+0x54>)
   13f28:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f2c:	681b      	ldr	r3, [r3, #0]
   13f2e:	4299      	cmp	r1, r3
   13f30:	db16      	blt.n	13f60 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   13f32:	f7ff fe55 	bl	13be0 <k_spin_lock.isra.11>
	return list->head == list;
   13f36:	490d      	ldr	r1, [pc, #52]	; (13f6c <_is_thread_time_slicing+0x58>)
   13f38:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f3c:	428b      	cmp	r3, r1
   13f3e:	4604      	mov	r4, r0
   13f40:	d00a      	beq.n	13f58 <_is_thread_time_slicing+0x44>
		if (next) {
   13f42:	b15b      	cbz	r3, 13f5c <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   13f44:	f992 000a 	ldrsb.w	r0, [r2, #10]
   13f48:	f993 300a 	ldrsb.w	r3, [r3, #10]
   13f4c:	1ac3      	subs	r3, r0, r3
   13f4e:	4258      	negs	r0, r3
   13f50:	4158      	adcs	r0, r3
   13f52:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13f56:	bd10      	pop	{r4, pc}
   13f58:	2000      	movs	r0, #0
   13f5a:	e7fa      	b.n	13f52 <_is_thread_time_slicing+0x3e>
   13f5c:	4618      	mov	r0, r3
   13f5e:	e7f8      	b.n	13f52 <_is_thread_time_slicing+0x3e>
		return 0;
   13f60:	2000      	movs	r0, #0
}
   13f62:	bd10      	pop	{r4, pc}
   13f64:	2000182c 	.word	0x2000182c
   13f68:	20001830 	.word	0x20001830
   13f6c:	20001950 	.word	0x20001950

00013f70 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13f70:	4b01      	ldr	r3, [pc, #4]	; (13f78 <_update_time_slice_before_swap+0x8>)
   13f72:	2200      	movs	r2, #0
   13f74:	601a      	str	r2, [r3, #0]
   13f76:	4770      	bx	lr
   13f78:	20001984 	.word	0x20001984

00013f7c <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13f7c:	b538      	push	{r3, r4, r5, lr}
   13f7e:	4605      	mov	r5, r0
	int need_sched = 0;
   13f80:	2000      	movs	r0, #0
	return list->head == list;
   13f82:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f84:	42a5      	cmp	r5, r4
   13f86:	d000      	beq.n	13f8a <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13f88:	b904      	cbnz	r4, 13f8c <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13f8a:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13f8c:	4620      	mov	r0, r4
   13f8e:	f7ff fe9e 	bl	13cce <_unpend_thread>
		_ready_thread(th);
   13f92:	4620      	mov	r0, r4
   13f94:	f7ff ff14 	bl	13dc0 <_ready_thread>
		need_sched = 1;
   13f98:	2001      	movs	r0, #1
   13f9a:	e7f2      	b.n	13f82 <_unpend_all+0x6>

00013f9c <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13f9c:	4b02      	ldr	r3, [pc, #8]	; (13fa8 <_sched_init+0xc>)
   13f9e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   13fa2:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13fa4:	629a      	str	r2, [r3, #40]	; 0x28
   13fa6:	4770      	bx	lr
   13fa8:	20001950 	.word	0x20001950

00013fac <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13fac:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13fae:	4c14      	ldr	r4, [pc, #80]	; (14000 <_impl_k_yield+0x54>)
   13fb0:	4b14      	ldr	r3, [pc, #80]	; (14004 <_impl_k_yield+0x58>)
   13fb2:	68a2      	ldr	r2, [r4, #8]
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	429a      	cmp	r2, r3
   13fb8:	d00f      	beq.n	13fda <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13fba:	f7ff fe11 	bl	13be0 <k_spin_lock.isra.11>
   13fbe:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13fc0:	68a0      	ldr	r0, [r4, #8]
   13fc2:	f7ff fdef 	bl	13ba4 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13fc6:	68a1      	ldr	r1, [r4, #8]
   13fc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13fcc:	f7ff fec2 	bl	13d54 <_priq_dumb_add>
			update_cache(1);
   13fd0:	2001      	movs	r0, #1
   13fd2:	f7ff fe0d 	bl	13bf0 <update_cache>
   13fd6:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13fda:	6a22      	ldr	r2, [r4, #32]
   13fdc:	68a3      	ldr	r3, [r4, #8]
   13fde:	429a      	cmp	r2, r3
   13fe0:	d00c      	beq.n	13ffc <_impl_k_yield+0x50>
	__asm__ volatile(
   13fe2:	f04f 0320 	mov.w	r3, #32
   13fe6:	f3ef 8011 	mrs	r0, BASEPRI
   13fea:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
   13fee:	4b06      	ldr	r3, [pc, #24]	; (14008 <_impl_k_yield+0x5c>)
   13ff0:	2200      	movs	r2, #0
   13ff2:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
   13ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13ff8:	f7ed ba92 	b.w	1520 <__swap>
   13ffc:	bd38      	pop	{r3, r4, r5, pc}
   13ffe:	bf00      	nop
   14000:	20001950 	.word	0x20001950
   14004:	000188fc 	.word	0x000188fc
   14008:	20001984 	.word	0x20001984

0001400c <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   1400c:	4b01      	ldr	r3, [pc, #4]	; (14014 <_impl_k_current_get+0x8>)
   1400e:	6898      	ldr	r0, [r3, #8]
   14010:	4770      	bx	lr
   14012:	bf00      	nop
   14014:	20001950 	.word	0x20001950

00014018 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14018:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1401c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1401e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14020:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14022:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14024:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14026:	6143      	str	r3, [r0, #20]
   14028:	4770      	bx	lr

0001402a <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1402a:	b570      	push	{r4, r5, r6, lr}
   1402c:	4604      	mov	r4, r0
   1402e:	f04f 0320 	mov.w	r3, #32
   14032:	f3ef 8611 	mrs	r6, BASEPRI
   14036:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1403a:	f7ff fe3a 	bl	13cb2 <_unpend_first_thread>
	if (thread) {
   1403e:	4605      	mov	r5, r0
   14040:	b160      	cbz	r0, 1405c <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   14042:	7a43      	ldrb	r3, [r0, #9]
   14044:	06db      	lsls	r3, r3, #27
   14046:	d102      	bne.n	1404e <_impl_k_sem_give+0x24>
   14048:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1404a:	3301      	adds	r3, #1
   1404c:	d012      	beq.n	14074 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1404e:	2300      	movs	r3, #0
   14050:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   14052:	4630      	mov	r0, r6
}
   14054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   14058:	f7ff be44 	b.w	13ce4 <_reschedule>
	sem->count += (sem->count != sem->limit);
   1405c:	68a3      	ldr	r3, [r4, #8]
   1405e:	68e2      	ldr	r2, [r4, #12]
   14060:	429a      	cmp	r2, r3
   14062:	bf18      	it	ne
   14064:	3301      	addne	r3, #1
   14066:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14068:	2102      	movs	r1, #2
   1406a:	f104 0010 	add.w	r0, r4, #16
   1406e:	f000 fca1 	bl	149b4 <_handle_obj_poll_events>
   14072:	e7ee      	b.n	14052 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   14074:	f7ff fe8e 	bl	13d94 <_add_thread_to_ready_q>
   14078:	e7e9      	b.n	1404e <_impl_k_sem_give+0x24>

0001407a <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1407a:	b410      	push	{r4}
   1407c:	460a      	mov	r2, r1
   1407e:	4604      	mov	r4, r0
   14080:	f04f 0320 	mov.w	r3, #32
   14084:	f3ef 8011 	mrs	r0, BASEPRI
   14088:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1408c:	68a3      	ldr	r3, [r4, #8]
   1408e:	b133      	cbz	r3, 1409e <_impl_k_sem_take+0x24>
		sem->count--;
   14090:	3b01      	subs	r3, #1
   14092:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14094:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14098:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   1409a:	bc10      	pop	{r4}
   1409c:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1409e:	b921      	cbnz	r1, 140aa <_impl_k_sem_take+0x30>
   140a0:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   140a4:	f06f 000f 	mvn.w	r0, #15
   140a8:	e7f7      	b.n	1409a <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   140aa:	4621      	mov	r1, r4
}
   140ac:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   140ae:	f7ff bf1f 	b.w	13ef0 <_pend_current_thread>
	...

000140b4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   140b4:	4b03      	ldr	r3, [pc, #12]	; (140c4 <_impl_k_uptime_get_32+0x10>)
   140b6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   140ba:	230a      	movs	r3, #10
   140bc:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   140c0:	4770      	bx	lr
   140c2:	bf00      	nop
   140c4:	20001988 	.word	0x20001988

000140c8 <_tick_get>:
	__asm__ volatile(
   140c8:	f04f 0220 	mov.w	r2, #32
   140cc:	f3ef 8311 	mrs	r3, BASEPRI
   140d0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   140d4:	4a02      	ldr	r2, [pc, #8]	; (140e0 <_tick_get+0x18>)
   140d6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   140da:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   140de:	4770      	bx	lr
   140e0:	20001988 	.word	0x20001988

000140e4 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   140e4:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   140e6:	f7ff ffef 	bl	140c8 <_tick_get>
   140ea:	240a      	movs	r4, #10
   140ec:	fba0 2304 	umull	r2, r3, r0, r4
   140f0:	fb04 3301 	mla	r3, r4, r1, r3
}
   140f4:	4610      	mov	r0, r2
   140f6:	4619      	mov	r1, r3
   140f8:	bd10      	pop	{r4, pc}
	...

000140fc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   140fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14100:	4607      	mov	r7, r0
   14102:	b085      	sub	sp, #20
	__asm__ volatile(
   14104:	f04f 0320 	mov.w	r3, #32
   14108:	f3ef 8011 	mrs	r0, BASEPRI
   1410c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   14110:	4961      	ldr	r1, [pc, #388]	; (14298 <_nano_sys_clock_tick_announce+0x19c>)
   14112:	e9d1 4500 	ldrd	r4, r5, [r1]
   14116:	19e2      	adds	r2, r4, r7
   14118:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   1411c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14120:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   14124:	ae02      	add	r6, sp, #8
   14126:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   14128:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   1412a:	f04f 0320 	mov.w	r3, #32
   1412e:	f3ef 8011 	mrs	r0, BASEPRI
   14132:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14136:	4c59      	ldr	r4, [pc, #356]	; (1429c <_nano_sys_clock_tick_announce+0x1a0>)
   14138:	4621      	mov	r1, r4
   1413a:	4602      	mov	r2, r0
   1413c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14140:	428b      	cmp	r3, r1
   14142:	d000      	beq.n	14146 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   14144:	b9fb      	cbnz	r3, 14186 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14146:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   1414a:	68a0      	ldr	r0, [r4, #8]
   1414c:	f7ff fee2 	bl	13f14 <_is_thread_time_slicing>
   14150:	b1b0      	cbz	r0, 14180 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   14152:	4a53      	ldr	r2, [pc, #332]	; (142a0 <_nano_sys_clock_tick_announce+0x1a4>)
   14154:	6811      	ldr	r1, [r2, #0]
   14156:	230a      	movs	r3, #10
   14158:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   1415c:	4b51      	ldr	r3, [pc, #324]	; (142a4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   1415e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   14160:	681b      	ldr	r3, [r3, #0]
   14162:	429f      	cmp	r7, r3
   14164:	db0c      	blt.n	14180 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   14166:	2300      	movs	r3, #0
   14168:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1416a:	f04f 0320 	mov.w	r3, #32
   1416e:	f3ef 8511 	mrs	r5, BASEPRI
   14172:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   14176:	68a0      	ldr	r0, [r4, #8]
   14178:	f7ff fe7a 	bl	13e70 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1417c:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   14180:	b005      	add	sp, #20
   14182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   14186:	4d48      	ldr	r5, [pc, #288]	; (142a8 <_nano_sys_clock_tick_announce+0x1ac>)
   14188:	9501      	str	r5, [sp, #4]
   1418a:	2101      	movs	r1, #1
   1418c:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   1418e:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   14192:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14194:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   14198:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   1419a:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   1419c:	bfaa      	itet	ge
   1419e:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   141a2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   141a6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   141aa:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   141ac:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   141ae:	691d      	ldr	r5, [r3, #16]
   141b0:	4298      	cmp	r0, r3
   141b2:	bf14      	ite	ne
   141b4:	6818      	ldrne	r0, [r3, #0]
   141b6:	2000      	moveq	r0, #0
   141b8:	b9d5      	cbnz	r5, 141f0 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   141ba:	e893 0220 	ldmia.w	r3, {r5, r9}
   141be:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   141c2:	681d      	ldr	r5, [r3, #0]
   141c4:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   141c8:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   141ca:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   141ce:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   141d0:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   141d2:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   141d4:	f8c3 c010 	str.w	ip, [r3, #16]
   141d8:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   141dc:	f04f 0320 	mov.w	r3, #32
   141e0:	f3ef 8211 	mrs	r2, BASEPRI
   141e4:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   141e8:	4603      	mov	r3, r0
   141ea:	2800      	cmp	r0, #0
   141ec:	d1d4      	bne.n	14198 <_nano_sys_clock_tick_announce+0x9c>
   141ee:	e001      	b.n	141f4 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   141f0:	2900      	cmp	r1, #0
   141f2:	dcf1      	bgt.n	141d8 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141f4:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   141f8:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   141fa:	42b0      	cmp	r0, r6
   141fc:	d103      	bne.n	14206 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   141fe:	9a01      	ldr	r2, [sp, #4]
   14200:	2300      	movs	r3, #0
   14202:	6013      	str	r3, [r2, #0]
   14204:	e7a1      	b.n	1414a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14206:	2800      	cmp	r0, #0
   14208:	d0f9      	beq.n	141fe <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1420a:	9b03      	ldr	r3, [sp, #12]
   1420c:	4298      	cmp	r0, r3
   1420e:	d102      	bne.n	14216 <_nano_sys_clock_tick_announce+0x11a>
   14210:	f04f 0b00 	mov.w	fp, #0
   14214:	e001      	b.n	1421a <_nano_sys_clock_tick_announce+0x11e>
   14216:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1421a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1421e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   14222:	e890 000c 	ldmia.w	r0, {r2, r3}
   14226:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14228:	6802      	ldr	r2, [r0, #0]
   1422a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   1422c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1422e:	f04f 0320 	mov.w	r3, #32
   14232:	f3ef 8811 	mrs	r8, BASEPRI
   14236:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   1423a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   1423e:	b1d6      	cbz	r6, 14276 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   14240:	68c3      	ldr	r3, [r0, #12]
   14242:	b123      	cbz	r3, 1424e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   14244:	4630      	mov	r0, r6
   14246:	f7ff fd25 	bl	13c94 <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   1424a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1424e:	7a73      	ldrb	r3, [r6, #9]
   14250:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   14254:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14258:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1425a:	d102      	bne.n	14262 <_nano_sys_clock_tick_announce+0x166>
   1425c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1425e:	3301      	adds	r3, #1
   14260:	d015      	beq.n	1428e <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14262:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14266:	f1bb 0f00 	cmp.w	fp, #0
   1426a:	d0c8      	beq.n	141fe <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   1426c:	9b03      	ldr	r3, [sp, #12]
   1426e:	455b      	cmp	r3, fp
   14270:	d108      	bne.n	14284 <_nano_sys_clock_tick_announce+0x188>
   14272:	2300      	movs	r3, #0
   14274:	e008      	b.n	14288 <_nano_sys_clock_tick_announce+0x18c>
   14276:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   1427a:	6943      	ldr	r3, [r0, #20]
   1427c:	2b00      	cmp	r3, #0
   1427e:	d0f2      	beq.n	14266 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   14280:	4798      	blx	r3
   14282:	e7f0      	b.n	14266 <_nano_sys_clock_tick_announce+0x16a>
   14284:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14288:	4658      	mov	r0, fp
   1428a:	469b      	mov	fp, r3
   1428c:	e7c9      	b.n	14222 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   1428e:	4630      	mov	r0, r6
   14290:	f7ff fd80 	bl	13d94 <_add_thread_to_ready_q>
   14294:	e7e5      	b.n	14262 <_nano_sys_clock_tick_announce+0x166>
   14296:	bf00      	nop
   14298:	20001988 	.word	0x20001988
   1429c:	20001950 	.word	0x20001950
   142a0:	20001984 	.word	0x20001984
   142a4:	2000182c 	.word	0x2000182c
   142a8:	20001980 	.word	0x20001980

000142ac <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   142ac:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   142ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   142b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142b6:	4903      	ldr	r1, [pc, #12]	; (142c4 <k_sys_work_q_init+0x18>)
   142b8:	4803      	ldr	r0, [pc, #12]	; (142c8 <k_sys_work_q_init+0x1c>)
   142ba:	f000 f983 	bl	145c4 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   142be:	2000      	movs	r0, #0
   142c0:	bd08      	pop	{r3, pc}
   142c2:	bf00      	nop
   142c4:	20003628 	.word	0x20003628
   142c8:	20001990 	.word	0x20001990

000142cc <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   142cc:	6903      	ldr	r3, [r0, #16]
   142ce:	1c5a      	adds	r2, r3, #1
   142d0:	d011      	beq.n	142f6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   142d2:	4a0a      	ldr	r2, [pc, #40]	; (142fc <_abort_timeout+0x30>)
   142d4:	6992      	ldr	r2, [r2, #24]
   142d6:	4290      	cmp	r0, r2
   142d8:	bf1f      	itttt	ne
   142da:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   142dc:	690a      	ldrne	r2, [r1, #16]
   142de:	189b      	addne	r3, r3, r2
   142e0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   142e2:	e890 000c 	ldmia.w	r0, {r2, r3}
   142e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   142e8:	6802      	ldr	r2, [r0, #0]
   142ea:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   142ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142f0:	6103      	str	r3, [r0, #16]
	return 0;
   142f2:	2000      	movs	r0, #0
   142f4:	4770      	bx	lr
		return _INACTIVE;
   142f6:	4618      	mov	r0, r3
}
   142f8:	4770      	bx	lr
   142fa:	bf00      	nop
   142fc:	20001950 	.word	0x20001950

00014300 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   14300:	7a42      	ldrb	r2, [r0, #9]
   14302:	06d2      	lsls	r2, r2, #27
   14304:	d104      	bne.n	14310 <_ready_thread+0x10>
   14306:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14308:	3301      	adds	r3, #1
   1430a:	d101      	bne.n	14310 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   1430c:	f7ff bd42 	b.w	13d94 <_add_thread_to_ready_q>
   14310:	4770      	bx	lr
	...

00014314 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14314:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14316:	f04f 0320 	mov.w	r3, #32
   1431a:	f3ef 8611 	mrs	r6, BASEPRI
   1431e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14322:	4a19      	ldr	r2, [pc, #100]	; (14388 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   14324:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14326:	230a      	movs	r3, #10
   14328:	3109      	adds	r1, #9
   1432a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   1432e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14330:	6241      	str	r1, [r0, #36]	; 0x24
   14332:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14334:	2300      	movs	r3, #0
   14336:	6203      	str	r3, [r0, #32]
   14338:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1433c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   1433e:	f100 0514 	add.w	r5, r0, #20
   14342:	d108      	bne.n	14356 <schedule_new_thread.part.11+0x42>
	node->next = list;
   14344:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   14346:	6993      	ldr	r3, [r2, #24]
   14348:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   1434a:	6993      	ldr	r3, [r2, #24]
   1434c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1434e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14350:	f386 8811 	msr	BASEPRI, r6
   14354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14356:	2b00      	cmp	r3, #0
   14358:	d0f4      	beq.n	14344 <schedule_new_thread.part.11+0x30>
   1435a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1435e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14360:	691f      	ldr	r7, [r3, #16]
   14362:	42bc      	cmp	r4, r7
   14364:	dc08      	bgt.n	14378 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   14366:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14368:	1b3c      	subs	r4, r7, r4
   1436a:	611c      	str	r4, [r3, #16]
   1436c:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   1436e:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   14370:	685a      	ldr	r2, [r3, #4]
   14372:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   14374:	605d      	str	r5, [r3, #4]
   14376:	e7eb      	b.n	14350 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   14378:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   1437a:	4573      	cmp	r3, lr
   1437c:	6244      	str	r4, [r0, #36]	; 0x24
   1437e:	d0e1      	beq.n	14344 <schedule_new_thread.part.11+0x30>
   14380:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14382:	2b00      	cmp	r3, #0
   14384:	d1eb      	bne.n	1435e <schedule_new_thread.part.11+0x4a>
   14386:	e7dd      	b.n	14344 <schedule_new_thread.part.11+0x30>
   14388:	20001950 	.word	0x20001950

0001438c <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   1438c:	4770      	bx	lr
	...

00014390 <k_is_in_isr>:
   14390:	f3ef 8005 	mrs	r0, IPSR
   14394:	280d      	cmp	r0, #13
   14396:	d807      	bhi.n	143a8 <k_is_in_isr+0x18>
   14398:	b138      	cbz	r0, 143aa <k_is_in_isr+0x1a>
   1439a:	4b04      	ldr	r3, [pc, #16]	; (143ac <k_is_in_isr+0x1c>)
   1439c:	6858      	ldr	r0, [r3, #4]
   1439e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   143a2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   143a6:	4770      	bx	lr
   143a8:	2001      	movs	r0, #1
}
   143aa:	4770      	bx	lr
   143ac:	e000ed00 	.word	0xe000ed00

000143b0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   143b0:	4b02      	ldr	r3, [pc, #8]	; (143bc <_is_thread_essential+0xc>)
   143b2:	689b      	ldr	r3, [r3, #8]
   143b4:	7a18      	ldrb	r0, [r3, #8]
}
   143b6:	f000 0001 	and.w	r0, r0, #1
   143ba:	4770      	bx	lr
   143bc:	20001950 	.word	0x20001950

000143c0 <_impl_k_thread_start>:
{
   143c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   143c2:	f04f 0320 	mov.w	r3, #32
   143c6:	f3ef 8411 	mrs	r4, BASEPRI
   143ca:	f383 8811 	msr	BASEPRI, r3
   143ce:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   143d0:	0759      	lsls	r1, r3, #29
   143d2:	d402      	bmi.n	143da <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143d4:	f384 8811 	msr	BASEPRI, r4
   143d8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   143da:	f023 0304 	bic.w	r3, r3, #4
   143de:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   143e0:	f7ff ff8e 	bl	14300 <_ready_thread>
	_reschedule(key);
   143e4:	4620      	mov	r0, r4
}
   143e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   143ea:	f7ff bc7b 	b.w	13ce4 <_reschedule>
	...

000143f0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   143f0:	b530      	push	{r4, r5, lr}
   143f2:	b087      	sub	sp, #28
   143f4:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   143f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   143f8:	9504      	str	r5, [sp, #16]
   143fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   143fc:	9503      	str	r5, [sp, #12]
   143fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14400:	9502      	str	r5, [sp, #8]
   14402:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14404:	9501      	str	r5, [sp, #4]
   14406:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14408:	9500      	str	r5, [sp, #0]
   1440a:	f7ed fa8b 	bl	1924 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1440e:	4b04      	ldr	r3, [pc, #16]	; (14420 <_setup_new_thread+0x30>)
   14410:	689b      	ldr	r3, [r3, #8]
   14412:	b913      	cbnz	r3, 1441a <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14414:	6663      	str	r3, [r4, #100]	; 0x64
}
   14416:	b007      	add	sp, #28
   14418:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   1441a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1441c:	e7fa      	b.n	14414 <_setup_new_thread+0x24>
   1441e:	bf00      	nop
   14420:	20001950 	.word	0x20001950

00014424 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14424:	b570      	push	{r4, r5, r6, lr}
   14426:	b086      	sub	sp, #24
   14428:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1442a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1442c:	9604      	str	r6, [sp, #16]
   1442e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   14430:	9603      	str	r6, [sp, #12]
   14432:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14434:	9602      	str	r6, [sp, #8]
   14436:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   14438:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1443a:	9601      	str	r6, [sp, #4]
   1443c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1443e:	9600      	str	r6, [sp, #0]
   14440:	f7ff ffd6 	bl	143f0 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   14444:	1c6b      	adds	r3, r5, #1
   14446:	d003      	beq.n	14450 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   14448:	b92d      	cbnz	r5, 14456 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   1444a:	4620      	mov	r0, r4
   1444c:	f7ff ffb8 	bl	143c0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   14450:	4620      	mov	r0, r4
   14452:	b006      	add	sp, #24
   14454:	bd70      	pop	{r4, r5, r6, pc}
   14456:	4629      	mov	r1, r5
   14458:	4620      	mov	r0, r4
   1445a:	f7ff ff5b 	bl	14314 <schedule_new_thread.part.11>
   1445e:	e7f7      	b.n	14450 <_impl_k_thread_create+0x2c>

00014460 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   14460:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   14462:	b510      	push	{r4, lr}
   14464:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   14466:	b103      	cbz	r3, 1446a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14468:	4798      	blx	r3
   1446a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   1446c:	06da      	lsls	r2, r3, #27
   1446e:	d106      	bne.n	1447e <_k_thread_single_abort+0x1e>
   14470:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14472:	3201      	adds	r2, #1
   14474:	d103      	bne.n	1447e <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   14476:	4620      	mov	r0, r4
   14478:	f7ff fbe4 	bl	13c44 <_remove_thread_from_ready_q>
   1447c:	e00b      	b.n	14496 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   1447e:	079b      	lsls	r3, r3, #30
   14480:	d502      	bpl.n	14488 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   14482:	4620      	mov	r0, r4
   14484:	f7ff fc06 	bl	13c94 <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14488:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1448a:	3301      	adds	r3, #1
   1448c:	d003      	beq.n	14496 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   1448e:	f104 0014 	add.w	r0, r4, #20
   14492:	f7ff ff1b 	bl	142cc <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   14496:	7a63      	ldrb	r3, [r4, #9]
   14498:	f043 0308 	orr.w	r3, r3, #8
   1449c:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   1449e:	bd10      	pop	{r4, pc}

000144a0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   144a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   144a2:	4f21      	ldr	r7, [pc, #132]	; (14528 <_init_static_threads+0x88>)
   144a4:	4d21      	ldr	r5, [pc, #132]	; (1452c <_init_static_threads+0x8c>)
{
   144a6:	b087      	sub	sp, #28
   144a8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   144aa:	42bd      	cmp	r5, r7
   144ac:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   144b0:	d314      	bcc.n	144dc <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   144b2:	4b1f      	ldr	r3, [pc, #124]	; (14530 <_init_static_threads+0x90>)
   144b4:	689a      	ldr	r2, [r3, #8]
   144b6:	7ad3      	ldrb	r3, [r2, #11]
   144b8:	3b01      	subs	r3, #1
   144ba:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   144bc:	f04f 0320 	mov.w	r3, #32
   144c0:	f3ef 8511 	mrs	r5, BASEPRI
   144c4:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   144c8:	4c18      	ldr	r4, [pc, #96]	; (1452c <_init_static_threads+0x8c>)
   144ca:	42b4      	cmp	r4, r6
   144cc:	d31f      	bcc.n	1450e <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   144ce:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   144d2:	b007      	add	sp, #28
   144d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   144d8:	f7ff bc22 	b.w	13d20 <k_sched_unlock>
		_setup_new_thread(
   144dc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   144e0:	9304      	str	r3, [sp, #16]
   144e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   144e6:	9303      	str	r3, [sp, #12]
   144e8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   144ec:	9302      	str	r3, [sp, #8]
   144ee:	f854 3c18 	ldr.w	r3, [r4, #-24]
   144f2:	9301      	str	r3, [sp, #4]
   144f4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   144f8:	9300      	str	r3, [sp, #0]
   144fa:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   144fe:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14500:	f7ff ff76 	bl	143f0 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14504:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14508:	651d      	str	r5, [r3, #80]	; 0x50
   1450a:	4625      	mov	r5, r4
   1450c:	e7cd      	b.n	144aa <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   1450e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14510:	1c4b      	adds	r3, r1, #1
   14512:	d003      	beq.n	1451c <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   14514:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   14516:	b919      	cbnz	r1, 14520 <_init_static_threads+0x80>
   14518:	f7ff ff52 	bl	143c0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1451c:	342c      	adds	r4, #44	; 0x2c
   1451e:	e7d4      	b.n	144ca <_init_static_threads+0x2a>
   14520:	f7ff fef8 	bl	14314 <schedule_new_thread.part.11>
   14524:	e7fa      	b.n	1451c <_init_static_threads+0x7c>
   14526:	bf00      	nop
   14528:	20003f0c 	.word	0x20003f0c
   1452c:	20003f0c 	.word	0x20003f0c
   14530:	20001950 	.word	0x20001950

00014534 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   14534:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   14536:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14538:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   1453a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   1453e:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14540:	72c3      	strb	r3, [r0, #11]
   14542:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   14544:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   14546:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14548:	6283      	str	r3, [r0, #40]	; 0x28
   1454a:	4770      	bx	lr

0001454c <k_work_submit_to_queue>:
{
   1454c:	b500      	push	{lr}
   1454e:	f101 0308 	add.w	r3, r1, #8
   14552:	f3bf 8f5b 	dmb	ish
   14556:	e853 2f00 	ldrex	r2, [r3]
   1455a:	f042 0e01 	orr.w	lr, r2, #1
   1455e:	e843 ec00 	strex	ip, lr, [r3]
   14562:	f1bc 0f00 	cmp.w	ip, #0
   14566:	d1f6      	bne.n	14556 <k_work_submit_to_queue+0xa>
   14568:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1456c:	07d3      	lsls	r3, r2, #31
   1456e:	d403      	bmi.n	14578 <k_work_submit_to_queue+0x2c>
}
   14570:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14574:	f7ff ba94 	b.w	13aa0 <k_queue_append>
   14578:	f85d fb04 	ldr.w	pc, [sp], #4

0001457c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   1457c:	f1a0 010c 	sub.w	r1, r0, #12
   14580:	6980      	ldr	r0, [r0, #24]
   14582:	f7ff bfe3 	b.w	1454c <k_work_submit_to_queue>

00014586 <work_q_main>:
{
   14586:	b510      	push	{r4, lr}
   14588:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   1458a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1458e:	4620      	mov	r0, r4
   14590:	f7ff faaa 	bl	13ae8 <_impl_k_queue_get>
		if (!work) {
   14594:	4603      	mov	r3, r0
   14596:	2800      	cmp	r0, #0
   14598:	d0f7      	beq.n	1458a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1459a:	3308      	adds	r3, #8
		handler = work->handler;
   1459c:	6842      	ldr	r2, [r0, #4]
   1459e:	f3bf 8f5b 	dmb	ish
   145a2:	e853 1f00 	ldrex	r1, [r3]
   145a6:	f021 0e01 	bic.w	lr, r1, #1
   145aa:	e843 ec00 	strex	ip, lr, [r3]
   145ae:	f1bc 0f00 	cmp.w	ip, #0
   145b2:	d1f6      	bne.n	145a2 <work_q_main+0x1c>
   145b4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   145b8:	07cb      	lsls	r3, r1, #31
   145ba:	d500      	bpl.n	145be <work_q_main+0x38>
			handler(work);
   145bc:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   145be:	f7ff fcf5 	bl	13fac <_impl_k_yield>
   145c2:	e7e2      	b.n	1458a <work_q_main+0x4>

000145c4 <k_work_q_start>:
{
   145c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   145c6:	b087      	sub	sp, #28
   145c8:	4604      	mov	r4, r0
   145ca:	461f      	mov	r7, r3
   145cc:	460d      	mov	r5, r1
   145ce:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   145d0:	f7ff fa5e 	bl	13a90 <_impl_k_queue_init>

   145d4:	2000      	movs	r0, #0
   145d6:	9005      	str	r0, [sp, #20]
   145d8:	9004      	str	r0, [sp, #16]
   145da:	9002      	str	r0, [sp, #8]
   145dc:	9001      	str	r0, [sp, #4]
   145de:	9703      	str	r7, [sp, #12]
   145e0:	9400      	str	r4, [sp, #0]
   145e2:	4b04      	ldr	r3, [pc, #16]	; (145f4 <k_work_q_start+0x30>)
   145e4:	4632      	mov	r2, r6
   145e6:	4629      	mov	r1, r5
   145e8:	f104 0010 	add.w	r0, r4, #16
   145ec:	f7ff ff1a 	bl	14424 <_impl_k_thread_create>
}
   145f0:	b007      	add	sp, #28
   145f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145f4:	00014587 	.word	0x00014587

000145f8 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   145f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   145fc:	2300      	movs	r3, #0
   145fe:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14600:	4a04      	ldr	r2, [pc, #16]	; (14614 <k_delayed_work_init+0x1c>)
   14602:	6003      	str	r3, [r0, #0]
   14604:	6041      	str	r1, [r0, #4]
   14606:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   14608:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   1460a:	6143      	str	r3, [r0, #20]
	t->func = func;
   1460c:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   1460e:	6243      	str	r3, [r0, #36]	; 0x24
   14610:	4770      	bx	lr
   14612:	bf00      	nop
   14614:	0001457d 	.word	0x0001457d

00014618 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   14618:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   1461a:	f04f 0320 	mov.w	r3, #32
   1461e:	f3ef 8411 	mrs	r4, BASEPRI
   14622:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   14626:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14628:	b923      	cbnz	r3, 14634 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1462a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   1462e:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14632:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14634:	f3bf 8f5b 	dmb	ish
   14638:	6883      	ldr	r3, [r0, #8]
   1463a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1463e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14640:	f100 0508 	add.w	r5, r0, #8
   14644:	d533      	bpl.n	146ae <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   14646:	6a42      	ldr	r2, [r0, #36]	; 0x24
   14648:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1464a:	2100      	movs	r1, #0
   1464c:	2b00      	cmp	r3, #0
   1464e:	d0ec      	beq.n	1462a <k_delayed_work_cancel+0x12>
   14650:	4298      	cmp	r0, r3
   14652:	d127      	bne.n	146a4 <k_delayed_work_cancel+0x8c>
   14654:	6803      	ldr	r3, [r0, #0]
   14656:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14658:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   1465c:	b9c9      	cbnz	r1, 14692 <k_delayed_work_cancel+0x7a>
   1465e:	42b8      	cmp	r0, r7
	list->head = node;
   14660:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   14662:	d100      	bne.n	14666 <k_delayed_work_cancel+0x4e>
	list->tail = node;
   14664:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14666:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14668:	f003 0303 	and.w	r3, r3, #3
   1466c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   1466e:	2300      	movs	r3, #0
   14670:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14672:	f3bf 8f5b 	dmb	ish
   14676:	e855 2f00 	ldrex	r2, [r5]
   1467a:	f022 0201 	bic.w	r2, r2, #1
   1467e:	e845 2100 	strex	r1, r2, [r5]
   14682:	2900      	cmp	r1, #0
   14684:	d1f7      	bne.n	14676 <k_delayed_work_cancel+0x5e>
   14686:	f3bf 8f5b 	dmb	ish
   1468a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   1468e:	4618      	mov	r0, r3
   14690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14692:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14694:	f006 0603 	and.w	r6, r6, #3
   14698:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   1469a:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   1469c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1469e:	bf08      	it	eq
   146a0:	6051      	streq	r1, [r2, #4]
   146a2:	e7e0      	b.n	14666 <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   146a4:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   146a6:	4619      	mov	r1, r3
   146a8:	f026 0303 	bic.w	r3, r6, #3
   146ac:	e7ce      	b.n	1464c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   146ae:	69c1      	ldr	r1, [r0, #28]
   146b0:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   146b2:	f100 020c 	add.w	r2, r0, #12
   146b6:	d0da      	beq.n	1466e <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   146b8:	4b08      	ldr	r3, [pc, #32]	; (146dc <k_delayed_work_cancel+0xc4>)
   146ba:	699b      	ldr	r3, [r3, #24]
   146bc:	429a      	cmp	r2, r3
   146be:	bf1f      	itttt	ne
   146c0:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   146c2:	6913      	ldrne	r3, [r2, #16]
   146c4:	185b      	addne	r3, r3, r1
   146c6:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   146c8:	6903      	ldr	r3, [r0, #16]
   146ca:	68c2      	ldr	r2, [r0, #12]
   146cc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   146ce:	68c2      	ldr	r2, [r0, #12]
   146d0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   146d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146d6:	61c3      	str	r3, [r0, #28]
   146d8:	e7c9      	b.n	1466e <k_delayed_work_cancel+0x56>
   146da:	bf00      	nop
   146dc:	20001950 	.word	0x20001950

000146e0 <k_delayed_work_submit_to_queue>:
{
   146e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146e2:	4607      	mov	r7, r0
   146e4:	460c      	mov	r4, r1
   146e6:	4615      	mov	r5, r2
	__asm__ volatile(
   146e8:	f04f 0320 	mov.w	r3, #32
   146ec:	f3ef 8611 	mrs	r6, BASEPRI
   146f0:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   146f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   146f6:	b123      	cbz	r3, 14702 <k_delayed_work_submit_to_queue+0x22>
   146f8:	4283      	cmp	r3, r0
   146fa:	d00b      	beq.n	14714 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   146fc:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14700:	e00d      	b.n	1471e <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   14702:	b138      	cbz	r0, 14714 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   14704:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   14706:	b96d      	cbnz	r5, 14724 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14708:	4621      	mov	r1, r4
   1470a:	4638      	mov	r0, r7
   1470c:	f7ff ff1e 	bl	1454c <k_work_submit_to_queue>
	err = 0;
   14710:	2000      	movs	r0, #0
   14712:	e004      	b.n	1471e <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   14714:	4620      	mov	r0, r4
   14716:	f7ff ff7f 	bl	14618 <k_delayed_work_cancel>
		if (err < 0) {
   1471a:	2800      	cmp	r0, #0
   1471c:	daf2      	bge.n	14704 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1471e:	f386 8811 	msr	BASEPRI, r6
}
   14722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14724:	220a      	movs	r2, #10
   14726:	3509      	adds	r5, #9
   14728:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   1472c:	4a16      	ldr	r2, [pc, #88]	; (14788 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   1472e:	2300      	movs	r3, #0
   14730:	4611      	mov	r1, r2
   14732:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14734:	61a3      	str	r3, [r4, #24]
   14736:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   1473a:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1473c:	428b      	cmp	r3, r1
   1473e:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14742:	61e5      	str	r5, [r4, #28]
   14744:	d106      	bne.n	14754 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   14746:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   14748:	6993      	ldr	r3, [r2, #24]
   1474a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   1474c:	6993      	ldr	r3, [r2, #24]
   1474e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   14750:	6197      	str	r7, [r2, #24]
   14752:	e7dd      	b.n	14710 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14754:	2b00      	cmp	r3, #0
   14756:	d0f6      	beq.n	14746 <k_delayed_work_submit_to_queue+0x66>
   14758:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1475c:	69e0      	ldr	r0, [r4, #28]
   1475e:	691d      	ldr	r5, [r3, #16]
   14760:	42a8      	cmp	r0, r5
   14762:	dc08      	bgt.n	14776 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   14764:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   14766:	1a28      	subs	r0, r5, r0
   14768:	6118      	str	r0, [r3, #16]
   1476a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   1476c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   1476e:	685a      	ldr	r2, [r3, #4]
   14770:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   14772:	605f      	str	r7, [r3, #4]
   14774:	e7cc      	b.n	14710 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   14776:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14778:	4573      	cmp	r3, lr
   1477a:	61e0      	str	r0, [r4, #28]
   1477c:	d0e3      	beq.n	14746 <k_delayed_work_submit_to_queue+0x66>
   1477e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14780:	2b00      	cmp	r3, #0
   14782:	d1eb      	bne.n	1475c <k_delayed_work_submit_to_queue+0x7c>
   14784:	e7df      	b.n	14746 <k_delayed_work_submit_to_queue+0x66>
   14786:	bf00      	nop
   14788:	20001950 	.word	0x20001950

0001478c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   1478c:	2314      	movs	r3, #20
   1478e:	b530      	push	{r4, r5, lr}
   14790:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   14794:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   14796:	2900      	cmp	r1, #0
   14798:	da00      	bge.n	1479c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   1479a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1479c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   1479e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   147a0:	f003 030f 	and.w	r3, r3, #15
   147a4:	2b02      	cmp	r3, #2
   147a6:	d003      	beq.n	147b0 <clear_event_registrations+0x24>
   147a8:	2b04      	cmp	r3, #4
   147aa:	d001      	beq.n	147b0 <clear_event_registrations+0x24>
   147ac:	2b01      	cmp	r3, #1
   147ae:	d104      	bne.n	147ba <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   147b0:	6843      	ldr	r3, [r0, #4]
   147b2:	6805      	ldr	r5, [r0, #0]
   147b4:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   147b6:	6805      	ldr	r5, [r0, #0]
   147b8:	606b      	str	r3, [r5, #4]
   147ba:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   147be:	f04f 0320 	mov.w	r3, #32
   147c2:	f3ef 8211 	mrs	r2, BASEPRI
   147c6:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   147ca:	3901      	subs	r1, #1
   147cc:	3814      	subs	r0, #20
   147ce:	e7e2      	b.n	14796 <clear_event_registrations+0xa>

000147d0 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   147d0:	6883      	ldr	r3, [r0, #8]
{
   147d2:	b570      	push	{r4, r5, r6, lr}
   147d4:	4605      	mov	r5, r0
   147d6:	460e      	mov	r6, r1
	if (!event->poller) {
   147d8:	b1d3      	cbz	r3, 14810 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   147da:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   147dc:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   147de:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   147e0:	7a63      	ldrb	r3, [r4, #9]
   147e2:	079a      	lsls	r2, r3, #30
   147e4:	d514      	bpl.n	14810 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   147e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   147e8:	3302      	adds	r3, #2
   147ea:	d01a      	beq.n	14822 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   147ec:	4620      	mov	r0, r4
   147ee:	f7ff fa6e 	bl	13cce <_unpend_thread>
	_set_thread_return_value(thread,
   147f2:	2e00      	cmp	r6, #0
   147f4:	bf0c      	ite	eq
   147f6:	f06f 0303 	mvneq.w	r3, #3
   147fa:	2300      	movne	r3, #0
   147fc:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   147fe:	7a63      	ldrb	r3, [r4, #9]
   14800:	06db      	lsls	r3, r3, #27
   14802:	d105      	bne.n	14810 <signal_poll_event+0x40>
   14804:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14806:	3301      	adds	r3, #1
   14808:	d102      	bne.n	14810 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   1480a:	4620      	mov	r0, r4
   1480c:	f7ff fac2 	bl	13d94 <_add_thread_to_ready_q>
	event->state |= state;
   14810:	7b6b      	ldrb	r3, [r5, #13]
   14812:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   14816:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   1481a:	2000      	movs	r0, #0
	event->state |= state;
   1481c:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   1481e:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   14820:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   14822:	f06f 000a 	mvn.w	r0, #10
}
   14826:	bd70      	pop	{r4, r5, r6, pc}

00014828 <add_event>:
{
   14828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1482a:	6803      	ldr	r3, [r0, #0]
   1482c:	4298      	cmp	r0, r3
   1482e:	4604      	mov	r4, r0
   14830:	460e      	mov	r6, r1
   14832:	4617      	mov	r7, r2
   14834:	d106      	bne.n	14844 <add_event+0x1c>
	node->next = list;
   14836:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   14838:	6863      	ldr	r3, [r4, #4]
   1483a:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   1483c:	6863      	ldr	r3, [r4, #4]
   1483e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   14840:	6066      	str	r6, [r4, #4]
   14842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14844:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   14846:	2b00      	cmp	r3, #0
   14848:	d0f5      	beq.n	14836 <add_event+0xe>
   1484a:	689b      	ldr	r3, [r3, #8]
   1484c:	6811      	ldr	r1, [r2, #0]
   1484e:	6818      	ldr	r0, [r3, #0]
   14850:	f7ff f9ee 	bl	13c30 <_is_t1_higher_prio_than_t2>
   14854:	2800      	cmp	r0, #0
   14856:	d1ee      	bne.n	14836 <add_event+0xe>
	return list->head == list;
   14858:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1485a:	42ac      	cmp	r4, r5
   1485c:	d0eb      	beq.n	14836 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1485e:	2d00      	cmp	r5, #0
   14860:	d0e9      	beq.n	14836 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   14862:	68ab      	ldr	r3, [r5, #8]
   14864:	6838      	ldr	r0, [r7, #0]
   14866:	6819      	ldr	r1, [r3, #0]
   14868:	f7ff f9e2 	bl	13c30 <_is_t1_higher_prio_than_t2>
   1486c:	b130      	cbz	r0, 1487c <add_event+0x54>
		node->prev = insert_point->prev;
   1486e:	686b      	ldr	r3, [r5, #4]
   14870:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   14872:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   14874:	686b      	ldr	r3, [r5, #4]
   14876:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   14878:	606e      	str	r6, [r5, #4]
   1487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1487c:	6863      	ldr	r3, [r4, #4]
   1487e:	429d      	cmp	r5, r3
   14880:	d0d9      	beq.n	14836 <add_event+0xe>
   14882:	682d      	ldr	r5, [r5, #0]
   14884:	e7eb      	b.n	1485e <add_event+0x36>

00014886 <k_poll_event_init>:
{
   14886:	b530      	push	{r4, r5, lr}
	event->type = type;
   14888:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1488a:	6103      	str	r3, [r0, #16]
	event->type = type;
   1488c:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   14890:	7b81      	ldrb	r1, [r0, #14]
   14892:	f362 0100 	bfi	r1, r2, #0, #1
   14896:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   14898:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1489a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   1489c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   148a0:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   148a4:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   148a6:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   148a8:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   148aa:	bd30      	pop	{r4, r5, pc}

000148ac <_impl_k_poll>:
{
   148ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   148b0:	4b3f      	ldr	r3, [pc, #252]	; (149b0 <_impl_k_poll+0x104>)
{
   148b2:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   148b4:	689b      	ldr	r3, [r3, #8]
   148b6:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   148b8:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   148ba:	2301      	movs	r3, #1
{
   148bc:	4607      	mov	r7, r0
   148be:	468a      	mov	sl, r1
   148c0:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   148c2:	9301      	str	r3, [sp, #4]
   148c4:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   148c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   148ca:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   148cc:	4556      	cmp	r6, sl
   148ce:	db10      	blt.n	148f2 <_impl_k_poll+0x46>
   148d0:	f04f 0320 	mov.w	r3, #32
   148d4:	f3ef 8611 	mrs	r6, BASEPRI
   148d8:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   148dc:	9c01      	ldr	r4, [sp, #4]
   148de:	2c00      	cmp	r4, #0
   148e0:	d13f      	bne.n	14962 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   148e2:	4632      	mov	r2, r6
   148e4:	4629      	mov	r1, r5
   148e6:	4638      	mov	r0, r7
   148e8:	f7ff ff50 	bl	1478c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   148ec:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   148f0:	e040      	b.n	14974 <_impl_k_poll+0xc8>
	__asm__ volatile(
   148f2:	f04f 0320 	mov.w	r3, #32
   148f6:	f3ef 8b11 	mrs	fp, BASEPRI
   148fa:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   148fe:	7b62      	ldrb	r2, [r4, #13]
   14900:	f002 030f 	and.w	r3, r2, #15
   14904:	2b02      	cmp	r3, #2
   14906:	d003      	beq.n	14910 <_impl_k_poll+0x64>
   14908:	2b04      	cmp	r3, #4
   1490a:	d004      	beq.n	14916 <_impl_k_poll+0x6a>
   1490c:	2b01      	cmp	r3, #1
   1490e:	d106      	bne.n	1491e <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   14910:	6921      	ldr	r1, [r4, #16]
   14912:	6889      	ldr	r1, [r1, #8]
   14914:	e001      	b.n	1491a <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   14916:	6921      	ldr	r1, [r4, #16]
   14918:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   1491a:	2900      	cmp	r1, #0
   1491c:	d13d      	bne.n	1499a <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   1491e:	f1b8 0f00 	cmp.w	r8, #0
   14922:	d014      	beq.n	1494e <_impl_k_poll+0xa2>
   14924:	9a01      	ldr	r2, [sp, #4]
   14926:	b192      	cbz	r2, 1494e <_impl_k_poll+0xa2>
	switch (event->type) {
   14928:	2b02      	cmp	r3, #2
   1492a:	d007      	beq.n	1493c <_impl_k_poll+0x90>
   1492c:	2b04      	cmp	r3, #4
   1492e:	d013      	beq.n	14958 <_impl_k_poll+0xac>
   14930:	2b01      	cmp	r3, #1
   14932:	d109      	bne.n	14948 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   14934:	466a      	mov	r2, sp
   14936:	4621      	mov	r1, r4
   14938:	6920      	ldr	r0, [r4, #16]
   1493a:	e003      	b.n	14944 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   1493c:	6920      	ldr	r0, [r4, #16]
   1493e:	466a      	mov	r2, sp
   14940:	4621      	mov	r1, r4
   14942:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   14944:	f7ff ff70 	bl	14828 <add_event>
	event->poller = poller;
   14948:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   1494c:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1494e:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   14952:	3601      	adds	r6, #1
   14954:	3414      	adds	r4, #20
   14956:	e7b9      	b.n	148cc <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   14958:	6920      	ldr	r0, [r4, #16]
   1495a:	466a      	mov	r2, sp
   1495c:	4621      	mov	r1, r4
   1495e:	3008      	adds	r0, #8
   14960:	e7f0      	b.n	14944 <_impl_k_poll+0x98>
	poller.is_polling = 0;
   14962:	2300      	movs	r3, #0
   14964:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   14966:	f1b8 0f00 	cmp.w	r8, #0
   1496a:	d107      	bne.n	1497c <_impl_k_poll+0xd0>
   1496c:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   14970:	f06f 040a 	mvn.w	r4, #10
}
   14974:	4620      	mov	r0, r4
   14976:	b005      	add	sp, #20
   14978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1497c:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   1497e:	4642      	mov	r2, r8
   14980:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14982:	9102      	str	r1, [sp, #8]
   14984:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14986:	f7ff fab3 	bl	13ef0 <_pend_current_thread>
   1498a:	4604      	mov	r4, r0
	__asm__ volatile(
   1498c:	f04f 0320 	mov.w	r3, #32
   14990:	f3ef 8611 	mrs	r6, BASEPRI
   14994:	f383 8811 	msr	BASEPRI, r3
   14998:	e7a3      	b.n	148e2 <_impl_k_poll+0x36>
	event->state |= state;
   1499a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   1499e:	f363 1207 	bfi	r2, r3, #4, #4
   149a2:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   149a4:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   149a8:	f8cd 9004 	str.w	r9, [sp, #4]
   149ac:	e7cf      	b.n	1494e <_impl_k_poll+0xa2>
   149ae:	bf00      	nop
   149b0:	20001950 	.word	0x20001950

000149b4 <_handle_obj_poll_events>:
	return list->head == list;
   149b4:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   149b6:	4298      	cmp	r0, r3
   149b8:	d007      	beq.n	149ca <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   149ba:	e893 0005 	ldmia.w	r3, {r0, r2}
   149be:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   149c0:	6818      	ldr	r0, [r3, #0]
   149c2:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   149c4:	4618      	mov	r0, r3
   149c6:	f7ff bf03 	b.w	147d0 <signal_poll_event>
   149ca:	4770      	bx	lr

000149cc <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   149cc:	b538      	push	{r3, r4, r5, lr}
   149ce:	f04f 0320 	mov.w	r3, #32
   149d2:	f3ef 8511 	mrs	r5, BASEPRI
   149d6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   149da:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   149dc:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   149de:	4298      	cmp	r0, r3
	signal->signaled = 1;
   149e0:	f04f 0101 	mov.w	r1, #1
   149e4:	6081      	str	r1, [r0, #8]
   149e6:	d00d      	beq.n	14a04 <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   149e8:	e893 0005 	ldmia.w	r3, {r0, r2}
   149ec:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   149ee:	6818      	ldr	r0, [r3, #0]
   149f0:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   149f2:	4618      	mov	r0, r3
   149f4:	f7ff feec 	bl	147d0 <signal_poll_event>
   149f8:	4604      	mov	r4, r0

	_reschedule(key);
   149fa:	4628      	mov	r0, r5
   149fc:	f7ff f972 	bl	13ce4 <_reschedule>
	return rc;
}
   14a00:	4620      	mov	r0, r4
   14a02:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a04:	f385 8811 	msr	BASEPRI, r5
		return 0;
   14a08:	2400      	movs	r4, #0
   14a0a:	e7f9      	b.n	14a00 <_impl_k_poll_signal+0x34>

00014a0c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   14a0c:	4770      	bx	lr
