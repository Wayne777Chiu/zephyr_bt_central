
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002d28 	.word	0x20002d28

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001b01 	.word	0x00001b01
       8:	00001b55 	.word	0x00001b55
       c:	00001985 	.word	0x00001985
      10:	00001985 	.word	0x00001985
      14:	00001985 	.word	0x00001985
      18:	00001985 	.word	0x00001985
      1c:	00001985 	.word	0x00001985
      20:	00001985 	.word	0x00001985
      24:	00001985 	.word	0x00001985
      28:	00001985 	.word	0x00001985
      2c:	00001589 	.word	0x00001589
      30:	00001985 	.word	0x00001985
      34:	00001985 	.word	0x00001985
      38:	00001545 	.word	0x00001545
      3c:	00001985 	.word	0x00001985

00000040 <_irq_vector_table>:
      40:	00001ac5 00011173 00001ac5 00001ac5     ....s...........
      50:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      60:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      70:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      80:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      90:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      a0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      b0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      c0:	00001ac5 00001ac5 00001ac5 00001ac5     ................
      d0:	00001ac5 00001ac5 00001ac5              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001279 00000000 000018f9     ....y...........
      ec:	00000000 000018f9 00000000 000018f9     ................
      fc:	00000000 000018f9 00000000 000018f9     ................
     10c:	00000000 0001320d 00000000 000018f9     .....2..........
     11c:	00000000 000018f9 00000000 000018f9     ................
     12c:	00000000 000018f9 00000000 00011139     ............9...
     13c:	00000000 000018f9 20003f24 00013511     ........$?. .5..
     14c:	00000000 000018f9 00000000 000018f9     ................
     15c:	00000000 000018f9 00000000 000013a1     ................
     16c:	00000000 000018f9 00000000 000018f9     ................
     17c:	00000000 000018f9 00000000 000018f9     ................
     18c:	00000000 000018f9 00000000 000018f9     ................
     19c:	00000000 0001116d 00000000 000018f9     ....m...........
     1ac:	00000000 000018f9 00000000 000018f9     ................
     1bc:	00000000 000018f9 00000000 000018f9     ................
     1cc:	00000000 000018f9 00000000 000018f9     ................
     1dc:	00000000 000018f9 00000000 000018f9     ................
     1ec:	00000000 000018f9 00000000 000018f9     ................
     1fc:	00000000 000018f9 00000000 000018f9     ................
     20c:	00000000 000018f9                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <bt_addr_le_to_str.constprop.2>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     54c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     54e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     550:	b08a      	sub	sp, #40	; 0x28
     552:	4604      	mov	r4, r0
     554:	460e      	mov	r6, r1
     556:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     558:	2b03      	cmp	r3, #3
     55a:	d820      	bhi.n	59e <bt_addr_le_to_str.constprop.2+0x52>
     55c:	e8df f003 	tbb	[pc, r3]
     560:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     564:	4911      	ldr	r1, [pc, #68]	; (5ac <bt_addr_le_to_str.constprop.2+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     566:	4628      	mov	r0, r5
     568:	f001 fb26 	bl	1bb8 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     56c:	7862      	ldrb	r2, [r4, #1]
     56e:	9204      	str	r2, [sp, #16]
     570:	78a2      	ldrb	r2, [r4, #2]
     572:	9203      	str	r2, [sp, #12]
     574:	78e2      	ldrb	r2, [r4, #3]
     576:	9202      	str	r2, [sp, #8]
     578:	7922      	ldrb	r2, [r4, #4]
     57a:	9201      	str	r2, [sp, #4]
     57c:	7962      	ldrb	r2, [r4, #5]
     57e:	9200      	str	r2, [sp, #0]
     580:	79a3      	ldrb	r3, [r4, #6]
     582:	9505      	str	r5, [sp, #20]
     584:	4a0a      	ldr	r2, [pc, #40]	; (5b0 <bt_addr_le_to_str.constprop.2+0x64>)
     586:	211b      	movs	r1, #27
     588:	4630      	mov	r0, r6
     58a:	f000 fd0d 	bl	fa8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     58e:	b00a      	add	sp, #40	; 0x28
     590:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     592:	4908      	ldr	r1, [pc, #32]	; (5b4 <bt_addr_le_to_str.constprop.2+0x68>)
     594:	e7e7      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "public id");
     596:	4908      	ldr	r1, [pc, #32]	; (5b8 <bt_addr_le_to_str.constprop.2+0x6c>)
     598:	e7e5      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		strcpy(type, "random id");
     59a:	4908      	ldr	r1, [pc, #32]	; (5bc <bt_addr_le_to_str.constprop.2+0x70>)
     59c:	e7e3      	b.n	566 <bt_addr_le_to_str.constprop.2+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <bt_addr_le_to_str.constprop.2+0x74>)
     5a0:	210a      	movs	r1, #10
     5a2:	4628      	mov	r0, r5
     5a4:	f000 fd00 	bl	fa8 <snprintk>
     5a8:	e7e0      	b.n	56c <bt_addr_le_to_str.constprop.2+0x20>
     5aa:	bf00      	nop
     5ac:	00014bc1 	.word	0x00014bc1
     5b0:	00014bea 	.word	0x00014bea
     5b4:	00014bc8 	.word	0x00014bc8
     5b8:	00014bcf 	.word	0x00014bcf
     5bc:	00014bd9 	.word	0x00014bd9
     5c0:	00014be3 	.word	0x00014be3

000005c4 <connected>:

	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
}

static void connected(struct bt_conn *conn, u8_t err)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b089      	sub	sp, #36	; 0x24
     5c8:	460d      	mov	r5, r1
     5ca:	4604      	mov	r4, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     5cc:	f004 f882 	bl	46d4 <bt_conn_get_dst>
     5d0:	a901      	add	r1, sp, #4
     5d2:	f7ff ffbb 	bl	54c <bt_addr_le_to_str.constprop.2>

	if (err) {
     5d6:	b135      	cbz	r5, 5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		printk("Failed to connect to %s (%u)\n", addr, err);
     5d8:	462a      	mov	r2, r5
     5da:	a901      	add	r1, sp, #4
     5dc:	4808      	ldr	r0, [pc, #32]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5de:	f000 fcd5 	bl	f8c <printk>
	}

	printk("Connected: %s\n", addr);

	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
}
     5e2:	b009      	add	sp, #36	; 0x24
     5e4:	bd30      	pop	{r4, r5, pc}
	if (conn != default_conn) {
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	429c      	cmp	r4, r3
     5ec:	d1f9      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
	printk("Connected: %s\n", addr);
     5ee:	a901      	add	r1, sp, #4
     5f0:	4805      	ldr	r0, [pc, #20]	; (608 <CONFIG_BT_CTLR_COMPANY_ID+0x17>)
     5f2:	f000 fccb 	bl	f8c <printk>
	bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
     5f6:	2113      	movs	r1, #19
     5f8:	4620      	mov	r0, r4
     5fa:	f004 f91b 	bl	4834 <bt_conn_disconnect>
     5fe:	e7f0      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
     600:	00014c0d 	.word	0x00014c0d
     604:	20000000 	.word	0x20000000
     608:	00014c2b 	.word	0x00014c2b

0000060c <disconnected>:

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     60c:	b530      	push	{r4, r5, lr}
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	if (conn != default_conn) {
     60e:	4c13      	ldr	r4, [pc, #76]	; (65c <disconnected+0x50>)
     610:	6823      	ldr	r3, [r4, #0]
     612:	4283      	cmp	r3, r0
{
     614:	b08b      	sub	sp, #44	; 0x2c
     616:	460d      	mov	r5, r1
	if (conn != default_conn) {
     618:	d11d      	bne.n	656 <disconnected+0x4a>
		return;
	}

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     61a:	f004 f85b 	bl	46d4 <bt_conn_get_dst>
     61e:	a903      	add	r1, sp, #12
     620:	f7ff ff94 	bl	54c <bt_addr_le_to_str.constprop.2>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     624:	462a      	mov	r2, r5
     626:	a903      	add	r1, sp, #12
     628:	480d      	ldr	r0, [pc, #52]	; (660 <disconnected+0x54>)
     62a:	f000 fcaf 	bl	f8c <printk>

	bt_conn_unref(default_conn);
     62e:	6820      	ldr	r0, [r4, #0]
     630:	f003 fe86 	bl	4340 <bt_conn_unref>
	default_conn = NULL;
     634:	2300      	movs	r3, #0
     636:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <disconnected+0x58>)
     63a:	490b      	ldr	r1, [pc, #44]	; (668 <disconnected+0x5c>)
     63c:	6818      	ldr	r0, [r3, #0]
     63e:	9001      	str	r0, [sp, #4]
     640:	889b      	ldrh	r3, [r3, #4]
     642:	f8ad 3008 	strh.w	r3, [sp, #8]
     646:	a801      	add	r0, sp, #4
     648:	f003 fa52 	bl	3af0 <bt_le_scan_start>
	if (err) {
     64c:	4601      	mov	r1, r0
     64e:	b110      	cbz	r0, 656 <disconnected+0x4a>
		printk("Scanning failed to start (err %d)\n", err);
     650:	4806      	ldr	r0, [pc, #24]	; (66c <disconnected+0x60>)
     652:	f000 fc9b 	bl	f8c <printk>
	}
}
     656:	b00b      	add	sp, #44	; 0x2c
     658:	bd30      	pop	{r4, r5, pc}
     65a:	bf00      	nop
     65c:	20000000 	.word	0x20000000
     660:	00014c56 	.word	0x00014c56
     664:	00014b64 	.word	0x00014b64
     668:	00000671 	.word	0x00000671
     66c:	00014c74 	.word	0x00014c74

00000670 <device_found>:
{
     670:	b570      	push	{r4, r5, r6, lr}
	if (default_conn) {
     672:	4c10      	ldr	r4, [pc, #64]	; (6b4 <device_found+0x44>)
     674:	6823      	ldr	r3, [r4, #0]
{
     676:	b08a      	sub	sp, #40	; 0x28
     678:	4606      	mov	r6, r0
     67a:	460d      	mov	r5, r1
	if (default_conn) {
     67c:	b9c3      	cbnz	r3, 6b0 <device_found+0x40>
	if (type != BT_LE_ADV_IND && type != BT_LE_ADV_DIRECT_IND) {
     67e:	2a01      	cmp	r2, #1
     680:	d816      	bhi.n	6b0 <device_found+0x40>
	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
     682:	a903      	add	r1, sp, #12
     684:	f7ff ff62 	bl	54c <bt_addr_le_to_str.constprop.2>
	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
     688:	462a      	mov	r2, r5
     68a:	a903      	add	r1, sp, #12
     68c:	480a      	ldr	r0, [pc, #40]	; (6b8 <device_found+0x48>)
     68e:	f000 fc7d 	bl	f8c <printk>
	if (rssi < -70) {
     692:	3546      	adds	r5, #70	; 0x46
     694:	db0c      	blt.n	6b0 <device_found+0x40>
	if (bt_le_scan_stop()) {
     696:	f003 fa7d 	bl	3b94 <bt_le_scan_stop>
     69a:	b948      	cbnz	r0, 6b0 <device_found+0x40>
	default_conn = bt_conn_create_le(addr, BT_LE_CONN_PARAM_DEFAULT);
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <device_found+0x4c>)
     69e:	6810      	ldr	r0, [r2, #0]
     6a0:	6851      	ldr	r1, [r2, #4]
     6a2:	ab01      	add	r3, sp, #4
     6a4:	c303      	stmia	r3!, {r0, r1}
     6a6:	a901      	add	r1, sp, #4
     6a8:	4630      	mov	r0, r6
     6aa:	f004 f815 	bl	46d8 <bt_conn_create_le>
     6ae:	6020      	str	r0, [r4, #0]
}
     6b0:	b00a      	add	sp, #40	; 0x28
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	20000000 	.word	0x20000000
     6b8:	00014c3a 	.word	0x00014c3a
     6bc:	00014b6a 	.word	0x00014b6a

000006c0 <main>:
		.connected = connected,
		.disconnected = disconnected,
};

void main(void)
{
     6c0:	b507      	push	{r0, r1, r2, lr}
	int err;

	err = bt_enable(NULL);
     6c2:	2000      	movs	r0, #0
     6c4:	f003 f9a0 	bl	3a08 <bt_enable>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b128      	cbz	r0, 6d8 <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     6cc:	480e      	ldr	r0, [pc, #56]	; (708 <main+0x48>)

	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     6ce:	f000 fc5d 	bl	f8c <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     6d2:	b003      	add	sp, #12
     6d4:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     6d8:	480c      	ldr	r0, [pc, #48]	; (70c <main+0x4c>)
     6da:	f000 fc57 	bl	f8c <printk>
	bt_conn_cb_register(&conn_callbacks);
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <main+0x50>)
     6e0:	f003 fafa 	bl	3cd8 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <main+0x54>)
     6e6:	490c      	ldr	r1, [pc, #48]	; (718 <main+0x58>)
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	9000      	str	r0, [sp, #0]
     6ec:	889b      	ldrh	r3, [r3, #4]
     6ee:	f8ad 3004 	strh.w	r3, [sp, #4]
     6f2:	4668      	mov	r0, sp
     6f4:	f003 f9fc 	bl	3af0 <bt_le_scan_start>
	if (err) {
     6f8:	4601      	mov	r1, r0
     6fa:	b108      	cbz	r0, 700 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <main+0x5c>)
     6fe:	e7e6      	b.n	6ce <main+0xe>
	printk("Scanning successfully started\n");
     700:	4807      	ldr	r0, [pc, #28]	; (720 <main+0x60>)
     702:	f000 fc43 	bl	f8c <printk>
     706:	e7e4      	b.n	6d2 <main+0x12>
     708:	00014c97 	.word	0x00014c97
     70c:	00014cb7 	.word	0x00014cb7
     710:	20003a68 	.word	0x20003a68
     714:	00014b72 	.word	0x00014b72
     718:	00000671 	.word	0x00000671
     71c:	00014c74 	.word	0x00014c74
     720:	00014cce 	.word	0x00014cce

00000724 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ftpan_32+0x34>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	2b06      	cmp	r3, #6
     72a:	d112      	bne.n	752 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     72c:	4b0b      	ldr	r3, [pc, #44]	; (75c <ftpan_32+0x38>)
     72e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     730:	f010 000f 	ands.w	r0, r0, #15
     734:	d10d      	bne.n	752 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     736:	3304      	adds	r3, #4
     738:	681b      	ldr	r3, [r3, #0]
     73a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     73e:	2b30      	cmp	r3, #48	; 0x30
     740:	d108      	bne.n	754 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     742:	4b07      	ldr	r3, [pc, #28]	; (760 <ftpan_32+0x3c>)
     744:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     746:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     74a:	bf0c      	ite	eq
     74c:	2001      	moveq	r0, #1
     74e:	2000      	movne	r0, #0
     750:	4770      	bx	lr
			return true;
		}
	}

	return false;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fec 	.word	0xf0000fec

00000764 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     764:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8111 	mrs	r1, BASEPRI
     76e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     772:	f7ff ffd7 	bl	724 <ftpan_32>
     776:	b120      	cbz	r0, 782 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     778:	4a3d      	ldr	r2, [pc, #244]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     77a:	68d3      	ldr	r3, [r2, #12]
     77c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     780:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     782:	f7ff ffcf 	bl	724 <ftpan_32>
     786:	b110      	cbz	r0, 78e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     78a:	2203      	movs	r2, #3
     78c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     78e:	f7ff ffc9 	bl	724 <ftpan_32>
     792:	b130      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     798:	2200      	movs	r2, #0
     79a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	2b06      	cmp	r3, #6
     7a8:	d117      	bne.n	7da <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7ac:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     7ae:	0718      	lsls	r0, r3, #28
     7b0:	d113      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     7b2:	4b33      	ldr	r3, [pc, #204]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     7ba:	2a30      	cmp	r2, #48	; 0x30
     7bc:	d003      	beq.n	7c6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     7be:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     7c2:	2b40      	cmp	r3, #64	; 0x40
     7c4:	d109      	bne.n	7da <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7ce:	07d2      	lsls	r2, r2, #31
     7d0:	d503      	bpl.n	7da <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7d2:	f06f 0201 	mvn.w	r2, #1
     7d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7de:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     7e2:	2b00      	cmp	r3, #0
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7e6:	db03      	blt.n	7f0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7e8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ec:	2a00      	cmp	r2, #0
     7ee:	da2f      	bge.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7f0:	2201      	movs	r2, #1
     7f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7fa:	2a00      	cmp	r2, #0
     7fc:	d0fb      	beq.n	7f6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	2215      	movs	r2, #21
     804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     808:	4a1e      	ldr	r2, [pc, #120]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     80a:	4613      	mov	r3, r2
     80c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     810:	2900      	cmp	r1, #0
     812:	d0fb      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		NRF_UICR->PSELRESET[1] = 21;
     814:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     818:	2115      	movs	r1, #21
     81a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     822:	2a00      	cmp	r2, #0
     824:	d0fb      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     826:	2200      	movs	r2, #0
     828:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	4a15      	ldr	r2, [pc, #84]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     82e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     832:	2b00      	cmp	r3, #0
     834:	d0fb      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     836:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     83a:	4913      	ldr	r1, [pc, #76]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     83c:	4b13      	ldr	r3, [pc, #76]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     83e:	68ca      	ldr	r2, [r1, #12]
     840:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     844:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     846:	60cb      	str	r3, [r1, #12]
     848:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     84c:	bf00      	nop
     84e:	e7fd      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     850:	2201      	movs	r2, #1
     852:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     856:	4b0c      	ldr	r3, [pc, #48]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     85c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     85e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     862:	4a0c      	ldr	r2, [pc, #48]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     864:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     866:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     86a:	2000      	movs	r0, #0
     86c:	bd08      	pop	{r3, pc}
     86e:	bf00      	nop
     870:	e000edf0 	.word	0xe000edf0
     874:	400005a0 	.word	0x400005a0
     878:	f0000fe0 	.word	0xf0000fe0
     87c:	f0000fe4 	.word	0xf0000fe4
     880:	f0000fe8 	.word	0xf0000fe8
     884:	4001e000 	.word	0x4001e000
     888:	e000ed00 	.word	0xe000ed00
     88c:	05fa0004 	.word	0x05fa0004
     890:	20003a9c 	.word	0x20003a9c
     894:	03d09000 	.word	0x03d09000

00000898 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     898:	b508      	push	{r3, lr}
     89a:	4604      	mov	r4, r0
     89c:	4608      	mov	r0, r1
     89e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     8a0:	461a      	mov	r2, r3
     8a2:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     8a4:	f013 fbbe 	bl	14024 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     8a8:	f001 f8e4 	bl	1a74 <_impl_k_thread_abort>

000008ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     8ac:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     8ae:	7ac4      	ldrb	r4, [r0, #11]
     8b0:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     8b2:	428c      	cmp	r4, r1
     8b4:	f04f 040c 	mov.w	r4, #12
     8b8:	bfb6      	itet	lt
     8ba:	4361      	mullt	r1, r4
     8bc:	fb04 0101 	mlage	r1, r4, r1, r0
     8c0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     8c2:	2420      	movs	r4, #32
     8c4:	fb92 f4f4 	sdiv	r4, r2, r4
     8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     8cc:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     8ce:	f002 001f 	and.w	r0, r2, #31
     8d2:	bd10      	pop	{r4, pc}

000008d4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8d4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8d6:	ab01      	add	r3, sp, #4
     8d8:	f7ff ffe8 	bl	8ac <get_bit_ptr>

	*word |= (1<<bit);
     8dc:	9a01      	ldr	r2, [sp, #4]
     8de:	2301      	movs	r3, #1
     8e0:	fa03 f000 	lsl.w	r0, r3, r0
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	4303      	orrs	r3, r0
     8e8:	6013      	str	r3, [r2, #0]
}
     8ea:	b003      	add	sp, #12
     8ec:	f85d fb04 	ldr.w	pc, [sp], #4

000008f0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     8f0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     8f2:	ab01      	add	r3, sp, #4
     8f4:	f7ff ffda 	bl	8ac <get_bit_ptr>

	*word &= ~(1<<bit);
     8f8:	9a01      	ldr	r2, [sp, #4]
     8fa:	2301      	movs	r3, #1
     8fc:	fa03 f000 	lsl.w	r0, r3, r0
     900:	6813      	ldr	r3, [r2, #0]
     902:	ea23 0300 	bic.w	r3, r3, r0
     906:	6013      	str	r3, [r2, #0]
}
     908:	b003      	add	sp, #12
     90a:	f85d fb04 	ldr.w	pc, [sp], #4

0000090e <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     912:	6843      	ldr	r3, [r0, #4]
     914:	8905      	ldrh	r5, [r0, #8]
{
     916:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     918:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     91a:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     91c:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     91e:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     920:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     922:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     926:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     92a:	42b9      	cmp	r1, r7
     92c:	db05      	blt.n	93a <_sys_mem_pool_base_init+0x2c>
     92e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     930:	8923      	ldrh	r3, [r4, #8]
     932:	429d      	cmp	r5, r3
     934:	db23      	blt.n	97e <_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     93a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     93e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     942:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     946:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     948:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     94c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     950:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     954:	bfc8      	it	gt
     956:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     958:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     95c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     960:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     964:	bfca      	itet	gt
     966:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     96a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     96c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     970:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     974:	bfc8      	it	gt
     976:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     97a:	3101      	adds	r1, #1
     97c:	e7d5      	b.n	92a <_sys_mem_pool_base_init+0x1c>
	return p->buf + lsz * block;
     97e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     980:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     982:	6820      	ldr	r0, [r4, #0]
     984:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     986:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     988:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     98a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     98c:	689a      	ldr	r2, [r3, #8]
     98e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     990:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     992:	4620      	mov	r0, r4
     994:	6011      	str	r1, [r2, #0]
	list->tail = node;
     996:	6099      	str	r1, [r3, #8]
     998:	462a      	mov	r2, r5
     99a:	2100      	movs	r1, #0
     99c:	f7ff ff9a 	bl	8d4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     9a0:	3501      	adds	r5, #1
     9a2:	e7c5      	b.n	930 <_sys_mem_pool_base_init+0x22>

000009a4 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a8:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     9aa:	7a86      	ldrb	r6, [r0, #10]
{
     9ac:	af00      	add	r7, sp, #0
     9ae:	4604      	mov	r4, r0
     9b0:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     9b2:	00b3      	lsls	r3, r6, #2
     9b4:	330a      	adds	r3, #10
     9b6:	f023 0307 	bic.w	r3, r3, #7
     9ba:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9be:	6843      	ldr	r3, [r0, #4]
{
     9c0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     9c2:	3303      	adds	r3, #3
     9c4:	466a      	mov	r2, sp
     9c6:	f023 0303 	bic.w	r3, r3, #3
     9ca:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     9ce:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     9d4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     9d6:	f04f 0e0c 	mov.w	lr, #12
     9da:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     9dc:	42b3      	cmp	r3, r6
     9de:	6278      	str	r0, [r7, #36]	; 0x24
     9e0:	da09      	bge.n	9f6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     9e2:	b12b      	cbz	r3, 9f0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     9e4:	6810      	ldr	r0, [r2, #0]
     9e6:	0880      	lsrs	r0, r0, #2
     9e8:	3003      	adds	r0, #3
     9ea:	f020 0003 	bic.w	r0, r0, #3
     9ee:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     9f0:	6850      	ldr	r0, [r2, #4]
     9f2:	4288      	cmp	r0, r1
     9f4:	d20b      	bcs.n	a0e <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f8:	3301      	adds	r3, #1
     9fa:	d114      	bne.n	a26 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     9fe:	2300      	movs	r3, #0
     a00:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     a02:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     a06:	372c      	adds	r7, #44	; 0x2c
     a08:	46bd      	mov	sp, r7
     a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     a0e:	68e0      	ldr	r0, [r4, #12]
     a10:	fb0e 0003 	mla	r0, lr, r3, r0
     a14:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     a18:	6840      	ldr	r0, [r0, #4]
     a1a:	3204      	adds	r2, #4
     a1c:	4560      	cmp	r0, ip
     a1e:	bf18      	it	ne
     a20:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     a22:	3301      	adds	r3, #1
     a24:	e7d9      	b.n	9da <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     a26:	1c6b      	adds	r3, r5, #1
     a28:	d0e8      	beq.n	9fc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     a2a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     a2c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     a30:	230c      	movs	r3, #12
     a32:	fb03 1305 	mla	r3, r3, r5, r1
     a36:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     a3a:	429e      	cmp	r6, r3
     a3c:	d061      	beq.n	b02 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     a3e:	e896 000a 	ldmia.w	r6, {r1, r3}
     a42:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     a44:	6831      	ldr	r1, [r6, #0]
     a46:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     a48:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     a4c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     a4e:	4620      	mov	r0, r4
     a50:	fb93 f2f2 	sdiv	r2, r3, r2
     a54:	f7ff ff4c 	bl	8f0 <clear_free_bit>
     a58:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     a5c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     a60:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	429d      	cmp	r5, r3
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	db0e      	blt.n	a88 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     a6a:	693a      	ldr	r2, [r7, #16]
     a6c:	4611      	mov	r1, r2
     a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a70:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     a72:	1af3      	subs	r3, r6, r3
     a74:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     a78:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     a82:	2000      	movs	r0, #0
	*data_p = data;
     a84:	601e      	str	r6, [r3, #0]
	return 0;
     a86:	e7be      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     a88:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     a8c:	1af3      	subs	r3, r6, r3
     a8e:	fb93 f3f2 	sdiv	r3, r3, r2
     a92:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     a94:	009b      	lsls	r3, r3, #2
     a96:	617b      	str	r3, [r7, #20]
     a98:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     a9c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     a9e:	f04f 0b01 	mov.w	fp, #1
     aa2:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     aa4:	eb05 030b 	add.w	r3, r5, fp
     aa8:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     aaa:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     aae:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     ab0:	fb0b f308 	mul.w	r3, fp, r8
     ab4:	623b      	str	r3, [r7, #32]
     ab6:	18f3      	adds	r3, r6, r3
     ab8:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     aba:	697b      	ldr	r3, [r7, #20]
     abc:	4620      	mov	r0, r4
     abe:	eb0b 0203 	add.w	r2, fp, r3
     ac2:	f7ff ff07 	bl	8d4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     aca:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	6862      	ldr	r2, [r4, #4]
     ad8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     ada:	4590      	cmp	r8, r2
     adc:	d20a      	bcs.n	af4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     ade:	68e2      	ldr	r2, [r4, #12]
     ae0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     ae2:	6a38      	ldr	r0, [r7, #32]
     ae4:	440a      	add	r2, r1
     ae6:	1d11      	adds	r1, r2, #4
     ae8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     aea:	6891      	ldr	r1, [r2, #8]
     aec:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     aee:	6891      	ldr	r1, [r2, #8]
     af0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     af2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     af4:	f10b 0b01 	add.w	fp, fp, #1
     af8:	f1bb 0f04 	cmp.w	fp, #4
     afc:	d1d5      	bne.n	aaa <_sys_mem_pool_block_alloc+0x106>
     afe:	3501      	adds	r5, #1
     b00:	e7af      	b.n	a62 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     b02:	f06f 000a 	mvn.w	r0, #10
     b06:	e77e      	b.n	a06 <_sys_mem_pool_block_alloc+0x62>

00000b08 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b0c:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     b0e:	7a83      	ldrb	r3, [r0, #10]
     b10:	009b      	lsls	r3, r3, #2
     b12:	330a      	adds	r3, #10
     b14:	f023 0307 	bic.w	r3, r3, #7
{
     b18:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     b1a:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     b1e:	6843      	ldr	r3, [r0, #4]
     b20:	3303      	adds	r3, #3
     b22:	f023 0303 	bic.w	r3, r3, #3
{
     b26:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     b28:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     b2e:	2001      	movs	r0, #1
     b30:	4281      	cmp	r1, r0
     b32:	d24c      	bcs.n	bce <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     b34:	460c      	mov	r4, r1
     b36:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     b38:	4632      	mov	r2, r6
     b3a:	4621      	mov	r1, r4
     b3c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     b3e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     b42:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     b46:	f7ff fec5 	bl	8d4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     b4a:	2c00      	cmp	r4, #0
     b4c:	d048      	beq.n	be0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     b4e:	f107 030c 	add.w	r3, r7, #12
     b52:	4632      	mov	r2, r6
     b54:	4621      	mov	r1, r4
     b56:	4628      	mov	r0, r5
     b58:	f7ff fea8 	bl	8ac <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     b5c:	68fa      	ldr	r2, [r7, #12]
     b5e:	2304      	movs	r3, #4
     b60:	fb90 f0f3 	sdiv	r0, r0, r3
     b64:	0083      	lsls	r3, r0, #2
     b66:	6810      	ldr	r0, [r2, #0]
     b68:	40d8      	lsrs	r0, r3
     b6a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     b6e:	280f      	cmp	r0, #15
     b70:	d136      	bne.n	be0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     b72:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     b76:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     b7a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     b7c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     b84:	461a      	mov	r2, r3
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	603b      	str	r3, [r7, #0]
     b8c:	f7ff feb0 	bl	8f0 <clear_free_bit>
			if (b != bn &&
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	429e      	cmp	r6, r3
     b94:	d012      	beq.n	bbc <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     b96:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     b9a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     b9e:	686b      	ldr	r3, [r5, #4]
     ba0:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ba2:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     ba6:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     baa:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bac:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     bb0:	d204      	bcs.n	bbc <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     bb2:	6840      	ldr	r0, [r0, #4]
     bb4:	588b      	ldr	r3, [r1, r2]
     bb6:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     bb8:	588b      	ldr	r3, [r1, r2]
     bba:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     bbc:	f109 0901 	add.w	r9, r9, #1
     bc0:	f1b9 0f04 	cmp.w	r9, #4
     bc4:	d1dc      	bne.n	b80 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     bc6:	fb96 f6f9 	sdiv	r6, r6, r9
     bca:	3c01      	subs	r4, #1
     bcc:	e7b4      	b.n	b38 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	089b      	lsrs	r3, r3, #2
     bd2:	3303      	adds	r3, #3
     bd4:	f023 0303 	bic.w	r3, r3, #3
     bd8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     bdc:	3001      	adds	r0, #1
     bde:	e7a7      	b.n	b30 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     be0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     be4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     be6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     be8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     bec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     bf0:	4498      	add	r8, r3
     bf2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     bf6:	892a      	ldrh	r2, [r5, #8]
     bf8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     bfa:	4588      	cmp	r8, r1
     bfc:	d20b      	bcs.n	c16 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     bfe:	68e9      	ldr	r1, [r5, #12]
     c00:	220c      	movs	r2, #12
     c02:	fb02 1404 	mla	r4, r2, r4, r1
     c06:	1d22      	adds	r2, r4, #4
	node->next = list;
     c08:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     c0c:	68a2      	ldr	r2, [r4, #8]
     c0e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     c10:	68a2      	ldr	r2, [r4, #8]
     c12:	6013      	str	r3, [r2, #0]
	list->tail = node;
     c14:	60a3      	str	r3, [r4, #8]
}
     c16:	3714      	adds	r7, #20
     c18:	46bd      	mov	sp, r7
     c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c1e <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     c1e:	2000      	movs	r0, #0
     c20:	4770      	bx	lr
	...

00000c24 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c24:	680b      	ldr	r3, [r1, #0]
     c26:	3301      	adds	r3, #1
     c28:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c2a:	4b01      	ldr	r3, [pc, #4]	; (c30 <char_out+0xc>)
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	4718      	bx	r3
     c30:	20003aa0 	.word	0x20003aa0

00000c34 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b085      	sub	sp, #20
     c3a:	469b      	mov	fp, r3
     c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     c3e:	f8df a090 	ldr.w	sl, [pc, #144]	; cd0 <_printk_dec_ulong+0x9c>
     c42:	2c01      	cmp	r4, #1
     c44:	bfb8      	it	lt
     c46:	2401      	movlt	r4, #1
     c48:	2b01      	cmp	r3, #1
     c4a:	bf0c      	ite	eq
     c4c:	2330      	moveq	r3, #48	; 0x30
     c4e:	2320      	movne	r3, #32
     c50:	4615      	mov	r5, r2
     c52:	4680      	mov	r8, r0
     c54:	4689      	mov	r9, r1
     c56:	9401      	str	r4, [sp, #4]
     c58:	9302      	str	r3, [sp, #8]
     c5a:	2601      	movs	r6, #1
     c5c:	270a      	movs	r7, #10
     c5e:	2200      	movs	r2, #0
     c60:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     c64:	b90a      	cbnz	r2, c6a <_printk_dec_ulong+0x36>
     c66:	45aa      	cmp	sl, r5
     c68:	d21f      	bcs.n	caa <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     c6a:	fbb5 f0f4 	udiv	r0, r5, r4
     c6e:	4649      	mov	r1, r9
     c70:	3030      	adds	r0, #48	; 0x30
     c72:	47c0      	blx	r8
			digits++;
     c74:	3601      	adds	r6, #1
			found_largest_digit = 1;
     c76:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     c78:	3f01      	subs	r7, #1
	while (pos >= 9) {
     c7a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     c7c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     c80:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     c84:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     c88:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     c8c:	d1e8      	bne.n	c60 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     c8e:	4649      	mov	r1, r9
     c90:	f105 0030 	add.w	r0, r5, #48	; 0x30
     c94:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     c96:	f1bb 0f03 	cmp.w	fp, #3
     c9a:	d103      	bne.n	ca4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	dc0f      	bgt.n	cc4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     ca4:	b005      	add	sp, #20
     ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     caa:	9b01      	ldr	r3, [sp, #4]
     cac:	42bb      	cmp	r3, r7
     cae:	dbe3      	blt.n	c78 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     cb0:	f1bb 0f02 	cmp.w	fp, #2
     cb4:	d8e0      	bhi.n	c78 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cb6:	4649      	mov	r1, r9
     cb8:	9802      	ldr	r0, [sp, #8]
     cba:	9203      	str	r2, [sp, #12]
			digits++;
     cbc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     cbe:	47c0      	blx	r8
			digits++;
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	e7d9      	b.n	c78 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     cc4:	4649      	mov	r1, r9
     cc6:	2020      	movs	r0, #32
     cc8:	47c0      	blx	r8
     cca:	3c01      	subs	r4, #1
     ccc:	e7e8      	b.n	ca0 <_printk_dec_ulong+0x6c>
     cce:	bf00      	nop
     cd0:	3b9ac9ff 	.word	0x3b9ac9ff

00000cd4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     cd4:	680a      	ldr	r2, [r1, #0]
     cd6:	688b      	ldr	r3, [r1, #8]
{
     cd8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     cda:	b112      	cbz	r2, ce2 <str_out+0xe>
     cdc:	684c      	ldr	r4, [r1, #4]
     cde:	42a3      	cmp	r3, r4
     ce0:	db02      	blt.n	ce8 <str_out+0x14>
		ctx->count++;
     ce2:	3301      	adds	r3, #1
     ce4:	608b      	str	r3, [r1, #8]
		return c;
     ce6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     ce8:	1e65      	subs	r5, r4, #1
     cea:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     cec:	bf0b      	itete	eq
     cee:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     cf0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     cf2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     cf4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     cf6:	bf0c      	ite	eq
     cf8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     cfa:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     cfc:	bd30      	pop	{r4, r5, pc}
	...

00000d00 <__printk_hook_install>:
	_char_out = fn;
     d00:	4b01      	ldr	r3, [pc, #4]	; (d08 <__printk_hook_install+0x8>)
     d02:	6018      	str	r0, [r3, #0]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20003aa0 	.word	0x20003aa0

00000d0c <_vprintk>:
{
     d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d10:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     d12:	f04f 0a00 	mov.w	sl, #0
{
     d16:	4606      	mov	r6, r0
     d18:	460f      	mov	r7, r1
     d1a:	9204      	str	r2, [sp, #16]
     d1c:	461c      	mov	r4, r3
	int min_width = -1;
     d1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     d22:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     d24:	4655      	mov	r5, sl
	while (*fmt) {
     d26:	9b04      	ldr	r3, [sp, #16]
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	b910      	cbnz	r0, d32 <_vprintk+0x26>
}
     d2c:	b009      	add	sp, #36	; 0x24
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     d32:	b945      	cbnz	r5, d46 <_vprintk+0x3a>
			if (*fmt != '%') {
     d34:	2825      	cmp	r0, #37	; 0x25
     d36:	f000 810c 	beq.w	f52 <_vprintk+0x246>
				out((int)*fmt, ctx);
     d3a:	4639      	mov	r1, r7
     d3c:	47b0      	blx	r6
		++fmt;
     d3e:	9b04      	ldr	r3, [sp, #16]
     d40:	3301      	adds	r3, #1
     d42:	9304      	str	r3, [sp, #16]
     d44:	e7ef      	b.n	d26 <_vprintk+0x1a>
			switch (*fmt) {
     d46:	2864      	cmp	r0, #100	; 0x64
     d48:	d061      	beq.n	e0e <_vprintk+0x102>
     d4a:	d819      	bhi.n	d80 <_vprintk+0x74>
     d4c:	2839      	cmp	r0, #57	; 0x39
     d4e:	d80a      	bhi.n	d66 <_vprintk+0x5a>
     d50:	2831      	cmp	r0, #49	; 0x31
     d52:	d250      	bcs.n	df6 <_vprintk+0xea>
     d54:	282d      	cmp	r0, #45	; 0x2d
     d56:	d03c      	beq.n	dd2 <_vprintk+0xc6>
     d58:	2830      	cmp	r0, #48	; 0x30
     d5a:	d03d      	beq.n	dd8 <_vprintk+0xcc>
     d5c:	2825      	cmp	r0, #37	; 0x25
     d5e:	d108      	bne.n	d72 <_vprintk+0x66>
				out((int)'%', ctx);
     d60:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     d62:	47b0      	blx	r6
     d64:	e06f      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     d66:	2858      	cmp	r0, #88	; 0x58
     d68:	f000 8089 	beq.w	e7e <_vprintk+0x172>
     d6c:	2863      	cmp	r0, #99	; 0x63
     d6e:	f000 80ea 	beq.w	f46 <_vprintk+0x23a>
				out((int)'%', ctx);
     d72:	4639      	mov	r1, r7
     d74:	2025      	movs	r0, #37	; 0x25
     d76:	47b0      	blx	r6
				out((int)*fmt, ctx);
     d78:	9b04      	ldr	r3, [sp, #16]
     d7a:	4639      	mov	r1, r7
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	e7f0      	b.n	d62 <_vprintk+0x56>
			switch (*fmt) {
     d80:	2870      	cmp	r0, #112	; 0x70
     d82:	d072      	beq.n	e6a <_vprintk+0x15e>
     d84:	d806      	bhi.n	d94 <_vprintk+0x88>
     d86:	2869      	cmp	r0, #105	; 0x69
     d88:	d041      	beq.n	e0e <_vprintk+0x102>
     d8a:	286c      	cmp	r0, #108	; 0x6c
     d8c:	d03c      	beq.n	e08 <_vprintk+0xfc>
     d8e:	2868      	cmp	r0, #104	; 0x68
     d90:	d0d5      	beq.n	d3e <_vprintk+0x32>
     d92:	e7ee      	b.n	d72 <_vprintk+0x66>
     d94:	2875      	cmp	r0, #117	; 0x75
     d96:	d058      	beq.n	e4a <_vprintk+0x13e>
     d98:	d817      	bhi.n	dca <_vprintk+0xbe>
     d9a:	2873      	cmp	r0, #115	; 0x73
     d9c:	d1e9      	bne.n	d72 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f104 0b04 	add.w	fp, r4, #4
     da4:	461c      	mov	r4, r3
				while (*s)
     da6:	4625      	mov	r5, r4
     da8:	f815 0b01 	ldrb.w	r0, [r5], #1
     dac:	2800      	cmp	r0, #0
     dae:	f040 80bf 	bne.w	f30 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     db2:	f1b8 0f03 	cmp.w	r8, #3
     db6:	f040 80d5 	bne.w	f64 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     dba:	1ae4      	subs	r4, r4, r3
     dbc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     dc0:	2c00      	cmp	r4, #0
     dc2:	f300 80bb 	bgt.w	f3c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     dc6:	465c      	mov	r4, fp
     dc8:	e03d      	b.n	e46 <_vprintk+0x13a>
			switch (*fmt) {
     dca:	2878      	cmp	r0, #120	; 0x78
     dcc:	d057      	beq.n	e7e <_vprintk+0x172>
     dce:	287a      	cmp	r0, #122	; 0x7a
     dd0:	e7de      	b.n	d90 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     dd2:	f04f 0803 	mov.w	r8, #3
     dd6:	e7b2      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     dd8:	f1b9 0f00 	cmp.w	r9, #0
     ddc:	da0e      	bge.n	dfc <_vprintk+0xf0>
     dde:	f1b8 0f00 	cmp.w	r8, #0
     de2:	f000 80bc 	beq.w	f5e <_vprintk+0x252>
					min_width = *fmt - '0';
     de6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     dea:	f1b8 0f00 	cmp.w	r8, #0
     dee:	bf08      	it	eq
     df0:	f04f 0802 	moveq.w	r8, #2
     df4:	e7a3      	b.n	d3e <_vprintk+0x32>
				if (min_width < 0) {
     df6:	f1b9 0f00 	cmp.w	r9, #0
     dfa:	dbf4      	blt.n	de6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     dfc:	230a      	movs	r3, #10
     dfe:	fb03 0909 	mla	r9, r3, r9, r0
     e02:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     e06:	e7f0      	b.n	dea <_vprintk+0xde>
				long_ctr++;
     e08:	f10a 0a01 	add.w	sl, sl, #1
     e0c:	e797      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e0e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     e12:	bfc5      	ittet	gt
     e14:	3407      	addgt	r4, #7
     e16:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     e1a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     e1c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     e1e:	bfd4      	ite	le
     e20:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     e22:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     e26:	2d00      	cmp	r5, #0
     e28:	da05      	bge.n	e36 <_vprintk+0x12a>
					out((int)'-', ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	202d      	movs	r0, #45	; 0x2d
     e2e:	47b0      	blx	r6
					d = -d;
     e30:	426d      	negs	r5, r5
					min_width--;
     e32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     e36:	f8cd 9000 	str.w	r9, [sp]
     e3a:	4643      	mov	r3, r8
     e3c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     e3e:	4639      	mov	r1, r7
     e40:	4630      	mov	r0, r6
     e42:	f7ff fef7 	bl	c34 <_printk_dec_ulong>
			might_format = 0;
     e46:	2500      	movs	r5, #0
				break;
     e48:	e779      	b.n	d3e <_vprintk+0x32>
				if (long_ctr < 2) {
     e4a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     e4e:	bfc5      	ittet	gt
     e50:	3407      	addgt	r4, #7
     e52:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     e56:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     e58:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     e5a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     e5e:	bfcc      	ite	gt
     e60:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     e64:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     e66:	4643      	mov	r3, r8
     e68:	e7e9      	b.n	e3e <_vprintk+0x132>
				  out('0', ctx);
     e6a:	4639      	mov	r1, r7
     e6c:	2030      	movs	r0, #48	; 0x30
     e6e:	47b0      	blx	r6
				  out('x', ctx);
     e70:	4639      	mov	r1, r7
     e72:	2078      	movs	r0, #120	; 0x78
     e74:	47b0      	blx	r6
				  min_width = 8;
     e76:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     e7a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     e7e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     e82:	bfc7      	ittee	gt
     e84:	3407      	addgt	r4, #7
     e86:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     e8a:	6823      	ldrle	r3, [r4, #0]
     e8c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     e8e:	bfc2      	ittt	gt
     e90:	f103 0408 	addgt.w	r4, r3, #8
     e94:	681b      	ldrgt	r3, [r3, #0]
     e96:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     e98:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     e9c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     ea0:	bfd8      	it	le
     ea2:	3404      	addle	r4, #4
	int digits = 0;
     ea4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     ea6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     ea8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     eae:	9b05      	ldr	r3, [sp, #20]
     eb0:	ea4f 008b 	mov.w	r0, fp, lsl #2
     eb4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     eb8:	f010 000f 	ands.w	r0, r0, #15
     ebc:	d109      	bne.n	ed2 <_vprintk+0x1c6>
     ebe:	9b07      	ldr	r3, [sp, #28]
     ec0:	b913      	cbnz	r3, ec8 <_vprintk+0x1bc>
     ec2:	f1bb 0f00 	cmp.w	fp, #0
     ec6:	d122      	bne.n	f0e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     ec8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     ecc:	e007      	b.n	ede <_vprintk+0x1d2>
	for (; size; size--) {
     ece:	9a06      	ldr	r2, [sp, #24]
     ed0:	e7eb      	b.n	eaa <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     ed2:	2809      	cmp	r0, #9
     ed4:	bf8c      	ite	hi
     ed6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     eda:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     ede:	4639      	mov	r1, r7
     ee0:	4470      	add	r0, lr
     ee2:	9206      	str	r2, [sp, #24]
     ee4:	47b0      	blx	r6
			digits++;
     ee6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     ee8:	9507      	str	r5, [sp, #28]
			digits++;
     eea:	3301      	adds	r3, #1
     eec:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     eee:	f1bb 0f00 	cmp.w	fp, #0
     ef2:	d1ec      	bne.n	ece <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     ef4:	f1b8 0f03 	cmp.w	r8, #3
     ef8:	d1a5      	bne.n	e46 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     efa:	9b03      	ldr	r3, [sp, #12]
     efc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     f00:	2d00      	cmp	r5, #0
     f02:	dda0      	ble.n	e46 <_vprintk+0x13a>
			out(' ', ctx);
     f04:	4639      	mov	r1, r7
     f06:	2020      	movs	r0, #32
     f08:	47b0      	blx	r6
     f0a:	3d01      	subs	r5, #1
     f0c:	e7f8      	b.n	f00 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     f0e:	1e53      	subs	r3, r2, #1
     f10:	4591      	cmp	r9, r2
     f12:	9306      	str	r3, [sp, #24]
     f14:	dbeb      	blt.n	eee <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     f16:	f1b8 0f01 	cmp.w	r8, #1
     f1a:	d103      	bne.n	f24 <_vprintk+0x218>
				out('0', ctx);
     f1c:	4639      	mov	r1, r7
     f1e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     f20:	47b0      	blx	r6
     f22:	e7e4      	b.n	eee <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     f24:	f1b8 0f02 	cmp.w	r8, #2
     f28:	d1e1      	bne.n	eee <_vprintk+0x1e2>
				out(' ', ctx);
     f2a:	4639      	mov	r1, r7
     f2c:	2020      	movs	r0, #32
     f2e:	e7f7      	b.n	f20 <_vprintk+0x214>
					out((int)(*s++), ctx);
     f30:	4639      	mov	r1, r7
     f32:	9303      	str	r3, [sp, #12]
     f34:	462c      	mov	r4, r5
     f36:	47b0      	blx	r6
     f38:	9b03      	ldr	r3, [sp, #12]
     f3a:	e734      	b.n	da6 <_vprintk+0x9a>
						out(' ', ctx);
     f3c:	4639      	mov	r1, r7
     f3e:	2020      	movs	r0, #32
     f40:	47b0      	blx	r6
     f42:	3c01      	subs	r4, #1
     f44:	e73c      	b.n	dc0 <_vprintk+0xb4>
				out(c, ctx);
     f46:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     f48:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     f4a:	4639      	mov	r1, r7
     f4c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     f4e:	462c      	mov	r4, r5
     f50:	e779      	b.n	e46 <_vprintk+0x13a>
				long_ctr = 0;
     f52:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     f54:	46a8      	mov	r8, r5
				min_width = -1;
     f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     f5a:	2501      	movs	r5, #1
     f5c:	e6ef      	b.n	d3e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     f5e:	f04f 0801 	mov.w	r8, #1
     f62:	e6ec      	b.n	d3e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     f64:	465c      	mov	r4, fp
			might_format = 0;
     f66:	4605      	mov	r5, r0
     f68:	e6e9      	b.n	d3e <_vprintk+0x32>
	...

00000f6c <vprintk>:
{
     f6c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     f6e:	ac02      	add	r4, sp, #8
     f70:	2300      	movs	r3, #0
     f72:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     f76:	4602      	mov	r2, r0
     f78:	460b      	mov	r3, r1
     f7a:	4803      	ldr	r0, [pc, #12]	; (f88 <vprintk+0x1c>)
     f7c:	4621      	mov	r1, r4
     f7e:	f7ff fec5 	bl	d0c <_vprintk>
}
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	b002      	add	sp, #8
     f86:	bd10      	pop	{r4, pc}
     f88:	00000c25 	.word	0x00000c25

00000f8c <printk>:
{
     f8c:	b40f      	push	{r0, r1, r2, r3}
     f8e:	b507      	push	{r0, r1, r2, lr}
     f90:	a904      	add	r1, sp, #16
     f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     f96:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     f98:	f7ff ffe8 	bl	f6c <vprintk>
}
     f9c:	b003      	add	sp, #12
     f9e:	f85d eb04 	ldr.w	lr, [sp], #4
     fa2:	b004      	add	sp, #16
     fa4:	4770      	bx	lr
	...

00000fa8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     fa8:	b40c      	push	{r2, r3}
     faa:	b530      	push	{r4, r5, lr}
     fac:	b085      	sub	sp, #20
     fae:	ab08      	add	r3, sp, #32
     fb0:	4604      	mov	r4, r0
     fb2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     fb6:	9001      	str	r0, [sp, #4]
     fb8:	9102      	str	r1, [sp, #8]
     fba:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fbc:	a901      	add	r1, sp, #4
     fbe:	4807      	ldr	r0, [pc, #28]	; (fdc <snprintk+0x34>)
	va_start(ap, fmt);
     fc0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     fc2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     fc4:	f7ff fea2 	bl	d0c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     fc8:	9803      	ldr	r0, [sp, #12]
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fce:	bfb8      	it	lt
     fd0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fd2:	b005      	add	sp, #20
     fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     fd8:	b002      	add	sp, #8
     fda:	4770      	bx	lr
     fdc:	00000cd5 	.word	0x00000cd5

00000fe0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     fe0:	4770      	bx	lr

00000fe2 <syslog_hook_default>:
 */

#include <logging/sys_log.h>

void syslog_hook_default(const char *fmt, ...)
{
     fe2:	b40f      	push	{r0, r1, r2, r3}
	(void)(fmt);  /* Prevent warning about unused argument */
}
     fe4:	b004      	add	sp, #16
     fe6:	4770      	bx	lr

00000fe8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     fe8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fea:	4c11      	ldr	r4, [pc, #68]	; (1030 <sys_rand32_get+0x48>)
     fec:	f3bf 8f5b 	dmb	ish
     ff0:	6820      	ldr	r0, [r4, #0]
     ff2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ff6:	b960      	cbnz	r0, 1012 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <sys_rand32_get+0x4c>)
     ffa:	f012 faf7 	bl	135ec <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ffe:	f3bf 8f5b 	dmb	ish
    1002:	e854 3f00 	ldrex	r3, [r4]
    1006:	e844 0200 	strex	r2, r0, [r4]
    100a:	2a00      	cmp	r2, #0
    100c:	d1f9      	bne.n	1002 <sys_rand32_get+0x1a>
    100e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1012:	6843      	ldr	r3, [r0, #4]
    1014:	2204      	movs	r2, #4
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	eb0d 0102 	add.w	r1, sp, r2
    101c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    101e:	2800      	cmp	r0, #0
    1020:	da02      	bge.n	1028 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1022:	f000 fa37 	bl	1494 <_timer_cycle_get_32>
    1026:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	bf00      	nop
    1030:	20000004 	.word	0x20000004
    1034:	00014cfc 	.word	0x00014cfc

00001038 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1038:	280a      	cmp	r0, #10
{
    103a:	b538      	push	{r3, r4, r5, lr}
    103c:	4604      	mov	r4, r0
    103e:	4d07      	ldr	r5, [pc, #28]	; (105c <console_out+0x24>)
	if ('\n' == c) {
    1040:	d104      	bne.n	104c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1042:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
    1044:	6843      	ldr	r3, [r0, #4]
    1046:	210d      	movs	r1, #13
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    104c:	6828      	ldr	r0, [r5, #0]
    104e:	6843      	ldr	r3, [r0, #4]
    1050:	b2e1      	uxtb	r1, r4
    1052:	685b      	ldr	r3, [r3, #4]
    1054:	4798      	blx	r3

	return c;
}
    1056:	4620      	mov	r0, r4
    1058:	bd38      	pop	{r3, r4, r5, pc}
    105a:	bf00      	nop
    105c:	20000008 	.word	0x20000008

00001060 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1060:	4801      	ldr	r0, [pc, #4]	; (1068 <uart_console_hook_install+0x8>)
    1062:	f7ff be4d 	b.w	d00 <__printk_hook_install>
    1066:	bf00      	nop
    1068:	00001039 	.word	0x00001039

0000106c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    106c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    106e:	4804      	ldr	r0, [pc, #16]	; (1080 <uart_console_init+0x14>)
    1070:	f012 fabc 	bl	135ec <device_get_binding>
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <uart_console_init+0x18>)
    1076:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1078:	f7ff fff2 	bl	1060 <uart_console_hook_install>

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd08      	pop	{r3, pc}
    1080:	00014d06 	.word	0x00014d06
    1084:	20000008 	.word	0x20000008

00001088 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1088:	b510      	push	{r4, lr}
	__asm__ volatile(
    108a:	f04f 0320 	mov.w	r3, #32
    108e:	f3ef 8211 	mrs	r2, BASEPRI
    1092:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1096:	4c11      	ldr	r4, [pc, #68]	; (10dc <_m16src_stop+0x54>)
    1098:	7823      	ldrb	r3, [r4, #0]
    109a:	b923      	cbnz	r3, 10a6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    109c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    10a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    10a4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    10a6:	3b01      	subs	r3, #1
    10a8:	b2db      	uxtb	r3, r3
    10aa:	7023      	strb	r3, [r4, #0]
    10ac:	b123      	cbz	r3, 10b8 <_m16src_stop+0x30>
    10ae:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10b2:	f06f 000f 	mvn.w	r0, #15
    10b6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10b8:	4b09      	ldr	r3, [pc, #36]	; (10e0 <_m16src_stop+0x58>)
    10ba:	7818      	ldrb	r0, [r3, #0]
    10bc:	2101      	movs	r1, #1
    10be:	b128      	cbz	r0, 10cc <_m16src_stop+0x44>
		m16src_ref++;
    10c0:	7021      	strb	r1, [r4, #0]
    10c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10c6:	f06f 000a 	mvn.w	r0, #10
    10ca:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10cc:	7019      	strb	r1, [r3, #0]
    10ce:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10d6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10d8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10da:	bd10      	pop	{r4, pc}
    10dc:	2000000e 	.word	0x2000000e
    10e0:	2000000d 	.word	0x2000000d

000010e4 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
    10e4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10e6:	2200      	movs	r2, #0
    10e8:	4610      	mov	r0, r2
    10ea:	2101      	movs	r1, #1
    10ec:	f000 fbec 	bl	18c8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10f0:	2000      	movs	r0, #0
    10f2:	f000 fbb7 	bl	1864 <_arch_irq_enable>

	return 0;
}
    10f6:	2000      	movs	r0, #0
    10f8:	bd08      	pop	{r3, pc}
	...

000010fc <_m16src_start>:
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10fe:	f04f 0220 	mov.w	r2, #32
    1102:	f3ef 8311 	mrs	r3, BASEPRI
    1106:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    110a:	4a25      	ldr	r2, [pc, #148]	; (11a0 <_m16src_start+0xa4>)
    110c:	7810      	ldrb	r0, [r2, #0]
    110e:	1c44      	adds	r4, r0, #1
    1110:	7014      	strb	r4, [r2, #0]
    1112:	b160      	cbz	r0, 112e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1114:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    111c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1120:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1124:	bf14      	ite	ne
    1126:	2000      	movne	r0, #0
    1128:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    112e:	4d1d      	ldr	r5, [pc, #116]	; (11a4 <_m16src_start+0xa8>)
    1130:	782f      	ldrb	r7, [r5, #0]
    1132:	b12f      	cbz	r7, 1140 <_m16src_start+0x44>
		m16src_ref--;
    1134:	7010      	strb	r0, [r2, #0]
    1136:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    113a:	f06f 000a 	mvn.w	r0, #10
    113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1140:	2601      	movs	r6, #1
    1142:	702e      	strb	r6, [r5, #0]
    1144:	f383 8811 	msr	BASEPRI, r3
    1148:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    114c:	b319      	cbz	r1, 1196 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    114e:	4638      	mov	r0, r7
    1150:	f000 fb98 	bl	1884 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1154:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    115c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1160:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1162:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1166:	b192      	cbz	r2, 118e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1168:	2200      	movs	r2, #0
    116a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1170:	f013 0f01 	tst.w	r3, #1
    1174:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1178:	bf08      	it	eq
    117a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    117e:	2000      	movs	r0, #0
    1180:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1184:	f000 fb6e 	bl	1864 <_arch_irq_enable>
	m16src_grd = 0;
    1188:	2300      	movs	r3, #0
    118a:	702b      	strb	r3, [r5, #0]
    118c:	e7c4      	b.n	1118 <_m16src_start+0x1c>
			__WFE();
    118e:	bf20      	wfe
			__SEV();
    1190:	bf40      	sev
			__WFE();
    1192:	bf20      	wfe
    1194:	e7e5      	b.n	1162 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1196:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    119a:	6026      	str	r6, [r4, #0]
    119c:	e7f4      	b.n	1188 <_m16src_start+0x8c>
    119e:	bf00      	nop
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000d 	.word	0x2000000d
    11a8:	e000e100 	.word	0xe000e100

000011ac <_k32src_start>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
	__asm__ volatile(
    11b2:	f04f 0220 	mov.w	r2, #32
    11b6:	f3ef 8311 	mrs	r3, BASEPRI
    11ba:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11be:	4a2c      	ldr	r2, [pc, #176]	; (1270 <_k32src_start+0xc4>)
    11c0:	7815      	ldrb	r5, [r2, #0]
    11c2:	b165      	cbz	r5, 11de <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11c4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11d4:	bf0c      	ite	eq
    11d6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11da:	2000      	movne	r0, #0
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11de:	2701      	movs	r7, #1
    11e0:	7017      	strb	r7, [r2, #0]
    11e2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11e6:	4628      	mov	r0, r5
    11e8:	f000 fb4c 	bl	1884 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11f0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11f2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11f6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11fe:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1202:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1208:	b371      	cbz	r1, 1268 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	4f19      	ldr	r7, [pc, #100]	; (1274 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    120e:	bf58      	it	pl
    1210:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1212:	f04f 0100 	mov.w	r1, #0
    1216:	f04f 0501 	mov.w	r5, #1
    121a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    121e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1222:	bf58      	it	pl
    1224:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1228:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    122c:	f000 fb1a 	bl	1864 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1234:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1236:	2218      	movs	r2, #24
    1238:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    123c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1240:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1244:	f014 0103 	ands.w	r1, r4, #3
    1248:	d1be      	bne.n	11c8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    124a:	2010      	movs	r0, #16
    124c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1250:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1254:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1256:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    125a:	f7ff ff4f 	bl	10fc <_m16src_start>
		if (!err) {
    125e:	2800      	cmp	r0, #0
    1260:	d1b2      	bne.n	11c8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1262:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1266:	e7af      	b.n	11c8 <_k32src_start+0x1c>
		__WFE();
    1268:	bf20      	wfe
		__SEV();
    126a:	bf40      	sev
		__WFE();
    126c:	bf20      	wfe
    126e:	e7c9      	b.n	1204 <_k32src_start+0x58>
    1270:	2000000c 	.word	0x2000000c
    1274:	e000e100 	.word	0xe000e100

00001278 <_power_clock_isr>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    127e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1280:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1284:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1288:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    128c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1290:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1294:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1298:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    129c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    12a0:	f1be 0f00 	cmp.w	lr, #0
    12a4:	d003      	beq.n	12ae <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    12a6:	f04f 0e00 	mov.w	lr, #0
    12aa:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    12ae:	b127      	cbz	r7, 12ba <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12b4:	2700      	movs	r7, #0
    12b6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12ba:	b13a      	cbz	r2, 12cc <_power_clock_isr+0x54>
    12bc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12be:	bf41      	itttt	mi
    12c0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12c4:	2201      	movmi	r2, #1
    12c6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ca:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12cc:	b120      	cbz	r0, 12d8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12d2:	2200      	movs	r2, #0
    12d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12d8:	b149      	cbz	r1, 12ee <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12da:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12de:	2100      	movs	r1, #0
    12e0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12e4:	4628      	mov	r0, r5
    12e6:	f7ff fecf 	bl	1088 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12ea:	2301      	movs	r3, #1
    12ec:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12ee:	b176      	cbz	r6, 130e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12f4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12f6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12f8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12fc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12fe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1302:	f7ff fefb 	bl	10fc <_m16src_start>
		if (!err) {
    1306:	b910      	cbnz	r0, 130e <_power_clock_isr+0x96>
    1308:	4b01      	ldr	r3, [pc, #4]	; (1310 <_power_clock_isr+0x98>)
    130a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	e000e100 	.word	0xe000e100

00001314 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <rtc_compare_set+0x24>)
    1316:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    131a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    131e:	1ac0      	subs	r0, r0, r3
    1320:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1324:	4b05      	ldr	r3, [pc, #20]	; (133c <rtc_compare_set+0x28>)
    1326:	3802      	subs	r0, #2
    1328:	4298      	cmp	r0, r3
    132a:	bf82      	ittt	hi
    132c:	4b04      	ldrhi	r3, [pc, #16]	; (1340 <rtc_compare_set+0x2c>)
    132e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1332:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1336:	4770      	bx	lr
    1338:	40011000 	.word	0x40011000
    133c:	007ffffd 	.word	0x007ffffd
    1340:	e000e100 	.word	0xe000e100

00001344 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1344:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1346:	4b11      	ldr	r3, [pc, #68]	; (138c <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1348:	4c11      	ldr	r4, [pc, #68]	; (1390 <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    134a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    134e:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1350:	4d10      	ldr	r5, [pc, #64]	; (1394 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1352:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1354:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1356:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    135a:	4298      	cmp	r0, r3
    135c:	d30f      	bcc.n	137e <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    135e:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    1362:	490d      	ldr	r1, [pc, #52]	; (1398 <rtc_announce_set_next+0x54>)
    1364:	6809      	ldr	r1, [r1, #0]
    1366:	4288      	cmp	r0, r1
    1368:	bf28      	it	cs
    136a:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    136c:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    1370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1374:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <rtc_announce_set_next+0x58>)
    1378:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    137a:	f012 fef5 	bl	14168 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    137e:	6820      	ldr	r0, [r4, #0]
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4418      	add	r0, r3
}
    1384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1388:	f7ff bfc4 	b.w	1314 <rtc_compare_set>
    138c:	40011000 	.word	0x40011000
    1390:	20000014 	.word	0x20000014
    1394:	20003ec0 	.word	0x20003ec0
    1398:	20000010 	.word	0x20000010
    139c:	20003ebc 	.word	0x20003ebc

000013a0 <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <rtc1_nrf5_isr+0xc>)
    13a2:	2200      	movs	r2, #0
    13a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    13a8:	f7ff bfcc 	b.w	1344 <rtc_announce_set_next>
    13ac:	40011000 	.word	0x40011000

000013b0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    13b0:	1e03      	subs	r3, r0, #0
    13b2:	4a0a      	ldr	r2, [pc, #40]	; (13dc <_timer_idle_enter+0x2c>)
    13b4:	480a      	ldr	r0, [pc, #40]	; (13e0 <_timer_idle_enter+0x30>)
    13b6:	db04      	blt.n	13c2 <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    13b8:	6811      	ldr	r1, [r2, #0]
    13ba:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    13be:	428b      	cmp	r3, r1
    13c0:	dd02      	ble.n	13c8 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    13c2:	6813      	ldr	r3, [r2, #0]
    13c4:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13c8:	6810      	ldr	r0, [r2, #0]
    13ca:	4a06      	ldr	r2, [pc, #24]	; (13e4 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13ce:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    13d0:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    13d2:	fb00 2003 	mla	r0, r0, r3, r2
    13d6:	f7ff bf9d 	b.w	1314 <rtc_compare_set>
    13da:	bf00      	nop
    13dc:	20003ec0 	.word	0x20003ec0
    13e0:	007fffff 	.word	0x007fffff
    13e4:	20000014 	.word	0x20000014
    13e8:	20000010 	.word	0x20000010

000013ec <_timer_idle_exit>:
{
    13ec:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    13ee:	4b07      	ldr	r3, [pc, #28]	; (140c <_timer_idle_exit+0x20>)
    13f0:	2200      	movs	r2, #0
    13f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <_timer_idle_exit+0x24>)
    13f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1400:	f7ff ffa0 	bl	1344 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <_timer_idle_exit+0x28>)
    1406:	2201      	movs	r2, #1
    1408:	601a      	str	r2, [r3, #0]
    140a:	bd08      	pop	{r3, pc}
    140c:	40011000 	.word	0x40011000
    1410:	e000e100 	.word	0xe000e100
    1414:	20000010 	.word	0x20000010

00001418 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1418:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    141a:	4818      	ldr	r0, [pc, #96]	; (147c <_sys_clock_driver_init+0x64>)
    141c:	f012 f8e6 	bl	135ec <device_get_binding>
	if (!clock) {
    1420:	b348      	cbz	r0, 1476 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1422:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1424:	4d16      	ldr	r5, [pc, #88]	; (1480 <_sys_clock_driver_init+0x68>)
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	2101      	movs	r1, #1
    142a:	4798      	blx	r3
	rtc_past = 0;
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <_sys_clock_driver_init+0x6c>)
    142e:	2400      	movs	r4, #0
    1430:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1432:	4b15      	ldr	r3, [pc, #84]	; (1488 <_sys_clock_driver_init+0x70>)
    1434:	2601      	movs	r6, #1
    1436:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1438:	4b14      	ldr	r3, [pc, #80]	; (148c <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    143a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1448:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    144c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1452:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    145a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    145e:	4631      	mov	r1, r6
    1460:	4622      	mov	r2, r4
    1462:	2011      	movs	r0, #17
    1464:	f000 fa30 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1468:	2011      	movs	r0, #17
    146a:	f000 f9fb 	bl	1864 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    146e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1470:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1472:	602e      	str	r6, [r5, #0]
	return 0;
    1474:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	00014d28 	.word	0x00014d28
    1480:	40011000 	.word	0x40011000
    1484:	20000014 	.word	0x20000014
    1488:	20000010 	.word	0x20000010
    148c:	20003ec0 	.word	0x20003ec0
    1490:	e000e100 	.word	0xe000e100

00001494 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1494:	4a0a      	ldr	r2, [pc, #40]	; (14c0 <_timer_cycle_get_32+0x2c>)
{
    1496:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1498:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    149c:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_timer_cycle_get_32+0x30>)
    149e:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    14a2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    14a6:	42a3      	cmp	r3, r4
    14a8:	d107      	bne.n	14ba <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    14aa:	4a07      	ldr	r2, [pc, #28]	; (14c8 <_timer_cycle_get_32+0x34>)
    14ac:	6812      	ldr	r2, [r2, #0]
    14ae:	4350      	muls	r0, r2
    14b0:	1a1b      	subs	r3, r3, r0
    14b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    14b6:	4418      	add	r0, r3
    14b8:	bd30      	pop	{r4, r5, pc}
    14ba:	4623      	mov	r3, r4
    14bc:	e7ef      	b.n	149e <_timer_cycle_get_32+0xa>
    14be:	bf00      	nop
    14c0:	40011000 	.word	0x40011000
    14c4:	200019c0 	.word	0x200019c0
    14c8:	20003ec0 	.word	0x20003ec0

000014cc <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    14cc:	4809      	ldr	r0, [pc, #36]	; (14f4 <_EXIT_EXC+0xc>)

    ldr r1, [r0, #_kernel_offset_to_current]
    14ce:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    14d0:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    14d2:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    14d4:	d008      	beq.n	14e8 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    14d6:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    14d8:	f012 fd5c 	bl	13f94 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14dc:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    14e0:	4905      	ldr	r1, [pc, #20]	; (14f8 <_EXIT_EXC+0x10>)
    ldr r2, =_SCS_ICSR_PENDSV
    14e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    14e6:	600a      	str	r2, [r1, #0]

000014e8 <_EXIT_EXC>:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

#ifdef CONFIG_STACK_SENTINEL
    push {lr}
    14e8:	b500      	push	{lr}
    bl _check_stack_sentinel
    14ea:	f012 ff9f 	bl	1442c <_check_stack_sentinel>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    14ee:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    14f2:	4770      	bx	lr
    ldr r0, =_kernel
    14f4:	20001988 	.word	0x20001988
    ldr r1, =_SCS_ICSR
    14f8:	e000ed04 	.word	0xe000ed04

000014fc <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    14fc:	4804      	ldr	r0, [pc, #16]	; (1510 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    14fe:	2300      	movs	r3, #0
    1500:	2120      	movs	r1, #32
    1502:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1504:	3301      	adds	r3, #1
    1506:	2b27      	cmp	r3, #39	; 0x27
    1508:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    150c:	d1f9      	bne.n	1502 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    150e:	4770      	bx	lr
    1510:	e000e100 	.word	0xe000e100

00001514 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1514:	4a08      	ldr	r2, [pc, #32]	; (1538 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1516:	4909      	ldr	r1, [pc, #36]	; (153c <__swap+0x28>)
	_current->arch.basepri = key;
    1518:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    151a:	6809      	ldr	r1, [r1, #0]
    151c:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    151e:	4908      	ldr	r1, [pc, #32]	; (1540 <__swap+0x2c>)
	_current->arch.basepri = key;
    1520:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1522:	684b      	ldr	r3, [r1, #4]
    1524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1528:	604b      	str	r3, [r1, #4]
    152a:	2300      	movs	r3, #0
    152c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1530:	6893      	ldr	r3, [r2, #8]
}
    1532:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	20001988 	.word	0x20001988
    153c:	000184d8 	.word	0x000184d8
    1540:	e000ed00 	.word	0xe000ed00

00001544 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1544:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1546:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    154a:	490d      	ldr	r1, [pc, #52]	; (1580 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    154c:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    154e:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1550:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1552:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1556:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    155a:	4f0a      	ldr	r7, [pc, #40]	; (1584 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    155c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1560:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1562:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1564:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    1566:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    1568:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    156a:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    156c:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1570:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1574:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    1578:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    157c:	4770      	bx	lr
    157e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1580:	20001988 	.word	0x20001988
    ldr v4, =_SCS_ICSR
    1584:	e000ed04 	.word	0xe000ed04

00001588 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    1588:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    158c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    158e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1592:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1596:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    1598:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    159c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    15a0:	2902      	cmp	r1, #2
    beq _oops
    15a2:	d0ff      	beq.n	15a4 <_oops>

000015a4 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    15a4:	b500      	push	{lr}
    blx _do_kernel_oops
    15a6:	f000 fa33 	bl	1a10 <_do_kernel_oops>
    pop {pc}
    15aa:	bd00      	pop	{pc}

000015ac <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    15ac:	b510      	push	{r4, lr}
    15ae:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    15b0:	f012 fd38 	bl	14024 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    15b4:	6822      	ldr	r2, [r4, #0]
    15b6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    15b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    15bc:	4801      	ldr	r0, [pc, #4]	; (15c4 <_FaultThreadShow.isra.2+0x18>)
    15be:	f7ff bce5 	b.w	f8c <printk>
    15c2:	bf00      	nop
    15c4:	00014e81 	.word	0x00014e81

000015c8 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    15c8:	b538      	push	{r3, r4, r5, lr}
    15ca:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    15cc:	481a      	ldr	r0, [pc, #104]	; (1638 <_MpuFault+0x70>)
{
    15ce:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    15d0:	f7ff fcdc 	bl	f8c <printk>

	_FaultThreadShow(esf);
    15d4:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15d8:	4c18      	ldr	r4, [pc, #96]	; (163c <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    15da:	f7ff ffe7 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    15de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e0:	06d9      	lsls	r1, r3, #27
    15e2:	d502      	bpl.n	15ea <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    15e4:	4816      	ldr	r0, [pc, #88]	; (1640 <_MpuFault+0x78>)
    15e6:	f7ff fcd1 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    15ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ec:	071a      	lsls	r2, r3, #28
    15ee:	d502      	bpl.n	15f6 <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    15f0:	4814      	ldr	r0, [pc, #80]	; (1644 <_MpuFault+0x7c>)
    15f2:	f7ff fccb 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    15f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15f8:	079b      	lsls	r3, r3, #30
    15fa:	d50e      	bpl.n	161a <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    15fc:	4812      	ldr	r0, [pc, #72]	; (1648 <_MpuFault+0x80>)
    15fe:	f7ff fcc5 	bl	f8c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    1602:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1606:	0618      	lsls	r0, r3, #24
    1608:	d507      	bpl.n	161a <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    160a:	4810      	ldr	r0, [pc, #64]	; (164c <_MpuFault+0x84>)
    160c:	f7ff fcbe 	bl	f8c <printk>
			if (fromHardFault) {
    1610:	b11d      	cbz	r5, 161a <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1618:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    161a:	4c08      	ldr	r4, [pc, #32]	; (163c <_MpuFault+0x74>)
    161c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    161e:	07d2      	lsls	r2, r2, #31
    1620:	d502      	bpl.n	1628 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1622:	480b      	ldr	r0, [pc, #44]	; (1650 <_MpuFault+0x88>)
    1624:	f7ff fcb2 	bl	f8c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    162a:	069b      	lsls	r3, r3, #26
    162c:	d502      	bpl.n	1634 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    162e:	4809      	ldr	r0, [pc, #36]	; (1654 <_MpuFault+0x8c>)
    1630:	f7ff fcac 	bl	f8c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1634:	2000      	movs	r0, #0
    1636:	bd38      	pop	{r3, r4, r5, pc}
    1638:	00014ecb 	.word	0x00014ecb
    163c:	e000ed00 	.word	0xe000ed00
    1640:	00014ee2 	.word	0x00014ee2
    1644:	00014ef4 	.word	0x00014ef4
    1648:	00014f08 	.word	0x00014f08
    164c:	00014f21 	.word	0x00014f21
    1650:	00014f32 	.word	0x00014f32
    1654:	00014f52 	.word	0x00014f52

00001658 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    1658:	b510      	push	{r4, lr}
    165a:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    165c:	481a      	ldr	r0, [pc, #104]	; (16c8 <_UsageFault+0x70>)
    165e:	f7ff fc95 	bl	f8c <printk>

	_FaultThreadShow(esf);
    1662:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1666:	4c19      	ldr	r4, [pc, #100]	; (16cc <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1668:	f7ff ffa0 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	019a      	lsls	r2, r3, #6
    1670:	d502      	bpl.n	1678 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1672:	4817      	ldr	r0, [pc, #92]	; (16d0 <_UsageFault+0x78>)
    1674:	f7ff fc8a 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167a:	01db      	lsls	r3, r3, #7
    167c:	d502      	bpl.n	1684 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    167e:	4815      	ldr	r0, [pc, #84]	; (16d4 <_UsageFault+0x7c>)
    1680:	f7ff fc84 	bl	f8c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1686:	0318      	lsls	r0, r3, #12
    1688:	d502      	bpl.n	1690 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    168a:	4813      	ldr	r0, [pc, #76]	; (16d8 <_UsageFault+0x80>)
    168c:	f7ff fc7e 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1690:	4c0e      	ldr	r4, [pc, #56]	; (16cc <_UsageFault+0x74>)
    1692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1694:	0359      	lsls	r1, r3, #13
    1696:	d502      	bpl.n	169e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1698:	4810      	ldr	r0, [pc, #64]	; (16dc <_UsageFault+0x84>)
    169a:	f7ff fc77 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	039a      	lsls	r2, r3, #14
    16a2:	d502      	bpl.n	16aa <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    16a4:	480e      	ldr	r0, [pc, #56]	; (16e0 <_UsageFault+0x88>)
    16a6:	f7ff fc71 	bl	f8c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    16aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ac:	03db      	lsls	r3, r3, #15
    16ae:	d502      	bpl.n	16b6 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    16b0:	480c      	ldr	r0, [pc, #48]	; (16e4 <_UsageFault+0x8c>)
    16b2:	f7ff fc6b 	bl	f8c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16b6:	4a05      	ldr	r2, [pc, #20]	; (16cc <_UsageFault+0x74>)
    16b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    16be:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    16c2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    16c4:	2000      	movs	r0, #0
    16c6:	bd10      	pop	{r4, pc}
    16c8:	00014f82 	.word	0x00014f82
    16cc:	e000ed00 	.word	0xe000ed00
    16d0:	00014f9b 	.word	0x00014f9b
    16d4:	00014faf 	.word	0x00014faf
    16d8:	00014fca 	.word	0x00014fca
    16dc:	00014fe9 	.word	0x00014fe9
    16e0:	0001500f 	.word	0x0001500f
    16e4:	0001502a 	.word	0x0001502a

000016e8 <_BusFault>:
{
    16e8:	b538      	push	{r3, r4, r5, lr}
    16ea:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    16ec:	481d      	ldr	r0, [pc, #116]	; (1764 <_BusFault+0x7c>)
{
    16ee:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    16f0:	f7ff fc4c 	bl	f8c <printk>
	_FaultThreadShow(esf);
    16f4:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16f8:	4c1b      	ldr	r4, [pc, #108]	; (1768 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    16fa:	f7ff ff57 	bl	15ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    16fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1700:	04d8      	lsls	r0, r3, #19
    1702:	d504      	bpl.n	170e <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1704:	4819      	ldr	r0, [pc, #100]	; (176c <_BusFault+0x84>)
}
    1706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    170a:	f7ff bc3f 	b.w	f8c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    170e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1710:	0519      	lsls	r1, r3, #20
    1712:	d501      	bpl.n	1718 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1714:	4816      	ldr	r0, [pc, #88]	; (1770 <_BusFault+0x88>)
    1716:	e7f6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    171a:	059a      	lsls	r2, r3, #22
    171c:	d514      	bpl.n	1748 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    171e:	4815      	ldr	r0, [pc, #84]	; (1774 <_BusFault+0x8c>)
    1720:	f7ff fc34 	bl	f8c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1724:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1728:	041b      	lsls	r3, r3, #16
    172a:	d507      	bpl.n	173c <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    172c:	4812      	ldr	r0, [pc, #72]	; (1778 <_BusFault+0x90>)
    172e:	f7ff fc2d 	bl	f8c <printk>
			if (fromHardFault) {
    1732:	b11d      	cbz	r5, 173c <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    173a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <_BusFault+0x80>)
    173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1740:	0558      	lsls	r0, r3, #21
    1742:	d50e      	bpl.n	1762 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1744:	480d      	ldr	r0, [pc, #52]	; (177c <_BusFault+0x94>)
    1746:	e7de      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    174a:	0559      	lsls	r1, r3, #21
    174c:	d4fa      	bmi.n	1744 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    174e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1750:	05da      	lsls	r2, r3, #23
    1752:	d501      	bpl.n	1758 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1754:	480a      	ldr	r0, [pc, #40]	; (1780 <_BusFault+0x98>)
    1756:	e7d6      	b.n	1706 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    175a:	049b      	lsls	r3, r3, #18
    175c:	d501      	bpl.n	1762 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    175e:	4809      	ldr	r0, [pc, #36]	; (1784 <_BusFault+0x9c>)
    1760:	e7d1      	b.n	1706 <_BusFault+0x1e>
    1762:	bd38      	pop	{r3, r4, r5, pc}
    1764:	00014d48 	.word	0x00014d48
    1768:	e000ed00 	.word	0xe000ed00
    176c:	00014ee2 	.word	0x00014ee2
    1770:	00014ef4 	.word	0x00014ef4
    1774:	00014d5f 	.word	0x00014d5f
    1778:	00014f21 	.word	0x00014f21
    177c:	00014d79 	.word	0x00014d79
    1780:	00014d95 	.word	0x00014d95
    1784:	00014f52 	.word	0x00014f52

00001788 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    1788:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    178a:	4c27      	ldr	r4, [pc, #156]	; (1828 <_Fault+0xa0>)
    178c:	6863      	ldr	r3, [r4, #4]
    178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1792:	1eda      	subs	r2, r3, #3
{
    1794:	4605      	mov	r5, r0
	switch (fault) {
    1796:	2a09      	cmp	r2, #9
    1798:	d83b      	bhi.n	1812 <_Fault+0x8a>
    179a:	e8df f002 	tbb	[pc, r2]
    179e:	3405      	.short	0x3405
    17a0:	3a3a3036 	.word	0x3a3a3036
    17a4:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    17a8:	4820      	ldr	r0, [pc, #128]	; (182c <_Fault+0xa4>)
    17aa:	f7ff fbef 	bl	f8c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    17ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17b0:	079a      	lsls	r2, r3, #30
    17b2:	d503      	bpl.n	17bc <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    17b4:	481e      	ldr	r0, [pc, #120]	; (1830 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    17b6:	f7ff fbe9 	bl	f8c <printk>
    17ba:	e002      	b.n	17c2 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    17bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17be:	005b      	lsls	r3, r3, #1
    17c0:	d401      	bmi.n	17c6 <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    17c2:	2000      	movs	r0, #0
    17c4:	e009      	b.n	17da <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    17c6:	481b      	ldr	r0, [pc, #108]	; (1834 <_Fault+0xac>)
    17c8:	f7ff fbe0 	bl	f8c <printk>
		if (SCB_MMFSR) {
    17cc:	4b1a      	ldr	r3, [pc, #104]	; (1838 <_Fault+0xb0>)
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	b143      	cbz	r3, 17e4 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    17d2:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    17d4:	4628      	mov	r0, r5
    17d6:	f7ff fef7 	bl	15c8 <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    17da:	4629      	mov	r1, r5
}
    17dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    17e0:	f000 b91a 	b.w	1a18 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    17e4:	4b15      	ldr	r3, [pc, #84]	; (183c <_Fault+0xb4>)
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	b123      	cbz	r3, 17f4 <_Fault+0x6c>
			_BusFault(esf, 1);
    17ea:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    17ec:	4628      	mov	r0, r5
    17ee:	f7ff ff7b 	bl	16e8 <_BusFault>
    17f2:	e7e6      	b.n	17c2 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    17f4:	4b12      	ldr	r3, [pc, #72]	; (1840 <_Fault+0xb8>)
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	b29b      	uxth	r3, r3
    17fa:	2b00      	cmp	r3, #0
    17fc:	d0e1      	beq.n	17c2 <_Fault+0x3a>
		reason = _UsageFault(esf);
    17fe:	4628      	mov	r0, r5
    1800:	f7ff ff2a 	bl	1658 <_UsageFault>
    1804:	e7e9      	b.n	17da <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    1806:	2100      	movs	r1, #0
    1808:	e7e4      	b.n	17d4 <_Fault+0x4c>
		_BusFault(esf, 0);
    180a:	2100      	movs	r1, #0
    180c:	e7ee      	b.n	17ec <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    180e:	480d      	ldr	r0, [pc, #52]	; (1844 <_Fault+0xbc>)
    1810:	e7d1      	b.n	17b6 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1812:	480d      	ldr	r0, [pc, #52]	; (1848 <_Fault+0xc0>)
    1814:	490d      	ldr	r1, [pc, #52]	; (184c <_Fault+0xc4>)
    1816:	f1a3 0210 	sub.w	r2, r3, #16
    181a:	2b0f      	cmp	r3, #15
    181c:	bfd8      	it	le
    181e:	4601      	movle	r1, r0
    1820:	480b      	ldr	r0, [pc, #44]	; (1850 <_Fault+0xc8>)
    1822:	f7ff fbb3 	bl	f8c <printk>
    1826:	e7cc      	b.n	17c2 <_Fault+0x3a>
    1828:	e000ed00 	.word	0xe000ed00
    182c:	00014ddc 	.word	0x00014ddc
    1830:	00014df4 	.word	0x00014df4
    1834:	00014e16 	.word	0x00014e16
    1838:	e000ed28 	.word	0xe000ed28
    183c:	e000ed29 	.word	0xe000ed29
    1840:	e000ed2a 	.word	0xe000ed2a
    1844:	00014e36 	.word	0x00014e36
    1848:	00014dae 	.word	0x00014dae
    184c:	00014dc3 	.word	0x00014dc3
    1850:	00014e6d 	.word	0x00014e6d

00001854 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1854:	4a02      	ldr	r2, [pc, #8]	; (1860 <_FaultInit+0xc>)
    1856:	6953      	ldr	r3, [r2, #20]
    1858:	f043 0310 	orr.w	r3, r3, #16
    185c:	6153      	str	r3, [r2, #20]
    185e:	4770      	bx	lr
    1860:	e000ed00 	.word	0xe000ed00

00001864 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1864:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1866:	2b00      	cmp	r3, #0
    1868:	db08      	blt.n	187c <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    186a:	2201      	movs	r2, #1
    186c:	f000 001f 	and.w	r0, r0, #31
    1870:	fa02 f000 	lsl.w	r0, r2, r0
    1874:	095b      	lsrs	r3, r3, #5
    1876:	4a02      	ldr	r2, [pc, #8]	; (1880 <_arch_irq_enable+0x1c>)
    1878:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    187c:	4770      	bx	lr
    187e:	bf00      	nop
    1880:	e000e100 	.word	0xe000e100

00001884 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1884:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1886:	2b00      	cmp	r3, #0
    1888:	db0d      	blt.n	18a6 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    188a:	2201      	movs	r2, #1
    188c:	095b      	lsrs	r3, r3, #5
    188e:	f000 001f 	and.w	r0, r0, #31
    1892:	fa02 f000 	lsl.w	r0, r2, r0
    1896:	3320      	adds	r3, #32
    1898:	4a03      	ldr	r2, [pc, #12]	; (18a8 <_arch_irq_disable+0x24>)
    189a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    189e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18a2:	f3bf 8f6f 	isb	sy
    18a6:	4770      	bx	lr
    18a8:	e000e100 	.word	0xe000e100

000018ac <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    18ac:	0942      	lsrs	r2, r0, #5
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <_arch_irq_is_enabled+0x18>)
    18b0:	f000 001f 	and.w	r0, r0, #31
    18b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18b8:	2301      	movs	r3, #1
    18ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    18be:	4010      	ands	r0, r2
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	e000e100 	.word	0xe000e100

000018c8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    18c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    18ca:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18cc:	bfa8      	it	ge
    18ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    18d2:	f101 0101 	add.w	r1, r1, #1
    18d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    18da:	bfad      	iteet	ge
    18dc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e0:	f000 000f 	andlt.w	r0, r0, #15
    18e4:	4b03      	ldrlt	r3, [pc, #12]	; (18f4 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18e8:	bfb6      	itet	lt
    18ea:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18ec:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f0:	5419      	strblt	r1, [r3, r0]
    18f2:	4770      	bx	lr
    18f4:	e000ed14 	.word	0xe000ed14

000018f8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    18f8:	f000 b844 	b.w	1984 <__bus_fault>

000018fc <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    18fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    18fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <_arch_isr_direct_pm+0x18>)
    1902:	69d8      	ldr	r0, [r3, #28]
    1904:	b118      	cbz	r0, 190e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1906:	2200      	movs	r2, #0
    1908:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    190a:	f011 fe95 	bl	13638 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    190e:	b662      	cpsie	i
    1910:	bd08      	pop	{r3, pc}
    1912:	bf00      	nop
    1914:	20001988 	.word	0x20001988

00001918 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191a:	461f      	mov	r7, r3
#ifdef CONFIG_STACK_SENTINEL
	/* Put the stack sentinel at the lowest 4 bytes of the stack area.
	 * We periodically check that it's still present and kill the thread
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
    191c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
    1920:	460c      	mov	r4, r1
    1922:	4616      	mov	r6, r2
    1924:	600b      	str	r3, [r1, #0]
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1926:	2204      	movs	r2, #4
    1928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    192a:	9909      	ldr	r1, [sp, #36]	; 0x24
    192c:	4605      	mov	r5, r0
    192e:	f012 fe4d 	bl	145cc <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1932:	f1a6 0120 	sub.w	r1, r6, #32
    1936:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1938:	4a0b      	ldr	r2, [pc, #44]	; (1968 <_new_thread+0x50>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    193a:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    193c:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1940:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1942:	f022 0201 	bic.w	r2, r2, #1
    1946:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1948:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    194a:	662e      	str	r6, [r5, #96]	; 0x60
    194c:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    194e:	9a06      	ldr	r2, [sp, #24]
    1950:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1952:	9a07      	ldr	r2, [sp, #28]
    1954:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1956:	9a08      	ldr	r2, [sp, #32]
    1958:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    195a:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    195c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1960:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1962:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1964:	66ab      	str	r3, [r5, #104]	; 0x68
    1966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1968:	00000899 	.word	0x00000899

0000196c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    196c:	4901      	ldr	r1, [pc, #4]	; (1974 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    196e:	2210      	movs	r2, #16
	str r2, [r1]
    1970:	600a      	str	r2, [r1, #0]
	bx lr
    1972:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1974:	e000ed10 	.word	0xe000ed10

00001978 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1978:	4040      	eors	r0, r0
	msr BASEPRI, r0
    197a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    197e:	bf30      	wfi

	bx lr
    1980:	4770      	bx	lr
    1982:	bf00      	nop

00001984 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1984:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1986:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    198a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 19a8 <__bus_fault+0x24>
	ldr ip, [ip]
    198e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1992:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1996:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1998:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    199c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    19a0:	b500      	push	{lr}
	bl _Fault
    19a2:	f7ff fef1 	bl	1788 <_Fault>

	pop {pc}
    19a6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    19a8:	e000ed04 	.word	0xe000ed04

000019ac <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    19ac:	b538      	push	{r3, r4, r5, lr}
	switch (reason) {
    19ae:	1e83      	subs	r3, r0, #2
{
    19b0:	4604      	mov	r4, r0
    19b2:	460d      	mov	r5, r1
	switch (reason) {
    19b4:	2b03      	cmp	r3, #3
    19b6:	d819      	bhi.n	19ec <_NanoFatalErrorHandler+0x40>
    19b8:	e8df f003 	tbb	[pc, r3]
    19bc:	16141202 	.word	0x16141202
#if defined(CONFIG_STACK_CANARIES) || defined(CONFIG_STACK_SENTINEL)
	case _NANO_ERR_STACK_CHK_FAIL:
		printk("***** Stack Check Fail! *****\n");
    19c0:	480d      	ldr	r0, [pc, #52]	; (19f8 <_NanoFatalErrorHandler+0x4c>)
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    19c2:	f7ff fae3 	bl	f8c <printk>
    19c6:	f012 fb2d 	bl	14024 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    19ca:	69aa      	ldr	r2, [r5, #24]
    19cc:	4601      	mov	r1, r0
    19ce:	480b      	ldr	r0, [pc, #44]	; (19fc <_NanoFatalErrorHandler+0x50>)
    19d0:	f7ff fadc 	bl	f8c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    19d4:	4629      	mov	r1, r5
    19d6:	4620      	mov	r0, r4
}
    19d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    19dc:	f000 b81c 	b.w	1a18 <_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    19e0:	4807      	ldr	r0, [pc, #28]	; (1a00 <_NanoFatalErrorHandler+0x54>)
    19e2:	e7ee      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    19e4:	4807      	ldr	r0, [pc, #28]	; (1a04 <_NanoFatalErrorHandler+0x58>)
    19e6:	e7ec      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    19e8:	4807      	ldr	r0, [pc, #28]	; (1a08 <_NanoFatalErrorHandler+0x5c>)
    19ea:	e7ea      	b.n	19c2 <_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    19ec:	4601      	mov	r1, r0
    19ee:	4807      	ldr	r0, [pc, #28]	; (1a0c <_NanoFatalErrorHandler+0x60>)
    19f0:	f7ff facc 	bl	f8c <printk>
		break;
    19f4:	e7e7      	b.n	19c6 <_NanoFatalErrorHandler+0x1a>
    19f6:	bf00      	nop
    19f8:	00015056 	.word	0x00015056
    19fc:	000150f3 	.word	0x000150f3
    1a00:	00015075 	.word	0x00015075
    1a04:	0001509b 	.word	0x0001509b
    1a08:	000150b5 	.word	0x000150b5
    1a0c:	000150d0 	.word	0x000150d0

00001a10 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1a10:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1a12:	6800      	ldr	r0, [r0, #0]
    1a14:	f7ff bfca 	b.w	19ac <_NanoFatalErrorHandler>

00001a18 <_SysFatalErrorHandler>:
{
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a18:	2802      	cmp	r0, #2
{
    1a1a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
    1a1c:	d00e      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1a1e:	2805      	cmp	r0, #5
    1a20:	d00c      	beq.n	1a3c <_SysFatalErrorHandler+0x24>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1a22:	f012 fceb 	bl	143fc <k_is_in_isr>
    1a26:	b160      	cbz	r0, 1a42 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1a28:	f012 fce8 	bl	143fc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1a2c:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <_SysFatalErrorHandler+0x48>)
    1a2e:	490d      	ldr	r1, [pc, #52]	; (1a64 <_SysFatalErrorHandler+0x4c>)
    1a30:	2800      	cmp	r0, #0
    1a32:	bf08      	it	eq
    1a34:	4619      	moveq	r1, r3
    1a36:	480c      	ldr	r0, [pc, #48]	; (1a68 <_SysFatalErrorHandler+0x50>)
    1a38:	f7ff faa8 	bl	f8c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1a3c:	f7ff ff9c 	bl	1978 <k_cpu_idle>
    1a40:	e7fc      	b.n	1a3c <_SysFatalErrorHandler+0x24>
	if (k_is_in_isr() || _is_thread_essential()) {
    1a42:	f012 fceb 	bl	1441c <_is_thread_essential>
    1a46:	2800      	cmp	r0, #0
    1a48:	d1ee      	bne.n	1a28 <_SysFatalErrorHandler+0x10>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1a4a:	4c08      	ldr	r4, [pc, #32]	; (1a6c <_SysFatalErrorHandler+0x54>)
    1a4c:	4808      	ldr	r0, [pc, #32]	; (1a70 <_SysFatalErrorHandler+0x58>)
    1a4e:	68a1      	ldr	r1, [r4, #8]
    1a50:	f7ff fa9c 	bl	f8c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1a54:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a5a:	f000 b80b 	b.w	1a74 <_impl_k_thread_abort>
    1a5e:	bf00      	nop
    1a60:	00015133 	.word	0x00015133
    1a64:	0001512f 	.word	0x0001512f
    1a68:	00015144 	.word	0x00015144
    1a6c:	20001988 	.word	0x20001988
    1a70:	00015164 	.word	0x00015164

00001a74 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1a74:	b538      	push	{r3, r4, r5, lr}
    1a76:	4605      	mov	r5, r0
	__asm__ volatile(
    1a78:	f04f 0320 	mov.w	r3, #32
    1a7c:	f3ef 8411 	mrs	r4, BASEPRI
    1a80:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1a84:	f012 fd38 	bl	144f8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1a88:	4b0c      	ldr	r3, [pc, #48]	; (1abc <_impl_k_thread_abort+0x48>)
    1a8a:	689b      	ldr	r3, [r3, #8]
    1a8c:	429d      	cmp	r5, r3
    1a8e:	d10f      	bne.n	1ab0 <_impl_k_thread_abort+0x3c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1a90:	4b0b      	ldr	r3, [pc, #44]	; (1ac0 <_impl_k_thread_abort+0x4c>)
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1a98:	b932      	cbnz	r2, 1aa8 <_impl_k_thread_abort+0x34>

extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
    1a9a:	f012 fcc7 	bl	1442c <_check_stack_sentinel>
	_update_time_slice_before_swap();
    1a9e:	f012 fa79 	bl	13f94 <_update_time_slice_before_swap>

	return __swap(key);
    1aa2:	4620      	mov	r0, r4
    1aa4:	f7ff fd36 	bl	1514 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1aa8:	685a      	ldr	r2, [r3, #4]
    1aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1aae:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    1ab0:	4620      	mov	r0, r4
}
    1ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1ab6:	f012 b931 	b.w	13d1c <_reschedule>
    1aba:	bf00      	nop
    1abc:	20001988 	.word	0x20001988
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1ac4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1ac6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1ac8:	4a0b      	ldr	r2, [pc, #44]	; (1af8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1aca:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1acc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1ace:	bf1e      	ittt	ne
	movne	r1, #0
    1ad0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1ad2:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1ad4:	f011 fdb0 	blne	13638 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1ad8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1ada:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ade:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ae2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1ae6:	4905      	ldr	r1, [pc, #20]	; (1afc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1ae8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1aea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1aec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1aee:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1af2:	f7ff bceb 	b.w	14cc <_ExcExit>
    1af6:	0000      	.short	0x0000
	ldr r2, =_kernel
    1af8:	20001988 	.word	0x20001988
	ldr r1, =_sw_isr_table
    1afc:	000000dc 	.word	0x000000dc

00001b00 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b00:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b02:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1b06:	4806      	ldr	r0, [pc, #24]	; (1b20 <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b0c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b0e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1b12:	2002      	movs	r0, #2
    msr CONTROL, r0
    1b14:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    1b18:	f3bf 8f6f 	isb	sy

    b _PrepC
    1b1c:	f000 b806 	b.w	1b2c <_PrepC>
    ldr r0, =_interrupt_stack
    1b20:	20002e68 	.word	0x20002e68

00001b24 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1b24:	bf30      	wfi
    b _SysNmiOnReset
    1b26:	f7ff bffd 	b.w	1b24 <_SysNmiOnReset>
    1b2a:	bf00      	nop

00001b2c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1b2c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b2e:	4b07      	ldr	r3, [pc, #28]	; (1b4c <_PrepC+0x20>)
    1b30:	4a07      	ldr	r2, [pc, #28]	; (1b50 <_PrepC+0x24>)
    1b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1b36:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b3c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1b40:	f011 fdaa 	bl	13698 <_bss_zero>
	_data_copy();
    1b44:	f011 fdb2 	bl	136ac <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1b48:	f011 fdd4 	bl	136f4 <_Cstart>
    1b4c:	00000000 	.word	0x00000000
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1b54:	b508      	push	{r3, lr}
	handler();
    1b56:	f7ff ffe5 	bl	1b24 <_SysNmiOnReset>
	_ExcExit();
}
    1b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1b5e:	f7ff bcb5 	b.w	14cc <_ExcExit>
	...

00001b64 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1b64:	4912      	ldr	r1, [pc, #72]	; (1bb0 <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1b66:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1b68:	680d      	ldr	r5, [r1, #0]
    1b6a:	2d08      	cmp	r5, #8
    1b6c:	d80d      	bhi.n	1b8a <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1b6e:	4a11      	ldr	r2, [pc, #68]	; (1bb4 <arm_mpu_init+0x50>)
    1b70:	6848      	ldr	r0, [r1, #4]
    1b72:	2300      	movs	r3, #0
    1b74:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1b76:	429d      	cmp	r5, r3
    1b78:	f100 000c 	add.w	r0, r0, #12
    1b7c:	d107      	bne.n	1b8e <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1b7e:	2305      	movs	r3, #5
    1b80:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b86:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1b8a:	2000      	movs	r0, #0
    1b8c:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1b8e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1b92:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1b96:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1b98:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1b9c:	f041 0110 	orr.w	r1, r1, #16
    1ba0:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1ba2:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1ba6:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1ba8:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1baa:	6114      	str	r4, [r2, #16]
    1bac:	e7e3      	b.n	1b76 <arm_mpu_init+0x12>
    1bae:	bf00      	nop
    1bb0:	20003a7c 	.word	0x20003a7c
    1bb4:	e000ed90 	.word	0xe000ed90

00001bb8 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1bb8:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1bba:	4603      	mov	r3, r0
    1bbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1bc0:	b90a      	cbnz	r2, 1bc6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1bc2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1bc4:	4770      	bx	lr
		*d = *s;
    1bc6:	f803 2b01 	strb.w	r2, [r3], #1
    1bca:	e7f7      	b.n	1bbc <strcpy+0x4>

00001bcc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    1bcc:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    1bce:	4603      	mov	r3, r0
    1bd0:	1a98      	subs	r0, r3, r2
    1bd2:	f813 1b01 	ldrb.w	r1, [r3], #1
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d1fa      	bne.n	1bd0 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
    1bda:	4770      	bx	lr

00001bdc <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1bdc:	3801      	subs	r0, #1
    1bde:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1be0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1be8:	4293      	cmp	r3, r2
    1bea:	d102      	bne.n	1bf2 <strcmp+0x16>
    1bec:	2b00      	cmp	r3, #0
    1bee:	d1f7      	bne.n	1be0 <strcmp+0x4>
    1bf0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1bf2:	1a98      	subs	r0, r3, r2
    1bf4:	4770      	bx	lr

00001bf6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1bf6:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1bf8:	b182      	cbz	r2, 1c1c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1bfa:	3a01      	subs	r2, #1
    1bfc:	460c      	mov	r4, r1
    1bfe:	4603      	mov	r3, r0
    1c00:	d103      	bne.n	1c0a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1c02:	781a      	ldrb	r2, [r3, #0]
    1c04:	7820      	ldrb	r0, [r4, #0]
    1c06:	1a10      	subs	r0, r2, r0
    1c08:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1c0a:	781e      	ldrb	r6, [r3, #0]
    1c0c:	7825      	ldrb	r5, [r4, #0]
    1c0e:	42ae      	cmp	r6, r5
    1c10:	f100 0001 	add.w	r0, r0, #1
    1c14:	f101 0101 	add.w	r1, r1, #1
    1c18:	d0ef      	beq.n	1bfa <memcmp+0x4>
    1c1a:	e7f2      	b.n	1c02 <memcmp+0xc>
		return 0;
    1c1c:	4610      	mov	r0, r2
}
    1c1e:	bd70      	pop	{r4, r5, r6, pc}

00001c20 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c20:	ea81 0300 	eor.w	r3, r1, r0
    1c24:	f013 0f03 	tst.w	r3, #3
{
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1c2c:	d00b      	beq.n	1c46 <memcpy+0x26>
    1c2e:	3b01      	subs	r3, #1
    1c30:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1c32:	4291      	cmp	r1, r2
    1c34:	d11b      	bne.n	1c6e <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1c36:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d0fc      	beq.n	1c36 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c40:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1c44:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1c46:	079c      	lsls	r4, r3, #30
    1c48:	d1f6      	bne.n	1c38 <memcpy+0x18>
    1c4a:	1f1e      	subs	r6, r3, #4
    1c4c:	460d      	mov	r5, r1
    1c4e:	1b54      	subs	r4, r2, r5
    1c50:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1c52:	2c03      	cmp	r4, #3
    1c54:	d806      	bhi.n	1c64 <memcpy+0x44>
    1c56:	f022 0403 	bic.w	r4, r2, #3
    1c5a:	4421      	add	r1, r4
    1c5c:	4423      	add	r3, r4
    1c5e:	f002 0203 	and.w	r2, r2, #3
    1c62:	e7e4      	b.n	1c2e <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1c64:	f855 4b04 	ldr.w	r4, [r5], #4
    1c68:	f846 4f04 	str.w	r4, [r6, #4]!
    1c6c:	e7ef      	b.n	1c4e <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1c72:	f803 4f01 	strb.w	r4, [r3, #1]!
    1c76:	e7dc      	b.n	1c32 <memcpy+0x12>

00001c78 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1c78:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1c7a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1c7c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1c7e:	079c      	lsls	r4, r3, #30
    1c80:	d111      	bne.n	1ca6 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1c82:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1c86:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1c8a:	461e      	mov	r6, r3
    1c8c:	1b95      	subs	r5, r2, r6
    1c8e:	441d      	add	r5, r3
    1c90:	2d03      	cmp	r5, #3
    1c92:	d80e      	bhi.n	1cb2 <memset+0x3a>
    1c94:	f022 0403 	bic.w	r4, r2, #3
    1c98:	4423      	add	r3, r4
    1c9a:	f002 0203 	and.w	r2, r2, #3
    1c9e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1ca0:	4293      	cmp	r3, r2
    1ca2:	d109      	bne.n	1cb8 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1ca4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1ca6:	2a00      	cmp	r2, #0
    1ca8:	d0fc      	beq.n	1ca4 <memset+0x2c>
		*(d_byte++) = c_byte;
    1caa:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1cae:	3a01      	subs	r2, #1
    1cb0:	e7e5      	b.n	1c7e <memset+0x6>
		*(d_word++) = c_word;
    1cb2:	f846 4b04 	str.w	r4, [r6], #4
    1cb6:	e7e9      	b.n	1c8c <memset+0x14>
		*(d_byte++) = c_byte;
    1cb8:	f803 1b01 	strb.w	r1, [r3], #1
    1cbc:	e7f0      	b.n	1ca0 <memset+0x28>
	...

00001cc0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	f04f 0320 	mov.w	r3, #32
    1cc6:	f3ef 8511 	mrs	r5, BASEPRI
    1cca:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1cce:	4c14      	ldr	r4, [pc, #80]	; (1d20 <bt_hex+0x60>)
    1cd0:	4e14      	ldr	r6, [pc, #80]	; (1d24 <bt_hex+0x64>)
    1cd2:	7823      	ldrb	r3, [r4, #0]
    1cd4:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1cd8:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1cda:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1cde:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1ce0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1ce2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1ce6:	2940      	cmp	r1, #64	; 0x40
    1ce8:	bf28      	it	cs
    1cea:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1cec:	4d0e      	ldr	r5, [pc, #56]	; (1d28 <bt_hex+0x68>)
    1cee:	3801      	subs	r0, #1
    1cf0:	4613      	mov	r3, r2
    1cf2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1cf6:	42b3      	cmp	r3, r6
    1cf8:	d104      	bne.n	1d04 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1cfa:	2300      	movs	r3, #0
    1cfc:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1d00:	4610      	mov	r0, r2
    1d02:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1d04:	7844      	ldrb	r4, [r0, #1]
    1d06:	0924      	lsrs	r4, r4, #4
    1d08:	3302      	adds	r3, #2
    1d0a:	5d2c      	ldrb	r4, [r5, r4]
    1d0c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1d10:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1d14:	f004 040f 	and.w	r4, r4, #15
    1d18:	5d2c      	ldrb	r4, [r5, r4]
    1d1a:	f803 4c01 	strb.w	r4, [r3, #-1]
    1d1e:	e7ea      	b.n	1cf6 <bt_hex+0x36>
    1d20:	20000074 	.word	0x20000074
    1d24:	20000075 	.word	0x20000075
    1d28:	000151a7 	.word	0x000151a7

00001d2c <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1d2c:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d2e:	4a0f      	ldr	r2, [pc, #60]	; (1d6c <bt_addr_str+0x40>)
    1d30:	4c0f      	ldr	r4, [pc, #60]	; (1d70 <bt_addr_str+0x44>)
    1d32:	7813      	ldrb	r3, [r2, #0]
    1d34:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1d38:	3301      	adds	r3, #1
{
    1d3a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1d3c:	f003 0301 	and.w	r3, r3, #1
    1d40:	7013      	strb	r3, [r2, #0]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1d42:	7802      	ldrb	r2, [r0, #0]
    1d44:	7943      	ldrb	r3, [r0, #5]
    1d46:	9204      	str	r2, [sp, #16]
    1d48:	7842      	ldrb	r2, [r0, #1]
    1d4a:	9203      	str	r2, [sp, #12]
    1d4c:	7882      	ldrb	r2, [r0, #2]
    1d4e:	9202      	str	r2, [sp, #8]
    1d50:	78c2      	ldrb	r2, [r0, #3]
    1d52:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1d54:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1d58:	7902      	ldrb	r2, [r0, #4]
    1d5a:	9200      	str	r2, [sp, #0]
    1d5c:	2112      	movs	r1, #18
    1d5e:	4a05      	ldr	r2, [pc, #20]	; (1d74 <bt_addr_str+0x48>)
    1d60:	4620      	mov	r0, r4
    1d62:	f7ff f921 	bl	fa8 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1d66:	4620      	mov	r0, r4
    1d68:	b006      	add	sp, #24
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	20000072 	.word	0x20000072
    1d70:	20000018 	.word	0x20000018
    1d74:	00015189 	.word	0x00015189

00001d78 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1d7a:	4a1d      	ldr	r2, [pc, #116]	; (1df0 <bt_addr_le_str+0x78>)
    1d7c:	491d      	ldr	r1, [pc, #116]	; (1df4 <bt_addr_le_str+0x7c>)
    1d7e:	7813      	ldrb	r3, [r2, #0]
    1d80:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1d84:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1d86:	f003 0301 	and.w	r3, r3, #1
    1d8a:	7013      	strb	r3, [r2, #0]
	switch (addr->type) {
    1d8c:	7803      	ldrb	r3, [r0, #0]
{
    1d8e:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1d90:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1d94:	4604      	mov	r4, r0
	str = bufs[cur++];
    1d96:	440e      	add	r6, r1
    1d98:	ad07      	add	r5, sp, #28
    1d9a:	2b03      	cmp	r3, #3
    1d9c:	d821      	bhi.n	1de2 <bt_addr_le_str+0x6a>
    1d9e:	e8df f003 	tbb	[pc, r3]
    1da2:	1a02      	.short	0x1a02
    1da4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    1da6:	4914      	ldr	r1, [pc, #80]	; (1df8 <bt_addr_le_str+0x80>)
		strcpy(type, "random");
    1da8:	4628      	mov	r0, r5
    1daa:	f7ff ff05 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1dae:	7862      	ldrb	r2, [r4, #1]
    1db0:	9204      	str	r2, [sp, #16]
    1db2:	78a2      	ldrb	r2, [r4, #2]
    1db4:	9203      	str	r2, [sp, #12]
    1db6:	78e2      	ldrb	r2, [r4, #3]
    1db8:	9202      	str	r2, [sp, #8]
    1dba:	7922      	ldrb	r2, [r4, #4]
    1dbc:	9201      	str	r2, [sp, #4]
    1dbe:	7962      	ldrb	r2, [r4, #5]
    1dc0:	9200      	str	r2, [sp, #0]
    1dc2:	79a3      	ldrb	r3, [r4, #6]
    1dc4:	9505      	str	r5, [sp, #20]
    1dc6:	4a0d      	ldr	r2, [pc, #52]	; (1dfc <bt_addr_le_str+0x84>)
    1dc8:	211b      	movs	r1, #27
    1dca:	4630      	mov	r0, r6
    1dcc:	f7ff f8ec 	bl	fa8 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1dd0:	4630      	mov	r0, r6
    1dd2:	b00a      	add	sp, #40	; 0x28
    1dd4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1dd6:	490a      	ldr	r1, [pc, #40]	; (1e00 <bt_addr_le_str+0x88>)
    1dd8:	e7e6      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1dda:	490a      	ldr	r1, [pc, #40]	; (1e04 <bt_addr_le_str+0x8c>)
    1ddc:	e7e4      	b.n	1da8 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1dde:	490a      	ldr	r1, [pc, #40]	; (1e08 <bt_addr_le_str+0x90>)
    1de0:	e7e2      	b.n	1da8 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1de2:	4a0a      	ldr	r2, [pc, #40]	; (1e0c <bt_addr_le_str+0x94>)
    1de4:	210a      	movs	r1, #10
    1de6:	4628      	mov	r0, r5
    1de8:	f7ff f8de 	bl	fa8 <snprintk>
    1dec:	e7df      	b.n	1dae <bt_addr_le_str+0x36>
    1dee:	bf00      	nop
    1df0:	20000073 	.word	0x20000073
    1df4:	2000003c 	.word	0x2000003c
    1df8:	00014bc1 	.word	0x00014bc1
    1dfc:	00014bea 	.word	0x00014bea
    1e00:	00014bc8 	.word	0x00014bc8
    1e04:	00014bcf 	.word	0x00014bcf
    1e08:	00014bd9 	.word	0x00014bd9
    1e0c:	00014be3 	.word	0x00014be3

00001e10 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1e10:	b530      	push	{r4, r5, lr}
    1e12:	b085      	sub	sp, #20
    1e14:	4604      	mov	r4, r0
    1e16:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1e18:	4668      	mov	r0, sp
    1e1a:	2203      	movs	r2, #3
    1e1c:	f7ff ff00 	bl	1c20 <memcpy>
	memset(res + 3, 0, 13);
    1e20:	220d      	movs	r2, #13
    1e22:	2100      	movs	r1, #0
    1e24:	f10d 0003 	add.w	r0, sp, #3
    1e28:	f7ff ff26 	bl	1c78 <memset>

	err = bt_encrypt_le(irk, res, res);
    1e2c:	4620      	mov	r0, r4
    1e2e:	466a      	mov	r2, sp
    1e30:	4669      	mov	r1, sp
    1e32:	f006 f83d 	bl	7eb0 <bt_encrypt_le>
	if (err) {
    1e36:	4604      	mov	r4, r0
    1e38:	b920      	cbnz	r0, 1e44 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1e3a:	2203      	movs	r2, #3
    1e3c:	4669      	mov	r1, sp
    1e3e:	4628      	mov	r0, r5
    1e40:	f7ff feee 	bl	1c20 <memcpy>

	return 0;
}
    1e44:	4620      	mov	r0, r4
    1e46:	b005      	add	sp, #20
    1e48:	bd30      	pop	{r4, r5, pc}

00001e4a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1e4a:	b513      	push	{r0, r1, r4, lr}
    1e4c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1e4e:	aa01      	add	r2, sp, #4
    1e50:	3103      	adds	r1, #3
    1e52:	f7ff ffdd 	bl	1e10 <ah>
	if (err) {
    1e56:	b948      	cbnz	r0, 1e6c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1e58:	2203      	movs	r2, #3
    1e5a:	a901      	add	r1, sp, #4
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff feca 	bl	1bf6 <memcmp>
    1e62:	fab0 f080 	clz	r0, r0
    1e66:	0940      	lsrs	r0, r0, #5
}
    1e68:	b002      	add	sp, #8
    1e6a:	bd10      	pop	{r4, pc}
		return false;
    1e6c:	2000      	movs	r0, #0
    1e6e:	e7fb      	b.n	1e68 <bt_rpa_irk_matches+0x1e>

00001e70 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1e72:	1ccd      	adds	r5, r1, #3
{
    1e74:	4606      	mov	r6, r0
    1e76:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1e78:	4628      	mov	r0, r5
    1e7a:	2103      	movs	r1, #3
    1e7c:	f005 fffc 	bl	7e78 <bt_rand>
	if (err) {
    1e80:	b960      	cbnz	r0, 1e9c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1e82:	7963      	ldrb	r3, [r4, #5]
    1e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e8c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1e8e:	4622      	mov	r2, r4
    1e90:	4629      	mov	r1, r5
    1e92:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1e98:	f7ff bfba 	b.w	1e10 <ah>
}
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ea0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1ea0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1ea2:	7802      	ldrb	r2, [r0, #0]
    1ea4:	2a01      	cmp	r2, #1
{
    1ea6:	4604      	mov	r4, r0
    1ea8:	460b      	mov	r3, r1
	switch (src->type) {
    1eaa:	d017      	beq.n	1edc <uuid_to_uuid128+0x3c>
    1eac:	d303      	bcc.n	1eb6 <uuid_to_uuid128+0x16>
    1eae:	2a02      	cmp	r2, #2
    1eb0:	d02c      	beq.n	1f0c <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1eb2:	bcf0      	pop	{r4, r5, r6, r7}
    1eb4:	4770      	bx	lr
		*dst = uuid128_base;
    1eb6:	4a18      	ldr	r2, [pc, #96]	; (1f18 <uuid_to_uuid128+0x78>)
    1eb8:	460d      	mov	r5, r1
    1eba:	f102 0710 	add.w	r7, r2, #16
    1ebe:	6810      	ldr	r0, [r2, #0]
    1ec0:	6851      	ldr	r1, [r2, #4]
    1ec2:	462e      	mov	r6, r5
    1ec4:	c603      	stmia	r6!, {r0, r1}
    1ec6:	3208      	adds	r2, #8
    1ec8:	42ba      	cmp	r2, r7
    1eca:	4635      	mov	r5, r6
    1ecc:	d1f7      	bne.n	1ebe <uuid_to_uuid128+0x1e>
    1ece:	7812      	ldrb	r2, [r2, #0]
    1ed0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1ed2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ed4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ed6:	0a12      	lsrs	r2, r2, #8
    1ed8:	739a      	strb	r2, [r3, #14]
    1eda:	e7ea      	b.n	1eb2 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1edc:	4a0e      	ldr	r2, [pc, #56]	; (1f18 <uuid_to_uuid128+0x78>)
    1ede:	460d      	mov	r5, r1
    1ee0:	f102 0710 	add.w	r7, r2, #16
    1ee4:	6810      	ldr	r0, [r2, #0]
    1ee6:	6851      	ldr	r1, [r2, #4]
    1ee8:	462e      	mov	r6, r5
    1eea:	c603      	stmia	r6!, {r0, r1}
    1eec:	3208      	adds	r2, #8
    1eee:	42ba      	cmp	r2, r7
    1ef0:	4635      	mov	r5, r6
    1ef2:	d1f7      	bne.n	1ee4 <uuid_to_uuid128+0x44>
    1ef4:	7812      	ldrb	r2, [r2, #0]
    1ef6:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1ef8:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1efa:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1efc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1f00:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1f02:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1f04:	0a12      	lsrs	r2, r2, #8
    1f06:	7399      	strb	r1, [r3, #14]
    1f08:	741a      	strb	r2, [r3, #16]
    1f0a:	e7d2      	b.n	1eb2 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1f0c:	4601      	mov	r1, r0
    1f0e:	2211      	movs	r2, #17
    1f10:	4618      	mov	r0, r3
}
    1f12:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1f14:	f7ff be84 	b.w	1c20 <memcpy>
    1f18:	000151b8 	.word	0x000151b8

00001f1c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1f1c:	b510      	push	{r4, lr}
    1f1e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1f20:	7801      	ldrb	r1, [r0, #0]
    1f22:	7822      	ldrb	r2, [r4, #0]
    1f24:	428a      	cmp	r2, r1
{
    1f26:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1f28:	d00e      	beq.n	1f48 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1f2a:	4669      	mov	r1, sp
    1f2c:	f7ff ffb8 	bl	1ea0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1f30:	a905      	add	r1, sp, #20
    1f32:	4620      	mov	r0, r4
    1f34:	f7ff ffb4 	bl	1ea0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1f38:	2210      	movs	r2, #16
    1f3a:	f10d 0115 	add.w	r1, sp, #21
    1f3e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f42:	f7ff fe58 	bl	1bf6 <memcmp>
    1f46:	e00a      	b.n	1f5e <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1f48:	2a01      	cmp	r2, #1
    1f4a:	d00a      	beq.n	1f62 <bt_uuid_cmp+0x46>
    1f4c:	d304      	bcc.n	1f58 <bt_uuid_cmp+0x3c>
    1f4e:	2a02      	cmp	r2, #2
    1f50:	d00a      	beq.n	1f68 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1f52:	f06f 0015 	mvn.w	r0, #21
    1f56:	e002      	b.n	1f5e <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1f58:	8840      	ldrh	r0, [r0, #2]
    1f5a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f5c:	1ac0      	subs	r0, r0, r3
}
    1f5e:	b00a      	add	sp, #40	; 0x28
    1f60:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1f62:	6840      	ldr	r0, [r0, #4]
    1f64:	6863      	ldr	r3, [r4, #4]
    1f66:	e7f9      	b.n	1f5c <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1f68:	2210      	movs	r2, #16
    1f6a:	1c61      	adds	r1, r4, #1
    1f6c:	3001      	adds	r0, #1
    1f6e:	e7e8      	b.n	1f42 <bt_uuid_cmp+0x26>

00001f70 <hci_stack_dump>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
}

static void hci_stack_dump(const struct k_thread *thread, void *user_data)
{
    1f70:	4770      	bx	lr
	...

00001f74 <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1f76:	4d0b      	ldr	r5, [pc, #44]	; (1fa4 <ver_str+0x30>)
{
    1f78:	4606      	mov	r6, r0
	const char * const str[] = {
    1f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1f7c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1f7e:	466c      	mov	r4, sp
    1f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f86:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1f8a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1f8c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1f90:	bf9b      	ittet	ls
    1f92:	ab0a      	addls	r3, sp, #40	; 0x28
    1f94:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1f98:	4803      	ldrhi	r0, [pc, #12]	; (1fa8 <ver_str+0x34>)
		return str[ver];
    1f9a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1f9e:	b00a      	add	sp, #40	; 0x28
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	bf00      	nop
    1fa4:	00014b78 	.word	0x00014b78
    1fa8:	00015c9c 	.word	0x00015c9c

00001fac <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fac:	2207      	movs	r2, #7
    1fae:	f7ff be37 	b.w	1c20 <memcpy>

00001fb2 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1fb2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1fb4:	f3bf 8f5b 	dmb	ish
    1fb8:	e850 3f00 	ldrex	r3, [r0]
    1fbc:	ea43 0201 	orr.w	r2, r3, r1
    1fc0:	e840 2e00 	strex	lr, r2, [r0]
    1fc4:	f1be 0f00 	cmp.w	lr, #0
    1fc8:	d1f6      	bne.n	1fb8 <atomic_or+0x6>
    1fca:	f3bf 8f5b 	dmb	ish
    1fce:	4618      	mov	r0, r3
    1fd0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fd4 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1fd4:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1fd6:	f3bf 8f5b 	dmb	ish
    1fda:	e850 3f00 	ldrex	r3, [r0]
    1fde:	ea03 0201 	and.w	r2, r3, r1
    1fe2:	e840 2e00 	strex	lr, r2, [r0]
    1fe6:	f1be 0f00 	cmp.w	lr, #0
    1fea:	d1f6      	bne.n	1fda <atomic_and+0x6>
    1fec:	f3bf 8f5b 	dmb	ish
    1ff0:	4618      	mov	r0, r3
    1ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001ff8 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1ff8:	78c3      	ldrb	r3, [r0, #3]
    1ffa:	2b00      	cmp	r3, #0
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ffc:	f241 3288 	movw	r2, #5000	; 0x1388
    2000:	f100 0178 	add.w	r1, r0, #120	; 0x78
    2004:	bf08      	it	eq
    2006:	2200      	moveq	r2, #0
    2008:	4801      	ldr	r0, [pc, #4]	; (2010 <update_conn_param+0x18>)
    200a:	f012 bbb5 	b.w	14778 <k_delayed_work_submit_to_queue>
    200e:	bf00      	nop
    2010:	200019c8 	.word	0x200019c8

00002014 <hci_cmd_done>:
{
    2014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2018:	4606      	mov	r6, r0
    201a:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    201c:	7990      	ldrb	r0, [r2, #6]
    201e:	4f28      	ldr	r7, [pc, #160]	; (20c0 <hci_cmd_done+0xac>)
{
    2020:	4688      	mov	r8, r1
    2022:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2024:	f010 fe68 	bl	12cf8 <net_buf_pool_get>
    2028:	4287      	cmp	r7, r0
    202a:	d015      	beq.n	2058 <hci_cmd_done+0x44>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    202c:	79ac      	ldrb	r4, [r5, #6]
    202e:	4b25      	ldr	r3, [pc, #148]	; (20c4 <hci_cmd_done+0xb0>)
    2030:	4620      	mov	r0, r4
    2032:	f8d3 8000 	ldr.w	r8, [r3]
    2036:	f010 fe5f 	bl	12cf8 <net_buf_pool_get>
    203a:	4b23      	ldr	r3, [pc, #140]	; (20c8 <hci_cmd_done+0xb4>)
    203c:	9305      	str	r3, [sp, #20]
    203e:	9003      	str	r0, [sp, #12]
    2040:	e88d 0048 	stmia.w	sp, {r3, r6}
    2044:	9704      	str	r7, [sp, #16]
    2046:	9402      	str	r4, [sp, #8]
    2048:	4b20      	ldr	r3, [pc, #128]	; (20cc <hci_cmd_done+0xb8>)
    204a:	4a21      	ldr	r2, [pc, #132]	; (20d0 <hci_cmd_done+0xbc>)
    204c:	4921      	ldr	r1, [pc, #132]	; (20d4 <hci_cmd_done+0xc0>)
    204e:	4822      	ldr	r0, [pc, #136]	; (20d8 <hci_cmd_done+0xc4>)
    2050:	47c0      	blx	r8
}
    2052:	b006      	add	sp, #24
    2054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2058:	4628      	mov	r0, r5
    205a:	f010 fe55 	bl	12d08 <net_buf_id>
    205e:	4c1f      	ldr	r4, [pc, #124]	; (20dc <hci_cmd_done+0xc8>)
    2060:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2064:	8843      	ldrh	r3, [r0, #2]
    2066:	42b3      	cmp	r3, r6
    2068:	d011      	beq.n	208e <hci_cmd_done+0x7a>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    206a:	4b16      	ldr	r3, [pc, #88]	; (20c4 <hci_cmd_done+0xb0>)
    206c:	4628      	mov	r0, r5
    206e:	681f      	ldr	r7, [r3, #0]
    2070:	f010 fe4a 	bl	12d08 <net_buf_id>
    2074:	4b14      	ldr	r3, [pc, #80]	; (20c8 <hci_cmd_done+0xb4>)
    2076:	9303      	str	r3, [sp, #12]
    2078:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    207c:	4915      	ldr	r1, [pc, #84]	; (20d4 <hci_cmd_done+0xc0>)
    207e:	8842      	ldrh	r2, [r0, #2]
    2080:	9202      	str	r2, [sp, #8]
    2082:	e88d 0048 	stmia.w	sp, {r3, r6}
    2086:	4a12      	ldr	r2, [pc, #72]	; (20d0 <hci_cmd_done+0xbc>)
    2088:	4b10      	ldr	r3, [pc, #64]	; (20cc <hci_cmd_done+0xb8>)
    208a:	4815      	ldr	r0, [pc, #84]	; (20e0 <hci_cmd_done+0xcc>)
    208c:	47b8      	blx	r7
	if (cmd(buf)->sync) {
    208e:	4628      	mov	r0, r5
    2090:	f010 fe3a 	bl	12d08 <net_buf_id>
    2094:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2098:	6843      	ldr	r3, [r0, #4]
    209a:	2b00      	cmp	r3, #0
    209c:	d0d9      	beq.n	2052 <hci_cmd_done+0x3e>
		cmd(buf)->status = status;
    209e:	4628      	mov	r0, r5
    20a0:	f010 fe32 	bl	12d08 <net_buf_id>
    20a4:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    20a8:	4628      	mov	r0, r5
    20aa:	f010 fe2d 	bl	12d08 <net_buf_id>
    20ae:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    20b2:	6840      	ldr	r0, [r0, #4]
}
    20b4:	b006      	add	sp, #24
    20b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20ba:	f011 bfed 	b.w	14098 <_impl_k_sem_give>
    20be:	bf00      	nop
    20c0:	20003ff0 	.word	0x20003ff0
    20c4:	20003aa4 	.word	0x20003aa4
    20c8:	00014c55 	.word	0x00014c55
    20cc:	00015291 	.word	0x00015291
    20d0:	00015a0b 	.word	0x00015a0b
    20d4:	00015a12 	.word	0x00015a12
    20d8:	00015a15 	.word	0x00015a15
    20dc:	2000027c 	.word	0x2000027c
    20e0:	00015a5a 	.word	0x00015a5a

000020e4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20e4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20e6:	f3bf 8f5b 	dmb	ish
    20ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    20ee:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    20f2:	f001 011f 	and.w	r1, r1, #31
    20f6:	4108      	asrs	r0, r1
}
    20f8:	f000 0001 	and.w	r0, r0, #1
    20fc:	4770      	bx	lr
	...

00002100 <bt_hci_cmd_create>:
{
    2100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2104:	4680      	mov	r8, r0
    2106:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2108:	4813      	ldr	r0, [pc, #76]	; (2158 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    210a:	4d14      	ldr	r5, [pc, #80]	; (215c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    210c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2110:	f010 fe94 	bl	12e3c <net_buf_alloc_fixed>
    2114:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2116:	f100 0608 	add.w	r6, r0, #8
    211a:	2100      	movs	r1, #0
    211c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    211e:	2700      	movs	r7, #0
    2120:	f010 feab 	bl	12e7a <net_buf_simple_reserve>
    2124:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    2126:	4620      	mov	r0, r4
    2128:	f010 fdee 	bl	12d08 <net_buf_id>
    212c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2130:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2134:	4620      	mov	r0, r4
    2136:	f010 fde7 	bl	12d08 <net_buf_id>
    213a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    213e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2140:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2142:	4630      	mov	r0, r6
    2144:	f010 fee2 	bl	12f0c <net_buf_simple_add>
	hdr->param_len = param_len;
    2148:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    214c:	f8a0 8000 	strh.w	r8, [r0]
}
    2150:	4620      	mov	r0, r4
    2152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2156:	bf00      	nop
    2158:	20003ff0 	.word	0x20003ff0
    215c:	2000027c 	.word	0x2000027c

00002160 <bt_hci_cmd_send_sync>:
{
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
    2162:	4615      	mov	r5, r2
    2164:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    2166:	460c      	mov	r4, r1
    2168:	b919      	cbnz	r1, 2172 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    216a:	f7ff ffc9 	bl	2100 <bt_hci_cmd_create>
		if (!buf) {
    216e:	4604      	mov	r4, r0
    2170:	b368      	cbz	r0, 21ce <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2172:	ae01      	add	r6, sp, #4
    2174:	2201      	movs	r2, #1
    2176:	2100      	movs	r1, #0
    2178:	4630      	mov	r0, r6
    217a:	f011 ff75 	bl	14068 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    217e:	4620      	mov	r0, r4
    2180:	f010 fdc2 	bl	12d08 <net_buf_id>
    2184:	4f13      	ldr	r7, [pc, #76]	; (21d4 <bt_hci_cmd_send_sync+0x74>)
    2186:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    218a:	6046      	str	r6, [r0, #4]
	net_buf_ref(buf);
    218c:	4620      	mov	r0, r4
    218e:	f010 feb9 	bl	12f04 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2192:	4621      	mov	r1, r4
    2194:	4810      	ldr	r0, [pc, #64]	; (21d8 <bt_hci_cmd_send_sync+0x78>)
    2196:	f010 fe74 	bl	12e82 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    219a:	f242 7110 	movw	r1, #10000	; 0x2710
    219e:	4630      	mov	r0, r6
    21a0:	f011 ffa2 	bl	140e8 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    21a4:	4620      	mov	r0, r4
    21a6:	f010 fdaf 	bl	12d08 <net_buf_id>
    21aa:	f817 0030 	ldrb.w	r0, [r7, r0, lsl #3]
    21ae:	b130      	cbz	r0, 21be <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    21b0:	4620      	mov	r0, r4
    21b2:	f010 fe73 	bl	12e9c <net_buf_unref>
		err = -EIO;
    21b6:	f06f 0004 	mvn.w	r0, #4
}
    21ba:	b009      	add	sp, #36	; 0x24
    21bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (rsp) {
    21be:	b10d      	cbz	r5, 21c4 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    21c0:	602c      	str	r4, [r5, #0]
    21c2:	e7fa      	b.n	21ba <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    21c4:	4620      	mov	r0, r4
    21c6:	f010 fe69 	bl	12e9c <net_buf_unref>
		err = 0;
    21ca:	4628      	mov	r0, r5
    21cc:	e7f5      	b.n	21ba <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    21ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
    21d2:	e7f2      	b.n	21ba <bt_hci_cmd_send_sync+0x5a>
    21d4:	2000027c 	.word	0x2000027c
    21d8:	20003b70 	.word	0x20003b70

000021dc <set_le_scan_enable>:
{
    21dc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21de:	2102      	movs	r1, #2
{
    21e0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    21e2:	f242 000c 	movw	r0, #8204	; 0x200c
    21e6:	f7ff ff8b 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    21ea:	4604      	mov	r4, r0
    21ec:	b330      	cbz	r0, 223c <set_le_scan_enable+0x60>
	cp = net_buf_add(buf, sizeof(*cp));
    21ee:	2102      	movs	r1, #2
    21f0:	3008      	adds	r0, #8
    21f2:	f010 fe8b 	bl	12f0c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21f6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    21f8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    21fa:	d116      	bne.n	222a <set_le_scan_enable+0x4e>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    21fc:	210b      	movs	r1, #11
    21fe:	4811      	ldr	r0, [pc, #68]	; (2244 <set_le_scan_enable+0x68>)
    2200:	f7ff ff70 	bl	20e4 <atomic_test_bit>
    2204:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2206:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2208:	4621      	mov	r1, r4
    220a:	2200      	movs	r2, #0
    220c:	f242 000c 	movw	r0, #8204	; 0x200c
    2210:	f7ff ffa6 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2214:	4604      	mov	r4, r0
    2216:	b930      	cbnz	r0, 2226 <set_le_scan_enable+0x4a>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2218:	2d01      	cmp	r5, #1
    221a:	d109      	bne.n	2230 <set_le_scan_enable+0x54>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    221c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2220:	4808      	ldr	r0, [pc, #32]	; (2244 <set_le_scan_enable+0x68>)
    2222:	f7ff fec6 	bl	1fb2 <atomic_or>
}
    2226:	4620      	mov	r0, r4
    2228:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    222a:	2300      	movs	r3, #0
    222c:	7043      	strb	r3, [r0, #1]
    222e:	e7ea      	b.n	2206 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2230:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2234:	4803      	ldr	r0, [pc, #12]	; (2244 <set_le_scan_enable+0x68>)
    2236:	f7ff fecd 	bl	1fd4 <atomic_and>
    223a:	e7f4      	b.n	2226 <set_le_scan_enable+0x4a>
		return -ENOBUFS;
    223c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2240:	e7f1      	b.n	2226 <set_le_scan_enable+0x4a>
    2242:	bf00      	nop
    2244:	20003b18 	.word	0x20003b18

00002248 <set_random_address>:
{
    2248:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    224a:	4d15      	ldr	r5, [pc, #84]	; (22a0 <set_random_address+0x58>)
    224c:	2206      	movs	r2, #6
    224e:	f105 0108 	add.w	r1, r5, #8
    2252:	4606      	mov	r6, r0
    2254:	f7ff fccf 	bl	1bf6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2258:	4604      	mov	r4, r0
    225a:	b1d8      	cbz	r0, 2294 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    225c:	2106      	movs	r1, #6
    225e:	f242 0005 	movw	r0, #8197	; 0x2005
    2262:	f7ff ff4d 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2266:	4604      	mov	r4, r0
    2268:	b1b0      	cbz	r0, 2298 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    226a:	2206      	movs	r2, #6
    226c:	4631      	mov	r1, r6
    226e:	3008      	adds	r0, #8
    2270:	f010 fe52 	bl	12f18 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2274:	4621      	mov	r1, r4
    2276:	2200      	movs	r2, #0
    2278:	f242 0005 	movw	r0, #8197	; 0x2005
    227c:	f7ff ff70 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2280:	4604      	mov	r4, r0
    2282:	b938      	cbnz	r0, 2294 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2284:	2206      	movs	r2, #6
    2286:	4631      	mov	r1, r6
    2288:	f105 0008 	add.w	r0, r5, #8
    228c:	f7ff fcc8 	bl	1c20 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2290:	2301      	movs	r3, #1
    2292:	71eb      	strb	r3, [r5, #7]
}
    2294:	4620      	mov	r0, r4
    2296:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2298:	f06f 0436 	mvn.w	r4, #54	; 0x36
    229c:	e7fa      	b.n	2294 <set_random_address+0x4c>
    229e:	bf00      	nop
    22a0:	20003aa8 	.word	0x20003aa8

000022a4 <le_set_private_addr>:
{
    22a4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    22a6:	2106      	movs	r1, #6
    22a8:	4668      	mov	r0, sp
    22aa:	f005 fde5 	bl	7e78 <bt_rand>
	if (err) {
    22ae:	b940      	cbnz	r0, 22c2 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    22b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22b4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    22b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22ba:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22be:	f7ff ffc3 	bl	2248 <set_random_address>
}
    22c2:	b003      	add	sp, #12
    22c4:	f85d fb04 	ldr.w	pc, [sp], #4

000022c8 <set_advertise_enable>:
{
    22c8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22ca:	2101      	movs	r1, #1
{
    22cc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22ce:	f242 000a 	movw	r0, #8202	; 0x200a
    22d2:	f7ff ff15 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    22d6:	4604      	mov	r4, r0
    22d8:	b1d8      	cbz	r0, 2312 <set_advertise_enable+0x4a>
    22da:	3008      	adds	r0, #8
	if (enable) {
    22dc:	b18d      	cbz	r5, 2302 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    22de:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22e0:	f010 fe23 	bl	12f2a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22e4:	4621      	mov	r1, r4
    22e6:	2200      	movs	r2, #0
    22e8:	f242 000a 	movw	r0, #8202	; 0x200a
    22ec:	f7ff ff38 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    22f0:	4604      	mov	r4, r0
    22f2:	b920      	cbnz	r0, 22fe <set_advertise_enable+0x36>
	if (enable) {
    22f4:	b13d      	cbz	r5, 2306 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22f6:	2140      	movs	r1, #64	; 0x40
    22f8:	4807      	ldr	r0, [pc, #28]	; (2318 <set_advertise_enable+0x50>)
    22fa:	f7ff fe5a 	bl	1fb2 <atomic_or>
}
    22fe:	4620      	mov	r0, r4
    2300:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2302:	4629      	mov	r1, r5
    2304:	e7ec      	b.n	22e0 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2306:	f06f 0140 	mvn.w	r1, #64	; 0x40
    230a:	4803      	ldr	r0, [pc, #12]	; (2318 <set_advertise_enable+0x50>)
    230c:	f7ff fe62 	bl	1fd4 <atomic_and>
    2310:	e7f5      	b.n	22fe <set_advertise_enable+0x36>
		return -ENOBUFS;
    2312:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2316:	e7f2      	b.n	22fe <set_advertise_enable+0x36>
    2318:	20003b18 	.word	0x20003b18

0000231c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    231c:	8802      	ldrh	r2, [r0, #0]
    231e:	8843      	ldrh	r3, [r0, #2]
    2320:	429a      	cmp	r2, r3
{
    2322:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2324:	d818      	bhi.n	2358 <bt_le_conn_params_valid+0x3c>
    2326:	2a05      	cmp	r2, #5
    2328:	d916      	bls.n	2358 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    232a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    232e:	d813      	bhi.n	2358 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2330:	8884      	ldrh	r4, [r0, #4]
    2332:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2336:	d20f      	bcs.n	2358 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2338:	88c1      	ldrh	r1, [r0, #6]
    233a:	f1a1 020a 	sub.w	r2, r1, #10
    233e:	b292      	uxth	r2, r2
    2340:	f640 4076 	movw	r0, #3190	; 0xc76
    2344:	4282      	cmp	r2, r0
    2346:	d807      	bhi.n	2358 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2348:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    234c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2350:	bfb4      	ite	lt
    2352:	2001      	movlt	r0, #1
    2354:	2000      	movge	r0, #0
    2356:	bd10      	pop	{r4, pc}
		return false;
    2358:	2000      	movs	r0, #0
}
    235a:	bd10      	pop	{r4, pc}

0000235c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    235c:	2301      	movs	r3, #1
{
    235e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2360:	2106      	movs	r1, #6
{
    2362:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2364:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2368:	f005 fd86 	bl	7e78 <bt_rand>
	if (err) {
    236c:	b918      	cbnz	r0, 2376 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    236e:	79a3      	ldrb	r3, [r4, #6]
    2370:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2374:	71a3      	strb	r3, [r4, #6]
}
    2376:	bd10      	pop	{r4, pc}

00002378 <bt_set_static_addr>:
{
    2378:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    237a:	4c12      	ldr	r4, [pc, #72]	; (23c4 <bt_set_static_addr+0x4c>)
    237c:	7823      	ldrb	r3, [r4, #0]
    237e:	2b01      	cmp	r3, #1
    2380:	d104      	bne.n	238c <bt_set_static_addr+0x14>
    2382:	79a3      	ldrb	r3, [r4, #6]
    2384:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2388:	2bc0      	cmp	r3, #192	; 0xc0
    238a:	d00e      	beq.n	23aa <bt_set_static_addr+0x32>
		BT_ERR("Only static random address supported as identity");
    238c:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <bt_set_static_addr+0x50>)
    238e:	9301      	str	r3, [sp, #4]
    2390:	9300      	str	r3, [sp, #0]
    2392:	4b0e      	ldr	r3, [pc, #56]	; (23cc <bt_set_static_addr+0x54>)
    2394:	4a0e      	ldr	r2, [pc, #56]	; (23d0 <bt_set_static_addr+0x58>)
    2396:	681c      	ldr	r4, [r3, #0]
    2398:	490e      	ldr	r1, [pc, #56]	; (23d4 <bt_set_static_addr+0x5c>)
    239a:	4b0f      	ldr	r3, [pc, #60]	; (23d8 <bt_set_static_addr+0x60>)
    239c:	480f      	ldr	r0, [pc, #60]	; (23dc <bt_set_static_addr+0x64>)
    239e:	47a0      	blx	r4
    23a0:	f06f 0515 	mvn.w	r5, #21
}
    23a4:	4628      	mov	r0, r5
    23a6:	b003      	add	sp, #12
    23a8:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    23aa:	1c60      	adds	r0, r4, #1
    23ac:	f7ff ff4c 	bl	2248 <set_random_address>
	if (err) {
    23b0:	4605      	mov	r5, r0
    23b2:	2800      	cmp	r0, #0
    23b4:	d1f6      	bne.n	23a4 <bt_set_static_addr+0x2c>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    23b6:	2104      	movs	r1, #4
    23b8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    23bc:	f7ff fdf9 	bl	1fb2 <atomic_or>
	return 0;
    23c0:	e7f0      	b.n	23a4 <bt_set_static_addr+0x2c>
    23c2:	bf00      	nop
    23c4:	20003aa8 	.word	0x20003aa8
    23c8:	00014c55 	.word	0x00014c55
    23cc:	20003aa4 	.word	0x20003aa4
    23d0:	000159c3 	.word	0x000159c3
    23d4:	00015a12 	.word	0x00015a12
    23d8:	000152e8 	.word	0x000152e8
    23dc:	000159ca 	.word	0x000159ca

000023e0 <bt_dev_show_info>:

void bt_dev_show_info(void)
{
    23e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23e4:	4d20      	ldr	r5, [pc, #128]	; (2468 <bt_dev_show_info+0x88>)
    23e6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2484 <bt_dev_show_info+0xa4>
    23ea:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2488 <bt_dev_show_info+0xa8>
    23ee:	f8d9 a000 	ldr.w	sl, [r9]
    23f2:	4f1e      	ldr	r7, [pc, #120]	; (246c <bt_dev_show_info+0x8c>)
    23f4:	4e1e      	ldr	r6, [pc, #120]	; (2470 <bt_dev_show_info+0x90>)
    23f6:	4c1f      	ldr	r4, [pc, #124]	; (2474 <bt_dev_show_info+0x94>)
{
    23f8:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    23fa:	4628      	mov	r0, r5
    23fc:	f7ff fcbc 	bl	1d78 <bt_addr_le_str>
    2400:	4643      	mov	r3, r8
    2402:	463a      	mov	r2, r7
    2404:	4631      	mov	r1, r6
    2406:	9001      	str	r0, [sp, #4]
    2408:	9402      	str	r4, [sp, #8]
    240a:	9400      	str	r4, [sp, #0]
    240c:	481a      	ldr	r0, [pc, #104]	; (2478 <bt_dev_show_info+0x98>)
    240e:	47d0      	blx	sl
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2410:	f895 a00e 	ldrb.w	sl, [r5, #14]
    2414:	f8d9 b000 	ldr.w	fp, [r9]
    2418:	4650      	mov	r0, sl
    241a:	f7ff fdab 	bl	1f74 <ver_str>
    241e:	8aab      	ldrh	r3, [r5, #20]
    2420:	9304      	str	r3, [sp, #16]
    2422:	8a2b      	ldrh	r3, [r5, #16]
    2424:	9303      	str	r3, [sp, #12]
    2426:	463a      	mov	r2, r7
    2428:	4643      	mov	r3, r8
    242a:	4631      	mov	r1, r6
    242c:	f8cd a008 	str.w	sl, [sp, #8]
    2430:	9001      	str	r0, [sp, #4]
    2432:	9405      	str	r4, [sp, #20]
    2434:	9400      	str	r4, [sp, #0]
    2436:	4811      	ldr	r0, [pc, #68]	; (247c <bt_dev_show_info+0x9c>)
    2438:	47d8      	blx	fp
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    243a:	f8d9 a000 	ldr.w	sl, [r9]
    243e:	f895 900f 	ldrb.w	r9, [r5, #15]
    2442:	4648      	mov	r0, r9
    2444:	f7ff fd96 	bl	1f74 <ver_str>
    2448:	8a6b      	ldrh	r3, [r5, #18]
    244a:	9303      	str	r3, [sp, #12]
    244c:	9001      	str	r0, [sp, #4]
    244e:	9404      	str	r4, [sp, #16]
    2450:	f8cd 9008 	str.w	r9, [sp, #8]
    2454:	9400      	str	r4, [sp, #0]
    2456:	4643      	mov	r3, r8
    2458:	463a      	mov	r2, r7
    245a:	4631      	mov	r1, r6
    245c:	4808      	ldr	r0, [pc, #32]	; (2480 <bt_dev_show_info+0xa0>)
    245e:	47d0      	blx	sl
		ver_str(bt_dev.lmp_version), bt_dev.lmp_version,
		bt_dev.lmp_subversion);
}
    2460:	b007      	add	sp, #28
    2462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2466:	bf00      	nop
    2468:	20003aa8 	.word	0x20003aa8
    246c:	0001534e 	.word	0x0001534e
    2470:	00015a12 	.word	0x00015a12
    2474:	00014c55 	.word	0x00014c55
    2478:	00015355 	.word	0x00015355
    247c:	00015372 	.word	0x00015372
    2480:	000153c0 	.word	0x000153c0
    2484:	20003aa4 	.word	0x20003aa4
    2488:	00015309 	.word	0x00015309

0000248c <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    248c:	4b02      	ldr	r3, [pc, #8]	; (2498 <bt_send+0xc>)
    248e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    2492:	691b      	ldr	r3, [r3, #16]
    2494:	4718      	bx	r3
    2496:	bf00      	nop
    2498:	20003aa8 	.word	0x20003aa8

0000249c <bt_hci_cmd_send>:
{
    249c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    249e:	4604      	mov	r4, r0
	if (!buf) {
    24a0:	460d      	mov	r5, r1
    24a2:	b919      	cbnz	r1, 24ac <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    24a4:	f7ff fe2c 	bl	2100 <bt_hci_cmd_create>
		if (!buf) {
    24a8:	4605      	mov	r5, r0
    24aa:	b1f8      	cbz	r0, 24ec <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    24ac:	f640 4335 	movw	r3, #3125	; 0xc35
    24b0:	429c      	cmp	r4, r3
    24b2:	d115      	bne.n	24e0 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    24b4:	4628      	mov	r0, r5
    24b6:	f7ff ffe9 	bl	248c <bt_send>
		if (err) {
    24ba:	4604      	mov	r4, r0
    24bc:	b168      	cbz	r0, 24da <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    24be:	4b0d      	ldr	r3, [pc, #52]	; (24f4 <bt_hci_cmd_send+0x58>)
    24c0:	9302      	str	r3, [sp, #8]
    24c2:	e88d 0018 	stmia.w	sp, {r3, r4}
    24c6:	4b0c      	ldr	r3, [pc, #48]	; (24f8 <bt_hci_cmd_send+0x5c>)
    24c8:	480c      	ldr	r0, [pc, #48]	; (24fc <bt_hci_cmd_send+0x60>)
    24ca:	681e      	ldr	r6, [r3, #0]
    24cc:	4a0c      	ldr	r2, [pc, #48]	; (2500 <bt_hci_cmd_send+0x64>)
    24ce:	4b0d      	ldr	r3, [pc, #52]	; (2504 <bt_hci_cmd_send+0x68>)
    24d0:	490d      	ldr	r1, [pc, #52]	; (2508 <bt_hci_cmd_send+0x6c>)
    24d2:	47b0      	blx	r6
			net_buf_unref(buf);
    24d4:	4628      	mov	r0, r5
    24d6:	f010 fce1 	bl	12e9c <net_buf_unref>
}
    24da:	4620      	mov	r0, r4
    24dc:	b004      	add	sp, #16
    24de:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    24e0:	4629      	mov	r1, r5
    24e2:	480a      	ldr	r0, [pc, #40]	; (250c <bt_hci_cmd_send+0x70>)
    24e4:	f010 fccd 	bl	12e82 <net_buf_put>
	return 0;
    24e8:	2400      	movs	r4, #0
    24ea:	e7f6      	b.n	24da <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    24ec:	f06f 0436 	mvn.w	r4, #54	; 0x36
    24f0:	e7f3      	b.n	24da <bt_hci_cmd_send+0x3e>
    24f2:	bf00      	nop
    24f4:	00014c55 	.word	0x00014c55
    24f8:	20003aa4 	.word	0x20003aa4
    24fc:	0001544c 	.word	0x0001544c
    2500:	000159c3 	.word	0x000159c3
    2504:	000151c9 	.word	0x000151c9
    2508:	00015a12 	.word	0x00015a12
    250c:	20003b70 	.word	0x20003b70

00002510 <start_le_scan>:
{
    2510:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2512:	4605      	mov	r5, r0
    2514:	460e      	mov	r6, r1
    2516:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    2518:	2100      	movs	r1, #0
    251a:	2207      	movs	r2, #7
    251c:	4668      	mov	r0, sp
    251e:	f7ff fbab 	bl	1c78 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    2522:	4821      	ldr	r0, [pc, #132]	; (25a8 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    2524:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    2528:	2300      	movs	r3, #0
    252a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    252e:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    2530:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2532:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    2536:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    253a:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    253e:	d10a      	bne.n	2556 <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2540:	2106      	movs	r1, #6
    2542:	3070      	adds	r0, #112	; 0x70
    2544:	f7ff fdce 	bl	20e4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2548:	b928      	cbnz	r0, 2556 <start_le_scan+0x46>
			err = le_set_private_addr();
    254a:	f7ff feab 	bl	22a4 <le_set_private_addr>
			if (err) {
    254e:	4604      	mov	r4, r0
    2550:	b9f0      	cbnz	r0, 2590 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2552:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2556:	2107      	movs	r1, #7
    2558:	f242 000b 	movw	r0, #8203	; 0x200b
    255c:	f7ff fdd0 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2560:	4604      	mov	r4, r0
    2562:	b1f0      	cbz	r0, 25a2 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2564:	2207      	movs	r2, #7
    2566:	4669      	mov	r1, sp
    2568:	3008      	adds	r0, #8
    256a:	f010 fcd5 	bl	12f18 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    256e:	4621      	mov	r1, r4
    2570:	f242 000b 	movw	r0, #8203	; 0x200b
    2574:	f7ff ff92 	bl	249c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2578:	2001      	movs	r0, #1
    257a:	f7ff fe2f 	bl	21dc <set_le_scan_enable>
	if (err) {
    257e:	4604      	mov	r4, r0
    2580:	b930      	cbnz	r0, 2590 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2582:	2d01      	cmp	r5, #1
    2584:	d107      	bne.n	2596 <start_le_scan+0x86>
    2586:	f44f 6180 	mov.w	r1, #1024	; 0x400
    258a:	4808      	ldr	r0, [pc, #32]	; (25ac <start_le_scan+0x9c>)
    258c:	f7ff fd11 	bl	1fb2 <atomic_or>
}
    2590:	4620      	mov	r0, r4
    2592:	b002      	add	sp, #8
    2594:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2596:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    259a:	4804      	ldr	r0, [pc, #16]	; (25ac <start_le_scan+0x9c>)
    259c:	f7ff fd1a 	bl	1fd4 <atomic_and>
    25a0:	e7f6      	b.n	2590 <start_le_scan+0x80>
		return -ENOBUFS;
    25a2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    25a6:	e7f3      	b.n	2590 <start_le_scan+0x80>
    25a8:	20003aa8 	.word	0x20003aa8
    25ac:	20003b18 	.word	0x20003b18

000025b0 <bt_le_scan_update>:
{
    25b0:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    25b2:	2109      	movs	r1, #9
{
    25b4:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    25b6:	4816      	ldr	r0, [pc, #88]	; (2610 <bt_le_scan_update+0x60>)
    25b8:	f7ff fd94 	bl	20e4 <atomic_test_bit>
    25bc:	4602      	mov	r2, r0
    25be:	b108      	cbz	r0, 25c4 <bt_le_scan_update+0x14>
		return 0;
    25c0:	2000      	movs	r0, #0
    25c2:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    25c4:	2108      	movs	r1, #8
    25c6:	4812      	ldr	r0, [pc, #72]	; (2610 <bt_le_scan_update+0x60>)
    25c8:	f7ff fd8c 	bl	20e4 <atomic_test_bit>
    25cc:	b9d0      	cbnz	r0, 2604 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    25ce:	2101      	movs	r1, #1
    25d0:	2000      	movs	r0, #0
    25d2:	f001 fe97 	bl	4304 <bt_conn_lookup_state_le>
		if (!conn) {
    25d6:	4604      	mov	r4, r0
    25d8:	2800      	cmp	r0, #0
    25da:	d0f1      	beq.n	25c0 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    25dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    25e0:	480b      	ldr	r0, [pc, #44]	; (2610 <bt_le_scan_update+0x60>)
    25e2:	f7ff fce6 	bl	1fb2 <atomic_or>
		bt_conn_unref(conn);
    25e6:	4620      	mov	r0, r4
    25e8:	f001 feaa 	bl	4340 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    25ec:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    25ee:	bf15      	itete	ne
    25f0:	2230      	movne	r2, #48	; 0x30
    25f2:	2212      	moveq	r2, #18
    25f4:	2160      	movne	r1, #96	; 0x60
    25f6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    25fa:	2000      	movs	r0, #0
}
    25fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    2600:	f7ff bf86 	b.w	2510 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2604:	4610      	mov	r0, r2
    2606:	f7ff fde9 	bl	21dc <set_le_scan_enable>
		if (err) {
    260a:	2800      	cmp	r0, #0
    260c:	d0df      	beq.n	25ce <bt_le_scan_update+0x1e>
    260e:	bd38      	pop	{r3, r4, r5, pc}
    2610:	20003b18 	.word	0x20003b18

00002614 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    2614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2618:	4d4e      	ldr	r5, [pc, #312]	; (2754 <bt_init+0x140>)
    261a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    261e:	6899      	ldr	r1, [r3, #8]
    2620:	f011 0101 	ands.w	r1, r1, #1
{
    2624:	b08e      	sub	sp, #56	; 0x38
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    2626:	d124      	bne.n	2672 <bt_init+0x5e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2628:	aa0c      	add	r2, sp, #48	; 0x30
    262a:	f640 4003 	movw	r0, #3075	; 0xc03
    262e:	f7ff fd97 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    2632:	4604      	mov	r4, r0
    2634:	2800      	cmp	r0, #0
    2636:	f040 8089 	bne.w	274c <bt_init+0x138>
	u8_t status = buf->data[0];
    263a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    263c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	b9a3      	cbnz	r3, 266c <bt_init+0x58>
	scan_dev_found_cb = NULL;
    2642:	4a45      	ldr	r2, [pc, #276]	; (2758 <bt_init+0x144>)
    2644:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2646:	462b      	mov	r3, r5
    2648:	f3bf 8f5b 	dmb	ish
    264c:	f853 2f70 	ldr.w	r2, [r3, #112]!
    2650:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    2654:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2658:	f3bf 8f5b 	dmb	ish
    265c:	e853 1f00 	ldrex	r1, [r3]
    2660:	e843 2000 	strex	r0, r2, [r3]
    2664:	2800      	cmp	r0, #0
    2666:	d1f9      	bne.n	265c <bt_init+0x48>
    2668:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    266c:	980c      	ldr	r0, [sp, #48]	; 0x30
    266e:	f010 fc15 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2672:	aa0c      	add	r2, sp, #48	; 0x30
    2674:	2100      	movs	r1, #0
    2676:	f241 0003 	movw	r0, #4099	; 0x1003
    267a:	f7ff fd71 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    267e:	4604      	mov	r4, r0
    2680:	2800      	cmp	r0, #0
    2682:	d163      	bne.n	274c <bt_init+0x138>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2686:	4835      	ldr	r0, [pc, #212]	; (275c <bt_init+0x148>)
    2688:	6899      	ldr	r1, [r3, #8]
    268a:	2208      	movs	r2, #8
    268c:	3101      	adds	r1, #1
    268e:	f7ff fac7 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2692:	980c      	ldr	r0, [sp, #48]	; 0x30
    2694:	f010 fc02 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2698:	4621      	mov	r1, r4
    269a:	aa0c      	add	r2, sp, #48	; 0x30
    269c:	f241 0001 	movw	r0, #4097	; 0x1001
    26a0:	f7ff fd5e 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    26a4:	4604      	mov	r4, r0
    26a6:	2800      	cmp	r0, #0
    26a8:	d150      	bne.n	274c <bt_init+0x138>
	read_local_ver_complete(rsp);
    26aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    26ac:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    26ae:	785a      	ldrb	r2, [r3, #1]
    26b0:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    26b2:	78d9      	ldrb	r1, [r3, #3]
    26b4:	789a      	ldrb	r2, [r3, #2]
    26b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    26ba:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    26bc:	791a      	ldrb	r2, [r3, #4]
    26be:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    26c0:	7a19      	ldrb	r1, [r3, #8]
    26c2:	79da      	ldrb	r2, [r3, #7]
    26c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    26c8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    26ca:	795a      	ldrb	r2, [r3, #5]
    26cc:	799b      	ldrb	r3, [r3, #6]
    26ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    26d2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    26d4:	f010 fbe2 	bl	12e9c <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    26d8:	2103      	movs	r1, #3
    26da:	4821      	ldr	r0, [pc, #132]	; (2760 <bt_init+0x14c>)
    26dc:	f7ff fd02 	bl	20e4 <atomic_test_bit>
    26e0:	4601      	mov	r1, r0
    26e2:	b990      	cbnz	r0, 270a <bt_init+0xf6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    26e4:	aa0c      	add	r2, sp, #48	; 0x30
    26e6:	f241 0009 	movw	r0, #4105	; 0x1009
    26ea:	f7ff fd39 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    26ee:	4604      	mov	r4, r0
    26f0:	2800      	cmp	r0, #0
    26f2:	d12b      	bne.n	274c <bt_init+0x138>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    26f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    26f6:	481b      	ldr	r0, [pc, #108]	; (2764 <bt_init+0x150>)
    26f8:	6899      	ldr	r1, [r3, #8]
    26fa:	2206      	movs	r2, #6
    26fc:	3101      	adds	r1, #1
    26fe:	f7ff fa8f 	bl	1c20 <memcpy>
		net_buf_unref(rsp);
    2702:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2704:	702c      	strb	r4, [r5, #0]
		net_buf_unref(rsp);
    2706:	f010 fbc9 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    270a:	aa0c      	add	r2, sp, #48	; 0x30
    270c:	2100      	movs	r1, #0
    270e:	f241 0002 	movw	r0, #4098	; 0x1002
    2712:	f7ff fd25 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2716:	4604      	mov	r4, r0
    2718:	b9c0      	cbnz	r0, 274c <bt_init+0x138>
	memcpy(bt_dev.supported_commands, rp->commands,
    271a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    271c:	4812      	ldr	r0, [pc, #72]	; (2768 <bt_init+0x154>)
    271e:	6899      	ldr	r1, [r3, #8]
    2720:	2240      	movs	r2, #64	; 0x40
    2722:	3101      	adds	r1, #1
    2724:	f7ff fa7c 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2728:	980c      	ldr	r0, [sp, #48]	; 0x30
    272a:	f010 fbb7 	bl	12e9c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    272e:	7eab      	ldrb	r3, [r5, #26]
    2730:	065a      	lsls	r2, r3, #25
    2732:	d427      	bmi.n	2784 <bt_init+0x170>
		BT_ERR("Non-LE capable controller detected!");
    2734:	4b0d      	ldr	r3, [pc, #52]	; (276c <bt_init+0x158>)
    2736:	9301      	str	r3, [sp, #4]
    2738:	9300      	str	r3, [sp, #0]
    273a:	4b0d      	ldr	r3, [pc, #52]	; (2770 <bt_init+0x15c>)
    273c:	4a0d      	ldr	r2, [pc, #52]	; (2774 <bt_init+0x160>)
    273e:	681c      	ldr	r4, [r3, #0]
    2740:	490d      	ldr	r1, [pc, #52]	; (2778 <bt_init+0x164>)
    2742:	4b0e      	ldr	r3, [pc, #56]	; (277c <bt_init+0x168>)
    2744:	480e      	ldr	r0, [pc, #56]	; (2780 <bt_init+0x16c>)
    2746:	47a0      	blx	r4
		return -ENODEV;
    2748:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    274c:	4620      	mov	r0, r4
    274e:	b00e      	add	sp, #56	; 0x38
    2750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2754:	20003aa8 	.word	0x20003aa8
    2758:	200002d8 	.word	0x200002d8
    275c:	20003abe 	.word	0x20003abe
    2760:	20003b18 	.word	0x20003b18
    2764:	20003aa9 	.word	0x20003aa9
    2768:	20003ac6 	.word	0x20003ac6
    276c:	00014c55 	.word	0x00014c55
    2770:	20003aa4 	.word	0x20003aa4
    2774:	000159c3 	.word	0x000159c3
    2778:	00015a12 	.word	0x00015a12
    277c:	000152e0 	.word	0x000152e0
    2780:	0001547e 	.word	0x0001547e
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2784:	4621      	mov	r1, r4
    2786:	aa0c      	add	r2, sp, #48	; 0x30
    2788:	f242 0003 	movw	r0, #8195	; 0x2003
    278c:	f7ff fce8 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2790:	4604      	mov	r4, r0
    2792:	2800      	cmp	r0, #0
    2794:	d1da      	bne.n	274c <bt_init+0x138>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2798:	489c      	ldr	r0, [pc, #624]	; (2a0c <bt_init+0x3f8>)
    279a:	6899      	ldr	r1, [r3, #8]
    279c:	2208      	movs	r2, #8
    279e:	3101      	adds	r1, #1
    27a0:	f7ff fa3e 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    27a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    27a6:	f010 fb79 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    27aa:	4621      	mov	r1, r4
    27ac:	aa0c      	add	r2, sp, #48	; 0x30
    27ae:	f242 0002 	movw	r0, #8194	; 0x2002
    27b2:	f7ff fcd5 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    27b6:	4604      	mov	r4, r0
    27b8:	2800      	cmp	r0, #0
    27ba:	d1c7      	bne.n	274c <bt_init+0x138>
    27bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27be:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    27c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    27c4:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    27c8:	b13a      	cbz	r2, 27da <bt_init+0x1c6>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    27ca:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    27cc:	4890      	ldr	r0, [pc, #576]	; (2a10 <bt_init+0x3fc>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    27ce:	2a02      	cmp	r2, #2
    27d0:	bf28      	it	cs
    27d2:	2202      	movcs	r2, #2
    27d4:	4611      	mov	r1, r2
    27d6:	f011 fc47 	bl	14068 <_impl_k_sem_init>
	net_buf_unref(rsp);
    27da:	980c      	ldr	r0, [sp, #48]	; 0x30
    27dc:	f010 fb5e 	bl	12e9c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    27e0:	7eac      	ldrb	r4, [r5, #26]
    27e2:	f014 0420 	ands.w	r4, r4, #32
    27e6:	f000 80c9 	beq.w	297c <bt_init+0x368>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    27ea:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    27ee:	071b      	lsls	r3, r3, #28
    27f0:	d513      	bpl.n	281a <bt_init+0x206>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    27f2:	aa0c      	add	r2, sp, #48	; 0x30
    27f4:	2100      	movs	r1, #0
    27f6:	f242 001c 	movw	r0, #8220	; 0x201c
    27fa:	f7ff fcb1 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    27fe:	4604      	mov	r4, r0
    2800:	2800      	cmp	r0, #0
    2802:	d1a3      	bne.n	274c <bt_init+0x138>
		le_read_supp_states_complete(rsp);
    2804:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2806:	6883      	ldr	r3, [r0, #8]
    2808:	f853 2f01 	ldr.w	r2, [r3, #1]!
    280c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    280e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2812:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2816:	f010 fb41 	bl	12e9c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    281a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    281e:	069f      	lsls	r7, r3, #26
    2820:	f100 80c8 	bmi.w	29b4 <bt_init+0x3a0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2824:	2108      	movs	r1, #8
    2826:	f242 0001 	movw	r0, #8193	; 0x2001
    282a:	f7ff fc69 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    282e:	4604      	mov	r4, r0
    2830:	2800      	cmp	r0, #0
    2832:	f000 80aa 	beq.w	298a <bt_init+0x376>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2836:	2108      	movs	r1, #8
    2838:	4408      	add	r0, r1
    283a:	f010 fb67 	bl	12f0c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    283e:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    2842:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2844:	bf4c      	ite	mi
    2846:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2848:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    284a:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    284c:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2850:	bf48      	it	mi
    2852:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2856:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    285a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    285e:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2862:	bf18      	it	ne
    2864:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2868:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    286a:	bf08      	it	eq
    286c:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    2870:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    2872:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2876:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    2878:	2200      	movs	r2, #0
    287a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    287c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    287e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2880:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2882:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2884:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2886:	4621      	mov	r1, r4
    2888:	f242 0001 	movw	r0, #8193	; 0x2001
    288c:	f7ff fc68 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2890:	4604      	mov	r4, r0
    2892:	2800      	cmp	r0, #0
    2894:	f47f af5a 	bne.w	274c <bt_init+0x138>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2898:	7eab      	ldrb	r3, [r5, #26]
    289a:	069a      	lsls	r2, r3, #26
    289c:	d421      	bmi.n	28e2 <bt_init+0x2ce>
	if (bt_dev.le.mtu) {
    289e:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    28a2:	b9f1      	cbnz	r1, 28e2 <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    28a4:	aa0c      	add	r2, sp, #48	; 0x30
    28a6:	f241 0005 	movw	r0, #4101	; 0x1005
    28aa:	f7ff fc59 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    28ae:	4604      	mov	r4, r0
    28b0:	2800      	cmp	r0, #0
    28b2:	f47f af4b 	bne.w	274c <bt_init+0x138>
	if (bt_dev.le.mtu) {
    28b6:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    28ba:	b97b      	cbnz	r3, 28dc <bt_init+0x2c8>
    28bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28be:	4854      	ldr	r0, [pc, #336]	; (2a10 <bt_init+0x3fc>)
    28c0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    28c2:	7899      	ldrb	r1, [r3, #2]
    28c4:	785a      	ldrb	r2, [r3, #1]
    28c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    28ca:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    28ce:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    28d0:	2a02      	cmp	r2, #2
    28d2:	bf28      	it	cs
    28d4:	2202      	movcs	r2, #2
    28d6:	4611      	mov	r1, r2
    28d8:	f011 fbc6 	bl	14068 <_impl_k_sem_init>
	net_buf_unref(rsp);
    28dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    28de:	f010 fadd 	bl	12e9c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    28e2:	2108      	movs	r1, #8
    28e4:	f640 4001 	movw	r0, #3073	; 0xc01
    28e8:	f7ff fc0a 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    28ec:	4604      	mov	r4, r0
    28ee:	2800      	cmp	r0, #0
    28f0:	d04b      	beq.n	298a <bt_init+0x376>
	ev = net_buf_add(buf, sizeof(*ev));
    28f2:	2108      	movs	r1, #8
    28f4:	4408      	add	r0, r1
    28f6:	f010 fb09 	bl	12f0c <net_buf_simple_add>
	dst[0] = val;
    28fa:	2310      	movs	r3, #16
    28fc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    28fe:	2388      	movs	r3, #136	; 0x88
    2900:	7043      	strb	r3, [r0, #1]
    2902:	2302      	movs	r3, #2
	dst[0] = val;
    2904:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    2906:	70c3      	strb	r3, [r0, #3]
    2908:	2320      	movs	r3, #32
	dst[0] = val;
    290a:	7082      	strb	r2, [r0, #2]
    290c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    290e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2910:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2912:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2914:	4621      	mov	r1, r4
    2916:	f640 4001 	movw	r0, #3073	; 0xc01
    291a:	f7ff fc21 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    291e:	4604      	mov	r4, r0
    2920:	2800      	cmp	r0, #0
    2922:	f47f af13 	bne.w	274c <bt_init+0x138>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2926:	4601      	mov	r1, r0
    2928:	aa0c      	add	r2, sp, #48	; 0x30
    292a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    292e:	f7ff fc17 	bl	2160 <bt_hci_cmd_send_sync>
    2932:	4f38      	ldr	r7, [pc, #224]	; (2a14 <bt_init+0x400>)
    2934:	4e38      	ldr	r6, [pc, #224]	; (2a18 <bt_init+0x404>)
	if (err) {
    2936:	2800      	cmp	r0, #0
    2938:	d07e      	beq.n	2a38 <bt_init+0x424>
		BT_WARN("Vendor HCI extensions not available");
    293a:	9601      	str	r6, [sp, #4]
    293c:	9600      	str	r6, [sp, #0]
    293e:	683c      	ldr	r4, [r7, #0]
    2940:	4b36      	ldr	r3, [pc, #216]	; (2a1c <bt_init+0x408>)
    2942:	4a37      	ldr	r2, [pc, #220]	; (2a20 <bt_init+0x40c>)
    2944:	4937      	ldr	r1, [pc, #220]	; (2a24 <bt_init+0x410>)
    2946:	4838      	ldr	r0, [pc, #224]	; (2a28 <bt_init+0x414>)
		BT_WARN("Failed to read supported vendor commands");
    2948:	47a0      	blx	r4
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    294a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    294c:	2207      	movs	r2, #7
    294e:	a90c      	add	r1, sp, #48	; 0x30
    2950:	4836      	ldr	r0, [pc, #216]	; (2a2c <bt_init+0x418>)
    2952:	930c      	str	r3, [sp, #48]	; 0x30
    2954:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    2958:	f7ff f94d 	bl	1bf6 <memcmp>
    295c:	2800      	cmp	r0, #0
    295e:	f040 80ea 	bne.w	2b36 <bt_init+0x522>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2962:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2966:	07db      	lsls	r3, r3, #31
    2968:	f100 8106 	bmi.w	2b78 <bt_init+0x564>
		BT_WARN("Read Static Addresses command not available");
    296c:	9601      	str	r6, [sp, #4]
    296e:	9600      	str	r6, [sp, #0]
    2970:	683c      	ldr	r4, [r7, #0]
    2972:	4b2f      	ldr	r3, [pc, #188]	; (2a30 <bt_init+0x41c>)
    2974:	4a2a      	ldr	r2, [pc, #168]	; (2a20 <bt_init+0x40c>)
    2976:	492b      	ldr	r1, [pc, #172]	; (2a24 <bt_init+0x410>)
    2978:	482e      	ldr	r0, [pc, #184]	; (2a34 <bt_init+0x420>)
    297a:	e10b      	b.n	2b94 <bt_init+0x580>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    297c:	2102      	movs	r1, #2
    297e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2982:	f7ff fbbd 	bl	2100 <bt_hci_cmd_create>
		if (!buf) {
    2986:	4606      	mov	r6, r0
    2988:	b910      	cbnz	r0, 2990 <bt_init+0x37c>
		return -ENOBUFS;
    298a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    298e:	e6dd      	b.n	274c <bt_init+0x138>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2990:	2102      	movs	r1, #2
    2992:	3008      	adds	r0, #8
    2994:	f010 faba 	bl	12f0c <net_buf_simple_add>
		cp_le->le = 0x01;
    2998:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    299a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    299c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    299e:	4622      	mov	r2, r4
    29a0:	4631      	mov	r1, r6
    29a2:	f640 406d 	movw	r0, #3181	; 0xc6d
    29a6:	f7ff fbdb 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    29aa:	4604      	mov	r4, r0
    29ac:	2800      	cmp	r0, #0
    29ae:	f43f af1c 	beq.w	27ea <bt_init+0x1d6>
    29b2:	e6cb      	b.n	274c <bt_init+0x138>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    29b4:	aa0c      	add	r2, sp, #48	; 0x30
    29b6:	2100      	movs	r1, #0
    29b8:	f242 002f 	movw	r0, #8239	; 0x202f
    29bc:	f7ff fbd0 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    29c0:	4604      	mov	r4, r0
    29c2:	2800      	cmp	r0, #0
    29c4:	f47f aec2 	bne.w	274c <bt_init+0x138>
		rp = (void *)rsp->data;
    29c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    29ca:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    29cc:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    29d0:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    29d4:	f010 fa62 	bl	12e9c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29d8:	2104      	movs	r1, #4
    29da:	f242 0024 	movw	r0, #8228	; 0x2024
    29de:	f7ff fb8f 	bl	2100 <bt_hci_cmd_create>
		if (!buf) {
    29e2:	4606      	mov	r6, r0
    29e4:	2800      	cmp	r0, #0
    29e6:	d0d0      	beq.n	298a <bt_init+0x376>
		cp = net_buf_add(buf, sizeof(*cp));
    29e8:	2104      	movs	r1, #4
    29ea:	3008      	adds	r0, #8
    29ec:	f010 fa8e 	bl	12f0c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29f0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    29f2:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    29f6:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    29f8:	4631      	mov	r1, r6
    29fa:	f242 0024 	movw	r0, #8228	; 0x2024
    29fe:	f7ff fbaf 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    2a02:	4604      	mov	r4, r0
    2a04:	2800      	cmp	r0, #0
    2a06:	f43f af0d 	beq.w	2824 <bt_init+0x210>
    2a0a:	e69f      	b.n	274c <bt_init+0x138>
    2a0c:	20003b20 	.word	0x20003b20
    2a10:	20003b34 	.word	0x20003b34
    2a14:	20003aa4 	.word	0x20003aa4
    2a18:	00014c55 	.word	0x00014c55
    2a1c:	0001531a 	.word	0x0001531a
    2a20:	00015a0b 	.word	0x00015a0b
    2a24:	00015a12 	.word	0x00015a12
    2a28:	000154b2 	.word	0x000154b2
    2a2c:	20003aa8 	.word	0x20003aa8
    2a30:	000152fb 	.word	0x000152fb
    2a34:	0001564f 	.word	0x0001564f
	rp.info = (void *)rsp->data;
    2a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    2a3a:	f8d7 8000 	ldr.w	r8, [r7]
	rp.info = (void *)rsp->data;
    2a3e:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a40:	4972      	ldr	r1, [pc, #456]	; (2c0c <bt_init+0x5f8>)
    2a42:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    2a46:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    2a48:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2a4a:	bf96      	itet	ls
    2a4c:	4a70      	ldrls	r2, [pc, #448]	; (2c10 <bt_init+0x5fc>)
	return "unknown";
    2a4e:	4a71      	ldrhi	r2, [pc, #452]	; (2c14 <bt_init+0x600>)
		return plat_str[platform];
    2a50:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2a54:	9201      	str	r2, [sp, #4]
    2a56:	4b70      	ldr	r3, [pc, #448]	; (2c18 <bt_init+0x604>)
    2a58:	4a70      	ldr	r2, [pc, #448]	; (2c1c <bt_init+0x608>)
    2a5a:	9603      	str	r6, [sp, #12]
    2a5c:	9600      	str	r6, [sp, #0]
    2a5e:	4870      	ldr	r0, [pc, #448]	; (2c20 <bt_init+0x60c>)
    2a60:	47c0      	blx	r8
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a62:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a66:	f8d7 8000 	ldr.w	r8, [r7]
    2a6a:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2a6e:	2b02      	cmp	r3, #2
    2a70:	d13b      	bne.n	2aea <bt_init+0x4d6>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2a72:	2a02      	cmp	r2, #2
    2a74:	d839      	bhi.n	2aea <bt_init+0x4d6>
		return nordic_str[variant];
    2a76:	4b6b      	ldr	r3, [pc, #428]	; (2c24 <bt_init+0x610>)
    2a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2a7c:	9202      	str	r2, [sp, #8]
    2a7e:	9301      	str	r3, [sp, #4]
    2a80:	4a66      	ldr	r2, [pc, #408]	; (2c1c <bt_init+0x608>)
    2a82:	4b65      	ldr	r3, [pc, #404]	; (2c18 <bt_init+0x604>)
    2a84:	4961      	ldr	r1, [pc, #388]	; (2c0c <bt_init+0x5f8>)
    2a86:	4868      	ldr	r0, [pc, #416]	; (2c28 <bt_init+0x614>)
    2a88:	9603      	str	r6, [sp, #12]
    2a8a:	9600      	str	r6, [sp, #0]
    2a8c:	47c0      	blx	r8
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a8e:	7963      	ldrb	r3, [r4, #5]
    2a90:	f8d7 8000 	ldr.w	r8, [r7]
    2a94:	9606      	str	r6, [sp, #24]
    2a96:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a9a:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2a9c:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2a9e:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    2aa2:	bf98      	it	ls
    2aa4:	4a61      	ldrls	r2, [pc, #388]	; (2c2c <bt_init+0x618>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2aa6:	9104      	str	r1, [sp, #16]
    2aa8:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    2aaa:	bf94      	ite	ls
    2aac:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2ab0:	4a58      	ldrhi	r2, [pc, #352]	; (2c14 <bt_init+0x600>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2ab2:	9103      	str	r1, [sp, #12]
    2ab4:	9302      	str	r3, [sp, #8]
    2ab6:	4955      	ldr	r1, [pc, #340]	; (2c0c <bt_init+0x5f8>)
    2ab8:	4b57      	ldr	r3, [pc, #348]	; (2c18 <bt_init+0x604>)
    2aba:	9201      	str	r2, [sp, #4]
    2abc:	485c      	ldr	r0, [pc, #368]	; (2c30 <bt_init+0x61c>)
    2abe:	4a57      	ldr	r2, [pc, #348]	; (2c1c <bt_init+0x608>)
    2ac0:	9600      	str	r6, [sp, #0]
    2ac2:	47c0      	blx	r8
	net_buf_unref(rsp);
    2ac4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ac6:	f010 f9e9 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2aca:	aa0c      	add	r2, sp, #48	; 0x30
    2acc:	2100      	movs	r1, #0
    2ace:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2ad2:	f7ff fb45 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2ad6:	4604      	mov	r4, r0
    2ad8:	b148      	cbz	r0, 2aee <bt_init+0x4da>
		BT_WARN("Failed to read supported vendor features");
    2ada:	9601      	str	r6, [sp, #4]
    2adc:	9600      	str	r6, [sp, #0]
    2ade:	683c      	ldr	r4, [r7, #0]
    2ae0:	4b4d      	ldr	r3, [pc, #308]	; (2c18 <bt_init+0x604>)
    2ae2:	4a54      	ldr	r2, [pc, #336]	; (2c34 <bt_init+0x620>)
    2ae4:	4949      	ldr	r1, [pc, #292]	; (2c0c <bt_init+0x5f8>)
    2ae6:	4854      	ldr	r0, [pc, #336]	; (2c38 <bt_init+0x624>)
    2ae8:	e72e      	b.n	2948 <bt_init+0x334>
		return "unknown";
    2aea:	4b4a      	ldr	r3, [pc, #296]	; (2c14 <bt_init+0x600>)
    2aec:	e7c6      	b.n	2a7c <bt_init+0x468>
	rp.cmds = (void *)rsp->data;
    2aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2af0:	4852      	ldr	r0, [pc, #328]	; (2c3c <bt_init+0x628>)
    2af2:	6899      	ldr	r1, [r3, #8]
    2af4:	2202      	movs	r2, #2
    2af6:	3101      	adds	r1, #1
    2af8:	f7ff f892 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2afc:	980c      	ldr	r0, [sp, #48]	; 0x30
    2afe:	f010 f9cd 	bl	12e9c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2b02:	aa0c      	add	r2, sp, #48	; 0x30
    2b04:	4621      	mov	r1, r4
    2b06:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2b0a:	f7ff fb29 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2b0e:	b138      	cbz	r0, 2b20 <bt_init+0x50c>
		BT_WARN("Failed to read supported vendor commands");
    2b10:	9601      	str	r6, [sp, #4]
    2b12:	9600      	str	r6, [sp, #0]
    2b14:	683c      	ldr	r4, [r7, #0]
    2b16:	4b40      	ldr	r3, [pc, #256]	; (2c18 <bt_init+0x604>)
    2b18:	4a46      	ldr	r2, [pc, #280]	; (2c34 <bt_init+0x620>)
    2b1a:	493c      	ldr	r1, [pc, #240]	; (2c0c <bt_init+0x5f8>)
    2b1c:	4848      	ldr	r0, [pc, #288]	; (2c40 <bt_init+0x62c>)
    2b1e:	e713      	b.n	2948 <bt_init+0x334>
	rp.feat = (void *)rsp->data;
    2b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2b22:	4848      	ldr	r0, [pc, #288]	; (2c44 <bt_init+0x630>)
    2b24:	6899      	ldr	r1, [r3, #8]
    2b26:	2201      	movs	r2, #1
    2b28:	4411      	add	r1, r2
    2b2a:	f7ff f879 	bl	1c20 <memcpy>
	net_buf_unref(rsp);
    2b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b30:	f010 f9b4 	bl	12e9c <net_buf_unref>
    2b34:	e709      	b.n	294a <bt_init+0x336>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2b36:	4b44      	ldr	r3, [pc, #272]	; (2c48 <bt_init+0x634>)
    2b38:	6818      	ldr	r0, [r3, #0]
    2b3a:	889a      	ldrh	r2, [r3, #4]
    2b3c:	900a      	str	r0, [sp, #40]	; 0x28
    2b3e:	799b      	ldrb	r3, [r3, #6]
    2b40:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    2b44:	a90a      	add	r1, sp, #40	; 0x28
    2b46:	2207      	movs	r2, #7
    2b48:	4840      	ldr	r0, [pc, #256]	; (2c4c <bt_init+0x638>)
    2b4a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    2b4e:	f7ff f852 	bl	1bf6 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2b52:	2800      	cmp	r0, #0
    2b54:	f43f af05 	beq.w	2962 <bt_init+0x34e>
		bt_dev_show_info();
    2b58:	f7ff fc42 	bl	23e0 <bt_dev_show_info>
		err = bt_conn_init();
    2b5c:	f002 f85c 	bl	4c18 <bt_conn_init>
		if (err) {
    2b60:	4604      	mov	r4, r0
    2b62:	2800      	cmp	r0, #0
    2b64:	f47f adf2 	bne.w	274c <bt_init+0x138>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b68:	2102      	movs	r1, #2
    2b6a:	4839      	ldr	r0, [pc, #228]	; (2c50 <bt_init+0x63c>)
    2b6c:	f7ff fa21 	bl	1fb2 <atomic_or>
	bt_le_scan_update(false);
    2b70:	4620      	mov	r0, r4
    2b72:	f7ff fd1d 	bl	25b0 <bt_le_scan_update>
    2b76:	e5e9      	b.n	274c <bt_init+0x138>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2b78:	aa09      	add	r2, sp, #36	; 0x24
    2b7a:	2100      	movs	r1, #0
    2b7c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2b80:	f7ff faee 	bl	2160 <bt_hci_cmd_send_sync>
		if (err) {
    2b84:	b140      	cbz	r0, 2b98 <bt_init+0x584>
			BT_WARN("Failed to read static addresses");
    2b86:	9601      	str	r6, [sp, #4]
    2b88:	9600      	str	r6, [sp, #0]
    2b8a:	683c      	ldr	r4, [r7, #0]
    2b8c:	4b31      	ldr	r3, [pc, #196]	; (2c54 <bt_init+0x640>)
    2b8e:	4a29      	ldr	r2, [pc, #164]	; (2c34 <bt_init+0x620>)
    2b90:	491e      	ldr	r1, [pc, #120]	; (2c0c <bt_init+0x5f8>)
    2b92:	4831      	ldr	r0, [pc, #196]	; (2c58 <bt_init+0x644>)
		BT_WARN("Read Static Addresses command not available");
    2b94:	47a0      	blx	r4
    2b96:	e026      	b.n	2be6 <bt_init+0x5d2>
		rp = (void *)rsp->data;
    2b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b9a:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2b9c:	784b      	ldrb	r3, [r1, #1]
    2b9e:	b1bb      	cbz	r3, 2bd0 <bt_init+0x5bc>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2ba0:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2ba2:	2206      	movs	r2, #6
    2ba4:	3102      	adds	r1, #2
    2ba6:	482d      	ldr	r0, [pc, #180]	; (2c5c <bt_init+0x648>)
    2ba8:	702b      	strb	r3, [r5, #0]
    2baa:	f7ff f839 	bl	1c20 <memcpy>
			net_buf_unref(rsp);
    2bae:	9809      	ldr	r0, [sp, #36]	; 0x24
    2bb0:	f010 f974 	bl	12e9c <net_buf_unref>
		return bt_set_static_addr();
    2bb4:	f7ff fbe0 	bl	2378 <bt_set_static_addr>
    2bb8:	4604      	mov	r4, r0
		if (err) {
    2bba:	2800      	cmp	r0, #0
    2bbc:	d0cc      	beq.n	2b58 <bt_init+0x544>
			BT_ERR("Unable to set identity address");
    2bbe:	9601      	str	r6, [sp, #4]
    2bc0:	9600      	str	r6, [sp, #0]
    2bc2:	683d      	ldr	r5, [r7, #0]
    2bc4:	4b26      	ldr	r3, [pc, #152]	; (2c60 <bt_init+0x64c>)
    2bc6:	4a27      	ldr	r2, [pc, #156]	; (2c64 <bt_init+0x650>)
    2bc8:	4910      	ldr	r1, [pc, #64]	; (2c0c <bt_init+0x5f8>)
    2bca:	4827      	ldr	r0, [pc, #156]	; (2c68 <bt_init+0x654>)
    2bcc:	47a8      	blx	r5
    2bce:	e5bd      	b.n	274c <bt_init+0x138>
		BT_WARN("No static addresses stored in controller");
    2bd0:	9601      	str	r6, [sp, #4]
    2bd2:	9600      	str	r6, [sp, #0]
    2bd4:	4825      	ldr	r0, [pc, #148]	; (2c6c <bt_init+0x658>)
    2bd6:	683c      	ldr	r4, [r7, #0]
    2bd8:	4b1e      	ldr	r3, [pc, #120]	; (2c54 <bt_init+0x640>)
    2bda:	4a16      	ldr	r2, [pc, #88]	; (2c34 <bt_init+0x620>)
    2bdc:	490b      	ldr	r1, [pc, #44]	; (2c0c <bt_init+0x5f8>)
    2bde:	47a0      	blx	r4
		net_buf_unref(rsp);
    2be0:	9809      	ldr	r0, [sp, #36]	; 0x24
    2be2:	f010 f95b 	bl	12e9c <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2be6:	4819      	ldr	r0, [pc, #100]	; (2c4c <bt_init+0x638>)
    2be8:	f7ff fbb8 	bl	235c <bt_addr_le_create_static>
		if (err) {
    2bec:	4604      	mov	r4, r0
    2bee:	2800      	cmp	r0, #0
    2bf0:	d1e5      	bne.n	2bbe <bt_init+0x5aa>
		BT_WARN("Using temporary static random address %s",
    2bf2:	481a      	ldr	r0, [pc, #104]	; (2c5c <bt_init+0x648>)
    2bf4:	683c      	ldr	r4, [r7, #0]
    2bf6:	f7ff f899 	bl	1d2c <bt_addr_str>
    2bfa:	9602      	str	r6, [sp, #8]
    2bfc:	9001      	str	r0, [sp, #4]
    2bfe:	9600      	str	r6, [sp, #0]
    2c00:	4b14      	ldr	r3, [pc, #80]	; (2c54 <bt_init+0x640>)
    2c02:	4a0c      	ldr	r2, [pc, #48]	; (2c34 <bt_init+0x620>)
    2c04:	4901      	ldr	r1, [pc, #4]	; (2c0c <bt_init+0x5f8>)
    2c06:	481a      	ldr	r0, [pc, #104]	; (2c70 <bt_init+0x65c>)
    2c08:	47a0      	blx	r4
    2c0a:	e7d3      	b.n	2bb4 <bt_init+0x5a0>
    2c0c:	00015a12 	.word	0x00015a12
    2c10:	00015bac 	.word	0x00015bac
    2c14:	00015c9c 	.word	0x00015c9c
    2c18:	0001531a 	.word	0x0001531a
    2c1c:	0001534e 	.word	0x0001534e
    2c20:	000154e6 	.word	0x000154e6
    2c24:	00015ba0 	.word	0x00015ba0
    2c28:	0001550f 	.word	0x0001550f
    2c2c:	00015c8c 	.word	0x00015c8c
    2c30:	00015537 	.word	0x00015537
    2c34:	00015a0b 	.word	0x00015a0b
    2c38:	00015574 	.word	0x00015574
    2c3c:	20003b07 	.word	0x20003b07
    2c40:	000155ad 	.word	0x000155ad
    2c44:	20003b06 	.word	0x20003b06
    2c48:	00014ba0 	.word	0x00014ba0
    2c4c:	20003aa8 	.word	0x20003aa8
    2c50:	20003b18 	.word	0x20003b18
    2c54:	000152fb 	.word	0x000152fb
    2c58:	000155e6 	.word	0x000155e6
    2c5c:	20003aa9 	.word	0x20003aa9
    2c60:	00015326 	.word	0x00015326
    2c64:	000159c3 	.word	0x000159c3
    2c68:	000156c4 	.word	0x000156c4
    2c6c:	00015616 	.word	0x00015616
    2c70:	0001568b 	.word	0x0001568b

00002c74 <init_work>:

static void init_work(struct k_work *work)
{
    2c74:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2c76:	f7ff fccd 	bl	2614 <bt_init>
	if (ready_cb) {
    2c7a:	4b03      	ldr	r3, [pc, #12]	; (2c88 <init_work+0x14>)
    2c7c:	681b      	ldr	r3, [r3, #0]
    2c7e:	b113      	cbz	r3, 2c86 <init_work+0x12>
		ready_cb(err);
	}
}
    2c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2c84:	4718      	bx	r3
    2c86:	bd10      	pop	{r4, pc}
    2c88:	200002d4 	.word	0x200002d4

00002c8c <hci_le_set_phy.isra.28>:
static int hci_le_set_phy(struct bt_conn *conn)
    2c8c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c8e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2c90:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2c92:	f242 0032 	movw	r0, #8242	; 0x2032
    2c96:	f7ff fa33 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2c9a:	4605      	mov	r5, r0
    2c9c:	b198      	cbz	r0, 2cc6 <hci_le_set_phy.isra.28+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2c9e:	2107      	movs	r1, #7
    2ca0:	3008      	adds	r0, #8
    2ca2:	f010 f933 	bl	12f0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2ca6:	8823      	ldrh	r3, [r4, #0]
    2ca8:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2caa:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2cac:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2cae:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2cb0:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2cb2:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2cb4:	7144      	strb	r4, [r0, #5]
    2cb6:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2cb8:	4629      	mov	r1, r5
    2cba:	f242 0032 	movw	r0, #8242	; 0x2032
    2cbe:	f7ff fbed 	bl	249c <bt_hci_cmd_send>
	return 0;
    2cc2:	4620      	mov	r0, r4
    2cc4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2cc6:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2cca:	bd38      	pop	{r3, r4, r5, pc}

00002ccc <hci_le_set_data_len.isra.29>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cce:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2cd0:	aa01      	add	r2, sp, #4
    2cd2:	2100      	movs	r1, #0
    2cd4:	f242 002f 	movw	r0, #8239	; 0x202f
    2cd8:	f7ff fa42 	bl	2160 <bt_hci_cmd_send_sync>
	if (err) {
    2cdc:	b9d8      	cbnz	r0, 2d16 <hci_le_set_data_len.isra.29+0x4a>
	rp = (void *)rsp->data;
    2cde:	9801      	ldr	r0, [sp, #4]
    2ce0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2ce2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2ce6:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2cea:	f010 f8d7 	bl	12e9c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2cee:	2106      	movs	r1, #6
    2cf0:	f242 0022 	movw	r0, #8226	; 0x2022
    2cf4:	f7ff fa04 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2cf8:	4604      	mov	r4, r0
    2cfa:	b170      	cbz	r0, 2d1a <hci_le_set_data_len.isra.29+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2cfc:	2106      	movs	r1, #6
    2cfe:	3008      	adds	r0, #8
    2d00:	f010 f904 	bl	12f0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2d04:	883b      	ldrh	r3, [r7, #0]
    2d06:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2d08:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2d0a:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2d0c:	4621      	mov	r1, r4
    2d0e:	f242 0022 	movw	r0, #8226	; 0x2022
    2d12:	f7ff fbc3 	bl	249c <bt_hci_cmd_send>
}
    2d16:	b003      	add	sp, #12
    2d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2d1a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2d1e:	e7fa      	b.n	2d16 <hci_le_set_data_len.isra.29+0x4a>

00002d20 <le_enh_conn_complete>:
{
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    2d22:	7803      	ldrb	r3, [r0, #0]
{
    2d24:	b089      	sub	sp, #36	; 0x24
    2d26:	4605      	mov	r5, r0
	if (evt->status) {
    2d28:	b17b      	cbz	r3, 2d4a <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2d2a:	2102      	movs	r1, #2
    2d2c:	2000      	movs	r0, #0
    2d2e:	f001 fae9 	bl	4304 <bt_conn_lookup_state_le>
		if (!conn) {
    2d32:	4604      	mov	r4, r0
    2d34:	b138      	cbz	r0, 2d46 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    2d36:	782b      	ldrb	r3, [r5, #0]
    2d38:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2d3a:	2100      	movs	r1, #0
    2d3c:	f001 fbc0 	bl	44c0 <bt_conn_set_state>
		bt_conn_unref(conn);
    2d40:	4620      	mov	r0, r4
    2d42:	f001 fafd 	bl	4340 <bt_conn_unref>
}
    2d46:	b009      	add	sp, #36	; 0x24
    2d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d4a:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d4c:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2d50:	4621      	mov	r1, r4
    2d52:	a806      	add	r0, sp, #24
    2d54:	f7ff f92a 	bl	1fac <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d58:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d5c:	3b02      	subs	r3, #2
    2d5e:	b2db      	uxtb	r3, r3
    2d60:	2b01      	cmp	r3, #1
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d62:	b2b7      	uxth	r7, r6
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2d64:	d82a      	bhi.n	2dbc <le_enh_conn_complete+0x9c>
    2d66:	2206      	movs	r2, #6
    2d68:	f105 0111 	add.w	r1, r5, #17
    2d6c:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2d70:	f88d 3018 	strb.w	r3, [sp, #24]
    2d74:	f7fe ff54 	bl	1c20 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2d78:	2301      	movs	r3, #1
    2d7a:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d7e:	2102      	movs	r1, #2
    2d80:	a806      	add	r0, sp, #24
    2d82:	f001 fabf 	bl	4304 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d86:	78eb      	ldrb	r3, [r5, #3]
    2d88:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2d8a:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2d8c:	d109      	bne.n	2da2 <le_enh_conn_complete+0x82>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d8e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2d92:	484a      	ldr	r0, [pc, #296]	; (2ebc <le_enh_conn_complete+0x19c>)
    2d94:	f7ff f91e 	bl	1fd4 <atomic_and>
		if (!conn) {
    2d98:	b9ac      	cbnz	r4, 2dc6 <le_enh_conn_complete+0xa6>
			conn = bt_conn_add_le(&id_addr);
    2d9a:	a806      	add	r0, sp, #24
    2d9c:	f001 fa02 	bl	41a4 <bt_conn_add_le>
    2da0:	4604      	mov	r4, r0
	if (!conn) {
    2da2:	b984      	cbnz	r4, 2dc6 <le_enh_conn_complete+0xa6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2da4:	4b46      	ldr	r3, [pc, #280]	; (2ec0 <le_enh_conn_complete+0x1a0>)
    2da6:	9302      	str	r3, [sp, #8]
    2da8:	e88d 0088 	stmia.w	sp, {r3, r7}
    2dac:	4b45      	ldr	r3, [pc, #276]	; (2ec4 <le_enh_conn_complete+0x1a4>)
    2dae:	4a46      	ldr	r2, [pc, #280]	; (2ec8 <le_enh_conn_complete+0x1a8>)
    2db0:	681c      	ldr	r4, [r3, #0]
    2db2:	4946      	ldr	r1, [pc, #280]	; (2ecc <le_enh_conn_complete+0x1ac>)
    2db4:	4b46      	ldr	r3, [pc, #280]	; (2ed0 <le_enh_conn_complete+0x1b0>)
    2db6:	4847      	ldr	r0, [pc, #284]	; (2ed4 <le_enh_conn_complete+0x1b4>)
    2db8:	47a0      	blx	r4
		return;
    2dba:	e7c4      	b.n	2d46 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2dbc:	4621      	mov	r1, r4
    2dbe:	a804      	add	r0, sp, #16
    2dc0:	f7ff f8f4 	bl	1fac <bt_addr_le_copy>
    2dc4:	e7db      	b.n	2d7e <le_enh_conn_complete+0x5e>
	conn->handle   = handle;
    2dc6:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2dc8:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    2dca:	f820 6b4c 	strh.w	r6, [r0], #76
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2dce:	f7ff f8ed 	bl	1fac <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2dd2:	7e2a      	ldrb	r2, [r5, #24]
    2dd4:	7deb      	ldrb	r3, [r5, #23]
    2dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2dda:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2dde:	7eaa      	ldrb	r2, [r5, #26]
    2de0:	7e6b      	ldrb	r3, [r5, #25]
    2de2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2de6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2dea:	7eeb      	ldrb	r3, [r5, #27]
    2dec:	7f2a      	ldrb	r2, [r5, #28]
    2dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2df2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	conn->role = evt->role;
    2df6:	78ee      	ldrb	r6, [r5, #3]
    2df8:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2dfa:	2e01      	cmp	r6, #1
    2dfc:	d11a      	bne.n	2e34 <le_enh_conn_complete+0x114>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2dfe:	4f36      	ldr	r7, [pc, #216]	; (2ed8 <le_enh_conn_complete+0x1b8>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2e00:	a904      	add	r1, sp, #16
    2e02:	f104 0053 	add.w	r0, r4, #83	; 0x53
    2e06:	f7ff f8d1 	bl	1fac <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2e0a:	4639      	mov	r1, r7
    2e0c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    2e10:	f7ff f8cc 	bl	1fac <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2e14:	2107      	movs	r1, #7
    2e16:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2e1a:	f7ff f963 	bl	20e4 <atomic_test_bit>
    2e1e:	b148      	cbz	r0, 2e34 <le_enh_conn_complete+0x114>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2e20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2e24:	2200      	movs	r2, #0
    2e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2e2a:	4313      	orrs	r3, r2
    2e2c:	d002      	beq.n	2e34 <le_enh_conn_complete+0x114>
			set_advertise_enable(true);
    2e2e:	4630      	mov	r0, r6
    2e30:	f7ff fa4a 	bl	22c8 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2e34:	2103      	movs	r1, #3
    2e36:	4620      	mov	r0, r4
    2e38:	f001 fb42 	bl	44c0 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2e3c:	7a63      	ldrb	r3, [r4, #9]
    2e3e:	2b03      	cmp	r3, #3
    2e40:	d118      	bne.n	2e74 <le_enh_conn_complete+0x154>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e42:	78eb      	ldrb	r3, [r5, #3]
    2e44:	b123      	cbz	r3, 2e50 <le_enh_conn_complete+0x130>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2e46:	4b24      	ldr	r3, [pc, #144]	; (2ed8 <le_enh_conn_complete+0x1b8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2e48:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2e4c:	0719      	lsls	r1, r3, #28
    2e4e:	d518      	bpl.n	2e82 <le_enh_conn_complete+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2e50:	2102      	movs	r1, #2
    2e52:	f242 0016 	movw	r0, #8214	; 0x2016
    2e56:	f7ff f953 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2e5a:	4605      	mov	r5, r0
    2e5c:	b188      	cbz	r0, 2e82 <le_enh_conn_complete+0x162>
	cp = net_buf_add(buf, sizeof(*cp));
    2e5e:	2102      	movs	r1, #2
    2e60:	3008      	adds	r0, #8
    2e62:	f010 f853 	bl	12f0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e66:	8823      	ldrh	r3, [r4, #0]
    2e68:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2e6a:	4629      	mov	r1, r5
    2e6c:	f242 0016 	movw	r0, #8214	; 0x2016
    2e70:	f7ff fb14 	bl	249c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2e74:	4620      	mov	r0, r4
    2e76:	f001 fa63 	bl	4340 <bt_conn_unref>
	bt_le_scan_update(false);
    2e7a:	2000      	movs	r0, #0
    2e7c:	f7ff fb98 	bl	25b0 <bt_le_scan_update>
    2e80:	e761      	b.n	2d46 <le_enh_conn_complete+0x26>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2e82:	4d15      	ldr	r5, [pc, #84]	; (2ed8 <le_enh_conn_complete+0x1b8>)
    2e84:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2e88:	07d2      	lsls	r2, r2, #31
    2e8a:	d508      	bpl.n	2e9e <le_enh_conn_complete+0x17e>
		err = hci_le_set_phy(conn);
    2e8c:	4620      	mov	r0, r4
    2e8e:	f7ff fefd 	bl	2c8c <hci_le_set_phy.isra.28>
		if (!err) {
    2e92:	b920      	cbnz	r0, 2e9e <le_enh_conn_complete+0x17e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e94:	2180      	movs	r1, #128	; 0x80
    2e96:	1d20      	adds	r0, r4, #4
    2e98:	f7ff f88b 	bl	1fb2 <atomic_or>
    2e9c:	e7ea      	b.n	2e74 <le_enh_conn_complete+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2e9e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2ea2:	069b      	lsls	r3, r3, #26
    2ea4:	d506      	bpl.n	2eb4 <le_enh_conn_complete+0x194>
		err = hci_le_set_data_len(conn);
    2ea6:	4620      	mov	r0, r4
    2ea8:	f7ff ff10 	bl	2ccc <hci_le_set_data_len.isra.29>
		if (!err) {
    2eac:	b910      	cbnz	r0, 2eb4 <le_enh_conn_complete+0x194>
    2eae:	f44f 7180 	mov.w	r1, #256	; 0x100
    2eb2:	e7f0      	b.n	2e96 <le_enh_conn_complete+0x176>
	update_conn_param(conn);
    2eb4:	4620      	mov	r0, r4
    2eb6:	f7ff f89f 	bl	1ff8 <update_conn_param>
    2eba:	e7db      	b.n	2e74 <le_enh_conn_complete+0x154>
    2ebc:	20003b18 	.word	0x20003b18
    2ec0:	00014c55 	.word	0x00014c55
    2ec4:	20003aa4 	.word	0x20003aa4
    2ec8:	000159c3 	.word	0x000159c3
    2ecc:	00015a12 	.word	0x00015a12
    2ed0:	00015210 	.word	0x00015210
    2ed4:	00015b48 	.word	0x00015b48
    2ed8:	20003aa8 	.word	0x20003aa8

00002edc <le_conn_param_neg_reply>:
{
    2edc:	b570      	push	{r4, r5, r6, lr}
    2ede:	4606      	mov	r6, r0
    2ee0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2ee2:	f242 0021 	movw	r0, #8225	; 0x2021
    2ee6:	2103      	movs	r1, #3
    2ee8:	f7ff f90a 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    2eec:	4604      	mov	r4, r0
    2eee:	b160      	cbz	r0, 2f0a <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2ef0:	2103      	movs	r1, #3
    2ef2:	3008      	adds	r0, #8
    2ef4:	f010 f80a 	bl	12f0c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2ef8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2efa:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2efc:	4621      	mov	r1, r4
    2efe:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2f06:	f7ff bac9 	b.w	249c <bt_hci_cmd_send>
}
    2f0a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2f0e:	bd70      	pop	{r4, r5, r6, pc}

00002f10 <hci_tx_thread>:
{
    2f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			ev_count += bt_conn_prepare_events(&events[1]);
    2f14:	4b55      	ldr	r3, [pc, #340]	; (306c <hci_tx_thread+0x15c>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2f16:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3078 <hci_tx_thread+0x168>
{
    2f1a:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
    2f1c:	f103 0814 	add.w	r8, r3, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    2f20:	4b52      	ldr	r3, [pc, #328]	; (306c <hci_tx_thread+0x15c>)
    2f22:	4a52      	ldr	r2, [pc, #328]	; (306c <hci_tx_thread+0x15c>)
    2f24:	7b5b      	ldrb	r3, [r3, #13]
    2f26:	f36f 1307 	bfc	r3, #4, #4
    2f2a:	7353      	strb	r3, [r2, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2f2c:	4640      	mov	r0, r8
    2f2e:	f001 fa51 	bl	43d4 <bt_conn_prepare_events>
    2f32:	1c46      	adds	r6, r0, #1

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    2f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f38:	4631      	mov	r1, r6
    2f3a:	484c      	ldr	r0, [pc, #304]	; (306c <hci_tx_thread+0x15c>)
    2f3c:	f011 fd02 	bl	14944 <_impl_k_poll>
		BT_ASSERT(err == 0);
    2f40:	b928      	cbnz	r0, 2f4e <hci_tx_thread+0x3e>
    2f42:	4d4a      	ldr	r5, [pc, #296]	; (306c <hci_tx_thread+0x15c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f44:	4c4a      	ldr	r4, [pc, #296]	; (3070 <hci_tx_thread+0x160>)
	for (; count; ev++, count--) {
    2f46:	b996      	cbnz	r6, 2f6e <hci_tx_thread+0x5e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2f48:	f011 f842 	bl	13fd0 <_impl_k_yield>
    2f4c:	e7e8      	b.n	2f20 <hci_tx_thread+0x10>
		BT_ASSERT(err == 0);
    2f4e:	4b49      	ldr	r3, [pc, #292]	; (3074 <hci_tx_thread+0x164>)
    2f50:	9301      	str	r3, [sp, #4]
    2f52:	9300      	str	r3, [sp, #0]
    2f54:	4b48      	ldr	r3, [pc, #288]	; (3078 <hci_tx_thread+0x168>)
    2f56:	4a49      	ldr	r2, [pc, #292]	; (307c <hci_tx_thread+0x16c>)
    2f58:	681c      	ldr	r4, [r3, #0]
    2f5a:	4949      	ldr	r1, [pc, #292]	; (3080 <hci_tx_thread+0x170>)
    2f5c:	4b49      	ldr	r3, [pc, #292]	; (3084 <hci_tx_thread+0x174>)
    2f5e:	484a      	ldr	r0, [pc, #296]	; (3088 <hci_tx_thread+0x178>)
	BT_ASSERT(buf);
    2f60:	47a0      	blx	r4
    2f62:	4040      	eors	r0, r0
    2f64:	f380 8811 	msr	BASEPRI, r0
    2f68:	f04f 0004 	mov.w	r0, #4
    2f6c:	df02      	svc	2
		switch (ev->state) {
    2f6e:	7b6b      	ldrb	r3, [r5, #13]
    2f70:	091b      	lsrs	r3, r3, #4
    2f72:	2b01      	cmp	r3, #1
    2f74:	d95a      	bls.n	302c <hci_tx_thread+0x11c>
    2f76:	2b04      	cmp	r3, #4
    2f78:	d16b      	bne.n	3052 <hci_tx_thread+0x142>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f7a:	f895 b00c 	ldrb.w	fp, [r5, #12]
    2f7e:	f1bb 0f00 	cmp.w	fp, #0
    2f82:	d156      	bne.n	3032 <hci_tx_thread+0x122>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f84:	4659      	mov	r1, fp
    2f86:	4841      	ldr	r0, [pc, #260]	; (308c <hci_tx_thread+0x17c>)
    2f88:	f00f ff5e 	bl	12e48 <net_buf_get>
	BT_ASSERT(buf);
    2f8c:	4682      	mov	sl, r0
    2f8e:	b948      	cbnz	r0, 2fa4 <hci_tx_thread+0x94>
    2f90:	4b38      	ldr	r3, [pc, #224]	; (3074 <hci_tx_thread+0x164>)
    2f92:	9301      	str	r3, [sp, #4]
    2f94:	9300      	str	r3, [sp, #0]
    2f96:	4b38      	ldr	r3, [pc, #224]	; (3078 <hci_tx_thread+0x168>)
    2f98:	4a38      	ldr	r2, [pc, #224]	; (307c <hci_tx_thread+0x16c>)
    2f9a:	681c      	ldr	r4, [r3, #0]
    2f9c:	4938      	ldr	r1, [pc, #224]	; (3080 <hci_tx_thread+0x170>)
    2f9e:	4b3c      	ldr	r3, [pc, #240]	; (3090 <hci_tx_thread+0x180>)
    2fa0:	483c      	ldr	r0, [pc, #240]	; (3094 <hci_tx_thread+0x184>)
    2fa2:	e7dd      	b.n	2f60 <hci_tx_thread+0x50>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2fa8:	483b      	ldr	r0, [pc, #236]	; (3098 <hci_tx_thread+0x188>)
    2faa:	f011 f89d 	bl	140e8 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2fae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    2fb2:	b17b      	cbz	r3, 2fd4 <hci_tx_thread+0xc4>
		BT_ERR("Uncleared pending sent_cmd");
    2fb4:	4b2f      	ldr	r3, [pc, #188]	; (3074 <hci_tx_thread+0x164>)
    2fb6:	9301      	str	r3, [sp, #4]
    2fb8:	9300      	str	r3, [sp, #0]
    2fba:	4a30      	ldr	r2, [pc, #192]	; (307c <hci_tx_thread+0x16c>)
    2fbc:	4b34      	ldr	r3, [pc, #208]	; (3090 <hci_tx_thread+0x180>)
    2fbe:	4930      	ldr	r1, [pc, #192]	; (3080 <hci_tx_thread+0x170>)
    2fc0:	4836      	ldr	r0, [pc, #216]	; (309c <hci_tx_thread+0x18c>)
    2fc2:	f8d9 7000 	ldr.w	r7, [r9]
    2fc6:	47b8      	blx	r7
		net_buf_unref(bt_dev.sent_cmd);
    2fc8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    2fcc:	f00f ff66 	bl	12e9c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2fd0:	f8c4 b0c4 	str.w	fp, [r4, #196]	; 0xc4
	bt_dev.sent_cmd = net_buf_ref(buf);
    2fd4:	4650      	mov	r0, sl
    2fd6:	f00f ff95 	bl	12f04 <net_buf_ref>
    2fda:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
	err = bt_send(buf);
    2fde:	4650      	mov	r0, sl
    2fe0:	f7ff fa54 	bl	248c <bt_send>
	if (err) {
    2fe4:	b310      	cbz	r0, 302c <hci_tx_thread+0x11c>
		BT_ERR("Unable to send to driver (err %d)", err);
    2fe6:	4b23      	ldr	r3, [pc, #140]	; (3074 <hci_tx_thread+0x164>)
    2fe8:	4a24      	ldr	r2, [pc, #144]	; (307c <hci_tx_thread+0x16c>)
    2fea:	4925      	ldr	r1, [pc, #148]	; (3080 <hci_tx_thread+0x170>)
    2fec:	9302      	str	r3, [sp, #8]
    2fee:	9001      	str	r0, [sp, #4]
    2ff0:	9300      	str	r3, [sp, #0]
    2ff2:	482b      	ldr	r0, [pc, #172]	; (30a0 <hci_tx_thread+0x190>)
    2ff4:	4b26      	ldr	r3, [pc, #152]	; (3090 <hci_tx_thread+0x180>)
    2ff6:	f8d9 7000 	ldr.w	r7, [r9]
    2ffa:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2ffc:	4826      	ldr	r0, [pc, #152]	; (3098 <hci_tx_thread+0x188>)
    2ffe:	f011 f84b 	bl	14098 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3002:	4650      	mov	r0, sl
    3004:	f00f fe80 	bl	12d08 <net_buf_id>
    3008:	4b26      	ldr	r3, [pc, #152]	; (30a4 <hci_tx_thread+0x194>)
    300a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    300e:	2200      	movs	r2, #0
    3010:	211f      	movs	r1, #31
    3012:	8840      	ldrh	r0, [r0, #2]
    3014:	f7fe fffe 	bl	2014 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3018:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    301c:	f00f ff3e 	bl	12e9c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3020:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3022:	4650      	mov	r0, sl
		bt_dev.sent_cmd = NULL;
    3024:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		net_buf_unref(buf);
    3028:	f00f ff38 	bl	12e9c <net_buf_unref>
	for (; count; ev++, count--) {
    302c:	3514      	adds	r5, #20
    302e:	3e01      	subs	r6, #1
    3030:	e789      	b.n	2f46 <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3032:	f1bb 0f01 	cmp.w	fp, #1
    3036:	d104      	bne.n	3042 <hci_tx_thread+0x132>
					conn = CONTAINER_OF(ev->fifo,
    3038:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    303a:	3818      	subs	r0, #24
    303c:	f000 ffa4 	bl	3f88 <bt_conn_notify_tx>
    3040:	e7f4      	b.n	302c <hci_tx_thread+0x11c>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3042:	f1bb 0f02 	cmp.w	fp, #2
    3046:	d1f1      	bne.n	302c <hci_tx_thread+0x11c>
					conn = CONTAINER_OF(ev->fifo,
    3048:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    304a:	382c      	subs	r0, #44	; 0x2c
    304c:	f001 fd2a 	bl	4aa4 <bt_conn_process_tx>
    3050:	e7ec      	b.n	302c <hci_tx_thread+0x11c>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3052:	4a08      	ldr	r2, [pc, #32]	; (3074 <hci_tx_thread+0x164>)
    3054:	9202      	str	r2, [sp, #8]
    3056:	e88d 000c 	stmia.w	sp, {r2, r3}
    305a:	4909      	ldr	r1, [pc, #36]	; (3080 <hci_tx_thread+0x170>)
    305c:	4b12      	ldr	r3, [pc, #72]	; (30a8 <hci_tx_thread+0x198>)
    305e:	4a13      	ldr	r2, [pc, #76]	; (30ac <hci_tx_thread+0x19c>)
    3060:	4813      	ldr	r0, [pc, #76]	; (30b0 <hci_tx_thread+0x1a0>)
    3062:	f8d9 7000 	ldr.w	r7, [r9]
    3066:	47b8      	blx	r7
    3068:	e7e0      	b.n	302c <hci_tx_thread+0x11c>
    306a:	bf00      	nop
    306c:	20003b88 	.word	0x20003b88
    3070:	20003aa8 	.word	0x20003aa8
    3074:	00014c55 	.word	0x00014c55
    3078:	20003aa4 	.word	0x20003aa4
    307c:	000159c3 	.word	0x000159c3
    3080:	00015a12 	.word	0x00015a12
    3084:	000152d2 	.word	0x000152d2
    3088:	00015a9d 	.word	0x00015a9d
    308c:	20003b70 	.word	0x20003b70
    3090:	000152ba 	.word	0x000152ba
    3094:	00015ac7 	.word	0x00015ac7
    3098:	20003b50 	.word	0x20003b50
    309c:	00015aec 	.word	0x00015aec
    30a0:	0001544c 	.word	0x0001544c
    30a4:	2000027c 	.word	0x2000027c
    30a8:	000152c3 	.word	0x000152c3
    30ac:	00015a0b 	.word	0x00015a0b
    30b0:	00015b17 	.word	0x00015b17

000030b4 <bt_recv>:
{
    30b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    30b8:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    30ba:	2b01      	cmp	r3, #1
{
    30bc:	b095      	sub	sp, #84	; 0x54
    30be:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    30c0:	d042      	beq.n	3148 <bt_recv+0x94>
    30c2:	2b03      	cmp	r3, #3
    30c4:	f040 834e 	bne.w	3764 <bt_recv+0x6b0>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    30c8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    30ca:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    30cc:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    30ce:	f3c6 030b 	ubfx	r3, r6, #0, #12
    30d2:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    30d4:	23ff      	movs	r3, #255	; 0xff
    30d6:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    30d8:	2104      	movs	r1, #4
    30da:	3008      	adds	r0, #8
    30dc:	f00f ff35 	bl	12f4a <net_buf_simple_pull>
	if (buf->len != len) {
    30e0:	89a2      	ldrh	r2, [r4, #12]
    30e2:	4295      	cmp	r5, r2
    30e4:	d00f      	beq.n	3106 <bt_recv+0x52>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    30e6:	4ba4      	ldr	r3, [pc, #656]	; (3378 <bt_recv+0x2c4>)
    30e8:	9303      	str	r3, [sp, #12]
    30ea:	9300      	str	r3, [sp, #0]
    30ec:	4ba3      	ldr	r3, [pc, #652]	; (337c <bt_recv+0x2c8>)
    30ee:	9201      	str	r2, [sp, #4]
    30f0:	9502      	str	r5, [sp, #8]
    30f2:	681d      	ldr	r5, [r3, #0]
    30f4:	4aa2      	ldr	r2, [pc, #648]	; (3380 <bt_recv+0x2cc>)
    30f6:	4ba3      	ldr	r3, [pc, #652]	; (3384 <bt_recv+0x2d0>)
    30f8:	49a3      	ldr	r1, [pc, #652]	; (3388 <bt_recv+0x2d4>)
    30fa:	48a4      	ldr	r0, [pc, #656]	; (338c <bt_recv+0x2d8>)
    30fc:	47a8      	blx	r5
	net_buf_unref(buf);
    30fe:	4620      	mov	r0, r4
    3100:	f00f fecc 	bl	12e9c <net_buf_unref>
    3104:	e01c      	b.n	3140 <bt_recv+0x8c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3106:	8ae0      	ldrh	r0, [r4, #22]
    3108:	f001 f8cc 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    310c:	4605      	mov	r5, r0
    310e:	b960      	cbnz	r0, 312a <bt_recv+0x76>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3110:	4b99      	ldr	r3, [pc, #612]	; (3378 <bt_recv+0x2c4>)
    3112:	9302      	str	r3, [sp, #8]
    3114:	8ae2      	ldrh	r2, [r4, #22]
    3116:	9300      	str	r3, [sp, #0]
    3118:	4b98      	ldr	r3, [pc, #608]	; (337c <bt_recv+0x2c8>)
    311a:	9201      	str	r2, [sp, #4]
    311c:	681e      	ldr	r6, [r3, #0]
    311e:	4a98      	ldr	r2, [pc, #608]	; (3380 <bt_recv+0x2cc>)
    3120:	4b98      	ldr	r3, [pc, #608]	; (3384 <bt_recv+0x2d0>)
    3122:	4999      	ldr	r1, [pc, #612]	; (3388 <bt_recv+0x2d4>)
    3124:	489a      	ldr	r0, [pc, #616]	; (3390 <bt_recv+0x2dc>)
    3126:	47b0      	blx	r6
    3128:	e7e9      	b.n	30fe <bt_recv+0x4a>
	acl(buf)->id = bt_conn_get_id(conn);
    312a:	f001 fd69 	bl	4c00 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    312e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    3130:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    3132:	4621      	mov	r1, r4
    3134:	4628      	mov	r0, r5
    3136:	f000 fdd7 	bl	3ce8 <bt_conn_recv>
	bt_conn_unref(conn);
    313a:	4628      	mov	r0, r5
    313c:	f001 f900 	bl	4340 <bt_conn_unref>
		return 0;
    3140:	2000      	movs	r0, #0
}
    3142:	b015      	add	sp, #84	; 0x54
    3144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3148:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    314a:	7832      	ldrb	r2, [r6, #0]
    314c:	2a13      	cmp	r2, #19
    314e:	f200 831a 	bhi.w	3786 <bt_recv+0x6d2>
    3152:	4093      	lsls	r3, r2
    3154:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3158:	f000 8315 	beq.w	3786 <bt_recv+0x6d2>
    315c:	4b86      	ldr	r3, [pc, #536]	; (3378 <bt_recv+0x2c4>)
    315e:	9301      	str	r3, [sp, #4]
    3160:	9300      	str	r3, [sp, #0]
    3162:	4b86      	ldr	r3, [pc, #536]	; (337c <bt_recv+0x2c8>)
    3164:	4a86      	ldr	r2, [pc, #536]	; (3380 <bt_recv+0x2cc>)
    3166:	681c      	ldr	r4, [r3, #0]
    3168:	4987      	ldr	r1, [pc, #540]	; (3388 <bt_recv+0x2d4>)
    316a:	4b8a      	ldr	r3, [pc, #552]	; (3394 <bt_recv+0x2e0>)
    316c:	488a      	ldr	r0, [pc, #552]	; (3398 <bt_recv+0x2e4>)
    316e:	47a0      	blx	r4
    3170:	4040      	eors	r0, r0
    3172:	f380 8811 	msr	BASEPRI, r0
    3176:	f04f 0004 	mov.w	r0, #4
    317a:	df02      	svc	2
    317c:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    317e:	783e      	ldrb	r6, [r7, #0]
    3180:	2e00      	cmp	r6, #0
    3182:	d1bc      	bne.n	30fe <bt_recv+0x4a>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3184:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    3188:	4640      	mov	r0, r8
    318a:	f001 f88b 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    318e:	4605      	mov	r5, r0
    3190:	b9d0      	cbnz	r0, 31c8 <bt_recv+0x114>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3192:	4b79      	ldr	r3, [pc, #484]	; (3378 <bt_recv+0x2c4>)
    3194:	9302      	str	r3, [sp, #8]
    3196:	e88d 0108 	stmia.w	sp, {r3, r8}
    319a:	4b78      	ldr	r3, [pc, #480]	; (337c <bt_recv+0x2c8>)
    319c:	4a78      	ldr	r2, [pc, #480]	; (3380 <bt_recv+0x2cc>)
    319e:	681d      	ldr	r5, [r3, #0]
    31a0:	4979      	ldr	r1, [pc, #484]	; (3388 <bt_recv+0x2d4>)
    31a2:	4b7e      	ldr	r3, [pc, #504]	; (339c <bt_recv+0x2e8>)
    31a4:	487e      	ldr	r0, [pc, #504]	; (33a0 <bt_recv+0x2ec>)
    31a6:	47a8      	blx	r5
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    31a8:	2107      	movs	r1, #7
    31aa:	487e      	ldr	r0, [pc, #504]	; (33a4 <bt_recv+0x2f0>)
    31ac:	f7fe ff9a 	bl	20e4 <atomic_test_bit>
    31b0:	2800      	cmp	r0, #0
    31b2:	d0a4      	beq.n	30fe <bt_recv+0x4a>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    31b4:	2106      	movs	r1, #6
    31b6:	487b      	ldr	r0, [pc, #492]	; (33a4 <bt_recv+0x2f0>)
    31b8:	f7fe ff94 	bl	20e4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    31bc:	2800      	cmp	r0, #0
    31be:	d19e      	bne.n	30fe <bt_recv+0x4a>
		set_advertise_enable(true);
    31c0:	2001      	movs	r0, #1
    31c2:	f7ff f881 	bl	22c8 <set_advertise_enable>
    31c6:	e79a      	b.n	30fe <bt_recv+0x4a>
	conn->err = evt->reason;
    31c8:	78fb      	ldrb	r3, [r7, #3]
    31ca:	7203      	strb	r3, [r0, #8]
	k_thread_foreach(hci_stack_dump, "HCI");
    31cc:	4976      	ldr	r1, [pc, #472]	; (33a8 <bt_recv+0x2f4>)
    31ce:	4877      	ldr	r0, [pc, #476]	; (33ac <bt_recv+0x2f8>)
    31d0:	f011 f912 	bl	143f8 <k_thread_foreach>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    31d4:	4631      	mov	r1, r6
    31d6:	4628      	mov	r0, r5
    31d8:	f001 f972 	bl	44c0 <bt_conn_set_state>
	conn->handle = 0;
    31dc:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    31de:	78ae      	ldrb	r6, [r5, #2]
    31e0:	b10e      	cbz	r6, 31e6 <bt_recv+0x132>
	bt_conn_unref(conn);
    31e2:	4628      	mov	r0, r5
    31e4:	e089      	b.n	32fa <bt_recv+0x246>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    31e6:	4631      	mov	r1, r6
    31e8:	1d28      	adds	r0, r5, #4
    31ea:	f7fe ff7b 	bl	20e4 <atomic_test_bit>
    31ee:	b130      	cbz	r0, 31fe <bt_recv+0x14a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    31f0:	4628      	mov	r0, r5
    31f2:	2101      	movs	r1, #1
    31f4:	f001 f964 	bl	44c0 <bt_conn_set_state>
		bt_le_scan_update(false);
    31f8:	4630      	mov	r0, r6
    31fa:	f7ff f9d9 	bl	25b0 <bt_le_scan_update>
	bt_conn_unref(conn);
    31fe:	4628      	mov	r0, r5
    3200:	f001 f89e 	bl	4340 <bt_conn_unref>
    3204:	e7d0      	b.n	31a8 <bt_recv+0xf4>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3206:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3208:	2101      	movs	r1, #1
    320a:	4628      	mov	r0, r5
    320c:	f00f fe9d 	bl	12f4a <net_buf_simple_pull>
	switch (evt->subevent) {
    3210:	7836      	ldrb	r6, [r6, #0]
    3212:	1e73      	subs	r3, r6, #1
    3214:	2b0b      	cmp	r3, #11
    3216:	f200 8292 	bhi.w	373e <bt_recv+0x68a>
    321a:	e8df f013 	tbh	[pc, r3, lsl #1]
    321e:	000c      	.short	0x000c
    3220:	004301a4 	.word	0x004301a4
    3224:	02900071 	.word	0x02900071
    3228:	012f00d1 	.word	0x012f00d1
    322c:	01950175 	.word	0x01950175
    3230:	02900041 	.word	0x02900041
    3234:	014a      	.short	0x014a
    3236:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    3238:	780b      	ldrb	r3, [r1, #0]
    323a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    323e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    3242:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    3246:	78cb      	ldrb	r3, [r1, #3]
    3248:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    324c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    3250:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    3254:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    3258:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    325c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    3260:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	enh.clock_accuracy = evt->clock_accuracy;
    3264:	7c4b      	ldrb	r3, [r1, #17]
    3266:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    326a:	3104      	adds	r1, #4
    326c:	a80d      	add	r0, sp, #52	; 0x34
    326e:	f7fe fe9d 	bl	1fac <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    3272:	2500      	movs	r5, #0
    3274:	2206      	movs	r2, #6
    3276:	a908      	add	r1, sp, #32
    3278:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    327c:	9508      	str	r5, [sp, #32]
    327e:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    3282:	f7fe fccd 	bl	1c20 <memcpy>
    3286:	2206      	movs	r2, #6
    3288:	a90a      	add	r1, sp, #40	; 0x28
    328a:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    328e:	950a      	str	r5, [sp, #40]	; 0x28
    3290:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    3294:	f7fe fcc4 	bl	1c20 <memcpy>
	le_enh_conn_complete(&enh);
    3298:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    329a:	f7ff fd41 	bl	2d20 <le_enh_conn_complete>
    329e:	e72e      	b.n	30fe <bt_recv+0x4a>
    32a0:	68a0      	ldr	r0, [r4, #8]
    32a2:	e7fa      	b.n	329a <bt_recv+0x1e6>
    32a4:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    32a6:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    32aa:	4638      	mov	r0, r7
    32ac:	f000 fffa 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    32b0:	4606      	mov	r6, r0
    32b2:	b958      	cbnz	r0, 32cc <bt_recv+0x218>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    32b4:	4b30      	ldr	r3, [pc, #192]	; (3378 <bt_recv+0x2c4>)
    32b6:	9302      	str	r3, [sp, #8]
    32b8:	e88d 0088 	stmia.w	sp, {r3, r7}
    32bc:	4b2f      	ldr	r3, [pc, #188]	; (337c <bt_recv+0x2c8>)
    32be:	681d      	ldr	r5, [r3, #0]
    32c0:	4b3b      	ldr	r3, [pc, #236]	; (33b0 <bt_recv+0x2fc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    32c2:	4a2f      	ldr	r2, [pc, #188]	; (3380 <bt_recv+0x2cc>)
    32c4:	4930      	ldr	r1, [pc, #192]	; (3388 <bt_recv+0x2d4>)
    32c6:	483b      	ldr	r0, [pc, #236]	; (33b4 <bt_recv+0x300>)
    32c8:	47a8      	blx	r5
    32ca:	e718      	b.n	30fe <bt_recv+0x4a>
	if (!evt->status) {
    32cc:	782b      	ldrb	r3, [r5, #0]
    32ce:	b99b      	cbnz	r3, 32f8 <bt_recv+0x244>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    32d0:	792a      	ldrb	r2, [r5, #4]
    32d2:	78eb      	ldrb	r3, [r5, #3]
    32d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32d8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    32dc:	79aa      	ldrb	r2, [r5, #6]
    32de:	796b      	ldrb	r3, [r5, #5]
    32e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32e4:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    32e8:	79eb      	ldrb	r3, [r5, #7]
    32ea:	7a2a      	ldrb	r2, [r5, #8]
    32ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    32f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		notify_le_param_updated(conn);
    32f4:	f000 fcbc 	bl	3c70 <notify_le_param_updated>
	bt_conn_unref(conn);
    32f8:	4630      	mov	r0, r6
	bt_conn_unref(conn);
    32fa:	f001 f821 	bl	4340 <bt_conn_unref>
    32fe:	e6fe      	b.n	30fe <bt_recv+0x4a>
    3300:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3302:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    3306:	4638      	mov	r0, r7
    3308:	f000 ffcc 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    330c:	4605      	mov	r5, r0
    330e:	b938      	cbnz	r0, 3320 <bt_recv+0x26c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3310:	4b19      	ldr	r3, [pc, #100]	; (3378 <bt_recv+0x2c4>)
    3312:	9302      	str	r3, [sp, #8]
    3314:	e88d 0088 	stmia.w	sp, {r3, r7}
    3318:	4b18      	ldr	r3, [pc, #96]	; (337c <bt_recv+0x2c8>)
    331a:	681d      	ldr	r5, [r3, #0]
    331c:	4b26      	ldr	r3, [pc, #152]	; (33b8 <bt_recv+0x304>)
    331e:	e7d0      	b.n	32c2 <bt_recv+0x20e>
	if (!evt->status) {
    3320:	7833      	ldrb	r3, [r6, #0]
    3322:	b923      	cbnz	r3, 332e <bt_recv+0x27a>
		memcpy(conn->le.features, evt->features,
    3324:	2208      	movs	r2, #8
    3326:	1cf1      	adds	r1, r6, #3
    3328:	306c      	adds	r0, #108	; 0x6c
    332a:	f7fe fc79 	bl	1c20 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    332e:	4e23      	ldr	r6, [pc, #140]	; (33bc <bt_recv+0x308>)
    3330:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    3334:	07d2      	lsls	r2, r2, #31
    3336:	d50c      	bpl.n	3352 <bt_recv+0x29e>
    3338:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
    333c:	07db      	lsls	r3, r3, #31
    333e:	d508      	bpl.n	3352 <bt_recv+0x29e>
		err = hci_le_set_phy(conn);
    3340:	4628      	mov	r0, r5
    3342:	f7ff fca3 	bl	2c8c <hci_le_set_phy.isra.28>
		if (!err) {
    3346:	b920      	cbnz	r0, 3352 <bt_recv+0x29e>
    3348:	2180      	movs	r1, #128	; 0x80
    334a:	1d28      	adds	r0, r5, #4
    334c:	f7fe fe31 	bl	1fb2 <atomic_or>
    3350:	e747      	b.n	31e2 <bt_recv+0x12e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    3352:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    3356:	069f      	lsls	r7, r3, #26
    3358:	f140 80a7 	bpl.w	34aa <bt_recv+0x3f6>
    335c:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    3360:	069e      	lsls	r6, r3, #26
    3362:	f140 80a2 	bpl.w	34aa <bt_recv+0x3f6>
		err = hci_le_set_data_len(conn);
    3366:	4628      	mov	r0, r5
    3368:	f7ff fcb0 	bl	2ccc <hci_le_set_data_len.isra.29>
		if (!err) {
    336c:	2800      	cmp	r0, #0
    336e:	f040 809c 	bne.w	34aa <bt_recv+0x3f6>
    3372:	f44f 7180 	mov.w	r1, #256	; 0x100
    3376:	e7e8      	b.n	334a <bt_recv+0x296>
    3378:	00014c55 	.word	0x00014c55
    337c:	20003aa4 	.word	0x20003aa4
    3380:	000159c3 	.word	0x000159c3
    3384:	000151d9 	.word	0x000151d9
    3388:	00015a12 	.word	0x00015a12
    338c:	000156f3 	.word	0x000156f3
    3390:	00015727 	.word	0x00015727
    3394:	000152b0 	.word	0x000152b0
    3398:	00015852 	.word	0x00015852
    339c:	000151fb 	.word	0x000151fb
    33a0:	00015759 	.word	0x00015759
    33a4:	20003b18 	.word	0x20003b18
    33a8:	0001578f 	.word	0x0001578f
    33ac:	00001f71 	.word	0x00001f71
    33b0:	00015279 	.word	0x00015279
    33b4:	00015793 	.word	0x00015793
    33b8:	00015225 	.word	0x00015225
    33bc:	20003aa8 	.word	0x20003aa8
    33c0:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    33c2:	78d9      	ldrb	r1, [r3, #3]
    33c4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    33c6:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    33c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    33cc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    33d0:	7959      	ldrb	r1, [r3, #5]
    33d2:	791a      	ldrb	r2, [r3, #4]
    33d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    33d8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    33dc:	799a      	ldrb	r2, [r3, #6]
    33de:	79d9      	ldrb	r1, [r3, #7]
    33e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    33e4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    33e8:	7a1a      	ldrb	r2, [r3, #8]
    33ea:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    33ec:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    33ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    33f2:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    33f4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    33f8:	f000 ff54 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    33fc:	4680      	mov	r8, r0
    33fe:	b978      	cbnz	r0, 3420 <bt_recv+0x36c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3400:	4bb6      	ldr	r3, [pc, #728]	; (36dc <bt_recv+0x628>)
    3402:	9302      	str	r3, [sp, #8]
    3404:	e88d 0028 	stmia.w	sp, {r3, r5}
    3408:	4bb5      	ldr	r3, [pc, #724]	; (36e0 <bt_recv+0x62c>)
    340a:	4ab6      	ldr	r2, [pc, #728]	; (36e4 <bt_recv+0x630>)
    340c:	681e      	ldr	r6, [r3, #0]
    340e:	49b6      	ldr	r1, [pc, #728]	; (36e8 <bt_recv+0x634>)
    3410:	4bb6      	ldr	r3, [pc, #728]	; (36ec <bt_recv+0x638>)
    3412:	48b7      	ldr	r0, [pc, #732]	; (36f0 <bt_recv+0x63c>)
    3414:	47b0      	blx	r6
		return le_conn_param_neg_reply(handle,
    3416:	2102      	movs	r1, #2
    3418:	4628      	mov	r0, r5
    341a:	f7ff fd5f 	bl	2edc <le_conn_param_neg_reply>
    341e:	e66e      	b.n	30fe <bt_recv+0x4a>
	if (!le_param_req(conn, &param)) {
    3420:	a90c      	add	r1, sp, #48	; 0x30
    3422:	f000 fc39 	bl	3c98 <le_param_req>
    3426:	b928      	cbnz	r0, 3434 <bt_recv+0x380>
		err = le_conn_param_neg_reply(handle,
    3428:	211e      	movs	r1, #30
    342a:	4628      	mov	r0, r5
    342c:	f7ff fd56 	bl	2edc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3430:	4640      	mov	r0, r8
    3432:	e762      	b.n	32fa <bt_recv+0x246>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3434:	210e      	movs	r1, #14
    3436:	f242 0020 	movw	r0, #8224	; 0x2020
    343a:	f7fe fe61 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    343e:	4606      	mov	r6, r0
    3440:	2800      	cmp	r0, #0
    3442:	d0f5      	beq.n	3430 <bt_recv+0x37c>
	cp = net_buf_add(buf, sizeof(*cp));
    3444:	210e      	movs	r1, #14
    3446:	3008      	adds	r0, #8
    3448:	f00f fd60 	bl	12f0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    344c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    344e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3450:	2100      	movs	r1, #0
    3452:	f7fe fc11 	bl	1c78 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3456:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    345a:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    345c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    3460:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    3462:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    3466:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    3468:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    346c:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    346e:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    3470:	4631      	mov	r1, r6
    3472:	f242 0020 	movw	r0, #8224	; 0x2020
    3476:	f7ff f811 	bl	249c <bt_hci_cmd_send>
    347a:	e7d9      	b.n	3430 <bt_recv+0x37c>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    347c:	68a3      	ldr	r3, [r4, #8]
    347e:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    3480:	4630      	mov	r0, r6
    3482:	f000 ff0f 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    3486:	4605      	mov	r5, r0
    3488:	b938      	cbnz	r0, 349a <bt_recv+0x3e6>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    348a:	4b94      	ldr	r3, [pc, #592]	; (36dc <bt_recv+0x628>)
    348c:	9302      	str	r3, [sp, #8]
    348e:	e88d 0048 	stmia.w	sp, {r3, r6}
    3492:	4b93      	ldr	r3, [pc, #588]	; (36e0 <bt_recv+0x62c>)
    3494:	681d      	ldr	r5, [r3, #0]
    3496:	4b97      	ldr	r3, [pc, #604]	; (36f4 <bt_recv+0x640>)
    3498:	e713      	b.n	32c2 <bt_recv+0x20e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    349a:	f46f 7180 	mvn.w	r1, #256	; 0x100
    349e:	3004      	adds	r0, #4
    34a0:	f7fe fd98 	bl	1fd4 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    34a4:	05c0      	lsls	r0, r0, #23
    34a6:	f57f ae9c 	bpl.w	31e2 <bt_recv+0x12e>
	update_conn_param(conn);
    34aa:	4628      	mov	r0, r5
    34ac:	f7fe fda4 	bl	1ff8 <update_conn_param>
    34b0:	e697      	b.n	31e2 <bt_recv+0x12e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    34b2:	68a3      	ldr	r3, [r4, #8]
    34b4:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    34b8:	4630      	mov	r0, r6
    34ba:	f000 fef3 	bl	42a4 <bt_conn_lookup_handle>
	if (!conn) {
    34be:	4605      	mov	r5, r0
    34c0:	b938      	cbnz	r0, 34d2 <bt_recv+0x41e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    34c2:	4b86      	ldr	r3, [pc, #536]	; (36dc <bt_recv+0x628>)
    34c4:	9302      	str	r3, [sp, #8]
    34c6:	e88d 0048 	stmia.w	sp, {r3, r6}
    34ca:	4b85      	ldr	r3, [pc, #532]	; (36e0 <bt_recv+0x62c>)
    34cc:	681d      	ldr	r5, [r3, #0]
    34ce:	4b8a      	ldr	r3, [pc, #552]	; (36f8 <bt_recv+0x644>)
    34d0:	e6f7      	b.n	32c2 <bt_recv+0x20e>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    34d2:	1d06      	adds	r6, r0, #4
    34d4:	f06f 0180 	mvn.w	r1, #128	; 0x80
    34d8:	4630      	mov	r0, r6
    34da:	f7fe fd7b 	bl	1fd4 <atomic_and>
    34de:	0601      	lsls	r1, r0, #24
    34e0:	f57f ae7f 	bpl.w	31e2 <bt_recv+0x12e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    34e4:	4b85      	ldr	r3, [pc, #532]	; (36fc <bt_recv+0x648>)
    34e6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    34ea:	069a      	lsls	r2, r3, #26
    34ec:	d5dd      	bpl.n	34aa <bt_recv+0x3f6>
    34ee:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
    34f2:	069b      	lsls	r3, r3, #26
    34f4:	d5d9      	bpl.n	34aa <bt_recv+0x3f6>
		err = hci_le_set_data_len(conn);
    34f6:	4628      	mov	r0, r5
    34f8:	f7ff fbe8 	bl	2ccc <hci_le_set_data_len.isra.29>
		if (!err) {
    34fc:	2800      	cmp	r0, #0
    34fe:	d1d4      	bne.n	34aa <bt_recv+0x3f6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3500:	f44f 7180 	mov.w	r1, #256	; 0x100
    3504:	4630      	mov	r0, r6
    3506:	e721      	b.n	334c <bt_recv+0x298>
    3508:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    350a:	487d      	ldr	r0, [pc, #500]	; (3700 <bt_recv+0x64c>)
    350c:	f06f 0120 	mvn.w	r1, #32
    3510:	f7fe fd60 	bl	1fd4 <atomic_and>
	if (!evt->status) {
    3514:	7833      	ldrb	r3, [r6, #0]
    3516:	b943      	cbnz	r3, 352a <bt_recv+0x476>
		memcpy(pub_key, evt->key, 64);
    3518:	1c71      	adds	r1, r6, #1
    351a:	2240      	movs	r2, #64	; 0x40
    351c:	4879      	ldr	r0, [pc, #484]	; (3704 <bt_recv+0x650>)
    351e:	f7fe fb7f 	bl	1c20 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3522:	2110      	movs	r1, #16
    3524:	4876      	ldr	r0, [pc, #472]	; (3700 <bt_recv+0x64c>)
    3526:	f7fe fd44 	bl	1fb2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    352a:	4b77      	ldr	r3, [pc, #476]	; (3708 <bt_recv+0x654>)
    352c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    352e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3530:	2d00      	cmp	r5, #0
    3532:	f43f ade4 	beq.w	30fe <bt_recv+0x4a>
		cb->func(evt->status ? NULL : evt->key);
    3536:	7832      	ldrb	r2, [r6, #0]
    3538:	682b      	ldr	r3, [r5, #0]
    353a:	2a00      	cmp	r2, #0
    353c:	bf0c      	ite	eq
    353e:	4638      	moveq	r0, r7
    3540:	2000      	movne	r0, #0
    3542:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3544:	686d      	ldr	r5, [r5, #4]
    3546:	e7f3      	b.n	3530 <bt_recv+0x47c>
	if (dh_key_cb) {
    3548:	4d70      	ldr	r5, [pc, #448]	; (370c <bt_recv+0x658>)
    354a:	68a0      	ldr	r0, [r4, #8]
    354c:	682a      	ldr	r2, [r5, #0]
    354e:	2a00      	cmp	r2, #0
    3550:	f43f add5 	beq.w	30fe <bt_recv+0x4a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3554:	7803      	ldrb	r3, [r0, #0]
    3556:	b923      	cbnz	r3, 3562 <bt_recv+0x4ae>
    3558:	3001      	adds	r0, #1
    355a:	4790      	blx	r2
		dh_key_cb = NULL;
    355c:	2300      	movs	r3, #0
    355e:	602b      	str	r3, [r5, #0]
    3560:	e5cd      	b.n	30fe <bt_recv+0x4a>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3562:	2000      	movs	r0, #0
    3564:	e7f9      	b.n	355a <bt_recv+0x4a6>
	u8_t num_reports = net_buf_pull_u8(buf);
    3566:	4628      	mov	r0, r5
    3568:	f00f fcf7 	bl	12f5a <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    356c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 3700 <bt_recv+0x64c>
	u8_t num_reports = net_buf_pull_u8(buf);
    3570:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    3572:	9b06      	ldr	r3, [sp, #24]
    3574:	2b00      	cmp	r3, #0
    3576:	f43f adc2 	beq.w	30fe <bt_recv+0x4a>
		info = (void *)buf->data;
    357a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    357c:	2109      	movs	r1, #9
    357e:	4628      	mov	r0, r5
    3580:	f00f fce3 	bl	12f4a <net_buf_simple_pull>
		rssi = info->data[info->length];
    3584:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3586:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    3588:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
    358a:	a80c      	add	r0, sp, #48	; 0x30
		rssi = info->data[info->length];
    358c:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3590:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    3594:	3b02      	subs	r3, #2
    3596:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    3598:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    359a:	f200 809b 	bhi.w	36d4 <bt_recv+0x620>
			bt_addr_le_copy(&id_addr, &info->addr);
    359e:	f7fe fd05 	bl	1fac <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    35a2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    35a6:	3b02      	subs	r3, #2
    35a8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    35ac:	4b58      	ldr	r3, [pc, #352]	; (3710 <bt_recv+0x65c>)
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	b1bb      	cbz	r3, 35e2 <bt_recv+0x52e>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    35b2:	4628      	mov	r0, r5
    35b4:	f00f fce1 	bl	12f7a <net_buf_simple_headroom>
	state->len = buf->len;
    35b8:	89a3      	ldrh	r3, [r4, #12]
    35ba:	9307      	str	r3, [sp, #28]
			buf->len = info->length;
    35bc:	7a33      	ldrb	r3, [r6, #8]
    35be:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    35c0:	4b53      	ldr	r3, [pc, #332]	; (3710 <bt_recv+0x65c>)
    35c2:	7832      	ldrb	r2, [r6, #0]
    35c4:	681b      	ldr	r3, [r3, #0]
	state->offset = net_buf_simple_headroom(buf);
    35c6:	4682      	mov	sl, r0
    35c8:	461f      	mov	r7, r3
    35ca:	fa4f f18b 	sxtb.w	r1, fp
    35ce:	462b      	mov	r3, r5
    35d0:	a80c      	add	r0, sp, #48	; 0x30
    35d2:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    35d4:	6923      	ldr	r3, [r4, #16]
    35d6:	fa13 f38a 	uxtah	r3, r3, sl
    35da:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    35dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    35e0:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    35e2:	2109      	movs	r1, #9
    35e4:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    35e6:	7832      	ldrb	r2, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    35e8:	f7fe fd7c 	bl	20e4 <atomic_test_bit>
    35ec:	4682      	mov	sl, r0
    35ee:	2800      	cmp	r0, #0
    35f0:	d166      	bne.n	36c0 <bt_recv+0x60c>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    35f2:	2a01      	cmp	r2, #1
    35f4:	d864      	bhi.n	36c0 <bt_recv+0x60c>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    35f6:	2101      	movs	r1, #1
    35f8:	a80c      	add	r0, sp, #48	; 0x30
    35fa:	f000 fe83 	bl	4304 <bt_conn_lookup_state_le>
	if (!conn) {
    35fe:	4607      	mov	r7, r0
    3600:	2800      	cmp	r0, #0
    3602:	d05d      	beq.n	36c0 <bt_recv+0x60c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3604:	2108      	movs	r1, #8
    3606:	4648      	mov	r0, r9
    3608:	f7fe fd6c 	bl	20e4 <atomic_test_bit>
    360c:	2800      	cmp	r0, #0
    360e:	f040 8083 	bne.w	3718 <bt_recv+0x664>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3612:	2102      	movs	r1, #2
    3614:	4648      	mov	r0, r9
    3616:	f7fe fd65 	bl	20e4 <atomic_test_bit>
    361a:	b110      	cbz	r0, 3622 <bt_recv+0x56e>
			set_random_address(&bt_dev.id_addr.a);
    361c:	483d      	ldr	r0, [pc, #244]	; (3714 <bt_recv+0x660>)
    361e:	f7fe fe13 	bl	2248 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3622:	4936      	ldr	r1, [pc, #216]	; (36fc <bt_recv+0x648>)
    3624:	f107 0053 	add.w	r0, r7, #83	; 0x53
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3628:	f107 0a5a 	add.w	sl, r7, #90	; 0x5a
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    362c:	f7fe fcbe 	bl	1fac <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3630:	4641      	mov	r1, r8
    3632:	4650      	mov	r0, sl
    3634:	f7fe fcba 	bl	1fac <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3638:	2119      	movs	r1, #25
    363a:	f242 000d 	movw	r0, #8205	; 0x200d
    363e:	f7fe fd5f 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    3642:	4683      	mov	fp, r0
    3644:	2800      	cmp	r0, #0
    3646:	d06d      	beq.n	3724 <bt_recv+0x670>
	cp = net_buf_add(buf, sizeof(*cp));
    3648:	2119      	movs	r1, #25
    364a:	3008      	adds	r0, #8
    364c:	f00f fc5e 	bl	12f0c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3650:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3652:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    3654:	2100      	movs	r1, #0
    3656:	f7fe fb0f 	bl	1c78 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    365a:	2200      	movs	r2, #0
    365c:	2360      	movs	r3, #96	; 0x60
    365e:	f888 3000 	strb.w	r3, [r8]
    3662:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    3666:	f888 3002 	strb.w	r3, [r8, #2]
    366a:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    366e:	4651      	mov	r1, sl
    3670:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    3674:	9207      	str	r2, [sp, #28]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3676:	f7fe fc99 	bl	1fac <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    367a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    367e:	f888 300c 	strb.w	r3, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3682:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    3686:	f8a8 300d 	strh.w	r3, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    368a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    368e:	f8a8 300f 	strh.w	r3, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3692:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    3696:	f8a8 3011 	strh.w	r3, [r8, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    369a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
    369e:	f8a8 3013 	strh.w	r3, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    36a2:	9a07      	ldr	r2, [sp, #28]
    36a4:	4659      	mov	r1, fp
    36a6:	f242 000d 	movw	r0, #8205	; 0x200d
    36aa:	f7fe fd59 	bl	2160 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    36ae:	2800      	cmp	r0, #0
    36b0:	d138      	bne.n	3724 <bt_recv+0x670>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    36b2:	4638      	mov	r0, r7
    36b4:	2102      	movs	r1, #2
    36b6:	f000 ff03 	bl	44c0 <bt_conn_set_state>
	bt_conn_unref(conn);
    36ba:	4638      	mov	r0, r7
    36bc:	f000 fe40 	bl	4340 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    36c0:	7a31      	ldrb	r1, [r6, #8]
    36c2:	4628      	mov	r0, r5
    36c4:	3101      	adds	r1, #1
    36c6:	f00f fc40 	bl	12f4a <net_buf_simple_pull>
    36ca:	9b06      	ldr	r3, [sp, #24]
    36cc:	3b01      	subs	r3, #1
    36ce:	b2db      	uxtb	r3, r3
    36d0:	9306      	str	r3, [sp, #24]
    36d2:	e74e      	b.n	3572 <bt_recv+0x4be>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    36d4:	f7fe fc6a 	bl	1fac <bt_addr_le_copy>
    36d8:	e768      	b.n	35ac <bt_recv+0x4f8>
    36da:	bf00      	nop
    36dc:	00014c55 	.word	0x00014c55
    36e0:	20003aa4 	.word	0x20003aa4
    36e4:	000159c3 	.word	0x000159c3
    36e8:	00015a12 	.word	0x00015a12
    36ec:	00015267 	.word	0x00015267
    36f0:	00015793 	.word	0x00015793
    36f4:	0001523d 	.word	0x0001523d
    36f8:	00015250 	.word	0x00015250
    36fc:	20003aa8 	.word	0x20003aa8
    3700:	20003b18 	.word	0x20003b18
    3704:	20000290 	.word	0x20000290
    3708:	200002d0 	.word	0x200002d0
    370c:	2000028c 	.word	0x2000028c
    3710:	200002d8 	.word	0x200002d8
    3714:	20003aa9 	.word	0x20003aa9
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3718:	4650      	mov	r0, sl
    371a:	f7fe fd5f 	bl	21dc <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    371e:	2800      	cmp	r0, #0
    3720:	f43f af77 	beq.w	3612 <bt_recv+0x55e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3724:	231f      	movs	r3, #31
    3726:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3728:	2100      	movs	r1, #0
    372a:	4638      	mov	r0, r7
    372c:	f000 fec8 	bl	44c0 <bt_conn_set_state>
	bt_conn_unref(conn);
    3730:	4638      	mov	r0, r7
    3732:	f000 fe05 	bl	4340 <bt_conn_unref>
	bt_le_scan_update(false);
    3736:	2000      	movs	r0, #0
    3738:	f7fe ff3a 	bl	25b0 <bt_le_scan_update>
    373c:	e7c0      	b.n	36c0 <bt_recv+0x60c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    373e:	89a5      	ldrh	r5, [r4, #12]
    3740:	4b20      	ldr	r3, [pc, #128]	; (37c4 <bt_recv+0x710>)
    3742:	68a0      	ldr	r0, [r4, #8]
    3744:	681f      	ldr	r7, [r3, #0]
    3746:	4629      	mov	r1, r5
    3748:	f7fe faba 	bl	1cc0 <bt_hex>
    374c:	4b1e      	ldr	r3, [pc, #120]	; (37c8 <bt_recv+0x714>)
    374e:	9304      	str	r3, [sp, #16]
    3750:	9003      	str	r0, [sp, #12]
    3752:	e88d 0048 	stmia.w	sp, {r3, r6}
    3756:	4a1d      	ldr	r2, [pc, #116]	; (37cc <bt_recv+0x718>)
    3758:	4b1d      	ldr	r3, [pc, #116]	; (37d0 <bt_recv+0x71c>)
    375a:	491e      	ldr	r1, [pc, #120]	; (37d4 <bt_recv+0x720>)
    375c:	481e      	ldr	r0, [pc, #120]	; (37d8 <bt_recv+0x724>)
    375e:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3760:	47b8      	blx	r7
    3762:	e4cc      	b.n	30fe <bt_recv+0x4a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3764:	4a18      	ldr	r2, [pc, #96]	; (37c8 <bt_recv+0x714>)
    3766:	9202      	str	r2, [sp, #8]
    3768:	e88d 000c 	stmia.w	sp, {r2, r3}
    376c:	4b15      	ldr	r3, [pc, #84]	; (37c4 <bt_recv+0x710>)
    376e:	4a1b      	ldr	r2, [pc, #108]	; (37dc <bt_recv+0x728>)
    3770:	681d      	ldr	r5, [r3, #0]
    3772:	4918      	ldr	r1, [pc, #96]	; (37d4 <bt_recv+0x720>)
    3774:	4b1a      	ldr	r3, [pc, #104]	; (37e0 <bt_recv+0x72c>)
    3776:	481b      	ldr	r0, [pc, #108]	; (37e4 <bt_recv+0x730>)
    3778:	47a8      	blx	r5
		net_buf_unref(buf);
    377a:	4620      	mov	r0, r4
    377c:	f00f fb8e 	bl	12e9c <net_buf_unref>
		return -EINVAL;
    3780:	f06f 0015 	mvn.w	r0, #21
    3784:	e4dd      	b.n	3142 <bt_recv+0x8e>
	net_buf_pull(buf, sizeof(*hdr));
    3786:	f104 0508 	add.w	r5, r4, #8
    378a:	2102      	movs	r1, #2
    378c:	4628      	mov	r0, r5
    378e:	f00f fbdc 	bl	12f4a <net_buf_simple_pull>
	switch (hdr->evt) {
    3792:	7836      	ldrb	r6, [r6, #0]
    3794:	2e05      	cmp	r6, #5
    3796:	f43f acf1 	beq.w	317c <bt_recv+0xc8>
    379a:	2e3e      	cmp	r6, #62	; 0x3e
    379c:	f43f ad33 	beq.w	3206 <bt_recv+0x152>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    37a0:	89a5      	ldrh	r5, [r4, #12]
    37a2:	4b08      	ldr	r3, [pc, #32]	; (37c4 <bt_recv+0x710>)
    37a4:	68a0      	ldr	r0, [r4, #8]
    37a6:	681f      	ldr	r7, [r3, #0]
    37a8:	4629      	mov	r1, r5
    37aa:	f7fe fa89 	bl	1cc0 <bt_hex>
    37ae:	4b06      	ldr	r3, [pc, #24]	; (37c8 <bt_recv+0x714>)
    37b0:	9304      	str	r3, [sp, #16]
    37b2:	9003      	str	r0, [sp, #12]
    37b4:	e88d 0048 	stmia.w	sp, {r3, r6}
    37b8:	9502      	str	r5, [sp, #8]
    37ba:	4b0b      	ldr	r3, [pc, #44]	; (37e8 <bt_recv+0x734>)
    37bc:	4a03      	ldr	r2, [pc, #12]	; (37cc <bt_recv+0x718>)
    37be:	4905      	ldr	r1, [pc, #20]	; (37d4 <bt_recv+0x720>)
    37c0:	480a      	ldr	r0, [pc, #40]	; (37ec <bt_recv+0x738>)
    37c2:	e7cd      	b.n	3760 <bt_recv+0x6ac>
    37c4:	20003aa4 	.word	0x20003aa4
    37c8:	00014c55 	.word	0x00014c55
    37cc:	00015a0b 	.word	0x00015a0b
    37d0:	0001529e 	.word	0x0001529e
    37d4:	00015a12 	.word	0x00015a12
    37d8:	000157c7 	.word	0x000157c7
    37dc:	000159c3 	.word	0x000159c3
    37e0:	0001532f 	.word	0x0001532f
    37e4:	0001582e 	.word	0x0001582e
    37e8:	000152b0 	.word	0x000152b0
    37ec:	000157fc 	.word	0x000157fc

000037f0 <bt_recv_prio>:
{
    37f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    37f4:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    37f6:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    37f8:	2b01      	cmp	r3, #1
{
    37fa:	b087      	sub	sp, #28
    37fc:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    37fe:	d00f      	beq.n	3820 <bt_recv_prio+0x30>
    3800:	4b6a      	ldr	r3, [pc, #424]	; (39ac <bt_recv_prio+0x1bc>)
    3802:	9301      	str	r3, [sp, #4]
    3804:	9300      	str	r3, [sp, #0]
    3806:	4b6a      	ldr	r3, [pc, #424]	; (39b0 <bt_recv_prio+0x1c0>)
    3808:	4a6a      	ldr	r2, [pc, #424]	; (39b4 <bt_recv_prio+0x1c4>)
    380a:	681c      	ldr	r4, [r3, #0]
    380c:	496a      	ldr	r1, [pc, #424]	; (39b8 <bt_recv_prio+0x1c8>)
    380e:	4b6b      	ldr	r3, [pc, #428]	; (39bc <bt_recv_prio+0x1cc>)
    3810:	486b      	ldr	r0, [pc, #428]	; (39c0 <bt_recv_prio+0x1d0>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3812:	47a0      	blx	r4
    3814:	4040      	eors	r0, r0
    3816:	f380 8811 	msr	BASEPRI, r0
    381a:	f04f 0004 	mov.w	r0, #4
    381e:	df02      	svc	2
    3820:	8982      	ldrh	r2, [r0, #12]
    3822:	2a01      	cmp	r2, #1
    3824:	d809      	bhi.n	383a <bt_recv_prio+0x4a>
    3826:	4b61      	ldr	r3, [pc, #388]	; (39ac <bt_recv_prio+0x1bc>)
    3828:	9301      	str	r3, [sp, #4]
    382a:	9300      	str	r3, [sp, #0]
    382c:	4b60      	ldr	r3, [pc, #384]	; (39b0 <bt_recv_prio+0x1c0>)
    382e:	4a61      	ldr	r2, [pc, #388]	; (39b4 <bt_recv_prio+0x1c4>)
    3830:	681c      	ldr	r4, [r3, #0]
    3832:	4961      	ldr	r1, [pc, #388]	; (39b8 <bt_recv_prio+0x1c8>)
    3834:	4b61      	ldr	r3, [pc, #388]	; (39bc <bt_recv_prio+0x1cc>)
    3836:	4863      	ldr	r0, [pc, #396]	; (39c4 <bt_recv_prio+0x1d4>)
    3838:	e7eb      	b.n	3812 <bt_recv_prio+0x22>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    383a:	7832      	ldrb	r2, [r6, #0]
    383c:	2a13      	cmp	r2, #19
    383e:	f200 80ab 	bhi.w	3998 <bt_recv_prio+0x1a8>
    3842:	4093      	lsls	r3, r2
    3844:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3848:	f000 80a6 	beq.w	3998 <bt_recv_prio+0x1a8>
	net_buf_pull(buf, sizeof(*hdr));
    384c:	f100 0508 	add.w	r5, r0, #8
    3850:	2102      	movs	r1, #2
    3852:	4628      	mov	r0, r5
    3854:	f00f fb79 	bl	12f4a <net_buf_simple_pull>
	switch (hdr->evt) {
    3858:	7833      	ldrb	r3, [r6, #0]
    385a:	2b0f      	cmp	r3, #15
    385c:	d01d      	beq.n	389a <bt_recv_prio+0xaa>
    385e:	2b13      	cmp	r3, #19
    3860:	d02b      	beq.n	38ba <bt_recv_prio+0xca>
    3862:	2b0e      	cmp	r3, #14
    3864:	f040 808b 	bne.w	397e <bt_recv_prio+0x18e>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3868:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    386a:	2103      	movs	r1, #3
    386c:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    386e:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3872:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3874:	f00f fb69 	bl	12f4a <net_buf_simple_pull>
	status = buf->data[0];
    3878:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    387a:	4622      	mov	r2, r4
    387c:	7819      	ldrb	r1, [r3, #0]
    387e:	4638      	mov	r0, r7
    3880:	f7fe fbc8 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    3884:	b116      	cbz	r6, 388c <bt_recv_prio+0x9c>
    3886:	4850      	ldr	r0, [pc, #320]	; (39c8 <bt_recv_prio+0x1d8>)
    3888:	f010 fc06 	bl	14098 <_impl_k_sem_give>
	net_buf_unref(buf);
    388c:	4620      	mov	r0, r4
    388e:	f00f fb05 	bl	12e9c <net_buf_unref>
}
    3892:	2000      	movs	r0, #0
    3894:	b007      	add	sp, #28
    3896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    389a:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    389c:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    38a0:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    38a2:	2104      	movs	r1, #4
    38a4:	4628      	mov	r0, r5
    38a6:	f00f fb50 	bl	12f4a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    38aa:	4622      	mov	r2, r4
    38ac:	7831      	ldrb	r1, [r6, #0]
    38ae:	4640      	mov	r0, r8
    38b0:	f7fe fbb0 	bl	2014 <hci_cmd_done>
	if (ncmd) {
    38b4:	2f00      	cmp	r7, #0
    38b6:	d0e9      	beq.n	388c <bt_recv_prio+0x9c>
    38b8:	e7e5      	b.n	3886 <bt_recv_prio+0x96>
    38ba:	f8d4 b008 	ldr.w	fp, [r4, #8]
				BT_ERR("packets count mismatch");
    38be:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 39b0 <bt_recv_prio+0x1c0>
    38c2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 39ac <bt_recv_prio+0x1bc>
	for (i = 0; i < evt->num_handles; i++) {
    38c6:	2600      	movs	r6, #0
    38c8:	f89b 3000 	ldrb.w	r3, [fp]
    38cc:	429e      	cmp	r6, r3
    38ce:	dadd      	bge.n	388c <bt_recv_prio+0x9c>
    38d0:	eb0b 0386 	add.w	r3, fp, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    38d4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    38d8:	f8b3 a003 	ldrh.w	sl, [r3, #3]
	__asm__ volatile(
    38dc:	f04f 0120 	mov.w	r1, #32
    38e0:	f3ef 8711 	mrs	r7, BASEPRI
    38e4:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    38e8:	4610      	mov	r0, r2
    38ea:	9205      	str	r2, [sp, #20]
    38ec:	f000 fcda 	bl	42a4 <bt_conn_lookup_handle>
		if (!conn) {
    38f0:	9a05      	ldr	r2, [sp, #20]
    38f2:	4605      	mov	r5, r0
    38f4:	b978      	cbnz	r0, 3916 <bt_recv_prio+0x126>
			BT_ERR("No connection for handle %u", handle);
    38f6:	9201      	str	r2, [sp, #4]
    38f8:	f8cd 8008 	str.w	r8, [sp, #8]
    38fc:	f8cd 8000 	str.w	r8, [sp]
    3900:	f8d9 5000 	ldr.w	r5, [r9]
    3904:	4b31      	ldr	r3, [pc, #196]	; (39cc <bt_recv_prio+0x1dc>)
    3906:	4a2b      	ldr	r2, [pc, #172]	; (39b4 <bt_recv_prio+0x1c4>)
    3908:	492b      	ldr	r1, [pc, #172]	; (39b8 <bt_recv_prio+0x1c8>)
    390a:	4831      	ldr	r0, [pc, #196]	; (39d0 <bt_recv_prio+0x1e0>)
    390c:	47a8      	blx	r5
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    390e:	f387 8811 	msr	BASEPRI, r7
	for (i = 0; i < evt->num_handles; i++) {
    3912:	3601      	adds	r6, #1
    3914:	e7d8      	b.n	38c8 <bt_recv_prio+0xd8>
    3916:	f387 8811 	msr	BASEPRI, r7
			k_fifo_put(&conn->tx_notify, node);
    391a:	f100 0718 	add.w	r7, r0, #24
		while (count--) {
    391e:	f1ba 0f00 	cmp.w	sl, #0
    3922:	d01f      	beq.n	3964 <bt_recv_prio+0x174>
	__asm__ volatile(
    3924:	f04f 0220 	mov.w	r2, #32
    3928:	f3ef 8e11 	mrs	lr, BASEPRI
    392c:	f382 8811 	msr	BASEPRI, r2
    3930:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode);
    3932:	b129      	cbz	r1, 3940 <bt_recv_prio+0x150>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    3934:	696a      	ldr	r2, [r5, #20]
	return node->next;
    3936:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    3938:	6128      	str	r0, [r5, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    393a:	4291      	cmp	r1, r2
	list->tail = node;
    393c:	bf08      	it	eq
    393e:	6168      	streq	r0, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3940:	f38e 8811 	msr	BASEPRI, lr
    3944:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    3948:	fa1f fa83 	uxth.w	sl, r3
			if (!node) {
    394c:	b971      	cbnz	r1, 396c <bt_recv_prio+0x17c>
				BT_ERR("packets count mismatch");
    394e:	f8cd 8004 	str.w	r8, [sp, #4]
    3952:	f8cd 8000 	str.w	r8, [sp]
    3956:	f8d9 7000 	ldr.w	r7, [r9]
    395a:	4b1c      	ldr	r3, [pc, #112]	; (39cc <bt_recv_prio+0x1dc>)
    395c:	4a15      	ldr	r2, [pc, #84]	; (39b4 <bt_recv_prio+0x1c4>)
    395e:	4916      	ldr	r1, [pc, #88]	; (39b8 <bt_recv_prio+0x1c8>)
    3960:	481c      	ldr	r0, [pc, #112]	; (39d4 <bt_recv_prio+0x1e4>)
    3962:	47b8      	blx	r7
		bt_conn_unref(conn);
    3964:	4628      	mov	r0, r5
    3966:	f000 fceb 	bl	4340 <bt_conn_unref>
    396a:	e7d2      	b.n	3912 <bt_recv_prio+0x122>
			k_fifo_put(&conn->tx_notify, node);
    396c:	4638      	mov	r0, r7
    396e:	f010 f8a5 	bl	13abc <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3972:	4628      	mov	r0, r5
    3974:	f000 f978 	bl	3c68 <bt_conn_get_pkts>
    3978:	f010 fb8e 	bl	14098 <_impl_k_sem_give>
    397c:	e7cf      	b.n	391e <bt_recv_prio+0x12e>
		net_buf_unref(buf);
    397e:	4620      	mov	r0, r4
    3980:	f00f fa8c 	bl	12e9c <net_buf_unref>
		BT_ASSERT(0);
    3984:	4b09      	ldr	r3, [pc, #36]	; (39ac <bt_recv_prio+0x1bc>)
    3986:	9301      	str	r3, [sp, #4]
    3988:	9300      	str	r3, [sp, #0]
    398a:	4b09      	ldr	r3, [pc, #36]	; (39b0 <bt_recv_prio+0x1c0>)
    398c:	4a09      	ldr	r2, [pc, #36]	; (39b4 <bt_recv_prio+0x1c4>)
    398e:	681c      	ldr	r4, [r3, #0]
    3990:	4909      	ldr	r1, [pc, #36]	; (39b8 <bt_recv_prio+0x1c8>)
    3992:	4b0a      	ldr	r3, [pc, #40]	; (39bc <bt_recv_prio+0x1cc>)
    3994:	4810      	ldr	r0, [pc, #64]	; (39d8 <bt_recv_prio+0x1e8>)
    3996:	e73c      	b.n	3812 <bt_recv_prio+0x22>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3998:	4b04      	ldr	r3, [pc, #16]	; (39ac <bt_recv_prio+0x1bc>)
    399a:	9301      	str	r3, [sp, #4]
    399c:	9300      	str	r3, [sp, #0]
    399e:	4b04      	ldr	r3, [pc, #16]	; (39b0 <bt_recv_prio+0x1c0>)
    39a0:	4a04      	ldr	r2, [pc, #16]	; (39b4 <bt_recv_prio+0x1c4>)
    39a2:	681c      	ldr	r4, [r3, #0]
    39a4:	4904      	ldr	r1, [pc, #16]	; (39b8 <bt_recv_prio+0x1c8>)
    39a6:	4b05      	ldr	r3, [pc, #20]	; (39bc <bt_recv_prio+0x1cc>)
    39a8:	480c      	ldr	r0, [pc, #48]	; (39dc <bt_recv_prio+0x1ec>)
    39aa:	e732      	b.n	3812 <bt_recv_prio+0x22>
    39ac:	00014c55 	.word	0x00014c55
    39b0:	20003aa4 	.word	0x20003aa4
    39b4:	000159c3 	.word	0x000159c3
    39b8:	00015a12 	.word	0x00015a12
    39bc:	00015337 	.word	0x00015337
    39c0:	00015891 	.word	0x00015891
    39c4:	000158d5 	.word	0x000158d5
    39c8:	20003b50 	.word	0x20003b50
    39cc:	000151e1 	.word	0x000151e1
    39d0:	0001590f 	.word	0x0001590f
    39d4:	0001593b 	.word	0x0001593b
    39d8:	00015962 	.word	0x00015962
    39dc:	00015985 	.word	0x00015985

000039e0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    39e0:	4a08      	ldr	r2, [pc, #32]	; (3a04 <bt_hci_driver_register+0x24>)
    39e2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    39e6:	b93b      	cbnz	r3, 39f8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    39e8:	68c1      	ldr	r1, [r0, #12]
    39ea:	b141      	cbz	r1, 39fe <bt_hci_driver_register+0x1e>
    39ec:	6901      	ldr	r1, [r0, #16]
    39ee:	b131      	cbz	r1, 39fe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    39f0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
	return 0;
    39f4:	4618      	mov	r0, r3
    39f6:	4770      	bx	lr
		return -EALREADY;
    39f8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    39fc:	4770      	bx	lr
		return -EINVAL;
    39fe:	f06f 0015 	mvn.w	r0, #21
}
    3a02:	4770      	bx	lr
    3a04:	20003aa8 	.word	0x20003aa8

00003a08 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3a08:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    3a0a:	4d2b      	ldr	r5, [pc, #172]	; (3ab8 <bt_enable+0xb0>)
    3a0c:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
{
    3a10:	b086      	sub	sp, #24
    3a12:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3a14:	b973      	cbnz	r3, 3a34 <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
    3a16:	4b29      	ldr	r3, [pc, #164]	; (3abc <bt_enable+0xb4>)
    3a18:	9301      	str	r3, [sp, #4]
    3a1a:	9300      	str	r3, [sp, #0]
    3a1c:	4b28      	ldr	r3, [pc, #160]	; (3ac0 <bt_enable+0xb8>)
    3a1e:	4a29      	ldr	r2, [pc, #164]	; (3ac4 <bt_enable+0xbc>)
    3a20:	681c      	ldr	r4, [r3, #0]
    3a22:	4929      	ldr	r1, [pc, #164]	; (3ac8 <bt_enable+0xc0>)
    3a24:	4b29      	ldr	r3, [pc, #164]	; (3acc <bt_enable+0xc4>)
    3a26:	482a      	ldr	r0, [pc, #168]	; (3ad0 <bt_enable+0xc8>)
    3a28:	47a0      	blx	r4
		return -ENODEV;
    3a2a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3a2e:	4620      	mov	r0, r4
    3a30:	b006      	add	sp, #24
    3a32:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3a34:	2101      	movs	r1, #1
    3a36:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3a3a:	f7fe faba 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3a3e:	f010 0001 	ands.w	r0, r0, #1
    3a42:	d135      	bne.n	3ab0 <bt_enable+0xa8>
	ready_cb = cb;
    3a44:	4b23      	ldr	r3, [pc, #140]	; (3ad4 <bt_enable+0xcc>)

    3a46:	4924      	ldr	r1, [pc, #144]	; (3ad8 <bt_enable+0xd0>)
    3a48:	601e      	str	r6, [r3, #0]
    3a4a:	f06f 0308 	mvn.w	r3, #8
    3a4e:	9005      	str	r0, [sp, #20]
    3a50:	9004      	str	r0, [sp, #16]
    3a52:	9303      	str	r3, [sp, #12]
    3a54:	9002      	str	r0, [sp, #8]
    3a56:	9001      	str	r0, [sp, #4]
    3a58:	9000      	str	r0, [sp, #0]
    3a5a:	4b20      	ldr	r3, [pc, #128]	; (3adc <bt_enable+0xd4>)
    3a5c:	4820      	ldr	r0, [pc, #128]	; (3ae0 <bt_enable+0xd8>)
    3a5e:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    3a62:	f010 fd2b 	bl	144bc <_impl_k_thread_create>
	err = bt_dev.drv->open();
    3a66:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    3a6a:	68db      	ldr	r3, [r3, #12]
    3a6c:	4798      	blx	r3
	if (err) {
    3a6e:	4604      	mov	r4, r0
    3a70:	b158      	cbz	r0, 3a8a <bt_enable+0x82>
		BT_ERR("HCI driver open failed (%d)", err);
    3a72:	4b12      	ldr	r3, [pc, #72]	; (3abc <bt_enable+0xb4>)
    3a74:	9302      	str	r3, [sp, #8]
    3a76:	e88d 0018 	stmia.w	sp, {r3, r4}
    3a7a:	4b11      	ldr	r3, [pc, #68]	; (3ac0 <bt_enable+0xb8>)
    3a7c:	4a11      	ldr	r2, [pc, #68]	; (3ac4 <bt_enable+0xbc>)
    3a7e:	681d      	ldr	r5, [r3, #0]
    3a80:	4911      	ldr	r1, [pc, #68]	; (3ac8 <bt_enable+0xc0>)
    3a82:	4b12      	ldr	r3, [pc, #72]	; (3acc <bt_enable+0xc4>)
    3a84:	4817      	ldr	r0, [pc, #92]	; (3ae4 <bt_enable+0xdc>)
    3a86:	47a8      	blx	r5
		return err;
    3a88:	e7d1      	b.n	3a2e <bt_enable+0x26>
	if (!cb) {
    3a8a:	b926      	cbnz	r6, 3a96 <bt_enable+0x8e>
}
    3a8c:	b006      	add	sp, #24
    3a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3a92:	f7fe bdbf 	b.w	2614 <bt_init>
    3a96:	2101      	movs	r1, #1
    3a98:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3a9c:	f7fe fa89 	bl	1fb2 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3aa0:	07c3      	lsls	r3, r0, #31
    3aa2:	d4c4      	bmi.n	3a2e <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    3aa4:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3aa8:	480f      	ldr	r0, [pc, #60]	; (3ae8 <bt_enable+0xe0>)
    3aaa:	f010 f807 	bl	13abc <k_queue_append>
    3aae:	e7be      	b.n	3a2e <bt_enable+0x26>
		return -EALREADY;
    3ab0:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3ab4:	e7bb      	b.n	3a2e <bt_enable+0x26>
    3ab6:	bf00      	nop
    3ab8:	20003aa8 	.word	0x20003aa8
    3abc:	00014c55 	.word	0x00014c55
    3ac0:	20003aa4 	.word	0x20003aa4
    3ac4:	000159c3 	.word	0x000159c3
    3ac8:	00015a12 	.word	0x00015a12
    3acc:	00015344 	.word	0x00015344
    3ad0:	000153f7 	.word	0x000153f7
    3ad4:	200002d4 	.word	0x200002d4
    3ad8:	20001a50 	.word	0x20001a50
    3adc:	00002f11 	.word	0x00002f11
    3ae0:	200002dc 	.word	0x200002dc
    3ae4:	00015420 	.word	0x00015420
    3ae8:	200019c8 	.word	0x200019c8

00003aec <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    3aec:	2000      	movs	r0, #0
    3aee:	4770      	bx	lr

00003af0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    3af0:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3af2:	7803      	ldrb	r3, [r0, #0]
    3af4:	2b01      	cmp	r3, #1
{
    3af6:	4605      	mov	r5, r0
    3af8:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    3afa:	d810      	bhi.n	3b1e <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    3afc:	7843      	ldrb	r3, [r0, #1]
    3afe:	2b01      	cmp	r3, #1
    3b00:	d80d      	bhi.n	3b1e <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    3b02:	8841      	ldrh	r1, [r0, #2]
    3b04:	1f0b      	subs	r3, r1, #4
    3b06:	b29b      	uxth	r3, r3
    3b08:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    3b0c:	4283      	cmp	r3, r0
    3b0e:	d806      	bhi.n	3b1e <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    3b10:	88aa      	ldrh	r2, [r5, #4]
    3b12:	1f13      	subs	r3, r2, #4
    3b14:	b29b      	uxth	r3, r3
    3b16:	4283      	cmp	r3, r0
    3b18:	d801      	bhi.n	3b1e <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    3b1a:	4291      	cmp	r1, r2
    3b1c:	d22b      	bcs.n	3b76 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    3b1e:	f06f 0415 	mvn.w	r4, #21
    3b22:	e00e      	b.n	3b42 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3b24:	2108      	movs	r1, #8
    3b26:	4819      	ldr	r0, [pc, #100]	; (3b8c <bt_le_scan_start+0x9c>)
    3b28:	f7fe fadc 	bl	20e4 <atomic_test_bit>
    3b2c:	b158      	cbz	r0, 3b46 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3b2e:	4610      	mov	r0, r2
    3b30:	f7fe fb54 	bl	21dc <set_le_scan_enable>
		if (err) {
    3b34:	4604      	mov	r4, r0
    3b36:	b130      	cbz	r0, 3b46 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b38:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3b3c:	4813      	ldr	r0, [pc, #76]	; (3b8c <bt_le_scan_start+0x9c>)
    3b3e:	f7fe fa49 	bl	1fd4 <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    3b42:	4620      	mov	r0, r4
    3b44:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    3b46:	786b      	ldrb	r3, [r5, #1]
    3b48:	b17b      	cbz	r3, 3b6a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3b4e:	480f      	ldr	r0, [pc, #60]	; (3b8c <bt_le_scan_start+0x9c>)
    3b50:	f7fe fa2f 	bl	1fb2 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    3b54:	88aa      	ldrh	r2, [r5, #4]
    3b56:	8869      	ldrh	r1, [r5, #2]
    3b58:	7828      	ldrb	r0, [r5, #0]
    3b5a:	f7fe fcd9 	bl	2510 <start_le_scan>
	if (err) {
    3b5e:	4604      	mov	r4, r0
    3b60:	2800      	cmp	r0, #0
    3b62:	d1e9      	bne.n	3b38 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    3b64:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <bt_le_scan_start+0xa0>)
    3b66:	601e      	str	r6, [r3, #0]
	return 0;
    3b68:	e7eb      	b.n	3b42 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b6a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    3b6e:	4807      	ldr	r0, [pc, #28]	; (3b8c <bt_le_scan_start+0x9c>)
    3b70:	f7fe fa30 	bl	1fd4 <atomic_and>
    3b74:	e7ee      	b.n	3b54 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b76:	f44f 7100 	mov.w	r1, #512	; 0x200
    3b7a:	4804      	ldr	r0, [pc, #16]	; (3b8c <bt_le_scan_start+0x9c>)
    3b7c:	f7fe fa19 	bl	1fb2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3b80:	f410 7200 	ands.w	r2, r0, #512	; 0x200
    3b84:	d0ce      	beq.n	3b24 <bt_le_scan_start+0x34>
		return -EALREADY;
    3b86:	f06f 0444 	mvn.w	r4, #68	; 0x44
    3b8a:	e7da      	b.n	3b42 <bt_le_scan_start+0x52>
    3b8c:	20003b18 	.word	0x20003b18
    3b90:	200002d8 	.word	0x200002d8

00003b94 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    3b94:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3b96:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3b9a:	4807      	ldr	r0, [pc, #28]	; (3bb8 <bt_le_scan_stop+0x24>)
    3b9c:	f7fe fa1a 	bl	1fd4 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ba0:	0583      	lsls	r3, r0, #22
    3ba2:	d506      	bpl.n	3bb2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    3ba4:	4b05      	ldr	r3, [pc, #20]	; (3bbc <bt_le_scan_stop+0x28>)
    3ba6:	2000      	movs	r0, #0
    3ba8:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    3baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    3bae:	f7fe bcff 	b.w	25b0 <bt_le_scan_update>
}
    3bb2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3bb6:	bd08      	pop	{r3, pc}
    3bb8:	20003b18 	.word	0x20003b18
    3bbc:	200002d8 	.word	0x200002d8

00003bc0 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3bc0:	b538      	push	{r3, r4, r5, lr}
    3bc2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3bc4:	4805      	ldr	r0, [pc, #20]	; (3bdc <bt_buf_get_rx+0x1c>)
    3bc6:	f00f f939 	bl	12e3c <net_buf_alloc_fixed>
#endif

	if (buf) {
    3bca:	4604      	mov	r4, r0
    3bcc:	b120      	cbz	r0, 3bd8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3bce:	2100      	movs	r1, #0
    3bd0:	3008      	adds	r0, #8
    3bd2:	f00f f952 	bl	12e7a <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3bd6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3bd8:	4620      	mov	r0, r4
    3bda:	bd38      	pop	{r3, r4, r5, pc}
    3bdc:	20004014 	.word	0x20004014

00003be0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3be0:	b510      	push	{r4, lr}
    3be2:	4601      	mov	r1, r0
	__asm__ volatile(
    3be4:	f04f 0320 	mov.w	r3, #32
    3be8:	f3ef 8011 	mrs	r0, BASEPRI
    3bec:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3bf0:	4a0b      	ldr	r2, [pc, #44]	; (3c20 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3bf2:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3bf4:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
	bt_dev.sent_cmd = NULL;
    3bf8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3bfc:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3c00:	b924      	cbnz	r4, 3c0c <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3c02:	2001      	movs	r0, #1
}
    3c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3c08:	f7ff bfda 	b.w	3bc0 <bt_buf_get_rx>
    3c0c:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3c0e:	f104 0008 	add.w	r0, r4, #8
    3c12:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3c14:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3c16:	4619      	mov	r1, r3
    3c18:	f00f f92f 	bl	12e7a <net_buf_simple_reserve>
}
    3c1c:	4620      	mov	r0, r4
    3c1e:	bd10      	pop	{r4, pc}
    3c20:	20003aa8 	.word	0x20003aa8

00003c24 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3c24:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3c26:	4b06      	ldr	r3, [pc, #24]	; (3c40 <notify_connected+0x1c>)
    3c28:	681c      	ldr	r4, [r3, #0]
{
    3c2a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3c2c:	b904      	cbnz	r4, 3c30 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3c2e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3c30:	6823      	ldr	r3, [r4, #0]
    3c32:	b113      	cbz	r3, 3c3a <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3c34:	7a29      	ldrb	r1, [r5, #8]
    3c36:	4628      	mov	r0, r5
    3c38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3c3a:	6924      	ldr	r4, [r4, #16]
    3c3c:	e7f6      	b.n	3c2c <notify_connected+0x8>
    3c3e:	bf00      	nop
    3c40:	2000034c 	.word	0x2000034c

00003c44 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c44:	f3bf 8f5b 	dmb	ish
    3c48:	6800      	ldr	r0, [r0, #0]
    3c4a:	f3bf 8f5b 	dmb	ish
}
    3c4e:	4770      	bx	lr

00003c50 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3c50:	8943      	ldrh	r3, [r0, #10]
{
    3c52:	b510      	push	{r4, lr}
    3c54:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3c56:	b12b      	cbz	r3, 3c64 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3c58:	68c0      	ldr	r0, [r0, #12]
    3c5a:	f00f f91f 	bl	12e9c <net_buf_unref>
	conn->rx = NULL;
    3c5e:	2300      	movs	r3, #0
    3c60:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3c62:	8163      	strh	r3, [r4, #10]
    3c64:	bd10      	pop	{r4, pc}
	...

00003c68 <bt_conn_get_pkts>:
}
    3c68:	4800      	ldr	r0, [pc, #0]	; (3c6c <bt_conn_get_pkts+0x4>)
    3c6a:	4770      	bx	lr
    3c6c:	20003b34 	.word	0x20003b34

00003c70 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3c70:	4b08      	ldr	r3, [pc, #32]	; (3c94 <notify_le_param_updated+0x24>)
{
    3c72:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3c74:	681c      	ldr	r4, [r3, #0]
{
    3c76:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3c78:	b904      	cbnz	r4, 3c7c <notify_le_param_updated+0xc>
}
    3c7a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3c7c:	68e6      	ldr	r6, [r4, #12]
    3c7e:	b13e      	cbz	r6, 3c90 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3c80:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
    3c84:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    3c88:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
    3c8c:	4628      	mov	r0, r5
    3c8e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3c90:	6924      	ldr	r4, [r4, #16]
    3c92:	e7f1      	b.n	3c78 <notify_le_param_updated+0x8>
    3c94:	2000034c 	.word	0x2000034c

00003c98 <le_param_req>:
{
    3c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3c9c:	4608      	mov	r0, r1
{
    3c9e:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3ca0:	f7fe fb3c 	bl	231c <bt_le_conn_params_valid>
    3ca4:	4605      	mov	r5, r0
    3ca6:	b910      	cbnz	r0, 3cae <le_param_req+0x16>
		return false;
    3ca8:	2500      	movs	r5, #0
}
    3caa:	4628      	mov	r0, r5
    3cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3cae:	4b09      	ldr	r3, [pc, #36]	; (3cd4 <le_param_req+0x3c>)
    3cb0:	681c      	ldr	r4, [r3, #0]
    3cb2:	2c00      	cmp	r4, #0
    3cb4:	d0f9      	beq.n	3caa <le_param_req+0x12>
		if (!cb->le_param_req) {
    3cb6:	68a3      	ldr	r3, [r4, #8]
    3cb8:	b90b      	cbnz	r3, 3cbe <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3cba:	6924      	ldr	r4, [r4, #16]
    3cbc:	e7f9      	b.n	3cb2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3cbe:	4631      	mov	r1, r6
    3cc0:	4638      	mov	r0, r7
    3cc2:	4798      	blx	r3
    3cc4:	2800      	cmp	r0, #0
    3cc6:	d0ef      	beq.n	3ca8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3cc8:	4630      	mov	r0, r6
    3cca:	f7fe fb27 	bl	231c <bt_le_conn_params_valid>
    3cce:	2800      	cmp	r0, #0
    3cd0:	d1f3      	bne.n	3cba <le_param_req+0x22>
    3cd2:	e7e9      	b.n	3ca8 <le_param_req+0x10>
    3cd4:	2000034c 	.word	0x2000034c

00003cd8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3cd8:	4b02      	ldr	r3, [pc, #8]	; (3ce4 <bt_conn_cb_register+0xc>)
    3cda:	681a      	ldr	r2, [r3, #0]
    3cdc:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    3cde:	6018      	str	r0, [r3, #0]
    3ce0:	4770      	bx	lr
    3ce2:	bf00      	nop
    3ce4:	2000034c 	.word	0x2000034c

00003ce8 <bt_conn_recv>:
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    3ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_l2cap_hdr *hdr;
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3cec:	f8df 8208 	ldr.w	r8, [pc, #520]	; 3ef8 <bt_conn_recv+0x210>
    3cf0:	4e71      	ldr	r6, [pc, #452]	; (3eb8 <bt_conn_recv+0x1d0>)
    3cf2:	f8d8 7000 	ldr.w	r7, [r8]
{
    3cf6:	b086      	sub	sp, #24
    3cf8:	4692      	mov	sl, r2
    3cfa:	460d      	mov	r5, r1
    3cfc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3cfe:	f010 f991 	bl	14024 <_impl_k_current_get>
	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);
    3d02:	9605      	str	r6, [sp, #20]
    3d04:	f8cd a010 	str.w	sl, [sp, #16]
    3d08:	89ab      	ldrh	r3, [r5, #12]
    3d0a:	9303      	str	r3, [sp, #12]
    3d0c:	8823      	ldrh	r3, [r4, #0]
    3d0e:	9302      	str	r3, [sp, #8]
    3d10:	9001      	str	r0, [sp, #4]
    3d12:	9600      	str	r6, [sp, #0]
    3d14:	4b69      	ldr	r3, [pc, #420]	; (3ebc <bt_conn_recv+0x1d4>)
    3d16:	4a6a      	ldr	r2, [pc, #424]	; (3ec0 <bt_conn_recv+0x1d8>)
    3d18:	496a      	ldr	r1, [pc, #424]	; (3ec4 <bt_conn_recv+0x1dc>)
    3d1a:	486b      	ldr	r0, [pc, #428]	; (3ec8 <bt_conn_recv+0x1e0>)
    3d1c:	47b8      	blx	r7

	/* Check packet boundary flags */
	switch (flags) {
    3d1e:	f1ba 0f01 	cmp.w	sl, #1
    3d22:	46c1      	mov	r9, r8
    3d24:	4637      	mov	r7, r6
    3d26:	d040      	beq.n	3daa <bt_conn_recv+0xc2>
    3d28:	f1ba 0f02 	cmp.w	sl, #2
    3d2c:	f040 80a3 	bne.w	3e76 <bt_conn_recv+0x18e>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3d30:	68ab      	ldr	r3, [r5, #8]

		BT_DBG("First, len %u final %u", buf->len, len);
    3d32:	f8d9 6000 	ldr.w	r6, [r9]
		len = sys_le16_to_cpu(hdr->len);
    3d36:	f8b3 8000 	ldrh.w	r8, [r3]
    3d3a:	f010 f973 	bl	14024 <_impl_k_current_get>
		BT_DBG("First, len %u final %u", buf->len, len);
    3d3e:	9704      	str	r7, [sp, #16]
    3d40:	f8cd 800c 	str.w	r8, [sp, #12]
    3d44:	89ab      	ldrh	r3, [r5, #12]
    3d46:	9302      	str	r3, [sp, #8]
    3d48:	9001      	str	r0, [sp, #4]
    3d4a:	4b5c      	ldr	r3, [pc, #368]	; (3ebc <bt_conn_recv+0x1d4>)
    3d4c:	9700      	str	r7, [sp, #0]
    3d4e:	4a5c      	ldr	r2, [pc, #368]	; (3ec0 <bt_conn_recv+0x1d8>)
    3d50:	495c      	ldr	r1, [pc, #368]	; (3ec4 <bt_conn_recv+0x1dc>)
    3d52:	485e      	ldr	r0, [pc, #376]	; (3ecc <bt_conn_recv+0x1e4>)
    3d54:	47b0      	blx	r6

		if (conn->rx_len) {
    3d56:	8963      	ldrh	r3, [r4, #10]
    3d58:	b15b      	cbz	r3, 3d72 <bt_conn_recv+0x8a>
			BT_ERR("Unexpected first L2CAP frame");
    3d5a:	9701      	str	r7, [sp, #4]
    3d5c:	9700      	str	r7, [sp, #0]
    3d5e:	485c      	ldr	r0, [pc, #368]	; (3ed0 <bt_conn_recv+0x1e8>)
    3d60:	f8d9 6000 	ldr.w	r6, [r9]
    3d64:	4b55      	ldr	r3, [pc, #340]	; (3ebc <bt_conn_recv+0x1d4>)
    3d66:	4a5b      	ldr	r2, [pc, #364]	; (3ed4 <bt_conn_recv+0x1ec>)
    3d68:	4956      	ldr	r1, [pc, #344]	; (3ec4 <bt_conn_recv+0x1dc>)
    3d6a:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    3d6c:	4620      	mov	r0, r4
    3d6e:	f7ff ff6f 	bl	3c50 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3d72:	89ab      	ldrh	r3, [r5, #12]
		BT_DBG("rx_len %u", conn->rx_len);
    3d74:	f8d9 6000 	ldr.w	r6, [r9]
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3d78:	eba8 0803 	sub.w	r8, r8, r3
    3d7c:	f108 0804 	add.w	r8, r8, #4
    3d80:	f8a4 800a 	strh.w	r8, [r4, #10]
    3d84:	f010 f94e 	bl	14024 <_impl_k_current_get>
		BT_DBG("rx_len %u", conn->rx_len);
    3d88:	9703      	str	r7, [sp, #12]
    3d8a:	8963      	ldrh	r3, [r4, #10]
    3d8c:	9302      	str	r3, [sp, #8]
    3d8e:	9001      	str	r0, [sp, #4]
    3d90:	4b4a      	ldr	r3, [pc, #296]	; (3ebc <bt_conn_recv+0x1d4>)
    3d92:	9700      	str	r7, [sp, #0]
    3d94:	4a4a      	ldr	r2, [pc, #296]	; (3ec0 <bt_conn_recv+0x1d8>)
    3d96:	494b      	ldr	r1, [pc, #300]	; (3ec4 <bt_conn_recv+0x1dc>)
    3d98:	484f      	ldr	r0, [pc, #316]	; (3ed8 <bt_conn_recv+0x1f0>)
    3d9a:	47b0      	blx	r6
		if (conn->rx_len) {
    3d9c:	8963      	ldrh	r3, [r4, #10]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d057      	beq.n	3e52 <bt_conn_recv+0x16a>
			conn->rx = buf;
    3da2:	60e5      	str	r5, [r4, #12]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3da4:	b006      	add	sp, #24
    3da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->rx_len) {
    3daa:	8963      	ldrh	r3, [r4, #10]
    3dac:	b98b      	cbnz	r3, 3dd2 <bt_conn_recv+0xea>
			BT_ERR("Unexpected L2CAP continuation");
    3dae:	9601      	str	r6, [sp, #4]
    3db0:	9600      	str	r6, [sp, #0]
    3db2:	f8d8 6000 	ldr.w	r6, [r8]
    3db6:	4b41      	ldr	r3, [pc, #260]	; (3ebc <bt_conn_recv+0x1d4>)
    3db8:	4a46      	ldr	r2, [pc, #280]	; (3ed4 <bt_conn_recv+0x1ec>)
    3dba:	4942      	ldr	r1, [pc, #264]	; (3ec4 <bt_conn_recv+0x1dc>)
    3dbc:	4847      	ldr	r0, [pc, #284]	; (3edc <bt_conn_recv+0x1f4>)
			BT_ERR("L2CAP data overflow");
    3dbe:	47b0      	blx	r6
			bt_conn_reset_rx_state(conn);
    3dc0:	4620      	mov	r0, r4
    3dc2:	f7ff ff45 	bl	3c50 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    3dc6:	4628      	mov	r0, r5
}
    3dc8:	b006      	add	sp, #24
    3dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			net_buf_unref(buf);
    3dce:	f00f b865 	b.w	12e9c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3dd2:	89aa      	ldrh	r2, [r5, #12]
    3dd4:	429a      	cmp	r2, r3
    3dd6:	d908      	bls.n	3dea <bt_conn_recv+0x102>
			BT_ERR("L2CAP data overflow");
    3dd8:	9601      	str	r6, [sp, #4]
    3dda:	9600      	str	r6, [sp, #0]
    3ddc:	f8d8 6000 	ldr.w	r6, [r8]
    3de0:	4b36      	ldr	r3, [pc, #216]	; (3ebc <bt_conn_recv+0x1d4>)
    3de2:	4a3c      	ldr	r2, [pc, #240]	; (3ed4 <bt_conn_recv+0x1ec>)
    3de4:	4937      	ldr	r1, [pc, #220]	; (3ec4 <bt_conn_recv+0x1dc>)
    3de6:	483e      	ldr	r0, [pc, #248]	; (3ee0 <bt_conn_recv+0x1f8>)
    3de8:	e7e9      	b.n	3dbe <bt_conn_recv+0xd6>
		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);
    3dea:	f8d8 a000 	ldr.w	sl, [r8]
    3dee:	f010 f919 	bl	14024 <_impl_k_current_get>
    3df2:	9604      	str	r6, [sp, #16]
    3df4:	8963      	ldrh	r3, [r4, #10]
    3df6:	9303      	str	r3, [sp, #12]
    3df8:	89ab      	ldrh	r3, [r5, #12]
    3dfa:	9302      	str	r3, [sp, #8]
    3dfc:	9001      	str	r0, [sp, #4]
    3dfe:	4b2f      	ldr	r3, [pc, #188]	; (3ebc <bt_conn_recv+0x1d4>)
    3e00:	4a2f      	ldr	r2, [pc, #188]	; (3ec0 <bt_conn_recv+0x1d8>)
    3e02:	4930      	ldr	r1, [pc, #192]	; (3ec4 <bt_conn_recv+0x1dc>)
    3e04:	4837      	ldr	r0, [pc, #220]	; (3ee4 <bt_conn_recv+0x1fc>)
    3e06:	9600      	str	r6, [sp, #0]
    3e08:	47d0      	blx	sl
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3e0a:	68e0      	ldr	r0, [r4, #12]
    3e0c:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
    3e10:	3008      	adds	r0, #8
    3e12:	f00f f8b6 	bl	12f82 <net_buf_simple_tailroom>
    3e16:	4582      	cmp	sl, r0
    3e18:	d908      	bls.n	3e2c <bt_conn_recv+0x144>
			BT_ERR("Not enough buffer space for L2CAP data");
    3e1a:	9601      	str	r6, [sp, #4]
    3e1c:	9600      	str	r6, [sp, #0]
    3e1e:	f8d8 6000 	ldr.w	r6, [r8]
    3e22:	4b26      	ldr	r3, [pc, #152]	; (3ebc <bt_conn_recv+0x1d4>)
    3e24:	4a2b      	ldr	r2, [pc, #172]	; (3ed4 <bt_conn_recv+0x1ec>)
    3e26:	4927      	ldr	r1, [pc, #156]	; (3ec4 <bt_conn_recv+0x1dc>)
    3e28:	482f      	ldr	r0, [pc, #188]	; (3ee8 <bt_conn_recv+0x200>)
    3e2a:	e7c8      	b.n	3dbe <bt_conn_recv+0xd6>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3e2c:	68e0      	ldr	r0, [r4, #12]
    3e2e:	89aa      	ldrh	r2, [r5, #12]
    3e30:	68a9      	ldr	r1, [r5, #8]
    3e32:	3008      	adds	r0, #8
    3e34:	f00f f870 	bl	12f18 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3e38:	8963      	ldrh	r3, [r4, #10]
    3e3a:	89aa      	ldrh	r2, [r5, #12]
    3e3c:	1a9b      	subs	r3, r3, r2
    3e3e:	8163      	strh	r3, [r4, #10]
		net_buf_unref(buf);
    3e40:	4628      	mov	r0, r5
    3e42:	f00f f82b 	bl	12e9c <net_buf_unref>
		if (conn->rx_len) {
    3e46:	8963      	ldrh	r3, [r4, #10]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d1ab      	bne.n	3da4 <bt_conn_recv+0xbc>
		buf = conn->rx;
    3e4c:	68e5      	ldr	r5, [r4, #12]
		conn->rx_len = 0;
    3e4e:	8163      	strh	r3, [r4, #10]
		conn->rx = NULL;
    3e50:	60e3      	str	r3, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    3e52:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3e54:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    3e56:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    3e58:	1d19      	adds	r1, r3, #4
    3e5a:	4291      	cmp	r1, r2
    3e5c:	d016      	beq.n	3e8c <bt_conn_recv+0x1a4>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3e5e:	9202      	str	r2, [sp, #8]
    3e60:	9301      	str	r3, [sp, #4]
    3e62:	9703      	str	r7, [sp, #12]
    3e64:	9700      	str	r7, [sp, #0]
    3e66:	f8d9 4000 	ldr.w	r4, [r9]
    3e6a:	4b14      	ldr	r3, [pc, #80]	; (3ebc <bt_conn_recv+0x1d4>)
    3e6c:	4a19      	ldr	r2, [pc, #100]	; (3ed4 <bt_conn_recv+0x1ec>)
    3e6e:	4915      	ldr	r1, [pc, #84]	; (3ec4 <bt_conn_recv+0x1dc>)
    3e70:	481e      	ldr	r0, [pc, #120]	; (3eec <bt_conn_recv+0x204>)
    3e72:	47a0      	blx	r4
    3e74:	e7a7      	b.n	3dc6 <bt_conn_recv+0xde>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3e76:	e88d 0440 	stmia.w	sp, {r6, sl}
    3e7a:	9602      	str	r6, [sp, #8]
    3e7c:	f8d8 6000 	ldr.w	r6, [r8]
    3e80:	4b0e      	ldr	r3, [pc, #56]	; (3ebc <bt_conn_recv+0x1d4>)
    3e82:	4a14      	ldr	r2, [pc, #80]	; (3ed4 <bt_conn_recv+0x1ec>)
    3e84:	490f      	ldr	r1, [pc, #60]	; (3ec4 <bt_conn_recv+0x1dc>)
    3e86:	481a      	ldr	r0, [pc, #104]	; (3ef0 <bt_conn_recv+0x208>)
    3e88:	47b0      	blx	r6
    3e8a:	e799      	b.n	3dc0 <bt_conn_recv+0xd8>
	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);
    3e8c:	f8d9 6000 	ldr.w	r6, [r9]
    3e90:	f010 f8c8 	bl	14024 <_impl_k_current_get>
    3e94:	9703      	str	r7, [sp, #12]
    3e96:	89ab      	ldrh	r3, [r5, #12]
    3e98:	9302      	str	r3, [sp, #8]
    3e9a:	9001      	str	r0, [sp, #4]
    3e9c:	9700      	str	r7, [sp, #0]
    3e9e:	4b07      	ldr	r3, [pc, #28]	; (3ebc <bt_conn_recv+0x1d4>)
    3ea0:	4a07      	ldr	r2, [pc, #28]	; (3ec0 <bt_conn_recv+0x1d8>)
    3ea2:	4908      	ldr	r1, [pc, #32]	; (3ec4 <bt_conn_recv+0x1dc>)
    3ea4:	4813      	ldr	r0, [pc, #76]	; (3ef4 <bt_conn_recv+0x20c>)
    3ea6:	47b0      	blx	r6
	bt_l2cap_recv(conn, buf);
    3ea8:	4629      	mov	r1, r5
    3eaa:	4620      	mov	r0, r4
}
    3eac:	b006      	add	sp, #24
    3eae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_l2cap_recv(conn, buf);
    3eb2:	f001 b8f7 	b.w	50a4 <bt_l2cap_recv>
    3eb6:	bf00      	nop
    3eb8:	00014c55 	.word	0x00014c55
    3ebc:	00015cb8 	.word	0x00015cb8
    3ec0:	00015e82 	.word	0x00015e82
    3ec4:	00015a12 	.word	0x00015a12
    3ec8:	00015e89 	.word	0x00015e89
    3ecc:	00015eba 	.word	0x00015eba
    3ed0:	00015ee6 	.word	0x00015ee6
    3ed4:	000159c3 	.word	0x000159c3
    3ed8:	00015f13 	.word	0x00015f13
    3edc:	00015f32 	.word	0x00015f32
    3ee0:	00015f60 	.word	0x00015f60
    3ee4:	00015f84 	.word	0x00015f84
    3ee8:	00015fb0 	.word	0x00015fb0
    3eec:	00016015 	.word	0x00016015
    3ef0:	00015fe7 	.word	0x00015fe7
    3ef4:	00016041 	.word	0x00016041
    3ef8:	20003aa4 	.word	0x20003aa4

00003efc <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3f00:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3f84 <bt_conn_send_cb+0x88>
    3f04:	4d18      	ldr	r5, [pc, #96]	; (3f68 <bt_conn_send_cb+0x6c>)
    3f06:	f8d8 9000 	ldr.w	r9, [r8]
{
    3f0a:	b087      	sub	sp, #28
    3f0c:	460c      	mov	r4, r1
    3f0e:	4606      	mov	r6, r0
    3f10:	4617      	mov	r7, r2
    3f12:	f010 f887 	bl	14024 <_impl_k_current_get>
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);
    3f16:	89a3      	ldrh	r3, [r4, #12]
    3f18:	9303      	str	r3, [sp, #12]
    3f1a:	8833      	ldrh	r3, [r6, #0]
    3f1c:	9302      	str	r3, [sp, #8]
    3f1e:	9001      	str	r0, [sp, #4]
    3f20:	4b12      	ldr	r3, [pc, #72]	; (3f6c <bt_conn_send_cb+0x70>)
    3f22:	9505      	str	r5, [sp, #20]
    3f24:	9704      	str	r7, [sp, #16]
    3f26:	9500      	str	r5, [sp, #0]
    3f28:	4a11      	ldr	r2, [pc, #68]	; (3f70 <bt_conn_send_cb+0x74>)
    3f2a:	4912      	ldr	r1, [pc, #72]	; (3f74 <bt_conn_send_cb+0x78>)
    3f2c:	4812      	ldr	r0, [pc, #72]	; (3f78 <bt_conn_send_cb+0x7c>)
    3f2e:	47c8      	blx	r9

	if (conn->state != BT_CONN_CONNECTED) {
    3f30:	7a73      	ldrb	r3, [r6, #9]
    3f32:	2b03      	cmp	r3, #3
    3f34:	d010      	beq.n	3f58 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    3f36:	9501      	str	r5, [sp, #4]
    3f38:	9500      	str	r5, [sp, #0]
    3f3a:	4b0c      	ldr	r3, [pc, #48]	; (3f6c <bt_conn_send_cb+0x70>)
    3f3c:	4a0f      	ldr	r2, [pc, #60]	; (3f7c <bt_conn_send_cb+0x80>)
    3f3e:	490d      	ldr	r1, [pc, #52]	; (3f74 <bt_conn_send_cb+0x78>)
    3f40:	480f      	ldr	r0, [pc, #60]	; (3f80 <bt_conn_send_cb+0x84>)
    3f42:	f8d8 5000 	ldr.w	r5, [r8]
    3f46:	47a8      	blx	r5
		net_buf_unref(buf);
    3f48:	4620      	mov	r0, r4
    3f4a:	f00e ffa7 	bl	12e9c <net_buf_unref>
		return -ENOTCONN;
    3f4e:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    3f52:	b007      	add	sp, #28
    3f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_put(&conn->tx_queue, buf);
    3f58:	f106 002c 	add.w	r0, r6, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    3f5c:	6167      	str	r7, [r4, #20]
	net_buf_put(&conn->tx_queue, buf);
    3f5e:	4621      	mov	r1, r4
    3f60:	f00e ff8f 	bl	12e82 <net_buf_put>
	return 0;
    3f64:	2000      	movs	r0, #0
    3f66:	e7f4      	b.n	3f52 <bt_conn_send_cb+0x56>
    3f68:	00014c55 	.word	0x00014c55
    3f6c:	00015cc5 	.word	0x00015cc5
    3f70:	00015e82 	.word	0x00015e82
    3f74:	00015a12 	.word	0x00015a12
    3f78:	000160a5 	.word	0x000160a5
    3f7c:	000159c3 	.word	0x000159c3
    3f80:	000160da 	.word	0x000160da
    3f84:	20003aa4 	.word	0x20003aa4

00003f88 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);
    3f8c:	4b15      	ldr	r3, [pc, #84]	; (3fe4 <bt_conn_notify_tx+0x5c>)
    3f8e:	4d16      	ldr	r5, [pc, #88]	; (3fe8 <bt_conn_notify_tx+0x60>)
    3f90:	681c      	ldr	r4, [r3, #0]
{
    3f92:	4606      	mov	r6, r0
    3f94:	f010 f846 	bl	14024 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    3f98:	4b14      	ldr	r3, [pc, #80]	; (3fec <bt_conn_notify_tx+0x64>)
    3f9a:	9303      	str	r3, [sp, #12]
    3f9c:	9001      	str	r0, [sp, #4]
    3f9e:	9300      	str	r3, [sp, #0]
    3fa0:	9602      	str	r6, [sp, #8]
    3fa2:	4b13      	ldr	r3, [pc, #76]	; (3ff0 <bt_conn_notify_tx+0x68>)
    3fa4:	4a13      	ldr	r2, [pc, #76]	; (3ff4 <bt_conn_notify_tx+0x6c>)
    3fa6:	4914      	ldr	r1, [pc, #80]	; (3ff8 <bt_conn_notify_tx+0x70>)
    3fa8:	4814      	ldr	r0, [pc, #80]	; (3ffc <bt_conn_notify_tx+0x74>)
    3faa:	47a0      	blx	r4

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3fac:	f106 0718 	add.w	r7, r6, #24
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    3fb0:	f04f 0800 	mov.w	r8, #0
    3fb4:	2100      	movs	r1, #0
    3fb6:	4638      	mov	r0, r7
    3fb8:	f00f fda4 	bl	13b04 <_impl_k_queue_get>
    3fbc:	4604      	mov	r4, r0
    3fbe:	b910      	cbnz	r0, 3fc6 <bt_conn_notify_tx+0x3e>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3fc0:	b004      	add	sp, #16
    3fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3fc6:	6863      	ldr	r3, [r4, #4]
    3fc8:	b10b      	cbz	r3, 3fce <bt_conn_notify_tx+0x46>
			tx->cb(conn);
    3fca:	4630      	mov	r0, r6
    3fcc:	4798      	blx	r3
    3fce:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    3fd0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    3fd2:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3fd4:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3fd8:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode);
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d1ea      	bne.n	3fb4 <bt_conn_notify_tx+0x2c>
	list->tail = node;
    3fde:	606c      	str	r4, [r5, #4]
    3fe0:	e7e6      	b.n	3fb0 <bt_conn_notify_tx+0x28>
    3fe2:	bf00      	nop
    3fe4:	20003aa4 	.word	0x20003aa4
    3fe8:	20000400 	.word	0x20000400
    3fec:	00014c55 	.word	0x00014c55
    3ff0:	00015cd5 	.word	0x00015cd5
    3ff4:	00015e82 	.word	0x00015e82
    3ff8:	00015a12 	.word	0x00015a12
    3ffc:	00015db9 	.word	0x00015db9

00004000 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_acl_hdr *hdr;
	bt_conn_tx_cb_t cb;
	sys_snode_t *node;
	int err;

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    4004:	f8df 9198 	ldr.w	r9, [pc, #408]	; 41a0 <send_frag+0x1a0>
    4008:	4e59      	ldr	r6, [pc, #356]	; (4170 <send_frag+0x170>)
    400a:	f8d9 8000 	ldr.w	r8, [r9]
{
    400e:	b089      	sub	sp, #36	; 0x24
    4010:	460f      	mov	r7, r1
    4012:	4614      	mov	r4, r2
    4014:	4605      	mov	r5, r0
    4016:	469a      	mov	sl, r3
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4018:	f010 f804 	bl	14024 <_impl_k_current_get>
	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
    401c:	9606      	str	r6, [sp, #24]
    401e:	9405      	str	r4, [sp, #20]
    4020:	89bb      	ldrh	r3, [r7, #12]
    4022:	4a54      	ldr	r2, [pc, #336]	; (4174 <send_frag+0x174>)
    4024:	9304      	str	r3, [sp, #16]
    4026:	9001      	str	r0, [sp, #4]
    4028:	4b53      	ldr	r3, [pc, #332]	; (4178 <send_frag+0x178>)
    402a:	4954      	ldr	r1, [pc, #336]	; (417c <send_frag+0x17c>)
    402c:	4854      	ldr	r0, [pc, #336]	; (4180 <send_frag+0x180>)
    402e:	9703      	str	r7, [sp, #12]
    4030:	9502      	str	r5, [sp, #8]
    4032:	9600      	str	r6, [sp, #0]
    4034:	47c0      	blx	r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    403a:	4852      	ldr	r0, [pc, #328]	; (4184 <send_frag+0x184>)
    403c:	f010 f854 	bl	140e8 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    4040:	4b51      	ldr	r3, [pc, #324]	; (4188 <send_frag+0x188>)
    4042:	f103 0048 	add.w	r0, r3, #72	; 0x48
    4046:	f7ff fdfd 	bl	3c44 <atomic_get>
    404a:	46b0      	mov	r8, r6
    404c:	b130      	cbz	r0, 405c <send_frag+0x5c>
		if (conns[i].state == BT_CONN_CONNECTED ||
    404e:	7a5a      	ldrb	r2, [r3, #9]
    4050:	3a03      	subs	r2, #3
    4052:	2a01      	cmp	r2, #1
    4054:	d802      	bhi.n	405c <send_frag+0x5c>
			bt_conn_notify_tx(&conns[i]);
    4056:	4618      	mov	r0, r3
    4058:	f7ff ff96 	bl	3f88 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    405c:	7a6b      	ldrb	r3, [r5, #9]
    405e:	2b03      	cmp	r3, #3
    4060:	d168      	bne.n	4134 <send_frag+0x134>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4062:	2104      	movs	r1, #4
    4064:	f107 0008 	add.w	r0, r7, #8
    4068:	f00e ff67 	bl	12f3a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    406c:	882a      	ldrh	r2, [r5, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    406e:	f8d7 b014 	ldr.w	fp, [r7, #20]
    4072:	4e46      	ldr	r6, [pc, #280]	; (418c <send_frag+0x18c>)
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4074:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    4078:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    407a:	89bb      	ldrh	r3, [r7, #12]
	BT_DBG("conn %p cb %p", conn, cb);
    407c:	f8d9 4000 	ldr.w	r4, [r9]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4080:	3b04      	subs	r3, #4
    4082:	8043      	strh	r3, [r0, #2]
    4084:	2302      	movs	r3, #2
    4086:	753b      	strb	r3, [r7, #20]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4088:	f00f ffcc 	bl	14024 <_impl_k_current_get>
	BT_DBG("conn %p cb %p", conn, cb);
    408c:	f8cd 8010 	str.w	r8, [sp, #16]
    4090:	9001      	str	r0, [sp, #4]
    4092:	f8cd b00c 	str.w	fp, [sp, #12]
    4096:	9502      	str	r5, [sp, #8]
    4098:	f8cd 8000 	str.w	r8, [sp]
    409c:	4b3c      	ldr	r3, [pc, #240]	; (4190 <send_frag+0x190>)
    409e:	4a35      	ldr	r2, [pc, #212]	; (4174 <send_frag+0x174>)
    40a0:	4936      	ldr	r1, [pc, #216]	; (417c <send_frag+0x17c>)
    40a2:	483c      	ldr	r0, [pc, #240]	; (4194 <send_frag+0x194>)
    40a4:	47a0      	blx	r4
    40a6:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    40a8:	6872      	ldr	r2, [r6, #4]
	return node->next;
    40aa:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    40ac:	6033      	str	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    40ae:	4294      	cmp	r4, r2
	list->tail = node;
    40b0:	bf08      	it	eq
    40b2:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    40b4:	f8c4 b004 	str.w	fp, [r4, #4]
	__asm__ volatile(
    40b8:	f04f 0320 	mov.w	r3, #32
    40bc:	f3ef 8211 	mrs	r2, BASEPRI
    40c0:	f383 8811 	msr	BASEPRI, r3
	parent->next = child;
    40c4:	2300      	movs	r3, #0
    40c6:	6023      	str	r3, [r4, #0]
    40c8:	696b      	ldr	r3, [r5, #20]
Z_GENLIST_APPEND(slist, snode);
    40ca:	2b00      	cmp	r3, #0
    40cc:	d141      	bne.n	4152 <send_frag+0x152>
	list->tail = node;
    40ce:	616c      	str	r4, [r5, #20]
	list->head = node;
    40d0:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    40d2:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    40d6:	4638      	mov	r0, r7
    40d8:	f7fe f9d8 	bl	248c <bt_send>
	if (err) {
    40dc:	2800      	cmp	r0, #0
    40de:	d044      	beq.n	416a <send_frag+0x16a>
		BT_ERR("Unable to send to driver (err %d)", err);
    40e0:	f8cd 8008 	str.w	r8, [sp, #8]
    40e4:	9001      	str	r0, [sp, #4]
    40e6:	f8cd 8000 	str.w	r8, [sp]
    40ea:	4b23      	ldr	r3, [pc, #140]	; (4178 <send_frag+0x178>)
    40ec:	f8d9 8000 	ldr.w	r8, [r9]
    40f0:	4a29      	ldr	r2, [pc, #164]	; (4198 <send_frag+0x198>)
    40f2:	4922      	ldr	r1, [pc, #136]	; (417c <send_frag+0x17c>)
    40f4:	4829      	ldr	r0, [pc, #164]	; (419c <send_frag+0x19c>)
    40f6:	47c0      	blx	r8
	__asm__ volatile(
    40f8:	f04f 0320 	mov.w	r3, #32
    40fc:	f3ef 8111 	mrs	r1, BASEPRI
    4100:	f383 8811 	msr	BASEPRI, r3
    4104:	692b      	ldr	r3, [r5, #16]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4106:	2200      	movs	r2, #0
    4108:	b153      	cbz	r3, 4120 <send_frag+0x120>
    410a:	429c      	cmp	r4, r3
    410c:	d12a      	bne.n	4164 <send_frag+0x164>
    410e:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode);
    4110:	bb12      	cbnz	r2, 4158 <send_frag+0x158>
    4112:	696a      	ldr	r2, [r5, #20]
	list->head = node;
    4114:	612b      	str	r3, [r5, #16]
Z_GENLIST_REMOVE(slist, snode);
    4116:	4294      	cmp	r4, r2
    4118:	d100      	bne.n	411c <send_frag+0x11c>
	list->tail = node;
    411a:	616b      	str	r3, [r5, #20]
	parent->next = child;
    411c:	2300      	movs	r3, #0
    411e:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4120:	f381 8811 	msr	BASEPRI, r1
	tx->cb = NULL;
    4124:	2300      	movs	r3, #0
    4126:	6063      	str	r3, [r4, #4]
    4128:	6833      	ldr	r3, [r6, #0]
    412a:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode);
    412c:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    412e:	6034      	str	r4, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    4130:	b903      	cbnz	r3, 4134 <send_frag+0x134>
	list->tail = node;
    4132:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4134:	4813      	ldr	r0, [pc, #76]	; (4184 <send_frag+0x184>)
    4136:	f00f ffaf 	bl	14098 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    413a:	f1ba 0f00 	cmp.w	sl, #0
    413e:	d004      	beq.n	414a <send_frag+0x14a>
		net_buf_unref(buf);
    4140:	4638      	mov	r0, r7
    4142:	f00e feab 	bl	12e9c <net_buf_unref>
	}
	return false;
    4146:	f04f 0a00 	mov.w	sl, #0
}
    414a:	4650      	mov	r0, sl
    414c:	b009      	add	sp, #36	; 0x24
    414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	parent->next = child;
    4152:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4154:	616c      	str	r4, [r5, #20]
    4156:	e7bc      	b.n	40d2 <send_frag+0xd2>
	parent->next = child;
    4158:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    415a:	696b      	ldr	r3, [r5, #20]
    415c:	429c      	cmp	r4, r3
	list->tail = node;
    415e:	bf08      	it	eq
    4160:	616a      	streq	r2, [r5, #20]
    4162:	e7db      	b.n	411c <send_frag+0x11c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    4164:	461a      	mov	r2, r3
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	e7ce      	b.n	4108 <send_frag+0x108>
	return true;
    416a:	f04f 0a01 	mov.w	sl, #1
    416e:	e7ec      	b.n	414a <send_frag+0x14a>
    4170:	00014c55 	.word	0x00014c55
    4174:	00015e82 	.word	0x00015e82
    4178:	00015cf6 	.word	0x00015cf6
    417c:	00015a12 	.word	0x00015a12
    4180:	0001618c 	.word	0x0001618c
    4184:	20003b34 	.word	0x20003b34
    4188:	20000360 	.word	0x20000360
    418c:	20000400 	.word	0x20000400
    4190:	00015ce7 	.word	0x00015ce7
    4194:	000161c4 	.word	0x000161c4
    4198:	000159c3 	.word	0x000159c3
    419c:	0001544c 	.word	0x0001544c
    41a0:	20003aa4 	.word	0x20003aa4

000041a4 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    41a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    41a6:	4c17      	ldr	r4, [pc, #92]	; (4204 <bt_conn_add_le+0x60>)
    41a8:	f104 0648 	add.w	r6, r4, #72	; 0x48
{
    41ac:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    41ae:	4630      	mov	r0, r6
    41b0:	f7ff fd48 	bl	3c44 <atomic_get>
    41b4:	4605      	mov	r5, r0
    41b6:	b108      	cbz	r0, 41bc <bt_conn_add_le+0x18>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    41b8:	2000      	movs	r0, #0
    41ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    41bc:	4601      	mov	r1, r0
    41be:	22a0      	movs	r2, #160	; 0xa0
    41c0:	4620      	mov	r0, r4
    41c2:	f7fd fd59 	bl	1c78 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    41c6:	f3bf 8f5b 	dmb	ish
    41ca:	2301      	movs	r3, #1
    41cc:	e856 2f00 	ldrex	r2, [r6]
    41d0:	e846 3100 	strex	r1, r3, [r6]
    41d4:	2900      	cmp	r1, #0
    41d6:	d1f9      	bne.n	41cc <bt_conn_add_le+0x28>
    41d8:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    41dc:	2207      	movs	r2, #7
    41de:	4639      	mov	r1, r7
    41e0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    41e4:	f7fd fd1c 	bl	1c20 <memcpy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    41e8:	2318      	movs	r3, #24
    41ea:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    41ee:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    41f0:	f104 0078 	add.w	r0, r4, #120	; 0x78
	conn->type = BT_CONN_TYPE_LE;
    41f4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    41f6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    41fa:	4903      	ldr	r1, [pc, #12]	; (4208 <bt_conn_add_le+0x64>)
    41fc:	f010 fa48 	bl	14690 <k_delayed_work_init>
			conn = &conns[i];
    4200:	4620      	mov	r0, r4

	return conn;
}
    4202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4204:	20000360 	.word	0x20000360
    4208:	000049cd 	.word	0x000049cd

0000420c <bt_conn_addr_le_cmp>:

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    420c:	b538      	push	{r3, r4, r5, lr}
    420e:	460d      	mov	r5, r1
    4210:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    4212:	f100 014c 	add.w	r1, r0, #76	; 0x4c
    4216:	2207      	movs	r2, #7
    4218:	4628      	mov	r0, r5
    421a:	f7fd fcec 	bl	1bf6 <memcmp>
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    421e:	b160      	cbz	r0, 423a <bt_conn_addr_le_cmp+0x2e>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4220:	78e3      	ldrb	r3, [r4, #3]
    4222:	2207      	movs	r2, #7
    4224:	b933      	cbnz	r3, 4234 <bt_conn_addr_le_cmp+0x28>
    4226:	f104 015a 	add.w	r1, r4, #90	; 0x5a
    422a:	4628      	mov	r0, r5
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}
    422c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4230:	f7fd bce1 	b.w	1bf6 <memcmp>
    4234:	f104 0153 	add.w	r1, r4, #83	; 0x53
    4238:	e7f7      	b.n	422a <bt_conn_addr_le_cmp+0x1e>
    423a:	bd38      	pop	{r3, r4, r5, pc}

0000423c <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    423c:	b570      	push	{r4, r5, r6, lr}
    423e:	4604      	mov	r4, r0
    4240:	b086      	sub	sp, #24
	atomic_inc(&conn->ref);
    4242:	f100 0548 	add.w	r5, r0, #72	; 0x48
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4246:	f3bf 8f5b 	dmb	ish
    424a:	e855 3f00 	ldrex	r3, [r5]
    424e:	3301      	adds	r3, #1
    4250:	e845 3200 	strex	r2, r3, [r5]
    4254:	2a00      	cmp	r2, #0
    4256:	d1f8      	bne.n	424a <bt_conn_ref+0xe>
    4258:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    425c:	4b0b      	ldr	r3, [pc, #44]	; (428c <bt_conn_ref+0x50>)
    425e:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4260:	f00f fee0 	bl	14024 <_impl_k_current_get>
    4264:	4602      	mov	r2, r0
    4266:	4628      	mov	r0, r5
    4268:	8821      	ldrh	r1, [r4, #0]
    426a:	f7ff fceb 	bl	3c44 <atomic_get>
    426e:	4b08      	ldr	r3, [pc, #32]	; (4290 <bt_conn_ref+0x54>)
    4270:	9304      	str	r3, [sp, #16]
    4272:	9003      	str	r0, [sp, #12]
    4274:	9102      	str	r1, [sp, #8]
    4276:	9201      	str	r2, [sp, #4]
    4278:	9300      	str	r3, [sp, #0]
    427a:	4a06      	ldr	r2, [pc, #24]	; (4294 <bt_conn_ref+0x58>)
    427c:	4b06      	ldr	r3, [pc, #24]	; (4298 <bt_conn_ref+0x5c>)
    427e:	4907      	ldr	r1, [pc, #28]	; (429c <bt_conn_ref+0x60>)
    4280:	4807      	ldr	r0, [pc, #28]	; (42a0 <bt_conn_ref+0x64>)
    4282:	47b0      	blx	r6

	return conn;
}
    4284:	4620      	mov	r0, r4
    4286:	b006      	add	sp, #24
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	bf00      	nop
    428c:	20003aa4 	.word	0x20003aa4
    4290:	00014c55 	.word	0x00014c55
    4294:	00015e82 	.word	0x00015e82
    4298:	00015d45 	.word	0x00015d45
    429c:	00015a12 	.word	0x00015a12
    42a0:	0001607f 	.word	0x0001607f

000042a4 <bt_conn_lookup_handle>:
{
    42a4:	b508      	push	{r3, lr}
		if (!atomic_get(&conns[i].ref)) {
    42a6:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <bt_conn_lookup_handle+0x2c>)
{
    42a8:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    42aa:	f103 0048 	add.w	r0, r3, #72	; 0x48
    42ae:	f7ff fcc9 	bl	3c44 <atomic_get>
    42b2:	b158      	cbz	r0, 42cc <bt_conn_lookup_handle+0x28>
		if (conns[i].state != BT_CONN_CONNECTED &&
    42b4:	7a5a      	ldrb	r2, [r3, #9]
    42b6:	3a03      	subs	r2, #3
    42b8:	2a01      	cmp	r2, #1
    42ba:	d807      	bhi.n	42cc <bt_conn_lookup_handle+0x28>
		if (conns[i].handle == handle) {
    42bc:	881a      	ldrh	r2, [r3, #0]
    42be:	428a      	cmp	r2, r1
    42c0:	d104      	bne.n	42cc <bt_conn_lookup_handle+0x28>
			return bt_conn_ref(&conns[i]);
    42c2:	4618      	mov	r0, r3
}
    42c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return bt_conn_ref(&conns[i]);
    42c8:	f7ff bfb8 	b.w	423c <bt_conn_ref>
}
    42cc:	2000      	movs	r0, #0
    42ce:	bd08      	pop	{r3, pc}
    42d0:	20000360 	.word	0x20000360

000042d4 <bt_conn_lookup_addr_le>:
{
    42d4:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    42d6:	4c0a      	ldr	r4, [pc, #40]	; (4300 <bt_conn_lookup_addr_le+0x2c>)
{
    42d8:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    42da:	f104 0048 	add.w	r0, r4, #72	; 0x48
    42de:	f7ff fcb1 	bl	3c44 <atomic_get>
    42e2:	b150      	cbz	r0, 42fa <bt_conn_lookup_addr_le+0x26>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    42e4:	78a3      	ldrb	r3, [r4, #2]
    42e6:	b943      	cbnz	r3, 42fa <bt_conn_lookup_addr_le+0x26>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    42e8:	4620      	mov	r0, r4
    42ea:	f7ff ff8f 	bl	420c <bt_conn_addr_le_cmp>
    42ee:	b920      	cbnz	r0, 42fa <bt_conn_lookup_addr_le+0x26>
			return bt_conn_ref(&conns[i]);
    42f0:	4620      	mov	r0, r4
}
    42f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return bt_conn_ref(&conns[i]);
    42f6:	f7ff bfa1 	b.w	423c <bt_conn_ref>
}
    42fa:	2000      	movs	r0, #0
    42fc:	bd10      	pop	{r4, pc}
    42fe:	bf00      	nop
    4300:	20000360 	.word	0x20000360

00004304 <bt_conn_lookup_state_le>:
{
    4304:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    4306:	4c0d      	ldr	r4, [pc, #52]	; (433c <bt_conn_lookup_state_le+0x38>)
{
    4308:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    430a:	f104 0048 	add.w	r0, r4, #72	; 0x48
{
    430e:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    4310:	f7ff fc98 	bl	3c44 <atomic_get>
    4314:	b180      	cbz	r0, 4338 <bt_conn_lookup_state_le+0x34>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4316:	78a2      	ldrb	r2, [r4, #2]
    4318:	b972      	cbnz	r2, 4338 <bt_conn_lookup_state_le+0x34>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    431a:	b93b      	cbnz	r3, 432c <bt_conn_lookup_state_le+0x28>
		if (conns[i].state == state) {
    431c:	7a63      	ldrb	r3, [r4, #9]
    431e:	42ab      	cmp	r3, r5
    4320:	d10a      	bne.n	4338 <bt_conn_lookup_state_le+0x34>
			return bt_conn_ref(&conns[i]);
    4322:	4806      	ldr	r0, [pc, #24]	; (433c <bt_conn_lookup_state_le+0x38>)
}
    4324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_conn_ref(&conns[i]);
    4328:	f7ff bf88 	b.w	423c <bt_conn_ref>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    432c:	4619      	mov	r1, r3
    432e:	4620      	mov	r0, r4
    4330:	f7ff ff6c 	bl	420c <bt_conn_addr_le_cmp>
    4334:	2800      	cmp	r0, #0
    4336:	d0f1      	beq.n	431c <bt_conn_lookup_state_le+0x18>
}
    4338:	2000      	movs	r0, #0
    433a:	bd38      	pop	{r3, r4, r5, pc}
    433c:	20000360 	.word	0x20000360

00004340 <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	4605      	mov	r5, r0
    4344:	b086      	sub	sp, #24
	atomic_dec(&conn->ref);
    4346:	f100 0448 	add.w	r4, r0, #72	; 0x48
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    434a:	f3bf 8f5b 	dmb	ish
    434e:	e854 3f00 	ldrex	r3, [r4]
    4352:	3b01      	subs	r3, #1
    4354:	e844 3200 	strex	r2, r3, [r4]
    4358:	2a00      	cmp	r2, #0
    435a:	d1f8      	bne.n	434e <bt_conn_unref+0xe>
    435c:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
    4360:	4b0a      	ldr	r3, [pc, #40]	; (438c <bt_conn_unref+0x4c>)
    4362:	681e      	ldr	r6, [r3, #0]
    4364:	f00f fe5e 	bl	14024 <_impl_k_current_get>
    4368:	4602      	mov	r2, r0
    436a:	4620      	mov	r0, r4
    436c:	8829      	ldrh	r1, [r5, #0]
    436e:	f7ff fc69 	bl	3c44 <atomic_get>
    4372:	4b07      	ldr	r3, [pc, #28]	; (4390 <bt_conn_unref+0x50>)
    4374:	9304      	str	r3, [sp, #16]
    4376:	9003      	str	r0, [sp, #12]
    4378:	9102      	str	r1, [sp, #8]
    437a:	9201      	str	r2, [sp, #4]
    437c:	9300      	str	r3, [sp, #0]
    437e:	4a05      	ldr	r2, [pc, #20]	; (4394 <bt_conn_unref+0x54>)
    4380:	4b05      	ldr	r3, [pc, #20]	; (4398 <bt_conn_unref+0x58>)
    4382:	4906      	ldr	r1, [pc, #24]	; (439c <bt_conn_unref+0x5c>)
    4384:	4806      	ldr	r0, [pc, #24]	; (43a0 <bt_conn_unref+0x60>)
    4386:	47b0      	blx	r6
}
    4388:	b006      	add	sp, #24
    438a:	bd70      	pop	{r4, r5, r6, pc}
    438c:	20003aa4 	.word	0x20003aa4
    4390:	00014c55 	.word	0x00014c55
    4394:	00015e82 	.word	0x00015e82
    4398:	00015d51 	.word	0x00015d51
    439c:	00015a12 	.word	0x00015a12
    43a0:	0001607f 	.word	0x0001607f

000043a4 <conn_cleanup>:
{
    43a4:	b538      	push	{r3, r4, r5, lr}
    43a6:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    43a8:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    43ac:	2100      	movs	r1, #0
    43ae:	4628      	mov	r0, r5
    43b0:	f00e fd4a 	bl	12e48 <net_buf_get>
    43b4:	b950      	cbnz	r0, 43cc <conn_cleanup+0x28>
	bt_conn_notify_tx(conn);
    43b6:	4620      	mov	r0, r4
    43b8:	f7ff fde6 	bl	3f88 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    43bc:	4620      	mov	r0, r4
    43be:	f7ff fc47 	bl	3c50 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    43c2:	4620      	mov	r0, r4
}
    43c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    43c8:	f7ff bfba 	b.w	4340 <bt_conn_unref>
		net_buf_unref(buf);
    43cc:	f00e fd66 	bl	12e9c <net_buf_unref>
    43d0:	e7ec      	b.n	43ac <conn_cleanup+0x8>
	...

000043d4 <bt_conn_prepare_events>:
{
    43d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	BT_DBG("");
    43d8:	4d2e      	ldr	r5, [pc, #184]	; (4494 <bt_conn_prepare_events+0xc0>)
    43da:	4c2f      	ldr	r4, [pc, #188]	; (4498 <bt_conn_prepare_events+0xc4>)
    43dc:	682f      	ldr	r7, [r5, #0]
{
    43de:	4606      	mov	r6, r0
    43e0:	f00f fe20 	bl	14024 <_impl_k_current_get>
	BT_DBG("");
    43e4:	4b2d      	ldr	r3, [pc, #180]	; (449c <bt_conn_prepare_events+0xc8>)
    43e6:	9001      	str	r0, [sp, #4]
    43e8:	4a2d      	ldr	r2, [pc, #180]	; (44a0 <bt_conn_prepare_events+0xcc>)
    43ea:	492e      	ldr	r1, [pc, #184]	; (44a4 <bt_conn_prepare_events+0xd0>)
    43ec:	482e      	ldr	r0, [pc, #184]	; (44a8 <bt_conn_prepare_events+0xd4>)
    43ee:	9402      	str	r4, [sp, #8]
    43f0:	9400      	str	r4, [sp, #0]
    43f2:	47b8      	blx	r7
	conn_change.signaled = 0;
    43f4:	4b2d      	ldr	r3, [pc, #180]	; (44ac <bt_conn_prepare_events+0xd8>)
    43f6:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    43f8:	2101      	movs	r1, #1
    43fa:	4630      	mov	r0, r6
	conn_change.signaled = 0;
    43fc:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    43fe:	f010 fa8e 	bl	1491e <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    4402:	4b2b      	ldr	r3, [pc, #172]	; (44b0 <bt_conn_prepare_events+0xdc>)
    4404:	f103 0048 	add.w	r0, r3, #72	; 0x48
    4408:	f7ff fc1c 	bl	3c44 <atomic_get>
    440c:	462a      	mov	r2, r5
    440e:	461f      	mov	r7, r3
    4410:	4625      	mov	r5, r4
    4412:	b918      	cbnz	r0, 441c <bt_conn_prepare_events+0x48>
			continue;
    4414:	2001      	movs	r0, #1
}
    4416:	b004      	add	sp, #16
    4418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    441c:	7a59      	ldrb	r1, [r3, #9]
    441e:	b999      	cbnz	r1, 4448 <bt_conn_prepare_events+0x74>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4420:	f3bf 8f5b 	dmb	ish
    4424:	1d19      	adds	r1, r3, #4
    4426:	e851 0f00 	ldrex	r0, [r1]
    442a:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    442e:	e841 4e00 	strex	lr, r4, [r1]
    4432:	f1be 0f00 	cmp.w	lr, #0
    4436:	d1f6      	bne.n	4426 <bt_conn_prepare_events+0x52>
    4438:	f3bf 8f5b 	dmb	ish
    443c:	0641      	lsls	r1, r0, #25
    443e:	d503      	bpl.n	4448 <bt_conn_prepare_events+0x74>
			conn_cleanup(conn);
    4440:	4618      	mov	r0, r3
    4442:	f7ff ffaf 	bl	43a4 <conn_cleanup>
    4446:	e7e5      	b.n	4414 <bt_conn_prepare_events+0x40>
		if (conn->state != BT_CONN_CONNECTED) {
    4448:	7a7c      	ldrb	r4, [r7, #9]
    444a:	2c03      	cmp	r4, #3
    444c:	d1e2      	bne.n	4414 <bt_conn_prepare_events+0x40>
		BT_DBG("Adding conn %p to poll list", conn);
    444e:	f8d2 8000 	ldr.w	r8, [r2]
    4452:	f00f fde7 	bl	14024 <_impl_k_current_get>
    4456:	4b11      	ldr	r3, [pc, #68]	; (449c <bt_conn_prepare_events+0xc8>)
    4458:	9001      	str	r0, [sp, #4]
    445a:	4a11      	ldr	r2, [pc, #68]	; (44a0 <bt_conn_prepare_events+0xcc>)
    445c:	4911      	ldr	r1, [pc, #68]	; (44a4 <bt_conn_prepare_events+0xd0>)
    445e:	4815      	ldr	r0, [pc, #84]	; (44b4 <bt_conn_prepare_events+0xe0>)
    4460:	9503      	str	r5, [sp, #12]
    4462:	9702      	str	r7, [sp, #8]
    4464:	9500      	str	r5, [sp, #0]
    4466:	47c0      	blx	r8
		k_poll_event_init(&events[ev_count],
    4468:	4b13      	ldr	r3, [pc, #76]	; (44b8 <bt_conn_prepare_events+0xe4>)
    446a:	2200      	movs	r2, #0
    446c:	2104      	movs	r1, #4
    446e:	f106 0014 	add.w	r0, r6, #20
    4472:	f010 fa54 	bl	1491e <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    4476:	2301      	movs	r3, #1
    4478:	f886 3020 	strb.w	r3, [r6, #32]
		k_poll_event_init(&events[ev_count],
    447c:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4480:	4b0e      	ldr	r3, [pc, #56]	; (44bc <bt_conn_prepare_events+0xe8>)
    4482:	2200      	movs	r2, #0
    4484:	2104      	movs	r1, #4
    4486:	f010 fa4a 	bl	1491e <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    448a:	2302      	movs	r3, #2
    448c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4490:	4620      	mov	r0, r4
	return ev_count;
    4492:	e7c0      	b.n	4416 <bt_conn_prepare_events+0x42>
    4494:	20003aa4 	.word	0x20003aa4
    4498:	00014c55 	.word	0x00014c55
    449c:	00015d09 	.word	0x00015d09
    44a0:	00015e82 	.word	0x00015e82
    44a4:	00015a12 	.word	0x00015a12
    44a8:	00015dd6 	.word	0x00015dd6
    44ac:	20003bd8 	.word	0x20003bd8
    44b0:	20000360 	.word	0x20000360
    44b4:	00015dec 	.word	0x00015dec
    44b8:	20000378 	.word	0x20000378
    44bc:	2000038c 	.word	0x2000038c

000044c0 <bt_conn_set_state>:
{
    44c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44c4:	4604      	mov	r4, r0
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    44c6:	4e73      	ldr	r6, [pc, #460]	; (4694 <bt_conn_set_state+0x1d4>)
    44c8:	f8df 8204 	ldr.w	r8, [pc, #516]	; 46d0 <bt_conn_set_state+0x210>
    44cc:	6835      	ldr	r5, [r6, #0]
{
    44ce:	b087      	sub	sp, #28
    44d0:	460f      	mov	r7, r1
    44d2:	f00f fda7 	bl	14024 <_impl_k_current_get>
	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));
    44d6:	7a63      	ldrb	r3, [r4, #9]
    44d8:	496f      	ldr	r1, [pc, #444]	; (4698 <bt_conn_set_state+0x1d8>)
    44da:	9001      	str	r0, [sp, #4]
    44dc:	2b04      	cmp	r3, #4
    44de:	bf96      	itet	ls
    44e0:	4a6e      	ldrls	r2, [pc, #440]	; (469c <bt_conn_set_state+0x1dc>)
    44e2:	4b6f      	ldrhi	r3, [pc, #444]	; (46a0 <bt_conn_set_state+0x1e0>)
    44e4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    44e8:	9302      	str	r3, [sp, #8]
    44ea:	2f04      	cmp	r7, #4
    44ec:	bf96      	itet	ls
    44ee:	4a6b      	ldrls	r2, [pc, #428]	; (469c <bt_conn_set_state+0x1dc>)
    44f0:	4a6b      	ldrhi	r2, [pc, #428]	; (46a0 <bt_conn_set_state+0x1e0>)
    44f2:	f852 2027 	ldrls.w	r2, [r2, r7, lsl #2]
    44f6:	9203      	str	r2, [sp, #12]
    44f8:	f8cd 8010 	str.w	r8, [sp, #16]
    44fc:	f8cd 8000 	str.w	r8, [sp]
    4500:	4b68      	ldr	r3, [pc, #416]	; (46a4 <bt_conn_set_state+0x1e4>)
    4502:	4a69      	ldr	r2, [pc, #420]	; (46a8 <bt_conn_set_state+0x1e8>)
    4504:	4869      	ldr	r0, [pc, #420]	; (46ac <bt_conn_set_state+0x1ec>)
    4506:	47a8      	blx	r5
	if (conn->state == state) {
    4508:	7a65      	ldrb	r5, [r4, #9]
    450a:	42af      	cmp	r7, r5
    450c:	46c1      	mov	r9, r8
    450e:	d10c      	bne.n	452a <bt_conn_set_state+0x6a>
		BT_WARN("no transition");
    4510:	f8cd 8004 	str.w	r8, [sp, #4]
    4514:	f8cd 8000 	str.w	r8, [sp]
    4518:	6834      	ldr	r4, [r6, #0]
    451a:	4b62      	ldr	r3, [pc, #392]	; (46a4 <bt_conn_set_state+0x1e4>)
    451c:	4a64      	ldr	r2, [pc, #400]	; (46b0 <bt_conn_set_state+0x1f0>)
    451e:	495e      	ldr	r1, [pc, #376]	; (4698 <bt_conn_set_state+0x1d8>)
    4520:	4864      	ldr	r0, [pc, #400]	; (46b4 <bt_conn_set_state+0x1f4>)
    4522:	47a0      	blx	r4
}
    4524:	b007      	add	sp, #28
    4526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->state = state;
    452a:	7267      	strb	r7, [r4, #9]
	switch (old_state) {
    452c:	b195      	cbz	r5, 4554 <bt_conn_set_state+0x94>
    452e:	2d02      	cmp	r5, #2
    4530:	d014      	beq.n	455c <bt_conn_set_state+0x9c>
	switch (conn->state) {
    4532:	7a63      	ldrb	r3, [r4, #9]
    4534:	2b04      	cmp	r3, #4
    4536:	f200 80a0 	bhi.w	467a <bt_conn_set_state+0x1ba>
    453a:	a201      	add	r2, pc, #4	; (adr r2, 4540 <bt_conn_set_state+0x80>)
    453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4540:	000045a3 	.word	0x000045a3
    4544:	00004525 	.word	0x00004525
    4548:	0000465f 	.word	0x0000465f
    454c:	0000456d 	.word	0x0000456d
    4550:	00004525 	.word	0x00004525
		bt_conn_ref(conn);
    4554:	4620      	mov	r0, r4
    4556:	f7ff fe71 	bl	423c <bt_conn_ref>
		break;
    455a:	e7ea      	b.n	4532 <bt_conn_set_state+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    455c:	78a3      	ldrb	r3, [r4, #2]
    455e:	2b00      	cmp	r3, #0
    4560:	d1e7      	bne.n	4532 <bt_conn_set_state+0x72>
			k_delayed_work_cancel(&conn->le.update_work);
    4562:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4566:	f010 f8a3 	bl	146b0 <k_delayed_work_cancel>
    456a:	e7e2      	b.n	4532 <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    456c:	78a3      	ldrb	r3, [r4, #2]
    456e:	2b02      	cmp	r3, #2
    4570:	d0d8      	beq.n	4524 <bt_conn_set_state+0x64>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    4572:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4576:	f00f fa8b 	bl	13a90 <_impl_k_queue_init>
    457a:	f104 0018 	add.w	r0, r4, #24
    457e:	f00f fa87 	bl	13a90 <_impl_k_queue_init>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_POLL_SIGNAL_RESET, k_poll_signal_reset, struct k_poll_signal *, signal);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_POLL_SIGNAL_CHECK, k_poll_signal_check, struct k_poll_signal *, signal, unsigned int *, signaled, int *, result);

K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4582:	2100      	movs	r1, #0
    4584:	484c      	ldr	r0, [pc, #304]	; (46b8 <bt_conn_set_state+0x1f8>)
    4586:	f010 fa6d 	bl	14a64 <_impl_k_poll_signal>
	list->head = NULL;
    458a:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    458c:	4620      	mov	r0, r4
    458e:	6423      	str	r3, [r4, #64]	; 0x40
	list->tail = NULL;
    4590:	6463      	str	r3, [r4, #68]	; 0x44
    4592:	f000 fc1b 	bl	4dcc <bt_l2cap_connected>
		notify_connected(conn);
    4596:	4620      	mov	r0, r4
}
    4598:	b007      	add	sp, #28
    459a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		notify_connected(conn);
    459e:	f7ff bb41 	b.w	3c24 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    45a2:	78a3      	ldrb	r3, [r4, #2]
    45a4:	2b02      	cmp	r3, #2
    45a6:	d105      	bne.n	45b4 <bt_conn_set_state+0xf4>
			bt_conn_unref(conn);
    45a8:	4620      	mov	r0, r4
}
    45aa:	b007      	add	sp, #28
    45ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bt_conn_unref(conn);
    45b0:	f7ff bec6 	b.w	4340 <bt_conn_unref>
		if (old_state == BT_CONN_CONNECTED ||
    45b4:	1eeb      	subs	r3, r5, #3
    45b6:	2b01      	cmp	r3, #1
    45b8:	d844      	bhi.n	4644 <bt_conn_set_state+0x184>
			bt_l2cap_disconnected(conn);
    45ba:	4620      	mov	r0, r4
    45bc:	f000 fc40 	bl	4e40 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    45c0:	4b3e      	ldr	r3, [pc, #248]	; (46bc <bt_conn_set_state+0x1fc>)
    45c2:	681d      	ldr	r5, [r3, #0]
    45c4:	b9ed      	cbnz	r5, 4602 <bt_conn_set_state+0x142>
    45c6:	4e3e      	ldr	r6, [pc, #248]	; (46c0 <bt_conn_set_state+0x200>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    45c8:	4f3e      	ldr	r7, [pc, #248]	; (46c4 <bt_conn_set_state+0x204>)
	__asm__ volatile(
    45ca:	f04f 0320 	mov.w	r3, #32
    45ce:	f3ef 8111 	mrs	r1, BASEPRI
    45d2:	f383 8811 	msr	BASEPRI, r3
    45d6:	6923      	ldr	r3, [r4, #16]
Z_GENLIST_GET(slist, snode);
    45d8:	b12b      	cbz	r3, 45e6 <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    45da:	6960      	ldr	r0, [r4, #20]
	return node->next;
    45dc:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    45de:	6122      	str	r2, [r4, #16]
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    45e0:	4283      	cmp	r3, r0
	list->tail = node;
    45e2:	bf08      	it	eq
    45e4:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    45e6:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    45ea:	b18b      	cbz	r3, 4610 <bt_conn_set_state+0x150>
    45ec:	6832      	ldr	r2, [r6, #0]
	parent->next = child;
    45ee:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    45f0:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    45f2:	605d      	str	r5, [r3, #4]
	list->head = node;
    45f4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode);
    45f6:	b902      	cbnz	r2, 45fa <bt_conn_set_state+0x13a>
	list->tail = node;
    45f8:	6073      	str	r3, [r6, #4]
    45fa:	4638      	mov	r0, r7
    45fc:	f00f fd4c 	bl	14098 <_impl_k_sem_give>
    4600:	e7e3      	b.n	45ca <bt_conn_set_state+0x10a>
		if (cb->disconnected) {
    4602:	686b      	ldr	r3, [r5, #4]
    4604:	b113      	cbz	r3, 460c <bt_conn_set_state+0x14c>
			cb->disconnected(conn, conn->err);
    4606:	7a21      	ldrb	r1, [r4, #8]
    4608:	4620      	mov	r0, r4
    460a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    460c:	692d      	ldr	r5, [r5, #16]
    460e:	e7d9      	b.n	45c4 <bt_conn_set_state+0x104>
			if (conn->type == BT_CONN_TYPE_LE) {
    4610:	78a3      	ldrb	r3, [r4, #2]
    4612:	b91b      	cbnz	r3, 461c <bt_conn_set_state+0x15c>
				k_delayed_work_cancel(&conn->le.update_work);
    4614:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4618:	f010 f84a 	bl	146b0 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    461c:	f3bf 8f5b 	dmb	ish
    4620:	3404      	adds	r4, #4
    4622:	e854 3f00 	ldrex	r3, [r4]
    4626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    462a:	e844 3200 	strex	r2, r3, [r4]
    462e:	2a00      	cmp	r2, #0
    4630:	d1f7      	bne.n	4622 <bt_conn_set_state+0x162>
    4632:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE2(K_SYSCALL_K_POLL_SIGNAL, k_poll_signal, int, struct k_poll_signal *, signal, int, result);
    4636:	4820      	ldr	r0, [pc, #128]	; (46b8 <bt_conn_set_state+0x1f8>)
    4638:	2100      	movs	r1, #0
}
    463a:	b007      	add	sp, #28
    463c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4640:	f010 ba10 	b.w	14a64 <_impl_k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    4644:	2d02      	cmp	r5, #2
    4646:	d103      	bne.n	4650 <bt_conn_set_state+0x190>
			notify_connected(conn);
    4648:	4620      	mov	r0, r4
    464a:	f7ff faeb 	bl	3c24 <notify_connected>
    464e:	e7ab      	b.n	45a8 <bt_conn_set_state+0xe8>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4650:	2d01      	cmp	r5, #1
    4652:	f47f af67 	bne.w	4524 <bt_conn_set_state+0x64>
			if (conn->err) {
    4656:	7a23      	ldrb	r3, [r4, #8]
    4658:	2b00      	cmp	r3, #0
    465a:	d0a5      	beq.n	45a8 <bt_conn_set_state+0xe8>
    465c:	e7f4      	b.n	4648 <bt_conn_set_state+0x188>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    465e:	78a3      	ldrb	r3, [r4, #2]
    4660:	2b00      	cmp	r3, #0
    4662:	f47f af5f 	bne.w	4524 <bt_conn_set_state+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4666:	4818      	ldr	r0, [pc, #96]	; (46c8 <bt_conn_set_state+0x208>)
    4668:	f640 32b8 	movw	r2, #3000	; 0xbb8
    466c:	f104 0178 	add.w	r1, r4, #120	; 0x78
}
    4670:	b007      	add	sp, #28
    4672:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4676:	f010 b87f 	b.w	14778 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    467a:	f8cd 9008 	str.w	r9, [sp, #8]
    467e:	9701      	str	r7, [sp, #4]
    4680:	f8cd 9000 	str.w	r9, [sp]
    4684:	6834      	ldr	r4, [r6, #0]
    4686:	4b07      	ldr	r3, [pc, #28]	; (46a4 <bt_conn_set_state+0x1e4>)
    4688:	4a09      	ldr	r2, [pc, #36]	; (46b0 <bt_conn_set_state+0x1f0>)
    468a:	4903      	ldr	r1, [pc, #12]	; (4698 <bt_conn_set_state+0x1d8>)
    468c:	480f      	ldr	r0, [pc, #60]	; (46cc <bt_conn_set_state+0x20c>)
    468e:	47a0      	blx	r4
		break;
    4690:	e748      	b.n	4524 <bt_conn_set_state+0x64>
    4692:	bf00      	nop
    4694:	20003aa4 	.word	0x20003aa4
    4698:	00015a12 	.word	0x00015a12
    469c:	00015ca4 	.word	0x00015ca4
    46a0:	000160f9 	.word	0x000160f9
    46a4:	00015d33 	.word	0x00015d33
    46a8:	00015e82 	.word	0x00015e82
    46ac:	00016103 	.word	0x00016103
    46b0:	00015a0b 	.word	0x00015a0b
    46b4:	00016121 	.word	0x00016121
    46b8:	20003bd8 	.word	0x20003bd8
    46bc:	2000034c 	.word	0x2000034c
    46c0:	20000400 	.word	0x20000400
    46c4:	20003b34 	.word	0x20003b34
    46c8:	200019c8 	.word	0x200019c8
    46cc:	0001613f 	.word	0x0001613f
    46d0:	00014c55 	.word	0x00014c55

000046d4 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    46d4:	304c      	adds	r0, #76	; 0x4c
    46d6:	4770      	bx	lr

000046d8 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    46dc:	4608      	mov	r0, r1
{
    46de:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    46e0:	f7fd fe1c 	bl	231c <bt_le_conn_params_valid>
    46e4:	b908      	cbnz	r0, 46ea <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    46e6:	2400      	movs	r4, #0
    46e8:	e01c      	b.n	4724 <bt_conn_create_le+0x4c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    46ea:	481d      	ldr	r0, [pc, #116]	; (4760 <bt_conn_create_le+0x88>)
    46ec:	f7ff faaa 	bl	3c44 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    46f0:	0583      	lsls	r3, r0, #22
    46f2:	d4f8      	bmi.n	46e6 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    46f4:	4630      	mov	r0, r6
    46f6:	f7ff fded 	bl	42d4 <bt_conn_lookup_addr_le>
	if (conn) {
    46fa:	4604      	mov	r4, r0
    46fc:	b1a0      	cbz	r0, 4728 <bt_conn_create_le+0x50>
		switch (conn->state) {
    46fe:	7a43      	ldrb	r3, [r0, #9]
    4700:	2b01      	cmp	r3, #1
    4702:	d006      	beq.n	4712 <bt_conn_create_le+0x3a>
    4704:	d301      	bcc.n	470a <bt_conn_create_le+0x32>
    4706:	2b03      	cmp	r3, #3
    4708:	d90c      	bls.n	4724 <bt_conn_create_le+0x4c>
			bt_conn_unref(conn);
    470a:	4620      	mov	r0, r4
    470c:	f7ff fe18 	bl	4340 <bt_conn_unref>
    4710:	e7e9      	b.n	46e6 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    4712:	886b      	ldrh	r3, [r5, #2]
    4714:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	conn->le.latency = param->latency;
    4718:	88ab      	ldrh	r3, [r5, #4]
    471a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	conn->le.timeout = param->timeout;
    471e:	88eb      	ldrh	r3, [r5, #6]
    4720:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    4724:	4620      	mov	r0, r4
    4726:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    4728:	4630      	mov	r0, r6
    472a:	f7ff fd3b 	bl	41a4 <bt_conn_add_le>
	if (!conn) {
    472e:	4604      	mov	r4, r0
    4730:	2800      	cmp	r0, #0
    4732:	d0f7      	beq.n	4724 <bt_conn_create_le+0x4c>
	memcpy(dst, src, sizeof(*dst));
    4734:	2207      	movs	r2, #7
    4736:	4631      	mov	r1, r6
    4738:	305a      	adds	r0, #90	; 0x5a
    473a:	f7fd fa71 	bl	1c20 <memcpy>
	conn->le.interval_max = param->interval_max;
    473e:	886b      	ldrh	r3, [r5, #2]
    4740:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    4744:	88ab      	ldrh	r3, [r5, #4]
    4746:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    474a:	88eb      	ldrh	r3, [r5, #6]
    474c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4750:	4620      	mov	r0, r4
    4752:	2101      	movs	r1, #1
    4754:	f7ff feb4 	bl	44c0 <bt_conn_set_state>
	bt_le_scan_update(true);
    4758:	2001      	movs	r0, #1
    475a:	f7fd ff29 	bl	25b0 <bt_le_scan_update>
	return conn;
    475e:	e7e1      	b.n	4724 <bt_conn_create_le+0x4c>
    4760:	20003b18 	.word	0x20003b18

00004764 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    4764:	b570      	push	{r4, r5, r6, lr}
    4766:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    4768:	460d      	mov	r5, r1
    476a:	2900      	cmp	r1, #0
    476c:	d13b      	bne.n	47e6 <bt_le_set_auto_conn+0x82>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    476e:	4630      	mov	r0, r6
    4770:	f7ff fdb0 	bl	42d4 <bt_conn_lookup_addr_le>
	if (!conn) {
    4774:	4604      	mov	r4, r0
    4776:	b928      	cbnz	r0, 4784 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    4778:	4630      	mov	r0, r6
    477a:	f7ff fd13 	bl	41a4 <bt_conn_add_le>
		if (!conn) {
    477e:	4604      	mov	r4, r0
    4780:	2800      	cmp	r0, #0
    4782:	d051      	beq.n	4828 <bt_le_set_auto_conn+0xc4>
    4784:	1d23      	adds	r3, r4, #4
			return -ENOMEM;
		}
	}

	if (param) {
    4786:	2d00      	cmp	r5, #0
    4788:	d035      	beq.n	47f6 <bt_le_set_auto_conn+0x92>
	conn->le.interval_max = param->interval_max;
    478a:	886a      	ldrh	r2, [r5, #2]
    478c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->le.latency = param->latency;
    4790:	88aa      	ldrh	r2, [r5, #4]
    4792:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
	conn->le.timeout = param->timeout;
    4796:	88ea      	ldrh	r2, [r5, #6]
    4798:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    479c:	f3bf 8f5b 	dmb	ish
    47a0:	e853 2f00 	ldrex	r2, [r3]
    47a4:	f042 0101 	orr.w	r1, r2, #1
    47a8:	e843 1000 	strex	r0, r1, [r3]
    47ac:	2800      	cmp	r0, #0
    47ae:	d1f7      	bne.n	47a0 <bt_le_set_auto_conn+0x3c>
    47b0:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    47b4:	07d1      	lsls	r1, r2, #31
    47b6:	d402      	bmi.n	47be <bt_le_set_auto_conn+0x5a>
					     BT_CONN_AUTO_CONNECT)) {
			bt_conn_ref(conn);
    47b8:	4620      	mov	r0, r4
    47ba:	f7ff fd3f 	bl	423c <bt_conn_ref>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    47be:	7a63      	ldrb	r3, [r4, #9]
    47c0:	b963      	cbnz	r3, 47dc <bt_le_set_auto_conn+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    47c2:	481b      	ldr	r0, [pc, #108]	; (4830 <bt_le_set_auto_conn+0xcc>)
    47c4:	f7ff fa3e 	bl	3c44 <atomic_get>
    47c8:	0783      	lsls	r3, r0, #30
    47ca:	d507      	bpl.n	47dc <bt_le_set_auto_conn+0x78>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    47cc:	b11d      	cbz	r5, 47d6 <bt_le_set_auto_conn+0x72>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    47ce:	2101      	movs	r1, #1
    47d0:	4620      	mov	r0, r4
    47d2:	f7ff fe75 	bl	44c0 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    47d6:	2000      	movs	r0, #0
    47d8:	f7fd feea 	bl	25b0 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    47dc:	4620      	mov	r0, r4
    47de:	f7ff fdaf 	bl	4340 <bt_conn_unref>

	return 0;
    47e2:	2000      	movs	r0, #0
    47e4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    47e6:	4608      	mov	r0, r1
    47e8:	f7fd fd98 	bl	231c <bt_le_conn_params_valid>
    47ec:	2800      	cmp	r0, #0
    47ee:	d1be      	bne.n	476e <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    47f0:	f06f 0015 	mvn.w	r0, #21
    47f4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47f6:	f3bf 8f5b 	dmb	ish
    47fa:	e853 2f00 	ldrex	r2, [r3]
    47fe:	f022 0101 	bic.w	r1, r2, #1
    4802:	e843 1000 	strex	r0, r1, [r3]
    4806:	2800      	cmp	r0, #0
    4808:	d1f7      	bne.n	47fa <bt_le_set_auto_conn+0x96>
    480a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    480e:	07d2      	lsls	r2, r2, #31
    4810:	d5d5      	bpl.n	47be <bt_le_set_auto_conn+0x5a>
			bt_conn_unref(conn);
    4812:	4620      	mov	r0, r4
    4814:	f7ff fd94 	bl	4340 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    4818:	7a63      	ldrb	r3, [r4, #9]
    481a:	2b01      	cmp	r3, #1
    481c:	d1cf      	bne.n	47be <bt_le_set_auto_conn+0x5a>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    481e:	4629      	mov	r1, r5
    4820:	4620      	mov	r0, r4
    4822:	f7ff fe4d 	bl	44c0 <bt_conn_set_state>
    4826:	e7ca      	b.n	47be <bt_le_set_auto_conn+0x5a>
			return -ENOMEM;
    4828:	f06f 000b 	mvn.w	r0, #11
}
    482c:	bd70      	pop	{r4, r5, r6, pc}
    482e:	bf00      	nop
    4830:	20003b18 	.word	0x20003b18

00004834 <bt_conn_disconnect>:
{
    4834:	b570      	push	{r4, r5, r6, lr}
    4836:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4838:	7881      	ldrb	r1, [r0, #2]
{
    483a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    483c:	b911      	cbnz	r1, 4844 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    483e:	304c      	adds	r0, #76	; 0x4c
    4840:	f7ff ff90 	bl	4764 <bt_le_set_auto_conn>
	switch (conn->state) {
    4844:	7a63      	ldrb	r3, [r4, #9]
    4846:	3b01      	subs	r3, #1
    4848:	2b03      	cmp	r3, #3
    484a:	d803      	bhi.n	4854 <bt_conn_disconnect+0x20>
    484c:	e8df f003 	tbb	[pc, r3]
    4850:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    4854:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    4858:	4628      	mov	r0, r5
    485a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    485c:	4620      	mov	r0, r4
		conn->err = reason;
    485e:	7226      	strb	r6, [r4, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4860:	2100      	movs	r1, #0
    4862:	f7ff fe2d 	bl	44c0 <bt_conn_set_state>
		bt_le_scan_update(false);
    4866:	2000      	movs	r0, #0
    4868:	f7fd fea2 	bl	25b0 <bt_le_scan_update>
		return 0;
    486c:	2500      	movs	r5, #0
    486e:	e7f3      	b.n	4858 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    4870:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4874:	f00f ff1c 	bl	146b0 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4878:	2100      	movs	r1, #0
    487a:	f242 000e 	movw	r0, #8206	; 0x200e
}
    487e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    4882:	f7fd be0b 	b.w	249c <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4886:	2103      	movs	r1, #3
    4888:	f240 4006 	movw	r0, #1030	; 0x406
    488c:	f7fd fc38 	bl	2100 <bt_hci_cmd_create>
	if (!buf) {
    4890:	4605      	mov	r5, r0
    4892:	b198      	cbz	r0, 48bc <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    4894:	2103      	movs	r1, #3
    4896:	3008      	adds	r0, #8
    4898:	f00e fb38 	bl	12f0c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    489c:	8823      	ldrh	r3, [r4, #0]
    489e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    48a0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    48a2:	4629      	mov	r1, r5
    48a4:	f240 4006 	movw	r0, #1030	; 0x406
    48a8:	f7fd fdf8 	bl	249c <bt_hci_cmd_send>
	if (err) {
    48ac:	4605      	mov	r5, r0
    48ae:	2800      	cmp	r0, #0
    48b0:	d1d2      	bne.n	4858 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    48b2:	2104      	movs	r1, #4
    48b4:	4620      	mov	r0, r4
    48b6:	f7ff fe03 	bl	44c0 <bt_conn_set_state>
    48ba:	e7cd      	b.n	4858 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    48bc:	f06f 0536 	mvn.w	r5, #54	; 0x36
    48c0:	e7ca      	b.n	4858 <bt_conn_disconnect+0x24>

000048c2 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    48c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c4:	4607      	mov	r7, r0
    48c6:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    48c8:	f242 0013 	movw	r0, #8211	; 0x2013
    48cc:	210e      	movs	r1, #14
    48ce:	f7fd fc17 	bl	2100 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    48d2:	4606      	mov	r6, r0
    48d4:	b1c8      	cbz	r0, 490a <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    48d6:	210e      	movs	r1, #14
    48d8:	3008      	adds	r0, #8
    48da:	f00e fb17 	bl	12f0c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    48de:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    48e0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    48e2:	220e      	movs	r2, #14
    48e4:	f7fd f9c8 	bl	1c78 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    48e8:	883b      	ldrh	r3, [r7, #0]
    48ea:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    48ec:	882b      	ldrh	r3, [r5, #0]
    48ee:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    48f0:	886b      	ldrh	r3, [r5, #2]
    48f2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    48f4:	88ab      	ldrh	r3, [r5, #4]
    48f6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    48f8:	88eb      	ldrh	r3, [r5, #6]
    48fa:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    48fc:	4631      	mov	r1, r6
    48fe:	f242 0013 	movw	r0, #8211	; 0x2013
}
    4902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4906:	f7fd bdc9 	b.w	249c <bt_hci_cmd_send>
}
    490a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004910 <bt_conn_le_param_update>:
{
    4910:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    4912:	4b27      	ldr	r3, [pc, #156]	; (49b0 <bt_conn_le_param_update+0xa0>)
{
    4914:	460d      	mov	r5, r1
    4916:	b08a      	sub	sp, #40	; 0x28
    4918:	4604      	mov	r4, r0
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
    491a:	681e      	ldr	r6, [r3, #0]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    491c:	f00f fb82 	bl	14024 <_impl_k_current_get>
    4920:	88ea      	ldrh	r2, [r5, #6]
    4922:	9207      	str	r2, [sp, #28]
    4924:	88aa      	ldrh	r2, [r5, #4]
    4926:	9206      	str	r2, [sp, #24]
    4928:	886a      	ldrh	r2, [r5, #2]
    492a:	9205      	str	r2, [sp, #20]
    492c:	882a      	ldrh	r2, [r5, #0]
    492e:	4b21      	ldr	r3, [pc, #132]	; (49b4 <bt_conn_le_param_update+0xa4>)
    4930:	9204      	str	r2, [sp, #16]
    4932:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    4936:	9308      	str	r3, [sp, #32]
    4938:	9203      	str	r2, [sp, #12]
    493a:	9001      	str	r0, [sp, #4]
    493c:	9300      	str	r3, [sp, #0]
    493e:	4a1e      	ldr	r2, [pc, #120]	; (49b8 <bt_conn_le_param_update+0xa8>)
    4940:	4b1e      	ldr	r3, [pc, #120]	; (49bc <bt_conn_le_param_update+0xac>)
    4942:	9402      	str	r4, [sp, #8]
    4944:	491e      	ldr	r1, [pc, #120]	; (49c0 <bt_conn_le_param_update+0xb0>)
    4946:	481f      	ldr	r0, [pc, #124]	; (49c4 <bt_conn_le_param_update+0xb4>)
    4948:	47b0      	blx	r6
	if (conn->le.interval >= param->interval_min &&
    494a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    494e:	882a      	ldrh	r2, [r5, #0]
    4950:	429a      	cmp	r2, r3
    4952:	d80c      	bhi.n	496e <bt_conn_le_param_update+0x5e>
    4954:	886a      	ldrh	r2, [r5, #2]
    4956:	429a      	cmp	r2, r3
    4958:	d309      	bcc.n	496e <bt_conn_le_param_update+0x5e>
	    conn->le.interval <= param->interval_max &&
    495a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    495e:	88ab      	ldrh	r3, [r5, #4]
    4960:	429a      	cmp	r2, r3
    4962:	d104      	bne.n	496e <bt_conn_le_param_update+0x5e>
	    conn->le.latency == param->latency &&
    4964:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
    4968:	88eb      	ldrh	r3, [r5, #6]
    496a:	429a      	cmp	r2, r3
    496c:	d01c      	beq.n	49a8 <bt_conn_le_param_update+0x98>
	k_delayed_work_cancel(&conn->le.update_work);
    496e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    4972:	f00f fe9d 	bl	146b0 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4976:	4b14      	ldr	r3, [pc, #80]	; (49c8 <bt_conn_le_param_update+0xb8>)
    4978:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    497c:	079a      	lsls	r2, r3, #30
    497e:	d503      	bpl.n	4988 <bt_conn_le_param_update+0x78>
    4980:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    4984:	079b      	lsls	r3, r3, #30
    4986:	d401      	bmi.n	498c <bt_conn_le_param_update+0x7c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4988:	78e3      	ldrb	r3, [r4, #3]
    498a:	b933      	cbnz	r3, 499a <bt_conn_le_param_update+0x8a>
		return bt_conn_le_conn_update(conn, param);
    498c:	4629      	mov	r1, r5
    498e:	4620      	mov	r0, r4
}
    4990:	b00a      	add	sp, #40	; 0x28
    4992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_conn_le_conn_update(conn, param);
    4996:	f7ff bf94 	b.w	48c2 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    499a:	4629      	mov	r1, r5
    499c:	4620      	mov	r0, r4
}
    499e:	b00a      	add	sp, #40	; 0x28
    49a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_l2cap_update_conn_param(conn, param);
    49a4:	f000 bbc2 	b.w	512c <bt_l2cap_update_conn_param>
}
    49a8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    49ac:	b00a      	add	sp, #40	; 0x28
    49ae:	bd70      	pop	{r4, r5, r6, pc}
    49b0:	20003aa4 	.word	0x20003aa4
    49b4:	00014c55 	.word	0x00014c55
    49b8:	00015e82 	.word	0x00015e82
    49bc:	00015d5f 	.word	0x00015d5f
    49c0:	00015a12 	.word	0x00015a12
    49c4:	00015d77 	.word	0x00015d77
    49c8:	20003aa8 	.word	0x20003aa8

000049cc <le_conn_update>:
{
    49cc:	4603      	mov	r3, r0
    49ce:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    49d0:	f813 2c6f 	ldrb.w	r2, [r3, #-111]
    49d4:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    49d6:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    49da:	d105      	bne.n	49e8 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    49dc:	2113      	movs	r1, #19
    49de:	f7ff ff29 	bl	4834 <bt_conn_disconnect>
}
    49e2:	b003      	add	sp, #12
    49e4:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    49e8:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    49ec:	f8ad 2000 	strh.w	r2, [sp]
    49f0:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    49f4:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    49f8:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    49fa:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    49fe:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    4a02:	f8ad 2004 	strh.w	r2, [sp, #4]
    4a06:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4a0a:	f7ff ff81 	bl	4910 <bt_conn_le_param_update>
    4a0e:	e7e8      	b.n	49e2 <le_conn_update+0x16>

00004a10 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4a10:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4a12:	4b08      	ldr	r3, [pc, #32]	; (4a34 <bt_conn_create_pdu+0x24>)
{
    4a14:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    4a16:	2800      	cmp	r0, #0
    4a18:	bf08      	it	eq
    4a1a:	4618      	moveq	r0, r3
    4a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4a20:	f00e fa0c 	bl	12e3c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4a24:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    4a26:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    4a28:	3008      	adds	r0, #8
    4a2a:	f00e fa26 	bl	12e7a <net_buf_simple_reserve>

	return buf;
}
    4a2e:	4620      	mov	r0, r4
    4a30:	bd38      	pop	{r3, r4, r5, pc}
    4a32:	bf00      	nop
    4a34:	20003fa8 	.word	0x20003fa8

00004a38 <create_frag.isra.8>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a3c:	4606      	mov	r6, r0
    4a3e:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4a40:	4816      	ldr	r0, [pc, #88]	; (4a9c <create_frag.isra.8+0x64>)
    4a42:	2100      	movs	r1, #0
    4a44:	f7ff ffe4 	bl	4a10 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    4a48:	7833      	ldrb	r3, [r6, #0]
    4a4a:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    4a4c:	4605      	mov	r5, r0
    4a4e:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    4a52:	d005      	beq.n	4a60 <create_frag.isra.8+0x28>
		net_buf_unref(frag);
    4a54:	f00e fa22 	bl	12e9c <net_buf_unref>
		return NULL;
    4a58:	4635      	mov	r5, r6
}
    4a5a:	4628      	mov	r0, r5
    4a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    4a60:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4a62:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    4a66:	4e0e      	ldr	r6, [pc, #56]	; (4aa0 <create_frag.isra.8+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4a68:	4638      	mov	r0, r7
    4a6a:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    4a6e:	f00e fa88 	bl	12f82 <net_buf_simple_tailroom>
    4a72:	4580      	cmp	r8, r0
    4a74:	d20c      	bcs.n	4a90 <create_frag.isra.8+0x58>
	return bt_dev.le.mtu;
    4a76:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    4a7a:	f854 1f08 	ldr.w	r1, [r4, #8]!
    4a7e:	4632      	mov	r2, r6
    4a80:	4638      	mov	r0, r7
    4a82:	f00e fa49 	bl	12f18 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4a86:	4631      	mov	r1, r6
    4a88:	4620      	mov	r0, r4
    4a8a:	f00e fa5e 	bl	12f4a <net_buf_simple_pull>
    4a8e:	e7e4      	b.n	4a5a <create_frag.isra.8+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4a90:	4638      	mov	r0, r7
    4a92:	f00e fa76 	bl	12f82 <net_buf_simple_tailroom>
    4a96:	b286      	uxth	r6, r0
    4a98:	e7ef      	b.n	4a7a <create_frag.isra.8+0x42>
    4a9a:	bf00      	nop
    4a9c:	20003fcc 	.word	0x20003fcc
    4aa0:	20003aa8 	.word	0x20003aa8

00004aa4 <bt_conn_process_tx>:
{
    4aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("conn %p", conn);
    4aa8:	4f49      	ldr	r7, [pc, #292]	; (4bd0 <bt_conn_process_tx+0x12c>)
    4aaa:	4d4a      	ldr	r5, [pc, #296]	; (4bd4 <bt_conn_process_tx+0x130>)
    4aac:	683e      	ldr	r6, [r7, #0]
{
    4aae:	b086      	sub	sp, #24
    4ab0:	4604      	mov	r4, r0
    4ab2:	f00f fab7 	bl	14024 <_impl_k_current_get>
	BT_DBG("conn %p", conn);
    4ab6:	4b48      	ldr	r3, [pc, #288]	; (4bd8 <bt_conn_process_tx+0x134>)
    4ab8:	9001      	str	r0, [sp, #4]
    4aba:	9503      	str	r5, [sp, #12]
    4abc:	9402      	str	r4, [sp, #8]
    4abe:	9500      	str	r5, [sp, #0]
    4ac0:	4a46      	ldr	r2, [pc, #280]	; (4bdc <bt_conn_process_tx+0x138>)
    4ac2:	4947      	ldr	r1, [pc, #284]	; (4be0 <bt_conn_process_tx+0x13c>)
    4ac4:	4847      	ldr	r0, [pc, #284]	; (4be4 <bt_conn_process_tx+0x140>)
    4ac6:	47b0      	blx	r6
	if (conn->state == BT_CONN_DISCONNECTED &&
    4ac8:	7a63      	ldrb	r3, [r4, #9]
    4aca:	46b8      	mov	r8, r7
    4acc:	462e      	mov	r6, r5
    4ace:	bb0b      	cbnz	r3, 4b14 <bt_conn_process_tx+0x70>
    4ad0:	f3bf 8f5b 	dmb	ish
    4ad4:	1d23      	adds	r3, r4, #4
    4ad6:	e853 2f00 	ldrex	r2, [r3]
    4ada:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    4ade:	e843 1000 	strex	r0, r1, [r3]
    4ae2:	2800      	cmp	r0, #0
    4ae4:	d1f7      	bne.n	4ad6 <bt_conn_process_tx+0x32>
    4ae6:	f3bf 8f5b 	dmb	ish
    4aea:	0653      	lsls	r3, r2, #25
    4aec:	d512      	bpl.n	4b14 <bt_conn_process_tx+0x70>
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
    4aee:	683e      	ldr	r6, [r7, #0]
    4af0:	f00f fa98 	bl	14024 <_impl_k_current_get>
    4af4:	9503      	str	r5, [sp, #12]
    4af6:	8823      	ldrh	r3, [r4, #0]
    4af8:	9302      	str	r3, [sp, #8]
    4afa:	9001      	str	r0, [sp, #4]
    4afc:	9500      	str	r5, [sp, #0]
    4afe:	4b36      	ldr	r3, [pc, #216]	; (4bd8 <bt_conn_process_tx+0x134>)
    4b00:	4a36      	ldr	r2, [pc, #216]	; (4bdc <bt_conn_process_tx+0x138>)
    4b02:	4937      	ldr	r1, [pc, #220]	; (4be0 <bt_conn_process_tx+0x13c>)
    4b04:	4838      	ldr	r0, [pc, #224]	; (4be8 <bt_conn_process_tx+0x144>)
    4b06:	47b0      	blx	r6
		conn_cleanup(conn);
    4b08:	4620      	mov	r0, r4
}
    4b0a:	b006      	add	sp, #24
    4b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn);
    4b10:	f7ff bc48 	b.w	43a4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4b14:	2100      	movs	r1, #0
    4b16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4b1a:	f00e f995 	bl	12e48 <net_buf_get>
	BT_ASSERT(buf);
    4b1e:	4605      	mov	r5, r0
    4b20:	b970      	cbnz	r0, 4b40 <bt_conn_process_tx+0x9c>
    4b22:	9601      	str	r6, [sp, #4]
    4b24:	9600      	str	r6, [sp, #0]
    4b26:	f8d8 4000 	ldr.w	r4, [r8]
    4b2a:	4b2b      	ldr	r3, [pc, #172]	; (4bd8 <bt_conn_process_tx+0x134>)
    4b2c:	4a2f      	ldr	r2, [pc, #188]	; (4bec <bt_conn_process_tx+0x148>)
    4b2e:	492c      	ldr	r1, [pc, #176]	; (4be0 <bt_conn_process_tx+0x13c>)
    4b30:	482f      	ldr	r0, [pc, #188]	; (4bf0 <bt_conn_process_tx+0x14c>)
    4b32:	47a0      	blx	r4
    4b34:	4040      	eors	r0, r0
    4b36:	f380 8811 	msr	BASEPRI, r0
    4b3a:	f04f 0004 	mov.w	r0, #4
    4b3e:	df02      	svc	2
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4b40:	f8d8 7000 	ldr.w	r7, [r8]
    4b44:	f00f fa6e 	bl	14024 <_impl_k_current_get>
    4b48:	9605      	str	r6, [sp, #20]
    4b4a:	89ab      	ldrh	r3, [r5, #12]
    4b4c:	9600      	str	r6, [sp, #0]
	return bt_dev.le.mtu;
    4b4e:	4e29      	ldr	r6, [pc, #164]	; (4bf4 <bt_conn_process_tx+0x150>)
	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);
    4b50:	9304      	str	r3, [sp, #16]
    4b52:	9001      	str	r0, [sp, #4]
    4b54:	4a21      	ldr	r2, [pc, #132]	; (4bdc <bt_conn_process_tx+0x138>)
    4b56:	4922      	ldr	r1, [pc, #136]	; (4be0 <bt_conn_process_tx+0x13c>)
    4b58:	9503      	str	r5, [sp, #12]
    4b5a:	9402      	str	r4, [sp, #8]
    4b5c:	4b26      	ldr	r3, [pc, #152]	; (4bf8 <bt_conn_process_tx+0x154>)
    4b5e:	4827      	ldr	r0, [pc, #156]	; (4bfc <bt_conn_process_tx+0x158>)
    4b60:	47b8      	blx	r7
	if (buf->len <= conn_mtu(conn)) {
    4b62:	89a9      	ldrh	r1, [r5, #12]
    4b64:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4b68:	4291      	cmp	r1, r2
    4b6a:	d809      	bhi.n	4b80 <bt_conn_process_tx+0xdc>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4b6c:	2300      	movs	r3, #0
    4b6e:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4b70:	4629      	mov	r1, r5
    4b72:	4620      	mov	r0, r4
    4b74:	f7ff fa44 	bl	4000 <send_frag>
	if (!send_buf(conn, buf)) {
    4b78:	b150      	cbz	r0, 4b90 <bt_conn_process_tx+0xec>
}
    4b7a:	b006      	add	sp, #24
    4b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b80:	f104 0709 	add.w	r7, r4, #9
	frag = create_frag(conn, buf);
    4b84:	4629      	mov	r1, r5
    4b86:	4638      	mov	r0, r7
    4b88:	f7ff ff56 	bl	4a38 <create_frag.isra.8>
	if (!frag) {
    4b8c:	4601      	mov	r1, r0
    4b8e:	b928      	cbnz	r0, 4b9c <bt_conn_process_tx+0xf8>
		net_buf_unref(buf);
    4b90:	4628      	mov	r0, r5
}
    4b92:	b006      	add	sp, #24
    4b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4b98:	f00e b980 	b.w	12e9c <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4b9c:	2301      	movs	r3, #1
    4b9e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4ba0:	4620      	mov	r0, r4
    4ba2:	f7ff fa2d 	bl	4000 <send_frag>
    4ba6:	2800      	cmp	r0, #0
    4ba8:	d0f2      	beq.n	4b90 <bt_conn_process_tx+0xec>
	while (buf->len > conn_mtu(conn)) {
    4baa:	89aa      	ldrh	r2, [r5, #12]
    4bac:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d802      	bhi.n	4bba <bt_conn_process_tx+0x116>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4bb4:	2300      	movs	r3, #0
    4bb6:	2201      	movs	r2, #1
    4bb8:	e7da      	b.n	4b70 <bt_conn_process_tx+0xcc>
		frag = create_frag(conn, buf);
    4bba:	4629      	mov	r1, r5
    4bbc:	4638      	mov	r0, r7
    4bbe:	f7ff ff3b 	bl	4a38 <create_frag.isra.8>
		if (!frag) {
    4bc2:	4601      	mov	r1, r0
    4bc4:	2800      	cmp	r0, #0
    4bc6:	d0e3      	beq.n	4b90 <bt_conn_process_tx+0xec>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4bc8:	2301      	movs	r3, #1
    4bca:	461a      	mov	r2, r3
    4bcc:	e7e8      	b.n	4ba0 <bt_conn_process_tx+0xfc>
    4bce:	bf00      	nop
    4bd0:	20003aa4 	.word	0x20003aa4
    4bd4:	00014c55 	.word	0x00014c55
    4bd8:	00015d20 	.word	0x00015d20
    4bdc:	00015e82 	.word	0x00015e82
    4be0:	00015a12 	.word	0x00015a12
    4be4:	00015db9 	.word	0x00015db9
    4be8:	00015e1d 	.word	0x00015e1d
    4bec:	000159c3 	.word	0x000159c3
    4bf0:	00015ac7 	.word	0x00015ac7
    4bf4:	20003aa8 	.word	0x20003aa8
    4bf8:	00015d00 	.word	0x00015d00
    4bfc:	00015e57 	.word	0x00015e57

00004c00 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    4c00:	4b03      	ldr	r3, [pc, #12]	; (4c10 <bt_conn_get_id+0x10>)
    4c02:	1ac0      	subs	r0, r0, r3
    4c04:	4b03      	ldr	r3, [pc, #12]	; (4c14 <bt_conn_get_id+0x14>)
    4c06:	1140      	asrs	r0, r0, #5
    4c08:	4358      	muls	r0, r3
}
    4c0a:	b2c0      	uxtb	r0, r0
    4c0c:	4770      	bx	lr
    4c0e:	bf00      	nop
    4c10:	20000360 	.word	0x20000360
    4c14:	cccccccd 	.word	0xcccccccd

00004c18 <bt_conn_init>:
	parent->next = child;
    4c18:	4b12      	ldr	r3, [pc, #72]	; (4c64 <bt_conn_init+0x4c>)
    4c1a:	4a13      	ldr	r2, [pc, #76]	; (4c68 <bt_conn_init+0x50>)
    4c1c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    4c1e:	b510      	push	{r4, lr}
    4c20:	6011      	str	r1, [r2, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c22:	6859      	ldr	r1, [r3, #4]
    4c24:	b901      	cbnz	r1, 4c28 <bt_conn_init+0x10>
	list->tail = node;
    4c26:	605a      	str	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode);
    4c28:	6859      	ldr	r1, [r3, #4]
	parent->next = child;
    4c2a:	6092      	str	r2, [r2, #8]
	list->head = node;
    4c2c:	4a0f      	ldr	r2, [pc, #60]	; (4c6c <bt_conn_init+0x54>)
    4c2e:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    4c30:	b901      	cbnz	r1, 4c34 <bt_conn_init+0x1c>
	list->tail = node;
    4c32:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4c34:	f001 fb8a 	bl	634c <bt_att_init>

	err = bt_smp_init();
    4c38:	f002 f8b6 	bl	6da8 <bt_smp_init>
	if (err) {
    4c3c:	4604      	mov	r4, r0
    4c3e:	b970      	cbnz	r0, 4c5e <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    4c40:	f000 fa9c 	bl	517c <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    4c44:	480a      	ldr	r0, [pc, #40]	; (4c70 <bt_conn_init+0x58>)
    4c46:	f7fe fffd 	bl	3c44 <atomic_get>
    4c4a:	b140      	cbz	r0, 4c5e <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4c4c:	4809      	ldr	r0, [pc, #36]	; (4c74 <bt_conn_init+0x5c>)
    4c4e:	f7fe fff9 	bl	3c44 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    4c52:	07c3      	lsls	r3, r0, #31
    4c54:	d503      	bpl.n	4c5e <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4c56:	2101      	movs	r1, #1
    4c58:	4807      	ldr	r0, [pc, #28]	; (4c78 <bt_conn_init+0x60>)
    4c5a:	f7ff fc31 	bl	44c0 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    4c5e:	4620      	mov	r0, r4
    4c60:	bd10      	pop	{r4, pc}
    4c62:	bf00      	nop
    4c64:	20000400 	.word	0x20000400
    4c68:	20000350 	.word	0x20000350
    4c6c:	20000358 	.word	0x20000358
    4c70:	200003a8 	.word	0x200003a8
    4c74:	20000364 	.word	0x20000364
    4c78:	20000360 	.word	0x20000360

00004c7c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4c7c:	4770      	bx	lr
	...

00004c80 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4c82:	4a0b      	ldr	r2, [pc, #44]	; (4cb0 <l2cap_accept+0x30>)
    4c84:	6813      	ldr	r3, [r2, #0]
    4c86:	b92b      	cbnz	r3, 4c94 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4c88:	480a      	ldr	r0, [pc, #40]	; (4cb4 <l2cap_accept+0x34>)
    4c8a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4c8c:	600a      	str	r2, [r1, #0]

		return 0;
    4c8e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    4c90:	b004      	add	sp, #16
    4c92:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    4c94:	4b08      	ldr	r3, [pc, #32]	; (4cb8 <l2cap_accept+0x38>)
    4c96:	9302      	str	r3, [sp, #8]
    4c98:	9300      	str	r3, [sp, #0]
    4c9a:	4b08      	ldr	r3, [pc, #32]	; (4cbc <l2cap_accept+0x3c>)
    4c9c:	9001      	str	r0, [sp, #4]
    4c9e:	681c      	ldr	r4, [r3, #0]
    4ca0:	4807      	ldr	r0, [pc, #28]	; (4cc0 <l2cap_accept+0x40>)
    4ca2:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <l2cap_accept+0x44>)
    4ca4:	4a08      	ldr	r2, [pc, #32]	; (4cc8 <l2cap_accept+0x48>)
    4ca6:	4909      	ldr	r1, [pc, #36]	; (4ccc <l2cap_accept+0x4c>)
    4ca8:	47a0      	blx	r4
	return -ENOMEM;
    4caa:	f06f 000b 	mvn.w	r0, #11
    4cae:	e7ef      	b.n	4c90 <l2cap_accept+0x10>
    4cb0:	20000408 	.word	0x20000408
    4cb4:	20003bf4 	.word	0x20003bf4
    4cb8:	00014c55 	.word	0x00014c55
    4cbc:	20003aa4 	.word	0x20003aa4
    4cc0:	000162d1 	.word	0x000162d1
    4cc4:	00016262 	.word	0x00016262
    4cc8:	000159c3 	.word	0x000159c3
    4ccc:	00015a12 	.word	0x00015a12

00004cd0 <l2cap_create_le_sig_pdu.isra.5>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cd2:	4607      	mov	r7, r0
    4cd4:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4cd6:	2000      	movs	r0, #0
    4cd8:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    4cda:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4cdc:	f7ff fe98 	bl	4a10 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4ce0:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4ce2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4ce4:	3008      	adds	r0, #8
    4ce6:	f00e f911 	bl	12f0c <net_buf_simple_add>
	hdr->code = code;
    4cea:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    4cec:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    4cee:	8045      	strh	r5, [r0, #2]
}
    4cf0:	4620      	mov	r0, r4
    4cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004cf4 <l2cap_connected>:
    4cf4:	4770      	bx	lr
	...

00004cf8 <bt_l2cap_le_fixed_chan_register>:
	parent->next = child;
    4cf8:	2300      	movs	r3, #0
    4cfa:	6083      	str	r3, [r0, #8]
    4cfc:	4b05      	ldr	r3, [pc, #20]	; (4d14 <bt_l2cap_le_fixed_chan_register+0x1c>)
    4cfe:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    4d00:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode);
    4d04:	b911      	cbnz	r1, 4d0c <bt_l2cap_le_fixed_chan_register+0x14>
	list->tail = node;
    4d06:	605a      	str	r2, [r3, #4]
	list->head = node;
    4d08:	601a      	str	r2, [r3, #0]
    4d0a:	4770      	bx	lr
	parent->next = child;
    4d0c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4d0e:	605a      	str	r2, [r3, #4]
    4d10:	4770      	bx	lr
    4d12:	bf00      	nop
    4d14:	200004ac 	.word	0x200004ac

00004d18 <bt_l2cap_chan_remove>:
{
    4d18:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4d1a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4d1c:	b113      	cbz	r3, 4d24 <bt_l2cap_chan_remove+0xc>
    4d1e:	3b08      	subs	r3, #8
    4d20:	2200      	movs	r2, #0
    4d22:	b903      	cbnz	r3, 4d26 <bt_l2cap_chan_remove+0xe>
    4d24:	bd10      	pop	{r4, pc}
		if (chan == ch) {
    4d26:	428b      	cmp	r3, r1
    4d28:	f103 0408 	add.w	r4, r3, #8
    4d2c:	d10f      	bne.n	4d4e <bt_l2cap_chan_remove+0x36>
    4d2e:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_REMOVE(slist, snode);
    4d30:	b93a      	cbnz	r2, 4d42 <bt_l2cap_chan_remove+0x2a>
    4d32:	6c42      	ldr	r2, [r0, #68]	; 0x44
	list->head = node;
    4d34:	6401      	str	r1, [r0, #64]	; 0x40
Z_GENLIST_REMOVE(slist, snode);
    4d36:	4294      	cmp	r4, r2
    4d38:	d100      	bne.n	4d3c <bt_l2cap_chan_remove+0x24>
	list->tail = node;
    4d3a:	6441      	str	r1, [r0, #68]	; 0x44
	parent->next = child;
    4d3c:	2200      	movs	r2, #0
    4d3e:	609a      	str	r2, [r3, #8]
    4d40:	bd10      	pop	{r4, pc}
    4d42:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
    4d44:	6c41      	ldr	r1, [r0, #68]	; 0x44
    4d46:	428c      	cmp	r4, r1
	list->tail = node;
    4d48:	bf08      	it	eq
    4d4a:	6442      	streq	r2, [r0, #68]	; 0x44
    4d4c:	e7f6      	b.n	4d3c <bt_l2cap_chan_remove+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode);
    4d4e:	4622      	mov	r2, r4
    4d50:	2c00      	cmp	r4, #0
    4d52:	d0e7      	beq.n	4d24 <bt_l2cap_chan_remove+0xc>
	return node->next;
    4d54:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4d56:	2b00      	cmp	r3, #0
    4d58:	d0e4      	beq.n	4d24 <bt_l2cap_chan_remove+0xc>
    4d5a:	3b08      	subs	r3, #8
    4d5c:	e7e1      	b.n	4d22 <bt_l2cap_chan_remove+0xa>

00004d5e <bt_l2cap_chan_del>:
	if (!chan->conn) {
    4d5e:	6803      	ldr	r3, [r0, #0]
{
    4d60:	b510      	push	{r4, lr}
    4d62:	4604      	mov	r4, r0
	if (!chan->conn) {
    4d64:	b12b      	cbz	r3, 4d72 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    4d66:	6843      	ldr	r3, [r0, #4]
    4d68:	685b      	ldr	r3, [r3, #4]
    4d6a:	b103      	cbz	r3, 4d6e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    4d6c:	4798      	blx	r3
	chan->conn = NULL;
    4d6e:	2300      	movs	r3, #0
    4d70:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    4d72:	68e3      	ldr	r3, [r4, #12]
    4d74:	b11b      	cbz	r3, 4d7e <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    4d76:	4620      	mov	r0, r4
}
    4d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    4d7c:	4718      	bx	r3
    4d7e:	bd10      	pop	{r4, pc}

00004d80 <l2cap_rtx_timeout>:
{
    4d80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_ERR("chan %p timeout", chan);
    4d82:	4b0c      	ldr	r3, [pc, #48]	; (4db4 <l2cap_rtx_timeout+0x34>)
    4d84:	9302      	str	r3, [sp, #8]
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    4d86:	f1a0 0410 	sub.w	r4, r0, #16
	BT_ERR("chan %p timeout", chan);
    4d8a:	e88d 0018 	stmia.w	sp, {r3, r4}
    4d8e:	4b0a      	ldr	r3, [pc, #40]	; (4db8 <l2cap_rtx_timeout+0x38>)
    4d90:	4a0a      	ldr	r2, [pc, #40]	; (4dbc <l2cap_rtx_timeout+0x3c>)
    4d92:	681e      	ldr	r6, [r3, #0]
    4d94:	490a      	ldr	r1, [pc, #40]	; (4dc0 <l2cap_rtx_timeout+0x40>)
    4d96:	4b0b      	ldr	r3, [pc, #44]	; (4dc4 <l2cap_rtx_timeout+0x44>)
{
    4d98:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    4d9a:	480b      	ldr	r0, [pc, #44]	; (4dc8 <l2cap_rtx_timeout+0x48>)
    4d9c:	47b0      	blx	r6
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4d9e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    4da2:	4621      	mov	r1, r4
    4da4:	f7ff ffb8 	bl	4d18 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4da8:	4620      	mov	r0, r4
}
    4daa:	b004      	add	sp, #16
    4dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_chan_del(&chan->chan);
    4db0:	f7ff bfd5 	b.w	4d5e <bt_l2cap_chan_del>
    4db4:	00014c55 	.word	0x00014c55
    4db8:	20003aa4 	.word	0x20003aa4
    4dbc:	000159c3 	.word	0x000159c3
    4dc0:	00015a12 	.word	0x00015a12
    4dc4:	0001620c 	.word	0x0001620c
    4dc8:	00016425 	.word	0x00016425

00004dcc <bt_l2cap_connected>:
{
    4dcc:	4b1a      	ldr	r3, [pc, #104]	; (4e38 <bt_l2cap_connected+0x6c>)
    4dce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4dd2:	681c      	ldr	r4, [r3, #0]
    4dd4:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4dd6:	b12c      	cbz	r4, 4de4 <bt_l2cap_connected+0x18>
	parent->next = child;
    4dd8:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4dda:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4e3c <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4dde:	3c08      	subs	r4, #8
    4de0:	46b9      	mov	r9, r7
    4de2:	b914      	cbnz	r4, 4dea <bt_l2cap_connected+0x1e>
}
    4de4:	b003      	add	sp, #12
    4de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4dea:	6863      	ldr	r3, [r4, #4]
    4dec:	a901      	add	r1, sp, #4
    4dee:	4630      	mov	r0, r6
    4df0:	4798      	blx	r3
    4df2:	2800      	cmp	r0, #0
    4df4:	db18      	blt.n	4e28 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    4df6:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4df8:	8823      	ldrh	r3, [r4, #0]
    4dfa:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4dfc:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4e00:	4641      	mov	r1, r8
    4e02:	f105 0010 	add.w	r0, r5, #16
    4e06:	f00f fc43 	bl	14690 <k_delayed_work_init>
    4e0a:	60af      	str	r7, [r5, #8]
    4e0c:	6c72      	ldr	r2, [r6, #68]	; 0x44
	sys_slist_append(&conn->channels, &chan->node);
    4e0e:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode);
    4e12:	b972      	cbnz	r2, 4e32 <bt_l2cap_connected+0x66>
	list->tail = node;
    4e14:	6473      	str	r3, [r6, #68]	; 0x44
	list->head = node;
    4e16:	6433      	str	r3, [r6, #64]	; 0x40
		if (chan->ops->connected) {
    4e18:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4e1a:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4e1c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4e1e:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    4e22:	681b      	ldr	r3, [r3, #0]
    4e24:	b103      	cbz	r3, 4e28 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    4e26:	4798      	blx	r3
	return node->next;
    4e28:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4e2a:	2c00      	cmp	r4, #0
    4e2c:	d0da      	beq.n	4de4 <bt_l2cap_connected+0x18>
    4e2e:	3c08      	subs	r4, #8
    4e30:	e7d7      	b.n	4de2 <bt_l2cap_connected+0x16>
	parent->next = child;
    4e32:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4e34:	6473      	str	r3, [r6, #68]	; 0x44
    4e36:	e7ef      	b.n	4e18 <bt_l2cap_connected+0x4c>
    4e38:	200004ac 	.word	0x200004ac
    4e3c:	00004d81 	.word	0x00004d81

00004e40 <bt_l2cap_disconnected>:
{
    4e40:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4e42:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4e44:	b1a3      	cbz	r3, 4e70 <bt_l2cap_disconnected+0x30>
    4e46:	f1b3 0008 	subs.w	r0, r3, #8
    4e4a:	d10a      	bne.n	4e62 <bt_l2cap_disconnected+0x22>
    4e4c:	bd10      	pop	{r4, pc}
    4e4e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4e50:	f7ff ff85 	bl	4d5e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4e54:	b164      	cbz	r4, 4e70 <bt_l2cap_disconnected+0x30>
	return node->next;
    4e56:	68a3      	ldr	r3, [r4, #8]
    4e58:	b103      	cbz	r3, 4e5c <bt_l2cap_disconnected+0x1c>
    4e5a:	3b08      	subs	r3, #8
{
    4e5c:	4620      	mov	r0, r4
    4e5e:	461c      	mov	r4, r3
    4e60:	e7f6      	b.n	4e50 <bt_l2cap_disconnected+0x10>
    4e62:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4e64:	2c00      	cmp	r4, #0
    4e66:	d1f2      	bne.n	4e4e <bt_l2cap_disconnected+0xe>
}
    4e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    4e6c:	f7ff bf77 	b.w	4d5e <bt_l2cap_chan_del>
    4e70:	bd10      	pop	{r4, pc}

00004e72 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4e72:	3104      	adds	r1, #4
    4e74:	f7ff bdcc 	b.w	4a10 <bt_conn_create_pdu>

00004e78 <bt_l2cap_send_cb>:
{
    4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7a:	4614      	mov	r4, r2
    4e7c:	4605      	mov	r5, r0
    4e7e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    4e80:	f102 0008 	add.w	r0, r2, #8
    4e84:	2104      	movs	r1, #4
{
    4e86:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    4e88:	f00e f857 	bl	12f3a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4e8c:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4e8e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4e90:	3904      	subs	r1, #4
    4e92:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    4e94:	4632      	mov	r2, r6
    4e96:	4621      	mov	r1, r4
    4e98:	4628      	mov	r0, r5
}
    4e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    4e9e:	f7ff b82d 	b.w	3efc <bt_conn_send_cb>
	...

00004ea4 <l2cap_recv>:
{
    4ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    4ea6:	898b      	ldrh	r3, [r1, #12]
    4ea8:	2b03      	cmp	r3, #3
{
    4eaa:	b087      	sub	sp, #28
    4eac:	4607      	mov	r7, r0
    4eae:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4eb0:	d80a      	bhi.n	4ec8 <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    4eb2:	4b5e      	ldr	r3, [pc, #376]	; (502c <l2cap_recv+0x188>)
    4eb4:	9301      	str	r3, [sp, #4]
    4eb6:	9300      	str	r3, [sp, #0]
    4eb8:	4b5d      	ldr	r3, [pc, #372]	; (5030 <l2cap_recv+0x18c>)
    4eba:	4a5e      	ldr	r2, [pc, #376]	; (5034 <l2cap_recv+0x190>)
    4ebc:	681c      	ldr	r4, [r3, #0]
    4ebe:	495e      	ldr	r1, [pc, #376]	; (5038 <l2cap_recv+0x194>)
    4ec0:	4b5e      	ldr	r3, [pc, #376]	; (503c <l2cap_recv+0x198>)
    4ec2:	485f      	ldr	r0, [pc, #380]	; (5040 <l2cap_recv+0x19c>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    4ec4:	47a0      	blx	r4
		return;
    4ec6:	e015      	b.n	4ef4 <l2cap_recv+0x50>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4ec8:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4eca:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4ecc:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    4ed0:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4ed2:	f00e f83a 	bl	12f4a <net_buf_simple_pull>
	if (buf->len != len) {
    4ed6:	89aa      	ldrh	r2, [r5, #12]
    4ed8:	4296      	cmp	r6, r2
    4eda:	d00d      	beq.n	4ef8 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4edc:	4b53      	ldr	r3, [pc, #332]	; (502c <l2cap_recv+0x188>)
    4ede:	9303      	str	r3, [sp, #12]
    4ee0:	9300      	str	r3, [sp, #0]
    4ee2:	4b53      	ldr	r3, [pc, #332]	; (5030 <l2cap_recv+0x18c>)
    4ee4:	9201      	str	r2, [sp, #4]
    4ee6:	9602      	str	r6, [sp, #8]
    4ee8:	681c      	ldr	r4, [r3, #0]
    4eea:	4a52      	ldr	r2, [pc, #328]	; (5034 <l2cap_recv+0x190>)
    4eec:	4b53      	ldr	r3, [pc, #332]	; (503c <l2cap_recv+0x198>)
    4eee:	4952      	ldr	r1, [pc, #328]	; (5038 <l2cap_recv+0x194>)
    4ef0:	4854      	ldr	r0, [pc, #336]	; (5044 <l2cap_recv+0x1a0>)
    4ef2:	47a0      	blx	r4
}
    4ef4:	b007      	add	sp, #28
    4ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    4ef8:	7861      	ldrb	r1, [r4, #1]
    4efa:	b949      	cbnz	r1, 4f10 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4efc:	4b4b      	ldr	r3, [pc, #300]	; (502c <l2cap_recv+0x188>)
    4efe:	9301      	str	r3, [sp, #4]
    4f00:	9300      	str	r3, [sp, #0]
    4f02:	4b4b      	ldr	r3, [pc, #300]	; (5030 <l2cap_recv+0x18c>)
    4f04:	4a4b      	ldr	r2, [pc, #300]	; (5034 <l2cap_recv+0x190>)
    4f06:	681c      	ldr	r4, [r3, #0]
    4f08:	494b      	ldr	r1, [pc, #300]	; (5038 <l2cap_recv+0x194>)
    4f0a:	4b4c      	ldr	r3, [pc, #304]	; (503c <l2cap_recv+0x198>)
    4f0c:	484e      	ldr	r0, [pc, #312]	; (5048 <l2cap_recv+0x1a4>)
    4f0e:	e7d9      	b.n	4ec4 <l2cap_recv+0x20>
	switch (hdr->code) {
    4f10:	7823      	ldrb	r3, [r4, #0]
    4f12:	2b12      	cmp	r3, #18
    4f14:	d02c      	beq.n	4f70 <l2cap_recv+0xcc>
    4f16:	2b13      	cmp	r3, #19
    4f18:	d01e      	beq.n	4f58 <l2cap_recv+0xb4>
    4f1a:	2b01      	cmp	r3, #1
    4f1c:	d0ea      	beq.n	4ef4 <l2cap_recv+0x50>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4f1e:	4a43      	ldr	r2, [pc, #268]	; (502c <l2cap_recv+0x188>)
    4f20:	9202      	str	r2, [sp, #8]
    4f22:	e88d 000c 	stmia.w	sp, {r2, r3}
    4f26:	4b42      	ldr	r3, [pc, #264]	; (5030 <l2cap_recv+0x18c>)
    4f28:	4a48      	ldr	r2, [pc, #288]	; (504c <l2cap_recv+0x1a8>)
    4f2a:	681d      	ldr	r5, [r3, #0]
    4f2c:	4942      	ldr	r1, [pc, #264]	; (5038 <l2cap_recv+0x194>)
    4f2e:	4b43      	ldr	r3, [pc, #268]	; (503c <l2cap_recv+0x198>)
    4f30:	4847      	ldr	r0, [pc, #284]	; (5050 <l2cap_recv+0x1ac>)
    4f32:	47a8      	blx	r5
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4f34:	2202      	movs	r2, #2
    4f36:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    4f38:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4f3a:	2001      	movs	r0, #1
    4f3c:	f7ff fec8 	bl	4cd0 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4f40:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4f42:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4f44:	3008      	adds	r0, #8
    4f46:	f00d ffe1 	bl	12f0c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4f4a:	2300      	movs	r3, #0
    4f4c:	7003      	strb	r3, [r0, #0]
    4f4e:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4f50:	4622      	mov	r2, r4
    4f52:	2105      	movs	r1, #5
    4f54:	4628      	mov	r0, r5
    4f56:	e029      	b.n	4fac <l2cap_recv+0x108>
	if (buf->len < sizeof(*rsp)) {
    4f58:	2e01      	cmp	r6, #1
    4f5a:	d8cb      	bhi.n	4ef4 <l2cap_recv+0x50>
		BT_ERR("Too small LE conn param rsp");
    4f5c:	4b33      	ldr	r3, [pc, #204]	; (502c <l2cap_recv+0x188>)
    4f5e:	9301      	str	r3, [sp, #4]
    4f60:	9300      	str	r3, [sp, #0]
    4f62:	4b33      	ldr	r3, [pc, #204]	; (5030 <l2cap_recv+0x18c>)
    4f64:	4a33      	ldr	r2, [pc, #204]	; (5034 <l2cap_recv+0x190>)
    4f66:	681c      	ldr	r4, [r3, #0]
    4f68:	4933      	ldr	r1, [pc, #204]	; (5038 <l2cap_recv+0x194>)
    4f6a:	4b3a      	ldr	r3, [pc, #232]	; (5054 <l2cap_recv+0x1b0>)
    4f6c:	483a      	ldr	r0, [pc, #232]	; (5058 <l2cap_recv+0x1b4>)
    4f6e:	e7a9      	b.n	4ec4 <l2cap_recv+0x20>
	if (buf->len < sizeof(*req)) {
    4f70:	2e07      	cmp	r6, #7
    4f72:	d809      	bhi.n	4f88 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
    4f74:	4b2d      	ldr	r3, [pc, #180]	; (502c <l2cap_recv+0x188>)
    4f76:	9301      	str	r3, [sp, #4]
    4f78:	9300      	str	r3, [sp, #0]
    4f7a:	4b2d      	ldr	r3, [pc, #180]	; (5030 <l2cap_recv+0x18c>)
    4f7c:	4a2d      	ldr	r2, [pc, #180]	; (5034 <l2cap_recv+0x190>)
    4f7e:	681c      	ldr	r4, [r3, #0]
    4f80:	492d      	ldr	r1, [pc, #180]	; (5038 <l2cap_recv+0x194>)
    4f82:	4b36      	ldr	r3, [pc, #216]	; (505c <l2cap_recv+0x1b8>)
    4f84:	4836      	ldr	r0, [pc, #216]	; (5060 <l2cap_recv+0x1bc>)
    4f86:	e79d      	b.n	4ec4 <l2cap_recv+0x20>
    4f88:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    4f8a:	78e6      	ldrb	r6, [r4, #3]
    4f8c:	b18e      	cbz	r6, 4fb2 <l2cap_recv+0x10e>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4f8e:	2202      	movs	r2, #2
    4f90:	2001      	movs	r0, #1
    4f92:	f7ff fe9d 	bl	4cd0 <l2cap_create_le_sig_pdu.isra.5>
	rej = net_buf_add(buf, sizeof(*rej));
    4f96:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    4f98:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    4f9a:	3008      	adds	r0, #8
    4f9c:	f00d ffb6 	bl	12f0c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    4fa0:	2300      	movs	r3, #0
    4fa2:	7003      	strb	r3, [r0, #0]
    4fa4:	7043      	strb	r3, [r0, #1]
    4fa6:	462a      	mov	r2, r5
    4fa8:	2105      	movs	r1, #5
    4faa:	4620      	mov	r0, r4
    4fac:	f7ff ff64 	bl	4e78 <bt_l2cap_send_cb>
    4fb0:	e7a0      	b.n	4ef4 <l2cap_recv+0x50>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    4fb2:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    4fb4:	7858      	ldrb	r0, [r3, #1]
    4fb6:	781a      	ldrb	r2, [r3, #0]
    4fb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4fbc:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    4fc0:	78d8      	ldrb	r0, [r3, #3]
    4fc2:	789a      	ldrb	r2, [r3, #2]
    4fc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4fc8:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    4fcc:	7958      	ldrb	r0, [r3, #5]
    4fce:	791a      	ldrb	r2, [r3, #4]
    4fd0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4fd4:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    4fd8:	799a      	ldrb	r2, [r3, #6]
    4fda:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4fdc:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    4fde:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4fe2:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    4fe4:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4fe8:	f7ff fe72 	bl	4cd0 <l2cap_create_le_sig_pdu.isra.5>
	accepted = le_param_req(conn, &param);
    4fec:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    4fee:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    4ff0:	4620      	mov	r0, r4
    4ff2:	f7fe fe51 	bl	3c98 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    4ff6:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    4ff8:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    4ffa:	f107 0008 	add.w	r0, r7, #8
    4ffe:	f00d ff85 	bl	12f0c <net_buf_simple_add>
	if (accepted) {
    5002:	b17d      	cbz	r5, 5024 <l2cap_recv+0x180>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    5004:	7006      	strb	r6, [r0, #0]
    5006:	7046      	strb	r6, [r0, #1]
    5008:	2300      	movs	r3, #0
    500a:	463a      	mov	r2, r7
    500c:	2105      	movs	r1, #5
    500e:	4620      	mov	r0, r4
    5010:	f7ff ff32 	bl	4e78 <bt_l2cap_send_cb>
	if (accepted) {
    5014:	2d00      	cmp	r5, #0
    5016:	f43f af6d 	beq.w	4ef4 <l2cap_recv+0x50>
		bt_conn_le_conn_update(conn, &param);
    501a:	a904      	add	r1, sp, #16
    501c:	4620      	mov	r0, r4
    501e:	f7ff fc50 	bl	48c2 <bt_conn_le_conn_update>
    5022:	e767      	b.n	4ef4 <l2cap_recv+0x50>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    5024:	2301      	movs	r3, #1
    5026:	7003      	strb	r3, [r0, #0]
    5028:	7045      	strb	r5, [r0, #1]
    502a:	e7ed      	b.n	5008 <l2cap_recv+0x164>
    502c:	00014c55 	.word	0x00014c55
    5030:	20003aa4 	.word	0x20003aa4
    5034:	000159c3 	.word	0x000159c3
    5038:	00015a12 	.word	0x00015a12
    503c:	00016249 	.word	0x00016249
    5040:	00016308 	.word	0x00016308
    5044:	00016336 	.word	0x00016336
    5048:	00016367 	.word	0x00016367
    504c:	00015a0b 	.word	0x00015a0b
    5050:	000163f7 	.word	0x000163f7
    5054:	0001621e 	.word	0x0001621e
    5058:	00016398 	.word	0x00016398
    505c:	00016230 	.word	0x00016230
    5060:	000163c4 	.word	0x000163c4

00005064 <bt_l2cap_le_lookup_tx_cid>:
{
    5064:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5066:	b100      	cbz	r0, 506a <bt_l2cap_le_lookup_tx_cid+0x6>
    5068:	3808      	subs	r0, #8
    506a:	b900      	cbnz	r0, 506e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    506c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    506e:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
    5072:	428b      	cmp	r3, r1
    5074:	d0fa      	beq.n	506c <bt_l2cap_le_lookup_tx_cid+0x8>
    5076:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5078:	2000      	movs	r0, #0
    507a:	2b00      	cmp	r3, #0
    507c:	d0f6      	beq.n	506c <bt_l2cap_le_lookup_tx_cid+0x8>
    507e:	f1a3 0008 	sub.w	r0, r3, #8
    5082:	e7f2      	b.n	506a <bt_l2cap_le_lookup_tx_cid+0x6>

00005084 <bt_l2cap_le_lookup_rx_cid>:
{
    5084:	6c00      	ldr	r0, [r0, #64]	; 0x40
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5086:	b100      	cbz	r0, 508a <bt_l2cap_le_lookup_rx_cid+0x6>
    5088:	3808      	subs	r0, #8
    508a:	b900      	cbnz	r0, 508e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    508c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    508e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5090:	428b      	cmp	r3, r1
    5092:	d0fb      	beq.n	508c <bt_l2cap_le_lookup_rx_cid+0x8>
    5094:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5096:	2000      	movs	r0, #0
    5098:	2b00      	cmp	r3, #0
    509a:	d0f7      	beq.n	508c <bt_l2cap_le_lookup_rx_cid+0x8>
    509c:	f1a3 0008 	sub.w	r0, r3, #8
    50a0:	e7f3      	b.n	508a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

000050a4 <bt_l2cap_recv>:
{
    50a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    50a6:	898b      	ldrh	r3, [r1, #12]
    50a8:	2b03      	cmp	r3, #3
{
    50aa:	4606      	mov	r6, r0
    50ac:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    50ae:	d80f      	bhi.n	50d0 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    50b0:	4b16      	ldr	r3, [pc, #88]	; (510c <bt_l2cap_recv+0x68>)
    50b2:	9301      	str	r3, [sp, #4]
    50b4:	9300      	str	r3, [sp, #0]
    50b6:	4b16      	ldr	r3, [pc, #88]	; (5110 <bt_l2cap_recv+0x6c>)
    50b8:	4a16      	ldr	r2, [pc, #88]	; (5114 <bt_l2cap_recv+0x70>)
    50ba:	681d      	ldr	r5, [r3, #0]
    50bc:	4916      	ldr	r1, [pc, #88]	; (5118 <bt_l2cap_recv+0x74>)
    50be:	4b17      	ldr	r3, [pc, #92]	; (511c <bt_l2cap_recv+0x78>)
    50c0:	4817      	ldr	r0, [pc, #92]	; (5120 <bt_l2cap_recv+0x7c>)
    50c2:	47a8      	blx	r5
	net_buf_unref(buf);
    50c4:	4620      	mov	r0, r4
}
    50c6:	b004      	add	sp, #16
    50c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    50cc:	f00d bee6 	b.w	12e9c <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    50d0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    50d2:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    50d4:	f850 3f08 	ldr.w	r3, [r0, #8]!
    50d8:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    50da:	f00d ff36 	bl	12f4a <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    50de:	4629      	mov	r1, r5
    50e0:	4630      	mov	r0, r6
    50e2:	f7ff ffcf 	bl	5084 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    50e6:	b958      	cbnz	r0, 5100 <bt_l2cap_recv+0x5c>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    50e8:	4b08      	ldr	r3, [pc, #32]	; (510c <bt_l2cap_recv+0x68>)
    50ea:	9302      	str	r3, [sp, #8]
    50ec:	e88d 0028 	stmia.w	sp, {r3, r5}
    50f0:	4b07      	ldr	r3, [pc, #28]	; (5110 <bt_l2cap_recv+0x6c>)
    50f2:	4a0c      	ldr	r2, [pc, #48]	; (5124 <bt_l2cap_recv+0x80>)
    50f4:	681d      	ldr	r5, [r3, #0]
    50f6:	4908      	ldr	r1, [pc, #32]	; (5118 <bt_l2cap_recv+0x74>)
    50f8:	4b08      	ldr	r3, [pc, #32]	; (511c <bt_l2cap_recv+0x78>)
    50fa:	480b      	ldr	r0, [pc, #44]	; (5128 <bt_l2cap_recv+0x84>)
    50fc:	47a8      	blx	r5
    50fe:	e7e1      	b.n	50c4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    5100:	6843      	ldr	r3, [r0, #4]
    5102:	4621      	mov	r1, r4
    5104:	691b      	ldr	r3, [r3, #16]
    5106:	4798      	blx	r3
    5108:	e7dc      	b.n	50c4 <bt_l2cap_recv+0x20>
    510a:	bf00      	nop
    510c:	00014c55 	.word	0x00014c55
    5110:	20003aa4 	.word	0x20003aa4
    5114:	000159c3 	.word	0x000159c3
    5118:	00015a12 	.word	0x00015a12
    511c:	00016254 	.word	0x00016254
    5120:	0001626f 	.word	0x0001626f
    5124:	00015a0b 	.word	0x00015a0b
    5128:	0001629c 	.word	0x0001629c

0000512c <bt_l2cap_update_conn_param>:
{
    512c:	b570      	push	{r4, r5, r6, lr}
	ident++;
    512e:	4b12      	ldr	r3, [pc, #72]	; (5178 <bt_l2cap_update_conn_param+0x4c>)
    5130:	781a      	ldrb	r2, [r3, #0]
    5132:	3201      	adds	r2, #1
	if (!ident) {
    5134:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5138:	bf08      	it	eq
    513a:	2201      	moveq	r2, #1
    513c:	701a      	strb	r2, [r3, #0]
{
    513e:	460c      	mov	r4, r1
    5140:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5142:	7819      	ldrb	r1, [r3, #0]
    5144:	2208      	movs	r2, #8
    5146:	2012      	movs	r0, #18
    5148:	f7ff fdc2 	bl	4cd0 <l2cap_create_le_sig_pdu.isra.5>
	req = net_buf_add(buf, sizeof(*req));
    514c:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    514e:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    5150:	4408      	add	r0, r1
    5152:	f00d fedb 	bl	12f0c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5156:	8823      	ldrh	r3, [r4, #0]
    5158:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    515a:	8863      	ldrh	r3, [r4, #2]
    515c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    515e:	88a3      	ldrh	r3, [r4, #4]
    5160:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5162:	88e3      	ldrh	r3, [r4, #6]
    5164:	80c3      	strh	r3, [r0, #6]
    5166:	4632      	mov	r2, r6
    5168:	4628      	mov	r0, r5
    516a:	2300      	movs	r3, #0
    516c:	2105      	movs	r1, #5
    516e:	f7ff fe83 	bl	4e78 <bt_l2cap_send_cb>
}
    5172:	2000      	movs	r0, #0
    5174:	bd70      	pop	{r4, r5, r6, pc}
    5176:	bf00      	nop
    5178:	200004a8 	.word	0x200004a8

0000517c <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    517c:	4801      	ldr	r0, [pc, #4]	; (5184 <bt_l2cap_init+0x8>)
    517e:	f7ff bdbb 	b.w	4cf8 <bt_l2cap_le_fixed_chan_register>
    5182:	bf00      	nop
    5184:	20003be8 	.word	0x20003be8

00005188 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5188:	2006      	movs	r0, #6
    518a:	4770      	bx	lr

0000518c <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    518c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    518e:	4a0a      	ldr	r2, [pc, #40]	; (51b8 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5190:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    5192:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5196:	4284      	cmp	r4, r0
    5198:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    519c:	d102      	bne.n	51a4 <att_op_get_type+0x18>
			return handlers[i].type;
    519e:	440a      	add	r2, r1
    51a0:	7890      	ldrb	r0, [r2, #2]
    51a2:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    51a4:	3301      	adds	r3, #1
    51a6:	2b1b      	cmp	r3, #27
    51a8:	d1f3      	bne.n	5192 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    51aa:	f010 0f40 	tst.w	r0, #64	; 0x40
    51ae:	bf14      	ite	ne
    51b0:	2000      	movne	r0, #0
    51b2:	2006      	moveq	r0, #6
}
    51b4:	bd10      	pop	{r4, pc}
    51b6:	bf00      	nop
    51b8:	0001671c 	.word	0x0001671c

000051bc <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    51bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    51be:	4d11      	ldr	r5, [pc, #68]	; (5204 <bt_att_accept+0x48>)
    51c0:	682c      	ldr	r4, [r5, #0]
{
    51c2:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    51c4:	b984      	cbnz	r4, 51e8 <bt_att_accept+0x2c>
			continue;
		}

		memset(att, 0, sizeof(*att));
    51c6:	22f4      	movs	r2, #244	; 0xf4
    51c8:	4621      	mov	r1, r4
    51ca:	4628      	mov	r0, r5
    51cc:	f7fc fd54 	bl	1c78 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    51d0:	2202      	movs	r2, #2
		att->chan.chan.ops = &ops;
    51d2:	4b0d      	ldr	r3, [pc, #52]	; (5208 <bt_att_accept+0x4c>)
    51d4:	606b      	str	r3, [r5, #4]
    51d6:	f105 00d8 	add.w	r0, r5, #216	; 0xd8
    51da:	4611      	mov	r1, r2
    51dc:	f00e ff44 	bl	14068 <_impl_k_sem_init>
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    51e0:	6035      	str	r5, [r6, #0]

		return 0;
    51e2:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    51e4:	b004      	add	sp, #16
    51e6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    51e8:	4b08      	ldr	r3, [pc, #32]	; (520c <bt_att_accept+0x50>)
    51ea:	9302      	str	r3, [sp, #8]
    51ec:	9300      	str	r3, [sp, #0]
    51ee:	4b08      	ldr	r3, [pc, #32]	; (5210 <bt_att_accept+0x54>)
    51f0:	9001      	str	r0, [sp, #4]
    51f2:	681c      	ldr	r4, [r3, #0]
    51f4:	4807      	ldr	r0, [pc, #28]	; (5214 <bt_att_accept+0x58>)
    51f6:	4b08      	ldr	r3, [pc, #32]	; (5218 <bt_att_accept+0x5c>)
    51f8:	4a08      	ldr	r2, [pc, #32]	; (521c <bt_att_accept+0x60>)
    51fa:	4909      	ldr	r1, [pc, #36]	; (5220 <bt_att_accept+0x64>)
    51fc:	47a0      	blx	r4
	return -ENOMEM;
    51fe:	f06f 000b 	mvn.w	r0, #11
    5202:	e7ef      	b.n	51e4 <bt_att_accept+0x28>
    5204:	200004b4 	.word	0x200004b4
    5208:	20003c14 	.word	0x20003c14
    520c:	00014c55 	.word	0x00014c55
    5210:	20003aa4 	.word	0x20003aa4
    5214:	000165d4 	.word	0x000165d4
    5218:	000164c4 	.word	0x000164c4
    521c:	000159c3 	.word	0x000159c3
    5220:	00015a12 	.word	0x00015a12

00005224 <att_req_destroy>:
{
    5224:	b510      	push	{r4, lr}
    5226:	4604      	mov	r4, r0
	if (req->buf) {
    5228:	6900      	ldr	r0, [r0, #16]
    522a:	b108      	cbz	r0, 5230 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    522c:	f00d fe36 	bl	12e9c <net_buf_unref>
	if (req->destroy) {
    5230:	68a3      	ldr	r3, [r4, #8]
    5232:	b10b      	cbz	r3, 5238 <att_req_destroy+0x14>
		req->destroy(req);
    5234:	4620      	mov	r0, r4
    5236:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5238:	4620      	mov	r0, r4
    523a:	2214      	movs	r2, #20
    523c:	2100      	movs	r1, #0
}
    523e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5242:	f7fc bd19 	b.w	1c78 <memset>

00005246 <att_notify>:
{
    5246:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5248:	f101 0008 	add.w	r0, r1, #8
    524c:	f00d fe8d 	bl	12f6a <net_buf_simple_pull_le16>
}
    5250:	2000      	movs	r0, #0
    5252:	bd08      	pop	{r3, pc}

00005254 <read_group_cb>:
{
    5254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5258:	680d      	ldr	r5, [r1, #0]
{
    525a:	4606      	mov	r6, r0
    525c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    525e:	f04f 0800 	mov.w	r8, #0
    5262:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5266:	a902      	add	r1, sp, #8
    5268:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    526a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    526c:	f88d 8008 	strb.w	r8, [sp, #8]
    5270:	f8ad 300a 	strh.w	r3, [sp, #10]
    5274:	f7fc fe52 	bl	1f1c <bt_uuid_cmp>
    5278:	b198      	cbz	r0, 52a2 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    527a:	f642 0301 	movw	r3, #10241	; 0x2801
    527e:	a903      	add	r1, sp, #12
    5280:	6830      	ldr	r0, [r6, #0]
    5282:	f88d 800c 	strb.w	r8, [sp, #12]
    5286:	f8ad 300e 	strh.w	r3, [sp, #14]
    528a:	f7fc fe47 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    528e:	b140      	cbz	r0, 52a2 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5290:	6923      	ldr	r3, [r4, #16]
    5292:	b123      	cbz	r3, 529e <read_group_cb+0x4a>
    5294:	8a32      	ldrh	r2, [r6, #16]
    5296:	8859      	ldrh	r1, [r3, #2]
    5298:	4291      	cmp	r1, r2
    529a:	d200      	bcs.n	529e <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    529c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    529e:	2001      	movs	r0, #1
    52a0:	e012      	b.n	52c8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    52a2:	6861      	ldr	r1, [r4, #4]
    52a4:	6830      	ldr	r0, [r6, #0]
    52a6:	f7fc fe39 	bl	1f1c <bt_uuid_cmp>
    52aa:	b110      	cbz	r0, 52b2 <read_group_cb+0x5e>
		data->group = NULL;
    52ac:	2300      	movs	r3, #0
    52ae:	6123      	str	r3, [r4, #16]
    52b0:	e7f5      	b.n	529e <read_group_cb+0x4a>
	if (data->rsp->len &&
    52b2:	68e3      	ldr	r3, [r4, #12]
    52b4:	68a0      	ldr	r0, [r4, #8]
    52b6:	781a      	ldrb	r2, [r3, #0]
    52b8:	b14a      	cbz	r2, 52ce <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    52ba:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    52be:	8981      	ldrh	r1, [r0, #12]
    52c0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    52c2:	4293      	cmp	r3, r2
    52c4:	da03      	bge.n	52ce <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    52c6:	2000      	movs	r0, #0
}
    52c8:	b004      	add	sp, #16
    52ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    52ce:	2104      	movs	r1, #4
    52d0:	3008      	adds	r0, #8
    52d2:	f00d fe1b 	bl	12f0c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    52d6:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    52d8:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    52da:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    52dc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    52de:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    52e0:	898a      	ldrh	r2, [r1, #12]
    52e2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
    52e6:	6889      	ldr	r1, [r1, #8]
    52e8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    52ec:	1a9b      	subs	r3, r3, r2
    52ee:	2500      	movs	r5, #0
    52f0:	440a      	add	r2, r1
    52f2:	9500      	str	r5, [sp, #0]
    52f4:	4631      	mov	r1, r6
    52f6:	b29b      	uxth	r3, r3
    52f8:	4638      	mov	r0, r7
    52fa:	47c0      	blx	r8
	if (read < 0) {
    52fc:	1e01      	subs	r1, r0, #0
    52fe:	dbe2      	blt.n	52c6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    5300:	68e0      	ldr	r0, [r4, #12]
    5302:	7802      	ldrb	r2, [r0, #0]
    5304:	1d0b      	adds	r3, r1, #4
    5306:	b92a      	cbnz	r2, 5314 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5308:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    530a:	68a0      	ldr	r0, [r4, #8]
    530c:	3008      	adds	r0, #8
    530e:	f00d fdfd 	bl	12f0c <net_buf_simple_add>
    5312:	e7c4      	b.n	529e <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5314:	429a      	cmp	r2, r3
    5316:	d0f8      	beq.n	530a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5318:	68a2      	ldr	r2, [r4, #8]
    531a:	8993      	ldrh	r3, [r2, #12]
    531c:	3b04      	subs	r3, #4
    531e:	8193      	strh	r3, [r2, #12]
    5320:	e7d1      	b.n	52c6 <read_group_cb+0x72>

00005322 <find_info_cb>:
	if (!data->rsp) {
    5322:	688b      	ldr	r3, [r1, #8]
{
    5324:	b570      	push	{r4, r5, r6, lr}
    5326:	4605      	mov	r5, r0
    5328:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    532a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    532c:	b963      	cbnz	r3, 5348 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    532e:	6848      	ldr	r0, [r1, #4]
    5330:	2101      	movs	r1, #1
    5332:	3008      	adds	r0, #8
    5334:	f00d fdea 	bl	12f0c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5338:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    533a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    533c:	781b      	ldrb	r3, [r3, #0]
    533e:	2b00      	cmp	r3, #0
    5340:	bf0c      	ite	eq
    5342:	2301      	moveq	r3, #1
    5344:	2302      	movne	r3, #2
    5346:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5348:	68a3      	ldr	r3, [r4, #8]
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	2b01      	cmp	r3, #1
    534e:	d003      	beq.n	5358 <find_info_cb+0x36>
    5350:	2b02      	cmp	r3, #2
    5352:	d01a      	beq.n	538a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5354:	2000      	movs	r0, #0
}
    5356:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5358:	682b      	ldr	r3, [r5, #0]
    535a:	781b      	ldrb	r3, [r3, #0]
    535c:	2b00      	cmp	r3, #0
    535e:	d1f9      	bne.n	5354 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5360:	6860      	ldr	r0, [r4, #4]
    5362:	2104      	movs	r1, #4
    5364:	3008      	adds	r0, #8
    5366:	f00d fdd1 	bl	12f0c <net_buf_simple_add>
    536a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    536c:	8a2b      	ldrh	r3, [r5, #16]
    536e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5370:	682b      	ldr	r3, [r5, #0]
    5372:	885b      	ldrh	r3, [r3, #2]
    5374:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5376:	6863      	ldr	r3, [r4, #4]
    5378:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    537c:	899b      	ldrh	r3, [r3, #12]
    537e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5380:	2804      	cmp	r0, #4
    5382:	bf94      	ite	ls
    5384:	2000      	movls	r0, #0
    5386:	2001      	movhi	r0, #1
    5388:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    538a:	682b      	ldr	r3, [r5, #0]
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	2b02      	cmp	r3, #2
    5390:	d1e0      	bne.n	5354 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5392:	6860      	ldr	r0, [r4, #4]
    5394:	2112      	movs	r1, #18
    5396:	3008      	adds	r0, #8
    5398:	f00d fdb8 	bl	12f0c <net_buf_simple_add>
    539c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    539e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    53a0:	8a2b      	ldrh	r3, [r5, #16]
    53a2:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    53a6:	2210      	movs	r2, #16
    53a8:	3101      	adds	r1, #1
    53aa:	f7fc fc39 	bl	1c20 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    53ae:	6863      	ldr	r3, [r4, #4]
    53b0:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
    53b4:	899b      	ldrh	r3, [r3, #12]
    53b6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    53b8:	2812      	cmp	r0, #18
    53ba:	e7e2      	b.n	5382 <find_info_cb+0x60>

000053bc <find_type_cb>:
{
    53bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    53c0:	680e      	ldr	r6, [r1, #0]
{
    53c2:	b088      	sub	sp, #32
    53c4:	4605      	mov	r5, r0
    53c6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    53c8:	2700      	movs	r7, #0
    53ca:	f642 0301 	movw	r3, #10241	; 0x2801
    53ce:	a902      	add	r1, sp, #8
    53d0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    53d2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    53d6:	f88d 7008 	strb.w	r7, [sp, #8]
    53da:	f8ad 300a 	strh.w	r3, [sp, #10]
    53de:	f7fc fd9d 	bl	1f1c <bt_uuid_cmp>
    53e2:	b928      	cbnz	r0, 53f0 <find_type_cb+0x34>
		data->group = NULL;
    53e4:	2300      	movs	r3, #0
    53e6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    53e8:	2001      	movs	r0, #1
}
    53ea:	b008      	add	sp, #32
    53ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    53f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    53f4:	a903      	add	r1, sp, #12
    53f6:	6828      	ldr	r0, [r5, #0]
    53f8:	f88d 700c 	strb.w	r7, [sp, #12]
    53fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    5400:	f7fc fd8c 	bl	1f1c <bt_uuid_cmp>
    5404:	b140      	cbz	r0, 5418 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    5406:	68a3      	ldr	r3, [r4, #8]
    5408:	2b00      	cmp	r3, #0
    540a:	d0ed      	beq.n	53e8 <find_type_cb+0x2c>
    540c:	8a2a      	ldrh	r2, [r5, #16]
    540e:	8859      	ldrh	r1, [r3, #2]
    5410:	4291      	cmp	r1, r2
    5412:	d2e9      	bcs.n	53e8 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5414:	805a      	strh	r2, [r3, #2]
    5416:	e7e7      	b.n	53e8 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    5418:	6862      	ldr	r2, [r4, #4]
    541a:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
    541e:	8992      	ldrh	r2, [r2, #12]
    5420:	1a9b      	subs	r3, r3, r2
    5422:	2b03      	cmp	r3, #3
    5424:	d9e1      	bls.n	53ea <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5426:	2310      	movs	r3, #16
    5428:	9000      	str	r0, [sp, #0]
    542a:	eb0d 0203 	add.w	r2, sp, r3
    542e:	686e      	ldr	r6, [r5, #4]
    5430:	4629      	mov	r1, r5
    5432:	4640      	mov	r0, r8
    5434:	47b0      	blx	r6
	if (read < 0) {
    5436:	1e02      	subs	r2, r0, #0
    5438:	dbd4      	blt.n	53e4 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    543a:	7c23      	ldrb	r3, [r4, #16]
    543c:	429a      	cmp	r2, r3
    543e:	d1d1      	bne.n	53e4 <find_type_cb+0x28>
    5440:	a904      	add	r1, sp, #16
    5442:	68e0      	ldr	r0, [r4, #12]
    5444:	f7fc fbd7 	bl	1bf6 <memcmp>
    5448:	2800      	cmp	r0, #0
    544a:	d1cb      	bne.n	53e4 <find_type_cb+0x28>
	data->err = 0x00;
    544c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    544e:	6860      	ldr	r0, [r4, #4]
    5450:	2104      	movs	r1, #4
    5452:	3008      	adds	r0, #8
    5454:	f00d fd5a 	bl	12f0c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5458:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    545a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    545c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    545e:	8043      	strh	r3, [r0, #2]
    5460:	e7c2      	b.n	53e8 <find_type_cb+0x2c>
	...

00005464 <bt_att_connected>:
{
    5464:	b510      	push	{r4, lr}
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5466:	2317      	movs	r3, #23
{
    5468:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    546a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    546e:	8743      	strh	r3, [r0, #58]	; 0x3a
	k_delayed_work_init(&att->timeout_work, att_timeout);
    5470:	4906      	ldr	r1, [pc, #24]	; (548c <bt_att_connected+0x28>)
    5472:	30b0      	adds	r0, #176	; 0xb0
    5474:	f00f f90c 	bl	14690 <k_delayed_work_init>
	list->head = NULL;
    5478:	2300      	movs	r3, #0
    547a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = NULL;
    547e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	bt_gatt_connected(ch->chan.conn);
    5482:	6820      	ldr	r0, [r4, #0]
}
    5484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    5488:	f001 bc32 	b.w	6cf0 <bt_gatt_connected>
    548c:	000059c5 	.word	0x000059c5

00005490 <check_perm.isra.5>:
	if ((mask & BT_GATT_PERM_READ) &&
    5490:	f011 0f01 	tst.w	r1, #1
    5494:	7c83      	ldrb	r3, [r0, #18]
    5496:	d004      	beq.n	54a2 <check_perm.isra.5+0x12>
    5498:	f013 0f15 	tst.w	r3, #21
    549c:	d012      	beq.n	54c4 <check_perm.isra.5+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    549e:	6842      	ldr	r2, [r0, #4]
    54a0:	b182      	cbz	r2, 54c4 <check_perm.isra.5+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    54a2:	078a      	lsls	r2, r1, #30
    54a4:	d504      	bpl.n	54b0 <check_perm.isra.5+0x20>
    54a6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    54aa:	d00d      	beq.n	54c8 <check_perm.isra.5+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    54ac:	6882      	ldr	r2, [r0, #8]
    54ae:	b15a      	cbz	r2, 54c8 <check_perm.isra.5+0x38>
	mask &= attr->perm;
    54b0:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    54b2:	f011 0f30 	tst.w	r1, #48	; 0x30
    54b6:	d109      	bne.n	54cc <check_perm.isra.5+0x3c>
	return 0;
    54b8:	f011 0f0c 	tst.w	r1, #12
    54bc:	bf14      	ite	ne
    54be:	200f      	movne	r0, #15
    54c0:	2000      	moveq	r0, #0
    54c2:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    54c4:	2002      	movs	r0, #2
    54c6:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    54c8:	2003      	movs	r0, #3
    54ca:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    54cc:	2005      	movs	r0, #5
}
    54ce:	4770      	bx	lr

000054d0 <read_type_cb>:
{
    54d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    54d4:	680f      	ldr	r7, [r1, #0]
{
    54d6:	4606      	mov	r6, r0
    54d8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    54da:	6800      	ldr	r0, [r0, #0]
    54dc:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    54de:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    54e2:	f7fc fd1b 	bl	1f1c <bt_uuid_cmp>
    54e6:	4680      	mov	r8, r0
    54e8:	2800      	cmp	r0, #0
    54ea:	d14d      	bne.n	5588 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    54ec:	2115      	movs	r1, #21
    54ee:	4630      	mov	r0, r6
    54f0:	f7ff ffce 	bl	5490 <check_perm.isra.5>
    54f4:	4605      	mov	r5, r0
    54f6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    54f8:	b148      	cbz	r0, 550e <read_type_cb+0x3e>
		if (data->rsp->len) {
    54fa:	68e3      	ldr	r3, [r4, #12]
    54fc:	781d      	ldrb	r5, [r3, #0]
    54fe:	b115      	cbz	r5, 5506 <read_type_cb+0x36>
			data->err = 0x00;
    5500:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    5504:	4645      	mov	r5, r8
}
    5506:	4628      	mov	r0, r5
    5508:	b003      	add	sp, #12
    550a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    550e:	68a0      	ldr	r0, [r4, #8]
    5510:	2102      	movs	r1, #2
    5512:	3008      	adds	r0, #8
    5514:	f00d fcfa 	bl	12f0c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5518:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    551a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    551c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    551e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5520:	898a      	ldrh	r2, [r1, #12]
    5522:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    5526:	6889      	ldr	r1, [r1, #8]
    5528:	f8d6 8004 	ldr.w	r8, [r6, #4]
    552c:	9500      	str	r5, [sp, #0]
    552e:	1a9b      	subs	r3, r3, r2
    5530:	b29b      	uxth	r3, r3
    5532:	440a      	add	r2, r1
    5534:	4648      	mov	r0, r9
    5536:	4631      	mov	r1, r6
    5538:	47c0      	blx	r8
	if (read < 0) {
    553a:	1e01      	subs	r1, r0, #0
    553c:	da08      	bge.n	5550 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    553e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5542:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5544:	bf9a      	itte	ls
    5546:	4249      	negls	r1, r1
    5548:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    554a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    554c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    554e:	e7da      	b.n	5506 <read_type_cb+0x36>
	if (!data->rsp->len) {
    5550:	68e0      	ldr	r0, [r4, #12]
    5552:	7802      	ldrb	r2, [r0, #0]
    5554:	1c8b      	adds	r3, r1, #2
    5556:	b982      	cbnz	r2, 557a <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    5558:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    555a:	68a0      	ldr	r0, [r4, #8]
    555c:	3008      	adds	r0, #8
    555e:	f00d fcd5 	bl	12f0c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    5562:	68a3      	ldr	r3, [r4, #8]
    5564:	f8b7 505e 	ldrh.w	r5, [r7, #94]	; 0x5e
    5568:	899b      	ldrh	r3, [r3, #12]
    556a:	1aed      	subs	r5, r5, r3
    556c:	68e3      	ldr	r3, [r4, #12]
    556e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5570:	429d      	cmp	r5, r3
    5572:	bfd4      	ite	le
    5574:	2500      	movle	r5, #0
    5576:	2501      	movgt	r5, #1
    5578:	e7c5      	b.n	5506 <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    557a:	429a      	cmp	r2, r3
    557c:	d0ed      	beq.n	555a <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    557e:	68a2      	ldr	r2, [r4, #8]
    5580:	8993      	ldrh	r3, [r2, #12]
    5582:	3b02      	subs	r3, #2
    5584:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5586:	e7be      	b.n	5506 <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    5588:	2501      	movs	r5, #1
    558a:	e7bc      	b.n	5506 <read_type_cb+0x36>

0000558c <uuid_create>:
{
    558c:	b510      	push	{r4, lr}
	switch (buf->len) {
    558e:	898a      	ldrh	r2, [r1, #12]
    5590:	2a02      	cmp	r2, #2
{
    5592:	4604      	mov	r4, r0
	switch (buf->len) {
    5594:	d003      	beq.n	559e <uuid_create+0x12>
    5596:	2a10      	cmp	r2, #16
    5598:	d00a      	beq.n	55b0 <uuid_create+0x24>
	return false;
    559a:	2000      	movs	r0, #0
}
    559c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    559e:	2300      	movs	r3, #0
    55a0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    55a2:	f101 0008 	add.w	r0, r1, #8
    55a6:	f00d fce0 	bl	12f6a <net_buf_simple_pull_le16>
    55aa:	8060      	strh	r0, [r4, #2]
		return true;
    55ac:	2001      	movs	r0, #1
    55ae:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    55b0:	2302      	movs	r3, #2
    55b2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    55b6:	6889      	ldr	r1, [r1, #8]
    55b8:	f7fc fb32 	bl	1c20 <memcpy>
    55bc:	e7f6      	b.n	55ac <uuid_create+0x20>
	...

000055c0 <att_req_sent>:
{
    55c0:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    55c2:	2104      	movs	r1, #4
    55c4:	f7ff fd4e 	bl	5064 <bt_l2cap_le_lookup_tx_cid>
    55c8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    55ca:	30d8      	adds	r0, #216	; 0xd8
    55cc:	f00e fd64 	bl	14098 <_impl_k_sem_give>
	if (att->req) {
    55d0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    55d4:	b143      	cbz	r3, 55e8 <att_req_sent+0x28>
    55d6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    55da:	f247 5230 	movw	r2, #30000	; 0x7530
    55de:	4803      	ldr	r0, [pc, #12]	; (55ec <att_req_sent+0x2c>)
}
    55e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55e4:	f00f b8c8 	b.w	14778 <k_delayed_work_submit_to_queue>
    55e8:	bd10      	pop	{r4, pc}
    55ea:	bf00      	nop
    55ec:	200019c8 	.word	0x200019c8

000055f0 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    55f0:	6803      	ldr	r3, [r0, #0]
    55f2:	7a5b      	ldrb	r3, [r3, #9]
    55f4:	2b03      	cmp	r3, #3
    55f6:	d10a      	bne.n	560e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    55f8:	f3bf 8f5b 	dmb	ish
    55fc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    5600:	f3bf 8f5b 	dmb	ish
    5604:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    5608:	f000 0001 	and.w	r0, r0, #1
    560c:	4770      	bx	lr
    560e:	2001      	movs	r0, #1
}
    5610:	4770      	bx	lr

00005612 <att_prepare_write_req>:
    5612:	2006      	movs	r0, #6
    5614:	4770      	bx	lr

00005616 <att_pdu_sent>:
{
    5616:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5618:	2104      	movs	r1, #4
    561a:	f7ff fd23 	bl	5064 <bt_l2cap_le_lookup_tx_cid>
}
    561e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5622:	30d8      	adds	r0, #216	; 0xd8
    5624:	f00e bd38 	b.w	14098 <_impl_k_sem_give>

00005628 <att_rsp_sent>:
{
    5628:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    562a:	2104      	movs	r1, #4
    562c:	f7ff fd1a 	bl	5064 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5630:	f3bf 8f5b 	dmb	ish
    5634:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5638:	e853 2f00 	ldrex	r2, [r3]
    563c:	f022 0201 	bic.w	r2, r2, #1
    5640:	e843 2100 	strex	r1, r2, [r3]
    5644:	2900      	cmp	r1, #0
    5646:	d1f7      	bne.n	5638 <att_rsp_sent+0x10>
    5648:	f3bf 8f5b 	dmb	ish
    564c:	30d8      	adds	r0, #216	; 0xd8
}
    564e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5652:	f00e bd21 	b.w	14098 <_impl_k_sem_give>

00005656 <att_cfm_sent>:
{
    5656:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5658:	2104      	movs	r1, #4
    565a:	f7ff fd03 	bl	5064 <bt_l2cap_le_lookup_tx_cid>
    565e:	f3bf 8f5b 	dmb	ish
    5662:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    5666:	e853 2f00 	ldrex	r2, [r3]
    566a:	f022 0202 	bic.w	r2, r2, #2
    566e:	e843 2100 	strex	r1, r2, [r3]
    5672:	2900      	cmp	r1, #0
    5674:	d1f7      	bne.n	5666 <att_cfm_sent+0x10>
    5676:	f3bf 8f5b 	dmb	ish
    567a:	30d8      	adds	r0, #216	; 0xd8
}
    567c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5680:	f00e bd0a 	b.w	14098 <_impl_k_sem_give>

00005684 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    5684:	7a43      	ldrb	r3, [r0, #9]
    5686:	2b03      	cmp	r3, #3
{
    5688:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    568a:	d00c      	beq.n	56a6 <att_chan_get+0x22>
		BT_WARN("Not connected");
    568c:	4b17      	ldr	r3, [pc, #92]	; (56ec <att_chan_get+0x68>)
    568e:	9301      	str	r3, [sp, #4]
    5690:	9300      	str	r3, [sp, #0]
    5692:	4b17      	ldr	r3, [pc, #92]	; (56f0 <att_chan_get+0x6c>)
    5694:	4a17      	ldr	r2, [pc, #92]	; (56f4 <att_chan_get+0x70>)
    5696:	681c      	ldr	r4, [r3, #0]
    5698:	4917      	ldr	r1, [pc, #92]	; (56f8 <att_chan_get+0x74>)
    569a:	4b18      	ldr	r3, [pc, #96]	; (56fc <att_chan_get+0x78>)
    569c:	4818      	ldr	r0, [pc, #96]	; (5700 <att_chan_get+0x7c>)
		BT_WARN("ATT context flagged as disconnected");
    569e:	47a0      	blx	r4
		return NULL;
    56a0:	2000      	movs	r0, #0
}
    56a2:	b003      	add	sp, #12
    56a4:	bd30      	pop	{r4, r5, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    56a6:	2104      	movs	r1, #4
    56a8:	f7ff fcec 	bl	5084 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    56ac:	4604      	mov	r4, r0
    56ae:	b958      	cbnz	r0, 56c8 <att_chan_get+0x44>
		BT_ERR("Unable to find ATT channel");
    56b0:	4b0e      	ldr	r3, [pc, #56]	; (56ec <att_chan_get+0x68>)
    56b2:	9301      	str	r3, [sp, #4]
    56b4:	9300      	str	r3, [sp, #0]
    56b6:	4b0e      	ldr	r3, [pc, #56]	; (56f0 <att_chan_get+0x6c>)
    56b8:	4a12      	ldr	r2, [pc, #72]	; (5704 <att_chan_get+0x80>)
    56ba:	681d      	ldr	r5, [r3, #0]
    56bc:	490e      	ldr	r1, [pc, #56]	; (56f8 <att_chan_get+0x74>)
    56be:	4b0f      	ldr	r3, [pc, #60]	; (56fc <att_chan_get+0x78>)
    56c0:	4811      	ldr	r0, [pc, #68]	; (5708 <att_chan_get+0x84>)
    56c2:	47a8      	blx	r5
    56c4:	4620      	mov	r0, r4
    56c6:	e7ec      	b.n	56a2 <att_chan_get+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56c8:	f3bf 8f5b 	dmb	ish
    56cc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    56d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    56d4:	075b      	lsls	r3, r3, #29
    56d6:	d5f5      	bpl.n	56c4 <att_chan_get+0x40>
		BT_WARN("ATT context flagged as disconnected");
    56d8:	4b04      	ldr	r3, [pc, #16]	; (56ec <att_chan_get+0x68>)
    56da:	9301      	str	r3, [sp, #4]
    56dc:	9300      	str	r3, [sp, #0]
    56de:	4b04      	ldr	r3, [pc, #16]	; (56f0 <att_chan_get+0x6c>)
    56e0:	4a04      	ldr	r2, [pc, #16]	; (56f4 <att_chan_get+0x70>)
    56e2:	681c      	ldr	r4, [r3, #0]
    56e4:	4904      	ldr	r1, [pc, #16]	; (56f8 <att_chan_get+0x74>)
    56e6:	4b05      	ldr	r3, [pc, #20]	; (56fc <att_chan_get+0x78>)
    56e8:	4808      	ldr	r0, [pc, #32]	; (570c <att_chan_get+0x88>)
    56ea:	e7d8      	b.n	569e <att_chan_get+0x1a>
    56ec:	00014c55 	.word	0x00014c55
    56f0:	20003aa4 	.word	0x20003aa4
    56f4:	00015a0b 	.word	0x00015a0b
    56f8:	00015a12 	.word	0x00015a12
    56fc:	00016499 	.word	0x00016499
    5700:	000164d2 	.word	0x000164d2
    5704:	000159c3 	.word	0x000159c3
    5708:	000164f0 	.word	0x000164f0
    570c:	0001651b 	.word	0x0001651b

00005710 <write_cb>:
{
    5710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5714:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5716:	f8d1 8000 	ldr.w	r8, [r1]
    571a:	212a      	movs	r1, #42	; 0x2a
{
    571c:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    571e:	f7ff feb7 	bl	5490 <check_perm.isra.5>
    5722:	4605      	mov	r5, r0
    5724:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5726:	b9e0      	cbnz	r0, 5762 <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    5728:	8a62      	ldrh	r2, [r4, #18]
    572a:	9001      	str	r0, [sp, #4]
    572c:	9200      	str	r2, [sp, #0]
    572e:	7c23      	ldrb	r3, [r4, #16]
    5730:	68b7      	ldr	r7, [r6, #8]
    5732:	68e2      	ldr	r2, [r4, #12]
    5734:	4631      	mov	r1, r6
    5736:	4640      	mov	r0, r8
    5738:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    573a:	2800      	cmp	r0, #0
    573c:	db02      	blt.n	5744 <write_cb+0x34>
    573e:	7c23      	ldrb	r3, [r4, #16]
    5740:	4298      	cmp	r0, r3
    5742:	d00b      	beq.n	575c <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    5744:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    5748:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    574a:	bf9a      	itte	ls
    574c:	4240      	negls	r0, r0
    574e:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5750:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    5752:	7520      	strb	r0, [r4, #20]
}
    5754:	4628      	mov	r0, r5
    5756:	b002      	add	sp, #8
    5758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    575c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    575e:	2501      	movs	r5, #1
    5760:	e7f8      	b.n	5754 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    5762:	2500      	movs	r5, #0
    5764:	e7f6      	b.n	5754 <write_cb+0x44>
	...

00005768 <att_send_req>:
{
    5768:	b573      	push	{r0, r1, r4, r5, r6, lr}
    576a:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    576c:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
	att->req = req;
    5770:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
{
    5774:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5776:	4630      	mov	r0, r6
    5778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    577c:	f00e fcb4 	bl	140e8 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    5780:	4628      	mov	r0, r5
    5782:	f7ff ff35 	bl	55f0 <att_is_connected>
    5786:	b980      	cbnz	r0, 57aa <att_send_req+0x42>
		BT_WARN("Disconnected");
    5788:	4b18      	ldr	r3, [pc, #96]	; (57ec <att_send_req+0x84>)
    578a:	9301      	str	r3, [sp, #4]
    578c:	9300      	str	r3, [sp, #0]
    578e:	4b18      	ldr	r3, [pc, #96]	; (57f0 <att_send_req+0x88>)
    5790:	4a18      	ldr	r2, [pc, #96]	; (57f4 <att_send_req+0x8c>)
    5792:	681c      	ldr	r4, [r3, #0]
    5794:	4918      	ldr	r1, [pc, #96]	; (57f8 <att_send_req+0x90>)
    5796:	4b19      	ldr	r3, [pc, #100]	; (57fc <att_send_req+0x94>)
    5798:	4819      	ldr	r0, [pc, #100]	; (5800 <att_send_req+0x98>)
    579a:	47a0      	blx	r4
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    579c:	4630      	mov	r0, r6
    579e:	f00e fc7b 	bl	14098 <_impl_k_sem_give>
		return -ENOTCONN;
    57a2:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    57a6:	b002      	add	sp, #8
    57a8:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    57aa:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    57ac:	f106 0008 	add.w	r0, r6, #8
    57b0:	f00d fbe3 	bl	12f7a <net_buf_simple_headroom>
	state->len = buf->len;
    57b4:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    57b6:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    57b8:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    57ba:	6920      	ldr	r0, [r4, #16]
    57bc:	682d      	ldr	r5, [r5, #0]
    57be:	f00d fba1 	bl	12f04 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    57c2:	6923      	ldr	r3, [r4, #16]
    57c4:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    57c6:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    57c8:	7818      	ldrb	r0, [r3, #0]
    57ca:	f7ff fcdf 	bl	518c <att_op_get_type>
    57ce:	3801      	subs	r0, #1
    57d0:	b2c0      	uxtb	r0, r0
    57d2:	2804      	cmp	r0, #4
    57d4:	bf96      	itet	ls
    57d6:	4b0b      	ldrls	r3, [pc, #44]	; (5804 <att_send_req+0x9c>)
    57d8:	4b0b      	ldrhi	r3, [pc, #44]	; (5808 <att_send_req+0xa0>)
    57da:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    57de:	4632      	mov	r2, r6
    57e0:	4628      	mov	r0, r5
    57e2:	2104      	movs	r1, #4
    57e4:	f7ff fb48 	bl	4e78 <bt_l2cap_send_cb>
	return 0;
    57e8:	2000      	movs	r0, #0
    57ea:	e7dc      	b.n	57a6 <att_send_req+0x3e>
    57ec:	00014c55 	.word	0x00014c55
    57f0:	20003aa4 	.word	0x20003aa4
    57f4:	00015a0b 	.word	0x00015a0b
    57f8:	00015a12 	.word	0x00015a12
    57fc:	0001645c 	.word	0x0001645c
    5800:	00016576 	.word	0x00016576
    5804:	00016448 	.word	0x00016448
    5808:	00005617 	.word	0x00005617

0000580c <att_handle_rsp>:
{
    580c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5810:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    5812:	30b0      	adds	r0, #176	; 0xb0
{
    5814:	461e      	mov	r6, r3
    5816:	460f      	mov	r7, r1
    5818:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    581a:	f00e ff49 	bl	146b0 <k_delayed_work_cancel>
	if (!att->req) {
    581e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    5822:	b9e3      	cbnz	r3, 585e <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
    5824:	4b1c      	ldr	r3, [pc, #112]	; (5898 <att_handle_rsp+0x8c>)
    5826:	9301      	str	r3, [sp, #4]
    5828:	9300      	str	r3, [sp, #0]
    582a:	4b1c      	ldr	r3, [pc, #112]	; (589c <att_handle_rsp+0x90>)
    582c:	4a1c      	ldr	r2, [pc, #112]	; (58a0 <att_handle_rsp+0x94>)
    582e:	681d      	ldr	r5, [r3, #0]
    5830:	491c      	ldr	r1, [pc, #112]	; (58a4 <att_handle_rsp+0x98>)
    5832:	4b1d      	ldr	r3, [pc, #116]	; (58a8 <att_handle_rsp+0x9c>)
    5834:	481d      	ldr	r0, [pc, #116]	; (58ac <att_handle_rsp+0xa0>)
    5836:	47a8      	blx	r5
    5838:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode);
    583c:	b159      	cbz	r1, 5856 <att_handle_rsp+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    583e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
    5842:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5844:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
Z_GENLIST_GET_NOT_EMPTY(slist, snode);
    5848:	4291      	cmp	r1, r2
	list->tail = node;
    584a:	bf08      	it	eq
    584c:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	att_send_req(att, ATT_REQ(node));
    5850:	4620      	mov	r0, r4
    5852:	f7ff ff89 	bl	5768 <att_send_req>
}
    5856:	2000      	movs	r0, #0
    5858:	b003      	add	sp, #12
    585a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    585e:	6918      	ldr	r0, [r3, #16]
    5860:	b128      	cbz	r0, 586e <att_handle_rsp+0x62>
		net_buf_unref(att->req->buf);
    5862:	f00d fb1b 	bl	12e9c <net_buf_unref>
		att->req->buf = NULL;
    5866:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    586a:	2200      	movs	r2, #0
    586c:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    586e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	func(att->chan.chan.conn, err, pdu, len, att->req);
    5872:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    5874:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    5878:	2500      	movs	r5, #0
    587a:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    587c:	463a      	mov	r2, r7
    587e:	9300      	str	r3, [sp, #0]
    5880:	4631      	mov	r1, r6
    5882:	4643      	mov	r3, r8
    5884:	47c8      	blx	r9
	if (!att->req->func) {
    5886:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    588a:	6843      	ldr	r3, [r0, #4]
    588c:	b90b      	cbnz	r3, 5892 <att_handle_rsp+0x86>
		att_req_destroy(att->req);
    588e:	f7ff fcc9 	bl	5224 <att_req_destroy>
	att->req = NULL;
    5892:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    5896:	e7cf      	b.n	5838 <att_handle_rsp+0x2c>
    5898:	00014c55 	.word	0x00014c55
    589c:	20003aa4 	.word	0x20003aa4
    58a0:	00015a0b 	.word	0x00015a0b
    58a4:	00015a12 	.word	0x00015a12
    58a8:	00016469 	.word	0x00016469
    58ac:	0001654f 	.word	0x0001654f

000058b0 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    58b0:	898a      	ldrh	r2, [r1, #12]
    58b2:	6889      	ldr	r1, [r1, #8]
    58b4:	2300      	movs	r3, #0
    58b6:	f7ff bfa9 	b.w	580c <att_handle_rsp>

000058ba <att_handle_exec_write_rsp>:
    58ba:	f7ff bff9 	b.w	58b0 <att_confirm>

000058be <att_handle_prepare_write_rsp>:
    58be:	f7ff bff7 	b.w	58b0 <att_confirm>

000058c2 <att_handle_write_rsp>:
    58c2:	f7ff bff5 	b.w	58b0 <att_confirm>

000058c6 <att_handle_read_mult_rsp>:
    58c6:	f7ff bff3 	b.w	58b0 <att_confirm>

000058ca <att_handle_read_blob_rsp>:
    58ca:	f7ff bff1 	b.w	58b0 <att_confirm>

000058ce <att_handle_read_rsp>:
    58ce:	f7ff bfef 	b.w	58b0 <att_confirm>

000058d2 <att_handle_read_type_rsp>:
    58d2:	f7ff bfed 	b.w	58b0 <att_confirm>

000058d6 <att_handle_find_type_rsp>:
    58d6:	f7ff bfeb 	b.w	58b0 <att_confirm>

000058da <att_handle_find_info_rsp>:
    58da:	f7ff bfe9 	b.w	58b0 <att_confirm>

000058de <att_mtu_rsp>:
{
    58de:	b410      	push	{r4}
    58e0:	460a      	mov	r2, r1
	if (!att) {
    58e2:	4603      	mov	r3, r0
    58e4:	b180      	cbz	r0, 5908 <att_mtu_rsp+0x2a>
	rsp = (void *)buf->data;
    58e6:	6889      	ldr	r1, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    58e8:	880c      	ldrh	r4, [r1, #0]
    58ea:	2c16      	cmp	r4, #22
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    58ec:	bf83      	ittte	hi
    58ee:	2417      	movhi	r4, #23
    58f0:	875c      	strhhi	r4, [r3, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    58f2:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    58f6:	2200      	movls	r2, #0
    58f8:	bf99      	ittee	ls
    58fa:	2304      	movls	r3, #4
    58fc:	4611      	movls	r1, r2
	return att_handle_rsp(att, rsp, buf->len, 0);
    58fe:	2300      	movhi	r3, #0
    5900:	8992      	ldrhhi	r2, [r2, #12]
}
    5902:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    5904:	f7ff bf82 	b.w	580c <att_handle_rsp>
}
    5908:	bc10      	pop	{r4}
    590a:	4770      	bx	lr

0000590c <att_error_rsp>:
{
    590c:	b430      	push	{r4, r5}
	if (!att->req) {
    590e:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
	rsp = (void *)buf->data;
    5912:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    5914:	b16a      	cbz	r2, 5932 <att_error_rsp+0x26>
	if (att->req->buf) {
    5916:	6913      	ldr	r3, [r2, #16]
    5918:	b12b      	cbz	r3, 5926 <att_error_rsp+0x1a>
	buf->data = buf->__buf + state->offset;
    591a:	8995      	ldrh	r5, [r2, #12]
    591c:	6919      	ldr	r1, [r3, #16]
	buf->len = state->len;
    591e:	89d2      	ldrh	r2, [r2, #14]
    5920:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    5922:	4429      	add	r1, r5
    5924:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    5926:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    5928:	2200      	movs	r2, #0
    592a:	4611      	mov	r1, r2
}
    592c:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    592e:	f7ff bf6d 	b.w	580c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    5932:	230e      	movs	r3, #14
    5934:	e7f8      	b.n	5928 <att_error_rsp+0x1c>

00005936 <att_reset>:
{
    5936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5938:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    593c:	4605      	mov	r5, r0
    593e:	f3bf 8f5b 	dmb	ish
    5942:	e853 2f00 	ldrex	r2, [r3]
    5946:	f042 0204 	orr.w	r2, r2, #4
    594a:	e843 2100 	strex	r1, r2, [r3]
    594e:	2900      	cmp	r1, #0
    5950:	d1f7      	bne.n	5942 <att_reset+0xc>
    5952:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    5956:	f105 04d8 	add.w	r4, r5, #216	; 0xd8
    595a:	4620      	mov	r0, r4
    595c:	f00e fb9c 	bl	14098 <_impl_k_sem_give>
    5960:	4620      	mov	r0, r4
    5962:	f00e fb99 	bl	14098 <_impl_k_sem_give>
    5966:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    596a:	b98c      	cbnz	r4, 5990 <att_reset+0x5a>
	if (!att->req) {
    596c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	list->head = NULL;
    5970:	2200      	movs	r2, #0
    5972:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
	list->tail = NULL;
    5976:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
    597a:	b90b      	cbnz	r3, 5980 <att_reset+0x4a>
}
    597c:	b003      	add	sp, #12
    597e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    5980:	230e      	movs	r3, #14
    5982:	4611      	mov	r1, r2
    5984:	4628      	mov	r0, r5
}
    5986:	b003      	add	sp, #12
    5988:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    598c:	f7ff bf3e 	b.w	580c <att_handle_rsp>
	return node->next;
    5990:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    5992:	6867      	ldr	r7, [r4, #4]
    5994:	b12f      	cbz	r7, 59a2 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    5996:	2300      	movs	r3, #0
    5998:	9400      	str	r4, [sp, #0]
    599a:	461a      	mov	r2, r3
    599c:	210e      	movs	r1, #14
    599e:	4618      	mov	r0, r3
    59a0:	47b8      	blx	r7
		att_req_destroy(req);
    59a2:	4620      	mov	r0, r4
    59a4:	f7ff fc3e 	bl	5224 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    59a8:	2e00      	cmp	r6, #0
    59aa:	d0df      	beq.n	596c <att_reset+0x36>
    59ac:	4634      	mov	r4, r6
    59ae:	6836      	ldr	r6, [r6, #0]
    59b0:	e7ef      	b.n	5992 <att_reset+0x5c>

000059b2 <bt_att_disconnected>:
{
    59b2:	b510      	push	{r4, lr}
    59b4:	4604      	mov	r4, r0
	att_reset(att);
    59b6:	f7ff ffbe 	bl	5936 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    59ba:	6820      	ldr	r0, [r4, #0]
}
    59bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_disconnected(ch->chan.conn);
    59c0:	f001 b9a0 	b.w	6d04 <bt_gatt_disconnected>

000059c4 <att_timeout>:
{
    59c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("ATT Timeout");
    59c6:	4b0c      	ldr	r3, [pc, #48]	; (59f8 <att_timeout+0x34>)
    59c8:	9301      	str	r3, [sp, #4]
    59ca:	9300      	str	r3, [sp, #0]
    59cc:	4b0b      	ldr	r3, [pc, #44]	; (59fc <att_timeout+0x38>)
    59ce:	4a0c      	ldr	r2, [pc, #48]	; (5a00 <att_timeout+0x3c>)
    59d0:	490c      	ldr	r1, [pc, #48]	; (5a04 <att_timeout+0x40>)
    59d2:	681d      	ldr	r5, [r3, #0]
    59d4:	4b0c      	ldr	r3, [pc, #48]	; (5a08 <att_timeout+0x44>)
{
    59d6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    59d8:	480c      	ldr	r0, [pc, #48]	; (5a0c <att_timeout+0x48>)
    59da:	47a8      	blx	r5
	att_reset(att);
    59dc:	f1a4 00b0 	sub.w	r0, r4, #176	; 0xb0
    59e0:	f7ff ffa9 	bl	5936 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    59e4:	f854 0cb0 	ldr.w	r0, [r4, #-176]
    59e8:	f001 f98c 	bl	6d04 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    59ec:	2300      	movs	r3, #0
    59ee:	f844 3cb0 	str.w	r3, [r4, #-176]
}
    59f2:	b003      	add	sp, #12
    59f4:	bd30      	pop	{r4, r5, pc}
    59f6:	bf00      	nop
    59f8:	00014c55 	.word	0x00014c55
    59fc:	20003aa4 	.word	0x20003aa4
    5a00:	000159c3 	.word	0x000159c3
    5a04:	00015a12 	.word	0x00015a12
    5a08:	000164b8 	.word	0x000164b8
    5a0c:	000165b8 	.word	0x000165b8

00005a10 <read_cb>:
{
    5a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5a14:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5a16:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    5a18:	f8d1 9000 	ldr.w	r9, [r1]
{
    5a1c:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5a1e:	3008      	adds	r0, #8
    5a20:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    5a22:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5a26:	f00d fa71 	bl	12f0c <net_buf_simple_add>
	data->err = 0x00;
    5a2a:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5a2c:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    5a2e:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5a30:	2115      	movs	r1, #21
    5a32:	4630      	mov	r0, r6
    5a34:	f7ff fd2c 	bl	5490 <check_perm.isra.5>
    5a38:	4605      	mov	r5, r0
    5a3a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5a3c:	bb08      	cbnz	r0, 5a82 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5a3e:	68a1      	ldr	r1, [r4, #8]
    5a40:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    5a44:	898a      	ldrh	r2, [r1, #12]
    5a46:	6889      	ldr	r1, [r1, #8]
    5a48:	88a0      	ldrh	r0, [r4, #4]
    5a4a:	9000      	str	r0, [sp, #0]
    5a4c:	1a9b      	subs	r3, r3, r2
    5a4e:	6877      	ldr	r7, [r6, #4]
    5a50:	440a      	add	r2, r1
    5a52:	b29b      	uxth	r3, r3
    5a54:	4631      	mov	r1, r6
    5a56:	4640      	mov	r0, r8
    5a58:	47b8      	blx	r7
	if (read < 0) {
    5a5a:	1e01      	subs	r1, r0, #0
    5a5c:	da0b      	bge.n	5a76 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    5a5e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    5a62:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    5a64:	bf9a      	itte	ls
    5a66:	4249      	negls	r1, r1
    5a68:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5a6a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5a6c:	7421      	strb	r1, [r4, #16]
}
    5a6e:	4628      	mov	r0, r5
    5a70:	b003      	add	sp, #12
    5a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5a76:	68a0      	ldr	r0, [r4, #8]
    5a78:	3008      	adds	r0, #8
    5a7a:	f00d fa47 	bl	12f0c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5a7e:	2501      	movs	r5, #1
    5a80:	e7f5      	b.n	5a6e <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    5a82:	463d      	mov	r5, r7
    5a84:	e7f3      	b.n	5a6e <read_cb+0x5e>
	...

00005a88 <bt_att_create_pdu>:
{
    5a88:	b530      	push	{r4, r5, lr}
    5a8a:	b085      	sub	sp, #20
    5a8c:	460d      	mov	r5, r1
    5a8e:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5a90:	f7ff fdf8 	bl	5684 <att_chan_get>
	if (!att) {
    5a94:	b1f8      	cbz	r0, 5ad6 <bt_att_create_pdu+0x4e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    5a96:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    5a9a:	3401      	adds	r4, #1
    5a9c:	428c      	cmp	r4, r1
    5a9e:	d90f      	bls.n	5ac0 <bt_att_create_pdu+0x38>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5aa0:	4b0e      	ldr	r3, [pc, #56]	; (5adc <bt_att_create_pdu+0x54>)
    5aa2:	9303      	str	r3, [sp, #12]
    5aa4:	9300      	str	r3, [sp, #0]
    5aa6:	4b0e      	ldr	r3, [pc, #56]	; (5ae0 <bt_att_create_pdu+0x58>)
    5aa8:	9101      	str	r1, [sp, #4]
    5aaa:	9402      	str	r4, [sp, #8]
    5aac:	681c      	ldr	r4, [r3, #0]
    5aae:	4a0d      	ldr	r2, [pc, #52]	; (5ae4 <bt_att_create_pdu+0x5c>)
    5ab0:	4b0d      	ldr	r3, [pc, #52]	; (5ae8 <bt_att_create_pdu+0x60>)
    5ab2:	490e      	ldr	r1, [pc, #56]	; (5aec <bt_att_create_pdu+0x64>)
    5ab4:	480e      	ldr	r0, [pc, #56]	; (5af0 <bt_att_create_pdu+0x68>)
    5ab6:	47a0      	blx	r4
		return NULL;
    5ab8:	2400      	movs	r4, #0
}
    5aba:	4620      	mov	r0, r4
    5abc:	b005      	add	sp, #20
    5abe:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    5ac0:	2100      	movs	r1, #0
    5ac2:	4608      	mov	r0, r1
    5ac4:	f7ff f9d5 	bl	4e72 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ac8:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5aca:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5acc:	3008      	adds	r0, #8
    5ace:	f00d fa1d 	bl	12f0c <net_buf_simple_add>
	hdr->code = op;
    5ad2:	7005      	strb	r5, [r0, #0]
	return buf;
    5ad4:	e7f1      	b.n	5aba <bt_att_create_pdu+0x32>
		return NULL;
    5ad6:	4604      	mov	r4, r0
    5ad8:	e7ef      	b.n	5aba <bt_att_create_pdu+0x32>
    5ada:	bf00      	nop
    5adc:	00014c55 	.word	0x00014c55
    5ae0:	20003aa4 	.word	0x20003aa4
    5ae4:	00015a0b 	.word	0x00015a0b
    5ae8:	000164a6 	.word	0x000164a6
    5aec:	00015a12 	.word	0x00015a12
    5af0:	00016609 	.word	0x00016609

00005af4 <att_indicate>:
{
    5af4:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5af6:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5af8:	f101 0008 	add.w	r0, r1, #8
    5afc:	f00d fa35 	bl	12f6a <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5b00:	2200      	movs	r2, #0
    5b02:	211e      	movs	r1, #30
    5b04:	4620      	mov	r0, r4
    5b06:	f7ff ffbf 	bl	5a88 <bt_att_create_pdu>
	if (!buf) {
    5b0a:	4602      	mov	r2, r0
    5b0c:	b120      	cbz	r0, 5b18 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5b0e:	4b03      	ldr	r3, [pc, #12]	; (5b1c <att_indicate+0x28>)
    5b10:	2104      	movs	r1, #4
    5b12:	4620      	mov	r0, r4
    5b14:	f7ff f9b0 	bl	4e78 <bt_l2cap_send_cb>
}
    5b18:	2000      	movs	r0, #0
    5b1a:	bd10      	pop	{r4, pc}
    5b1c:	00005657 	.word	0x00005657

00005b20 <att_mtu_req>:
{
    5b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5b24:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5b26:	881b      	ldrh	r3, [r3, #0]
    5b28:	2b16      	cmp	r3, #22
{
    5b2a:	4605      	mov	r5, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5b2c:	d91c      	bls.n	5b68 <att_mtu_req+0x48>
	struct bt_conn *conn = att->chan.chan.conn;
    5b2e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5b32:	2202      	movs	r2, #2
    5b34:	2103      	movs	r1, #3
    5b36:	4640      	mov	r0, r8
    5b38:	f7ff ffa6 	bl	5a88 <bt_att_create_pdu>
	if (!pdu) {
    5b3c:	4607      	mov	r7, r0
    5b3e:	b1b0      	cbz	r0, 5b6e <att_mtu_req+0x4e>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    5b40:	2102      	movs	r1, #2
    5b42:	3008      	adds	r0, #8
    5b44:	f00d f9e2 	bl	12f0c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5b48:	2617      	movs	r6, #23
    5b4a:	2400      	movs	r4, #0
    5b4c:	7006      	strb	r6, [r0, #0]
    5b4e:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5b50:	4b08      	ldr	r3, [pc, #32]	; (5b74 <att_mtu_req+0x54>)
    5b52:	4640      	mov	r0, r8
    5b54:	463a      	mov	r2, r7
    5b56:	2104      	movs	r1, #4
    5b58:	f7ff f98e 	bl	4e78 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5b5c:	876e      	strh	r6, [r5, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5b5e:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    5b62:	4620      	mov	r0, r4
    5b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5b68:	2004      	movs	r0, #4
    5b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    5b6e:	200e      	movs	r0, #14
}
    5b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b74:	00005629 	.word	0x00005629

00005b78 <send_err_rsp.part.11>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b7c:	4688      	mov	r8, r1
    5b7e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5b80:	2101      	movs	r1, #1
    5b82:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5b84:	4605      	mov	r5, r0
    5b86:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5b88:	f7ff ff7e 	bl	5a88 <bt_att_create_pdu>
	if (!buf) {
    5b8c:	4604      	mov	r4, r0
    5b8e:	b180      	cbz	r0, 5bb2 <send_err_rsp.part.11+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5b90:	2104      	movs	r1, #4
    5b92:	3008      	adds	r0, #8
    5b94:	f00d f9ba 	bl	12f0c <net_buf_simple_add>
	rsp->request = req;
    5b98:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5b9c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5b9e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5ba2:	4622      	mov	r2, r4
    5ba4:	4628      	mov	r0, r5
    5ba6:	4b04      	ldr	r3, [pc, #16]	; (5bb8 <send_err_rsp.part.11+0x40>)
    5ba8:	2104      	movs	r1, #4
}
    5baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5bae:	f7ff b963 	b.w	4e78 <bt_l2cap_send_cb>
    5bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bb6:	bf00      	nop
    5bb8:	00005629 	.word	0x00005629

00005bbc <bt_att_recv>:
{
    5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5bbe:	898b      	ldrh	r3, [r1, #12]
{
    5bc0:	b085      	sub	sp, #20
    5bc2:	4604      	mov	r4, r0
    5bc4:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    5bc6:	b95b      	cbnz	r3, 5be0 <bt_att_recv+0x24>
		BT_ERR("Too small ATT PDU received");
    5bc8:	4b4f      	ldr	r3, [pc, #316]	; (5d08 <bt_att_recv+0x14c>)
    5bca:	9301      	str	r3, [sp, #4]
    5bcc:	9300      	str	r3, [sp, #0]
    5bce:	4b4f      	ldr	r3, [pc, #316]	; (5d0c <bt_att_recv+0x150>)
    5bd0:	4a4f      	ldr	r2, [pc, #316]	; (5d10 <bt_att_recv+0x154>)
    5bd2:	681c      	ldr	r4, [r3, #0]
    5bd4:	494f      	ldr	r1, [pc, #316]	; (5d14 <bt_att_recv+0x158>)
    5bd6:	4b50      	ldr	r3, [pc, #320]	; (5d18 <bt_att_recv+0x15c>)
    5bd8:	4850      	ldr	r0, [pc, #320]	; (5d1c <bt_att_recv+0x160>)
			BT_WARN("Ignoring unexpected request");
    5bda:	47a0      	blx	r4
}
    5bdc:	b005      	add	sp, #20
    5bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    5be0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5be2:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5be4:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    5be8:	f00d f9af 	bl	12f4a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    5bec:	4a4c      	ldr	r2, [pc, #304]	; (5d20 <bt_att_recv+0x164>)
    5bee:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5bf0:	2300      	movs	r3, #0
    5bf2:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5bf4:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    5bf8:	4286      	cmp	r6, r0
    5bfa:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    5bfe:	d11e      	bne.n	5c3e <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    5c00:	4472      	add	r2, lr
    5c02:	7896      	ldrb	r6, [r2, #2]
    5c04:	2e01      	cmp	r6, #1
    5c06:	d139      	bne.n	5c7c <bt_att_recv+0xc0>
    5c08:	f3bf 8f5b 	dmb	ish
    5c0c:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5c10:	e852 3f00 	ldrex	r3, [r2]
    5c14:	f043 0001 	orr.w	r0, r3, #1
    5c18:	e842 0c00 	strex	ip, r0, [r2]
    5c1c:	f1bc 0f00 	cmp.w	ip, #0
    5c20:	d1f6      	bne.n	5c10 <bt_att_recv+0x54>
    5c22:	f3bf 8f5b 	dmb	ish
    5c26:	07da      	lsls	r2, r3, #31
    5c28:	d545      	bpl.n	5cb6 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected request");
    5c2a:	4b37      	ldr	r3, [pc, #220]	; (5d08 <bt_att_recv+0x14c>)
    5c2c:	9301      	str	r3, [sp, #4]
    5c2e:	9300      	str	r3, [sp, #0]
    5c30:	4b36      	ldr	r3, [pc, #216]	; (5d0c <bt_att_recv+0x150>)
    5c32:	4a3c      	ldr	r2, [pc, #240]	; (5d24 <bt_att_recv+0x168>)
    5c34:	681c      	ldr	r4, [r3, #0]
    5c36:	4937      	ldr	r1, [pc, #220]	; (5d14 <bt_att_recv+0x158>)
    5c38:	4b37      	ldr	r3, [pc, #220]	; (5d18 <bt_att_recv+0x15c>)
    5c3a:	483b      	ldr	r0, [pc, #236]	; (5d28 <bt_att_recv+0x16c>)
    5c3c:	e7cd      	b.n	5bda <bt_att_recv+0x1e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5c3e:	3301      	adds	r3, #1
    5c40:	2b1b      	cmp	r3, #27
    5c42:	d1d7      	bne.n	5bf4 <bt_att_recv+0x38>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5c44:	4b30      	ldr	r3, [pc, #192]	; (5d08 <bt_att_recv+0x14c>)
    5c46:	9302      	str	r3, [sp, #8]
    5c48:	9300      	str	r3, [sp, #0]
    5c4a:	4b30      	ldr	r3, [pc, #192]	; (5d0c <bt_att_recv+0x150>)
    5c4c:	9001      	str	r0, [sp, #4]
    5c4e:	681e      	ldr	r6, [r3, #0]
    5c50:	4836      	ldr	r0, [pc, #216]	; (5d2c <bt_att_recv+0x170>)
    5c52:	4b31      	ldr	r3, [pc, #196]	; (5d18 <bt_att_recv+0x15c>)
    5c54:	4a33      	ldr	r2, [pc, #204]	; (5d24 <bt_att_recv+0x168>)
    5c56:	492f      	ldr	r1, [pc, #188]	; (5d14 <bt_att_recv+0x158>)
    5c58:	47b0      	blx	r6
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5c5a:	782d      	ldrb	r5, [r5, #0]
    5c5c:	4628      	mov	r0, r5
    5c5e:	f7ff fa95 	bl	518c <att_op_get_type>
    5c62:	2800      	cmp	r0, #0
    5c64:	d0ba      	beq.n	5bdc <bt_att_recv+0x20>
	if (!req) {
    5c66:	2d00      	cmp	r5, #0
    5c68:	d0b8      	beq.n	5bdc <bt_att_recv+0x20>
    5c6a:	2306      	movs	r3, #6
    5c6c:	2200      	movs	r2, #0
    5c6e:	4629      	mov	r1, r5
    5c70:	6820      	ldr	r0, [r4, #0]
}
    5c72:	b005      	add	sp, #20
    5c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5c78:	f7ff bf7e 	b.w	5b78 <send_err_rsp.part.11>
		} else if (handler->type == ATT_INDICATION &&
    5c7c:	2e05      	cmp	r6, #5
    5c7e:	d11a      	bne.n	5cb6 <bt_att_recv+0xfa>
    5c80:	f3bf 8f5b 	dmb	ish
    5c84:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    5c88:	e852 3f00 	ldrex	r3, [r2]
    5c8c:	f043 0002 	orr.w	r0, r3, #2
    5c90:	e842 0c00 	strex	ip, r0, [r2]
    5c94:	f1bc 0f00 	cmp.w	ip, #0
    5c98:	d1f6      	bne.n	5c88 <bt_att_recv+0xcc>
    5c9a:	f3bf 8f5b 	dmb	ish
    5c9e:	079b      	lsls	r3, r3, #30
    5ca0:	d509      	bpl.n	5cb6 <bt_att_recv+0xfa>
			BT_WARN("Ignoring unexpected indication");
    5ca2:	4b19      	ldr	r3, [pc, #100]	; (5d08 <bt_att_recv+0x14c>)
    5ca4:	9301      	str	r3, [sp, #4]
    5ca6:	9300      	str	r3, [sp, #0]
    5ca8:	4b18      	ldr	r3, [pc, #96]	; (5d0c <bt_att_recv+0x150>)
    5caa:	4a1e      	ldr	r2, [pc, #120]	; (5d24 <bt_att_recv+0x168>)
    5cac:	681c      	ldr	r4, [r3, #0]
    5cae:	4919      	ldr	r1, [pc, #100]	; (5d14 <bt_att_recv+0x158>)
    5cb0:	4b19      	ldr	r3, [pc, #100]	; (5d18 <bt_att_recv+0x15c>)
    5cb2:	481f      	ldr	r0, [pc, #124]	; (5d30 <bt_att_recv+0x174>)
    5cb4:	e791      	b.n	5bda <bt_att_recv+0x1e>
	if (buf->len < handler->expect_len) {
    5cb6:	eb01 030e 	add.w	r3, r1, lr
    5cba:	89ba      	ldrh	r2, [r7, #12]
    5cbc:	7859      	ldrb	r1, [r3, #1]
    5cbe:	4291      	cmp	r1, r2
    5cc0:	d911      	bls.n	5ce6 <bt_att_recv+0x12a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5cc2:	4b11      	ldr	r3, [pc, #68]	; (5d08 <bt_att_recv+0x14c>)
    5cc4:	9303      	str	r3, [sp, #12]
    5cc6:	7829      	ldrb	r1, [r5, #0]
    5cc8:	9300      	str	r3, [sp, #0]
    5cca:	4b10      	ldr	r3, [pc, #64]	; (5d0c <bt_att_recv+0x150>)
    5ccc:	9102      	str	r1, [sp, #8]
    5cce:	9201      	str	r2, [sp, #4]
    5cd0:	681f      	ldr	r7, [r3, #0]
    5cd2:	4a0f      	ldr	r2, [pc, #60]	; (5d10 <bt_att_recv+0x154>)
    5cd4:	4b10      	ldr	r3, [pc, #64]	; (5d18 <bt_att_recv+0x15c>)
    5cd6:	490f      	ldr	r1, [pc, #60]	; (5d14 <bt_att_recv+0x158>)
    5cd8:	4816      	ldr	r0, [pc, #88]	; (5d34 <bt_att_recv+0x178>)
    5cda:	47b8      	blx	r7
	if (handler->type == ATT_REQUEST && err) {
    5cdc:	2e01      	cmp	r6, #1
    5cde:	f47f af7d 	bne.w	5bdc <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    5ce2:	2304      	movs	r3, #4
    5ce4:	e00a      	b.n	5cfc <bt_att_recv+0x140>
		err = handler->func(att, buf);
    5ce6:	685b      	ldr	r3, [r3, #4]
    5ce8:	4639      	mov	r1, r7
    5cea:	4620      	mov	r0, r4
    5cec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5cee:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    5cf0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5cf2:	f47f af73 	bne.w	5bdc <bt_att_recv+0x20>
    5cf6:	2800      	cmp	r0, #0
    5cf8:	f43f af70 	beq.w	5bdc <bt_att_recv+0x20>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5cfc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    5cfe:	2900      	cmp	r1, #0
    5d00:	f43f af6c 	beq.w	5bdc <bt_att_recv+0x20>
    5d04:	2200      	movs	r2, #0
    5d06:	e7b3      	b.n	5c70 <bt_att_recv+0xb4>
    5d08:	00014c55 	.word	0x00014c55
    5d0c:	20003aa4 	.word	0x20003aa4
    5d10:	000159c3 	.word	0x000159c3
    5d14:	00015a12 	.word	0x00015a12
    5d18:	0001648d 	.word	0x0001648d
    5d1c:	0001663e 	.word	0x0001663e
    5d20:	0001671c 	.word	0x0001671c
    5d24:	00015a0b 	.word	0x00015a0b
    5d28:	00016669 	.word	0x00016669
    5d2c:	000166f3 	.word	0x000166f3
    5d30:	00016695 	.word	0x00016695
    5d34:	000166c4 	.word	0x000166c4

00005d38 <att_read_group_req>:
{
    5d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5d3c:	898b      	ldrh	r3, [r1, #12]
    5d3e:	2b06      	cmp	r3, #6
{
    5d40:	b08d      	sub	sp, #52	; 0x34
    5d42:	4680      	mov	r8, r0
    5d44:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5d46:	d001      	beq.n	5d4c <att_read_group_req+0x14>
    5d48:	2b14      	cmp	r3, #20
    5d4a:	d168      	bne.n	5e1e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    5d4c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    5d4e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5d50:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5d54:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5d58:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5d5a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5d5c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    5d5e:	f00d f8f4 	bl	12f4a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5d62:	4621      	mov	r1, r4
    5d64:	4638      	mov	r0, r7
    5d66:	f7ff fc11 	bl	558c <uuid_create>
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d059      	beq.n	5e22 <att_read_group_req+0xea>
	if (!start || !end) {
    5d6e:	2d00      	cmp	r5, #0
    5d70:	d05a      	beq.n	5e28 <att_read_group_req+0xf0>
    5d72:	2400      	movs	r4, #0
    5d74:	2e00      	cmp	r6, #0
    5d76:	d056      	beq.n	5e26 <att_read_group_req+0xee>
	if (start > end) {
    5d78:	42b5      	cmp	r5, r6
    5d7a:	d855      	bhi.n	5e28 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5d7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5d80:	4669      	mov	r1, sp
    5d82:	4638      	mov	r0, r7
    5d84:	f88d 4000 	strb.w	r4, [sp]
    5d88:	f8ad 3002 	strh.w	r3, [sp, #2]
    5d8c:	f7fc f8c6 	bl	1f1c <bt_uuid_cmp>
    5d90:	bb38      	cbnz	r0, 5de2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5d92:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5d96:	2214      	movs	r2, #20
    5d98:	2100      	movs	r1, #0
    5d9a:	a807      	add	r0, sp, #28
    5d9c:	f7fb ff6c 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5da0:	2201      	movs	r2, #1
    5da2:	2111      	movs	r1, #17
    5da4:	4648      	mov	r0, r9
    5da6:	f7ff fe6f 	bl	5a88 <bt_att_create_pdu>
    5daa:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5dac:	2800      	cmp	r0, #0
    5dae:	d038      	beq.n	5e22 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5db0:	2101      	movs	r1, #1
    5db2:	3008      	adds	r0, #8
	data.uuid = uuid;
    5db4:	9708      	str	r7, [sp, #32]
	data.att = att;
    5db6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5dba:	f00d f8a7 	bl	12f0c <net_buf_simple_add>
	data.rsp->len = 0;
    5dbe:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5dc0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5dc2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5dc4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5dc6:	4a1c      	ldr	r2, [pc, #112]	; (5e38 <att_read_group_req+0x100>)
	data.group = NULL;
    5dc8:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5dca:	4631      	mov	r1, r6
    5dcc:	4628      	mov	r0, r5
    5dce:	f000 fea3 	bl	6b18 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5dd4:	781c      	ldrb	r4, [r3, #0]
    5dd6:	b9d4      	cbnz	r4, 5e0e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    5dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
    5dda:	f00d f85f 	bl	12e9c <net_buf_unref>
    5dde:	230a      	movs	r3, #10
    5de0:	e00c      	b.n	5dfc <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5de2:	f642 0301 	movw	r3, #10241	; 0x2801
    5de6:	a901      	add	r1, sp, #4
    5de8:	4638      	mov	r0, r7
    5dea:	f88d 4004 	strb.w	r4, [sp, #4]
    5dee:	f8ad 3006 	strh.w	r3, [sp, #6]
    5df2:	f7fc f893 	bl	1f1c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5df6:	2800      	cmp	r0, #0
    5df8:	d0cb      	beq.n	5d92 <att_read_group_req+0x5a>
    5dfa:	2310      	movs	r3, #16
    5dfc:	462a      	mov	r2, r5
    5dfe:	2110      	movs	r1, #16
    5e00:	4648      	mov	r0, r9
    5e02:	f7ff feb9 	bl	5b78 <send_err_rsp.part.11>
}
    5e06:	4620      	mov	r0, r4
    5e08:	b00d      	add	sp, #52	; 0x34
    5e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e0e:	4b0b      	ldr	r3, [pc, #44]	; (5e3c <att_read_group_req+0x104>)
    5e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e12:	2104      	movs	r1, #4
    5e14:	4648      	mov	r0, r9
    5e16:	f7ff f82f 	bl	4e78 <bt_l2cap_send_cb>
		return 0;
    5e1a:	2400      	movs	r4, #0
    5e1c:	e7f3      	b.n	5e06 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    5e1e:	2404      	movs	r4, #4
    5e20:	e7f1      	b.n	5e06 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    5e22:	240e      	movs	r4, #14
    5e24:	e7ef      	b.n	5e06 <att_read_group_req+0xce>
			*err = 0;
    5e26:	4635      	mov	r5, r6
    5e28:	2301      	movs	r3, #1
    5e2a:	462a      	mov	r2, r5
    5e2c:	2110      	movs	r1, #16
    5e2e:	4648      	mov	r0, r9
    5e30:	f7ff fea2 	bl	5b78 <send_err_rsp.part.11>
    5e34:	e7f1      	b.n	5e1a <att_read_group_req+0xe2>
    5e36:	bf00      	nop
    5e38:	00005255 	.word	0x00005255
    5e3c:	00005629 	.word	0x00005629

00005e40 <att_read_mult_req>:
{
    5e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5e44:	6804      	ldr	r4, [r0, #0]
{
    5e46:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5e48:	2214      	movs	r2, #20
{
    5e4a:	4606      	mov	r6, r0
    5e4c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    5e4e:	a801      	add	r0, sp, #4
    5e50:	2100      	movs	r1, #0
    5e52:	f7fb ff11 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5e56:	2200      	movs	r2, #0
    5e58:	210f      	movs	r1, #15
    5e5a:	4620      	mov	r0, r4
    5e5c:	f7ff fe14 	bl	5a88 <bt_att_create_pdu>
    5e60:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5e62:	b368      	cbz	r0, 5ec0 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5e64:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5ec8 <att_read_mult_req+0x88>
	data.att = att;
    5e68:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    5e6a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5e6e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5e72:	89ab      	ldrh	r3, [r5, #12]
    5e74:	2b01      	cmp	r3, #1
    5e76:	d806      	bhi.n	5e86 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5e78:	4b12      	ldr	r3, [pc, #72]	; (5ec4 <att_read_mult_req+0x84>)
    5e7a:	9a03      	ldr	r2, [sp, #12]
    5e7c:	2104      	movs	r1, #4
    5e7e:	4620      	mov	r0, r4
    5e80:	f7fe fffa 	bl	4e78 <bt_l2cap_send_cb>
    5e84:	e018      	b.n	5eb8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5e86:	4638      	mov	r0, r7
    5e88:	f00d f86f 	bl	12f6a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5e8c:	ab01      	add	r3, sp, #4
    5e8e:	464a      	mov	r2, r9
    5e90:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5e92:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5e94:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5e98:	f000 fe3e 	bl	6b18 <bt_gatt_foreach_attr>
		if (data.err) {
    5e9c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d0e6      	beq.n	5e72 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5ea4:	9803      	ldr	r0, [sp, #12]
    5ea6:	f00c fff9 	bl	12e9c <net_buf_unref>
    5eaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5eae:	4632      	mov	r2, r6
    5eb0:	210e      	movs	r1, #14
    5eb2:	4620      	mov	r0, r4
    5eb4:	f7ff fe60 	bl	5b78 <send_err_rsp.part.11>
	return 0;
    5eb8:	2000      	movs	r0, #0
}
    5eba:	b007      	add	sp, #28
    5ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5ec0:	200e      	movs	r0, #14
    5ec2:	e7fa      	b.n	5eba <att_read_mult_req+0x7a>
    5ec4:	00005629 	.word	0x00005629
    5ec8:	00005a11 	.word	0x00005a11

00005ecc <att_read_rsp>:
{
    5ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ed0:	4607      	mov	r7, r0
    5ed2:	b086      	sub	sp, #24
    5ed4:	460c      	mov	r4, r1
    5ed6:	4690      	mov	r8, r2
	if (!handle) {
    5ed8:	461d      	mov	r5, r3
    5eda:	b3a3      	cbz	r3, 5f46 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    5edc:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    5ede:	2214      	movs	r2, #20
    5ee0:	2100      	movs	r1, #0
    5ee2:	a801      	add	r0, sp, #4
    5ee4:	f7fb fec8 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5ee8:	2200      	movs	r2, #0
    5eea:	4641      	mov	r1, r8
    5eec:	4630      	mov	r0, r6
    5eee:	f7ff fdcb 	bl	5a88 <bt_att_create_pdu>
    5ef2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5ef4:	b348      	cbz	r0, 5f4a <att_read_rsp+0x7e>
	data.offset = offset;
    5ef6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5efa:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5efe:	2301      	movs	r3, #1
    5f00:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5f04:	4a12      	ldr	r2, [pc, #72]	; (5f50 <att_read_rsp+0x84>)
	data.att = att;
    5f06:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5f08:	ab01      	add	r3, sp, #4
    5f0a:	4629      	mov	r1, r5
    5f0c:	4628      	mov	r0, r5
    5f0e:	f000 fe03 	bl	6b18 <bt_gatt_foreach_attr>
	if (data.err) {
    5f12:	f89d 7014 	ldrb.w	r7, [sp, #20]
    5f16:	b17f      	cbz	r7, 5f38 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    5f18:	9803      	ldr	r0, [sp, #12]
    5f1a:	f00c ffbf 	bl	12e9c <net_buf_unref>
	if (!req) {
    5f1e:	b13c      	cbz	r4, 5f30 <att_read_rsp+0x64>
    5f20:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5f24:	462a      	mov	r2, r5
    5f26:	4621      	mov	r1, r4
    5f28:	4630      	mov	r0, r6
    5f2a:	f7ff fe25 	bl	5b78 <send_err_rsp.part.11>
		return 0;
    5f2e:	2400      	movs	r4, #0
}
    5f30:	4620      	mov	r0, r4
    5f32:	b006      	add	sp, #24
    5f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5f38:	4b06      	ldr	r3, [pc, #24]	; (5f54 <att_read_rsp+0x88>)
    5f3a:	9a03      	ldr	r2, [sp, #12]
    5f3c:	2104      	movs	r1, #4
    5f3e:	4630      	mov	r0, r6
    5f40:	f7fe ff9a 	bl	4e78 <bt_l2cap_send_cb>
    5f44:	e7f3      	b.n	5f2e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5f46:	2401      	movs	r4, #1
    5f48:	e7f2      	b.n	5f30 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    5f4a:	240e      	movs	r4, #14
    5f4c:	e7f0      	b.n	5f30 <att_read_rsp+0x64>
    5f4e:	bf00      	nop
    5f50:	00005a11 	.word	0x00005a11
    5f54:	00005629 	.word	0x00005629

00005f58 <att_read_blob_req>:
{
    5f58:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    5f5a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5f5c:	8813      	ldrh	r3, [r2, #0]
    5f5e:	8852      	ldrh	r2, [r2, #2]
    5f60:	9200      	str	r2, [sp, #0]
    5f62:	210c      	movs	r1, #12
    5f64:	220d      	movs	r2, #13
    5f66:	f7ff ffb1 	bl	5ecc <att_read_rsp>
}
    5f6a:	b003      	add	sp, #12
    5f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f70 <att_read_req>:
{
    5f70:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5f72:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5f74:	2200      	movs	r2, #0
    5f76:	881b      	ldrh	r3, [r3, #0]
    5f78:	9200      	str	r2, [sp, #0]
    5f7a:	210a      	movs	r1, #10
    5f7c:	220b      	movs	r2, #11
    5f7e:	f7ff ffa5 	bl	5ecc <att_read_rsp>
}
    5f82:	b003      	add	sp, #12
    5f84:	f85d fb04 	ldr.w	pc, [sp], #4

00005f88 <att_read_type_req>:
{
    5f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f8c:	898b      	ldrh	r3, [r1, #12]
    5f8e:	2b06      	cmp	r3, #6
{
    5f90:	b08d      	sub	sp, #52	; 0x34
    5f92:	4607      	mov	r7, r0
    5f94:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f96:	d001      	beq.n	5f9c <att_read_type_req+0x14>
    5f98:	2b14      	cmp	r3, #20
    5f9a:	d152      	bne.n	6042 <att_read_type_req+0xba>
	req = (void *)buf->data;
    5f9c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    5f9e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5fa0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5fa4:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5fa8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5faa:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    5fac:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5fb0:	f00c ffcb 	bl	12f4a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5fb4:	4631      	mov	r1, r6
    5fb6:	4640      	mov	r0, r8
    5fb8:	f7ff fae8 	bl	558c <uuid_create>
    5fbc:	b198      	cbz	r0, 5fe6 <att_read_type_req+0x5e>
	if (!start || !end) {
    5fbe:	2d00      	cmp	r5, #0
    5fc0:	d042      	beq.n	6048 <att_read_type_req+0xc0>
    5fc2:	2c00      	cmp	r4, #0
    5fc4:	d03f      	beq.n	6046 <att_read_type_req+0xbe>
	if (start > end) {
    5fc6:	42a5      	cmp	r5, r4
    5fc8:	d83e      	bhi.n	6048 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    5fca:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    5fcc:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    5fce:	2100      	movs	r1, #0
    5fd0:	eb0d 0002 	add.w	r0, sp, r2
    5fd4:	f7fb fe50 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5fd8:	2201      	movs	r2, #1
    5fda:	2109      	movs	r1, #9
    5fdc:	4630      	mov	r0, r6
    5fde:	f7ff fd53 	bl	5a88 <bt_att_create_pdu>
    5fe2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5fe4:	b908      	cbnz	r0, 5fea <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    5fe6:	240e      	movs	r4, #14
    5fe8:	e027      	b.n	603a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5fea:	2101      	movs	r1, #1
    5fec:	3008      	adds	r0, #8
	data.att = att;
    5fee:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    5ff0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ff4:	f00c ff8a 	bl	12f0c <net_buf_simple_add>
	data.rsp->len = 0;
    5ff8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5ffa:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ffc:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5ffe:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6000:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6002:	4a14      	ldr	r2, [pc, #80]	; (6054 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6004:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6008:	4628      	mov	r0, r5
    600a:	ab06      	add	r3, sp, #24
    600c:	f000 fd84 	bl	6b18 <bt_gatt_foreach_attr>
	if (data.err) {
    6010:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6014:	b15c      	cbz	r4, 602e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6016:	9808      	ldr	r0, [sp, #32]
    6018:	f00c ff40 	bl	12e9c <net_buf_unref>
    601c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6020:	462a      	mov	r2, r5
    6022:	2108      	movs	r1, #8
    6024:	4630      	mov	r0, r6
    6026:	f7ff fda7 	bl	5b78 <send_err_rsp.part.11>
		return 0;
    602a:	2400      	movs	r4, #0
    602c:	e005      	b.n	603a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    602e:	4b0a      	ldr	r3, [pc, #40]	; (6058 <att_read_type_req+0xd0>)
    6030:	9a08      	ldr	r2, [sp, #32]
    6032:	2104      	movs	r1, #4
    6034:	4630      	mov	r0, r6
    6036:	f7fe ff1f 	bl	4e78 <bt_l2cap_send_cb>
}
    603a:	4620      	mov	r0, r4
    603c:	b00d      	add	sp, #52	; 0x34
    603e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6042:	2404      	movs	r4, #4
    6044:	e7f9      	b.n	603a <att_read_type_req+0xb2>
			*err = 0;
    6046:	4625      	mov	r5, r4
    6048:	2301      	movs	r3, #1
    604a:	462a      	mov	r2, r5
    604c:	2108      	movs	r1, #8
    604e:	4648      	mov	r0, r9
    6050:	e7e9      	b.n	6026 <att_read_type_req+0x9e>
    6052:	bf00      	nop
    6054:	000054d1 	.word	0x000054d1
    6058:	00005629 	.word	0x00005629

0000605c <att_find_type_req>:
{
    605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6060:	f8d0 9000 	ldr.w	r9, [r0]
{
    6064:	4680      	mov	r8, r0
	req = (void *)buf->data;
    6066:	4608      	mov	r0, r1
{
    6068:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    606a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    606e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    6070:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    6072:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6074:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    6076:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    6078:	f00c ff67 	bl	12f4a <net_buf_simple_pull>
    607c:	4682      	mov	sl, r0
	if (!start || !end) {
    607e:	2d00      	cmp	r5, #0
    6080:	d057      	beq.n	6132 <att_find_type_req+0xd6>
    6082:	2400      	movs	r4, #0
    6084:	2f00      	cmp	r7, #0
    6086:	d053      	beq.n	6130 <att_find_type_req+0xd4>
	if (start > end) {
    6088:	42bd      	cmp	r5, r7
    608a:	d852      	bhi.n	6132 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    608c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6090:	a902      	add	r1, sp, #8
    6092:	a801      	add	r0, sp, #4
    6094:	f8ad 6006 	strh.w	r6, [sp, #6]
    6098:	f88d 4004 	strb.w	r4, [sp, #4]
    609c:	f88d 4008 	strb.w	r4, [sp, #8]
    60a0:	f8ad 300a 	strh.w	r3, [sp, #10]
    60a4:	f7fb ff3a 	bl	1f1c <bt_uuid_cmp>
    60a8:	4606      	mov	r6, r0
    60aa:	b148      	cbz	r0, 60c0 <att_find_type_req+0x64>
    60ac:	230a      	movs	r3, #10
    60ae:	462a      	mov	r2, r5
    60b0:	2106      	movs	r1, #6
    60b2:	4648      	mov	r0, r9
    60b4:	f7ff fd60 	bl	5b78 <send_err_rsp.part.11>
}
    60b8:	4620      	mov	r0, r4
    60ba:	b009      	add	sp, #36	; 0x24
    60bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    60c0:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    60c4:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    60c8:	2214      	movs	r2, #20
    60ca:	4631      	mov	r1, r6
    60cc:	a803      	add	r0, sp, #12
    60ce:	f7fb fdd3 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    60d2:	4632      	mov	r2, r6
    60d4:	2107      	movs	r1, #7
    60d6:	4648      	mov	r0, r9
    60d8:	f7ff fcd6 	bl	5a88 <bt_att_create_pdu>
    60dc:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    60de:	b328      	cbz	r0, 612c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    60e0:	230a      	movs	r3, #10
    60e2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    60e6:	4a14      	ldr	r2, [pc, #80]	; (6138 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    60e8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    60ec:	ab03      	add	r3, sp, #12
    60ee:	4639      	mov	r1, r7
    60f0:	4628      	mov	r0, r5
	data.att = att;
    60f2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    60f6:	9605      	str	r6, [sp, #20]
	data.value = value;
    60f8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    60fc:	f000 fd0c 	bl	6b18 <bt_gatt_foreach_attr>
	if (data.err) {
    6100:	f89d 401d 	ldrb.w	r4, [sp, #29]
    6104:	b15c      	cbz	r4, 611e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6106:	9804      	ldr	r0, [sp, #16]
    6108:	f00c fec8 	bl	12e9c <net_buf_unref>
    610c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    6110:	462a      	mov	r2, r5
    6112:	2106      	movs	r1, #6
    6114:	4648      	mov	r0, r9
    6116:	f7ff fd2f 	bl	5b78 <send_err_rsp.part.11>
		return 0;
    611a:	2400      	movs	r4, #0
    611c:	e7cc      	b.n	60b8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    611e:	4b07      	ldr	r3, [pc, #28]	; (613c <att_find_type_req+0xe0>)
    6120:	9a04      	ldr	r2, [sp, #16]
    6122:	2104      	movs	r1, #4
    6124:	4648      	mov	r0, r9
    6126:	f7fe fea7 	bl	4e78 <bt_l2cap_send_cb>
    612a:	e7c5      	b.n	60b8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    612c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    612e:	e7c3      	b.n	60b8 <att_find_type_req+0x5c>
			*err = 0;
    6130:	463d      	mov	r5, r7
    6132:	2301      	movs	r3, #1
    6134:	e7ec      	b.n	6110 <att_find_type_req+0xb4>
    6136:	bf00      	nop
    6138:	000053bd 	.word	0x000053bd
    613c:	00005629 	.word	0x00005629

00006140 <att_find_info_req>:
{
    6140:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6142:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6144:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6146:	881d      	ldrh	r5, [r3, #0]
{
    6148:	b085      	sub	sp, #20
    614a:	4607      	mov	r7, r0
	if (!start || !end) {
    614c:	b375      	cbz	r5, 61ac <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    614e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6150:	b35c      	cbz	r4, 61aa <att_find_info_req+0x6a>
	if (start > end) {
    6152:	42a5      	cmp	r5, r4
    6154:	d82a      	bhi.n	61ac <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6156:	2210      	movs	r2, #16
    6158:	2100      	movs	r1, #0
    615a:	4668      	mov	r0, sp
    615c:	f7fb fd8c 	bl	1c78 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6160:	2200      	movs	r2, #0
    6162:	2105      	movs	r1, #5
    6164:	4630      	mov	r0, r6
    6166:	f7ff fc8f 	bl	5a88 <bt_att_create_pdu>
    616a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    616c:	b910      	cbnz	r0, 6174 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    616e:	200e      	movs	r0, #14
}
    6170:	b005      	add	sp, #20
    6172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6174:	4621      	mov	r1, r4
    6176:	466b      	mov	r3, sp
    6178:	4a0d      	ldr	r2, [pc, #52]	; (61b0 <att_find_info_req+0x70>)
	data.att = att;
    617a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    617c:	4628      	mov	r0, r5
    617e:	f000 fccb 	bl	6b18 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6182:	9c02      	ldr	r4, [sp, #8]
    6184:	b94c      	cbnz	r4, 619a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    6186:	9801      	ldr	r0, [sp, #4]
    6188:	f00c fe88 	bl	12e9c <net_buf_unref>
    618c:	230a      	movs	r3, #10
    618e:	462a      	mov	r2, r5
    6190:	2104      	movs	r1, #4
    6192:	4630      	mov	r0, r6
    6194:	f7ff fcf0 	bl	5b78 <send_err_rsp.part.11>
    6198:	e005      	b.n	61a6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    619a:	4b06      	ldr	r3, [pc, #24]	; (61b4 <att_find_info_req+0x74>)
    619c:	9a01      	ldr	r2, [sp, #4]
    619e:	2104      	movs	r1, #4
    61a0:	4630      	mov	r0, r6
    61a2:	f7fe fe69 	bl	4e78 <bt_l2cap_send_cb>
		return 0;
    61a6:	2000      	movs	r0, #0
    61a8:	e7e2      	b.n	6170 <att_find_info_req+0x30>
			*err = 0;
    61aa:	4625      	mov	r5, r4
    61ac:	2301      	movs	r3, #1
    61ae:	e7ee      	b.n	618e <att_find_info_req+0x4e>
    61b0:	00005323 	.word	0x00005323
    61b4:	00005629 	.word	0x00005629

000061b8 <att_write_rsp.part.12.constprop.17>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    61b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61bc:	b086      	sub	sp, #24
    61be:	4690      	mov	r8, r2
    61c0:	4605      	mov	r5, r0
    61c2:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    61c4:	2218      	movs	r2, #24
    61c6:	2100      	movs	r1, #0
    61c8:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    61ca:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    61cc:	f7fb fd54 	bl	1c78 <memset>
	if (rsp) {
    61d0:	f1b8 0f00 	cmp.w	r8, #0
    61d4:	d11f      	bne.n	6216 <att_write_rsp.part.12.constprop.17+0x5e>
	data.offset = offset;
    61d6:	2300      	movs	r3, #0
    61d8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    61dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    61de:	9303      	str	r3, [sp, #12]
	data.len = len;
    61e0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    61e4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    61e8:	2301      	movs	r3, #1
    61ea:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    61ee:	4a1b      	ldr	r2, [pc, #108]	; (625c <att_write_rsp.part.12.constprop.17+0xa4>)
	data.conn = conn;
    61f0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    61f2:	466b      	mov	r3, sp
    61f4:	4639      	mov	r1, r7
    61f6:	4638      	mov	r0, r7
	data.op = op;
    61f8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    61fc:	f000 fc8c 	bl	6b18 <bt_gatt_foreach_attr>
	if (data.err) {
    6200:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6204:	b98c      	cbnz	r4, 622a <att_write_rsp.part.12.constprop.17+0x72>
	if (data.buf) {
    6206:	9a01      	ldr	r2, [sp, #4]
    6208:	b1b2      	cbz	r2, 6238 <att_write_rsp.part.12.constprop.17+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    620a:	4b15      	ldr	r3, [pc, #84]	; (6260 <att_write_rsp.part.12.constprop.17+0xa8>)
    620c:	2104      	movs	r1, #4
    620e:	4628      	mov	r0, r5
    6210:	f7fe fe32 	bl	4e78 <bt_l2cap_send_cb>
    6214:	e011      	b.n	623a <att_write_rsp.part.12.constprop.17+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6216:	2200      	movs	r2, #0
    6218:	4641      	mov	r1, r8
    621a:	4628      	mov	r0, r5
    621c:	f7ff fc34 	bl	5a88 <bt_att_create_pdu>
    6220:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6222:	2800      	cmp	r0, #0
    6224:	d1d7      	bne.n	61d6 <att_write_rsp.part.12.constprop.17+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6226:	240e      	movs	r4, #14
    6228:	e007      	b.n	623a <att_write_rsp.part.12.constprop.17+0x82>
		if (rsp) {
    622a:	f1b8 0f00 	cmp.w	r8, #0
    622e:	d00f      	beq.n	6250 <att_write_rsp.part.12.constprop.17+0x98>
			net_buf_unref(data.buf);
    6230:	9801      	ldr	r0, [sp, #4]
    6232:	f00c fe33 	bl	12e9c <net_buf_unref>
	if (!req) {
    6236:	b926      	cbnz	r6, 6242 <att_write_rsp.part.12.constprop.17+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6238:	2400      	movs	r4, #0
}
    623a:	4620      	mov	r0, r4
    623c:	b006      	add	sp, #24
    623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6242:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6246:	463a      	mov	r2, r7
    6248:	4631      	mov	r1, r6
    624a:	4628      	mov	r0, r5
    624c:	f7ff fc94 	bl	5b78 <send_err_rsp.part.11>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6250:	2e18      	cmp	r6, #24
    6252:	d1f1      	bne.n	6238 <att_write_rsp.part.12.constprop.17+0x80>
    6254:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6258:	e7ef      	b.n	623a <att_write_rsp.part.12.constprop.17+0x82>
    625a:	bf00      	nop
    625c:	00005711 	.word	0x00005711
    6260:	00005629 	.word	0x00005629

00006264 <att_signed_write_cmd>:
{
    6264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6268:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    626a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    626c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6270:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6272:	4620      	mov	r0, r4
    6274:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6276:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    627a:	f00c fe5e 	bl	12f3a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    627e:	4629      	mov	r1, r5
    6280:	4630      	mov	r0, r6
    6282:	f000 fd8e 	bl	6da2 <bt_smp_sign_verify>
	if (err) {
    6286:	4607      	mov	r7, r0
    6288:	b168      	cbz	r0, 62a6 <att_signed_write_cmd+0x42>
		BT_ERR("Error verifying data");
    628a:	4b14      	ldr	r3, [pc, #80]	; (62dc <att_signed_write_cmd+0x78>)
    628c:	9301      	str	r3, [sp, #4]
    628e:	9300      	str	r3, [sp, #0]
    6290:	4b13      	ldr	r3, [pc, #76]	; (62e0 <att_signed_write_cmd+0x7c>)
    6292:	4814      	ldr	r0, [pc, #80]	; (62e4 <att_signed_write_cmd+0x80>)
    6294:	681c      	ldr	r4, [r3, #0]
    6296:	4a14      	ldr	r2, [pc, #80]	; (62e8 <att_signed_write_cmd+0x84>)
    6298:	4b14      	ldr	r3, [pc, #80]	; (62ec <att_signed_write_cmd+0x88>)
    629a:	4915      	ldr	r1, [pc, #84]	; (62f0 <att_signed_write_cmd+0x8c>)
    629c:	47a0      	blx	r4
    629e:	2000      	movs	r0, #0
}
    62a0:	b002      	add	sp, #8
    62a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    62a6:	2101      	movs	r1, #1
    62a8:	4620      	mov	r0, r4
    62aa:	f00c fe4e 	bl	12f4a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    62ae:	2102      	movs	r1, #2
    62b0:	4620      	mov	r0, r4
    62b2:	f00c fe4a 	bl	12f4a <net_buf_simple_pull>
	if (!handle) {
    62b6:	f1b8 0f00 	cmp.w	r8, #0
    62ba:	d00c      	beq.n	62d6 <att_signed_write_cmd+0x72>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    62bc:	7b2b      	ldrb	r3, [r5, #12]
    62be:	3b0c      	subs	r3, #12
    62c0:	b2db      	uxtb	r3, r3
    62c2:	9301      	str	r3, [sp, #4]
    62c4:	68ab      	ldr	r3, [r5, #8]
    62c6:	9300      	str	r3, [sp, #0]
    62c8:	463a      	mov	r2, r7
    62ca:	4643      	mov	r3, r8
    62cc:	4639      	mov	r1, r7
    62ce:	4630      	mov	r0, r6
    62d0:	f7ff ff72 	bl	61b8 <att_write_rsp.part.12.constprop.17>
    62d4:	e7e4      	b.n	62a0 <att_signed_write_cmd+0x3c>
		return BT_ATT_ERR_INVALID_HANDLE;
    62d6:	2001      	movs	r0, #1
    62d8:	e7e2      	b.n	62a0 <att_signed_write_cmd+0x3c>
    62da:	bf00      	nop
    62dc:	00014c55 	.word	0x00014c55
    62e0:	20003aa4 	.word	0x20003aa4
    62e4:	00016593 	.word	0x00016593
    62e8:	000159c3 	.word	0x000159c3
    62ec:	00016478 	.word	0x00016478
    62f0:	00015a12 	.word	0x00015a12

000062f4 <att_write_cmd>:
{
    62f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    62f6:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    62f8:	f101 0008 	add.w	r0, r1, #8
{
    62fc:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    62fe:	f00c fe34 	bl	12f6a <net_buf_simple_pull_le16>
	if (!handle) {
    6302:	4603      	mov	r3, r0
    6304:	b150      	cbz	r0, 631c <att_write_cmd+0x28>
    6306:	7b22      	ldrb	r2, [r4, #12]
    6308:	9201      	str	r2, [sp, #4]
    630a:	68a2      	ldr	r2, [r4, #8]
    630c:	9200      	str	r2, [sp, #0]
    630e:	2200      	movs	r2, #0
    6310:	4611      	mov	r1, r2
    6312:	4628      	mov	r0, r5
    6314:	f7ff ff50 	bl	61b8 <att_write_rsp.part.12.constprop.17>
}
    6318:	b003      	add	sp, #12
    631a:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    631c:	2001      	movs	r0, #1
    631e:	e7fb      	b.n	6318 <att_write_cmd+0x24>

00006320 <att_write_req>:
{
    6320:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6322:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6324:	f101 0008 	add.w	r0, r1, #8
{
    6328:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    632a:	f00c fe1e 	bl	12f6a <net_buf_simple_pull_le16>
	if (!handle) {
    632e:	4603      	mov	r3, r0
    6330:	b150      	cbz	r0, 6348 <att_write_req+0x28>
    6332:	7b22      	ldrb	r2, [r4, #12]
    6334:	9201      	str	r2, [sp, #4]
    6336:	68a2      	ldr	r2, [r4, #8]
    6338:	9200      	str	r2, [sp, #0]
    633a:	2112      	movs	r1, #18
    633c:	2213      	movs	r2, #19
    633e:	4628      	mov	r0, r5
    6340:	f7ff ff3a 	bl	61b8 <att_write_rsp.part.12.constprop.17>
}
    6344:	b003      	add	sp, #12
    6346:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6348:	2001      	movs	r0, #1
    634a:	e7fb      	b.n	6344 <att_write_req+0x24>

0000634c <bt_att_init>:

void bt_att_init(void)
{
    634c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    634e:	4803      	ldr	r0, [pc, #12]	; (635c <bt_att_init+0x10>)
    6350:	f7fe fcd2 	bl	4cf8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6358:	f000 bbc8 	b.w	6aec <bt_gatt_init>
    635c:	20003c08 	.word	0x20003c08

00006360 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6360:	b510      	push	{r4, lr}
    6362:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6364:	b1d8      	cbz	r0, 639e <bt_att_req_send+0x3e>
    6366:	b1d1      	cbz	r1, 639e <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6368:	f7ff f98c 	bl	5684 <att_chan_get>
	if (!att) {
    636c:	4603      	mov	r3, r0
    636e:	b1c8      	cbz	r0, 63a4 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6370:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    6374:	b172      	cbz	r2, 6394 <bt_att_req_send+0x34>
	parent->next = child;
    6376:	2000      	movs	r0, #0
    6378:	6020      	str	r0, [r4, #0]
    637a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode);
    637e:	b92a      	cbnz	r2, 638c <bt_att_req_send+0x2c>
	list->tail = node;
    6380:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	list->head = node;
    6384:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6388:	4610      	mov	r0, r2
    638a:	bd10      	pop	{r4, pc}
	parent->next = child;
    638c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    638e:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    6392:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6394:	4621      	mov	r1, r4
}
    6396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    639a:	f7ff b9e5 	b.w	5768 <att_send_req>
		return -EINVAL;
    639e:	f06f 0015 	mvn.w	r0, #21
    63a2:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    63a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    63a8:	bd10      	pop	{r4, pc}

000063aa <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    63aa:	4770      	bx	lr

000063ac <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    63ac:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    63ae:	2000      	movs	r0, #0
    63b0:	4770      	bx	lr

000063b2 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    63b2:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    63b4:	2300      	movs	r3, #0
    63b6:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    63b8:	461a      	mov	r2, r3
    63ba:	42aa      	cmp	r2, r5
    63bc:	d107      	bne.n	63ce <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    63be:	890a      	ldrh	r2, [r1, #8]
    63c0:	429a      	cmp	r2, r3
    63c2:	d00d      	beq.n	63e0 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    63c4:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    63c6:	68ca      	ldr	r2, [r1, #12]
	}
}
    63c8:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    63ca:	4619      	mov	r1, r3
    63cc:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    63ce:	680c      	ldr	r4, [r1, #0]
    63d0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    63d4:	3201      	adds	r2, #1
    63d6:	8924      	ldrh	r4, [r4, #8]
    63d8:	42a3      	cmp	r3, r4
    63da:	bf38      	it	cc
    63dc:	4623      	movcc	r3, r4
    63de:	e7ec      	b.n	63ba <gatt_ccc_changed+0x8>
}
    63e0:	bc30      	pop	{r4, r5}
    63e2:	4770      	bx	lr

000063e4 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    63e4:	b410      	push	{r4}
    63e6:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    63e8:	699c      	ldr	r4, [r3, #24]
    63ea:	460a      	mov	r2, r1
    63ec:	6959      	ldr	r1, [r3, #20]
    63ee:	4623      	mov	r3, r4
}
    63f0:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    63f2:	4718      	bx	r3

000063f4 <gatt_register>:
{
    63f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    63f6:	4a1f      	ldr	r2, [pc, #124]	; (6474 <gatt_register+0x80>)
    63f8:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    63fa:	e890 0022 	ldmia.w	r0, {r1, r5}
	if (sys_slist_is_empty(&db)) {
    63fe:	b14b      	cbz	r3, 6414 <gatt_register+0x20>
    6400:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6402:	2b00      	cmp	r3, #0
    6404:	d033      	beq.n	646e <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    6406:	e913 0018 	ldmdb	r3, {r3, r4}
    640a:	2614      	movs	r6, #20
    640c:	fb06 3304 	mla	r3, r6, r4, r3
    6410:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    6414:	b2ad      	uxth	r5, r5
    6416:	2414      	movs	r4, #20
    6418:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    641c:	b109      	cbz	r1, 6422 <gatt_register+0x2e>
    641e:	42a9      	cmp	r1, r5
    6420:	d108      	bne.n	6434 <gatt_register+0x40>
	parent->next = child;
    6422:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    6424:	f100 0108 	add.w	r1, r0, #8
    6428:	6083      	str	r3, [r0, #8]
    642a:	6850      	ldr	r0, [r2, #4]
Z_GENLIST_APPEND(slist, snode);
    642c:	b9d8      	cbnz	r0, 6466 <gatt_register+0x72>
	list->tail = node;
    642e:	6051      	str	r1, [r2, #4]
	list->head = node;
    6430:	6011      	str	r1, [r2, #0]
    6432:	e016      	b.n	6462 <gatt_register+0x6e>
		if (!attrs->handle) {
    6434:	8a0c      	ldrh	r4, [r1, #16]
    6436:	b92c      	cbnz	r4, 6444 <gatt_register+0x50>
			attrs->handle = ++handle;
    6438:	3301      	adds	r3, #1
    643a:	b29c      	uxth	r4, r3
    643c:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    643e:	3114      	adds	r1, #20
    6440:	4623      	mov	r3, r4
    6442:	e7eb      	b.n	641c <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    6444:	42a3      	cmp	r3, r4
    6446:	d3fa      	bcc.n	643e <gatt_register+0x4a>
			BT_ERR("Unable to register handle 0x%04x",
    6448:	4b0b      	ldr	r3, [pc, #44]	; (6478 <gatt_register+0x84>)
    644a:	9302      	str	r3, [sp, #8]
    644c:	e88d 0018 	stmia.w	sp, {r3, r4}
    6450:	4b0a      	ldr	r3, [pc, #40]	; (647c <gatt_register+0x88>)
    6452:	480b      	ldr	r0, [pc, #44]	; (6480 <gatt_register+0x8c>)
    6454:	681c      	ldr	r4, [r3, #0]
    6456:	4a0b      	ldr	r2, [pc, #44]	; (6484 <gatt_register+0x90>)
    6458:	4b0b      	ldr	r3, [pc, #44]	; (6488 <gatt_register+0x94>)
    645a:	490c      	ldr	r1, [pc, #48]	; (648c <gatt_register+0x98>)
    645c:	47a0      	blx	r4
			return -EINVAL;
    645e:	f06f 0015 	mvn.w	r0, #21
}
    6462:	b004      	add	sp, #16
    6464:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
    6466:	6001      	str	r1, [r0, #0]
	list->tail = node;
    6468:	6051      	str	r1, [r2, #4]
	return 0;
    646a:	4618      	mov	r0, r3
    646c:	e7f9      	b.n	6462 <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	deff      	udf	#255	; 0xff
    6472:	bf00      	nop
    6474:	200005a8 	.word	0x200005a8
    6478:	00014c55 	.word	0x00014c55
    647c:	20003aa4 	.word	0x20003aa4
    6480:	0001694e 	.word	0x0001694e
    6484:	000159c3 	.word	0x000159c3
    6488:	000167f4 	.word	0x000167f4
    648c:	00015a12 	.word	0x00015a12

00006490 <gatt_notify>:
{
    6490:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6494:	468a      	mov	sl, r1
    6496:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6498:	211b      	movs	r1, #27
    649a:	1c9a      	adds	r2, r3, #2
{
    649c:	4680      	mov	r8, r0
    649e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    64a0:	f7ff faf2 	bl	5a88 <bt_att_create_pdu>
	if (!buf) {
    64a4:	4604      	mov	r4, r0
    64a6:	b970      	cbnz	r0, 64c6 <gatt_notify+0x36>
		BT_WARN("No buffer available to send notification");
    64a8:	4b14      	ldr	r3, [pc, #80]	; (64fc <gatt_notify+0x6c>)
    64aa:	9301      	str	r3, [sp, #4]
    64ac:	9300      	str	r3, [sp, #0]
    64ae:	4b14      	ldr	r3, [pc, #80]	; (6500 <gatt_notify+0x70>)
    64b0:	4814      	ldr	r0, [pc, #80]	; (6504 <gatt_notify+0x74>)
    64b2:	681c      	ldr	r4, [r3, #0]
    64b4:	4a14      	ldr	r2, [pc, #80]	; (6508 <gatt_notify+0x78>)
    64b6:	4b15      	ldr	r3, [pc, #84]	; (650c <gatt_notify+0x7c>)
    64b8:	4915      	ldr	r1, [pc, #84]	; (6510 <gatt_notify+0x80>)
    64ba:	47a0      	blx	r4
    64bc:	f06f 000b 	mvn.w	r0, #11
}
    64c0:	b002      	add	sp, #8
    64c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    64c6:	f100 0708 	add.w	r7, r0, #8
    64ca:	2102      	movs	r1, #2
    64cc:	4638      	mov	r0, r7
    64ce:	f00c fd1d 	bl	12f0c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    64d2:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    64d4:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    64d6:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    64da:	4638      	mov	r0, r7
    64dc:	f00c fd16 	bl	12f0c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    64e0:	4632      	mov	r2, r6
    64e2:	4649      	mov	r1, r9
    64e4:	4628      	mov	r0, r5
    64e6:	f7fb fb9b 	bl	1c20 <memcpy>
    64ea:	4640      	mov	r0, r8
    64ec:	2300      	movs	r3, #0
    64ee:	4622      	mov	r2, r4
    64f0:	2104      	movs	r1, #4
    64f2:	f7fe fcc1 	bl	4e78 <bt_l2cap_send_cb>
	return 0;
    64f6:	2000      	movs	r0, #0
    64f8:	e7e2      	b.n	64c0 <gatt_notify+0x30>
    64fa:	bf00      	nop
    64fc:	00014c55 	.word	0x00014c55
    6500:	20003aa4 	.word	0x20003aa4
    6504:	00016915 	.word	0x00016915
    6508:	00015a0b 	.word	0x00015a0b
    650c:	00016830 	.word	0x00016830
    6510:	00015a12 	.word	0x00015a12

00006514 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    6514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;
	u16_t value_handle = params->attr->handle;
    6518:	694b      	ldr	r3, [r1, #20]
{
    651a:	b087      	sub	sp, #28
    651c:	4681      	mov	r9, r0
	u16_t value_handle = params->attr->handle;
    651e:	8a1d      	ldrh	r5, [r3, #16]

	/* Check if attribute is a characteristic then adjust the handle */
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6520:	6818      	ldr	r0, [r3, #0]
    6522:	2300      	movs	r3, #0
{
    6524:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(params->attr->uuid, BT_UUID_GATT_CHRC)) {
    6526:	f88d 3014 	strb.w	r3, [sp, #20]
    652a:	a905      	add	r1, sp, #20
    652c:	f642 0303 	movw	r3, #10243	; 0x2803
    6530:	f8ad 3016 	strh.w	r3, [sp, #22]
    6534:	f7fb fcf2 	bl	1f1c <bt_uuid_cmp>
    6538:	b930      	cbnz	r0, 6548 <gatt_indicate+0x34>
		struct bt_gatt_chrc *chrc = params->attr->user_data;
    653a:	6963      	ldr	r3, [r4, #20]

		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    653c:	68db      	ldr	r3, [r3, #12]
    653e:	791b      	ldrb	r3, [r3, #4]
    6540:	069b      	lsls	r3, r3, #26
    6542:	d546      	bpl.n	65d2 <gatt_indicate+0xbe>
			return -EINVAL;
		}

		value_handle += 1;
    6544:	3501      	adds	r5, #1
    6546:	b2ad      	uxth	r5, r5
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6548:	8c22      	ldrh	r2, [r4, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    654a:	211d      	movs	r1, #29
    654c:	3202      	adds	r2, #2
    654e:	4648      	mov	r0, r9
    6550:	f7ff fa9a 	bl	5a88 <bt_att_create_pdu>
	if (!buf) {
    6554:	4606      	mov	r6, r0
    6556:	b978      	cbnz	r0, 6578 <gatt_indicate+0x64>
		BT_WARN("No buffer available to send indication");
    6558:	4b1f      	ldr	r3, [pc, #124]	; (65d8 <gatt_indicate+0xc4>)
    655a:	9301      	str	r3, [sp, #4]
    655c:	9300      	str	r3, [sp, #0]
    655e:	4b1f      	ldr	r3, [pc, #124]	; (65dc <gatt_indicate+0xc8>)
    6560:	4a1f      	ldr	r2, [pc, #124]	; (65e0 <gatt_indicate+0xcc>)
    6562:	681c      	ldr	r4, [r3, #0]
    6564:	491f      	ldr	r1, [pc, #124]	; (65e4 <gatt_indicate+0xd0>)
    6566:	4b20      	ldr	r3, [pc, #128]	; (65e8 <gatt_indicate+0xd4>)
    6568:	4820      	ldr	r0, [pc, #128]	; (65ec <gatt_indicate+0xd8>)
    656a:	47a0      	blx	r4
		return -ENOMEM;
    656c:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6570:	4620      	mov	r0, r4
    6572:	b007      	add	sp, #28
    6574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    6578:	f100 0708 	add.w	r7, r0, #8
    657c:	2102      	movs	r1, #2
    657e:	4638      	mov	r0, r7
    6580:	f00c fcc4 	bl	12f0c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(value_handle);
    6584:	4680      	mov	r8, r0
	net_buf_add(buf, params->len);
    6586:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(value_handle);
    6588:	f828 5b02 	strh.w	r5, [r8], #2
	net_buf_add(buf, params->len);
    658c:	4638      	mov	r0, r7
    658e:	f00c fcbd 	bl	12f0c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6592:	8c22      	ldrh	r2, [r4, #32]
    6594:	69e1      	ldr	r1, [r4, #28]
    6596:	4640      	mov	r0, r8
    6598:	f7fb fb42 	bl	1c20 <memcpy>
		req->func = func;
    659c:	4b14      	ldr	r3, [pc, #80]	; (65f0 <gatt_indicate+0xdc>)
    659e:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    65a0:	2300      	movs	r3, #0
		req->buf = buf;
    65a2:	6126      	str	r6, [r4, #16]
		req->destroy = destroy;
    65a4:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    65a6:	4621      	mov	r1, r4
    65a8:	4648      	mov	r0, r9
    65aa:	f7ff fed9 	bl	6360 <bt_att_req_send>
	if (err) {
    65ae:	4604      	mov	r4, r0
    65b0:	2800      	cmp	r0, #0
    65b2:	d0dd      	beq.n	6570 <gatt_indicate+0x5c>
		BT_ERR("Error sending ATT PDU: %d", err);
    65b4:	4b08      	ldr	r3, [pc, #32]	; (65d8 <gatt_indicate+0xc4>)
    65b6:	9302      	str	r3, [sp, #8]
    65b8:	e88d 0018 	stmia.w	sp, {r3, r4}
    65bc:	4b07      	ldr	r3, [pc, #28]	; (65dc <gatt_indicate+0xc8>)
    65be:	4a0d      	ldr	r2, [pc, #52]	; (65f4 <gatt_indicate+0xe0>)
    65c0:	681d      	ldr	r5, [r3, #0]
    65c2:	4908      	ldr	r1, [pc, #32]	; (65e4 <gatt_indicate+0xd0>)
    65c4:	4b0c      	ldr	r3, [pc, #48]	; (65f8 <gatt_indicate+0xe4>)
    65c6:	480d      	ldr	r0, [pc, #52]	; (65fc <gatt_indicate+0xe8>)
    65c8:	47a8      	blx	r5
		net_buf_unref(buf);
    65ca:	4630      	mov	r0, r6
    65cc:	f00c fc66 	bl	12e9c <net_buf_unref>
    65d0:	e7ce      	b.n	6570 <gatt_indicate+0x5c>
			return -EINVAL;
    65d2:	f06f 0415 	mvn.w	r4, #21
    65d6:	e7cb      	b.n	6570 <gatt_indicate+0x5c>
    65d8:	00014c55 	.word	0x00014c55
    65dc:	20003aa4 	.word	0x20003aa4
    65e0:	00015a0b 	.word	0x00015a0b
    65e4:	00015a12 	.word	0x00015a12
    65e8:	00016846 	.word	0x00016846
    65ec:	000168b4 	.word	0x000168b4
    65f0:	000063e5 	.word	0x000063e5
    65f4:	000159c3 	.word	0x000159c3
    65f8:	0001683c 	.word	0x0001683c
    65fc:	000168eb 	.word	0x000168eb

00006600 <sc_indicate.constprop.19>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    6600:	b510      	push	{r4, lr}
    6602:	4b17      	ldr	r3, [pc, #92]	; (6660 <sc_indicate.constprop.19+0x60>)
    6604:	f3bf 8f5b 	dmb	ish
    6608:	f103 0250 	add.w	r2, r3, #80	; 0x50
    660c:	e852 4f00 	ldrex	r4, [r2]
    6610:	f044 0e01 	orr.w	lr, r4, #1
    6614:	e842 ec00 	strex	ip, lr, [r2]
    6618:	f1bc 0f00 	cmp.w	ip, #0
    661c:	d1f6      	bne.n	660c <sc_indicate.constprop.19+0xc>
    661e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    6622:	07e2      	lsls	r2, r4, #31
    6624:	d402      	bmi.n	662c <sc_indicate.constprop.19+0x2c>
		sc->start = start;
    6626:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    6628:	84d9      	strh	r1, [r3, #38]	; 0x26
    662a:	e00a      	b.n	6642 <sc_indicate.constprop.19+0x42>
	if (new_start >= *start && new_end <= *end) {
    662c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    662e:	4282      	cmp	r2, r0
    6630:	d803      	bhi.n	663a <sc_indicate.constprop.19+0x3a>
    6632:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    6634:	428a      	cmp	r2, r1
    6636:	d301      	bcc.n	663c <sc_indicate.constprop.19+0x3c>
    6638:	bd10      	pop	{r4, pc}
		*start = new_start;
    663a:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    663c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    663e:	428a      	cmp	r2, r1
    6640:	d3f2      	bcc.n	6628 <sc_indicate.constprop.19+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6642:	f3bf 8f5b 	dmb	ish
    6646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6648:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    664c:	079b      	lsls	r3, r3, #30
    664e:	d406      	bmi.n	665e <sc_indicate.constprop.19+0x5e>
    6650:	220a      	movs	r2, #10
    6652:	4904      	ldr	r1, [pc, #16]	; (6664 <sc_indicate.constprop.19+0x64>)
    6654:	4804      	ldr	r0, [pc, #16]	; (6668 <sc_indicate.constprop.19+0x68>)
}
    6656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    665a:	f00e b88d 	b.w	14778 <k_delayed_work_submit_to_queue>
    665e:	bd10      	pop	{r4, pc}
    6660:	200005b0 	.word	0x200005b0
    6664:	200005d8 	.word	0x200005d8
    6668:	200019c8 	.word	0x200019c8

0000666c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    666c:	6882      	ldr	r2, [r0, #8]
    666e:	4b19      	ldr	r3, [pc, #100]	; (66d4 <connected_cb+0x68>)
    6670:	429a      	cmp	r2, r3
{
    6672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6676:	4607      	mov	r7, r0
    6678:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    667a:	d125      	bne.n	66c8 <connected_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    667c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    667e:	2600      	movs	r6, #0
    6680:	686b      	ldr	r3, [r5, #4]
    6682:	429e      	cmp	r6, r3
    6684:	d220      	bcs.n	66c8 <connected_cb+0x5c>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6686:	6829      	ldr	r1, [r5, #0]
    6688:	ea4f 1806 	mov.w	r8, r6, lsl #4
    668c:	4441      	add	r1, r8
    668e:	4620      	mov	r0, r4
    6690:	f7fd fdbc 	bl	420c <bt_conn_addr_le_cmp>
    6694:	b9d8      	cbnz	r0, 66ce <connected_cb+0x62>
			continue;
		}

		if (ccc->cfg[i].value) {
    6696:	682b      	ldr	r3, [r5, #0]
    6698:	4443      	add	r3, r8
    669a:	891b      	ldrh	r3, [r3, #8]
    669c:	b1bb      	cbz	r3, 66ce <connected_cb+0x62>
			gatt_ccc_changed(attr, ccc);
    669e:	4629      	mov	r1, r5
    66a0:	4638      	mov	r0, r7
    66a2:	f7ff fe86 	bl	63b2 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    66a6:	682c      	ldr	r4, [r5, #0]
    66a8:	4b0b      	ldr	r3, [pc, #44]	; (66d8 <connected_cb+0x6c>)
    66aa:	429c      	cmp	r4, r3
    66ac:	d10c      	bne.n	66c8 <connected_cb+0x5c>
				sc_restore(&ccc->cfg[i]);
    66ae:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    66b0:	89a0      	ldrh	r0, [r4, #12]
    66b2:	89e1      	ldrh	r1, [r4, #14]
    66b4:	b900      	cbnz	r0, 66b8 <connected_cb+0x4c>
    66b6:	b139      	cbz	r1, 66c8 <connected_cb+0x5c>
	sc_indicate(&gatt_sc, data->start, data->end);
    66b8:	f7ff ffa2 	bl	6600 <sc_indicate.constprop.19>
	memset(cfg->data, 0, sizeof(cfg->data));
    66bc:	2204      	movs	r2, #4
    66be:	2100      	movs	r1, #0
    66c0:	f104 000c 	add.w	r0, r4, #12
    66c4:	f7fb fad8 	bl	1c78 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    66c8:	2001      	movs	r0, #1
    66ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    66ce:	3601      	adds	r6, #1
    66d0:	e7d6      	b.n	6680 <connected_cb+0x14>
    66d2:	bf00      	nop
    66d4:	000068f9 	.word	0x000068f9
    66d8:	20000604 	.word	0x20000604

000066dc <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    66dc:	490d      	ldr	r1, [pc, #52]	; (6714 <sc_indicate_rsp+0x38>)
    66de:	f3bf 8f5b 	dmb	ish
    66e2:	f101 0350 	add.w	r3, r1, #80	; 0x50
    66e6:	e853 2f00 	ldrex	r2, [r3]
    66ea:	f022 0202 	bic.w	r2, r2, #2
    66ee:	e843 2000 	strex	r0, r2, [r3]
    66f2:	2800      	cmp	r0, #0
    66f4:	d1f7      	bne.n	66e6 <sc_indicate_rsp+0xa>
    66f6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    66fa:	f3bf 8f5b 	dmb	ish
    66fe:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    6700:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6704:	07db      	lsls	r3, r3, #31
    6706:	d504      	bpl.n	6712 <sc_indicate_rsp+0x36>
    6708:	2200      	movs	r2, #0
    670a:	3128      	adds	r1, #40	; 0x28
    670c:	4802      	ldr	r0, [pc, #8]	; (6718 <sc_indicate_rsp+0x3c>)
    670e:	f00e b833 	b.w	14778 <k_delayed_work_submit_to_queue>
    6712:	4770      	bx	lr
    6714:	200005b0 	.word	0x200005b0
    6718:	200019c8 	.word	0x200019c8

0000671c <read_appearance>:
{
    671c:	b513      	push	{r0, r1, r4, lr}
    671e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    6722:	4610      	mov	r0, r2
	if (offset > value_len) {
    6724:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6726:	f04f 0200 	mov.w	r2, #0
    672a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    672e:	d80d      	bhi.n	674c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    6730:	f1c1 0402 	rsb	r4, r1, #2
    6734:	429c      	cmp	r4, r3
    6736:	bfa8      	it	ge
    6738:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    673a:	f10d 0306 	add.w	r3, sp, #6
    673e:	4622      	mov	r2, r4
    6740:	4419      	add	r1, r3
    6742:	f7fb fa6d 	bl	1c20 <memcpy>
}
    6746:	4620      	mov	r0, r4
    6748:	b002      	add	sp, #8
    674a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    674c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6750:	e7f9      	b.n	6746 <read_appearance+0x2a>
	...

00006754 <disconnected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6754:	6882      	ldr	r2, [r0, #8]
    6756:	4b27      	ldr	r3, [pc, #156]	; (67f4 <disconnected_cb+0xa0>)
    6758:	429a      	cmp	r2, r3
{
    675a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    675e:	4680      	mov	r8, r0
    6760:	4689      	mov	r9, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    6762:	d127      	bne.n	67b4 <disconnected_cb+0x60>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6764:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6766:	8923      	ldrh	r3, [r4, #8]
    6768:	b323      	cbz	r3, 67b4 <disconnected_cb+0x60>
    676a:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    676c:	f101 0a4c 	add.w	sl, r1, #76	; 0x4c
	for (i = 0; i < ccc->cfg_len; i++) {
    6770:	6863      	ldr	r3, [r4, #4]
    6772:	429e      	cmp	r6, r3
    6774:	d30b      	bcc.n	678e <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    6776:	2202      	movs	r2, #2
    6778:	2100      	movs	r1, #0
    677a:	f104 0008 	add.w	r0, r4, #8
    677e:	f7fb fa7b 	bl	1c78 <memset>
	if (ccc->cfg_changed) {
    6782:	68e3      	ldr	r3, [r4, #12]
    6784:	b1b3      	cbz	r3, 67b4 <disconnected_cb+0x60>
		ccc->cfg_changed(attr, ccc->value);
    6786:	8921      	ldrh	r1, [r4, #8]
    6788:	4640      	mov	r0, r8
    678a:	4798      	blx	r3
    678c:	e012      	b.n	67b4 <disconnected_cb+0x60>
		if (!ccc->cfg[i].value) {
    678e:	6821      	ldr	r1, [r4, #0]
    6790:	0135      	lsls	r5, r6, #4
    6792:	4429      	add	r1, r5
    6794:	890b      	ldrh	r3, [r1, #8]
    6796:	b19b      	cbz	r3, 67c0 <disconnected_cb+0x6c>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6798:	4648      	mov	r0, r9
    679a:	f7fd fd37 	bl	420c <bt_conn_addr_le_cmp>
    679e:	b188      	cbz	r0, 67c4 <disconnected_cb+0x70>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    67a0:	6820      	ldr	r0, [r4, #0]
    67a2:	4428      	add	r0, r5
    67a4:	f7fd fd96 	bl	42d4 <bt_conn_lookup_addr_le>
			if (tmp) {
    67a8:	b150      	cbz	r0, 67c0 <disconnected_cb+0x6c>
				if (tmp->state == BT_CONN_CONNECTED) {
    67aa:	7a43      	ldrb	r3, [r0, #9]
    67ac:	2b03      	cmp	r3, #3
    67ae:	d105      	bne.n	67bc <disconnected_cb+0x68>
					bt_conn_unref(tmp);
    67b0:	f7fd fdc6 	bl	4340 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    67b4:	2001      	movs	r0, #1
    67b6:	b002      	add	sp, #8
    67b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				bt_conn_unref(tmp);
    67bc:	f7fd fdc0 	bl	4340 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    67c0:	3601      	adds	r6, #1
    67c2:	e7d5      	b.n	6770 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    67c4:	4650      	mov	r0, sl
    67c6:	f7fd f991 	bl	3aec <bt_addr_le_is_bonded>
    67ca:	4607      	mov	r7, r0
    67cc:	6820      	ldr	r0, [r4, #0]
    67ce:	b95f      	cbnz	r7, 67e8 <disconnected_cb+0x94>
    67d0:	4428      	add	r0, r5
    67d2:	2207      	movs	r2, #7
    67d4:	4669      	mov	r1, sp
						BT_ADDR_LE_ANY);
    67d6:	9700      	str	r7, [sp, #0]
    67d8:	f8cd 7003 	str.w	r7, [sp, #3]
    67dc:	f7fb fa20 	bl	1c20 <memcpy>
				ccc->cfg[i].value = 0;
    67e0:	6823      	ldr	r3, [r4, #0]
    67e2:	441d      	add	r5, r3
    67e4:	812f      	strh	r7, [r5, #8]
    67e6:	e7eb      	b.n	67c0 <disconnected_cb+0x6c>
    67e8:	2207      	movs	r2, #7
    67ea:	4651      	mov	r1, sl
    67ec:	4428      	add	r0, r5
    67ee:	f7fb fa17 	bl	1c20 <memcpy>
    67f2:	e7e5      	b.n	67c0 <disconnected_cb+0x6c>
    67f4:	000068f9 	.word	0x000068f9

000067f8 <read_name>:
{
    67f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    67fc:	4e0d      	ldr	r6, [pc, #52]	; (6834 <read_name+0x3c>)
{
    67fe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    6802:	4630      	mov	r0, r6
{
    6804:	4698      	mov	r8, r3
    6806:	4617      	mov	r7, r2
				 strlen(gap_name));
    6808:	f7fb f9e0 	bl	1bcc <strlen>
	if (offset > value_len) {
    680c:	b283      	uxth	r3, r0
    680e:	42ab      	cmp	r3, r5
    6810:	d30d      	bcc.n	682e <read_name+0x36>
	len = min(buf_len, value_len - offset);
    6812:	1b5c      	subs	r4, r3, r5
    6814:	4544      	cmp	r4, r8
    6816:	4623      	mov	r3, r4
    6818:	bfa8      	it	ge
    681a:	4643      	movge	r3, r8
    681c:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    681e:	4622      	mov	r2, r4
    6820:	1971      	adds	r1, r6, r5
    6822:	4638      	mov	r0, r7
    6824:	f7fb f9fc 	bl	1c20 <memcpy>
}
    6828:	4620      	mov	r0, r4
    682a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    682e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6832:	e7f9      	b.n	6828 <read_name+0x30>
    6834:	0001697f 	.word	0x0001697f

00006838 <bt_gatt_attr_read_ccc>:
{
    6838:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    683c:	68ce      	ldr	r6, [r1, #12]
{
    683e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    6842:	4604      	mov	r4, r0
    6844:	4690      	mov	r8, r2
    6846:	469a      	mov	sl, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    6848:	2500      	movs	r5, #0
    684a:	6873      	ldr	r3, [r6, #4]
    684c:	429d      	cmp	r5, r3
    684e:	d20e      	bcs.n	686e <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6850:	6831      	ldr	r1, [r6, #0]
    6852:	ea4f 1905 	mov.w	r9, r5, lsl #4
    6856:	4449      	add	r1, r9
    6858:	4620      	mov	r0, r4
    685a:	f7fd fcd7 	bl	420c <bt_conn_addr_le_cmp>
    685e:	b108      	cbz	r0, 6864 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    6860:	3501      	adds	r5, #1
    6862:	e7f2      	b.n	684a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6864:	6832      	ldr	r2, [r6, #0]
    6866:	444a      	add	r2, r9
    6868:	8913      	ldrh	r3, [r2, #8]
    686a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    686e:	6873      	ldr	r3, [r6, #4]
    6870:	429d      	cmp	r5, r3
		value = 0x0000;
    6872:	bf04      	itt	eq
    6874:	2300      	moveq	r3, #0
    6876:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    687a:	2f02      	cmp	r7, #2
    687c:	d80f      	bhi.n	689e <bt_gatt_attr_read_ccc+0x66>
	len = min(buf_len, value_len - offset);
    687e:	f1c7 0402 	rsb	r4, r7, #2
    6882:	4554      	cmp	r4, sl
    6884:	bfa8      	it	ge
    6886:	4654      	movge	r4, sl
	memcpy(buf, value + offset, len);
    6888:	f10d 0306 	add.w	r3, sp, #6
    688c:	4622      	mov	r2, r4
    688e:	19d9      	adds	r1, r3, r7
    6890:	4640      	mov	r0, r8
    6892:	f7fb f9c5 	bl	1c20 <memcpy>
}
    6896:	4620      	mov	r0, r4
    6898:	b002      	add	sp, #8
    689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    689e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    68a2:	e7f8      	b.n	6896 <bt_gatt_attr_read_ccc+0x5e>

000068a4 <bt_gatt_attr_read_service>:
{
    68a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    68a6:	68c9      	ldr	r1, [r1, #12]
{
    68a8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    68ac:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    68ae:	780a      	ldrb	r2, [r1, #0]
    68b0:	b992      	cbnz	r2, 68d8 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    68b2:	884a      	ldrh	r2, [r1, #2]
    68b4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    68b8:	2d02      	cmp	r5, #2
    68ba:	d819      	bhi.n	68f0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    68bc:	f1c5 0402 	rsb	r4, r5, #2
    68c0:	429c      	cmp	r4, r3
    68c2:	bfa8      	it	ge
    68c4:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    68c6:	f10d 0306 	add.w	r3, sp, #6
    68ca:	4622      	mov	r2, r4
    68cc:	1959      	adds	r1, r3, r5
    68ce:	f7fb f9a7 	bl	1c20 <memcpy>
}
    68d2:	4620      	mov	r0, r4
    68d4:	b003      	add	sp, #12
    68d6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    68d8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    68da:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    68de:	d807      	bhi.n	68f0 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    68e0:	f1c5 0410 	rsb	r4, r5, #16
    68e4:	429c      	cmp	r4, r3
    68e6:	bfa8      	it	ge
    68e8:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    68ea:	4622      	mov	r2, r4
    68ec:	4429      	add	r1, r5
    68ee:	e7ee      	b.n	68ce <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    68f0:	f06f 0406 	mvn.w	r4, #6
    68f4:	e7ed      	b.n	68d2 <bt_gatt_attr_read_service+0x2e>
	...

000068f8 <bt_gatt_attr_write_ccc>:
{
    68f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68fc:	b087      	sub	sp, #28
    68fe:	4688      	mov	r8, r1
    6900:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6904:	f8d8 500c 	ldr.w	r5, [r8, #12]
	if (offset > sizeof(u16_t)) {
    6908:	2902      	cmp	r1, #2
{
    690a:	4681      	mov	r9, r0
	if (offset > sizeof(u16_t)) {
    690c:	d860      	bhi.n	69d0 <bt_gatt_attr_write_ccc+0xd8>
	if (offset + len > sizeof(u16_t)) {
    690e:	4419      	add	r1, r3
    6910:	2902      	cmp	r1, #2
    6912:	461f      	mov	r7, r3
    6914:	dc5f      	bgt.n	69d6 <bt_gatt_attr_write_ccc+0xde>
	return ((u16_t)src[1] << 8) | src[0];
    6916:	7853      	ldrb	r3, [r2, #1]
    6918:	7816      	ldrb	r6, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    691a:	2400      	movs	r4, #0
    691c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    6920:	686b      	ldr	r3, [r5, #4]
    6922:	429c      	cmp	r4, r3
    6924:	d206      	bcs.n	6934 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6926:	6829      	ldr	r1, [r5, #0]
    6928:	4648      	mov	r0, r9
    692a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    692e:	f7fd fc6d 	bl	420c <bt_conn_addr_le_cmp>
    6932:	b9b8      	cbnz	r0, 6964 <bt_gatt_attr_write_ccc+0x6c>
	if (i == ccc->cfg_len) {
    6934:	686b      	ldr	r3, [r5, #4]
    6936:	429c      	cmp	r4, r3
    6938:	d130      	bne.n	699c <bt_gatt_attr_write_ccc+0xa4>
		if (!value) {
    693a:	b35e      	cbz	r6, 6994 <bt_gatt_attr_write_ccc+0x9c>
    693c:	2400      	movs	r4, #0
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    693e:	46a2      	mov	sl, r4
		for (i = 0; i < ccc->cfg_len; i++) {
    6940:	686b      	ldr	r3, [r5, #4]
    6942:	429c      	cmp	r4, r3
    6944:	d217      	bcs.n	6976 <bt_gatt_attr_write_ccc+0x7e>
			if (bt_addr_le_cmp(&ccc->cfg[i].peer, BT_ADDR_LE_ANY)) {
    6946:	6828      	ldr	r0, [r5, #0]
    6948:	f8cd a008 	str.w	sl, [sp, #8]
    694c:	ea4f 1b04 	mov.w	fp, r4, lsl #4
	return memcmp(a, b, sizeof(*a));
    6950:	2207      	movs	r2, #7
    6952:	a902      	add	r1, sp, #8
    6954:	4458      	add	r0, fp
    6956:	f8cd a00b 	str.w	sl, [sp, #11]
    695a:	f7fb f94c 	bl	1bf6 <memcmp>
    695e:	b118      	cbz	r0, 6968 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    6960:	3401      	adds	r4, #1
    6962:	e7ed      	b.n	6940 <bt_gatt_attr_write_ccc+0x48>
	for (i = 0; i < ccc->cfg_len; i++) {
    6964:	3401      	adds	r4, #1
    6966:	e7db      	b.n	6920 <bt_gatt_attr_write_ccc+0x28>
			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6968:	6828      	ldr	r0, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    696a:	2207      	movs	r2, #7
    696c:	f109 014c 	add.w	r1, r9, #76	; 0x4c
    6970:	4458      	add	r0, fp
    6972:	f7fb f955 	bl	1c20 <memcpy>
		if (i == ccc->cfg_len) {
    6976:	686b      	ldr	r3, [r5, #4]
    6978:	429c      	cmp	r4, r3
    697a:	d10f      	bne.n	699c <bt_gatt_attr_write_ccc+0xa4>
			BT_WARN("No space to store CCC cfg");
    697c:	4b17      	ldr	r3, [pc, #92]	; (69dc <bt_gatt_attr_write_ccc+0xe4>)
    697e:	9301      	str	r3, [sp, #4]
    6980:	9300      	str	r3, [sp, #0]
    6982:	4b17      	ldr	r3, [pc, #92]	; (69e0 <bt_gatt_attr_write_ccc+0xe8>)
    6984:	4a17      	ldr	r2, [pc, #92]	; (69e4 <bt_gatt_attr_write_ccc+0xec>)
    6986:	681c      	ldr	r4, [r3, #0]
    6988:	4917      	ldr	r1, [pc, #92]	; (69e8 <bt_gatt_attr_write_ccc+0xf0>)
    698a:	4b18      	ldr	r3, [pc, #96]	; (69ec <bt_gatt_attr_write_ccc+0xf4>)
    698c:	4818      	ldr	r0, [pc, #96]	; (69f0 <bt_gatt_attr_write_ccc+0xf8>)
    698e:	47a0      	blx	r4
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6990:	f06f 0710 	mvn.w	r7, #16
}
    6994:	4638      	mov	r0, r7
    6996:	b007      	add	sp, #28
    6998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc->cfg[i].value = value;
    699c:	682b      	ldr	r3, [r5, #0]
    699e:	0124      	lsls	r4, r4, #4
    69a0:	4423      	add	r3, r4
    69a2:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    69a4:	892b      	ldrh	r3, [r5, #8]
    69a6:	42b3      	cmp	r3, r6
    69a8:	d003      	beq.n	69b2 <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_changed(attr, ccc);
    69aa:	4629      	mov	r1, r5
    69ac:	4640      	mov	r0, r8
    69ae:	f7ff fd00 	bl	63b2 <gatt_ccc_changed>
	if (!value) {
    69b2:	2e00      	cmp	r6, #0
    69b4:	d1ee      	bne.n	6994 <bt_gatt_attr_write_ccc+0x9c>
		bt_addr_le_copy(&ccc->cfg[i].peer, BT_ADDR_LE_ANY);
    69b6:	6828      	ldr	r0, [r5, #0]
    69b8:	9604      	str	r6, [sp, #16]
    69ba:	4420      	add	r0, r4
    69bc:	2207      	movs	r2, #7
    69be:	a904      	add	r1, sp, #16
    69c0:	f8cd 6013 	str.w	r6, [sp, #19]
    69c4:	f7fb f92c 	bl	1c20 <memcpy>
		ccc->cfg[i].value = 0;
    69c8:	682b      	ldr	r3, [r5, #0]
    69ca:	441c      	add	r4, r3
    69cc:	8126      	strh	r6, [r4, #8]
    69ce:	e7e1      	b.n	6994 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    69d0:	f06f 0706 	mvn.w	r7, #6
    69d4:	e7de      	b.n	6994 <bt_gatt_attr_write_ccc+0x9c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    69d6:	f06f 070c 	mvn.w	r7, #12
    69da:	e7db      	b.n	6994 <bt_gatt_attr_write_ccc+0x9c>
    69dc:	00014c55 	.word	0x00014c55
    69e0:	20003aa4 	.word	0x20003aa4
    69e4:	00015a0b 	.word	0x00015a0b
    69e8:	00015a12 	.word	0x00015a12
    69ec:	00016819 	.word	0x00016819
    69f0:	0001688a 	.word	0x0001688a

000069f4 <notify_cb>:
{
    69f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    69f8:	f642 1302 	movw	r3, #10498	; 0x2902
{
    69fc:	4605      	mov	r5, r0
    69fe:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6a00:	2400      	movs	r4, #0
    6a02:	4669      	mov	r1, sp
    6a04:	6800      	ldr	r0, [r0, #0]
    6a06:	f88d 4000 	strb.w	r4, [sp]
    6a0a:	f8ad 3002 	strh.w	r3, [sp, #2]
    6a0e:	f7fb fa85 	bl	1f1c <bt_uuid_cmp>
    6a12:	b178      	cbz	r0, 6a34 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    6a14:	f642 0303 	movw	r3, #10243	; 0x2803
    6a18:	6828      	ldr	r0, [r5, #0]
    6a1a:	f88d 4004 	strb.w	r4, [sp, #4]
    6a1e:	a901      	add	r1, sp, #4
    6a20:	f8ad 3006 	strh.w	r3, [sp, #6]
    6a24:	f7fb fa7a 	bl	1f1c <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    6a28:	1b00      	subs	r0, r0, r4
    6a2a:	bf18      	it	ne
    6a2c:	2001      	movne	r0, #1
}
    6a2e:	b003      	add	sp, #12
    6a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a34:	68aa      	ldr	r2, [r5, #8]
    6a36:	4b2b      	ldr	r3, [pc, #172]	; (6ae4 <notify_cb+0xf0>)
    6a38:	429a      	cmp	r2, r3
    6a3a:	d001      	beq.n	6a40 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    6a3c:	2001      	movs	r0, #1
    6a3e:	e7f6      	b.n	6a2e <notify_cb+0x3a>
	ccc = attr->user_data;
    6a40:	68ef      	ldr	r7, [r5, #12]
    6a42:	4d29      	ldr	r5, [pc, #164]	; (6ae8 <notify_cb+0xf4>)
	for (i = 0; i < ccc->cfg_len; i++) {
    6a44:	4604      	mov	r4, r0
    6a46:	46a8      	mov	r8, r5
    6a48:	4681      	mov	r9, r0
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	429c      	cmp	r4, r3
    6a4e:	d2f5      	bcs.n	6a3c <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    6a50:	6838      	ldr	r0, [r7, #0]
    6a52:	88b3      	ldrh	r3, [r6, #4]
    6a54:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    6a58:	8902      	ldrh	r2, [r0, #8]
    6a5a:	429a      	cmp	r2, r3
    6a5c:	d114      	bne.n	6a88 <notify_cb+0x94>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6a5e:	f7fd fc39 	bl	42d4 <bt_conn_lookup_addr_le>
		if (!conn) {
    6a62:	4683      	mov	fp, r0
    6a64:	b9f8      	cbnz	r0, 6aa6 <notify_cb+0xb2>
			if (ccc->cfg == sc_ccc_cfg) {
    6a66:	683b      	ldr	r3, [r7, #0]
    6a68:	4543      	cmp	r3, r8
    6a6a:	d10d      	bne.n	6a88 <notify_cb+0x94>
				sc_save(&ccc->cfg[i], data->params);
    6a6c:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    6a6e:	a801      	add	r0, sp, #4
    6a70:	8c1a      	ldrh	r2, [r3, #32]
    6a72:	69d9      	ldr	r1, [r3, #28]
    6a74:	f7fb f8d4 	bl	1c20 <memcpy>
	if (!stored->start && !stored->end) {
    6a78:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    6a7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6a7e:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    6a80:	b928      	cbnz	r0, 6a8e <notify_cb+0x9a>
    6a82:	b942      	cbnz	r2, 6a96 <notify_cb+0xa2>
		*stored = data;
    6a84:	9801      	ldr	r0, [sp, #4]
    6a86:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    6a88:	3401      	adds	r4, #1
    6a8a:	3510      	adds	r5, #16
    6a8c:	e7dd      	b.n	6a4a <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    6a8e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    6a92:	4281      	cmp	r1, r0
    6a94:	d305      	bcc.n	6aa2 <notify_cb+0xae>
    6a96:	429a      	cmp	r2, r3
    6a98:	d2f6      	bcs.n	6a88 <notify_cb+0x94>
	if (*end < new_end) {
    6a9a:	429a      	cmp	r2, r3
    6a9c:	d2f4      	bcs.n	6a88 <notify_cb+0x94>
		*end = new_end;
    6a9e:	81eb      	strh	r3, [r5, #14]
    6aa0:	e7f2      	b.n	6a88 <notify_cb+0x94>
		*start = new_start;
    6aa2:	81a9      	strh	r1, [r5, #12]
    6aa4:	e7f9      	b.n	6a9a <notify_cb+0xa6>
		if (conn->state != BT_CONN_CONNECTED) {
    6aa6:	7a43      	ldrb	r3, [r0, #9]
    6aa8:	2b03      	cmp	r3, #3
    6aaa:	d002      	beq.n	6ab2 <notify_cb+0xbe>
			bt_conn_unref(conn);
    6aac:	f7fd fc48 	bl	4340 <bt_conn_unref>
    6ab0:	e7ea      	b.n	6a88 <notify_cb+0x94>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6ab2:	88b3      	ldrh	r3, [r6, #4]
    6ab4:	2b02      	cmp	r3, #2
    6ab6:	d10c      	bne.n	6ad2 <notify_cb+0xde>
			err = gatt_indicate(conn, data->params);
    6ab8:	6971      	ldr	r1, [r6, #20]
    6aba:	f7ff fd2b 	bl	6514 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle,
    6abe:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    6ac0:	4658      	mov	r0, fp
    6ac2:	f7fd fc3d 	bl	4340 <bt_conn_unref>
		if (err < 0) {
    6ac6:	f1ba 0f00 	cmp.w	sl, #0
    6aca:	db09      	blt.n	6ae0 <notify_cb+0xec>
		data->err = 0;
    6acc:	f8c6 9000 	str.w	r9, [r6]
    6ad0:	e7da      	b.n	6a88 <notify_cb+0x94>
			err = gatt_notify(conn, data->attr->handle,
    6ad2:	68b1      	ldr	r1, [r6, #8]
    6ad4:	8a33      	ldrh	r3, [r6, #16]
    6ad6:	68f2      	ldr	r2, [r6, #12]
    6ad8:	8a09      	ldrh	r1, [r1, #16]
    6ada:	f7ff fcd9 	bl	6490 <gatt_notify>
    6ade:	e7ee      	b.n	6abe <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    6ae0:	2000      	movs	r0, #0
    6ae2:	e7a4      	b.n	6a2e <notify_cb+0x3a>
    6ae4:	000068f9 	.word	0x000068f9
    6ae8:	20000604 	.word	0x20000604

00006aec <bt_gatt_init>:
{
    6aec:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    6aee:	4806      	ldr	r0, [pc, #24]	; (6b08 <bt_gatt_init+0x1c>)
    6af0:	f7ff fc80 	bl	63f4 <gatt_register>
	gatt_register(&gatt_svc);
    6af4:	4805      	ldr	r0, [pc, #20]	; (6b0c <bt_gatt_init+0x20>)
    6af6:	f7ff fc7d 	bl	63f4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6afa:	4905      	ldr	r1, [pc, #20]	; (6b10 <bt_gatt_init+0x24>)
    6afc:	4805      	ldr	r0, [pc, #20]	; (6b14 <bt_gatt_init+0x28>)
}
    6afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    6b02:	f00d bdc5 	b.w	14690 <k_delayed_work_init>
    6b06:	bf00      	nop
    6b08:	20003cec 	.word	0x20003cec
    6b0c:	20003d48 	.word	0x20003d48
    6b10:	00006b99 	.word	0x00006b99
    6b14:	200005d8 	.word	0x200005d8

00006b18 <bt_gatt_foreach_attr>:
{
    6b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b1c:	4699      	mov	r9, r3
    6b1e:	4b12      	ldr	r3, [pc, #72]	; (6b68 <bt_gatt_foreach_attr+0x50>)
    6b20:	681c      	ldr	r4, [r3, #0]
    6b22:	4606      	mov	r6, r0
    6b24:	460f      	mov	r7, r1
    6b26:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6b28:	b1dc      	cbz	r4, 6b62 <bt_gatt_foreach_attr+0x4a>
    6b2a:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6b2c:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6b30:	b1bc      	cbz	r4, 6b62 <bt_gatt_foreach_attr+0x4a>
    6b32:	2500      	movs	r5, #0
    6b34:	e006      	b.n	6b44 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6b36:	6820      	ldr	r0, [r4, #0]
    6b38:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    6b3c:	8a03      	ldrh	r3, [r0, #16]
    6b3e:	42b3      	cmp	r3, r6
    6b40:	d207      	bcs.n	6b52 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    6b42:	3501      	adds	r5, #1
    6b44:	6863      	ldr	r3, [r4, #4]
    6b46:	42ab      	cmp	r3, r5
    6b48:	d8f5      	bhi.n	6b36 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    6b4a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6b4c:	b14c      	cbz	r4, 6b62 <bt_gatt_foreach_attr+0x4a>
    6b4e:	3c08      	subs	r4, #8
    6b50:	e7ee      	b.n	6b30 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    6b52:	42bb      	cmp	r3, r7
    6b54:	d8f5      	bhi.n	6b42 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6b56:	4649      	mov	r1, r9
    6b58:	47c0      	blx	r8
    6b5a:	2800      	cmp	r0, #0
    6b5c:	d1f1      	bne.n	6b42 <bt_gatt_foreach_attr+0x2a>
    6b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b66:	bf00      	nop
    6b68:	200005a8 	.word	0x200005a8

00006b6c <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    6b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    6b6e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    6b72:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6b74:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    6b76:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6b78:	2302      	movs	r3, #2
    6b7a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6b7e:	4a05      	ldr	r2, [pc, #20]	; (6b94 <bt_gatt_indicate.part.10+0x28>)
    6b80:	8a00      	ldrh	r0, [r0, #16]
    6b82:	466b      	mov	r3, sp
    6b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6b88:	f7ff ffc6 	bl	6b18 <bt_gatt_foreach_attr>
}
    6b8c:	9800      	ldr	r0, [sp, #0]
    6b8e:	b007      	add	sp, #28
    6b90:	f85d fb04 	ldr.w	pc, [sp], #4
    6b94:	000069f5 	.word	0x000069f5

00006b98 <sc_process>:
{
    6b98:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    6b9a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    6b9e:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    6ba2:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6ba4:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    6ba8:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6bac:	3828      	subs	r0, #40	; 0x28
    6bae:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6bb2:	f3bf 8f5b 	dmb	ish
    6bb6:	e854 2f00 	ldrex	r2, [r4]
    6bba:	f022 0201 	bic.w	r2, r2, #1
    6bbe:	e844 2100 	strex	r1, r2, [r4]
    6bc2:	2900      	cmp	r1, #0
    6bc4:	d1f7      	bne.n	6bb6 <sc_process+0x1e>
    6bc6:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    6bca:	2200      	movs	r2, #0
    6bcc:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    6bd0:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    6bd4:	4a0e      	ldr	r2, [pc, #56]	; (6c10 <sc_process+0x78>)
    6bd6:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    6bda:	4a0e      	ldr	r2, [pc, #56]	; (6c14 <sc_process+0x7c>)
    6bdc:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    6be0:	aa01      	add	r2, sp, #4
    6be2:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    6be6:	2204      	movs	r2, #4
    6be8:	f823 2c08 	strh.w	r2, [r3, #-8]
    6bec:	f7ff ffbe 	bl	6b6c <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6bf0:	b958      	cbnz	r0, 6c0a <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6bf2:	f3bf 8f5b 	dmb	ish
    6bf6:	e854 3f00 	ldrex	r3, [r4]
    6bfa:	f043 0302 	orr.w	r3, r3, #2
    6bfe:	e844 3200 	strex	r2, r3, [r4]
    6c02:	2a00      	cmp	r2, #0
    6c04:	d1f7      	bne.n	6bf6 <sc_process+0x5e>
    6c06:	f3bf 8f5b 	dmb	ish
}
    6c0a:	b002      	add	sp, #8
    6c0c:	bd10      	pop	{r4, pc}
    6c0e:	bf00      	nop
    6c10:	20003d20 	.word	0x20003d20
    6c14:	000066dd 	.word	0x000066dd

00006c18 <bt_gatt_attr_next>:
{
    6c18:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6c1a:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6c1c:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6c1e:	3101      	adds	r1, #1
    6c20:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6c22:	2200      	movs	r2, #0
    6c24:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6c28:	4608      	mov	r0, r1
    6c2a:	4a03      	ldr	r2, [pc, #12]	; (6c38 <bt_gatt_attr_next+0x20>)
    6c2c:	f7ff ff74 	bl	6b18 <bt_gatt_foreach_attr>
}
    6c30:	9801      	ldr	r0, [sp, #4]
    6c32:	b003      	add	sp, #12
    6c34:	f85d fb04 	ldr.w	pc, [sp], #4
    6c38:	000063ad 	.word	0x000063ad

00006c3c <bt_gatt_attr_read_chrc>:
{
    6c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6c40:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    6c44:	b08b      	sub	sp, #44	; 0x2c
    6c46:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6c48:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    6c4a:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    6c4e:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    6c52:	f88d 3014 	strb.w	r3, [sp, #20]
{
    6c56:	4688      	mov	r8, r1
    6c58:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    6c5a:	f7ff ffdd 	bl	6c18 <bt_gatt_attr_next>
	if (!next) {
    6c5e:	4605      	mov	r5, r0
    6c60:	bb50      	cbnz	r0, 6cb8 <bt_gatt_attr_read_chrc+0x7c>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6c62:	4b1d      	ldr	r3, [pc, #116]	; (6cd8 <bt_gatt_attr_read_chrc+0x9c>)
    6c64:	9302      	str	r3, [sp, #8]
    6c66:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    6c6a:	9300      	str	r3, [sp, #0]
    6c6c:	4b1b      	ldr	r3, [pc, #108]	; (6cdc <bt_gatt_attr_read_chrc+0xa0>)
    6c6e:	9201      	str	r2, [sp, #4]
    6c70:	f8d3 8000 	ldr.w	r8, [r3]
    6c74:	4a1a      	ldr	r2, [pc, #104]	; (6ce0 <bt_gatt_attr_read_chrc+0xa4>)
    6c76:	4b1b      	ldr	r3, [pc, #108]	; (6ce4 <bt_gatt_attr_read_chrc+0xa8>)
    6c78:	491b      	ldr	r1, [pc, #108]	; (6ce8 <bt_gatt_attr_read_chrc+0xac>)
    6c7a:	481c      	ldr	r0, [pc, #112]	; (6cec <bt_gatt_attr_read_chrc+0xb0>)
    6c7c:	47c0      	blx	r8
		pdu.value_handle = 0x0000;
    6c7e:	f88d 5015 	strb.w	r5, [sp, #21]
    6c82:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6c86:	f8d9 1000 	ldr.w	r1, [r9]
    6c8a:	780b      	ldrb	r3, [r1, #0]
    6c8c:	b9c3      	cbnz	r3, 6cc0 <bt_gatt_attr_read_chrc+0x84>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6c8e:	884b      	ldrh	r3, [r1, #2]
    6c90:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    6c94:	2305      	movs	r3, #5
	if (offset > value_len) {
    6c96:	42b3      	cmp	r3, r6
    6c98:	d31a      	bcc.n	6cd0 <bt_gatt_attr_read_chrc+0x94>
	len = min(buf_len, value_len - offset);
    6c9a:	1b9b      	subs	r3, r3, r6
    6c9c:	42a3      	cmp	r3, r4
    6c9e:	bfa8      	it	ge
    6ca0:	4623      	movge	r3, r4
    6ca2:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6ca4:	ab05      	add	r3, sp, #20
    6ca6:	4622      	mov	r2, r4
    6ca8:	1999      	adds	r1, r3, r6
    6caa:	4638      	mov	r0, r7
    6cac:	f7fa ffb8 	bl	1c20 <memcpy>
}
    6cb0:	4620      	mov	r0, r4
    6cb2:	b00b      	add	sp, #44	; 0x2c
    6cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6cb8:	8a03      	ldrh	r3, [r0, #16]
    6cba:	f8ad 3015 	strh.w	r3, [sp, #21]
    6cbe:	e7e2      	b.n	6c86 <bt_gatt_attr_read_chrc+0x4a>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6cc0:	2210      	movs	r2, #16
    6cc2:	3101      	adds	r1, #1
    6cc4:	f10d 0017 	add.w	r0, sp, #23
    6cc8:	f7fa ffaa 	bl	1c20 <memcpy>
		value_len += 16;
    6ccc:	2313      	movs	r3, #19
    6cce:	e7e2      	b.n	6c96 <bt_gatt_attr_read_chrc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6cd0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6cd4:	e7ec      	b.n	6cb0 <bt_gatt_attr_read_chrc+0x74>
    6cd6:	bf00      	nop
    6cd8:	00014c55 	.word	0x00014c55
    6cdc:	20003aa4 	.word	0x20003aa4
    6ce0:	00015a0b 	.word	0x00015a0b
    6ce4:	00016802 	.word	0x00016802
    6ce8:	00015a12 	.word	0x00015a12
    6cec:	00016854 	.word	0x00016854

00006cf0 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6cf0:	4603      	mov	r3, r0
    6cf2:	4a03      	ldr	r2, [pc, #12]	; (6d00 <bt_gatt_connected+0x10>)
    6cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6cf8:	2001      	movs	r0, #1
    6cfa:	f7ff bf0d 	b.w	6b18 <bt_gatt_foreach_attr>
    6cfe:	bf00      	nop
    6d00:	0000666d 	.word	0x0000666d

00006d04 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6d04:	4603      	mov	r3, r0
    6d06:	4a03      	ldr	r2, [pc, #12]	; (6d14 <bt_gatt_disconnected+0x10>)
    6d08:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d0c:	2001      	movs	r0, #1
    6d0e:	f7ff bf03 	b.w	6b18 <bt_gatt_foreach_attr>
    6d12:	bf00      	nop
    6d14:	00006755 	.word	0x00006755

00006d18 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6d1a:	4a0b      	ldr	r2, [pc, #44]	; (6d48 <bt_smp_accept+0x30>)
    6d1c:	6813      	ldr	r3, [r2, #0]
    6d1e:	b92b      	cbnz	r3, 6d2c <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    6d20:	480a      	ldr	r0, [pc, #40]	; (6d4c <bt_smp_accept+0x34>)
    6d22:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6d24:	600a      	str	r2, [r1, #0]

		return 0;
    6d26:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    6d28:	b004      	add	sp, #16
    6d2a:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    6d2c:	4b08      	ldr	r3, [pc, #32]	; (6d50 <bt_smp_accept+0x38>)
    6d2e:	9302      	str	r3, [sp, #8]
    6d30:	9300      	str	r3, [sp, #0]
    6d32:	4b08      	ldr	r3, [pc, #32]	; (6d54 <bt_smp_accept+0x3c>)
    6d34:	9001      	str	r0, [sp, #4]
    6d36:	681c      	ldr	r4, [r3, #0]
    6d38:	4807      	ldr	r0, [pc, #28]	; (6d58 <bt_smp_accept+0x40>)
    6d3a:	4b08      	ldr	r3, [pc, #32]	; (6d5c <bt_smp_accept+0x44>)
    6d3c:	4a08      	ldr	r2, [pc, #32]	; (6d60 <bt_smp_accept+0x48>)
    6d3e:	4909      	ldr	r1, [pc, #36]	; (6d64 <bt_smp_accept+0x4c>)
    6d40:	47a0      	blx	r4
	return -ENOMEM;
    6d42:	f06f 000b 	mvn.w	r0, #11
    6d46:	e7ef      	b.n	6d28 <bt_smp_accept+0x10>
    6d48:	20000614 	.word	0x20000614
    6d4c:	20003d60 	.word	0x20003d60
    6d50:	00014c55 	.word	0x00014c55
    6d54:	20003aa4 	.word	0x20003aa4
    6d58:	00016994 	.word	0x00016994
    6d5c:	00016986 	.word	0x00016986
    6d60:	000159c3 	.word	0x000159c3
    6d64:	00015a12 	.word	0x00015a12

00006d68 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    6d68:	2100      	movs	r1, #0
{
    6d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    6d6e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    6d70:	4608      	mov	r0, r1
    6d72:	f7fe f87e 	bl	4e72 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6d76:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    6d7a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6d7c:	2101      	movs	r1, #1
    6d7e:	4630      	mov	r0, r6
    6d80:	f00c f8c4 	bl	12f0c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    6d84:	2505      	movs	r5, #5
    6d86:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    6d88:	2101      	movs	r1, #1
    6d8a:	4630      	mov	r0, r6
    6d8c:	f00c f8be 	bl	12f0c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    6d90:	7005      	strb	r5, [r0, #0]
    6d92:	4622      	mov	r2, r4
    6d94:	4638      	mov	r0, r7
    6d96:	2300      	movs	r3, #0
    6d98:	2106      	movs	r1, #6
}
    6d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d9e:	f7fe b86b 	b.w	4e78 <bt_l2cap_send_cb>

00006da2 <bt_smp_sign_verify>:
    6da2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6da6:	4770      	bx	lr

00006da8 <bt_smp_init>:

int bt_smp_init(void)
{
    6da8:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6daa:	4802      	ldr	r0, [pc, #8]	; (6db4 <bt_smp_init+0xc>)
    6dac:	f7fd ffa4 	bl	4cf8 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    6db0:	2000      	movs	r0, #0
    6db2:	bd08      	pop	{r3, pc}
    6db4:	20003d54 	.word	0x20003d54

00006db8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    6db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    6dba:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6dbc:	1dc3      	adds	r3, r0, #7
{
    6dbe:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6dc0:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6dc4:	1e50      	subs	r0, r2, #1
{
    6dc6:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6dc8:	b280      	uxth	r0, r0
{
    6dca:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6dcc:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6dce:	2100      	movs	r1, #0
    6dd0:	2204      	movs	r2, #4
    6dd2:	fb06 5000 	mla	r0, r6, r0, r5
    6dd6:	f7fa ff4f 	bl	1c78 <memset>
    6dda:	3c02      	subs	r4, #2
    6ddc:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    6dde:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6de2:	42bc      	cmp	r4, r7
    6de4:	d101      	bne.n	6dea <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    6de6:	b003      	add	sp, #12
    6de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    6dea:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    6dee:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6df0:	2204      	movs	r2, #4
    6df2:	1b80      	subs	r0, r0, r6
    6df4:	eb0d 0102 	add.w	r1, sp, r2
    6df8:	4428      	add	r0, r5
    6dfa:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    6dfc:	9301      	str	r3, [sp, #4]
    6dfe:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6e00:	f7fa ff0e 	bl	1c20 <memcpy>
    6e04:	e7ed      	b.n	6de2 <mem_init+0x2a>

00006e06 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    6e08:	6805      	ldr	r5, [r0, #0]
{
    6e0a:	4606      	mov	r6, r0
	if (*mem_head) {
    6e0c:	b195      	cbz	r5, 6e34 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6e0e:	1deb      	adds	r3, r5, #7
    6e10:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6e14:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6e16:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6e18:	4629      	mov	r1, r5
    6e1a:	eb0d 0002 	add.w	r0, sp, r2
    6e1e:	f7fa feff 	bl	1c20 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6e22:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    6e24:	3c01      	subs	r4, #1
    6e26:	b2a4      	uxth	r4, r4
		if (head) {
    6e28:	b11b      	cbz	r3, 6e32 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6e2a:	1dda      	adds	r2, r3, #7
    6e2c:	f022 0203 	bic.w	r2, r2, #3
    6e30:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6e32:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    6e34:	4628      	mov	r0, r5
    6e36:	b002      	add	sp, #8
    6e38:	bd70      	pop	{r4, r5, r6, pc}

00006e3a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    6e3a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6e3c:	680c      	ldr	r4, [r1, #0]
{
    6e3e:	4606      	mov	r6, r0
    6e40:	460d      	mov	r5, r1
	if (*mem_head) {
    6e42:	b11c      	cbz	r4, 6e4c <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    6e44:	1de3      	adds	r3, r4, #7
    6e46:	f023 0303 	bic.w	r3, r3, #3
    6e4a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6e4c:	2204      	movs	r2, #4
    6e4e:	4629      	mov	r1, r5
    6e50:	4630      	mov	r0, r6
    6e52:	f7fa fee5 	bl	1c20 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6e56:	1df2      	adds	r2, r6, #7
    6e58:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    6e5c:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6e5e:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    6e60:	602e      	str	r6, [r5, #0]
    6e62:	bd70      	pop	{r4, r5, r6, pc}

00006e64 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    6e64:	b118      	cbz	r0, 6e6e <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6e66:	3007      	adds	r0, #7
    6e68:	f020 0003 	bic.w	r0, r0, #3
    6e6c:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    6e6e:	4770      	bx	lr

00006e70 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    6e70:	fb02 0001 	mla	r0, r2, r1, r0
    6e74:	4770      	bx	lr

00006e76 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    6e76:	1a40      	subs	r0, r0, r1
    6e78:	b280      	uxth	r0, r0
}
    6e7a:	fbb0 f0f2 	udiv	r0, r0, r2
    6e7e:	4770      	bx	lr

00006e80 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    6e80:	b510      	push	{r4, lr}
	src += len;
    6e82:	4411      	add	r1, r2
    6e84:	3801      	subs	r0, #1
	while (len--) {
    6e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e8a:	3a01      	subs	r2, #1
    6e8c:	b292      	uxth	r2, r2
    6e8e:	429a      	cmp	r2, r3
    6e90:	d100      	bne.n	6e94 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    6e92:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    6e94:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    6e98:	f800 4f01 	strb.w	r4, [r0, #1]!
    6e9c:	e7f5      	b.n	6e8a <mem_rcopy+0xa>

00006e9e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    6e9e:	4401      	add	r1, r0
	while (len--) {
    6ea0:	4288      	cmp	r0, r1
    6ea2:	d101      	bne.n	6ea8 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    6ea4:	2000      	movs	r0, #0
    6ea6:	4770      	bx	lr
		if (*src++) {
    6ea8:	f810 3b01 	ldrb.w	r3, [r0], #1
    6eac:	2b00      	cmp	r3, #0
    6eae:	d0f7      	beq.n	6ea0 <mem_nz+0x2>
			return 1;
    6eb0:	2001      	movs	r0, #1
}
    6eb2:	4770      	bx	lr

00006eb4 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    6eb4:	6010      	str	r0, [r2, #0]
    6eb6:	6008      	str	r0, [r1, #0]

	return link;
}
    6eb8:	4770      	bx	lr

00006eba <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    6eba:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    6ebc:	6814      	ldr	r4, [r2, #0]
    6ebe:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    6ec0:	6814      	ldr	r4, [r2, #0]
    6ec2:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    6ec4:	6010      	str	r0, [r2, #0]

	return link;
}
    6ec6:	bd10      	pop	{r4, pc}

00006ec8 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6ec8:	4288      	cmp	r0, r1
    6eca:	d003      	beq.n	6ed4 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    6ecc:	b11a      	cbz	r2, 6ed6 <memq_peek+0xe>
		*mem = head->mem;
    6ece:	6843      	ldr	r3, [r0, #4]
    6ed0:	6013      	str	r3, [r2, #0]
    6ed2:	4770      	bx	lr
		return NULL;
    6ed4:	2000      	movs	r0, #0
	}

	return head;
}
    6ed6:	4770      	bx	lr

00006ed8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    6ed8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6eda:	4283      	cmp	r3, r0
    6edc:	d009      	beq.n	6ef2 <memq_dequeue+0x1a>
	if (mem) {
    6ede:	b122      	cbz	r2, 6eea <memq_dequeue+0x12>
		*mem = head->mem;
    6ee0:	6858      	ldr	r0, [r3, #4]
    6ee2:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    6ee4:	681a      	ldr	r2, [r3, #0]
    6ee6:	600a      	str	r2, [r1, #0]

	return link;
    6ee8:	e001      	b.n	6eee <memq_dequeue+0x16>
	if (!link) {
    6eea:	2b00      	cmp	r3, #0
    6eec:	d1fa      	bne.n	6ee4 <memq_dequeue+0xc>
}
    6eee:	4618      	mov	r0, r3
    6ef0:	4770      	bx	lr
		return NULL;
    6ef2:	2300      	movs	r3, #0
    6ef4:	e7fb      	b.n	6eee <memq_dequeue+0x16>
	...

00006ef8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    6ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    6efc:	4f11      	ldr	r7, [pc, #68]	; (6f44 <mayfly_init+0x4c>)
    6efe:	f8df 9048 	ldr.w	r9, [pc, #72]	; 6f48 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    6f02:	2604      	movs	r6, #4
	while (callee_id--) {
    6f04:	3e01      	subs	r6, #1
    6f06:	b2f6      	uxtb	r6, r6
    6f08:	2eff      	cmp	r6, #255	; 0xff
    6f0a:	d019      	beq.n	6f40 <mayfly_init+0x48>
    6f0c:	b233      	sxth	r3, r6
    6f0e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6f16:	011d      	lsls	r5, r3, #4
    6f18:	2404      	movs	r4, #4
    6f1a:	f04f 0a0c 	mov.w	sl, #12
    6f1e:	e00a      	b.n	6f36 <mayfly_init+0x3e>
    6f20:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    6f24:	1d0a      	adds	r2, r1, #4
    6f26:	eb04 0008 	add.w	r0, r4, r8
    6f2a:	443a      	add	r2, r7
    6f2c:	4439      	add	r1, r7
    6f2e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    6f32:	f7ff ffbf 	bl	6eb4 <memq_init>
		while (caller_id--) {
    6f36:	3c01      	subs	r4, #1
    6f38:	b2e4      	uxtb	r4, r4
    6f3a:	2cff      	cmp	r4, #255	; 0xff
    6f3c:	d1f0      	bne.n	6f20 <mayfly_init+0x28>
    6f3e:	e7e1      	b.n	6f04 <mayfly_init+0xc>
    6f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f44:	20000734 	.word	0x20000734
    6f48:	200006b4 	.word	0x200006b4

00006f4c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    6f4c:	b4f0      	push	{r4, r5, r6, r7}
    6f4e:	4b12      	ldr	r3, [pc, #72]	; (6f98 <mayfly_enable+0x4c>)
    6f50:	4605      	mov	r5, r0
    6f52:	460f      	mov	r7, r1
    6f54:	260c      	movs	r6, #12
    6f56:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    6f58:	b172      	cbz	r2, 6f78 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    6f5a:	4361      	muls	r1, r4
    6f5c:	fb06 1400 	mla	r4, r6, r0, r1
    6f60:	4423      	add	r3, r4
    6f62:	7a59      	ldrb	r1, [r3, #9]
    6f64:	7a18      	ldrb	r0, [r3, #8]
    6f66:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6f68:	bf04      	itt	eq
    6f6a:	3101      	addeq	r1, #1
    6f6c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6f6e:	4628      	mov	r0, r5
    6f70:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6f72:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6f74:	f00b bda2 	b.w	12abc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6f78:	434c      	muls	r4, r1
    6f7a:	fb06 4400 	mla	r4, r6, r0, r4
    6f7e:	4423      	add	r3, r4
    6f80:	7a9c      	ldrb	r4, [r3, #10]
    6f82:	7ada      	ldrb	r2, [r3, #11]
    6f84:	42a2      	cmp	r2, r4
    6f86:	d104      	bne.n	6f92 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    6f88:	3201      	adds	r2, #1
    6f8a:	729a      	strb	r2, [r3, #10]
}
    6f8c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    6f8e:	f00b bdfb 	b.w	12b88 <mayfly_pend>
}
    6f92:	bcf0      	pop	{r4, r5, r6, r7}
    6f94:	4770      	bx	lr
    6f96:	bf00      	nop
    6f98:	20000734 	.word	0x20000734

00006f9c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f9e:	4605      	mov	r5, r0
    6fa0:	460e      	mov	r6, r1
    6fa2:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6fa4:	b18a      	cbz	r2, 6fca <mayfly_enqueue+0x2e>
    6fa6:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6fa8:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6faa:	7820      	ldrb	r0, [r4, #0]
    6fac:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    6fae:	f010 0703 	ands.w	r7, r0, #3
    6fb2:	d029      	beq.n	7008 <mayfly_enqueue+0x6c>
		if (chain) {
    6fb4:	b303      	cbz	r3, 6ff8 <mayfly_enqueue+0x5c>
			if (state != 1) {
    6fb6:	2f01      	cmp	r7, #1
    6fb8:	d039      	beq.n	702e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6fba:	3201      	adds	r2, #1
    6fbc:	b2d2      	uxtb	r2, r2
    6fbe:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6fc0:	4631      	mov	r1, r6
    6fc2:	4628      	mov	r0, r5
    6fc4:	f00b fde0 	bl	12b88 <mayfly_pend>
    6fc8:	e01c      	b.n	7004 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6fca:	f00b fdcb 	bl	12b64 <mayfly_prio_is_equal>
    6fce:	2800      	cmp	r0, #0
    6fd0:	d0e9      	beq.n	6fa6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6fd2:	4631      	mov	r1, r6
    6fd4:	4628      	mov	r0, r5
    6fd6:	f00b fd9d 	bl	12b14 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6fda:	2800      	cmp	r0, #0
    6fdc:	d0e3      	beq.n	6fa6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    6fde:	2330      	movs	r3, #48	; 0x30
    6fe0:	220c      	movs	r2, #12
    6fe2:	4373      	muls	r3, r6
    6fe4:	fb02 3305 	mla	r3, r2, r5, r3
    6fe8:	4a12      	ldr	r2, [pc, #72]	; (7034 <mayfly_enqueue+0x98>)
    6fea:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6fec:	7a93      	ldrb	r3, [r2, #10]
    6fee:	7ad2      	ldrb	r2, [r2, #11]
    6ff0:	1a9b      	subs	r3, r3, r2
    6ff2:	bf18      	it	ne
    6ff4:	2301      	movne	r3, #1
    6ff6:	e7d7      	b.n	6fa8 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6ff8:	3202      	adds	r2, #2
    6ffa:	b2d2      	uxtb	r2, r2
    6ffc:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    6ffe:	68e3      	ldr	r3, [r4, #12]
    7000:	68a0      	ldr	r0, [r4, #8]
    7002:	4798      	blx	r3
		return 0;
    7004:	2000      	movs	r0, #0
    7006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7008:	2b00      	cmp	r3, #0
    700a:	d0f8      	beq.n	6ffe <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    700c:	3201      	adds	r2, #1
    700e:	b2d2      	uxtb	r2, r2
    7010:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7012:	2304      	movs	r3, #4
    7014:	2230      	movs	r2, #48	; 0x30
    7016:	fb12 3206 	smlabb	r2, r2, r6, r3
    701a:	230c      	movs	r3, #12
    701c:	fb13 2305 	smlabb	r3, r3, r5, r2
    7020:	4a04      	ldr	r2, [pc, #16]	; (7034 <mayfly_enqueue+0x98>)
    7022:	6860      	ldr	r0, [r4, #4]
    7024:	441a      	add	r2, r3
    7026:	4621      	mov	r1, r4
    7028:	f7ff ff47 	bl	6eba <memq_enqueue>
    702c:	e7c8      	b.n	6fc0 <mayfly_enqueue+0x24>
			return 1;
    702e:	4638      	mov	r0, r7

	return 0;
}
    7030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7032:	bf00      	nop
    7034:	20000734 	.word	0x20000734

00007038 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    7038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    703c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7040:	b089      	sub	sp, #36	; 0x24
    7042:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    7044:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7048:	4e43      	ldr	r6, [pc, #268]	; (7158 <mayfly_run+0x120>)
    704a:	9304      	str	r3, [sp, #16]
{
    704c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    704e:	2404      	movs	r4, #4
	u8_t disable = 0;
    7050:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    7054:	3c01      	subs	r4, #1
    7056:	b2e4      	uxtb	r4, r4
    7058:	2cff      	cmp	r4, #255	; 0xff
    705a:	d10b      	bne.n	7074 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    705c:	9b01      	ldr	r3, [sp, #4]
    705e:	2b00      	cmp	r3, #0
    7060:	d076      	beq.n	7150 <mayfly_run+0x118>
    7062:	f1b8 0f00 	cmp.w	r8, #0
    7066:	d173      	bne.n	7150 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7068:	4642      	mov	r2, r8
    706a:	4629      	mov	r1, r5
    706c:	4628      	mov	r0, r5
    706e:	f00b fd25 	bl	12abc <mayfly_enable_cb>
    7072:	e06d      	b.n	7150 <mayfly_run+0x118>
		struct mayfly *m = 0;
    7074:	f10d 0b20 	add.w	fp, sp, #32
    7078:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    707a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    707c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7080:	f04f 0930 	mov.w	r9, #48	; 0x30
    7084:	fb07 f304 	mul.w	r3, r7, r4
    7088:	fb09 3005 	mla	r0, r9, r5, r3
    708c:	1831      	adds	r1, r6, r0
    708e:	465a      	mov	r2, fp
    7090:	6849      	ldr	r1, [r1, #4]
    7092:	5830      	ldr	r0, [r6, r0]
    7094:	9302      	str	r3, [sp, #8]
    7096:	f7ff ff17 	bl	6ec8 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    709a:	9b04      	ldr	r3, [sp, #16]
    709c:	fb17 3704 	smlabb	r7, r7, r4, r3
    70a0:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    70a2:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    70a4:	9303      	str	r3, [sp, #12]
		while (link) {
    70a6:	f1ba 0f00 	cmp.w	sl, #0
    70aa:	d119      	bne.n	70e0 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    70ac:	2230      	movs	r2, #48	; 0x30
    70ae:	230c      	movs	r3, #12
    70b0:	436a      	muls	r2, r5
    70b2:	fb03 2204 	mla	r2, r3, r4, r2
    70b6:	4432      	add	r2, r6
    70b8:	7a91      	ldrb	r1, [r2, #10]
    70ba:	7ad0      	ldrb	r0, [r2, #11]
    70bc:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    70be:	bf1e      	ittt	ne
    70c0:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    70c2:	2201      	movne	r2, #1
    70c4:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    70c6:	2230      	movs	r2, #48	; 0x30
    70c8:	436a      	muls	r2, r5
    70ca:	fb03 2304 	mla	r3, r3, r4, r2
    70ce:	4433      	add	r3, r6
    70d0:	7a1a      	ldrb	r2, [r3, #8]
    70d2:	7a59      	ldrb	r1, [r3, #9]
    70d4:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    70d6:	bf1c      	itt	ne
    70d8:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    70da:	f04f 0801 	movne.w	r8, #1
    70de:	e7b9      	b.n	7054 <mayfly_run+0x1c>
			req = m->_req;
    70e0:	9b07      	ldr	r3, [sp, #28]
    70e2:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    70e4:	785a      	ldrb	r2, [r3, #1]
    70e6:	1abf      	subs	r7, r7, r2
    70e8:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    70ec:	2f01      	cmp	r7, #1
    70ee:	d104      	bne.n	70fa <mayfly_run+0xc2>
				m->_ack--;
    70f0:	3a01      	subs	r2, #1
    70f2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    70f4:	6898      	ldr	r0, [r3, #8]
    70f6:	68da      	ldr	r2, [r3, #12]
    70f8:	4790      	blx	r2
			req = m->_req;
    70fa:	9a07      	ldr	r2, [sp, #28]
    70fc:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    70fe:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7100:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7102:	1a9a      	subs	r2, r3, r2
    7104:	f002 0203 	and.w	r2, r2, #3
    7108:	2a01      	cmp	r2, #1
    710a:	9305      	str	r3, [sp, #20]
    710c:	d00d      	beq.n	712a <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    710e:	9b02      	ldr	r3, [sp, #8]
    7110:	9903      	ldr	r1, [sp, #12]
    7112:	fb09 3005 	mla	r0, r9, r5, r3
    7116:	4430      	add	r0, r6
    7118:	2200      	movs	r2, #0
    711a:	6840      	ldr	r0, [r0, #4]
    711c:	f7ff fedc 	bl	6ed8 <memq_dequeue>
				m->_link = link;
    7120:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7122:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7124:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7128:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    712a:	9b02      	ldr	r3, [sp, #8]
    712c:	fb09 3305 	mla	r3, r9, r5, r3
    7130:	18f1      	adds	r1, r6, r3
    7132:	465a      	mov	r2, fp
    7134:	6849      	ldr	r1, [r1, #4]
    7136:	58f0      	ldr	r0, [r6, r3]
    7138:	f7ff fec6 	bl	6ec8 <memq_peek>
			if (state == 1) {
    713c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    713e:	4682      	mov	sl, r0
			if (state == 1) {
    7140:	d1b1      	bne.n	70a6 <mayfly_run+0x6e>
				if (caller_id || link) {
    7142:	b90c      	cbnz	r4, 7148 <mayfly_run+0x110>
    7144:	2800      	cmp	r0, #0
    7146:	d0b1      	beq.n	70ac <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7148:	4629      	mov	r1, r5
    714a:	4628      	mov	r0, r5
    714c:	f00b fd1c 	bl	12b88 <mayfly_pend>
	}
}
    7150:	b009      	add	sp, #36	; 0x24
    7152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7156:	bf00      	nop
    7158:	20000734 	.word	0x20000734

0000715c <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    715c:	b510      	push	{r4, lr}
    715e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7160:	2000      	movs	r0, #0

	while (octets_len--) {
    7162:	3901      	subs	r1, #1
    7164:	b2c9      	uxtb	r1, r1
    7166:	29ff      	cmp	r1, #255	; 0xff
    7168:	d100      	bne.n	716c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    716a:	bd10      	pop	{r4, pc}
		bite = *octets;
    716c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7170:	2b00      	cmp	r3, #0
    7172:	d0f6      	beq.n	7162 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7174:	1e5c      	subs	r4, r3, #1
			one_count++;
    7176:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7178:	4023      	ands	r3, r4
			one_count++;
    717a:	b2c0      	uxtb	r0, r0
    717c:	e7f8      	b.n	7170 <util_ones_count_get+0x14>

0000717e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    717e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7180:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7182:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7184:	461a      	mov	r2, r3
	total = 0;
    7186:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7188:	2aff      	cmp	r2, #255	; 0xff
    718a:	d101      	bne.n	7190 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    718c:	2000      	movs	r0, #0
    718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7190:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7194:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7196:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    719a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    719e:	d004      	beq.n	71aa <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    71a0:	68b3      	ldr	r3, [r6, #8]
    71a2:	441c      	add	r4, r3
		current = ticker_current->next;
    71a4:	4613      	mov	r3, r2
    71a6:	463a      	mov	r2, r7
    71a8:	e7ee      	b.n	7188 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    71aa:	4293      	cmp	r3, r2
    71ac:	d100      	bne.n	71b0 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    71ae:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    71b0:	b21b      	sxth	r3, r3
    71b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    71b6:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    71b8:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    71ba:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    71be:	7833      	ldrb	r3, [r6, #0]
    71c0:	2bff      	cmp	r3, #255	; 0xff
    71c2:	d006      	beq.n	71d2 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    71c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    71c8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    71cc:	689a      	ldr	r2, [r3, #8]
    71ce:	4402      	add	r2, r0
    71d0:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    71d2:	4420      	add	r0, r4
    71d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071d6 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    71d6:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    71d8:	1a55      	subs	r5, r2, r1
    71da:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    71de:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    71e0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    71e2:	d109      	bne.n	71f8 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    71e4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    71e8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    71ea:	42a2      	cmp	r2, r4
    71ec:	d90e      	bls.n	720c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    71ee:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    71f0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    71f2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    71f4:	6144      	str	r4, [r0, #20]
    71f6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    71f8:	1a8a      	subs	r2, r1, r2
    71fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    71fe:	4293      	cmp	r3, r2
    7200:	d901      	bls.n	7206 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7202:	1a9a      	subs	r2, r3, r2
    7204:	e7f1      	b.n	71ea <ticks_to_expire_prep+0x14>
    7206:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7208:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    720a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    720c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    720e:	2200      	movs	r2, #0
    7210:	e7ef      	b.n	71f2 <ticks_to_expire_prep+0x1c>

00007212 <ticker_job_op_cb>:
{
    7212:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7214:	2200      	movs	r2, #0
    7216:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    721a:	6259      	str	r1, [r3, #36]	; 0x24
{
    721c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    721e:	b10a      	cbz	r2, 7224 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7222:	4710      	bx	r2
    7224:	4770      	bx	lr

00007226 <ticker_worker>:
{
    7226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    722a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    722c:	2301      	movs	r3, #1
{
    722e:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7230:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7232:	2d00      	cmp	r5, #0
    7234:	d14c      	bne.n	72d0 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7236:	7f43      	ldrb	r3, [r0, #29]
    7238:	2bff      	cmp	r3, #255	; 0xff
    723a:	d102      	bne.n	7242 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    723c:	77c5      	strb	r5, [r0, #31]
		return;
    723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7242:	f00a ffa5 	bl	12190 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7246:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7248:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    724a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    724e:	1bc7      	subs	r7, r0, r7
    7250:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7254:	2eff      	cmp	r6, #255	; 0xff
    7256:	d006      	beq.n	7266 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7258:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    725c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7260:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7262:	429f      	cmp	r7, r3
    7264:	d218      	bcs.n	7298 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7266:	7aa2      	ldrb	r2, [r4, #10]
    7268:	7ae3      	ldrb	r3, [r4, #11]
    726a:	4293      	cmp	r3, r2
    726c:	d105      	bne.n	727a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    726e:	3301      	adds	r3, #1
    7270:	b2db      	uxtb	r3, r3
			last = 0;
    7272:	2b02      	cmp	r3, #2
    7274:	bf08      	it	eq
    7276:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7278:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    727a:	7ae3      	ldrb	r3, [r4, #11]
    727c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7280:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7282:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7284:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7286:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7288:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    728a:	46ac      	mov	ip, r5
    728c:	4623      	mov	r3, r4
    728e:	2104      	movs	r1, #4
    7290:	2003      	movs	r0, #3
}
    7292:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7296:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7298:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    729a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    729c:	788a      	ldrb	r2, [r1, #2]
    729e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    72a0:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    72a4:	1a9b      	subs	r3, r3, r2
    72a6:	b2db      	uxtb	r3, r3
    72a8:	2b01      	cmp	r3, #1
    72aa:	d1d3      	bne.n	7254 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    72ac:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    72b0:	3a01      	subs	r2, #1
    72b2:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    72b4:	f1b9 0f00 	cmp.w	r9, #0
    72b8:	d0cc      	beq.n	7254 <ticker_worker+0x2e>
					   ticks_expired -
    72ba:	6948      	ldr	r0, [r1, #20]
    72bc:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    72be:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    72c0:	1a28      	subs	r0, r5, r0
    72c2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    72c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72c8:	690b      	ldr	r3, [r1, #16]
    72ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
    72cc:	47c8      	blx	r9
    72ce:	e7c1      	b.n	7254 <ticker_worker+0x2e>
    72d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000072d4 <ticker_job>:
{
    72d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    72d8:	7fc2      	ldrb	r2, [r0, #31]
{
    72da:	b095      	sub	sp, #84	; 0x54
    72dc:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    72de:	2a00      	cmp	r2, #0
    72e0:	f040 83bf 	bne.w	7a62 <ticker_job+0x78e>
	ticks_previous = instance->ticks_current;
    72e4:	6943      	ldr	r3, [r0, #20]
    72e6:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    72e8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    72ea:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    72ec:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    72ee:	7ac0      	ldrb	r0, [r0, #11]
    72f0:	4298      	cmp	r0, r3
    72f2:	f000 808f 	beq.w	7414 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    72f6:	440b      	add	r3, r1
    72f8:	b2db      	uxtb	r3, r3
			first = 0;
    72fa:	2b02      	cmp	r3, #2
    72fc:	bf08      	it	eq
    72fe:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7300:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7304:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7308:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    730a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    730e:	9b07      	ldr	r3, [sp, #28]
    7310:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7316:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    731a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    731e:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    7320:	f8db 3000 	ldr.w	r3, [fp]
    7324:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    7326:	f8db 3004 	ldr.w	r3, [fp, #4]
    732a:	930d      	str	r3, [sp, #52]	; 0x34
    732c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7330:	3b01      	subs	r3, #1
    7332:	b2db      	uxtb	r3, r3
    7334:	9304      	str	r3, [sp, #16]
	pending = 0;
    7336:	2300      	movs	r3, #0
    7338:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    733a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    733e:	9b04      	ldr	r3, [sp, #16]
    7340:	2bff      	cmp	r3, #255	; 0xff
    7342:	d16a      	bne.n	741a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7344:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7348:	9a05      	ldr	r2, [sp, #20]
    734a:	1a9b      	subs	r3, r3, r2
    734c:	bf18      	it	ne
    734e:	2301      	movne	r3, #1
    7350:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    7352:	9b03      	ldr	r3, [sp, #12]
    7354:	b1e3      	cbz	r3, 7390 <ticker_job+0xbc>
	node = &instance->node[0];
    7356:	f8db 3000 	ldr.w	r3, [fp]
    735a:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    735c:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7360:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7364:	2eff      	cmp	r6, #255	; 0xff
    7366:	d00c      	beq.n	7382 <ticker_job+0xae>
		ticker = &node[id_expired];
    7368:	b237      	sxth	r7, r6
    736a:	9b06      	ldr	r3, [sp, #24]
    736c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7370:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7374:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7376:	4545      	cmp	r5, r8
    7378:	f240 8136 	bls.w	75e8 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    737c:	eba5 0508 	sub.w	r5, r5, r8
    7380:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7382:	9b04      	ldr	r3, [sp, #16]
    7384:	9a03      	ldr	r2, [sp, #12]
    7386:	9905      	ldr	r1, [sp, #20]
    7388:	42b1      	cmp	r1, r6
    738a:	bf18      	it	ne
    738c:	4613      	movne	r3, r2
    738e:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    7390:	f8db 3000 	ldr.w	r3, [fp]
    7394:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    7396:	f8db 3004 	ldr.w	r3, [fp, #4]
    739a:	9312      	str	r3, [sp, #72]	; 0x48
    739c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    73a0:	3b01      	subs	r3, #1
    73a2:	b2db      	uxtb	r3, r3
    73a4:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    73a6:	9b03      	ldr	r3, [sp, #12]
    73a8:	2bff      	cmp	r3, #255	; 0xff
    73aa:	f040 8170 	bne.w	768e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    73ae:	f89b 301d 	ldrb.w	r3, [fp, #29]
    73b2:	9a05      	ldr	r2, [sp, #20]
    73b4:	4293      	cmp	r3, r2
	if (!pending) {
    73b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    73b8:	f040 834a 	bne.w	7a50 <ticker_job+0x77c>
	if (!pending) {
    73bc:	b95b      	cbnz	r3, 73d6 <ticker_job+0x102>
    73be:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    73c2:	f8db 3004 	ldr.w	r3, [fp, #4]
    73c6:	9303      	str	r3, [sp, #12]
    73c8:	3c01      	subs	r4, #1
    73ca:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    73cc:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    73d0:	2cff      	cmp	r4, #255	; 0xff
    73d2:	f040 82a0 	bne.w	7916 <ticker_job+0x642>
	instance->job_guard = 0;
    73d6:	2300      	movs	r3, #0
    73d8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    73dc:	9b04      	ldr	r3, [sp, #16]
    73de:	b14b      	cbz	r3, 73f4 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    73e0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    73e4:	2bff      	cmp	r3, #255	; 0xff
    73e6:	f040 82e9 	bne.w	79bc <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    73ea:	f00a fea1 	bl	12130 <cntr_stop>
    73ee:	b908      	cbnz	r0, 73f4 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    73f0:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    73f4:	f89b 301f 	ldrb.w	r3, [fp, #31]
    73f8:	2b00      	cmp	r3, #0
    73fa:	f000 8332 	beq.w	7a62 <ticker_job+0x78e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    73fe:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7402:	465b      	mov	r3, fp
    7404:	2201      	movs	r2, #1
    7406:	2103      	movs	r1, #3
    7408:	2004      	movs	r0, #4
    740a:	46a4      	mov	ip, r4
}
    740c:	b015      	add	sp, #84	; 0x54
    740e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7412:	4760      	bx	ip
		flag_elapsed = 0;
    7414:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    7416:	4690      	mov	r8, r2
    7418:	e77f      	b.n	731a <ticker_job+0x46>
		user = &users[count_user];
    741a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    741c:	9a04      	ldr	r2, [sp, #16]
    741e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    7426:	78f9      	ldrb	r1, [r7, #3]
    7428:	78be      	ldrb	r6, [r7, #2]
    742a:	428e      	cmp	r6, r1
    742c:	f000 80d7 	beq.w	75de <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    7430:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    7432:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7434:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7438:	0112      	lsls	r2, r2, #4
    743a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    743c:	1c73      	adds	r3, r6, #1
    743e:	b2db      	uxtb	r3, r3
				middle = 0;
    7440:	4298      	cmp	r0, r3
    7442:	bf08      	it	eq
    7444:	2300      	moveq	r3, #0
			user->middle = middle;
    7446:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7448:	9b08      	ldr	r3, [sp, #32]
    744a:	5c9a      	ldrb	r2, [r3, r2]
    744c:	2a03      	cmp	r2, #3
    744e:	d9eb      	bls.n	7428 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7450:	2a05      	cmp	r2, #5
    7452:	d817      	bhi.n	7484 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7454:	7869      	ldrb	r1, [r5, #1]
    7456:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    745a:	930c      	str	r3, [sp, #48]	; 0x30
    745c:	980c      	ldr	r0, [sp, #48]	; 0x30
    745e:	9b06      	ldr	r3, [sp, #24]
    7460:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7464:	7863      	ldrb	r3, [r4, #1]
    7466:	78a0      	ldrb	r0, [r4, #2]
    7468:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    746a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    746e:	d009      	beq.n	7484 <ticker_job+0x1b0>
			    (state == 0) ||
    7470:	2a04      	cmp	r2, #4
    7472:	d10c      	bne.n	748e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7474:	686a      	ldr	r2, [r5, #4]
    7476:	b952      	cbnz	r2, 748e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7478:	68aa      	ldr	r2, [r5, #8]
    747a:	b942      	cbnz	r2, 748e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    747c:	68ea      	ldr	r2, [r5, #12]
    747e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7482:	d104      	bne.n	748e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7484:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7486:	4628      	mov	r0, r5
    7488:	f7ff fec3 	bl	7212 <ticker_job_op_cb>
    748c:	e7cb      	b.n	7426 <ticker_job+0x152>
			if (state == 1) {
    748e:	2b01      	cmp	r3, #1
    7490:	f040 809b 	bne.w	75ca <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7494:	4658      	mov	r0, fp
    7496:	f7ff fe72 	bl	717e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    749a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    749c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    749e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    74a0:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    74a2:	f040 8084 	bne.w	75ae <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    74a6:	f8db 3014 	ldr.w	r3, [fp, #20]
    74aa:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    74ac:	f00a fe70 	bl	12190 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    74b2:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74b4:	1ac3      	subs	r3, r0, r3
    74b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    74ba:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    74bc:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    74be:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    74c0:	bf9e      	ittt	ls
    74c2:	6962      	ldrls	r2, [r4, #20]
    74c4:	1b92      	subls	r2, r2, r6
    74c6:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    74c8:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    74ca:	bf96      	itet	ls
    74cc:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    74ce:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    74d0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    74d2:	b18a      	cbz	r2, 74f8 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    74d4:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    74d6:	b179      	cbz	r1, 74f8 <ticker_job+0x224>
		user_op->params.update.lazy--;
    74d8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    74dc:	fa1f fe8e 	uxth.w	lr, lr
    74e0:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    74e4:	429a      	cmp	r2, r3
    74e6:	d32b      	bcc.n	7540 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    74e8:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7810 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    74ec:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    74f0:	45e6      	cmp	lr, ip
    74f2:	d847      	bhi.n	7584 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    74f4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    74f8:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    74fa:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    74fc:	4413      	add	r3, r2
    74fe:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7500:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7502:	6963      	ldr	r3, [r4, #20]
    7504:	4413      	add	r3, r2
    7506:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    750a:	4620      	mov	r0, r4
    750c:	f7ff fe63 	bl	71d6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7510:	69a2      	ldr	r2, [r4, #24]
    7512:	892b      	ldrh	r3, [r5, #8]
    7514:	4413      	add	r3, r2
    7516:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7518:	896a      	ldrh	r2, [r5, #10]
    751a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    751c:	bf8c      	ite	hi
    751e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7520:	2300      	movls	r3, #0
    7522:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7524:	7bab      	ldrb	r3, [r5, #14]
    7526:	b103      	cbz	r3, 752a <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7528:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    752a:	9b06      	ldr	r3, [sp, #24]
    752c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    752e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7532:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7534:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7538:	3301      	adds	r3, #1
    753a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    753c:	2100      	movs	r1, #0
    753e:	e7a2      	b.n	7486 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7540:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7544:	45e6      	cmp	lr, ip
    7546:	d2cf      	bcs.n	74e8 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7548:	6a61      	ldr	r1, [r4, #36]	; 0x24
    754a:	4eaf      	ldr	r6, [pc, #700]	; (7808 <ticker_job+0x534>)
    754c:	48af      	ldr	r0, [pc, #700]	; (780c <ticker_job+0x538>)
    754e:	198e      	adds	r6, r1, r6
    7550:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    7552:	bf81      	itttt	hi
    7554:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7558:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    755c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7560:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7562:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7564:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7566:	bf8c      	ite	hi
    7568:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    756c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7570:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7572:	4491      	add	r9, r2
			ticker->lazy_current--;
    7574:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7578:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    757a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    757e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7582:	e7af      	b.n	74e4 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7584:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7586:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7588:	48a0      	ldr	r0, [pc, #640]	; (780c <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    758a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    758c:	499e      	ldr	r1, [pc, #632]	; (7808 <ticker_job+0x534>)
    758e:	1871      	adds	r1, r6, r1
    7590:	4281      	cmp	r1, r0
	return 0;
    7592:	bf8e      	itee	hi
    7594:	2100      	movhi	r1, #0
		return 1;
    7596:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7598:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    759a:	4411      	add	r1, r2
			ticker->lazy_current++;
    759c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    75a0:	bf8c      	ite	hi
    75a2:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    75a4:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    75a6:	440b      	add	r3, r1
			ticker->lazy_current++;
    75a8:	f8a4 c01e 	strh.w	ip, [r4, #30]
    75ac:	e79e      	b.n	74ec <ticker_job+0x218>
		ticker->req = ticker->ack;
    75ae:	78a3      	ldrb	r3, [r4, #2]
    75b0:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    75b2:	786b      	ldrb	r3, [r5, #1]
    75b4:	f89b 201c 	ldrb.w	r2, [fp, #28]
    75b8:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    75ba:	bf01      	itttt	eq
    75bc:	23ff      	moveq	r3, #255	; 0xff
    75be:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    75c2:	2300      	moveq	r3, #0
    75c4:	f8cb 3018 	streq.w	r3, [fp, #24]
    75c8:	e7b8      	b.n	753c <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    75ca:	2104      	movs	r1, #4
    75cc:	465b      	mov	r3, fp
    75ce:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    75d2:	2201      	movs	r2, #1
    75d4:	4608      	mov	r0, r1
    75d6:	47a0      	blx	r4
				pending = 1;
    75d8:	2301      	movs	r3, #1
				user->middle = prev;
    75da:	70be      	strb	r6, [r7, #2]
				pending = 1;
    75dc:	9309      	str	r3, [sp, #36]	; 0x24
    75de:	9b04      	ldr	r3, [sp, #16]
    75e0:	3b01      	subs	r3, #1
    75e2:	b2db      	uxtb	r3, r3
    75e4:	9304      	str	r3, [sp, #16]
    75e6:	e6aa      	b.n	733e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    75e8:	f8db 3018 	ldr.w	r3, [fp, #24]
    75ec:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    75ee:	bf29      	itett	cs
    75f0:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    75f2:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    75f4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    75f8:	2300      	movcs	r3, #0
    75fa:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    75fe:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7600:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7602:	b11b      	cbz	r3, 760c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7604:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7608:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    760c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    760e:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    7610:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7612:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7616:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    761a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    761e:	f1be 0f00 	cmp.w	lr, #0
    7622:	d030      	beq.n	7686 <ticker_job+0x3b2>
    7624:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7626:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 780c <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    762a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    762c:	6a21      	ldr	r1, [r4, #32]
    762e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7630:	4975      	ldr	r1, [pc, #468]	; (7808 <ticker_job+0x534>)
    7632:	1859      	adds	r1, r3, r1
    7634:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7636:	bf9f      	itttt	ls
    7638:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    763c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7640:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7644:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7646:	bf92      	itee	ls
    7648:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    764a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    764c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    764e:	4473      	add	r3, lr
			while (count--) {
    7650:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7654:	441a      	add	r2, r3
			while (count--) {
    7656:	d2e8      	bcs.n	762a <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7658:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    765a:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    765c:	f8db 1014 	ldr.w	r1, [fp, #20]
    7660:	eb03 0209 	add.w	r2, r3, r9
    7664:	4620      	mov	r0, r4
    7666:	f7ff fdb6 	bl	71d6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    766a:	8ba3      	ldrh	r3, [r4, #28]
    766c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    766e:	2300      	movs	r3, #0
    7670:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7672:	9b06      	ldr	r3, [sp, #24]
    7674:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7678:	7863      	ldrb	r3, [r4, #1]
    767a:	3301      	adds	r3, #1
    767c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    767e:	eba8 0805 	sub.w	r8, r8, r5
    7682:	46b2      	mov	sl, r6
    7684:	e66c      	b.n	7360 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    7686:	78a3      	ldrb	r3, [r4, #2]
    7688:	7063      	strb	r3, [r4, #1]
    768a:	4656      	mov	r6, sl
    768c:	e7f7      	b.n	767e <ticker_job+0x3aa>
		user = &users[count_user];
    768e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7690:	9a03      	ldr	r2, [sp, #12]
    7692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7696:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    7698:	685b      	ldr	r3, [r3, #4]
    769a:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    769c:	9b06      	ldr	r3, [sp, #24]
    769e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    76a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    76a6:	f000 808e 	beq.w	77c6 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    76aa:	fa0f f38a 	sxth.w	r3, sl
    76ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    76b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    76b4:	46d0      	mov	r8, sl
    76b6:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    76ba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    76be:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    76c0:	f8db 3000 	ldr.w	r3, [fp]
    76c4:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    76c6:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    76c8:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    76ca:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    76cc:	8be3      	ldrh	r3, [r4, #30]
    76ce:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    76d0:	bf86      	itte	hi
    76d2:	1a9b      	subhi	r3, r3, r2
    76d4:	b29b      	uxthhi	r3, r3
		skip = 0;
    76d6:	2300      	movls	r3, #0
    76d8:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    76da:	fa0f f388 	sxth.w	r3, r8
    76de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    76e2:	00db      	lsls	r3, r3, #3
    76e4:	9313      	str	r3, [sp, #76]	; 0x4c
    76e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    76e8:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    76ec:	f8db 0018 	ldr.w	r0, [fp, #24]
    76f0:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    76f2:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    76f6:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    76f8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    76fc:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    7700:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    7702:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    7704:	2bff      	cmp	r3, #255	; 0xff
    7706:	d007      	beq.n	7718 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    7708:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    770c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    7710:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    7712:	4281      	cmp	r1, r0
    7714:	f200 80a9 	bhi.w	786a <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    7718:	f8de 0018 	ldr.w	r0, [lr, #24]
    771c:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    771e:	eb01 0c00 	add.w	ip, r1, r0
    7722:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    7724:	2eff      	cmp	r6, #255	; 0xff
    7726:	f040 80ae 	bne.w	7886 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    772a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    772c:	b130      	cbz	r0, 773c <ticker_job+0x468>
    772e:	9807      	ldr	r0, [sp, #28]
    7730:	4281      	cmp	r1, r0
    7732:	f0c0 80bf 	bcc.w	78b4 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7736:	2eff      	cmp	r6, #255	; 0xff
    7738:	f040 818f 	bne.w	7a5a <ticker_job+0x786>
		if (previous == current) {
    773c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    773e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    7742:	4283      	cmp	r3, r0
			node[previous].next = id;
    7744:	bf18      	it	ne
    7746:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    774a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    774e:	bf16      	itet	ne
    7750:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    7754:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    7758:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    775c:	2bff      	cmp	r3, #255	; 0xff
    775e:	d006      	beq.n	776e <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    7760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7764:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7768:	689a      	ldr	r2, [r3, #8]
    776a:	1a51      	subs	r1, r2, r1
    776c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    776e:	78a3      	ldrb	r3, [r4, #2]
    7770:	3301      	adds	r3, #1
    7772:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    7774:	2100      	movs	r1, #0
			if (user_op) {
    7776:	2d00      	cmp	r5, #0
    7778:	d093      	beq.n	76a2 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    777a:	4628      	mov	r0, r5
    777c:	f7ff fd49 	bl	7212 <ticker_job_op_cb>
    7780:	e78f      	b.n	76a2 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    7782:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    7786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7788:	011b      	lsls	r3, r3, #4
    778a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    778c:	f109 0201 	add.w	r2, r9, #1
    7790:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    7794:	9a06      	ldr	r2, [sp, #24]
    7796:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    7798:	454a      	cmp	r2, r9
    779a:	bf08      	it	eq
    779c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    77a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    77a2:	5cd3      	ldrb	r3, [r2, r3]
    77a4:	2b03      	cmp	r3, #3
    77a6:	d10e      	bne.n	77c6 <ticker_job+0x4f2>
				id_insert = user_op->id;
    77a8:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    77ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77ae:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    77b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    77b6:	7862      	ldrb	r2, [r4, #1]
    77b8:	78a3      	ldrb	r3, [r4, #2]
    77ba:	429a      	cmp	r2, r3
    77bc:	d009      	beq.n	77d2 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    77be:	2101      	movs	r1, #1
    77c0:	4628      	mov	r0, r5
    77c2:	f7ff fd26 	bl	7212 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    77c6:	9b06      	ldr	r3, [sp, #24]
    77c8:	789b      	ldrb	r3, [r3, #2]
    77ca:	454b      	cmp	r3, r9
    77cc:	d1d9      	bne.n	7782 <ticker_job+0x4ae>
    77ce:	9b03      	ldr	r3, [sp, #12]
    77d0:	e5e6      	b.n	73a0 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    77d2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    77d4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    77d8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    77da:	692b      	ldr	r3, [r5, #16]
    77dc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    77de:	8aab      	ldrh	r3, [r5, #20]
    77e0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    77e2:	69ab      	ldr	r3, [r5, #24]
    77e4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    77e6:	69eb      	ldr	r3, [r5, #28]
    77e8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    77ea:	6a2b      	ldr	r3, [r5, #32]
    77ec:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    77ee:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    77f0:	68ab      	ldr	r3, [r5, #8]
    77f2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    77f4:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    77f6:	686a      	ldr	r2, [r5, #4]
    77f8:	4620      	mov	r0, r4
    77fa:	f7ff fcec 	bl	71d6 <ticks_to_expire_prep>
	ticker->force = 1;
    77fe:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    7800:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    7802:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    7804:	70e3      	strb	r3, [r4, #3]
    7806:	e75b      	b.n	76c0 <ticker_job+0x3ec>
    7808:	ff172b5a 	.word	0xff172b5a
    780c:	7f172b59 	.word	0x7f172b59
    7810:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    7814:	6860      	ldr	r0, [r4, #4]
    7816:	2800      	cmp	r0, #0
    7818:	d07b      	beq.n	7912 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    781a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    781c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    781e:	4b92      	ldr	r3, [pc, #584]	; (7a68 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    7820:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7822:	4992      	ldr	r1, [pc, #584]	; (7a6c <ticker_job+0x798>)
    7824:	18d3      	adds	r3, r2, r3
    7826:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    7828:	bf9c      	itt	ls
    782a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    782e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7832:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    7834:	bf8b      	itete	hi
    7836:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7838:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    783c:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    783e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7840:	4403      	add	r3, r0
		return 1;
    7842:	bf98      	it	ls
    7844:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    7846:	4413      	add	r3, r2
			ticker->lazy_current++;
    7848:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    784a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    784c:	3201      	adds	r2, #1
    784e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    7850:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    7852:	4293      	cmp	r3, r2
    7854:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    7858:	bf89      	itett	hi
    785a:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    785c:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    785e:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    7860:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    7862:	bf9c      	itt	ls
    7864:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    7866:	60a1      	strls	r1, [r4, #8]
    7868:	e73d      	b.n	76e6 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    786a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    786c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    786e:	b946      	cbnz	r6, 7882 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    7870:	9f07      	ldr	r7, [sp, #28]
    7872:	42b8      	cmp	r0, r7
    7874:	d200      	bcs.n	7878 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    7876:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    7878:	930b      	str	r3, [sp, #44]	; 0x2c
    787a:	9607      	str	r6, [sp, #28]
    787c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    7880:	e740      	b.n	7704 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    7882:	9308      	str	r3, [sp, #32]
    7884:	e7f8      	b.n	7878 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    7886:	b230      	sxth	r0, r6
    7888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    788c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    7890:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    7892:	68bf      	ldr	r7, [r7, #8]
    7894:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    7896:	4567      	cmp	r7, ip
    7898:	d20a      	bcs.n	78b0 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    789a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    789c:	69bf      	ldr	r7, [r7, #24]
    789e:	2f00      	cmp	r7, #0
    78a0:	f47f af43 	bne.w	772a <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    78a4:	9e11      	ldr	r6, [sp, #68]	; 0x44
    78a6:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    78aa:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    78ae:	e739      	b.n	7724 <ticker_job+0x450>
			return TICKER_NULL;
    78b0:	26ff      	movs	r6, #255	; 0xff
    78b2:	e73a      	b.n	772a <ticker_job+0x456>
	while (id_insert !=
    78b4:	9b08      	ldr	r3, [sp, #32]
    78b6:	4598      	cmp	r8, r3
    78b8:	f43f af59 	beq.w	776e <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    78bc:	9b08      	ldr	r3, [sp, #32]
    78be:	2bff      	cmp	r3, #255	; 0xff
    78c0:	d0a8      	beq.n	7814 <ticker_job+0x540>
    78c2:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    78c4:	b233      	sxth	r3, r6
    78c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    78ca:	9307      	str	r3, [sp, #28]
    78cc:	9a07      	ldr	r2, [sp, #28]
    78ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    78d0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    78d4:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    78d6:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    78d8:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    78da:	bf88      	it	hi
    78dc:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    78de:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    78e0:	bf8c      	ite	hi
    78e2:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    78e4:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    78e6:	2a00      	cmp	r2, #0
    78e8:	d094      	beq.n	7814 <ticker_job+0x540>
    78ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    78ec:	4293      	cmp	r3, r2
    78ee:	d891      	bhi.n	7814 <ticker_job+0x540>
			    skip_collide <= skip &&
    78f0:	78fa      	ldrb	r2, [r7, #3]
    78f2:	78e3      	ldrb	r3, [r4, #3]
    78f4:	429a      	cmp	r2, r3
    78f6:	d28d      	bcs.n	7814 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    78f8:	4631      	mov	r1, r6
    78fa:	4658      	mov	r0, fp
    78fc:	f7ff fc3f 	bl	717e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    7900:	78bb      	ldrb	r3, [r7, #2]
    7902:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    7904:	9a07      	ldr	r2, [sp, #28]
    7906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    7908:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    790a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    790e:	46b2      	mov	sl, r6
    7910:	e6e9      	b.n	76e6 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    7912:	2101      	movs	r1, #1
    7914:	e72f      	b.n	7776 <ticker_job+0x4a2>
		user = &users[count_user];
    7916:	9b03      	ldr	r3, [sp, #12]
    7918:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    791c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    791e:	786b      	ldrb	r3, [r5, #1]
    7920:	78ea      	ldrb	r2, [r5, #3]
    7922:	429a      	cmp	r2, r3
    7924:	d102      	bne.n	792c <ticker_job+0x658>
    7926:	3c01      	subs	r4, #1
    7928:	b2e4      	uxtb	r4, r4
    792a:	e551      	b.n	73d0 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    792c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7930:	011b      	lsls	r3, r3, #4
    7932:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    7934:	5cf3      	ldrb	r3, [r6, r3]
    7936:	2b01      	cmp	r3, #1
    7938:	d025      	beq.n	7986 <ticker_job+0x6b2>
    793a:	2b02      	cmp	r3, #2
    793c:	d12a      	bne.n	7994 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    793e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    7942:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    7944:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    7948:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    794c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    7950:	28ff      	cmp	r0, #255	; 0xff
    7952:	d004      	beq.n	795e <ticker_job+0x68a>
    7954:	6819      	ldr	r1, [r3, #0]
    7956:	f8db 7014 	ldr.w	r7, [fp, #20]
    795a:	42b9      	cmp	r1, r7
    795c:	d023      	beq.n	79a6 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    795e:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    7962:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    7966:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    7968:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    796a:	29ff      	cmp	r1, #255	; 0xff
    796c:	d007      	beq.n	797e <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    796e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    7972:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    7976:	6987      	ldr	r7, [r0, #24]
    7978:	6880      	ldr	r0, [r0, #8]
    797a:	b1df      	cbz	r7, 79b4 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    797c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    797e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7982:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    7986:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    7988:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    798c:	b113      	cbz	r3, 7994 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    798e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7990:	2000      	movs	r0, #0
    7992:	4798      	blx	r3
			first = user->first + 1;
    7994:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    7996:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    7998:	3301      	adds	r3, #1
    799a:	b2db      	uxtb	r3, r3
				first = 0;
    799c:	429a      	cmp	r2, r3
    799e:	bf08      	it	eq
    79a0:	2300      	moveq	r3, #0
			user->first = first;
    79a2:	706b      	strb	r3, [r5, #1]
    79a4:	e7bb      	b.n	791e <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    79a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    79aa:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    79ae:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    79b2:	e7da      	b.n	796a <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    79b4:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    79b6:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    79ba:	e7d6      	b.n	796a <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    79bc:	9b05      	ldr	r3, [sp, #20]
    79be:	2bff      	cmp	r3, #255	; 0xff
    79c0:	d107      	bne.n	79d2 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    79c2:	f00a fbe5 	bl	12190 <cntr_cnt_get>
    79c6:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    79c8:	f00a fba4 	bl	12114 <cntr_start>
    79cc:	b908      	cbnz	r0, 79d2 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    79ce:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    79d2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    79d6:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    79da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    79de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    79e2:	260a      	movs	r6, #10
    79e4:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    79e6:	f00a fbd3 	bl	12190 <cntr_cnt_get>
		cc = instance->ticks_current;
    79ea:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    79ee:	1b03      	subs	r3, r0, r4
    79f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    79f4:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    79f6:	42ab      	cmp	r3, r5
    79f8:	bf2c      	ite	cs
    79fa:	18e4      	addcs	r4, r4, r3
    79fc:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    79fe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    7a02:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    7a04:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    7a08:	4620      	mov	r0, r4
    7a0a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    7a0c:	f00a fbc0 	bl	12190 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7a10:	1bc0      	subs	r0, r0, r7
    7a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7a16:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7a18:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7a1a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7a1e:	42a0      	cmp	r0, r4
    7a20:	f67f ace8 	bls.w	73f4 <ticker_job+0x120>
		LL_ASSERT(i);
    7a24:	3e01      	subs	r6, #1
    7a26:	d1de      	bne.n	79e6 <ticker_job+0x712>
    7a28:	4b11      	ldr	r3, [pc, #68]	; (7a70 <ticker_job+0x79c>)
    7a2a:	9301      	str	r3, [sp, #4]
    7a2c:	9300      	str	r3, [sp, #0]
    7a2e:	4b11      	ldr	r3, [pc, #68]	; (7a74 <ticker_job+0x7a0>)
    7a30:	4a11      	ldr	r2, [pc, #68]	; (7a78 <ticker_job+0x7a4>)
    7a32:	681c      	ldr	r4, [r3, #0]
    7a34:	4911      	ldr	r1, [pc, #68]	; (7a7c <ticker_job+0x7a8>)
    7a36:	4b12      	ldr	r3, [pc, #72]	; (7a80 <ticker_job+0x7ac>)
    7a38:	4812      	ldr	r0, [pc, #72]	; (7a84 <ticker_job+0x7b0>)
    7a3a:	47a0      	blx	r4
    7a3c:	4040      	eors	r0, r0
    7a3e:	f380 8811 	msr	BASEPRI, r0
    7a42:	f04f 0004 	mov.w	r0, #4
    7a46:	df02      	svc	2
	instance->job_guard = 0;
    7a48:	2300      	movs	r3, #0
    7a4a:	f88b 301e 	strb.w	r3, [fp, #30]
    7a4e:	e4c7      	b.n	73e0 <ticker_job+0x10c>
	if (!pending) {
    7a50:	2b00      	cmp	r3, #0
    7a52:	d1f9      	bne.n	7a48 <ticker_job+0x774>
		flag_compare_update = 1;
    7a54:	2301      	movs	r3, #1
    7a56:	9304      	str	r3, [sp, #16]
    7a58:	e4b1      	b.n	73be <ticker_job+0xea>
	while (id_insert !=
    7a5a:	45b0      	cmp	r8, r6
    7a5c:	f47f af32 	bne.w	78c4 <ticker_job+0x5f0>
    7a60:	e685      	b.n	776e <ticker_job+0x49a>
}
    7a62:	b015      	add	sp, #84	; 0x54
    7a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a68:	ff172b5a 	.word	0xff172b5a
    7a6c:	7f172b59 	.word	0x7f172b59
    7a70:	00014c55 	.word	0x00014c55
    7a74:	20003aa4 	.word	0x20003aa4
    7a78:	000159c3 	.word	0x000159c3
    7a7c:	00015a12 	.word	0x00015a12
    7a80:	000169c9 	.word	0x000169c9
    7a84:	000169e3 	.word	0x000169e3

00007a88 <ticker_init>:
{
    7a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    7a8a:	4d1a      	ldr	r5, [pc, #104]	; (7af4 <ticker_init+0x6c>)
{
    7a8c:	9f05      	ldr	r7, [sp, #20]
    7a8e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    7a92:	262c      	movs	r6, #44	; 0x2c
    7a94:	4346      	muls	r6, r0
    7a96:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    7a9a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    7a9c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    7aa0:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    7aa2:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    7aa6:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    7aaa:	3b01      	subs	r3, #1
    7aac:	b2db      	uxtb	r3, r3
    7aae:	2bff      	cmp	r3, #255	; 0xff
    7ab0:	d111      	bne.n	7ad6 <ticker_init+0x4e>
	if (count_op) {
    7ab2:	b9ec      	cbnz	r4, 7af0 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    7ab4:	222c      	movs	r2, #44	; 0x2c
    7ab6:	fb02 5200 	mla	r2, r2, r0, r5
    7aba:	9908      	ldr	r1, [sp, #32]
    7abc:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    7abe:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ac0:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
    7ac4:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    7ac6:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7ac8:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    7aca:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    7acc:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    7ace:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    7ad0:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    7ad2:	4620      	mov	r0, r4
    7ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    7ad6:	b21a      	sxth	r2, r3
    7ad8:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    7adc:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    7ade:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    7ae2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    7ae6:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    7ae8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    7aec:	b2e4      	uxtb	r4, r4
    7aee:	e7dc      	b.n	7aaa <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    7af0:	2001      	movs	r0, #1
}
    7af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7af4:	200007f4 	.word	0x200007f4

00007af8 <ticker_trigger>:
	instance = &_instance[instance_index];
    7af8:	4a07      	ldr	r2, [pc, #28]	; (7b18 <ticker_trigger+0x20>)
    7afa:	212c      	movs	r1, #44	; 0x2c
    7afc:	fb00 2301 	mla	r3, r0, r1, r2
{
    7b00:	b410      	push	{r4}
	if (instance->sched_cb) {
    7b02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7b04:	b12c      	cbz	r4, 7b12 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7b06:	46a4      	mov	ip, r4
    7b08:	2201      	movs	r2, #1
    7b0a:	2103      	movs	r1, #3
    7b0c:	2002      	movs	r0, #2
}
    7b0e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7b10:	4760      	bx	ip
}
    7b12:	bc10      	pop	{r4}
    7b14:	4770      	bx	lr
    7b16:	bf00      	nop
    7b18:	200007f4 	.word	0x200007f4

00007b1c <ticker_start>:
{
    7b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7b20:	4f25      	ldr	r7, [pc, #148]	; (7bb8 <ticker_start+0x9c>)
    7b22:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    7b26:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7b28:	fb08 7000 	mla	r0, r8, r0, r7
    7b2c:	fa0f fc81 	sxth.w	ip, r1
    7b30:	f8d0 e004 	ldr.w	lr, [r0, #4]
    7b34:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    7b38:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    7b3c:	78f4      	ldrb	r4, [r6, #3]
    7b3e:	1c65      	adds	r5, r4, #1
    7b40:	b2ed      	uxtb	r5, r5
		last = 0;
    7b42:	45ae      	cmp	lr, r5
    7b44:	bf98      	it	ls
    7b46:	2500      	movls	r5, #0
	if (last == user->first) {
    7b48:	f896 e001 	ldrb.w	lr, [r6, #1]
    7b4c:	45ae      	cmp	lr, r5
    7b4e:	d02f      	beq.n	7bb0 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    7b50:	f8d6 c004 	ldr.w	ip, [r6, #4]
    7b54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7b58:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    7b5c:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    7b60:	f04f 0a03 	mov.w	sl, #3
    7b64:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7b68:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7b6a:	9b08      	ldr	r3, [sp, #32]
    7b6c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b70:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b74:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b78:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    7b7a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7b7e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b82:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b86:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7b88:	2302      	movs	r3, #2
    7b8a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b8e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    7b92:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7b94:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7b96:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7b98:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7b9a:	6a03      	ldr	r3, [r0, #32]
    7b9c:	4608      	mov	r0, r1
    7b9e:	4798      	blx	r3
    7ba0:	fb09 7308 	mla	r3, r9, r8, r7
    7ba4:	2200      	movs	r2, #0
    7ba6:	2104      	movs	r1, #4
    7ba8:	47a8      	blx	r5
	return user_op->status;
    7baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7bb0:	2001      	movs	r0, #1
}
    7bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bb6:	bf00      	nop
    7bb8:	200007f4 	.word	0x200007f4

00007bbc <ticker_update>:
{
    7bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7bc0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7c54 <ticker_update+0x98>
    7bc4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7bc8:	fb0a 8e00 	mla	lr, sl, r0, r8
    7bcc:	b20f      	sxth	r7, r1
    7bce:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    7bd2:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7bd4:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    7bd8:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    7bdc:	78c4      	ldrb	r4, [r0, #3]
    7bde:	1c66      	adds	r6, r4, #1
    7be0:	b2f6      	uxtb	r6, r6
		last = 0;
    7be2:	42b5      	cmp	r5, r6
    7be4:	bf98      	it	ls
    7be6:	2600      	movls	r6, #0
	if (last == user->first) {
    7be8:	7845      	ldrb	r5, [r0, #1]
    7bea:	42b5      	cmp	r5, r6
    7bec:	d02f      	beq.n	7c4e <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    7bee:	f8d0 c004 	ldr.w	ip, [r0, #4]
    7bf2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7bf6:	0125      	lsls	r5, r4, #4
    7bf8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7bfc:	2704      	movs	r7, #4
    7bfe:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7c02:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7c04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    7c08:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7c0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c0e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7c10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7c14:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    7c16:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    7c1a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    7c1c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    7c20:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    7c22:	2302      	movs	r3, #2
    7c24:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c28:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    7c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    7c2c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    7c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7c30:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7c32:	f8de 3020 	ldr.w	r3, [lr, #32]
    7c36:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    7c3a:	4608      	mov	r0, r1
    7c3c:	4798      	blx	r3
    7c3e:	fb09 830a 	mla	r3, r9, sl, r8
    7c42:	2200      	movs	r2, #0
    7c44:	4639      	mov	r1, r7
    7c46:	47a8      	blx	r5
	return user_op->status;
    7c48:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7c4e:	2001      	movs	r0, #1
}
    7c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c54:	200007f4 	.word	0x200007f4

00007c58 <ticker_stop>:
{
    7c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7c5c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7ccc <ticker_stop+0x74>
    7c60:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7c64:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7c68:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7c6a:	f8de 0004 	ldr.w	r0, [lr, #4]
    7c6e:	b20e      	sxth	r6, r1
    7c70:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7c74:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7c78:	78fc      	ldrb	r4, [r7, #3]
    7c7a:	1c65      	adds	r5, r4, #1
    7c7c:	b2ed      	uxtb	r5, r5
		last = 0;
    7c7e:	42a8      	cmp	r0, r5
    7c80:	bf98      	it	ls
    7c82:	2500      	movls	r5, #0
	if (last == user->first) {
    7c84:	7878      	ldrb	r0, [r7, #1]
    7c86:	42a8      	cmp	r0, r5
    7c88:	d01d      	beq.n	7cc6 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    7c8a:	6878      	ldr	r0, [r7, #4]
    7c8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7c90:	0124      	lsls	r4, r4, #4
    7c92:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7c94:	f04f 0c05 	mov.w	ip, #5
    7c98:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    7c9c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    7c9e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    7ca0:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    7ca2:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    7ca4:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    7ca6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7ca8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7caa:	f8de 3020 	ldr.w	r3, [lr, #32]
    7cae:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7cb2:	4608      	mov	r0, r1
    7cb4:	4798      	blx	r3
    7cb6:	fb08 930a 	mla	r3, r8, sl, r9
    7cba:	2200      	movs	r2, #0
    7cbc:	2104      	movs	r1, #4
    7cbe:	47a0      	blx	r4
	return user_op->status;
    7cc0:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7cc6:	2001      	movs	r0, #1
}
    7cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ccc:	200007f4 	.word	0x200007f4

00007cd0 <ticker_next_slot_get>:
{
    7cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7cd4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7d50 <ticker_next_slot_get+0x80>
    7cd8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    7cdc:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    7cde:	fb0a 8000 	mla	r0, sl, r0, r8
    7ce2:	fa0f fe81 	sxth.w	lr, r1
    7ce6:	6845      	ldr	r5, [r0, #4]
    7ce8:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    7cec:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    7cf0:	78fc      	ldrb	r4, [r7, #3]
    7cf2:	1c66      	adds	r6, r4, #1
    7cf4:	b2f6      	uxtb	r6, r6
		last = 0;
    7cf6:	42b5      	cmp	r5, r6
    7cf8:	bf98      	it	ls
    7cfa:	2600      	movls	r6, #0
	if (last == user->first) {
    7cfc:	787d      	ldrb	r5, [r7, #1]
    7cfe:	42b5      	cmp	r5, r6
    7d00:	d023      	beq.n	7d4a <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    7d02:	f8d7 c004 	ldr.w	ip, [r7, #4]
    7d06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7d0a:	0125      	lsls	r5, r4, #4
    7d0c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7d10:	f04f 0e02 	mov.w	lr, #2
    7d14:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    7d18:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7d1a:	9b08      	ldr	r3, [sp, #32]
    7d1c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    7d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d20:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    7d22:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    7d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    7d26:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    7d28:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7d2a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7d2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    7d30:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7d32:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7d34:	6a03      	ldr	r3, [r0, #32]
    7d36:	4608      	mov	r0, r1
    7d38:	4798      	blx	r3
    7d3a:	fb09 830a 	mla	r3, r9, sl, r8
    7d3e:	2200      	movs	r2, #0
    7d40:	2104      	movs	r1, #4
    7d42:	47a8      	blx	r5
	return user_op->status;
    7d44:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7d4a:	2001      	movs	r0, #1
}
    7d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d50:	200007f4 	.word	0x200007f4

00007d54 <ticker_job_idle_get>:
{
    7d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    7d58:	f8df 906c 	ldr.w	r9, [pc, #108]	; 7dc8 <ticker_job_idle_get+0x74>
    7d5c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    7d60:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    7d64:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    7d66:	f8de 0004 	ldr.w	r0, [lr, #4]
    7d6a:	b20e      	sxth	r6, r1
    7d6c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    7d70:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    7d74:	78fc      	ldrb	r4, [r7, #3]
    7d76:	1c65      	adds	r5, r4, #1
    7d78:	b2ed      	uxtb	r5, r5
		last = 0;
    7d7a:	42a8      	cmp	r0, r5
    7d7c:	bf98      	it	ls
    7d7e:	2500      	movls	r5, #0
	if (last == user->first) {
    7d80:	7878      	ldrb	r0, [r7, #1]
    7d82:	42a8      	cmp	r0, r5
    7d84:	d01d      	beq.n	7dc2 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    7d86:	6878      	ldr	r0, [r7, #4]
    7d88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7d8c:	0124      	lsls	r4, r4, #4
    7d8e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7d90:	f04f 0c01 	mov.w	ip, #1
    7d94:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    7d98:	20ff      	movs	r0, #255	; 0xff
    7d9a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7d9c:	2002      	movs	r0, #2
    7d9e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    7da0:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    7da2:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    7da4:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7da6:	f8de 3020 	ldr.w	r3, [lr, #32]
    7daa:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    7dae:	4608      	mov	r0, r1
    7db0:	4798      	blx	r3
    7db2:	fb08 930a 	mla	r3, r8, sl, r9
    7db6:	2200      	movs	r2, #0
    7db8:	2104      	movs	r1, #4
    7dba:	47a0      	blx	r4
	return user_op->status;
    7dbc:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    7dc2:	2001      	movs	r0, #1
}
    7dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dc8:	200007f4 	.word	0x200007f4

00007dcc <ticker_job_sched>:
{
    7dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7dd0:	4c08      	ldr	r4, [pc, #32]	; (7df4 <ticker_job_sched+0x28>)
    7dd2:	252c      	movs	r5, #44	; 0x2c
    7dd4:	fb05 4300 	mla	r3, r5, r0, r4
{
    7dd8:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7dda:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    7ddc:	6a1b      	ldr	r3, [r3, #32]
    7dde:	4608      	mov	r0, r1
    7de0:	4798      	blx	r3
    7de2:	fb06 4305 	mla	r3, r6, r5, r4
    7de6:	46bc      	mov	ip, r7
    7de8:	2200      	movs	r2, #0
    7dea:	2104      	movs	r1, #4
}
    7dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7df0:	4760      	bx	ip
    7df2:	bf00      	nop
    7df4:	200007f4 	.word	0x200007f4

00007df8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    7df8:	f00a b9ca 	b.w	12190 <cntr_cnt_get>

00007dfc <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7dfc:	1a40      	subs	r0, r0, r1
}
    7dfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7e02:	4770      	bx	lr

00007e04 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    7e04:	b508      	push	{r3, lr}
    7e06:	4603      	mov	r3, r0
	if (addr_type > 1) {
    7e08:	2b01      	cmp	r3, #1
{
    7e0a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    7e0c:	d80e      	bhi.n	7e2c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    7e0e:	b133      	cbz	r3, 7e1e <ll_addr_get+0x1a>
		if (bdaddr) {
    7e10:	b119      	cbz	r1, 7e1a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    7e12:	2206      	movs	r2, #6
    7e14:	4906      	ldr	r1, [pc, #24]	; (7e30 <ll_addr_get+0x2c>)
    7e16:	f7f9 ff03 	bl	1c20 <memcpy>
		}

		return rnd_addr;
    7e1a:	4805      	ldr	r0, [pc, #20]	; (7e30 <ll_addr_get+0x2c>)
    7e1c:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    7e1e:	b119      	cbz	r1, 7e28 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    7e20:	2206      	movs	r2, #6
    7e22:	4904      	ldr	r1, [pc, #16]	; (7e34 <ll_addr_get+0x30>)
    7e24:	f7f9 fefc 	bl	1c20 <memcpy>
	}

	return pub_addr;
    7e28:	4802      	ldr	r0, [pc, #8]	; (7e34 <ll_addr_get+0x30>)
}
    7e2a:	bd08      	pop	{r3, pc}
		return NULL;
    7e2c:	2000      	movs	r0, #0
    7e2e:	bd08      	pop	{r3, pc}
    7e30:	20000852 	.word	0x20000852
    7e34:	2000084c 	.word	0x2000084c

00007e38 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    7e38:	b570      	push	{r4, r5, r6, lr}
    7e3a:	4606      	mov	r6, r0
    7e3c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    7e3e:	f008 fa0b 	bl	10258 <ll_adv_is_enabled>
    7e42:	4604      	mov	r4, r0
    7e44:	b110      	cbz	r0, 7e4c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    7e46:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    7e48:	4620      	mov	r0, r4
    7e4a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    7e4c:	f008 fa18 	bl	10280 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    7e50:	f010 0f06 	tst.w	r0, #6
    7e54:	d1f7      	bne.n	7e46 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7e56:	2206      	movs	r2, #6
    7e58:	4629      	mov	r1, r5
	if (addr_type) {
    7e5a:	b11e      	cbz	r6, 7e64 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7e5c:	4802      	ldr	r0, [pc, #8]	; (7e68 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7e5e:	f7f9 fedf 	bl	1c20 <memcpy>
    7e62:	e7f1      	b.n	7e48 <ll_addr_set+0x10>
    7e64:	4801      	ldr	r0, [pc, #4]	; (7e6c <ll_addr_set+0x34>)
    7e66:	e7fa      	b.n	7e5e <ll_addr_set+0x26>
    7e68:	20000852 	.word	0x20000852
    7e6c:	2000084c 	.word	0x2000084c

00007e70 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    7e70:	2300      	movs	r3, #0
    7e72:	7003      	strb	r3, [r0, #0]
	*max = 0;
    7e74:	700b      	strb	r3, [r1, #0]
    7e76:	4770      	bx	lr

00007e78 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    7e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e7a:	4607      	mov	r7, r0
    7e7c:	460e      	mov	r6, r1
	while (len) {
    7e7e:	460c      	mov	r4, r1
    7e80:	1b35      	subs	r5, r6, r4
    7e82:	443d      	add	r5, r7
    7e84:	b18c      	cbz	r4, 7eaa <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    7e86:	f7f9 f8af 	bl	fe8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    7e8a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    7e8c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    7e8e:	d907      	bls.n	7ea0 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    7e90:	2204      	movs	r2, #4
    7e92:	eb0d 0102 	add.w	r1, sp, r2
    7e96:	4628      	mov	r0, r5
    7e98:	f7f9 fec2 	bl	1c20 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    7e9c:	3c04      	subs	r4, #4
    7e9e:	e7ef      	b.n	7e80 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    7ea0:	4622      	mov	r2, r4
    7ea2:	a901      	add	r1, sp, #4
    7ea4:	4628      	mov	r0, r5
    7ea6:	f7f9 febb 	bl	1c20 <memcpy>
			break;
		}
	}

	return 0;
}
    7eaa:	2000      	movs	r0, #0
    7eac:	b003      	add	sp, #12
    7eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007eb0 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7eb0:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7eb2:	2300      	movs	r3, #0
    7eb4:	f00a f9a0 	bl	121f8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7eb8:	2000      	movs	r0, #0
    7eba:	bd08      	pop	{r3, pc}

00007ebc <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    7ebc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7ebe:	4802      	ldr	r0, [pc, #8]	; (7ec8 <_hci_driver_init+0xc>)
    7ec0:	f7fb fd8e 	bl	39e0 <bt_hci_driver_register>

	return 0;
}
    7ec4:	2000      	movs	r0, #0
    7ec6:	bd08      	pop	{r3, pc}
    7ec8:	00016a34 	.word	0x00016a34

00007ecc <recv_thread>:
{
    7ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    7ece:	4d29      	ldr	r5, [pc, #164]	; (7f74 <recv_thread+0xa8>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7ed0:	2600      	movs	r6, #0
    7ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ed6:	4628      	mov	r0, r5
    7ed8:	f00b fe14 	bl	13b04 <_impl_k_queue_get>
		if (node_rx && !buf) {
    7edc:	4604      	mov	r4, r0
    7ede:	2800      	cmp	r0, #0
    7ee0:	d037      	beq.n	7f52 <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    7ee2:	f001 fd43 	bl	996c <hci_get_class>
	switch (class) {
    7ee6:	1e03      	subs	r3, r0, #0
    7ee8:	9403      	str	r4, [sp, #12]
    7eea:	db03      	blt.n	7ef4 <recv_thread+0x28>
    7eec:	2b02      	cmp	r3, #2
    7eee:	dd11      	ble.n	7f14 <recv_thread+0x48>
    7ef0:	2b03      	cmp	r3, #3
    7ef2:	d031      	beq.n	7f58 <recv_thread+0x8c>
		LL_ASSERT(0);
    7ef4:	4b20      	ldr	r3, [pc, #128]	; (7f78 <recv_thread+0xac>)
    7ef6:	9301      	str	r3, [sp, #4]
    7ef8:	9300      	str	r3, [sp, #0]
    7efa:	4b20      	ldr	r3, [pc, #128]	; (7f7c <recv_thread+0xb0>)
    7efc:	4a20      	ldr	r2, [pc, #128]	; (7f80 <recv_thread+0xb4>)
    7efe:	681c      	ldr	r4, [r3, #0]
    7f00:	4920      	ldr	r1, [pc, #128]	; (7f84 <recv_thread+0xb8>)
    7f02:	4b21      	ldr	r3, [pc, #132]	; (7f88 <recv_thread+0xbc>)
    7f04:	4821      	ldr	r0, [pc, #132]	; (7f8c <recv_thread+0xc0>)
    7f06:	47a0      	blx	r4
    7f08:	4040      	eors	r0, r0
    7f0a:	f380 8811 	msr	BASEPRI, r0
    7f0e:	f04f 0004 	mov.w	r0, #4
    7f12:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    7f14:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    7f16:	bf0e      	itee	eq
    7f18:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7f1a:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    7f1e:	2001      	movne	r0, #1
    7f20:	f7fb fe4e 	bl	3bc0 <bt_buf_get_rx>
    7f24:	4604      	mov	r4, r0
		if (buf) {
    7f26:	b118      	cbz	r0, 7f30 <recv_thread+0x64>
			hci_evt_encode(node_rx, buf);
    7f28:	4601      	mov	r1, r0
    7f2a:	9803      	ldr	r0, [sp, #12]
    7f2c:	f001 f952 	bl	91d4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    7f30:	9b03      	ldr	r3, [sp, #12]
    7f32:	2100      	movs	r1, #0
    7f34:	88d8      	ldrh	r0, [r3, #6]
    7f36:	f008 fe11 	bl	10b5c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7f3a:	a804      	add	r0, sp, #16
    7f3c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    7f40:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7f42:	f008 fd93 	bl	10a6c <ll_rx_mem_release>
		if (buf) {
    7f46:	b124      	cbz	r4, 7f52 <recv_thread+0x86>
			if (buf->len) {
    7f48:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    7f4a:	4620      	mov	r0, r4
			if (buf->len) {
    7f4c:	b173      	cbz	r3, 7f6c <recv_thread+0xa0>
				bt_recv(buf);
    7f4e:	f7fb f8b1 	bl	30b4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7f52:	f00c f83d 	bl	13fd0 <_impl_k_yield>
    7f56:	e7bc      	b.n	7ed2 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f5c:	f7fb fe30 	bl	3bc0 <bt_buf_get_rx>
    7f60:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7f62:	4601      	mov	r1, r0
    7f64:	9803      	ldr	r0, [sp, #12]
    7f66:	f001 f8f3 	bl	9150 <hci_acl_encode>
    7f6a:	e7e1      	b.n	7f30 <recv_thread+0x64>
				net_buf_unref(buf);
    7f6c:	f00a ff96 	bl	12e9c <net_buf_unref>
    7f70:	e7ef      	b.n	7f52 <recv_thread+0x86>
    7f72:	bf00      	nop
    7f74:	20003f94 	.word	0x20003f94
    7f78:	00014c55 	.word	0x00014c55
    7f7c:	20003aa4 	.word	0x20003aa4
    7f80:	000159c3 	.word	0x000159c3
    7f84:	00015a12 	.word	0x00015a12
    7f88:	00016a06 	.word	0x00016a06
    7f8c:	00015962 	.word	0x00015962

00007f90 <hci_driver_send>:
{
    7f90:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7f92:	8983      	ldrh	r3, [r0, #12]
{
    7f94:	b087      	sub	sp, #28
    7f96:	4605      	mov	r5, r0
	if (!buf->len) {
    7f98:	b973      	cbnz	r3, 7fb8 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    7f9a:	4b21      	ldr	r3, [pc, #132]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7f9c:	9301      	str	r3, [sp, #4]
    7f9e:	9300      	str	r3, [sp, #0]
    7fa0:	4b20      	ldr	r3, [pc, #128]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fa2:	4a21      	ldr	r2, [pc, #132]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fa4:	681c      	ldr	r4, [r3, #0]
    7fa6:	4921      	ldr	r1, [pc, #132]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7fa8:	4b21      	ldr	r3, [pc, #132]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7faa:	4822      	ldr	r0, [pc, #136]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7fac:	47a0      	blx	r4
		return -EINVAL;
    7fae:	f06f 0415 	mvn.w	r4, #21
}
    7fb2:	4620      	mov	r0, r4
    7fb4:	b007      	add	sp, #28
    7fb6:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    7fb8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    7fba:	b183      	cbz	r3, 7fde <hci_driver_send+0x4e>
    7fbc:	2b02      	cmp	r3, #2
    7fbe:	d11f      	bne.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	err = hci_acl_handle(buf, &evt);
    7fc0:	a905      	add	r1, sp, #20
    7fc2:	f001 f82d 	bl	9020 <hci_acl_handle>
    7fc6:	4604      	mov	r4, r0
	if (evt) {
    7fc8:	9805      	ldr	r0, [sp, #20]
    7fca:	b108      	cbz	r0, 7fd0 <hci_driver_send+0x40>
		bt_recv_prio(evt);
    7fcc:	f7fb fc10 	bl	37f0 <bt_recv_prio>
	if (!err) {
    7fd0:	2c00      	cmp	r4, #0
    7fd2:	d1ee      	bne.n	7fb2 <hci_driver_send+0x22>
		net_buf_unref(buf);
    7fd4:	4628      	mov	r0, r5
    7fd6:	f00a ff61 	bl	12e9c <net_buf_unref>
    7fda:	2400      	movs	r4, #0
    7fdc:	e7e9      	b.n	7fb2 <hci_driver_send+0x22>
	evt = hci_cmd_handle(buf);
    7fde:	f000 fab3 	bl	8548 <hci_cmd_handle>
	if (evt) {
    7fe2:	4602      	mov	r2, r0
    7fe4:	2800      	cmp	r0, #0
    7fe6:	d0f5      	beq.n	7fd4 <hci_driver_send+0x44>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    7fe8:	6883      	ldr	r3, [r0, #8]
    7fea:	7819      	ldrb	r1, [r3, #0]
    7fec:	2913      	cmp	r1, #19
    7fee:	d813      	bhi.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
    7ff0:	2301      	movs	r3, #1
    7ff2:	408b      	lsls	r3, r1
    7ff4:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    7ff8:	d00e      	beq.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
			bt_recv_prio(evt);
    7ffa:	f7fb fbf9 	bl	37f0 <bt_recv_prio>
    7ffe:	e7e9      	b.n	7fd4 <hci_driver_send+0x44>
		BT_ERR("Unknown HCI type %u", type);
    8000:	4a07      	ldr	r2, [pc, #28]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    8002:	9202      	str	r2, [sp, #8]
    8004:	e88d 000c 	stmia.w	sp, {r2, r3}
    8008:	4b06      	ldr	r3, [pc, #24]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    800a:	4a07      	ldr	r2, [pc, #28]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    800c:	681c      	ldr	r4, [r3, #0]
    800e:	4907      	ldr	r1, [pc, #28]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    8010:	4b07      	ldr	r3, [pc, #28]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    8012:	4809      	ldr	r0, [pc, #36]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    8014:	47a0      	blx	r4
    8016:	e7ca      	b.n	7fae <hci_driver_send+0x1e>
			bt_recv(evt);
    8018:	4610      	mov	r0, r2
    801a:	f7fb f84b 	bl	30b4 <bt_recv>
    801e:	e7d9      	b.n	7fd4 <hci_driver_send+0x44>
    8020:	00014c55 	.word	0x00014c55
    8024:	20003aa4 	.word	0x20003aa4
    8028:	000159c3 	.word	0x000159c3
    802c:	00015a12 	.word	0x00015a12
    8030:	00016a12 	.word	0x00016a12
    8034:	00016a75 	.word	0x00016a75
    8038:	00016a96 	.word	0x00016a96

0000803c <prio_recv_thread>:
{
    803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    803e:	4d14      	ldr	r5, [pc, #80]	; (8090 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    8040:	4e14      	ldr	r6, [pc, #80]	; (8094 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    8042:	f10d 0102 	add.w	r1, sp, #2
    8046:	a801      	add	r0, sp, #4
    8048:	f008 fcd8 	bl	109fc <ll_rx_get>
    804c:	4604      	mov	r4, r0
    804e:	b940      	cbnz	r0, 8062 <prio_recv_thread+0x26>
		if (node_rx) {
    8050:	9b01      	ldr	r3, [sp, #4]
    8052:	b1bb      	cbz	r3, 8084 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    8054:	f008 ffba 	bl	10fcc <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    8058:	9901      	ldr	r1, [sp, #4]
    805a:	4630      	mov	r0, r6
    805c:	f00b fd2e 	bl	13abc <k_queue_append>
    8060:	e7ef      	b.n	8042 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8062:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8066:	2001      	movs	r0, #1
    8068:	f7fb fdaa 	bl	3bc0 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    806c:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    806e:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8070:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8074:	f001 fc66 	bl	9944 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    8078:	4638      	mov	r0, r7
    807a:	f7fb fbb9 	bl	37f0 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    807e:	f00b ffa7 	bl	13fd0 <_impl_k_yield>
    8082:	e7de      	b.n	8042 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8088:	4628      	mov	r0, r5
    808a:	f00c f82d 	bl	140e8 <_impl_k_sem_take>
    808e:	e7d8      	b.n	8042 <prio_recv_thread+0x6>
    8090:	20003f78 	.word	0x20003f78
    8094:	20003f94 	.word	0x20003f94

00008098 <hci_driver_open>:
{
    8098:	b530      	push	{r4, r5, lr}
	err = ll_init(&sem_prio_recv);
    809a:	481a      	ldr	r0, [pc, #104]	; (8104 <hci_driver_open+0x6c>)
{
    809c:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    809e:	f009 f87f 	bl	111a0 <ll_init>
	if (err) {
    80a2:	4604      	mov	r4, r0
    80a4:	b168      	cbz	r0, 80c2 <hci_driver_open+0x2a>
		BT_ERR("LL initialization failed: %u", err);
    80a6:	4b18      	ldr	r3, [pc, #96]	; (8108 <hci_driver_open+0x70>)
    80a8:	9302      	str	r3, [sp, #8]
    80aa:	e88d 0018 	stmia.w	sp, {r3, r4}
    80ae:	4b17      	ldr	r3, [pc, #92]	; (810c <hci_driver_open+0x74>)
    80b0:	4a17      	ldr	r2, [pc, #92]	; (8110 <hci_driver_open+0x78>)
    80b2:	681d      	ldr	r5, [r3, #0]
    80b4:	4917      	ldr	r1, [pc, #92]	; (8114 <hci_driver_open+0x7c>)
    80b6:	4b18      	ldr	r3, [pc, #96]	; (8118 <hci_driver_open+0x80>)
    80b8:	4818      	ldr	r0, [pc, #96]	; (811c <hci_driver_open+0x84>)
    80ba:	47a8      	blx	r5
}
    80bc:	4620      	mov	r0, r4
    80be:	b007      	add	sp, #28
    80c0:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    80c2:	f001 fc6b 	bl	999c <hci_init>

    80c6:	f06f 0309 	mvn.w	r3, #9
    80ca:	9303      	str	r3, [sp, #12]
    80cc:	9405      	str	r4, [sp, #20]
    80ce:	9404      	str	r4, [sp, #16]
    80d0:	9402      	str	r4, [sp, #8]
    80d2:	9401      	str	r4, [sp, #4]
    80d4:	9400      	str	r4, [sp, #0]
    80d6:	4b12      	ldr	r3, [pc, #72]	; (8120 <hci_driver_open+0x88>)
    80d8:	4912      	ldr	r1, [pc, #72]	; (8124 <hci_driver_open+0x8c>)
    80da:	4813      	ldr	r0, [pc, #76]	; (8128 <hci_driver_open+0x90>)
    80dc:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    80e0:	f00c f9ec 	bl	144bc <_impl_k_thread_create>
    80e4:	f06f 0307 	mvn.w	r3, #7
    80e8:	9303      	str	r3, [sp, #12]
    80ea:	9405      	str	r4, [sp, #20]
    80ec:	9404      	str	r4, [sp, #16]
    80ee:	9402      	str	r4, [sp, #8]
    80f0:	9401      	str	r4, [sp, #4]
    80f2:	9400      	str	r4, [sp, #0]
    80f4:	4b0d      	ldr	r3, [pc, #52]	; (812c <hci_driver_open+0x94>)
    80f6:	490e      	ldr	r1, [pc, #56]	; (8130 <hci_driver_open+0x98>)
    80f8:	480e      	ldr	r0, [pc, #56]	; (8134 <hci_driver_open+0x9c>)
    80fa:	f240 522c 	movw	r2, #1324	; 0x52c
    80fe:	f00c f9dd 	bl	144bc <_impl_k_thread_create>
    8102:	e7db      	b.n	80bc <hci_driver_open+0x24>
    8104:	20003f78 	.word	0x20003f78
    8108:	00014c55 	.word	0x00014c55
    810c:	20003aa4 	.word	0x20003aa4
    8110:	000159c3 	.word	0x000159c3
    8114:	00015a12 	.word	0x00015a12
    8118:	00016a22 	.word	0x00016a22
    811c:	00016a48 	.word	0x00016a48
    8120:	0000803d 	.word	0x0000803d
    8124:	20002108 	.word	0x20002108
    8128:	200018d8 	.word	0x200018d8
    812c:	00007ecd 	.word	0x00007ecd
    8130:	200023f8 	.word	0x200023f8
    8134:	20001868 	.word	0x20001868

00008138 <sys_put_le32>:
	dst[1] = val >> 8;
    8138:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    813c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    813e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    8140:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    8142:	0a00      	lsrs	r0, r0, #8
    8144:	704b      	strb	r3, [r1, #1]
    8146:	70c8      	strb	r0, [r1, #3]
    8148:	4770      	bx	lr

0000814a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    814a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    814c:	3008      	adds	r0, #8
{
    814e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    8150:	2102      	movs	r1, #2
{
    8152:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    8154:	f00a feda 	bl	12f0c <net_buf_simple_add>
	hdr->evt = evt;
    8158:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    815a:	7044      	strb	r4, [r0, #1]
    815c:	bd38      	pop	{r3, r4, r5, pc}
	...

00008160 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    8160:	b538      	push	{r3, r4, r5, lr}
    8162:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    8164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8168:	f7fb fd3a 	bl	3be0 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    816c:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    816e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8170:	210f      	movs	r1, #15
    8172:	f7ff ffea 	bl	814a <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8176:	2104      	movs	r1, #4
    8178:	f104 0008 	add.w	r0, r4, #8
    817c:	f00a fec6 	bl	12f0c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8180:	2301      	movs	r3, #1
    8182:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <cmd_status+0x30>)
	cs->status = status;
    8186:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8188:	881b      	ldrh	r3, [r3, #0]
    818a:	8043      	strh	r3, [r0, #2]

	return buf;
}
    818c:	4620      	mov	r0, r4
    818e:	bd38      	pop	{r3, r4, r5, pc}
    8190:	20000858 	.word	0x20000858

00008194 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8194:	b570      	push	{r4, r5, r6, lr}
    8196:	4604      	mov	r4, r0
    8198:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    819a:	3201      	adds	r2, #1
{
    819c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    819e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    81a0:	b2d2      	uxtb	r2, r2
    81a2:	213e      	movs	r1, #62	; 0x3e
    81a4:	f7ff ffd1 	bl	814a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    81a8:	2101      	movs	r1, #1
    81aa:	4620      	mov	r0, r4
    81ac:	f00a feae 	bl	12f0c <net_buf_simple_add>
	me->subevent = subevt;
    81b0:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    81b2:	4629      	mov	r1, r5
    81b4:	4620      	mov	r0, r4
}
    81b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    81ba:	f00a bea7 	b.w	12f0c <net_buf_simple_add>
	...

000081c0 <cmd_complete>:
{
    81c0:	b538      	push	{r3, r4, r5, lr}
    81c2:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    81c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    81c8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    81ca:	f7fb fd09 	bl	3be0 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    81ce:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    81d0:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    81d2:	b2d2      	uxtb	r2, r2
    81d4:	210e      	movs	r1, #14
    81d6:	f7ff ffb8 	bl	814a <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    81da:	6820      	ldr	r0, [r4, #0]
    81dc:	2103      	movs	r1, #3
    81de:	3008      	adds	r0, #8
    81e0:	f00a fe94 	bl	12f0c <net_buf_simple_add>
	cc->ncmd = 1;
    81e4:	2301      	movs	r3, #1
    81e6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    81e8:	4b05      	ldr	r3, [pc, #20]	; (8200 <cmd_complete+0x40>)
    81ea:	881b      	ldrh	r3, [r3, #0]
    81ec:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    81f0:	6820      	ldr	r0, [r4, #0]
    81f2:	4629      	mov	r1, r5
    81f4:	3008      	adds	r0, #8
}
    81f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    81fa:	f00a be87 	b.w	12f0c <net_buf_simple_add>
    81fe:	bf00      	nop
    8200:	20000858 	.word	0x20000858

00008204 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8204:	4b0e      	ldr	r3, [pc, #56]	; (8240 <encrypt_change+0x3c>)
{
    8206:	b570      	push	{r4, r5, r6, lr}
    8208:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    820a:	e9d3 2300 	ldrd	r2, r3, [r3]
    820e:	2300      	movs	r3, #0
    8210:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8214:	4313      	orrs	r3, r2
{
    8216:	4604      	mov	r4, r0
    8218:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    821a:	d010      	beq.n	823e <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    821c:	2204      	movs	r2, #4
    821e:	2108      	movs	r1, #8
    8220:	4628      	mov	r0, r5
    8222:	f7ff ff92 	bl	814a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8226:	2104      	movs	r1, #4
    8228:	f105 0008 	add.w	r0, r5, #8
    822c:	f00a fe6e 	bl	12f0c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8230:	fab4 f384 	clz	r3, r4
    8234:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8236:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8238:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    823c:	70c3      	strb	r3, [r0, #3]
    823e:	bd70      	pop	{r4, r5, r6, pc}
    8240:	20003d78 	.word	0x20003d78

00008244 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8244:	b570      	push	{r4, r5, r6, lr}
    8246:	4604      	mov	r4, r0
    8248:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    824a:	4b13      	ldr	r3, [pc, #76]	; (8298 <le_remote_feat_complete+0x54>)
{
    824c:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    824e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8252:	2200      	movs	r2, #0
    8254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8258:	4313      	orrs	r3, r2
{
    825a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    825c:	d01b      	beq.n	8296 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    825e:	4b0f      	ldr	r3, [pc, #60]	; (829c <le_remote_feat_complete+0x58>)
    8260:	e9d3 2300 	ldrd	r2, r3, [r3]
    8264:	2300      	movs	r3, #0
    8266:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    826a:	4313      	orrs	r3, r2
    826c:	d013      	beq.n	8296 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    826e:	220b      	movs	r2, #11
    8270:	2104      	movs	r1, #4
    8272:	f7ff ff8f 	bl	8194 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8276:	2208      	movs	r2, #8
	sep->status = status;
    8278:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    827a:	f8a0 6001 	strh.w	r6, [r0, #1]
    827e:	3003      	adds	r0, #3
	if (!status) {
    8280:	b924      	cbnz	r4, 828c <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    8282:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8288:	f7f9 bcca 	b.w	1c20 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    828c:	2100      	movs	r1, #0
}
    828e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8292:	f7f9 bcf1 	b.w	1c78 <memset>
    8296:	bd70      	pop	{r4, r5, r6, pc}
    8298:	20003d78 	.word	0x20003d78
    829c:	20003d80 	.word	0x20003d80

000082a0 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    82a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82a4:	4605      	mov	r5, r0
    82a6:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    82a8:	4b46      	ldr	r3, [pc, #280]	; (83c4 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    82aa:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    82ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    82b0:	f240 2801 	movw	r8, #513	; 0x201
    82b4:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    82b8:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    82bc:	ea03 0309 	and.w	r3, r3, r9
    82c0:	ea02 0208 	and.w	r2, r2, r8
    82c4:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    82c6:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    82c8:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    82cc:	d077      	beq.n	83be <le_conn_complete.part.39+0x11e>
	if (!status) {
    82ce:	2d00      	cmp	r5, #0
    82d0:	d150      	bne.n	8374 <le_conn_complete.part.39+0xd4>
		conn_count++;
    82d2:	4a3d      	ldr	r2, [pc, #244]	; (83c8 <le_conn_complete.part.39+0x128>)
    82d4:	6813      	ldr	r3, [r2, #0]
    82d6:	3301      	adds	r3, #1
    82d8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    82da:	ea5a 030b 	orrs.w	r3, sl, fp
    82de:	f101 0803 	add.w	r8, r1, #3
    82e2:	d151      	bne.n	8388 <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    82e4:	2212      	movs	r2, #18
    82e6:	2101      	movs	r1, #1
    82e8:	f7ff ff54 	bl	8194 <meta_evt>
	lecc->status = 0x00;
    82ec:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    82ee:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    82f2:	7863      	ldrb	r3, [r4, #1]
    82f4:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    82f6:	78a3      	ldrb	r3, [r4, #2]
    82f8:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    82fa:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    82fc:	2206      	movs	r2, #6
    82fe:	4641      	mov	r1, r8
    8300:	3005      	adds	r0, #5
    8302:	f7f9 fc8d 	bl	1c20 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    8306:	8ae3      	ldrh	r3, [r4, #22]
    8308:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    830c:	8b23      	ldrh	r3, [r4, #24]
    830e:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8312:	8b63      	ldrh	r3, [r4, #26]
    8314:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    8318:	7f23      	ldrb	r3, [r4, #28]
    831a:	747b      	strb	r3, [r7, #17]
    831c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8320:	221e      	movs	r2, #30
    8322:	210a      	movs	r1, #10
    8324:	f7ff ff36 	bl	8194 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    8328:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    832a:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    832c:	2100      	movs	r1, #0
    832e:	f7f9 fca3 	bl	1c78 <memset>
		lecc->status = status;
    8332:	7025      	strb	r5, [r4, #0]
    8334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    8338:	7d63      	ldrb	r3, [r4, #21]
    833a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    833e:	2b40      	cmp	r3, #64	; 0x40
    8340:	d138      	bne.n	83b4 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    8342:	2206      	movs	r2, #6
    8344:	f104 0110 	add.w	r1, r4, #16
    8348:	f7f9 fc6a 	bl	1c20 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    834c:	2206      	movs	r2, #6
    834e:	f104 0109 	add.w	r1, r4, #9
    8352:	f107 0011 	add.w	r0, r7, #17
    8356:	f7f9 fc63 	bl	1c20 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    835a:	8ae3      	ldrh	r3, [r4, #22]
    835c:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    8360:	8b23      	ldrh	r3, [r4, #24]
    8362:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    8366:	8b63      	ldrh	r3, [r4, #26]
    8368:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    836c:	7f23      	ldrb	r3, [r4, #28]
    836e:	777b      	strb	r3, [r7, #29]
    8370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    8374:	ea5a 030b 	orrs.w	r3, sl, fp
    8378:	d1d2      	bne.n	8320 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    837a:	2212      	movs	r2, #18
    837c:	2101      	movs	r1, #1
    837e:	f7ff ff09 	bl	8194 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    8382:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    8384:	4604      	mov	r4, r0
    8386:	e7d1      	b.n	832c <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    8388:	221e      	movs	r2, #30
    838a:	210a      	movs	r1, #10
    838c:	f7ff ff02 	bl	8194 <meta_evt>
		leecc->status = 0x00;
    8390:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    8392:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    8396:	7863      	ldrb	r3, [r4, #1]
    8398:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    839a:	78a3      	ldrb	r3, [r4, #2]
    839c:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    839e:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    83a0:	2206      	movs	r2, #6
    83a2:	4641      	mov	r1, r8
    83a4:	3005      	adds	r0, #5
    83a6:	f7f9 fc3b 	bl	1c20 <memcpy>
		if ((radio_cc->own_addr_type) &&
    83aa:	7be3      	ldrb	r3, [r4, #15]
    83ac:	f107 000b 	add.w	r0, r7, #11
    83b0:	2b00      	cmp	r3, #0
    83b2:	d1c1      	bne.n	8338 <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    83b4:	2206      	movs	r2, #6
    83b6:	2100      	movs	r1, #0
    83b8:	f7f9 fc5e 	bl	1c78 <memset>
    83bc:	e7c6      	b.n	834c <le_conn_complete.part.39+0xac>
    83be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83c2:	bf00      	nop
    83c4:	20003d80 	.word	0x20003d80
    83c8:	2000085c 	.word	0x2000085c

000083cc <bt_addr_le_to_str.constprop.70>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    83cc:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    83ce:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    83d0:	b08a      	sub	sp, #40	; 0x28
    83d2:	4604      	mov	r4, r0
    83d4:	460e      	mov	r6, r1
    83d6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    83d8:	2b03      	cmp	r3, #3
    83da:	d820      	bhi.n	841e <bt_addr_le_to_str.constprop.70+0x52>
    83dc:	e8df f003 	tbb	[pc, r3]
    83e0:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    83e4:	4911      	ldr	r1, [pc, #68]	; (842c <bt_addr_le_to_str.constprop.70+0x60>)
		strcpy(type, "random");
    83e6:	4628      	mov	r0, r5
    83e8:	f7f9 fbe6 	bl	1bb8 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    83ec:	7862      	ldrb	r2, [r4, #1]
    83ee:	9204      	str	r2, [sp, #16]
    83f0:	78a2      	ldrb	r2, [r4, #2]
    83f2:	9203      	str	r2, [sp, #12]
    83f4:	78e2      	ldrb	r2, [r4, #3]
    83f6:	9202      	str	r2, [sp, #8]
    83f8:	7922      	ldrb	r2, [r4, #4]
    83fa:	9201      	str	r2, [sp, #4]
    83fc:	7962      	ldrb	r2, [r4, #5]
    83fe:	9200      	str	r2, [sp, #0]
    8400:	79a3      	ldrb	r3, [r4, #6]
    8402:	9505      	str	r5, [sp, #20]
    8404:	4a0a      	ldr	r2, [pc, #40]	; (8430 <bt_addr_le_to_str.constprop.70+0x64>)
    8406:	211b      	movs	r1, #27
    8408:	4630      	mov	r0, r6
    840a:	f7f8 fdcd 	bl	fa8 <snprintk>
}
    840e:	b00a      	add	sp, #40	; 0x28
    8410:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    8412:	4908      	ldr	r1, [pc, #32]	; (8434 <bt_addr_le_to_str.constprop.70+0x68>)
    8414:	e7e7      	b.n	83e6 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "public id");
    8416:	4908      	ldr	r1, [pc, #32]	; (8438 <bt_addr_le_to_str.constprop.70+0x6c>)
    8418:	e7e5      	b.n	83e6 <bt_addr_le_to_str.constprop.70+0x1a>
		strcpy(type, "random id");
    841a:	4908      	ldr	r1, [pc, #32]	; (843c <bt_addr_le_to_str.constprop.70+0x70>)
    841c:	e7e3      	b.n	83e6 <bt_addr_le_to_str.constprop.70+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    841e:	4a08      	ldr	r2, [pc, #32]	; (8440 <bt_addr_le_to_str.constprop.70+0x74>)
    8420:	210a      	movs	r1, #10
    8422:	4628      	mov	r0, r5
    8424:	f7f8 fdc0 	bl	fa8 <snprintk>
    8428:	e7e0      	b.n	83ec <bt_addr_le_to_str.constprop.70+0x20>
    842a:	bf00      	nop
    842c:	00014bc1 	.word	0x00014bc1
    8430:	00014bea 	.word	0x00014bea
    8434:	00014bc8 	.word	0x00014bc8
    8438:	00014bcf 	.word	0x00014bcf
    843c:	00014bd9 	.word	0x00014bd9
    8440:	00014be3 	.word	0x00014be3

00008444 <le_adv_ext_report.isra.66>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8448:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    844a:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    844c:	4d33      	ldr	r5, [pc, #204]	; (851c <le_adv_ext_report.isra.66+0xd8>)
    844e:	4e34      	ldr	r6, [pc, #208]	; (8520 <le_adv_ext_report.isra.66+0xdc>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8450:	b093      	sub	sp, #76	; 0x4c
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8452:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8454:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8456:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    8458:	6837      	ldr	r7, [r6, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    845a:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    845c:	b25b      	sxtb	r3, r3
    845e:	9306      	str	r3, [sp, #24]
    8460:	7823      	ldrb	r3, [r4, #0]
    8462:	9003      	str	r0, [sp, #12]
    8464:	09d9      	lsrs	r1, r3, #7
    8466:	9105      	str	r1, [sp, #20]
    8468:	f3c3 1180 	ubfx	r1, r3, #6, #1
    846c:	f003 030f 	and.w	r3, r3, #15
    8470:	9104      	str	r1, [sp, #16]
    8472:	9302      	str	r3, [sp, #8]
    8474:	9201      	str	r2, [sp, #4]
    8476:	4b2b      	ldr	r3, [pc, #172]	; (8524 <le_adv_ext_report.isra.66+0xe0>)
    8478:	9500      	str	r5, [sp, #0]
    847a:	4a2b      	ldr	r2, [pc, #172]	; (8528 <le_adv_ext_report.isra.66+0xe4>)
    847c:	492b      	ldr	r1, [pc, #172]	; (852c <le_adv_ext_report.isra.66+0xe8>)
    847e:	482c      	ldr	r0, [pc, #176]	; (8530 <le_adv_ext_report.isra.66+0xec>)
    8480:	47b8      	blx	r7
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8482:	7823      	ldrb	r3, [r4, #0]
    8484:	f003 030f 	and.w	r3, r3, #15
    8488:	2b07      	cmp	r3, #7
    848a:	d143      	bne.n	8514 <le_adv_ext_report.isra.66+0xd0>
    848c:	7863      	ldrb	r3, [r4, #1]
    848e:	2b00      	cmp	r3, #0
    8490:	d040      	beq.n	8514 <le_adv_ext_report.isra.66+0xd0>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8492:	9503      	str	r5, [sp, #12]
    8494:	78a3      	ldrb	r3, [r4, #2]
    8496:	4925      	ldr	r1, [pc, #148]	; (852c <le_adv_ext_report.isra.66+0xe8>)
    8498:	9500      	str	r5, [sp, #0]
    849a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    849e:	099b      	lsrs	r3, r3, #6
    84a0:	9202      	str	r2, [sp, #8]
    84a2:	9301      	str	r3, [sp, #4]
    84a4:	6837      	ldr	r7, [r6, #0]
    84a6:	4b1f      	ldr	r3, [pc, #124]	; (8524 <le_adv_ext_report.isra.66+0xe0>)
    84a8:	4a1f      	ldr	r2, [pc, #124]	; (8528 <le_adv_ext_report.isra.66+0xe4>)
    84aa:	4822      	ldr	r0, [pc, #136]	; (8534 <le_adv_ext_report.isra.66+0xf0>)
    84ac:	47b8      	blx	r7
		if (!p->ext_hdr_len) {
    84ae:	78a3      	ldrb	r3, [r4, #2]
    84b0:	0699      	lsls	r1, r3, #26
    84b2:	d02f      	beq.n	8514 <le_adv_ext_report.isra.66+0xd0>
		if (h->adv_addr) {
    84b4:	78e3      	ldrb	r3, [r4, #3]
    84b6:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    84b8:	f104 0804 	add.w	r8, r4, #4
		if (h->adv_addr) {
    84bc:	d51c      	bpl.n	84f8 <le_adv_ext_report.isra.66+0xb4>
			addr.type = adv->tx_addr;
    84be:	7823      	ldrb	r3, [r4, #0]
    84c0:	af12      	add	r7, sp, #72	; 0x48
    84c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    84c6:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    84ca:	2206      	movs	r2, #6
    84cc:	4641      	mov	r1, r8
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    84ce:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    84d2:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    84d6:	f7f9 fba3 	bl	1c20 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    84da:	4649      	mov	r1, r9
    84dc:	4638      	mov	r0, r7
    84de:	f7ff ff75 	bl	83cc <bt_addr_le_to_str.constprop.70>
			BT_WARN("AdvA: %s", addr_str);
    84e2:	9502      	str	r5, [sp, #8]
    84e4:	e88d 0220 	stmia.w	sp, {r5, r9}
    84e8:	6837      	ldr	r7, [r6, #0]
    84ea:	4b0e      	ldr	r3, [pc, #56]	; (8524 <le_adv_ext_report.isra.66+0xe0>)
    84ec:	4a0e      	ldr	r2, [pc, #56]	; (8528 <le_adv_ext_report.isra.66+0xe4>)
    84ee:	490f      	ldr	r1, [pc, #60]	; (852c <le_adv_ext_report.isra.66+0xe8>)
    84f0:	4811      	ldr	r0, [pc, #68]	; (8538 <le_adv_ext_report.isra.66+0xf4>)
			ptr += BDADDR_SIZE;
    84f2:	f104 080a 	add.w	r8, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    84f6:	47b8      	blx	r7
		if (h->tx_pwr) {
    84f8:	78e3      	ldrb	r3, [r4, #3]
    84fa:	065b      	lsls	r3, r3, #25
    84fc:	d50a      	bpl.n	8514 <le_adv_ext_report.isra.66+0xd0>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    84fe:	9502      	str	r5, [sp, #8]
    8500:	f998 3000 	ldrsb.w	r3, [r8]
    8504:	9301      	str	r3, [sp, #4]
    8506:	9500      	str	r5, [sp, #0]
    8508:	6834      	ldr	r4, [r6, #0]
    850a:	4b06      	ldr	r3, [pc, #24]	; (8524 <le_adv_ext_report.isra.66+0xe0>)
    850c:	4a06      	ldr	r2, [pc, #24]	; (8528 <le_adv_ext_report.isra.66+0xe4>)
    850e:	4907      	ldr	r1, [pc, #28]	; (852c <le_adv_ext_report.isra.66+0xe8>)
    8510:	480a      	ldr	r0, [pc, #40]	; (853c <le_adv_ext_report.isra.66+0xf8>)
    8512:	47a0      	blx	r4
}
    8514:	b013      	add	sp, #76	; 0x4c
    8516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    851a:	bf00      	nop
    851c:	00014c55 	.word	0x00014c55
    8520:	20003aa4 	.word	0x20003aa4
    8524:	00016b04 	.word	0x00016b04
    8528:	00015a0b 	.word	0x00015a0b
    852c:	00015a12 	.word	0x00015a12
    8530:	00016d61 	.word	0x00016d61
    8534:	00016dae 	.word	0x00016dae
    8538:	00016ddf 	.word	0x00016ddf
    853c:	00016df8 	.word	0x00016df8

00008540 <sys_get_le64>:
{
    8540:	4603      	mov	r3, r0
}
    8542:	6800      	ldr	r0, [r0, #0]
    8544:	6859      	ldr	r1, [r3, #4]
    8546:	4770      	bx	lr

00008548 <hci_cmd_handle>:
{
    8548:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    854a:	8981      	ldrh	r1, [r0, #12]
{
    854c:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    854e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8550:	2902      	cmp	r1, #2
{
    8552:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8554:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    8556:	d80c      	bhi.n	8572 <hci_cmd_handle+0x2a>
		BT_ERR("No HCI Command header");
    8558:	4bc0      	ldr	r3, [pc, #768]	; (885c <hci_cmd_handle+0x314>)
    855a:	9301      	str	r3, [sp, #4]
    855c:	9300      	str	r3, [sp, #0]
    855e:	4bc0      	ldr	r3, [pc, #768]	; (8860 <hci_cmd_handle+0x318>)
    8560:	4ac0      	ldr	r2, [pc, #768]	; (8864 <hci_cmd_handle+0x31c>)
    8562:	681c      	ldr	r4, [r3, #0]
    8564:	49c0      	ldr	r1, [pc, #768]	; (8868 <hci_cmd_handle+0x320>)
    8566:	4bc1      	ldr	r3, [pc, #772]	; (886c <hci_cmd_handle+0x324>)
    8568:	48c1      	ldr	r0, [pc, #772]	; (8870 <hci_cmd_handle+0x328>)
		BT_ERR("Invalid HCI CMD packet length");
    856a:	47a0      	blx	r4
		return NULL;
    856c:	4628      	mov	r0, r5
}
    856e:	b013      	add	sp, #76	; 0x4c
    8570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    8572:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8574:	4ebf      	ldr	r6, [pc, #764]	; (8874 <hci_cmd_handle+0x32c>)
    8576:	781a      	ldrb	r2, [r3, #0]
    8578:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    857a:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    857c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    8580:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8582:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8584:	d909      	bls.n	859a <hci_cmd_handle+0x52>
		BT_ERR("Invalid HCI CMD packet length");
    8586:	4bb5      	ldr	r3, [pc, #724]	; (885c <hci_cmd_handle+0x314>)
    8588:	9301      	str	r3, [sp, #4]
    858a:	9300      	str	r3, [sp, #0]
    858c:	4bb4      	ldr	r3, [pc, #720]	; (8860 <hci_cmd_handle+0x318>)
    858e:	4ab5      	ldr	r2, [pc, #724]	; (8864 <hci_cmd_handle+0x31c>)
    8590:	681c      	ldr	r4, [r3, #0]
    8592:	49b5      	ldr	r1, [pc, #724]	; (8868 <hci_cmd_handle+0x320>)
    8594:	4bb5      	ldr	r3, [pc, #724]	; (886c <hci_cmd_handle+0x324>)
    8596:	48b8      	ldr	r0, [pc, #736]	; (8878 <hci_cmd_handle+0x330>)
    8598:	e7e7      	b.n	856a <hci_cmd_handle+0x22>
	net_buf_pull(cmd, sizeof(*chdr));
    859a:	2103      	movs	r1, #3
    859c:	f104 0008 	add.w	r0, r4, #8
    85a0:	f00a fcd3 	bl	12f4a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    85a4:	8833      	ldrh	r3, [r6, #0]
    85a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    85aa:	0a9b      	lsrs	r3, r3, #10
    85ac:	2b04      	cmp	r3, #4
    85ae:	f000 80bd 	beq.w	872c <hci_cmd_handle+0x1e4>
    85b2:	d809      	bhi.n	85c8 <hci_cmd_handle+0x80>
    85b4:	2b01      	cmp	r3, #1
    85b6:	d027      	beq.n	8608 <hci_cmd_handle+0xc0>
    85b8:	2b03      	cmp	r3, #3
    85ba:	d03c      	beq.n	8636 <hci_cmd_handle+0xee>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    85bc:	2101      	movs	r1, #1
    85be:	a807      	add	r0, sp, #28
    85c0:	f7ff fdfe 	bl	81c0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    85c4:	2301      	movs	r3, #1
    85c6:	e29b      	b.n	8b00 <hci_cmd_handle+0x5b8>
	switch (BT_OGF(_opcode)) {
    85c8:	2b08      	cmp	r3, #8
    85ca:	f000 816b 	beq.w	88a4 <hci_cmd_handle+0x35c>
    85ce:	2b3f      	cmp	r3, #63	; 0x3f
    85d0:	d1f4      	bne.n	85bc <hci_cmd_handle+0x74>
	switch (ocf) {
    85d2:	3a01      	subs	r2, #1
    85d4:	2a09      	cmp	r2, #9
    85d6:	d8f1      	bhi.n	85bc <hci_cmd_handle+0x74>
    85d8:	a301      	add	r3, pc, #4	; (adr r3, 85e0 <hci_cmd_handle+0x98>)
    85da:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    85de:	bf00      	nop
    85e0:	00008e39 	.word	0x00008e39
    85e4:	00008e69 	.word	0x00008e69
    85e8:	00008e93 	.word	0x00008e93
    85ec:	000085bd 	.word	0x000085bd
    85f0:	000085bd 	.word	0x000085bd
    85f4:	00008ed9 	.word	0x00008ed9
    85f8:	000085bd 	.word	0x000085bd
    85fc:	00008eab 	.word	0x00008eab
    8600:	00008ee5 	.word	0x00008ee5
    8604:	00008f53 	.word	0x00008f53
	switch (ocf) {
    8608:	2a06      	cmp	r2, #6
    860a:	d006      	beq.n	861a <hci_cmd_handle+0xd2>
    860c:	2a1d      	cmp	r2, #29
    860e:	d1d5      	bne.n	85bc <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
    8610:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8612:	8818      	ldrh	r0, [r3, #0]
    8614:	f008 f907 	bl	10826 <ll_version_ind_send>
    8618:	e004      	b.n	8624 <hci_cmd_handle+0xdc>
    861a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    861c:	7899      	ldrb	r1, [r3, #2]
    861e:	8818      	ldrh	r0, [r3, #0]
    8620:	f008 f915 	bl	1084e <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8624:	2800      	cmp	r0, #0
    8626:	bf14      	ite	ne
    8628:	200c      	movne	r0, #12
    862a:	2000      	moveq	r0, #0
    862c:	f7ff fd98 	bl	8160 <cmd_status>
    8630:	9007      	str	r0, [sp, #28]
	return evt;
    8632:	9807      	ldr	r0, [sp, #28]
    8634:	e79b      	b.n	856e <hci_cmd_handle+0x26>
	switch (ocf) {
    8636:	2a2d      	cmp	r2, #45	; 0x2d
    8638:	d03a      	beq.n	86b0 <hci_cmd_handle+0x168>
    863a:	d820      	bhi.n	867e <hci_cmd_handle+0x136>
    863c:	2a01      	cmp	r2, #1
    863e:	d02b      	beq.n	8698 <hci_cmd_handle+0x150>
    8640:	2a03      	cmp	r2, #3
    8642:	d1bb      	bne.n	85bc <hci_cmd_handle+0x74>
	dup_count = -1;
    8644:	4b8d      	ldr	r3, [pc, #564]	; (887c <hci_cmd_handle+0x334>)
    8646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    864a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    864c:	4b8c      	ldr	r3, [pc, #560]	; (8880 <hci_cmd_handle+0x338>)
    864e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8652:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8656:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    865a:	4b8a      	ldr	r3, [pc, #552]	; (8884 <hci_cmd_handle+0x33c>)
    865c:	2000      	movs	r0, #0
    865e:	2100      	movs	r1, #0
    8660:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8664:	4b88      	ldr	r3, [pc, #544]	; (8888 <hci_cmd_handle+0x340>)
    8666:	201f      	movs	r0, #31
    8668:	2100      	movs	r1, #0
    866a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    866e:	f007 fda3 	bl	101b8 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8672:	2101      	movs	r1, #1
    8674:	a807      	add	r0, sp, #28
    8676:	f7ff fda3 	bl	81c0 <cmd_complete>
	ccst->status = 0x00;
    867a:	2300      	movs	r3, #0
    867c:	e240      	b.n	8b00 <hci_cmd_handle+0x5b8>
	switch (ocf) {
    867e:	2a7b      	cmp	r2, #123	; 0x7b
    8680:	d02c      	beq.n	86dc <hci_cmd_handle+0x194>
    8682:	2a7c      	cmp	r2, #124	; 0x7c
    8684:	d041      	beq.n	870a <hci_cmd_handle+0x1c2>
    8686:	2a63      	cmp	r2, #99	; 0x63
    8688:	d198      	bne.n	85bc <hci_cmd_handle+0x74>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    868a:	68a0      	ldr	r0, [r4, #8]
    868c:	f7ff ff58 	bl	8540 <sys_get_le64>
    8690:	4b7c      	ldr	r3, [pc, #496]	; (8884 <hci_cmd_handle+0x33c>)
	le_event_mask = sys_get_le64(cmd->events);
    8692:	e9c3 0100 	strd	r0, r1, [r3]
    8696:	e7ec      	b.n	8672 <hci_cmd_handle+0x12a>
	event_mask = sys_get_le64(cmd->events);
    8698:	68a0      	ldr	r0, [r4, #8]
    869a:	f7ff ff51 	bl	8540 <sys_get_le64>
    869e:	4b78      	ldr	r3, [pc, #480]	; (8880 <hci_cmd_handle+0x338>)
    86a0:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    86a4:	4611      	mov	r1, r2
    86a6:	a807      	add	r0, sp, #28
    86a8:	f7ff fd8a 	bl	81c0 <cmd_complete>
	ccst->status = 0x00;
    86ac:	7005      	strb	r5, [r0, #0]
    86ae:	e7c0      	b.n	8632 <hci_cmd_handle+0xea>
    86b0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    86b2:	2104      	movs	r1, #4
    86b4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    86b6:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    86b8:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    86ba:	f7ff fd81 	bl	81c0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    86be:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    86c0:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    86c2:	1cc2      	adds	r2, r0, #3
    86c4:	4639      	mov	r1, r7
    86c6:	4630      	mov	r0, r6
    86c8:	f008 f8d5 	bl	10876 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    86cc:	2800      	cmp	r0, #0
    86ce:	bf14      	ite	ne
    86d0:	2302      	movne	r3, #2
    86d2:	2300      	moveq	r3, #0
    86d4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    86d6:	f8a4 5001 	strh.w	r5, [r4, #1]
    86da:	e7aa      	b.n	8632 <hci_cmd_handle+0xea>
	handle = sys_le16_to_cpu(cmd->handle);
    86dc:	68a3      	ldr	r3, [r4, #8]
    86de:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    86e0:	a908      	add	r1, sp, #32
    86e2:	b2a0      	uxth	r0, r4
    86e4:	f008 f8d1 	bl	1088a <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    86e8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    86ea:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    86ec:	a807      	add	r0, sp, #28
    86ee:	f7ff fd67 	bl	81c0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    86f2:	2d00      	cmp	r5, #0
    86f4:	bf14      	ite	ne
    86f6:	230c      	movne	r3, #12
    86f8:	2300      	moveq	r3, #0
    86fa:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    86fc:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8700:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    8704:	f8a0 3003 	strh.w	r3, [r0, #3]
    8708:	e793      	b.n	8632 <hci_cmd_handle+0xea>
    870a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    870c:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    870e:	8859      	ldrh	r1, [r3, #2]
    8710:	b2a0      	uxth	r0, r4
    8712:	f008 f8ce 	bl	108b2 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8716:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8718:	2103      	movs	r1, #3
    871a:	a807      	add	r0, sp, #28
    871c:	f7ff fd50 	bl	81c0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8720:	2d00      	cmp	r5, #0
    8722:	bf14      	ite	ne
    8724:	230c      	movne	r3, #12
    8726:	2300      	moveq	r3, #0
    8728:	7003      	strb	r3, [r0, #0]
    872a:	e27f      	b.n	8c2c <hci_cmd_handle+0x6e4>
	switch (ocf) {
    872c:	3a01      	subs	r2, #1
    872e:	2a08      	cmp	r2, #8
    8730:	f63f af44 	bhi.w	85bc <hci_cmd_handle+0x74>
    8734:	a301      	add	r3, pc, #4	; (adr r3, 873c <hci_cmd_handle+0x1f4>)
    8736:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    873a:	bf00      	nop
    873c:	00008761 	.word	0x00008761
    8740:	0000878b 	.word	0x0000878b
    8744:	0000883f 	.word	0x0000883f
    8748:	000085bd 	.word	0x000085bd
    874c:	000085bd 	.word	0x000085bd
    8750:	000085bd 	.word	0x000085bd
    8754:	000085bd 	.word	0x000085bd
    8758:	000085bd 	.word	0x000085bd
    875c:	0000888d 	.word	0x0000888d
	rp = cmd_complete(evt, sizeof(*rp));
    8760:	2109      	movs	r1, #9
    8762:	a807      	add	r0, sp, #28
    8764:	f7ff fd2c 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8768:	2300      	movs	r3, #0
    876a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    876c:	7083      	strb	r3, [r0, #2]
    876e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8770:	f06f 030e 	mvn.w	r3, #14
    8774:	7143      	strb	r3, [r0, #5]
    8776:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    8778:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    877a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    877c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    8780:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8782:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8784:	71c3      	strb	r3, [r0, #7]
    8786:	7203      	strb	r3, [r0, #8]
    8788:	e753      	b.n	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    878a:	2141      	movs	r1, #65	; 0x41
    878c:	a807      	add	r0, sp, #28
    878e:	f7ff fd17 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8792:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8794:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8796:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8798:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    879c:	f7f9 fa6c 	bl	1c78 <memset>
	rp->commands[2] |= BIT(7);
    87a0:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(4) | BIT(5);
    87a2:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    87a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87a8:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    87aa:	79a3      	ldrb	r3, [r4, #6]
    87ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
    87b0:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    87b2:	7ae3      	ldrb	r3, [r4, #11]
    87b4:	f043 0304 	orr.w	r3, r3, #4
    87b8:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    87ba:	7be3      	ldrb	r3, [r4, #15]
    87bc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    87c0:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    87c2:	7c23      	ldrb	r3, [r4, #16]
    87c4:	f043 0302 	orr.w	r3, r3, #2
    87c8:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    87ca:	7de3      	ldrb	r3, [r4, #23]
    87cc:	f043 0304 	orr.w	r3, r3, #4
    87d0:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    87d2:	7ea3      	ldrb	r3, [r4, #26]
    87d4:	f043 0317 	orr.w	r3, r3, #23
    87d8:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    87da:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    87dc:	f043 0309 	orr.w	r3, r3, #9
    87e0:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    87e2:	7863      	ldrb	r3, [r4, #1]
    87e4:	f043 0320 	orr.w	r3, r3, #32
    87e8:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    87ea:	23ff      	movs	r3, #255	; 0xff
    87ec:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    87ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[33] |= BIT(6) | BIT(7);
    87f2:	f063 030f 	orn	r3, r3, #15
    87f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    87fa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
    87fe:	f062 0203 	orn	r2, r2, #3
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8802:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
    8806:	76e2      	strb	r2, [r4, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8808:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    880c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8810:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[32] |= BIT(4) | BIT(5);
    8814:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8818:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[32] |= BIT(4) | BIT(5);
    881c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[39] |= BIT(2);
    8820:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8824:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8828:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    882c:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    8830:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8834:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    8838:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    883c:	e6f9      	b.n	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    883e:	2109      	movs	r1, #9
    8840:	a807      	add	r0, sp, #28
    8842:	f7ff fcbd 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8846:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8848:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    884a:	2208      	movs	r2, #8
	rp->status = 0x00;
    884c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8850:	f7f9 fa12 	bl	1c78 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    8854:	2360      	movs	r3, #96	; 0x60
    8856:	7163      	strb	r3, [r4, #5]
    8858:	e6eb      	b.n	8632 <hci_cmd_handle+0xea>
    885a:	bf00      	nop
    885c:	00014c55 	.word	0x00014c55
    8860:	20003aa4 	.word	0x20003aa4
    8864:	000159c3 	.word	0x000159c3
    8868:	00015a12 	.word	0x00015a12
    886c:	00016ad0 	.word	0x00016ad0
    8870:	00016c13 	.word	0x00016c13
    8874:	20000858 	.word	0x20000858
    8878:	00016c39 	.word	0x00016c39
    887c:	20000860 	.word	0x20000860
    8880:	20003d78 	.word	0x20003d78
    8884:	200008e8 	.word	0x200008e8
    8888:	20003d80 	.word	0x20003d80
	rp = cmd_complete(evt, sizeof(*rp));
    888c:	2107      	movs	r1, #7
    888e:	a807      	add	r0, sp, #28
    8890:	f7ff fc96 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8894:	4601      	mov	r1, r0
    8896:	2300      	movs	r3, #0
    8898:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    889c:	4618      	mov	r0, r3
    889e:	f7ff fab1 	bl	7e04 <ll_addr_get>
    88a2:	e6c6      	b.n	8632 <hci_cmd_handle+0xea>
	switch (ocf) {
    88a4:	3a01      	subs	r2, #1
    88a6:	2a4d      	cmp	r2, #77	; 0x4d
    88a8:	f63f ae88 	bhi.w	85bc <hci_cmd_handle+0x74>
    88ac:	a301      	add	r3, pc, #4	; (adr r3, 88b4 <hci_cmd_handle+0x36c>)
    88ae:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    88b2:	bf00      	nop
    88b4:	000089ed 	.word	0x000089ed
    88b8:	000089f7 	.word	0x000089f7
    88bc:	00008a0f 	.word	0x00008a0f
    88c0:	000085bd 	.word	0x000085bd
    88c4:	00008a33 	.word	0x00008a33
    88c8:	000085bd 	.word	0x000085bd
    88cc:	000085bd 	.word	0x000085bd
    88d0:	000085bd 	.word	0x000085bd
    88d4:	000085bd 	.word	0x000085bd
    88d8:	000085bd 	.word	0x000085bd
    88dc:	00008ad7 	.word	0x00008ad7
    88e0:	00008b05 	.word	0x00008b05
    88e4:	00008b25 	.word	0x00008b25
    88e8:	00008b4f 	.word	0x00008b4f
    88ec:	00008a3f 	.word	0x00008a3f
    88f0:	00008a55 	.word	0x00008a55
    88f4:	00008a67 	.word	0x00008a67
    88f8:	00008a6f 	.word	0x00008a6f
    88fc:	00008bef 	.word	0x00008bef
    8900:	00008baf 	.word	0x00008baf
    8904:	00008bcb 	.word	0x00008bcb
    8908:	00008be5 	.word	0x00008be5
    890c:	00008a77 	.word	0x00008a77
    8910:	00008a9d 	.word	0x00008a9d
    8914:	00008bb7 	.word	0x00008bb7
    8918:	000085bd 	.word	0x000085bd
    891c:	000085bd 	.word	0x000085bd
    8920:	00008ab3 	.word	0x00008ab3
    8924:	000085bd 	.word	0x000085bd
    8928:	000085bd 	.word	0x000085bd
    892c:	000085bd 	.word	0x000085bd
    8930:	00008c09 	.word	0x00008c09
    8934:	00008c33 	.word	0x00008c33
    8938:	00008c41 	.word	0x00008c41
    893c:	00008c51 	.word	0x00008c51
    8940:	00008c69 	.word	0x00008c69
    8944:	000085bd 	.word	0x000085bd
    8948:	000085bd 	.word	0x000085bd
    894c:	00008d81 	.word	0x00008d81
    8950:	00008d8f 	.word	0x00008d8f
    8954:	00008d97 	.word	0x00008d97
    8958:	00008da7 	.word	0x00008da7
    895c:	00008db9 	.word	0x00008db9
    8960:	00008dd7 	.word	0x00008dd7
    8964:	00008df5 	.word	0x00008df5
    8968:	00008e0b 	.word	0x00008e0b
    896c:	00008c85 	.word	0x00008c85
    8970:	00008cb1 	.word	0x00008cb1
    8974:	00008d07 	.word	0x00008d07
    8978:	00008d25 	.word	0x00008d25
    897c:	000085bd 	.word	0x000085bd
    8980:	000085bd 	.word	0x000085bd
    8984:	000085bd 	.word	0x000085bd
    8988:	000085bd 	.word	0x000085bd
    898c:	000085bd 	.word	0x000085bd
    8990:	000085bd 	.word	0x000085bd
    8994:	000085bd 	.word	0x000085bd
    8998:	000085bd 	.word	0x000085bd
    899c:	000085bd 	.word	0x000085bd
    89a0:	000085bd 	.word	0x000085bd
    89a4:	000085bd 	.word	0x000085bd
    89a8:	000085bd 	.word	0x000085bd
    89ac:	000085bd 	.word	0x000085bd
    89b0:	000085bd 	.word	0x000085bd
    89b4:	000085bd 	.word	0x000085bd
    89b8:	000085bd 	.word	0x000085bd
    89bc:	000085bd 	.word	0x000085bd
    89c0:	000085bd 	.word	0x000085bd
    89c4:	000085bd 	.word	0x000085bd
    89c8:	000085bd 	.word	0x000085bd
    89cc:	000085bd 	.word	0x000085bd
    89d0:	000085bd 	.word	0x000085bd
    89d4:	000085bd 	.word	0x000085bd
    89d8:	000085bd 	.word	0x000085bd
    89dc:	00008e1f 	.word	0x00008e1f
    89e0:	000085bd 	.word	0x000085bd
    89e4:	000085bd 	.word	0x000085bd
    89e8:	00008e15 	.word	0x00008e15
	le_event_mask = sys_get_le64(cmd->events);
    89ec:	68a0      	ldr	r0, [r4, #8]
    89ee:	f7ff fda7 	bl	8540 <sys_get_le64>
    89f2:	4baa      	ldr	r3, [pc, #680]	; (8c9c <hci_cmd_handle+0x754>)
    89f4:	e64d      	b.n	8692 <hci_cmd_handle+0x14a>
	rp = cmd_complete(evt, sizeof(*rp));
    89f6:	2104      	movs	r1, #4
    89f8:	a807      	add	r0, sp, #28
    89fa:	f7ff fbe1 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    89fe:	2300      	movs	r3, #0
    8a00:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8a02:	221b      	movs	r2, #27
    8a04:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8a06:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8a08:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8a0a:	70c3      	strb	r3, [r0, #3]
    8a0c:	e611      	b.n	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8a0e:	2109      	movs	r1, #9
    8a10:	a807      	add	r0, sp, #28
    8a12:	f7ff fbd5 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8a16:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8a18:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8a1a:	2208      	movs	r2, #8
	rp->status = 0x00;
    8a1c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8a20:	f7f9 f92a 	bl	1c78 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8a24:	23ff      	movs	r3, #255	; 0xff
    8a26:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8a28:	2341      	movs	r3, #65	; 0x41
    8a2a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8a2c:	2301      	movs	r3, #1
    8a2e:	70e3      	strb	r3, [r4, #3]
    8a30:	e5ff      	b.n	8632 <hci_cmd_handle+0xea>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8a32:	68a1      	ldr	r1, [r4, #8]
    8a34:	2001      	movs	r0, #1
    8a36:	f7ff f9ff 	bl	7e38 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8a3a:	4604      	mov	r4, r0
    8a3c:	e0af      	b.n	8b9e <hci_cmd_handle+0x656>
	rp = cmd_complete(evt, sizeof(*rp));
    8a3e:	2102      	movs	r1, #2
    8a40:	a807      	add	r0, sp, #28
    8a42:	f7ff fbbd 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8a46:	2300      	movs	r3, #0
    8a48:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8a4a:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    8a4c:	f008 fe9e 	bl	1178c <ll_wl_size_get>
    8a50:	7060      	strb	r0, [r4, #1]
    8a52:	e5ee      	b.n	8632 <hci_cmd_handle+0xea>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8a54:	2101      	movs	r1, #1
    8a56:	a807      	add	r0, sp, #28
    8a58:	f7ff fbb2 	bl	81c0 <cmd_complete>
    8a5c:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    8a5e:	f008 fe97 	bl	11790 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    8a62:	7020      	strb	r0, [r4, #0]
    8a64:	e5e5      	b.n	8632 <hci_cmd_handle+0xea>
	status = ll_wl_add(&cmd->addr);
    8a66:	68a0      	ldr	r0, [r4, #8]
    8a68:	f008 ff3e 	bl	118e8 <ll_wl_add>
    8a6c:	e7e5      	b.n	8a3a <hci_cmd_handle+0x4f2>
	status = ll_wl_remove(&cmd->addr);
    8a6e:	68a0      	ldr	r0, [r4, #8]
    8a70:	f008 feae 	bl	117d0 <ll_wl_remove>
    8a74:	e7e1      	b.n	8a3a <hci_cmd_handle+0x4f2>
    8a76:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8a78:	2300      	movs	r3, #0
    8a7a:	aa08      	add	r2, sp, #32
    8a7c:	f100 0110 	add.w	r1, r0, #16
    8a80:	f009 fbba 	bl	121f8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    8a84:	2111      	movs	r1, #17
    8a86:	a807      	add	r0, sp, #28
    8a88:	f7ff fb9a 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8a8c:	2300      	movs	r3, #0
    8a8e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8a92:	2210      	movs	r2, #16
    8a94:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    8a96:	f7f9 f8c3 	bl	1c20 <memcpy>
    8a9a:	e5ca      	b.n	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8a9c:	2109      	movs	r1, #9
    8a9e:	a807      	add	r0, sp, #28
    8aa0:	f7ff fb8e 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8aa4:	2300      	movs	r3, #0
    8aa6:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    8aaa:	2108      	movs	r1, #8
    8aac:	f7ff f9e4 	bl	7e78 <bt_rand>
    8ab0:	e5bf      	b.n	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8ab2:	2109      	movs	r1, #9
    8ab4:	a807      	add	r0, sp, #28
    8ab6:	f7ff fb83 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8aba:	4601      	mov	r1, r0
    8abc:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8abe:	4602      	mov	r2, r0
	rp->status = 0x00;
    8ac0:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    8ac4:	4876      	ldr	r0, [pc, #472]	; (8ca0 <hci_cmd_handle+0x758>)
    8ac6:	f7ff fb37 	bl	8138 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    8aca:	f240 203f 	movw	r0, #575	; 0x23f
    8ace:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8ad0:	f7ff fb32 	bl	8138 <sys_put_le32>
    8ad4:	e5ad      	b.n	8632 <hci_cmd_handle+0xea>
    8ad6:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    8ad8:	7963      	ldrb	r3, [r4, #5]
    8ada:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    8ade:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    8ae2:	7820      	ldrb	r0, [r4, #0]
    8ae4:	79a4      	ldrb	r4, [r4, #6]
    8ae6:	9400      	str	r4, [sp, #0]
    8ae8:	f008 fc04 	bl	112f4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    8aec:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8aee:	2101      	movs	r1, #1
    8af0:	a807      	add	r0, sp, #28
    8af2:	f7ff fb65 	bl	81c0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8af6:	2c00      	cmp	r4, #0
    8af8:	bf18      	it	ne
    8afa:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8afc:	bf08      	it	eq
    8afe:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8b00:	7003      	strb	r3, [r0, #0]
    8b02:	e596      	b.n	8632 <hci_cmd_handle+0xea>
    8b04:	68a2      	ldr	r2, [r4, #8]
    8b06:	4b67      	ldr	r3, [pc, #412]	; (8ca4 <hci_cmd_handle+0x75c>)
	if (cmd->enable && cmd->filter_dup) {
    8b08:	7810      	ldrb	r0, [r2, #0]
    8b0a:	b140      	cbz	r0, 8b1e <hci_cmd_handle+0x5d6>
    8b0c:	7852      	ldrb	r2, [r2, #1]
    8b0e:	b132      	cbz	r2, 8b1e <hci_cmd_handle+0x5d6>
		dup_count = 0;
    8b10:	2200      	movs	r2, #0
    8b12:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    8b14:	4b64      	ldr	r3, [pc, #400]	; (8ca8 <hci_cmd_handle+0x760>)
		dup_count = -1;
    8b16:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    8b18:	f008 fc0c 	bl	11334 <ll_scan_enable>
    8b1c:	e7e6      	b.n	8aec <hci_cmd_handle+0x5a4>
		dup_count = -1;
    8b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b22:	e7f8      	b.n	8b16 <hci_cmd_handle+0x5ce>
    8b24:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    8b26:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    8b2a:	7963      	ldrb	r3, [r4, #5]
    8b2c:	7922      	ldrb	r2, [r4, #4]
    8b2e:	8861      	ldrh	r1, [r4, #2]
    8b30:	8820      	ldrh	r0, [r4, #0]
    8b32:	9504      	str	r5, [sp, #16]
    8b34:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    8b38:	9503      	str	r5, [sp, #12]
    8b3a:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    8b3e:	9502      	str	r5, [sp, #8]
    8b40:	7b25      	ldrb	r5, [r4, #12]
    8b42:	9501      	str	r5, [sp, #4]
    8b44:	3406      	adds	r4, #6
    8b46:	9400      	str	r4, [sp, #0]
    8b48:	f008 fc2e 	bl	113a8 <ll_create_connection>
    8b4c:	e56a      	b.n	8624 <hci_cmd_handle+0xdc>
	status = ll_connect_disable();
    8b4e:	f008 fa33 	bl	10fb8 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8b52:	4606      	mov	r6, r0
    8b54:	bb48      	cbnz	r0, 8baa <hci_cmd_handle+0x662>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8b5a:	2001      	movs	r0, #1
    8b5c:	f7fb f830 	bl	3bc0 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8b60:	4a52      	ldr	r2, [pc, #328]	; (8cac <hci_cmd_handle+0x764>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8b62:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8b64:	e9d2 4500 	ldrd	r4, r5, [r2]
    8b68:	2400      	movs	r4, #0
    8b6a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    8b6e:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8b72:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8b74:	d004      	beq.n	8b80 <hci_cmd_handle+0x638>
    8b76:	4632      	mov	r2, r6
    8b78:	4631      	mov	r1, r6
    8b7a:	2002      	movs	r0, #2
    8b7c:	f7ff fb90 	bl	82a0 <le_conn_complete.part.39>
		if ((*evt)->len) {
    8b80:	9807      	ldr	r0, [sp, #28]
    8b82:	8984      	ldrh	r4, [r0, #12]
    8b84:	b14c      	cbz	r4, 8b9a <hci_cmd_handle+0x652>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    8b86:	2101      	movs	r1, #1
    8b88:	a808      	add	r0, sp, #32
    8b8a:	f7ff fb19 	bl	81c0 <cmd_complete>
			ccst->status = cmd_status;
    8b8e:	2300      	movs	r3, #0
    8b90:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    8b92:	9808      	ldr	r0, [sp, #32]
    8b94:	f7fa fe2c 	bl	37f0 <bt_recv_prio>
    8b98:	e54b      	b.n	8632 <hci_cmd_handle+0xea>
			net_buf_unref(*evt);
    8b9a:	f00a f97f 	bl	12e9c <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8b9e:	2101      	movs	r1, #1
    8ba0:	a807      	add	r0, sp, #28
    8ba2:	f7ff fb0d 	bl	81c0 <cmd_complete>
	ccst->status = status;
    8ba6:	7004      	strb	r4, [r0, #0]
    8ba8:	e543      	b.n	8632 <hci_cmd_handle+0xea>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    8baa:	240c      	movs	r4, #12
    8bac:	e7f7      	b.n	8b9e <hci_cmd_handle+0x656>
	status = ll_chm_update(&cmd->ch_map[0]);
    8bae:	68a0      	ldr	r0, [r4, #8]
    8bb0:	f007 fdce 	bl	10750 <ll_chm_update>
    8bb4:	e79a      	b.n	8aec <hci_cmd_handle+0x5a4>
    8bb6:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    8bb8:	f100 030c 	add.w	r3, r0, #12
    8bbc:	f100 020a 	add.w	r2, r0, #10
    8bc0:	1c81      	adds	r1, r0, #2
    8bc2:	8800      	ldrh	r0, [r0, #0]
    8bc4:	f008 f87e 	bl	10cc4 <ll_enc_req_send>
    8bc8:	e52c      	b.n	8624 <hci_cmd_handle+0xdc>
	handle = sys_le16_to_cpu(cmd->handle);
    8bca:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8bcc:	2108      	movs	r1, #8
    8bce:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8bd0:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8bd2:	f7ff faf5 	bl	81c0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8bd6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8bd8:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    8bda:	1cc1      	adds	r1, r0, #3
    8bdc:	4630      	mov	r0, r6
    8bde:	f007 fdf9 	bl	107d4 <ll_chm_get>
    8be2:	e573      	b.n	86cc <hci_cmd_handle+0x184>
	handle = sys_le16_to_cpu(cmd->handle);
    8be4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8be6:	8818      	ldrh	r0, [r3, #0]
    8be8:	f007 fe09 	bl	107fe <ll_feature_req_send>
    8bec:	e51a      	b.n	8624 <hci_cmd_handle+0xdc>
    8bee:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8bf0:	8911      	ldrh	r1, [r2, #8]
    8bf2:	8893      	ldrh	r3, [r2, #4]
    8bf4:	8810      	ldrh	r0, [r2, #0]
    8bf6:	9101      	str	r1, [sp, #4]
    8bf8:	88d2      	ldrh	r2, [r2, #6]
    8bfa:	9200      	str	r2, [sp, #0]
    8bfc:	2200      	movs	r2, #0
    8bfe:	4611      	mov	r1, r2
    8c00:	f007 fd2e 	bl	10660 <ll_conn_update>
	*evt = cmd_status(status);
    8c04:	b2c0      	uxtb	r0, r0
    8c06:	e511      	b.n	862c <hci_cmd_handle+0xe4>
    8c08:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8c0a:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8c0c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8c0e:	8893      	ldrh	r3, [r2, #4]
    8c10:	9101      	str	r1, [sp, #4]
    8c12:	88d2      	ldrh	r2, [r2, #6]
    8c14:	9200      	str	r2, [sp, #0]
    8c16:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8c18:	2102      	movs	r1, #2
    8c1a:	b2a0      	uxth	r0, r4
    8c1c:	f007 fd20 	bl	10660 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    8c20:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8c22:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8c24:	a807      	add	r0, sp, #28
    8c26:	f7ff facb 	bl	81c0 <cmd_complete>
	rp->status = status;
    8c2a:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8c2c:	f8a0 4001 	strh.w	r4, [r0, #1]
    8c30:	e4ff      	b.n	8632 <hci_cmd_handle+0xea>
    8c32:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8c34:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8c36:	789a      	ldrb	r2, [r3, #2]
    8c38:	2300      	movs	r3, #0
    8c3a:	9301      	str	r3, [sp, #4]
    8c3c:	9300      	str	r3, [sp, #0]
    8c3e:	e7eb      	b.n	8c18 <hci_cmd_handle+0x6d0>
    8c40:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8c42:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8c44:	889a      	ldrh	r2, [r3, #4]
    8c46:	8859      	ldrh	r1, [r3, #2]
    8c48:	b2a0      	uxth	r0, r4
    8c4a:	f007 fe48 	bl	108de <ll_length_req_send>
    8c4e:	e562      	b.n	8716 <hci_cmd_handle+0x1ce>
	rp = cmd_complete(evt, sizeof(*rp));
    8c50:	2105      	movs	r1, #5
    8c52:	a807      	add	r0, sp, #28
    8c54:	f7ff fab4 	bl	81c0 <cmd_complete>
    8c58:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    8c5a:	1cc1      	adds	r1, r0, #3
    8c5c:	3001      	adds	r0, #1
    8c5e:	f007 fe61 	bl	10924 <ll_length_default_get>
	rp->status = 0x00;
    8c62:	2300      	movs	r3, #0
    8c64:	7023      	strb	r3, [r4, #0]
    8c66:	e4e4      	b.n	8632 <hci_cmd_handle+0xea>
    8c68:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    8c6a:	8859      	ldrh	r1, [r3, #2]
    8c6c:	8818      	ldrh	r0, [r3, #0]
    8c6e:	f007 fe63 	bl	10938 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8c72:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    8c74:	2101      	movs	r1, #1
    8c76:	a807      	add	r0, sp, #28
    8c78:	f7ff faa2 	bl	81c0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    8c7c:	2c00      	cmp	r4, #0
    8c7e:	bf18      	it	ne
    8c80:	231e      	movne	r3, #30
    8c82:	e73b      	b.n	8afc <hci_cmd_handle+0x5b4>
	rp = cmd_complete(evt, sizeof(*rp));
    8c84:	2109      	movs	r1, #9
    8c86:	a807      	add	r0, sp, #28
    8c88:	f7ff fa9a 	bl	81c0 <cmd_complete>
    8c8c:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    8c8e:	1dc3      	adds	r3, r0, #7
    8c90:	1d42      	adds	r2, r0, #5
    8c92:	1cc1      	adds	r1, r0, #3
    8c94:	3001      	adds	r0, #1
    8c96:	f007 fe59 	bl	1094c <ll_length_max_get>
    8c9a:	e7e2      	b.n	8c62 <hci_cmd_handle+0x71a>
    8c9c:	20003d80 	.word	0x20003d80
    8ca0:	130f3370 	.word	0x130f3370
    8ca4:	20000860 	.word	0x20000860
    8ca8:	20000864 	.word	0x20000864
    8cac:	20003d78 	.word	0x20003d78
	handle = sys_le16_to_cpu(cmd->handle);
    8cb0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8cb2:	2105      	movs	r1, #5
    8cb4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    8cb6:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    8cb8:	f7ff fa82 	bl	81c0 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8cbc:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8cbe:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8cc0:	1d02      	adds	r2, r0, #4
    8cc2:	1cc1      	adds	r1, r0, #3
    8cc4:	4630      	mov	r0, r6
    8cc6:	f007 fe4a 	bl	1095e <ll_phy_get>
	return __builtin_ffs(op);
    8cca:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    8ccc:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8cd0:	2800      	cmp	r0, #0
    8cd2:	bf14      	ite	ne
    8cd4:	230c      	movne	r3, #12
    8cd6:	2300      	moveq	r3, #0
    8cd8:	7023      	strb	r3, [r4, #0]
    8cda:	2a00      	cmp	r2, #0
    8cdc:	fa92 f3a2 	rbit	r3, r2
    8ce0:	fab3 f383 	clz	r3, r3
    8ce4:	7922      	ldrb	r2, [r4, #4]
    8ce6:	bf08      	it	eq
    8ce8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8cec:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8cee:	70e3      	strb	r3, [r4, #3]
    8cf0:	2a00      	cmp	r2, #0
    8cf2:	fa92 f3a2 	rbit	r3, r2
    8cf6:	fab3 f383 	clz	r3, r3
    8cfa:	bf08      	it	eq
    8cfc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    8d00:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8d02:	7123      	strb	r3, [r4, #4]
    8d04:	e495      	b.n	8632 <hci_cmd_handle+0xea>
    8d06:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8d08:	781a      	ldrb	r2, [r3, #0]
    8d0a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8d0c:	bf44      	itt	mi
    8d0e:	2107      	movmi	r1, #7
    8d10:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8d12:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8d14:	bf44      	itt	mi
    8d16:	2207      	movmi	r2, #7
    8d18:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8d1a:	7899      	ldrb	r1, [r3, #2]
    8d1c:	7858      	ldrb	r0, [r3, #1]
    8d1e:	f007 fe33 	bl	10988 <ll_phy_default_set>
    8d22:	e7a6      	b.n	8c72 <hci_cmd_handle+0x72a>
    8d24:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8d26:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    8d28:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8d2a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8d2e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    8d30:	bf44      	itt	mi
    8d32:	2103      	movmi	r1, #3
    8d34:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    8d36:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8d38:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    8d3a:	bf44      	itt	mi
    8d3c:	2203      	movmi	r2, #3
    8d3e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8d40:	074d      	lsls	r5, r1, #29
    8d42:	d002      	beq.n	8d4a <hci_cmd_handle+0x802>
	    !(cmd->rx_phys & 0x07)) {
    8d44:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    8d46:	075a      	lsls	r2, r3, #29
    8d48:	d105      	bne.n	8d56 <hci_cmd_handle+0x80e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8d4a:	2101      	movs	r1, #1
    8d4c:	a807      	add	r0, sp, #28
    8d4e:	f7ff fa37 	bl	81c0 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    8d52:	2312      	movs	r3, #18
    8d54:	e6d4      	b.n	8b00 <hci_cmd_handle+0x5b8>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8d56:	ea41 0203 	orr.w	r2, r1, r3
    8d5a:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    8d5e:	d005      	beq.n	8d6c <hci_cmd_handle+0x824>
		ccst = cmd_complete(evt, sizeof(*ccst));
    8d60:	2101      	movs	r1, #1
    8d62:	a807      	add	r0, sp, #28
    8d64:	f7ff fa2c 	bl	81c0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    8d68:	2311      	movs	r3, #17
    8d6a:	e6c9      	b.n	8b00 <hci_cmd_handle+0x5b8>
	if (phy_opts & 0x03) {
    8d6c:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    8d70:	bf1c      	itt	ne
    8d72:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8d76:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8d7a:	f007 fe0f 	bl	1099c <ll_phy_req_send>
    8d7e:	e451      	b.n	8624 <hci_cmd_handle+0xdc>
    8d80:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8d82:	f100 0217 	add.w	r2, r0, #23
    8d86:	1dc1      	adds	r1, r0, #7
    8d88:	f008 ffc4 	bl	11d14 <ll_rl_add>
    8d8c:	e655      	b.n	8a3a <hci_cmd_handle+0x4f2>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8d8e:	68a0      	ldr	r0, [r4, #8]
    8d90:	f009 f862 	bl	11e58 <ll_rl_remove>
    8d94:	e651      	b.n	8a3a <hci_cmd_handle+0x4f2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8d96:	2101      	movs	r1, #1
    8d98:	a807      	add	r0, sp, #28
    8d9a:	f7ff fa11 	bl	81c0 <cmd_complete>
    8d9e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    8da0:	f008 ff9e 	bl	11ce0 <ll_rl_clear>
    8da4:	e65d      	b.n	8a62 <hci_cmd_handle+0x51a>
	rp = cmd_complete(evt, sizeof(*rp));
    8da6:	2102      	movs	r1, #2
    8da8:	a807      	add	r0, sp, #28
    8daa:	f7ff fa09 	bl	81c0 <cmd_complete>
    8dae:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8db0:	f008 ff94 	bl	11cdc <ll_rl_size_get>
    8db4:	7060      	strb	r0, [r4, #1]
    8db6:	e754      	b.n	8c62 <hci_cmd_handle+0x71a>
    8db8:	2207      	movs	r2, #7
    8dba:	68a1      	ldr	r1, [r4, #8]
    8dbc:	a808      	add	r0, sp, #32
    8dbe:	f7f8 ff2f 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8dc2:	2107      	movs	r1, #7
    8dc4:	a807      	add	r0, sp, #28
    8dc6:	f7ff f9fb 	bl	81c0 <cmd_complete>
    8dca:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8dcc:	1c41      	adds	r1, r0, #1
    8dce:	a808      	add	r0, sp, #32
    8dd0:	f009 f8d0 	bl	11f74 <ll_rl_crpa_get>
    8dd4:	e645      	b.n	8a62 <hci_cmd_handle+0x51a>
    8dd6:	2207      	movs	r2, #7
    8dd8:	68a1      	ldr	r1, [r4, #8]
    8dda:	a808      	add	r0, sp, #32
    8ddc:	f7f8 ff20 	bl	1c20 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    8de0:	2107      	movs	r1, #7
    8de2:	a807      	add	r0, sp, #28
    8de4:	f7ff f9ec 	bl	81c0 <cmd_complete>
    8de8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8dea:	1c41      	adds	r1, r0, #1
    8dec:	a808      	add	r0, sp, #32
    8dee:	f009 f8e1 	bl	11fb4 <ll_rl_lrpa_get>
    8df2:	e636      	b.n	8a62 <hci_cmd_handle+0x51a>
	u8_t enable = cmd->enable;
    8df4:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8df6:	2101      	movs	r1, #1
    8df8:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    8dfa:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8dfc:	f7ff f9e0 	bl	81c0 <cmd_complete>
    8e00:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    8e02:	4628      	mov	r0, r5
    8e04:	f009 f8ee 	bl	11fe4 <ll_rl_enable>
    8e08:	e62b      	b.n	8a62 <hci_cmd_handle+0x51a>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8e0a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8e0c:	8818      	ldrh	r0, [r3, #0]
    8e0e:	f009 f8fb 	bl	12008 <ll_rl_timeout_set>
    8e12:	e42e      	b.n	8672 <hci_cmd_handle+0x12a>
    8e14:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8e16:	79c1      	ldrb	r1, [r0, #7]
    8e18:	f009 f8fe 	bl	12018 <ll_priv_mode_set>
    8e1c:	e60d      	b.n	8a3a <hci_cmd_handle+0x4f2>
	rp = cmd_complete(evt, sizeof(*rp));
    8e1e:	2103      	movs	r1, #3
    8e20:	a807      	add	r0, sp, #28
    8e22:	f7ff f9cd 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8e26:	4601      	mov	r1, r0
    8e28:	2300      	movs	r3, #0
    8e2a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8e2e:	3001      	adds	r0, #1
    8e30:	f7ff f81e 	bl	7e70 <ll_tx_pwr_get>
    8e34:	f7ff bbfd 	b.w	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8e38:	210d      	movs	r1, #13
    8e3a:	a807      	add	r0, sp, #28
    8e3c:	f7ff f9c0 	bl	81c0 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8e40:	2202      	movs	r2, #2
    8e42:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8e44:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    8e46:	2201      	movs	r2, #1
    8e48:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8e4a:	220c      	movs	r2, #12
	rp->status = 0x00;
    8e4c:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8e4e:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8e50:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    8e52:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    8e54:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    8e56:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    8e58:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    8e5a:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    8e5c:	7242      	strb	r2, [r0, #9]
    8e5e:	7283      	strb	r3, [r0, #10]
    8e60:	72c3      	strb	r3, [r0, #11]
    8e62:	7303      	strb	r3, [r0, #12]
    8e64:	f7ff bbe5 	b.w	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8e68:	2141      	movs	r1, #65	; 0x41
    8e6a:	a807      	add	r0, sp, #28
    8e6c:	f7ff f9a8 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8e70:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    8e72:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8e74:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8e76:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8e7a:	f7f8 fefd 	bl	1c78 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8e7e:	7863      	ldrb	r3, [r4, #1]
    8e80:	f063 0358 	orn	r3, r3, #88	; 0x58
    8e84:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8e86:	78a3      	ldrb	r3, [r4, #2]
    8e88:	f043 0303 	orr.w	r3, r3, #3
    8e8c:	70a3      	strb	r3, [r4, #2]
    8e8e:	f7ff bbd0 	b.w	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8e92:	2109      	movs	r1, #9
    8e94:	a807      	add	r0, sp, #28
    8e96:	f7ff f993 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8e9a:	2100      	movs	r1, #0
    8e9c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8ea0:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    8ea2:	f7f8 fee9 	bl	1c78 <memset>
    8ea6:	f7ff bbc4 	b.w	8632 <hci_cmd_handle+0xea>
	const char build_info[] = HCI_VS_BUILD_INFO;
    8eaa:	4b5c      	ldr	r3, [pc, #368]	; (901c <hci_cmd_handle+0xad4>)
    8eac:	aa08      	add	r2, sp, #32
    8eae:	f103 0628 	add.w	r6, r3, #40	; 0x28
    8eb2:	4615      	mov	r5, r2
    8eb4:	6818      	ldr	r0, [r3, #0]
    8eb6:	6859      	ldr	r1, [r3, #4]
    8eb8:	4614      	mov	r4, r2
    8eba:	c403      	stmia	r4!, {r0, r1}
    8ebc:	3308      	adds	r3, #8
    8ebe:	42b3      	cmp	r3, r6
    8ec0:	4622      	mov	r2, r4
    8ec2:	d1f7      	bne.n	8eb4 <hci_cmd_handle+0x96c>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    8ec4:	2129      	movs	r1, #41	; 0x29
    8ec6:	a807      	add	r0, sp, #28
    8ec8:	f7ff f97a 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8ecc:	2300      	movs	r3, #0
    8ece:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8ed2:	2228      	movs	r2, #40	; 0x28
    8ed4:	4629      	mov	r1, r5
    8ed6:	e5de      	b.n	8a96 <hci_cmd_handle+0x54e>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    8ed8:	68a1      	ldr	r1, [r4, #8]
    8eda:	2000      	movs	r0, #0
    8edc:	f7fe ffac 	bl	7e38 <ll_addr_set>
    8ee0:	f7ff bbc7 	b.w	8672 <hci_cmd_handle+0x12a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8ee8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    8eec:	3201      	adds	r2, #1
    8eee:	d106      	bne.n	8efe <hci_cmd_handle+0x9b6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8ef0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8ef8:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    8efa:	4293      	cmp	r3, r2
    8efc:	d020      	beq.n	8f40 <hci_cmd_handle+0x9f8>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    8efe:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8f02:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    8f06:	07db      	lsls	r3, r3, #31
    8f08:	d51a      	bpl.n	8f40 <hci_cmd_handle+0x9f8>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8f0a:	2118      	movs	r1, #24
    8f0c:	a807      	add	r0, sp, #28
    8f0e:	f7ff f957 	bl	81c0 <cmd_complete>
		rp->status = 0x00;
    8f12:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    8f14:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    8f16:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    8f18:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    8f1a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    8f1c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    8f20:	1ca1      	adds	r1, r4, #2
    8f22:	f7ff f909 	bl	8138 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    8f26:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    8f2a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    8f2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    8f30:	f063 033f 	orn	r3, r3, #63	; 0x3f
    8f34:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    8f36:	2210      	movs	r2, #16
    8f38:	4631      	mov	r1, r6
    8f3a:	f104 0008 	add.w	r0, r4, #8
    8f3e:	e7b0      	b.n	8ea2 <hci_cmd_handle+0x95a>
	rp = cmd_complete(evt, sizeof(*rp));
    8f40:	2102      	movs	r1, #2
    8f42:	a807      	add	r0, sp, #28
    8f44:	f7ff f93c 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8f48:	2300      	movs	r3, #0
    8f4a:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    8f4c:	7043      	strb	r3, [r0, #1]
    8f4e:	f7ff bb70 	b.w	8632 <hci_cmd_handle+0xea>
	rp = cmd_complete(evt, sizeof(*rp));
    8f52:	2121      	movs	r1, #33	; 0x21
    8f54:	a807      	add	r0, sp, #28
    8f56:	f7ff f933 	bl	81c0 <cmd_complete>
	rp->status = 0x00;
    8f5a:	4603      	mov	r3, r0
    8f5c:	2200      	movs	r2, #0
    8f5e:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    8f66:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8f68:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    8f6c:	3101      	adds	r1, #1
    8f6e:	d04b      	beq.n	9008 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8f70:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    8f74:	3101      	adds	r1, #1
    8f76:	d047      	beq.n	9008 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8f78:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    8f7c:	3101      	adds	r1, #1
    8f7e:	d043      	beq.n	9008 <hci_cmd_handle+0xac0>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    8f80:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    8f84:	3101      	adds	r1, #1
    8f86:	d03f      	beq.n	9008 <hci_cmd_handle+0xac0>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    8f88:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    8f8c:	4619      	mov	r1, r3
    8f8e:	f7ff f8d3 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    8f92:	1d61      	adds	r1, r4, #5
    8f94:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    8f98:	f7ff f8ce 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    8f9c:	f104 0109 	add.w	r1, r4, #9
    8fa0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    8fa4:	f7ff f8c8 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    8fa8:	f104 010d 	add.w	r1, r4, #13
    8fac:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    8fb0:	f7ff f8c2 	bl	8138 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8fb8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8fbc:	3301      	adds	r3, #1
    8fbe:	f104 0311 	add.w	r3, r4, #17
    8fc2:	d027      	beq.n	9014 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8fc4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    8fc8:	3101      	adds	r1, #1
    8fca:	d023      	beq.n	9014 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8fcc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    8fd0:	3101      	adds	r1, #1
    8fd2:	d01f      	beq.n	9014 <hci_cmd_handle+0xacc>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    8fd4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    8fd8:	3101      	adds	r1, #1
    8fda:	d01b      	beq.n	9014 <hci_cmd_handle+0xacc>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    8fdc:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    8fe0:	4619      	mov	r1, r3
    8fe2:	f7ff f8a9 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    8fe6:	f104 0115 	add.w	r1, r4, #21
    8fea:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    8fee:	f7ff f8a3 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    8ff2:	f104 0119 	add.w	r1, r4, #25
    8ff6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    8ffa:	f7ff f89d 	bl	8138 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    8ffe:	f104 011d 	add.w	r1, r4, #29
    9002:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    9006:	e563      	b.n	8ad0 <hci_cmd_handle+0x588>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    9008:	2210      	movs	r2, #16
    900a:	2100      	movs	r1, #0
    900c:	4618      	mov	r0, r3
    900e:	f7f8 fe33 	bl	1c78 <memset>
    9012:	e7cf      	b.n	8fb4 <hci_cmd_handle+0xa6c>
		memset(rp->er, 0x00, sizeof(rp->er));
    9014:	2210      	movs	r2, #16
    9016:	2100      	movs	r1, #0
    9018:	4618      	mov	r0, r3
    901a:	e742      	b.n	8ea2 <hci_cmd_handle+0x95a>
    901c:	00016c67 	.word	0x00016c67

00009020 <hci_acl_handle>:
{
    9020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    9024:	2300      	movs	r3, #0
    9026:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9028:	8983      	ldrh	r3, [r0, #12]
    902a:	2b03      	cmp	r3, #3
{
    902c:	4606      	mov	r6, r0
    902e:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    9030:	d80e      	bhi.n	9050 <hci_acl_handle+0x30>
		BT_ERR("No HCI ACL header");
    9032:	4b3d      	ldr	r3, [pc, #244]	; (9128 <hci_acl_handle+0x108>)
    9034:	9301      	str	r3, [sp, #4]
    9036:	9300      	str	r3, [sp, #0]
    9038:	4b3c      	ldr	r3, [pc, #240]	; (912c <hci_acl_handle+0x10c>)
    903a:	4a3d      	ldr	r2, [pc, #244]	; (9130 <hci_acl_handle+0x110>)
    903c:	681c      	ldr	r4, [r3, #0]
    903e:	493d      	ldr	r1, [pc, #244]	; (9134 <hci_acl_handle+0x114>)
    9040:	4b3d      	ldr	r3, [pc, #244]	; (9138 <hci_acl_handle+0x118>)
    9042:	483e      	ldr	r0, [pc, #248]	; (913c <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    9044:	47a0      	blx	r4
		return -EINVAL;
    9046:	f06f 0015 	mvn.w	r0, #21
}
    904a:	b003      	add	sp, #12
    904c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    9050:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    9054:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    9056:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9058:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    905a:	f009 ff76 	bl	12f4a <net_buf_simple_pull>
	if (buf->len < len) {
    905e:	89b3      	ldrh	r3, [r6, #12]
    9060:	42bb      	cmp	r3, r7
    9062:	d209      	bcs.n	9078 <hci_acl_handle+0x58>
		BT_ERR("Invalid HCI ACL packet length");
    9064:	4b30      	ldr	r3, [pc, #192]	; (9128 <hci_acl_handle+0x108>)
    9066:	9301      	str	r3, [sp, #4]
    9068:	9300      	str	r3, [sp, #0]
    906a:	4b30      	ldr	r3, [pc, #192]	; (912c <hci_acl_handle+0x10c>)
    906c:	4a30      	ldr	r2, [pc, #192]	; (9130 <hci_acl_handle+0x110>)
    906e:	681c      	ldr	r4, [r3, #0]
    9070:	4930      	ldr	r1, [pc, #192]	; (9134 <hci_acl_handle+0x114>)
    9072:	4b31      	ldr	r3, [pc, #196]	; (9138 <hci_acl_handle+0x118>)
    9074:	4832      	ldr	r0, [pc, #200]	; (9140 <hci_acl_handle+0x120>)
    9076:	e7e5      	b.n	9044 <hci_acl_handle+0x24>
	node_tx = ll_tx_mem_acquire();
    9078:	f007 fd9c 	bl	10bb4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    907c:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9080:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9082:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9086:	bb38      	cbnz	r0, 90d8 <hci_acl_handle+0xb8>
		BT_ERR("Tx Buffer Overflow");
    9088:	4b27      	ldr	r3, [pc, #156]	; (9128 <hci_acl_handle+0x108>)
    908a:	9301      	str	r3, [sp, #4]
    908c:	9300      	str	r3, [sp, #0]
    908e:	4b27      	ldr	r3, [pc, #156]	; (912c <hci_acl_handle+0x10c>)
    9090:	4a27      	ldr	r2, [pc, #156]	; (9130 <hci_acl_handle+0x110>)
    9092:	681c      	ldr	r4, [r3, #0]
    9094:	4927      	ldr	r1, [pc, #156]	; (9134 <hci_acl_handle+0x114>)
    9096:	4b28      	ldr	r3, [pc, #160]	; (9138 <hci_acl_handle+0x118>)
    9098:	482a      	ldr	r0, [pc, #168]	; (9144 <hci_acl_handle+0x124>)
    909a:	47a0      	blx	r4
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    909c:	4b2a      	ldr	r3, [pc, #168]	; (9148 <hci_acl_handle+0x128>)
    909e:	e9d3 2300 	ldrd	r2, r3, [r3]
    90a2:	2300      	movs	r3, #0
    90a4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    90a8:	4313      	orrs	r3, r2
    90aa:	d012      	beq.n	90d2 <hci_acl_handle+0xb2>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    90ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    90b0:	2001      	movs	r0, #1
    90b2:	f7fa fd85 	bl	3bc0 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    90b6:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    90b8:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    90bc:	211a      	movs	r1, #26
    90be:	f7ff f844 	bl	814a <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    90c2:	f8d8 0000 	ldr.w	r0, [r8]
    90c6:	2101      	movs	r1, #1
    90c8:	3008      	adds	r0, #8
    90ca:	f009 ff1f 	bl	12f0c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    90ce:	2301      	movs	r3, #1
    90d0:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    90d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    90d6:	e7b8      	b.n	904a <hci_acl_handle+0x2a>
    90d8:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    90da:	f1b9 0f00 	cmp.w	r9, #0
    90de:	d002      	beq.n	90e6 <hci_acl_handle+0xc6>
    90e0:	f1b9 0f02 	cmp.w	r9, #2
    90e4:	d11d      	bne.n	9122 <hci_acl_handle+0x102>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    90e6:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    90e8:	f362 0301 	bfi	r3, r2, #0, #2
    90ec:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    90ee:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    90f0:	68b1      	ldr	r1, [r6, #8]
    90f2:	463a      	mov	r2, r7
    90f4:	1de0      	adds	r0, r4, #7
    90f6:	f7f8 fd93 	bl	1c20 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    90fa:	4621      	mov	r1, r4
    90fc:	4628      	mov	r0, r5
    90fe:	f007 fd65 	bl	10bcc <ll_tx_mem_enqueue>
    9102:	2800      	cmp	r0, #0
    9104:	d0a1      	beq.n	904a <hci_acl_handle+0x2a>
		BT_ERR("Invalid Tx Enqueue");
    9106:	4b08      	ldr	r3, [pc, #32]	; (9128 <hci_acl_handle+0x108>)
    9108:	9301      	str	r3, [sp, #4]
    910a:	9300      	str	r3, [sp, #0]
    910c:	4b07      	ldr	r3, [pc, #28]	; (912c <hci_acl_handle+0x10c>)
    910e:	4a08      	ldr	r2, [pc, #32]	; (9130 <hci_acl_handle+0x110>)
    9110:	681d      	ldr	r5, [r3, #0]
    9112:	4908      	ldr	r1, [pc, #32]	; (9134 <hci_acl_handle+0x114>)
    9114:	4b08      	ldr	r3, [pc, #32]	; (9138 <hci_acl_handle+0x118>)
    9116:	480d      	ldr	r0, [pc, #52]	; (914c <hci_acl_handle+0x12c>)
    9118:	47a8      	blx	r5
		ll_tx_mem_release(node_tx);
    911a:	4620      	mov	r0, r4
    911c:	f007 fd50 	bl	10bc0 <ll_tx_mem_release>
    9120:	e791      	b.n	9046 <hci_acl_handle+0x26>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9122:	2201      	movs	r2, #1
    9124:	e7e0      	b.n	90e8 <hci_acl_handle+0xc8>
    9126:	bf00      	nop
    9128:	00014c55 	.word	0x00014c55
    912c:	20003aa4 	.word	0x20003aa4
    9130:	000159c3 	.word	0x000159c3
    9134:	00015a12 	.word	0x00015a12
    9138:	00016adf 	.word	0x00016adf
    913c:	00016b7d 	.word	0x00016b7d
    9140:	00016b9f 	.word	0x00016b9f
    9144:	00016bcd 	.word	0x00016bcd
    9148:	20003d78 	.word	0x20003d78
    914c:	00016bf0 	.word	0x00016bf0

00009150 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9150:	7a03      	ldrb	r3, [r0, #8]
    9152:	f003 0303 	and.w	r3, r3, #3
    9156:	3b01      	subs	r3, #1
    9158:	2b01      	cmp	r3, #1
{
    915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    915c:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    915e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9160:	d81c      	bhi.n	919c <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9162:	f101 0608 	add.w	r6, r1, #8
    9166:	4630      	mov	r0, r6
    9168:	2104      	movs	r1, #4
    916a:	f009 fecf 	bl	12f0c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    916e:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9170:	7a61      	ldrb	r1, [r4, #9]
    9172:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9174:	f003 0303 	and.w	r3, r3, #3
    9178:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    917a:	bf0c      	ite	eq
    917c:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9180:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    9184:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9186:	4630      	mov	r0, r6
    9188:	f009 fec0 	bl	12f0c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    918c:	7a62      	ldrb	r2, [r4, #9]
    918e:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    9192:	b002      	add	sp, #8
    9194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    9198:	f7f8 bd42 	b.w	1c20 <memcpy>
		LL_ASSERT(0);
    919c:	4b07      	ldr	r3, [pc, #28]	; (91bc <hci_acl_encode+0x6c>)
    919e:	9301      	str	r3, [sp, #4]
    91a0:	9300      	str	r3, [sp, #0]
    91a2:	4b07      	ldr	r3, [pc, #28]	; (91c0 <hci_acl_encode+0x70>)
    91a4:	4a07      	ldr	r2, [pc, #28]	; (91c4 <hci_acl_encode+0x74>)
    91a6:	681c      	ldr	r4, [r3, #0]
    91a8:	4907      	ldr	r1, [pc, #28]	; (91c8 <hci_acl_encode+0x78>)
    91aa:	4b08      	ldr	r3, [pc, #32]	; (91cc <hci_acl_encode+0x7c>)
    91ac:	4808      	ldr	r0, [pc, #32]	; (91d0 <hci_acl_encode+0x80>)
    91ae:	47a0      	blx	r4
    91b0:	4040      	eors	r0, r0
    91b2:	f380 8811 	msr	BASEPRI, r0
    91b6:	f04f 0004 	mov.w	r0, #4
    91ba:	df02      	svc	2
    91bc:	00014c55 	.word	0x00014c55
    91c0:	20003aa4 	.word	0x20003aa4
    91c4:	000159c3 	.word	0x000159c3
    91c8:	00015a12 	.word	0x00015a12
    91cc:	00016b6e 	.word	0x00016b6e
    91d0:	00015962 	.word	0x00015962

000091d4 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    91d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    91d8:	7903      	ldrb	r3, [r0, #4]
	handle = node_rx->hdr.handle;
    91da:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    91dc:	2b01      	cmp	r3, #1
{
    91de:	b093      	sub	sp, #76	; 0x4c
    91e0:	4604      	mov	r4, r0
    91e2:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    91e4:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    91e8:	f000 82ad 	beq.w	9746 <hci_evt_encode+0x572>
	switch (node_rx->hdr.type) {
    91ec:	3b02      	subs	r3, #2
    91ee:	2b0a      	cmp	r3, #10
    91f0:	f200 829f 	bhi.w	9732 <hci_evt_encode+0x55e>
    91f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    91f8:	0135000b 	.word	0x0135000b
    91fc:	013d013b 	.word	0x013d013b
    9200:	01be0185 	.word	0x01be0185
    9204:	020101dc 	.word	0x020101dc
    9208:	022e0219 	.word	0x022e0219
    920c:	0249      	.short	0x0249
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    920e:	2301      	movs	r3, #1
    9210:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    9214:	2303      	movs	r3, #3
    9216:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    921a:	23ff      	movs	r3, #255	; 0xff
    921c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9220:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9224:	2302      	movs	r3, #2
    9226:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    922a:	7a43      	ldrb	r3, [r0, #9]
    922c:	4403      	add	r3, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    922e:	2100      	movs	r1, #0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9230:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (adv->tx_addr) {
    9234:	7a03      	ldrb	r3, [r0, #8]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    9236:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    923a:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    923c:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    923e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (adv->tx_addr) {
    9242:	d505      	bpl.n	9250 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    9244:	f104 030a 	add.w	r3, r4, #10
    9248:	464a      	mov	r2, r9
    924a:	4608      	mov	r0, r1
    924c:	f008 fe70 	bl	11f30 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    9250:	4bb9      	ldr	r3, [pc, #740]	; (9538 <hci_evt_encode+0x364>)
    9252:	e9d3 2300 	ldrd	r2, r3, [r3]
    9256:	2200      	movs	r2, #0
    9258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    925c:	4313      	orrs	r3, r2
    925e:	f000 80ba 	beq.w	93d6 <hci_evt_encode+0x202>
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9262:	7a63      	ldrb	r3, [r4, #9]
    9264:	4423      	add	r3, r4
    9266:	f893 a00c 	ldrb.w	sl, [r3, #12]
    926a:	4bb4      	ldr	r3, [pc, #720]	; (953c <hci_evt_encode+0x368>)
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    926c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9270:	f1ba 0f00 	cmp.w	sl, #0
    9274:	d13d      	bne.n	92f2 <hci_evt_encode+0x11e>
    9276:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    927a:	2300      	movs	r3, #0
    927c:	4313      	orrs	r3, r2
    927e:	f000 80aa 	beq.w	93d6 <hci_evt_encode+0x202>
	if (dup_count >= 0) {
    9282:	4baf      	ldr	r3, [pc, #700]	; (9540 <hci_evt_encode+0x36c>)
    9284:	681a      	ldr	r2, [r3, #0]
    9286:	2a00      	cmp	r2, #0
    9288:	4698      	mov	r8, r3
    928a:	db54      	blt.n	9336 <hci_evt_encode+0x162>
    928c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 9570 <hci_evt_encode+0x39c>
    9290:	2600      	movs	r6, #0
    9292:	f104 030a 	add.w	r3, r4, #10
		for (i = 0; i < dup_count; i++) {
    9296:	f8d8 2000 	ldr.w	r2, [r8]
    929a:	4296      	cmp	r6, r2
    929c:	db2c      	blt.n	92f8 <hci_evt_encode+0x124>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    929e:	4ea9      	ldr	r6, [pc, #676]	; (9544 <hci_evt_encode+0x370>)
    92a0:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 9548 <hci_evt_encode+0x374>
    92a4:	6830      	ldr	r0, [r6, #0]
    92a6:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    92aa:	4619      	mov	r1, r3
    92ac:	2206      	movs	r2, #6
    92ae:	3002      	adds	r0, #2
    92b0:	f7f8 fcb6 	bl	1c20 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    92b4:	6832      	ldr	r2, [r6, #0]
    92b6:	7a23      	ldrb	r3, [r4, #8]
    92b8:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
    92bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    92c0:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    92c2:	7a23      	ldrb	r3, [r4, #8]
    92c4:	f003 010f 	and.w	r1, r3, #15
    92c8:	2301      	movs	r3, #1
    92ca:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    92cc:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].mask = BIT(adv->type);
    92d0:	f80b 3032 	strb.w	r3, [fp, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    92d4:	290f      	cmp	r1, #15
			dup_count++;
    92d6:	bfd5      	itete	le
    92d8:	3101      	addle	r1, #1
			dup_curr++;
    92da:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    92dc:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    92de:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    92e0:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    92e2:	bfd8      	it	le
    92e4:	f8c8 1000 	strle.w	r1, [r8]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    92e8:	2a10      	cmp	r2, #16
    92ea:	d124      	bne.n	9336 <hci_evt_encode+0x162>
			dup_curr = 0;
    92ec:	2200      	movs	r2, #0
    92ee:	6032      	str	r2, [r6, #0]
    92f0:	e021      	b.n	9336 <hci_evt_encode+0x162>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    92f2:	f002 020b 	and.w	r2, r2, #11
    92f6:	e7c0      	b.n	927a <hci_evt_encode+0xa6>
			if (!memcmp(&adv->adv_ind.addr[0],
    92f8:	4618      	mov	r0, r3
    92fa:	2206      	movs	r2, #6
    92fc:	4659      	mov	r1, fp
    92fe:	9307      	str	r3, [sp, #28]
    9300:	f7f8 fc79 	bl	1bf6 <memcmp>
    9304:	9b07      	ldr	r3, [sp, #28]
    9306:	bb00      	cbnz	r0, 934a <hci_evt_encode+0x176>
			    adv->tx_addr == dup_filter[i].addr.type) {
    9308:	7a21      	ldrb	r1, [r4, #8]
    930a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    930e:	460a      	mov	r2, r1
    9310:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    9314:	4281      	cmp	r1, r0
    9316:	d118      	bne.n	934a <hci_evt_encode+0x176>
				if (dup_filter[i].mask & BIT(adv->type)) {
    9318:	488b      	ldr	r0, [pc, #556]	; (9548 <hci_evt_encode+0x374>)
    931a:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    931e:	f002 020f 	and.w	r2, r2, #15
    9322:	fa23 f102 	lsr.w	r1, r3, r2
    9326:	07c9      	lsls	r1, r1, #31
    9328:	d455      	bmi.n	93d6 <hci_evt_encode+0x202>
				dup_filter[i].mask |= BIT(adv->type);
    932a:	2101      	movs	r1, #1
    932c:	fa01 f202 	lsl.w	r2, r1, r2
    9330:	4313      	orrs	r3, r2
    9332:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9336:	f894 b008 	ldrb.w	fp, [r4, #8]
    933a:	7a63      	ldrb	r3, [r4, #9]
    933c:	f00b 0b0f 	and.w	fp, fp, #15
    9340:	f1bb 0f01 	cmp.w	fp, #1
    9344:	d105      	bne.n	9352 <hci_evt_encode+0x17e>
		data_len = 0;
    9346:	2600      	movs	r6, #0
    9348:	e005      	b.n	9356 <hci_evt_encode+0x182>
		for (i = 0; i < dup_count; i++) {
    934a:	3601      	adds	r6, #1
    934c:	f10b 0b08 	add.w	fp, fp, #8
    9350:	e7a1      	b.n	9296 <hci_evt_encode+0xc2>
		data_len = (adv->len - BDADDR_SIZE);
    9352:	1f9e      	subs	r6, r3, #6
    9354:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9356:	4423      	add	r3, r4
    9358:	f893 800a 	ldrb.w	r8, [r3, #10]
    935c:	f1c8 0800 	rsb	r8, r8, #0
    9360:	fa4f f888 	sxtb.w	r8, r8
	if (direct) {
    9364:	f1ba 0f00 	cmp.w	sl, #0
    9368:	d042      	beq.n	93f0 <hci_evt_encode+0x21c>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    936a:	f1bb 0f01 	cmp.w	fp, #1
    936e:	d00f      	beq.n	9390 <hci_evt_encode+0x1bc>
    9370:	4b76      	ldr	r3, [pc, #472]	; (954c <hci_evt_encode+0x378>)
    9372:	9301      	str	r3, [sp, #4]
    9374:	9300      	str	r3, [sp, #0]
    9376:	4b76      	ldr	r3, [pc, #472]	; (9550 <hci_evt_encode+0x37c>)
    9378:	4a76      	ldr	r2, [pc, #472]	; (9554 <hci_evt_encode+0x380>)
    937a:	681c      	ldr	r4, [r3, #0]
    937c:	4976      	ldr	r1, [pc, #472]	; (9558 <hci_evt_encode+0x384>)
    937e:	4b77      	ldr	r3, [pc, #476]	; (955c <hci_evt_encode+0x388>)
    9380:	4877      	ldr	r0, [pc, #476]	; (9560 <hci_evt_encode+0x38c>)
		LL_ASSERT(0);
    9382:	47a0      	blx	r4
    9384:	4040      	eors	r0, r0
    9386:	f380 8811 	msr	BASEPRI, r0
    938a:	f04f 0004 	mov.w	r0, #4
    938e:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    9390:	2211      	movs	r2, #17
    9392:	210b      	movs	r1, #11
    9394:	4628      	mov	r0, r5
    9396:	f7fe fefd 	bl	8194 <meta_evt>
		drp->num_reports = 1;
    939a:	f880 b000 	strb.w	fp, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    939e:	f880 b001 	strb.w	fp, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    93a2:	4605      	mov	r5, r0
		if (rl_idx < ll_rl_size_get()) {
    93a4:	f008 fc9a 	bl	11cdc <ll_rl_size_get>
    93a8:	4581      	cmp	r9, r0
    93aa:	f105 0003 	add.w	r0, r5, #3
    93ae:	d215      	bcs.n	93dc <hci_evt_encode+0x208>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    93b0:	4602      	mov	r2, r0
    93b2:	1ca9      	adds	r1, r5, #2
    93b4:	4648      	mov	r0, r9
    93b6:	f008 fb25 	bl	11a04 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    93ba:	78ab      	ldrb	r3, [r5, #2]
    93bc:	3302      	adds	r3, #2
    93be:	70ab      	strb	r3, [r5, #2]
		dir_info->dir_addr.type = 0x1;
    93c0:	2301      	movs	r3, #1
    93c2:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    93c4:	2206      	movs	r2, #6
    93c6:	f107 0108 	add.w	r1, r7, #8
    93ca:	f105 000a 	add.w	r0, r5, #10
    93ce:	f7f8 fc27 	bl	1c20 <memcpy>
		dir_info->rssi = rssi;
    93d2:	f885 8010 	strb.w	r8, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    93d6:	b013      	add	sp, #76	; 0x4c
    93d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    93dc:	7a23      	ldrb	r3, [r4, #8]
    93de:	f3c3 1380 	ubfx	r3, r3, #6, #1
    93e2:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    93e4:	2206      	movs	r2, #6
    93e6:	f104 010a 	add.w	r1, r4, #10
    93ea:	f7f8 fc19 	bl	1c20 <memcpy>
    93ee:	e7e7      	b.n	93c0 <hci_evt_encode+0x1ec>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    93f0:	f106 020b 	add.w	r2, r6, #11
    93f4:	b2d2      	uxtb	r2, r2
    93f6:	2102      	movs	r1, #2
    93f8:	4628      	mov	r0, r5
    93fa:	f7fe fecb 	bl	8194 <meta_evt>
	sep->num_reports = 1;
    93fe:	2301      	movs	r3, #1
    9400:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    9402:	7a23      	ldrb	r3, [r4, #8]
    9404:	aa12      	add	r2, sp, #72	; 0x48
    9406:	f003 030f 	and.w	r3, r3, #15
    940a:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    940c:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    940e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    9412:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    9414:	7a63      	ldrb	r3, [r4, #9]
    9416:	4423      	add	r3, r4
    9418:	f893 900b 	ldrb.w	r9, [r3, #11]
	if (rl_idx < ll_rl_size_get()) {
    941c:	f008 fc5e 	bl	11cdc <ll_rl_size_get>
    9420:	4581      	cmp	r9, r0
    9422:	f105 0003 	add.w	r0, r5, #3
    9426:	d212      	bcs.n	944e <hci_evt_encode+0x27a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    9428:	4602      	mov	r2, r0
    942a:	1ca9      	adds	r1, r5, #2
    942c:	4648      	mov	r0, r9
    942e:	f008 fae9 	bl	11a04 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    9432:	78ab      	ldrb	r3, [r5, #2]
    9434:	3302      	adds	r3, #2
    9436:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    9438:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    943a:	350a      	adds	r5, #10
    943c:	4632      	mov	r2, r6
    943e:	f107 0108 	add.w	r1, r7, #8
    9442:	4628      	mov	r0, r5
    9444:	f7f8 fbec 	bl	1c20 <memcpy>
	*prssi = rssi;
    9448:	f805 8006 	strb.w	r8, [r5, r6]
    944c:	e7c3      	b.n	93d6 <hci_evt_encode+0x202>
		adv_info->addr.type = adv->tx_addr;
    944e:	7a23      	ldrb	r3, [r4, #8]
    9450:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9454:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    9456:	2206      	movs	r2, #6
    9458:	f104 010a 	add.w	r1, r4, #10
    945c:	f7f8 fbe0 	bl	1c20 <memcpy>
    9460:	e7ea      	b.n	9438 <hci_evt_encode+0x264>
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9462:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9464:	4621      	mov	r1, r4
    9466:	4638      	mov	r0, r7
    9468:	f7fe ffec 	bl	8444 <le_adv_ext_report.isra.66>
    946c:	e7b3      	b.n	93d6 <hci_evt_encode+0x202>
    946e:	2204      	movs	r2, #4
    9470:	e7f8      	b.n	9464 <hci_evt_encode+0x290>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9472:	4b31      	ldr	r3, [pc, #196]	; (9538 <hci_evt_encode+0x364>)
    9474:	e9d3 2300 	ldrd	r2, r3, [r3]
    9478:	2200      	movs	r2, #0
    947a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    947e:	4313      	orrs	r3, r2
    9480:	f100 060a 	add.w	r6, r0, #10
    9484:	d007      	beq.n	9496 <hci_evt_encode+0x2c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9486:	4b2d      	ldr	r3, [pc, #180]	; (953c <hci_evt_encode+0x368>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	2300      	movs	r3, #0
    948e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9492:	4313      	orrs	r3, r2
    9494:	d124      	bne.n	94e0 <hci_evt_encode+0x30c>
		addr.type = adv->tx_addr;
    9496:	7a23      	ldrb	r3, [r4, #8]
    9498:	ad12      	add	r5, sp, #72	; 0x48
    949a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    949e:	2206      	movs	r2, #6
    94a0:	4631      	mov	r1, r6
    94a2:	f10d 0025 	add.w	r0, sp, #37	; 0x25
		addr.type = adv->tx_addr;
    94a6:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    94aa:	f7f8 fbb9 	bl	1c20 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    94ae:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94b0:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94b2:	ae0b      	add	r6, sp, #44	; 0x2c
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94b4:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94b6:	4631      	mov	r1, r6
    94b8:	4628      	mov	r0, r5
    94ba:	f7fe ff87 	bl	83cc <bt_addr_le_to_str.constprop.70>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94be:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    94c0:	4b22      	ldr	r3, [pc, #136]	; (954c <hci_evt_encode+0x378>)
    94c2:	9304      	str	r3, [sp, #16]
    94c4:	9300      	str	r3, [sp, #0]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94c6:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    94c8:	2200      	movs	r2, #0
    94ca:	4b21      	ldr	r3, [pc, #132]	; (9550 <hci_evt_encode+0x37c>)
    94cc:	9201      	str	r2, [sp, #4]
    94ce:	9403      	str	r4, [sp, #12]
    94d0:	9602      	str	r6, [sp, #8]
    94d2:	681c      	ldr	r4, [r3, #0]
    94d4:	4a23      	ldr	r2, [pc, #140]	; (9564 <hci_evt_encode+0x390>)
    94d6:	4b24      	ldr	r3, [pc, #144]	; (9568 <hci_evt_encode+0x394>)
    94d8:	491f      	ldr	r1, [pc, #124]	; (9558 <hci_evt_encode+0x384>)
    94da:	4824      	ldr	r0, [pc, #144]	; (956c <hci_evt_encode+0x398>)
    94dc:	47a0      	blx	r4
    94de:	e77a      	b.n	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    94e0:	2208      	movs	r2, #8
    94e2:	2113      	movs	r1, #19
    94e4:	4628      	mov	r0, r5
    94e6:	f7fe fe55 	bl	8194 <meta_evt>
	sep->handle = 0;
    94ea:	2300      	movs	r3, #0
    94ec:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    94ee:	7a23      	ldrb	r3, [r4, #8]
    94f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    94f4:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    94f6:	2206      	movs	r2, #6
    94f8:	4631      	mov	r1, r6
    94fa:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    94fc:	f7f8 fb90 	bl	1c20 <memcpy>
    9500:	e769      	b.n	93d6 <hci_evt_encode+0x202>
			le_conn_complete(cc->status, cc, handle, buf);
    9502:	7ac7      	ldrb	r7, [r0, #11]
	if (!status) {
    9504:	b93f      	cbnz	r7, 9516 <hci_evt_encode+0x342>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9506:	f100 0314 	add.w	r3, r0, #20
    950a:	f100 010e 	add.w	r1, r0, #14
    950e:	22ff      	movs	r2, #255	; 0xff
    9510:	7b40      	ldrb	r0, [r0, #13]
    9512:	f008 fd0d 	bl	11f30 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9516:	4b08      	ldr	r3, [pc, #32]	; (9538 <hci_evt_encode+0x364>)
    9518:	e9d3 2300 	ldrd	r2, r3, [r3]
    951c:	2200      	movs	r2, #0
    951e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9522:	4313      	orrs	r3, r2
    9524:	f43f af57 	beq.w	93d6 <hci_evt_encode+0x202>
    9528:	462b      	mov	r3, r5
    952a:	4632      	mov	r2, r6
    952c:	f104 010b 	add.w	r1, r4, #11
    9530:	4638      	mov	r0, r7
    9532:	f7fe feb5 	bl	82a0 <le_conn_complete.part.39>
    9536:	e74e      	b.n	93d6 <hci_evt_encode+0x202>
    9538:	20003d78 	.word	0x20003d78
    953c:	20003d80 	.word	0x20003d80
    9540:	20000860 	.word	0x20000860
    9544:	20000864 	.word	0x20000864
    9548:	20000868 	.word	0x20000868
    954c:	00014c55 	.word	0x00014c55
    9550:	20003aa4 	.word	0x20003aa4
    9554:	000159c3 	.word	0x000159c3
    9558:	00015a12 	.word	0x00015a12
    955c:	00016aee 	.word	0x00016aee
    9560:	00016c8f 	.word	0x00016c8f
    9564:	00015a0b 	.word	0x00015a0b
    9568:	00016b16 	.word	0x00016b16
    956c:	00016cd5 	.word	0x00016cd5
    9570:	2000086a 	.word	0x2000086a
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9574:	4bb8      	ldr	r3, [pc, #736]	; (9858 <hci_evt_encode+0x684>)
    9576:	e9d3 2300 	ldrd	r2, r3, [r3]
    957a:	2300      	movs	r3, #0
    957c:	f002 0210 	and.w	r2, r2, #16
    9580:	4313      	orrs	r3, r2
    9582:	f43f af28 	beq.w	93d6 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    9586:	2204      	movs	r2, #4
    9588:	2105      	movs	r1, #5
    958a:	4628      	mov	r0, r5
    958c:	f7fe fddd 	bl	814a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9590:	2104      	movs	r1, #4
    9592:	f105 0008 	add.w	r0, r5, #8
    9596:	f009 fcb9 	bl	12f0c <net_buf_simple_add>
	ep->status = 0x00;
    959a:	2300      	movs	r3, #0
	conn_count--;
    959c:	4aaf      	ldr	r2, [pc, #700]	; (985c <hci_evt_encode+0x688>)
	ep->status = 0x00;
    959e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    95a0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    95a4:	7a23      	ldrb	r3, [r4, #8]
    95a6:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    95a8:	6813      	ldr	r3, [r2, #0]
    95aa:	3b01      	subs	r3, #1
    95ac:	6013      	str	r3, [r2, #0]
    95ae:	e712      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95b0:	4ba9      	ldr	r3, [pc, #676]	; (9858 <hci_evt_encode+0x684>)
    95b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    95b6:	2200      	movs	r2, #0
    95b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    95bc:	4313      	orrs	r3, r2
    95be:	f43f af0a 	beq.w	93d6 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    95c2:	4ba7      	ldr	r3, [pc, #668]	; (9860 <hci_evt_encode+0x68c>)
    95c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    95c8:	2300      	movs	r3, #0
    95ca:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95ce:	4313      	orrs	r3, r2
    95d0:	f43f af01 	beq.w	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    95d4:	2209      	movs	r2, #9
    95d6:	2103      	movs	r1, #3
    95d8:	4628      	mov	r0, r5
    95da:	f7fe fddb 	bl	8194 <meta_evt>
	sep->status = radio_cu->status;
    95de:	7ae3      	ldrb	r3, [r4, #11]
    95e0:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    95e2:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    95e4:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    95e8:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    95ec:	89e3      	ldrh	r3, [r4, #14]
    95ee:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    95f2:	8a23      	ldrh	r3, [r4, #16]
    95f4:	f8a0 3007 	strh.w	r3, [r0, #7]
    95f8:	e6ed      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    95fa:	4b97      	ldr	r3, [pc, #604]	; (9858 <hci_evt_encode+0x684>)
    95fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9600:	2200      	movs	r2, #0
    9602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9606:	4313      	orrs	r3, r2
    9608:	f43f aee5 	beq.w	93d6 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    960c:	2203      	movs	r2, #3
    960e:	2130      	movs	r1, #48	; 0x30
    9610:	4628      	mov	r0, r5
    9612:	f7fe fd9a 	bl	814a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9616:	2103      	movs	r1, #3
    9618:	f105 0008 	add.w	r0, r5, #8
    961c:	f009 fc76 	bl	12f0c <net_buf_simple_add>
	ep->status = 0x00;
    9620:	2300      	movs	r3, #0
    9622:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9624:	f8a0 6001 	strh.w	r6, [r0, #1]
    9628:	e6d5      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    962a:	4b8e      	ldr	r3, [pc, #568]	; (9864 <hci_evt_encode+0x690>)
    962c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9630:	2300      	movs	r3, #0
    9632:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9636:	4313      	orrs	r3, r2
    9638:	f43f aecd 	beq.w	93d6 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    963c:	2202      	movs	r2, #2
    963e:	2157      	movs	r1, #87	; 0x57
    9640:	4628      	mov	r0, r5
    9642:	f7fe fd82 	bl	814a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9646:	2102      	movs	r1, #2
    9648:	f105 0008 	add.w	r0, r5, #8
    964c:	f009 fc5e 	bl	12f0c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9650:	8006      	strh	r6, [r0, #0]
    9652:	e6c0      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9654:	4b80      	ldr	r3, [pc, #512]	; (9858 <hci_evt_encode+0x684>)
    9656:	e9d3 2300 	ldrd	r2, r3, [r3]
    965a:	2200      	movs	r2, #0
    965c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9660:	4313      	orrs	r3, r2
    9662:	f43f aeb8 	beq.w	93d6 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9666:	4b7e      	ldr	r3, [pc, #504]	; (9860 <hci_evt_encode+0x68c>)
    9668:	e9d3 2300 	ldrd	r2, r3, [r3]
    966c:	2300      	movs	r3, #0
    966e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9672:	4313      	orrs	r3, r2
    9674:	f43f aeaf 	beq.w	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9678:	2203      	movs	r2, #3
    967a:	2114      	movs	r1, #20
    967c:	4628      	mov	r0, r5
    967e:	f7fe fd89 	bl	8194 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9682:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9684:	7ae3      	ldrb	r3, [r4, #11]
    9686:	7083      	strb	r3, [r0, #2]
    9688:	e6a5      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    968a:	4b73      	ldr	r3, [pc, #460]	; (9858 <hci_evt_encode+0x684>)
    968c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9690:	2200      	movs	r2, #0
    9692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9696:	4313      	orrs	r3, r2
    9698:	d007      	beq.n	96aa <hci_evt_encode+0x4d6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    969a:	4b71      	ldr	r3, [pc, #452]	; (9860 <hci_evt_encode+0x68c>)
    969c:	e9d3 2300 	ldrd	r2, r3, [r3]
    96a0:	2300      	movs	r3, #0
    96a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96a6:	4313      	orrs	r3, r2
    96a8:	d123      	bne.n	96f2 <hci_evt_encode+0x51e>
    96aa:	7b22      	ldrb	r2, [r4, #12]
    96ac:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    96ae:	486e      	ldr	r0, [pc, #440]	; (9868 <hci_evt_encode+0x694>)
    96b0:	2a00      	cmp	r2, #0
    96b2:	fa92 f3a2 	rbit	r3, r2
    96b6:	fab3 f383 	clz	r3, r3
    96ba:	fa91 f2a1 	rbit	r2, r1
    96be:	bf08      	it	eq
    96c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    96c4:	2900      	cmp	r1, #0
    96c6:	fab2 f282 	clz	r2, r2
    96ca:	bf08      	it	eq
    96cc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    96d0:	4966      	ldr	r1, [pc, #408]	; (986c <hci_evt_encode+0x698>)
    96d2:	9105      	str	r1, [sp, #20]
    96d4:	3301      	adds	r3, #1
    96d6:	3201      	adds	r2, #1
    96d8:	9204      	str	r2, [sp, #16]
    96da:	9303      	str	r3, [sp, #12]
    96dc:	7ae3      	ldrb	r3, [r4, #11]
    96de:	9302      	str	r3, [sp, #8]
    96e0:	e88d 0042 	stmia.w	sp, {r1, r6}
    96e4:	4b62      	ldr	r3, [pc, #392]	; (9870 <hci_evt_encode+0x69c>)
    96e6:	4a63      	ldr	r2, [pc, #396]	; (9874 <hci_evt_encode+0x6a0>)
    96e8:	681c      	ldr	r4, [r3, #0]
    96ea:	4963      	ldr	r1, [pc, #396]	; (9878 <hci_evt_encode+0x6a4>)
    96ec:	4b63      	ldr	r3, [pc, #396]	; (987c <hci_evt_encode+0x6a8>)
    96ee:	47a0      	blx	r4
    96f0:	e671      	b.n	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    96f2:	2205      	movs	r2, #5
    96f4:	210c      	movs	r1, #12
    96f6:	4628      	mov	r0, r5
    96f8:	f7fe fd4c 	bl	8194 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    96fc:	7ae3      	ldrb	r3, [r4, #11]
    96fe:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9700:	f8a0 6001 	strh.w	r6, [r0, #1]
    9704:	7b22      	ldrb	r2, [r4, #12]
    9706:	2a00      	cmp	r2, #0
    9708:	fa92 f3a2 	rbit	r3, r2
    970c:	fab3 f383 	clz	r3, r3
    9710:	bf08      	it	eq
    9712:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9716:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9718:	70c3      	strb	r3, [r0, #3]
    971a:	7b62      	ldrb	r2, [r4, #13]
    971c:	fa92 f3a2 	rbit	r3, r2
    9720:	2a00      	cmp	r2, #0
    9722:	fab3 f383 	clz	r3, r3
    9726:	bf08      	it	eq
    9728:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    972c:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    972e:	7103      	strb	r3, [r0, #4]
    9730:	e651      	b.n	93d6 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    9732:	4b4e      	ldr	r3, [pc, #312]	; (986c <hci_evt_encode+0x698>)
    9734:	9301      	str	r3, [sp, #4]
    9736:	9300      	str	r3, [sp, #0]
    9738:	4b4d      	ldr	r3, [pc, #308]	; (9870 <hci_evt_encode+0x69c>)
    973a:	681c      	ldr	r4, [r3, #0]
    973c:	4b50      	ldr	r3, [pc, #320]	; (9880 <hci_evt_encode+0x6ac>)
    973e:	4a51      	ldr	r2, [pc, #324]	; (9884 <hci_evt_encode+0x6b0>)
    9740:	494d      	ldr	r1, [pc, #308]	; (9878 <hci_evt_encode+0x6a4>)
    9742:	4851      	ldr	r0, [pc, #324]	; (9888 <hci_evt_encode+0x6b4>)
    9744:	e61d      	b.n	9382 <hci_evt_encode+0x1ae>
	switch (pdu_data->llctrl.opcode) {
    9746:	7ac3      	ldrb	r3, [r0, #11]
    9748:	3b03      	subs	r3, #3
    974a:	2b12      	cmp	r3, #18
    974c:	f200 80e1 	bhi.w	9912 <hci_evt_encode+0x73e>
    9750:	e8df f013 	tbh	[pc, r3, lsl #1]
    9754:	00df0013 	.word	0x00df0013
    9758:	003800df 	.word	0x003800df
    975c:	00df00cb 	.word	0x00df00cb
    9760:	00df003e 	.word	0x00df003e
    9764:	004500df 	.word	0x004500df
    9768:	00df0064 	.word	0x00df0064
    976c:	00df0068 	.word	0x00df0068
    9770:	00df00df 	.word	0x00df00df
    9774:	00ab00df 	.word	0x00ab00df
    9778:	00ab      	.short	0x00ab
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    977a:	4b37      	ldr	r3, [pc, #220]	; (9858 <hci_evt_encode+0x684>)
    977c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9780:	2200      	movs	r2, #0
    9782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9786:	4313      	orrs	r3, r2
    9788:	f43f ae25 	beq.w	93d6 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    978c:	4b34      	ldr	r3, [pc, #208]	; (9860 <hci_evt_encode+0x68c>)
    978e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9792:	2300      	movs	r3, #0
    9794:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9798:	4313      	orrs	r3, r2
    979a:	f43f ae1c 	beq.w	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    979e:	220c      	movs	r2, #12
    97a0:	2105      	movs	r1, #5
    97a2:	4628      	mov	r0, r5
    97a4:	f7fe fcf6 	bl	8194 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    97a8:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    97aa:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    97ac:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    97b0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    97b4:	f7f8 fa34 	bl	1c20 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    97b8:	2202      	movs	r2, #2
    97ba:	f104 0114 	add.w	r1, r4, #20
    97be:	f105 000a 	add.w	r0, r5, #10
    97c2:	e69b      	b.n	94fc <hci_evt_encode+0x328>
		encrypt_change(0x00, handle, buf);
    97c4:	460a      	mov	r2, r1
    97c6:	2000      	movs	r0, #0
    97c8:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    97ca:	f7fe fd1b 	bl	8204 <encrypt_change>
    97ce:	e602      	b.n	93d6 <hci_evt_encode+0x202>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    97d0:	460b      	mov	r3, r1
    97d2:	4632      	mov	r2, r6
    97d4:	4639      	mov	r1, r7
    97d6:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    97d8:	f7fe fd34 	bl	8244 <le_remote_feat_complete>
    97dc:	e5fb      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    97de:	4b1e      	ldr	r3, [pc, #120]	; (9858 <hci_evt_encode+0x684>)
    97e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    97e4:	2300      	movs	r3, #0
    97e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    97ea:	4313      	orrs	r3, r2
    97ec:	f43f adf3 	beq.w	93d6 <hci_evt_encode+0x202>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    97f0:	2208      	movs	r2, #8
    97f2:	210c      	movs	r1, #12
    97f4:	4628      	mov	r0, r5
    97f6:	f7fe fca8 	bl	814a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    97fa:	2108      	movs	r1, #8
    97fc:	1868      	adds	r0, r5, r1
    97fe:	f009 fb85 	bl	12f0c <net_buf_simple_add>
	ep->status = 0x00;
    9802:	2300      	movs	r3, #0
    9804:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9806:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    980a:	7b23      	ldrb	r3, [r4, #12]
    980c:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    980e:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9812:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9814:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9818:	80c3      	strh	r3, [r0, #6]
    981a:	e5dc      	b.n	93d6 <hci_evt_encode+0x202>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    981c:	460a      	mov	r2, r1
    981e:	7b00      	ldrb	r0, [r0, #12]
    9820:	4631      	mov	r1, r6
    9822:	e7d2      	b.n	97ca <hci_evt_encode+0x5f6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9824:	4b0c      	ldr	r3, [pc, #48]	; (9858 <hci_evt_encode+0x684>)
    9826:	e9d3 2300 	ldrd	r2, r3, [r3]
    982a:	2200      	movs	r2, #0
    982c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9830:	4313      	orrs	r3, r2
    9832:	d007      	beq.n	9844 <hci_evt_encode+0x670>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9834:	4b0a      	ldr	r3, [pc, #40]	; (9860 <hci_evt_encode+0x68c>)
    9836:	e9d3 2300 	ldrd	r2, r3, [r3]
    983a:	2300      	movs	r3, #0
    983c:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9840:	4313      	orrs	r3, r2
    9842:	d123      	bne.n	988c <hci_evt_encode+0x6b8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9844:	2300      	movs	r3, #0
    9846:	9301      	str	r3, [sp, #4]
    9848:	9300      	str	r3, [sp, #0]
    984a:	221a      	movs	r2, #26
    984c:	2102      	movs	r1, #2
    984e:	4630      	mov	r0, r6
    9850:	f006 ff06 	bl	10660 <ll_conn_update>
    9854:	e5bf      	b.n	93d6 <hci_evt_encode+0x202>
    9856:	bf00      	nop
    9858:	20003d78 	.word	0x20003d78
    985c:	2000085c 	.word	0x2000085c
    9860:	20003d80 	.word	0x20003d80
    9864:	200008e8 	.word	0x200008e8
    9868:	00016d08 	.word	0x00016d08
    986c:	00014c55 	.word	0x00014c55
    9870:	20003aa4 	.word	0x20003aa4
    9874:	00015a0b 	.word	0x00015a0b
    9878:	00015a12 	.word	0x00015a12
    987c:	00016b2b 	.word	0x00016b2b
    9880:	00016b3f 	.word	0x00016b3f
    9884:	000159c3 	.word	0x000159c3
    9888:	00015962 	.word	0x00015962
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    988c:	220a      	movs	r2, #10
    988e:	2106      	movs	r1, #6
    9890:	4628      	mov	r0, r5
    9892:	f7fe fc7f 	bl	8194 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9896:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9898:	89a3      	ldrh	r3, [r4, #12]
    989a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    989c:	89e3      	ldrh	r3, [r4, #14]
    989e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    98a0:	8a23      	ldrh	r3, [r4, #16]
    98a2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    98a4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    98a6:	8103      	strh	r3, [r0, #8]
    98a8:	e595      	b.n	93d6 <hci_evt_encode+0x202>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98aa:	4b1d      	ldr	r3, [pc, #116]	; (9920 <hci_evt_encode+0x74c>)
    98ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    98b0:	2200      	movs	r2, #0
    98b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    98b6:	4313      	orrs	r3, r2
    98b8:	f43f ad8d 	beq.w	93d6 <hci_evt_encode+0x202>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    98bc:	4b19      	ldr	r3, [pc, #100]	; (9924 <hci_evt_encode+0x750>)
    98be:	e9d3 2300 	ldrd	r2, r3, [r3]
    98c2:	2300      	movs	r3, #0
    98c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    98c8:	4313      	orrs	r3, r2
    98ca:	f43f ad84 	beq.w	93d6 <hci_evt_encode+0x202>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    98ce:	220a      	movs	r2, #10
    98d0:	2107      	movs	r1, #7
    98d2:	4628      	mov	r0, r5
    98d4:	f7fe fc5e 	bl	8194 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    98d8:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    98da:	8a23      	ldrh	r3, [r4, #16]
    98dc:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    98de:	8a63      	ldrh	r3, [r4, #18]
    98e0:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    98e2:	89a3      	ldrh	r3, [r4, #12]
    98e4:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    98e6:	89e3      	ldrh	r3, [r4, #14]
    98e8:	e7dd      	b.n	98a6 <hci_evt_encode+0x6d2>
    98ea:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    98ec:	2a0e      	cmp	r2, #14
    98ee:	d104      	bne.n	98fa <hci_evt_encode+0x726>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    98f0:	460b      	mov	r3, r1
    98f2:	4632      	mov	r2, r6
    98f4:	2100      	movs	r1, #0
    98f6:	201a      	movs	r0, #26
    98f8:	e76e      	b.n	97d8 <hci_evt_encode+0x604>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    98fa:	4b0b      	ldr	r3, [pc, #44]	; (9928 <hci_evt_encode+0x754>)
    98fc:	9302      	str	r3, [sp, #8]
    98fe:	9300      	str	r3, [sp, #0]
    9900:	4b0a      	ldr	r3, [pc, #40]	; (992c <hci_evt_encode+0x758>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9902:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    9904:	681c      	ldr	r4, [r3, #0]
    9906:	4a0a      	ldr	r2, [pc, #40]	; (9930 <hci_evt_encode+0x75c>)
    9908:	4b0a      	ldr	r3, [pc, #40]	; (9934 <hci_evt_encode+0x760>)
    990a:	490b      	ldr	r1, [pc, #44]	; (9938 <hci_evt_encode+0x764>)
    990c:	480b      	ldr	r0, [pc, #44]	; (993c <hci_evt_encode+0x768>)
    990e:	47a0      	blx	r4
    9910:	e561      	b.n	93d6 <hci_evt_encode+0x202>
		LL_ASSERT(0);
    9912:	4b05      	ldr	r3, [pc, #20]	; (9928 <hci_evt_encode+0x754>)
    9914:	9301      	str	r3, [sp, #4]
    9916:	9300      	str	r3, [sp, #0]
    9918:	4b04      	ldr	r3, [pc, #16]	; (992c <hci_evt_encode+0x758>)
    991a:	681c      	ldr	r4, [r3, #0]
    991c:	4b08      	ldr	r3, [pc, #32]	; (9940 <hci_evt_encode+0x76c>)
    991e:	e70e      	b.n	973e <hci_evt_encode+0x56a>
    9920:	20003d78 	.word	0x20003d78
    9924:	20003d80 	.word	0x20003d80
    9928:	00014c55 	.word	0x00014c55
    992c:	20003aa4 	.word	0x20003aa4
    9930:	00015a0b 	.word	0x00015a0b
    9934:	00016b4e 	.word	0x00016b4e
    9938:	00015a12 	.word	0x00015a12
    993c:	00016d44 	.word	0x00016d44
    9940:	00016b5d 	.word	0x00016b5d

00009944 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9944:	b570      	push	{r4, r5, r6, lr}
    9946:	4606      	mov	r6, r0
    9948:	460d      	mov	r5, r1
    994a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    994c:	2113      	movs	r1, #19
    994e:	2205      	movs	r2, #5
    9950:	f7fe fbfb 	bl	814a <evt_create>

	ep = net_buf_add(buf, len);
    9954:	2105      	movs	r1, #5
    9956:	f106 0008 	add.w	r0, r6, #8
    995a:	f009 fad7 	bl	12f0c <net_buf_simple_add>
	ep->num_handles = num_handles;
    995e:	2301      	movs	r3, #1
    9960:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9962:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9966:	f8a0 4003 	strh.w	r4, [r0, #3]
    996a:	bd70      	pop	{r4, r5, r6, pc}

0000996c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    996c:	7903      	ldrb	r3, [r0, #4]
    996e:	2b01      	cmp	r3, #1
    9970:	d006      	beq.n	9980 <hci_get_class+0x14>
    9972:	3b02      	subs	r3, #2
    9974:	b2db      	uxtb	r3, r3
    9976:	2b0a      	cmp	r3, #10
    9978:	d80a      	bhi.n	9990 <hci_get_class+0x24>
    997a:	4a07      	ldr	r2, [pc, #28]	; (9998 <hci_get_class+0x2c>)
    997c:	56d0      	ldrsb	r0, [r2, r3]
    997e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9980:	7a03      	ldrb	r3, [r0, #8]
    9982:	f003 0303 	and.w	r3, r3, #3
    9986:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9988:	bf0c      	ite	eq
    998a:	2002      	moveq	r0, #2
    998c:	2003      	movne	r0, #3
    998e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9994:	4770      	bx	lr
    9996:	bf00      	nop
    9998:	00016ac5 	.word	0x00016ac5

0000999c <hci_init>:
	dup_count = -1;
    999c:	4b0a      	ldr	r3, [pc, #40]	; (99c8 <hci_init+0x2c>)
    999e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    99a2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    99a4:	4b09      	ldr	r3, [pc, #36]	; (99cc <hci_init+0x30>)
    99a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99aa:	f641 71ff 	movw	r1, #8191	; 0x1fff
    99ae:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    99b2:	4b07      	ldr	r3, [pc, #28]	; (99d0 <hci_init+0x34>)
    99b4:	2000      	movs	r0, #0
    99b6:	2100      	movs	r1, #0
    99b8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    99bc:	4b05      	ldr	r3, [pc, #20]	; (99d4 <hci_init+0x38>)
    99be:	201f      	movs	r0, #31
    99c0:	2100      	movs	r1, #0
    99c2:	e9c3 0100 	strd	r0, r1, [r3]
    99c6:	4770      	bx	lr
    99c8:	20000860 	.word	0x20000860
    99cc:	20003d78 	.word	0x20003d78
    99d0:	200008e8 	.word	0x200008e8
    99d4:	20003d80 	.word	0x20003d80

000099d8 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    99d8:	bf20      	wfe
	__SEV();
    99da:	bf40      	sev
	__WFE();
    99dc:	bf20      	wfe
    99de:	4770      	bx	lr

000099e0 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    99e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    99e2:	4b0d      	ldr	r3, [pc, #52]	; (9a18 <pdu_len_cmp+0x38>)
{
    99e4:	b089      	sub	sp, #36	; 0x24
    99e6:	4605      	mov	r5, r0
    99e8:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    99ea:	aa01      	add	r2, sp, #4
    99ec:	f103 0718 	add.w	r7, r3, #24
    99f0:	6818      	ldr	r0, [r3, #0]
    99f2:	6859      	ldr	r1, [r3, #4]
    99f4:	4614      	mov	r4, r2
    99f6:	c403      	stmia	r4!, {r0, r1}
    99f8:	3308      	adds	r3, #8
    99fa:	42bb      	cmp	r3, r7
    99fc:	4622      	mov	r2, r4
    99fe:	d1f7      	bne.n	99f0 <pdu_len_cmp+0x10>
    9a00:	881b      	ldrh	r3, [r3, #0]
    9a02:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9a04:	ab08      	add	r3, sp, #32
    9a06:	441d      	add	r5, r3
    9a08:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9a0c:	1b83      	subs	r3, r0, r6
    9a0e:	4258      	negs	r0, r3
    9a10:	4158      	adcs	r0, r3
    9a12:	b009      	add	sp, #36	; 0x24
    9a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a16:	bf00      	nop
    9a18:	00014ba7 	.word	0x00014ba7

00009a1c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9a1c:	6008      	str	r0, [r1, #0]
    9a1e:	4770      	bx	lr

00009a20 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9a20:	b918      	cbnz	r0, 9a2a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9a22:	680b      	ldr	r3, [r1, #0]
    9a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9a28:	600b      	str	r3, [r1, #0]
    9a2a:	4770      	bx	lr

00009a2c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9a2c:	b918      	cbnz	r0, 9a36 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9a2e:	680b      	ldr	r3, [r1, #0]
    9a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9a34:	600b      	str	r3, [r1, #0]
    9a36:	4770      	bx	lr

00009a38 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	1d03      	adds	r3, r0, #4
    9a3c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9a3e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9a40:	429d      	cmp	r5, r3
    9a42:	d101      	bne.n	9a48 <chan_sel_remap+0x10>
    9a44:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9a46:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9a48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9a4c:	2200      	movs	r2, #0
    9a4e:	18a0      	adds	r0, r4, r2
    9a50:	2a08      	cmp	r2, #8
    9a52:	b2c0      	uxtb	r0, r0
    9a54:	d101      	bne.n	9a5a <chan_sel_remap+0x22>
    9a56:	4604      	mov	r4, r0
    9a58:	e7f2      	b.n	9a40 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9a5a:	f016 0f01 	tst.w	r6, #1
    9a5e:	d003      	beq.n	9a68 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    9a60:	2900      	cmp	r1, #0
    9a62:	d0f0      	beq.n	9a46 <chan_sel_remap+0xe>
				chan_index--;
    9a64:	3901      	subs	r1, #1
    9a66:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    9a68:	0876      	lsrs	r6, r6, #1
    9a6a:	3201      	adds	r2, #1
    9a6c:	e7ef      	b.n	9a4e <chan_sel_remap+0x16>
	...

00009a70 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9a70:	4b09      	ldr	r3, [pc, #36]	; (9a98 <packet_rx_acquired_count_get+0x28>)
    9a72:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	    _radio.packet_rx_last) {
    9a76:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
	if (_radio.packet_rx_acquire >=
    9a7a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    9a7c:	bf3b      	ittet	cc
    9a7e:	f893 2141 	ldrbcc.w	r2, [r3, #321]	; 0x141
    9a82:	f893 3140 	ldrbcc.w	r3, [r3, #320]	; 0x140
			_radio.packet_rx_last);
    9a86:	f893 3141 	ldrbcs.w	r3, [r3, #321]	; 0x141
			_radio.packet_rx_last +
    9a8a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    9a8c:	bf2c      	ite	cs
    9a8e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    9a90:	1a80      	subcc	r0, r0, r2
    9a92:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    9a94:	4770      	bx	lr
    9a96:	bf00      	nop
    9a98:	200008f0 	.word	0x200008f0

00009a9c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9a9c:	b508      	push	{r3, lr}
    9a9e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    9aa0:	f7ff ffe6 	bl	9a70 <packet_rx_acquired_count_get>
    9aa4:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    9aa6:	bf21      	itttt	cs
    9aa8:	4b04      	ldrcs	r3, [pc, #16]	; (9abc <packet_rx_reserve_get+0x20>)
    9aaa:	f893 2141 	ldrbcs.w	r2, [r3, #321]	; 0x141
    9aae:	f8d3 313c 	ldrcs.w	r3, [r3, #316]	; 0x13c
    9ab2:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    9ab6:	bf38      	it	cc
    9ab8:	2000      	movcc	r0, #0
}
    9aba:	bd08      	pop	{r3, pc}
    9abc:	200008f0 	.word	0x200008f0

00009ac0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    9ac0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    9ac2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    9ac6:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    9aca:	429c      	cmp	r4, r3
    9acc:	d15a      	bne.n	9b84 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    9ace:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9ad2:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9ad6:	428b      	cmp	r3, r1
    9ad8:	d154      	bne.n	9b84 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    9ada:	f990 301d 	ldrsb.w	r3, [r0, #29]
    9ade:	2b00      	cmp	r3, #0
    9ae0:	db25      	blt.n	9b2e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    9ae2:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9ae4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    9ae6:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    9aea:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    9aec:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9af0:	4351      	muls	r1, r2
					      conn->supervision_reload *
    9af2:	227d      	movs	r2, #125	; 0x7d
    9af4:	434a      	muls	r2, r1
					      125 / 1000;
    9af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9afa:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    9afe:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9b02:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    9b06:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9b08:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    9b0c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    9b0e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    9b10:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    9b14:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    9b16:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    9b1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    9b1e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    9b22:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    9b26:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    9b2a:	4618      	mov	r0, r3
    9b2c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    9b2e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9b32:	06dc      	lsls	r4, r3, #27
    9b34:	d428      	bmi.n	9b88 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    9b36:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    9b3a:	069a      	lsls	r2, r3, #26
    9b3c:	d503      	bpl.n	9b46 <conn_update_req+0x86>
		    (conn->llcp_features &
    9b3e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    9b42:	079b      	lsls	r3, r3, #30
    9b44:	d520      	bpl.n	9b88 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    9b46:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    9b48:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    9b4a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    9b4e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    9b50:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9b54:	4354      	muls	r4, r2
						conn->supervision_reload *
    9b56:	227d      	movs	r2, #125	; 0x7d
    9b58:	4362      	muls	r2, r4
						125 / 1000;
    9b5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    9b5e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    9b62:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    9b66:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    9b6a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    9b6c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    9b70:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    9b74:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    9b76:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    9b7a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    9b7e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    9b82:	e7d2      	b.n	9b2a <conn_update_req+0x6a>
		return 1;
    9b84:	2001      	movs	r0, #1
    9b86:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    9b88:	2002      	movs	r0, #2
}
    9b8a:	bd30      	pop	{r4, r5, pc}

00009b8c <packet_rx_allocate>:
{
    9b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    9b90:	4d22      	ldr	r5, [pc, #136]	; (9c1c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    9b92:	f895 4142 	ldrb.w	r4, [r5, #322]	; 0x142
    9b96:	f895 9154 	ldrb.w	r9, [r5, #340]	; 0x154
	if (acquire == _radio.packet_rx_count) {
    9b9a:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
	acquire = _radio.packet_rx_acquire + 1;
    9b9e:	3401      	adds	r4, #1
    9ba0:	4581      	cmp	r9, r0
    9ba2:	b2e4      	uxtb	r4, r4
    9ba4:	bf28      	it	cs
    9ba6:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    9ba8:	f505 77a4 	add.w	r7, r5, #328	; 0x148
		acquire = 0;
    9bac:	42a3      	cmp	r3, r4
    9bae:	bf08      	it	eq
    9bb0:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9bb2:	f505 7898 	add.w	r8, r5, #304	; 0x130
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    9bb6:	f1b9 0f00 	cmp.w	r9, #0
    9bba:	d003      	beq.n	9bc4 <packet_rx_allocate+0x38>
    9bbc:	f895 3141 	ldrb.w	r3, [r5, #321]	; 0x141
    9bc0:	429c      	cmp	r4, r3
    9bc2:	d101      	bne.n	9bc8 <packet_rx_allocate+0x3c>
    9bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    9bc8:	4638      	mov	r0, r7
    9bca:	f7fd f91c 	bl	6e06 <mem_acquire>
		if (!link) {
    9bce:	4606      	mov	r6, r0
    9bd0:	2800      	cmp	r0, #0
    9bd2:	d0f7      	beq.n	9bc4 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9bd4:	4640      	mov	r0, r8
    9bd6:	f7fd f916 	bl	6e06 <mem_acquire>
		if (!node_rx) {
    9bda:	b928      	cbnz	r0, 9be8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9bdc:	4630      	mov	r0, r6
    9bde:	4910      	ldr	r1, [pc, #64]	; (9c20 <packet_rx_allocate+0x94>)
}
    9be0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    9be4:	f7fd b929 	b.w	6e3a <mem_release>
		node_rx->hdr.onion.link = link;
    9be8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    9bea:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    9bee:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    9bf2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    9bf6:	f885 4142 	strb.w	r4, [r5, #322]	; 0x142
		if (acquire == _radio.packet_rx_count) {
    9bfa:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
		acquire = _radio.packet_rx_acquire + 1;
    9bfe:	3401      	adds	r4, #1
    9c00:	b2e4      	uxtb	r4, r4
			acquire = 0;
    9c02:	42a3      	cmp	r3, r4
    9c04:	bf08      	it	eq
    9c06:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    9c08:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    9c0c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    9c10:	3b01      	subs	r3, #1
    9c12:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
    9c16:	fa5f f989 	uxtb.w	r9, r9
    9c1a:	e7cc      	b.n	9bb6 <packet_rx_allocate+0x2a>
    9c1c:	200008f0 	.word	0x200008f0
    9c20:	20000a38 	.word	0x20000a38

00009c24 <common_init>:
{
    9c24:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    9c26:	4c3a      	ldr	r4, [pc, #232]	; (9d10 <common_init+0xec>)
    9c28:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9c2c:	2a00      	cmp	r2, #0
    9c2e:	d041      	beq.n	9cb4 <common_init+0x90>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9c30:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    9c34:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9c38:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9c3c:	f7fd f8bc 	bl	6db8 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    9c40:	4b34      	ldr	r3, [pc, #208]	; (9d14 <common_init+0xf0>)
    9c42:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
    9c46:	f8b4 1138 	ldrh.w	r1, [r4, #312]	; 0x138
    9c4a:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9c4e:	f7fd f8b3 	bl	6db8 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    9c52:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    9c56:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    9c5a:	4b2f      	ldr	r3, [pc, #188]	; (9d18 <common_init+0xf4>)
    9c5c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    9c60:	440a      	add	r2, r1
    9c62:	2108      	movs	r1, #8
    9c64:	f7fd f8a8 	bl	6db8 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    9c68:	4b2c      	ldr	r3, [pc, #176]	; (9d1c <common_init+0xf8>)
    9c6a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    9c6e:	2202      	movs	r2, #2
    9c70:	2124      	movs	r1, #36	; 0x24
    9c72:	f7fd f8a1 	bl	6db8 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    9c76:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    9c7a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9c7e:	4b28      	ldr	r3, [pc, #160]	; (9d20 <common_init+0xfc>)
    9c80:	f8b4 1168 	ldrh.w	r1, [r4, #360]	; 0x168
    9c84:	3a01      	subs	r2, #1
    9c86:	b292      	uxth	r2, r2
    9c88:	f7fd f896 	bl	6db8 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    9c8c:	4822      	ldr	r0, [pc, #136]	; (9d18 <common_init+0xf4>)
    9c8e:	f7fd f8ba 	bl	6e06 <mem_acquire>
	LL_ASSERT(link);
    9c92:	b990      	cbnz	r0, 9cba <common_init+0x96>
    9c94:	4b23      	ldr	r3, [pc, #140]	; (9d24 <common_init+0x100>)
    9c96:	9301      	str	r3, [sp, #4]
    9c98:	9300      	str	r3, [sp, #0]
    9c9a:	4b23      	ldr	r3, [pc, #140]	; (9d28 <common_init+0x104>)
    9c9c:	4a23      	ldr	r2, [pc, #140]	; (9d2c <common_init+0x108>)
    9c9e:	681c      	ldr	r4, [r3, #0]
    9ca0:	4923      	ldr	r1, [pc, #140]	; (9d30 <common_init+0x10c>)
    9ca2:	4b24      	ldr	r3, [pc, #144]	; (9d34 <common_init+0x110>)
    9ca4:	4824      	ldr	r0, [pc, #144]	; (9d38 <common_init+0x114>)
    9ca6:	47a0      	blx	r4
    9ca8:	4040      	eors	r0, r0
    9caa:	f380 8811 	msr	BASEPRI, r0
    9cae:	f04f 0004 	mov.w	r0, #4
    9cb2:	df02      	svc	2
		_radio.conn_free = NULL;
    9cb4:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    9cb8:	e7c2      	b.n	9c40 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9cba:	4a20      	ldr	r2, [pc, #128]	; (9d3c <common_init+0x118>)
    9cbc:	1f11      	subs	r1, r2, #4
    9cbe:	f7fd f8f9 	bl	6eb4 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    9cc2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    9cc6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9cca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    9cce:	231f      	movs	r3, #31
    9cd0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    9cd4:	2325      	movs	r3, #37	; 0x25
    9cd6:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9cda:	231b      	movs	r3, #27
    9cdc:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9ce0:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    9ce4:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    9ce6:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_tx |= BIT(1);
    9cea:	2303      	movs	r3, #3
	_radio.data_chan_map[0] = 0xFF;
    9cec:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    9cf0:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    9cf4:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    9cf8:	f884 011d 	strb.w	r0, [r4, #285]	; 0x11d
	_radio.default_phy_tx |= BIT(1);
    9cfc:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
	_radio.default_phy_rx |= BIT(1);
    9d00:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
}
    9d04:	b002      	add	sp, #8
    9d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    9d0a:	f7ff bf3f 	b.w	9b8c <packet_rx_allocate>
    9d0e:	bf00      	nop
    9d10:	200008f0 	.word	0x200008f0
    9d14:	20000a20 	.word	0x20000a20
    9d18:	20000a38 	.word	0x20000a38
    9d1c:	20000a4c 	.word	0x20000a4c
    9d20:	20000a54 	.word	0x20000a54
    9d24:	00014c55 	.word	0x00014c55
    9d28:	20003aa4 	.word	0x20003aa4
    9d2c:	000159c3 	.word	0x000159c3
    9d30:	00015a12 	.word	0x00015a12
    9d34:	00016e16 	.word	0x00016e16
    9d38:	00017293 	.word	0x00017293
    9d3c:	20000a40 	.word	0x20000a40

00009d40 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9d44:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    9d46:	4294      	cmp	r4, r2
{
    9d48:	4681      	mov	r9, r0
    9d4a:	460f      	mov	r7, r1
    9d4c:	4690      	mov	r8, r2
	if (_first == last) {
    9d4e:	d03d      	beq.n	9dcc <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    9d50:	4e1f      	ldr	r6, [pc, #124]	; (9dd0 <tx_cmplt_get+0x90>)
    9d52:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
    9d56:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    9d5a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    9d5c:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    9d5e:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9d62:	f506 7ab2 	add.w	sl, r6, #356	; 0x164
		if (*handle != _radio.pkt_release[_first].handle) {
    9d66:	b222      	sxth	r2, r4
    9d68:	f8d6 0170 	ldr.w	r0, [r6, #368]	; 0x170
    9d6c:	f8b9 e000 	ldrh.w	lr, [r9]
    9d70:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9d74:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    9d78:	4596      	cmp	lr, r2
    9d7a:	d120      	bne.n	9dbe <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    9d7c:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    9d7e:	2801      	cmp	r0, #1
    9d80:	f020 0303 	bic.w	r3, r0, #3
    9d84:	d90a      	bls.n	9d9c <tx_cmplt_get+0x5c>
    9d86:	b1f3      	cbz	r3, 9dc6 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    9d88:	1d02      	adds	r2, r0, #4
    9d8a:	d01c      	beq.n	9dc6 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9d8c:	7942      	ldrb	r2, [r0, #5]
    9d8e:	b1d2      	cbz	r2, 9dc6 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    9d90:	7902      	ldrb	r2, [r0, #4]
    9d92:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    9d96:	3a01      	subs	r2, #1
    9d98:	2a01      	cmp	r2, #1
    9d9a:	d814      	bhi.n	9dc6 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    9d9c:	2201      	movs	r2, #1
			cmplt++;
    9d9e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    9da0:	604a      	str	r2, [r1, #4]
			cmplt++;
    9da2:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    9da4:	b113      	cbz	r3, 9dac <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    9da6:	4651      	mov	r1, sl
    9da8:	f7fd f847 	bl	6e3a <mem_release>
		}

		_first = _first + 1;
    9dac:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    9dae:	f896 2174 	ldrb.w	r2, [r6, #372]	; 0x174
		_first = _first + 1;
    9db2:	b2e4      	uxtb	r4, r4
			_first = 0;
    9db4:	42a2      	cmp	r2, r4
    9db6:	bf08      	it	eq
    9db8:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    9dba:	4544      	cmp	r4, r8
    9dbc:	d1d3      	bne.n	9d66 <tx_cmplt_get+0x26>

	*first = _first;
    9dbe:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    9dc0:	4628      	mov	r0, r5
    9dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    9dc6:	f8c1 b004 	str.w	fp, [r1, #4]
    9dca:	e7eb      	b.n	9da4 <tx_cmplt_get+0x64>
		return 0;
    9dcc:	2500      	movs	r5, #0
    9dce:	e7f7      	b.n	9dc0 <tx_cmplt_get+0x80>
    9dd0:	200008f0 	.word	0x200008f0

00009dd4 <connection_get>:
{
    9dd4:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    9dd6:	4b09      	ldr	r3, [pc, #36]	; (9dfc <connection_get+0x28>)
    9dd8:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    9ddc:	4282      	cmp	r2, r0
{
    9dde:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    9de0:	d90a      	bls.n	9df8 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9de2:	4602      	mov	r2, r0
    9de4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    9de8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    9dec:	f7fd f840 	bl	6e70 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    9df0:	b110      	cbz	r0, 9df8 <connection_get+0x24>
    9df2:	8c03      	ldrh	r3, [r0, #32]
    9df4:	42a3      	cmp	r3, r4
    9df6:	d000      	beq.n	9dfa <connection_get+0x26>
	return 0;
    9df8:	2000      	movs	r0, #0
}
    9dfa:	bd10      	pop	{r4, pc}
    9dfc:	200008f0 	.word	0x200008f0

00009e00 <role_disable>:
{
    9e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e04:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9e06:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    9e08:	2805      	cmp	r0, #5
{
    9e0a:	4605      	mov	r5, r0
    9e0c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9e0e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    9e10:	d00c      	beq.n	9e2c <role_disable+0x2c>
    9e12:	2806      	cmp	r0, #6
    9e14:	d043      	beq.n	9e9e <role_disable+0x9e>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9e16:	d948      	bls.n	9eaa <role_disable+0xaa>
			conn_handle = ticker_id_primary -
    9e18:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    9e1a:	b280      	uxth	r0, r0
    9e1c:	f7ff ffda 	bl	9dd4 <connection_get>
			if (!conn) {
    9e20:	2800      	cmp	r0, #0
    9e22:	f000 8160 	beq.w	a0e6 <role_disable+0x2e6>
			ticks_active_to_start =
    9e26:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    9e2a:	e00f      	b.n	9e4c <role_disable+0x4c>
		ticks_xtal_to_start =
    9e2c:	4b96      	ldr	r3, [pc, #600]	; (a088 <role_disable+0x288>)
    9e2e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    9e30:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9e34:	ab02      	add	r3, sp, #8
    9e36:	9300      	str	r3, [sp, #0]
    9e38:	460a      	mov	r2, r1
    9e3a:	4b94      	ldr	r3, [pc, #592]	; (a08c <role_disable+0x28c>)
    9e3c:	2103      	movs	r1, #3
    9e3e:	2000      	movs	r0, #0
    9e40:	f7fd ff0a 	bl	7c58 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9e44:	2802      	cmp	r0, #2
    9e46:	d013      	beq.n	9e70 <role_disable+0x70>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9e48:	9b02      	ldr	r3, [sp, #8]
    9e4a:	b9ab      	cbnz	r3, 9e78 <role_disable+0x78>
	LL_ASSERT(!_radio.ticker_id_stop);
    9e4c:	4c8e      	ldr	r4, [pc, #568]	; (a088 <role_disable+0x288>)
    9e4e:	7ca3      	ldrb	r3, [r4, #18]
    9e50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9e54:	2b00      	cmp	r3, #0
    9e56:	d032      	beq.n	9ebe <role_disable+0xbe>
    9e58:	4b8d      	ldr	r3, [pc, #564]	; (a090 <role_disable+0x290>)
    9e5a:	9301      	str	r3, [sp, #4]
    9e5c:	9300      	str	r3, [sp, #0]
    9e5e:	4b8d      	ldr	r3, [pc, #564]	; (a094 <role_disable+0x294>)
    9e60:	4a8d      	ldr	r2, [pc, #564]	; (a098 <role_disable+0x298>)
    9e62:	681c      	ldr	r4, [r3, #0]
    9e64:	498d      	ldr	r1, [pc, #564]	; (a09c <role_disable+0x29c>)
    9e66:	4b8e      	ldr	r3, [pc, #568]	; (a0a0 <role_disable+0x2a0>)
    9e68:	488e      	ldr	r0, [pc, #568]	; (a0a4 <role_disable+0x2a4>)
    9e6a:	e011      	b.n	9e90 <role_disable+0x90>
				cpu_sleep();
    9e6c:	f7ff fdb4 	bl	99d8 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9e70:	9b02      	ldr	r3, [sp, #8]
    9e72:	2b02      	cmp	r3, #2
    9e74:	d0fa      	beq.n	9e6c <role_disable+0x6c>
    9e76:	e7e7      	b.n	9e48 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9e78:	9b02      	ldr	r3, [sp, #8]
    9e7a:	2b01      	cmp	r3, #1
    9e7c:	d0e6      	beq.n	9e4c <role_disable+0x4c>
    9e7e:	4b84      	ldr	r3, [pc, #528]	; (a090 <role_disable+0x290>)
    9e80:	9301      	str	r3, [sp, #4]
    9e82:	9300      	str	r3, [sp, #0]
    9e84:	4b83      	ldr	r3, [pc, #524]	; (a094 <role_disable+0x294>)
    9e86:	4a84      	ldr	r2, [pc, #528]	; (a098 <role_disable+0x298>)
    9e88:	681c      	ldr	r4, [r3, #0]
    9e8a:	4984      	ldr	r1, [pc, #528]	; (a09c <role_disable+0x29c>)
    9e8c:	4b84      	ldr	r3, [pc, #528]	; (a0a0 <role_disable+0x2a0>)
    9e8e:	4886      	ldr	r0, [pc, #536]	; (a0a8 <role_disable+0x2a8>)
			LL_ASSERT(0);
    9e90:	47a0      	blx	r4
    9e92:	4040      	eors	r0, r0
    9e94:	f380 8811 	msr	BASEPRI, r0
    9e98:	f04f 0004 	mov.w	r0, #4
    9e9c:	df02      	svc	2
		ticks_xtal_to_start =
    9e9e:	4b7a      	ldr	r3, [pc, #488]	; (a088 <role_disable+0x288>)
    9ea0:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    9ea4:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    9ea8:	e7d0      	b.n	9e4c <role_disable+0x4c>
			LL_ASSERT(0);
    9eaa:	4b79      	ldr	r3, [pc, #484]	; (a090 <role_disable+0x290>)
    9eac:	9301      	str	r3, [sp, #4]
    9eae:	9300      	str	r3, [sp, #0]
    9eb0:	4b78      	ldr	r3, [pc, #480]	; (a094 <role_disable+0x294>)
    9eb2:	681c      	ldr	r4, [r3, #0]
    9eb4:	4b7a      	ldr	r3, [pc, #488]	; (a0a0 <role_disable+0x2a0>)
    9eb6:	4a78      	ldr	r2, [pc, #480]	; (a098 <role_disable+0x298>)
    9eb8:	4978      	ldr	r1, [pc, #480]	; (a09c <role_disable+0x29c>)
    9eba:	487c      	ldr	r0, [pc, #496]	; (a0ac <role_disable+0x2ac>)
    9ebc:	e7e8      	b.n	9e90 <role_disable+0x90>
	ret_cb = TICKER_STATUS_BUSY;
    9ebe:	ab06      	add	r3, sp, #24
    9ec0:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    9ec2:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    9ec4:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ec8:	2103      	movs	r1, #3
    9eca:	9300      	str	r3, [sp, #0]
    9ecc:	462a      	mov	r2, r5
    9ece:	4b6f      	ldr	r3, [pc, #444]	; (a08c <role_disable+0x28c>)
    9ed0:	f7fd fec2 	bl	7c58 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9ed4:	2802      	cmp	r0, #2
    9ed6:	d027      	beq.n	9f28 <role_disable+0x128>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9ed8:	9b02      	ldr	r3, [sp, #8]
    9eda:	2b00      	cmp	r3, #0
    9edc:	d16f      	bne.n	9fbe <role_disable+0x1be>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9ede:	7c23      	ldrb	r3, [r4, #16]
    9ee0:	429d      	cmp	r5, r3
    9ee2:	d002      	beq.n	9eea <role_disable+0xea>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    9ee4:	7c63      	ldrb	r3, [r4, #17]
    9ee6:	429d      	cmp	r5, r3
    9ee8:	d165      	bne.n	9fb6 <role_disable+0x1b6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    9eea:	ab06      	add	r3, sp, #24
    9eec:	2202      	movs	r2, #2
    9eee:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ef2:	2200      	movs	r2, #0
    9ef4:	9300      	str	r3, [sp, #0]
    9ef6:	2103      	movs	r1, #3
    9ef8:	4b64      	ldr	r3, [pc, #400]	; (a08c <role_disable+0x28c>)
    9efa:	4610      	mov	r0, r2
    9efc:	f7fd feac 	bl	7c58 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    9f00:	2802      	cmp	r0, #2
    9f02:	d11f      	bne.n	9f44 <role_disable+0x144>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9f04:	2201      	movs	r2, #1
    9f06:	4611      	mov	r1, r2
    9f08:	2003      	movs	r0, #3
    9f0a:	f7fd f81f 	bl	6f4c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    9f0e:	9b03      	ldr	r3, [sp, #12]
    9f10:	2b02      	cmp	r3, #2
    9f12:	d117      	bne.n	9f44 <role_disable+0x144>
    9f14:	4b5e      	ldr	r3, [pc, #376]	; (a090 <role_disable+0x290>)
    9f16:	9301      	str	r3, [sp, #4]
    9f18:	9300      	str	r3, [sp, #0]
    9f1a:	4b5e      	ldr	r3, [pc, #376]	; (a094 <role_disable+0x294>)
    9f1c:	4a5e      	ldr	r2, [pc, #376]	; (a098 <role_disable+0x298>)
    9f1e:	681c      	ldr	r4, [r3, #0]
    9f20:	495e      	ldr	r1, [pc, #376]	; (a09c <role_disable+0x29c>)
    9f22:	4b63      	ldr	r3, [pc, #396]	; (a0b0 <role_disable+0x2b0>)
    9f24:	4863      	ldr	r0, [pc, #396]	; (a0b4 <role_disable+0x2b4>)
    9f26:	e7b3      	b.n	9e90 <role_disable+0x90>
		if (_radio.ticker_id_event == ticker_id_primary) {
    9f28:	7c63      	ldrb	r3, [r4, #17]
    9f2a:	429d      	cmp	r5, r3
    9f2c:	d104      	bne.n	9f38 <role_disable+0x138>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9f2e:	2201      	movs	r2, #1
    9f30:	4611      	mov	r1, r2
    9f32:	2003      	movs	r0, #3
    9f34:	f7fd f80a 	bl	6f4c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9f38:	9b02      	ldr	r3, [sp, #8]
    9f3a:	2b02      	cmp	r3, #2
    9f3c:	d1cc      	bne.n	9ed8 <role_disable+0xd8>
			cpu_sleep();
    9f3e:	f7ff fd4b 	bl	99d8 <cpu_sleep>
    9f42:	e7f9      	b.n	9f38 <role_disable+0x138>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    9f44:	9803      	ldr	r0, [sp, #12]
    9f46:	2800      	cmp	r0, #0
    9f48:	d157      	bne.n	9ffa <role_disable+0x1fa>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    9f4a:	2302      	movs	r3, #2
    9f4c:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    9f4e:	7c23      	ldrb	r3, [r4, #16]
    9f50:	b94b      	cbnz	r3, 9f66 <role_disable+0x166>
    9f52:	4b4f      	ldr	r3, [pc, #316]	; (a090 <role_disable+0x290>)
    9f54:	9301      	str	r3, [sp, #4]
    9f56:	9300      	str	r3, [sp, #0]
    9f58:	4b4e      	ldr	r3, [pc, #312]	; (a094 <role_disable+0x294>)
    9f5a:	4a4f      	ldr	r2, [pc, #316]	; (a098 <role_disable+0x298>)
    9f5c:	681c      	ldr	r4, [r3, #0]
    9f5e:	494f      	ldr	r1, [pc, #316]	; (a09c <role_disable+0x29c>)
    9f60:	4b53      	ldr	r3, [pc, #332]	; (a0b0 <role_disable+0x2b0>)
    9f62:	4855      	ldr	r0, [pc, #340]	; (a0b8 <role_disable+0x2b8>)
    9f64:	e794      	b.n	9e90 <role_disable+0x90>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f66:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    9f68:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f6a:	2201      	movs	r2, #1
    9f6c:	9300      	str	r3, [sp, #0]
    9f6e:	2103      	movs	r1, #3
    9f70:	4b46      	ldr	r3, [pc, #280]	; (a08c <role_disable+0x28c>)
    9f72:	f7fd fe71 	bl	7c58 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    9f76:	2802      	cmp	r0, #2
    9f78:	d111      	bne.n	9f9e <role_disable+0x19e>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9f7a:	2201      	movs	r2, #1
    9f7c:	4611      	mov	r1, r2
    9f7e:	2003      	movs	r0, #3
    9f80:	f7fc ffe4 	bl	6f4c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    9f84:	9b04      	ldr	r3, [sp, #16]
    9f86:	2b02      	cmp	r3, #2
    9f88:	d109      	bne.n	9f9e <role_disable+0x19e>
    9f8a:	4b41      	ldr	r3, [pc, #260]	; (a090 <role_disable+0x290>)
    9f8c:	9301      	str	r3, [sp, #4]
    9f8e:	9300      	str	r3, [sp, #0]
    9f90:	4b40      	ldr	r3, [pc, #256]	; (a094 <role_disable+0x294>)
    9f92:	4a41      	ldr	r2, [pc, #260]	; (a098 <role_disable+0x298>)
    9f94:	681c      	ldr	r4, [r3, #0]
    9f96:	4941      	ldr	r1, [pc, #260]	; (a09c <role_disable+0x29c>)
    9f98:	4b45      	ldr	r3, [pc, #276]	; (a0b0 <role_disable+0x2b0>)
    9f9a:	4848      	ldr	r0, [pc, #288]	; (a0bc <role_disable+0x2bc>)
    9f9c:	e778      	b.n	9e90 <role_disable+0x90>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    9f9e:	9a04      	ldr	r2, [sp, #16]
    9fa0:	b99a      	cbnz	r2, 9fca <role_disable+0x1ca>
			ticks_xtal_to_start &= ~XON_BITMASK;
    9fa2:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    9fa6:	45b0      	cmp	r8, r6
    9fa8:	d925      	bls.n	9ff6 <role_disable+0x1f6>
				ret = mayfly_enqueue(
    9faa:	4b45      	ldr	r3, [pc, #276]	; (a0c0 <role_disable+0x2c0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9fac:	4611      	mov	r1, r2
    9fae:	2003      	movs	r0, #3
    9fb0:	f7fc fff4 	bl	6f9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    9fb4:	b9a8      	cbnz	r0, 9fe2 <role_disable+0x1e2>
	if (!_radio.ticker_id_stop) {
    9fb6:	7ca3      	ldrb	r3, [r4, #18]
    9fb8:	b90b      	cbnz	r3, 9fbe <role_disable+0x1be>
		ret_cb = TICKER_STATUS_FAILURE;
    9fba:	2301      	movs	r3, #1
    9fbc:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    9fbe:	2300      	movs	r3, #0
    9fc0:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    9fc2:	9802      	ldr	r0, [sp, #8]
}
    9fc4:	b006      	add	sp, #24
    9fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    9fca:	9b04      	ldr	r3, [sp, #16]
    9fcc:	2b01      	cmp	r3, #1
    9fce:	f040 8083 	bne.w	a0d8 <role_disable+0x2d8>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9fd2:	2200      	movs	r2, #0
    9fd4:	4611      	mov	r1, r2
    9fd6:	4b3a      	ldr	r3, [pc, #232]	; (a0c0 <role_disable+0x2c0>)
    9fd8:	2003      	movs	r0, #3
    9fda:	f7fc ffdf 	bl	6f9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    9fde:	4602      	mov	r2, r0
    9fe0:	b148      	cbz	r0, 9ff6 <role_disable+0x1f6>
			LL_ASSERT(!ret);
    9fe2:	4b2b      	ldr	r3, [pc, #172]	; (a090 <role_disable+0x290>)
    9fe4:	9301      	str	r3, [sp, #4]
    9fe6:	9300      	str	r3, [sp, #0]
    9fe8:	4b2a      	ldr	r3, [pc, #168]	; (a094 <role_disable+0x294>)
    9fea:	4a2b      	ldr	r2, [pc, #172]	; (a098 <role_disable+0x298>)
    9fec:	681c      	ldr	r4, [r3, #0]
    9fee:	492b      	ldr	r1, [pc, #172]	; (a09c <role_disable+0x29c>)
    9ff0:	4b2f      	ldr	r3, [pc, #188]	; (a0b0 <role_disable+0x2b0>)
    9ff2:	4834      	ldr	r0, [pc, #208]	; (a0c4 <role_disable+0x2c4>)
    9ff4:	e74c      	b.n	9e90 <role_disable+0x90>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9ff6:	4b34      	ldr	r3, [pc, #208]	; (a0c8 <role_disable+0x2c8>)
    9ff8:	e7d8      	b.n	9fac <role_disable+0x1ac>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    9ffa:	9d03      	ldr	r5, [sp, #12]
    9ffc:	2d01      	cmp	r5, #1
    9ffe:	d16b      	bne.n	a0d8 <role_disable+0x2d8>
		if (ticker_id_stop != TICKER_NULL) {
    a000:	2fff      	cmp	r7, #255	; 0xff
    a002:	d02d      	beq.n	a060 <role_disable+0x260>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a004:	ab06      	add	r3, sp, #24
    a006:	2202      	movs	r2, #2
    a008:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a00c:	2103      	movs	r1, #3
    a00e:	9300      	str	r3, [sp, #0]
    a010:	463a      	mov	r2, r7
    a012:	4b1e      	ldr	r3, [pc, #120]	; (a08c <role_disable+0x28c>)
    a014:	2000      	movs	r0, #0
    a016:	f7fd fe1f 	bl	7c58 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a01a:	2802      	cmp	r0, #2
    a01c:	d111      	bne.n	a042 <role_disable+0x242>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a01e:	462a      	mov	r2, r5
    a020:	4629      	mov	r1, r5
    a022:	2003      	movs	r0, #3
    a024:	f7fc ff92 	bl	6f4c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a028:	9b05      	ldr	r3, [sp, #20]
    a02a:	2b02      	cmp	r3, #2
    a02c:	d109      	bne.n	a042 <role_disable+0x242>
    a02e:	4b18      	ldr	r3, [pc, #96]	; (a090 <role_disable+0x290>)
    a030:	9301      	str	r3, [sp, #4]
    a032:	9300      	str	r3, [sp, #0]
    a034:	4b17      	ldr	r3, [pc, #92]	; (a094 <role_disable+0x294>)
    a036:	4a18      	ldr	r2, [pc, #96]	; (a098 <role_disable+0x298>)
    a038:	681c      	ldr	r4, [r3, #0]
    a03a:	4918      	ldr	r1, [pc, #96]	; (a09c <role_disable+0x29c>)
    a03c:	4b1c      	ldr	r3, [pc, #112]	; (a0b0 <role_disable+0x2b0>)
    a03e:	4823      	ldr	r0, [pc, #140]	; (a0cc <role_disable+0x2cc>)
    a040:	e726      	b.n	9e90 <role_disable+0x90>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a042:	9b05      	ldr	r3, [sp, #20]
    a044:	b163      	cbz	r3, a060 <role_disable+0x260>
    a046:	9b05      	ldr	r3, [sp, #20]
    a048:	2b01      	cmp	r3, #1
    a04a:	d009      	beq.n	a060 <role_disable+0x260>
    a04c:	4b10      	ldr	r3, [pc, #64]	; (a090 <role_disable+0x290>)
    a04e:	9301      	str	r3, [sp, #4]
    a050:	9300      	str	r3, [sp, #0]
    a052:	4b10      	ldr	r3, [pc, #64]	; (a094 <role_disable+0x294>)
    a054:	4a10      	ldr	r2, [pc, #64]	; (a098 <role_disable+0x298>)
    a056:	681c      	ldr	r4, [r3, #0]
    a058:	4910      	ldr	r1, [pc, #64]	; (a09c <role_disable+0x29c>)
    a05a:	4b15      	ldr	r3, [pc, #84]	; (a0b0 <role_disable+0x2b0>)
    a05c:	481c      	ldr	r0, [pc, #112]	; (a0d0 <role_disable+0x2d0>)
    a05e:	e717      	b.n	9e90 <role_disable+0x90>
		if (_radio.role != ROLE_NONE) {
    a060:	7ce3      	ldrb	r3, [r4, #19]
    a062:	2b00      	cmp	r3, #0
    a064:	d0a7      	beq.n	9fb6 <role_disable+0x1b6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a066:	4b1b      	ldr	r3, [pc, #108]	; (a0d4 <role_disable+0x2d4>)
    a068:	2204      	movs	r2, #4
    a06a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a06c:	2200      	movs	r2, #0
    a06e:	4611      	mov	r1, r2
    a070:	2003      	movs	r0, #3
    a072:	f7fc ff93 	bl	6f9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    a076:	2800      	cmp	r0, #0
    a078:	d1b3      	bne.n	9fe2 <role_disable+0x1e2>
			while (_radio.role != ROLE_NONE) {
    a07a:	7ce3      	ldrb	r3, [r4, #19]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d09a      	beq.n	9fb6 <role_disable+0x1b6>
				cpu_sleep();
    a080:	f7ff fcaa 	bl	99d8 <cpu_sleep>
    a084:	e7f9      	b.n	a07a <role_disable+0x27a>
    a086:	bf00      	nop
    a088:	200008f0 	.word	0x200008f0
    a08c:	00009a1d 	.word	0x00009a1d
    a090:	00014c55 	.word	0x00014c55
    a094:	20003aa4 	.word	0x20003aa4
    a098:	000159c3 	.word	0x000159c3
    a09c:	00015a12 	.word	0x00015a12
    a0a0:	00017238 	.word	0x00017238
    a0a4:	00017baa 	.word	0x00017baa
    a0a8:	00017b6a 	.word	0x00017b6a
    a0ac:	00015962 	.word	0x00015962
    a0b0:	00017224 	.word	0x00017224
    a0b4:	00017be2 	.word	0x00017be2
    a0b8:	00017c13 	.word	0x00017c13
    a0bc:	00017c4d 	.word	0x00017c4d
    a0c0:	20003da8 	.word	0x20003da8
    a0c4:	00017c7d 	.word	0x00017c7d
    a0c8:	20003e48 	.word	0x20003e48
    a0cc:	00017ca3 	.word	0x00017ca3
    a0d0:	00017cd5 	.word	0x00017cd5
    a0d4:	20003dc8 	.word	0x20003dc8
		LL_ASSERT(0);
    a0d8:	4b04      	ldr	r3, [pc, #16]	; (a0ec <role_disable+0x2ec>)
    a0da:	9301      	str	r3, [sp, #4]
    a0dc:	9300      	str	r3, [sp, #0]
    a0de:	4b04      	ldr	r3, [pc, #16]	; (a0f0 <role_disable+0x2f0>)
    a0e0:	681c      	ldr	r4, [r3, #0]
    a0e2:	4b04      	ldr	r3, [pc, #16]	; (a0f4 <role_disable+0x2f4>)
    a0e4:	e6e7      	b.n	9eb6 <role_disable+0xb6>
				return 1;
    a0e6:	2001      	movs	r0, #1
    a0e8:	e76c      	b.n	9fc4 <role_disable+0x1c4>
    a0ea:	bf00      	nop
    a0ec:	00014c55 	.word	0x00014c55
    a0f0:	20003aa4 	.word	0x20003aa4
    a0f4:	00017224 	.word	0x00017224

0000a0f8 <mayfly_xtal_retain>:
{
    a0f8:	b513      	push	{r0, r1, r4, lr}
    a0fa:	4b20      	ldr	r3, [pc, #128]	; (a17c <mayfly_xtal_retain+0x84>)
    a0fc:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    a0fe:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    a100:	b319      	cbz	r1, a14a <mayfly_xtal_retain+0x52>
		if (!s_xtal_retained) {
    a102:	2a00      	cmp	r2, #0
    a104:	d137      	bne.n	a176 <mayfly_xtal_retain+0x7e>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    a106:	2801      	cmp	r0, #1
    a108:	d00f      	beq.n	a12a <mayfly_xtal_retain+0x32>
    a10a:	4b1d      	ldr	r3, [pc, #116]	; (a180 <mayfly_xtal_retain+0x88>)
    a10c:	9301      	str	r3, [sp, #4]
    a10e:	9300      	str	r3, [sp, #0]
    a110:	4b1c      	ldr	r3, [pc, #112]	; (a184 <mayfly_xtal_retain+0x8c>)
    a112:	4a1d      	ldr	r2, [pc, #116]	; (a188 <mayfly_xtal_retain+0x90>)
    a114:	681c      	ldr	r4, [r3, #0]
    a116:	491d      	ldr	r1, [pc, #116]	; (a18c <mayfly_xtal_retain+0x94>)
    a118:	4b1d      	ldr	r3, [pc, #116]	; (a190 <mayfly_xtal_retain+0x98>)
    a11a:	481e      	ldr	r0, [pc, #120]	; (a194 <mayfly_xtal_retain+0x9c>)
			LL_ASSERT(!retval);
    a11c:	47a0      	blx	r4
    a11e:	4040      	eors	r0, r0
    a120:	f380 8811 	msr	BASEPRI, r0
    a124:	f04f 0004 	mov.w	r0, #4
    a128:	df02      	svc	2
			s_xtal_retained = 1;
    a12a:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    a12c:	4b1a      	ldr	r3, [pc, #104]	; (a198 <mayfly_xtal_retain+0xa0>)
    a12e:	4611      	mov	r1, r2
    a130:	f7fc ff34 	bl	6f9c <mayfly_enqueue>
			LL_ASSERT(!retval);
    a134:	b1f8      	cbz	r0, a176 <mayfly_xtal_retain+0x7e>
    a136:	4b12      	ldr	r3, [pc, #72]	; (a180 <mayfly_xtal_retain+0x88>)
    a138:	9301      	str	r3, [sp, #4]
    a13a:	9300      	str	r3, [sp, #0]
    a13c:	4b11      	ldr	r3, [pc, #68]	; (a184 <mayfly_xtal_retain+0x8c>)
    a13e:	4a12      	ldr	r2, [pc, #72]	; (a188 <mayfly_xtal_retain+0x90>)
    a140:	681c      	ldr	r4, [r3, #0]
    a142:	4912      	ldr	r1, [pc, #72]	; (a18c <mayfly_xtal_retain+0x94>)
    a144:	4b12      	ldr	r3, [pc, #72]	; (a190 <mayfly_xtal_retain+0x98>)
    a146:	4815      	ldr	r0, [pc, #84]	; (a19c <mayfly_xtal_retain+0xa4>)
    a148:	e7e8      	b.n	a11c <mayfly_xtal_retain+0x24>
		if (s_xtal_retained) {
    a14a:	b1a2      	cbz	r2, a176 <mayfly_xtal_retain+0x7e>
			s_xtal_retained = 0;
    a14c:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    a14e:	b180      	cbz	r0, a172 <mayfly_xtal_retain+0x7a>
    a150:	2801      	cmp	r0, #1
    a152:	d104      	bne.n	a15e <mayfly_xtal_retain+0x66>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    a154:	4b12      	ldr	r3, [pc, #72]	; (a1a0 <mayfly_xtal_retain+0xa8>)
			retval = mayfly_enqueue(caller_id,
    a156:	2200      	movs	r2, #0
    a158:	4611      	mov	r1, r2
    a15a:	4620      	mov	r0, r4
    a15c:	e7e8      	b.n	a130 <mayfly_xtal_retain+0x38>
				LL_ASSERT(0);
    a15e:	4b08      	ldr	r3, [pc, #32]	; (a180 <mayfly_xtal_retain+0x88>)
    a160:	9301      	str	r3, [sp, #4]
    a162:	9300      	str	r3, [sp, #0]
    a164:	4b07      	ldr	r3, [pc, #28]	; (a184 <mayfly_xtal_retain+0x8c>)
    a166:	4a08      	ldr	r2, [pc, #32]	; (a188 <mayfly_xtal_retain+0x90>)
    a168:	681c      	ldr	r4, [r3, #0]
    a16a:	4908      	ldr	r1, [pc, #32]	; (a18c <mayfly_xtal_retain+0x94>)
    a16c:	4b08      	ldr	r3, [pc, #32]	; (a190 <mayfly_xtal_retain+0x98>)
    a16e:	480d      	ldr	r0, [pc, #52]	; (a1a4 <mayfly_xtal_retain+0xac>)
    a170:	e7d4      	b.n	a11c <mayfly_xtal_retain+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    a172:	4b0d      	ldr	r3, [pc, #52]	; (a1a8 <mayfly_xtal_retain+0xb0>)
    a174:	e7ef      	b.n	a156 <mayfly_xtal_retain+0x5e>
}
    a176:	b002      	add	sp, #8
    a178:	bd10      	pop	{r4, pc}
    a17a:	bf00      	nop
    a17c:	20000af0 	.word	0x20000af0
    a180:	00014c55 	.word	0x00014c55
    a184:	20003aa4 	.word	0x20003aa4
    a188:	000159c3 	.word	0x000159c3
    a18c:	00015a12 	.word	0x00015a12
    a190:	00016fdd 	.word	0x00016fdd
    a194:	000179c3 	.word	0x000179c3
    a198:	20003e18 	.word	0x20003e18
    a19c:	000179f3 	.word	0x000179f3
    a1a0:	20003e38 	.word	0x20003e38
    a1a4:	00015962 	.word	0x00015962
    a1a8:	20003e28 	.word	0x20003e28

0000a1ac <rx_packet_set>:
{
    a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a1ae:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a1b2:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a1b4:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a1b6:	f004 0407 	and.w	r4, r4, #7
{
    a1ba:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a1bc:	4620      	mov	r0, r4
    a1be:	2100      	movs	r1, #0
    a1c0:	f008 f910 	bl	123e4 <radio_phy_set>
	if (conn->enc_rx) {
    a1c4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a1c8:	f013 0f10 	tst.w	r3, #16
    a1cc:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a1d0:	d010      	beq.n	a1f4 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a1d2:	1d29      	adds	r1, r5, #4
    a1d4:	f042 0201 	orr.w	r2, r2, #1
    a1d8:	b2c9      	uxtb	r1, r1
    a1da:	2008      	movs	r0, #8
    a1dc:	f008 f948 	bl	12470 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a1e0:	463a      	mov	r2, r7
    a1e2:	4621      	mov	r1, r4
    a1e4:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a1e8:	f008 fb86 	bl	128f8 <radio_ccm_rx_pkt_set>
}
    a1ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a1f0:	f008 b96c 	b.w	124cc <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a1f4:	2008      	movs	r0, #8
    a1f6:	f042 0201 	orr.w	r2, r2, #1
    a1fa:	b2e9      	uxtb	r1, r5
    a1fc:	f008 f938 	bl	12470 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a200:	4638      	mov	r0, r7
    a202:	e7f3      	b.n	a1ec <rx_packet_set+0x40>

0000a204 <tx_packet_set>:
{
    a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a206:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a208:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a20c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a20e:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a212:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a214:	09c9      	lsrs	r1, r1, #7
    a216:	4620      	mov	r0, r4
    a218:	f008 f8e4 	bl	123e4 <radio_phy_set>
	if (conn->enc_tx) {
    a21c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a220:	f013 0f20 	tst.w	r3, #32
    a224:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a228:	d00f      	beq.n	a24a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a22a:	1d29      	adds	r1, r5, #4
    a22c:	b2c9      	uxtb	r1, r1
    a22e:	2008      	movs	r0, #8
    a230:	f042 0201 	orr.w	r2, r2, #1
    a234:	f008 f91c 	bl	12470 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a238:	4639      	mov	r1, r7
    a23a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a23e:	f008 fb97 	bl	12970 <radio_ccm_tx_pkt_set>
}
    a242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a246:	f008 b947 	b.w	124d8 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a24a:	2008      	movs	r0, #8
    a24c:	f042 0201 	orr.w	r2, r2, #1
    a250:	b2e9      	uxtb	r1, r5
    a252:	f008 f90d 	bl	12470 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a256:	4638      	mov	r0, r7
    a258:	e7f3      	b.n	a242 <tx_packet_set+0x3e>
    a25a:	0000      	movs	r0, r0
    a25c:	0000      	movs	r0, r0
	...

0000a260 <sched_free_win_offset_calc>:
{
    a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a264:	b08f      	sub	sp, #60	; 0x3c
    a266:	4692      	mov	sl, r2
    a268:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a26a:	6803      	ldr	r3, [r0, #0]
{
    a26c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a26e:	2b00      	cmp	r3, #0
{
    a270:	4680      	mov	r8, r0
    a272:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a274:	da3b      	bge.n	a2ee <sched_free_win_offset_calc+0x8e>
		u32_t ticks_prepare_to_start =
    a276:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    a278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    a27c:	4291      	cmp	r1, r2
    a27e:	bf2c      	ite	cs
    a280:	1a5a      	subcs	r2, r3, r1
    a282:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    a284:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a286:	f8d8 200c 	ldr.w	r2, [r8, #12]
    a28a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a28c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a28e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    a290:	18d3      	adds	r3, r2, r3
    a292:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a294:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a298:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a29c:	940c      	str	r4, [sp, #48]	; 0x30
    a29e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    a2a0:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    a2a2:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    a2a4:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    a2a6:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a2a8:	2302      	movs	r3, #2
    a2aa:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a2ac:	ab0d      	add	r3, sp, #52	; 0x34
    a2ae:	9302      	str	r3, [sp, #8]
    a2b0:	4b81      	ldr	r3, [pc, #516]	; (a4b8 <sched_free_win_offset_calc+0x258>)
    a2b2:	9301      	str	r3, [sp, #4]
    a2b4:	ab0b      	add	r3, sp, #44	; 0x2c
    a2b6:	9300      	str	r3, [sp, #0]
    a2b8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    a2bc:	ab0c      	add	r3, sp, #48	; 0x30
    a2be:	2101      	movs	r1, #1
    a2c0:	2000      	movs	r0, #0
    a2c2:	f7fd fd05 	bl	7cd0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a2c6:	2802      	cmp	r0, #2
    a2c8:	d01a      	beq.n	a300 <sched_free_win_offset_calc+0xa0>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a2cc:	b1e3      	cbz	r3, a308 <sched_free_win_offset_calc+0xa8>
    a2ce:	4b7b      	ldr	r3, [pc, #492]	; (a4bc <sched_free_win_offset_calc+0x25c>)
    a2d0:	9301      	str	r3, [sp, #4]
    a2d2:	9300      	str	r3, [sp, #0]
    a2d4:	4b7a      	ldr	r3, [pc, #488]	; (a4c0 <sched_free_win_offset_calc+0x260>)
    a2d6:	4a7b      	ldr	r2, [pc, #492]	; (a4c4 <sched_free_win_offset_calc+0x264>)
    a2d8:	681c      	ldr	r4, [r3, #0]
    a2da:	497b      	ldr	r1, [pc, #492]	; (a4c8 <sched_free_win_offset_calc+0x268>)
    a2dc:	4b7b      	ldr	r3, [pc, #492]	; (a4cc <sched_free_win_offset_calc+0x26c>)
    a2de:	487c      	ldr	r0, [pc, #496]	; (a4d0 <sched_free_win_offset_calc+0x270>)
			LL_ASSERT(0);
    a2e0:	47a0      	blx	r4
    a2e2:	4040      	eors	r0, r0
    a2e4:	f380 8811 	msr	BASEPRI, r0
    a2e8:	f04f 0004 	mov.w	r0, #4
    a2ec:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    a2ee:	4293      	cmp	r3, r2
    a2f0:	bf38      	it	cc
    a2f2:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    a2f4:	2200      	movs	r2, #0
    a2f6:	e7c5      	b.n	a284 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a2f8:	2101      	movs	r1, #1
    a2fa:	2000      	movs	r0, #0
    a2fc:	f7fd fd66 	bl	7dcc <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a302:	2b02      	cmp	r3, #2
    a304:	d0f8      	beq.n	a2f8 <sched_free_win_offset_calc+0x98>
    a306:	e7e0      	b.n	a2ca <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    a308:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    a30c:	2aff      	cmp	r2, #255	; 0xff
    a30e:	d067      	beq.n	a3e0 <sched_free_win_offset_calc+0x180>
		if ((ticker_id_prev != 0xff) &&
    a310:	2fff      	cmp	r7, #255	; 0xff
    a312:	d00c      	beq.n	a32e <sched_free_win_offset_calc+0xce>
    a314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a316:	4599      	cmp	r9, r3
    a318:	d009      	beq.n	a32e <sched_free_win_offset_calc+0xce>
			LL_ASSERT(0);
    a31a:	4b68      	ldr	r3, [pc, #416]	; (a4bc <sched_free_win_offset_calc+0x25c>)
    a31c:	9301      	str	r3, [sp, #4]
    a31e:	9300      	str	r3, [sp, #0]
    a320:	4b67      	ldr	r3, [pc, #412]	; (a4c0 <sched_free_win_offset_calc+0x260>)
    a322:	4a68      	ldr	r2, [pc, #416]	; (a4c4 <sched_free_win_offset_calc+0x264>)
    a324:	681c      	ldr	r4, [r3, #0]
    a326:	4968      	ldr	r1, [pc, #416]	; (a4c8 <sched_free_win_offset_calc+0x268>)
    a328:	4b68      	ldr	r3, [pc, #416]	; (a4cc <sched_free_win_offset_calc+0x26c>)
    a32a:	486a      	ldr	r0, [pc, #424]	; (a4d4 <sched_free_win_offset_calc+0x274>)
    a32c:	e7d8      	b.n	a2e0 <sched_free_win_offset_calc+0x80>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a32e:	2a05      	cmp	r2, #5
    a330:	d951      	bls.n	a3d6 <sched_free_win_offset_calc+0x176>
				  _radio.connection_count)) {
    a332:	4869      	ldr	r0, [pc, #420]	; (a4d8 <sched_free_win_offset_calc+0x278>)
    a334:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a338:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    a33a:	429a      	cmp	r2, r3
    a33c:	da4b      	bge.n	a3d6 <sched_free_win_offset_calc+0x176>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    a33e:	2a06      	cmp	r2, #6
    a340:	f000 8092 	beq.w	a468 <sched_free_win_offset_calc+0x208>
		if (ticker_id_other != 0xFF) {
    a344:	9b06      	ldr	r3, [sp, #24]
    a346:	2bff      	cmp	r3, #255	; 0xff
    a348:	d14a      	bne.n	a3e0 <sched_free_win_offset_calc+0x180>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a34a:	3a07      	subs	r2, #7
    a34c:	b292      	uxth	r2, r2
    a34e:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a352:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a356:	f7fc fd8b 	bl	6e70 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    a35a:	4580      	cmp	r8, r0
    a35c:	d03b      	beq.n	a3d6 <sched_free_win_offset_calc+0x176>
    a35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a360:	b91b      	cbnz	r3, a36a <sched_free_win_offset_calc+0x10a>
    a362:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a366:	2b00      	cmp	r3, #0
    a368:	db35      	blt.n	a3d6 <sched_free_win_offset_calc+0x176>
			u32_t ticks_to_expire_normal =
    a36a:	9b05      	ldr	r3, [sp, #20]
    a36c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a36e:	6841      	ldr	r1, [r0, #4]
    a370:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a372:	6803      	ldr	r3, [r0, #0]
    a374:	2b00      	cmp	r3, #0
    a376:	da4e      	bge.n	a416 <sched_free_win_offset_calc+0x1b6>
				u32_t ticks_prepare_to_start =
    a378:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    a37a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a37e:	428a      	cmp	r2, r1
    a380:	bf2c      	ite	cs
    a382:	18b6      	addcs	r6, r6, r2
    a384:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    a386:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    a388:	68c2      	ldr	r2, [r0, #12]
    a38a:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    a38e:	444b      	add	r3, r9
    a390:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    a392:	f8da 3000 	ldr.w	r3, [sl]
    a396:	429e      	cmp	r6, r3
    a398:	d916      	bls.n	a3c8 <sched_free_win_offset_calc+0x168>
    a39a:	429d      	cmp	r5, r3
    a39c:	bf38      	it	cc
    a39e:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    a3a0:	9b07      	ldr	r3, [sp, #28]
    a3a2:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    a3a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	42a3      	cmp	r3, r4
    a3ac:	d905      	bls.n	a3ba <sched_free_win_offset_calc+0x15a>
				       (ticker_ticks_diff_get(
    a3ae:	4629      	mov	r1, r5
    a3b0:	4630      	mov	r0, r6
    a3b2:	f7fd fd23 	bl	7dfc <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    a3b6:	42b8      	cmp	r0, r7
    a3b8:	d231      	bcs.n	a41e <sched_free_win_offset_calc+0x1be>
				if (_win_offset >= conn_interval) {
    a3ba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    a3be:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    a3c0:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    a3c4:	4293      	cmp	r3, r2
    a3c6:	d20b      	bcs.n	a3e0 <sched_free_win_offset_calc+0x180>
			ticks_anchor_prev = ticks_anchor;
    a3c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    a3cc:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a3d0:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    a3d4:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    a3d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a3d8:	781b      	ldrb	r3, [r3, #0]
    a3da:	42a3      	cmp	r3, r4
    a3dc:	f63f af64 	bhi.w	a2a8 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    a3e0:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    a3e4:	2bff      	cmp	r3, #255	; 0xff
    a3e6:	d111      	bne.n	a40c <sched_free_win_offset_calc+0x1ac>
    a3e8:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a3ec:	f8df 80ec 	ldr.w	r8, [pc, #236]	; a4dc <sched_free_win_offset_calc+0x27c>
    a3f0:	a72f      	add	r7, pc, #188	; (adr r7, a4b0 <sched_free_win_offset_calc+0x250>)
    a3f2:	e9d7 6700 	ldrd	r6, r7, [r7]
    a3f6:	429d      	cmp	r5, r3
    a3f8:	bf38      	it	cc
    a3fa:	461d      	movcc	r5, r3
    a3fc:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    a400:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	42a3      	cmp	r3, r4
    a406:	d831      	bhi.n	a46c <sched_free_win_offset_calc+0x20c>
		*ticks_to_offset_next = ticks_to_expire_prev;
    a408:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    a40c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a40e:	701c      	strb	r4, [r3, #0]
}
    a410:	b00f      	add	sp, #60	; 0x3c
    a412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    a416:	428b      	cmp	r3, r1
    a418:	bf38      	it	cc
    a41a:	460b      	movcc	r3, r1
    a41c:	e7b4      	b.n	a388 <sched_free_win_offset_calc+0x128>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a41e:	4a2f      	ldr	r2, [pc, #188]	; (a4dc <sched_free_win_offset_calc+0x27c>)
    a420:	eb05 030b 	add.w	r3, r5, fp
    a424:	fba3 0102 	umull	r0, r1, r3, r2
    a428:	2207      	movs	r2, #7
    a42a:	fb02 1103 	mla	r1, r2, r3, r1
    a42e:	a320      	add	r3, pc, #128	; (adr r3, a4b0 <sched_free_win_offset_calc+0x250>)
    a430:	e9d3 2300 	ldrd	r2, r3, [r3]
    a434:	f7f5 feee 	bl	214 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    a438:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a43c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    a440:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a442:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    a444:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    a446:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    a44a:	d20b      	bcs.n	a464 <sched_free_win_offset_calc+0x204>
					memcpy(win_offset +
    a44c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a44e:	2202      	movs	r2, #2
    a450:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a454:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    a458:	3401      	adds	r4, #1
					memcpy(win_offset +
    a45a:	f7f7 fbe1 	bl	1c20 <memcpy>
					offset_index++;
    a45e:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    a460:	3528      	adds	r5, #40	; 0x28
    a462:	e7a0      	b.n	a3a6 <sched_free_win_offset_calc+0x146>
						ticks_to_expire_prev = 0;
    a464:	2500      	movs	r5, #0
    a466:	e7a8      	b.n	a3ba <sched_free_win_offset_calc+0x15a>
    a468:	9206      	str	r2, [sp, #24]
    a46a:	e7b4      	b.n	a3d6 <sched_free_win_offset_calc+0x176>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a46c:	eb05 030b 	add.w	r3, r5, fp
    a470:	fba3 0108 	umull	r0, r1, r3, r8
    a474:	fb09 1103 	mla	r1, r9, r3, r1
    a478:	4632      	mov	r2, r6
    a47a:	463b      	mov	r3, r7
    a47c:	f7f5 feca 	bl	214 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    a480:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a484:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    a488:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a48a:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    a48c:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    a48e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    a492:	d90b      	bls.n	a4ac <sched_free_win_offset_calc+0x24c>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a494:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a496:	2202      	movs	r2, #2
    a498:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    a49c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    a4a0:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    a4a2:	f7f7 fbbd 	bl	1c20 <memcpy>
			offset_index++;
    a4a6:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    a4a8:	3528      	adds	r5, #40	; 0x28
    a4aa:	e7a9      	b.n	a400 <sched_free_win_offset_calc+0x1a0>
				ticks_to_expire_prev = 0;
    a4ac:	2500      	movs	r5, #0
    a4ae:	e7ab      	b.n	a408 <sched_free_win_offset_calc+0x1a8>
    a4b0:	3b9aca00 	.word	0x3b9aca00
    a4b4:	00000000 	.word	0x00000000
    a4b8:	00009a1d 	.word	0x00009a1d
    a4bc:	00014c55 	.word	0x00014c55
    a4c0:	20003aa4 	.word	0x20003aa4
    a4c4:	000159c3 	.word	0x000159c3
    a4c8:	00015a12 	.word	0x00015a12
    a4cc:	00017059 	.word	0x00017059
    a4d0:	00017d78 	.word	0x00017d78
    a4d4:	00015962 	.word	0x00015962
    a4d8:	200008f0 	.word	0x200008f0
    a4dc:	1afd498d 	.word	0x1afd498d

0000a4e0 <mayfly_sched_free_win_offset_calc>:
{
    a4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    a4e2:	2300      	movs	r3, #0
    a4e4:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    a4e6:	2306      	movs	r3, #6
    a4e8:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    a4ec:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a4f0:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    a4f4:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    a4f6:	bfbe      	ittt	lt
    a4f8:	4602      	movlt	r2, r0
    a4fa:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    a4fc:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a500:	9101      	str	r1, [sp, #4]
    a502:	f10d 010b 	add.w	r1, sp, #11
    a506:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    a508:	bfa8      	it	ge
    a50a:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    a50c:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    a510:	2100      	movs	r1, #0
    a512:	f7ff fea5 	bl	a260 <sched_free_win_offset_calc>
}
    a516:	b005      	add	sp, #20
    a518:	f85d fb04 	ldr.w	pc, [sp], #4
    a51c:	0000      	movs	r0, r0
	...

0000a520 <mayfly_sched_win_offset_select>:
{
    a520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a524:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    a528:	b089      	sub	sp, #36	; 0x24
    a52a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a52c:	4840      	ldr	r0, [pc, #256]	; (a630 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    a52e:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a530:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a532:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    a536:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a53a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a53e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a540:	fb03 1102 	mla	r1, r3, r2, r1
    a544:	a338      	add	r3, pc, #224	; (adr r3, a628 <mayfly_sched_win_offset_select+0x108>)
    a546:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    a54a:	9505      	str	r5, [sp, #20]
    a54c:	6075      	str	r5, [r6, #4]
    a54e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a550:	f7f5 fe60 	bl	214 <__aeabi_uldivmod>
    a554:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a556:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    a55a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    a55e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    a562:	9100      	str	r1, [sp, #0]
    a564:	9601      	str	r6, [sp, #4]
    a566:	2101      	movs	r1, #1
    a568:	4620      	mov	r0, r4
    a56a:	f7ff fe79 	bl	a260 <sched_free_win_offset_calc>
    a56e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    a572:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    a576:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    a57a:	2202      	movs	r2, #2
    a57c:	4639      	mov	r1, r7
    a57e:	f10d 000e 	add.w	r0, sp, #14
    a582:	f7f7 fb4d 	bl	1c20 <memcpy>
		while (offset_index_m < offset_m_max) {
    a586:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    a58a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    a58e:	2300      	movs	r3, #0
    a590:	b2d9      	uxtb	r1, r3
    a592:	4288      	cmp	r0, r1
    a594:	d811      	bhi.n	a5ba <mayfly_sched_win_offset_select+0x9a>
    a596:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    a598:	4547      	cmp	r7, r8
    a59a:	d1ee      	bne.n	a57a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    a59c:	b9b5      	cbnz	r5, a5cc <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    a59e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a5a2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a5a6:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a5a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a5ac:	2202      	movs	r2, #2
    a5ae:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a5b0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    a5b4:	f7f7 fb34 	bl	1c20 <memcpy>
    a5b8:	e027      	b.n	a60a <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    a5ba:	454a      	cmp	r2, r9
    a5bc:	d004      	beq.n	a5c8 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    a5be:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    a5c2:	4291      	cmp	r1, r2
    a5c4:	d024      	beq.n	a610 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    a5c6:	2501      	movs	r5, #1
    a5c8:	3301      	adds	r3, #1
    a5ca:	e7e1      	b.n	a590 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    a5cc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    a5d0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    a5d4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a5d8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    a5dc:	4b15      	ldr	r3, [pc, #84]	; (a634 <mayfly_sched_win_offset_select+0x114>)
    a5de:	2200      	movs	r2, #0
    a5e0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    a5e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a5e8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    a5ec:	f042 0203 	orr.w	r2, r2, #3
    a5f0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    a5f4:	2203      	movs	r2, #3
    a5f6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    a5fa:	2211      	movs	r2, #17
    a5fc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    a600:	220f      	movs	r2, #15
    a602:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    a606:	2220      	movs	r2, #32
    a608:	701a      	strb	r2, [r3, #0]
}
    a60a:	b009      	add	sp, #36	; 0x24
    a60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    a610:	f240 43e2 	movw	r3, #1250	; 0x4e2
    a614:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    a616:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    a61a:	2202      	movs	r2, #2
    a61c:	f10d 010e 	add.w	r1, sp, #14
    a620:	e7c6      	b.n	a5b0 <mayfly_sched_win_offset_select+0x90>
    a622:	bf00      	nop
    a624:	f3af 8000 	nop.w
    a628:	1afd498d 	.word	0x1afd498d
    a62c:	00000007 	.word	0x00000007
    a630:	09ce5400 	.word	0x09ce5400
    a634:	200008f0 	.word	0x200008f0

0000a638 <sched_after_mstr_free_slot_get>:
{
    a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a63c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a63e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    a640:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    a642:	f8df 9144 	ldr.w	r9, [pc, #324]	; a788 <sched_after_mstr_free_slot_get+0x150>
	ticker_id = ticker_id_prev = 0xff;
    a646:	f88d 501f 	strb.w	r5, [sp, #31]
{
    a64a:	4680      	mov	r8, r0
    a64c:	4693      	mov	fp, r2
    a64e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    a650:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    a654:	601c      	str	r4, [r3, #0]
    a656:	9408      	str	r4, [sp, #32]
    a658:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a65a:	2302      	movs	r3, #2
    a65c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a65e:	ab09      	add	r3, sp, #36	; 0x24
    a660:	9302      	str	r3, [sp, #8]
    a662:	4b41      	ldr	r3, [pc, #260]	; (a768 <sched_after_mstr_free_slot_get+0x130>)
    a664:	9301      	str	r3, [sp, #4]
    a666:	ab08      	add	r3, sp, #32
    a668:	9300      	str	r3, [sp, #0]
    a66a:	f10d 021f 	add.w	r2, sp, #31
    a66e:	465b      	mov	r3, fp
    a670:	4641      	mov	r1, r8
    a672:	2000      	movs	r0, #0
    a674:	f7fd fb2c 	bl	7cd0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    a678:	2802      	cmp	r0, #2
    a67a:	d015      	beq.n	a6a8 <sched_after_mstr_free_slot_get+0x70>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a67e:	b1bb      	cbz	r3, a6b0 <sched_after_mstr_free_slot_get+0x78>
    a680:	4b3a      	ldr	r3, [pc, #232]	; (a76c <sched_after_mstr_free_slot_get+0x134>)
    a682:	9301      	str	r3, [sp, #4]
    a684:	9300      	str	r3, [sp, #0]
    a686:	4b3a      	ldr	r3, [pc, #232]	; (a770 <sched_after_mstr_free_slot_get+0x138>)
    a688:	4a3a      	ldr	r2, [pc, #232]	; (a774 <sched_after_mstr_free_slot_get+0x13c>)
    a68a:	681c      	ldr	r4, [r3, #0]
    a68c:	493a      	ldr	r1, [pc, #232]	; (a778 <sched_after_mstr_free_slot_get+0x140>)
    a68e:	4b3b      	ldr	r3, [pc, #236]	; (a77c <sched_after_mstr_free_slot_get+0x144>)
    a690:	483b      	ldr	r0, [pc, #236]	; (a780 <sched_after_mstr_free_slot_get+0x148>)
    a692:	47a0      	blx	r4
    a694:	4040      	eors	r0, r0
    a696:	f380 8811 	msr	BASEPRI, r0
    a69a:	f04f 0004 	mov.w	r0, #4
    a69e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6a0:	4641      	mov	r1, r8
    a6a2:	2000      	movs	r0, #0
    a6a4:	f7fd fb92 	bl	7dcc <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6aa:	2b02      	cmp	r3, #2
    a6ac:	d0f8      	beq.n	a6a0 <sched_after_mstr_free_slot_get+0x68>
    a6ae:	e7e5      	b.n	a67c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    a6b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a6b4:	2aff      	cmp	r2, #255	; 0xff
    a6b6:	d04e      	beq.n	a756 <sched_after_mstr_free_slot_get+0x11e>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a6b8:	2a06      	cmp	r2, #6
    a6ba:	d9ce      	bls.n	a65a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    a6bc:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    a6c0:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    a6c2:	429a      	cmp	r2, r3
    a6c4:	dac9      	bge.n	a65a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a6c6:	3a07      	subs	r2, #7
    a6c8:	b292      	uxth	r2, r2
    a6ca:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a6ce:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    a6d2:	f7fc fbcd 	bl	6e70 <mem_get>
		if (conn && !conn->role) {
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d0bf      	beq.n	a65a <sched_after_mstr_free_slot_get+0x22>
    a6da:	f990 301d 	ldrsb.w	r3, [r0, #29]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	dbbb      	blt.n	a65a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a6e2:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    a6e4:	9a08      	ldr	r2, [sp, #32]
    a6e6:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	da12      	bge.n	a714 <sched_after_mstr_free_slot_get+0xdc>
    a6ee:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    a6f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    a6f4:	4571      	cmp	r1, lr
    a6f6:	bf2c      	ite	cs
    a6f8:	1852      	addcs	r2, r2, r1
    a6fa:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    a6fc:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    a6fe:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    a700:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    a702:	f101 0104 	add.w	r1, r1, #4
    a706:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    a708:	d108      	bne.n	a71c <sched_after_mstr_free_slot_get+0xe4>
			ticker_id_prev = ticker_id;
    a70a:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    a70e:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    a710:	4616      	mov	r6, r2
    a712:	e7a2      	b.n	a65a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    a714:	4573      	cmp	r3, lr
    a716:	bf38      	it	cc
    a718:	4673      	movcc	r3, lr
    a71a:	e7f0      	b.n	a6fe <sched_after_mstr_free_slot_get+0xc6>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    a71c:	4631      	mov	r1, r6
    a71e:	4610      	mov	r0, r2
    a720:	9305      	str	r3, [sp, #20]
    a722:	9204      	str	r2, [sp, #16]
    a724:	f7fd fb6a 	bl	7dfc <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    a728:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    a72c:	4288      	cmp	r0, r1
    a72e:	9a04      	ldr	r2, [sp, #16]
    a730:	9b05      	ldr	r3, [sp, #20]
    a732:	d9ea      	bls.n	a70a <sched_after_mstr_free_slot_get+0xd2>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a734:	4813      	ldr	r0, [pc, #76]	; (a784 <sched_after_mstr_free_slot_get+0x14c>)
    a736:	4434      	add	r4, r6
    a738:	fba4 0100 	umull	r0, r1, r4, r0
    a73c:	2307      	movs	r3, #7
    a73e:	fb03 1104 	mla	r1, r3, r4, r1
    a742:	a307      	add	r3, pc, #28	; (adr r3, a760 <sched_after_mstr_free_slot_get+0x128>)
    a744:	e9d3 2300 	ldrd	r2, r3, [r3]
    a748:	f7f5 fd64 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    a74c:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    a74e:	6038      	str	r0, [r7, #0]
}
    a750:	b00b      	add	sp, #44	; 0x2c
    a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    a756:	2dff      	cmp	r5, #255	; 0xff
    a758:	d1ec      	bne.n	a734 <sched_after_mstr_free_slot_get+0xfc>
    a75a:	e7f9      	b.n	a750 <sched_after_mstr_free_slot_get+0x118>
    a75c:	f3af 8000 	nop.w
    a760:	3b9aca00 	.word	0x3b9aca00
    a764:	00000000 	.word	0x00000000
    a768:	00009a1d 	.word	0x00009a1d
    a76c:	00014c55 	.word	0x00014c55
    a770:	20003aa4 	.word	0x20003aa4
    a774:	000159c3 	.word	0x000159c3
    a778:	00015a12 	.word	0x00015a12
    a77c:	00017019 	.word	0x00017019
    a780:	00017d78 	.word	0x00017d78
    a784:	1afd498d 	.word	0x1afd498d
    a788:	200008f0 	.word	0x200008f0

0000a78c <isr_adv_ci_adva_check>:
{
    a78c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    a78e:	7804      	ldrb	r4, [r0, #0]
    a790:	780a      	ldrb	r2, [r1, #0]
    a792:	f3c4 1380 	ubfx	r3, r4, #6, #1
    a796:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a79a:	d119      	bne.n	a7d0 <isr_adv_ci_adva_check+0x44>
    a79c:	f004 040f 	and.w	r4, r4, #15
    a7a0:	2c01      	cmp	r4, #1
    a7a2:	f101 0608 	add.w	r6, r1, #8
    a7a6:	f100 0502 	add.w	r5, r0, #2
    a7aa:	d008      	beq.n	a7be <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    a7ac:	2206      	movs	r2, #6
    a7ae:	4631      	mov	r1, r6
    a7b0:	4628      	mov	r0, r5
    a7b2:	f7f7 fa20 	bl	1bf6 <memcmp>
			 BDADDR_SIZE)) ||
    a7b6:	fab0 f080 	clz	r0, r0
    a7ba:	0940      	lsrs	r0, r0, #5
    a7bc:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    a7be:	2206      	movs	r2, #6
    a7c0:	4631      	mov	r1, r6
    a7c2:	4628      	mov	r0, r5
    a7c4:	f7f7 fa17 	bl	1bf6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a7c8:	2800      	cmp	r0, #0
    a7ca:	d1ef      	bne.n	a7ac <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    a7cc:	4620      	mov	r0, r4
    a7ce:	bd70      	pop	{r4, r5, r6, pc}
    a7d0:	2000      	movs	r0, #0
}
    a7d2:	bd70      	pop	{r4, r5, r6, pc}

0000a7d4 <packet_rx_enqueue>:
{
    a7d4:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    a7d6:	4a20      	ldr	r2, [pc, #128]	; (a858 <packet_rx_enqueue+0x84>)
    a7d8:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
    a7dc:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
    a7e0:	4299      	cmp	r1, r3
    a7e2:	d10f      	bne.n	a804 <packet_rx_enqueue+0x30>
    a7e4:	4b1d      	ldr	r3, [pc, #116]	; (a85c <packet_rx_enqueue+0x88>)
    a7e6:	9301      	str	r3, [sp, #4]
    a7e8:	9300      	str	r3, [sp, #0]
    a7ea:	4b1d      	ldr	r3, [pc, #116]	; (a860 <packet_rx_enqueue+0x8c>)
    a7ec:	4a1d      	ldr	r2, [pc, #116]	; (a864 <packet_rx_enqueue+0x90>)
    a7ee:	681c      	ldr	r4, [r3, #0]
    a7f0:	491d      	ldr	r1, [pc, #116]	; (a868 <packet_rx_enqueue+0x94>)
    a7f2:	4b1e      	ldr	r3, [pc, #120]	; (a86c <packet_rx_enqueue+0x98>)
    a7f4:	481e      	ldr	r0, [pc, #120]	; (a870 <packet_rx_enqueue+0x9c>)
	LL_ASSERT(link);
    a7f6:	47a0      	blx	r4
    a7f8:	4040      	eors	r0, r0
    a7fa:	f380 8811 	msr	BASEPRI, r0
    a7fe:	f04f 0004 	mov.w	r0, #4
    a802:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    a804:	f892 1141 	ldrb.w	r1, [r2, #321]	; 0x141
    a808:	f8d2 313c 	ldr.w	r3, [r2, #316]	; 0x13c
    a80c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a810:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	link = node_rx->hdr.onion.link;
    a814:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    a816:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    a818:	f892 3141 	ldrb.w	r3, [r2, #321]	; 0x141
	if (last == _radio.packet_rx_count) {
    a81c:	f892 4140 	ldrb.w	r4, [r2, #320]	; 0x140
	last = _radio.packet_rx_last + 1;
    a820:	3301      	adds	r3, #1
    a822:	b2db      	uxtb	r3, r3
		last = 0;
    a824:	429c      	cmp	r4, r3
    a826:	bf08      	it	eq
    a828:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    a82a:	f882 3141 	strb.w	r3, [r2, #321]	; 0x141
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    a82e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    a832:	f7fc fb42 	bl	6eba <memq_enqueue>
	LL_ASSERT(link);
    a836:	b948      	cbnz	r0, a84c <packet_rx_enqueue+0x78>
    a838:	4b08      	ldr	r3, [pc, #32]	; (a85c <packet_rx_enqueue+0x88>)
    a83a:	9301      	str	r3, [sp, #4]
    a83c:	9300      	str	r3, [sp, #0]
    a83e:	4b08      	ldr	r3, [pc, #32]	; (a860 <packet_rx_enqueue+0x8c>)
    a840:	4a08      	ldr	r2, [pc, #32]	; (a864 <packet_rx_enqueue+0x90>)
    a842:	681c      	ldr	r4, [r3, #0]
    a844:	4908      	ldr	r1, [pc, #32]	; (a868 <packet_rx_enqueue+0x94>)
    a846:	4b09      	ldr	r3, [pc, #36]	; (a86c <packet_rx_enqueue+0x98>)
    a848:	480a      	ldr	r0, [pc, #40]	; (a874 <packet_rx_enqueue+0xa0>)
    a84a:	e7d4      	b.n	a7f6 <packet_rx_enqueue+0x22>
}
    a84c:	b002      	add	sp, #8
    a84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    a852:	f006 bc9f 	b.w	11194 <radio_event_callback>
    a856:	bf00      	nop
    a858:	200008f0 	.word	0x200008f0
    a85c:	00014c55 	.word	0x00014c55
    a860:	20003aa4 	.word	0x20003aa4
    a864:	000159c3 	.word	0x000159c3
    a868:	00015a12 	.word	0x00015a12
    a86c:	000171aa 	.word	0x000171aa
    a870:	00017a70 	.word	0x00017a70
    a874:	00017293 	.word	0x00017293

0000a878 <isr_scan_tgta_check>:
{
    a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a87c:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a87e:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    a880:	f101 0808 	add.w	r8, r1, #8
{
    a884:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a886:	09c0      	lsrs	r0, r0, #7
    a888:	4641      	mov	r1, r8
{
    a88a:	4691      	mov	r9, r2
    a88c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    a88e:	f007 f939 	bl	11b04 <ctrl_rl_addr_resolve>
    a892:	4604      	mov	r4, r0
    a894:	b9d8      	cbnz	r0, a8ce <isr_scan_tgta_check+0x56>
    a896:	4f1c      	ldr	r7, [pc, #112]	; (a908 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a898:	f1ba 0f00 	cmp.w	sl, #0
    a89c:	d10e      	bne.n	a8bc <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a89e:	782b      	ldrb	r3, [r5, #0]
    a8a0:	f897 20e1 	ldrb.w	r2, [r7, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    a8a4:	09db      	lsrs	r3, r3, #7
    a8a6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a8aa:	d113      	bne.n	a8d4 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    a8ac:	2206      	movs	r2, #6
    a8ae:	4641      	mov	r1, r8
    a8b0:	4816      	ldr	r0, [pc, #88]	; (a90c <isr_scan_tgta_check+0x94>)
    a8b2:	f7f7 f9a0 	bl	1bf6 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    a8b6:	b968      	cbnz	r0, a8d4 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    a8b8:	2001      	movs	r0, #1
    a8ba:	e012      	b.n	a8e2 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    a8bc:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    a8c0:	07db      	lsls	r3, r3, #31
    a8c2:	d5ec      	bpl.n	a89e <isr_scan_tgta_check+0x26>
    a8c4:	4648      	mov	r0, r9
    a8c6:	f006 fe61 	bl	1158c <ctrl_lrpa_get>
    a8ca:	2800      	cmp	r0, #0
    a8cc:	d0e7      	beq.n	a89e <isr_scan_tgta_check+0x26>
}
    a8ce:	4620      	mov	r0, r4
    a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a8d4:	f897 00e1 	ldrb.w	r0, [r7, #225]	; 0xe1
    a8d8:	f3c0 1001 	ubfx	r0, r0, #4, #2
    a8dc:	f010 0002 	ands.w	r0, r0, #2
    a8e0:	d101      	bne.n	a8e6 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    a8e2:	4604      	mov	r4, r0
    a8e4:	e7f3      	b.n	a8ce <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a8e6:	f995 3000 	ldrsb.w	r3, [r5]
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	da09      	bge.n	a902 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    a8ee:	7b6b      	ldrb	r3, [r5, #13]
    a8f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a8f4:	2b40      	cmp	r3, #64	; 0x40
    a8f6:	d104      	bne.n	a902 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    a8f8:	2e00      	cmp	r6, #0
    a8fa:	d0dd      	beq.n	a8b8 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    a8fc:	2001      	movs	r0, #1
    a8fe:	7030      	strb	r0, [r6, #0]
    a900:	e7ef      	b.n	a8e2 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    a902:	2000      	movs	r0, #0
    a904:	e7ed      	b.n	a8e2 <isr_scan_tgta_check+0x6a>
    a906:	bf00      	nop
    a908:	200008f0 	.word	0x200008f0
    a90c:	200009d4 	.word	0x200009d4

0000a910 <isr_rx_scan_report>:
{
    a910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a914:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    a916:	2003      	movs	r0, #3
{
    a918:	460f      	mov	r7, r1
    a91a:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    a91c:	f7ff f8be 	bl	9a9c <packet_rx_reserve_get>
	if (node_rx == 0) {
    a920:	4604      	mov	r4, r0
    a922:	2800      	cmp	r0, #0
    a924:	d03f      	beq.n	a9a6 <isr_rx_scan_report+0x96>
	node_rx->hdr.handle = 0xffff;
    a926:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a92a:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    a92c:	4b1f      	ldr	r3, [pc, #124]	; (a9ac <isr_rx_scan_report+0x9c>)
    a92e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    a932:	075a      	lsls	r2, r3, #29
    a934:	d033      	beq.n	a99e <isr_rx_scan_report+0x8e>
		switch (_radio.scanner.phy) {
    a936:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a93a:	b2da      	uxtb	r2, r3
    a93c:	2a01      	cmp	r2, #1
    a93e:	d011      	beq.n	a964 <isr_rx_scan_report+0x54>
    a940:	2a04      	cmp	r2, #4
    a942:	d010      	beq.n	a966 <isr_rx_scan_report+0x56>
			LL_ASSERT(0);
    a944:	4b1a      	ldr	r3, [pc, #104]	; (a9b0 <isr_rx_scan_report+0xa0>)
    a946:	9301      	str	r3, [sp, #4]
    a948:	9300      	str	r3, [sp, #0]
    a94a:	4b1a      	ldr	r3, [pc, #104]	; (a9b4 <isr_rx_scan_report+0xa4>)
    a94c:	4a1a      	ldr	r2, [pc, #104]	; (a9b8 <isr_rx_scan_report+0xa8>)
    a94e:	681c      	ldr	r4, [r3, #0]
    a950:	491a      	ldr	r1, [pc, #104]	; (a9bc <isr_rx_scan_report+0xac>)
    a952:	4b1b      	ldr	r3, [pc, #108]	; (a9c0 <isr_rx_scan_report+0xb0>)
    a954:	481b      	ldr	r0, [pc, #108]	; (a9c4 <isr_rx_scan_report+0xb4>)
    a956:	47a0      	blx	r4
    a958:	4040      	eors	r0, r0
    a95a:	f380 8811 	msr	BASEPRI, r0
    a95e:	f04f 0004 	mov.w	r0, #4
    a962:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    a964:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    a966:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a96a:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    a96c:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a970:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    a974:	f1b9 0f00 	cmp.w	r9, #0
    a978:	d013      	beq.n	a9a2 <isr_rx_scan_report+0x92>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a97a:	f007 fe55 	bl	12628 <radio_rssi_get>
			     pdu_adv_rx->len] =
    a97e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a982:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a986:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    a988:	442b      	add	r3, r5
    a98a:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a98c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    a98e:	441d      	add	r5, r3
    a990:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    a992:	f7ff ff1f 	bl	a7d4 <packet_rx_enqueue>
	return 0;
    a996:	2000      	movs	r0, #0
}
    a998:	b003      	add	sp, #12
    a99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a99e:	2302      	movs	r3, #2
    a9a0:	e7e1      	b.n	a966 <isr_rx_scan_report+0x56>
			     pdu_adv_rx->len] =
    a9a2:	207f      	movs	r0, #127	; 0x7f
    a9a4:	e7ed      	b.n	a982 <isr_rx_scan_report+0x72>
		return 1;
    a9a6:	2001      	movs	r0, #1
    a9a8:	e7f6      	b.n	a998 <isr_rx_scan_report+0x88>
    a9aa:	bf00      	nop
    a9ac:	200008f0 	.word	0x200008f0
    a9b0:	00014c55 	.word	0x00014c55
    a9b4:	20003aa4 	.word	0x20003aa4
    a9b8:	000159c3 	.word	0x000159c3
    a9bc:	00015a12 	.word	0x00015a12
    a9c0:	00016e40 	.word	0x00016e40
    a9c4:	00015962 	.word	0x00015962

0000a9c8 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    a9c8:	4a0b      	ldr	r2, [pc, #44]	; (a9f8 <rx_fc_lock+0x30>)
    a9ca:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a9ce:	f892 1181 	ldrb.w	r1, [r2, #385]	; 0x181
    a9d2:	4299      	cmp	r1, r3
    a9d4:	d10e      	bne.n	a9f4 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    a9d6:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a9da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    a9de:	f8a3 017a 	strh.w	r0, [r3, #378]	; 0x17a
		req = _radio.fc_req + 1;
    a9e2:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
    a9e6:	3301      	adds	r3, #1
    a9e8:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    a9ea:	2b03      	cmp	r3, #3
    a9ec:	bf08      	it	eq
    a9ee:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    a9f0:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
    a9f4:	4770      	bx	lr
    a9f6:	bf00      	nop
    a9f8:	200008f0 	.word	0x200008f0

0000a9fc <ticker_success_assert>:
{
    a9fc:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a9fe:	b178      	cbz	r0, aa20 <ticker_success_assert+0x24>
    aa00:	4b08      	ldr	r3, [pc, #32]	; (aa24 <ticker_success_assert+0x28>)
    aa02:	9301      	str	r3, [sp, #4]
    aa04:	9300      	str	r3, [sp, #0]
    aa06:	4b08      	ldr	r3, [pc, #32]	; (aa28 <ticker_success_assert+0x2c>)
    aa08:	4a08      	ldr	r2, [pc, #32]	; (aa2c <ticker_success_assert+0x30>)
    aa0a:	681c      	ldr	r4, [r3, #0]
    aa0c:	4908      	ldr	r1, [pc, #32]	; (aa30 <ticker_success_assert+0x34>)
    aa0e:	4b09      	ldr	r3, [pc, #36]	; (aa34 <ticker_success_assert+0x38>)
    aa10:	4809      	ldr	r0, [pc, #36]	; (aa38 <ticker_success_assert+0x3c>)
    aa12:	47a0      	blx	r4
    aa14:	4040      	eors	r0, r0
    aa16:	f380 8811 	msr	BASEPRI, r0
    aa1a:	f04f 0004 	mov.w	r0, #4
    aa1e:	df02      	svc	2
}
    aa20:	b002      	add	sp, #8
    aa22:	bd10      	pop	{r4, pc}
    aa24:	00014c55 	.word	0x00014c55
    aa28:	20003aa4 	.word	0x20003aa4
    aa2c:	000159c3 	.word	0x000159c3
    aa30:	00015a12 	.word	0x00015a12
    aa34:	00016f29 	.word	0x00016f29
    aa38:	00017e90 	.word	0x00017e90

0000aa3c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    aa3c:	2801      	cmp	r0, #1
{
    aa3e:	b513      	push	{r0, r1, r4, lr}
    aa40:	4b12      	ldr	r3, [pc, #72]	; (aa8c <ticker_stop_adv_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    aa42:	d116      	bne.n	aa72 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    aa44:	7c9a      	ldrb	r2, [r3, #18]
    aa46:	2a05      	cmp	r2, #5
    aa48:	d103      	bne.n	aa52 <ticker_stop_adv_assert+0x16>
			_radio.ticker_id_stop = 0;
    aa4a:	2200      	movs	r2, #0
    aa4c:	749a      	strb	r2, [r3, #18]
}
    aa4e:	b002      	add	sp, #8
    aa50:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    aa52:	4b0f      	ldr	r3, [pc, #60]	; (aa90 <ticker_stop_adv_assert+0x54>)
    aa54:	9301      	str	r3, [sp, #4]
    aa56:	9300      	str	r3, [sp, #0]
    aa58:	4b0e      	ldr	r3, [pc, #56]	; (aa94 <ticker_stop_adv_assert+0x58>)
    aa5a:	4a0f      	ldr	r2, [pc, #60]	; (aa98 <ticker_stop_adv_assert+0x5c>)
    aa5c:	681c      	ldr	r4, [r3, #0]
    aa5e:	490f      	ldr	r1, [pc, #60]	; (aa9c <ticker_stop_adv_assert+0x60>)
    aa60:	4b0f      	ldr	r3, [pc, #60]	; (aaa0 <ticker_stop_adv_assert+0x64>)
    aa62:	4810      	ldr	r0, [pc, #64]	; (aaa4 <ticker_stop_adv_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    aa64:	47a0      	blx	r4
    aa66:	4040      	eors	r0, r0
    aa68:	f380 8811 	msr	BASEPRI, r0
    aa6c:	f04f 0004 	mov.w	r0, #4
    aa70:	df02      	svc	2
    aa72:	7c1b      	ldrb	r3, [r3, #16]
    aa74:	2b05      	cmp	r3, #5
    aa76:	d1ea      	bne.n	aa4e <ticker_stop_adv_assert+0x12>
    aa78:	4b05      	ldr	r3, [pc, #20]	; (aa90 <ticker_stop_adv_assert+0x54>)
    aa7a:	9301      	str	r3, [sp, #4]
    aa7c:	9300      	str	r3, [sp, #0]
    aa7e:	4b05      	ldr	r3, [pc, #20]	; (aa94 <ticker_stop_adv_assert+0x58>)
    aa80:	4a05      	ldr	r2, [pc, #20]	; (aa98 <ticker_stop_adv_assert+0x5c>)
    aa82:	681c      	ldr	r4, [r3, #0]
    aa84:	4905      	ldr	r1, [pc, #20]	; (aa9c <ticker_stop_adv_assert+0x60>)
    aa86:	4b06      	ldr	r3, [pc, #24]	; (aaa0 <ticker_stop_adv_assert+0x64>)
    aa88:	4807      	ldr	r0, [pc, #28]	; (aaa8 <ticker_stop_adv_assert+0x6c>)
    aa8a:	e7eb      	b.n	aa64 <ticker_stop_adv_assert+0x28>
    aa8c:	200008f0 	.word	0x200008f0
    aa90:	00014c55 	.word	0x00014c55
    aa94:	20003aa4 	.word	0x20003aa4
    aa98:	000159c3 	.word	0x000159c3
    aa9c:	00015a12 	.word	0x00015a12
    aaa0:	00016f3f 	.word	0x00016f3f
    aaa4:	00015962 	.word	0x00015962
    aaa8:	00017e12 	.word	0x00017e12

0000aaac <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    aaac:	2801      	cmp	r0, #1
{
    aaae:	b513      	push	{r0, r1, r4, lr}
    aab0:	4b12      	ldr	r3, [pc, #72]	; (aafc <ticker_stop_scan_assert+0x50>)
	if (status == TICKER_STATUS_FAILURE) {
    aab2:	d116      	bne.n	aae2 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    aab4:	7c9a      	ldrb	r2, [r3, #18]
    aab6:	2a06      	cmp	r2, #6
    aab8:	d103      	bne.n	aac2 <ticker_stop_scan_assert+0x16>
			_radio.ticker_id_stop = 0;
    aaba:	2200      	movs	r2, #0
    aabc:	749a      	strb	r2, [r3, #18]
}
    aabe:	b002      	add	sp, #8
    aac0:	bd10      	pop	{r4, pc}
			LL_ASSERT(0);
    aac2:	4b0f      	ldr	r3, [pc, #60]	; (ab00 <ticker_stop_scan_assert+0x54>)
    aac4:	9301      	str	r3, [sp, #4]
    aac6:	9300      	str	r3, [sp, #0]
    aac8:	4b0e      	ldr	r3, [pc, #56]	; (ab04 <ticker_stop_scan_assert+0x58>)
    aaca:	4a0f      	ldr	r2, [pc, #60]	; (ab08 <ticker_stop_scan_assert+0x5c>)
    aacc:	681c      	ldr	r4, [r3, #0]
    aace:	490f      	ldr	r1, [pc, #60]	; (ab0c <ticker_stop_scan_assert+0x60>)
    aad0:	4b0f      	ldr	r3, [pc, #60]	; (ab10 <ticker_stop_scan_assert+0x64>)
    aad2:	4810      	ldr	r0, [pc, #64]	; (ab14 <ticker_stop_scan_assert+0x68>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    aad4:	47a0      	blx	r4
    aad6:	4040      	eors	r0, r0
    aad8:	f380 8811 	msr	BASEPRI, r0
    aadc:	f04f 0004 	mov.w	r0, #4
    aae0:	df02      	svc	2
    aae2:	7c1b      	ldrb	r3, [r3, #16]
    aae4:	2b06      	cmp	r3, #6
    aae6:	d1ea      	bne.n	aabe <ticker_stop_scan_assert+0x12>
    aae8:	4b05      	ldr	r3, [pc, #20]	; (ab00 <ticker_stop_scan_assert+0x54>)
    aaea:	9301      	str	r3, [sp, #4]
    aaec:	9300      	str	r3, [sp, #0]
    aaee:	4b05      	ldr	r3, [pc, #20]	; (ab04 <ticker_stop_scan_assert+0x58>)
    aaf0:	4a05      	ldr	r2, [pc, #20]	; (ab08 <ticker_stop_scan_assert+0x5c>)
    aaf2:	681c      	ldr	r4, [r3, #0]
    aaf4:	4905      	ldr	r1, [pc, #20]	; (ab0c <ticker_stop_scan_assert+0x60>)
    aaf6:	4b06      	ldr	r3, [pc, #24]	; (ab10 <ticker_stop_scan_assert+0x64>)
    aaf8:	4807      	ldr	r0, [pc, #28]	; (ab18 <ticker_stop_scan_assert+0x6c>)
    aafa:	e7eb      	b.n	aad4 <ticker_stop_scan_assert+0x28>
    aafc:	200008f0 	.word	0x200008f0
    ab00:	00014c55 	.word	0x00014c55
    ab04:	20003aa4 	.word	0x20003aa4
    ab08:	000159c3 	.word	0x000159c3
    ab0c:	00015a12 	.word	0x00015a12
    ab10:	00016f56 	.word	0x00016f56
    ab14:	00015962 	.word	0x00015962
    ab18:	00017e51 	.word	0x00017e51

0000ab1c <ticker_update_adv_assert>:
{
    ab1c:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ab1e:	b198      	cbz	r0, ab48 <ticker_update_adv_assert+0x2c>
    ab20:	4b0a      	ldr	r3, [pc, #40]	; (ab4c <ticker_update_adv_assert+0x30>)
    ab22:	7c9b      	ldrb	r3, [r3, #18]
    ab24:	2b05      	cmp	r3, #5
    ab26:	d00f      	beq.n	ab48 <ticker_update_adv_assert+0x2c>
    ab28:	4b09      	ldr	r3, [pc, #36]	; (ab50 <ticker_update_adv_assert+0x34>)
    ab2a:	9301      	str	r3, [sp, #4]
    ab2c:	9300      	str	r3, [sp, #0]
    ab2e:	4b09      	ldr	r3, [pc, #36]	; (ab54 <ticker_update_adv_assert+0x38>)
    ab30:	4a09      	ldr	r2, [pc, #36]	; (ab58 <ticker_update_adv_assert+0x3c>)
    ab32:	681c      	ldr	r4, [r3, #0]
    ab34:	4909      	ldr	r1, [pc, #36]	; (ab5c <ticker_update_adv_assert+0x40>)
    ab36:	4b0a      	ldr	r3, [pc, #40]	; (ab60 <ticker_update_adv_assert+0x44>)
    ab38:	480a      	ldr	r0, [pc, #40]	; (ab64 <ticker_update_adv_assert+0x48>)
    ab3a:	47a0      	blx	r4
    ab3c:	4040      	eors	r0, r0
    ab3e:	f380 8811 	msr	BASEPRI, r0
    ab42:	f04f 0004 	mov.w	r0, #4
    ab46:	df02      	svc	2
}
    ab48:	b002      	add	sp, #8
    ab4a:	bd10      	pop	{r4, pc}
    ab4c:	200008f0 	.word	0x200008f0
    ab50:	00014c55 	.word	0x00014c55
    ab54:	20003aa4 	.word	0x20003aa4
    ab58:	000159c3 	.word	0x000159c3
    ab5c:	00015a12 	.word	0x00015a12
    ab60:	00016f6e 	.word	0x00016f6e
    ab64:	00017ebd 	.word	0x00017ebd

0000ab68 <ticker_update_slave_assert>:
{
    ab68:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ab6a:	b1a0      	cbz	r0, ab96 <ticker_update_slave_assert+0x2e>
    ab6c:	4b0b      	ldr	r3, [pc, #44]	; (ab9c <ticker_update_slave_assert+0x34>)
    ab6e:	7c9b      	ldrb	r3, [r3, #18]
    ab70:	b2c9      	uxtb	r1, r1
    ab72:	4299      	cmp	r1, r3
    ab74:	d00f      	beq.n	ab96 <ticker_update_slave_assert+0x2e>
    ab76:	4b0a      	ldr	r3, [pc, #40]	; (aba0 <ticker_update_slave_assert+0x38>)
    ab78:	9301      	str	r3, [sp, #4]
    ab7a:	9300      	str	r3, [sp, #0]
    ab7c:	4b09      	ldr	r3, [pc, #36]	; (aba4 <ticker_update_slave_assert+0x3c>)
    ab7e:	4a0a      	ldr	r2, [pc, #40]	; (aba8 <ticker_update_slave_assert+0x40>)
    ab80:	681c      	ldr	r4, [r3, #0]
    ab82:	490a      	ldr	r1, [pc, #40]	; (abac <ticker_update_slave_assert+0x44>)
    ab84:	4b0a      	ldr	r3, [pc, #40]	; (abb0 <ticker_update_slave_assert+0x48>)
    ab86:	480b      	ldr	r0, [pc, #44]	; (abb4 <ticker_update_slave_assert+0x4c>)
    ab88:	47a0      	blx	r4
    ab8a:	4040      	eors	r0, r0
    ab8c:	f380 8811 	msr	BASEPRI, r0
    ab90:	f04f 0004 	mov.w	r0, #4
    ab94:	df02      	svc	2
}
    ab96:	b002      	add	sp, #8
    ab98:	bd10      	pop	{r4, pc}
    ab9a:	bf00      	nop
    ab9c:	200008f0 	.word	0x200008f0
    aba0:	00014c55 	.word	0x00014c55
    aba4:	20003aa4 	.word	0x20003aa4
    aba8:	000159c3 	.word	0x000159c3
    abac:	00015a12 	.word	0x00015a12
    abb0:	00016f87 	.word	0x00016f87
    abb4:	00017f0c 	.word	0x00017f0c

0000abb8 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    abb8:	b513      	push	{r0, r1, r4, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    abba:	b178      	cbz	r0, abdc <ticker_op_latency_cancelled+0x24>
    abbc:	4b0b      	ldr	r3, [pc, #44]	; (abec <ticker_op_latency_cancelled+0x34>)
    abbe:	9301      	str	r3, [sp, #4]
    abc0:	9300      	str	r3, [sp, #0]
    abc2:	4b0b      	ldr	r3, [pc, #44]	; (abf0 <ticker_op_latency_cancelled+0x38>)
    abc4:	4a0b      	ldr	r2, [pc, #44]	; (abf4 <ticker_op_latency_cancelled+0x3c>)
    abc6:	681c      	ldr	r4, [r3, #0]
    abc8:	490b      	ldr	r1, [pc, #44]	; (abf8 <ticker_op_latency_cancelled+0x40>)
    abca:	4b0c      	ldr	r3, [pc, #48]	; (abfc <ticker_op_latency_cancelled+0x44>)
    abcc:	480c      	ldr	r0, [pc, #48]	; (ac00 <ticker_op_latency_cancelled+0x48>)
    abce:	47a0      	blx	r4
    abd0:	4040      	eors	r0, r0
    abd2:	f380 8811 	msr	BASEPRI, r0
    abd6:	f04f 0004 	mov.w	r0, #4
    abda:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    abdc:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    abe0:	f360 0341 	bfi	r3, r0, #1, #1
    abe4:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    abe8:	b002      	add	sp, #8
    abea:	bd10      	pop	{r4, pc}
    abec:	00014c55 	.word	0x00014c55
    abf0:	20003aa4 	.word	0x20003aa4
    abf4:	000159c3 	.word	0x000159c3
    abf8:	00015a12 	.word	0x00015a12
    abfc:	00017265 	.word	0x00017265
    ac00:	00017dde 	.word	0x00017dde

0000ac04 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    ac04:	4b04      	ldr	r3, [pc, #16]	; (ac18 <ticker_job_disable+0x14>)
    ac06:	7d1b      	ldrb	r3, [r3, #20]
    ac08:	b123      	cbz	r3, ac14 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    ac0a:	2101      	movs	r1, #1
    ac0c:	2200      	movs	r2, #0
    ac0e:	4608      	mov	r0, r1
    ac10:	f7fc b99c 	b.w	6f4c <mayfly_enable>
    ac14:	4770      	bx	lr
    ac16:	bf00      	nop
    ac18:	200008f0 	.word	0x200008f0

0000ac1c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ac1c:	2806      	cmp	r0, #6
{
    ac1e:	b510      	push	{r4, lr}
    ac20:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ac22:	d90a      	bls.n	ac3a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ac24:	4b09      	ldr	r3, [pc, #36]	; (ac4c <hdr_conn_get+0x30>)
    ac26:	1fc2      	subs	r2, r0, #7
    ac28:	b292      	uxth	r2, r2
    ac2a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    ac2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    ac32:	f7fc f91d 	bl	6e70 <mem_get>
    ac36:	6020      	str	r0, [r4, #0]
    ac38:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    ac3a:	2805      	cmp	r0, #5
    ac3c:	d004      	beq.n	ac48 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    ac3e:	2806      	cmp	r0, #6
	return NULL;
    ac40:	4803      	ldr	r0, [pc, #12]	; (ac50 <hdr_conn_get+0x34>)
    ac42:	bf18      	it	ne
    ac44:	2000      	movne	r0, #0
    ac46:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    ac48:	4802      	ldr	r0, [pc, #8]	; (ac54 <hdr_conn_get+0x38>)
}
    ac4a:	bd10      	pop	{r4, pc}
    ac4c:	200008f0 	.word	0x200008f0
    ac50:	200009c0 	.word	0x200009c0
    ac54:	20000908 	.word	0x20000908

0000ac58 <event_stop.part.10>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    ac58:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    ac5a:	4b08      	ldr	r3, [pc, #32]	; (ac7c <event_stop.part.10+0x24>)
    ac5c:	9301      	str	r3, [sp, #4]
    ac5e:	9300      	str	r3, [sp, #0]
    ac60:	4b07      	ldr	r3, [pc, #28]	; (ac80 <event_stop.part.10+0x28>)
    ac62:	4a08      	ldr	r2, [pc, #32]	; (ac84 <event_stop.part.10+0x2c>)
    ac64:	681c      	ldr	r4, [r3, #0]
    ac66:	4908      	ldr	r1, [pc, #32]	; (ac88 <event_stop.part.10+0x30>)
    ac68:	4b08      	ldr	r3, [pc, #32]	; (ac8c <event_stop.part.10+0x34>)
    ac6a:	4809      	ldr	r0, [pc, #36]	; (ac90 <event_stop.part.10+0x38>)
    ac6c:	47a0      	blx	r4
    ac6e:	4040      	eors	r0, r0
    ac70:	f380 8811 	msr	BASEPRI, r0
    ac74:	f04f 0004 	mov.w	r0, #4
    ac78:	df02      	svc	2
    ac7a:	bf00      	nop
    ac7c:	00014c55 	.word	0x00014c55
    ac80:	20003aa4 	.word	0x20003aa4
    ac84:	000159c3 	.word	0x000159c3
    ac88:	00015a12 	.word	0x00015a12
    ac8c:	00017086 	.word	0x00017086
    ac90:	000179f3 	.word	0x000179f3

0000ac94 <event_stop>:
	s_mfy_radio_stop.param = context;
    ac94:	4a06      	ldr	r2, [pc, #24]	; (acb0 <event_stop+0x1c>)
{
    ac96:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    ac98:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ac9a:	4613      	mov	r3, r2
    ac9c:	2200      	movs	r2, #0
    ac9e:	4611      	mov	r1, r2
    aca0:	4610      	mov	r0, r2
    aca2:	f7fc f97b 	bl	6f9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    aca6:	b108      	cbz	r0, acac <event_stop+0x18>
    aca8:	f7ff ffd6 	bl	ac58 <event_stop.part.10>
    acac:	bd08      	pop	{r3, pc}
    acae:	bf00      	nop
    acb0:	20003db8 	.word	0x20003db8

0000acb4 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    acb4:	2200      	movs	r2, #0
{
    acb6:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    acb8:	4b0b      	ldr	r3, [pc, #44]	; (ace8 <event_active+0x34>)
    acba:	4611      	mov	r1, r2
    acbc:	4610      	mov	r0, r2
    acbe:	f7fc f96d 	bl	6f9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    acc2:	b178      	cbz	r0, ace4 <event_active+0x30>
    acc4:	4b09      	ldr	r3, [pc, #36]	; (acec <event_active+0x38>)
    acc6:	9301      	str	r3, [sp, #4]
    acc8:	9300      	str	r3, [sp, #0]
    acca:	4b09      	ldr	r3, [pc, #36]	; (acf0 <event_active+0x3c>)
    accc:	4a09      	ldr	r2, [pc, #36]	; (acf4 <event_active+0x40>)
    acce:	681c      	ldr	r4, [r3, #0]
    acd0:	4909      	ldr	r1, [pc, #36]	; (acf8 <event_active+0x44>)
    acd2:	4b0a      	ldr	r3, [pc, #40]	; (acfc <event_active+0x48>)
    acd4:	480a      	ldr	r0, [pc, #40]	; (ad00 <event_active+0x4c>)
    acd6:	47a0      	blx	r4
    acd8:	4040      	eors	r0, r0
    acda:	f380 8811 	msr	BASEPRI, r0
    acde:	f04f 0004 	mov.w	r0, #4
    ace2:	df02      	svc	2
}
    ace4:	b002      	add	sp, #8
    ace6:	bd10      	pop	{r4, pc}
    ace8:	20003d88 	.word	0x20003d88
    acec:	00014c55 	.word	0x00014c55
    acf0:	20003aa4 	.word	0x20003aa4
    acf4:	000159c3 	.word	0x000159c3
    acf8:	00015a12 	.word	0x00015a12
    acfc:	00016fb6 	.word	0x00016fb6
    ad00:	000179f3 	.word	0x000179f3

0000ad04 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad04:	2200      	movs	r2, #0
{
    ad06:	b513      	push	{r0, r1, r4, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ad08:	4b0b      	ldr	r3, [pc, #44]	; (ad38 <event_xtal+0x34>)
    ad0a:	4611      	mov	r1, r2
    ad0c:	4610      	mov	r0, r2
    ad0e:	f7fc f945 	bl	6f9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    ad12:	b178      	cbz	r0, ad34 <event_xtal+0x30>
    ad14:	4b09      	ldr	r3, [pc, #36]	; (ad3c <event_xtal+0x38>)
    ad16:	9301      	str	r3, [sp, #4]
    ad18:	9300      	str	r3, [sp, #0]
    ad1a:	4b09      	ldr	r3, [pc, #36]	; (ad40 <event_xtal+0x3c>)
    ad1c:	4a09      	ldr	r2, [pc, #36]	; (ad44 <event_xtal+0x40>)
    ad1e:	681c      	ldr	r4, [r3, #0]
    ad20:	4909      	ldr	r1, [pc, #36]	; (ad48 <event_xtal+0x44>)
    ad22:	4b0a      	ldr	r3, [pc, #40]	; (ad4c <event_xtal+0x48>)
    ad24:	480a      	ldr	r0, [pc, #40]	; (ad50 <event_xtal+0x4c>)
    ad26:	47a0      	blx	r4
    ad28:	4040      	eors	r0, r0
    ad2a:	f380 8811 	msr	BASEPRI, r0
    ad2e:	f04f 0004 	mov.w	r0, #4
    ad32:	df02      	svc	2
}
    ad34:	b002      	add	sp, #8
    ad36:	bd10      	pop	{r4, pc}
    ad38:	20003e08 	.word	0x20003e08
    ad3c:	00014c55 	.word	0x00014c55
    ad40:	20003aa4 	.word	0x20003aa4
    ad44:	000159c3 	.word	0x000159c3
    ad48:	00015a12 	.word	0x00015a12
    ad4c:	00016fd2 	.word	0x00016fd2
    ad50:	000179f3 	.word	0x000179f3

0000ad54 <mayfly_radio_active>:
{
    ad54:	b513      	push	{r0, r1, r4, lr}
    ad56:	4a12      	ldr	r2, [pc, #72]	; (ada0 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    ad58:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    ad5a:	b140      	cbz	r0, ad6e <mayfly_radio_active+0x1a>
		if (s_active++) {
    ad5c:	1c59      	adds	r1, r3, #1
    ad5e:	7011      	strb	r1, [r2, #0]
    ad60:	b9db      	cbnz	r3, ad9a <mayfly_radio_active+0x46>
		radio_active_callback(1);
    ad62:	2001      	movs	r0, #1
}
    ad64:	b002      	add	sp, #8
    ad66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    ad6a:	f006 ba11 	b.w	11190 <radio_active_callback>
		LL_ASSERT(s_active);
    ad6e:	b97b      	cbnz	r3, ad90 <mayfly_radio_active+0x3c>
    ad70:	4b0c      	ldr	r3, [pc, #48]	; (ada4 <mayfly_radio_active+0x50>)
    ad72:	9301      	str	r3, [sp, #4]
    ad74:	9300      	str	r3, [sp, #0]
    ad76:	4b0c      	ldr	r3, [pc, #48]	; (ada8 <mayfly_radio_active+0x54>)
    ad78:	4a0c      	ldr	r2, [pc, #48]	; (adac <mayfly_radio_active+0x58>)
    ad7a:	681c      	ldr	r4, [r3, #0]
    ad7c:	490c      	ldr	r1, [pc, #48]	; (adb0 <mayfly_radio_active+0x5c>)
    ad7e:	4b0d      	ldr	r3, [pc, #52]	; (adb4 <mayfly_radio_active+0x60>)
    ad80:	480d      	ldr	r0, [pc, #52]	; (adb8 <mayfly_radio_active+0x64>)
    ad82:	47a0      	blx	r4
    ad84:	4040      	eors	r0, r0
    ad86:	f380 8811 	msr	BASEPRI, r0
    ad8a:	f04f 0004 	mov.w	r0, #4
    ad8e:	df02      	svc	2
		if (--s_active) {
    ad90:	3b01      	subs	r3, #1
    ad92:	b2db      	uxtb	r3, r3
    ad94:	7013      	strb	r3, [r2, #0]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d0e4      	beq.n	ad64 <mayfly_radio_active+0x10>
}
    ad9a:	b002      	add	sp, #8
    ad9c:	bd10      	pop	{r4, pc}
    ad9e:	bf00      	nop
    ada0:	20000a94 	.word	0x20000a94
    ada4:	00014c55 	.word	0x00014c55
    ada8:	20003aa4 	.word	0x20003aa4
    adac:	000159c3 	.word	0x000159c3
    adb0:	00015a12 	.word	0x00015a12
    adb4:	00016fa2 	.word	0x00016fa2
    adb8:	00017948 	.word	0x00017948

0000adbc <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    adbc:	2000      	movs	r0, #0
    adbe:	f7ff bfc9 	b.w	ad54 <mayfly_radio_active>
	...

0000adc4 <mayfly_radio_stop>:
{
    adc4:	b513      	push	{r0, r1, r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    adc6:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    adc8:	1f03      	subs	r3, r0, #4
    adca:	2b01      	cmp	r3, #1
    adcc:	d90f      	bls.n	adee <mayfly_radio_stop+0x2a>
    adce:	4b11      	ldr	r3, [pc, #68]	; (ae14 <mayfly_radio_stop+0x50>)
    add0:	9301      	str	r3, [sp, #4]
    add2:	9300      	str	r3, [sp, #0]
    add4:	4b10      	ldr	r3, [pc, #64]	; (ae18 <mayfly_radio_stop+0x54>)
    add6:	4a11      	ldr	r2, [pc, #68]	; (ae1c <mayfly_radio_stop+0x58>)
    add8:	681c      	ldr	r4, [r3, #0]
    adda:	4911      	ldr	r1, [pc, #68]	; (ae20 <mayfly_radio_stop+0x5c>)
    addc:	4b11      	ldr	r3, [pc, #68]	; (ae24 <mayfly_radio_stop+0x60>)
    adde:	4812      	ldr	r0, [pc, #72]	; (ae28 <mayfly_radio_stop+0x64>)
    ade0:	47a0      	blx	r4
    ade2:	4040      	eors	r0, r0
    ade4:	f380 8811 	msr	BASEPRI, r0
    ade8:	f04f 0004 	mov.w	r0, #4
    adec:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    adee:	4a0f      	ldr	r2, [pc, #60]	; (ae2c <mayfly_radio_stop+0x68>)
    adf0:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    adf2:	b143      	cbz	r3, ae06 <mayfly_radio_stop+0x42>
	radio_used = ((_radio.state != STATE_NONE) &&
    adf4:	3b04      	subs	r3, #4
    adf6:	2b01      	cmp	r3, #1
    adf8:	d905      	bls.n	ae06 <mayfly_radio_stop+0x42>
			_radio.state = state;
    adfa:	7510      	strb	r0, [r2, #20]
}
    adfc:	b002      	add	sp, #8
    adfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    ae02:	f007 bb89 	b.w	12518 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ae06:	f007 fbb9 	bl	1257c <radio_is_idle>
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d0f6      	beq.n	adfc <mayfly_radio_stop+0x38>
}
    ae0e:	b002      	add	sp, #8
    ae10:	bd10      	pop	{r4, pc}
    ae12:	bf00      	nop
    ae14:	00014c55 	.word	0x00014c55
    ae18:	20003aa4 	.word	0x20003aa4
    ae1c:	000159c3 	.word	0x000159c3
    ae20:	00015a12 	.word	0x00015a12
    ae24:	00017074 	.word	0x00017074
    ae28:	00017972 	.word	0x00017972
    ae2c:	200008f0 	.word	0x200008f0

0000ae30 <pdu_node_tx_release>:
{
    ae30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ae32:	4a18      	ldr	r2, [pc, #96]	; (ae94 <pdu_node_tx_release+0x64>)
    ae34:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
	if (last == _radio.packet_tx_count) {
    ae38:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
	last = _radio.packet_release_last + 1;
    ae3c:	3301      	adds	r3, #1
    ae3e:	b2db      	uxtb	r3, r3
		last = 0;
    ae40:	429c      	cmp	r4, r3
    ae42:	bf08      	it	eq
    ae44:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    ae46:	f892 4177 	ldrb.w	r4, [r2, #375]	; 0x177
    ae4a:	429c      	cmp	r4, r3
    ae4c:	d10f      	bne.n	ae6e <pdu_node_tx_release+0x3e>
    ae4e:	4b12      	ldr	r3, [pc, #72]	; (ae98 <pdu_node_tx_release+0x68>)
    ae50:	9301      	str	r3, [sp, #4]
    ae52:	9300      	str	r3, [sp, #0]
    ae54:	4b11      	ldr	r3, [pc, #68]	; (ae9c <pdu_node_tx_release+0x6c>)
    ae56:	4a12      	ldr	r2, [pc, #72]	; (aea0 <pdu_node_tx_release+0x70>)
    ae58:	681c      	ldr	r4, [r3, #0]
    ae5a:	4912      	ldr	r1, [pc, #72]	; (aea4 <pdu_node_tx_release+0x74>)
    ae5c:	4b12      	ldr	r3, [pc, #72]	; (aea8 <pdu_node_tx_release+0x78>)
    ae5e:	4813      	ldr	r0, [pc, #76]	; (aeac <pdu_node_tx_release+0x7c>)
    ae60:	47a0      	blx	r4
    ae62:	4040      	eors	r0, r0
    ae64:	f380 8811 	msr	BASEPRI, r0
    ae68:	f04f 0004 	mov.w	r0, #4
    ae6c:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    ae6e:	f892 5178 	ldrb.w	r5, [r2, #376]	; 0x178
    ae72:	f8d2 4170 	ldr.w	r4, [r2, #368]	; 0x170
    ae76:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ae7a:	f892 0178 	ldrb.w	r0, [r2, #376]	; 0x178
    ae7e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    ae82:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    ae84:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
}
    ae88:	b003      	add	sp, #12
    ae8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    ae8e:	f006 b981 	b.w	11194 <radio_event_callback>
    ae92:	bf00      	nop
    ae94:	200008f0 	.word	0x200008f0
    ae98:	00014c55 	.word	0x00014c55
    ae9c:	20003aa4 	.word	0x20003aa4
    aea0:	000159c3 	.word	0x000159c3
    aea4:	00015a12 	.word	0x00015a12
    aea8:	000171bc 	.word	0x000171bc
    aeac:	00017ac3 	.word	0x00017ac3

0000aeb0 <packet_tx_enqueue>:
{
    aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    aeb4:	4c24      	ldr	r4, [pc, #144]	; (af48 <packet_tx_enqueue+0x98>)
{
    aeb6:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    aeb8:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    aeba:	b12e      	cbz	r6, aec8 <packet_tx_enqueue+0x18>
    aebc:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
    aec0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
    aec4:	429a      	cmp	r2, r3
    aec6:	d101      	bne.n	aecc <packet_tx_enqueue+0x1c>
    aec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    aecc:	f894 8175 	ldrb.w	r8, [r4, #373]	; 0x175
    aed0:	f8d4 916c 	ldr.w	r9, [r4, #364]	; 0x16c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aed4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    aed8:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    aedc:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aee0:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    aee4:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    aee6:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    aee8:	f7fb ffc2 	bl	6e70 <mem_get>
    aeec:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    aeee:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    aef2:	8c1a      	ldrh	r2, [r3, #32]
    aef4:	4282      	cmp	r2, r0
    aef6:	d11f      	bne.n	af38 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    aef8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    aefc:	b942      	cbnz	r2, af10 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    aefe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    af02:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    af06:	b91a      	cbnz	r2, af10 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    af08:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    af0c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    af10:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    af14:	b102      	cbz	r2, af18 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    af16:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    af18:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    af1c:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
		if (first == _radio.packet_tx_count) {
    af20:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
		first = _radio.packet_tx_first + 1;
    af24:	3301      	adds	r3, #1
    af26:	b2db      	uxtb	r3, r3
			first = 0;
    af28:	429a      	cmp	r2, r3
    af2a:	bf08      	it	eq
    af2c:	2300      	moveq	r3, #0
    af2e:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    af30:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
    af34:	b2f6      	uxtb	r6, r6
    af36:	e7c0      	b.n	aeba <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    af38:	792b      	ldrb	r3, [r5, #4]
    af3a:	f367 0301 	bfi	r3, r7, #0, #2
    af3e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    af40:	4629      	mov	r1, r5
    af42:	f7ff ff75 	bl	ae30 <pdu_node_tx_release>
    af46:	e7e9      	b.n	af1c <packet_tx_enqueue+0x6c>
    af48:	200008f0 	.word	0x200008f0

0000af4c <connection_release>:
{
    af4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    af4e:	2201      	movs	r2, #1
{
    af50:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    af52:	4611      	mov	r1, r2
    af54:	2000      	movs	r0, #0
    af56:	f7fb fff9 	bl	6f4c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    af5a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    af5e:	2100      	movs	r1, #0
    af60:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    af64:	3207      	adds	r2, #7
	ticker_status =
    af66:	9300      	str	r3, [sp, #0]
    af68:	4608      	mov	r0, r1
    af6a:	4b3f      	ldr	r3, [pc, #252]	; (b068 <connection_release+0x11c>)
    af6c:	b2d2      	uxtb	r2, r2
    af6e:	f7fc fe73 	bl	7c58 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    af72:	f030 0102 	bics.w	r1, r0, #2
    af76:	d00f      	beq.n	af98 <connection_release+0x4c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    af78:	4b3c      	ldr	r3, [pc, #240]	; (b06c <connection_release+0x120>)
    af7a:	9301      	str	r3, [sp, #4]
    af7c:	9300      	str	r3, [sp, #0]
    af7e:	4b3c      	ldr	r3, [pc, #240]	; (b070 <connection_release+0x124>)
    af80:	4a3c      	ldr	r2, [pc, #240]	; (b074 <connection_release+0x128>)
    af82:	681c      	ldr	r4, [r3, #0]
    af84:	493c      	ldr	r1, [pc, #240]	; (b078 <connection_release+0x12c>)
    af86:	4b3d      	ldr	r3, [pc, #244]	; (b07c <connection_release+0x130>)
    af88:	483d      	ldr	r0, [pc, #244]	; (b080 <connection_release+0x134>)
    af8a:	47a0      	blx	r4
    af8c:	4040      	eors	r0, r0
    af8e:	f380 8811 	msr	BASEPRI, r0
    af92:	f04f 0004 	mov.w	r0, #4
    af96:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    af98:	4b3a      	ldr	r3, [pc, #232]	; (b084 <connection_release+0x138>)
    af9a:	7d1a      	ldrb	r2, [r3, #20]
    af9c:	2a05      	cmp	r2, #5
    af9e:	461d      	mov	r5, r3
    afa0:	d11b      	bne.n	afda <connection_release+0x8e>
					  conn->handle))) {
    afa2:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    afa4:	7c18      	ldrb	r0, [r3, #16]
    afa6:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    afa8:	4290      	cmp	r0, r2
    afaa:	d116      	bne.n	afda <connection_release+0x8e>
		_radio.ticker_id_prepare = 0;
    afac:	7419      	strb	r1, [r3, #16]
		ticker_status =
    afae:	f242 23fb 	movw	r3, #8955	; 0x22fb
    afb2:	9300      	str	r3, [sp, #0]
    afb4:	2201      	movs	r2, #1
    afb6:	4b2c      	ldr	r3, [pc, #176]	; (b068 <connection_release+0x11c>)
    afb8:	4608      	mov	r0, r1
    afba:	f7fc fe4d 	bl	7c58 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afbe:	f030 0202 	bics.w	r2, r0, #2
    afc2:	d1d9      	bne.n	af78 <connection_release+0x2c>
		ticker_status =
    afc4:	f242 3302 	movw	r3, #8962	; 0x2302
    afc8:	9300      	str	r3, [sp, #0]
    afca:	4611      	mov	r1, r2
    afcc:	4b26      	ldr	r3, [pc, #152]	; (b068 <connection_release+0x11c>)
    afce:	4610      	mov	r0, r2
    afd0:	f7fc fe42 	bl	7c58 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afd4:	f030 0302 	bics.w	r3, r0, #2
    afd8:	d1ce      	bne.n	af78 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    afda:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    afde:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    afe2:	4299      	cmp	r1, r3
    afe4:	d003      	beq.n	afee <connection_release+0xa2>
    afe6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    afea:	4299      	cmp	r1, r3
    afec:	d101      	bne.n	aff2 <connection_release+0xa6>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    afee:	4e26      	ldr	r6, [pc, #152]	; (b088 <connection_release+0x13c>)
    aff0:	e012      	b.n	b018 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    aff2:	790b      	ldrb	r3, [r1, #4]
    aff4:	f36f 0301 	bfc	r3, #0, #2
    aff8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    affa:	680b      	ldr	r3, [r1, #0]
    affc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b000:	8c20      	ldrh	r0, [r4, #32]
    b002:	f7ff ff15 	bl	ae30 <pdu_node_tx_release>
    b006:	e7e8      	b.n	afda <connection_release+0x8e>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b008:	6803      	ldr	r3, [r0, #0]
    b00a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b00e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b012:	4631      	mov	r1, r6
    b014:	f7fb ff11 	bl	6e3a <mem_release>
	while ((conn->pkt_tx_head) &&
    b018:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b01c:	b118      	cbz	r0, b026 <connection_release+0xda>
    b01e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b022:	4298      	cmp	r0, r3
    b024:	d1f0      	bne.n	b008 <connection_release+0xbc>
	conn->pkt_tx_ctrl = NULL;
    b026:	2300      	movs	r3, #0
    b028:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b02c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b030:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b034:	b951      	cbnz	r1, b04c <connection_release+0x100>
	conn->handle = 0xffff;
    b036:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b03a:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b03c:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    b040:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b042:	bf08      	it	eq
    b044:	f8c5 1188 	streq.w	r1, [r5, #392]	; 0x188
}
    b048:	b002      	add	sp, #8
    b04a:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b04c:	790b      	ldrb	r3, [r1, #4]
    b04e:	f36f 0301 	bfc	r3, #0, #2
    b052:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b054:	680b      	ldr	r3, [r1, #0]
    b056:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b05a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b05e:	8c20      	ldrh	r0, [r4, #32]
    b060:	f7ff fee6 	bl	ae30 <pdu_node_tx_release>
    b064:	e7e4      	b.n	b030 <connection_release+0xe4>
    b066:	bf00      	nop
    b068:	0000a9fd 	.word	0x0000a9fd
    b06c:	00014c55 	.word	0x00014c55
    b070:	20003aa4 	.word	0x20003aa4
    b074:	000159c3 	.word	0x000159c3
    b078:	00015a12 	.word	0x00015a12
    b07c:	000171d0 	.word	0x000171d0
    b080:	000172b9 	.word	0x000172b9
    b084:	200008f0 	.word	0x200008f0
    b088:	20000a4c 	.word	0x20000a4c

0000b08c <chan_set>:
	switch (chan) {
    b08c:	2826      	cmp	r0, #38	; 0x26
{
    b08e:	b513      	push	{r0, r1, r4, lr}
    b090:	4604      	mov	r4, r0
	switch (chan) {
    b092:	d00c      	beq.n	b0ae <chan_set+0x22>
    b094:	2827      	cmp	r0, #39	; 0x27
    b096:	d00c      	beq.n	b0b2 <chan_set+0x26>
    b098:	2825      	cmp	r0, #37	; 0x25
    b09a:	d10c      	bne.n	b0b6 <chan_set+0x2a>
		radio_freq_chan_set(2);
    b09c:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    b09e:	f007 f9b7 	bl	12410 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    b0a2:	4620      	mov	r0, r4
}
    b0a4:	b002      	add	sp, #8
    b0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    b0aa:	f007 b9b7 	b.w	1241c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    b0ae:	201a      	movs	r0, #26
    b0b0:	e7f5      	b.n	b09e <chan_set+0x12>
		radio_freq_chan_set(80);
    b0b2:	2050      	movs	r0, #80	; 0x50
    b0b4:	e7f3      	b.n	b09e <chan_set+0x12>
		if (chan < 11) {
    b0b6:	280a      	cmp	r0, #10
    b0b8:	d802      	bhi.n	b0c0 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    b0ba:	3002      	adds	r0, #2
    b0bc:	0040      	lsls	r0, r0, #1
    b0be:	e7ee      	b.n	b09e <chan_set+0x12>
		} else if (chan < 40) {
    b0c0:	2827      	cmp	r0, #39	; 0x27
    b0c2:	d801      	bhi.n	b0c8 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    b0c4:	3003      	adds	r0, #3
    b0c6:	e7f9      	b.n	b0bc <chan_set+0x30>
			LL_ASSERT(0);
    b0c8:	4b07      	ldr	r3, [pc, #28]	; (b0e8 <chan_set+0x5c>)
    b0ca:	9301      	str	r3, [sp, #4]
    b0cc:	9300      	str	r3, [sp, #0]
    b0ce:	4b07      	ldr	r3, [pc, #28]	; (b0ec <chan_set+0x60>)
    b0d0:	4a07      	ldr	r2, [pc, #28]	; (b0f0 <chan_set+0x64>)
    b0d2:	681c      	ldr	r4, [r3, #0]
    b0d4:	4907      	ldr	r1, [pc, #28]	; (b0f4 <chan_set+0x68>)
    b0d6:	4b08      	ldr	r3, [pc, #32]	; (b0f8 <chan_set+0x6c>)
    b0d8:	4808      	ldr	r0, [pc, #32]	; (b0fc <chan_set+0x70>)
    b0da:	47a0      	blx	r4
    b0dc:	4040      	eors	r0, r0
    b0de:	f380 8811 	msr	BASEPRI, r0
    b0e2:	f04f 0004 	mov.w	r0, #4
    b0e6:	df02      	svc	2
    b0e8:	00014c55 	.word	0x00014c55
    b0ec:	20003aa4 	.word	0x20003aa4
    b0f0:	000159c3 	.word	0x000159c3
    b0f4:	00015a12 	.word	0x00015a12
    b0f8:	000170a6 	.word	0x000170a6
    b0fc:	00015962 	.word	0x00015962

0000b100 <adv_setup>:
{
    b100:	b570      	push	{r4, r5, r6, lr}
	if (_radio.advertiser.adv_data.first !=
    b102:	4c31      	ldr	r4, [pc, #196]	; (b1c8 <adv_setup+0xc8>)
    b104:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    b108:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    b10c:	429a      	cmp	r2, r3
    b10e:	d051      	beq.n	b1b4 <adv_setup+0xb4>
		first = _radio.advertiser.adv_data.first + 1;
    b110:	3301      	adds	r3, #1
    b112:	b2db      	uxtb	r3, r3
			first = 0;
    b114:	2b02      	cmp	r3, #2
    b116:	bf08      	it	eq
    b118:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    b11a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
		upd = 1;
    b11e:	2201      	movs	r2, #1
	if (_radio.advertiser.scan_data.first != _radio.
    b120:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    b124:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    b128:	4299      	cmp	r1, r3
    b12a:	d007      	beq.n	b13c <adv_setup+0x3c>
		first = _radio.advertiser.scan_data.first + 1;
    b12c:	3301      	adds	r3, #1
    b12e:	b2db      	uxtb	r3, r3
			first = 0;
    b130:	2b02      	cmp	r3, #2
    b132:	bf08      	it	eq
    b134:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    b136:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		upd = 1;
    b13a:	2201      	movs	r2, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    b13c:	f894 5079 	ldrb.w	r5, [r4, #121]	; 0x79
    b140:	2327      	movs	r3, #39	; 0x27
    b142:	212b      	movs	r1, #43	; 0x2b
    b144:	fb13 1505 	smlabb	r5, r3, r5, r1
    b148:	1966      	adds	r6, r4, r5
	if (upd) {
    b14a:	b142      	cbz	r2, b15e <adv_setup+0x5e>
		struct pdu_adv *scan_pdu = (void *)
    b14c:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    b150:	fb03 4000 	mla	r0, r3, r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    b154:	2206      	movs	r2, #6
    b156:	1cb1      	adds	r1, r6, #2
    b158:	307d      	adds	r0, #125	; 0x7d
    b15a:	f7f6 fd61 	bl	1c20 <memcpy>
	radio_pkt_tx_set(pdu);
    b15e:	4630      	mov	r0, r6
    b160:	f007 f9ba 	bl	124d8 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    b164:	5d63      	ldrb	r3, [r4, r5]
    b166:	f003 030f 	and.w	r3, r3, #15
    b16a:	2b02      	cmp	r3, #2
    b16c:	d024      	beq.n	b1b8 <adv_setup+0xb8>
    b16e:	2b07      	cmp	r3, #7
    b170:	d022      	beq.n	b1b8 <adv_setup+0xb8>
		_radio.state = STATE_TX;
    b172:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    b174:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    b176:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    b178:	f007 fac4 	bl	12704 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b17c:	2000      	movs	r0, #0
    b17e:	f007 fa25 	bl	125cc <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    b182:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b186:	f3c3 0202 	ubfx	r2, r3, #0, #3
    b18a:	b2d3      	uxtb	r3, r2
    b18c:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    b18e:	2000      	movs	r0, #0
    b190:	07ce      	lsls	r6, r1, #31
    b192:	f100 0501 	add.w	r5, r0, #1
    b196:	d514      	bpl.n	b1c2 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
    b198:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    b19a:	4013      	ands	r3, r2
    b19c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b1a0:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    b1a2:	f363 0202 	bfi	r2, r3, #0, #3
    b1a6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    b1aa:	3025      	adds	r0, #37	; 0x25
}
    b1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chan_set(37 + chan);
    b1b0:	f7ff bf6c 	b.w	b08c <chan_set>
	u8_t upd = 0;
    b1b4:	2200      	movs	r2, #0
    b1b6:	e7b3      	b.n	b120 <adv_setup+0x20>
		_radio.state = STATE_CLOSE;
    b1b8:	2303      	movs	r3, #3
    b1ba:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    b1bc:	f007 fa1c 	bl	125f8 <radio_switch_complete_and_disable>
    b1c0:	e7df      	b.n	b182 <adv_setup+0x82>
		bitmap >>= 1;
    b1c2:	0849      	lsrs	r1, r1, #1
    b1c4:	4628      	mov	r0, r5
    b1c6:	e7e3      	b.n	b190 <adv_setup+0x90>
    b1c8:	200008f0 	.word	0x200008f0
    b1cc:	00000000 	.word	0x00000000

0000b1d0 <sched_after_mstr_free_offset_get>:
{
    b1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b1d2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    b1d4:	aa04      	add	r2, sp, #16
{
    b1d6:	461c      	mov	r4, r3
    b1d8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    b1da:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    b1de:	3127      	adds	r1, #39	; 0x27
    b1e0:	2001      	movs	r0, #1
    b1e2:	f7ff fa29 	bl	a638 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    b1e6:	6823      	ldr	r3, [r4, #0]
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d02d      	beq.n	b248 <sched_after_mstr_free_offset_get+0x78>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    b1ec:	9803      	ldr	r0, [sp, #12]
    b1ee:	1b83      	subs	r3, r0, r6
    b1f0:	021b      	lsls	r3, r3, #8
    b1f2:	d50f      	bpl.n	b214 <sched_after_mstr_free_offset_get+0x44>
    b1f4:	4b1a      	ldr	r3, [pc, #104]	; (b260 <sched_after_mstr_free_offset_get+0x90>)
    b1f6:	9301      	str	r3, [sp, #4]
    b1f8:	9300      	str	r3, [sp, #0]
    b1fa:	4b1a      	ldr	r3, [pc, #104]	; (b264 <sched_after_mstr_free_offset_get+0x94>)
    b1fc:	4a1a      	ldr	r2, [pc, #104]	; (b268 <sched_after_mstr_free_offset_get+0x98>)
    b1fe:	681c      	ldr	r4, [r3, #0]
    b200:	491a      	ldr	r1, [pc, #104]	; (b26c <sched_after_mstr_free_offset_get+0x9c>)
    b202:	4b1b      	ldr	r3, [pc, #108]	; (b270 <sched_after_mstr_free_offset_get+0xa0>)
    b204:	481b      	ldr	r0, [pc, #108]	; (b274 <sched_after_mstr_free_offset_get+0xa4>)
    b206:	47a0      	blx	r4
    b208:	4040      	eors	r0, r0
    b20a:	f380 8811 	msr	BASEPRI, r0
    b20e:	f04f 0004 	mov.w	r0, #4
    b212:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b214:	4631      	mov	r1, r6
    b216:	f7fc fdf1 	bl	7dfc <ticker_ticks_diff_get>
    b21a:	4602      	mov	r2, r0
    b21c:	4816      	ldr	r0, [pc, #88]	; (b278 <sched_after_mstr_free_offset_get+0xa8>)
    b21e:	2307      	movs	r3, #7
    b220:	fba2 0100 	umull	r0, r1, r2, r0
    b224:	fb03 1102 	mla	r1, r3, r2, r1
    b228:	a30b      	add	r3, pc, #44	; (adr r3, b258 <sched_after_mstr_free_offset_get+0x88>)
    b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
    b22e:	f7f4 fff1 	bl	214 <__aeabi_uldivmod>
    b232:	6823      	ldr	r3, [r4, #0]
    b234:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    b236:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    b238:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    b23a:	db05      	blt.n	b248 <sched_after_mstr_free_offset_get+0x78>
		u32_t conn_interval_us = conn_interval * 1250;
    b23c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    b240:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    b242:	6823      	ldr	r3, [r4, #0]
    b244:	4298      	cmp	r0, r3
    b246:	d301      	bcc.n	b24c <sched_after_mstr_free_offset_get+0x7c>
}
    b248:	b004      	add	sp, #16
    b24a:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    b24c:	1a1b      	subs	r3, r3, r0
    b24e:	6023      	str	r3, [r4, #0]
    b250:	e7f7      	b.n	b242 <sched_after_mstr_free_offset_get+0x72>
    b252:	bf00      	nop
    b254:	f3af 8000 	nop.w
    b258:	3b9aca00 	.word	0x3b9aca00
    b25c:	00000000 	.word	0x00000000
    b260:	00014c55 	.word	0x00014c55
    b264:	20003aa4 	.word	0x20003aa4
    b268:	000159c3 	.word	0x000159c3
    b26c:	00015a12 	.word	0x00015a12
    b270:	00017038 	.word	0x00017038
    b274:	00017d1f 	.word	0x00017d1f
    b278:	1afd498d 	.word	0x1afd498d

0000b27c <mayfly_sched_win_offset_use>:
{
    b27c:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b27e:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    b282:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    b284:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    b288:	68c1      	ldr	r1, [r0, #12]
    b28a:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b28c:	f7ff ffa0 	bl	b1d0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b290:	a902      	add	r1, sp, #8
    b292:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b296:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b29a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b29e:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b2a2:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    b2a4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    b2a8:	f7f6 fcba 	bl	1c20 <memcpy>
}
    b2ac:	b002      	add	sp, #8
    b2ae:	bd10      	pop	{r4, pc}

0000b2b0 <mayfly_sched_after_mstr_free_offset_get>:
{
    b2b0:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b2b2:	4c05      	ldr	r4, [pc, #20]	; (b2c8 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    b2b4:	4602      	mov	r2, r0
    b2b6:	f504 7382 	add.w	r3, r4, #260	; 0x104
    b2ba:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    b2be:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    b2c2:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    b2c4:	f7ff bf84 	b.w	b1d0 <sched_after_mstr_free_offset_get>
    b2c8:	200008f0 	.word	0x200008f0

0000b2cc <terminate_ind_rx_enqueue>:
{
    b2cc:	b513      	push	{r0, r1, r4, lr}
    b2ce:	4603      	mov	r3, r0
    b2d0:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    b2d2:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    b2d6:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    b2da:	b978      	cbnz	r0, b2fc <terminate_ind_rx_enqueue+0x30>
    b2dc:	4b18      	ldr	r3, [pc, #96]	; (b340 <terminate_ind_rx_enqueue+0x74>)
    b2de:	9301      	str	r3, [sp, #4]
    b2e0:	9300      	str	r3, [sp, #0]
    b2e2:	4b18      	ldr	r3, [pc, #96]	; (b344 <terminate_ind_rx_enqueue+0x78>)
    b2e4:	4a18      	ldr	r2, [pc, #96]	; (b348 <terminate_ind_rx_enqueue+0x7c>)
    b2e6:	681c      	ldr	r4, [r3, #0]
    b2e8:	4918      	ldr	r1, [pc, #96]	; (b34c <terminate_ind_rx_enqueue+0x80>)
    b2ea:	4b19      	ldr	r3, [pc, #100]	; (b350 <terminate_ind_rx_enqueue+0x84>)
    b2ec:	4819      	ldr	r0, [pc, #100]	; (b354 <terminate_ind_rx_enqueue+0x88>)
	LL_ASSERT(link);
    b2ee:	47a0      	blx	r4
    b2f0:	4040      	eors	r0, r0
    b2f2:	f380 8811 	msr	BASEPRI, r0
    b2f6:	f04f 0004 	mov.w	r0, #4
    b2fa:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    b2fc:	8c1c      	ldrh	r4, [r3, #32]
    b2fe:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    b302:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b306:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b308:	4a13      	ldr	r2, [pc, #76]	; (b358 <terminate_ind_rx_enqueue+0x8c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    b30a:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    b30e:	f892 4178 	ldrb.w	r4, [r2, #376]	; 0x178
    b312:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    b316:	f502 72a8 	add.w	r2, r2, #336	; 0x150
    b31a:	f7fb fdce 	bl	6eba <memq_enqueue>
	LL_ASSERT(link);
    b31e:	b948      	cbnz	r0, b334 <terminate_ind_rx_enqueue+0x68>
    b320:	4b07      	ldr	r3, [pc, #28]	; (b340 <terminate_ind_rx_enqueue+0x74>)
    b322:	9301      	str	r3, [sp, #4]
    b324:	9300      	str	r3, [sp, #0]
    b326:	4b07      	ldr	r3, [pc, #28]	; (b344 <terminate_ind_rx_enqueue+0x78>)
    b328:	4a07      	ldr	r2, [pc, #28]	; (b348 <terminate_ind_rx_enqueue+0x7c>)
    b32a:	681c      	ldr	r4, [r3, #0]
    b32c:	4907      	ldr	r1, [pc, #28]	; (b34c <terminate_ind_rx_enqueue+0x80>)
    b32e:	4b08      	ldr	r3, [pc, #32]	; (b350 <terminate_ind_rx_enqueue+0x84>)
    b330:	480a      	ldr	r0, [pc, #40]	; (b35c <terminate_ind_rx_enqueue+0x90>)
    b332:	e7dc      	b.n	b2ee <terminate_ind_rx_enqueue+0x22>
}
    b334:	b002      	add	sp, #8
    b336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    b33a:	f005 bf2b 	b.w	11194 <radio_event_callback>
    b33e:	bf00      	nop
    b340:	00014c55 	.word	0x00014c55
    b344:	20003aa4 	.word	0x20003aa4
    b348:	000159c3 	.word	0x000159c3
    b34c:	00015a12 	.word	0x00015a12
    b350:	000171e3 	.word	0x000171e3
    b354:	00017da5 	.word	0x00017da5
    b358:	200008f0 	.word	0x200008f0
    b35c:	00017293 	.word	0x00017293

0000b360 <prepare_normal_set>:
{
    b360:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b362:	6804      	ldr	r4, [r0, #0]
    b364:	2c00      	cmp	r4, #0
{
    b366:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    b368:	da27      	bge.n	b3ba <prepare_normal_set+0x5a>
		u32_t ticks_prepare_to_start =
    b36a:	6843      	ldr	r3, [r0, #4]
    b36c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    b36e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    b370:	429d      	cmp	r5, r3
    b372:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    b376:	bf34      	ite	cc
    b378:	1ae4      	subcc	r4, r4, r3
    b37a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    b37c:	4b10      	ldr	r3, [pc, #64]	; (b3c0 <prepare_normal_set+0x60>)
    b37e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b380:	b2a4      	uxth	r4, r4
		ticker_status =
    b382:	2300      	movs	r3, #0
    b384:	9304      	str	r3, [sp, #16]
    b386:	9303      	str	r3, [sp, #12]
    b388:	9302      	str	r3, [sp, #8]
    b38a:	4618      	mov	r0, r3
    b38c:	9401      	str	r4, [sp, #4]
    b38e:	9400      	str	r4, [sp, #0]
    b390:	f7fc fc14 	bl	7bbc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b394:	f030 0302 	bics.w	r3, r0, #2
    b398:	d00f      	beq.n	b3ba <prepare_normal_set+0x5a>
    b39a:	4b0a      	ldr	r3, [pc, #40]	; (b3c4 <prepare_normal_set+0x64>)
    b39c:	9301      	str	r3, [sp, #4]
    b39e:	9300      	str	r3, [sp, #0]
    b3a0:	4b09      	ldr	r3, [pc, #36]	; (b3c8 <prepare_normal_set+0x68>)
    b3a2:	4a0a      	ldr	r2, [pc, #40]	; (b3cc <prepare_normal_set+0x6c>)
    b3a4:	681c      	ldr	r4, [r3, #0]
    b3a6:	490a      	ldr	r1, [pc, #40]	; (b3d0 <prepare_normal_set+0x70>)
    b3a8:	4b0a      	ldr	r3, [pc, #40]	; (b3d4 <prepare_normal_set+0x74>)
    b3aa:	480b      	ldr	r0, [pc, #44]	; (b3d8 <prepare_normal_set+0x78>)
    b3ac:	47a0      	blx	r4
    b3ae:	4040      	eors	r0, r0
    b3b0:	f380 8811 	msr	BASEPRI, r0
    b3b4:	f04f 0004 	mov.w	r0, #4
    b3b8:	df02      	svc	2
}
    b3ba:	b009      	add	sp, #36	; 0x24
    b3bc:	bd30      	pop	{r4, r5, pc}
    b3be:	bf00      	nop
    b3c0:	00009a2d 	.word	0x00009a2d
    b3c4:	00014c55 	.word	0x00014c55
    b3c8:	20003aa4 	.word	0x20003aa4
    b3cc:	000159c3 	.word	0x000159c3
    b3d0:	00015a12 	.word	0x00015a12
    b3d4:	00016ff0 	.word	0x00016ff0
    b3d8:	000172b9 	.word	0x000172b9
    b3dc:	00000000 	.word	0x00000000

0000b3e0 <mayfly_xtal_stop_calc>:
{
    b3e0:	b570      	push	{r4, r5, r6, lr}
    b3e2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    b3e4:	2302      	movs	r3, #2
    b3e6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    b3e8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    b3ea:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b3ec:	4e82      	ldr	r6, [pc, #520]	; (b5f8 <mayfly_xtal_stop_calc+0x218>)
				    _radio.connection_count));
    b3ee:	4d83      	ldr	r5, [pc, #524]	; (b5fc <mayfly_xtal_stop_calc+0x21c>)
	struct connection *conn_curr = NULL;
    b3f0:	930a      	str	r3, [sp, #40]	; 0x28
{
    b3f2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    b3f4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    b3f6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    b3fa:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b3fc:	ab09      	add	r3, sp, #36	; 0x24
    b3fe:	9302      	str	r3, [sp, #8]
    b400:	ab0c      	add	r3, sp, #48	; 0x30
    b402:	9300      	str	r3, [sp, #0]
    b404:	9601      	str	r6, [sp, #4]
    b406:	ab0d      	add	r3, sp, #52	; 0x34
    b408:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    b40c:	2101      	movs	r1, #1
    b40e:	2000      	movs	r0, #0
    b410:	f7fc fc5e 	bl	7cd0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    b414:	2802      	cmp	r0, #2
    b416:	d015      	beq.n	b444 <mayfly_xtal_stop_calc+0x64>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    b418:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b41a:	b1bb      	cbz	r3, b44c <mayfly_xtal_stop_calc+0x6c>
    b41c:	4b78      	ldr	r3, [pc, #480]	; (b600 <mayfly_xtal_stop_calc+0x220>)
    b41e:	9301      	str	r3, [sp, #4]
    b420:	9300      	str	r3, [sp, #0]
    b422:	4b78      	ldr	r3, [pc, #480]	; (b604 <mayfly_xtal_stop_calc+0x224>)
    b424:	4a78      	ldr	r2, [pc, #480]	; (b608 <mayfly_xtal_stop_calc+0x228>)
    b426:	681c      	ldr	r4, [r3, #0]
    b428:	4978      	ldr	r1, [pc, #480]	; (b60c <mayfly_xtal_stop_calc+0x22c>)
    b42a:	4b79      	ldr	r3, [pc, #484]	; (b610 <mayfly_xtal_stop_calc+0x230>)
    b42c:	4879      	ldr	r0, [pc, #484]	; (b614 <mayfly_xtal_stop_calc+0x234>)
	LL_ASSERT(hdr_curr);
    b42e:	47a0      	blx	r4
    b430:	4040      	eors	r0, r0
    b432:	f380 8811 	msr	BASEPRI, r0
    b436:	f04f 0004 	mov.w	r0, #4
    b43a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b43c:	2101      	movs	r1, #1
    b43e:	2000      	movs	r0, #0
    b440:	f7fc fcc4 	bl	7dcc <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b446:	2b02      	cmp	r3, #2
    b448:	d0f8      	beq.n	b43c <mayfly_xtal_stop_calc+0x5c>
    b44a:	e7e5      	b.n	b418 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    b44c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    b450:	2bff      	cmp	r3, #255	; 0xff
    b452:	d004      	beq.n	b45e <mayfly_xtal_stop_calc+0x7e>
    b454:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b458:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    b45a:	4293      	cmp	r3, r2
    b45c:	dace      	bge.n	b3fc <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    b45e:	1f5a      	subs	r2, r3, #5
    b460:	b2d2      	uxtb	r2, r2
    b462:	2af9      	cmp	r2, #249	; 0xf9
    b464:	d805      	bhi.n	b472 <mayfly_xtal_stop_calc+0x92>
				_radio.connection_count))) {
    b466:	4a65      	ldr	r2, [pc, #404]	; (b5fc <mayfly_xtal_stop_calc+0x21c>)
    b468:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    b46c:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    b46e:	4293      	cmp	r3, r2
    b470:	db05      	blt.n	b47e <mayfly_xtal_stop_calc+0x9e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b472:	2100      	movs	r1, #0
    b474:	2001      	movs	r0, #1
    b476:	f7fe fe3f 	bl	a0f8 <mayfly_xtal_retain>
}
    b47a:	b00e      	add	sp, #56	; 0x38
    b47c:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    b47e:	a90a      	add	r1, sp, #40	; 0x28
    b480:	b2e0      	uxtb	r0, r4
    b482:	f7ff fbcb 	bl	ac1c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    b486:	b948      	cbnz	r0, b49c <mayfly_xtal_stop_calc+0xbc>
    b488:	4b5d      	ldr	r3, [pc, #372]	; (b600 <mayfly_xtal_stop_calc+0x220>)
    b48a:	9301      	str	r3, [sp, #4]
    b48c:	9300      	str	r3, [sp, #0]
    b48e:	4b5d      	ldr	r3, [pc, #372]	; (b604 <mayfly_xtal_stop_calc+0x224>)
    b490:	4a5d      	ldr	r2, [pc, #372]	; (b608 <mayfly_xtal_stop_calc+0x228>)
    b492:	681c      	ldr	r4, [r3, #0]
    b494:	495d      	ldr	r1, [pc, #372]	; (b60c <mayfly_xtal_stop_calc+0x22c>)
    b496:	4b5e      	ldr	r3, [pc, #376]	; (b610 <mayfly_xtal_stop_calc+0x230>)
    b498:	485f      	ldr	r0, [pc, #380]	; (b618 <mayfly_xtal_stop_calc+0x238>)
    b49a:	e7c8      	b.n	b42e <mayfly_xtal_stop_calc+0x4e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    b49c:	6803      	ldr	r3, [r0, #0]
    b49e:	6844      	ldr	r4, [r0, #4]
    b4a0:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b4a2:	bfb8      	it	lt
    b4a4:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    b4a6:	429c      	cmp	r4, r3
    b4a8:	bf38      	it	cc
    b4aa:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    b4ac:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b4ae:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    b4b2:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    b4b4:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    b4b6:	f7ff fbb1 	bl	ac1c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    b4ba:	4605      	mov	r5, r0
    b4bc:	b948      	cbnz	r0, b4d2 <mayfly_xtal_stop_calc+0xf2>
    b4be:	4b50      	ldr	r3, [pc, #320]	; (b600 <mayfly_xtal_stop_calc+0x220>)
    b4c0:	9301      	str	r3, [sp, #4]
    b4c2:	9300      	str	r3, [sp, #0]
    b4c4:	4b4f      	ldr	r3, [pc, #316]	; (b604 <mayfly_xtal_stop_calc+0x224>)
    b4c6:	4a50      	ldr	r2, [pc, #320]	; (b608 <mayfly_xtal_stop_calc+0x228>)
    b4c8:	681c      	ldr	r4, [r3, #0]
    b4ca:	4950      	ldr	r1, [pc, #320]	; (b60c <mayfly_xtal_stop_calc+0x22c>)
    b4cc:	4b50      	ldr	r3, [pc, #320]	; (b610 <mayfly_xtal_stop_calc+0x230>)
    b4ce:	4853      	ldr	r0, [pc, #332]	; (b61c <mayfly_xtal_stop_calc+0x23c>)
    b4d0:	e7ad      	b.n	b42e <mayfly_xtal_stop_calc+0x4e>
	ticks_prepare_to_start_next =
    b4d2:	6886      	ldr	r6, [r0, #8]
    b4d4:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b4d6:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    b4d8:	429e      	cmp	r6, r3
    b4da:	bf38      	it	cc
    b4dc:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    b4de:	2a00      	cmp	r2, #0
    b4e0:	da05      	bge.n	b4ee <mayfly_xtal_stop_calc+0x10e>
		ticks_to_expire -=
    b4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    b4e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    b4e8:	4433      	add	r3, r6
    b4ea:	1a9b      	subs	r3, r3, r2
    b4ec:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    b4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    b4f0:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    b4f4:	4293      	cmp	r3, r2
    b4f6:	d20a      	bcs.n	b50e <mayfly_xtal_stop_calc+0x12e>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    b4f8:	2100      	movs	r1, #0
    b4fa:	2001      	movs	r0, #1
    b4fc:	f7fe fdfc 	bl	a0f8 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    b500:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b504:	2101      	movs	r1, #1
    b506:	4628      	mov	r0, r5
    b508:	f7ff ff2a 	bl	b360 <prepare_normal_set>
    b50c:	e7b5      	b.n	b47a <mayfly_xtal_stop_calc+0x9a>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    b50e:	2101      	movs	r1, #1
    b510:	4608      	mov	r0, r1
    b512:	f7fe fdf1 	bl	a0f8 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    b516:	682b      	ldr	r3, [r5, #0]
    b518:	2b00      	cmp	r3, #0
    b51a:	db1e      	blt.n	b55a <mayfly_xtal_stop_calc+0x17a>
    b51c:	429e      	cmp	r6, r3
    b51e:	d21c      	bcs.n	b55a <mayfly_xtal_stop_calc+0x17a>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    b520:	1b9b      	subs	r3, r3, r6
			ticker_status =
    b522:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b524:	b29b      	uxth	r3, r3
			ticker_status =
    b526:	493e      	ldr	r1, [pc, #248]	; (b620 <mayfly_xtal_stop_calc+0x240>)
    b528:	9105      	str	r1, [sp, #20]
    b52a:	9302      	str	r3, [sp, #8]
    b52c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b530:	9506      	str	r5, [sp, #24]
    b532:	9004      	str	r0, [sp, #16]
    b534:	9003      	str	r0, [sp, #12]
    b536:	9001      	str	r0, [sp, #4]
    b538:	9000      	str	r0, [sp, #0]
    b53a:	2101      	movs	r1, #1
    b53c:	f7fc fb3e 	bl	7bbc <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b540:	f030 0302 	bics.w	r3, r0, #2
    b544:	d009      	beq.n	b55a <mayfly_xtal_stop_calc+0x17a>
    b546:	4b2e      	ldr	r3, [pc, #184]	; (b600 <mayfly_xtal_stop_calc+0x220>)
    b548:	9301      	str	r3, [sp, #4]
    b54a:	9300      	str	r3, [sp, #0]
    b54c:	4b2d      	ldr	r3, [pc, #180]	; (b604 <mayfly_xtal_stop_calc+0x224>)
    b54e:	4a2e      	ldr	r2, [pc, #184]	; (b608 <mayfly_xtal_stop_calc+0x228>)
    b550:	681c      	ldr	r4, [r3, #0]
    b552:	492e      	ldr	r1, [pc, #184]	; (b60c <mayfly_xtal_stop_calc+0x22c>)
    b554:	4b2e      	ldr	r3, [pc, #184]	; (b610 <mayfly_xtal_stop_calc+0x230>)
    b556:	4833      	ldr	r0, [pc, #204]	; (b624 <mayfly_xtal_stop_calc+0x244>)
    b558:	e769      	b.n	b42e <mayfly_xtal_stop_calc+0x4e>
		if (!conn_curr || !conn_next) {
    b55a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b55c:	2e00      	cmp	r6, #0
    b55e:	d08c      	beq.n	b47a <mayfly_xtal_stop_calc+0x9a>
    b560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b562:	2d00      	cmp	r5, #0
    b564:	d089      	beq.n	b47a <mayfly_xtal_stop_calc+0x9a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    b566:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    b568:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    b56a:	429a      	cmp	r2, r3
    b56c:	d185      	bne.n	b47a <mayfly_xtal_stop_calc+0x9a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    b56e:	482e      	ldr	r0, [pc, #184]	; (b628 <mayfly_xtal_stop_calc+0x248>)
    b570:	b292      	uxth	r2, r2
    b572:	fba2 0100 	umull	r0, r1, r2, r0
    b576:	f240 1323 	movw	r3, #291	; 0x123
    b57a:	fb03 1102 	mla	r1, r3, r2, r1
    b57e:	a31c      	add	r3, pc, #112	; (adr r3, b5f0 <mayfly_xtal_stop_calc+0x210>)
    b580:	e9d3 2300 	ldrd	r2, r3, [r3]
    b584:	f7f4 fe46 	bl	214 <__aeabi_uldivmod>
    b588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b58a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    b58e:	2200      	movs	r2, #0
    b590:	4298      	cmp	r0, r3
    b592:	d318      	bcc.n	b5c6 <mayfly_xtal_stop_calc+0x1e6>
    b594:	b102      	cbz	r2, b598 <mayfly_xtal_stop_calc+0x1b8>
    b596:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    b598:	f996 201d 	ldrsb.w	r2, [r6, #29]
    b59c:	2a00      	cmp	r2, #0
    b59e:	f995 201d 	ldrsb.w	r2, [r5, #29]
    b5a2:	da13      	bge.n	b5cc <mayfly_xtal_stop_calc+0x1ec>
    b5a4:	2a00      	cmp	r2, #0
    b5a6:	f6ff af68 	blt.w	b47a <mayfly_xtal_stop_calc+0x9a>
			     (ticks_slot_abs +
    b5aa:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    b5ac:	429c      	cmp	r4, r3
    b5ae:	f67f af64 	bls.w	b47a <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_curr);
    b5b2:	4630      	mov	r0, r6
    b5b4:	f7fe fa84 	bl	9ac0 <conn_update_req>
				if (status == 2) {
    b5b8:	2802      	cmp	r0, #2
    b5ba:	f47f af5e 	bne.w	b47a <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_next);
    b5be:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    b5c0:	f7fe fa7e 	bl	9ac0 <conn_update_req>
    b5c4:	e759      	b.n	b47a <mayfly_xtal_stop_calc+0x9a>
				ticks_to_expire -= ticks_conn_interval;
    b5c6:	1a1b      	subs	r3, r3, r0
    b5c8:	2201      	movs	r2, #1
    b5ca:	e7e1      	b.n	b590 <mayfly_xtal_stop_calc+0x1b0>
			} else if (!conn_curr->role && conn_next->role &&
    b5cc:	2a00      	cmp	r2, #0
    b5ce:	f6bf af54 	bge.w	b47a <mayfly_xtal_stop_calc+0x9a>
				    (ticks_slot_abs +
    b5d2:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    b5d4:	429c      	cmp	r4, r3
    b5d6:	f67f af50 	bls.w	b47a <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_next);
    b5da:	4628      	mov	r0, r5
    b5dc:	f7fe fa70 	bl	9ac0 <conn_update_req>
				if (status == 2) {
    b5e0:	2802      	cmp	r0, #2
    b5e2:	f47f af4a 	bne.w	b47a <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_curr);
    b5e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    b5e8:	e7ea      	b.n	b5c0 <mayfly_xtal_stop_calc+0x1e0>
    b5ea:	bf00      	nop
    b5ec:	f3af 8000 	nop.w
    b5f0:	1afd498d 	.word	0x1afd498d
    b5f4:	00000007 	.word	0x00000007
    b5f8:	00009a1d 	.word	0x00009a1d
    b5fc:	200008f0 	.word	0x200008f0
    b600:	00014c55 	.word	0x00014c55
    b604:	20003aa4 	.word	0x20003aa4
    b608:	000159c3 	.word	0x000159c3
    b60c:	00015a12 	.word	0x00015a12
    b610:	00017003 	.word	0x00017003
    b614:	00017d78 	.word	0x00017d78
    b618:	00017a1c 	.word	0x00017a1c
    b61c:	00017a46 	.word	0x00017a46
    b620:	00009a21 	.word	0x00009a21
    b624:	000172b9 	.word	0x000172b9
    b628:	09ce5400 	.word	0x09ce5400

0000b62c <preempt_calc>:
{
    b62c:	b570      	push	{r4, r5, r6, lr}
    b62e:	4614      	mov	r4, r2
    b630:	460e      	mov	r6, r1
    b632:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b634:	f7fc fbe0 	bl	7df8 <ticker_ticks_now_get>
	u32_t diff =
    b638:	4621      	mov	r1, r4
    b63a:	f7fc fbdf 	bl	7dfc <ticker_ticks_diff_get>
	diff += 3;
    b63e:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b640:	2c09      	cmp	r4, #9
    b642:	d90f      	bls.n	b664 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    b644:	2100      	movs	r1, #0
    b646:	4608      	mov	r0, r1
    b648:	f7fe fd56 	bl	a0f8 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b64c:	4632      	mov	r2, r6
    b64e:	2100      	movs	r1, #0
    b650:	4628      	mov	r0, r5
    b652:	f7ff fe85 	bl	b360 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b656:	68ab      	ldr	r3, [r5, #8]
    b658:	441c      	add	r4, r3
		if (diff <
    b65a:	2c26      	cmp	r4, #38	; 0x26
    b65c:	d800      	bhi.n	b660 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    b65e:	60ac      	str	r4, [r5, #8]
		return 1;
    b660:	2001      	movs	r0, #1
}
    b662:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b664:	2000      	movs	r0, #0
    b666:	bd70      	pop	{r4, r5, r6, pc}

0000b668 <adv_scan_configure.constprop.30>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b668:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b66a:	ad02      	add	r5, sp, #8
    b66c:	4b10      	ldr	r3, [pc, #64]	; (b6b0 <adv_scan_configure.constprop.30+0x48>)
    b66e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b672:	4604      	mov	r4, r0
	radio_reset();
    b674:	f006 fe9c 	bl	123b0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    b678:	2000      	movs	r0, #0
    b67a:	f006 fec3 	bl	12404 <radio_tx_power_set>
	radio_isr_set(isr);
    b67e:	480d      	ldr	r0, [pc, #52]	; (b6b4 <adv_scan_configure.constprop.30+0x4c>)
    b680:	f006 fe60 	bl	12344 <radio_isr_set>
	radio_phy_set(phy, flags);
    b684:	2101      	movs	r1, #1
    b686:	4620      	mov	r0, r4
    b688:	f006 feac 	bl	123e4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b68c:	4628      	mov	r0, r5
    b68e:	f006 fed7 	bl	12440 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b692:	0062      	lsls	r2, r4, #1
    b694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b698:	2125      	movs	r1, #37	; 0x25
    b69a:	2008      	movs	r0, #8
    b69c:	f006 fee8 	bl	12470 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b6a0:	4905      	ldr	r1, [pc, #20]	; (b6b8 <adv_scan_configure.constprop.30+0x50>)
    b6a2:	f240 605b 	movw	r0, #1627	; 0x65b
    b6a6:	f006 ff73 	bl	12590 <radio_crc_configure>
}
    b6aa:	b003      	add	sp, #12
    b6ac:	bd30      	pop	{r4, r5, pc}
    b6ae:	bf00      	nop
    b6b0:	8e89bed6 	.word	0x8e89bed6
    b6b4:	0000e6e1 	.word	0x0000e6e1
    b6b8:	00555555 	.word	0x00555555

0000b6bc <event_scan>:
{
    b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6be:	4b64      	ldr	r3, [pc, #400]	; (b850 <event_scan+0x194>)
    b6c0:	7cda      	ldrb	r2, [r3, #19]
{
    b6c2:	b08d      	sub	sp, #52	; 0x34
    b6c4:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6c6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b6ca:	461c      	mov	r4, r3
    b6cc:	b17a      	cbz	r2, b6ee <event_scan+0x32>
    b6ce:	4b61      	ldr	r3, [pc, #388]	; (b854 <event_scan+0x198>)
    b6d0:	9301      	str	r3, [sp, #4]
    b6d2:	9300      	str	r3, [sp, #0]
    b6d4:	4b60      	ldr	r3, [pc, #384]	; (b858 <event_scan+0x19c>)
    b6d6:	4a61      	ldr	r2, [pc, #388]	; (b85c <event_scan+0x1a0>)
    b6d8:	681c      	ldr	r4, [r3, #0]
    b6da:	4961      	ldr	r1, [pc, #388]	; (b860 <event_scan+0x1a4>)
    b6dc:	4b61      	ldr	r3, [pc, #388]	; (b864 <event_scan+0x1a8>)
    b6de:	4862      	ldr	r0, [pc, #392]	; (b868 <event_scan+0x1ac>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    b6e0:	47a0      	blx	r4
    b6e2:	4040      	eors	r0, r0
    b6e4:	f380 8811 	msr	BASEPRI, r0
    b6e8:	f04f 0004 	mov.w	r0, #4
    b6ec:	df02      	svc	2
    b6ee:	7c1b      	ldrb	r3, [r3, #16]
    b6f0:	b2db      	uxtb	r3, r3
    b6f2:	2b06      	cmp	r3, #6
    b6f4:	d009      	beq.n	b70a <event_scan+0x4e>
    b6f6:	4b57      	ldr	r3, [pc, #348]	; (b854 <event_scan+0x198>)
    b6f8:	9301      	str	r3, [sp, #4]
    b6fa:	9300      	str	r3, [sp, #0]
    b6fc:	4b56      	ldr	r3, [pc, #344]	; (b858 <event_scan+0x19c>)
    b6fe:	4a57      	ldr	r2, [pc, #348]	; (b85c <event_scan+0x1a0>)
    b700:	681c      	ldr	r4, [r3, #0]
    b702:	4957      	ldr	r1, [pc, #348]	; (b860 <event_scan+0x1a4>)
    b704:	4b57      	ldr	r3, [pc, #348]	; (b864 <event_scan+0x1a8>)
    b706:	4859      	ldr	r0, [pc, #356]	; (b86c <event_scan+0x1b0>)
    b708:	e7ea      	b.n	b6e0 <event_scan+0x24>
	_radio.role = ROLE_SCAN;
    b70a:	2202      	movs	r2, #2
    b70c:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b70e:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b710:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b712:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    b716:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    b718:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    b71c:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    b71e:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b722:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    b726:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    b728:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    b72c:	f7ff ff9c 	bl	b668 <adv_scan_configure.constprop.30>
	chan_set(37 + _radio.scanner.chan++);
    b730:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b734:	f3c3 0081 	ubfx	r0, r3, #2, #2
    b738:	1c42      	adds	r2, r0, #1
    b73a:	f362 0383 	bfi	r3, r2, #2, #2
    b73e:	3025      	adds	r0, #37	; 0x25
    b740:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    b744:	f7ff fca2 	bl	b08c <chan_set>
	if (_radio.scanner.chan == 3) {
    b748:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    b74c:	f003 020c 	and.w	r2, r3, #12
    b750:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    b752:	bf08      	it	eq
    b754:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    b758:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    b75c:	bf08      	it	eq
    b75e:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    b762:	f006 ffcf 	bl	12704 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    b766:	2300      	movs	r3, #0
    b768:	4619      	mov	r1, r3
    b76a:	461a      	mov	r2, r3
    b76c:	4618      	mov	r0, r3
    b76e:	f006 ff39 	bl	125e4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b772:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b776:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    b77a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b77e:	3008      	adds	r0, #8
    b780:	f006 fea4 	bl	124cc <radio_pkt_rx_set>
	radio_rssi_measure();
    b784:	f006 ff46 	bl	12614 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
    b788:	f006 f9dc 	bl	11b44 <ctrl_rl_enabled>
    b78c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    b790:	b340      	cbz	r0, b7e4 <event_scan+0x128>
		struct ll_filter *filter =
    b792:	f3c3 1000 	ubfx	r0, r3, #4, #1
    b796:	f005 ffed 	bl	11774 <ctrl_filter_get>
    b79a:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    b79c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    b7a0:	f005 ff08 	bl	115b4 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    b7a4:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    b7a6:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    b7a8:	1cb2      	adds	r2, r6, #2
    b7aa:	7830      	ldrb	r0, [r6, #0]
    b7ac:	f006 ff54 	bl	12658 <radio_filter_configure>
		radio_ar_configure(count, irks);
    b7b0:	4639      	mov	r1, r7
    b7b2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    b7b6:	f007 f929 	bl	12a0c <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    b7ba:	68e2      	ldr	r2, [r4, #12]
    b7bc:	f105 0109 	add.w	r1, r5, #9
    b7c0:	2000      	movs	r0, #0
    b7c2:	f006 ffab 	bl	1271c <radio_tmr_start>
	radio_tmr_end_capture();
    b7c6:	f007 f879 	bl	128bc <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    b7ca:	2106      	movs	r1, #6
    b7cc:	462a      	mov	r2, r5
    b7ce:	4828      	ldr	r0, [pc, #160]	; (b870 <event_scan+0x1b4>)
    b7d0:	f7ff ff2c 	bl	b62c <preempt_calc>
    b7d4:	4601      	mov	r1, r0
    b7d6:	b188      	cbz	r0, b7fc <event_scan+0x140>
		_radio.state = STATE_STOP;
    b7d8:	2304      	movs	r3, #4
    b7da:	7523      	strb	r3, [r4, #20]
		radio_disable();
    b7dc:	f006 fe9c 	bl	12518 <radio_disable>
}
    b7e0:	b00d      	add	sp, #52	; 0x34
    b7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_radio.scanner.filter_policy) {
    b7e4:	f013 0f30 	tst.w	r3, #48	; 0x30
    b7e8:	d0e7      	beq.n	b7ba <event_scan+0xfe>
		struct ll_filter *wl = ctrl_filter_get(true);
    b7ea:	2001      	movs	r0, #1
    b7ec:	f005 ffc2 	bl	11774 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b7f0:	1c82      	adds	r2, r0, #2
    b7f2:	7841      	ldrb	r1, [r0, #1]
    b7f4:	7800      	ldrb	r0, [r0, #0]
    b7f6:	f006 ff2f 	bl	12658 <radio_filter_configure>
    b7fa:	e7de      	b.n	b7ba <event_scan+0xfe>
		ret = ticker_start(
    b7fc:	f641 1336 	movw	r3, #6454	; 0x1936
    b800:	9308      	str	r3, [sp, #32]
    b802:	4b1c      	ldr	r3, [pc, #112]	; (b874 <event_scan+0x1b8>)
    b804:	9307      	str	r3, [sp, #28]
    b806:	2204      	movs	r2, #4
    b808:	4b1b      	ldr	r3, [pc, #108]	; (b878 <event_scan+0x1bc>)
    b80a:	9206      	str	r2, [sp, #24]
    b80c:	9305      	str	r3, [sp, #20]
    b80e:	9004      	str	r0, [sp, #16]
    b810:	9003      	str	r0, [sp, #12]
    b812:	9002      	str	r0, [sp, #8]
    b814:	9001      	str	r0, [sp, #4]
    b816:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    b81a:	3309      	adds	r3, #9
    b81c:	9300      	str	r3, [sp, #0]
    b81e:	462b      	mov	r3, r5
    b820:	f7fc f97c 	bl	7b1c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b824:	f030 0302 	bics.w	r3, r0, #2
    b828:	d009      	beq.n	b83e <event_scan+0x182>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b82a:	4b0a      	ldr	r3, [pc, #40]	; (b854 <event_scan+0x198>)
    b82c:	9301      	str	r3, [sp, #4]
    b82e:	9300      	str	r3, [sp, #0]
    b830:	4b09      	ldr	r3, [pc, #36]	; (b858 <event_scan+0x19c>)
    b832:	4a0a      	ldr	r2, [pc, #40]	; (b85c <event_scan+0x1a0>)
    b834:	681c      	ldr	r4, [r3, #0]
    b836:	490a      	ldr	r1, [pc, #40]	; (b860 <event_scan+0x1a4>)
    b838:	4b0a      	ldr	r3, [pc, #40]	; (b864 <event_scan+0x1a8>)
    b83a:	4810      	ldr	r0, [pc, #64]	; (b87c <event_scan+0x1c0>)
    b83c:	e750      	b.n	b6e0 <event_scan+0x24>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    b83e:	4619      	mov	r1, r3
    b840:	4618      	mov	r0, r3
    b842:	4a0f      	ldr	r2, [pc, #60]	; (b880 <event_scan+0x1c4>)
    b844:	f7fc fa86 	bl	7d54 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b848:	f030 0302 	bics.w	r3, r0, #2
    b84c:	d1ed      	bne.n	b82a <event_scan+0x16e>
    b84e:	e7c7      	b.n	b7e0 <event_scan+0x124>
    b850:	200008f0 	.word	0x200008f0
    b854:	00014c55 	.word	0x00014c55
    b858:	20003aa4 	.word	0x20003aa4
    b85c:	000159c3 	.word	0x000159c3
    b860:	00015a12 	.word	0x00015a12
    b864:	000170d2 	.word	0x000170d2
    b868:	000173d5 	.word	0x000173d5
    b86c:	0001740f 	.word	0x0001740f
    b870:	200009c0 	.word	0x200009c0
    b874:	0000a9fd 	.word	0x0000a9fd
    b878:	0000ac95 	.word	0x0000ac95
    b87c:	0001744e 	.word	0x0001744e
    b880:	0000ac05 	.word	0x0000ac05

0000b884 <event_stop.constprop.31>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b884:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b886:	4b05      	ldr	r3, [pc, #20]	; (b89c <event_stop.constprop.31+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b888:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b88a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b88c:	4611      	mov	r1, r2
    b88e:	4610      	mov	r0, r2
    b890:	f7fb fb84 	bl	6f9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b894:	b108      	cbz	r0, b89a <event_stop.constprop.31+0x16>
    b896:	f7ff f9df 	bl	ac58 <event_stop.part.10>
    b89a:	bd08      	pop	{r3, pc}
    b89c:	20003db8 	.word	0x20003db8

0000b8a0 <event_common_prepare>:
{
    b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b8a4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b8a6:	681d      	ldr	r5, [r3, #0]
{
    b8a8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b8aa:	2c00      	cmp	r4, #0
{
    b8ac:	4681      	mov	r9, r0
    b8ae:	910b      	str	r1, [sp, #44]	; 0x2c
    b8b0:	4690      	mov	r8, r2
    b8b2:	469b      	mov	fp, r3
    b8b4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b8b8:	da03      	bge.n	b8c2 <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    b8ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b8bc:	42ac      	cmp	r4, r5
    b8be:	bf38      	it	cc
    b8c0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b8c2:	42ac      	cmp	r4, r5
    b8c4:	4f57      	ldr	r7, [pc, #348]	; (ba24 <event_common_prepare+0x184>)
    b8c6:	d925      	bls.n	b914 <event_common_prepare+0x74>
		ticker_status =
    b8c8:	f241 5374 	movw	r3, #5492	; 0x1574
    b8cc:	9308      	str	r3, [sp, #32]
    b8ce:	4b56      	ldr	r3, [pc, #344]	; (ba28 <event_common_prepare+0x188>)
    b8d0:	9305      	str	r3, [sp, #20]
    b8d2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b8d4:	1b63      	subs	r3, r4, r5
		ticker_status =
    b8d6:	9300      	str	r3, [sp, #0]
    b8d8:	9707      	str	r7, [sp, #28]
    b8da:	464b      	mov	r3, r9
    b8dc:	9106      	str	r1, [sp, #24]
    b8de:	9104      	str	r1, [sp, #16]
    b8e0:	9103      	str	r1, [sp, #12]
    b8e2:	9102      	str	r1, [sp, #8]
    b8e4:	9101      	str	r1, [sp, #4]
    b8e6:	2201      	movs	r2, #1
    b8e8:	4608      	mov	r0, r1
    b8ea:	f7fc f917 	bl	7b1c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b8ee:	f030 0302 	bics.w	r3, r0, #2
    b8f2:	d035      	beq.n	b960 <event_common_prepare+0xc0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b8f4:	4b4d      	ldr	r3, [pc, #308]	; (ba2c <event_common_prepare+0x18c>)
    b8f6:	9301      	str	r3, [sp, #4]
    b8f8:	9300      	str	r3, [sp, #0]
    b8fa:	4b4d      	ldr	r3, [pc, #308]	; (ba30 <event_common_prepare+0x190>)
    b8fc:	4a4d      	ldr	r2, [pc, #308]	; (ba34 <event_common_prepare+0x194>)
    b8fe:	681c      	ldr	r4, [r3, #0]
    b900:	494d      	ldr	r1, [pc, #308]	; (ba38 <event_common_prepare+0x198>)
    b902:	4b4e      	ldr	r3, [pc, #312]	; (ba3c <event_common_prepare+0x19c>)
    b904:	484e      	ldr	r0, [pc, #312]	; (ba40 <event_common_prepare+0x1a0>)
		LL_ASSERT(!retval);
    b906:	47a0      	blx	r4
    b908:	4040      	eors	r0, r0
    b90a:	f380 8811 	msr	BASEPRI, r0
    b90e:	f04f 0004 	mov.w	r0, #4
    b912:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b914:	d21d      	bcs.n	b952 <event_common_prepare+0xb2>
		event_active(0, 0, 0, NULL);
    b916:	2300      	movs	r3, #0
    b918:	461a      	mov	r2, r3
    b91a:	4619      	mov	r1, r3
    b91c:	4618      	mov	r0, r3
    b91e:	f7ff f9c9 	bl	acb4 <event_active>
		ticker_status =
    b922:	f241 5389 	movw	r3, #5513	; 0x1589
    b926:	2100      	movs	r1, #0
    b928:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b92a:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b92c:	4b45      	ldr	r3, [pc, #276]	; (ba44 <event_common_prepare+0x1a4>)
    b92e:	9305      	str	r3, [sp, #20]
    b930:	9707      	str	r7, [sp, #28]
    b932:	464b      	mov	r3, r9
    b934:	9106      	str	r1, [sp, #24]
    b936:	9104      	str	r1, [sp, #16]
    b938:	9103      	str	r1, [sp, #12]
    b93a:	9102      	str	r1, [sp, #8]
    b93c:	9101      	str	r1, [sp, #4]
    b93e:	9400      	str	r4, [sp, #0]
    b940:	2201      	movs	r2, #1
    b942:	4608      	mov	r0, r1
    b944:	f7fc f8ea 	bl	7b1c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b948:	f030 0302 	bics.w	r3, r0, #2
    b94c:	d1d2      	bne.n	b8f4 <event_common_prepare+0x54>
    b94e:	462c      	mov	r4, r5
    b950:	e00b      	b.n	b96a <event_common_prepare+0xca>
		event_active(0, 0, 0, NULL);
    b952:	2300      	movs	r3, #0
    b954:	461a      	mov	r2, r3
    b956:	4619      	mov	r1, r3
    b958:	4618      	mov	r0, r3
    b95a:	f7ff f9ab 	bl	acb4 <event_active>
		event_xtal(0, 0, 0, NULL);
    b95e:	2300      	movs	r3, #0
    b960:	461a      	mov	r2, r3
    b962:	4619      	mov	r1, r3
    b964:	4618      	mov	r0, r3
    b966:	f7ff f9cd 	bl	ad04 <event_xtal>
	_radio.remainder_anchor = remainder;
    b96a:	4e37      	ldr	r6, [pc, #220]	; (ba48 <event_common_prepare+0x1a8>)
    b96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b96e:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b970:	f241 53a1 	movw	r3, #5537	; 0x15a1
    b974:	9308      	str	r3, [sp, #32]
    b976:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b978:	9306      	str	r3, [sp, #24]
    b97a:	2200      	movs	r2, #0
    b97c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b97e:	9305      	str	r3, [sp, #20]
    b980:	9707      	str	r7, [sp, #28]
    b982:	464b      	mov	r3, r9
    b984:	9204      	str	r2, [sp, #16]
    b986:	9203      	str	r2, [sp, #12]
    b988:	9202      	str	r2, [sp, #8]
    b98a:	9201      	str	r2, [sp, #4]
    b98c:	9400      	str	r4, [sp, #0]
    b98e:	4611      	mov	r1, r2
    b990:	4610      	mov	r0, r2
    b992:	f7fc f8c3 	bl	7b1c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b996:	f030 0302 	bics.w	r3, r0, #2
    b99a:	d1ab      	bne.n	b8f4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b99c:	2005      	movs	r0, #5
    b99e:	f7ff ff71 	bl	b884 <event_stop.constprop.31>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b9a2:	f8d6 3184 	ldr.w	r3, [r6, #388]	; 0x184
    b9a6:	429d      	cmp	r5, r3
    b9a8:	d023      	beq.n	b9f2 <event_common_prepare+0x152>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b9aa:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b9ae:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b9b2:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b9b4:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b9b6:	bfbc      	itt	lt
    b9b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b9bc:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    b9c0:	f8d8 2000 	ldr.w	r2, [r8]
    b9c4:	f8d6 1184 	ldr.w	r1, [r6, #388]	; 0x184
    b9c8:	428a      	cmp	r2, r1
    b9ca:	bf38      	it	cc
    b9cc:	460a      	movcc	r2, r1
		ticker_status =
    b9ce:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b9d2:	b2a3      	uxth	r3, r4
    b9d4:	b292      	uxth	r2, r2
		ticker_status =
    b9d6:	9106      	str	r1, [sp, #24]
    b9d8:	2100      	movs	r1, #0
    b9da:	9302      	str	r3, [sp, #8]
    b9dc:	9201      	str	r2, [sp, #4]
    b9de:	9200      	str	r2, [sp, #0]
    b9e0:	9104      	str	r1, [sp, #16]
    b9e2:	9103      	str	r1, [sp, #12]
    b9e4:	4652      	mov	r2, sl
    b9e6:	4608      	mov	r0, r1
    b9e8:	f7fc f8e8 	bl	7bbc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b9ec:	f030 0302 	bics.w	r3, r0, #2
    b9f0:	d180      	bne.n	b8f4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b9f2:	20ff      	movs	r0, #255	; 0xff
    b9f4:	f7ff fa5c 	bl	aeb0 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b9f8:	4b14      	ldr	r3, [pc, #80]	; (ba4c <event_common_prepare+0x1ac>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b9fa:	2201      	movs	r2, #1
    b9fc:	4611      	mov	r1, r2
    b9fe:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    ba00:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ba04:	f7fb faca 	bl	6f9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    ba08:	b148      	cbz	r0, ba1e <event_common_prepare+0x17e>
    ba0a:	4b08      	ldr	r3, [pc, #32]	; (ba2c <event_common_prepare+0x18c>)
    ba0c:	9301      	str	r3, [sp, #4]
    ba0e:	9300      	str	r3, [sp, #0]
    ba10:	4b07      	ldr	r3, [pc, #28]	; (ba30 <event_common_prepare+0x190>)
    ba12:	4a08      	ldr	r2, [pc, #32]	; (ba34 <event_common_prepare+0x194>)
    ba14:	681c      	ldr	r4, [r3, #0]
    ba16:	4908      	ldr	r1, [pc, #32]	; (ba38 <event_common_prepare+0x198>)
    ba18:	4b08      	ldr	r3, [pc, #32]	; (ba3c <event_common_prepare+0x19c>)
    ba1a:	480d      	ldr	r0, [pc, #52]	; (ba50 <event_common_prepare+0x1b0>)
    ba1c:	e773      	b.n	b906 <event_common_prepare+0x66>
}
    ba1e:	b00d      	add	sp, #52	; 0x34
    ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba24:	0000a9fd 	.word	0x0000a9fd
    ba28:	0000acb5 	.word	0x0000acb5
    ba2c:	00014c55 	.word	0x00014c55
    ba30:	20003aa4 	.word	0x20003aa4
    ba34:	000159c3 	.word	0x000159c3
    ba38:	00015a12 	.word	0x00015a12
    ba3c:	00017091 	.word	0x00017091
    ba40:	000172b9 	.word	0x000172b9
    ba44:	0000ad05 	.word	0x0000ad05
    ba48:	200008f0 	.word	0x200008f0
    ba4c:	20003e58 	.word	0x20003e58
    ba50:	000179f3 	.word	0x000179f3

0000ba54 <event_scan_prepare>:
{
    ba54:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba56:	4c27      	ldr	r4, [pc, #156]	; (baf4 <event_scan_prepare+0xa0>)
    ba58:	7c23      	ldrb	r3, [r4, #16]
{
    ba5a:	b085      	sub	sp, #20
    ba5c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    ba5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ba62:	b17b      	cbz	r3, ba84 <event_scan_prepare+0x30>
    ba64:	4b24      	ldr	r3, [pc, #144]	; (baf8 <event_scan_prepare+0xa4>)
    ba66:	9301      	str	r3, [sp, #4]
    ba68:	9300      	str	r3, [sp, #0]
    ba6a:	4b24      	ldr	r3, [pc, #144]	; (bafc <event_scan_prepare+0xa8>)
    ba6c:	4a24      	ldr	r2, [pc, #144]	; (bb00 <event_scan_prepare+0xac>)
    ba6e:	681c      	ldr	r4, [r3, #0]
    ba70:	4924      	ldr	r1, [pc, #144]	; (bb04 <event_scan_prepare+0xb0>)
    ba72:	4b25      	ldr	r3, [pc, #148]	; (bb08 <event_scan_prepare+0xb4>)
    ba74:	4825      	ldr	r0, [pc, #148]	; (bb0c <event_scan_prepare+0xb8>)
		LL_ASSERT(!retval);
    ba76:	47a0      	blx	r4
    ba78:	4040      	eors	r0, r0
    ba7a:	f380 8811 	msr	BASEPRI, r0
    ba7e:	f04f 0004 	mov.w	r0, #4
    ba82:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    ba84:	2306      	movs	r3, #6
    ba86:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    ba88:	9203      	str	r2, [sp, #12]
    ba8a:	4a21      	ldr	r2, [pc, #132]	; (bb10 <event_scan_prepare+0xbc>)
    ba8c:	9202      	str	r2, [sp, #8]
    ba8e:	9301      	str	r3, [sp, #4]
    ba90:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ba94:	9300      	str	r3, [sp, #0]
    ba96:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    ba9a:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    ba9e:	f7ff feff 	bl	b8a0 <event_common_prepare>
	if (_radio.scanner.conn) {
    baa2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    baa6:	b313      	cbz	r3, baee <event_scan_prepare+0x9a>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    baa8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    baac:	2b00      	cmp	r3, #0
    baae:	da0c      	bge.n	baca <event_scan_prepare+0x76>
			u32_t ticks_prepare_to_start =
    bab0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    bab4:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    bab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    babc:	4291      	cmp	r1, r2
    babe:	bf2c      	ite	cs
    bac0:	ebc3 0301 	rsbcs	r3, r3, r1
    bac4:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    bac8:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    baca:	4b12      	ldr	r3, [pc, #72]	; (bb14 <event_scan_prepare+0xc0>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bacc:	2201      	movs	r2, #1
    bace:	4611      	mov	r1, r2
    bad0:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    bad2:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bad4:	f7fb fa62 	bl	6f9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    bad8:	b148      	cbz	r0, baee <event_scan_prepare+0x9a>
    bada:	4b07      	ldr	r3, [pc, #28]	; (baf8 <event_scan_prepare+0xa4>)
    badc:	9301      	str	r3, [sp, #4]
    bade:	9300      	str	r3, [sp, #0]
    bae0:	4b06      	ldr	r3, [pc, #24]	; (bafc <event_scan_prepare+0xa8>)
    bae2:	4a07      	ldr	r2, [pc, #28]	; (bb00 <event_scan_prepare+0xac>)
    bae4:	681c      	ldr	r4, [r3, #0]
    bae6:	4907      	ldr	r1, [pc, #28]	; (bb04 <event_scan_prepare+0xb0>)
    bae8:	4b07      	ldr	r3, [pc, #28]	; (bb08 <event_scan_prepare+0xb4>)
    baea:	480b      	ldr	r0, [pc, #44]	; (bb18 <event_scan_prepare+0xc4>)
    baec:	e7c3      	b.n	ba76 <event_scan_prepare+0x22>
}
    baee:	b005      	add	sp, #20
    baf0:	bd30      	pop	{r4, r5, pc}
    baf2:	bf00      	nop
    baf4:	200008f0 	.word	0x200008f0
    baf8:	00014c55 	.word	0x00014c55
    bafc:	20003aa4 	.word	0x20003aa4
    bb00:	000159c3 	.word	0x000159c3
    bb04:	00015a12 	.word	0x00015a12
    bb08:	000170bf 	.word	0x000170bf
    bb0c:	00017b2f 	.word	0x00017b2f
    bb10:	0000b6bd 	.word	0x0000b6bd
    bb14:	20003dd8 	.word	0x20003dd8
    bb18:	000179f3 	.word	0x000179f3

0000bb1c <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    bb1c:	4b02      	ldr	r3, [pc, #8]	; (bb28 <mayfly_xtal_start+0xc>)
    bb1e:	6818      	ldr	r0, [r3, #0]
    bb20:	6843      	ldr	r3, [r0, #4]
    bb22:	2100      	movs	r1, #0
    bb24:	681b      	ldr	r3, [r3, #0]
    bb26:	4718      	bx	r3
    bb28:	200008f0 	.word	0x200008f0

0000bb2c <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    bb2c:	4b02      	ldr	r3, [pc, #8]	; (bb38 <mayfly_xtal_stop+0xc>)
    bb2e:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    bb30:	6843      	ldr	r3, [r0, #4]
    bb32:	2100      	movs	r1, #0
    bb34:	685b      	ldr	r3, [r3, #4]
    bb36:	4718      	bx	r3
    bb38:	200008f0 	.word	0x200008f0

0000bb3c <chan_sel_2>:
{
    bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    bb3e:	4048      	eors	r0, r1
    bb40:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb42:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    bb46:	2608      	movs	r6, #8
	o = 0;
    bb48:	2400      	movs	r4, #0
		o |= (i & 1);
    bb4a:	f00e 0501 	and.w	r5, lr, #1
    bb4e:	3e01      	subs	r6, #1
    bb50:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb54:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    bb58:	b2ec      	uxtb	r4, r5
		i >>= 1;
    bb5a:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb5e:	d1f4      	bne.n	bb4a <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb60:	0225      	lsls	r5, r4, #8
    bb62:	b22d      	sxth	r5, r5
    bb64:	b2c0      	uxtb	r0, r0
    bb66:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    bb6a:	4634      	mov	r4, r6
		o |= (i & 1);
    bb6c:	f000 0601 	and.w	r6, r0, #1
    bb70:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    bb74:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    bb78:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    bb7c:	b2e4      	uxtb	r4, r4
		i >>= 1;
    bb7e:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    bb82:	d1f3      	bne.n	bb6c <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    bb84:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bb86:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    bb8a:	3f01      	subs	r7, #1
    bb8c:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    bb8e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    bb92:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    bb94:	d1d5      	bne.n	bb42 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    bb96:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    bb98:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    bb9a:	fbb1 f0f4 	udiv	r0, r1, r4
    bb9e:	fb04 1010 	mls	r0, r4, r0, r1
    bba2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    bba4:	08c4      	lsrs	r4, r0, #3
    bba6:	f000 0507 	and.w	r5, r0, #7
    bbaa:	5d14      	ldrb	r4, [r2, r4]
    bbac:	412c      	asrs	r4, r5
    bbae:	07e4      	lsls	r4, r4, #31
    bbb0:	d407      	bmi.n	bbc2 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    bbb2:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    bbb4:	f3c1 4107 	ubfx	r1, r1, #16, #8
    bbb8:	4610      	mov	r0, r2
}
    bbba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    bbbe:	f7fd bf3b 	b.w	9a38 <chan_sel_remap>
}
    bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bbc4 <ctrl_tx_enqueue>:
{
    bbc4:	b510      	push	{r4, lr}
	    !conn->empty &&
    bbc6:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bbca:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    bbce:	f014 0f80 	tst.w	r4, #128	; 0x80
    bbd2:	d118      	bne.n	bc06 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bbd4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    bbd8:	b1ab      	cbz	r3, bc06 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    bbda:	0724      	lsls	r4, r4, #28
    bbdc:	d413      	bmi.n	bc06 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    bbde:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    bbe2:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    bbe4:	bf04      	itt	eq
    bbe6:	681c      	ldreq	r4, [r3, #0]
    bbe8:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    bbec:	b992      	cbnz	r2, bc14 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    bbee:	681a      	ldr	r2, [r3, #0]
    bbf0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    bbf2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    bbf4:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    bbf8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    bbfc:	680b      	ldr	r3, [r1, #0]
    bbfe:	b90b      	cbnz	r3, bc04 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    bc00:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bc04:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    bc06:	b92a      	cbnz	r2, bc14 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    bc08:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    bc0c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    bc0e:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    bc12:	e7ef      	b.n	bbf4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    bc14:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bc18:	681a      	ldr	r2, [r3, #0]
    bc1a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    bc1c:	6019      	str	r1, [r3, #0]
    bc1e:	e7eb      	b.n	bbf8 <ctrl_tx_enqueue+0x34>

0000bc20 <ctrl_tx_sec_enqueue>:
{
    bc20:	b410      	push	{r4}
	if (conn->pause_tx) {
    bc22:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    bc26:	0724      	lsls	r4, r4, #28
{
    bc28:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    bc2a:	d50f      	bpl.n	bc4c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    bc2c:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    bc30:	b931      	cbnz	r1, bc40 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    bc32:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    bc36:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    bc38:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    bc3c:	bc10      	pop	{r4}
    bc3e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    bc40:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    bc44:	6819      	ldr	r1, [r3, #0]
    bc46:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    bc48:	601a      	str	r2, [r3, #0]
    bc4a:	e7f7      	b.n	bc3c <ctrl_tx_sec_enqueue+0x1c>
}
    bc4c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    bc4e:	f7ff bfb9 	b.w	bbc4 <ctrl_tx_enqueue>
	...

0000bc54 <feature_rsp_send>:
{
    bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc56:	4f21      	ldr	r7, [pc, #132]	; (bcdc <feature_rsp_send+0x88>)
{
    bc58:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc5a:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
{
    bc5e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc60:	f7fb f8d1 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    bc64:	4604      	mov	r4, r0
    bc66:	b3b0      	cbz	r0, bcd6 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bc68:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    bc6a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bc6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    bc70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    bc74:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    bc78:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    bc7c:	f043 0310 	orr.w	r3, r3, #16
    bc80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    bc84:	79b1      	ldrb	r1, [r6, #6]
    bc86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    bc8a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    bc8e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    bc92:	400b      	ands	r3, r1
    bc94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    bc98:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    bc9c:	f043 0320 	orr.w	r3, r3, #32
    bca0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bca4:	7903      	ldrb	r3, [r0, #4]
    bca6:	f043 0303 	orr.w	r3, r3, #3
    bcaa:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bcac:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    bcae:	2309      	movs	r3, #9
    bcb0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    bcb2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    bcb4:	2100      	movs	r1, #0
    bcb6:	4410      	add	r0, r2
    bcb8:	f7f5 ffde 	bl	1c78 <memset>
		conn->llcp_features & 0xFF;
    bcbc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    bcc0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    bcc2:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    bcc4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    bcc6:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    bcc8:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    bcca:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    bccc:	4621      	mov	r1, r4
    bcce:	f7ff ffa7 	bl	bc20 <ctrl_tx_sec_enqueue>
	return 0;
    bcd2:	2000      	movs	r0, #0
    bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    bcd6:	2001      	movs	r0, #1
}
    bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcda:	bf00      	nop
    bcdc:	200008f0 	.word	0x200008f0

0000bce0 <start_enc_rsp_send>:
{
    bce0:	b510      	push	{r4, lr}
    bce2:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    bce4:	b9c9      	cbnz	r1, bd1a <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bce6:	480f      	ldr	r0, [pc, #60]	; (bd24 <start_enc_rsp_send+0x44>)
    bce8:	f7fb f88d 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    bcec:	b1b8      	cbz	r0, bd1e <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    bcee:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    bcf0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bcf4:	f043 0320 	orr.w	r3, r3, #32
    bcf8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bcfc:	780b      	ldrb	r3, [r1, #0]
    bcfe:	f043 0303 	orr.w	r3, r3, #3
    bd02:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bd04:	2301      	movs	r3, #1
    bd06:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    bd08:	2306      	movs	r3, #6
    bd0a:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    bd0c:	b140      	cbz	r0, bd20 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    bd0e:	4601      	mov	r1, r0
    bd10:	4620      	mov	r0, r4
    bd12:	f7ff ff57 	bl	bbc4 <ctrl_tx_enqueue>
	return 0;
    bd16:	2000      	movs	r0, #0
    bd18:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    bd1a:	2000      	movs	r0, #0
    bd1c:	e7e8      	b.n	bcf0 <start_enc_rsp_send+0x10>
			return 1;
    bd1e:	2001      	movs	r0, #1
}
    bd20:	bd10      	pop	{r4, pc}
    bd22:	bf00      	nop
    bd24:	20000a4c 	.word	0x20000a4c

0000bd28 <reject_ext_ind_send>:
{
    bd28:	b570      	push	{r4, r5, r6, lr}
    bd2a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd2c:	480b      	ldr	r0, [pc, #44]	; (bd5c <reject_ext_ind_send+0x34>)
{
    bd2e:	460e      	mov	r6, r1
    bd30:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bd32:	f7fb f868 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    bd36:	b178      	cbz	r0, bd58 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd38:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    bd3a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd3c:	f043 0303 	orr.w	r3, r3, #3
    bd40:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bd42:	2303      	movs	r3, #3
    bd44:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bd46:	2311      	movs	r3, #17
    bd48:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    bd4a:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    bd4c:	4601      	mov	r1, r0
    bd4e:	4620      	mov	r0, r4
    bd50:	f7ff ff38 	bl	bbc4 <ctrl_tx_enqueue>
	return 0;
    bd54:	2000      	movs	r0, #0
    bd56:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    bd58:	2001      	movs	r0, #1
}
    bd5a:	bd70      	pop	{r4, r5, r6, pc}
    bd5c:	20000a4c 	.word	0x20000a4c

0000bd60 <event_connection_prepare>:
{
    bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd64:	4db9      	ldr	r5, [pc, #740]	; (c04c <event_connection_prepare+0x2ec>)
{
    bd66:	b08f      	sub	sp, #60	; 0x3c
    bd68:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd6a:	7c2b      	ldrb	r3, [r5, #16]
{
    bd6c:	910c      	str	r1, [sp, #48]	; 0x30
    bd6e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    bd70:	b17b      	cbz	r3, bd92 <event_connection_prepare+0x32>
    bd72:	4bb7      	ldr	r3, [pc, #732]	; (c050 <event_connection_prepare+0x2f0>)
    bd74:	9301      	str	r3, [sp, #4]
    bd76:	9300      	str	r3, [sp, #0]
    bd78:	4bb6      	ldr	r3, [pc, #728]	; (c054 <event_connection_prepare+0x2f4>)
    bd7a:	4ab7      	ldr	r2, [pc, #732]	; (c058 <event_connection_prepare+0x2f8>)
    bd7c:	681c      	ldr	r4, [r3, #0]
    bd7e:	49b7      	ldr	r1, [pc, #732]	; (c05c <event_connection_prepare+0x2fc>)
    bd80:	4bb7      	ldr	r3, [pc, #732]	; (c060 <event_connection_prepare+0x300>)
    bd82:	48b8      	ldr	r0, [pc, #736]	; (c064 <event_connection_prepare+0x304>)
		LL_ASSERT(!retval);
    bd84:	47a0      	blx	r4
    bd86:	4040      	eors	r0, r0
    bd88:	f380 8811 	msr	BASEPRI, r0
    bd8c:	f04f 0004 	mov.w	r0, #4
    bd90:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    bd92:	f894 3020 	ldrb.w	r3, [r4, #32]
    bd96:	3307      	adds	r3, #7
    bd98:	b2db      	uxtb	r3, r3
    bd9a:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    bd9c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bda0:	2b00      	cmp	r3, #0
    bda2:	da09      	bge.n	bdb8 <event_connection_prepare+0x58>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bda4:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    bda6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    bda8:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    bdac:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    bdae:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    bdb0:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    bdb2:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    bdb4:	bf88      	it	hi
    bdb6:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    bdb8:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bdba:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    bdbe:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    bdc0:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    bdc2:	b292      	uxth	r2, r2
    bdc4:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    bdc6:	4432      	add	r2, r6
    bdc8:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    bdca:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bdce:	429a      	cmp	r2, r3
    bdd0:	f040 81bf 	bne.w	c152 <event_connection_prepare+0x3f2>
    bdd4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bdd8:	075f      	lsls	r7, r3, #29
    bdda:	f100 84bc 	bmi.w	c756 <event_connection_prepare+0x9f6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    bdde:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bde2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bde6:	429a      	cmp	r2, r3
    bde8:	f000 8098 	beq.w	bf1c <event_connection_prepare+0x1bc>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bdec:	2005      	movs	r0, #5
    bdee:	f7ff fd49 	bl	b884 <event_stop.constprop.31>
	conn_upd = _radio.conn_upd;
    bdf2:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
	if (conn_upd && (conn_upd != conn)) {
    bdf6:	b113      	cbz	r3, bdfe <event_connection_prepare+0x9e>
    bdf8:	429c      	cmp	r4, r3
    bdfa:	f040 808f 	bne.w	bf1c <event_connection_prepare+0x1bc>
	switch (conn->llcp_conn_param.state) {
    bdfe:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    be02:	f003 0307 	and.w	r3, r3, #7
    be06:	2b05      	cmp	r3, #5
    be08:	f200 8160 	bhi.w	c0cc <event_connection_prepare+0x36c>
    be0c:	e8df f013 	tbh	[pc, r3, lsl #1]
    be10:	00670006 	.word	0x00670006
    be14:	00860134 	.word	0x00860134
    be18:	00860086 	.word	0x00860086
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be1c:	4892      	ldr	r0, [pc, #584]	; (c068 <event_connection_prepare+0x308>)
    be1e:	f7fa fff2 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    be22:	4607      	mov	r7, r0
    be24:	2800      	cmp	r0, #0
    be26:	d079      	beq.n	bf1c <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    be28:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    be2c:	2204      	movs	r2, #4
    be2e:	f362 0302 	bfi	r3, r2, #0, #3
    be32:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be36:	7903      	ldrb	r3, [r0, #4]
    be38:	f043 0303 	orr.w	r3, r3, #3
    be3c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    be3e:	2318      	movs	r3, #24
    be40:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    be42:	230f      	movs	r3, #15
    be44:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    be46:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    be4a:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    be4c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    be4e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    be52:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    be54:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    be58:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    be5a:	2300      	movs	r3, #0
    be5c:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    be5e:	74c3      	strb	r3, [r0, #19]
    be60:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    be62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be66:	7543      	strb	r3, [r0, #21]
    be68:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    be6a:	75c3      	strb	r3, [r0, #23]
    be6c:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    be6e:	7643      	strb	r3, [r0, #25]
    be70:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    be72:	76c3      	strb	r3, [r0, #27]
    be74:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    be76:	7743      	strb	r3, [r0, #29]
    be78:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    be7a:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    be7e:	4601      	mov	r1, r0
    be80:	4620      	mov	r0, r4
    be82:	f7ff fe9f 	bl	bbc4 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    be86:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    be88:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    be8c:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    be90:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    be92:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    be96:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    be9a:	da0b      	bge.n	beb4 <event_connection_prepare+0x154>
			u32_t ticks_prepare_to_start =
    be9c:	68a3      	ldr	r3, [r4, #8]
    be9e:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    bea0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    bea4:	428b      	cmp	r3, r1
    bea6:	bf2c      	ite	cs
    bea8:	4443      	addcs	r3, r8
    beaa:	eb08 0301 	addcc.w	r3, r8, r1
    beae:	1a9b      	subs	r3, r3, r2
    beb0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    beb4:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    beb6:	4b6d      	ldr	r3, [pc, #436]	; (c06c <event_connection_prepare+0x30c>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    beb8:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bebc:	2201      	movs	r2, #1
    bebe:	4611      	mov	r1, r2
    bec0:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    bec2:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    bec4:	f7fb f86a 	bl	6f9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    bec8:	b340      	cbz	r0, bf1c <event_connection_prepare+0x1bc>
    beca:	4b61      	ldr	r3, [pc, #388]	; (c050 <event_connection_prepare+0x2f0>)
    becc:	9301      	str	r3, [sp, #4]
    bece:	9300      	str	r3, [sp, #0]
    bed0:	4b60      	ldr	r3, [pc, #384]	; (c054 <event_connection_prepare+0x2f4>)
    bed2:	681c      	ldr	r4, [r3, #0]
    bed4:	4b66      	ldr	r3, [pc, #408]	; (c070 <event_connection_prepare+0x310>)
    bed6:	4a60      	ldr	r2, [pc, #384]	; (c058 <event_connection_prepare+0x2f8>)
    bed8:	4960      	ldr	r1, [pc, #384]	; (c05c <event_connection_prepare+0x2fc>)
    beda:	4866      	ldr	r0, [pc, #408]	; (c074 <event_connection_prepare+0x314>)
    bedc:	e752      	b.n	bd84 <event_connection_prepare+0x24>
	if (conn->llcp_conn_param.status) {
    bede:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bee2:	b397      	cbz	r7, bf4a <event_connection_prepare+0x1ea>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bee4:	4860      	ldr	r0, [pc, #384]	; (c068 <event_connection_prepare+0x308>)
    bee6:	f7fa ff8e 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    beea:	4601      	mov	r1, r0
    beec:	b1b0      	cbz	r0, bf1c <event_connection_prepare+0x1bc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    beee:	7903      	ldrb	r3, [r0, #4]
    bef0:	f043 0303 	orr.w	r3, r3, #3
    bef4:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bef6:	2311      	movs	r3, #17
    bef8:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    befa:	2303      	movs	r3, #3
    befc:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    befe:	230f      	movs	r3, #15
    bf00:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bf02:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bf06:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bf08:	4620      	mov	r0, r4
    bf0a:	f7ff fe5b 	bl	bbc4 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bf0e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bf12:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bf16:	2300      	movs	r3, #0
    bf18:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bf1c:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bf20:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    bf24:	429a      	cmp	r2, r3
    bf26:	f000 810d 	beq.w	c144 <event_connection_prepare+0x3e4>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bf2a:	2005      	movs	r0, #5
    bf2c:	f7ff fcaa 	bl	b884 <event_stop.constprop.31>
	switch (conn->llcp_phy.state) {
    bf30:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bf34:	f003 0203 	and.w	r2, r3, #3
    bf38:	2a03      	cmp	r2, #3
    bf3a:	f200 817c 	bhi.w	c236 <event_connection_prepare+0x4d6>
    bf3e:	e8df f012 	tbh	[pc, r2, lsl #1]
    bf42:	00cf      	.short	0x00cf
    bf44:	01010101 	.word	0x01010101
    bf48:	011b      	.short	0x011b
	if (!conn->role) {
    bf4a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	db3b      	blt.n	bfca <event_connection_prepare+0x26a>
		if (conn->llcp_req != conn->llcp_ack) {
    bf52:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bf56:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bf5a:	428b      	cmp	r3, r1
    bf5c:	d1de      	bne.n	bf1c <event_connection_prepare+0x1bc>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf5e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bf62:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf66:	2205      	movs	r2, #5
    bf68:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bf6c:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bf70:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bf74:	2301      	movs	r3, #1
    bf76:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bf7a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bf7e:	b122      	cbz	r2, bf8a <event_connection_prepare+0x22a>
				((conn->llcp_conn_param.interval /
    bf80:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bf84:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bf86:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bf8a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bf8e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bf92:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bf96:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bf9a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bf9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bfa2:	2202      	movs	r2, #2
    bfa4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bfa8:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bfac:	f082 0208 	eor.w	r2, r2, #8
    bfb0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bfb4:	f362 0382 	bfi	r3, r2, #2, #1
    bfb8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bfbc:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bfbe:	2301      	movs	r3, #1
    bfc0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bfc4:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bfc8:	e7a8      	b.n	bf1c <event_connection_prepare+0x1bc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bfca:	4827      	ldr	r0, [pc, #156]	; (c068 <event_connection_prepare+0x308>)
    bfcc:	f7fa ff1b 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    bfd0:	4601      	mov	r1, r0
    bfd2:	2800      	cmp	r0, #0
    bfd4:	d0a2      	beq.n	bf1c <event_connection_prepare+0x1bc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bfd6:	7903      	ldrb	r3, [r0, #4]
    bfd8:	f043 0303 	orr.w	r3, r3, #3
    bfdc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bfde:	2318      	movs	r3, #24
    bfe0:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bfe2:	2310      	movs	r3, #16
    bfe4:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bfe6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bfea:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bfec:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bfee:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bff2:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bff4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bff8:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bffa:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bffe:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    c000:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c004:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    c008:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    c00c:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    c010:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c014:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    c018:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    c01c:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    c020:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c024:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    c028:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    c02c:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    c030:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    c034:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    c038:	4620      	mov	r0, r4
    c03a:	f7ff fdc3 	bl	bbc4 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c03e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c042:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    c046:	f8c5 7188 	str.w	r7, [r5, #392]	; 0x188
    c04a:	e767      	b.n	bf1c <event_connection_prepare+0x1bc>
    c04c:	200008f0 	.word	0x200008f0
    c050:	00014c55 	.word	0x00014c55
    c054:	20003aa4 	.word	0x20003aa4
    c058:	000159c3 	.word	0x000159c3
    c05c:	00015a12 	.word	0x00015a12
    c060:	00017178 	.word	0x00017178
    c064:	00017b2f 	.word	0x00017b2f
    c068:	20000a4c 	.word	0x20000a4c
    c06c:	20003df8 	.word	0x20003df8
    c070:	00017114 	.word	0x00017114
    c074:	000179f3 	.word	0x000179f3
	if (conn->pause_tx) {
    c078:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c07c:	0718      	lsls	r0, r3, #28
    c07e:	f53f af4d 	bmi.w	bf1c <event_connection_prepare+0x1bc>
	node_rx = packet_rx_reserve_get(2);
    c082:	2002      	movs	r0, #2
    c084:	f7fd fd0a 	bl	9a9c <packet_rx_reserve_get>
	if (!node_rx) {
    c088:	2800      	cmp	r0, #0
    c08a:	f43f af47 	beq.w	bf1c <event_connection_prepare+0x1bc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    c08e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    c092:	2203      	movs	r2, #3
    c094:	f362 0302 	bfi	r3, r2, #0, #3
    c098:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    c09c:	8c23      	ldrh	r3, [r4, #32]
    c09e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c0a0:	2301      	movs	r3, #1
    c0a2:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c0a4:	7a03      	ldrb	r3, [r0, #8]
    c0a6:	4313      	orrs	r3, r2
    c0a8:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    c0aa:	2318      	movs	r3, #24
    c0ac:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    c0ae:	230f      	movs	r3, #15
    c0b0:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    c0b2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c0b6:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    c0b8:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    c0ba:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    c0be:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    c0c0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    c0c4:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    c0c6:	f7fe fb85 	bl	a7d4 <packet_rx_enqueue>
    c0ca:	e727      	b.n	bf1c <event_connection_prepare+0x1bc>
		LL_ASSERT(0);
    c0cc:	4bbe      	ldr	r3, [pc, #760]	; (c3c8 <event_connection_prepare+0x668>)
    c0ce:	9301      	str	r3, [sp, #4]
    c0d0:	9300      	str	r3, [sp, #0]
    c0d2:	4bbe      	ldr	r3, [pc, #760]	; (c3cc <event_connection_prepare+0x66c>)
    c0d4:	681c      	ldr	r4, [r3, #0]
    c0d6:	4bbe      	ldr	r3, [pc, #760]	; (c3d0 <event_connection_prepare+0x670>)
		LL_ASSERT(0);
    c0d8:	4abe      	ldr	r2, [pc, #760]	; (c3d4 <event_connection_prepare+0x674>)
    c0da:	49bf      	ldr	r1, [pc, #764]	; (c3d8 <event_connection_prepare+0x678>)
    c0dc:	48bf      	ldr	r0, [pc, #764]	; (c3dc <event_connection_prepare+0x67c>)
    c0de:	e651      	b.n	bd84 <event_connection_prepare+0x24>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c0e0:	48bf      	ldr	r0, [pc, #764]	; (c3e0 <event_connection_prepare+0x680>)
    c0e2:	f7fa fe90 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    c0e6:	4601      	mov	r1, r0
    c0e8:	b360      	cbz	r0, c144 <event_connection_prepare+0x3e4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c0ea:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c0ee:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    c0f2:	2201      	movs	r2, #1
    c0f4:	f362 0301 	bfi	r3, r2, #0, #2
    c0f8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c0fc:	b2db      	uxtb	r3, r3
    c0fe:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c102:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c106:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    c10a:	f363 07c5 	bfi	r7, r3, #3, #3
    c10e:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c112:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    c116:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    c11a:	f367 1286 	bfi	r2, r7, #6, #1
    c11e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c122:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    c124:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c126:	f042 0203 	orr.w	r2, r2, #3
    c12a:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    c12c:	2203      	movs	r2, #3
    c12e:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c130:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    c132:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    c134:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    c136:	4620      	mov	r0, r4
    c138:	f7ff fd44 	bl	bbc4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c13c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c140:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    c144:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    c148:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c14c:	429a      	cmp	r2, r3
    c14e:	f000 8302 	beq.w	c756 <event_connection_prepare+0x9f6>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c152:	2005      	movs	r0, #5
    c154:	f7ff fb96 	bl	b884 <event_stop.constprop.31>
		switch (conn->llcp_type) {
    c158:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    c15c:	3b01      	subs	r3, #1
    c15e:	2b07      	cmp	r3, #7
    c160:	f200 85ba 	bhi.w	ccd8 <event_connection_prepare+0xf78>
    c164:	e8df f013 	tbh	[pc, r3, lsl #1]
    c168:	02d0006e 	.word	0x02d0006e
    c16c:	046a034f 	.word	0x046a034f
    c170:	05b8049a 	.word	0x05b8049a
    c174:	050a04f6 	.word	0x050a04f6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c178:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    c17c:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    c180:	f3c3 0282 	ubfx	r2, r3, #2, #3
    c184:	0791      	lsls	r1, r2, #30
    c186:	d544      	bpl.n	c212 <event_connection_prepare+0x4b2>
			conn->llcp_phy.tx = BIT(1);
    c188:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    c18a:	f362 0384 	bfi	r3, r2, #2, #3
    c18e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    c192:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    c196:	095a      	lsrs	r2, r3, #5
    c198:	0790      	lsls	r0, r2, #30
    c19a:	d543      	bpl.n	c224 <event_connection_prepare+0x4c4>
			conn->llcp_phy.rx = BIT(1);
    c19c:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    c19e:	f362 1347 	bfi	r3, r2, #5, #3
    c1a2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    c1a6:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    c1aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c1ae:	f3c2 0182 	ubfx	r1, r2, #2, #3
    c1b2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c1b6:	428b      	cmp	r3, r1
    c1b8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    c1bc:	bf14      	ite	ne
    c1be:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    c1c2:	f36f 0384 	bfceq	r3, #2, #3
    c1c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    c1ca:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c1ce:	0952      	lsrs	r2, r2, #5
    c1d0:	f003 0307 	and.w	r3, r3, #7
    c1d4:	4293      	cmp	r3, r2
    c1d6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    c1da:	bf14      	ite	ne
    c1dc:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    c1e0:	f36f 1347 	bfceq	r3, #5, #3
    c1e4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    c1e8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c1ec:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    c1f0:	f043 0301 	orr.w	r3, r3, #1
    c1f4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c1f8:	f362 0341 	bfi	r3, r2, #1, #1
    c1fc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    c200:	2308      	movs	r3, #8
    c202:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    c206:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    c20a:	3b01      	subs	r3, #1
    c20c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c210:	e798      	b.n	c144 <event_connection_prepare+0x3e4>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    c212:	07d7      	lsls	r7, r2, #31
    c214:	d501      	bpl.n	c21a <event_connection_prepare+0x4ba>
			conn->llcp_phy.tx = BIT(0);
    c216:	2201      	movs	r2, #1
    c218:	e7b7      	b.n	c18a <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    c21a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    c21e:	bf18      	it	ne
    c220:	2204      	movne	r2, #4
    c222:	e7b2      	b.n	c18a <event_connection_prepare+0x42a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    c224:	07d1      	lsls	r1, r2, #31
    c226:	d501      	bpl.n	c22c <event_connection_prepare+0x4cc>
			conn->llcp_phy.rx = BIT(0);
    c228:	2201      	movs	r2, #1
    c22a:	e7b8      	b.n	c19e <event_connection_prepare+0x43e>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    c22c:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    c230:	bf18      	it	ne
    c232:	2204      	movne	r2, #4
    c234:	e7b3      	b.n	c19e <event_connection_prepare+0x43e>
		LL_ASSERT(0);
    c236:	4b64      	ldr	r3, [pc, #400]	; (c3c8 <event_connection_prepare+0x668>)
    c238:	9301      	str	r3, [sp, #4]
    c23a:	9300      	str	r3, [sp, #0]
    c23c:	4b63      	ldr	r3, [pc, #396]	; (c3cc <event_connection_prepare+0x66c>)
    c23e:	681c      	ldr	r4, [r3, #0]
    c240:	4b68      	ldr	r3, [pc, #416]	; (c3e4 <event_connection_prepare+0x684>)
    c242:	e749      	b.n	c0d8 <event_connection_prepare+0x378>
	if (!conn_upd) {
    c244:	f8d5 3188 	ldr.w	r3, [r5, #392]	; 0x188
    c248:	b90b      	cbnz	r3, c24e <event_connection_prepare+0x4ee>
		_radio.conn_upd = conn;
    c24a:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    c24e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c252:	f013 0303 	ands.w	r3, r3, #3
    c256:	d06c      	beq.n	c332 <event_connection_prepare+0x5d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c258:	4861      	ldr	r0, [pc, #388]	; (c3e0 <event_connection_prepare+0x680>)
    c25a:	f7fa fdd4 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    c25e:	4607      	mov	r7, r0
    c260:	2800      	cmp	r0, #0
    c262:	f000 8278 	beq.w	c756 <event_connection_prepare+0x9f6>
		switch (conn->llcp.conn_upd.state) {
    c266:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c26a:	f003 0303 	and.w	r3, r3, #3
    c26e:	2b01      	cmp	r3, #1
    c270:	d05d      	beq.n	c32e <event_connection_prepare+0x5ce>
    c272:	2b02      	cmp	r3, #2
    c274:	d154      	bne.n	c320 <event_connection_prepare+0x5c0>
			fp_mayfly_select_or_use =
    c276:	4a5c      	ldr	r2, [pc, #368]	; (c3e8 <event_connection_prepare+0x688>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    c278:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c27c:	f36f 0301 	bfc	r3, #0, #2
    c280:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    c284:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c286:	3306      	adds	r3, #6
    c288:	4433      	add	r3, r6
    c28a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    c28c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c290:	7939      	ldrb	r1, [r7, #4]
    c292:	f041 0103 	orr.w	r1, r1, #3
    c296:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    c298:	210c      	movs	r1, #12
    c29a:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    c29c:	2100      	movs	r1, #0
    c29e:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    c2a0:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    c2a4:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    c2a6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    c2aa:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c2ae:	fbb1 f1f0 	udiv	r1, r1, r0
    c2b2:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    c2b6:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    c2ba:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    c2be:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c2c2:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    c2c6:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    c2ca:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    c2ce:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c2d2:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    c2d4:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c2d8:	2900      	cmp	r1, #0
    c2da:	da0b      	bge.n	c2f4 <event_connection_prepare+0x594>
			u32_t ticks_prepare_to_start =
    c2dc:	68a3      	ldr	r3, [r4, #8]
    c2de:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    c2e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    c2e4:	4283      	cmp	r3, r0
    c2e6:	bf2c      	ite	cs
    c2e8:	4443      	addcs	r3, r8
    c2ea:	eb08 0300 	addcc.w	r3, r8, r0
    c2ee:	1a5b      	subs	r3, r3, r1
    c2f0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    c2f4:	f107 0309 	add.w	r3, r7, #9
    c2f8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    c2fc:	4b3b      	ldr	r3, [pc, #236]	; (c3ec <event_connection_prepare+0x68c>)
    c2fe:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c300:	2201      	movs	r2, #1
    c302:	4611      	mov	r1, r2
    c304:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    c306:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c308:	f7fa fe48 	bl	6f9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    c30c:	2800      	cmp	r0, #0
    c30e:	f000 821e 	beq.w	c74e <event_connection_prepare+0x9ee>
    c312:	4b2d      	ldr	r3, [pc, #180]	; (c3c8 <event_connection_prepare+0x668>)
    c314:	9301      	str	r3, [sp, #4]
    c316:	9300      	str	r3, [sp, #0]
    c318:	4b2c      	ldr	r3, [pc, #176]	; (c3cc <event_connection_prepare+0x66c>)
    c31a:	681c      	ldr	r4, [r3, #0]
    c31c:	4b34      	ldr	r3, [pc, #208]	; (c3f0 <event_connection_prepare+0x690>)
    c31e:	e5da      	b.n	bed6 <event_connection_prepare+0x176>
			LL_ASSERT(0);
    c320:	4b29      	ldr	r3, [pc, #164]	; (c3c8 <event_connection_prepare+0x668>)
    c322:	9301      	str	r3, [sp, #4]
    c324:	9300      	str	r3, [sp, #0]
    c326:	4b29      	ldr	r3, [pc, #164]	; (c3cc <event_connection_prepare+0x66c>)
    c328:	681c      	ldr	r4, [r3, #0]
    c32a:	4b32      	ldr	r3, [pc, #200]	; (c3f4 <event_connection_prepare+0x694>)
    c32c:	e6d4      	b.n	c0d8 <event_connection_prepare+0x378>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    c32e:	4a32      	ldr	r2, [pc, #200]	; (c3f8 <event_connection_prepare+0x698>)
    c330:	e7a2      	b.n	c278 <event_connection_prepare+0x518>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    c332:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    c336:	1bf7      	subs	r7, r6, r7
    c338:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    c33a:	043a      	lsls	r2, r7, #16
    c33c:	f100 820b 	bmi.w	c756 <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    c340:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c344:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c348:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    c34c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    c350:	428a      	cmp	r2, r1
    c352:	d009      	beq.n	c368 <event_connection_prepare+0x608>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    c354:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    c358:	f002 0207 	and.w	r2, r2, #7
    c35c:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c35e:	bf04      	itt	eq
    c360:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    c364:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    c368:	f8d5 2188 	ldr.w	r2, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c36c:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    c36e:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    c370:	bf08      	it	eq
    c372:	f8c5 3188 	streq.w	r3, [r5, #392]	; 0x188
		_radio.ticker_id_prepare = 0;
    c376:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    c378:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c37a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c37e:	429a      	cmp	r2, r3
    c380:	d114      	bne.n	c3ac <event_connection_prepare+0x64c>
		     conn->conn_interval) ||
    c382:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    c386:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c388:	4299      	cmp	r1, r3
    c38a:	d10f      	bne.n	c3ac <event_connection_prepare+0x64c>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    c38c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c390:	435a      	muls	r2, r3
    c392:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c396:	f242 7110 	movw	r1, #10000	; 0x2710
    c39a:	fb01 2303 	mla	r3, r1, r3, r2
    c39e:	3b01      	subs	r3, #1
    c3a0:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    c3a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    c3a6:	b29b      	uxth	r3, r3
    c3a8:	429a      	cmp	r2, r3
    c3aa:	d03a      	beq.n	c422 <event_connection_prepare+0x6c2>
			node_rx = packet_rx_reserve_get(2);
    c3ac:	2002      	movs	r0, #2
    c3ae:	f7fd fb75 	bl	9a9c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    c3b2:	bb28      	cbnz	r0, c400 <event_connection_prepare+0x6a0>
    c3b4:	4b04      	ldr	r3, [pc, #16]	; (c3c8 <event_connection_prepare+0x668>)
    c3b6:	9301      	str	r3, [sp, #4]
    c3b8:	9300      	str	r3, [sp, #0]
    c3ba:	4b04      	ldr	r3, [pc, #16]	; (c3cc <event_connection_prepare+0x66c>)
    c3bc:	681c      	ldr	r4, [r3, #0]
    c3be:	4b0d      	ldr	r3, [pc, #52]	; (c3f4 <event_connection_prepare+0x694>)
		LL_ASSERT(node_rx);
    c3c0:	4a04      	ldr	r2, [pc, #16]	; (c3d4 <event_connection_prepare+0x674>)
    c3c2:	4905      	ldr	r1, [pc, #20]	; (c3d8 <event_connection_prepare+0x678>)
    c3c4:	480d      	ldr	r0, [pc, #52]	; (c3fc <event_connection_prepare+0x69c>)
    c3c6:	e4dd      	b.n	bd84 <event_connection_prepare+0x24>
    c3c8:	00014c55 	.word	0x00014c55
    c3cc:	20003aa4 	.word	0x20003aa4
    c3d0:	00017129 	.word	0x00017129
    c3d4:	000159c3 	.word	0x000159c3
    c3d8:	00015a12 	.word	0x00015a12
    c3dc:	00015962 	.word	0x00015962
    c3e0:	20000a4c 	.word	0x20000a4c
    c3e4:	0001714e 	.word	0x0001714e
    c3e8:	0000a521 	.word	0x0000a521
    c3ec:	20003de8 	.word	0x20003de8
    c3f0:	000170dd 	.word	0x000170dd
    c3f4:	000170f1 	.word	0x000170f1
    c3f8:	0000b27d 	.word	0x0000b27d
    c3fc:	0001791f 	.word	0x0001791f
			node_rx->hdr.handle = conn->handle;
    c400:	8c23      	ldrh	r3, [r4, #32]
    c402:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c404:	2308      	movs	r3, #8
    c406:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    c408:	2300      	movs	r3, #0
    c40a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    c40c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c410:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    c412:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    c416:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    c418:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c41c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    c41e:	f7fe f9d9 	bl	a7d4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    c422:	6823      	ldr	r3, [r4, #0]
    c424:	6866      	ldr	r6, [r4, #4]
    c426:	2b00      	cmp	r3, #0
    c428:	da09      	bge.n	c43e <event_connection_prepare+0x6de>
			u32_t ticks_prepare_to_start =
    c42a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c430:	42b0      	cmp	r0, r6
    c432:	bf2c      	ite	cs
    c434:	4480      	addcs	r8, r0
    c436:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    c438:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    c43a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    c43e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    c440:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    c444:	49a0      	ldr	r1, [pc, #640]	; (c6c8 <event_connection_prepare+0x968>)
		conn_interval_old = instant_latency * conn->conn_interval;
    c446:	fb13 f307 	smulbb	r3, r3, r7
    c44a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    c44c:	fbb3 f2fa 	udiv	r2, r3, sl
    c450:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    c454:	fb1a f009 	smulbb	r0, sl, r9
    c458:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    c45a:	4283      	cmp	r3, r0
    c45c:	f080 80c1 	bcs.w	c5e2 <event_connection_prepare+0x882>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    c460:	1ac0      	subs	r0, r0, r3
    c462:	f240 1223 	movw	r2, #291	; 0x123
    c466:	4342      	muls	r2, r0
    c468:	17c3      	asrs	r3, r0, #31
    c46a:	fb01 2303 	mla	r3, r1, r3, r2
    c46e:	fba0 0101 	umull	r0, r1, r0, r1
    c472:	4419      	add	r1, r3
    c474:	a392      	add	r3, pc, #584	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c476:	e9d3 2300 	ldrd	r2, r3, [r3]
    c47a:	f7f3 fecb 	bl	214 <__aeabi_uldivmod>
    c47e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c482:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c486:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c488:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c48a:	f8df b278 	ldr.w	fp, [pc, #632]	; c704 <event_connection_prepare+0x9a4>
    c48e:	1bdb      	subs	r3, r3, r7
    c490:	444b      	add	r3, r9
    c492:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    c494:	6823      	ldr	r3, [r4, #0]
    c496:	42b3      	cmp	r3, r6
    c498:	bf38      	it	cc
    c49a:	4633      	movcc	r3, r6
    c49c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    c49e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c4a2:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c4a6:	2b00      	cmp	r3, #0
    c4a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c4ac:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c4ae:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c4b2:	f280 80a7 	bge.w	c604 <event_connection_prepare+0x8a4>
				conn->slave.window_widening_periodic_us *
    c4b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c4b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c4ba:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c4be:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    c4c2:	4a82      	ldr	r2, [pc, #520]	; (c6cc <event_connection_prepare+0x96c>)
    c4c4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c4c8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c4cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c4d4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c4d8:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c4da:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c4dc:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c4e0:	4b7b      	ldr	r3, [pc, #492]	; (c6d0 <event_connection_prepare+0x970>)
				conn->llcp.conn_upd.win_size * 1250;
    c4e2:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c4e6:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c4ea:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c4ee:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c4f0:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c4f4:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c4f6:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c4f8:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c4fa:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c4fc:	429f      	cmp	r7, r3
    c4fe:	bf94      	ite	ls
    c500:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c502:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c504:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c506:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c508:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c50a:	fba0 010b 	umull	r0, r1, r0, fp
    c50e:	a36c      	add	r3, pc, #432	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c510:	e9d3 2300 	ldrd	r2, r3, [r3]
    c514:	f7f3 fe7e 	bl	214 <__aeabi_uldivmod>
    c518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c51a:	1a1b      	subs	r3, r3, r0
    c51c:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c520:	fbb3 f0f8 	udiv	r0, r3, r8
    c524:	fb08 f000 	mul.w	r0, r8, r0
    c528:	a365      	add	r3, pc, #404	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c52e:	fba0 010b 	umull	r0, r1, r0, fp
    c532:	f7f3 fe6f 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c536:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c538:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c53c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c540:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c544:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c546:	f242 7110 	movw	r1, #10000	; 0x2710
    c54a:	fb01 6303 	mla	r3, r1, r3, r6
    c54e:	3b01      	subs	r3, #1
    c550:	fbb3 f3f6 	udiv	r3, r3, r6
    c554:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c556:	4b5f      	ldr	r3, [pc, #380]	; (c6d4 <event_connection_prepare+0x974>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c558:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c55c:	4433      	add	r3, r6
    c55e:	fbb3 f3f6 	udiv	r3, r3, r6
    c562:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c566:	4b5c      	ldr	r3, [pc, #368]	; (c6d8 <event_connection_prepare+0x978>)
    c568:	4433      	add	r3, r6
    c56a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c56e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c570:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c572:	4299      	cmp	r1, r3
    c574:	bfc4      	itt	gt
    c576:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c57a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c57c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c580:	bfc8      	it	gt
    c582:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c584:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c588:	bfc8      	it	gt
    c58a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c58c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c590:	bf08      	it	eq
    c592:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c596:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c59a:	2000      	movs	r0, #0
    c59c:	2101      	movs	r1, #1
    c59e:	f006 fab9 	bl	12b14 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c5a2:	2200      	movs	r2, #0
    c5a4:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c5a6:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c5a8:	4610      	mov	r0, r2
    c5aa:	f7fa fccf 	bl	6f4c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5ae:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c5b2:	f641 2385 	movw	r3, #6789	; 0x1a85
    c5b6:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5b8:	3207      	adds	r2, #7
		ticker_status =
    c5ba:	9300      	str	r3, [sp, #0]
    c5bc:	b2d2      	uxtb	r2, r2
    c5be:	4b47      	ldr	r3, [pc, #284]	; (c6dc <event_connection_prepare+0x97c>)
    c5c0:	4608      	mov	r0, r1
    c5c2:	f7fb fb49 	bl	7c58 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5c6:	f030 0802 	bics.w	r8, r0, #2
    c5ca:	d028      	beq.n	c61e <event_connection_prepare+0x8be>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5cc:	4b44      	ldr	r3, [pc, #272]	; (c6e0 <event_connection_prepare+0x980>)
    c5ce:	9301      	str	r3, [sp, #4]
    c5d0:	9300      	str	r3, [sp, #0]
    c5d2:	4b44      	ldr	r3, [pc, #272]	; (c6e4 <event_connection_prepare+0x984>)
    c5d4:	4a44      	ldr	r2, [pc, #272]	; (c6e8 <event_connection_prepare+0x988>)
    c5d6:	681c      	ldr	r4, [r3, #0]
    c5d8:	4944      	ldr	r1, [pc, #272]	; (c6ec <event_connection_prepare+0x98c>)
    c5da:	4b45      	ldr	r3, [pc, #276]	; (c6f0 <event_connection_prepare+0x990>)
    c5dc:	4845      	ldr	r0, [pc, #276]	; (c6f4 <event_connection_prepare+0x994>)
    c5de:	f7ff bbd1 	b.w	bd84 <event_connection_prepare+0x24>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c5e2:	fb0a 3212 	mls	r2, sl, r2, r3
    c5e6:	b292      	uxth	r2, r2
    c5e8:	fba2 0101 	umull	r0, r1, r2, r1
    c5ec:	f240 1323 	movw	r3, #291	; 0x123
    c5f0:	fb03 1102 	mla	r1, r3, r2, r1
    c5f4:	a332      	add	r3, pc, #200	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5fa:	f7f3 fe0b 	bl	214 <__aeabi_uldivmod>
    c5fe:	eba8 0300 	sub.w	r3, r8, r0
    c602:	e740      	b.n	c486 <event_connection_prepare+0x726>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c604:	990c      	ldr	r1, [sp, #48]	; 0x30
    c606:	a32e      	add	r3, pc, #184	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c608:	e9d3 2300 	ldrd	r2, r3, [r3]
    c60c:	fba1 010b 	umull	r0, r1, r1, fp
    c610:	f7f3 fe00 	bl	214 <__aeabi_uldivmod>
    c614:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c618:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c61a:	4635      	mov	r5, r6
    c61c:	e78e      	b.n	c53c <event_connection_prepare+0x7dc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c61e:	fba5 ab0b 	umull	sl, fp, r5, fp
    c622:	a327      	add	r3, pc, #156	; (adr r3, c6c0 <event_connection_prepare+0x960>)
    c624:	e9d3 2300 	ldrd	r2, r3, [r3]
    c628:	4650      	mov	r0, sl
    c62a:	4659      	mov	r1, fp
    c62c:	f7f3 fdf2 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c630:	4a31      	ldr	r2, [pc, #196]	; (c6f8 <event_connection_prepare+0x998>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c632:	f894 6020 	ldrb.w	r6, [r4, #32]
    c636:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c63a:	2307      	movs	r3, #7
    c63c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c640:	2100      	movs	r1, #0
    c642:	4343      	muls	r3, r0
    c644:	fb02 3301 	mla	r3, r2, r1, r3
    c648:	fba0 0102 	umull	r0, r1, r0, r2
    c64c:	ebba 0000 	subs.w	r0, sl, r0
    c650:	4419      	add	r1, r3
    c652:	eb6b 0101 	sbc.w	r1, fp, r1
    c656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c65a:	2300      	movs	r3, #0
    c65c:	f7f3 fdda 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c660:	68e3      	ldr	r3, [r4, #12]
    c662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c664:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c668:	4924      	ldr	r1, [pc, #144]	; (c6fc <event_connection_prepare+0x99c>)
		ticker_status =
    c66a:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c66c:	441a      	add	r2, r3
    c66e:	4613      	mov	r3, r2
    c670:	4a23      	ldr	r2, [pc, #140]	; (c700 <event_connection_prepare+0x9a0>)
		ticker_status =
    c672:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c674:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c678:	bf38      	it	cc
    c67a:	460a      	movcc	r2, r1
    c67c:	3607      	adds	r6, #7
		ticker_status =
    c67e:	f641 2195 	movw	r1, #6805	; 0x1a95
    c682:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c684:	b2f6      	uxtb	r6, r6
		ticker_status =
    c686:	4915      	ldr	r1, [pc, #84]	; (c6dc <event_connection_prepare+0x97c>)
    c688:	9107      	str	r1, [sp, #28]
    c68a:	9205      	str	r2, [sp, #20]
    c68c:	9406      	str	r4, [sp, #24]
    c68e:	f8cd 800c 	str.w	r8, [sp, #12]
    c692:	9501      	str	r5, [sp, #4]
    c694:	9700      	str	r7, [sp, #0]
    c696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c698:	4632      	mov	r2, r6
    c69a:	4641      	mov	r1, r8
    c69c:	4640      	mov	r0, r8
    c69e:	f7fb fa3d 	bl	7b1c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c6a2:	f030 0002 	bics.w	r0, r0, #2
    c6a6:	d191      	bne.n	c5cc <event_connection_prepare+0x86c>
		if (mayfly_was_enabled) {
    c6a8:	f1b9 0f00 	cmp.w	r9, #0
    c6ac:	f000 838f 	beq.w	cdce <event_connection_prepare+0x106e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c6b0:	2201      	movs	r2, #1
    c6b2:	4611      	mov	r1, r2
}
    c6b4:	b00f      	add	sp, #60	; 0x3c
    c6b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c6ba:	f7fa bc47 	b.w	6f4c <mayfly_enable>
    c6be:	bf00      	nop
    c6c0:	1afd498d 	.word	0x1afd498d
    c6c4:	00000007 	.word	0x00000007
    c6c8:	09ce5400 	.word	0x09ce5400
    c6cc:	000174d8 	.word	0x000174d8
    c6d0:	000f4240 	.word	0x000f4240
    c6d4:	026259ff 	.word	0x026259ff
    c6d8:	01c9c37f 	.word	0x01c9c37f
    c6dc:	0000a9fd 	.word	0x0000a9fd
    c6e0:	00014c55 	.word	0x00014c55
    c6e4:	20003aa4 	.word	0x20003aa4
    c6e8:	000159c3 	.word	0x000159c3
    c6ec:	00015a12 	.word	0x00015a12
    c6f0:	000170f1 	.word	0x000170f1
    c6f4:	000172b9 	.word	0x000172b9
    c6f8:	1afd498d 	.word	0x1afd498d
    c6fc:	0000cf91 	.word	0x0000cf91
    c700:	0000cf95 	.word	0x0000cf95
    c704:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
    c708:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c70c:	2b00      	cmp	r3, #0
    c70e:	d05e      	beq.n	c7ce <event_connection_prepare+0xa6e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c710:	48c9      	ldr	r0, [pc, #804]	; (ca38 <event_connection_prepare+0xcd8>)
    c712:	f7fa fb78 	bl	6e06 <mem_acquire>
		if (node_tx) {
    c716:	4607      	mov	r7, r0
    c718:	b1e8      	cbz	r0, c756 <event_connection_prepare+0x9f6>
			conn->llcp.chan_map.initiate = 0;
    c71a:	2300      	movs	r3, #0
    c71c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c720:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c722:	3306      	adds	r3, #6
    c724:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c726:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c72a:	7903      	ldrb	r3, [r0, #4]
    c72c:	f043 0303 	orr.w	r3, r3, #3
    c730:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c732:	2308      	movs	r3, #8
    c734:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c736:	2301      	movs	r3, #1
    c738:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c73a:	2205      	movs	r2, #5
    c73c:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c740:	3008      	adds	r0, #8
    c742:	f7f5 fa6d 	bl	1c20 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c746:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c74a:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c74e:	4639      	mov	r1, r7
    c750:	4620      	mov	r0, r4
    c752:	f7ff fa37 	bl	bbc4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c756:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    c75a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c75e:	429a      	cmp	r2, r3
    c760:	d01e      	beq.n	c7a0 <event_connection_prepare+0xa40>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c762:	2005      	movs	r0, #5
    c764:	f7ff f88e 	bl	b884 <event_stop.constprop.31>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c768:	48b3      	ldr	r0, [pc, #716]	; (ca38 <event_connection_prepare+0xcd8>)
    c76a:	f7fa fb4c 	bl	6e06 <mem_acquire>
		if (node_tx) {
    c76e:	4601      	mov	r1, r0
    c770:	b1b0      	cbz	r0, c7a0 <event_connection_prepare+0xa40>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c772:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    c776:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c77a:	7903      	ldrb	r3, [r0, #4]
    c77c:	f043 0303 	orr.w	r3, r3, #3
    c780:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c782:	2302      	movs	r3, #2
    c784:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c786:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    c788:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c78c:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    c78e:	4620      	mov	r0, r4
    c790:	f7ff fa18 	bl	bbc4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    c794:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    c796:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    c798:	bf98      	it	ls
    c79a:	3301      	addls	r3, #1
    c79c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c7a0:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c7a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c7a8:	429a      	cmp	r2, r3
    c7aa:	f000 82f7 	beq.w	cd9c <event_connection_prepare+0x103c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c7ae:	2005      	movs	r0, #5
    c7b0:	f7ff f868 	bl	b884 <event_stop.constprop.31>
	switch (conn->llcp_length.state) {
    c7b4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c7b8:	f003 0303 	and.w	r3, r3, #3
    c7bc:	2b03      	cmp	r3, #3
    c7be:	f200 8318 	bhi.w	cdf2 <event_connection_prepare+0x1092>
    c7c2:	e8df f013 	tbh	[pc, r3, lsl #1]
    c7c6:	0291      	.short	0x0291
    c7c8:	02eb02eb 	.word	0x02eb02eb
    c7cc:	0307      	.short	0x0307
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c7ce:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c7d2:	1af3      	subs	r3, r6, r3
    c7d4:	041f      	lsls	r7, r3, #16
    c7d6:	d4be      	bmi.n	c756 <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    c7d8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c7dc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c7e0:	f104 0717 	add.w	r7, r4, #23
    c7e4:	2205      	movs	r2, #5
    c7e6:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c7ea:	4638      	mov	r0, r7
    c7ec:	f7f5 fa18 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c7f0:	2105      	movs	r1, #5
    c7f2:	4638      	mov	r0, r7
    c7f4:	f7fa fcb2 	bl	715c <util_ones_count_get>
		conn->data_chan_count =
    c7f8:	7f63      	ldrb	r3, [r4, #29]
    c7fa:	f360 0305 	bfi	r3, r0, #0, #6
    c7fe:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c800:	2301      	movs	r3, #1
    c802:	7723      	strb	r3, [r4, #28]
    c804:	e7a7      	b.n	c756 <event_connection_prepare+0x9f6>
	if (conn->llcp.encryption.initiate) {
    c806:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c80a:	f1b9 0f00 	cmp.w	r9, #0
    c80e:	d1a2      	bne.n	c756 <event_connection_prepare+0x9f6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c810:	4889      	ldr	r0, [pc, #548]	; (ca38 <event_connection_prepare+0xcd8>)
    c812:	f7fa faf8 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    c816:	4607      	mov	r7, r0
    c818:	2800      	cmp	r0, #0
    c81a:	d09c      	beq.n	c756 <event_connection_prepare+0x9f6>
	if (!conn->role) {
    c81c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c820:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c822:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c826:	db4d      	blt.n	c8c4 <event_connection_prepare+0xb64>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c828:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c82c:	465b      	mov	r3, fp
    c82e:	464a      	mov	r2, r9
    c830:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c834:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c838:	f005 fcde 	bl	121f8 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c83c:	2210      	movs	r2, #16
    c83e:	4659      	mov	r1, fp
    c840:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c844:	f7f5 f9ec 	bl	1c20 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c848:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c84c:	2208      	movs	r2, #8
    c84e:	f204 1033 	addw	r0, r4, #307	; 0x133
    c852:	f7f5 f9e5 	bl	1c20 <memcpy>
		conn->ccm_rx.direction = 0;
    c856:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c85a:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c85e:	f369 0300 	bfi	r3, r9, #0, #1
    c862:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c866:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c86a:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c86e:	f043 0301 	orr.w	r3, r3, #1
    c872:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c876:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c87a:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c87e:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c882:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c886:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c88a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c88e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c892:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c896:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c89a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c89e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c8a2:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c8a6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c8aa:	4651      	mov	r1, sl
    c8ac:	4620      	mov	r0, r4
    c8ae:	f7ff fa17 	bl	bce0 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c8b2:	4639      	mov	r1, r7
    c8b4:	4620      	mov	r0, r4
    c8b6:	f7ff f985 	bl	bbc4 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c8ba:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c8be:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c8c2:	e748      	b.n	c756 <event_connection_prepare+0x9f6>
	else if (!conn->pause_tx || conn->refresh) {
    c8c4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c8c8:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c8cc:	2b08      	cmp	r3, #8
    c8ce:	f000 80a2 	beq.w	ca16 <event_connection_prepare+0xcb6>
		if (conn->llcp.encryption.error_code) {
    c8d2:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c8d6:	f1b9 0f00 	cmp.w	r9, #0
    c8da:	d020      	beq.n	c91e <event_connection_prepare+0xbbe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c8dc:	7903      	ldrb	r3, [r0, #4]
    c8de:	f043 0303 	orr.w	r3, r3, #3
    c8e2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c8e4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c8e8:	0698      	lsls	r0, r3, #26
    c8ea:	d512      	bpl.n	c912 <event_connection_prepare+0xbb2>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c8ec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c8f0:	0759      	lsls	r1, r3, #29
    c8f2:	d50e      	bpl.n	c912 <event_connection_prepare+0xbb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c8f4:	2311      	movs	r3, #17
    c8f6:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c8f8:	2303      	movs	r3, #3
    c8fa:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c8fc:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c900:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c902:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c904:	797b      	ldrb	r3, [r7, #5]
    c906:	3301      	adds	r3, #1
    c908:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c90a:	2300      	movs	r3, #0
    c90c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c910:	e7cf      	b.n	c8b2 <event_connection_prepare+0xb52>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c912:	230d      	movs	r3, #13
    c914:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c916:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c91a:	2301      	movs	r3, #1
    c91c:	e7f1      	b.n	c902 <event_connection_prepare+0xba2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c91e:	4846      	ldr	r0, [pc, #280]	; (ca38 <event_connection_prepare+0xcd8>)
    c920:	f7fa fa71 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    c924:	4682      	mov	sl, r0
    c926:	2800      	cmp	r0, #0
    c928:	f000 8314 	beq.w	cf54 <event_connection_prepare+0x11f4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c92c:	7903      	ldrb	r3, [r0, #4]
    c92e:	f043 0303 	orr.w	r3, r3, #3
    c932:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c934:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c938:	230d      	movs	r3, #13
    c93a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c93c:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c940:	f100 0308 	add.w	r3, r0, #8
    c944:	4619      	mov	r1, r3
    c946:	2208      	movs	r2, #8
    c948:	6868      	ldr	r0, [r5, #4]
    c94a:	930d      	str	r3, [sp, #52]	; 0x34
    c94c:	f006 fe32 	bl	135b4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c950:	f10a 0310 	add.w	r3, sl, #16
    c954:	4619      	mov	r1, r3
    c956:	465a      	mov	r2, fp
    c958:	6868      	ldr	r0, [r5, #4]
    c95a:	930b      	str	r3, [sp, #44]	; 0x2c
    c95c:	f006 fe2a 	bl	135b4 <entropy_nrf_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c962:	2208      	movs	r2, #8
    c964:	4619      	mov	r1, r3
    c966:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c96a:	f7f5 f959 	bl	1c20 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c96e:	465a      	mov	r2, fp
    c970:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c972:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c976:	f7f5 f953 	bl	1c20 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c97a:	4651      	mov	r1, sl
    c97c:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c97e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c982:	f7ff f91f 	bl	bbc4 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c986:	4653      	mov	r3, sl
    c988:	464a      	mov	r2, r9
    c98a:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c98e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c992:	f005 fc31 	bl	121f8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c996:	2210      	movs	r2, #16
    c998:	4651      	mov	r1, sl
    c99a:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c99e:	f7f5 f93f 	bl	1c20 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c9a2:	2208      	movs	r2, #8
    c9a4:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c9a8:	f204 1033 	addw	r0, r4, #307	; 0x133
    c9ac:	f7f5 f938 	bl	1c20 <memcpy>
			conn->ccm_rx.direction = 1;
    c9b0:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c9b4:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c9b8:	f043 0301 	orr.w	r3, r3, #1
    c9bc:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c9c0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c9c4:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c9c8:	f369 0300 	bfi	r3, r9, #0, #1
    c9cc:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c9d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c9d4:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c9d8:	f043 0310 	orr.w	r3, r3, #16
    c9dc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9e0:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c9e2:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c9e6:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c9ea:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c9ee:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c9f2:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c9f6:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c9fa:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c9fe:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    ca02:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    ca06:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca0a:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    ca0c:	2301      	movs	r3, #1
    ca0e:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    ca10:	2305      	movs	r3, #5
    ca12:	71fb      	strb	r3, [r7, #7]
    ca14:	e74d      	b.n	c8b2 <event_connection_prepare+0xb52>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    ca16:	4651      	mov	r1, sl
    ca18:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    ca1c:	f7ff f960 	bl	bce0 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    ca20:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    ca24:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    ca28:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    ca2c:	f369 03c3 	bfi	r3, r9, #3, #1
    ca30:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    ca34:	e73d      	b.n	c8b2 <event_connection_prepare+0xb52>
    ca36:	bf00      	nop
    ca38:	20000a4c 	.word	0x20000a4c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ca3c:	48b5      	ldr	r0, [pc, #724]	; (cd14 <event_connection_prepare+0xfb4>)
    ca3e:	f7fa f9e2 	bl	6e06 <mem_acquire>
	if (node_tx) {
    ca42:	4607      	mov	r7, r0
    ca44:	2800      	cmp	r0, #0
    ca46:	f43f ae86 	beq.w	c756 <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    ca4a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    ca4e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    ca52:	4bb1      	ldr	r3, [pc, #708]	; (cd18 <event_connection_prepare+0xfb8>)
    ca54:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca58:	7903      	ldrb	r3, [r0, #4]
    ca5a:	f043 0303 	orr.w	r3, r3, #3
    ca5e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    ca60:	2309      	movs	r3, #9
    ca62:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    ca64:	f994 301d 	ldrsb.w	r3, [r4, #29]
    ca68:	2b00      	cmp	r3, #0
    ca6a:	bfac      	ite	ge
    ca6c:	2308      	movge	r3, #8
    ca6e:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ca70:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    ca72:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    ca74:	2100      	movs	r1, #0
    ca76:	4410      	add	r0, r2
    ca78:	f7f5 f8fe 	bl	1c78 <memset>
			conn->llcp_features & 0xFF;
    ca7c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    ca80:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    ca82:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    ca84:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    ca86:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    ca88:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    ca8a:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    ca8c:	4620      	mov	r0, r4
    ca8e:	f7ff f899 	bl	bbc4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    ca92:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ca96:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    ca9a:	e65c      	b.n	c756 <event_connection_prepare+0x9f6>
	if (conn->llcp_version.tx == 0) {
    ca9c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    caa0:	07da      	lsls	r2, r3, #31
    caa2:	d424      	bmi.n	caee <event_connection_prepare+0xd8e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    caa4:	489b      	ldr	r0, [pc, #620]	; (cd14 <event_connection_prepare+0xfb4>)
    caa6:	f7fa f9ae 	bl	6e06 <mem_acquire>
		if (node_tx) {
    caaa:	4601      	mov	r1, r0
    caac:	2800      	cmp	r0, #0
    caae:	f43f ae52 	beq.w	c756 <event_connection_prepare+0x9f6>
			conn->llcp_ack = conn->llcp_req;
    cab2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cab6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    caba:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    cabe:	f043 0301 	orr.w	r3, r3, #1
    cac2:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cac6:	7903      	ldrb	r3, [r0, #4]
    cac8:	f043 0303 	orr.w	r3, r3, #3
    cacc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    cace:	2306      	movs	r3, #6
    cad0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cad2:	230c      	movs	r3, #12
    cad4:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    cad6:	2309      	movs	r3, #9
    cad8:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    cada:	f06f 030e 	mvn.w	r3, #14
    cade:	7243      	strb	r3, [r0, #9]
    cae0:	2305      	movs	r3, #5
    cae2:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    cae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cae8:	72c3      	strb	r3, [r0, #11]
    caea:	7303      	strb	r3, [r0, #12]
    caec:	e7ce      	b.n	ca8c <event_connection_prepare+0xd2c>
	} else if (conn->llcp_version.rx != 0) {
    caee:	079b      	lsls	r3, r3, #30
    caf0:	d528      	bpl.n	cb44 <event_connection_prepare+0xde4>
		conn->llcp_ack = conn->llcp_req;
    caf2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    caf6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    cafa:	2002      	movs	r0, #2
    cafc:	f7fc ffce 	bl	9a9c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    cb00:	b930      	cbnz	r0, cb10 <event_connection_prepare+0xdb0>
    cb02:	4b86      	ldr	r3, [pc, #536]	; (cd1c <event_connection_prepare+0xfbc>)
    cb04:	9301      	str	r3, [sp, #4]
    cb06:	9300      	str	r3, [sp, #0]
    cb08:	4b85      	ldr	r3, [pc, #532]	; (cd20 <event_connection_prepare+0xfc0>)
    cb0a:	681c      	ldr	r4, [r3, #0]
    cb0c:	4b85      	ldr	r3, [pc, #532]	; (cd24 <event_connection_prepare+0xfc4>)
    cb0e:	e457      	b.n	c3c0 <event_connection_prepare+0x660>
		node_rx->hdr.handle = conn->handle;
    cb10:	8c23      	ldrh	r3, [r4, #32]
    cb12:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cb14:	2301      	movs	r3, #1
    cb16:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cb18:	7a03      	ldrb	r3, [r0, #8]
    cb1a:	f043 0303 	orr.w	r3, r3, #3
    cb1e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cb20:	2306      	movs	r3, #6
    cb22:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    cb24:	230c      	movs	r3, #12
    cb26:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    cb28:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    cb2c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    cb2e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    cb32:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    cb36:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    cb3a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    cb3e:	f7fd fe49 	bl	a7d4 <packet_rx_enqueue>
    cb42:	e608      	b.n	c756 <event_connection_prepare+0x9f6>
		LL_ASSERT(0);
    cb44:	4b75      	ldr	r3, [pc, #468]	; (cd1c <event_connection_prepare+0xfbc>)
    cb46:	9301      	str	r3, [sp, #4]
    cb48:	9300      	str	r3, [sp, #0]
    cb4a:	4b75      	ldr	r3, [pc, #468]	; (cd20 <event_connection_prepare+0xfc0>)
    cb4c:	681c      	ldr	r4, [r3, #0]
    cb4e:	4b75      	ldr	r3, [pc, #468]	; (cd24 <event_connection_prepare+0xfc4>)
    cb50:	f7ff bac2 	b.w	c0d8 <event_connection_prepare+0x378>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb54:	486f      	ldr	r0, [pc, #444]	; (cd14 <event_connection_prepare+0xfb4>)
    cb56:	f7fa f956 	bl	6e06 <mem_acquire>
	if (node_tx) {
    cb5a:	4601      	mov	r1, r0
    cb5c:	2800      	cmp	r0, #0
    cb5e:	f43f adfa 	beq.w	c756 <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cb62:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cb66:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb6a:	7903      	ldrb	r3, [r0, #4]
    cb6c:	f043 0303 	orr.w	r3, r3, #3
    cb70:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    cb72:	2301      	movs	r3, #1
    cb74:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    cb76:	2312      	movs	r3, #18
    cb78:	71c3      	strb	r3, [r0, #7]
    cb7a:	e787      	b.n	ca8c <event_connection_prepare+0xd2c>
	if (conn->llcp.phy_upd_ind.initiate) {
    cb7c:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    cb80:	07d7      	lsls	r7, r2, #31
    cb82:	d554      	bpl.n	cc2e <event_connection_prepare+0xece>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cb84:	4863      	ldr	r0, [pc, #396]	; (cd14 <event_connection_prepare+0xfb4>)
    cb86:	f7fa f93e 	bl	6e06 <mem_acquire>
		if (node_tx) {
    cb8a:	4607      	mov	r7, r0
    cb8c:	2800      	cmp	r0, #0
    cb8e:	f43f ade2 	beq.w	c756 <event_connection_prepare+0x9f6>
			conn->llcp.phy_upd_ind.initiate = 0;
    cb92:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cb96:	f36f 0300 	bfc	r3, #0, #1
    cb9a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    cb9e:	b2db      	uxtb	r3, r3
    cba0:	f3c3 0982 	ubfx	r9, r3, #2, #3
    cba4:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    cba8:	d13b      	bne.n	cc22 <event_connection_prepare+0xec2>
				conn->llcp_ack = conn->llcp_req;
    cbaa:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    cbae:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    cbb2:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    cbb4:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    cbb8:	d51d      	bpl.n	cbf6 <event_connection_prepare+0xe96>
					node_rx = packet_rx_reserve_get(2);
    cbba:	2002      	movs	r0, #2
    cbbc:	f7fc ff6e 	bl	9a9c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    cbc0:	b938      	cbnz	r0, cbd2 <event_connection_prepare+0xe72>
		LL_ASSERT(node_rx);
    cbc2:	4b56      	ldr	r3, [pc, #344]	; (cd1c <event_connection_prepare+0xfbc>)
    cbc4:	9301      	str	r3, [sp, #4]
    cbc6:	9300      	str	r3, [sp, #0]
    cbc8:	4b55      	ldr	r3, [pc, #340]	; (cd20 <event_connection_prepare+0xfc0>)
    cbca:	681c      	ldr	r4, [r3, #0]
    cbcc:	4b56      	ldr	r3, [pc, #344]	; (cd28 <event_connection_prepare+0xfc8>)
    cbce:	f7ff bbf7 	b.w	c3c0 <event_connection_prepare+0x660>
					node_rx->hdr.handle = conn->handle;
    cbd2:	8c23      	ldrh	r3, [r4, #32]
    cbd4:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    cbd6:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    cbda:	230c      	movs	r3, #12
    cbdc:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    cbde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cbe2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cbe6:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    cbe8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    cbec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cbf0:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    cbf2:	f7fd fdef 	bl	a7d4 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cbf6:	793b      	ldrb	r3, [r7, #4]
    cbf8:	f043 0303 	orr.w	r3, r3, #3
    cbfc:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    cbfe:	2305      	movs	r3, #5
    cc00:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    cc02:	2318      	movs	r3, #24
    cc04:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    cc06:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc0a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cc0e:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    cc10:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc14:	f3c3 1342 	ubfx	r3, r3, #5, #3
    cc18:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    cc1a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cc1e:	817b      	strh	r3, [r7, #10]
    cc20:	e595      	b.n	c74e <event_connection_prepare+0x9ee>
								 conn->latency +
    cc22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cc24:	3306      	adds	r3, #6
    cc26:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    cc28:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    cc2c:	e7e3      	b.n	cbf6 <event_connection_prepare+0xe96>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    cc2e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    cc32:	1af3      	subs	r3, r6, r3
    cc34:	0419      	lsls	r1, r3, #16
    cc36:	f53f ad8e 	bmi.w	c756 <event_connection_prepare+0x9f6>
		conn->llcp_ack = conn->llcp_req;
    cc3a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    cc3e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    cc42:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    cc46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    cc4a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cc4e:	bf18      	it	ne
    cc50:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    cc54:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    cc58:	bf1c      	itt	ne
    cc5a:	f367 03c5 	bfine	r3, r7, #3, #3
    cc5e:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    cc62:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    cc66:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    cc6a:	d008      	beq.n	cc7e <event_connection_prepare+0xf1e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    cc6c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    cc70:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    cc74:	095b      	lsrs	r3, r3, #5
    cc76:	f363 0702 	bfi	r7, r3, #0, #3
    cc7a:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    cc7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cc82:	461f      	mov	r7, r3
    cc84:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cc88:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cc8c:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    cc8e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cc92:	d40b      	bmi.n	ccac <event_connection_prepare+0xf4c>
    cc94:	b2fb      	uxtb	r3, r7
    cc96:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    cc9a:	4283      	cmp	r3, r0
    cc9c:	d106      	bne.n	ccac <event_connection_prepare+0xf4c>
		    (conn->phy_rx == old_rx)) {
    cc9e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    cca2:	f003 0307 	and.w	r3, r3, #7
    cca6:	428b      	cmp	r3, r1
    cca8:	f43f ad55 	beq.w	c756 <event_connection_prepare+0x9f6>
		node_rx = packet_rx_reserve_get(2);
    ccac:	2002      	movs	r0, #2
    ccae:	f7fc fef5 	bl	9a9c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ccb2:	2800      	cmp	r0, #0
    ccb4:	d085      	beq.n	cbc2 <event_connection_prepare+0xe62>
		node_rx->hdr.handle = conn->handle;
    ccb6:	8c23      	ldrh	r3, [r4, #32]
    ccb8:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ccba:	230c      	movs	r3, #12
    ccbc:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    ccbe:	2300      	movs	r3, #0
    ccc0:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    ccc2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    ccc6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ccca:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    cccc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    ccd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ccd4:	7343      	strb	r3, [r0, #13]
    ccd6:	e732      	b.n	cb3e <event_connection_prepare+0xdde>
			LL_ASSERT(0);
    ccd8:	4b10      	ldr	r3, [pc, #64]	; (cd1c <event_connection_prepare+0xfbc>)
    ccda:	9301      	str	r3, [sp, #4]
    ccdc:	9300      	str	r3, [sp, #0]
    ccde:	4b10      	ldr	r3, [pc, #64]	; (cd20 <event_connection_prepare+0xfc0>)
    cce0:	681c      	ldr	r4, [r3, #0]
    cce2:	4b12      	ldr	r3, [pc, #72]	; (cd2c <event_connection_prepare+0xfcc>)
    cce4:	f7ff b9f8 	b.w	c0d8 <event_connection_prepare+0x378>
		free_count_rx = packet_rx_acquired_count_get() +
    cce8:	f7fc fec2 	bl	9a70 <packet_rx_acquired_count_get>
    ccec:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    ccee:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    ccf2:	f7fa f8b7 	bl	6e64 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    ccf6:	4438      	add	r0, r7
    ccf8:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    ccfa:	28ff      	cmp	r0, #255	; 0xff
    ccfc:	d920      	bls.n	cd40 <event_connection_prepare+0xfe0>
		LL_ASSERT(free_count_rx <= 0xFF);
    ccfe:	4b07      	ldr	r3, [pc, #28]	; (cd1c <event_connection_prepare+0xfbc>)
    cd00:	9301      	str	r3, [sp, #4]
    cd02:	9300      	str	r3, [sp, #0]
    cd04:	4b06      	ldr	r3, [pc, #24]	; (cd20 <event_connection_prepare+0xfc0>)
    cd06:	4a0a      	ldr	r2, [pc, #40]	; (cd30 <event_connection_prepare+0xfd0>)
    cd08:	681c      	ldr	r4, [r3, #0]
    cd0a:	490a      	ldr	r1, [pc, #40]	; (cd34 <event_connection_prepare+0xfd4>)
    cd0c:	4b0a      	ldr	r3, [pc, #40]	; (cd38 <event_connection_prepare+0xfd8>)
    cd0e:	480b      	ldr	r0, [pc, #44]	; (cd3c <event_connection_prepare+0xfdc>)
    cd10:	f7ff b838 	b.w	bd84 <event_connection_prepare+0x24>
    cd14:	20000a4c 	.word	0x20000a4c
    cd18:	000141ff 	.word	0x000141ff
    cd1c:	00014c55 	.word	0x00014c55
    cd20:	20003aa4 	.word	0x20003aa4
    cd24:	00017105 	.word	0x00017105
    cd28:	00017161 	.word	0x00017161
    cd2c:	00017178 	.word	0x00017178
    cd30:	000159c3 	.word	0x000159c3
    cd34:	00015a12 	.word	0x00015a12
    cd38:	0001713f 	.word	0x0001713f
    cd3c:	00017307 	.word	0x00017307
		if (_radio.packet_rx_data_count != free_count_rx) {
    cd40:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cd44:	4283      	cmp	r3, r0
    cd46:	d129      	bne.n	cd9c <event_connection_prepare+0x103c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    cd48:	4885      	ldr	r0, [pc, #532]	; (cf60 <event_connection_prepare+0x1200>)
    cd4a:	f7fa f85c 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    cd4e:	4601      	mov	r1, r0
    cd50:	b320      	cbz	r0, cd9c <event_connection_prepare+0x103c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd52:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    cd56:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cd5a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		conn->default_tx_time = conn->llcp_length.tx_time;
    cd5e:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd60:	2501      	movs	r5, #1
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    cd62:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    cd64:	f365 0301 	bfi	r3, r5, #0, #2
    cd68:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd6c:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    cd6e:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    cd70:	f043 0303 	orr.w	r3, r3, #3
    cd74:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    cd76:	2309      	movs	r3, #9
    cd78:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    cd7a:	2314      	movs	r3, #20
    cd7c:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    cd7e:	231b      	movs	r3, #27
    cd80:	720b      	strb	r3, [r1, #8]
    cd82:	2300      	movs	r3, #0
    cd84:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cd86:	2348      	movs	r3, #72	; 0x48
    cd88:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    cd8a:	818a      	strh	r2, [r1, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    cd8c:	72cd      	strb	r5, [r1, #11]
		ctrl_tx_enqueue(conn, node_tx);
    cd8e:	4620      	mov	r0, r4
    cd90:	f7fe ff18 	bl	bbc4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    cd94:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    cd98:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    cd9c:	f894 3020 	ldrb.w	r3, [r4, #32]
    cda0:	f994 501d 	ldrsb.w	r5, [r4, #29]
    cda4:	486f      	ldr	r0, [pc, #444]	; (cf64 <event_connection_prepare+0x1204>)
    cda6:	4970      	ldr	r1, [pc, #448]	; (cf68 <event_connection_prepare+0x1208>)
    cda8:	68a2      	ldr	r2, [r4, #8]
    cdaa:	9403      	str	r4, [sp, #12]
    cdac:	3307      	adds	r3, #7
    cdae:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    cdb2:	bf38      	it	cc
    cdb4:	4601      	movcc	r1, r0
    cdb6:	b2db      	uxtb	r3, r3
    cdb8:	e88d 000c 	stmia.w	sp, {r2, r3}
    cdbc:	9102      	str	r1, [sp, #8]
    cdbe:	1d23      	adds	r3, r4, #4
    cdc0:	4622      	mov	r2, r4
    cdc2:	990c      	ldr	r1, [sp, #48]	; 0x30
    cdc4:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    cdc6:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    cdc8:	f7fe fd6a 	bl	b8a0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    cdcc:	8466      	strh	r6, [r4, #34]	; 0x22
}
    cdce:	b00f      	add	sp, #60	; 0x3c
    cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    cdd4:	f7fc fe4c 	bl	9a70 <packet_rx_acquired_count_get>
    cdd8:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    cdda:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
    cdde:	f7fa f841 	bl	6e64 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    cde2:	4438      	add	r0, r7
    cde4:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    cde6:	28ff      	cmp	r0, #255	; 0xff
    cde8:	d889      	bhi.n	ccfe <event_connection_prepare+0xf9e>
		if (_radio.packet_rx_data_count != free_count_rx) {
    cdea:	f895 313a 	ldrb.w	r3, [r5, #314]	; 0x13a
    cdee:	4283      	cmp	r3, r0
    cdf0:	d007      	beq.n	ce02 <event_connection_prepare+0x10a2>
		LL_ASSERT(0);
    cdf2:	4b5e      	ldr	r3, [pc, #376]	; (cf6c <event_connection_prepare+0x120c>)
    cdf4:	9301      	str	r3, [sp, #4]
    cdf6:	9300      	str	r3, [sp, #0]
    cdf8:	4b5d      	ldr	r3, [pc, #372]	; (cf70 <event_connection_prepare+0x1210>)
    cdfa:	681c      	ldr	r4, [r3, #0]
    cdfc:	4b5d      	ldr	r3, [pc, #372]	; (cf74 <event_connection_prepare+0x1214>)
    cdfe:	f7ff b96b 	b.w	c0d8 <event_connection_prepare+0x378>
		conn->llcp_length.ack = conn->llcp_length.req;
    ce02:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    ce06:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    ce0a:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
		conn->procedure_expire = 0;
    ce0e:	2100      	movs	r1, #0
    ce10:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    ce14:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ce18:	f361 02c3 	bfi	r2, r1, #3, #1
    ce1c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    ce20:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ce24:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    ce26:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    ce2a:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    ce2c:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    ce30:	f7fa f818 	bl	6e64 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    ce34:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    ce38:	b10b      	cbz	r3, ce3e <event_connection_prepare+0x10de>
			free_count_conn++;
    ce3a:	3001      	adds	r0, #1
    ce3c:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    ce3e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ce42:	b10b      	cbz	r3, ce48 <event_connection_prepare+0x10e8>
			free_count_conn++;
    ce44:	3001      	adds	r0, #1
    ce46:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce48:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce4a:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce4e:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce50:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce52:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce56:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    ce58:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    ce5a:	d058      	beq.n	cf0e <event_connection_prepare+0x11ae>
    ce5c:	f8b5 3138 	ldrh.w	r3, [r5, #312]	; 0x138
    ce60:	42bb      	cmp	r3, r7
    ce62:	d354      	bcc.n	cf0e <event_connection_prepare+0x11ae>
		node_rx = packet_rx_reserve_get(2);
    ce64:	2002      	movs	r0, #2
    ce66:	f7fc fe19 	bl	9a9c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    ce6a:	2800      	cmp	r0, #0
    ce6c:	d15b      	bne.n	cf26 <event_connection_prepare+0x11c6>
    ce6e:	4b3f      	ldr	r3, [pc, #252]	; (cf6c <event_connection_prepare+0x120c>)
    ce70:	9301      	str	r3, [sp, #4]
    ce72:	9300      	str	r3, [sp, #0]
    ce74:	4b3e      	ldr	r3, [pc, #248]	; (cf70 <event_connection_prepare+0x1210>)
    ce76:	681c      	ldr	r4, [r3, #0]
    ce78:	4b3e      	ldr	r3, [pc, #248]	; (cf74 <event_connection_prepare+0x1214>)
    ce7a:	f7ff baa1 	b.w	c3c0 <event_connection_prepare+0x660>
				if (_radio.packet_rx_acquire == 0) {
    ce7e:	b90b      	cbnz	r3, ce84 <event_connection_prepare+0x1124>
						_radio.packet_rx_count - 1;
    ce80:	f895 3140 	ldrb.w	r3, [r5, #320]	; 0x140
					_radio.packet_rx_acquire -= 1;
    ce84:	3b01      	subs	r3, #1
    ce86:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				node_rx = _radio.packet_rx[
    ce8a:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
    ce8e:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
				mem_release(node_rx->hdr.onion.link,
    ce92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ce96:	4649      	mov	r1, r9
    ce98:	6818      	ldr	r0, [r3, #0]
    ce9a:	f7f9 ffce 	bl	6e3a <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    ce9e:	f895 2140 	ldrb.w	r2, [r5, #320]	; 0x140
    cea2:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
    cea6:	3a01      	subs	r2, #1
    cea8:	4293      	cmp	r3, r2
    ceaa:	db0a      	blt.n	cec2 <event_connection_prepare+0x1162>
    ceac:	4b2f      	ldr	r3, [pc, #188]	; (cf6c <event_connection_prepare+0x120c>)
    ceae:	9301      	str	r3, [sp, #4]
    ceb0:	9300      	str	r3, [sp, #0]
    ceb2:	4b2f      	ldr	r3, [pc, #188]	; (cf70 <event_connection_prepare+0x1210>)
    ceb4:	4a30      	ldr	r2, [pc, #192]	; (cf78 <event_connection_prepare+0x1218>)
    ceb6:	681c      	ldr	r4, [r3, #0]
    ceb8:	4930      	ldr	r1, [pc, #192]	; (cf7c <event_connection_prepare+0x121c>)
    ceba:	4b2e      	ldr	r3, [pc, #184]	; (cf74 <event_connection_prepare+0x1214>)
    cebc:	4830      	ldr	r0, [pc, #192]	; (cf80 <event_connection_prepare+0x1220>)
    cebe:	f7fe bf61 	b.w	bd84 <event_connection_prepare+0x24>
				_radio.link_rx_data_quota++;
    cec2:	3301      	adds	r3, #1
    cec4:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
			while (_radio.packet_rx_acquire !=
    cec8:	f895 3142 	ldrb.w	r3, [r5, #322]	; 0x142
				_radio.packet_rx_last) {
    cecc:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
			while (_radio.packet_rx_acquire !=
    ced0:	4293      	cmp	r3, r2
    ced2:	d1d4      	bne.n	ce7e <event_connection_prepare+0x111e>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ced4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    ced6:	f8b5 2136 	ldrh.w	r2, [r5, #310]	; 0x136
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    ceda:	2b29      	cmp	r3, #41	; 0x29
				_radio.packet_rx_data_size =
    cedc:	bf9a      	itte	ls
    cede:	2334      	movls	r3, #52	; 0x34
    cee0:	f8a5 3138 	strhls.w	r3, [r5, #312]	; 0x138
				_radio.packet_rx_data_size =
    cee4:	f8a5 7138 	strhhi.w	r7, [r5, #312]	; 0x138
				_radio.packet_rx_data_size;
    cee8:	f8b5 1138 	ldrh.w	r1, [r5, #312]	; 0x138
			_radio.packet_rx_data_count =
    ceec:	fbb2 f2f1 	udiv	r2, r2, r1
    cef0:	b2d2      	uxtb	r2, r2
    cef2:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
			LL_ASSERT(_radio.packet_rx_data_count);
    cef6:	b96a      	cbnz	r2, cf14 <event_connection_prepare+0x11b4>
    cef8:	4b1c      	ldr	r3, [pc, #112]	; (cf6c <event_connection_prepare+0x120c>)
    cefa:	9301      	str	r3, [sp, #4]
    cefc:	9300      	str	r3, [sp, #0]
    cefe:	4b1c      	ldr	r3, [pc, #112]	; (cf70 <event_connection_prepare+0x1210>)
    cf00:	4a1d      	ldr	r2, [pc, #116]	; (cf78 <event_connection_prepare+0x1218>)
    cf02:	681c      	ldr	r4, [r3, #0]
    cf04:	491d      	ldr	r1, [pc, #116]	; (cf7c <event_connection_prepare+0x121c>)
    cf06:	4b1b      	ldr	r3, [pc, #108]	; (cf74 <event_connection_prepare+0x1214>)
    cf08:	481e      	ldr	r0, [pc, #120]	; (cf84 <event_connection_prepare+0x1224>)
    cf0a:	f7fe bf3b 	b.w	bd84 <event_connection_prepare+0x24>
				mem_release(node_rx->hdr.onion.link,
    cf0e:	f8df 907c 	ldr.w	r9, [pc, #124]	; cf8c <event_connection_prepare+0x122c>
    cf12:	e7d9      	b.n	cec8 <event_connection_prepare+0x1168>
			mem_init(_radio.pkt_rx_data_pool,
    cf14:	f8d5 012c 	ldr.w	r0, [r5, #300]	; 0x12c
    cf18:	4b1b      	ldr	r3, [pc, #108]	; (cf88 <event_connection_prepare+0x1228>)
    cf1a:	f7f9 ff4d 	bl	6db8 <mem_init>
			packet_rx_allocate(4);
    cf1e:	2004      	movs	r0, #4
    cf20:	f7fc fe34 	bl	9b8c <packet_rx_allocate>
    cf24:	e79e      	b.n	ce64 <event_connection_prepare+0x1104>
		node_rx->hdr.handle = conn->handle;
    cf26:	8c23      	ldrh	r3, [r4, #32]
    cf28:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cf2a:	2301      	movs	r3, #1
    cf2c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    cf2e:	7a03      	ldrb	r3, [r0, #8]
    cf30:	f043 0303 	orr.w	r3, r3, #3
    cf34:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    cf36:	2309      	movs	r3, #9
    cf38:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    cf3a:	2315      	movs	r3, #21
    cf3c:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    cf3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cf40:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    cf42:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    cf44:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    cf46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    cf48:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    cf4a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cf4c:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    cf4e:	f7fd fc41 	bl	a7d4 <packet_rx_enqueue>
    cf52:	e723      	b.n	cd9c <event_connection_prepare+0x103c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    cf54:	4902      	ldr	r1, [pc, #8]	; (cf60 <event_connection_prepare+0x1200>)
    cf56:	4638      	mov	r0, r7
    cf58:	f7f9 ff6f 	bl	6e3a <mem_release>
    cf5c:	f7ff bbfb 	b.w	c756 <event_connection_prepare+0x9f6>
    cf60:	20000a4c 	.word	0x20000a4c
    cf64:	0000d2cd 	.word	0x0000d2cd
    cf68:	0000cfd5 	.word	0x0000cfd5
    cf6c:	00014c55 	.word	0x00014c55
    cf70:	20003aa4 	.word	0x20003aa4
    cf74:	0001713f 	.word	0x0001713f
    cf78:	000159c3 	.word	0x000159c3
    cf7c:	00015a12 	.word	0x00015a12
    cf80:	0001733e 	.word	0x0001733e
    cf84:	00017398 	.word	0x00017398
    cf88:	20000a20 	.word	0x20000a20
    cf8c:	20000a38 	.word	0x20000a38

0000cf90 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    cf90:	f7fe bee6 	b.w	bd60 <event_connection_prepare>

0000cf94 <event_slave_prepare>:
    cf94:	f7fe bee4 	b.w	bd60 <event_connection_prepare>

0000cf98 <connection_configure>:
{
    cf98:	b510      	push	{r4, lr}
    cf9a:	4604      	mov	r4, r0
	radio_reset();
    cf9c:	f005 fa08 	bl	123b0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    cfa0:	2000      	movs	r0, #0
    cfa2:	f005 fa2f 	bl	12404 <radio_tx_power_set>
	radio_isr_set(isr);
    cfa6:	480a      	ldr	r0, [pc, #40]	; (cfd0 <connection_configure+0x38>)
    cfa8:	f005 f9cc 	bl	12344 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    cfac:	f104 0010 	add.w	r0, r4, #16
    cfb0:	f005 fa46 	bl	12440 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    cfb4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    cfb6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    cfb8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    cfba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    cfbe:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cfc0:	f240 605b 	movw	r0, #1627	; 0x65b
    cfc4:	4319      	orrs	r1, r3
}
    cfc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    cfca:	f005 bae1 	b.w	12590 <radio_crc_configure>
    cfce:	bf00      	nop
    cfd0:	0000e6e1 	.word	0x0000e6e1

0000cfd4 <event_slave>:
{
    cfd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cfd8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    cfda:	4b74      	ldr	r3, [pc, #464]	; (d1ac <event_slave+0x1d8>)
    cfdc:	7cda      	ldrb	r2, [r3, #19]
{
    cfde:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    cfe0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    cfe4:	461d      	mov	r5, r3
    cfe6:	b17a      	cbz	r2, d008 <event_slave+0x34>
    cfe8:	4b71      	ldr	r3, [pc, #452]	; (d1b0 <event_slave+0x1dc>)
    cfea:	9301      	str	r3, [sp, #4]
    cfec:	9300      	str	r3, [sp, #0]
    cfee:	4b71      	ldr	r3, [pc, #452]	; (d1b4 <event_slave+0x1e0>)
    cff0:	4a71      	ldr	r2, [pc, #452]	; (d1b8 <event_slave+0x1e4>)
    cff2:	681c      	ldr	r4, [r3, #0]
    cff4:	4971      	ldr	r1, [pc, #452]	; (d1bc <event_slave+0x1e8>)
    cff6:	4b72      	ldr	r3, [pc, #456]	; (d1c0 <event_slave+0x1ec>)
    cff8:	4872      	ldr	r0, [pc, #456]	; (d1c4 <event_slave+0x1f0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    cffa:	47a0      	blx	r4
    cffc:	4040      	eors	r0, r0
    cffe:	f380 8811 	msr	BASEPRI, r0
    d002:	f04f 0004 	mov.w	r0, #4
    d006:	df02      	svc	2
    d008:	7c1b      	ldrb	r3, [r3, #16]
    d00a:	8c22      	ldrh	r2, [r4, #32]
    d00c:	b2db      	uxtb	r3, r3
    d00e:	3207      	adds	r2, #7
    d010:	4293      	cmp	r3, r2
    d012:	d009      	beq.n	d028 <event_slave+0x54>
    d014:	4b66      	ldr	r3, [pc, #408]	; (d1b0 <event_slave+0x1dc>)
    d016:	9301      	str	r3, [sp, #4]
    d018:	9300      	str	r3, [sp, #0]
    d01a:	4b66      	ldr	r3, [pc, #408]	; (d1b4 <event_slave+0x1e0>)
    d01c:	4a66      	ldr	r2, [pc, #408]	; (d1b8 <event_slave+0x1e4>)
    d01e:	681c      	ldr	r4, [r3, #0]
    d020:	4966      	ldr	r1, [pc, #408]	; (d1bc <event_slave+0x1e8>)
    d022:	4b67      	ldr	r3, [pc, #412]	; (d1c0 <event_slave+0x1ec>)
    d024:	4868      	ldr	r0, [pc, #416]	; (d1c8 <event_slave+0x1f4>)
    d026:	e7e8      	b.n	cffa <event_slave+0x26>
	_radio.packet_counter = 0;
    d028:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d02c:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.role = ROLE_SLAVE;
    d030:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d032:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    d034:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d036:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    d038:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d03a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d03c:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_RX;
    d040:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    d042:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    d044:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    d046:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    d048:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    d04a:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    d04c:	f7ff ffa4 	bl	cf98 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d050:	2096      	movs	r0, #150	; 0x96
    d052:	f005 fb57 	bl	12704 <radio_tmr_tifs_set>
				     conn->phy_flags);
    d056:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    d05a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d05e:	09d3      	lsrs	r3, r2, #7
    d060:	4631      	mov	r1, r6
    d062:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d066:	f000 0007 	and.w	r0, r0, #7
    d06a:	f005 fabb 	bl	125e4 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d06e:	f895 2141 	ldrb.w	r2, [r5, #321]	; 0x141
    d072:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
    d076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    d07a:	4620      	mov	r0, r4
    d07c:	3108      	adds	r1, #8
    d07e:	f7fd f895 	bl	a1ac <rx_packet_set>
	if (conn->data_chan_sel) {
    d082:	7f63      	ldrb	r3, [r4, #29]
    d084:	f013 0f40 	tst.w	r3, #64	; 0x40
    d088:	f104 0217 	add.w	r2, r4, #23
    d08c:	d05a      	beq.n	d144 <event_slave+0x170>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d08e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d090:	8be1      	ldrh	r1, [r4, #30]
    d092:	3801      	subs	r0, #1
    d094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d098:	b280      	uxth	r0, r0
    d09a:	f7fe fd4f 	bl	bb3c <chan_sel_2>
	chan_set(data_chan_use);
    d09e:	f7fd fff5 	bl	b08c <chan_set>
	conn->slave.window_widening_event_us +=
    d0a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d0a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    d0a6:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    d0a8:	2200      	movs	r2, #0
    d0aa:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    d0ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    d0ae:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    d0b0:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    d0b2:	bf88      	it	hi
    d0b4:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    d0b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d0b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    d0ba:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    d0bc:	4413      	add	r3, r2
    d0be:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d0c0:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    d0c2:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    d0c4:	f107 0109 	add.w	r1, r7, #9
    d0c8:	4630      	mov	r0, r6
    d0ca:	f005 fb27 	bl	1271c <radio_tmr_start>
    d0ce:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    d0d0:	f005 fbc0 	bl	12854 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    d0d4:	4630      	mov	r0, r6
    d0d6:	f005 fbdf 	bl	12898 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d0da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    d0dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d0de:	f103 0650 	add.w	r6, r3, #80	; 0x50
    d0e2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d0e6:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d0ea:	2101      	movs	r1, #1
    d0ec:	f000 0007 	and.w	r0, r0, #7
    d0f0:	f005 f9ff 	bl	124f2 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    d0f4:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    d0f6:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    d0f8:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d0fc:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    d100:	2802      	cmp	r0, #2
    d102:	d03f      	beq.n	d184 <event_slave+0x1b0>
		return 40;
    d104:	2804      	cmp	r0, #4
    d106:	bf0c      	ite	eq
    d108:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    d10c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d10e:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    d110:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    d112:	f005 f9f0 	bl	124f6 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d116:	4430      	add	r0, r6
    d118:	f005 fb7e 	bl	12818 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d11c:	f894 1020 	ldrb.w	r1, [r4, #32]
    d120:	3107      	adds	r1, #7
    d122:	463a      	mov	r2, r7
    d124:	b2c9      	uxtb	r1, r1
    d126:	4620      	mov	r0, r4
    d128:	f7fe fa80 	bl	b62c <preempt_calc>
    d12c:	4603      	mov	r3, r0
    d12e:	b358      	cbz	r0, d188 <event_slave+0x1b4>
		_radio.state = STATE_STOP;
    d130:	2304      	movs	r3, #4
    d132:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d134:	f005 f9f0 	bl	12518 <radio_disable>
	packet_tx_enqueue(2);
    d138:	2002      	movs	r0, #2
}
    d13a:	b002      	add	sp, #8
    d13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    d140:	f7fd beb6 	b.w	aeb0 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d144:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d146:	7fa6      	ldrb	r6, [r4, #30]
    d148:	fb01 6606 	mla	r6, r1, r6, r6
    d14c:	7fe1      	ldrb	r1, [r4, #31]
    d14e:	2025      	movs	r0, #37	; 0x25
    d150:	440e      	add	r6, r1
    d152:	fb96 f1f0 	sdiv	r1, r6, r0
    d156:	fb00 6611 	mls	r6, r0, r1, r6
    d15a:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d15c:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d15e:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d160:	5c51      	ldrb	r1, [r2, r1]
    d162:	f006 0607 	and.w	r6, r6, #7
    d166:	fa41 f606 	asr.w	r6, r1, r6
    d16a:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d16c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d170:	d495      	bmi.n	d09e <event_slave+0xca>
		chan_index = chan_next % chan_count;
    d172:	fbb0 f1f3 	udiv	r1, r0, r3
    d176:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d17a:	b2c9      	uxtb	r1, r1
    d17c:	4610      	mov	r0, r2
    d17e:	f7fc fc5b 	bl	9a38 <chan_sel_remap>
    d182:	e78c      	b.n	d09e <event_slave+0xca>
		return 24;
    d184:	2318      	movs	r3, #24
    d186:	e7c2      	b.n	d10e <event_slave+0x13a>
		ticker_status =
    d188:	4a10      	ldr	r2, [pc, #64]	; (d1cc <event_slave+0x1f8>)
    d18a:	4601      	mov	r1, r0
    d18c:	f7fa fde2 	bl	7d54 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d190:	f030 0302 	bics.w	r3, r0, #2
    d194:	d0d0      	beq.n	d138 <event_slave+0x164>
    d196:	4b06      	ldr	r3, [pc, #24]	; (d1b0 <event_slave+0x1dc>)
    d198:	9301      	str	r3, [sp, #4]
    d19a:	9300      	str	r3, [sp, #0]
    d19c:	4b05      	ldr	r3, [pc, #20]	; (d1b4 <event_slave+0x1e0>)
    d19e:	4a06      	ldr	r2, [pc, #24]	; (d1b8 <event_slave+0x1e4>)
    d1a0:	681c      	ldr	r4, [r3, #0]
    d1a2:	4906      	ldr	r1, [pc, #24]	; (d1bc <event_slave+0x1e8>)
    d1a4:	4b06      	ldr	r3, [pc, #24]	; (d1c0 <event_slave+0x1ec>)
    d1a6:	480a      	ldr	r0, [pc, #40]	; (d1d0 <event_slave+0x1fc>)
    d1a8:	e727      	b.n	cffa <event_slave+0x26>
    d1aa:	bf00      	nop
    d1ac:	200008f0 	.word	0x200008f0
    d1b0:	00014c55 	.word	0x00014c55
    d1b4:	20003aa4 	.word	0x20003aa4
    d1b8:	000159c3 	.word	0x000159c3
    d1bc:	00015a12 	.word	0x00015a12
    d1c0:	00017191 	.word	0x00017191
    d1c4:	000173d5 	.word	0x000173d5
    d1c8:	00017488 	.word	0x00017488
    d1cc:	0000ac05 	.word	0x0000ac05
    d1d0:	000172b9 	.word	0x000172b9

0000d1d4 <prepare_pdu_data_tx>:
	    conn->empty ||
    d1d4:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    d1d8:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1de:	4604      	mov	r4, r0
    d1e0:	460e      	mov	r6, r1
	if (/* empty packet */
    d1e2:	d109      	bne.n	d1f8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d1e4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    d1e8:	b131      	cbz	r1, d1f8 <prepare_pdu_data_tx+0x24>
	    !conn->pkt_tx_head ||
    d1ea:	f01c 0f08 	tst.w	ip, #8
    d1ee:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    d1f2:	d022      	beq.n	d23a <prepare_pdu_data_tx+0x66>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    d1f4:	4571      	cmp	r1, lr
    d1f6:	d020      	beq.n	d23a <prepare_pdu_data_tx+0x66>
	conn->empty = 1;
    d1f8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d200:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d204:	f005 f9da 	bl	125bc <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d208:	7803      	ldrb	r3, [r0, #0]
    d20a:	2201      	movs	r2, #1
    d20c:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    d210:	2200      	movs	r2, #0
    d212:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    d214:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d218:	7003      	strb	r3, [r0, #0]
    d21a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d21c:	b152      	cbz	r2, d234 <prepare_pdu_data_tx+0x60>
		pdu_data_tx->md = 1;
    d21e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d222:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    d224:	7803      	ldrb	r3, [r0, #0]
    d226:	f36f 1347 	bfc	r3, #5, #3
    d22a:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    d22c:	2300      	movs	r3, #0
    d22e:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    d230:	6030      	str	r0, [r6, #0]
    d232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    d234:	f362 1304 	bfi	r3, r2, #4, #1
    d238:	e7f3      	b.n	d222 <prepare_pdu_data_tx+0x4e>
					conn->packet_tx_head_offset);
    d23a:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    d23e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    d242:	1d0d      	adds	r5, r1, #4
    d244:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    d246:	b913      	cbnz	r3, d24e <prepare_pdu_data_tx+0x7a>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    d248:	7843      	ldrb	r3, [r0, #1]
    d24a:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    d24e:	b122      	cbz	r2, d25a <prepare_pdu_data_tx+0x86>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d250:	5cab      	ldrb	r3, [r5, r2]
    d252:	2701      	movs	r7, #1
    d254:	f367 0301 	bfi	r3, r7, #0, #2
    d258:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    d25a:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
    d25e:	1abf      	subs	r7, r7, r2
    d260:	b2ff      	uxtb	r7, r7
    d262:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    d264:	5cab      	ldrb	r3, [r5, r2]
    d266:	f36f 1304 	bfc	r3, #4, #1
    d26a:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    d26c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d270:	f003 0307 	and.w	r3, r3, #7
    d274:	2b02      	cmp	r3, #2
    d276:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d278:	bf15      	itete	ne
    d27a:	08db      	lsrne	r3, r3, #3
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d27c:	089b      	lsreq	r3, r3, #2
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    d27e:	3b0a      	subne	r3, #10
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    d280:	3b0b      	subeq	r3, #11
    d282:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    d284:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    d288:	bf18      	it	ne
    d28a:	3b04      	subne	r3, #4
    d28c:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    d290:	bf18      	it	ne
    d292:	b29b      	uxthne	r3, r3
    d294:	4563      	cmp	r3, ip
    d296:	bf28      	it	cs
    d298:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    d29a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    d29c:	bf81      	itttt	hi
    d29e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    d2a0:	5cab      	ldrbhi	r3, [r5, r2]
    d2a2:	f043 0310 	orrhi.w	r3, r3, #16
    d2a6:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    d2a8:	680b      	ldr	r3, [r1, #0]
    d2aa:	b11b      	cbz	r3, d2b4 <prepare_pdu_data_tx+0xe0>
			_pdu_data_tx->md = 1;
    d2ac:	5cab      	ldrb	r3, [r5, r2]
    d2ae:	f043 0310 	orr.w	r3, r3, #16
    d2b2:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    d2b4:	f1be 0f00 	cmp.w	lr, #0
    d2b8:	d1b4      	bne.n	d224 <prepare_pdu_data_tx+0x50>
    d2ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    d2be:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    d2c0:	bf1c      	itt	ne
    d2c2:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    d2c6:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    d2ca:	e7ab      	b.n	d224 <prepare_pdu_data_tx+0x50>

0000d2cc <event_master>:
{
    d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ce:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    d2d0:	4b59      	ldr	r3, [pc, #356]	; (d438 <event_master+0x16c>)
    d2d2:	7cd9      	ldrb	r1, [r3, #19]
{
    d2d4:	b085      	sub	sp, #20
    d2d6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    d2d8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d2dc:	461d      	mov	r5, r3
    d2de:	b179      	cbz	r1, d300 <event_master+0x34>
    d2e0:	4b56      	ldr	r3, [pc, #344]	; (d43c <event_master+0x170>)
    d2e2:	9301      	str	r3, [sp, #4]
    d2e4:	9300      	str	r3, [sp, #0]
    d2e6:	4b56      	ldr	r3, [pc, #344]	; (d440 <event_master+0x174>)
    d2e8:	4a56      	ldr	r2, [pc, #344]	; (d444 <event_master+0x178>)
    d2ea:	681c      	ldr	r4, [r3, #0]
    d2ec:	4956      	ldr	r1, [pc, #344]	; (d448 <event_master+0x17c>)
    d2ee:	4b57      	ldr	r3, [pc, #348]	; (d44c <event_master+0x180>)
    d2f0:	4857      	ldr	r0, [pc, #348]	; (d450 <event_master+0x184>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    d2f2:	47a0      	blx	r4
    d2f4:	4040      	eors	r0, r0
    d2f6:	f380 8811 	msr	BASEPRI, r0
    d2fa:	f04f 0004 	mov.w	r0, #4
    d2fe:	df02      	svc	2
    d300:	7c1b      	ldrb	r3, [r3, #16]
    d302:	8c21      	ldrh	r1, [r4, #32]
    d304:	b2db      	uxtb	r3, r3
    d306:	3107      	adds	r1, #7
    d308:	428b      	cmp	r3, r1
    d30a:	d009      	beq.n	d320 <event_master+0x54>
    d30c:	4b4b      	ldr	r3, [pc, #300]	; (d43c <event_master+0x170>)
    d30e:	9301      	str	r3, [sp, #4]
    d310:	9300      	str	r3, [sp, #0]
    d312:	4b4b      	ldr	r3, [pc, #300]	; (d440 <event_master+0x174>)
    d314:	4a4b      	ldr	r2, [pc, #300]	; (d444 <event_master+0x178>)
    d316:	681c      	ldr	r4, [r3, #0]
    d318:	494b      	ldr	r1, [pc, #300]	; (d448 <event_master+0x17c>)
    d31a:	4b4c      	ldr	r3, [pc, #304]	; (d44c <event_master+0x180>)
    d31c:	484d      	ldr	r0, [pc, #308]	; (d454 <event_master+0x188>)
    d31e:	e7e8      	b.n	d2f2 <event_master+0x26>
	_radio.packet_counter = 0;
    d320:	f885 2118 	strb.w	r2, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    d324:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	_radio.role = ROLE_MASTER;
    d328:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    d32a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    d32c:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    d32e:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    d330:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    d332:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    d334:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    d338:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    d33a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d33c:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    d33e:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    d340:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    d342:	f7fd fdb5 	bl	aeb0 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    d346:	a903      	add	r1, sp, #12
    d348:	4620      	mov	r0, r4
    d34a:	f7ff ff43 	bl	d1d4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    d34e:	9903      	ldr	r1, [sp, #12]
    d350:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    d354:	780b      	ldrb	r3, [r1, #0]
    d356:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    d35a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d35e:	f362 0382 	bfi	r3, r2, #2, #1
    d362:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    d364:	4620      	mov	r0, r4
    d366:	f7ff fe17 	bl	cf98 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    d36a:	2096      	movs	r0, #150	; 0x96
    d36c:	f005 f9ca 	bl	12704 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    d370:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    d374:	f000 0007 	and.w	r0, r0, #7
    d378:	f005 f928 	bl	125cc <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    d37c:	9903      	ldr	r1, [sp, #12]
    d37e:	4620      	mov	r0, r4
    d380:	f7fc ff40 	bl	a204 <tx_packet_set>
	if (conn->data_chan_sel) {
    d384:	7f63      	ldrb	r3, [r4, #29]
    d386:	f013 0f40 	tst.w	r3, #64	; 0x40
    d38a:	f104 0217 	add.w	r2, r4, #23
    d38e:	d021      	beq.n	d3d4 <event_master+0x108>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d390:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d392:	8be1      	ldrh	r1, [r4, #30]
    d394:	3801      	subs	r0, #1
    d396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d39a:	b280      	uxth	r0, r0
    d39c:	f7fe fbce 	bl	bb3c <chan_sel_2>
	chan_set(data_chan_use);
    d3a0:	f7fd fe74 	bl	b08c <chan_set>
		remainder_us = radio_tmr_start(1,
    d3a4:	68ea      	ldr	r2, [r5, #12]
    d3a6:	f107 0109 	add.w	r1, r7, #9
    d3aa:	2001      	movs	r0, #1
    d3ac:	f005 f9b6 	bl	1271c <radio_tmr_start>
		radio_tmr_end_capture();
    d3b0:	f005 fa84 	bl	128bc <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d3b4:	f894 1020 	ldrb.w	r1, [r4, #32]
    d3b8:	3107      	adds	r1, #7
    d3ba:	463a      	mov	r2, r7
    d3bc:	b2c9      	uxtb	r1, r1
    d3be:	4620      	mov	r0, r4
    d3c0:	f7fe f934 	bl	b62c <preempt_calc>
	if (0 !=
    d3c4:	4603      	mov	r3, r0
    d3c6:	b328      	cbz	r0, d414 <event_master+0x148>
		_radio.state = STATE_STOP;
    d3c8:	2304      	movs	r3, #4
    d3ca:	752b      	strb	r3, [r5, #20]
		radio_disable();
    d3cc:	f005 f8a4 	bl	12518 <radio_disable>
}
    d3d0:	b005      	add	sp, #20
    d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d3d4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    d3d6:	7fa6      	ldrb	r6, [r4, #30]
    d3d8:	fb01 6606 	mla	r6, r1, r6, r6
    d3dc:	7fe1      	ldrb	r1, [r4, #31]
    d3de:	2025      	movs	r0, #37	; 0x25
    d3e0:	440e      	add	r6, r1
    d3e2:	fb96 f1f0 	sdiv	r1, r6, r0
    d3e6:	fb00 6611 	mls	r6, r0, r1, r6
    d3ea:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d3ec:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    d3ee:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d3f0:	5c51      	ldrb	r1, [r2, r1]
    d3f2:	f006 0607 	and.w	r6, r6, #7
    d3f6:	fa41 f606 	asr.w	r6, r1, r6
    d3fa:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    d3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d400:	d4ce      	bmi.n	d3a0 <event_master+0xd4>
		chan_index = chan_next % chan_count;
    d402:	fbb0 f1f3 	udiv	r1, r0, r3
    d406:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    d40a:	b2c9      	uxtb	r1, r1
    d40c:	4610      	mov	r0, r2
    d40e:	f7fc fb13 	bl	9a38 <chan_sel_remap>
    d412:	e7c5      	b.n	d3a0 <event_master+0xd4>
		ticker_status =
    d414:	4a10      	ldr	r2, [pc, #64]	; (d458 <event_master+0x18c>)
    d416:	4601      	mov	r1, r0
    d418:	f7fa fc9c 	bl	7d54 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d41c:	f030 0302 	bics.w	r3, r0, #2
    d420:	d0d6      	beq.n	d3d0 <event_master+0x104>
    d422:	4b06      	ldr	r3, [pc, #24]	; (d43c <event_master+0x170>)
    d424:	9301      	str	r3, [sp, #4]
    d426:	9300      	str	r3, [sp, #0]
    d428:	4b05      	ldr	r3, [pc, #20]	; (d440 <event_master+0x174>)
    d42a:	4a06      	ldr	r2, [pc, #24]	; (d444 <event_master+0x178>)
    d42c:	681c      	ldr	r4, [r3, #0]
    d42e:	4906      	ldr	r1, [pc, #24]	; (d448 <event_master+0x17c>)
    d430:	4b06      	ldr	r3, [pc, #24]	; (d44c <event_master+0x180>)
    d432:	480a      	ldr	r0, [pc, #40]	; (d45c <event_master+0x190>)
    d434:	e75d      	b.n	d2f2 <event_master+0x26>
    d436:	bf00      	nop
    d438:	200008f0 	.word	0x200008f0
    d43c:	00014c55 	.word	0x00014c55
    d440:	20003aa4 	.word	0x20003aa4
    d444:	000159c3 	.word	0x000159c3
    d448:	00015a12 	.word	0x00015a12
    d44c:	0001719d 	.word	0x0001719d
    d450:	000173d5 	.word	0x000173d5
    d454:	00017488 	.word	0x00017488
    d458:	0000ac05 	.word	0x0000ac05
    d45c:	000172b9 	.word	0x000172b9

0000d460 <isr_rx_conn_pkt_ctrl>:
{
    d460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    d464:	7ac7      	ldrb	r7, [r0, #11]
{
    d466:	4604      	mov	r4, r0
    d468:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    d46a:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    d46e:	2f19      	cmp	r7, #25
    d470:	f201 80fb 	bhi.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
    d474:	e8df f017 	tbh	[pc, r7, lsl #1]
    d478:	0083001a 	.word	0x0083001a
    d47c:	00d000c1 	.word	0x00d000c1
    d480:	012600fe 	.word	0x012600fe
    d484:	05a40159 	.word	0x05a40159
    d488:	01ca0195 	.word	0x01ca0195
    d48c:	022201f8 	.word	0x022201f8
    d490:	02bc0253 	.word	0x02bc0253
    d494:	02d401ab 	.word	0x02d401ab
    d498:	04ac0429 	.word	0x04ac0429
    d49c:	0586056c 	.word	0x0586056c
    d4a0:	065b065b 	.word	0x065b065b
    d4a4:	08030734 	.word	0x08030734
    d4a8:	08c6083a 	.word	0x08c6083a
		if (!_radio.conn_curr->role ||
    d4ac:	4ecd      	ldr	r6, [pc, #820]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d4ae:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d4b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	f281 80d7 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    d4bc:	7a41      	ldrb	r1, [r0, #9]
    d4be:	2000      	movs	r0, #0
    d4c0:	f7fc fa8e 	bl	99e0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d4c4:	2800      	cmp	r0, #0
    d4c6:	f001 80d0 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d4ca:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    d4ce:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    d4d0:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    d4d2:	041b      	lsls	r3, r3, #16
    d4d4:	f101 80df 	bmi.w	e696 <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d4d8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d4dc:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    d4e0:	429a      	cmp	r2, r3
    d4e2:	d009      	beq.n	d4f8 <isr_rx_conn_pkt_ctrl+0x98>
    d4e4:	4bc0      	ldr	r3, [pc, #768]	; (d7e8 <isr_rx_conn_pkt_ctrl+0x388>)
    d4e6:	9301      	str	r3, [sp, #4]
    d4e8:	9300      	str	r3, [sp, #0]
    d4ea:	4bc0      	ldr	r3, [pc, #768]	; (d7ec <isr_rx_conn_pkt_ctrl+0x38c>)
    d4ec:	681c      	ldr	r4, [r3, #0]
    d4ee:	4bc0      	ldr	r3, [pc, #768]	; (d7f0 <isr_rx_conn_pkt_ctrl+0x390>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d4f0:	4ac0      	ldr	r2, [pc, #768]	; (d7f4 <isr_rx_conn_pkt_ctrl+0x394>)
    d4f2:	49c1      	ldr	r1, [pc, #772]	; (d7f8 <isr_rx_conn_pkt_ctrl+0x398>)
    d4f4:	48c1      	ldr	r0, [pc, #772]	; (d7fc <isr_rx_conn_pkt_ctrl+0x39c>)
    d4f6:	e0fb      	b.n	d6f0 <isr_rx_conn_pkt_ctrl+0x290>
	if (_radio.conn_upd == 0) {
    d4f8:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
    d4fc:	b90a      	cbnz	r2, d502 <isr_rx_conn_pkt_ctrl+0xa2>
		_radio.conn_upd = conn;
    d4fe:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
	conn->llcp.conn_upd.win_size =
    d502:	7b22      	ldrb	r2, [r4, #12]
    d504:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    d508:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d50c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d510:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d512:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d516:	7c20      	ldrb	r0, [r4, #16]
    d518:	7be2      	ldrb	r2, [r4, #15]
    d51a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d51e:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d522:	7ca0      	ldrb	r0, [r4, #18]
    d524:	7c62      	ldrb	r2, [r4, #17]
    d526:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d52a:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d52e:	7ce2      	ldrb	r2, [r4, #19]
    d530:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d532:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d536:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d53a:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d53e:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d542:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d546:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d54a:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d54c:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d550:	2201      	movs	r2, #1
    d552:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d556:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d55a:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d55e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d562:	4293      	cmp	r3, r2
    d564:	d007      	beq.n	d576 <isr_rx_conn_pkt_ctrl+0x116>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d566:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d56a:	f003 0307 	and.w	r3, r3, #7
    d56e:	2b04      	cmp	r3, #4
    d570:	d101      	bne.n	d576 <isr_rx_conn_pkt_ctrl+0x116>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d572:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d576:	2000      	movs	r0, #0
    d578:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d57c:	e03a      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    d57e:	4b99      	ldr	r3, [pc, #612]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d580:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d584:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d588:	2b00      	cmp	r3, #0
    d58a:	f281 806e 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d58e:	7a41      	ldrb	r1, [r0, #9]
    d590:	2001      	movs	r0, #1
    d592:	f7fc fa25 	bl	99e0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d596:	2800      	cmp	r0, #0
    d598:	f001 8067 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d59c:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d5a0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d5a2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d5a4:	041f      	lsls	r7, r3, #16
    d5a6:	f101 8076 	bmi.w	e696 <isr_rx_conn_pkt_ctrl+0x1236>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d5aa:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d5ae:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d5b2:	429a      	cmp	r2, r3
    d5b4:	d006      	beq.n	d5c4 <isr_rx_conn_pkt_ctrl+0x164>
    d5b6:	4b8c      	ldr	r3, [pc, #560]	; (d7e8 <isr_rx_conn_pkt_ctrl+0x388>)
    d5b8:	9301      	str	r3, [sp, #4]
    d5ba:	9300      	str	r3, [sp, #0]
    d5bc:	4b8b      	ldr	r3, [pc, #556]	; (d7ec <isr_rx_conn_pkt_ctrl+0x38c>)
    d5be:	681c      	ldr	r4, [r3, #0]
    d5c0:	4b8f      	ldr	r3, [pc, #572]	; (d800 <isr_rx_conn_pkt_ctrl+0x3a0>)
    d5c2:	e795      	b.n	d4f0 <isr_rx_conn_pkt_ctrl+0x90>
	memcpy(&conn->llcp.chan_map.chm[0],
    d5c4:	2205      	movs	r2, #5
    d5c6:	f104 010c 	add.w	r1, r4, #12
    d5ca:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d5ce:	f7f4 fb27 	bl	1c20 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d5d2:	7c63      	ldrb	r3, [r4, #17]
    d5d4:	7ca2      	ldrb	r2, [r4, #18]
    d5d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d5da:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d5de:	2302      	movs	r3, #2
    d5e0:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d5e4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d5e8:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d5ea:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d5ec:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d5f0:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d5f4:	b003      	add	sp, #12
    d5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d5fa:	7a41      	ldrb	r1, [r0, #9]
    d5fc:	2002      	movs	r0, #2
    d5fe:	f7fc f9ef 	bl	99e0 <pdu_len_cmp>
    d602:	2800      	cmp	r0, #0
    d604:	f001 8031 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d608:	4b76      	ldr	r3, [pc, #472]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d60a:	7b22      	ldrb	r2, [r4, #12]
    d60c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d610:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d614:	2000      	movs	r0, #0
	return nack;
    d616:	e7ed      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    d618:	4e72      	ldr	r6, [pc, #456]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d61a:	f8d6 8114 	ldr.w	r8, [r6, #276]	; 0x114
    d61e:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d622:	2b00      	cmp	r3, #0
    d624:	f281 8021 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d628:	7a41      	ldrb	r1, [r0, #9]
    d62a:	2003      	movs	r0, #3
    d62c:	f7fc f9d8 	bl	99e0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d630:	2800      	cmp	r0, #0
    d632:	f001 801a 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d636:	2208      	movs	r2, #8
    d638:	f104 0116 	add.w	r1, r4, #22
    d63c:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d640:	f7f4 faee 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d644:	f8d6 0114 	ldr.w	r0, [r6, #276]	; 0x114
    d648:	2204      	movs	r2, #4
    d64a:	f104 011e 	add.w	r1, r4, #30
    d64e:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d652:	f7f4 fae5 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d656:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
    d65a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d65e:	f042 0204 	orr.w	r2, r2, #4
    d662:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d666:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d66a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d66e:	2301      	movs	r3, #1
    d670:	702b      	strb	r3, [r5, #0]
    d672:	e7cf      	b.n	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    d674:	4d5b      	ldr	r5, [pc, #364]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d676:	f8d5 6114 	ldr.w	r6, [r5, #276]	; 0x114
    d67a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d67e:	2b00      	cmp	r3, #0
    d680:	f2c0 87f3 	blt.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d684:	7a41      	ldrb	r1, [r0, #9]
    d686:	2004      	movs	r0, #4
    d688:	f7fc f9aa 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d68c:	2800      	cmp	r0, #0
    d68e:	f000 87ec 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d692:	2208      	movs	r2, #8
    d694:	f104 010c 	add.w	r1, r4, #12
    d698:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d69c:	f7f4 fac0 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d6a0:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
    d6a4:	2204      	movs	r2, #4
    d6a6:	f104 0114 	add.w	r1, r4, #20
    d6aa:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d6ae:	f7f4 fab7 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d6b2:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
    d6b6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d6ba:	f043 0304 	orr.w	r3, r3, #4
    d6be:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d6c2:	e7a7      	b.n	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d6c4:	4b47      	ldr	r3, [pc, #284]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d6c6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d6ca:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d6ce:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d6d2:	42b3      	cmp	r3, r6
    d6d4:	d013      	beq.n	d6fe <isr_rx_conn_pkt_ctrl+0x29e>
    d6d6:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d6da:	2b03      	cmp	r3, #3
    d6dc:	d00f      	beq.n	d6fe <isr_rx_conn_pkt_ctrl+0x29e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d6de:	4b42      	ldr	r3, [pc, #264]	; (d7e8 <isr_rx_conn_pkt_ctrl+0x388>)
    d6e0:	9301      	str	r3, [sp, #4]
    d6e2:	9300      	str	r3, [sp, #0]
    d6e4:	4b41      	ldr	r3, [pc, #260]	; (d7ec <isr_rx_conn_pkt_ctrl+0x38c>)
    d6e6:	4a43      	ldr	r2, [pc, #268]	; (d7f4 <isr_rx_conn_pkt_ctrl+0x394>)
    d6e8:	681c      	ldr	r4, [r3, #0]
    d6ea:	4943      	ldr	r1, [pc, #268]	; (d7f8 <isr_rx_conn_pkt_ctrl+0x398>)
    d6ec:	4b45      	ldr	r3, [pc, #276]	; (d804 <isr_rx_conn_pkt_ctrl+0x3a4>)
    d6ee:	4846      	ldr	r0, [pc, #280]	; (d808 <isr_rx_conn_pkt_ctrl+0x3a8>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d6f0:	47a0      	blx	r4
    d6f2:	4040      	eors	r0, r0
    d6f4:	f380 8811 	msr	BASEPRI, r0
    d6f8:	f04f 0004 	mov.w	r0, #4
    d6fc:	df02      	svc	2
		if (_radio.conn_curr->role ||
    d6fe:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d702:	2b00      	cmp	r3, #0
    d704:	f2c0 87b1 	blt.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d708:	7a61      	ldrb	r1, [r4, #9]
    d70a:	2005      	movs	r0, #5
    d70c:	f7fc f968 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d710:	2800      	cmp	r0, #0
    d712:	f000 87aa 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d716:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d718:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d71a:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d71c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d720:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d724:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d728:	e764      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d72a:	7a41      	ldrb	r1, [r0, #9]
    d72c:	2006      	movs	r0, #6
    d72e:	f7fc f957 	bl	99e0 <pdu_len_cmp>
    d732:	2800      	cmp	r0, #0
    d734:	f000 8799 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_SLAVE) {
    d738:	4b2a      	ldr	r3, [pc, #168]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d73a:	7cda      	ldrb	r2, [r3, #19]
    d73c:	2a03      	cmp	r2, #3
    d73e:	4619      	mov	r1, r3
    d740:	d124      	bne.n	d78c <isr_rx_conn_pkt_ctrl+0x32c>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d742:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    d746:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d74a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d74e:	4290      	cmp	r0, r2
    d750:	d003      	beq.n	d75a <isr_rx_conn_pkt_ctrl+0x2fa>
    d752:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d756:	2803      	cmp	r0, #3
    d758:	d1c1      	bne.n	d6de <isr_rx_conn_pkt_ctrl+0x27e>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d75a:	2000      	movs	r0, #0
    d75c:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d760:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d762:	2003      	movs	r0, #3
    d764:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d768:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d76c:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    d770:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d774:	065e      	lsls	r6, r3, #25
    d776:	d505      	bpl.n	d784 <isr_rx_conn_pkt_ctrl+0x324>
			_radio.conn_curr->refresh = 0;
    d778:	f36f 1386 	bfc	r3, #6, #1
    d77c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d780:	2309      	movs	r3, #9
    d782:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d784:	2301      	movs	r3, #1
    d786:	702b      	strb	r3, [r5, #0]
				break;
    d788:	f000 bccd 	b.w	e126 <isr_rx_conn_pkt_ctrl+0xcc6>
			_radio.conn_curr->pause_rx = 0;
    d78c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    d790:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d794:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d798:	f36f 03c3 	bfc	r3, #3, #1
    d79c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d7a0:	e7e4      	b.n	d76c <isr_rx_conn_pkt_ctrl+0x30c>
		if (!_radio.conn_curr->role ||
    d7a2:	4b10      	ldr	r3, [pc, #64]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d7a4:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d7a8:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	f280 875c 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d7b2:	7a41      	ldrb	r1, [r0, #9]
    d7b4:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d7b6:	f7fc f913 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d7ba:	2800      	cmp	r0, #0
    d7bc:	f000 8755 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d7c0:	4631      	mov	r1, r6
    d7c2:	4628      	mov	r0, r5
}
    d7c4:	b003      	add	sp, #12
    d7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d7ca:	f7fe ba43 	b.w	bc54 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d7ce:	4b05      	ldr	r3, [pc, #20]	; (d7e4 <isr_rx_conn_pkt_ctrl+0x384>)
    d7d0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    d7d4:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	f2c0 8746 	blt.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d7de:	7a41      	ldrb	r1, [r0, #9]
    d7e0:	200e      	movs	r0, #14
    d7e2:	e7e8      	b.n	d7b6 <isr_rx_conn_pkt_ctrl+0x356>
    d7e4:	200008f0 	.word	0x200008f0
    d7e8:	00014c55 	.word	0x00014c55
    d7ec:	20003aa4 	.word	0x20003aa4
    d7f0:	000171fc 	.word	0x000171fc
    d7f4:	000159c3 	.word	0x000159c3
    d7f8:	00015a12 	.word	0x00015a12
    d7fc:	00017684 	.word	0x00017684
    d800:	00017208 	.word	0x00017208
    d804:	00016eae 	.word	0x00016eae
    d808:	000176c6 	.word	0x000176c6
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d80c:	7a41      	ldrb	r1, [r0, #9]
    d80e:	2009      	movs	r0, #9
    d810:	f7fc f8e6 	bl	99e0 <pdu_len_cmp>
    d814:	2800      	cmp	r0, #0
    d816:	f000 8728 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d81a:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d81c:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d81e:	48b2      	ldr	r0, [pc, #712]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d824:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d828:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d82c:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d830:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d838:	7ba1      	ldrb	r1, [r4, #14]
    d83a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d83e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d842:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d846:	400b      	ands	r3, r1
    d848:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d84c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d850:	f043 0320 	orr.w	r3, r3, #32
    d854:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d858:	2301      	movs	r3, #1
    d85a:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d85c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
		_radio.conn_curr->procedure_expire = 0;
    d860:	2000      	movs	r0, #0
    d862:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d866:	e6c5      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!_radio.conn_curr->role ||
    d868:	4e9f      	ldr	r6, [pc, #636]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
    d86a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    d86e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d872:	2b00      	cmp	r3, #0
    d874:	f280 86f9 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d878:	7a41      	ldrb	r1, [r0, #9]
    d87a:	200a      	movs	r0, #10
    d87c:	f7fc f8b0 	bl	99e0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d880:	2800      	cmp	r0, #0
    d882:	f000 86f2 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d886:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
    d88a:	f7f9 fabc 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    d88e:	4601      	mov	r1, r0
    d890:	b908      	cbnz	r0, d896 <isr_rx_conn_pkt_ctrl+0x436>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d892:	2001      	movs	r0, #1
    d894:	e6ae      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		conn->refresh = 1;
    d896:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d89a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d89e:	f36f 1304 	bfc	r3, #4, #1
    d8a2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8a6:	7903      	ldrb	r3, [r0, #4]
    d8a8:	f043 0303 	orr.w	r3, r3, #3
    d8ac:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d8ae:	2301      	movs	r3, #1
    d8b0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d8b2:	230b      	movs	r3, #11
    d8b4:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d8b6:	4628      	mov	r0, r5
    d8b8:	f000 bced 	b.w	e296 <isr_rx_conn_pkt_ctrl+0xe36>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d8bc:	7a41      	ldrb	r1, [r0, #9]
    d8be:	200b      	movs	r0, #11
    d8c0:	f7fc f88e 	bl	99e0 <pdu_len_cmp>
    d8c4:	2800      	cmp	r0, #0
    d8c6:	f000 86d0 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d8ca:	4887      	ldr	r0, [pc, #540]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
    d8cc:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	} else if (!conn->role) {
    d8d0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	db1b      	blt.n	d910 <isr_rx_conn_pkt_ctrl+0x4b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d8d8:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d8dc:	f7f9 fa93 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    d8e0:	4601      	mov	r1, r0
    d8e2:	2800      	cmp	r0, #0
    d8e4:	d0d5      	beq.n	d892 <isr_rx_conn_pkt_ctrl+0x432>
		conn->enc_tx = 0;
    d8e6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d8ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d8ee:	f043 0304 	orr.w	r3, r3, #4
    d8f2:	f36f 1304 	bfc	r3, #4, #1
    d8f6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8fa:	7903      	ldrb	r3, [r0, #4]
    d8fc:	f043 0303 	orr.w	r3, r3, #3
    d900:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d902:	2301      	movs	r3, #1
    d904:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d906:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d908:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d90a:	4620      	mov	r0, r4
    d90c:	f000 bcc3 	b.w	e296 <isr_rx_conn_pkt_ctrl+0xe36>
		conn->enc_tx = 0;
    d910:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d914:	f36f 1345 	bfc	r3, #5, #1
    d918:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d91c:	e67a      	b.n	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d91e:	7a41      	ldrb	r1, [r0, #9]
    d920:	200c      	movs	r0, #12
    d922:	f7fc f85d 	bl	99e0 <pdu_len_cmp>
    d926:	2800      	cmp	r0, #0
    d928:	f000 869f 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d92c:	486e      	ldr	r0, [pc, #440]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
    d92e:	f8d0 6114 	ldr.w	r6, [r0, #276]	; 0x114
	if (!conn->llcp_version.tx) {
    d932:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d936:	f013 0701 	ands.w	r7, r3, #1
    d93a:	d150      	bne.n	d9de <isr_rx_conn_pkt_ctrl+0x57e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d93c:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    d940:	f7f9 fa61 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    d944:	4601      	mov	r1, r0
    d946:	2800      	cmp	r0, #0
    d948:	d0a3      	beq.n	d892 <isr_rx_conn_pkt_ctrl+0x432>
		conn->llcp_version.tx = 1;
    d94a:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d94e:	f043 0301 	orr.w	r3, r3, #1
    d952:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d956:	7903      	ldrb	r3, [r0, #4]
    d958:	f043 0303 	orr.w	r3, r3, #3
    d95c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d95e:	2306      	movs	r3, #6
    d960:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d962:	230c      	movs	r3, #12
    d964:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d966:	2309      	movs	r3, #9
    d968:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d96a:	f06f 030e 	mvn.w	r3, #14
    d96e:	7243      	strb	r3, [r0, #9]
    d970:	2305      	movs	r3, #5
    d972:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d978:	72c3      	strb	r3, [r0, #11]
    d97a:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d97c:	4630      	mov	r0, r6
    d97e:	f7fe f94f 	bl	bc20 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d982:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d98a:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d98e:	f004 fe15 	bl	125bc <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d992:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d994:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d996:	2201      	movs	r2, #1
    d998:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d99c:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d9a0:	7003      	strb	r3, [r0, #0]
    d9a2:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d9a4:	b1c2      	cbz	r2, d9d8 <isr_rx_conn_pkt_ctrl+0x578>
		pdu_data_tx->md = 1;
    d9a6:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d9aa:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d9ac:	7b23      	ldrb	r3, [r4, #12]
    d9ae:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d9b2:	7ba2      	ldrb	r2, [r4, #14]
    d9b4:	7b63      	ldrb	r3, [r4, #13]
    d9b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9ba:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d9be:	7be3      	ldrb	r3, [r4, #15]
    d9c0:	7c22      	ldrb	r2, [r4, #16]
    d9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d9c6:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d9ca:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d9ce:	f043 0302 	orr.w	r3, r3, #2
    d9d2:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d9d6:	e61d      	b.n	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		pdu_data_tx->md = 0;
    d9d8:	f362 1304 	bfi	r3, r2, #4, #1
    d9dc:	e7e5      	b.n	d9aa <isr_rx_conn_pkt_ctrl+0x54a>
	} else if (!conn->llcp_version.rx) {
    d9de:	f013 0302 	ands.w	r3, r3, #2
    d9e2:	f47f ae17 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->procedure_expire = 0;
    d9e6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d9ea:	2301      	movs	r3, #1
    d9ec:	702b      	strb	r3, [r5, #0]
    d9ee:	e7dd      	b.n	d9ac <isr_rx_conn_pkt_ctrl+0x54c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d9f0:	7a41      	ldrb	r1, [r0, #9]
    d9f2:	200d      	movs	r0, #13
    d9f4:	f7fb fff4 	bl	99e0 <pdu_len_cmp>
    d9f8:	2800      	cmp	r0, #0
    d9fa:	f000 8636 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->pause_rx = 0;
    d9fe:	4b3a      	ldr	r3, [pc, #232]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
    da00:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    da04:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    da08:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    da0c:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    da10:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    da12:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    da16:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    da1a:	2301      	movs	r3, #1
    da1c:	702b      	strb	r3, [r5, #0]
    da1e:	e5e9      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    da20:	7a41      	ldrb	r1, [r0, #9]
    da22:	200f      	movs	r0, #15
    da24:	f7fb ffdc 	bl	99e0 <pdu_len_cmp>
    da28:	2800      	cmp	r0, #0
    da2a:	f000 861e 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    da2e:	4b2e      	ldr	r3, [pc, #184]	; (dae8 <isr_rx_conn_pkt_ctrl+0x688>)
    da30:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
    da34:	461a      	mov	r2, r3
    da36:	b151      	cbz	r1, da4e <isr_rx_conn_pkt_ctrl+0x5ee>
    da38:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
    da3c:	4281      	cmp	r1, r0
    da3e:	d006      	beq.n	da4e <isr_rx_conn_pkt_ctrl+0x5ee>
			nack = reject_ext_ind_send(_radio.conn_curr,
    da40:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    da42:	210f      	movs	r1, #15
}
    da44:	b003      	add	sp, #12
    da46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    da4a:	f7fe b96d 	b.w	bd28 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    da4e:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    da52:	f990 301d 	ldrsb.w	r3, [r0, #29]
    da56:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    da5a:	2b00      	cmp	r3, #0
    da5c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    da60:	f2c0 80a7 	blt.w	dbb2 <isr_rx_conn_pkt_ctrl+0x752>
			if ((conn->llcp_conn_param.req !=
    da64:	4299      	cmp	r1, r3
    da66:	d009      	beq.n	da7c <isr_rx_conn_pkt_ctrl+0x61c>
			    ((conn->llcp_conn_param.state ==
    da68:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    da6c:	f013 0307 	ands.w	r3, r3, #7
    da70:	d002      	beq.n	da78 <isr_rx_conn_pkt_ctrl+0x618>
			      LLCP_CPR_STATE_REQ) ||
    da72:	3b04      	subs	r3, #4
    da74:	2b01      	cmp	r3, #1
    da76:	d801      	bhi.n	da7c <isr_rx_conn_pkt_ctrl+0x61c>
				nack = reject_ext_ind_send(_radio.conn_curr,
    da78:	2223      	movs	r2, #35	; 0x23
    da7a:	e7e2      	b.n	da42 <isr_rx_conn_pkt_ctrl+0x5e2>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    da7c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    da80:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    da84:	4299      	cmp	r1, r3
    da86:	d003      	beq.n	da90 <isr_rx_conn_pkt_ctrl+0x630>
    da88:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    da8c:	2b03      	cmp	r3, #3
    da8e:	d105      	bne.n	da9c <isr_rx_conn_pkt_ctrl+0x63c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    da90:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    da94:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    da98:	4299      	cmp	r1, r3
    da9a:	d001      	beq.n	daa0 <isr_rx_conn_pkt_ctrl+0x640>
				nack = reject_ext_ind_send(_radio.conn_curr,
    da9c:	222a      	movs	r2, #42	; 0x2a
    da9e:	e7d0      	b.n	da42 <isr_rx_conn_pkt_ctrl+0x5e2>
				if ((cpr->interval_min < 6) ||
    daa0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    daa4:	4643      	mov	r3, r8
    daa6:	2b05      	cmp	r3, #5
    daa8:	d91b      	bls.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    daaa:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    daac:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    dab0:	d817      	bhi.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->interval_max > 3200) ||
    dab2:	45b8      	cmp	r8, r7
    dab4:	d815      	bhi.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->latency > 499) ||
    dab6:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    daba:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    dabe:	d210      	bcs.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->timeout < 10) ||
    dac0:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    dac4:	f1ae 060a 	sub.w	r6, lr, #10
    dac8:	b2b6      	uxth	r6, r6
    daca:	f640 4976 	movw	r9, #3190	; 0xc76
    dace:	454e      	cmp	r6, r9
    dad0:	d807      	bhi.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				     ((cpr->latency + 1) *
    dad2:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    dad6:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    dada:	da02      	bge.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
				    (cpr->preferred_periodicity >
    dadc:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    dade:	428f      	cmp	r7, r1
    dae0:	d204      	bcs.n	daec <isr_rx_conn_pkt_ctrl+0x68c>
				nack = reject_ext_ind_send(conn,
    dae2:	221e      	movs	r2, #30
    dae4:	e7ad      	b.n	da42 <isr_rx_conn_pkt_ctrl+0x5e2>
    dae6:	bf00      	nop
    dae8:	200008f0 	.word	0x200008f0
				conn->llcp_conn_param.interval = cpr->interval_min;
    daec:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    daf0:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    daf4:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    daf8:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    dafc:	7da6      	ldrb	r6, [r4, #22]
    dafe:	7d61      	ldrb	r1, [r4, #21]
    db00:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    db04:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    db08:	7e26      	ldrb	r6, [r4, #24]
    db0a:	7de1      	ldrb	r1, [r4, #23]
    db0c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db10:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    db14:	7ea6      	ldrb	r6, [r4, #26]
    db16:	7e61      	ldrb	r1, [r4, #25]
    db18:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db1c:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    db20:	7f26      	ldrb	r6, [r4, #28]
    db22:	7ee1      	ldrb	r1, [r4, #27]
    db24:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db28:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    db2c:	7fa6      	ldrb	r6, [r4, #30]
    db2e:	7f61      	ldrb	r1, [r4, #29]
    db30:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db34:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    db38:	7fe1      	ldrb	r1, [r4, #31]
    db3a:	f894 6020 	ldrb.w	r6, [r4, #32]
    db3e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    db42:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    db46:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    db4a:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    db4e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    db52:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    db56:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    db5a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    db5c:	428c      	cmp	r4, r1
    db5e:	d10f      	bne.n	db80 <isr_rx_conn_pkt_ctrl+0x720>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    db60:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    db62:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db66:	4361      	muls	r1, r4
    db68:	f242 7410 	movw	r4, #10000	; 0x2710
    db6c:	fb04 130e 	mla	r3, r4, lr, r1
    db70:	3b01      	subs	r3, #1
    db72:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    db76:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    db78:	b29b      	uxth	r3, r3
    db7a:	4299      	cmp	r1, r3
    db7c:	f000 8092 	beq.w	dca4 <isr_rx_conn_pkt_ctrl+0x844>
					if (conn->pause_tx) {
    db80:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    db84:	071c      	lsls	r4, r3, #28
    db86:	f140 8087 	bpl.w	dc98 <isr_rx_conn_pkt_ctrl+0x838>
						conn->llcp_conn_param.state =
    db8a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    db8e:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    db90:	f361 0302 	bfi	r3, r1, #0, #3
    db94:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    db98:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    db9c:	3b01      	subs	r3, #1
    db9e:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    dba2:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    dba6:	2b00      	cmp	r3, #0
    dba8:	f47f ad34 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
				_radio.conn_upd = conn;
    dbac:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
    dbb0:	e530      	b.n	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    dbb2:	4299      	cmp	r1, r3
    dbb4:	d003      	beq.n	dbbe <isr_rx_conn_pkt_ctrl+0x75e>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    dbb6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dbba:	0799      	lsls	r1, r3, #30
    dbbc:	d17b      	bne.n	dcb6 <isr_rx_conn_pkt_ctrl+0x856>
			if ((cpr->interval_min < 6) ||
    dbbe:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    dbc2:	4643      	mov	r3, r8
    dbc4:	2b05      	cmp	r3, #5
    dbc6:	d98c      	bls.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    dbc8:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    dbca:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    dbce:	d888      	bhi.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->interval_max > 3200) ||
    dbd0:	45b8      	cmp	r8, r7
    dbd2:	d886      	bhi.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->latency > 499) ||
    dbd4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    dbd8:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    dbdc:	d281      	bcs.n	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dbde:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    dbe2:	f1ae 060a 	sub.w	r6, lr, #10
    dbe6:	b2b6      	uxth	r6, r6
    dbe8:	f640 4976 	movw	r9, #3190	; 0xc76
    dbec:	454e      	cmp	r6, r9
    dbee:	f63f af78 	bhi.w	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    dbf2:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dbf6:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    dbfa:	f6bf af72 	bge.w	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    dbfe:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    dc00:	428f      	cmp	r7, r1
    dc02:	f4ff af6e 	bcc.w	dae2 <isr_rx_conn_pkt_ctrl+0x682>
			conn->llcp_conn_param.interval = cpr->interval_min;
    dc06:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dc0a:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dc0e:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dc12:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    dc16:	7da6      	ldrb	r6, [r4, #22]
    dc18:	7d61      	ldrb	r1, [r4, #21]
    dc1a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dc1e:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dc22:	7e26      	ldrb	r6, [r4, #24]
    dc24:	7de1      	ldrb	r1, [r4, #23]
    dc26:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc2a:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dc2e:	7ea6      	ldrb	r6, [r4, #26]
    dc30:	7e61      	ldrb	r1, [r4, #25]
    dc32:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc36:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dc3a:	7f26      	ldrb	r6, [r4, #28]
    dc3c:	7ee1      	ldrb	r1, [r4, #27]
    dc3e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc42:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dc46:	7fa6      	ldrb	r6, [r4, #30]
    dc48:	7f61      	ldrb	r1, [r4, #29]
    dc4a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc4e:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dc52:	7fe1      	ldrb	r1, [r4, #31]
    dc54:	f894 6020 	ldrb.w	r6, [r4, #32]
    dc58:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    dc5c:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    dc60:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    dc64:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    dc68:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    dc6c:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    dc70:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    dc74:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dc76:	428c      	cmp	r4, r1
    dc78:	d10e      	bne.n	dc98 <isr_rx_conn_pkt_ctrl+0x838>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    dc7a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    dc7c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc80:	4361      	muls	r1, r4
    dc82:	f242 7410 	movw	r4, #10000	; 0x2710
    dc86:	fb04 130e 	mla	r3, r4, lr, r1
    dc8a:	3b01      	subs	r3, #1
    dc8c:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    dc90:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    dc92:	b29b      	uxth	r3, r3
    dc94:	4299      	cmp	r1, r3
    dc96:	d005      	beq.n	dca4 <isr_rx_conn_pkt_ctrl+0x844>
				*rx_enqueue = 1;
    dc98:	2301      	movs	r3, #1
    dc9a:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    dc9c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    dca0:	2103      	movs	r1, #3
    dca2:	e775      	b.n	db90 <isr_rx_conn_pkt_ctrl+0x730>
				conn->llcp_conn_param.status = 0;
    dca4:	2300      	movs	r3, #0
    dca6:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    dcaa:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    dcae:	2101      	movs	r1, #1
    dcb0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    dcb4:	e76c      	b.n	db90 <isr_rx_conn_pkt_ctrl+0x730>
			LL_ASSERT(0);
    dcb6:	4bb9      	ldr	r3, [pc, #740]	; (df9c <isr_rx_conn_pkt_ctrl+0xb3c>)
    dcb8:	9301      	str	r3, [sp, #4]
    dcba:	9300      	str	r3, [sp, #0]
    dcbc:	4bb8      	ldr	r3, [pc, #736]	; (dfa0 <isr_rx_conn_pkt_ctrl+0xb40>)
    dcbe:	4ab9      	ldr	r2, [pc, #740]	; (dfa4 <isr_rx_conn_pkt_ctrl+0xb44>)
    dcc0:	681c      	ldr	r4, [r3, #0]
    dcc2:	49b9      	ldr	r1, [pc, #740]	; (dfa8 <isr_rx_conn_pkt_ctrl+0xb48>)
    dcc4:	4bb9      	ldr	r3, [pc, #740]	; (dfac <isr_rx_conn_pkt_ctrl+0xb4c>)
    dcc6:	48ba      	ldr	r0, [pc, #744]	; (dfb0 <isr_rx_conn_pkt_ctrl+0xb50>)
    dcc8:	e512      	b.n	d6f0 <isr_rx_conn_pkt_ctrl+0x290>
		if (_radio.conn_curr->role ||
    dcca:	4bba      	ldr	r3, [pc, #744]	; (dfb4 <isr_rx_conn_pkt_ctrl+0xb54>)
    dccc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
    dcd0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	f2c0 84c8 	blt.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    dcda:	7a41      	ldrb	r1, [r0, #9]
    dcdc:	2010      	movs	r0, #16
    dcde:	f7fb fe7f 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    dce2:	2800      	cmp	r0, #0
    dce4:	f000 84c1 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		if (!_radio.conn_curr->role &&
    dce8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    dcec:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    dcf0:	429a      	cmp	r2, r3
    dcf2:	f43f ac8f 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_conn_param.state ==
    dcf6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    dcfa:	f003 0307 	and.w	r3, r3, #7
    dcfe:	2b04      	cmp	r3, #4
    dd00:	f47f ac88 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			if ((cpr->interval_min < 6) ||
    dd04:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    dd08:	fa1f f28e 	uxth.w	r2, lr
    dd0c:	2a05      	cmp	r2, #5
    dd0e:	d91b      	bls.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    dd10:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    dd12:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    dd16:	d817      	bhi.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->interval_max > 3200) ||
    dd18:	429a      	cmp	r2, r3
    dd1a:	d815      	bhi.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->latency > 499) ||
    dd1c:	8a27      	ldrh	r7, [r4, #16]
    dd1e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    dd20:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    dd24:	d210      	bcs.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dd26:	8a66      	ldrh	r6, [r4, #18]
    dd28:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    dd2a:	f1a0 010a 	sub.w	r1, r0, #10
    dd2e:	b289      	uxth	r1, r1
    dd30:	f640 4c76 	movw	ip, #3190	; 0xc76
    dd34:	4561      	cmp	r1, ip
    dd36:	d807      	bhi.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    dd38:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    dd3c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    dd40:	da02      	bge.n	dd48 <isr_rx_conn_pkt_ctrl+0x8e8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    dd42:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    dd44:	4293      	cmp	r3, r2
    dd46:	d203      	bcs.n	dd50 <isr_rx_conn_pkt_ctrl+0x8f0>
				nack = reject_ext_ind_send(conn,
    dd48:	221e      	movs	r2, #30
    dd4a:	2110      	movs	r1, #16
    dd4c:	4628      	mov	r0, r5
    dd4e:	e679      	b.n	da44 <isr_rx_conn_pkt_ctrl+0x5e4>
			_radio.conn_curr->procedure_expire = 0;
    dd50:	2000      	movs	r0, #0
    dd52:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    dd56:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    dd5a:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    dd5e:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    dd62:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    dd66:	7da2      	ldrb	r2, [r4, #22]
    dd68:	7d63      	ldrb	r3, [r4, #21]
    dd6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    dd6e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    dd72:	7e22      	ldrb	r2, [r4, #24]
    dd74:	7de3      	ldrb	r3, [r4, #23]
    dd76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd7a:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    dd7e:	7ea2      	ldrb	r2, [r4, #26]
    dd80:	7e63      	ldrb	r3, [r4, #25]
    dd82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd86:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    dd8a:	7f22      	ldrb	r2, [r4, #28]
    dd8c:	7ee3      	ldrb	r3, [r4, #27]
    dd8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd92:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    dd96:	7fa2      	ldrb	r2, [r4, #30]
    dd98:	7f63      	ldrb	r3, [r4, #29]
    dd9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd9e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    dda2:	f894 2020 	ldrb.w	r2, [r4, #32]
    dda6:	7fe3      	ldrb	r3, [r4, #31]
    dda8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddac:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    ddb0:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    ddb4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ddb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddbc:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    ddc0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    ddc4:	2201      	movs	r2, #1
    ddc6:	f362 0302 	bfi	r3, r2, #0, #3
    ddca:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    ddce:	e411      	b.n	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    ddd0:	7a41      	ldrb	r1, [r0, #9]
    ddd2:	2011      	movs	r0, #17
    ddd4:	f7fb fe04 	bl	99e0 <pdu_len_cmp>
    ddd8:	2800      	cmp	r0, #0
    ddda:	f000 8446 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ddde:	4a75      	ldr	r2, [pc, #468]	; (dfb4 <isr_rx_conn_pkt_ctrl+0xb54>)
    dde0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dde4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    dde8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    ddec:	4281      	cmp	r1, r0
    ddee:	7b21      	ldrb	r1, [r4, #12]
    ddf0:	d027      	beq.n	de42 <isr_rx_conn_pkt_ctrl+0x9e2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    ddf2:	2916      	cmp	r1, #22
    ddf4:	f47f ac0e 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		if (rej_ext_ind->error_code != 0x23) {
    ddf8:	7b61      	ldrb	r1, [r4, #13]
    ddfa:	2923      	cmp	r1, #35	; 0x23
    ddfc:	d00e      	beq.n	de1c <isr_rx_conn_pkt_ctrl+0x9bc>
				_radio.conn_curr->phy_tx;
    ddfe:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    de02:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    de06:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    de0a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    de0e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    de12:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    de14:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    de18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    de1c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    de20:	0792      	lsls	r2, r2, #30
    de22:	f57f abf7 	bpl.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de26:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    de28:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de2a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    de2c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    de30:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    de34:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    de36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    de3a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de3e:	7363      	strb	r3, [r4, #13]
    de40:	e415      	b.n	d66e <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_conn_param.req) {
    de42:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    de46:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    de4a:	42b8      	cmp	r0, r7
    de4c:	d04c      	beq.n	dee8 <isr_rx_conn_pkt_ctrl+0xa88>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    de4e:	290f      	cmp	r1, #15
    de50:	f47f abe0 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
    de54:	f993 001d 	ldrsb.w	r0, [r3, #29]
    de58:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    de5a:	2800      	cmp	r0, #0
    de5c:	db10      	blt.n	de80 <isr_rx_conn_pkt_ctrl+0xa20>
    de5e:	291a      	cmp	r1, #26
    de60:	d10e      	bne.n	de80 <isr_rx_conn_pkt_ctrl+0xa20>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    de62:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    de66:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    de6a:	4294      	cmp	r4, r2
    de6c:	f000 80d1 	beq.w	e012 <isr_rx_conn_pkt_ctrl+0xbb2>
    de70:	4b4a      	ldr	r3, [pc, #296]	; (df9c <isr_rx_conn_pkt_ctrl+0xb3c>)
    de72:	9301      	str	r3, [sp, #4]
    de74:	9300      	str	r3, [sp, #0]
    de76:	4b4a      	ldr	r3, [pc, #296]	; (dfa0 <isr_rx_conn_pkt_ctrl+0xb40>)
    de78:	681c      	ldr	r4, [r3, #0]
    de7a:	4b4f      	ldr	r3, [pc, #316]	; (dfb8 <isr_rx_conn_pkt_ctrl+0xb58>)
    de7c:	f7ff bb38 	b.w	d4f0 <isr_rx_conn_pkt_ctrl+0x90>
	else if (rej_ext_ind->error_code != 0x23) {
    de80:	2923      	cmp	r1, #35	; 0x23
    de82:	d01a      	beq.n	deba <isr_rx_conn_pkt_ctrl+0xa5a>
		LL_ASSERT(_radio.conn_upd == conn);
    de84:	f8d2 6188 	ldr.w	r6, [r2, #392]	; 0x188
    de88:	42b3      	cmp	r3, r6
    de8a:	d009      	beq.n	dea0 <isr_rx_conn_pkt_ctrl+0xa40>
    de8c:	4b43      	ldr	r3, [pc, #268]	; (df9c <isr_rx_conn_pkt_ctrl+0xb3c>)
    de8e:	9301      	str	r3, [sp, #4]
    de90:	9300      	str	r3, [sp, #0]
    de92:	4b43      	ldr	r3, [pc, #268]	; (dfa0 <isr_rx_conn_pkt_ctrl+0xb40>)
    de94:	681c      	ldr	r4, [r3, #0]
    de96:	4b48      	ldr	r3, [pc, #288]	; (dfb8 <isr_rx_conn_pkt_ctrl+0xb58>)
			LL_ASSERT(_radio.conn_upd == conn);
    de98:	4a42      	ldr	r2, [pc, #264]	; (dfa4 <isr_rx_conn_pkt_ctrl+0xb44>)
    de9a:	4943      	ldr	r1, [pc, #268]	; (dfa8 <isr_rx_conn_pkt_ctrl+0xb48>)
    de9c:	4847      	ldr	r0, [pc, #284]	; (dfbc <isr_rx_conn_pkt_ctrl+0xb5c>)
    de9e:	e427      	b.n	d6f0 <isr_rx_conn_pkt_ctrl+0x290>
		_radio.conn_upd = NULL;
    dea0:	2600      	movs	r6, #0
		if (conn->role) {
    dea2:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    dea4:	f8c2 6188 	str.w	r6, [r2, #392]	; 0x188
			conn->slave.ticks_to_offset =
    dea8:	bfb8      	it	lt
    deaa:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    deae:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    deb2:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    deb6:	bfb8      	it	lt
    deb8:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    deba:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    debe:	0717      	lsls	r7, r2, #28
    dec0:	f57f aba8 	bpl.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
	cp->status = rej_ext_ind->error_code;
    dec4:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dec6:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    dec8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    deca:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    decc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    dece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    ded0:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    ded2:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    ded4:	237d      	movs	r3, #125	; 0x7d
    ded6:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    ded8:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    deda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dede:	fb93 f3f2 	sdiv	r3, r3, r2
    dee2:	8223      	strh	r3, [r4, #16]
    dee4:	f7ff bbc3 	b.w	d66e <isr_rx_conn_pkt_ctrl+0x20e>
		   _radio.conn_curr->llcp_length.req) {
    dee8:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    deec:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    def0:	4290      	cmp	r0, r2
    def2:	d01a      	beq.n	df2a <isr_rx_conn_pkt_ctrl+0xaca>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    def4:	2914      	cmp	r1, #20
    def6:	f47f ab8d 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->llcp_length.ack = conn->llcp_length.req;
    defa:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    defe:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    df02:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    df04:	f360 02c3 	bfi	r2, r0, #3, #1
    df08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    df0c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    df0e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    df12:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    df14:	2215      	movs	r2, #21
    df16:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    df18:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    df1a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    df1c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    df1e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    df20:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    df22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    df24:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    df26:	8263      	strh	r3, [r4, #18]
    df28:	e577      	b.n	da1a <isr_rx_conn_pkt_ctrl+0x5ba>
		switch (rej_ext_ind->reject_opcode) {
    df2a:	2903      	cmp	r1, #3
    df2c:	f47f ab72 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_rx = 0;
    df30:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    df34:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    df38:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    df3c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    df3e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    df42:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    df46:	230d      	movs	r3, #13
    df48:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    df4a:	7b63      	ldrb	r3, [r4, #13]
    df4c:	7323      	strb	r3, [r4, #12]
    df4e:	e564      	b.n	da1a <isr_rx_conn_pkt_ctrl+0x5ba>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    df50:	7a41      	ldrb	r1, [r0, #9]
    df52:	2012      	movs	r0, #18
    df54:	f7fb fd44 	bl	99e0 <pdu_len_cmp>
    df58:	2800      	cmp	r0, #0
    df5a:	f000 8386 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		nack = ping_resp_send(_radio.conn_curr);
    df5e:	4815      	ldr	r0, [pc, #84]	; (dfb4 <isr_rx_conn_pkt_ctrl+0xb54>)
    df60:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    df64:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    df68:	f7f8 ff4d 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    df6c:	4601      	mov	r1, r0
    df6e:	2800      	cmp	r0, #0
    df70:	f43f ac8f 	beq.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df74:	7903      	ldrb	r3, [r0, #4]
    df76:	f043 0303 	orr.w	r3, r3, #3
    df7a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    df7c:	2301      	movs	r3, #1
    df7e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    df80:	2313      	movs	r3, #19
    df82:	e4c1      	b.n	d908 <isr_rx_conn_pkt_ctrl+0x4a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    df84:	7a41      	ldrb	r1, [r0, #9]
    df86:	2013      	movs	r0, #19
    df88:	f7fb fd2a 	bl	99e0 <pdu_len_cmp>
    df8c:	2800      	cmp	r0, #0
    df8e:	f000 836c 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		_radio.conn_curr->procedure_expire = 0;
    df92:	4b08      	ldr	r3, [pc, #32]	; (dfb4 <isr_rx_conn_pkt_ctrl+0xb54>)
    df94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    df98:	e462      	b.n	d860 <isr_rx_conn_pkt_ctrl+0x400>
    df9a:	bf00      	nop
    df9c:	00014c55 	.word	0x00014c55
    dfa0:	20003aa4 	.word	0x20003aa4
    dfa4:	000159c3 	.word	0x000159c3
    dfa8:	00015a12 	.word	0x00015a12
    dfac:	00016eae 	.word	0x00016eae
    dfb0:	00015962 	.word	0x00015962
    dfb4:	200008f0 	.word	0x200008f0
    dfb8:	00016e73 	.word	0x00016e73
    dfbc:	00017756 	.word	0x00017756
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    dfc0:	7a41      	ldrb	r1, [r0, #9]
    dfc2:	2007      	movs	r0, #7
    dfc4:	f7fb fd0c 	bl	99e0 <pdu_len_cmp>
    dfc8:	2800      	cmp	r0, #0
    dfca:	f000 834e 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dfce:	4ad3      	ldr	r2, [pc, #844]	; (e31c <isr_rx_conn_pkt_ctrl+0xebc>)
    dfd0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    dfd4:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    dfd8:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    dfdc:	42b1      	cmp	r1, r6
    dfde:	4611      	mov	r1, r2
    dfe0:	d06b      	beq.n	e0ba <isr_rx_conn_pkt_ctrl+0xc5a>
			conn->llcp_conn_param.disabled = 1;
    dfe2:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    dfe6:	f040 0010 	orr.w	r0, r0, #16
    dfea:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    dfee:	f993 001d 	ldrsb.w	r0, [r3, #29]
    dff2:	2800      	cmp	r0, #0
    dff4:	db39      	blt.n	e06a <isr_rx_conn_pkt_ctrl+0xc0a>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dff6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    dffa:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    dffe:	4294      	cmp	r4, r2
    e000:	d007      	beq.n	e012 <isr_rx_conn_pkt_ctrl+0xbb2>
    e002:	4bc7      	ldr	r3, [pc, #796]	; (e320 <isr_rx_conn_pkt_ctrl+0xec0>)
    e004:	9301      	str	r3, [sp, #4]
    e006:	9300      	str	r3, [sp, #0]
    e008:	4bc6      	ldr	r3, [pc, #792]	; (e324 <isr_rx_conn_pkt_ctrl+0xec4>)
    e00a:	681c      	ldr	r4, [r3, #0]
    e00c:	4bc6      	ldr	r3, [pc, #792]	; (e328 <isr_rx_conn_pkt_ctrl+0xec8>)
    e00e:	f7ff ba6f 	b.w	d4f0 <isr_rx_conn_pkt_ctrl+0x90>
				conn->llcp_conn_param.state =
    e012:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    e016:	2105      	movs	r1, #5
    e018:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    e01c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    e020:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    e024:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    e028:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    e02c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    e030:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e034:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    e038:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    e03c:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    e03e:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e042:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    e046:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    e04a:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    e04c:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    e050:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    e052:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    e056:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    e05a:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    e05e:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    e062:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    e066:	f7ff bac5 	b.w	d5f4 <isr_rx_conn_pkt_ctrl+0x194>
			LL_ASSERT(_radio.conn_upd == conn);
    e06a:	f8d2 2188 	ldr.w	r2, [r2, #392]	; 0x188
    e06e:	4293      	cmp	r3, r2
    e070:	d006      	beq.n	e080 <isr_rx_conn_pkt_ctrl+0xc20>
    e072:	4bab      	ldr	r3, [pc, #684]	; (e320 <isr_rx_conn_pkt_ctrl+0xec0>)
    e074:	9301      	str	r3, [sp, #4]
    e076:	9300      	str	r3, [sp, #0]
    e078:	4baa      	ldr	r3, [pc, #680]	; (e324 <isr_rx_conn_pkt_ctrl+0xec4>)
    e07a:	681c      	ldr	r4, [r3, #0]
    e07c:	4baa      	ldr	r3, [pc, #680]	; (e328 <isr_rx_conn_pkt_ctrl+0xec8>)
    e07e:	e70b      	b.n	de98 <isr_rx_conn_pkt_ctrl+0xa38>
			_radio.conn_upd = NULL;
    e080:	2200      	movs	r2, #0
    e082:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (!conn->llcp_conn_param.cmd) {
    e086:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e08a:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    e08e:	0716      	lsls	r6, r2, #28
    e090:	f57f aac0 	bpl.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    e094:	2208      	movs	r2, #8
    e096:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e098:	221a      	movs	r2, #26
    e09a:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    e09c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    e09e:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    e0a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    e0a2:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    e0a4:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    e0a6:	237d      	movs	r3, #125	; 0x7d
    e0a8:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    e0aa:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    e0ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e0b0:	fb93 f3f2 	sdiv	r3, r3, r2
    e0b4:	8223      	strh	r3, [r4, #16]
    e0b6:	f7ff bb65 	b.w	d784 <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_length.req !=
    e0ba:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    e0be:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    e0c2:	4290      	cmp	r0, r2
    e0c4:	d009      	beq.n	e0da <isr_rx_conn_pkt_ctrl+0xc7a>
			_radio.conn_curr->llcp_length.ack =
    e0c6:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    e0ca:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    e0ce:	f36f 02c3 	bfc	r2, #3, #1
    e0d2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    e0d6:	f7ff bb55 	b.w	d784 <isr_rx_conn_pkt_ctrl+0x324>
		} else if (_radio.conn_curr->llcp_phy.req !=
    e0da:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    e0de:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    e0e2:	4290      	cmp	r0, r2
    e0e4:	d01b      	beq.n	e11e <isr_rx_conn_pkt_ctrl+0xcbe>
			_radio.conn_curr->llcp_phy.ack =
    e0e6:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    e0ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    e0ee:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    e0f2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    e0f6:	f362 0002 	bfi	r0, r2, #0, #3
    e0fa:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    e0fe:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    e102:	0780      	lsls	r0, r0, #30
    e104:	d50f      	bpl.n	e126 <isr_rx_conn_pkt_ctrl+0xcc6>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e106:	200c      	movs	r0, #12
    e108:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    e10a:	2000      	movs	r0, #0
    e10c:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    e10e:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    e110:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    e114:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e118:	7363      	strb	r3, [r4, #13]
    e11a:	f7ff bb33 	b.w	d784 <isr_rx_conn_pkt_ctrl+0x324>
			switch (llctrl->unknown_rsp.type) {
    e11e:	7b23      	ldrb	r3, [r4, #12]
    e120:	2b12      	cmp	r3, #18
    e122:	f47f ab2f 	bne.w	d784 <isr_rx_conn_pkt_ctrl+0x324>
		_radio.conn_curr->procedure_expire = 0;
    e126:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    e12a:	f7ff bb99 	b.w	d860 <isr_rx_conn_pkt_ctrl+0x400>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    e12e:	7a41      	ldrb	r1, [r0, #9]
    e130:	2014      	movs	r0, #20
    e132:	f7fb fc55 	bl	99e0 <pdu_len_cmp>
    e136:	2800      	cmp	r0, #0
    e138:	f000 8297 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    e13c:	2f14      	cmp	r7, #20
    e13e:	d129      	bne.n	e194 <isr_rx_conn_pkt_ctrl+0xd34>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e140:	487a      	ldr	r0, [pc, #488]	; (e32c <isr_rx_conn_pkt_ctrl+0xecc>)
    e142:	f7f8 fe60 	bl	6e06 <mem_acquire>
		if (!node_tx) {
    e146:	4606      	mov	r6, r0
    e148:	2800      	cmp	r0, #0
    e14a:	f43f aba2 	beq.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e14e:	4f73      	ldr	r7, [pc, #460]	; (e31c <isr_rx_conn_pkt_ctrl+0xebc>)
    e150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	if (/* Local idle, and Peer request then complete the Peer procedure
    e154:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    e158:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e15c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e15e:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e160:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e162:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
    e166:	45e0      	cmp	r8, ip
    e168:	46b9      	mov	r9, r7
    e16a:	f894 800b 	ldrb.w	r8, [r4, #11]
    e16e:	d113      	bne.n	e198 <isr_rx_conn_pkt_ctrl+0xd38>
	      _radio.conn_curr->llcp_length.ack) &&
    e170:	f1b8 0f14 	cmp.w	r8, #20
    e174:	d01c      	beq.n	e1b0 <isr_rx_conn_pkt_ctrl+0xd50>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    e176:	f1b8 0f15 	cmp.w	r8, #21
    e17a:	f000 829a 	beq.w	e6b2 <isr_rx_conn_pkt_ctrl+0x1252>
    e17e:	4b68      	ldr	r3, [pc, #416]	; (e320 <isr_rx_conn_pkt_ctrl+0xec0>)
    e180:	9301      	str	r3, [sp, #4]
    e182:	9300      	str	r3, [sp, #0]
    e184:	4b67      	ldr	r3, [pc, #412]	; (e324 <isr_rx_conn_pkt_ctrl+0xec4>)
    e186:	4a6a      	ldr	r2, [pc, #424]	; (e330 <isr_rx_conn_pkt_ctrl+0xed0>)
    e188:	681c      	ldr	r4, [r3, #0]
    e18a:	496a      	ldr	r1, [pc, #424]	; (e334 <isr_rx_conn_pkt_ctrl+0xed4>)
    e18c:	4b6a      	ldr	r3, [pc, #424]	; (e338 <isr_rx_conn_pkt_ctrl+0xed8>)
    e18e:	486b      	ldr	r0, [pc, #428]	; (e33c <isr_rx_conn_pkt_ctrl+0xedc>)
    e190:	f7ff baae 	b.w	d6f0 <isr_rx_conn_pkt_ctrl+0x290>
	struct radio_pdu_node_tx *node_tx = NULL;
    e194:	2600      	movs	r6, #0
    e196:	e7da      	b.n	e14e <isr_rx_conn_pkt_ctrl+0xcee>
		 LLCP_LENGTH_STATE_REQ) ||
    e198:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    e19c:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    e1a0:	2f01      	cmp	r7, #1
    e1a2:	d9e5      	bls.n	e170 <isr_rx_conn_pkt_ctrl+0xd10>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e1a4:	2f02      	cmp	r7, #2
    e1a6:	d1e6      	bne.n	e176 <isr_rx_conn_pkt_ctrl+0xd16>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    e1a8:	f1a8 0714 	sub.w	r7, r8, #20
    e1ac:	2f01      	cmp	r7, #1
    e1ae:	d8e2      	bhi.n	e176 <isr_rx_conn_pkt_ctrl+0xd16>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e1b0:	89a7      	ldrh	r7, [r4, #12]
    e1b2:	2f1a      	cmp	r7, #26
    e1b4:	d936      	bls.n	e224 <isr_rx_conn_pkt_ctrl+0xdc4>
			eff_tx_octets = min(lr->max_rx_octets,
    e1b6:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
    e1ba:	4547      	cmp	r7, r8
    e1bc:	bf28      	it	cs
    e1be:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    e1c0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    e1c4:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
    e1c8:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    e1cc:	bf34      	ite	cc
    e1ce:	4693      	movcc	fp, r2
    e1d0:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    e1d4:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
    e1d8:	d326      	bcc.n	e228 <isr_rx_conn_pkt_ctrl+0xdc8>
			eff_tx_time = min(lr->max_rx_time,
    e1da:	f8b3 a032 	ldrh.w	sl, [r3, #50]	; 0x32
    e1de:	45d0      	cmp	r8, sl
    e1e0:	bf28      	it	cs
    e1e2:	46d0      	movcs	r8, sl
		if (lr->max_tx_time >=
    e1e4:	f8b4 a012 	ldrh.w	sl, [r4, #18]
			eff_rx_time = min(lr->max_tx_time,
    e1e8:	f5ba 7fa4 	cmp.w	sl, #328	; 0x148
    e1ec:	bf34      	ite	cc
    e1ee:	4682      	movcc	sl, r0
    e1f0:	f44f 7aa4 	movcs.w	sl, #328	; 0x148
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    e1f4:	455a      	cmp	r2, fp
    e1f6:	d052      	beq.n	e29e <isr_rx_conn_pkt_ctrl+0xe3e>
			free_count_rx = packet_rx_acquired_count_get() +
    e1f8:	f7fb fc3a 	bl	9a70 <packet_rx_acquired_count_get>
    e1fc:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    e1fe:	f8d9 0130 	ldr.w	r0, [r9, #304]	; 0x130
    e202:	f7f8 fe2f 	bl	6e64 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    e206:	4420      	add	r0, r4
    e208:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    e20a:	28ff      	cmp	r0, #255	; 0xff
    e20c:	d90e      	bls.n	e22c <isr_rx_conn_pkt_ctrl+0xdcc>
    e20e:	4b44      	ldr	r3, [pc, #272]	; (e320 <isr_rx_conn_pkt_ctrl+0xec0>)
    e210:	9301      	str	r3, [sp, #4]
    e212:	9300      	str	r3, [sp, #0]
    e214:	4b43      	ldr	r3, [pc, #268]	; (e324 <isr_rx_conn_pkt_ctrl+0xec4>)
    e216:	4a46      	ldr	r2, [pc, #280]	; (e330 <isr_rx_conn_pkt_ctrl+0xed0>)
    e218:	681c      	ldr	r4, [r3, #0]
    e21a:	4946      	ldr	r1, [pc, #280]	; (e334 <isr_rx_conn_pkt_ctrl+0xed4>)
    e21c:	4b46      	ldr	r3, [pc, #280]	; (e338 <isr_rx_conn_pkt_ctrl+0xed8>)
    e21e:	4848      	ldr	r0, [pc, #288]	; (e340 <isr_rx_conn_pkt_ctrl+0xee0>)
    e220:	f7ff ba66 	b.w	d6f0 <isr_rx_conn_pkt_ctrl+0x290>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e224:	460f      	mov	r7, r1
    e226:	e7cb      	b.n	e1c0 <isr_rx_conn_pkt_ctrl+0xd60>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e228:	46f0      	mov	r8, lr
    e22a:	e7db      	b.n	e1e4 <isr_rx_conn_pkt_ctrl+0xd84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    e22c:	f899 313a 	ldrb.w	r3, [r9, #314]	; 0x13a
    e230:	4283      	cmp	r3, r0
    e232:	f040 8235 	bne.w	e6a0 <isr_rx_conn_pkt_ctrl+0x1240>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e236:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
					(_radio.conn_curr->llcp_length.req - 1);
    e23a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e23e:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    e240:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    e242:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    e246:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    e24a:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    e24e:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    e252:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    e256:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    e25a:	f8a3 a0f0 	strh.w	sl, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    e25e:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    e262:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    e266:	2303      	movs	r3, #3
    e268:	f889 3014 	strb.w	r3, [r9, #20]
	if (node_tx) {
    e26c:	2e00      	cmp	r6, #0
    e26e:	f43f a9d1 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e272:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    e274:	f8d9 0114 	ldr.w	r0, [r9, #276]	; 0x114
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    e278:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e27c:	f043 0303 	orr.w	r3, r3, #3
    e280:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    e282:	2309      	movs	r3, #9
    e284:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    e286:	2315      	movs	r3, #21
    e288:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    e28a:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    e28c:	f8a6 a00a 	strh.w	sl, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    e290:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    e294:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    e296:	f7fd fc95 	bl	bbc4 <ctrl_tx_enqueue>
    e29a:	f7ff b9bb 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->pause_tx = 0;
    e29e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    e2a2:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    e2a6:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    e2aa:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e2ae:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    e2b0:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    e2b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    e2b8:	d103      	bne.n	e2c2 <isr_rx_conn_pkt_ctrl+0xe62>
    e2ba:	45c6      	cmp	lr, r8
    e2bc:	d101      	bne.n	e2c2 <isr_rx_conn_pkt_ctrl+0xe62>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    e2be:	4550      	cmp	r0, sl
    e2c0:	d0d4      	beq.n	e26c <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    e2c2:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    e2c4:	f8a3 a036 	strh.w	sl, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    e2c8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    e2cc:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    e2ce:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    e2d2:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    e2d4:	f8a4 a00e 	strh.w	sl, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    e2d8:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    e2dc:	702b      	strb	r3, [r5, #0]
    e2de:	e7c5      	b.n	e26c <isr_rx_conn_pkt_ctrl+0xe0c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    e2e0:	7a41      	ldrb	r1, [r0, #9]
    e2e2:	2016      	movs	r0, #22
    e2e4:	f7fb fb7c 	bl	99e0 <pdu_len_cmp>
    e2e8:	2800      	cmp	r0, #0
    e2ea:	f000 81be 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		if (_radio.role == ROLE_MASTER) {
    e2ee:	480b      	ldr	r0, [pc, #44]	; (e31c <isr_rx_conn_pkt_ctrl+0xebc>)
    e2f0:	7cc3      	ldrb	r3, [r0, #19]
    e2f2:	2b04      	cmp	r3, #4
    e2f4:	d16b      	bne.n	e3ce <isr_rx_conn_pkt_ctrl+0xf6e>
			if ((_radio.conn_curr->llcp_phy.ack !=
    e2f6:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    e2fa:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    e2fe:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    e302:	428b      	cmp	r3, r1
    e304:	d01e      	beq.n	e344 <isr_rx_conn_pkt_ctrl+0xee4>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    e306:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    e30a:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    e30e:	3a01      	subs	r2, #1
    e310:	2a02      	cmp	r2, #2
    e312:	d817      	bhi.n	e344 <isr_rx_conn_pkt_ctrl+0xee4>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e314:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    e316:	2116      	movs	r1, #22
    e318:	f7ff bb94 	b.w	da44 <isr_rx_conn_pkt_ctrl+0x5e4>
    e31c:	200008f0 	.word	0x200008f0
    e320:	00014c55 	.word	0x00014c55
    e324:	20003aa4 	.word	0x20003aa4
    e328:	00016eae 	.word	0x00016eae
    e32c:	20000a4c 	.word	0x20000a4c
    e330:	000159c3 	.word	0x000159c3
    e334:	00015a12 	.word	0x00015a12
    e338:	00016e95 	.word	0x00016e95
    e33c:	0001778f 	.word	0x0001778f
    e340:	00017307 	.word	0x00017307
			} else if (((_radio.conn_curr->llcp_req !=
    e344:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    e348:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    e34c:	4295      	cmp	r5, r2
    e34e:	d003      	beq.n	e358 <isr_rx_conn_pkt_ctrl+0xef8>
				     _radio.conn_curr->llcp_ack) &&
    e350:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    e354:	2a03      	cmp	r2, #3
    e356:	d105      	bne.n	e364 <isr_rx_conn_pkt_ctrl+0xf04>
				     LLCP_ENCRYPTION)) ||
    e358:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    e35c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    e360:	4295      	cmp	r5, r2
    e362:	d001      	beq.n	e368 <isr_rx_conn_pkt_ctrl+0xf08>
				nack = reject_ext_ind_send(_radio.conn_curr,
    e364:	222a      	movs	r2, #42	; 0x2a
    e366:	e7d6      	b.n	e316 <isr_rx_conn_pkt_ctrl+0xeb6>
				_radio.conn_curr->llcp_phy.state =
    e368:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e36c:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    e36e:	f042 0203 	orr.w	r2, r2, #3
    e372:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    e376:	d116      	bne.n	e3a6 <isr_rx_conn_pkt_ctrl+0xf46>
					_radio.conn_curr->llcp_phy.ack--;
    e378:	3b01      	subs	r3, #1
    e37a:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    e37e:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    e382:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    e386:	f36f 0341 	bfc	r3, #1, #1
    e38a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    e38e:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e392:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    e396:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    e39a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e39e:	f362 1347 	bfi	r3, r2, #5, #3
    e3a2:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e3a6:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    e3aa:	7b62      	ldrb	r2, [r4, #13]
    e3ac:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e3b0:	400a      	ands	r2, r1
    e3b2:	f362 0384 	bfi	r3, r2, #2, #3
    e3b6:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e3ba:	7b22      	ldrb	r2, [r4, #12]
    e3bc:	b2db      	uxtb	r3, r3
    e3be:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e3c2:	f362 1347 	bfi	r3, r2, #5, #3
    e3c6:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    e3ca:	f7ff b923 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    e3ce:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e3d2:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e3d6:	f7f8 fd16 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    e3da:	4601      	mov	r1, r0
    e3dc:	2800      	cmp	r0, #0
    e3de:	f43f aa58 	beq.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    e3e2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e3e6:	2202      	movs	r2, #2
    e3e8:	f362 0301 	bfi	r3, r2, #0, #2
    e3ec:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    e3f0:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e3f4:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e3f8:	4293      	cmp	r3, r2
    e3fa:	d11a      	bne.n	e432 <isr_rx_conn_pkt_ctrl+0xfd2>
		conn->llcp_phy.ack--;
    e3fc:	3b01      	subs	r3, #1
    e3fe:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    e402:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    e406:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    e40a:	f36f 0341 	bfc	r3, #1, #1
    e40e:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    e412:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e416:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    e41a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    e41e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e422:	f362 1347 	bfi	r3, r2, #5, #3
    e426:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    e42a:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    e42e:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    e432:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    e436:	7b62      	ldrb	r2, [r4, #13]
    e438:	f3c3 0082 	ubfx	r0, r3, #2, #3
    e43c:	4002      	ands	r2, r0
    e43e:	f362 0384 	bfi	r3, r2, #2, #3
    e442:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    e446:	7b22      	ldrb	r2, [r4, #12]
    e448:	b2db      	uxtb	r3, r3
    e44a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e44e:	f362 1347 	bfi	r3, r2, #5, #3
    e452:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e456:	790b      	ldrb	r3, [r1, #4]
    e458:	f043 0303 	orr.w	r3, r3, #3
    e45c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    e45e:	2303      	movs	r3, #3
    e460:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e462:	2317      	movs	r3, #23
    e464:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    e466:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    e46a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e46e:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    e470:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    e474:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e478:	724b      	strb	r3, [r1, #9]
    e47a:	f7ff ba1c 	b.w	d8b6 <isr_rx_conn_pkt_ctrl+0x456>
		if (_radio.conn_curr->role ||
    e47e:	4e92      	ldr	r6, [pc, #584]	; (e6c8 <isr_rx_conn_pkt_ctrl+0x1268>)
    e480:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e484:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e488:	2b00      	cmp	r3, #0
    e48a:	f2c0 80ee 	blt.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    e48e:	7a41      	ldrb	r1, [r0, #9]
    e490:	2017      	movs	r0, #23
    e492:	f7fb faa5 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e496:	2800      	cmp	r0, #0
    e498:	f000 80e7 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		if ((_radio.role == ROLE_MASTER) &&
    e49c:	7cf3      	ldrb	r3, [r6, #19]
    e49e:	2b04      	cmp	r3, #4
    e4a0:	f47f a8b8 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
    e4a4:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    e4a8:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    e4ac:	429a      	cmp	r2, r3
    e4ae:	f43f a8b1 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		    (_radio.conn_curr->llcp_phy.state ==
    e4b2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    e4b6:	f003 0203 	and.w	r2, r3, #3
    e4ba:	2a02      	cmp	r2, #2
    e4bc:	f47f a8aa 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    e4c0:	f043 0303 	orr.w	r3, r3, #3
    e4c4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    e4c8:	7b62      	ldrb	r2, [r4, #13]
    e4ca:	f3c3 0182 	ubfx	r1, r3, #2, #3
    e4ce:	400a      	ands	r2, r1
    e4d0:	f362 0384 	bfi	r3, r2, #2, #3
    e4d4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    e4d8:	7b22      	ldrb	r2, [r4, #12]
    e4da:	b2db      	uxtb	r3, r3
    e4dc:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    e4e0:	f362 1347 	bfi	r3, r2, #5, #3
    e4e4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    e4e8:	f7ff b845 	b.w	d576 <isr_rx_conn_pkt_ctrl+0x116>
		if (!_radio.conn_curr->role ||
    e4ec:	4b76      	ldr	r3, [pc, #472]	; (e6c8 <isr_rx_conn_pkt_ctrl+0x1268>)
    e4ee:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    e4f2:	f996 301d 	ldrsb.w	r3, [r6, #29]
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	f280 80b7 	bge.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    e4fc:	7a41      	ldrb	r1, [r0, #9]
    e4fe:	2018      	movs	r0, #24
    e500:	f7fb fa6e 	bl	99e0 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    e504:	2800      	cmp	r0, #0
    e506:	f000 80b0 	beq.w	e66a <isr_rx_conn_pkt_ctrl+0x120a>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    e50a:	7b27      	ldrb	r7, [r4, #12]
    e50c:	7b62      	ldrb	r2, [r4, #13]
    e50e:	ea47 0002 	orr.w	r0, r7, r2
    e512:	f010 0007 	ands.w	r0, r0, #7
    e516:	d125      	bne.n	e564 <isr_rx_conn_pkt_ctrl+0x1104>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e518:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    e51c:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e520:	4293      	cmp	r3, r2
    e522:	f43f a877 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    e526:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    e52a:	f003 0303 	and.w	r3, r3, #3
    e52e:	2b02      	cmp	r3, #2
    e530:	f47f a870 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		if (!conn->llcp_phy.cmd) {
    e534:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e538:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    e53c:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    e53e:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    e542:	f57f a867 	bpl.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e546:	230c      	movs	r3, #12
		upd->status = 0;
    e548:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e54a:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    e54c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    e550:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e554:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    e556:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    e55a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e55e:	7363      	strb	r3, [r4, #13]
    e560:	f7ff ba5b 	b.w	da1a <isr_rx_conn_pkt_ctrl+0x5ba>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    e564:	89e0      	ldrh	r0, [r4, #14]
    e566:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    e568:	1ac3      	subs	r3, r0, r3
    e56a:	041b      	lsls	r3, r3, #16
    e56c:	f100 80a6 	bmi.w	e6bc <isr_rx_conn_pkt_ctrl+0x125c>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    e570:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    e574:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    e578:	428b      	cmp	r3, r1
    e57a:	d007      	beq.n	e58c <isr_rx_conn_pkt_ctrl+0x112c>
    e57c:	4b53      	ldr	r3, [pc, #332]	; (e6cc <isr_rx_conn_pkt_ctrl+0x126c>)
    e57e:	9301      	str	r3, [sp, #4]
    e580:	9300      	str	r3, [sp, #0]
    e582:	4b53      	ldr	r3, [pc, #332]	; (e6d0 <isr_rx_conn_pkt_ctrl+0x1270>)
    e584:	681c      	ldr	r4, [r3, #0]
    e586:	4b53      	ldr	r3, [pc, #332]	; (e6d4 <isr_rx_conn_pkt_ctrl+0x1274>)
    e588:	f7fe bfb2 	b.w	d4f0 <isr_rx_conn_pkt_ctrl+0x90>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e58c:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    e590:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    e594:	42a3      	cmp	r3, r4
    e596:	d014      	beq.n	e5c2 <isr_rx_conn_pkt_ctrl+0x1162>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    e598:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    e59c:	f003 0303 	and.w	r3, r3, #3
    e5a0:	2b02      	cmp	r3, #2
    e5a2:	d10e      	bne.n	e5c2 <isr_rx_conn_pkt_ctrl+0x1162>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e5a4:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e5a8:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e5ac:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    e5b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e5b4:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    e5b8:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e5ba:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    e5be:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e5c2:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    e5c6:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    e5ca:	f002 0207 	and.w	r2, r2, #7
    e5ce:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    e5d2:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    e5d6:	f36f 0300 	bfc	r3, #0, #1
    e5da:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    e5de:	2008      	movs	r0, #8
	conn->llcp_ack--;
    e5e0:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    e5e2:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    e5e6:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    e5ea:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	f43f a810 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    e5f4:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e5f8:	f362 0302 	bfi	r3, r2, #0, #3
    e5fc:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    e600:	f7ff b808 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		if (_radio.conn_curr->role ||
    e604:	4e30      	ldr	r6, [pc, #192]	; (e6c8 <isr_rx_conn_pkt_ctrl+0x1268>)
    e606:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
    e60a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e60e:	2b00      	cmp	r3, #0
    e610:	db2b      	blt.n	e66a <isr_rx_conn_pkt_ctrl+0x120a>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e612:	7a41      	ldrb	r1, [r0, #9]
    e614:	2019      	movs	r0, #25
    e616:	f7fb f9e3 	bl	99e0 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e61a:	b330      	cbz	r0, e66a <isr_rx_conn_pkt_ctrl+0x120a>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e61c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e620:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e624:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e628:	7b22      	ldrb	r2, [r4, #12]
    e62a:	f003 0307 	and.w	r3, r3, #7
    e62e:	4213      	tst	r3, r2
    e630:	f43e aff0 	beq.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			if (conn->llcp_req != conn->llcp_ack) {
    e634:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e638:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e63c:	429a      	cmp	r2, r3
    e63e:	f47e afe9 	bne.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
			memcpy(&conn->llcp.chan_map.chm[0],
    e642:	2205      	movs	r2, #5
    e644:	f506 718d 	add.w	r1, r6, #282	; 0x11a
    e648:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e64c:	f7f3 fae8 	bl	1c20 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e650:	2301      	movs	r3, #1
    e652:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e656:	2302      	movs	r3, #2
    e658:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e65c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e660:	3b01      	subs	r3, #1
    e662:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e666:	f7fe bfd5 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
		nack = unknown_rsp_send(_radio.conn_curr,
    e66a:	4817      	ldr	r0, [pc, #92]	; (e6c8 <isr_rx_conn_pkt_ctrl+0x1268>)
    e66c:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e670:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
    e674:	f7f8 fbc7 	bl	6e06 <mem_acquire>
	if (!node_tx) {
    e678:	4601      	mov	r1, r0
    e67a:	2800      	cmp	r0, #0
    e67c:	f43f a909 	beq.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e680:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e682:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e684:	f043 0303 	orr.w	r3, r3, #3
    e688:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e68a:	2302      	movs	r3, #2
    e68c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e68e:	2307      	movs	r3, #7
    e690:	71c3      	strb	r3, [r0, #7]
    e692:	f7ff b93a 	b.w	d90a <isr_rx_conn_pkt_ctrl+0x4aa>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e696:	2328      	movs	r3, #40	; 0x28
    e698:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e69c:	f7fe bfba 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
	if (node_tx) {
    e6a0:	2e00      	cmp	r6, #0
    e6a2:	f43f a8f6 	beq.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e6a6:	490c      	ldr	r1, [pc, #48]	; (e6d8 <isr_rx_conn_pkt_ctrl+0x1278>)
    e6a8:	4630      	mov	r0, r6
    e6aa:	f7f8 fbc6 	bl	6e3a <mem_release>
    e6ae:	f7ff b8f0 	b.w	d892 <isr_rx_conn_pkt_ctrl+0x432>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    e6b2:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    e6b4:	4682      	mov	sl, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    e6b6:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    e6b8:	4693      	mov	fp, r2
    e6ba:	e5d7      	b.n	e26c <isr_rx_conn_pkt_ctrl+0xe0c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e6bc:	2328      	movs	r3, #40	; 0x28
    e6be:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e6c2:	f7fe bfa7 	b.w	d614 <isr_rx_conn_pkt_ctrl+0x1b4>
    e6c6:	bf00      	nop
    e6c8:	200008f0 	.word	0x200008f0
    e6cc:	00014c55 	.word	0x00014c55
    e6d0:	20003aa4 	.word	0x20003aa4
    e6d4:	00017218 	.word	0x00017218
    e6d8:	20000a4c 	.word	0x20000a4c
    e6dc:	00000000 	.word	0x00000000

0000e6e0 <isr>:
{
    e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6e4:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e6e6:	f003 ff3f 	bl	12568 <radio_is_done>
    e6ea:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e6ec:	b366      	cbz	r6, e748 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    e6ee:	f003 ff5b 	bl	125a8 <radio_crc_is_valid>
    e6f2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e6f4:	f003 ffdc 	bl	126b0 <radio_filter_has_match>
    e6f8:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
    e6fc:	f003 ffe2 	bl	126c4 <radio_filter_match_get>
    e700:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_ok = radio_ar_has_match();
    e704:	f004 f9c6 	bl	12a94 <radio_ar_has_match>
    e708:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e70c:	f004 f9b0 	bl	12a70 <radio_ar_match_get>
    e710:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e714:	f003 ff96 	bl	12644 <radio_rssi_is_ready>
    e718:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e71a:	4cb7      	ldr	r4, [pc, #732]	; (e9f8 <isr+0x318>)
	radio_status_reset();
    e71c:	f003 ff0e 	bl	1253c <radio_status_reset>
	radio_tmr_status_reset();
    e720:	f003 ffe2 	bl	126e8 <radio_tmr_status_reset>
	radio_filter_status_reset();
    e724:	f003 ffbc 	bl	126a0 <radio_filter_status_reset>
	radio_ar_status_reset();
    e728:	f004 f9a8 	bl	12a7c <radio_ar_status_reset>
	radio_rssi_status_reset();
    e72c:	f003 ff82 	bl	12634 <radio_rssi_status_reset>
	switch (_radio.state) {
    e730:	7d23      	ldrb	r3, [r4, #20]
    e732:	2b05      	cmp	r3, #5
    e734:	f201 84aa 	bhi.w	1008c <__kernel_ram_size+0x8c>
    e738:	e8df f013 	tbh	[pc, r3, lsl #1]
    e73c:	00d1007e 	.word	0x00d1007e
    e740:	0a44000e 	.word	0x0a44000e
    e744:	0a440a44 	.word	0x0a440a44
		devmatch_id = irkmatch_id = 0xFF;
    e748:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e74c:	4635      	mov	r5, r6
    e74e:	46b2      	mov	sl, r6
    e750:	46b1      	mov	r9, r6
    e752:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e754:	46d8      	mov	r8, fp
    e756:	e7e0      	b.n	e71a <isr+0x3a>
	_radio.state = STATE_RX;
    e758:	2301      	movs	r3, #1
    e75a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    e75c:	f004 f8c6 	bl	128ec <radio_tmr_tifs_base_get>
    e760:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e762:	2096      	movs	r0, #150	; 0x96
    e764:	f003 ffce 	bl	12704 <radio_tmr_tifs_set>
	switch (_radio.role) {
    e768:	7ce3      	ldrb	r3, [r4, #19]
    e76a:	3b01      	subs	r3, #1
    e76c:	2b03      	cmp	r3, #3
    e76e:	f200 80ac 	bhi.w	e8ca <isr+0x1ea>
    e772:	e8df f003 	tbb	[pc, r3]
    e776:	3402      	.short	0x3402
    e778:	6464      	.short	0x6464
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e77a:	2300      	movs	r3, #0
    e77c:	461a      	mov	r2, r3
    e77e:	4619      	mov	r1, r3
    e780:	4618      	mov	r0, r3
    e782:	f003 ff2f 	bl	125e4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e786:	f003 ff1d 	bl	125c4 <radio_pkt_scratch_get>
    e78a:	f003 fe9f 	bl	124cc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e78e:	f003 fee1 	bl	12554 <radio_is_ready>
    e792:	b148      	cbz	r0, e7a8 <isr+0xc8>
		LL_ASSERT(!radio_is_ready());
    e794:	4b99      	ldr	r3, [pc, #612]	; (e9fc <isr+0x31c>)
    e796:	9301      	str	r3, [sp, #4]
    e798:	9300      	str	r3, [sp, #0]
    e79a:	4b99      	ldr	r3, [pc, #612]	; (ea00 <isr+0x320>)
    e79c:	681c      	ldr	r4, [r3, #0]
    e79e:	4b99      	ldr	r3, [pc, #612]	; (ea04 <isr+0x324>)
	LL_ASSERT(!radio_is_ready());
    e7a0:	4a99      	ldr	r2, [pc, #612]	; (ea08 <isr+0x328>)
    e7a2:	499a      	ldr	r1, [pc, #616]	; (ea0c <isr+0x32c>)
    e7a4:	489a      	ldr	r0, [pc, #616]	; (ea10 <isr+0x330>)
    e7a6:	e357      	b.n	ee58 <isr+0x778>
		if (ctrl_rl_enabled()) {
    e7a8:	f003 f9cc 	bl	11b44 <ctrl_rl_enabled>
    e7ac:	b138      	cbz	r0, e7be <isr+0xde>
			u8_t count, *irks = ctrl_irks_get(&count);
    e7ae:	a810      	add	r0, sp, #64	; 0x40
    e7b0:	f002 ff00 	bl	115b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e7b4:	4601      	mov	r1, r0
    e7b6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e7ba:	f004 f927 	bl	12a0c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e7be:	2100      	movs	r1, #0
    e7c0:	4608      	mov	r0, r1
    e7c2:	f003 fe98 	bl	124f6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e7c6:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e7c8:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e7ca:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e7cc:	4608      	mov	r0, r1
    e7ce:	f003 fe8e 	bl	124ee <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e7d2:	1a28      	subs	r0, r5, r0
    e7d4:	f004 f820 	bl	12818 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e7d8:	f004 f870 	bl	128bc <radio_tmr_end_capture>
    e7dc:	e02c      	b.n	e838 <isr+0x158>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e7de:	2300      	movs	r3, #0
    e7e0:	461a      	mov	r2, r3
    e7e2:	4619      	mov	r1, r3
    e7e4:	4618      	mov	r0, r3
    e7e6:	f003 fefd 	bl	125e4 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e7ea:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e7ee:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    e7f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e7f6:	3008      	adds	r0, #8
    e7f8:	f003 fe68 	bl	124cc <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e7fc:	f003 feaa 	bl	12554 <radio_is_ready>
    e800:	2800      	cmp	r0, #0
    e802:	d1c7      	bne.n	e794 <isr+0xb4>
		if (ctrl_rl_enabled()) {
    e804:	f003 f99e 	bl	11b44 <ctrl_rl_enabled>
    e808:	b138      	cbz	r0, e81a <isr+0x13a>
			u8_t count, *irks = ctrl_irks_get(&count);
    e80a:	a810      	add	r0, sp, #64	; 0x40
    e80c:	f002 fed2 	bl	115b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e810:	4601      	mov	r1, r0
    e812:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e816:	f004 f8f9 	bl	12a0c <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e81a:	2100      	movs	r1, #0
    e81c:	4608      	mov	r0, r1
    e81e:	f003 fe6a 	bl	124f6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e822:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    e824:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e826:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e828:	4608      	mov	r0, r1
    e82a:	f003 fe60 	bl	124ee <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e82e:	1a28      	subs	r0, r5, r0
    e830:	f003 fff2 	bl	12818 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e834:	f003 feee 	bl	12614 <radio_rssi_measure>
}
    e838:	b013      	add	sp, #76	; 0x4c
    e83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e83e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
					     _radio.conn_curr->phy_flags);
    e842:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e846:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e84a:	2100      	movs	r1, #0
    e84c:	09d3      	lsrs	r3, r2, #7
    e84e:	f000 0007 	and.w	r0, r0, #7
    e852:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e856:	f003 fec5 	bl	125e4 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e85a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e85e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		rx_packet_set(_radio.conn_curr,	(void *)
    e862:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e86a:	3108      	adds	r1, #8
    e86c:	f7fb fc9e 	bl	a1ac <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e870:	f003 fe70 	bl	12554 <radio_is_ready>
    e874:	2800      	cmp	r0, #0
    e876:	d18d      	bne.n	e794 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e878:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    e87c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e880:	2101      	movs	r1, #1
    e882:	f000 0007 	and.w	r0, r0, #7
    e886:	f003 fe36 	bl	124f6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e88a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    e88e:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e892:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    e896:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    e898:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e89a:	4405      	add	r5, r0
	switch (phy) {
    e89c:	d013      	beq.n	e8c6 <isr+0x1e6>
		return 40;
    e89e:	2b04      	cmp	r3, #4
    e8a0:	bf0c      	ite	eq
    e8a2:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e8a6:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e8a8:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e8aa:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e8ae:	09c1      	lsrs	r1, r0, #7
    e8b0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e8b4:	f003 fe1b 	bl	124ee <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e8b8:	1a28      	subs	r0, r5, r0
    e8ba:	f003 ffad 	bl	12818 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e8be:	2001      	movs	r0, #1
    e8c0:	f7fc faf6 	bl	aeb0 <packet_tx_enqueue>
    e8c4:	e7b8      	b.n	e838 <isr+0x158>
		return 24;
    e8c6:	2018      	movs	r0, #24
    e8c8:	e7ee      	b.n	e8a8 <isr+0x1c8>
		LL_ASSERT(0);
    e8ca:	4b4c      	ldr	r3, [pc, #304]	; (e9fc <isr+0x31c>)
    e8cc:	9301      	str	r3, [sp, #4]
    e8ce:	9300      	str	r3, [sp, #0]
    e8d0:	4b4b      	ldr	r3, [pc, #300]	; (ea00 <isr+0x320>)
    e8d2:	681c      	ldr	r4, [r3, #0]
    e8d4:	4b4b      	ldr	r3, [pc, #300]	; (ea04 <isr+0x324>)
		LL_ASSERT(0);
    e8d6:	4a4c      	ldr	r2, [pc, #304]	; (ea08 <isr+0x328>)
    e8d8:	494c      	ldr	r1, [pc, #304]	; (ea0c <isr+0x32c>)
    e8da:	484e      	ldr	r0, [pc, #312]	; (ea14 <isr+0x334>)
    e8dc:	e2bc      	b.n	ee58 <isr+0x778>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e8de:	b926      	cbnz	r6, e8ea <isr+0x20a>
		_radio.state = STATE_CLOSE;
    e8e0:	2303      	movs	r3, #3
    e8e2:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e8e4:	f003 fe18 	bl	12518 <radio_disable>
    e8e8:	e7a6      	b.n	e838 <isr+0x158>
	switch (_radio.role) {
    e8ea:	7ce3      	ldrb	r3, [r4, #19]
    e8ec:	3b01      	subs	r3, #1
    e8ee:	2b03      	cmp	r3, #3
    e8f0:	f201 8160 	bhi.w	fbb4 <isr+0x14d4>
    e8f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    e8f8:	02b70004 	.word	0x02b70004
    e8fc:	05f905f9 	.word	0x05f905f9
		if (crc_ok) {
    e900:	2f00      	cmp	r7, #0
    e902:	d0ed      	beq.n	e8e0 <isr+0x200>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e904:	f1ba 0f00 	cmp.w	sl, #0
    e908:	d039      	beq.n	e97e <isr+0x29e>
    e90a:	4658      	mov	r0, fp
    e90c:	f002 feb8 	bl	11680 <ctrl_rl_irk_idx>
    e910:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e914:	f003 fe56 	bl	125c4 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e918:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
	pdu_adv = (void *)radio_pkt_scratch_get();
    e91c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e91e:	232b      	movs	r3, #43	; 0x2b
    e920:	2127      	movs	r1, #39	; 0x27
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e922:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e924:	fb11 3302 	smlabb	r3, r1, r2, r3
    e928:	930a      	str	r3, [sp, #40]	; 0x28
    e92a:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e92c:	f000 030f 	and.w	r3, r0, #15
    e930:	2b03      	cmp	r3, #3
    e932:	d10a      	bne.n	e94a <isr+0x26a>
    e934:	7873      	ldrb	r3, [r6, #1]
    e936:	2b0c      	cmp	r3, #12
    e938:	d107      	bne.n	e94a <isr+0x26a>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e93a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e93e:	065f      	lsls	r7, r3, #25
    e940:	d51f      	bpl.n	e982 <isr+0x2a2>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e942:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    e946:	0658      	lsls	r0, r3, #25
    e948:	d44b      	bmi.n	e9e2 <isr+0x302>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e94a:	7830      	ldrb	r0, [r6, #0]
    e94c:	f000 030f 	and.w	r3, r0, #15
    e950:	2b05      	cmp	r3, #5
    e952:	d1c5      	bne.n	e8e0 <isr+0x200>
    e954:	7873      	ldrb	r3, [r6, #1]
    e956:	2b22      	cmp	r3, #34	; 0x22
    e958:	d1c2      	bne.n	e8e0 <isr+0x200>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e95c:	5ce3      	ldrb	r3, [r4, r3]
    e95e:	f003 030f 	and.w	r3, r3, #15
    e962:	2b01      	cmp	r3, #1
    e964:	f040 8155 	bne.w	ec12 <isr+0x532>
					    ci->connect_ind.init_addr,
    e968:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e96a:	aa10      	add	r2, sp, #64	; 0x40
    e96c:	4639      	mov	r1, r7
    e96e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e972:	f003 f88b 	bl	11a8c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e976:	2800      	cmp	r0, #0
    e978:	d150      	bne.n	ea1c <isr+0x33c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e97a:	2000      	movs	r0, #0
    e97c:	e05e      	b.n	ea3c <isr+0x35c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e97e:	20ff      	movs	r0, #255	; 0xff
    e980:	e7c6      	b.n	e910 <isr+0x230>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e982:	aa10      	add	r2, sp, #64	; 0x40
    e984:	1cb1      	adds	r1, r6, #2
    e986:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e98a:	f003 f87f 	bl	11a8c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e98e:	2800      	cmp	r0, #0
    e990:	d0d7      	beq.n	e942 <isr+0x262>
	return (adv->tx_addr == sr->rx_addr) &&
    e992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e994:	7832      	ldrb	r2, [r6, #0]
    e996:	5ce3      	ldrb	r3, [r4, r3]
    e998:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e99c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e9a0:	d1d3      	bne.n	e94a <isr+0x26a>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e9a2:	2206      	movs	r2, #6
    e9a4:	f106 0108 	add.w	r1, r6, #8
    e9a8:	1ca8      	adds	r0, r5, #2
    e9aa:	f7f3 f924 	bl	1bf6 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d1cb      	bne.n	e94a <isr+0x26a>
		_radio.state = STATE_CLOSE;
    e9b2:	2303      	movs	r3, #3
    e9b4:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e9b6:	f003 fe1f 	bl	125f8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e9ba:	f894 00c9 	ldrb.w	r0, [r4, #201]	; 0xc9
    e9be:	2327      	movs	r3, #39	; 0x27
    e9c0:	fb03 4000 	mla	r0, r3, r0, r4
    e9c4:	307b      	adds	r0, #123	; 0x7b
    e9c6:	f003 fd87 	bl	124d8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e9ca:	f003 fdc3 	bl	12554 <radio_is_ready>
    e9ce:	2800      	cmp	r0, #0
    e9d0:	f43f af32 	beq.w	e838 <isr+0x158>
    e9d4:	4b09      	ldr	r3, [pc, #36]	; (e9fc <isr+0x31c>)
    e9d6:	9301      	str	r3, [sp, #4]
    e9d8:	9300      	str	r3, [sp, #0]
    e9da:	4b09      	ldr	r3, [pc, #36]	; (ea00 <isr+0x320>)
    e9dc:	681c      	ldr	r4, [r3, #0]
    e9de:	4b0e      	ldr	r3, [pc, #56]	; (ea18 <isr+0x338>)
    e9e0:	e6de      	b.n	e7a0 <isr+0xc0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e9e2:	f1b9 0f00 	cmp.w	r9, #0
    e9e6:	d1d4      	bne.n	e992 <isr+0x2b2>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e9e8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e9ec:	f002 fe94 	bl	11718 <ctrl_irk_whitelisted>
    e9f0:	2800      	cmp	r0, #0
    e9f2:	d1ce      	bne.n	e992 <isr+0x2b2>
    e9f4:	e7a9      	b.n	e94a <isr+0x26a>
    e9f6:	bf00      	nop
    e9f8:	200008f0 	.word	0x200008f0
    e9fc:	00014c55 	.word	0x00014c55
    ea00:	20003aa4 	.word	0x20003aa4
    ea04:	00016e22 	.word	0x00016e22
    ea08:	000159c3 	.word	0x000159c3
    ea0c:	00015a12 	.word	0x00015a12
    ea10:	000174e8 	.word	0x000174e8
    ea14:	00015962 	.word	0x00015962
    ea18:	00016e35 	.word	0x00016e35
		       isr_adv_ci_adva_check(adv, ci) &&
    ea1c:	4631      	mov	r1, r6
    ea1e:	4628      	mov	r0, r5
    ea20:	f7fb feb4 	bl	a78c <isr_adv_ci_adva_check>
					    rl_idx) &&
    ea24:	2800      	cmp	r0, #0
    ea26:	d0a8      	beq.n	e97a <isr+0x29a>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    ea28:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    ea2c:	2bff      	cmp	r3, #255	; 0xff
    ea2e:	f000 80dd 	beq.w	ebec <isr+0x50c>
		return rl_idx == _radio.advertiser.rl_idx;
    ea32:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    ea36:	1ac1      	subs	r1, r0, r3
    ea38:	4248      	negs	r0, r1
    ea3a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ea3c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    ea40:	2800      	cmp	r0, #0
    ea42:	f43f af4d 	beq.w	e8e0 <isr+0x200>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    ea46:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ea4a:	b133      	cbz	r3, ea5a <isr+0x37a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    ea4c:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    ea50:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ea54:	429a      	cmp	r2, r3
    ea56:	f47f af43 	bne.w	e8e0 <isr+0x200>
    ea5a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    ea5e:	2b00      	cmp	r3, #0
    ea60:	f43f af3e 	beq.w	e8e0 <isr+0x200>
			node_rx = packet_rx_reserve_get(4);
    ea64:	2004      	movs	r0, #4
    ea66:	f7fb f819 	bl	9a9c <packet_rx_reserve_get>
		if (!node_rx) {
    ea6a:	4607      	mov	r7, r0
    ea6c:	2800      	cmp	r0, #0
    ea6e:	f43f af37 	beq.w	e8e0 <isr+0x200>
		_radio.state = STATE_STOP;
    ea72:	f04f 0904 	mov.w	r9, #4
    ea76:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    ea7a:	f003 fd4d 	bl	12518 <radio_disable>
		conn = _radio.advertiser.conn;
    ea7e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ea82:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    ea86:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ea88:	f44f 72aa 	mov.w	r2, #340	; 0x154
    ea8c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    ea8e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ea92:	f7f8 f9f0 	bl	6e76 <mem_index_get>
		memcpy(&conn->access_addr[0],
    ea96:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ea9a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    ea9c:	2203      	movs	r2, #3
    ea9e:	f106 0112 	add.w	r1, r6, #18
    eaa2:	f105 0014 	add.w	r0, r5, #20
    eaa6:	f7f3 f8bb 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    eaaa:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    eaae:	464a      	mov	r2, r9
    eab0:	f106 010e 	add.w	r1, r6, #14
    eab4:	4650      	mov	r0, sl
    eab6:	f7f3 f8b3 	bl	1c20 <memcpy>
		memcpy(&conn->data_chan_map[0],
    eaba:	2205      	movs	r2, #5
    eabc:	f106 011e 	add.w	r1, r6, #30
    eac0:	4640      	mov	r0, r8
    eac2:	f7f3 f8ad 	bl	1c20 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    eac6:	2105      	movs	r1, #5
    eac8:	4640      	mov	r0, r8
    eaca:	f7f8 fb47 	bl	715c <util_ones_count_get>
		conn->data_chan_count =
    eace:	7f6b      	ldrb	r3, [r5, #29]
    ead0:	f360 0305 	bfi	r3, r0, #0, #6
    ead4:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    ead6:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    eada:	f3c3 0304 	ubfx	r3, r3, #0, #5
    eade:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    eae0:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    eae2:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    eae4:	f240 48e2 	movw	r8, #1250	; 0x4e2
    eae8:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    eaec:	7ef2      	ldrb	r2, [r6, #27]
    eaee:	7eb3      	ldrb	r3, [r6, #26]
    eaf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    eaf4:	4651      	mov	r1, sl
    eaf6:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    eaf8:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    eafa:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    eafe:	f7f3 f88f 	bl	1c20 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eb02:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb04:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    eb06:	f242 7210 	movw	r2, #10000	; 0x2710
    eb0a:	fb02 8303 	mla	r3, r2, r3, r8
    eb0e:	3b01      	subs	r3, #1
    eb10:	fbb3 f3f8 	udiv	r3, r3, r8
    eb14:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    eb16:	4b55      	ldr	r3, [pc, #340]	; (ec6c <isr+0x58c>)
    eb18:	4443      	add	r3, r8
    eb1a:	fbb3 f3f8 	udiv	r3, r3, r8
    eb1e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb22:	4b53      	ldr	r3, [pc, #332]	; (ec70 <isr+0x590>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb24:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb26:	4443      	add	r3, r8
    eb28:	fbb3 f3f8 	udiv	r3, r3, r8
    eb2c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb2e:	4282      	cmp	r2, r0
    eb30:	4613      	mov	r3, r2
    eb32:	bfc4      	itt	gt
    eb34:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    eb38:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    eb3a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb3e:	bfc4      	itt	gt
    eb40:	18d2      	addgt	r2, r2, r3
    eb42:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    eb44:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    eb46:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb4a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    eb4c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    eb4e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    eb50:	2300      	movs	r3, #0
    eb52:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    eb54:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb56:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    eb5a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb5c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    eb60:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    eb64:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb66:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eb6a:	464a      	mov	r2, r9
    eb6c:	f107 001b 	add.w	r0, r7, #27
    eb70:	f7f3 f856 	bl	1c20 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    eb74:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    eb78:	f107 030e 	add.w	r3, r7, #14
    eb7c:	28ff      	cmp	r0, #255	; 0xff
    eb7e:	930b      	str	r3, [sp, #44]	; 0x2c
    eb80:	f106 0a02 	add.w	sl, r6, #2
    eb84:	f107 0b14 	add.w	fp, r7, #20
    eb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eb8a:	d061      	beq.n	ec50 <isr+0x570>
			ll_rl_id_addr_get(rl_idx,
    eb8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eb8e:	f107 010d 	add.w	r1, r7, #13
    eb92:	f002 ff37 	bl	11a04 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    eb96:	7b7b      	ldrb	r3, [r7, #13]
    eb98:	3302      	adds	r3, #2
    eb9a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eb9c:	464a      	mov	r2, r9
    eb9e:	4651      	mov	r1, sl
    eba0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eba2:	f7f3 f83d 	bl	1c20 <memcpy>
			pdu_adv->connect_ind.interval;
    eba6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    eba8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    ebac:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    ebae:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    ebb2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    ebb4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    ebb8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    ebbc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ebc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ebc4:	8c28      	ldrh	r0, [r5, #32]
    ebc6:	f7fb feff 	bl	a9c8 <rx_fc_lock>
		packet_rx_enqueue();
    ebca:	f7fb fe03 	bl	a7d4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ebce:	2003      	movs	r0, #3
    ebd0:	f7fa ff64 	bl	9a9c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ebd4:	2800      	cmp	r0, #0
    ebd6:	d159      	bne.n	ec8c <isr+0x5ac>
    ebd8:	4b26      	ldr	r3, [pc, #152]	; (ec74 <isr+0x594>)
    ebda:	9301      	str	r3, [sp, #4]
    ebdc:	9300      	str	r3, [sp, #0]
    ebde:	4b26      	ldr	r3, [pc, #152]	; (ec78 <isr+0x598>)
    ebe0:	681c      	ldr	r4, [r3, #0]
    ebe2:	4b26      	ldr	r3, [pc, #152]	; (ec7c <isr+0x59c>)
			LL_ASSERT(node_rx);
    ebe4:	4a26      	ldr	r2, [pc, #152]	; (ec80 <isr+0x5a0>)
    ebe6:	4927      	ldr	r1, [pc, #156]	; (ec84 <isr+0x5a4>)
    ebe8:	4827      	ldr	r0, [pc, #156]	; (ec88 <isr+0x5a8>)
    ebea:	e135      	b.n	ee58 <isr+0x778>
	return (adv->rx_addr == ci->tx_addr) &&
    ebec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ebee:	5ce2      	ldrb	r2, [r4, r3]
    ebf0:	7833      	ldrb	r3, [r6, #0]
    ebf2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ebf6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ebfa:	f47f aebe 	bne.w	e97a <isr+0x29a>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    ebfe:	2206      	movs	r2, #6
    ec00:	4639      	mov	r1, r7
    ec02:	f105 0008 	add.w	r0, r5, #8
    ec06:	f7f2 fff6 	bl	1bf6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    ec0a:	fab0 f080 	clz	r0, r0
    ec0e:	0940      	lsrs	r0, r0, #5
    ec10:	e714      	b.n	ea3c <isr+0x35c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ec12:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ec16:	09db      	lsrs	r3, r3, #7
    ec18:	d00d      	beq.n	ec36 <isr+0x556>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    ec1a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
				      rl_idx)) ||
    ec1e:	09db      	lsrs	r3, r3, #7
    ec20:	f43f aeab 	beq.w	e97a <isr+0x29a>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    ec24:	f1b9 0f00 	cmp.w	r9, #0
    ec28:	d10d      	bne.n	ec46 <isr+0x566>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    ec2a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    ec2e:	f002 fd73 	bl	11718 <ctrl_irk_whitelisted>
    ec32:	b940      	cbnz	r0, ec46 <isr+0x566>
    ec34:	e6a1      	b.n	e97a <isr+0x29a>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    ec36:	aa10      	add	r2, sp, #64	; 0x40
    ec38:	1cb1      	adds	r1, r6, #2
    ec3a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ec3e:	f002 ff25 	bl	11a8c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    ec42:	2800      	cmp	r0, #0
    ec44:	d0e9      	beq.n	ec1a <isr+0x53a>
	       isr_adv_ci_adva_check(adv, ci);
    ec46:	4631      	mov	r1, r6
    ec48:	4628      	mov	r0, r5
    ec4a:	f7fb fd9f 	bl	a78c <isr_adv_ci_adva_check>
    ec4e:	e6f5      	b.n	ea3c <isr+0x35c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    ec50:	4619      	mov	r1, r3
    ec52:	464a      	mov	r2, r9
    ec54:	4658      	mov	r0, fp
    ec56:	f7f3 f80f 	bl	1c78 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ec5a:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ec5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ec5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ec62:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ec64:	464a      	mov	r2, r9
    ec66:	4651      	mov	r1, sl
    ec68:	e79b      	b.n	eba2 <isr+0x4c2>
    ec6a:	bf00      	nop
    ec6c:	026259ff 	.word	0x026259ff
    ec70:	01c9c37f 	.word	0x01c9c37f
    ec74:	00014c55 	.word	0x00014c55
    ec78:	20003aa4 	.word	0x20003aa4
    ec7c:	00016e35 	.word	0x00016e35
    ec80:	000159c3 	.word	0x000159c3
    ec84:	00015a12 	.word	0x00015a12
    ec88:	0001791f 	.word	0x0001791f
			node_rx->hdr.handle = conn->handle;
    ec8c:	8c2b      	ldrh	r3, [r5, #32]
    ec8e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ec90:	230b      	movs	r3, #11
    ec92:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    ec94:	7833      	ldrb	r3, [r6, #0]
    ec96:	f013 0320 	ands.w	r3, r3, #32
    ec9a:	d00e      	beq.n	ecba <isr+0x5da>
					((u16_t)conn->access_addr[1] << 8) |
    ec9c:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    ec9e:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    eca0:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    eca2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    eca6:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    eca8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ecac:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ecae:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ecb0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ecb4:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    ecb6:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ecb8:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ecba:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ecbc:	f7fb fd8a 	bl	a7d4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ecc0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    ecc4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ecc8:	497f      	ldr	r1, [pc, #508]	; (eec8 <isr+0x7e8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    ecca:	0952      	lsrs	r2, r2, #5
    eccc:	f362 0384 	bfi	r3, r2, #2, #3
    ecd0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    ecd4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    ecd8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    ecdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    ece0:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    ece2:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    ece6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    ecea:	4a78      	ldr	r2, [pc, #480]	; (eecc <isr+0x7ec>)
    ecec:	f203 233f 	addw	r3, r3, #575	; 0x23f
    ecf0:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    ecf4:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    ecf6:	ea4f 0358 	mov.w	r3, r8, lsr #1
    ecfa:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    ecfc:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    ecfe:	7d73      	ldrb	r3, [r6, #21]
    ed00:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    ed04:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    ed06:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    ed0a:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed0c:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    ed0e:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed10:	4638      	mov	r0, r7
    ed12:	f003 fbee 	bl	124f2 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed16:	496e      	ldr	r1, [pc, #440]	; (eed0 <isr+0x7f0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    ed18:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed1a:	f200 4052 	addw	r0, r0, #1106	; 0x452
    ed1e:	a368      	add	r3, pc, #416	; (adr r3, eec0 <isr+0x7e0>)
    ed20:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed24:	fba0 0101 	umull	r0, r1, r0, r1
    ed28:	f7f1 fa74 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ed2c:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    ed30:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    ed32:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ed34:	4293      	cmp	r3, r2
    ed36:	bf38      	it	cc
    ed38:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    ed3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    ed3e:	469a      	mov	sl, r3
		conn_interval_us -=
    ed40:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    ed42:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    ed44:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    ed46:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    ed48:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    ed4c:	f003 fdc8 	bl	128e0 <radio_tmr_end_get>
    ed50:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    ed52:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ed54:	4639      	mov	r1, r7
		conn_offset_us +=
    ed56:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ed5a:	4638      	mov	r0, r7
    ed5c:	f003 fbc7 	bl	124ee <radio_tx_chain_delay_get>
    ed60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ed62:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    ed66:	4499      	add	r9, r3
    ed68:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    ed6c:	eba9 030b 	sub.w	r3, r9, fp
    ed70:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed72:	f240 4383 	movw	r3, #1155	; 0x483
    ed76:	9300      	str	r3, [sp, #0]
    ed78:	2205      	movs	r2, #5
    ed7a:	4b56      	ldr	r3, [pc, #344]	; (eed4 <isr+0x7f4>)
    ed7c:	f8df b150 	ldr.w	fp, [pc, #336]	; eed0 <isr+0x7f0>
    ed80:	4639      	mov	r1, r7
    ed82:	4638      	mov	r0, r7
    ed84:	f7f8 ff68 	bl	7c58 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    ed88:	f240 4184 	movw	r1, #1156	; 0x484
    ed8c:	f7fb fe56 	bl	aa3c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ed90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed92:	5ce3      	ldrb	r3, [r4, r3]
    ed94:	f003 030f 	and.w	r3, r3, #15
    ed98:	2b01      	cmp	r3, #1
    ed9a:	d106      	bne.n	edaa <isr+0x6ca>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ed9c:	9700      	str	r7, [sp, #0]
    ed9e:	463b      	mov	r3, r7
    eda0:	2203      	movs	r2, #3
    eda2:	4639      	mov	r1, r7
    eda4:	4638      	mov	r0, r7
    eda6:	f7f8 ff57 	bl	7c58 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    edaa:	fba8 890b 	umull	r8, r9, r8, fp
    edae:	a344      	add	r3, pc, #272	; (adr r3, eec0 <isr+0x7e0>)
    edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    edb4:	4640      	mov	r0, r8
    edb6:	4649      	mov	r1, r9
    edb8:	f7f1 fa2c 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    edbc:	f895 3020 	ldrb.w	r3, [r5, #32]
    edc0:	68a4      	ldr	r4, [r4, #8]
    edc2:	9506      	str	r5, [sp, #24]
    edc4:	3307      	adds	r3, #7
    edc6:	b2db      	uxtb	r3, r3
    edc8:	930a      	str	r3, [sp, #40]	; 0x28
    edca:	f240 439b 	movw	r3, #1179	; 0x49b
    edce:	9308      	str	r3, [sp, #32]
    edd0:	4b41      	ldr	r3, [pc, #260]	; (eed8 <isr+0x7f8>)
    edd2:	9307      	str	r3, [sp, #28]
    edd4:	4b41      	ldr	r3, [pc, #260]	; (eedc <isr+0x7fc>)
    edd6:	9305      	str	r3, [sp, #20]
    edd8:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    edda:	4a41      	ldr	r2, [pc, #260]	; (eee0 <isr+0x800>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eddc:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    edde:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ede0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ede2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ede6:	2307      	movs	r3, #7
    ede8:	2100      	movs	r1, #0
    edea:	4343      	muls	r3, r0
    edec:	fb02 3301 	mla	r3, r2, r1, r3
    edf0:	fba0 1202 	umull	r1, r2, r0, r2
    edf4:	441a      	add	r2, r3
    edf6:	4608      	mov	r0, r1
    edf8:	ebb8 0000 	subs.w	r0, r8, r0
    edfc:	4611      	mov	r1, r2
    edfe:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee02:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee08:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee0a:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    ee0c:	f7f1 fa02 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee10:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee12:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee14:	a32a      	add	r3, pc, #168	; (adr r3, eec0 <isr+0x7e0>)
    ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee1a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee1e:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee22:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    ee24:	f7f1 f9f6 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee28:	eba4 040a 	sub.w	r4, r4, sl
    ee2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ee30:	9000      	str	r0, [sp, #0]
    ee32:	4623      	mov	r3, r4
    ee34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ee36:	4629      	mov	r1, r5
    ee38:	4628      	mov	r0, r5
    ee3a:	f7f8 fe6f 	bl	7b1c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ee3e:	f030 0302 	bics.w	r3, r0, #2
    ee42:	f43f acf9 	beq.w	e838 <isr+0x158>
    ee46:	4b27      	ldr	r3, [pc, #156]	; (eee4 <isr+0x804>)
    ee48:	9301      	str	r3, [sp, #4]
    ee4a:	9300      	str	r3, [sp, #0]
    ee4c:	4b26      	ldr	r3, [pc, #152]	; (eee8 <isr+0x808>)
    ee4e:	681c      	ldr	r4, [r3, #0]
    ee50:	4b26      	ldr	r3, [pc, #152]	; (eeec <isr+0x80c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ee52:	4a27      	ldr	r2, [pc, #156]	; (eef0 <isr+0x810>)
    ee54:	4927      	ldr	r1, [pc, #156]	; (eef4 <isr+0x814>)
    ee56:	4828      	ldr	r0, [pc, #160]	; (eef8 <isr+0x818>)
		LL_ASSERT(0);
    ee58:	47a0      	blx	r4
    ee5a:	4040      	eors	r0, r0
    ee5c:	f380 8811 	msr	BASEPRI, r0
    ee60:	f04f 0004 	mov.w	r0, #4
    ee64:	df02      	svc	2
		rl_idx = devmatch_ok ?
    ee66:	f1b9 0f00 	cmp.w	r9, #0
    ee6a:	d01c      	beq.n	eea6 <isr+0x7c6>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    ee6c:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
		rl_idx = devmatch_ok ?
    ee70:	4641      	mov	r1, r8
    ee72:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ee76:	f002 fba7 	bl	115c8 <ctrl_rl_idx>
    ee7a:	4680      	mov	r8, r0
		if (crc_ok &&
    ee7c:	b147      	cbz	r7, ee90 <isr+0x7b0>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    ee7e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ee82:	06da      	lsls	r2, r3, #27
    ee84:	d53a      	bpl.n	eefc <isr+0x81c>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ee86:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ee8a:	06db      	lsls	r3, r3, #27
    ee8c:	f100 8125 	bmi.w	f0da <isr+0x9fa>
			_radio.state = STATE_CLOSE;
    ee90:	2303      	movs	r3, #3
    ee92:	7523      	strb	r3, [r4, #20]
			radio_disable();
    ee94:	f003 fb40 	bl	12518 <radio_disable>
			_radio.scanner.state = 0;
    ee98:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    ee9c:	f36f 0341 	bfc	r3, #1, #1
    eea0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    eea4:	e4c8      	b.n	e838 <isr+0x158>
		rl_idx = devmatch_ok ?
    eea6:	f1ba 0f00 	cmp.w	sl, #0
    eeaa:	d003      	beq.n	eeb4 <isr+0x7d4>
    eeac:	4658      	mov	r0, fp
    eeae:	f002 fbe7 	bl	11680 <ctrl_rl_irk_idx>
    eeb2:	e7e2      	b.n	ee7a <isr+0x79a>
    eeb4:	f04f 08ff 	mov.w	r8, #255	; 0xff
    eeb8:	e7e0      	b.n	ee7c <isr+0x79c>
    eeba:	bf00      	nop
    eebc:	f3af 8000 	nop.w
    eec0:	1afd498d 	.word	0x1afd498d
    eec4:	00000007 	.word	0x00000007
    eec8:	000174d8 	.word	0x000174d8
    eecc:	000f4240 	.word	0x000f4240
    eed0:	3b9aca00 	.word	0x3b9aca00
    eed4:	0000aa3d 	.word	0x0000aa3d
    eed8:	0000a9fd 	.word	0x0000a9fd
    eedc:	0000cf95 	.word	0x0000cf95
    eee0:	1afd498d 	.word	0x1afd498d
    eee4:	00014c55 	.word	0x00014c55
    eee8:	20003aa4 	.word	0x20003aa4
    eeec:	00016e35 	.word	0x00016e35
    eef0:	000159c3 	.word	0x000159c3
    eef4:	00015a12 	.word	0x00015a12
    eef8:	000172b9 	.word	0x000172b9
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    eefc:	f1b9 0f00 	cmp.w	r9, #0
    ef00:	d005      	beq.n	ef0e <isr+0x82e>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    ef02:	4641      	mov	r1, r8
    ef04:	4650      	mov	r0, sl
    ef06:	f002 fd47 	bl	11998 <ctrl_rl_idx_allowed>
    ef0a:	2800      	cmp	r0, #0
    ef0c:	d0bb      	beq.n	ee86 <isr+0x7a6>
	bool dir_report = false;
    ef0e:	2300      	movs	r3, #0
    ef10:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ef14:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    ef18:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    ef1c:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef20:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ef24:	f109 0608 	add.w	r6, r9, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef28:	2b00      	cmp	r3, #0
    ef2a:	f000 80ef 	beq.w	f10c <isr+0xa2c>
    ef2e:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    ef32:	b133      	cbz	r3, ef42 <isr+0x862>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ef34:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ef38:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    ef3c:	429a      	cmp	r2, r3
    ef3e:	f040 80e5 	bne.w	f10c <isr+0xa2c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ef42:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ef46:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ef4a:	2800      	cmp	r0, #0
    ef4c:	f000 80d0 	beq.w	f0f0 <isr+0xa10>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ef50:	f899 0008 	ldrb.w	r0, [r9, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    ef54:	f010 000f 	ands.w	r0, r0, #15
    ef58:	f040 814f 	bne.w	f1fa <isr+0xb1a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ef5c:	f003 fcc0 	bl	128e0 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ef60:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    ef64:	f200 2716 	addw	r7, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    ef68:	48b9      	ldr	r0, [pc, #740]	; (f250 <isr+0xb70>)
    ef6a:	2207      	movs	r2, #7
    ef6c:	fba3 0100 	umull	r0, r1, r3, r0
    ef70:	fb02 1103 	mla	r1, r2, r3, r1
    ef74:	a3b4      	add	r3, pc, #720	; (adr r3, f248 <isr+0xb68>)
    ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef7a:	f7f1 f94b 	bl	214 <__aeabi_uldivmod>
    ef7e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    ef82:	4287      	cmp	r7, r0
    ef84:	f080 80c2 	bcs.w	f10c <isr+0xa2c>
			node_rx = packet_rx_reserve_get(4);
    ef88:	2004      	movs	r0, #4
    ef8a:	f7fa fd87 	bl	9a9c <packet_rx_reserve_get>
		if (node_rx == 0) {
    ef8e:	4607      	mov	r7, r0
    ef90:	2800      	cmp	r0, #0
    ef92:	f43f af7d 	beq.w	ee90 <isr+0x7b0>
		_radio.state = STATE_STOP;
    ef96:	2304      	movs	r3, #4
    ef98:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    ef9a:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    ef9c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		_radio.scanner.conn = NULL;
    efa0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    efa4:	f003 fb0e 	bl	125c4 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    efa8:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    efaa:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    efae:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    efb2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    efb4:	f899 3008 	ldrb.w	r3, [r9, #8]
    efb8:	7802      	ldrb	r2, [r0, #0]
    efba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    efbe:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    efc2:	2322      	movs	r3, #34	; 0x22
    efc4:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    efc6:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    efc8:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    efca:	4640      	mov	r0, r8
    efcc:	f002 fade 	bl	1158c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    efd0:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    efd4:	4601      	mov	r1, r0
    efd6:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    efd8:	f013 0f01 	tst.w	r3, #1
    efdc:	f810 3b02 	ldrb.w	r3, [r0], #2
    efe0:	f000 8116 	beq.w	f210 <isr+0xb30>
    efe4:	2900      	cmp	r1, #0
    efe6:	f000 8113 	beq.w	f210 <isr+0xb30>
			pdu_adv_tx->tx_addr = 1;
    efea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    efee:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eff0:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    eff2:	f7f2 fe15 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    eff6:	f105 0308 	add.w	r3, r5, #8
    effa:	4618      	mov	r0, r3
    effc:	2206      	movs	r2, #6
    effe:	f109 010a 	add.w	r1, r9, #10
    f002:	930a      	str	r3, [sp, #40]	; 0x28
    f004:	f7f2 fe0c 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    f008:	2204      	movs	r2, #4
    f00a:	f106 0110 	add.w	r1, r6, #16
    f00e:	f105 000e 	add.w	r0, r5, #14
    f012:	f7f2 fe05 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    f016:	2203      	movs	r2, #3
    f018:	f106 0114 	add.w	r1, r6, #20
    f01c:	f105 0012 	add.w	r0, r5, #18
    f020:	f7f2 fdfe 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    f024:	2301      	movs	r3, #1
    f026:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    f028:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
		conn_interval_us =
    f02c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f030:	4353      	muls	r3, r2
    f032:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f034:	f003 fc54 	bl	128e0 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    f038:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    f03a:	f8d4 b104 	ldr.w	fp, [r4, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    f03e:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    f040:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    f044:	bfd8      	it	le
    f046:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    f04a:	f1bb 0f00 	cmp.w	fp, #0
    f04e:	f040 80ea 	bne.w	f226 <isr+0xb46>
			pdu_adv_tx->connect_ind.win_offset = 0;
    f052:	f885 b016 	strb.w	fp, [r5, #22]
    f056:	f885 b017 	strb.w	fp, [r5, #23]
    f05a:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f05c:	2100      	movs	r1, #0
    f05e:	4608      	mov	r0, r1
    f060:	f003 fa40 	bl	124e4 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f064:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    f066:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    f06a:	4608      	mov	r0, r1
    f06c:	f003 fa3f 	bl	124ee <radio_tx_chain_delay_get>
    f070:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    f074:	f100 031e 	add.w	r3, r0, #30
    f078:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    f07a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f07e:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    f080:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f084:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    f086:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f08a:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    f08c:	f106 0117 	add.w	r1, r6, #23
    f090:	2205      	movs	r2, #5
    f092:	f105 001e 	add.w	r0, r5, #30
    f096:	f7f2 fdc3 	bl	1c20 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    f09a:	7fb2      	ldrb	r2, [r6, #30]
    f09c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f0a0:	f362 0304 	bfi	r3, r2, #0, #5
    f0a4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    f0a8:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
    f0ac:	f362 1347 	bfi	r3, r2, #5, #3
    f0b0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    f0b4:	f003 faa0 	bl	125f8 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    f0b8:	4628      	mov	r0, r5
    f0ba:	f003 fa0d 	bl	124d8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    f0be:	f003 fa49 	bl	12554 <radio_is_ready>
    f0c2:	4683      	mov	fp, r0
    f0c4:	2800      	cmp	r0, #0
    f0c6:	f000 80cf 	beq.w	f268 <isr+0xb88>
		LL_ASSERT(!radio_is_ready());
    f0ca:	4b62      	ldr	r3, [pc, #392]	; (f254 <isr+0xb74>)
    f0cc:	9301      	str	r3, [sp, #4]
    f0ce:	9300      	str	r3, [sp, #0]
    f0d0:	4b61      	ldr	r3, [pc, #388]	; (f258 <isr+0xb78>)
    f0d2:	681c      	ldr	r4, [r3, #0]
    f0d4:	4b61      	ldr	r3, [pc, #388]	; (f25c <isr+0xb7c>)
    f0d6:	f7ff bb63 	b.w	e7a0 <isr+0xc0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f0da:	f1b9 0f00 	cmp.w	r9, #0
    f0de:	f47f af16 	bne.w	ef0e <isr+0x82e>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f0e2:	4640      	mov	r0, r8
    f0e4:	f002 fb18 	bl	11718 <ctrl_irk_whitelisted>
		if (crc_ok &&
    f0e8:	2800      	cmp	r0, #0
    f0ea:	f43f aed1 	beq.w	ee90 <isr+0x7b0>
    f0ee:	e70e      	b.n	ef0e <isr+0x82e>
	if (rl_idx != FILTER_IDX_NONE) {
    f0f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f0f4:	d06f      	beq.n	f1d6 <isr+0xaf6>
		return (rl_idx == _radio.scanner.rl_idx);
    f0f6:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
    f0fa:	eba0 0e08 	sub.w	lr, r0, r8
    f0fe:	f1de 0000 	rsbs	r0, lr, #0
    f102:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    f106:	2800      	cmp	r0, #0
    f108:	f47f af22 	bne.w	ef50 <isr+0x870>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f10c:	f899 0008 	ldrb.w	r0, [r9, #8]
    f110:	f010 000f 	ands.w	r0, r0, #15
    f114:	d002      	beq.n	f11c <isr+0xa3c>
    f116:	2806      	cmp	r0, #6
    f118:	f040 81b1 	bne.w	f47e <isr+0xd9e>
		 (_radio.scanner.type != 0) &&
    f11c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    f120:	071f      	lsls	r7, r3, #28
    f122:	f140 8196 	bpl.w	f452 <isr+0xd72>
		 (_radio.scanner.type != 0) &&
    f126:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    f12a:	2a00      	cmp	r2, #0
    f12c:	f040 8191 	bne.w	f452 <isr+0xd72>
		err = isr_rx_scan_report(rssi_ready,
    f130:	f1ba 0f00 	cmp.w	sl, #0
    f134:	bf14      	ite	ne
    f136:	4641      	movne	r1, r8
    f138:	21ff      	moveq	r1, #255	; 0xff
    f13a:	4628      	mov	r0, r5
    f13c:	f7fb fbe8 	bl	a910 <isr_rx_scan_report>
		if (err) {
    f140:	2800      	cmp	r0, #0
    f142:	f47f aea5 	bne.w	ee90 <isr+0x7b0>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f146:	f003 fa3d 	bl	125c4 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    f14a:	7803      	ldrb	r3, [r0, #0]
    f14c:	2203      	movs	r2, #3
    f14e:	f362 0303 	bfi	r3, r2, #0, #4
    f152:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f154:	f899 3008 	ldrb.w	r3, [r9, #8]
    f158:	7802      	ldrb	r2, [r0, #0]
    f15a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f15e:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    f162:	230c      	movs	r3, #12
    f164:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    f166:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    f168:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    f16a:	4640      	mov	r0, r8
    f16c:	f002 fa0e 	bl	1158c <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    f170:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
		lrpa = ctrl_lrpa_get(rl_idx);
    f174:	4601      	mov	r1, r0
    f176:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    f178:	f013 0f01 	tst.w	r3, #1
    f17c:	f810 3b02 	ldrb.w	r3, [r0], #2
    f180:	f000 815e 	beq.w	f440 <isr+0xd60>
    f184:	2900      	cmp	r1, #0
    f186:	f000 815b 	beq.w	f440 <isr+0xd60>
			pdu_adv_tx->tx_addr = 1;
    f18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f18e:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f190:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f192:	f7f2 fd45 	bl	1c20 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    f196:	2206      	movs	r2, #6
    f198:	f109 010a 	add.w	r1, r9, #10
    f19c:	f105 0008 	add.w	r0, r5, #8
    f1a0:	f7f2 fd3e 	bl	1c20 <memcpy>
		_radio.scanner.state = 1;
    f1a4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    f1a8:	f043 0302 	orr.w	r3, r3, #2
    f1ac:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    f1b0:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    f1b2:	2302      	movs	r3, #2
    f1b4:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    f1b6:	f003 faa5 	bl	12704 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f1ba:	2000      	movs	r0, #0
    f1bc:	f003 fa06 	bl	125cc <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    f1c0:	4628      	mov	r0, r5
    f1c2:	f003 f989 	bl	124d8 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    f1c6:	f003 fb79 	bl	128bc <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    f1ca:	f003 f9c3 	bl	12554 <radio_is_ready>
    f1ce:	2800      	cmp	r0, #0
    f1d0:	f43f ab32 	beq.w	e838 <isr+0x158>
    f1d4:	e779      	b.n	f0ca <isr+0x9ea>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f1d6:	f899 2008 	ldrb.w	r2, [r9, #8]
    f1da:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f1de:	f3c2 1280 	ubfx	r2, r2, #6, #1
    f1e2:	4293      	cmp	r3, r2
    f1e4:	d18f      	bne.n	f106 <isr+0xa26>
		(memcmp(&_radio.scanner.adv_addr[0],
    f1e6:	2206      	movs	r2, #6
    f1e8:	f109 010a 	add.w	r1, r9, #10
    f1ec:	481c      	ldr	r0, [pc, #112]	; (f260 <isr+0xb80>)
    f1ee:	f7f2 fd02 	bl	1bf6 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    f1f2:	fab0 f080 	clz	r0, r0
    f1f6:	0940      	lsrs	r0, r0, #5
    f1f8:	e785      	b.n	f106 <isr+0xa26>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    f1fa:	2801      	cmp	r0, #1
    f1fc:	d18b      	bne.n	f116 <isr+0xa36>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    f1fe:	2300      	movs	r3, #0
    f200:	4642      	mov	r2, r8
    f202:	4631      	mov	r1, r6
    f204:	f7fb fb38 	bl	a878 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    f208:	2800      	cmp	r0, #0
    f20a:	f43f af7f 	beq.w	f10c <isr+0xa2c>
    f20e:	e6a5      	b.n	ef5c <isr+0x87c>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f210:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f214:	4913      	ldr	r1, [pc, #76]	; (f264 <isr+0xb84>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f216:	09d2      	lsrs	r2, r2, #7
    f218:	f362 1386 	bfi	r3, r2, #6, #1
    f21c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    f21e:	2206      	movs	r2, #6
    f220:	e6e7      	b.n	eff2 <isr+0x912>
				conn_space_us += conn_interval_us;
    f222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f224:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    f226:	f1bb 0f00 	cmp.w	fp, #0
    f22a:	dbfa      	blt.n	f222 <isr+0xb42>
    f22c:	459b      	cmp	fp, r3
    f22e:	d3f8      	bcc.n	f222 <isr+0xb42>
				(conn_space_us - conn_offset_us) / 1250;
    f230:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    f234:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f238:	fbb3 f3f2 	udiv	r3, r3, r2
    f23c:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    f23e:	7d6b      	ldrb	r3, [r5, #21]
    f240:	3301      	adds	r3, #1
    f242:	756b      	strb	r3, [r5, #21]
    f244:	e70a      	b.n	f05c <isr+0x97c>
    f246:	bf00      	nop
    f248:	3b9aca00 	.word	0x3b9aca00
    f24c:	00000000 	.word	0x00000000
    f250:	1afd498d 	.word	0x1afd498d
    f254:	00014c55 	.word	0x00014c55
    f258:	20003aa4 	.word	0x20003aa4
    f25c:	00016e53 	.word	0x00016e53
    f260:	200009da 	.word	0x200009da
    f264:	200009d4 	.word	0x200009d4
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f268:	f44f 72aa 	mov.w	r2, #340	; 0x154
    f26c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f270:	4630      	mov	r0, r6
    f272:	f7f7 fe00 	bl	6e76 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f276:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    f278:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f27a:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    f27e:	f887 b00b 	strb.w	fp, [r7, #11]
		radio_le_conn_cmplt->role = 0x00;
    f282:	f887 b00c 	strb.w	fp, [r7, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f286:	713b      	strb	r3, [r7, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f288:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    f28c:	80f8      	strh	r0, [r7, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    f28e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f292:	76bb      	strb	r3, [r7, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f294:	2206      	movs	r2, #6
    f296:	f107 001b 	add.w	r0, r7, #27
    f29a:	f7f2 fcc1 	bl	1c20 <memcpy>
    f29e:	f107 0b0e 	add.w	fp, r7, #14
    f2a2:	f107 0314 	add.w	r3, r7, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    f2a6:	f1ba 0f00 	cmp.w	sl, #0
    f2aa:	d034      	beq.n	f316 <isr+0xc36>
    f2ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f2b0:	d031      	beq.n	f316 <isr+0xc36>
			ll_rl_id_addr_get(rl_idx,
    f2b2:	465a      	mov	r2, fp
    f2b4:	f107 010d 	add.w	r1, r7, #13
    f2b8:	4640      	mov	r0, r8
    f2ba:	930d      	str	r3, [sp, #52]	; 0x34
    f2bc:	f002 fba2 	bl	11a04 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    f2c0:	7b7a      	ldrb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2c4:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    f2c6:	3202      	adds	r2, #2
    f2c8:	737a      	strb	r2, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    f2ca:	4618      	mov	r0, r3
    f2cc:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f2ce:	f7f2 fca7 	bl	1c20 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    f2d2:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f2d6:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    f2da:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    f2de:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    f2e2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
    f2e6:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    f2ea:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    f2ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    f2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    f2f6:	8c30      	ldrh	r0, [r6, #32]
    f2f8:	f7fb fb66 	bl	a9c8 <rx_fc_lock>
		packet_rx_enqueue();
    f2fc:	f7fb fa6a 	bl	a7d4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    f300:	2003      	movs	r0, #3
    f302:	f7fa fbcb 	bl	9a9c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f306:	b998      	cbnz	r0, f330 <isr+0xc50>
    f308:	4bbd      	ldr	r3, [pc, #756]	; (f600 <isr+0xf20>)
    f30a:	9301      	str	r3, [sp, #4]
    f30c:	9300      	str	r3, [sp, #0]
    f30e:	4bbd      	ldr	r3, [pc, #756]	; (f604 <isr+0xf24>)
    f310:	681c      	ldr	r4, [r3, #0]
    f312:	4bbd      	ldr	r3, [pc, #756]	; (f608 <isr+0xf28>)
    f314:	e466      	b.n	ebe4 <isr+0x504>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    f316:	2206      	movs	r2, #6
    f318:	2100      	movs	r1, #0
    f31a:	4618      	mov	r0, r3
    f31c:	f7f2 fcac 	bl	1c78 <memset>
				pdu_adv_tx->rx_addr;
    f320:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f322:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    f324:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    f328:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f32a:	2206      	movs	r2, #6
    f32c:	4658      	mov	r0, fp
    f32e:	e7ce      	b.n	f2ce <isr+0xbee>
			node_rx->hdr.handle = conn->handle;
    f330:	8c33      	ldrh	r3, [r6, #32]
    f332:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    f334:	230b      	movs	r3, #11
    f336:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    f338:	f899 3008 	ldrb.w	r3, [r9, #8]
    f33c:	f013 0320 	ands.w	r3, r3, #32
    f340:	d00e      	beq.n	f360 <isr+0xc80>
					((u16_t)conn->access_addr[1] << 8) |
    f342:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    f344:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    f346:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    f348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    f34c:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    f34e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    f352:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    f354:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    f356:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f35a:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    f35c:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    f35e:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f360:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    f362:	f7fb fa37 	bl	a7d4 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f366:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f368:	f8d4 7184 	ldr.w	r7, [r4, #388]	; 0x184
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    f36c:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    f36e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    f372:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f374:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f376:	f44f 63c7 	mov.w	r3, #1592	; 0x638
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f37a:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f37c:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f37e:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    f382:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f384:	4629      	mov	r1, r5
    f386:	9300      	str	r3, [sp, #0]
    f388:	4628      	mov	r0, r5
    f38a:	4ba0      	ldr	r3, [pc, #640]	; (f60c <isr+0xf2c>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f38c:	f8df a290 	ldr.w	sl, [pc, #656]	; f620 <isr+0xf40>
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    f390:	bf38      	it	cc
    f392:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f394:	f7f8 fc60 	bl	7c58 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    f398:	f240 6139 	movw	r1, #1593	; 0x639
    f39c:	f7fb fb86 	bl	aaac <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3a0:	462b      	mov	r3, r5
    f3a2:	2204      	movs	r2, #4
    f3a4:	4629      	mov	r1, r5
    f3a6:	9500      	str	r5, [sp, #0]
    f3a8:	4628      	mov	r0, r5
    f3aa:	f7f8 fc55 	bl	7c58 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3b0:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3b4:	68a3      	ldr	r3, [r4, #8]
    f3b6:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    f3ba:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3bc:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    f3c0:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    f3c4:	9308      	str	r3, [sp, #32]
    f3c6:	4b92      	ldr	r3, [pc, #584]	; (f610 <isr+0xf30>)
    f3c8:	9307      	str	r3, [sp, #28]
    f3ca:	4b92      	ldr	r3, [pc, #584]	; (f614 <isr+0xf34>)
    f3cc:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3ce:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    f3d0:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3d2:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f3d4:	4640      	mov	r0, r8
    f3d6:	a388      	add	r3, pc, #544	; (adr r3, f5f8 <isr+0xf18>)
    f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3dc:	4649      	mov	r1, r9
		ticker_status =
    f3de:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    f3e0:	f7f0 ff18 	bl	214 <__aeabi_uldivmod>
    f3e4:	4610      	mov	r0, r2
    f3e6:	4619      	mov	r1, r3
    f3e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f3ec:	2300      	movs	r3, #0
    f3ee:	f7f0 ff11 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f3f2:	a381      	add	r3, pc, #516	; (adr r3, f5f8 <isr+0xf18>)
    f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f3f8:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f3fa:	4649      	mov	r1, r9
    f3fc:	4640      	mov	r0, r8
    f3fe:	f7f0 ff09 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f402:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    f404:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    f406:	a37c      	add	r3, pc, #496	; (adr r3, f5f8 <isr+0xf18>)
    f408:	e9d3 2300 	ldrd	r2, r3, [r3]
    f40c:	fba1 010a 	umull	r0, r1, r1, sl
    f410:	f7f0 ff00 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f414:	3407      	adds	r4, #7
    f416:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    f41a:	b2e4      	uxtb	r4, r4
    f41c:	9000      	str	r0, [sp, #0]
    f41e:	465b      	mov	r3, fp
    f420:	4622      	mov	r2, r4
    f422:	4629      	mov	r1, r5
    f424:	4628      	mov	r0, r5
    f426:	f7f8 fb79 	bl	7b1c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f42a:	f030 0302 	bics.w	r3, r0, #2
    f42e:	f43f aa03 	beq.w	e838 <isr+0x158>
    f432:	4b73      	ldr	r3, [pc, #460]	; (f600 <isr+0xf20>)
    f434:	9301      	str	r3, [sp, #4]
    f436:	9300      	str	r3, [sp, #0]
    f438:	4b72      	ldr	r3, [pc, #456]	; (f604 <isr+0xf24>)
    f43a:	681c      	ldr	r4, [r3, #0]
    f43c:	4b72      	ldr	r3, [pc, #456]	; (f608 <isr+0xf28>)
    f43e:	e508      	b.n	ee52 <isr+0x772>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f440:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f444:	4974      	ldr	r1, [pc, #464]	; (f618 <isr+0xf38>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    f446:	09d2      	lsrs	r2, r2, #7
    f448:	f362 1386 	bfi	r3, r2, #6, #1
    f44c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    f44e:	2206      	movs	r2, #6
    f450:	e69f      	b.n	f192 <isr+0xab2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f452:	b9a0      	cbnz	r0, f47e <isr+0xd9e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    f454:	f899 3009 	ldrb.w	r3, [r9, #9]
    f458:	2b00      	cmp	r3, #0
    f45a:	f43f ad19 	beq.w	ee90 <isr+0x7b0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    f45e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f462:	2b00      	cmp	r3, #0
    f464:	f47f ad14 	bne.w	ee90 <isr+0x7b0>
		err = isr_rx_scan_report(rssi_ready,
    f468:	f1ba 0f00 	cmp.w	sl, #0
    f46c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f470:	bf14      	ite	ne
    f472:	4641      	movne	r1, r8
    f474:	21ff      	moveq	r1, #255	; 0xff
    f476:	4628      	mov	r0, r5
    f478:	f7fb fa4a 	bl	a910 <isr_rx_scan_report>
    f47c:	e508      	b.n	ee90 <isr+0x7b0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    f47e:	2801      	cmp	r0, #1
    f480:	d00e      	beq.n	f4a0 <isr+0xdc0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f482:	f899 3008 	ldrb.w	r3, [r9, #8]
					&dir_report))) ||
    f486:	f003 020b 	and.w	r2, r3, #11
    f48a:	2a02      	cmp	r2, #2
    f48c:	d0e2      	beq.n	f454 <isr+0xd74>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    f48e:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    f492:	2b07      	cmp	r3, #7
    f494:	d10d      	bne.n	f4b2 <isr+0xdd2>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    f496:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    f49a:	0758      	lsls	r0, r3, #29
    f49c:	d1da      	bne.n	f454 <isr+0xd74>
    f49e:	e4f7      	b.n	ee90 <isr+0x7b0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    f4a0:	ab10      	add	r3, sp, #64	; 0x40
    f4a2:	4642      	mov	r2, r8
    f4a4:	4631      	mov	r1, r6
    f4a6:	2000      	movs	r0, #0
    f4a8:	f7fb f9e6 	bl	a878 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f4ac:	2800      	cmp	r0, #0
    f4ae:	d1d1      	bne.n	f454 <isr+0xd74>
    f4b0:	e7e7      	b.n	f482 <isr+0xda2>
		   (_radio.scanner.phy)) ||
    f4b2:	2b04      	cmp	r3, #4
    f4b4:	f47f acec 	bne.w	ee90 <isr+0x7b0>
		   (_radio.scanner.state != 0) &&
    f4b8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    f4bc:	0799      	lsls	r1, r3, #30
    f4be:	f57f ace7 	bpl.w	ee90 <isr+0x7b0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    f4c2:	f003 f87f 	bl	125c4 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    f4c6:	f899 3008 	ldrb.w	r3, [r9, #8]
    f4ca:	7802      	ldrb	r2, [r0, #0]
    f4cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f4d0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f4d4:	f47f acdc 	bne.w	ee90 <isr+0x7b0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    f4d8:	2206      	movs	r2, #6
    f4da:	f109 010a 	add.w	r1, r9, #10
    f4de:	3008      	adds	r0, #8
    f4e0:	f7f2 fb89 	bl	1bf6 <memcmp>
		   (_radio.scanner.state != 0) &&
    f4e4:	2800      	cmp	r0, #0
    f4e6:	d0b5      	beq.n	f454 <isr+0xd74>
    f4e8:	e4d2      	b.n	ee90 <isr+0x7b0>
	_radio.packet_counter++;
    f4ea:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f4ee:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
	_radio.packet_counter++;
    f4f2:	3301      	adds	r3, #1
    f4f4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	u8_t rx_enqueue = 0;
    f4f8:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f4fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	u8_t rx_enqueue = 0;
    f4fe:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f502:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f506:	2301      	movs	r3, #1
    f508:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    f50c:	2f00      	cmp	r7, #0
    f50e:	f000 82dc 	beq.w	faca <isr+0x13ea>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f512:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
    f516:	f898 1008 	ldrb.w	r1, [r8, #8]
    f51a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f51e:	f3c1 0180 	ubfx	r1, r1, #2, #1
    f522:	f003 0201 	and.w	r2, r3, #1
    f526:	4291      	cmp	r1, r2
    f528:	f000 81a2 	beq.w	f870 <isr+0x1190>
		_radio.conn_curr->sn++;
    f52c:	f082 0201 	eor.w	r2, r2, #1
    f530:	f362 0300 	bfi	r3, r2, #0, #1
    f534:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    f538:	7ce3      	ldrb	r3, [r4, #19]
    f53a:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    f53c:	bf02      	ittt	eq
    f53e:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    f542:	f043 0301 	orreq.w	r3, r3, #1
    f546:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    f54a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f54e:	061a      	lsls	r2, r3, #24
    f550:	f100 8189 	bmi.w	f866 <isr+0x1186>
			node_tx = _radio.conn_curr->pkt_tx_head;
    f554:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    f558:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    f55c:	1d30      	adds	r0, r6, #4
    f55e:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    f562:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    f566:	f1b9 0f00 	cmp.w	r9, #0
    f56a:	f000 80af 	beq.w	f6cc <isr+0xfec>
				if (_radio.conn_curr->enc_tx) {
    f56e:	069b      	lsls	r3, r3, #26
    f570:	d50b      	bpl.n	f58a <isr+0xeaa>
					_radio.conn_curr->ccm_tx.counter++;
    f572:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    f576:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    f57a:	f11b 0201 	adds.w	r2, fp, #1
    f57e:	f14c 0300 	adc.w	r3, ip, #0
    f582:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    f586:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    f58a:	5c43      	ldrb	r3, [r0, r1]
    f58c:	f003 0303 	and.w	r3, r3, #3
    f590:	2b03      	cmp	r3, #3
    f592:	f040 809b 	bne.w	f6cc <isr+0xfec>
	switch (pdu_data_tx->llctrl.opcode) {
    f596:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f59a:	3b02      	subs	r3, #2
    f59c:	2b16      	cmp	r3, #22
    f59e:	f200 8095 	bhi.w	f6cc <isr+0xfec>
    f5a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    f5a6:	0017      	.short	0x0017
    f5a8:	00c90077 	.word	0x00c90077
    f5ac:	00930093 	.word	0x00930093
    f5b0:	00930093 	.word	0x00930093
    f5b4:	00950093 	.word	0x00950093
    f5b8:	009300a0 	.word	0x009300a0
    f5bc:	009300d0 	.word	0x009300d0
    f5c0:	00930093 	.word	0x00930093
    f5c4:	00930093 	.word	0x00930093
    f5c8:	00da0093 	.word	0x00da0093
    f5cc:	00f20093 	.word	0x00f20093
    f5d0:	012400f9 	.word	0x012400f9
		_radio.state = STATE_CLOSE;
    f5d4:	2303      	movs	r3, #3
    f5d6:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f5d8:	f002 ff9e 	bl	12518 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f5dc:	f002 ffba 	bl	12554 <radio_is_ready>
    f5e0:	b300      	cbz	r0, f624 <isr+0xf44>
    f5e2:	4b07      	ldr	r3, [pc, #28]	; (f600 <isr+0xf20>)
    f5e4:	9301      	str	r3, [sp, #4]
    f5e6:	9300      	str	r3, [sp, #0]
    f5e8:	4b06      	ldr	r3, [pc, #24]	; (f604 <isr+0xf24>)
    f5ea:	681c      	ldr	r4, [r3, #0]
    f5ec:	4b0b      	ldr	r3, [pc, #44]	; (f61c <isr+0xf3c>)
    f5ee:	f7ff b8d7 	b.w	e7a0 <isr+0xc0>
    f5f2:	bf00      	nop
    f5f4:	f3af 8000 	nop.w
    f5f8:	1afd498d 	.word	0x1afd498d
    f5fc:	00000007 	.word	0x00000007
    f600:	00014c55 	.word	0x00014c55
    f604:	20003aa4 	.word	0x20003aa4
    f608:	00016e53 	.word	0x00016e53
    f60c:	0000aaad 	.word	0x0000aaad
    f610:	0000a9fd 	.word	0x0000a9fd
    f614:	0000cf91 	.word	0x0000cf91
    f618:	200009d4 	.word	0x200009d4
    f61c:	00016e5f 	.word	0x00016e5f
    f620:	3b9aca00 	.word	0x3b9aca00
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f624:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f628:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f62c:	2913      	cmp	r1, #19
    f62e:	bf08      	it	eq
    f630:	2116      	moveq	r1, #22
    f632:	f7fb fe4b 	bl	b2cc <terminate_ind_rx_enqueue>
		terminate = 1;
    f636:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f638:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f63c:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f640:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f642:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f646:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f64a:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f64c:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f650:	d11e      	bne.n	f690 <isr+0xfb0>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f652:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f656:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f65a:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f65c:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f65e:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f662:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f666:	f040 80c9 	bne.w	f7fc <isr+0x111c>
		if (node_tx) {
    f66a:	b18e      	cbz	r6, f690 <isr+0xfb0>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f66c:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f670:	f8d3 e000 	ldr.w	lr, [r3]
    f674:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f678:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f67a:	bf06      	itte	eq
    f67c:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f680:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f684:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f688:	49cf      	ldr	r1, [pc, #828]	; (f9c8 <isr+0x12e8>)
    f68a:	4630      	mov	r0, r6
    f68c:	f7f7 fbd5 	bl	6e3a <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f690:	2600      	movs	r6, #0
    f692:	e0bc      	b.n	f80e <isr+0x112e>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f694:	2208      	movs	r2, #8
    f696:	f10a 010e 	add.w	r1, sl, #14
    f69a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f69e:	f7f2 fabf 	bl	1c20 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f6a2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f6a6:	2204      	movs	r2, #4
    f6a8:	f10a 0116 	add.w	r1, sl, #22
    f6ac:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f6b0:	f7f2 fab6 	bl	1c20 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f6b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f6b8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f6bc:	f042 0208 	orr.w	r2, r2, #8
    f6c0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f6c4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f6c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f6cc:	2500      	movs	r5, #0
    f6ce:	e7b3      	b.n	f638 <isr+0xf58>
		_radio.conn_curr->pause_tx = 1;
    f6d0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f6d4:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f6d8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f6dc:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f6e0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f6e4:	e7f2      	b.n	f6cc <isr+0xfec>
		if (_radio.role == ROLE_MASTER) {
    f6e6:	f894 a013 	ldrb.w	sl, [r4, #19]
    f6ea:	fa5f fa8a 	uxtb.w	sl, sl
    f6ee:	f1ba 0f04 	cmp.w	sl, #4
    f6f2:	d121      	bne.n	f738 <isr+0x1058>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f6f4:	7933      	ldrb	r3, [r6, #4]
    f6f6:	f043 0303 	orr.w	r3, r3, #3
    f6fa:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f6fc:	2317      	movs	r3, #23
    f6fe:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f700:	2303      	movs	r3, #3
    f702:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f704:	2208      	movs	r2, #8
    f706:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f70a:	3004      	adds	r0, #4
    f70c:	f7f2 fa88 	bl	1c20 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f710:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f714:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f716:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f71a:	7473      	strb	r3, [r6, #17]
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f71c:	f106 0112 	add.w	r1, r6, #18
    f720:	2208      	movs	r2, #8
    f722:	6860      	ldr	r0, [r4, #4]
    f724:	f003 ff46 	bl	135b4 <entropy_nrf_get_entropy_isr>
	entropy_nrf_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f728:	f106 011a 	add.w	r1, r6, #26
    f72c:	4652      	mov	r2, sl
    f72e:	6860      	ldr	r0, [r4, #4]
    f730:	f003 ff40 	bl	135b4 <entropy_nrf_get_entropy_isr>
			*node_tx = NULL;
    f734:	2600      	movs	r6, #0
    f736:	e7c9      	b.n	f6cc <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    f738:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f73c:	f043 0308 	orr.w	r3, r3, #8
    f740:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f744:	e7c2      	b.n	f6cc <isr+0xfec>
		_radio.conn_curr->pause_rx = 0;
    f746:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f74a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f74e:	f36f 03c3 	bfc	r3, #3, #1
    f752:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f756:	2300      	movs	r3, #0
    f758:	e7c2      	b.n	f6e0 <isr+0x1000>
		if ((_radio.conn_curr->llcp_length.req !=
    f75a:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f75e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f762:	429a      	cmp	r2, r3
    f764:	d0b2      	beq.n	f6cc <isr+0xfec>
		    (_radio.conn_curr->llcp_length.state ==
    f766:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f76a:	f003 0203 	and.w	r2, r3, #3
    f76e:	2a01      	cmp	r2, #1
    f770:	d1ac      	bne.n	f6cc <isr+0xfec>
			_radio.conn_curr->pause_tx = 1;
    f772:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f776:	f042 0208 	orr.w	r2, r2, #8
    f77a:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f77e:	2202      	movs	r2, #2
    f780:	f362 0301 	bfi	r3, r2, #0, #2
    f784:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f788:	e7a0      	b.n	f6cc <isr+0xfec>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f78a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f78e:	2202      	movs	r2, #2
    f790:	f362 0301 	bfi	r3, r2, #0, #2
    f794:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f798:	7ce3      	ldrb	r3, [r4, #19]
    f79a:	2b03      	cmp	r3, #3
    f79c:	d196      	bne.n	f6cc <isr+0xfec>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f79e:	2301      	movs	r3, #1
    f7a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f7a4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f7a8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f7ac:	2202      	movs	r2, #2
    f7ae:	2304      	movs	r3, #4
    f7b0:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f7b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f7b8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f7bc:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f7c0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f7c4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f7c8:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f7cc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f7d0:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f7d4:	f003 0307 	and.w	r3, r3, #7
    f7d8:	aa12      	add	r2, sp, #72	; 0x48
    f7da:	4413      	add	r3, r2
    f7dc:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f7e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f7e4:	f363 0202 	bfi	r2, r3, #0, #3
    f7e8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f7ec:	e76e      	b.n	f6cc <isr+0xfec>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f7ee:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f7f2:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f7f6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f7fa:	e7f3      	b.n	f7e4 <isr+0x1104>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f7fc:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f800:	4293      	cmp	r3, r2
    f802:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f804:	bf08      	it	eq
    f806:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f80a:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f80e:	b37d      	cbz	r5, f870 <isr+0x1190>
		connection_release(_radio.conn_curr);
    f810:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f814:	f7fb fb9a 	bl	af4c <connection_release>
		_radio.conn_curr = NULL;
    f818:	2300      	movs	r3, #0
    f81a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    f81e:	f003 f841 	bl	128a4 <radio_tmr_aa_restore>
    f822:	b918      	cbnz	r0, f82c <isr+0x114c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f824:	f003 f832 	bl	1288c <radio_tmr_aa_get>
    f828:	f003 f836 	bl	12898 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f82c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f830:	2b00      	cmp	r3, #0
    f832:	f43f a801 	beq.w	e838 <isr+0x158>
	if (tx_release) {
    f836:	b11e      	cbz	r6, f840 <isr+0x1160>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f838:	4631      	mov	r1, r6
    f83a:	8c18      	ldrh	r0, [r3, #32]
    f83c:	f7fb faf8 	bl	ae30 <pdu_node_tx_release>
	if (rx_enqueue) {
    f840:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f844:	2b00      	cmp	r3, #0
    f846:	f43e aff7 	beq.w	e838 <isr+0x158>
		rx_fc_lock(_radio.conn_curr->handle);
    f84a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f84e:	8c18      	ldrh	r0, [r3, #32]
    f850:	f7fb f8ba 	bl	a9c8 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f854:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f858:	8c1b      	ldrh	r3, [r3, #32]
    f85a:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f85e:	f7fa ffb9 	bl	a7d4 <packet_rx_enqueue>
    f862:	f7fe bfe9 	b.w	e838 <isr+0x158>
			_radio.conn_curr->empty = 0;
    f866:	f36f 13c7 	bfc	r3, #7, #1
    f86a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f86e:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f870:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f874:	f898 2008 	ldrb.w	r2, [r8, #8]
    f878:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f87c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f880:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f884:	429a      	cmp	r2, r3
    f886:	f040 80ef 	bne.w	fa68 <isr+0x1388>
	    (packet_rx_reserve_get(3) != 0) &&
    f88a:	2003      	movs	r0, #3
    f88c:	f7fa f906 	bl	9a9c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f890:	2800      	cmp	r0, #0
    f892:	f000 80e9 	beq.w	fa68 <isr+0x1388>
	    (packet_rx_reserve_get(3) != 0) &&
    f896:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
    f89a:	b393      	cbz	r3, f902 <isr+0x1222>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f89c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    f8a0:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	    ((_radio.fc_ena == 0) ||
    f8a4:	4293      	cmp	r3, r2
    f8a6:	d105      	bne.n	f8b4 <isr+0x11d4>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f8a8:	f894 2180 	ldrb.w	r2, [r4, #384]	; 0x180
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f8ac:	f894 1181 	ldrb.w	r1, [r4, #385]	; 0x181
    f8b0:	4291      	cmp	r1, r2
    f8b2:	d026      	beq.n	f902 <isr+0x1222>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f8b4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
	      (_radio.fc_req == _radio.fc_ack)) ||
    f8b8:	4293      	cmp	r3, r2
    f8ba:	f000 80d5 	beq.w	fa68 <isr+0x1388>
	      (_radio.fc_req != _radio.fc_ack) &&
    f8be:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f8c2:	f894 2181 	ldrb.w	r2, [r4, #385]	; 0x181
    f8c6:	429a      	cmp	r2, r3
    f8c8:	f000 80ce 	beq.w	fa68 <isr+0x1388>
		(((_radio.fc_req == 0) &&
    f8cc:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	      (_radio.fc_req != _radio.fc_ack) &&
    f8d0:	b933      	cbnz	r3, f8e0 <isr+0x1200>
		   _radio.conn_curr->handle)) ||
    f8d2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    f8d6:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
    f8da:	8c1b      	ldrh	r3, [r3, #32]
    f8dc:	429a      	cmp	r2, r3
    f8de:	d010      	beq.n	f902 <isr+0x1222>
		 ((_radio.fc_req != 0) &&
    f8e0:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)) ||
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	f000 80bf 	beq.w	fa68 <isr+0x1388>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f8ea:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
		   _radio.conn_curr->handle)))))) {
    f8ee:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f8f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f8f6:	f8b3 2178 	ldrh.w	r2, [r3, #376]	; 0x178
    f8fa:	8c0b      	ldrh	r3, [r1, #32]
    f8fc:	429a      	cmp	r2, r3
    f8fe:	f040 80b3 	bne.w	fa68 <isr+0x1388>
		if (pdu_data_rx->len != 0) {
    f902:	f898 5009 	ldrb.w	r5, [r8, #9]
    f906:	2d00      	cmp	r5, #0
    f908:	f000 80b7 	beq.w	fa7a <isr+0x139a>
			if (_radio.conn_curr->enc_rx) {
    f90c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f910:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f914:	f015 0510 	ands.w	r5, r5, #16
    f918:	d00e      	beq.n	f938 <isr+0x1258>
				done = radio_ccm_is_done();
    f91a:	f003 f84f 	bl	129bc <radio_ccm_is_done>
				LL_ASSERT(done);
    f91e:	b950      	cbnz	r0, f936 <isr+0x1256>
    f920:	4b2a      	ldr	r3, [pc, #168]	; (f9cc <isr+0x12ec>)
    f922:	9301      	str	r3, [sp, #4]
    f924:	9300      	str	r3, [sp, #0]
    f926:	4b2a      	ldr	r3, [pc, #168]	; (f9d0 <isr+0x12f0>)
    f928:	4a2a      	ldr	r2, [pc, #168]	; (f9d4 <isr+0x12f4>)
    f92a:	681c      	ldr	r4, [r3, #0]
    f92c:	492a      	ldr	r1, [pc, #168]	; (f9d8 <isr+0x12f8>)
    f92e:	4b2b      	ldr	r3, [pc, #172]	; (f9dc <isr+0x12fc>)
    f930:	482b      	ldr	r0, [pc, #172]	; (f9e0 <isr+0x1300>)
    f932:	f7ff ba91 	b.w	ee58 <isr+0x778>
				ccm_rx_increment = 1;
    f936:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f938:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f93c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f940:	06d9      	lsls	r1, r3, #27
    f942:	d42c      	bmi.n	f99e <isr+0x12be>
			    (_radio.conn_curr->pause_rx &&
    f944:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    f948:	f898 3008 	ldrb.w	r3, [r8, #8]
    f94c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f950:	f012 0f04 	tst.w	r2, #4
    f954:	d146      	bne.n	f9e4 <isr+0x1304>
			_radio.conn_curr->appto_expire = 0;
    f956:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f958:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f95c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f960:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f964:	d004      	beq.n	f970 <isr+0x1290>
    f966:	2b02      	cmp	r3, #2
    f968:	d877      	bhi.n	fa5a <isr+0x137a>
				*rx_enqueue = 1;
    f96a:	2301      	movs	r3, #1
    f96c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f970:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f974:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f978:	f082 0202 	eor.w	r2, r2, #2
    f97c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f980:	2d00      	cmp	r5, #0
    f982:	d071      	beq.n	fa68 <isr+0x1388>
				_radio.conn_curr->ccm_rx.counter++;
    f984:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f988:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f98c:	f119 0001 	adds.w	r0, r9, #1
    f990:	f14a 0100 	adc.w	r1, sl, #0
    f994:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f998:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f99c:	e064      	b.n	fa68 <isr+0x1388>
			     !radio_ccm_mic_is_valid()) ||
    f99e:	f003 f82b 	bl	129f8 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f9a2:	2800      	cmp	r0, #0
    f9a4:	d1ce      	bne.n	f944 <isr+0x1264>
				_radio.state = STATE_CLOSE;
    f9a6:	2303      	movs	r3, #3
    f9a8:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f9aa:	f002 fdb5 	bl	12518 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f9ae:	f002 fdd1 	bl	12554 <radio_is_ready>
    f9b2:	4605      	mov	r5, r0
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d044      	beq.n	fa42 <isr+0x1362>
    f9b8:	4b04      	ldr	r3, [pc, #16]	; (f9cc <isr+0x12ec>)
    f9ba:	9301      	str	r3, [sp, #4]
    f9bc:	9300      	str	r3, [sp, #0]
    f9be:	4b04      	ldr	r3, [pc, #16]	; (f9d0 <isr+0x12f0>)
    f9c0:	681c      	ldr	r4, [r3, #0]
    f9c2:	4b06      	ldr	r3, [pc, #24]	; (f9dc <isr+0x12fc>)
    f9c4:	f7fe beec 	b.w	e7a0 <isr+0xc0>
    f9c8:	20000a4c 	.word	0x20000a4c
    f9cc:	00014c55 	.word	0x00014c55
    f9d0:	20003aa4 	.word	0x20003aa4
    f9d4:	000159c3 	.word	0x000159c3
    f9d8:	00015a12 	.word	0x00015a12
    f9dc:	00016ec3 	.word	0x00016ec3
    f9e0:	0001751b 	.word	0x0001751b
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f9e4:	f003 0103 	and.w	r1, r3, #3
    f9e8:	2903      	cmp	r1, #3
    f9ea:	d1dc      	bne.n	f9a6 <isr+0x12c6>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f9ec:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f9f0:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f9f4:	f1be 0f00 	cmp.w	lr, #0
    f9f8:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f9fc:	db15      	blt.n	fa2a <isr+0x134a>
	       (!conn->role &&
    f9fe:	b922      	cbnz	r2, fa0a <isr+0x132a>
		((!conn->refresh &&
    fa00:	2902      	cmp	r1, #2
    fa02:	d0a8      	beq.n	f956 <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa04:	2911      	cmp	r1, #17
    fa06:	d8ce      	bhi.n	f9a6 <isr+0x12c6>
    fa08:	e009      	b.n	fa1e <isr+0x133e>
		 (conn->refresh &&
    fa0a:	1e8a      	subs	r2, r1, #2
    fa0c:	b2d2      	uxtb	r2, r2
    fa0e:	2a09      	cmp	r2, #9
    fa10:	d8f8      	bhi.n	fa04 <isr+0x1324>
    fa12:	f240 2e05 	movw	lr, #517	; 0x205
    fa16:	fa2e f202 	lsr.w	r2, lr, r2
    fa1a:	07d2      	lsls	r2, r2, #31
    fa1c:	d49b      	bmi.n	f956 <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa1e:	4ab0      	ldr	r2, [pc, #704]	; (fce0 <isr+0x1600>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa20:	fa22 f101 	lsr.w	r1, r2, r1
    fa24:	07ca      	lsls	r2, r1, #31
    fa26:	d5be      	bpl.n	f9a6 <isr+0x12c6>
    fa28:	e795      	b.n	f956 <isr+0x1276>
	       (conn->role &&
    fa2a:	b92a      	cbnz	r2, fa38 <isr+0x1358>
		((!conn->refresh &&
    fa2c:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fa2e:	d092      	beq.n	f956 <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fa30:	2911      	cmp	r1, #17
    fa32:	d8b8      	bhi.n	f9a6 <isr+0x12c6>
    fa34:	4aab      	ldr	r2, [pc, #684]	; (fce4 <isr+0x1604>)
    fa36:	e7f3      	b.n	fa20 <isr+0x1340>
		 (conn->refresh &&
    fa38:	1e8a      	subs	r2, r1, #2
    fa3a:	2a01      	cmp	r2, #1
    fa3c:	d98b      	bls.n	f956 <isr+0x1276>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    fa3e:	290b      	cmp	r1, #11
    fa40:	e7f5      	b.n	fa2e <isr+0x134e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    fa42:	213d      	movs	r1, #61	; 0x3d
    fa44:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa48:	f7fb fc40 	bl	b2cc <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    fa4c:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fa50:	f7fb fa7c 	bl	af4c <connection_release>
				_radio.conn_curr = NULL;
    fa54:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    fa58:	e6e1      	b.n	f81e <isr+0x113e>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    fa5a:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    fa5e:	4640      	mov	r0, r8
    fa60:	f7fd fcfe 	bl	d460 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    fa64:	2800      	cmp	r0, #0
    fa66:	d083      	beq.n	f970 <isr+0x1290>
		_radio.conn_curr->supervision_expire = 0;
    fa68:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire = 0;
    fa6c:	2300      	movs	r3, #0
    fa6e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	u8_t crc_close = 0;
    fa72:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    fa74:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    fa78:	e03e      	b.n	faf8 <isr+0x1418>
		} else if ((_radio.conn_curr->enc_rx) ||
    fa7a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    fa7e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    fa82:	f013 0f14 	tst.w	r3, #20
    fa86:	f43f af73 	beq.w	f970 <isr+0x1290>
					    (conn->latency + 6)) ?
    fa8a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    fa8c:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    fa90:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    fa92:	4299      	cmp	r1, r3
    fa94:	bfc4      	itt	gt
    fa96:	1f8b      	subgt	r3, r1, #6
    fa98:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    fa9a:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    fa9e:	bfcc      	ite	gt
    faa0:	b29b      	uxthgt	r3, r3
    faa2:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    faa4:	4298      	cmp	r0, r3
				conn->appto_reload = appto_reload_new;
    faa6:	bf1e      	ittt	ne
    faa8:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    faac:	2300      	movne	r3, #0
    faae:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    fab2:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    fab6:	2b00      	cmp	r3, #0
    fab8:	f47f af5a 	bne.w	f970 <isr+0x1290>
				conn->appto_expire = conn->appto_reload;
    fabc:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    fac0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    fac4:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
    fac8:	e752      	b.n	f970 <isr+0x1290>
		if (_radio.crc_expire == 0) {
    faca:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    face:	b913      	cbnz	r3, fad6 <isr+0x13f6>
			_radio.crc_expire = 2;
    fad0:	2302      	movs	r3, #2
    fad2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		_radio.crc_expire--;
    fad6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fada:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
		_radio.crc_expire--;
    fade:	3b01      	subs	r3, #1
    fae0:	b2db      	uxtb	r3, r3
    fae2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    fae6:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    faea:	fab3 f583 	clz	r5, r3
    faee:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    faf0:	bb86      	cbnz	r6, fb54 <isr+0x1474>
			_radio.conn_curr->supervision_expire =
    faf2:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    faf4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    faf8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fafc:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fafe:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    fb02:	f7fd fb67 	bl	d1d4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb06:	7d23      	ldrb	r3, [r4, #20]
    fb08:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    fb0a:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb0e:	d010      	beq.n	fb32 <isr+0x1452>
    fb10:	bb15      	cbnz	r5, fb58 <isr+0x1478>
    fb12:	b137      	cbz	r7, fb22 <isr+0x1442>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fb14:	f898 3008 	ldrb.w	r3, [r8, #8]
    fb18:	06d8      	lsls	r0, r3, #27
    fb1a:	d402      	bmi.n	fb22 <isr+0x1442>
			 (pdu_data_tx->len == 0)) ||
    fb1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    fb1e:	785b      	ldrb	r3, [r3, #1]
    fb20:	b1d3      	cbz	r3, fb58 <isr+0x1478>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    fb22:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    fb26:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	bf0c      	ite	eq
    fb2e:	2302      	moveq	r3, #2
    fb30:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    fb32:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb34:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    fb36:	d12f      	bne.n	fb98 <isr+0x14b8>
		if (_radio.role == ROLE_MASTER) {
    fb38:	7ce3      	ldrb	r3, [r4, #19]
    fb3a:	2b04      	cmp	r3, #4
    fb3c:	d10e      	bne.n	fb5c <isr+0x147c>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    fb3e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fb42:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    fb46:	f369 12c7 	bfi	r2, r9, #7, #1
    fb4a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    fb4e:	f002 fce3 	bl	12518 <radio_disable>
    fb52:	e664      	b.n	f81e <isr+0x113e>
	struct radio_pdu_node_tx *tx_release = NULL;
    fb54:	2600      	movs	r6, #0
    fb56:	e7cf      	b.n	faf8 <isr+0x1418>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    fb58:	2303      	movs	r3, #3
    fb5a:	e7ea      	b.n	fb32 <isr+0x1452>
			radio_switch_complete_and_disable();
    fb5c:	f002 fd4c 	bl	125f8 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    fb60:	9910      	ldr	r1, [sp, #64]	; 0x40
    fb62:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fb66:	780b      	ldrb	r3, [r1, #0]
    fb68:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    fb6c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    fb70:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fb74:	f362 0382 	bfi	r3, r2, #2, #1
    fb78:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    fb7a:	f7fa fb43 	bl	a204 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    fb7e:	f002 fce9 	bl	12554 <radio_is_ready>
    fb82:	2800      	cmp	r0, #0
    fb84:	f43f ae4b 	beq.w	f81e <isr+0x113e>
    fb88:	4b57      	ldr	r3, [pc, #348]	; (fce8 <isr+0x1608>)
    fb8a:	9301      	str	r3, [sp, #4]
    fb8c:	9300      	str	r3, [sp, #0]
    fb8e:	4b57      	ldr	r3, [pc, #348]	; (fcec <isr+0x160c>)
    fb90:	681c      	ldr	r4, [r3, #0]
    fb92:	4b57      	ldr	r3, [pc, #348]	; (fcf0 <isr+0x1610>)
    fb94:	f7fe be04 	b.w	e7a0 <isr+0xc0>
		radio_tmr_tifs_set(RADIO_TIFS);
    fb98:	2096      	movs	r0, #150	; 0x96
    fb9a:	f002 fdb3 	bl	12704 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    fb9e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fba2:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fba6:	f000 0007 	and.w	r0, r0, #7
    fbaa:	f002 fd0f 	bl	125cc <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    fbae:	f002 fe85 	bl	128bc <radio_tmr_end_capture>
    fbb2:	e7d5      	b.n	fb60 <isr+0x1480>
		LL_ASSERT(0);
    fbb4:	4b4c      	ldr	r3, [pc, #304]	; (fce8 <isr+0x1608>)
    fbb6:	9301      	str	r3, [sp, #4]
    fbb8:	9300      	str	r3, [sp, #0]
    fbba:	4b4c      	ldr	r3, [pc, #304]	; (fcec <isr+0x160c>)
    fbbc:	681c      	ldr	r4, [r3, #0]
    fbbe:	4b4d      	ldr	r3, [pc, #308]	; (fcf4 <isr+0x1614>)
    fbc0:	f7fe be89 	b.w	e8d6 <isr+0x1f6>
	switch (_radio.role) {
    fbc4:	7ce2      	ldrb	r2, [r4, #19]
    fbc6:	2a04      	cmp	r2, #4
    fbc8:	f200 824c 	bhi.w	10064 <__kernel_ram_size+0x64>
    fbcc:	e8df f012 	tbh	[pc, r2, lsl #1]
    fbd0:	00050238 	.word	0x00050238
    fbd4:	00c7005a 	.word	0x00c7005a
    fbd8:	00c7      	.short	0x00c7
	if ((_radio.state == STATE_CLOSE) &&
    fbda:	2b03      	cmp	r3, #3
    fbdc:	d109      	bne.n	fbf2 <isr+0x1512>
	    (_radio.advertiser.chan_map_current != 0)) {
    fbde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    fbe2:	0759      	lsls	r1, r3, #29
    fbe4:	d005      	beq.n	fbf2 <isr+0x1512>
		adv_setup();
    fbe6:	f7fb fa8b 	bl	b100 <adv_setup>
		radio_tx_enable();
    fbea:	f002 fc8f 	bl	1250c <radio_tx_enable>
    fbee:	f7fe bdf3 	b.w	e7d8 <isr+0xf8>
		radio_filter_disable();
    fbf2:	f002 fd4b 	bl	1268c <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    fbf6:	7d23      	ldrb	r3, [r4, #20]
    fbf8:	2b03      	cmp	r3, #3
    fbfa:	f040 8095 	bne.w	fd28 <isr+0x1648>
		    (!_radio.advertiser.is_hdcd)) {
    fbfe:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    fc02:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    fc06:	f040 808f 	bne.w	fd28 <isr+0x1648>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    fc0a:	2201      	movs	r2, #1
    fc0c:	a910      	add	r1, sp, #64	; 0x40
    fc0e:	6860      	ldr	r0, [r4, #4]
    fc10:	f003 fcd0 	bl	135b4 <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    fc14:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc18:	4837      	ldr	r0, [pc, #220]	; (fcf8 <isr+0x1618>)
			random_delay %= 10;
    fc1a:	230a      	movs	r3, #10
    fc1c:	fbb1 f2f3 	udiv	r2, r1, r3
    fc20:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    fc24:	3201      	adds	r2, #1
    fc26:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc28:	b2d6      	uxtb	r6, r2
    fc2a:	fba6 0100 	umull	r0, r1, r6, r0
    fc2e:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    fc30:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
					HAL_TICKER_US_TO_TICKS(random_delay *
    fc34:	fb03 1106 	mla	r1, r3, r6, r1
    fc38:	a327      	add	r3, pc, #156	; (adr r3, fcd8 <isr+0x15f8>)
    fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc3e:	f7f0 fae9 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    fc42:	f640 734b 	movw	r3, #3915	; 0xf4b
    fc46:	9306      	str	r3, [sp, #24]
    fc48:	4b2c      	ldr	r3, [pc, #176]	; (fcfc <isr+0x161c>)
    fc4a:	9305      	str	r3, [sp, #20]
    fc4c:	9504      	str	r5, [sp, #16]
    fc4e:	b283      	uxth	r3, r0
    fc50:	9503      	str	r5, [sp, #12]
    fc52:	9502      	str	r5, [sp, #8]
    fc54:	9501      	str	r5, [sp, #4]
    fc56:	9500      	str	r5, [sp, #0]
    fc58:	2205      	movs	r2, #5
    fc5a:	4629      	mov	r1, r5
    fc5c:	4628      	mov	r0, r5
    fc5e:	f7f7 ffad 	bl	7bbc <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc62:	f030 0302 	bics.w	r3, r0, #2
    fc66:	d05f      	beq.n	fd28 <isr+0x1648>
    fc68:	7ca3      	ldrb	r3, [r4, #18]
    fc6a:	2b05      	cmp	r3, #5
    fc6c:	d05c      	beq.n	fd28 <isr+0x1648>
    fc6e:	4b1e      	ldr	r3, [pc, #120]	; (fce8 <isr+0x1608>)
    fc70:	9301      	str	r3, [sp, #4]
    fc72:	9300      	str	r3, [sp, #0]
    fc74:	4b1d      	ldr	r3, [pc, #116]	; (fcec <isr+0x160c>)
    fc76:	4a22      	ldr	r2, [pc, #136]	; (fd00 <isr+0x1620>)
    fc78:	681c      	ldr	r4, [r3, #0]
    fc7a:	4922      	ldr	r1, [pc, #136]	; (fd04 <isr+0x1624>)
    fc7c:	4b22      	ldr	r3, [pc, #136]	; (fd08 <isr+0x1628>)
    fc7e:	4823      	ldr	r0, [pc, #140]	; (fd0c <isr+0x162c>)
    fc80:	f7ff b8ea 	b.w	ee58 <isr+0x778>
	if (_radio.state == STATE_CLOSE) {
    fc84:	2b03      	cmp	r3, #3
    fc86:	d143      	bne.n	fd10 <isr+0x1630>
		radio_tmr_tifs_set(RADIO_TIFS);
    fc88:	2096      	movs	r0, #150	; 0x96
    fc8a:	f002 fd3b 	bl	12704 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fc8e:	2300      	movs	r3, #0
    fc90:	4619      	mov	r1, r3
    fc92:	461a      	mov	r2, r3
    fc94:	4618      	mov	r0, r3
    fc96:	f002 fca5 	bl	125e4 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    fc9a:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    fc9e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
		radio_pkt_rx_set(_radio.packet_rx
    fca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    fca6:	3008      	adds	r0, #8
    fca8:	f002 fc10 	bl	124cc <radio_pkt_rx_set>
		radio_rssi_measure();
    fcac:	f002 fcb2 	bl	12614 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    fcb0:	f001 ff48 	bl	11b44 <ctrl_rl_enabled>
    fcb4:	b138      	cbz	r0, fcc6 <isr+0x15e6>
			u8_t count, *irks = ctrl_irks_get(&count);
    fcb6:	a810      	add	r0, sp, #64	; 0x40
    fcb8:	f001 fc7c 	bl	115b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fcbc:	4601      	mov	r1, r0
    fcbe:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    fcc2:	f002 fea3 	bl	12a0c <radio_ar_configure>
		_radio.state = STATE_RX;
    fcc6:	2301      	movs	r3, #1
    fcc8:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    fcca:	f002 fc19 	bl	12500 <radio_rx_enable>
    fcce:	f7fe bd83 	b.w	e7d8 <isr+0xf8>
    fcd2:	bf00      	nop
    fcd4:	f3af 8000 	nop.w
    fcd8:	1afd498d 	.word	0x1afd498d
    fcdc:	00000007 	.word	0x00000007
    fce0:	00022060 	.word	0x00022060
    fce4:	00022040 	.word	0x00022040
    fce8:	00014c55 	.word	0x00014c55
    fcec:	20003aa4 	.word	0x20003aa4
    fcf0:	00016ed3 	.word	0x00016ed3
    fcf4:	00016edf 	.word	0x00016edf
    fcf8:	d4a51000 	.word	0xd4a51000
    fcfc:	0000ab1d 	.word	0x0000ab1d
    fd00:	000159c3 	.word	0x000159c3
    fd04:	00015a12 	.word	0x00015a12
    fd08:	00016ef2 	.word	0x00016ef2
    fd0c:	00017541 	.word	0x00017541
		radio_filter_disable();
    fd10:	f002 fcbc 	bl	1268c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    fd14:	7d23      	ldrb	r3, [r4, #20]
    fd16:	2b05      	cmp	r3, #5
    fd18:	d106      	bne.n	fd28 <isr+0x1648>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fd1a:	2300      	movs	r3, #0
    fd1c:	9300      	str	r3, [sp, #0]
    fd1e:	2204      	movs	r2, #4
    fd20:	4619      	mov	r1, r3
    fd22:	4618      	mov	r0, r3
    fd24:	f7f7 ff98 	bl	7c58 <ticker_stop>
	_radio.role = ROLE_NONE;
    fd28:	2500      	movs	r5, #0
    fd2a:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    fd2c:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    fd2e:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    fd30:	f002 fd66 	bl	12800 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fd34:	462a      	mov	r2, r5
    fd36:	4629      	mov	r1, r5
    fd38:	4628      	mov	r0, r5
    fd3a:	4bab      	ldr	r3, [pc, #684]	; (ffe8 <isr+0x1908>)
    fd3c:	f7f7 f92e 	bl	6f9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    fd40:	4605      	mov	r5, r0
    fd42:	2800      	cmp	r0, #0
    fd44:	f000 8196 	beq.w	10074 <__kernel_ram_size+0x74>
    fd48:	4ba8      	ldr	r3, [pc, #672]	; (ffec <isr+0x190c>)
    fd4a:	9301      	str	r3, [sp, #4]
    fd4c:	9300      	str	r3, [sp, #0]
    fd4e:	4ba8      	ldr	r3, [pc, #672]	; (fff0 <isr+0x1910>)
    fd50:	4aa8      	ldr	r2, [pc, #672]	; (fff4 <isr+0x1914>)
    fd52:	681c      	ldr	r4, [r3, #0]
    fd54:	49a8      	ldr	r1, [pc, #672]	; (fff8 <isr+0x1918>)
    fd56:	4ba9      	ldr	r3, [pc, #676]	; (fffc <isr+0x191c>)
    fd58:	48a9      	ldr	r0, [pc, #676]	; (10000 <__kernel_ram_size>)
    fd5a:	f7ff b87d 	b.w	ee58 <isr+0x778>
	if (_radio.conn_curr == 0) {
    fd5e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fd62:	2800      	cmp	r0, #0
    fd64:	d0e0      	beq.n	fd28 <isr+0x1648>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    fd66:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    fd6a:	b181      	cbz	r1, fd8e <isr+0x16ae>
    fd6c:	7ce3      	ldrb	r3, [r4, #19]
    fd6e:	2b03      	cmp	r3, #3
    fd70:	d003      	beq.n	fd7a <isr+0x169a>
    fd72:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fd76:	07da      	lsls	r2, r3, #31
    fd78:	d509      	bpl.n	fd8e <isr+0x16ae>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fd7a:	f7fb faa7 	bl	b2cc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fd7e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fd82:	f7fb f8e3 	bl	af4c <connection_release>
			_radio.conn_curr = NULL;
    fd86:	2300      	movs	r3, #0
    fd88:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fd8c:	e7cc      	b.n	fd28 <isr+0x1648>
	latency_event = _radio.conn_curr->latency_event;
    fd8e:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    fd92:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
	elapsed_event = latency_event + 1;
    fd96:	f10b 0601 	add.w	r6, fp, #1
    fd9a:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    fd9c:	2f00      	cmp	r7, #0
    fd9e:	f000 8084 	beq.w	feaa <isr+0x17ca>
		if (_radio.role == ROLE_SLAVE) {
    fda2:	7ce3      	ldrb	r3, [r4, #19]
    fda4:	2b03      	cmp	r3, #3
    fda6:	d173      	bne.n	fe90 <isr+0x17b0>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fda8:	f002 fd7c 	bl	128a4 <radio_tmr_aa_restore>
    fdac:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    fdae:	f002 fd7f 	bl	128b0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    fdb2:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				addr_us_get(_radio.conn_curr->phy_rx);
    fdb6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    fdba:	f003 0307 	and.w	r3, r3, #7
    fdbe:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    fdc0:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    fdc4:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    fdc6:	d052      	beq.n	fe6e <isr+0x178e>
		return 40;
    fdc8:	2b04      	cmp	r3, #4
    fdca:	bf0c      	ite	eq
    fdcc:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    fdd0:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fdd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
    fdd8:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    fdda:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    fddc:	930a      	str	r3, [sp, #40]	; 0x28
    fdde:	f8df a230 	ldr.w	sl, [pc, #560]	; 10010 <__kernel_ram_size+0x10>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fde2:	a37f      	add	r3, pc, #508	; (adr r3, ffe0 <isr+0x1900>)
    fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    fde8:	d844      	bhi.n	fe74 <isr+0x1794>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fdea:	fba0 010a 	umull	r0, r1, r0, sl
    fdee:	f7f0 fa11 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fdf4:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdf6:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fdfa:	a379      	add	r3, pc, #484	; (adr r3, ffe0 <isr+0x1900>)
    fdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe00:	fba0 010a 	umull	r0, r1, r0, sl
    fe04:	f7f0 fa06 	bl	214 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    fe08:	2300      	movs	r3, #0
    fe0a:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    fe0c:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    fe0e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fe12:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    fe16:	b3ab      	cbz	r3, fe84 <isr+0x17a4>
				if (pdu_data_tx->len ||
    fe18:	795b      	ldrb	r3, [r3, #5]
    fe1a:	b913      	cbnz	r3, fe22 <isr+0x1742>
    fe1c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    fe20:	b10b      	cbz	r3, fe26 <isr+0x1746>
					_radio.conn_curr->latency_event = 0;
    fe22:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    fe24:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    fe26:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    fe2a:	2200      	movs	r2, #0
    fe2c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    fe2e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fe32:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    fe36:	b1c3      	cbz	r3, fe6a <isr+0x178a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    fe38:	429e      	cmp	r6, r3
    fe3a:	f080 80b2 	bcs.w	ffa2 <isr+0x18c2>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe3e:	1b9b      	subs	r3, r3, r6
    fe40:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    fe42:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe44:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    fe46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    fe4a:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    fe4c:	f240 80ab 	bls.w	ffa6 <isr+0x18c6>
			else if (_radio.role == ROLE_SLAVE) {
    fe50:	7ce3      	ldrb	r3, [r4, #19]
    fe52:	2b03      	cmp	r3, #3
    fe54:	d109      	bne.n	fe6a <isr+0x178a>
				if (latency_event != 0) {
    fe56:	f1bb 0f00 	cmp.w	fp, #0
    fe5a:	f040 80a4 	bne.w	ffa6 <isr+0x18c6>
					force = _radio.conn_curr->slave.force & 0x01;
    fe5e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fe60:	087b      	lsrs	r3, r7, #1
					if (force) {
    fe62:	f017 0701 	ands.w	r7, r7, #1
    fe66:	d13d      	bne.n	fee4 <isr+0x1804>
					_radio.conn_curr->slave.force >>= 1;
    fe68:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    fe6a:	2700      	movs	r7, #0
    fe6c:	e03d      	b.n	feea <isr+0x180a>
		return 24;
    fe6e:	f04f 0818 	mov.w	r8, #24
    fe72:	e7af      	b.n	fdd4 <isr+0x16f4>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    fe74:	fba9 010a 	umull	r0, r1, r9, sl
    fe78:	f7f0 f9cc 	bl	214 <__aeabi_uldivmod>
    fe7c:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    fe7e:	f108 0030 	add.w	r0, r8, #48	; 0x30
    fe82:	e7ba      	b.n	fdfa <isr+0x171a>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fe84:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    fe88:	07db      	lsls	r3, r3, #31
    fe8a:	d5cc      	bpl.n	fe26 <isr+0x1746>
				_radio.conn_curr->latency_event =
    fe8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    fe8e:	e7c9      	b.n	fe24 <isr+0x1744>
		} else if (reason_peer) {
    fe90:	b149      	cbz	r1, fea6 <isr+0x17c6>
			_radio.conn_curr->master.terminate_ack = 1;
    fe92:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    fe96:	f043 0301 	orr.w	r3, r3, #1
    fe9a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    fe9e:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    fea2:	4645      	mov	r5, r8
    fea4:	e7bf      	b.n	fe26 <isr+0x1746>
	ticks_drift_minus = 0;
    fea6:	4688      	mov	r8, r1
    fea8:	e7fb      	b.n	fea2 <isr+0x17c2>
	else if (_radio.conn_curr->connect_expire) {
    feaa:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    feac:	b185      	cbz	r5, fed0 <isr+0x17f0>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    feae:	42ae      	cmp	r6, r5
    feb0:	d204      	bcs.n	febc <isr+0x17dc>
			_radio.conn_curr->connect_expire -= elapsed_event;
    feb2:	1bad      	subs	r5, r5, r6
    feb4:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    feb6:	463d      	mov	r5, r7
    feb8:	46a8      	mov	r8, r5
    feba:	e7b8      	b.n	fe2e <isr+0x174e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    febc:	213e      	movs	r1, #62	; 0x3e
    febe:	f7fb fa05 	bl	b2cc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fec2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
    fec6:	f7fb f841 	bl	af4c <connection_release>
			_radio.conn_curr = NULL;
    feca:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fece:	e72b      	b.n	fd28 <isr+0x1648>
		if (!_radio.conn_curr->supervision_expire) {
    fed0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    fed4:	f1b8 0f00 	cmp.w	r8, #0
    fed8:	d1ee      	bne.n	feb8 <isr+0x17d8>
			_radio.conn_curr->supervision_expire =
    feda:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    fedc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fee0:	4645      	mov	r5, r8
    fee2:	e7a4      	b.n	fe2e <isr+0x174e>
						_radio.conn_curr->slave.force |=
    fee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fee8:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    feea:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    feee:	b123      	cbz	r3, fefa <isr+0x181a>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    fef0:	429e      	cmp	r6, r3
    fef2:	d25a      	bcs.n	ffaa <isr+0x18ca>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fef4:	1b9b      	subs	r3, r3, r6
    fef6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fefa:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    fefe:	b123      	cbz	r3, ff0a <isr+0x182a>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    ff00:	429e      	cmp	r6, r3
    ff02:	d254      	bcs.n	ffae <isr+0x18ce>
			_radio.conn_curr->apto_expire -= elapsed_event;
    ff04:	1b9b      	subs	r3, r3, r6
    ff06:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    ff0a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ff0e:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    ff12:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    ff16:	b123      	cbz	r3, ff22 <isr+0x1842>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    ff18:	429e      	cmp	r6, r3
    ff1a:	d27b      	bcs.n	10014 <__kernel_ram_size+0x14>
			_radio.conn_curr->appto_expire -= elapsed_event;
    ff1c:	1b9e      	subs	r6, r3, r6
    ff1e:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    ff22:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    ff26:	428b      	cmp	r3, r1
    ff28:	d006      	beq.n	ff38 <isr+0x1858>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    ff2a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    ff2e:	3b01      	subs	r3, #1
    ff30:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    ff32:	bf9c      	itt	ls
    ff34:	2300      	movls	r3, #0
    ff36:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    ff38:	b917      	cbnz	r7, ff40 <isr+0x1860>
    ff3a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    ff3c:	455b      	cmp	r3, fp
    ff3e:	d07d      	beq.n	1003c <__kernel_ram_size+0x3c>
		lazy = _radio.conn_curr->latency_event + 1;
    ff40:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    ff42:	3301      	adds	r3, #1
    ff44:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    ff46:	b935      	cbnz	r5, ff56 <isr+0x1876>
    ff48:	f1b8 0f00 	cmp.w	r8, #0
    ff4c:	d103      	bne.n	ff56 <isr+0x1876>
    ff4e:	b913      	cbnz	r3, ff56 <isr+0x1876>
	    (lazy != 0) || (force != 0)) {
    ff50:	2f00      	cmp	r7, #0
    ff52:	f43f aee9 	beq.w	fd28 <isr+0x1648>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff56:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    ff5a:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff5c:	3207      	adds	r2, #7
		ticker_status =
    ff5e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    ff60:	b2d6      	uxtb	r6, r2
		ticker_status =
    ff62:	4a28      	ldr	r2, [pc, #160]	; (10004 <__kernel_ram_size+0x4>)
    ff64:	9205      	str	r2, [sp, #20]
    ff66:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    ff68:	9606      	str	r6, [sp, #24]
		ticker_status =
    ff6a:	9704      	str	r7, [sp, #16]
    ff6c:	9102      	str	r1, [sp, #8]
    ff6e:	9101      	str	r1, [sp, #4]
    ff70:	f8cd 8000 	str.w	r8, [sp]
    ff74:	4632      	mov	r2, r6
    ff76:	4608      	mov	r0, r1
    ff78:	f7f7 fe20 	bl	7bbc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff7c:	f030 0302 	bics.w	r3, r0, #2
    ff80:	f43f aed2 	beq.w	fd28 <isr+0x1648>
    ff84:	7ca3      	ldrb	r3, [r4, #18]
    ff86:	429e      	cmp	r6, r3
    ff88:	f43f aece 	beq.w	fd28 <isr+0x1648>
    ff8c:	4b17      	ldr	r3, [pc, #92]	; (ffec <isr+0x190c>)
    ff8e:	9301      	str	r3, [sp, #4]
    ff90:	9300      	str	r3, [sp, #0]
    ff92:	4b17      	ldr	r3, [pc, #92]	; (fff0 <isr+0x1910>)
    ff94:	4a17      	ldr	r2, [pc, #92]	; (fff4 <isr+0x1914>)
    ff96:	681c      	ldr	r4, [r3, #0]
    ff98:	4917      	ldr	r1, [pc, #92]	; (fff8 <isr+0x1918>)
    ff9a:	4b1b      	ldr	r3, [pc, #108]	; (10008 <__kernel_ram_size+0x8>)
    ff9c:	481b      	ldr	r0, [pc, #108]	; (1000c <__kernel_ram_size+0xc>)
    ff9e:	f7fe bf5b 	b.w	ee58 <isr+0x778>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    ffa2:	2108      	movs	r1, #8
    ffa4:	e6e9      	b.n	fd7a <isr+0x169a>
				force = 1;
    ffa6:	2701      	movs	r7, #1
    ffa8:	e79f      	b.n	feea <isr+0x180a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    ffaa:	2122      	movs	r1, #34	; 0x22
    ffac:	e6e5      	b.n	fd7a <isr+0x169a>
			_radio.conn_curr->apto_expire = 0;
    ffae:	2300      	movs	r3, #0
    ffb0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    ffb4:	2002      	movs	r0, #2
    ffb6:	f7f9 fd71 	bl	9a9c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ffba:	b938      	cbnz	r0, ffcc <isr+0x18ec>
    ffbc:	4b0b      	ldr	r3, [pc, #44]	; (ffec <isr+0x190c>)
    ffbe:	9301      	str	r3, [sp, #4]
    ffc0:	9300      	str	r3, [sp, #0]
    ffc2:	4b0b      	ldr	r3, [pc, #44]	; (fff0 <isr+0x1910>)
    ffc4:	681c      	ldr	r4, [r3, #0]
    ffc6:	4b10      	ldr	r3, [pc, #64]	; (10008 <__kernel_ram_size+0x8>)
    ffc8:	f7fe be0c 	b.w	ebe4 <isr+0x504>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    ffcc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    ffd0:	8c1b      	ldrh	r3, [r3, #32]
    ffd2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    ffd4:	230a      	movs	r3, #10
    ffd6:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    ffd8:	f7fa fbfc 	bl	a7d4 <packet_rx_enqueue>
    ffdc:	e795      	b.n	ff0a <isr+0x182a>
    ffde:	bf00      	nop
    ffe0:	1afd498d 	.word	0x1afd498d
    ffe4:	00000007 	.word	0x00000007
    ffe8:	20003d98 	.word	0x20003d98
    ffec:	00014c55 	.word	0x00014c55
    fff0:	20003aa4 	.word	0x20003aa4
    fff4:	000159c3 	.word	0x000159c3
    fff8:	00015a12 	.word	0x00015a12
    fffc:	00016fc3 	.word	0x00016fc3
   10000:	000179f3 	.word	0x000179f3
   10004:	0000ab69 	.word	0x0000ab69
   10008:	00016f00 	.word	0x00016f00
   1000c:	000175af 	.word	0x000175af
   10010:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->appto_expire = 0;
   10014:	2300      	movs	r3, #0
   10016:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1001a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   1001e:	2b00      	cmp	r3, #0
   10020:	f47f af7f 	bne.w	ff22 <isr+0x1842>
   10024:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   10028:	428b      	cmp	r3, r1
   1002a:	f47f af7e 	bne.w	ff2a <isr+0x184a>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1002e:	2307      	movs	r3, #7
   10030:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10034:	1e4b      	subs	r3, r1, #1
   10036:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   1003a:	e772      	b.n	ff22 <isr+0x1842>
	lazy = 0;
   1003c:	463b      	mov	r3, r7
   1003e:	e782      	b.n	ff46 <isr+0x1866>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10040:	3b04      	subs	r3, #4
   10042:	2b01      	cmp	r3, #1
   10044:	d90a      	bls.n	1005c <__kernel_ram_size+0x5c>
   10046:	4b15      	ldr	r3, [pc, #84]	; (1009c <__kernel_ram_size+0x9c>)
   10048:	9301      	str	r3, [sp, #4]
   1004a:	9300      	str	r3, [sp, #0]
   1004c:	4b14      	ldr	r3, [pc, #80]	; (100a0 <__kernel_ram_size+0xa0>)
   1004e:	4a15      	ldr	r2, [pc, #84]	; (100a4 <__kernel_ram_size+0xa4>)
   10050:	681c      	ldr	r4, [r3, #0]
   10052:	4915      	ldr	r1, [pc, #84]	; (100a8 <__kernel_ram_size+0xa8>)
   10054:	4b15      	ldr	r3, [pc, #84]	; (100ac <__kernel_ram_size+0xac>)
   10056:	4816      	ldr	r0, [pc, #88]	; (100b0 <__kernel_ram_size+0xb0>)
   10058:	f7fe befe 	b.w	ee58 <isr+0x778>
		_radio.state = STATE_NONE;
   1005c:	2300      	movs	r3, #0
   1005e:	7523      	strb	r3, [r4, #20]
   10060:	f7fe bbea 	b.w	e838 <isr+0x158>
		LL_ASSERT(0);
   10064:	4b0d      	ldr	r3, [pc, #52]	; (1009c <__kernel_ram_size+0x9c>)
   10066:	9301      	str	r3, [sp, #4]
   10068:	9300      	str	r3, [sp, #0]
   1006a:	4b0d      	ldr	r3, [pc, #52]	; (100a0 <__kernel_ram_size+0xa0>)
   1006c:	681c      	ldr	r4, [r3, #0]
   1006e:	4b0f      	ldr	r3, [pc, #60]	; (100ac <__kernel_ram_size+0xac>)
   10070:	f7fe bc31 	b.w	e8d6 <isr+0x1f6>
	clock_control_off(_radio.hf_clock, NULL);
   10074:	6820      	ldr	r0, [r4, #0]
   10076:	6843      	ldr	r3, [r0, #4]
   10078:	4629      	mov	r1, r5
   1007a:	685b      	ldr	r3, [r3, #4]
   1007c:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1007e:	2201      	movs	r2, #1
   10080:	4611      	mov	r1, r2
   10082:	4628      	mov	r0, r5
   10084:	f7f6 ff62 	bl	6f4c <mayfly_enable>
   10088:	f7fe bbd6 	b.w	e838 <isr+0x158>
		LL_ASSERT(0);
   1008c:	4b03      	ldr	r3, [pc, #12]	; (1009c <__kernel_ram_size+0x9c>)
   1008e:	9301      	str	r3, [sp, #4]
   10090:	9300      	str	r3, [sp, #0]
   10092:	4b03      	ldr	r3, [pc, #12]	; (100a0 <__kernel_ram_size+0xa0>)
   10094:	681c      	ldr	r4, [r3, #0]
   10096:	4b07      	ldr	r3, [pc, #28]	; (100b4 <__kernel_ram_size+0xb4>)
   10098:	f7fe bc1d 	b.w	e8d6 <isr+0x1f6>
   1009c:	00014c55 	.word	0x00014c55
   100a0:	20003aa4 	.word	0x20003aa4
   100a4:	000159c3 	.word	0x000159c3
   100a8:	00015a12 	.word	0x00015a12
   100ac:	00016f0f 	.word	0x00016f0f
   100b0:	00017625 	.word	0x00017625
   100b4:	00016f25 	.word	0x00016f25

000100b8 <radio_init>:
{
   100b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   100bc:	4e3d      	ldr	r6, [pc, #244]	; (101b4 <radio_init+0xfc>)
{
   100be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   100c0:	f89d c01c 	ldrb.w	ip, [sp, #28]
   100c4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   100c8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   100cc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   100d0:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   100d2:	f44f 70aa 	mov.w	r0, #340	; 0x154
   100d6:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   100da:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
   100de:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
   100e2:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   100e4:	f10c 0401 	add.w	r4, ip, #1
   100e8:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   100ea:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   100ec:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   100f0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   100f4:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   100f6:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   100f8:	bf98      	it	ls
   100fa:	eb02 0442 	addls.w	r4, r2, r2, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   100fe:	f8a6 8134 	strh.w	r8, [r6, #308]	; 0x134
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   10102:	bf88      	it	hi
   10104:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   10108:	f886 2154 	strb.w	r2, [r6, #340]	; 0x154
		_radio.packet_rx_data_pool_size =
   1010c:	bf8c      	ite	hi
   1010e:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10112:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   10116:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   1011a:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   1011e:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   10122:	bf8c      	ite	hi
   10124:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   10128:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   1012a:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   1012e:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
	_radio.packet_tx_count = (tx_count_max + 1);
   10132:	f886 c174 	strb.w	ip, [r6, #372]	; 0x174
	_radio.packet_rx = (void *)mem_radio;
   10136:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1013a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   1013e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10142:	f8b6 4136 	ldrh.w	r4, [r6, #310]	; 0x136
	_radio.pkt_tx = (void *)mem_radio;
   10146:	f8c6 016c 	str.w	r0, [r6, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1014a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1014c:	2234      	movs	r2, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   1014e:	f8c6 0170 	str.w	r0, [r6, #368]	; 0x170
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10152:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10154:	f8a6 2138 	strh.w	r2, [r6, #312]	; 0x138
	_radio.pkt_rx_data_pool = mem_radio;
   10158:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1015c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   10160:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   10162:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   10166:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1016a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1016e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10172:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   10176:	340a      	adds	r4, #10
   10178:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1017c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1017e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   10180:	f8a6 4168 	strh.w	r4, [r6, #360]	; 0x168
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   10184:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   10188:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   1018a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
   1018e:	f886 e140 	strb.w	lr, [r6, #320]	; 0x140
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10192:	f886 213a 	strb.w	r2, [r6, #314]	; 0x13a
	_radio.pkt_tx_data_pool = mem_radio;
   10196:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	if (retcode) {
   1019a:	d003      	beq.n	101a4 <radio_init+0xec>
		return (retcode + mem_size);
   1019c:	442c      	add	r4, r5
}
   1019e:	4620      	mov	r0, r4
   101a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   101a4:	2301      	movs	r3, #1
   101a6:	f886 3182 	strb.w	r3, [r6, #386]	; 0x182
	common_init();
   101aa:	f7f9 fd3b 	bl	9c24 <common_init>
	radio_setup();
   101ae:	f002 f8dd 	bl	1236c <radio_setup>
	return retcode;
   101b2:	e7f4      	b.n	1019e <radio_init+0xe6>
   101b4:	200008f0 	.word	0x200008f0

000101b8 <ll_reset>:
{
   101b8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   101ba:	2103      	movs	r1, #3
   101bc:	2005      	movs	r0, #5
   101be:	f7f9 fe1f 	bl	9e00 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   101c2:	2104      	movs	r1, #4
   101c4:	2006      	movs	r0, #6
   101c6:	f7f9 fe1b 	bl	9e00 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   101ca:	4c22      	ldr	r4, [pc, #136]	; (10254 <ll_reset+0x9c>)
   101cc:	2500      	movs	r5, #0
   101ce:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   101d2:	b2ab      	uxth	r3, r5
   101d4:	429a      	cmp	r2, r3
   101d6:	f105 0501 	add.w	r5, r5, #1
   101da:	d834      	bhi.n	10246 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   101dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   101e0:	f36f 13c7 	bfc	r3, #7, #1
   101e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   101e8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
   101ec:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   101ee:	f360 0300 	bfi	r3, r0, #0, #1
   101f2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   101f6:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   101f8:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   101fc:	fbb3 f3f2 	udiv	r3, r3, r2
   10200:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10204:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
	_radio.packet_rx_last = 0;
   10208:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1020c:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   1020e:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
	_radio.packet_release_last = 0;
   10212:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10216:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	_radio.fc_ack = _radio.fc_req;
   1021a:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
	_radio.advertiser.conn = NULL;
   1021e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
   10222:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10226:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
	_radio.packet_rx_acquire = 0;
   1022a:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
	_radio.packet_tx_last = 0;
   1022e:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	_radio.packet_release_first = 0;
   10232:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
	_radio.fc_ack = _radio.fc_req;
   10236:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
	ll_filter_reset(false);
   1023a:	f001 ff15 	bl	12068 <ll_filter_reset>
}
   1023e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   10242:	f7f9 bcef 	b.w	9c24 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10246:	1da8      	adds	r0, r5, #6
   10248:	21ff      	movs	r1, #255	; 0xff
   1024a:	b2c0      	uxtb	r0, r0
   1024c:	f7f9 fdd8 	bl	9e00 <role_disable>
   10250:	e7bd      	b.n	101ce <ll_reset+0x16>
   10252:	bf00      	nop
   10254:	200008f0 	.word	0x200008f0

00010258 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   10258:	4b02      	ldr	r3, [pc, #8]	; (10264 <ll_adv_is_enabled+0xc>)
   1025a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1025e:	09c0      	lsrs	r0, r0, #7
   10260:	4770      	bx	lr
   10262:	bf00      	nop
   10264:	200008f0 	.word	0x200008f0

00010268 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   10268:	4b04      	ldr	r3, [pc, #16]	; (1027c <radio_adv_filter_pol_get+0x14>)
   1026a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   1026e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   10270:	bfba      	itte	lt
   10272:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
   10276:	0980      	lsrlt	r0, r0, #6
   10278:	2000      	movge	r0, #0
}
   1027a:	4770      	bx	lr
   1027c:	200008f0 	.word	0x200008f0

00010280 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10280:	4a09      	ldr	r2, [pc, #36]	; (102a8 <ll_scan_is_enabled+0x28>)
   10282:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
   10286:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
   1028a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   1028e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   10292:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   10294:	f003 0301 	and.w	r3, r3, #1
   10298:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   1029c:	bf14      	ite	ne
   1029e:	2004      	movne	r0, #4
   102a0:	2000      	moveq	r0, #0
}
   102a2:	4318      	orrs	r0, r3
   102a4:	4770      	bx	lr
   102a6:	bf00      	nop
   102a8:	200008f0 	.word	0x200008f0

000102ac <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   102ac:	4b05      	ldr	r3, [pc, #20]	; (102c4 <radio_scan_filter_pol_get+0x18>)
   102ae:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   102b2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   102b6:	bf1c      	itt	ne
   102b8:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
   102bc:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   102c0:	4770      	bx	lr
   102c2:	bf00      	nop
   102c4:	200008f0 	.word	0x200008f0

000102c8 <radio_connect_enable>:
{
   102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   102cc:	f8df 8388 	ldr.w	r8, [pc, #904]	; 10658 <radio_connect_enable+0x390>
{
   102d0:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   102d2:	f8d8 6100 	ldr.w	r6, [r8, #256]	; 0x100
{
   102d6:	9303      	str	r3, [sp, #12]
   102d8:	4683      	mov	fp, r0
   102da:	468a      	mov	sl, r1
   102dc:	4691      	mov	r9, r2
   102de:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   102e0:	2e00      	cmp	r6, #0
   102e2:	f040 819d 	bne.w	10620 <radio_connect_enable+0x358>
	link = mem_acquire(&_radio.link_rx_free);
   102e6:	f508 70a4 	add.w	r0, r8, #328	; 0x148
   102ea:	f7f6 fd8c 	bl	6e06 <mem_acquire>
	if (!link) {
   102ee:	4607      	mov	r7, r0
   102f0:	b150      	cbz	r0, 10308 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   102f2:	f508 7086 	add.w	r0, r8, #268	; 0x10c
   102f6:	f7f6 fd86 	bl	6e06 <mem_acquire>
	if (!conn) {
   102fa:	4604      	mov	r4, r0
   102fc:	b930      	cbnz	r0, 1030c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   102fe:	f508 71a4 	add.w	r1, r8, #328	; 0x148
   10302:	4638      	mov	r0, r7
   10304:	f7f6 fd99 	bl	6e3a <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10308:	2007      	movs	r0, #7
   1030a:	e15c      	b.n	105c6 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1030c:	f898 30e1 	ldrb.w	r3, [r8, #225]	; 0xe1
   10310:	f36b 1386 	bfi	r3, fp, #6, #1
   10314:	f888 30e1 	strb.w	r3, [r8, #225]	; 0xe1
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   10318:	2206      	movs	r2, #6
   1031a:	4651      	mov	r1, sl
   1031c:	f108 00ea 	add.w	r0, r8, #234	; 0xea
   10320:	f7f1 fc7e 	bl	1c20 <memcpy>
	_radio.scanner.conn_latency = latency;
   10324:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10328:	f8a8 30f6 	strh.w	r3, [r8, #246]	; 0xf6
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1032c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   1032e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   10332:	f8a8 90f4 	strh.w	r9, [r8, #244]	; 0xf4
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10336:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   10338:	f8a8 30f8 	strh.w	r3, [r8, #248]	; 0xf8
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1033c:	f002 f8d2 	bl	124e4 <radio_tx_ready_delay_get>
   10340:	49bb      	ldr	r1, [pc, #748]	; (10630 <radio_connect_enable+0x368>)
   10342:	f200 4052 	addw	r0, r0, #1106	; 0x452
   10346:	a3b8      	add	r3, pc, #736	; (adr r3, 10628 <radio_connect_enable+0x360>)
   10348:	e9d3 2300 	ldrd	r2, r3, [r3]
   1034c:	fba0 0101 	umull	r0, r1, r0, r1
   10350:	f7ef ff60 	bl	214 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   10354:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   10358:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1035c:	f8c8 00fc 	str.w	r0, [r8, #252]	; 0xfc
	conn->handle = 0xFFFF;
   10360:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   10362:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 1065c <radio_connect_enable+0x394>
	conn->llcp_features = RADIO_BLE_FEAT;
   10366:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1036a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   1036e:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   10370:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   10374:	2104      	movs	r1, #4
   10376:	a805      	add	r0, sp, #20
   10378:	f7f7 fd7e 	bl	7e78 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1037c:	f8dd c014 	ldr.w	ip, [sp, #20]
   10380:	2000      	movs	r0, #0
   10382:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   10386:	231f      	movs	r3, #31
	transitions = 0;
   10388:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   1038a:	2101      	movs	r1, #1
	while (bit_idx--) {
   1038c:	3b01      	subs	r3, #1
   1038e:	b2db      	uxtb	r3, r3
   10390:	2bff      	cmp	r3, #255	; 0xff
   10392:	d103      	bne.n	1039c <radio_connect_enable+0xd4>
   10394:	b3d0      	cbz	r0, 1040c <radio_connect_enable+0x144>
   10396:	f8cd c014 	str.w	ip, [sp, #20]
   1039a:	e037      	b.n	1040c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   1039c:	fa2c fe03 	lsr.w	lr, ip, r3
   103a0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   103a4:	45d6      	cmp	lr, sl
   103a6:	d11a      	bne.n	103de <radio_connect_enable+0x116>
			consecutive_cnt++;
   103a8:	3101      	adds	r1, #1
   103aa:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   103ac:	2906      	cmp	r1, #6
   103ae:	d807      	bhi.n	103c0 <radio_connect_enable+0xf8>
   103b0:	2b1b      	cmp	r3, #27
   103b2:	d81a      	bhi.n	103ea <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   103b4:	b122      	cbz	r2, 103c0 <radio_connect_enable+0xf8>
   103b6:	2b1b      	cmp	r3, #27
   103b8:	d017      	beq.n	103ea <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   103ba:	2a01      	cmp	r2, #1
   103bc:	d815      	bhi.n	103ea <radio_connect_enable+0x122>
   103be:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   103c0:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   103c4:	f1be 0f00 	cmp.w	lr, #0
   103c8:	f000 8100 	beq.w	105cc <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   103cc:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   103d0:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   103d4:	3201      	adds	r2, #1
   103d6:	2001      	movs	r0, #1
   103d8:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   103da:	4601      	mov	r1, r0
   103dc:	e005      	b.n	103ea <radio_connect_enable+0x122>
			transitions++;
   103de:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   103e0:	2b1b      	cmp	r3, #27
			transitions++;
   103e2:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   103e4:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   103e8:	d9e5      	bls.n	103b6 <radio_connect_enable+0xee>
		if (transitions > 24) {
   103ea:	2a18      	cmp	r2, #24
   103ec:	f240 80f6 	bls.w	105dc <radio_connect_enable+0x314>
   103f0:	b108      	cbz	r0, 103f6 <radio_connect_enable+0x12e>
   103f2:	f8cd c014 	str.w	ip, [sp, #20]
   103f6:	3301      	adds	r3, #1
   103f8:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   103fa:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   103fe:	f1be 0f00 	cmp.w	lr, #0
   10402:	f000 80e8 	beq.w	105d6 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   10406:	425b      	negs	r3, r3
   10408:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   1040a:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1040c:	9b05      	ldr	r3, [sp, #20]
   1040e:	a806      	add	r0, sp, #24
   10410:	ea83 0308 	eor.w	r3, r3, r8
   10414:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   10418:	2104      	movs	r1, #4
   1041a:	f7f6 fe9f 	bl	715c <util_ones_count_get>
   1041e:	2801      	cmp	r0, #1
   10420:	f240 80e3 	bls.w	105ea <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   10424:	9b05      	ldr	r3, [sp, #20]
   10426:	b29a      	uxth	r2, r3
   10428:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   1042c:	f000 80d8 	beq.w	105e0 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   10430:	2204      	movs	r2, #4
   10432:	a905      	add	r1, sp, #20
   10434:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   10438:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1043a:	f7f1 fbf1 	bl	1c20 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   1043e:	2103      	movs	r1, #3
   10440:	f104 0014 	add.w	r0, r4, #20
   10444:	f7f7 fd18 	bl	7e78 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   10448:	2205      	movs	r2, #5
   1044a:	497a      	ldr	r1, [pc, #488]	; (10634 <radio_connect_enable+0x36c>)
   1044c:	f104 0017 	add.w	r0, r4, #23
   10450:	f7f1 fbe6 	bl	1c20 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   10454:	f895 211f 	ldrb.w	r2, [r5, #287]	; 0x11f
   10458:	7f63      	ldrb	r3, [r4, #29]
   1045a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1045e:	f36f 1386 	bfc	r3, #6, #1
   10462:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   10464:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   10466:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   10468:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   1046a:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   1046c:	f8b5 1122 	ldrh.w	r1, [r5, #290]	; 0x122
	conn->conn_interval = _radio.scanner.conn_interval;
   10470:	f8b5 e0f4 	ldrh.w	lr, [r5, #244]	; 0xf4
	conn->latency = _radio.scanner.conn_latency;
   10474:	f8b5 00f6 	ldrh.w	r0, [r5, #246]	; 0xf6
	conn->default_tx_octets = _radio.default_tx_octets;
   10478:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1047a:	211b      	movs	r1, #27
   1047c:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1047e:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   10480:	f8b5 1124 	ldrh.w	r1, [r5, #292]	; 0x124
   10484:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10486:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   1048a:	f8b5 6126 	ldrh.w	r6, [r5, #294]	; 0x126
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1048e:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   10490:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   10492:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   10496:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   10498:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   1049c:	2601      	movs	r6, #1
   1049e:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   104a2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   104a6:	f363 11c7 	bfi	r1, r3, #7, #1
   104aa:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   104ae:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   104b2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   104b6:	f366 0102 	bfi	r1, r6, #0, #3
   104ba:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   104be:	f8b5 c128 	ldrh.w	ip, [r5, #296]	; 0x128
	conn->latency_prepare = 0;
   104c2:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   104c4:	b2c9      	uxtb	r1, r1
   104c6:	f36c 01c5 	bfi	r1, ip, #3, #3
   104ca:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   104ce:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   104d2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   104d4:	f366 0102 	bfi	r1, r6, #0, #3
   104d8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   104dc:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   104de:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   104e0:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   104e4:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   104e6:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   104e8:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   104ec:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   104f0:	f363 0100 	bfi	r1, r3, #0, #1
   104f4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   104f8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   104fc:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10500:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
	conn->supervision_expire = 0;
   10504:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10508:	1e56      	subs	r6, r2, #1
   1050a:	f242 7e10 	movw	lr, #10000	; 0x2710
   1050e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   10512:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   10516:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1051a:	4b47      	ldr	r3, [pc, #284]	; (10638 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1051c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1051e:	4947      	ldr	r1, [pc, #284]	; (1063c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10520:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10522:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10524:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10528:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1052c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1052e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10532:	1d81      	adds	r1, r0, #6
   10534:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10536:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1053a:	dc6b      	bgt.n	10614 <radio_connect_enable+0x34c>
	conn->llcp_version.tx = 0;
   1053c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10540:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   10544:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   10546:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   1054a:	f360 0341 	bfi	r3, r0, #1, #1
   1054e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   10552:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   10556:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   1055a:	f360 1304 	bfi	r3, r0, #4, #1
   1055e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   10562:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   10566:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   1056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1056e:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   10572:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   10576:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   1057a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1057e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   10582:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10586:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1058a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1058e:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   10592:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   10596:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   1059a:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   1059e:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   105a2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   105a6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   105aa:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   105ae:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   105b2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   105b6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   105ba:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   105be:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   105c2:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
}
   105c6:	b007      	add	sp, #28
   105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   105cc:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   105d0:	f04f 0e01 	mov.w	lr, #1
   105d4:	e6fe      	b.n	103d4 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   105d6:	3b01      	subs	r3, #1
   105d8:	4313      	orrs	r3, r2
   105da:	e716      	b.n	1040a <radio_connect_enable+0x142>
		if (transitions > 24) {
   105dc:	46f2      	mov	sl, lr
   105de:	e6d5      	b.n	1038c <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   105e0:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   105e2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   105e6:	f47f af23 	bne.w	10430 <radio_connect_enable+0x168>
   105ea:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   105ec:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   105f0:	f47f aec0 	bne.w	10374 <radio_connect_enable+0xac>
   105f4:	4b12      	ldr	r3, [pc, #72]	; (10640 <radio_connect_enable+0x378>)
   105f6:	9301      	str	r3, [sp, #4]
   105f8:	9300      	str	r3, [sp, #0]
   105fa:	4b12      	ldr	r3, [pc, #72]	; (10644 <radio_connect_enable+0x37c>)
   105fc:	4a12      	ldr	r2, [pc, #72]	; (10648 <radio_connect_enable+0x380>)
   105fe:	681c      	ldr	r4, [r3, #0]
   10600:	4912      	ldr	r1, [pc, #72]	; (1064c <radio_connect_enable+0x384>)
   10602:	4b13      	ldr	r3, [pc, #76]	; (10650 <radio_connect_enable+0x388>)
   10604:	4813      	ldr	r0, [pc, #76]	; (10654 <radio_connect_enable+0x38c>)
   10606:	47a0      	blx	r4
   10608:	4040      	eors	r0, r0
   1060a:	f380 8811 	msr	BASEPRI, r0
   1060e:	f04f 0004 	mov.w	r0, #4
   10612:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   10614:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   10618:	33fa      	adds	r3, #250	; 0xfa
   1061a:	441a      	add	r2, r3
   1061c:	b292      	uxth	r2, r2
   1061e:	e78d      	b.n	1053c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10620:	200c      	movs	r0, #12
   10622:	e7d0      	b.n	105c6 <radio_connect_enable+0x2fe>
   10624:	f3af 8000 	nop.w
   10628:	1afd498d 	.word	0x1afd498d
   1062c:	00000007 	.word	0x00000007
   10630:	3b9aca00 	.word	0x3b9aca00
   10634:	20000a0a 	.word	0x20000a0a
   10638:	01c9c37f 	.word	0x01c9c37f
   1063c:	026259ff 	.word	0x026259ff
   10640:	00014c55 	.word	0x00014c55
   10644:	20003aa4 	.word	0x20003aa4
   10648:	000159c3 	.word	0x000159c3
   1064c:	00015a12 	.word	0x00015a12
   10650:	000170af 	.word	0x000170af
   10654:	00017b08 	.word	0x00017b08
   10658:	200008f0 	.word	0x200008f0
   1065c:	8e89bed6 	.word	0x8e89bed6

00010660 <ll_conn_update>:
{
   10660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10664:	460c      	mov	r4, r1
   10666:	4690      	mov	r8, r2
   10668:	461d      	mov	r5, r3
   1066a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1066e:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   10672:	f7f9 fbaf 	bl	9dd4 <connection_get>
	if (!conn) {
   10676:	b330      	cbz	r0, 106c6 <ll_conn_update+0x66>
	if (!cmd) {
   10678:	2c00      	cmp	r4, #0
   1067a:	d14a      	bne.n	10712 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   1067c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10680:	06d9      	lsls	r1, r3, #27
   10682:	d407      	bmi.n	10694 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   10684:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   10688:	069a      	lsls	r2, r3, #26
   1068a:	d541      	bpl.n	10710 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   1068c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   10690:	079b      	lsls	r3, r3, #30
   10692:	d43d      	bmi.n	10710 <ll_conn_update+0xb0>
		} else if (conn->role) {
   10694:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10698:	2b00      	cmp	r3, #0
   1069a:	da17      	bge.n	106cc <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1069c:	201a      	movs	r0, #26
   1069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   106a2:	428b      	cmp	r3, r1
   106a4:	d00f      	beq.n	106c6 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   106a6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   106aa:	f003 0207 	and.w	r2, r3, #7
   106ae:	2a03      	cmp	r2, #3
   106b0:	d109      	bne.n	106c6 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   106b2:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   106b6:	b2db      	uxtb	r3, r3
   106b8:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   106bc:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   106c0:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   106c4:	e021      	b.n	1070a <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   106c6:	200c      	movs	r0, #12
   106c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   106cc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   106d0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   106d4:	429a      	cmp	r2, r3
   106d6:	d1f6      	bne.n	106c6 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   106d8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   106dc:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   106e0:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   106e2:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   106e4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   106e8:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   106ec:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   106ee:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   106f2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   106f6:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   106fa:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   106fe:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   10702:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   10706:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1070a:	2000      	movs	r0, #0
   1070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   10710:	2401      	movs	r4, #1
		cmd--;
   10712:	3c01      	subs	r4, #1
		if (cmd) {
   10714:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10718:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   1071c:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   10720:	d1bf      	bne.n	106a2 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   10722:	4299      	cmp	r1, r3
   10724:	d1cf      	bne.n	106c6 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   10726:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   1072a:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1072e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   10732:	b2db      	uxtb	r3, r3
   10734:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   10738:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   1073a:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   1073e:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   10742:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   10746:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1074a:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   1074e:	e7dc      	b.n	1070a <ll_conn_update+0xaa>

00010750 <ll_chm_update>:
{
   10750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   10754:	4c1e      	ldr	r4, [pc, #120]	; (107d0 <ll_chm_update+0x80>)
   10756:	4601      	mov	r1, r0
   10758:	2205      	movs	r2, #5
{
   1075a:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   1075c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10760:	f7f1 fa5e 	bl	1c20 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   10764:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10768:	2105      	movs	r1, #5
   1076a:	f7f6 fcf7 	bl	715c <util_ones_count_get>
	_radio.data_chan_count =
   1076e:	f884 011f 	strb.w	r0, [r4, #287]	; 0x11f
   10772:	f894 4110 	ldrb.w	r4, [r4, #272]	; 0x110
   10776:	3c01      	subs	r4, #1
   10778:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   1077a:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1077c:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   10780:	2cff      	cmp	r4, #255	; 0xff
   10782:	d102      	bne.n	1078a <ll_chm_update+0x3a>
	return 0;
   10784:	2000      	movs	r0, #0
   10786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   1078a:	4620      	mov	r0, r4
   1078c:	f7f9 fb22 	bl	9dd4 <connection_get>
		if (!conn || conn->role) {
   10790:	4606      	mov	r6, r0
   10792:	b1b8      	cbz	r0, 107c4 <ll_chm_update+0x74>
   10794:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10798:	2b00      	cmp	r3, #0
   1079a:	db13      	blt.n	107c4 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   1079c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   107a0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   107a4:	429a      	cmp	r2, r3
   107a6:	d110      	bne.n	107ca <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   107a8:	2205      	movs	r2, #5
   107aa:	4629      	mov	r1, r5
   107ac:	3079      	adds	r0, #121	; 0x79
   107ae:	f7f1 fa37 	bl	1c20 <memcpy>
		conn->llcp_req++;
   107b2:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   107b6:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   107ba:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   107bc:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   107c0:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   107c4:	3c01      	subs	r4, #1
   107c6:	b2e4      	uxtb	r4, r4
   107c8:	e7da      	b.n	10780 <ll_chm_update+0x30>
			return 1;
   107ca:	2001      	movs	r0, #1
}
   107cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107d0:	200008f0 	.word	0x200008f0

000107d4 <ll_chm_get>:
{
   107d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107d6:	460d      	mov	r5, r1
	conn = connection_get(handle);
   107d8:	f7f9 fafc 	bl	9dd4 <connection_get>
	if (!conn) {
   107dc:	4604      	mov	r4, r0
   107de:	b160      	cbz	r0, 107fa <ll_chm_get+0x26>
		conn->chm_update = 0;
   107e0:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   107e2:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   107e6:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   107e8:	2205      	movs	r2, #5
   107ea:	4631      	mov	r1, r6
   107ec:	4628      	mov	r0, r5
   107ee:	f7f1 fa17 	bl	1c20 <memcpy>
	} while (conn->chm_update);
   107f2:	7f20      	ldrb	r0, [r4, #28]
   107f4:	2800      	cmp	r0, #0
   107f6:	d1f6      	bne.n	107e6 <ll_chm_get+0x12>
   107f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   107fa:	2001      	movs	r0, #1
}
   107fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000107fe <ll_feature_req_send>:
{
   107fe:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10800:	f7f9 fae8 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10804:	b168      	cbz	r0, 10822 <ll_feature_req_send+0x24>
   10806:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1080a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1080e:	4293      	cmp	r3, r2
   10810:	d107      	bne.n	10822 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   10812:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10814:	2204      	movs	r2, #4
	conn->llcp_req++;
   10816:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1081a:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1081e:	2000      	movs	r0, #0
   10820:	bd08      	pop	{r3, pc}
		return 1;
   10822:	2001      	movs	r0, #1
}
   10824:	bd08      	pop	{r3, pc}

00010826 <ll_version_ind_send>:
{
   10826:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   10828:	f7f9 fad4 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1082c:	b168      	cbz	r0, 1084a <ll_version_ind_send+0x24>
   1082e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10832:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10836:	4293      	cmp	r3, r2
   10838:	d107      	bne.n	1084a <ll_version_ind_send+0x24>
	conn->llcp_req++;
   1083a:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1083c:	2205      	movs	r2, #5
	conn->llcp_req++;
   1083e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10842:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   10846:	2000      	movs	r0, #0
   10848:	bd08      	pop	{r3, pc}
		return 1;
   1084a:	2001      	movs	r0, #1
}
   1084c:	bd08      	pop	{r3, pc}

0001084e <ll_terminate_ind_send>:
{
   1084e:	b510      	push	{r4, lr}
   10850:	460c      	mov	r4, r1
	conn = connection_get(handle);
   10852:	f7f9 fabf 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10856:	b160      	cbz	r0, 10872 <ll_terminate_ind_send+0x24>
   10858:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   1085c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   10860:	4293      	cmp	r3, r2
   10862:	d106      	bne.n	10872 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   10864:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   10866:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1086a:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   1086e:	2000      	movs	r0, #0
   10870:	bd10      	pop	{r4, pc}
		return 1;
   10872:	2001      	movs	r0, #1
}
   10874:	bd10      	pop	{r4, pc}

00010876 <ll_tx_pwr_lvl_get>:
{
   10876:	b510      	push	{r4, lr}
   10878:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1087a:	f7f9 faab 	bl	9dd4 <connection_get>
	if (!conn) {
   1087e:	b110      	cbz	r0, 10886 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   10880:	2000      	movs	r0, #0
   10882:	7020      	strb	r0, [r4, #0]
	return 0;
   10884:	bd10      	pop	{r4, pc}
		return 1;
   10886:	2001      	movs	r0, #1
}
   10888:	bd10      	pop	{r4, pc}

0001088a <ll_apto_get>:
{
   1088a:	b510      	push	{r4, lr}
   1088c:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1088e:	f7f9 faa1 	bl	9dd4 <connection_get>
	if (!conn) {
   10892:	b160      	cbz	r0, 108ae <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   10894:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   10896:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   1089a:	435a      	muls	r2, r3
   1089c:	237d      	movs	r3, #125	; 0x7d
   1089e:	4353      	muls	r3, r2
	return 0;
   108a0:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   108a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108a6:	fb93 f3f2 	sdiv	r3, r3, r2
   108aa:	8023      	strh	r3, [r4, #0]
	return 0;
   108ac:	bd10      	pop	{r4, pc}
		return 1;
   108ae:	2001      	movs	r0, #1
}
   108b0:	bd10      	pop	{r4, pc}

000108b2 <ll_apto_set>:
{
   108b2:	b510      	push	{r4, lr}
   108b4:	460c      	mov	r4, r1
	conn = connection_get(handle);
   108b6:	f7f9 fa8d 	bl	9dd4 <connection_get>
	if (!conn) {
   108ba:	b170      	cbz	r0, 108da <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   108bc:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   108be:	f240 43e2 	movw	r3, #1250	; 0x4e2
   108c2:	4353      	muls	r3, r2
   108c4:	f242 7110 	movw	r1, #10000	; 0x2710
   108c8:	fb01 3404 	mla	r4, r1, r4, r3
   108cc:	3c01      	subs	r4, #1
   108ce:	fb94 f4f3 	sdiv	r4, r4, r3
   108d2:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   108d6:	2000      	movs	r0, #0
   108d8:	bd10      	pop	{r4, pc}
		return 1;
   108da:	2001      	movs	r0, #1
}
   108dc:	bd10      	pop	{r4, pc}

000108de <ll_length_req_send>:
{
   108de:	b570      	push	{r4, r5, r6, lr}
   108e0:	460e      	mov	r6, r1
   108e2:	4615      	mov	r5, r2
	conn = connection_get(handle);
   108e4:	f7f9 fa76 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   108e8:	b1d0      	cbz	r0, 10920 <ll_length_req_send+0x42>
   108ea:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   108ee:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   108f2:	429a      	cmp	r2, r3
   108f4:	d114      	bne.n	10920 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   108f6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   108fa:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   108fe:	4293      	cmp	r3, r2
   10900:	d10e      	bne.n	10920 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10902:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   10906:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   1090a:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1090c:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   10910:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10914:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   10918:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   1091c:	2000      	movs	r0, #0
   1091e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   10920:	2001      	movs	r0, #1
}
   10922:	bd70      	pop	{r4, r5, r6, pc}

00010924 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   10924:	4b03      	ldr	r3, [pc, #12]	; (10934 <ll_length_default_get+0x10>)
   10926:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
   1092a:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   1092c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
   10930:	800b      	strh	r3, [r1, #0]
   10932:	4770      	bx	lr
   10934:	200008f0 	.word	0x200008f0

00010938 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   10938:	4b03      	ldr	r3, [pc, #12]	; (10948 <ll_length_default_set+0x10>)
   1093a:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_tx_time = max_tx_time;
   1093e:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   10942:	2000      	movs	r0, #0
   10944:	4770      	bx	lr
   10946:	bf00      	nop
   10948:	200008f0 	.word	0x200008f0

0001094c <ll_length_max_get>:
{
   1094c:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1094e:	241b      	movs	r4, #27
   10950:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   10952:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10956:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10958:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1095a:	8018      	strh	r0, [r3, #0]
   1095c:	bd10      	pop	{r4, pc}

0001095e <ll_phy_get>:
{
   1095e:	b538      	push	{r3, r4, r5, lr}
   10960:	460d      	mov	r5, r1
   10962:	4614      	mov	r4, r2
	conn = connection_get(handle);
   10964:	f7f9 fa36 	bl	9dd4 <connection_get>
	if (!conn) {
   10968:	b158      	cbz	r0, 10982 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1096a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1096e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10972:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10974:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   10978:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1097c:	7023      	strb	r3, [r4, #0]
	return 0;
   1097e:	2000      	movs	r0, #0
   10980:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   10982:	2001      	movs	r0, #1
}
   10984:	bd38      	pop	{r3, r4, r5, pc}
	...

00010988 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   10988:	4b03      	ldr	r3, [pc, #12]	; (10998 <ll_phy_default_set+0x10>)
   1098a:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
	_radio.default_phy_rx = rx;
   1098e:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
}
   10992:	2000      	movs	r0, #0
   10994:	4770      	bx	lr
   10996:	bf00      	nop
   10998:	200008f0 	.word	0x200008f0

0001099c <ll_phy_req_send>:
{
   1099c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   109a0:	4689      	mov	r9, r1
   109a2:	4690      	mov	r8, r2
   109a4:	461f      	mov	r7, r3
	conn = connection_get(handle);
   109a6:	f7f9 fa15 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   109aa:	b320      	cbz	r0, 109f6 <ll_phy_req_send+0x5a>
   109ac:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   109b0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   109b4:	429a      	cmp	r2, r3
   109b6:	d11e      	bne.n	109f6 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   109b8:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   109bc:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   109c0:	429d      	cmp	r5, r3
   109c2:	d118      	bne.n	109f6 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   109c4:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   109c8:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   109cc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   109d0:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   109d4:	f046 0102 	orr.w	r1, r6, #2
   109d8:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   109dc:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   109de:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   109e0:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   109e4:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   109e8:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   109ec:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   109f0:	2000      	movs	r0, #0
   109f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   109f6:	2001      	movs	r0, #1
}
   109f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000109fc <ll_rx_get>:
{
   109fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10a00:	4605      	mov	r5, r0
   10a02:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10a04:	4918      	ldr	r1, [pc, #96]	; (10a68 <ll_rx_get+0x6c>)
   10a06:	f8d1 314c 	ldr.w	r3, [r1, #332]	; 0x14c
   10a0a:	f8d1 2150 	ldr.w	r2, [r1, #336]	; 0x150
   10a0e:	4293      	cmp	r3, r2
   10a10:	460f      	mov	r7, r1
   10a12:	d01f      	beq.n	10a54 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   10a14:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10a18:	f201 1177 	addw	r1, r1, #375	; 0x177
   10a1c:	f898 2000 	ldrb.w	r2, [r8]
   10a20:	f7f9 f98e 	bl	9d40 <tx_cmplt_get>
		if (!cmplt) {
   10a24:	4604      	mov	r4, r0
   10a26:	b9e0      	cbnz	r0, 10a62 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   10a28:	ae02      	add	r6, sp, #8
   10a2a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   10a2e:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   10a32:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
   10a36:	4631      	mov	r1, r6
   10a38:	f10d 0006 	add.w	r0, sp, #6
   10a3c:	f7f9 f980 	bl	9d40 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   10a40:	b934      	cbnz	r4, 10a50 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   10a42:	b928      	cbnz	r0, 10a50 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   10a44:	f8c5 8000 	str.w	r8, [r5]
}
   10a48:	4620      	mov	r0, r4
   10a4a:	b002      	add	sp, #8
   10a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   10a50:	4604      	mov	r4, r0
   10a52:	e7ee      	b.n	10a32 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   10a54:	f891 2178 	ldrb.w	r2, [r1, #376]	; 0x178
   10a58:	f201 1177 	addw	r1, r1, #375	; 0x177
   10a5c:	f7f9 f970 	bl	9d40 <tx_cmplt_get>
   10a60:	4604      	mov	r4, r0
		*node_rx = NULL;
   10a62:	2300      	movs	r3, #0
   10a64:	602b      	str	r3, [r5, #0]
   10a66:	e7ef      	b.n	10a48 <ll_rx_get+0x4c>
   10a68:	200008f0 	.word	0x200008f0

00010a6c <ll_rx_mem_release>:
{
   10a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10a70:	4c1c      	ldr	r4, [pc, #112]	; (10ae4 <ll_rx_mem_release+0x78>)
{
   10a72:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10a74:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10a76:	f5a4 7698 	sub.w	r6, r4, #304	; 0x130
			mem_release(conn, &_radio.conn_free);
   10a7a:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10a7e:	b930      	cbnz	r0, 10a8e <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   10a80:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10a82:	20ff      	movs	r0, #255	; 0xff
}
   10a84:	b002      	add	sp, #8
   10a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   10a8a:	f7f9 b87f 	b.w	9b8c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10a8e:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10a90:	f8d0 8000 	ldr.w	r8, [r0]
   10a94:	2a0c      	cmp	r2, #12
   10a96:	d807      	bhi.n	10aa8 <ll_rx_mem_release+0x3c>
   10a98:	2301      	movs	r3, #1
   10a9a:	4093      	lsls	r3, r2
   10a9c:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10aa0:	4213      	tst	r3, r2
   10aa2:	d111      	bne.n	10ac8 <ll_rx_mem_release+0x5c>
   10aa4:	061b      	lsls	r3, r3, #24
   10aa6:	d414      	bmi.n	10ad2 <ll_rx_mem_release+0x66>
			LL_ASSERT(0);
   10aa8:	4b0f      	ldr	r3, [pc, #60]	; (10ae8 <ll_rx_mem_release+0x7c>)
   10aaa:	9301      	str	r3, [sp, #4]
   10aac:	9300      	str	r3, [sp, #0]
   10aae:	4b0f      	ldr	r3, [pc, #60]	; (10aec <ll_rx_mem_release+0x80>)
   10ab0:	4a0f      	ldr	r2, [pc, #60]	; (10af0 <ll_rx_mem_release+0x84>)
   10ab2:	681c      	ldr	r4, [r3, #0]
   10ab4:	490f      	ldr	r1, [pc, #60]	; (10af4 <ll_rx_mem_release+0x88>)
   10ab6:	4b10      	ldr	r3, [pc, #64]	; (10af8 <ll_rx_mem_release+0x8c>)
   10ab8:	4810      	ldr	r0, [pc, #64]	; (10afc <ll_rx_mem_release+0x90>)
   10aba:	47a0      	blx	r4
   10abc:	4040      	eors	r0, r0
   10abe:	f380 8811 	msr	BASEPRI, r0
   10ac2:	f04f 0004 	mov.w	r0, #4
   10ac6:	df02      	svc	2
			mem_release(_node_rx_free,
   10ac8:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10aca:	f7f6 f9b6 	bl	6e3a <mem_release>
{
   10ace:	4640      	mov	r0, r8
   10ad0:	e7d5      	b.n	10a7e <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10ad2:	88c2      	ldrh	r2, [r0, #6]
   10ad4:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   10ad8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   10adc:	f7f6 f9c8 	bl	6e70 <mem_get>
			mem_release(conn, &_radio.conn_free);
   10ae0:	4639      	mov	r1, r7
   10ae2:	e7f2      	b.n	10aca <ll_rx_mem_release+0x5e>
   10ae4:	20000a20 	.word	0x20000a20
   10ae8:	00014c55 	.word	0x00014c55
   10aec:	20003aa4 	.word	0x20003aa4
   10af0:	000159c3 	.word	0x000159c3
   10af4:	00015a12 	.word	0x00015a12
   10af8:	00017253 	.word	0x00017253
   10afc:	00015962 	.word	0x00015962

00010b00 <do_radio_rx_fc_set>:
	if (req == ack) {
   10b00:	4291      	cmp	r1, r2
{
   10b02:	b510      	push	{r4, lr}
   10b04:	4b14      	ldr	r3, [pc, #80]	; (10b58 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   10b06:	d119      	bne.n	10b3c <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10b08:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
   10b0c:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
   10b10:	4294      	cmp	r4, r2
   10b12:	d111      	bne.n	10b38 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   10b14:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   10b16:	bf14      	ite	ne
   10b18:	460a      	movne	r2, r1
   10b1a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10b1c:	3a01      	subs	r2, #1
   10b1e:	b2d2      	uxtb	r2, r2
   10b20:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   10b24:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			if (req != _radio.fc_req) {
   10b28:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
			_radio.fc_handle[--ack1] = handle;
   10b2c:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			if (req != _radio.fc_req) {
   10b30:	4291      	cmp	r1, r2
   10b32:	d00f      	beq.n	10b54 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   10b34:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			return 1;
   10b38:	2001      	movs	r0, #1
   10b3a:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   10b3c:	b929      	cbnz	r1, 10b4a <do_radio_rx_fc_set+0x4a>
   10b3e:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
				return 1;
   10b42:	1a18      	subs	r0, r3, r0
   10b44:	bf18      	it	ne
   10b46:	2001      	movne	r0, #1
   10b48:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   10b4a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   10b4e:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
   10b52:	e7f6      	b.n	10b42 <do_radio_rx_fc_set+0x42>
	return 0;
   10b54:	2000      	movs	r0, #0
}
   10b56:	bd10      	pop	{r4, pc}
   10b58:	200008f0 	.word	0x200008f0

00010b5c <radio_rx_fc_set>:
{
   10b5c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   10b5e:	4b14      	ldr	r3, [pc, #80]	; (10bb0 <radio_rx_fc_set+0x54>)
   10b60:	f893 2182 	ldrb.w	r2, [r3, #386]	; 0x182
{
   10b64:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   10b66:	b302      	cbz	r2, 10baa <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   10b68:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
   10b6c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   10b6e:	f893 2181 	ldrb.w	r2, [r3, #385]	; 0x181
		if (fc) {
   10b72:	b135      	cbz	r5, 10b82 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   10b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10b78:	4298      	cmp	r0, r3
   10b7a:	d016      	beq.n	10baa <radio_rx_fc_set+0x4e>
}
   10b7c:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   10b7e:	f7ff bfbf 	b.w	10b00 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   10b82:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
   10b86:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
   10b8a:	42a0      	cmp	r0, r4
   10b8c:	d10d      	bne.n	10baa <radio_rx_fc_set+0x4e>
   10b8e:	4291      	cmp	r1, r2
   10b90:	d00b      	beq.n	10baa <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10b92:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
			_radio.fc_ack = req;
   10b96:	f883 1181 	strb.w	r1, [r3, #385]	; 0x181
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10b9a:	42a0      	cmp	r0, r4
   10b9c:	d005      	beq.n	10baa <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10b9e:	f893 0180 	ldrb.w	r0, [r3, #384]	; 0x180
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10ba2:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   10ba4:	bf08      	it	eq
   10ba6:	f883 2181 	strbeq.w	r2, [r3, #385]	; 0x181
}
   10baa:	2000      	movs	r0, #0
   10bac:	bc30      	pop	{r4, r5}
   10bae:	4770      	bx	lr
   10bb0:	200008f0 	.word	0x200008f0

00010bb4 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   10bb4:	4801      	ldr	r0, [pc, #4]	; (10bbc <ll_tx_mem_acquire+0x8>)
   10bb6:	f7f6 b926 	b.w	6e06 <mem_acquire>
   10bba:	bf00      	nop
   10bbc:	20000a54 	.word	0x20000a54

00010bc0 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10bc0:	4901      	ldr	r1, [pc, #4]	; (10bc8 <ll_tx_mem_release+0x8>)
   10bc2:	f7f6 b93a 	b.w	6e3a <mem_release>
   10bc6:	bf00      	nop
   10bc8:	20000a54 	.word	0x20000a54

00010bcc <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10bce:	4d34      	ldr	r5, [pc, #208]	; (10ca0 <ll_tx_mem_enqueue+0xd4>)
   10bd0:	f895 4176 	ldrb.w	r4, [r5, #374]	; 0x176
	if (last == _radio.packet_tx_count) {
   10bd4:	f895 3174 	ldrb.w	r3, [r5, #372]	; 0x174
	last = _radio.packet_tx_last + 1;
   10bd8:	3401      	adds	r4, #1
{
   10bda:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10bdc:	b2e4      	uxtb	r4, r4
{
   10bde:	4607      	mov	r7, r0
   10be0:	460e      	mov	r6, r1
		last = 0;
   10be2:	42a3      	cmp	r3, r4
   10be4:	bf08      	it	eq
   10be6:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10be8:	f7f9 f8f4 	bl	9dd4 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10bec:	2800      	cmp	r0, #0
   10bee:	d055      	beq.n	10c9c <ll_tx_mem_enqueue+0xd0>
   10bf0:	f895 3175 	ldrb.w	r3, [r5, #373]	; 0x175
   10bf4:	429c      	cmp	r4, r3
   10bf6:	d051      	beq.n	10c9c <ll_tx_mem_enqueue+0xd0>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10bf8:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
   10bfc:	7972      	ldrb	r2, [r6, #5]
   10bfe:	3b07      	subs	r3, #7
   10c00:	429a      	cmp	r2, r3
   10c02:	d90f      	bls.n	10c24 <ll_tx_mem_enqueue+0x58>
   10c04:	4b27      	ldr	r3, [pc, #156]	; (10ca4 <ll_tx_mem_enqueue+0xd8>)
   10c06:	9301      	str	r3, [sp, #4]
   10c08:	9300      	str	r3, [sp, #0]
   10c0a:	4b27      	ldr	r3, [pc, #156]	; (10ca8 <ll_tx_mem_enqueue+0xdc>)
   10c0c:	4a27      	ldr	r2, [pc, #156]	; (10cac <ll_tx_mem_enqueue+0xe0>)
   10c0e:	681c      	ldr	r4, [r3, #0]
   10c10:	4927      	ldr	r1, [pc, #156]	; (10cb0 <ll_tx_mem_enqueue+0xe4>)
   10c12:	4b28      	ldr	r3, [pc, #160]	; (10cb4 <ll_tx_mem_enqueue+0xe8>)
   10c14:	4828      	ldr	r0, [pc, #160]	; (10cb8 <ll_tx_mem_enqueue+0xec>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10c16:	47a0      	blx	r4
   10c18:	4040      	eors	r0, r0
   10c1a:	f380 8811 	msr	BASEPRI, r0
   10c1e:	f04f 0004 	mov.w	r0, #4
   10c22:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10c24:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
   10c28:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10c2c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10c30:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10c34:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   10c36:	f885 4176 	strb.w	r4, [r5, #374]	; 0x176
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10c3a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10c3e:	2b00      	cmp	r3, #0
   10c40:	db02      	blt.n	10c48 <ll_tx_mem_enqueue+0x7c>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   10c42:	2000      	movs	r0, #0
}
   10c44:	b009      	add	sp, #36	; 0x24
   10c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   10c48:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d0f9      	beq.n	10c42 <ll_tx_mem_enqueue+0x76>
   10c4e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   10c52:	f012 0302 	ands.w	r3, r2, #2
   10c56:	d1f4      	bne.n	10c42 <ll_tx_mem_enqueue+0x76>
		conn->slave.latency_cancel = 1;
   10c58:	f042 0202 	orr.w	r2, r2, #2
   10c5c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10c60:	f890 2020 	ldrb.w	r2, [r0, #32]
   10c64:	4915      	ldr	r1, [pc, #84]	; (10cbc <ll_tx_mem_enqueue+0xf0>)
   10c66:	9105      	str	r1, [sp, #20]
   10c68:	3207      	adds	r2, #7
   10c6a:	2101      	movs	r1, #1
   10c6c:	9006      	str	r0, [sp, #24]
   10c6e:	9304      	str	r3, [sp, #16]
   10c70:	9103      	str	r1, [sp, #12]
   10c72:	9302      	str	r3, [sp, #8]
   10c74:	9301      	str	r3, [sp, #4]
   10c76:	9300      	str	r3, [sp, #0]
   10c78:	4618      	mov	r0, r3
   10c7a:	b2d2      	uxtb	r2, r2
   10c7c:	2103      	movs	r1, #3
   10c7e:	f7f6 ff9d 	bl	7bbc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10c82:	f030 0302 	bics.w	r3, r0, #2
   10c86:	d0dc      	beq.n	10c42 <ll_tx_mem_enqueue+0x76>
   10c88:	4b06      	ldr	r3, [pc, #24]	; (10ca4 <ll_tx_mem_enqueue+0xd8>)
   10c8a:	9301      	str	r3, [sp, #4]
   10c8c:	9300      	str	r3, [sp, #0]
   10c8e:	4b06      	ldr	r3, [pc, #24]	; (10ca8 <ll_tx_mem_enqueue+0xdc>)
   10c90:	4a06      	ldr	r2, [pc, #24]	; (10cac <ll_tx_mem_enqueue+0xe0>)
   10c92:	681c      	ldr	r4, [r3, #0]
   10c94:	4906      	ldr	r1, [pc, #24]	; (10cb0 <ll_tx_mem_enqueue+0xe4>)
   10c96:	4b07      	ldr	r3, [pc, #28]	; (10cb4 <ll_tx_mem_enqueue+0xe8>)
   10c98:	4809      	ldr	r0, [pc, #36]	; (10cc0 <ll_tx_mem_enqueue+0xf4>)
   10c9a:	e7bc      	b.n	10c16 <ll_tx_mem_enqueue+0x4a>
		return 1;
   10c9c:	2001      	movs	r0, #1
   10c9e:	e7d1      	b.n	10c44 <ll_tx_mem_enqueue+0x78>
   10ca0:	200008f0 	.word	0x200008f0
   10ca4:	00014c55 	.word	0x00014c55
   10ca8:	20003aa4 	.word	0x20003aa4
   10cac:	000159c3 	.word	0x000159c3
   10cb0:	00015a12 	.word	0x00015a12
   10cb4:	00017281 	.word	0x00017281
   10cb8:	00017867 	.word	0x00017867
   10cbc:	0000abb9 	.word	0x0000abb9
   10cc0:	000172b9 	.word	0x000172b9

00010cc4 <ll_enc_req_send>:
{
   10cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cc8:	4607      	mov	r7, r0
   10cca:	4688      	mov	r8, r1
   10ccc:	4616      	mov	r6, r2
   10cce:	4699      	mov	r9, r3
	conn = connection_get(handle);
   10cd0:	f7f9 f880 	bl	9dd4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10cd4:	4605      	mov	r5, r0
   10cd6:	b910      	cbnz	r0, 10cde <ll_enc_req_send+0x1a>
			return 1;
   10cd8:	2001      	movs	r0, #1
   10cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10cde:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10ce2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10ce6:	429a      	cmp	r2, r3
   10ce8:	d1f6      	bne.n	10cd8 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   10cea:	f7ff ff63 	bl	10bb4 <ll_tx_mem_acquire>
	if (node_tx) {
   10cee:	4604      	mov	r4, r0
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d0f1      	beq.n	10cd8 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10cf4:	2210      	movs	r2, #16
   10cf6:	4649      	mov	r1, r9
   10cf8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   10cfc:	f7f0 ff90 	bl	1c20 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   10d00:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   10d04:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   10d08:	d124      	bne.n	10d54 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d0a:	7923      	ldrb	r3, [r4, #4]
   10d0c:	f043 0303 	orr.w	r3, r3, #3
   10d10:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   10d12:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10d14:	2208      	movs	r2, #8
			pdu_data_tx->len =
   10d16:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10d18:	2303      	movs	r3, #3
   10d1a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   10d1c:	4641      	mov	r1, r8
   10d1e:	18a0      	adds	r0, r4, r2
   10d20:	f7f0 ff7e 	bl	1c20 <memcpy>
			enc_req->ediv[0] = ediv[0];
   10d24:	7833      	ldrb	r3, [r6, #0]
   10d26:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   10d28:	7873      	ldrb	r3, [r6, #1]
   10d2a:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   10d2c:	2108      	movs	r1, #8
   10d2e:	f104 0012 	add.w	r0, r4, #18
   10d32:	f7f7 f8a1 	bl	7e78 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   10d36:	2104      	movs	r1, #4
   10d38:	f104 001a 	add.w	r0, r4, #26
   10d3c:	f7f7 f89c 	bl	7e78 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   10d40:	4621      	mov	r1, r4
   10d42:	4638      	mov	r0, r7
   10d44:	f7ff ff42 	bl	10bcc <ll_tx_mem_enqueue>
   10d48:	2601      	movs	r6, #1
   10d4a:	b1d0      	cbz	r0, 10d82 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   10d4c:	4620      	mov	r0, r4
   10d4e:	f7ff ff37 	bl	10bc0 <ll_tx_mem_release>
   10d52:	e7c1      	b.n	10cd8 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   10d54:	2b30      	cmp	r3, #48	; 0x30
   10d56:	d1f9      	bne.n	10d4c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   10d58:	2208      	movs	r2, #8
   10d5a:	4641      	mov	r1, r8
   10d5c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   10d60:	f7f0 ff5e 	bl	1c20 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   10d64:	7833      	ldrb	r3, [r6, #0]
   10d66:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   10d6a:	7873      	ldrb	r3, [r6, #1]
   10d6c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d70:	7923      	ldrb	r3, [r4, #4]
   10d72:	f043 0303 	orr.w	r3, r3, #3
   10d76:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   10d78:	2301      	movs	r3, #1
   10d7a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   10d7c:	230a      	movs	r3, #10
   10d7e:	71e3      	strb	r3, [r4, #7]
   10d80:	e7de      	b.n	10d40 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   10d82:	2303      	movs	r3, #3
   10d84:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   10d88:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   10d8c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   10d90:	3301      	adds	r3, #1
   10d92:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   10d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d9a:	0000      	movs	r0, r0
   10d9c:	0000      	movs	r0, r0
	...

00010da0 <radio_scan_enable>:
{
   10da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   10da4:	4c68      	ldr	r4, [pc, #416]	; (10f48 <radio_scan_enable+0x1a8>)
   10da6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
   10daa:	b08e      	sub	sp, #56	; 0x38
   10dac:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   10dae:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10db2:	f04f 0302 	mov.w	r3, #2
{
   10db6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10db8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   10dba:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   10dbc:	d003      	beq.n	10dc6 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10dbe:	200c      	movs	r0, #12
}
   10dc0:	b00e      	add	sp, #56	; 0x38
   10dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   10dc6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.rpa_gen = rpa_gen;
   10dca:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.type = type;
   10dce:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   10dd2:	0840      	lsrs	r0, r0, #1
   10dd4:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   10dd8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10ddc:	f360 0200 	bfi	r2, r0, #0, #1
   10de0:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
	_radio.scanner.rl_idx = rl_idx;
   10de4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   10de8:	f884 20e3 	strb.w	r2, [r4, #227]	; 0xe3
	_radio.scanner.init_addr_type = init_addr_type;
   10dec:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10df0:	2206      	movs	r2, #6
   10df2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	_radio.scanner.init_addr_type = init_addr_type;
   10df6:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10dfa:	4e54      	ldr	r6, [pc, #336]	; (10f4c <radio_scan_enable+0x1ac>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   10dfc:	f7f0 ff10 	bl	1c20 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10e00:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   10e04:	f04f 0991 	mov.w	r9, #145	; 0x91
   10e08:	fba2 0106 	umull	r0, r1, r2, r6
   10e0c:	fb09 1102 	mla	r1, r9, r2, r1
   10e10:	a34b      	add	r3, pc, #300	; (adr r3, 10f40 <radio_scan_enable+0x1a0>)
   10e12:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e16:	f7ef f9fd 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   10e1a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   10e1e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
   10e22:	f8d4 8184 	ldr.w	r8, [r4, #388]	; 0x184
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   10e26:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
   10e2a:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10e2e:	b2ba      	uxth	r2, r7
   10e30:	fba2 6706 	umull	r6, r7, r2, r6
   10e34:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   10e38:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
   10e3c:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   10e3e:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
   10e42:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
   10e46:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
   10e4a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10e4e:	a33c      	add	r3, pc, #240	; (adr r3, 10f40 <radio_scan_enable+0x1a0>)
   10e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e54:	4630      	mov	r0, r6
   10e56:	4639      	mov	r1, r7
   10e58:	f7ef f9dc 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
   10e5c:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   10e60:	459a      	cmp	sl, r3
   10e62:	bf94      	ite	ls
   10e64:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
   10e68:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10e6c:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   10e70:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
   10e72:	bf38      	it	cc
   10e74:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   10e78:	f7f6 ffbe 	bl	7df8 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   10e7c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
   10e80:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   10e82:	2b00      	cmp	r3, #0
   10e84:	d045      	beq.n	10f12 <radio_scan_enable+0x172>
		us_offset = 0;
   10e86:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10e88:	980c      	ldr	r0, [sp, #48]	; 0x30
   10e8a:	4931      	ldr	r1, [pc, #196]	; (10f50 <radio_scan_enable+0x1b0>)
   10e8c:	a32c      	add	r3, pc, #176	; (adr r3, 10f40 <radio_scan_enable+0x1a0>)
   10e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e92:	fba0 0101 	umull	r0, r1, r0, r1
   10e96:	f7ef f9bd 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e9a:	ab0b      	add	r3, sp, #44	; 0x2c
   10e9c:	9308      	str	r3, [sp, #32]
   10e9e:	4b2d      	ldr	r3, [pc, #180]	; (10f54 <radio_scan_enable+0x1b4>)
   10ea0:	9307      	str	r3, [sp, #28]
   10ea2:	4b2d      	ldr	r3, [pc, #180]	; (10f58 <radio_scan_enable+0x1b8>)
   10ea4:	9305      	str	r3, [sp, #20]
   10ea6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   10eaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10eae:	4443      	add	r3, r8
   10eb0:	2500      	movs	r5, #0
   10eb2:	4482      	add	sl, r0
   10eb4:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10eb6:	4630      	mov	r0, r6
   10eb8:	a321      	add	r3, pc, #132	; (adr r3, 10f40 <radio_scan_enable+0x1a0>)
   10eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ebe:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10ec0:	9506      	str	r5, [sp, #24]
   10ec2:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   10ec4:	f7ef f9a6 	bl	214 <__aeabi_uldivmod>
   10ec8:	4610      	mov	r0, r2
   10eca:	4619      	mov	r1, r3
   10ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10ed0:	2300      	movs	r3, #0
   10ed2:	f7ef f99f 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10ed6:	e88d 0220 	stmia.w	sp, {r5, r9}
   10eda:	9002      	str	r0, [sp, #8]
   10edc:	4653      	mov	r3, sl
   10ede:	2206      	movs	r2, #6
   10ee0:	2103      	movs	r1, #3
   10ee2:	4628      	mov	r0, r5
   10ee4:	f7f6 fe1a 	bl	7b1c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10ee8:	2802      	cmp	r0, #2
   10eea:	d023      	beq.n	10f34 <radio_scan_enable+0x194>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   10eec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10eee:	2d00      	cmp	r5, #0
   10ef0:	f47f af65 	bne.w	10dbe <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   10ef4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   10ef8:	f043 0301 	orr.w	r3, r3, #1
   10efc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
   10f00:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10f04:	2b00      	cmp	r3, #0
   10f06:	db02      	blt.n	10f0e <radio_scan_enable+0x16e>
		ll_adv_scan_state_cb(BIT(1));
   10f08:	2002      	movs	r0, #2
   10f0a:	f000 fecf 	bl	11cac <ll_adv_scan_state_cb>
	return 0;
   10f0e:	4628      	mov	r0, r5
   10f10:	e756      	b.n	10dc0 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10f12:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
   10f16:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   10f18:	aa0d      	add	r2, sp, #52	; 0x34
   10f1a:	ab0c      	add	r3, sp, #48	; 0x30
   10f1c:	4441      	add	r1, r8
   10f1e:	2003      	movs	r0, #3
   10f20:	f7f9 fb8a 	bl	a638 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   10f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f26:	2b00      	cmp	r3, #0
   10f28:	d0ae      	beq.n	10e88 <radio_scan_enable+0xe8>
			ticks_anchor = ticks_ref;
   10f2a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   10f2e:	e7ab      	b.n	10e88 <radio_scan_enable+0xe8>
			cpu_sleep();
   10f30:	f7f8 fd52 	bl	99d8 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10f36:	2b02      	cmp	r3, #2
   10f38:	d0fa      	beq.n	10f30 <radio_scan_enable+0x190>
   10f3a:	e7d7      	b.n	10eec <radio_scan_enable+0x14c>
   10f3c:	f3af 8000 	nop.w
   10f40:	1afd498d 	.word	0x1afd498d
   10f44:	00000007 	.word	0x00000007
   10f48:	200008f0 	.word	0x200008f0
   10f4c:	84e72a00 	.word	0x84e72a00
   10f50:	3b9aca00 	.word	0x3b9aca00
   10f54:	00009a1d 	.word	0x00009a1d
   10f58:	0000ba55 	.word	0x0000ba55

00010f5c <radio_scan_disable>:
{
   10f5c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   10f5e:	2104      	movs	r1, #4
   10f60:	2006      	movs	r0, #6
   10f62:	f7f8 ff4d 	bl	9e00 <role_disable>
	if (!status) {
   10f66:	4605      	mov	r5, r0
   10f68:	b9e8      	cbnz	r0, 10fa6 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   10f6a:	4c10      	ldr	r4, [pc, #64]	; (10fac <radio_scan_disable+0x50>)
   10f6c:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
   10f70:	f360 0200 	bfi	r2, r0, #0, #1
   10f74:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
   10f78:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   10f7c:	2a00      	cmp	r2, #0
   10f7e:	db01      	blt.n	10f84 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   10f80:	f000 fe94 	bl	11cac <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   10f84:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
   10f88:	b15e      	cbz	r6, 10fa2 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   10f8a:	2300      	movs	r3, #0
   10f8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
   10f90:	4907      	ldr	r1, [pc, #28]	; (10fb0 <radio_scan_disable+0x54>)
   10f92:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10f96:	f7f5 ff50 	bl	6e3a <mem_release>
			mem_release(conn, &_radio.conn_free);
   10f9a:	4906      	ldr	r1, [pc, #24]	; (10fb4 <radio_scan_disable+0x58>)
   10f9c:	4630      	mov	r0, r6
   10f9e:	f7f5 ff4c 	bl	6e3a <mem_release>
}
   10fa2:	4628      	mov	r0, r5
   10fa4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10fa6:	250c      	movs	r5, #12
   10fa8:	e7fb      	b.n	10fa2 <radio_scan_disable+0x46>
   10faa:	bf00      	nop
   10fac:	200008f0 	.word	0x200008f0
   10fb0:	20000a38 	.word	0x20000a38
   10fb4:	200009fc 	.word	0x200009fc

00010fb8 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   10fb8:	4b03      	ldr	r3, [pc, #12]	; (10fc8 <ll_connect_disable+0x10>)
   10fba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10fbe:	b10b      	cbz	r3, 10fc4 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   10fc0:	f7ff bfcc 	b.w	10f5c <radio_scan_disable>
}
   10fc4:	200c      	movs	r0, #12
   10fc6:	4770      	bx	lr
   10fc8:	200008f0 	.word	0x200008f0

00010fcc <ll_rx_dequeue>:
{
   10fcc:	b530      	push	{r4, r5, lr}
   10fce:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10fd0:	4d4c      	ldr	r5, [pc, #304]	; (11104 <ll_rx_dequeue+0x138>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10fd2:	aa04      	add	r2, sp, #16
   10fd4:	2300      	movs	r3, #0
   10fd6:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10fda:	f8d5 0150 	ldr.w	r0, [r5, #336]	; 0x150
   10fde:	f505 71a6 	add.w	r1, r5, #332	; 0x14c
   10fe2:	f7f5 ff79 	bl	6ed8 <memq_dequeue>
   10fe6:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10fe8:	b978      	cbnz	r0, 1100a <ll_rx_dequeue+0x3e>
   10fea:	4b47      	ldr	r3, [pc, #284]	; (11108 <ll_rx_dequeue+0x13c>)
   10fec:	9301      	str	r3, [sp, #4]
   10fee:	9300      	str	r3, [sp, #0]
   10ff0:	4b46      	ldr	r3, [pc, #280]	; (1110c <ll_rx_dequeue+0x140>)
   10ff2:	4a47      	ldr	r2, [pc, #284]	; (11110 <ll_rx_dequeue+0x144>)
   10ff4:	681c      	ldr	r4, [r3, #0]
   10ff6:	4947      	ldr	r1, [pc, #284]	; (11114 <ll_rx_dequeue+0x148>)
   10ff8:	4b47      	ldr	r3, [pc, #284]	; (11118 <ll_rx_dequeue+0x14c>)
   10ffa:	4848      	ldr	r0, [pc, #288]	; (1111c <ll_rx_dequeue+0x150>)
		LL_ASSERT(_radio.link_rx_data_quota <
   10ffc:	47a0      	blx	r4
   10ffe:	4040      	eors	r0, r0
   11000:	f380 8811 	msr	BASEPRI, r0
   11004:	f04f 0004 	mov.w	r0, #4
   11008:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   1100a:	f505 71a4 	add.w	r1, r5, #328	; 0x148
   1100e:	f7f5 ff14 	bl	6e3a <mem_release>
	switch (node_rx->hdr.type) {
   11012:	9a03      	ldr	r2, [sp, #12]
   11014:	7911      	ldrb	r1, [r2, #4]
   11016:	290c      	cmp	r1, #12
   11018:	d807      	bhi.n	1102a <ll_rx_dequeue+0x5e>
   1101a:	2301      	movs	r3, #1
   1101c:	408b      	lsls	r3, r1
   1101e:	f641 707e 	movw	r0, #8062	; 0x1f7e
   11022:	4203      	tst	r3, r0
   11024:	d10b      	bne.n	1103e <ll_rx_dequeue+0x72>
   11026:	0618      	lsls	r0, r3, #24
   11028:	d41d      	bmi.n	11066 <ll_rx_dequeue+0x9a>
		LL_ASSERT(0);
   1102a:	4b37      	ldr	r3, [pc, #220]	; (11108 <ll_rx_dequeue+0x13c>)
   1102c:	9301      	str	r3, [sp, #4]
   1102e:	9300      	str	r3, [sp, #0]
   11030:	4b36      	ldr	r3, [pc, #216]	; (1110c <ll_rx_dequeue+0x140>)
   11032:	4a37      	ldr	r2, [pc, #220]	; (11110 <ll_rx_dequeue+0x144>)
   11034:	681c      	ldr	r4, [r3, #0]
   11036:	4937      	ldr	r1, [pc, #220]	; (11114 <ll_rx_dequeue+0x148>)
   11038:	4b37      	ldr	r3, [pc, #220]	; (11118 <ll_rx_dequeue+0x14c>)
   1103a:	4839      	ldr	r0, [pc, #228]	; (11120 <ll_rx_dequeue+0x154>)
   1103c:	e7de      	b.n	10ffc <ll_rx_dequeue+0x30>
		LL_ASSERT(_radio.link_rx_data_quota <
   1103e:	f895 0140 	ldrb.w	r0, [r5, #320]	; 0x140
   11042:	f895 3154 	ldrb.w	r3, [r5, #340]	; 0x154
   11046:	3801      	subs	r0, #1
   11048:	4283      	cmp	r3, r0
   1104a:	db09      	blt.n	11060 <ll_rx_dequeue+0x94>
   1104c:	4b2e      	ldr	r3, [pc, #184]	; (11108 <ll_rx_dequeue+0x13c>)
   1104e:	9301      	str	r3, [sp, #4]
   11050:	9300      	str	r3, [sp, #0]
   11052:	4b2e      	ldr	r3, [pc, #184]	; (1110c <ll_rx_dequeue+0x140>)
   11054:	4a2e      	ldr	r2, [pc, #184]	; (11110 <ll_rx_dequeue+0x144>)
   11056:	681c      	ldr	r4, [r3, #0]
   11058:	492e      	ldr	r1, [pc, #184]	; (11114 <ll_rx_dequeue+0x148>)
   1105a:	4b2f      	ldr	r3, [pc, #188]	; (11118 <ll_rx_dequeue+0x14c>)
   1105c:	4831      	ldr	r0, [pc, #196]	; (11124 <ll_rx_dequeue+0x158>)
   1105e:	e7cd      	b.n	10ffc <ll_rx_dequeue+0x30>
		_radio.link_rx_data_quota++;
   11060:	3301      	adds	r3, #1
   11062:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   11066:	2906      	cmp	r1, #6
   11068:	d13a      	bne.n	110e0 <ll_rx_dequeue+0x114>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1106a:	7ad3      	ldrb	r3, [r2, #11]
   1106c:	2b3c      	cmp	r3, #60	; 0x3c
   1106e:	d00f      	beq.n	11090 <ll_rx_dequeue+0xc4>
   11070:	7b12      	ldrb	r2, [r2, #12]
   11072:	bb02      	cbnz	r2, 110b6 <ll_rx_dequeue+0xea>
			LL_ASSERT(_radio.scanner.is_enabled);
   11074:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   11078:	07d9      	lsls	r1, r3, #31
   1107a:	d433      	bmi.n	110e4 <ll_rx_dequeue+0x118>
   1107c:	4b22      	ldr	r3, [pc, #136]	; (11108 <ll_rx_dequeue+0x13c>)
   1107e:	9301      	str	r3, [sp, #4]
   11080:	9300      	str	r3, [sp, #0]
   11082:	4b22      	ldr	r3, [pc, #136]	; (1110c <ll_rx_dequeue+0x140>)
   11084:	4a22      	ldr	r2, [pc, #136]	; (11110 <ll_rx_dequeue+0x144>)
   11086:	681c      	ldr	r4, [r3, #0]
   11088:	4922      	ldr	r1, [pc, #136]	; (11114 <ll_rx_dequeue+0x148>)
   1108a:	4b23      	ldr	r3, [pc, #140]	; (11118 <ll_rx_dequeue+0x14c>)
   1108c:	4826      	ldr	r0, [pc, #152]	; (11128 <ll_rx_dequeue+0x15c>)
   1108e:	e7b5      	b.n	10ffc <ll_rx_dequeue+0x30>
				_radio.advertiser.conn = NULL;
   11090:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   11092:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
   11096:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
   1109a:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   1109e:	2b00      	cmp	r3, #0
   110a0:	db0b      	blt.n	110ba <ll_rx_dequeue+0xee>
   110a2:	4b19      	ldr	r3, [pc, #100]	; (11108 <ll_rx_dequeue+0x13c>)
   110a4:	9301      	str	r3, [sp, #4]
   110a6:	9300      	str	r3, [sp, #0]
   110a8:	4b18      	ldr	r3, [pc, #96]	; (1110c <ll_rx_dequeue+0x140>)
   110aa:	4a19      	ldr	r2, [pc, #100]	; (11110 <ll_rx_dequeue+0x144>)
   110ac:	681c      	ldr	r4, [r3, #0]
   110ae:	4919      	ldr	r1, [pc, #100]	; (11114 <ll_rx_dequeue+0x148>)
   110b0:	4b19      	ldr	r3, [pc, #100]	; (11118 <ll_rx_dequeue+0x14c>)
   110b2:	481e      	ldr	r0, [pc, #120]	; (1112c <ll_rx_dequeue+0x160>)
   110b4:	e7a2      	b.n	10ffc <ll_rx_dequeue+0x30>
		struct connection *conn = NULL;
   110b6:	2500      	movs	r5, #0
   110b8:	e7ef      	b.n	1109a <ll_rx_dequeue+0xce>
			_radio.advertiser.is_enabled = 0;
   110ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   110be:	f36f 13c7 	bfc	r3, #7, #1
   110c2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   110c6:	b995      	cbnz	r5, 110ee <ll_rx_dequeue+0x122>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   110c8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
   110cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   110d0:	f000 0001 	and.w	r0, r0, #1
   110d4:	0040      	lsls	r0, r0, #1
		if (!bm) {
   110d6:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   110da:	d101      	bne.n	110e0 <ll_rx_dequeue+0x114>
			ll_adv_scan_state_cb(0);
   110dc:	f000 fde6 	bl	11cac <ll_adv_scan_state_cb>
}
   110e0:	b005      	add	sp, #20
   110e2:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   110e4:	f362 0300 	bfi	r3, r2, #0, #1
   110e8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
   110ec:	e7ec      	b.n	110c8 <ll_rx_dequeue+0xfc>
			mem_release(node_rx->hdr.onion.link,
   110ee:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   110f2:	490f      	ldr	r1, [pc, #60]	; (11130 <ll_rx_dequeue+0x164>)
   110f4:	f7f5 fea1 	bl	6e3a <mem_release>
			mem_release(conn, &_radio.conn_free);
   110f8:	490e      	ldr	r1, [pc, #56]	; (11134 <ll_rx_dequeue+0x168>)
   110fa:	4628      	mov	r0, r5
   110fc:	f7f5 fe9d 	bl	6e3a <mem_release>
   11100:	e7e2      	b.n	110c8 <ll_rx_dequeue+0xfc>
   11102:	bf00      	nop
   11104:	200008f0 	.word	0x200008f0
   11108:	00014c55 	.word	0x00014c55
   1110c:	20003aa4 	.word	0x20003aa4
   11110:	000159c3 	.word	0x000159c3
   11114:	00015a12 	.word	0x00015a12
   11118:	00017245 	.word	0x00017245
   1111c:	00017293 	.word	0x00017293
   11120:	00015962 	.word	0x00015962
   11124:	0001733e 	.word	0x0001733e
   11128:	0001782c 	.word	0x0001782c
   1112c:	000177ee 	.word	0x000177ee
   11130:	20000a38 	.word	0x20000a38
   11134:	200009fc 	.word	0x200009fc

00011138 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   11138:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1113a:	4c0b      	ldr	r4, [pc, #44]	; (11168 <rtc0_nrf5_isr+0x30>)
   1113c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   11140:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   11144:	b122      	cbz	r2, 11150 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11146:	2000      	movs	r0, #0
   11148:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   1114c:	f7f6 fcd4 	bl	7af8 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11150:	b12d      	cbz	r5, 1115e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   11152:	2300      	movs	r3, #0
   11154:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   11158:	2001      	movs	r0, #1
   1115a:	f7f6 fccd 	bl	7af8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1115e:	2000      	movs	r0, #0
}
   11160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   11164:	f7f5 bf68 	b.w	7038 <mayfly_run>
   11168:	4000b000 	.word	0x4000b000

0001116c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1116c:	2001      	movs	r0, #1
   1116e:	f7f5 bf63 	b.w	7038 <mayfly_run>

00011172 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11172:	4668      	mov	r0, sp
   11174:	f020 0107 	bic.w	r1, r0, #7
   11178:	468d      	mov	sp, r1
   1117a:	b501      	push	{r0, lr}
	isr_radio();
   1117c:	f001 f8da 	bl	12334 <isr_radio>
	ISR_DIRECT_PM();
   11180:	f7f0 fbbc 	bl	18fc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   11184:	f7f0 f9a2 	bl	14cc <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11188:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1118c:	4685      	mov	sp, r0
   1118e:	4770      	bx	lr

00011190 <radio_active_callback>:
{
   11190:	4770      	bx	lr
	...

00011194 <radio_event_callback>:
	k_sem_give(sem_recv);
   11194:	4b01      	ldr	r3, [pc, #4]	; (1119c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   11196:	6818      	ldr	r0, [r3, #0]
   11198:	f002 bf7e 	b.w	14098 <_impl_k_sem_give>
   1119c:	20001220 	.word	0x20001220

000111a0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   111a0:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   111a2:	4b42      	ldr	r3, [pc, #264]	; (112ac <ll_init+0x10c>)
{
   111a4:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   111a6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   111a8:	4841      	ldr	r0, [pc, #260]	; (112b0 <ll_init+0x110>)
   111aa:	f002 fa1f 	bl	135ec <device_get_binding>
	if (!clk_k32) {
   111ae:	b918      	cbnz	r0, 111b8 <ll_init+0x18>
		return -ENODEV;
   111b0:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   111b4:	b006      	add	sp, #24
   111b6:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   111b8:	6843      	ldr	r3, [r0, #4]
   111ba:	2101      	movs	r1, #1
   111bc:	681b      	ldr	r3, [r3, #0]
   111be:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   111c0:	483c      	ldr	r0, [pc, #240]	; (112b4 <ll_init+0x114>)
   111c2:	f002 fa13 	bl	135ec <device_get_binding>
	if (!entropy) {
   111c6:	4604      	mov	r4, r0
   111c8:	2800      	cmp	r0, #0
   111ca:	d0f1      	beq.n	111b0 <ll_init+0x10>
	cntr_init();
   111cc:	f000 ff94 	bl	120f8 <cntr_init>
	mayfly_init();
   111d0:	f7f5 fe92 	bl	6ef8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   111d4:	4b38      	ldr	r3, [pc, #224]	; (112b8 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   111d6:	2203      	movs	r2, #3
   111d8:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   111da:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   111dc:	4a37      	ldr	r2, [pc, #220]	; (112bc <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   111de:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   111e0:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   111e2:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   111e4:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   111e6:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   111e8:	9205      	str	r2, [sp, #20]
   111ea:	4a35      	ldr	r2, [pc, #212]	; (112c0 <ll_init+0x120>)
   111ec:	9204      	str	r2, [sp, #16]
   111ee:	4a35      	ldr	r2, [pc, #212]	; (112c4 <ll_init+0x124>)
   111f0:	9203      	str	r2, [sp, #12]
   111f2:	4a35      	ldr	r2, [pc, #212]	; (112c8 <ll_init+0x128>)
   111f4:	9202      	str	r2, [sp, #8]
   111f6:	220d      	movs	r2, #13
   111f8:	9201      	str	r2, [sp, #4]
   111fa:	9300      	str	r3, [sp, #0]
   111fc:	4a33      	ldr	r2, [pc, #204]	; (112cc <ll_init+0x12c>)
   111fe:	2304      	movs	r3, #4
   11200:	f7f6 fc42 	bl	7a88 <ticker_init>
	LL_ASSERT(!err);
   11204:	b178      	cbz	r0, 11226 <ll_init+0x86>
   11206:	4b32      	ldr	r3, [pc, #200]	; (112d0 <ll_init+0x130>)
   11208:	9301      	str	r3, [sp, #4]
   1120a:	9300      	str	r3, [sp, #0]
   1120c:	4b31      	ldr	r3, [pc, #196]	; (112d4 <ll_init+0x134>)
   1120e:	4a32      	ldr	r2, [pc, #200]	; (112d8 <ll_init+0x138>)
   11210:	681c      	ldr	r4, [r3, #0]
   11212:	4932      	ldr	r1, [pc, #200]	; (112dc <ll_init+0x13c>)
   11214:	4b32      	ldr	r3, [pc, #200]	; (112e0 <ll_init+0x140>)
   11216:	4833      	ldr	r0, [pc, #204]	; (112e4 <ll_init+0x144>)
   11218:	47a0      	blx	r4
   1121a:	4040      	eors	r0, r0
   1121c:	f380 8811 	msr	BASEPRI, r0
   11220:	f04f 0004 	mov.w	r0, #4
   11224:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   11226:	4830      	ldr	r0, [pc, #192]	; (112e8 <ll_init+0x148>)
   11228:	f002 f9e0 	bl	135ec <device_get_binding>
	if (!clk_m16) {
   1122c:	2800      	cmp	r0, #0
   1122e:	d0bf      	beq.n	111b0 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   11230:	4b2e      	ldr	r3, [pc, #184]	; (112ec <ll_init+0x14c>)
   11232:	9304      	str	r3, [sp, #16]
   11234:	9501      	str	r5, [sp, #4]
   11236:	231b      	movs	r3, #27
   11238:	2501      	movs	r5, #1
   1123a:	f44f 7657 	mov.w	r6, #860	; 0x35c
   1123e:	9303      	str	r3, [sp, #12]
   11240:	9302      	str	r3, [sp, #8]
   11242:	4622      	mov	r2, r4
   11244:	9605      	str	r6, [sp, #20]
   11246:	9500      	str	r5, [sp, #0]
   11248:	462b      	mov	r3, r5
   1124a:	2107      	movs	r1, #7
   1124c:	f7fe ff34 	bl	100b8 <radio_init>
	if (err) {
   11250:	4604      	mov	r4, r0
   11252:	b168      	cbz	r0, 11270 <ll_init+0xd0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   11254:	4b1e      	ldr	r3, [pc, #120]	; (112d0 <ll_init+0x130>)
   11256:	9303      	str	r3, [sp, #12]
   11258:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   1125c:	4b1d      	ldr	r3, [pc, #116]	; (112d4 <ll_init+0x134>)
   1125e:	4824      	ldr	r0, [pc, #144]	; (112f0 <ll_init+0x150>)
   11260:	681c      	ldr	r4, [r3, #0]
   11262:	4a1d      	ldr	r2, [pc, #116]	; (112d8 <ll_init+0x138>)
   11264:	4b1e      	ldr	r3, [pc, #120]	; (112e0 <ll_init+0x140>)
   11266:	491d      	ldr	r1, [pc, #116]	; (112dc <ll_init+0x13c>)
   11268:	47a0      	blx	r4
		return -ENOMEM;
   1126a:	f06f 000b 	mvn.w	r0, #11
   1126e:	e7a1      	b.n	111b4 <ll_init+0x14>
	ll_filter_reset(true);
   11270:	4628      	mov	r0, r5
   11272:	f000 fef9 	bl	12068 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11276:	4622      	mov	r2, r4
   11278:	4621      	mov	r1, r4
   1127a:	4628      	mov	r0, r5
   1127c:	f7f0 fb24 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   11280:	4622      	mov	r2, r4
   11282:	4621      	mov	r1, r4
   11284:	200b      	movs	r0, #11
   11286:	f7f0 fb1f 	bl	18c8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1128a:	4622      	mov	r2, r4
   1128c:	4621      	mov	r1, r4
   1128e:	2018      	movs	r0, #24
   11290:	f7f0 fb1a 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11294:	4628      	mov	r0, r5
   11296:	f7f0 fae5 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1129a:	200b      	movs	r0, #11
   1129c:	f7f0 fae2 	bl	1864 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   112a0:	2018      	movs	r0, #24
   112a2:	f7f0 fadf 	bl	1864 <_arch_irq_enable>
	return 0;
   112a6:	4620      	mov	r0, r4
   112a8:	e784      	b.n	111b4 <ll_init+0x14>
   112aa:	bf00      	nop
   112ac:	20001220 	.word	0x20001220
   112b0:	00014d28 	.word	0x00014d28
   112b4:	00014cfc 	.word	0x00014cfc
   112b8:	20001200 	.word	0x20001200
   112bc:	00012ced 	.word	0x00012ced
   112c0:	00012c45 	.word	0x00012c45
   112c4:	00012be1 	.word	0x00012be1
   112c8:	20000f90 	.word	0x20000f90
   112cc:	20000e50 	.word	0x20000e50
   112d0:	00014c55 	.word	0x00014c55
   112d4:	20003aa4 	.word	0x20003aa4
   112d8:	000159c3 	.word	0x000159c3
   112dc:	00015a12 	.word	0x00015a12
   112e0:	00017f63 	.word	0x00017f63
   112e4:	00017f6b 	.word	0x00017f6b
   112e8:	00014d33 	.word	0x00014d33
   112ec:	20000af4 	.word	0x20000af4
   112f0:	00017f91 	.word	0x00017f91

000112f4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   112f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   112f8:	4681      	mov	r9, r0
   112fa:	4688      	mov	r8, r1
   112fc:	4617      	mov	r7, r2
   112fe:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
   11300:	f7fe ffbe 	bl	10280 <ll_scan_is_enabled>
   11304:	b988      	cbnz	r0, 1132a <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   11306:	4d0a      	ldr	r5, [pc, #40]	; (11330 <ll_scan_params_set+0x3c>)
   11308:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1130a:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   1130e:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   11312:	4622      	mov	r2, r4
   11314:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
   11318:	4613      	mov	r3, r2
   1131a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1131e:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   11320:	f362 1387 	bfi	r3, r2, #6, #2
   11324:	712b      	strb	r3, [r5, #4]

	return 0;
   11326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1132a:	200c      	movs	r0, #12
}
   1132c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11330:	20001224 	.word	0x20001224

00011334 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   11334:	b5f0      	push	{r4, r5, r6, r7, lr}
   11336:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   11338:	b920      	cbnz	r0, 11344 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1133a:	b005      	add	sp, #20
   1133c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   11340:	f7ff be0c 	b.w	10f5c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   11344:	f7fe ff9c 	bl	10280 <ll_scan_is_enabled>
   11348:	4606      	mov	r6, r0
   1134a:	bb40      	cbnz	r0, 1139e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1134c:	4c15      	ldr	r4, [pc, #84]	; (113a4 <ll_scan_enable+0x70>)
   1134e:	7920      	ldrb	r0, [r4, #4]
   11350:	0980      	lsrs	r0, r0, #6
   11352:	f000 fa73 	bl	1183c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   11356:	7923      	ldrb	r3, [r4, #4]
   11358:	f013 0501 	ands.w	r5, r3, #1
   1135c:	d006      	beq.n	1136c <ll_scan_enable+0x38>
   1135e:	f013 0520 	ands.w	r5, r3, #32
   11362:	d003      	beq.n	1136c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   11364:	4630      	mov	r0, r6
   11366:	f000 fbf5 	bl	11b54 <ll_rl_rpa_update>
		rpa_gen = 1;
   1136a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1136c:	7926      	ldrb	r6, [r4, #4]
   1136e:	f006 070f 	and.w	r7, r6, #15
   11372:	f3c6 1600 	ubfx	r6, r6, #4, #1
   11376:	2100      	movs	r1, #0
   11378:	4630      	mov	r0, r6
   1137a:	f7f6 fd43 	bl	7e04 <ll_addr_get>
   1137e:	22ff      	movs	r2, #255	; 0xff
   11380:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   11382:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   11384:	8823      	ldrh	r3, [r4, #0]
   11386:	9502      	str	r5, [sp, #8]
   11388:	0992      	lsrs	r2, r2, #6
   1138a:	9201      	str	r2, [sp, #4]
   1138c:	8862      	ldrh	r2, [r4, #2]
   1138e:	9200      	str	r2, [sp, #0]
   11390:	4631      	mov	r1, r6
   11392:	4602      	mov	r2, r0
   11394:	4638      	mov	r0, r7
   11396:	f7ff fd03 	bl	10da0 <radio_scan_enable>
}
   1139a:	b005      	add	sp, #20
   1139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1139e:	2000      	movs	r0, #0
   113a0:	e7fb      	b.n	1139a <ll_scan_enable+0x66>
   113a2:	bf00      	nop
   113a4:	20001224 	.word	0x20001224

000113a8 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113ac:	b085      	sub	sp, #20
   113ae:	461e      	mov	r6, r3
   113b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   113b4:	9303      	str	r3, [sp, #12]
   113b6:	4680      	mov	r8, r0
   113b8:	4689      	mov	r9, r1
   113ba:	4615      	mov	r5, r2
   113bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   113be:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   113c2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   113c6:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   113ca:	f7fe ff59 	bl	10280 <ll_scan_is_enabled>
   113ce:	9b03      	ldr	r3, [sp, #12]
   113d0:	bba0      	cbnz	r0, 1143c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   113d2:	9300      	str	r3, [sp, #0]
   113d4:	4652      	mov	r2, sl
   113d6:	465b      	mov	r3, fp
   113d8:	4639      	mov	r1, r7
   113da:	4630      	mov	r0, r6
   113dc:	f7fe ff74 	bl	102c8 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   113e0:	bb68      	cbnz	r0, 1143e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   113e2:	4628      	mov	r0, r5
   113e4:	f000 fa2a 	bl	1183c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   113e8:	b1dd      	cbz	r5, 11422 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   113ea:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   113ec:	1ea3      	subs	r3, r4, #2
   113ee:	2b01      	cmp	r3, #1
   113f0:	d822      	bhi.n	11438 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   113f2:	2000      	movs	r0, #0
   113f4:	f000 fbae 	bl	11b54 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   113f8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   113fc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   113fe:	2100      	movs	r1, #0
   11400:	4620      	mov	r0, r4
   11402:	f7f6 fcff 	bl	7e04 <ll_addr_get>
   11406:	4643      	mov	r3, r8
   11408:	4602      	mov	r2, r0
   1140a:	4621      	mov	r1, r4
   1140c:	2000      	movs	r0, #0
   1140e:	9711      	str	r7, [sp, #68]	; 0x44
   11410:	9610      	str	r6, [sp, #64]	; 0x40
   11412:	950f      	str	r5, [sp, #60]	; 0x3c
   11414:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   11418:	b005      	add	sp, #20
   1141a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1141e:	f7ff bcbf 	b.w	10da0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   11422:	f000 fb8f 	bl	11b44 <ctrl_rl_enabled>
   11426:	2800      	cmp	r0, #0
   11428:	d0df      	beq.n	113ea <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1142a:	4639      	mov	r1, r7
   1142c:	462a      	mov	r2, r5
   1142e:	4630      	mov	r0, r6
   11430:	f000 fa26 	bl	11880 <ll_rl_find>
   11434:	4607      	mov	r7, r0
   11436:	e7d9      	b.n	113ec <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   11438:	2600      	movs	r6, #0
   1143a:	e7e0      	b.n	113fe <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1143c:	200c      	movs	r0, #12
}
   1143e:	b005      	add	sp, #20
   11440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011444 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   11444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11448:	4688      	mov	r8, r1
	int i;

	if (free) {
   1144a:	4615      	mov	r5, r2
   1144c:	b10a      	cbz	r2, 11452 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1144e:	23ff      	movs	r3, #255	; 0xff
   11450:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11452:	4e14      	ldr	r6, [pc, #80]	; (114a4 <wl_find+0x60>)
{
   11454:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   11456:	f000 0701 	and.w	r7, r0, #1
   1145a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1145e:	07da      	lsls	r2, r3, #31
   11460:	d51d      	bpl.n	1149e <wl_find+0x5a>
   11462:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11466:	42bb      	cmp	r3, r7
   11468:	d113      	bne.n	11492 <wl_find+0x4e>
   1146a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   1146e:	2206      	movs	r2, #6
   11470:	4641      	mov	r1, r8
   11472:	3002      	adds	r0, #2
   11474:	f7f0 fbbf 	bl	1bf6 <memcmp>
   11478:	b910      	cbnz	r0, 11480 <wl_find+0x3c>
			return i;
   1147a:	b2e0      	uxtb	r0, r4
   1147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11480:	b13d      	cbz	r5, 11492 <wl_find+0x4e>
   11482:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11486:	07db      	lsls	r3, r3, #31
   11488:	d403      	bmi.n	11492 <wl_find+0x4e>
   1148a:	782b      	ldrb	r3, [r5, #0]
   1148c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1148e:	bf08      	it	eq
   11490:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   11492:	3401      	adds	r4, #1
   11494:	2c08      	cmp	r4, #8
   11496:	d1e0      	bne.n	1145a <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11498:	20ff      	movs	r0, #255	; 0xff
   1149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1149e:	2d00      	cmp	r5, #0
   114a0:	d1f3      	bne.n	1148a <wl_find+0x46>
   114a2:	e7f6      	b.n	11492 <wl_find+0x4e>
   114a4:	20001457 	.word	0x20001457

000114a8 <filter_wl_update>:
}

#if defined(CONFIG_BT_CTLR_PRIVACY)

static void filter_wl_update(void)
{
   114a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114ac:	4d1a      	ldr	r5, [pc, #104]	; (11518 <filter_wl_update+0x70>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   114ae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 11524 <filter_wl_update+0x7c>
		if (!wl[i].taken) {
   114b2:	1eae      	subs	r6, r5, #2
{
   114b4:	2400      	movs	r4, #0
   114b6:	4637      	mov	r7, r6
		if (!wl[i].taken) {
   114b8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   114bc:	07d9      	lsls	r1, r3, #31
   114be:	d524      	bpl.n	1150a <filter_wl_update+0x62>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   114c0:	f898 3000 	ldrb.w	r3, [r8]
   114c4:	b15b      	cbz	r3, 114de <filter_wl_update+0x36>
		j = wl[i].rl_idx;
   114c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   114ca:	2a07      	cmp	r2, #7
   114cc:	d807      	bhi.n	114de <filter_wl_update+0x36>
   114ce:	2328      	movs	r3, #40	; 0x28
   114d0:	4353      	muls	r3, r2
   114d2:	4a12      	ldr	r2, [pc, #72]	; (1151c <filter_wl_update+0x74>)
   114d4:	5cd3      	ldrb	r3, [r2, r3]
   114d6:	075a      	lsls	r2, r3, #29
   114d8:	d501      	bpl.n	114de <filter_wl_update+0x36>
   114da:	06db      	lsls	r3, r3, #27
   114dc:	d515      	bpl.n	1150a <filter_wl_update+0x62>
	filter->enable_bitmask |= BIT(index);
   114de:	4810      	ldr	r0, [pc, #64]	; (11520 <filter_wl_update+0x78>)
		    rl[j].dev) {
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   114e0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   114e4:	2201      	movs	r2, #1
   114e6:	fa02 f104 	lsl.w	r1, r2, r4
   114ea:	7802      	ldrb	r2, [r0, #0]
   114ec:	430a      	orrs	r2, r1
   114ee:	7002      	strb	r2, [r0, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   114f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   114f4:	7842      	ldrb	r2, [r0, #1]
   114f6:	40a3      	lsls	r3, r4
   114f8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   114fa:	2206      	movs	r2, #6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   114fc:	7043      	strb	r3, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   114fe:	fb02 0004 	mla	r0, r2, r4, r0
   11502:	4629      	mov	r1, r5
   11504:	3002      	adds	r0, #2
   11506:	f7f0 fb8b 	bl	1c20 <memcpy>
   1150a:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   1150c:	2c08      	cmp	r4, #8
   1150e:	f105 0508 	add.w	r5, r5, #8
   11512:	d1d1      	bne.n	114b8 <filter_wl_update+0x10>
				      wl[i].id_addr.val);
		}
	}
}
   11514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11518:	20001459 	.word	0x20001459
   1151c:	200012e4 	.word	0x200012e4
   11520:	20001497 	.word	0x20001497
   11524:	20001424 	.word	0x20001424

00011528 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   11528:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1152a:	f7fe fe95 	bl	10258 <ll_adv_is_enabled>
   1152e:	b928      	cbnz	r0, 1153c <rl_access_check.constprop.1+0x14>
   11530:	f7fe fea6 	bl	10280 <ll_scan_is_enabled>
   11534:	fab0 f080 	clz	r0, r0
   11538:	0940      	lsrs	r0, r0, #5
   1153a:	bd08      	pop	{r3, pc}
   1153c:	2000      	movs	r0, #0
}
   1153e:	bd08      	pop	{r3, pc}

00011540 <filter_rl_update>:
{
   11540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (rl[i].taken) {
   11542:	4e10      	ldr	r6, [pc, #64]	; (11584 <filter_rl_update+0x44>)
	filter->enable_bitmask |= BIT(index);
   11544:	4d10      	ldr	r5, [pc, #64]	; (11588 <filter_rl_update+0x48>)
{
   11546:	2400      	movs	r4, #0
		if (rl[i].taken) {
   11548:	2728      	movs	r7, #40	; 0x28
   1154a:	fb07 f104 	mul.w	r1, r7, r4
   1154e:	5c73      	ldrb	r3, [r6, r1]
   11550:	07da      	lsls	r2, r3, #31
   11552:	d513      	bpl.n	1157c <filter_rl_update+0x3c>
	filter->enable_bitmask |= BIT(index);
   11554:	2201      	movs	r2, #1
   11556:	fa02 f004 	lsl.w	r0, r2, r4
   1155a:	782a      	ldrb	r2, [r5, #0]
   1155c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1155e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   11562:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11564:	786a      	ldrb	r2, [r5, #1]
   11566:	40a3      	lsls	r3, r4
   11568:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1156a:	2206      	movs	r2, #6
   1156c:	3101      	adds	r1, #1
   1156e:	fb02 5004 	mla	r0, r2, r4, r5
   11572:	4431      	add	r1, r6
   11574:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11576:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11578:	f7f0 fb52 	bl	1c20 <memcpy>
   1157c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1157e:	2c08      	cmp	r4, #8
   11580:	d1e3      	bne.n	1154a <filter_rl_update+0xa>
}
   11582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11584:	200012e4 	.word	0x200012e4
   11588:	20001425 	.word	0x20001425

0001158c <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1158c:	2807      	cmp	r0, #7
   1158e:	d80c      	bhi.n	115aa <ctrl_lrpa_get+0x1e>
   11590:	2328      	movs	r3, #40	; 0x28
   11592:	4358      	muls	r0, r3
   11594:	4a06      	ldr	r2, [pc, #24]	; (115b0 <ctrl_lrpa_get+0x24>)
   11596:	5c13      	ldrb	r3, [r2, r0]
   11598:	1811      	adds	r1, r2, r0
   1159a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1159e:	b128      	cbz	r0, 115ac <ctrl_lrpa_get+0x20>
   115a0:	f3c3 0040 	ubfx	r0, r3, #1, #1
   115a4:	b110      	cbz	r0, 115ac <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   115a6:	6a48      	ldr	r0, [r1, #36]	; 0x24
   115a8:	4770      	bx	lr
		return NULL;
   115aa:	2000      	movs	r0, #0
}
   115ac:	4770      	bx	lr
   115ae:	bf00      	nop
   115b0:	200012e4 	.word	0x200012e4

000115b4 <ctrl_irks_get>:
	*count = peer_irk_count;
   115b4:	4b02      	ldr	r3, [pc, #8]	; (115c0 <ctrl_irks_get+0xc>)
   115b6:	781b      	ldrb	r3, [r3, #0]
   115b8:	7003      	strb	r3, [r0, #0]
}
   115ba:	4802      	ldr	r0, [pc, #8]	; (115c4 <ctrl_irks_get+0x10>)
   115bc:	4770      	bx	lr
   115be:	bf00      	nop
   115c0:	2000125a 	.word	0x2000125a
   115c4:	20001263 	.word	0x20001263

000115c8 <ctrl_rl_idx>:
{
   115c8:	b513      	push	{r0, r1, r4, lr}
	if (whitelist) {
   115ca:	2800      	cmp	r0, #0
   115cc:	d026      	beq.n	1161c <ctrl_rl_idx+0x54>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   115ce:	2907      	cmp	r1, #7
   115d0:	d90f      	bls.n	115f2 <ctrl_rl_idx+0x2a>
		LL_ASSERT(wl[devmatch_id].taken);
   115d2:	4b20      	ldr	r3, [pc, #128]	; (11654 <ctrl_rl_idx+0x8c>)
   115d4:	9301      	str	r3, [sp, #4]
   115d6:	9300      	str	r3, [sp, #0]
   115d8:	4b1f      	ldr	r3, [pc, #124]	; (11658 <ctrl_rl_idx+0x90>)
   115da:	4a20      	ldr	r2, [pc, #128]	; (1165c <ctrl_rl_idx+0x94>)
   115dc:	681c      	ldr	r4, [r3, #0]
   115de:	4920      	ldr	r1, [pc, #128]	; (11660 <ctrl_rl_idx+0x98>)
   115e0:	4b20      	ldr	r3, [pc, #128]	; (11664 <ctrl_rl_idx+0x9c>)
   115e2:	4821      	ldr	r0, [pc, #132]	; (11668 <ctrl_rl_idx+0xa0>)
   115e4:	47a0      	blx	r4
   115e6:	4040      	eors	r0, r0
   115e8:	f380 8811 	msr	BASEPRI, r0
   115ec:	f04f 0004 	mov.w	r0, #4
   115f0:	df02      	svc	2
   115f2:	4b1e      	ldr	r3, [pc, #120]	; (1166c <ctrl_rl_idx+0xa4>)
   115f4:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   115f8:	07d2      	lsls	r2, r2, #31
   115fa:	d409      	bmi.n	11610 <ctrl_rl_idx+0x48>
   115fc:	4b15      	ldr	r3, [pc, #84]	; (11654 <ctrl_rl_idx+0x8c>)
   115fe:	9301      	str	r3, [sp, #4]
   11600:	9300      	str	r3, [sp, #0]
   11602:	4b15      	ldr	r3, [pc, #84]	; (11658 <ctrl_rl_idx+0x90>)
   11604:	4a15      	ldr	r2, [pc, #84]	; (1165c <ctrl_rl_idx+0x94>)
   11606:	681c      	ldr	r4, [r3, #0]
   11608:	4915      	ldr	r1, [pc, #84]	; (11660 <ctrl_rl_idx+0x98>)
   1160a:	4b16      	ldr	r3, [pc, #88]	; (11664 <ctrl_rl_idx+0x9c>)
   1160c:	4818      	ldr	r0, [pc, #96]	; (11670 <ctrl_rl_idx+0xa8>)
   1160e:	e7e9      	b.n	115e4 <ctrl_rl_idx+0x1c>
		i = wl[devmatch_id].rl_idx;
   11610:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   11614:	7849      	ldrb	r1, [r1, #1]
}
   11616:	4608      	mov	r0, r1
   11618:	b002      	add	sp, #8
   1161a:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1161c:	2907      	cmp	r1, #7
   1161e:	d909      	bls.n	11634 <ctrl_rl_idx+0x6c>
   11620:	4b0c      	ldr	r3, [pc, #48]	; (11654 <ctrl_rl_idx+0x8c>)
   11622:	9301      	str	r3, [sp, #4]
   11624:	9300      	str	r3, [sp, #0]
   11626:	4b0c      	ldr	r3, [pc, #48]	; (11658 <ctrl_rl_idx+0x90>)
   11628:	4a0c      	ldr	r2, [pc, #48]	; (1165c <ctrl_rl_idx+0x94>)
   1162a:	681c      	ldr	r4, [r3, #0]
   1162c:	490c      	ldr	r1, [pc, #48]	; (11660 <ctrl_rl_idx+0x98>)
   1162e:	4b0d      	ldr	r3, [pc, #52]	; (11664 <ctrl_rl_idx+0x9c>)
   11630:	4810      	ldr	r0, [pc, #64]	; (11674 <ctrl_rl_idx+0xac>)
   11632:	e7d7      	b.n	115e4 <ctrl_rl_idx+0x1c>
		LL_ASSERT(rl[i].taken);
   11634:	2328      	movs	r3, #40	; 0x28
   11636:	434b      	muls	r3, r1
   11638:	4a0f      	ldr	r2, [pc, #60]	; (11678 <ctrl_rl_idx+0xb0>)
   1163a:	5cd3      	ldrb	r3, [r2, r3]
   1163c:	07db      	lsls	r3, r3, #31
   1163e:	d4ea      	bmi.n	11616 <ctrl_rl_idx+0x4e>
   11640:	4b04      	ldr	r3, [pc, #16]	; (11654 <ctrl_rl_idx+0x8c>)
   11642:	9301      	str	r3, [sp, #4]
   11644:	9300      	str	r3, [sp, #0]
   11646:	4b04      	ldr	r3, [pc, #16]	; (11658 <ctrl_rl_idx+0x90>)
   11648:	4a04      	ldr	r2, [pc, #16]	; (1165c <ctrl_rl_idx+0x94>)
   1164a:	681c      	ldr	r4, [r3, #0]
   1164c:	4904      	ldr	r1, [pc, #16]	; (11660 <ctrl_rl_idx+0x98>)
   1164e:	4b05      	ldr	r3, [pc, #20]	; (11664 <ctrl_rl_idx+0x9c>)
   11650:	480a      	ldr	r0, [pc, #40]	; (1167c <ctrl_rl_idx+0xb4>)
   11652:	e7c7      	b.n	115e4 <ctrl_rl_idx+0x1c>
   11654:	00014c55 	.word	0x00014c55
   11658:	20003aa4 	.word	0x20003aa4
   1165c:	000159c3 	.word	0x000159c3
   11660:	00015a12 	.word	0x00015a12
   11664:	00017fc6 	.word	0x00017fc6
   11668:	00018060 	.word	0x00018060
   1166c:	20001457 	.word	0x20001457
   11670:	0001812d 	.word	0x0001812d
   11674:	00018164 	.word	0x00018164
   11678:	200012e4 	.word	0x200012e4
   1167c:	00018231 	.word	0x00018231

00011680 <ctrl_rl_irk_idx>:
{
   11680:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11682:	4b1a      	ldr	r3, [pc, #104]	; (116ec <ctrl_rl_irk_idx+0x6c>)
   11684:	781b      	ldrb	r3, [r3, #0]
   11686:	4283      	cmp	r3, r0
   11688:	d80f      	bhi.n	116aa <ctrl_rl_irk_idx+0x2a>
   1168a:	4b19      	ldr	r3, [pc, #100]	; (116f0 <ctrl_rl_irk_idx+0x70>)
   1168c:	9301      	str	r3, [sp, #4]
   1168e:	9300      	str	r3, [sp, #0]
   11690:	4b18      	ldr	r3, [pc, #96]	; (116f4 <ctrl_rl_irk_idx+0x74>)
   11692:	4a19      	ldr	r2, [pc, #100]	; (116f8 <ctrl_rl_irk_idx+0x78>)
   11694:	681c      	ldr	r4, [r3, #0]
   11696:	4919      	ldr	r1, [pc, #100]	; (116fc <ctrl_rl_irk_idx+0x7c>)
   11698:	4b19      	ldr	r3, [pc, #100]	; (11700 <ctrl_rl_irk_idx+0x80>)
   1169a:	481a      	ldr	r0, [pc, #104]	; (11704 <ctrl_rl_irk_idx+0x84>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1169c:	47a0      	blx	r4
   1169e:	4040      	eors	r0, r0
   116a0:	f380 8811 	msr	BASEPRI, r0
   116a4:	f04f 0004 	mov.w	r0, #4
   116a8:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   116aa:	4b17      	ldr	r3, [pc, #92]	; (11708 <ctrl_rl_irk_idx+0x88>)
   116ac:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   116ae:	2807      	cmp	r0, #7
   116b0:	d909      	bls.n	116c6 <ctrl_rl_irk_idx+0x46>
   116b2:	4b0f      	ldr	r3, [pc, #60]	; (116f0 <ctrl_rl_irk_idx+0x70>)
   116b4:	9301      	str	r3, [sp, #4]
   116b6:	9300      	str	r3, [sp, #0]
   116b8:	4b0e      	ldr	r3, [pc, #56]	; (116f4 <ctrl_rl_irk_idx+0x74>)
   116ba:	4a0f      	ldr	r2, [pc, #60]	; (116f8 <ctrl_rl_irk_idx+0x78>)
   116bc:	681c      	ldr	r4, [r3, #0]
   116be:	490f      	ldr	r1, [pc, #60]	; (116fc <ctrl_rl_irk_idx+0x7c>)
   116c0:	4b0f      	ldr	r3, [pc, #60]	; (11700 <ctrl_rl_irk_idx+0x80>)
   116c2:	4812      	ldr	r0, [pc, #72]	; (1170c <ctrl_rl_irk_idx+0x8c>)
   116c4:	e7ea      	b.n	1169c <ctrl_rl_irk_idx+0x1c>
	LL_ASSERT(rl[i].taken);
   116c6:	2328      	movs	r3, #40	; 0x28
   116c8:	4343      	muls	r3, r0
   116ca:	4a11      	ldr	r2, [pc, #68]	; (11710 <ctrl_rl_irk_idx+0x90>)
   116cc:	5cd3      	ldrb	r3, [r2, r3]
   116ce:	07db      	lsls	r3, r3, #31
   116d0:	d409      	bmi.n	116e6 <ctrl_rl_irk_idx+0x66>
   116d2:	4b07      	ldr	r3, [pc, #28]	; (116f0 <ctrl_rl_irk_idx+0x70>)
   116d4:	9301      	str	r3, [sp, #4]
   116d6:	9300      	str	r3, [sp, #0]
   116d8:	4b06      	ldr	r3, [pc, #24]	; (116f4 <ctrl_rl_irk_idx+0x74>)
   116da:	4a07      	ldr	r2, [pc, #28]	; (116f8 <ctrl_rl_irk_idx+0x78>)
   116dc:	681c      	ldr	r4, [r3, #0]
   116de:	4907      	ldr	r1, [pc, #28]	; (116fc <ctrl_rl_irk_idx+0x7c>)
   116e0:	4b07      	ldr	r3, [pc, #28]	; (11700 <ctrl_rl_irk_idx+0x80>)
   116e2:	480c      	ldr	r0, [pc, #48]	; (11714 <ctrl_rl_irk_idx+0x94>)
   116e4:	e7da      	b.n	1169c <ctrl_rl_irk_idx+0x1c>
}
   116e6:	b002      	add	sp, #8
   116e8:	bd10      	pop	{r4, pc}
   116ea:	bf00      	nop
   116ec:	2000125a 	.word	0x2000125a
   116f0:	00014c55 	.word	0x00014c55
   116f4:	20003aa4 	.word	0x20003aa4
   116f8:	000159c3 	.word	0x000159c3
   116fc:	00015a12 	.word	0x00015a12
   11700:	00017fd2 	.word	0x00017fd2
   11704:	0001825e 	.word	0x0001825e
   11708:	2000125b 	.word	0x2000125b
   1170c:	0001829c 	.word	0x0001829c
   11710:	200012e4 	.word	0x200012e4
   11714:	00018231 	.word	0x00018231

00011718 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11718:	2807      	cmp	r0, #7
{
   1171a:	b513      	push	{r0, r1, r4, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1171c:	d819      	bhi.n	11752 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   1171e:	2328      	movs	r3, #40	; 0x28
   11720:	4358      	muls	r0, r3
   11722:	4b0d      	ldr	r3, [pc, #52]	; (11758 <ctrl_irk_whitelisted+0x40>)
   11724:	5c18      	ldrb	r0, [r3, r0]
   11726:	07c3      	lsls	r3, r0, #31
   11728:	d40f      	bmi.n	1174a <ctrl_irk_whitelisted+0x32>
   1172a:	4b0c      	ldr	r3, [pc, #48]	; (1175c <ctrl_irk_whitelisted+0x44>)
   1172c:	9301      	str	r3, [sp, #4]
   1172e:	9300      	str	r3, [sp, #0]
   11730:	4b0b      	ldr	r3, [pc, #44]	; (11760 <ctrl_irk_whitelisted+0x48>)
   11732:	4a0c      	ldr	r2, [pc, #48]	; (11764 <ctrl_irk_whitelisted+0x4c>)
   11734:	681c      	ldr	r4, [r3, #0]
   11736:	490c      	ldr	r1, [pc, #48]	; (11768 <ctrl_irk_whitelisted+0x50>)
   11738:	4b0c      	ldr	r3, [pc, #48]	; (1176c <ctrl_irk_whitelisted+0x54>)
   1173a:	480d      	ldr	r0, [pc, #52]	; (11770 <ctrl_irk_whitelisted+0x58>)
   1173c:	47a0      	blx	r4
   1173e:	4040      	eors	r0, r0
   11740:	f380 8811 	msr	BASEPRI, r0
   11744:	f04f 0004 	mov.w	r0, #4
   11748:	df02      	svc	2
	return rl[rl_idx].wl;
   1174a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1174e:	b002      	add	sp, #8
   11750:	bd10      	pop	{r4, pc}
		return false;
   11752:	2000      	movs	r0, #0
   11754:	e7fb      	b.n	1174e <ctrl_irk_whitelisted+0x36>
   11756:	bf00      	nop
   11758:	200012e4 	.word	0x200012e4
   1175c:	00014c55 	.word	0x00014c55
   11760:	20003aa4 	.word	0x20003aa4
   11764:	000159c3 	.word	0x000159c3
   11768:	00015a12 	.word	0x00015a12
   1176c:	00017fe2 	.word	0x00017fe2
   11770:	0001802e 	.word	0x0001802e

00011774 <ctrl_filter_get>:
}
   11774:	4b03      	ldr	r3, [pc, #12]	; (11784 <ctrl_filter_get+0x10>)
   11776:	4a04      	ldr	r2, [pc, #16]	; (11788 <ctrl_filter_get+0x14>)
   11778:	2800      	cmp	r0, #0
   1177a:	bf14      	ite	ne
   1177c:	4610      	movne	r0, r2
   1177e:	4618      	moveq	r0, r3
   11780:	4770      	bx	lr
   11782:	bf00      	nop
   11784:	20001425 	.word	0x20001425
   11788:	20001497 	.word	0x20001497

0001178c <ll_wl_size_get>:
   1178c:	2008      	movs	r0, #8
   1178e:	4770      	bx	lr

00011790 <ll_wl_clear>:
{
   11790:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11792:	f7fe fd69 	bl	10268 <radio_adv_filter_pol_get>
   11796:	4604      	mov	r4, r0
   11798:	b110      	cbz	r0, 117a0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1179a:	240c      	movs	r4, #12
}
   1179c:	4620      	mov	r0, r4
   1179e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   117a0:	f7fe fd84 	bl	102ac <radio_scan_filter_pol_get>
   117a4:	07c3      	lsls	r3, r0, #31
   117a6:	d4f8      	bmi.n	1179a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   117a8:	4a07      	ldr	r2, [pc, #28]	; (117c8 <ll_wl_clear+0x38>)
   117aa:	4623      	mov	r3, r4
   117ac:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   117b0:	f36f 0100 	bfc	r1, #0, #1
   117b4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   117b8:	3301      	adds	r3, #1
   117ba:	2b08      	cmp	r3, #8
   117bc:	d1f6      	bne.n	117ac <ll_wl_clear+0x1c>
	wl_anon = 0;
   117be:	4b03      	ldr	r3, [pc, #12]	; (117cc <ll_wl_clear+0x3c>)
   117c0:	2200      	movs	r2, #0
   117c2:	701a      	strb	r2, [r3, #0]
	return 0;
   117c4:	e7ea      	b.n	1179c <ll_wl_clear+0xc>
   117c6:	bf00      	nop
   117c8:	20001457 	.word	0x20001457
   117cc:	20001950 	.word	0x20001950

000117d0 <ll_wl_remove>:
{
   117d0:	b538      	push	{r3, r4, r5, lr}
   117d2:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   117d4:	f7fe fd48 	bl	10268 <radio_adv_filter_pol_get>
   117d8:	4604      	mov	r4, r0
   117da:	b110      	cbz	r0, 117e2 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   117dc:	240c      	movs	r4, #12
}
   117de:	4620      	mov	r0, r4
   117e0:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   117e2:	f7fe fd63 	bl	102ac <radio_scan_filter_pol_get>
   117e6:	07c3      	lsls	r3, r0, #31
   117e8:	d4f8      	bmi.n	117dc <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   117ea:	7828      	ldrb	r0, [r5, #0]
   117ec:	28ff      	cmp	r0, #255	; 0xff
   117ee:	d102      	bne.n	117f6 <ll_wl_remove+0x26>
		wl_anon = 0;
   117f0:	4b0f      	ldr	r3, [pc, #60]	; (11830 <ll_wl_remove+0x60>)
   117f2:	701c      	strb	r4, [r3, #0]
		return 0;
   117f4:	e7f3      	b.n	117de <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   117f6:	4622      	mov	r2, r4
   117f8:	1c69      	adds	r1, r5, #1
   117fa:	f7ff fe23 	bl	11444 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   117fe:	2807      	cmp	r0, #7
   11800:	d813      	bhi.n	1182a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11802:	4b0c      	ldr	r3, [pc, #48]	; (11834 <ll_wl_remove+0x64>)
   11804:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11808:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1180a:	2d07      	cmp	r5, #7
   1180c:	d806      	bhi.n	1181c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1180e:	2228      	movs	r2, #40	; 0x28
   11810:	4909      	ldr	r1, [pc, #36]	; (11838 <ll_wl_remove+0x68>)
   11812:	436a      	muls	r2, r5
   11814:	5c8d      	ldrb	r5, [r1, r2]
   11816:	f364 1545 	bfi	r5, r4, #5, #1
   1181a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1181c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11820:	f36f 0200 	bfc	r2, #0, #1
   11824:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11828:	e7d9      	b.n	117de <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1182a:	2402      	movs	r4, #2
   1182c:	e7d7      	b.n	117de <ll_wl_remove+0xe>
   1182e:	bf00      	nop
   11830:	20001950 	.word	0x20001950
   11834:	20001457 	.word	0x20001457
   11838:	200012e4 	.word	0x200012e4

0001183c <ll_filters_scan_update>:
{
   1183c:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1183e:	4b0d      	ldr	r3, [pc, #52]	; (11874 <ll_filters_scan_update+0x38>)
   11840:	2200      	movs	r2, #0
   11842:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   11844:	705a      	strb	r2, [r3, #1]
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   11846:	07c3      	lsls	r3, r0, #31
   11848:	d504      	bpl.n	11854 <ll_filters_scan_update+0x18>
   1184a:	f7fe fd0d 	bl	10268 <radio_adv_filter_pol_get>
   1184e:	b908      	cbnz	r0, 11854 <ll_filters_scan_update+0x18>
		filter_wl_update();
   11850:	f7ff fe2a 	bl	114a8 <filter_wl_update>
	filter->enable_bitmask = 0;
   11854:	4b08      	ldr	r3, [pc, #32]	; (11878 <ll_filters_scan_update+0x3c>)
   11856:	2200      	movs	r2, #0
   11858:	701a      	strb	r2, [r3, #0]
	filter->addr_type_bitmask = 0;
   1185a:	705a      	strb	r2, [r3, #1]
	if (rl_enable && !ll_adv_is_enabled()) {
   1185c:	4b07      	ldr	r3, [pc, #28]	; (1187c <ll_filters_scan_update+0x40>)
   1185e:	781b      	ldrb	r3, [r3, #0]
   11860:	b133      	cbz	r3, 11870 <ll_filters_scan_update+0x34>
   11862:	f7fe fcf9 	bl	10258 <ll_adv_is_enabled>
   11866:	b918      	cbnz	r0, 11870 <ll_filters_scan_update+0x34>
}
   11868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1186c:	f7ff be68 	b.w	11540 <filter_rl_update>
   11870:	bd08      	pop	{r3, pc}
   11872:	bf00      	nop
   11874:	20001497 	.word	0x20001497
   11878:	20001425 	.word	0x20001425
   1187c:	20001424 	.word	0x20001424

00011880 <ll_rl_find>:
{
   11880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11884:	468a      	mov	sl, r1
	if (free) {
   11886:	4614      	mov	r4, r2
   11888:	b10a      	cbz	r2, 1188e <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1188a:	23ff      	movs	r3, #255	; 0xff
   1188c:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1188e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 118e4 <ll_rl_find+0x64>
{
   11892:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11894:	f000 0901 	and.w	r9, r0, #1
   11898:	2628      	movs	r6, #40	; 0x28
   1189a:	436e      	muls	r6, r5
   1189c:	b2ef      	uxtb	r7, r5
   1189e:	f818 3006 	ldrb.w	r3, [r8, r6]
   118a2:	07da      	lsls	r2, r3, #31
   118a4:	d51a      	bpl.n	118dc <ll_rl_find+0x5c>
   118a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   118aa:	454b      	cmp	r3, r9
   118ac:	d10f      	bne.n	118ce <ll_rl_find+0x4e>
   118ae:	1c70      	adds	r0, r6, #1
   118b0:	2206      	movs	r2, #6
   118b2:	4651      	mov	r1, sl
   118b4:	4440      	add	r0, r8
   118b6:	f7f0 f99e 	bl	1bf6 <memcmp>
   118ba:	b160      	cbz	r0, 118d6 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   118bc:	b13c      	cbz	r4, 118ce <ll_rl_find+0x4e>
   118be:	f818 3006 	ldrb.w	r3, [r8, r6]
   118c2:	07db      	lsls	r3, r3, #31
   118c4:	d403      	bmi.n	118ce <ll_rl_find+0x4e>
   118c6:	7823      	ldrb	r3, [r4, #0]
   118c8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   118ca:	bf08      	it	eq
   118cc:	7027      	strbeq	r7, [r4, #0]
   118ce:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   118d0:	2d08      	cmp	r5, #8
   118d2:	d1e1      	bne.n	11898 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   118d4:	27ff      	movs	r7, #255	; 0xff
}
   118d6:	4638      	mov	r0, r7
   118d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   118dc:	2c00      	cmp	r4, #0
   118de:	d1f2      	bne.n	118c6 <ll_rl_find+0x46>
   118e0:	e7f5      	b.n	118ce <ll_rl_find+0x4e>
   118e2:	bf00      	nop
   118e4:	200012e4 	.word	0x200012e4

000118e8 <ll_wl_add>:
{
   118e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   118ec:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   118ee:	f7fe fcbb 	bl	10268 <radio_adv_filter_pol_get>
   118f2:	4605      	mov	r5, r0
   118f4:	b120      	cbz	r0, 11900 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   118f6:	250c      	movs	r5, #12
}
   118f8:	4628      	mov	r0, r5
   118fa:	b002      	add	sp, #8
   118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11900:	f7fe fcd4 	bl	102ac <radio_scan_filter_pol_get>
   11904:	07c3      	lsls	r3, r0, #31
   11906:	d4f6      	bmi.n	118f6 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11908:	7838      	ldrb	r0, [r7, #0]
   1190a:	28ff      	cmp	r0, #255	; 0xff
   1190c:	d103      	bne.n	11916 <ll_wl_add+0x2e>
		wl_anon = 1;
   1190e:	4b1f      	ldr	r3, [pc, #124]	; (1198c <ll_wl_add+0xa4>)
   11910:	2201      	movs	r2, #1
   11912:	701a      	strb	r2, [r3, #0]
		return 0;
   11914:	e7f0      	b.n	118f8 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11916:	f107 0801 	add.w	r8, r7, #1
   1191a:	f10d 0207 	add.w	r2, sp, #7
   1191e:	4641      	mov	r1, r8
   11920:	f7ff fd90 	bl	11444 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11924:	2807      	cmp	r0, #7
   11926:	d92d      	bls.n	11984 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11928:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1192c:	2e07      	cmp	r6, #7
   1192e:	d82b      	bhi.n	11988 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11930:	4c17      	ldr	r4, [pc, #92]	; (11990 <ll_wl_add+0xa8>)
   11932:	783a      	ldrb	r2, [r7, #0]
   11934:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11938:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1193c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11940:	4641      	mov	r1, r8
   11942:	2206      	movs	r2, #6
   11944:	3002      	adds	r0, #2
   11946:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1194a:	f7f0 f969 	bl	1c20 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1194e:	462a      	mov	r2, r5
   11950:	4641      	mov	r1, r8
   11952:	7838      	ldrb	r0, [r7, #0]
   11954:	f7ff ff94 	bl	11880 <ll_rl_find>
   11958:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   1195a:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   1195c:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   1195e:	d80e      	bhi.n	1197e <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11960:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   11962:	2328      	movs	r3, #40	; 0x28
   11964:	4a0b      	ldr	r2, [pc, #44]	; (11994 <ll_wl_add+0xac>)
   11966:	4358      	muls	r0, r3
   11968:	5c13      	ldrb	r3, [r2, r0]
   1196a:	f043 0320 	orr.w	r3, r3, #32
   1196e:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   11970:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   11974:	f043 0301 	orr.w	r3, r3, #1
   11978:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   1197c:	e7bc      	b.n	118f8 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1197e:	22ff      	movs	r2, #255	; 0xff
   11980:	705a      	strb	r2, [r3, #1]
   11982:	e7f5      	b.n	11970 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   11984:	2512      	movs	r5, #18
   11986:	e7b7      	b.n	118f8 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11988:	2507      	movs	r5, #7
	return wl_add(addr);
   1198a:	e7b5      	b.n	118f8 <ll_wl_add+0x10>
   1198c:	20001950 	.word	0x20001950
   11990:	20001457 	.word	0x20001457
   11994:	200012e4 	.word	0x200012e4

00011998 <ctrl_rl_idx_allowed>:
{
   11998:	b513      	push	{r0, r1, r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1199a:	4b12      	ldr	r3, [pc, #72]	; (119e4 <ctrl_rl_idx_allowed+0x4c>)
   1199c:	781b      	ldrb	r3, [r3, #0]
   1199e:	b1f3      	cbz	r3, 119de <ctrl_rl_idx_allowed+0x46>
   119a0:	2907      	cmp	r1, #7
   119a2:	d81c      	bhi.n	119de <ctrl_rl_idx_allowed+0x46>
   119a4:	b9d8      	cbnz	r0, 119de <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   119a6:	2328      	movs	r3, #40	; 0x28
   119a8:	4359      	muls	r1, r3
   119aa:	4b0f      	ldr	r3, [pc, #60]	; (119e8 <ctrl_rl_idx_allowed+0x50>)
   119ac:	5c58      	ldrb	r0, [r3, r1]
   119ae:	07c2      	lsls	r2, r0, #31
   119b0:	d40f      	bmi.n	119d2 <ctrl_rl_idx_allowed+0x3a>
   119b2:	4b0e      	ldr	r3, [pc, #56]	; (119ec <ctrl_rl_idx_allowed+0x54>)
   119b4:	9301      	str	r3, [sp, #4]
   119b6:	9300      	str	r3, [sp, #0]
   119b8:	4b0d      	ldr	r3, [pc, #52]	; (119f0 <ctrl_rl_idx_allowed+0x58>)
   119ba:	4a0e      	ldr	r2, [pc, #56]	; (119f4 <ctrl_rl_idx_allowed+0x5c>)
   119bc:	681c      	ldr	r4, [r3, #0]
   119be:	490e      	ldr	r1, [pc, #56]	; (119f8 <ctrl_rl_idx_allowed+0x60>)
   119c0:	4b0e      	ldr	r3, [pc, #56]	; (119fc <ctrl_rl_idx_allowed+0x64>)
   119c2:	480f      	ldr	r0, [pc, #60]	; (11a00 <ctrl_rl_idx_allowed+0x68>)
   119c4:	47a0      	blx	r4
   119c6:	4040      	eors	r0, r0
   119c8:	f380 8811 	msr	BASEPRI, r0
   119cc:	f04f 0004 	mov.w	r0, #4
   119d0:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   119d2:	0743      	lsls	r3, r0, #29
   119d4:	d503      	bpl.n	119de <ctrl_rl_idx_allowed+0x46>
   119d6:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   119da:	b002      	add	sp, #8
   119dc:	bd10      	pop	{r4, pc}
		return true;
   119de:	2001      	movs	r0, #1
   119e0:	e7fb      	b.n	119da <ctrl_rl_idx_allowed+0x42>
   119e2:	bf00      	nop
   119e4:	20001424 	.word	0x20001424
   119e8:	200012e4 	.word	0x200012e4
   119ec:	00014c55 	.word	0x00014c55
   119f0:	20003aa4 	.word	0x20003aa4
   119f4:	000159c3 	.word	0x000159c3
   119f8:	00015a12 	.word	0x00015a12
   119fc:	00017ff7 	.word	0x00017ff7
   11a00:	0001802e 	.word	0x0001802e

00011a04 <ll_rl_id_addr_get>:
{
   11a04:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11a06:	2b07      	cmp	r3, #7
{
   11a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11a0a:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11a0c:	d90f      	bls.n	11a2e <ll_rl_id_addr_get+0x2a>
   11a0e:	4b17      	ldr	r3, [pc, #92]	; (11a6c <ll_rl_id_addr_get+0x68>)
   11a10:	9301      	str	r3, [sp, #4]
   11a12:	9300      	str	r3, [sp, #0]
   11a14:	4b16      	ldr	r3, [pc, #88]	; (11a70 <ll_rl_id_addr_get+0x6c>)
   11a16:	4a17      	ldr	r2, [pc, #92]	; (11a74 <ll_rl_id_addr_get+0x70>)
   11a18:	681c      	ldr	r4, [r3, #0]
   11a1a:	4917      	ldr	r1, [pc, #92]	; (11a78 <ll_rl_id_addr_get+0x74>)
   11a1c:	4b17      	ldr	r3, [pc, #92]	; (11a7c <ll_rl_id_addr_get+0x78>)
   11a1e:	4818      	ldr	r0, [pc, #96]	; (11a80 <ll_rl_id_addr_get+0x7c>)
	LL_ASSERT(rl[rl_idx].taken);
   11a20:	47a0      	blx	r4
   11a22:	4040      	eors	r0, r0
   11a24:	f380 8811 	msr	BASEPRI, r0
   11a28:	f04f 0004 	mov.w	r0, #4
   11a2c:	df02      	svc	2
   11a2e:	2528      	movs	r5, #40	; 0x28
   11a30:	4c14      	ldr	r4, [pc, #80]	; (11a84 <ll_rl_id_addr_get+0x80>)
   11a32:	fb05 f203 	mul.w	r2, r5, r3
   11a36:	5ca2      	ldrb	r2, [r4, r2]
   11a38:	f012 0f01 	tst.w	r2, #1
   11a3c:	d109      	bne.n	11a52 <ll_rl_id_addr_get+0x4e>
   11a3e:	4b0b      	ldr	r3, [pc, #44]	; (11a6c <ll_rl_id_addr_get+0x68>)
   11a40:	9301      	str	r3, [sp, #4]
   11a42:	9300      	str	r3, [sp, #0]
   11a44:	4b0a      	ldr	r3, [pc, #40]	; (11a70 <ll_rl_id_addr_get+0x6c>)
   11a46:	4a0b      	ldr	r2, [pc, #44]	; (11a74 <ll_rl_id_addr_get+0x70>)
   11a48:	681c      	ldr	r4, [r3, #0]
   11a4a:	490b      	ldr	r1, [pc, #44]	; (11a78 <ll_rl_id_addr_get+0x74>)
   11a4c:	4b0b      	ldr	r3, [pc, #44]	; (11a7c <ll_rl_id_addr_get+0x78>)
   11a4e:	480e      	ldr	r0, [pc, #56]	; (11a88 <ll_rl_id_addr_get+0x84>)
   11a50:	e7e6      	b.n	11a20 <ll_rl_id_addr_get+0x1c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11a52:	f3c2 1280 	ubfx	r2, r2, #6, #1
   11a56:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11a58:	fb05 4103 	mla	r1, r5, r3, r4
   11a5c:	2206      	movs	r2, #6
   11a5e:	3101      	adds	r1, #1
}
   11a60:	b003      	add	sp, #12
   11a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11a66:	f7f0 b8db 	b.w	1c20 <memcpy>
   11a6a:	bf00      	nop
   11a6c:	00014c55 	.word	0x00014c55
   11a70:	20003aa4 	.word	0x20003aa4
   11a74:	000159c3 	.word	0x000159c3
   11a78:	00015a12 	.word	0x00015a12
   11a7c:	0001800b 	.word	0x0001800b
   11a80:	000182c3 	.word	0x000182c3
   11a84:	200012e4 	.word	0x200012e4
   11a88:	0001802e 	.word	0x0001802e

00011a8c <ctrl_rl_addr_allowed>:
{
   11a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11a90:	4b1a      	ldr	r3, [pc, #104]	; (11afc <ctrl_rl_addr_allowed+0x70>)
   11a92:	781b      	ldrb	r3, [r3, #0]
   11a94:	b37b      	cbz	r3, 11af6 <ctrl_rl_addr_allowed+0x6a>
   11a96:	7813      	ldrb	r3, [r2, #0]
   11a98:	2bff      	cmp	r3, #255	; 0xff
   11a9a:	d12c      	bne.n	11af6 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11a9c:	4e18      	ldr	r6, [pc, #96]	; (11b00 <ctrl_rl_addr_allowed+0x74>)
   11a9e:	2400      	movs	r4, #0
   11aa0:	f04f 0828 	mov.w	r8, #40	; 0x28
   11aa4:	46b6      	mov	lr, r6
   11aa6:	fb08 f304 	mul.w	r3, r8, r4
   11aaa:	fa5f fc84 	uxtb.w	ip, r4
   11aae:	5cf7      	ldrb	r7, [r6, r3]
   11ab0:	f017 0f01 	tst.w	r7, #1
   11ab4:	eb06 0503 	add.w	r5, r6, r3
   11ab8:	d01a      	beq.n	11af0 <ctrl_rl_addr_allowed+0x64>
   11aba:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11abe:	4287      	cmp	r7, r0
   11ac0:	d116      	bne.n	11af0 <ctrl_rl_addr_allowed+0x64>
   11ac2:	3306      	adds	r3, #6
   11ac4:	1e4f      	subs	r7, r1, #1
   11ac6:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11ac8:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11acc:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11ad0:	45ca      	cmp	sl, r9
   11ad2:	d10d      	bne.n	11af0 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   11ad4:	429d      	cmp	r5, r3
   11ad6:	d1f7      	bne.n	11ac8 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11ad8:	2328      	movs	r3, #40	; 0x28
   11ada:	435c      	muls	r4, r3
				*rl_idx = i;
   11adc:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11ae0:	f81e 0004 	ldrb.w	r0, [lr, r4]
   11ae4:	0743      	lsls	r3, r0, #29
   11ae6:	d506      	bpl.n	11af6 <ctrl_rl_addr_allowed+0x6a>
   11ae8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11af0:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11af2:	2c08      	cmp	r4, #8
   11af4:	d1d7      	bne.n	11aa6 <ctrl_rl_addr_allowed+0x1a>
   11af6:	2001      	movs	r0, #1
}
   11af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11afc:	20001424 	.word	0x20001424
   11b00:	200012e4 	.word	0x200012e4

00011b04 <ctrl_rl_addr_resolve>:
{
   11b04:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   11b06:	4c0d      	ldr	r4, [pc, #52]	; (11b3c <ctrl_rl_addr_resolve+0x38>)
   11b08:	7824      	ldrb	r4, [r4, #0]
   11b0a:	b1a4      	cbz	r4, 11b36 <ctrl_rl_addr_resolve+0x32>
   11b0c:	2a07      	cmp	r2, #7
   11b0e:	d812      	bhi.n	11b36 <ctrl_rl_addr_resolve+0x32>
   11b10:	2528      	movs	r5, #40	; 0x28
   11b12:	4c0b      	ldr	r4, [pc, #44]	; (11b40 <ctrl_rl_addr_resolve+0x3c>)
   11b14:	fb05 f602 	mul.w	r6, r5, r2
   11b18:	5da6      	ldrb	r6, [r4, r6]
   11b1a:	0736      	lsls	r6, r6, #28
   11b1c:	d50b      	bpl.n	11b36 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11b1e:	b150      	cbz	r0, 11b36 <ctrl_rl_addr_resolve+0x32>
   11b20:	794b      	ldrb	r3, [r1, #5]
   11b22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11b26:	2b40      	cmp	r3, #64	; 0x40
   11b28:	d105      	bne.n	11b36 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11b2a:	fb05 4202 	mla	r2, r5, r2, r4
   11b2e:	1dd0      	adds	r0, r2, #7
}
   11b30:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11b32:	f7f0 b98a 	b.w	1e4a <bt_rpa_irk_matches>
}
   11b36:	2000      	movs	r0, #0
   11b38:	bc70      	pop	{r4, r5, r6}
   11b3a:	4770      	bx	lr
   11b3c:	20001424 	.word	0x20001424
   11b40:	200012e4 	.word	0x200012e4

00011b44 <ctrl_rl_enabled>:
	return rl_enable;
   11b44:	4b02      	ldr	r3, [pc, #8]	; (11b50 <ctrl_rl_enabled+0xc>)
   11b46:	7818      	ldrb	r0, [r3, #0]
}
   11b48:	3000      	adds	r0, #0
   11b4a:	bf18      	it	ne
   11b4c:	2001      	movne	r0, #1
   11b4e:	4770      	bx	lr
   11b50:	20001424 	.word	0x20001424

00011b54 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b58:	b089      	sub	sp, #36	; 0x24
   11b5a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11b5c:	f002 faf8 	bl	14150 <_impl_k_uptime_get>
   11b60:	4680      	mov	r8, r0
   11b62:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11b64:	2c00      	cmp	r4, #0
   11b66:	d149      	bne.n	11bfc <ll_rl_rpa_update+0xa8>
   11b68:	4b3c      	ldr	r3, [pc, #240]	; (11c5c <ll_rl_rpa_update+0x108>)
   11b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b6e:	1c5c      	adds	r4, r3, #1
   11b70:	bf08      	it	eq
   11b72:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11b76:	d041      	beq.n	11bfc <ll_rl_rpa_update+0xa8>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11b78:	1a82      	subs	r2, r0, r2
   11b7a:	eb61 0303 	sbc.w	r3, r1, r3
   11b7e:	4938      	ldr	r1, [pc, #224]	; (11c60 <ll_rl_rpa_update+0x10c>)
   11b80:	6808      	ldr	r0, [r1, #0]
   11b82:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11b84:	4282      	cmp	r2, r0
   11b86:	418b      	sbcs	r3, r1
   11b88:	bfac      	ite	ge
   11b8a:	2601      	movge	r6, #1
   11b8c:	2600      	movlt	r6, #0
   11b8e:	4d35      	ldr	r5, [pc, #212]	; (11c64 <ll_rl_rpa_update+0x110>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11b90:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11b94:	2400      	movs	r4, #0
   11b96:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11b98:	2328      	movs	r3, #40	; 0x28
   11b9a:	4363      	muls	r3, r4
   11b9c:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11ba0:	07d8      	lsls	r0, r3, #31
   11ba2:	d54e      	bpl.n	11c42 <ll_rl_rpa_update+0xee>
   11ba4:	b90e      	cbnz	r6, 11baa <ll_rl_rpa_update+0x56>
   11ba6:	0799      	lsls	r1, r3, #30
   11ba8:	d44b      	bmi.n	11c42 <ll_rl_rpa_update+0xee>

			if (rl[i].pirk) {
   11baa:	2328      	movs	r3, #40	; 0x28
   11bac:	4363      	muls	r3, r4
   11bae:	5cfb      	ldrb	r3, [r7, r3]
   11bb0:	075a      	lsls	r2, r3, #29
   11bb2:	d525      	bpl.n	11c00 <ll_rl_rpa_update+0xac>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11bb4:	7c2a      	ldrb	r2, [r5, #16]
   11bb6:	4b2c      	ldr	r3, [pc, #176]	; (11c68 <ll_rl_rpa_update+0x114>)
   11bb8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   11bbc:	f103 0210 	add.w	r2, r3, #16
   11bc0:	f10d 010f 	add.w	r1, sp, #15
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
		*pdst++ = *psrc--;
   11bc4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11bc8:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   11bcc:	429a      	cmp	r2, r3
   11bce:	d1f9      	bne.n	11bc4 <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11bd0:	f105 0117 	add.w	r1, r5, #23
   11bd4:	a804      	add	r0, sp, #16
   11bd6:	f7f0 f94b 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   11bda:	b188      	cbz	r0, 11c00 <ll_rl_rpa_update+0xac>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   11bdc:	4b23      	ldr	r3, [pc, #140]	; (11c6c <ll_rl_rpa_update+0x118>)
   11bde:	9301      	str	r3, [sp, #4]
   11be0:	9300      	str	r3, [sp, #0]
   11be2:	4b23      	ldr	r3, [pc, #140]	; (11c70 <ll_rl_rpa_update+0x11c>)
   11be4:	4a23      	ldr	r2, [pc, #140]	; (11c74 <ll_rl_rpa_update+0x120>)
   11be6:	681c      	ldr	r4, [r3, #0]
   11be8:	4923      	ldr	r1, [pc, #140]	; (11c78 <ll_rl_rpa_update+0x124>)
   11bea:	4b24      	ldr	r3, [pc, #144]	; (11c7c <ll_rl_rpa_update+0x128>)
   11bec:	4824      	ldr	r0, [pc, #144]	; (11c80 <ll_rl_rpa_update+0x12c>)
   11bee:	47a0      	blx	r4
   11bf0:	4040      	eors	r0, r0
   11bf2:	f380 8811 	msr	BASEPRI, r0
   11bf6:	f04f 0004 	mov.w	r0, #4
   11bfa:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11bfc:	2601      	movs	r6, #1
   11bfe:	e7c6      	b.n	11b8e <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   11c00:	2328      	movs	r3, #40	; 0x28
   11c02:	4363      	muls	r3, r4
   11c04:	5cfb      	ldrb	r3, [r7, r3]
   11c06:	071b      	lsls	r3, r3, #28
   11c08:	d515      	bpl.n	11c36 <ll_rl_rpa_update+0xe2>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11c0a:	f10d 0a10 	add.w	sl, sp, #16
   11c0e:	4651      	mov	r1, sl
   11c10:	4628      	mov	r0, r5
   11c12:	f7f0 f92d 	bl	1e70 <bt_rpa_create>
				LL_ASSERT(!err);
   11c16:	2800      	cmp	r0, #0
   11c18:	d1e0      	bne.n	11bdc <ll_rl_rpa_update+0x88>
   11c1a:	4b1a      	ldr	r3, [pc, #104]	; (11c84 <ll_rl_rpa_update+0x130>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11c1c:	f8c5 a01d 	str.w	sl, [r5, #29]
   11c20:	2206      	movs	r2, #6
   11c22:	fb02 3304 	mla	r3, r2, r4, r3
   11c26:	4618      	mov	r0, r3
   11c28:	4651      	mov	r1, sl
   11c2a:	9303      	str	r3, [sp, #12]
   11c2c:	f7ef fff8 	bl	1c20 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11c30:	9b03      	ldr	r3, [sp, #12]
   11c32:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11c36:	2328      	movs	r3, #40	; 0x28
   11c38:	4363      	muls	r3, r4
   11c3a:	5cfa      	ldrb	r2, [r7, r3]
   11c3c:	f042 0202 	orr.w	r2, r2, #2
   11c40:	54fa      	strb	r2, [r7, r3]
   11c42:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11c44:	2c08      	cmp	r4, #8
   11c46:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11c4a:	d1a5      	bne.n	11b98 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   11c4c:	b116      	cbz	r6, 11c54 <ll_rl_rpa_update+0x100>
		rpa_last_ms = now;
   11c4e:	4b03      	ldr	r3, [pc, #12]	; (11c5c <ll_rl_rpa_update+0x108>)
   11c50:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   11c54:	b009      	add	sp, #36	; 0x24
   11c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5a:	bf00      	nop
   11c5c:	20001948 	.word	0x20001948
   11c60:	2000197c 	.word	0x2000197c
   11c64:	200012eb 	.word	0x200012eb
   11c68:	20001263 	.word	0x20001263
   11c6c:	00014c55 	.word	0x00014c55
   11c70:	20003aa4 	.word	0x20003aa4
   11c74:	000159c3 	.word	0x000159c3
   11c78:	00015a12 	.word	0x00015a12
   11c7c:	0001801d 	.word	0x0001801d
   11c80:	00017f6b 	.word	0x00017f6b
   11c84:	2000122a 	.word	0x2000122a

00011c88 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11c88:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   11c8a:	2001      	movs	r0, #1
   11c8c:	f7ff ff62 	bl	11b54 <ll_rl_rpa_update>
   11c90:	4b03      	ldr	r3, [pc, #12]	; (11ca0 <rpa_timeout+0x18>)
   11c92:	4904      	ldr	r1, [pc, #16]	; (11ca4 <rpa_timeout+0x1c>)
   11c94:	681a      	ldr	r2, [r3, #0]
   11c96:	4804      	ldr	r0, [pc, #16]	; (11ca8 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   11c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11c9c:	f002 bd6c 	b.w	14778 <k_delayed_work_submit_to_queue>
   11ca0:	2000197c 	.word	0x2000197c
   11ca4:	20001954 	.word	0x20001954
   11ca8:	200019c8 	.word	0x200019c8

00011cac <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   11cac:	4b07      	ldr	r3, [pc, #28]	; (11ccc <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   11cae:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   11cb0:	b130      	cbz	r0, 11cc0 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   11cb2:	b14b      	cbz	r3, 11cc8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11cb4:	4b06      	ldr	r3, [pc, #24]	; (11cd0 <ll_adv_scan_state_cb+0x24>)
   11cb6:	4907      	ldr	r1, [pc, #28]	; (11cd4 <ll_adv_scan_state_cb+0x28>)
   11cb8:	681a      	ldr	r2, [r3, #0]
   11cba:	4807      	ldr	r0, [pc, #28]	; (11cd8 <ll_adv_scan_state_cb+0x2c>)
   11cbc:	f002 bd5c 	b.w	14778 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   11cc0:	b113      	cbz	r3, 11cc8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   11cc2:	4804      	ldr	r0, [pc, #16]	; (11cd4 <ll_adv_scan_state_cb+0x28>)
   11cc4:	f002 bcf4 	b.w	146b0 <k_delayed_work_cancel>
   11cc8:	4770      	bx	lr
   11cca:	bf00      	nop
   11ccc:	20001424 	.word	0x20001424
   11cd0:	2000197c 	.word	0x2000197c
   11cd4:	20001954 	.word	0x20001954
   11cd8:	200019c8 	.word	0x200019c8

00011cdc <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   11cdc:	2008      	movs	r0, #8
   11cde:	4770      	bx	lr

00011ce0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11ce0:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   11ce2:	f7ff fc21 	bl	11528 <rl_access_check.constprop.1>
   11ce6:	b178      	cbz	r0, 11d08 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   11ce8:	4908      	ldr	r1, [pc, #32]	; (11d0c <ll_rl_clear+0x2c>)
   11cea:	2300      	movs	r3, #0
   11cec:	2428      	movs	r4, #40	; 0x28
   11cee:	fb04 f203 	mul.w	r2, r4, r3
   11cf2:	3301      	adds	r3, #1
   11cf4:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11cf6:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   11cf8:	f36f 0000 	bfc	r0, #0, #1
   11cfc:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11cfe:	d1f6      	bne.n	11cee <ll_rl_clear+0xe>
	peer_irk_count = 0;
   11d00:	4b03      	ldr	r3, [pc, #12]	; (11d10 <ll_rl_clear+0x30>)
   11d02:	2000      	movs	r0, #0
   11d04:	7018      	strb	r0, [r3, #0]
   11d06:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d08:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   11d0a:	bd10      	pop	{r4, pc}
   11d0c:	200012e4 	.word	0x200012e4
   11d10:	2000125a 	.word	0x2000125a

00011d14 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d18:	b085      	sub	sp, #20
   11d1a:	4607      	mov	r7, r0
   11d1c:	4689      	mov	r9, r1
   11d1e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   11d20:	f7ff fc02 	bl	11528 <rl_access_check.constprop.1>
   11d24:	2800      	cmp	r0, #0
   11d26:	f000 8086 	beq.w	11e36 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   11d2a:	f107 0801 	add.w	r8, r7, #1
   11d2e:	f10d 020f 	add.w	r2, sp, #15
   11d32:	4641      	mov	r1, r8
   11d34:	7838      	ldrb	r0, [r7, #0]
   11d36:	f7ff fda3 	bl	11880 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   11d3a:	2807      	cmp	r0, #7
   11d3c:	d97d      	bls.n	11e3a <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   11d3e:	f89d 500f 	ldrb.w	r5, [sp, #15]
   11d42:	2d07      	cmp	r5, #7
   11d44:	d87b      	bhi.n	11e3e <ll_rl_add+0x12a>
   11d46:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11d4a:	4c3e      	ldr	r4, [pc, #248]	; (11e44 <ll_rl_add+0x130>)
   11d4c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   11d50:	2628      	movs	r6, #40	; 0x28
   11d52:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11d54:	f10b 0001 	add.w	r0, fp, #1
   11d58:	2206      	movs	r2, #6
   11d5a:	4641      	mov	r1, r8
   11d5c:	4420      	add	r0, r4
   11d5e:	f7ef ff5f 	bl	1c20 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   11d62:	7839      	ldrb	r1, [r7, #0]
   11d64:	5da3      	ldrb	r3, [r4, r6]
   11d66:	19a2      	adds	r2, r4, r6
   11d68:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11d6c:	4648      	mov	r0, r9
   11d6e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   11d70:	9201      	str	r2, [sp, #4]
   11d72:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11d74:	f7f5 f893 	bl	6e9e <mem_nz>
   11d78:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11d7a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11d7c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11d80:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11d82:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11d84:	f7f5 f88b 	bl	6e9e <mem_nz>
   11d88:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   11d8a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11d8c:	f000 0001 	and.w	r0, r0, #1
   11d90:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   11d94:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11d98:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   11d9a:	d138      	bne.n	11e0e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   11d9c:	b158      	cbz	r0, 11db6 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   11d9e:	f10b 0007 	add.w	r0, fp, #7
   11da2:	2210      	movs	r2, #16
   11da4:	4651      	mov	r1, sl
   11da6:	4420      	add	r0, r4
   11da8:	f7ef ff3a 	bl	1c20 <memcpy>
		rl[i].local_rpa = NULL;
   11dac:	2328      	movs	r3, #40	; 0x28
   11dae:	fb03 4305 	mla	r3, r3, r5, r4
   11db2:	2200      	movs	r2, #0
   11db4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   11db6:	2628      	movs	r6, #40	; 0x28
   11db8:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11dba:	f10b 0018 	add.w	r0, fp, #24
   11dbe:	2206      	movs	r2, #6
   11dc0:	2100      	movs	r1, #0
   11dc2:	4420      	add	r0, r4
   11dc4:	f7ef ff58 	bl	1c78 <memset>
	rl[i].rpas_ready = 0;
   11dc8:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   11dca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11dce:	f36f 1304 	bfc	r3, #4, #1
   11dd2:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11dd4:	2200      	movs	r2, #0
   11dd6:	4641      	mov	r1, r8
   11dd8:	7838      	ldrb	r0, [r7, #0]
   11dda:	f7ff fb33 	bl	11444 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   11dde:	2807      	cmp	r0, #7
   11de0:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   11de2:	bf9d      	ittte	ls
   11de4:	4a18      	ldrls	r2, [pc, #96]	; (11e48 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   11de6:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   11dea:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   11dee:	f36f 1345 	bfchi	r3, #5, #1
   11df2:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   11df4:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   11df8:	bf98      	it	ls
   11dfa:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   11dfc:	435d      	muls	r5, r3

	return 0;
   11dfe:	2000      	movs	r0, #0
	rl[i].taken = 1;
   11e00:	5d63      	ldrb	r3, [r4, r5]
   11e02:	f043 0301 	orr.w	r3, r3, #1
   11e06:	5563      	strb	r3, [r4, r5]
}
   11e08:	b005      	add	sp, #20
   11e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   11e0e:	4b0f      	ldr	r3, [pc, #60]	; (11e4c <ll_rl_add+0x138>)
   11e10:	7819      	ldrb	r1, [r3, #0]
   11e12:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   11e14:	4a0e      	ldr	r2, [pc, #56]	; (11e50 <ll_rl_add+0x13c>)
   11e16:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   11e18:	1c4a      	adds	r2, r1, #1
   11e1a:	701a      	strb	r2, [r3, #0]
   11e1c:	4b0d      	ldr	r3, [pc, #52]	; (11e54 <ll_rl_add+0x140>)
   11e1e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   11e22:	f109 0210 	add.w	r2, r9, #16
   11e26:	3b01      	subs	r3, #1
		*pdst++ = *psrc--;
   11e28:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   11e2c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   11e30:	454a      	cmp	r2, r9
   11e32:	d1f9      	bne.n	11e28 <ll_rl_add+0x114>
   11e34:	e7b2      	b.n	11d9c <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e36:	200c      	movs	r0, #12
   11e38:	e7e6      	b.n	11e08 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   11e3a:	2012      	movs	r0, #18
   11e3c:	e7e4      	b.n	11e08 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11e3e:	2007      	movs	r0, #7
   11e40:	e7e2      	b.n	11e08 <ll_rl_add+0xf4>
   11e42:	bf00      	nop
   11e44:	200012e4 	.word	0x200012e4
   11e48:	20001457 	.word	0x20001457
   11e4c:	2000125a 	.word	0x2000125a
   11e50:	2000125b 	.word	0x2000125b
   11e54:	20001263 	.word	0x20001263

00011e58 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   11e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e5c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   11e5e:	f7ff fb63 	bl	11528 <rl_access_check.constprop.1>
   11e62:	2800      	cmp	r0, #0
   11e64:	d053      	beq.n	11f0e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11e66:	f109 0a01 	add.w	sl, r9, #1
   11e6a:	2200      	movs	r2, #0
   11e6c:	4651      	mov	r1, sl
   11e6e:	f899 0000 	ldrb.w	r0, [r9]
   11e72:	f7ff fd05 	bl	11880 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11e76:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11e78:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   11e7a:	d84b      	bhi.n	11f14 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   11e7c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   11e80:	4c26      	ldr	r4, [pc, #152]	; (11f1c <ll_rl_remove+0xc4>)
   11e82:	fb0b f300 	mul.w	r3, fp, r0
   11e86:	18e2      	adds	r2, r4, r3
   11e88:	5ce3      	ldrb	r3, [r4, r3]
   11e8a:	075b      	lsls	r3, r3, #29
   11e8c:	d524      	bpl.n	11ed8 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11e8e:	4e24      	ldr	r6, [pc, #144]	; (11f20 <ll_rl_remove+0xc8>)
   11e90:	7835      	ldrb	r5, [r6, #0]
   11e92:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   11e94:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   11e98:	d01b      	beq.n	11ed2 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   11e9a:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   11e9c:	42af      	cmp	r7, r5
   11e9e:	d018      	beq.n	11ed2 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   11ea0:	4820      	ldr	r0, [pc, #128]	; (11f24 <ll_rl_remove+0xcc>)
   11ea2:	2210      	movs	r2, #16
   11ea4:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   11ea8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   11eac:	f7ef feb8 	bl	1c20 <memcpy>
   11eb0:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   11eb2:	fb0b f103 	mul.w	r1, fp, r3
   11eb6:	1862      	adds	r2, r4, r1
   11eb8:	5c61      	ldrb	r1, [r4, r1]
   11eba:	f011 0f01 	tst.w	r1, #1
   11ebe:	b2d8      	uxtb	r0, r3
   11ec0:	d021      	beq.n	11f06 <ll_rl_remove+0xae>
   11ec2:	0749      	lsls	r1, r1, #29
   11ec4:	d51f      	bpl.n	11f06 <ll_rl_remove+0xae>
   11ec6:	7dd1      	ldrb	r1, [r2, #23]
   11ec8:	42a9      	cmp	r1, r5
   11eca:	d11c      	bne.n	11f06 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   11ecc:	4b16      	ldr	r3, [pc, #88]	; (11f28 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   11ece:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   11ed0:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   11ed2:	7833      	ldrb	r3, [r6, #0]
   11ed4:	3b01      	subs	r3, #1
   11ed6:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   11ed8:	2200      	movs	r2, #0
   11eda:	4651      	mov	r1, sl
   11edc:	f899 0000 	ldrb.w	r0, [r9]
   11ee0:	f7ff fab0 	bl	11444 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   11ee4:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   11ee6:	bf9f      	itttt	ls
   11ee8:	4b10      	ldrls	r3, [pc, #64]	; (11f2c <ll_rl_remove+0xd4>)
   11eea:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   11eee:	23ff      	movls	r3, #255	; 0xff
   11ef0:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   11ef2:	2028      	movs	r0, #40	; 0x28
   11ef4:	fb00 f008 	mul.w	r0, r0, r8
   11ef8:	5c23      	ldrb	r3, [r4, r0]
   11efa:	f36f 0300 	bfc	r3, #0, #1
   11efe:	5423      	strb	r3, [r4, r0]
		return 0;
   11f00:	2000      	movs	r0, #0
   11f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f06:	3301      	adds	r3, #1
				for (k = 0;
   11f08:	2b08      	cmp	r3, #8
   11f0a:	d1d2      	bne.n	11eb2 <ll_rl_remove+0x5a>
   11f0c:	e7e1      	b.n	11ed2 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11f0e:	200c      	movs	r0, #12
   11f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11f14:	2002      	movs	r0, #2
}
   11f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f1a:	bf00      	nop
   11f1c:	200012e4 	.word	0x200012e4
   11f20:	2000125a 	.word	0x2000125a
   11f24:	20001263 	.word	0x20001263
   11f28:	2000125b 	.word	0x2000125b
   11f2c:	20001457 	.word	0x20001457

00011f30 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   11f30:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   11f32:	795c      	ldrb	r4, [r3, #5]
   11f34:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   11f38:	2c40      	cmp	r4, #64	; 0x40
{
   11f3a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   11f3c:	d117      	bne.n	11f6e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   11f3e:	b119      	cbz	r1, 11f48 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   11f40:	2200      	movs	r2, #0
   11f42:	f7ff fc9d 	bl	11880 <ll_rl_find>
   11f46:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   11f48:	2a07      	cmp	r2, #7
   11f4a:	d810      	bhi.n	11f6e <ll_rl_crpa_set+0x3e>
   11f4c:	2128      	movs	r1, #40	; 0x28
   11f4e:	4c08      	ldr	r4, [pc, #32]	; (11f70 <ll_rl_crpa_set+0x40>)
   11f50:	fb01 f302 	mul.w	r3, r1, r2
   11f54:	5ce3      	ldrb	r3, [r4, r3]
   11f56:	07db      	lsls	r3, r3, #31
   11f58:	d509      	bpl.n	11f6e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11f5a:	2018      	movs	r0, #24
   11f5c:	fb11 0002 	smlabb	r0, r1, r2, r0
   11f60:	4420      	add	r0, r4
   11f62:	4629      	mov	r1, r5
   11f64:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   11f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   11f6a:	f7ef be59 	b.w	1c20 <memcpy>
   11f6e:	bd70      	pop	{r4, r5, r6, pc}
   11f70:	200012e4 	.word	0x200012e4

00011f74 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   11f74:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11f76:	2200      	movs	r2, #0
{
   11f78:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11f7a:	1c41      	adds	r1, r0, #1
   11f7c:	7800      	ldrb	r0, [r0, #0]
   11f7e:	f7ff fc7f 	bl	11880 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   11f82:	2807      	cmp	r0, #7
   11f84:	d901      	bls.n	11f8a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11f86:	2002      	movs	r0, #2
   11f88:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   11f8a:	2428      	movs	r4, #40	; 0x28
   11f8c:	2318      	movs	r3, #24
   11f8e:	fb14 3000 	smlabb	r0, r4, r0, r3
   11f92:	4c07      	ldr	r4, [pc, #28]	; (11fb0 <ll_rl_crpa_get+0x3c>)
   11f94:	4404      	add	r4, r0
   11f96:	2106      	movs	r1, #6
   11f98:	4620      	mov	r0, r4
   11f9a:	f7f4 ff80 	bl	6e9e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   11f9e:	2800      	cmp	r0, #0
   11fa0:	d0f1      	beq.n	11f86 <ll_rl_crpa_get+0x12>
   11fa2:	2206      	movs	r2, #6
   11fa4:	4621      	mov	r1, r4
   11fa6:	4628      	mov	r0, r5
   11fa8:	f7ef fe3a 	bl	1c20 <memcpy>
			return 0;
   11fac:	2000      	movs	r0, #0
}
   11fae:	bd38      	pop	{r3, r4, r5, pc}
   11fb0:	200012e4 	.word	0x200012e4

00011fb4 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   11fb4:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11fb6:	2200      	movs	r2, #0
{
   11fb8:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11fba:	1c41      	adds	r1, r0, #1
   11fbc:	7800      	ldrb	r0, [r0, #0]
   11fbe:	f7ff fc5f 	bl	11880 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11fc2:	2807      	cmp	r0, #7
   11fc4:	d80a      	bhi.n	11fdc <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   11fc6:	4b06      	ldr	r3, [pc, #24]	; (11fe0 <ll_rl_lrpa_get+0x2c>)
   11fc8:	2228      	movs	r2, #40	; 0x28
   11fca:	fb02 3000 	mla	r0, r2, r0, r3
   11fce:	2206      	movs	r2, #6
   11fd0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11fd2:	4620      	mov	r0, r4
   11fd4:	f7ef fe24 	bl	1c20 <memcpy>
		return 0;
   11fd8:	2000      	movs	r0, #0
   11fda:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11fdc:	2002      	movs	r0, #2
}
   11fde:	bd10      	pop	{r4, pc}
   11fe0:	200012e4 	.word	0x200012e4

00011fe4 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   11fe4:	b510      	push	{r4, lr}
   11fe6:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   11fe8:	f7ff fa9e 	bl	11528 <rl_access_check.constprop.1>
   11fec:	b140      	cbz	r0, 12000 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   11fee:	b11c      	cbz	r4, 11ff8 <ll_rl_enable+0x14>
   11ff0:	2c01      	cmp	r4, #1
   11ff2:	d001      	beq.n	11ff8 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   11ff4:	2012      	movs	r0, #18
	}

	return 0;
}
   11ff6:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   11ff8:	4b02      	ldr	r3, [pc, #8]	; (12004 <ll_rl_enable+0x20>)
   11ffa:	701c      	strb	r4, [r3, #0]
	return 0;
   11ffc:	2000      	movs	r0, #0
		break;
   11ffe:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12000:	200c      	movs	r0, #12
   12002:	bd10      	pop	{r4, pc}
   12004:	20001424 	.word	0x20001424

00012008 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1200c:	4358      	muls	r0, r3
   1200e:	4b01      	ldr	r3, [pc, #4]	; (12014 <ll_rl_timeout_set+0xc>)
   12010:	6018      	str	r0, [r3, #0]
   12012:	4770      	bx	lr
   12014:	2000197c 	.word	0x2000197c

00012018 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   12018:	b538      	push	{r3, r4, r5, lr}
   1201a:	4605      	mov	r5, r0
   1201c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1201e:	f7ff fa83 	bl	11528 <rl_access_check.constprop.1>
   12022:	b1d8      	cbz	r0, 1205c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12024:	2200      	movs	r2, #0
   12026:	1c69      	adds	r1, r5, #1
   12028:	7828      	ldrb	r0, [r5, #0]
   1202a:	f7ff fc29 	bl	11880 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1202e:	2807      	cmp	r0, #7
   12030:	d816      	bhi.n	12060 <ll_priv_mode_set+0x48>
		switch (mode) {
   12032:	b11c      	cbz	r4, 1203c <ll_priv_mode_set+0x24>
   12034:	2c01      	cmp	r4, #1
   12036:	d00a      	beq.n	1204e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   12038:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   1203a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1203c:	2328      	movs	r3, #40	; 0x28
   1203e:	4a09      	ldr	r2, [pc, #36]	; (12064 <ll_priv_mode_set+0x4c>)
   12040:	4358      	muls	r0, r3
   12042:	5c13      	ldrb	r3, [r2, r0]
   12044:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   12048:	5413      	strb	r3, [r2, r0]
	return 0;
   1204a:	2000      	movs	r0, #0
			break;
   1204c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1204e:	2328      	movs	r3, #40	; 0x28
   12050:	4a04      	ldr	r2, [pc, #16]	; (12064 <ll_priv_mode_set+0x4c>)
   12052:	4358      	muls	r0, r3
   12054:	5c13      	ldrb	r3, [r2, r0]
   12056:	f043 0310 	orr.w	r3, r3, #16
   1205a:	e7f5      	b.n	12048 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1205c:	200c      	movs	r0, #12
   1205e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12060:	2002      	movs	r0, #2
   12062:	bd38      	pop	{r3, r4, r5, pc}
   12064:	200012e4 	.word	0x200012e4

00012068 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   12068:	4a19      	ldr	r2, [pc, #100]	; (120d0 <ll_filter_reset+0x68>)
   1206a:	2300      	movs	r3, #0
{
   1206c:	b430      	push	{r4, r5}
	wl_anon = 0;
   1206e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   12070:	4a18      	ldr	r2, [pc, #96]	; (120d4 <ll_filter_reset+0x6c>)
   12072:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12076:	f36f 0100 	bfc	r1, #0, #1
   1207a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1207e:	3301      	adds	r3, #1
   12080:	2b08      	cmp	r3, #8
   12082:	d1f6      	bne.n	12072 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12084:	4a14      	ldr	r2, [pc, #80]	; (120d8 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12086:	4915      	ldr	r1, [pc, #84]	; (120dc <ll_filter_reset+0x74>)
	rl_enable = 0;
   12088:	2300      	movs	r3, #0
   1208a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1208c:	4a14      	ldr	r2, [pc, #80]	; (120e0 <ll_filter_reset+0x78>)
   1208e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   12090:	4a14      	ldr	r2, [pc, #80]	; (120e4 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   12092:	4915      	ldr	r1, [pc, #84]	; (120e8 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12094:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1209c:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   120a0:	2528      	movs	r5, #40	; 0x28
   120a2:	fb05 f203 	mul.w	r2, r5, r3
   120a6:	3301      	adds	r3, #1
   120a8:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   120aa:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   120ac:	f36f 0400 	bfc	r4, #0, #1
   120b0:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   120b2:	d1f6      	bne.n	120a2 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   120b4:	4b0d      	ldr	r3, [pc, #52]	; (120ec <ll_filter_reset+0x84>)
   120b6:	2200      	movs	r2, #0
   120b8:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   120ba:	b120      	cbz	r0, 120c6 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   120bc:	490c      	ldr	r1, [pc, #48]	; (120f0 <ll_filter_reset+0x88>)
   120be:	480d      	ldr	r0, [pc, #52]	; (120f4 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   120c0:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   120c2:	f002 bae5 	b.w	14690 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   120c6:	480b      	ldr	r0, [pc, #44]	; (120f4 <ll_filter_reset+0x8c>)
}
   120c8:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   120ca:	f002 baf1 	b.w	146b0 <k_delayed_work_cancel>
   120ce:	bf00      	nop
   120d0:	20001950 	.word	0x20001950
   120d4:	20001457 	.word	0x20001457
   120d8:	20001424 	.word	0x20001424
   120dc:	000dbba0 	.word	0x000dbba0
   120e0:	2000197c 	.word	0x2000197c
   120e4:	20001948 	.word	0x20001948
   120e8:	200012e4 	.word	0x200012e4
   120ec:	2000125a 	.word	0x2000125a
   120f0:	00011c89 	.word	0x00011c89
   120f4:	20001954 	.word	0x20001954

000120f8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   120f8:	4b05      	ldr	r3, [pc, #20]	; (12110 <cntr_init+0x18>)
   120fa:	2200      	movs	r2, #0
   120fc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   12100:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   12104:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12108:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1210c:	4770      	bx	lr
   1210e:	bf00      	nop
   12110:	4000b000 	.word	0x4000b000

00012114 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   12114:	4a04      	ldr	r2, [pc, #16]	; (12128 <cntr_start+0x14>)
   12116:	7813      	ldrb	r3, [r2, #0]
   12118:	1c59      	adds	r1, r3, #1
   1211a:	7011      	strb	r1, [r2, #0]
   1211c:	2001      	movs	r0, #1
   1211e:	b913      	cbnz	r3, 12126 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   12120:	4a02      	ldr	r2, [pc, #8]	; (1212c <cntr_start+0x18>)
   12122:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   12124:	4618      	mov	r0, r3
}
   12126:	4770      	bx	lr
   12128:	200014c9 	.word	0x200014c9
   1212c:	4000b000 	.word	0x4000b000

00012130 <cntr_stop>:

u32_t cntr_stop(void)
{
   12130:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_refcount);
   12132:	4b0f      	ldr	r3, [pc, #60]	; (12170 <cntr_stop+0x40>)
   12134:	7818      	ldrb	r0, [r3, #0]
   12136:	b978      	cbnz	r0, 12158 <cntr_stop+0x28>
   12138:	4b0e      	ldr	r3, [pc, #56]	; (12174 <cntr_stop+0x44>)
   1213a:	9301      	str	r3, [sp, #4]
   1213c:	9300      	str	r3, [sp, #0]
   1213e:	4b0e      	ldr	r3, [pc, #56]	; (12178 <cntr_stop+0x48>)
   12140:	4a0e      	ldr	r2, [pc, #56]	; (1217c <cntr_stop+0x4c>)
   12142:	681c      	ldr	r4, [r3, #0]
   12144:	490e      	ldr	r1, [pc, #56]	; (12180 <cntr_stop+0x50>)
   12146:	4b0f      	ldr	r3, [pc, #60]	; (12184 <cntr_stop+0x54>)
   12148:	480f      	ldr	r0, [pc, #60]	; (12188 <cntr_stop+0x58>)
   1214a:	47a0      	blx	r4
   1214c:	4040      	eors	r0, r0
   1214e:	f380 8811 	msr	BASEPRI, r0
   12152:	f04f 0004 	mov.w	r0, #4
   12156:	df02      	svc	2

	if (--_refcount) {
   12158:	3801      	subs	r0, #1
   1215a:	b2c0      	uxtb	r0, r0
   1215c:	7018      	strb	r0, [r3, #0]
   1215e:	2301      	movs	r3, #1
   12160:	b918      	cbnz	r0, 1216a <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   12162:	4a0a      	ldr	r2, [pc, #40]	; (1218c <cntr_stop+0x5c>)
   12164:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   12166:	b002      	add	sp, #8
   12168:	bd10      	pop	{r4, pc}
		return 1;
   1216a:	4618      	mov	r0, r3
   1216c:	e7fb      	b.n	12166 <cntr_stop+0x36>
   1216e:	bf00      	nop
   12170:	200014c9 	.word	0x200014c9
   12174:	00014c55 	.word	0x00014c55
   12178:	20003aa4 	.word	0x20003aa4
   1217c:	000159c3 	.word	0x000159c3
   12180:	00015a12 	.word	0x00015a12
   12184:	000182ef 	.word	0x000182ef
   12188:	000182f9 	.word	0x000182f9
   1218c:	4000b000 	.word	0x4000b000

00012190 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   12190:	4b01      	ldr	r3, [pc, #4]	; (12198 <cntr_cnt_get+0x8>)
   12192:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   12196:	4770      	bx	lr
   12198:	4000b000 	.word	0x4000b000

0001219c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   1219c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   121a0:	4b01      	ldr	r3, [pc, #4]	; (121a8 <cntr_cmp_set+0xc>)
   121a2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   121a6:	4770      	bx	lr
   121a8:	4000b000 	.word	0x4000b000

000121ac <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   121ac:	4b11      	ldr	r3, [pc, #68]	; (121f4 <do_ecb+0x48>)
{
   121ae:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   121b0:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   121b2:	2500      	movs	r5, #0
   121b4:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   121b6:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   121b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   121bc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   121c0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   121c4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   121c6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   121ca:	b934      	cbnz	r4, 121da <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   121cc:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   121d0:	b91c      	cbnz	r4, 121da <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   121d2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   121d6:	2c00      	cmp	r4, #0
   121d8:	d1f5      	bne.n	121c6 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   121da:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   121dc:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   121e0:	2c00      	cmp	r4, #0
   121e2:	d1e8      	bne.n	121b6 <do_ecb+0xa>
   121e4:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   121e8:	2e00      	cmp	r6, #0
   121ea:	d0e4      	beq.n	121b6 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   121ec:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   121f0:	bd70      	pop	{r4, r5, r6, pc}
   121f2:	bf00      	nop
   121f4:	4000e000 	.word	0x4000e000

000121f8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   121f8:	b570      	push	{r4, r5, r6, lr}
   121fa:	b08c      	sub	sp, #48	; 0x30
   121fc:	460e      	mov	r6, r1
   121fe:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12200:	4601      	mov	r1, r0
   12202:	2210      	movs	r2, #16
   12204:	4668      	mov	r0, sp
{
   12206:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12208:	f7f4 fe3a 	bl	6e80 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1220c:	2210      	movs	r2, #16
   1220e:	eb0d 0002 	add.w	r0, sp, r2
   12212:	4631      	mov	r1, r6
   12214:	f7f4 fe34 	bl	6e80 <mem_rcopy>

	do_ecb(&ecb);
   12218:	4668      	mov	r0, sp
   1221a:	f7ff ffc7 	bl	121ac <do_ecb>

	if (cipher_text_le) {
   1221e:	b125      	cbz	r5, 1222a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   12220:	2210      	movs	r2, #16
   12222:	a908      	add	r1, sp, #32
   12224:	4628      	mov	r0, r5
   12226:	f7f4 fe2b 	bl	6e80 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1222a:	b124      	cbz	r4, 12236 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1222c:	2210      	movs	r2, #16
   1222e:	a908      	add	r1, sp, #32
   12230:	4620      	mov	r0, r4
   12232:	f7ef fcf5 	bl	1c20 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12236:	b00c      	add	sp, #48	; 0x30
   12238:	bd70      	pop	{r4, r5, r6, pc}
	...

0001223c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   1223c:	4b07      	ldr	r3, [pc, #28]	; (1225c <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1223e:	4a08      	ldr	r2, [pc, #32]	; (12260 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   12240:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   12244:	4907      	ldr	r1, [pc, #28]	; (12264 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   12246:	4a08      	ldr	r2, [pc, #32]	; (12268 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   12248:	2800      	cmp	r0, #0
   1224a:	bf14      	ite	ne
   1224c:	4610      	movne	r0, r2
   1224e:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12250:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   12252:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   12256:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1225a:	4770      	bx	lr
   1225c:	4001f000 	.word	0x4001f000
   12260:	40008140 	.word	0x40008140
   12264:	40001004 	.word	0x40001004
   12268:	40001000 	.word	0x40001000

0001226c <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1226c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1226e:	4e2c      	ldr	r6, [pc, #176]	; (12320 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12270:	4f2c      	ldr	r7, [pc, #176]	; (12324 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12272:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   12274:	4b2c      	ldr	r3, [pc, #176]	; (12328 <sw_switch.isra.9+0xbc>)
   12276:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1227a:	b22b      	sxth	r3, r5
   1227c:	00dc      	lsls	r4, r3, #3
   1227e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12282:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   12286:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1228a:	f105 040b 	add.w	r4, r5, #11
   1228e:	b2e4      	uxtb	r4, r4
   12290:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   12292:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   12296:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1229a:	3fc0      	subs	r7, #192	; 0xc0
   1229c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   122a0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   122a4:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   122a8:	2800      	cmp	r0, #0
   122aa:	d034      	beq.n	12316 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   122ac:	f24a 075a 	movw	r7, #41050	; 0xa05a
   122b0:	f649 4040 	movw	r0, #40000	; 0x9c40
   122b4:	2a02      	cmp	r2, #2
   122b6:	bf0c      	ite	eq
   122b8:	4602      	moveq	r2, r0
   122ba:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   122bc:	f242 47b8 	movw	r7, #9400	; 0x24b8
   122c0:	f241 504a 	movw	r0, #5450	; 0x154a
   122c4:	2902      	cmp	r1, #2
   122c6:	bf18      	it	ne
   122c8:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   122ca:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   122ce:	4401      	add	r1, r0
   122d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   122d4:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   122d8:	4a14      	ldr	r2, [pc, #80]	; (1232c <sw_switch.isra.9+0xc0>)
   122da:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   122de:	009b      	lsls	r3, r3, #2
   122e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   122e4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   122e8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   122ec:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   122ee:	bf8b      	itete	hi
   122f0:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   122f4:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   122f6:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   122f8:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   122fc:	bf88      	it	hi
   122fe:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12302:	4b08      	ldr	r3, [pc, #32]	; (12324 <sw_switch.isra.9+0xb8>)
   12304:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12308:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1230c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1230e:	f003 0301 	and.w	r3, r3, #1
   12312:	7033      	strb	r3, [r6, #0]
   12314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12316:	4a06      	ldr	r2, [pc, #24]	; (12330 <sw_switch.isra.9+0xc4>)
   12318:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1231c:	212d      	movs	r1, #45	; 0x2d
   1231e:	e7de      	b.n	122de <sw_switch.isra.9+0x72>
   12320:	200016ec 	.word	0x200016ec
   12324:	4001f000 	.word	0x4001f000
   12328:	4000110c 	.word	0x4000110c
   1232c:	40001000 	.word	0x40001000
   12330:	40001004 	.word	0x40001004

00012334 <isr_radio>:
	if (sfp_radio_isr) {
   12334:	4b02      	ldr	r3, [pc, #8]	; (12340 <isr_radio+0xc>)
   12336:	681b      	ldr	r3, [r3, #0]
   12338:	b103      	cbz	r3, 1233c <isr_radio+0x8>
		sfp_radio_isr();
   1233a:	4718      	bx	r3
   1233c:	4770      	bx	lr
   1233e:	bf00      	nop
   12340:	200016e8 	.word	0x200016e8

00012344 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <radio_isr_set+0x1c>)
   12346:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   12348:	4b06      	ldr	r3, [pc, #24]	; (12364 <radio_isr_set+0x20>)
   1234a:	2210      	movs	r2, #16
   1234c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12350:	4b05      	ldr	r3, [pc, #20]	; (12368 <radio_isr_set+0x24>)
   12352:	2202      	movs	r2, #2
   12354:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   12358:	2001      	movs	r0, #1
   1235a:	f7ef ba83 	b.w	1864 <_arch_irq_enable>
   1235e:	bf00      	nop
   12360:	200016e8 	.word	0x200016e8
   12364:	40001000 	.word	0x40001000
   12368:	e000e100 	.word	0xe000e100

0001236c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1236c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12374:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12376:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1237a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1237e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12382:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   12386:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1238a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1238e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12392:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   12396:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1239a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1239e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   123a2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   123a6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   123aa:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   123ae:	4770      	bx	lr

000123b0 <radio_reset>:
{
   123b0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   123b2:	2001      	movs	r0, #1
   123b4:	f7ef fa66 	bl	1884 <_arch_irq_disable>
	NRF_RADIO->POWER =
   123b8:	4b08      	ldr	r3, [pc, #32]	; (123dc <radio_reset+0x2c>)
   123ba:	2200      	movs	r2, #0
   123bc:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   123c0:	2201      	movs	r2, #1
   123c2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   123c6:	4a06      	ldr	r2, [pc, #24]	; (123e0 <radio_reset+0x30>)
   123c8:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   123ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   123ce:	f023 0301 	bic.w	r3, r3, #1
   123d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   123d6:	6013      	str	r3, [r2, #0]
   123d8:	bd08      	pop	{r3, pc}
   123da:	bf00      	nop
   123dc:	40001000 	.word	0x40001000
   123e0:	40001774 	.word	0x40001774

000123e4 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   123e4:	4b06      	ldr	r3, [pc, #24]	; (12400 <radio_phy_set+0x1c>)
	switch (phy) {
   123e6:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   123e8:	bf0c      	ite	eq
   123ea:	2204      	moveq	r2, #4
   123ec:	2203      	movne	r2, #3
   123ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   123f2:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   123f6:	f042 0201 	orr.w	r2, r2, #1
   123fa:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   123fe:	4770      	bx	lr
   12400:	40001000 	.word	0x40001000

00012404 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   12404:	4b01      	ldr	r3, [pc, #4]	; (1240c <radio_tx_power_set+0x8>)
   12406:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1240a:	4770      	bx	lr
   1240c:	40001000 	.word	0x40001000

00012410 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12410:	4b01      	ldr	r3, [pc, #4]	; (12418 <radio_freq_chan_set+0x8>)
   12412:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   12416:	4770      	bx	lr
   12418:	40001000 	.word	0x40001000

0001241c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1241c:	4b07      	ldr	r3, [pc, #28]	; (1243c <radio_whiten_iv_set+0x20>)
   1241e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12422:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12426:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1242a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1242e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12432:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12436:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1243a:	4770      	bx	lr
   1243c:	40001000 	.word	0x40001000

00012440 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12440:	4a0a      	ldr	r2, [pc, #40]	; (1246c <radio_aa_set+0x2c>)
   12442:	2300      	movs	r3, #0
   12444:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12448:	2301      	movs	r3, #1
   1244a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1244e:	78c3      	ldrb	r3, [r0, #3]
   12450:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12454:	7843      	ldrb	r3, [r0, #1]
   12456:	7881      	ldrb	r1, [r0, #2]
   12458:	041b      	lsls	r3, r3, #16
   1245a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1245e:	7801      	ldrb	r1, [r0, #0]
   12460:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12464:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12468:	4770      	bx	lr
   1246a:	bf00      	nop
   1246c:	40001000 	.word	0x40001000

00012470 <radio_pkt_configure>:
	switch (phy) {
   12470:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12474:	2b02      	cmp	r3, #2
{
   12476:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   12478:	bf0c      	ite	eq
   1247a:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   1247e:	2400      	movne	r4, #0
	if (dc) {
   12480:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12482:	f1c0 0308 	rsb	r3, r0, #8
   12486:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1248a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1248e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   12492:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12496:	4a0b      	ldr	r2, [pc, #44]	; (124c4 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   12498:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1249c:	bf48      	it	mi
   1249e:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   124a2:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   124a4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   124a8:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   124ac:	4b06      	ldr	r3, [pc, #24]	; (124c8 <radio_pkt_configure+0x58>)
   124ae:	4003      	ands	r3, r0
   124b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   124b4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   124b8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   124bc:	4319      	orrs	r1, r3
   124be:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   124c2:	bd10      	pop	{r4, pc}
   124c4:	40001000 	.word	0x40001000
   124c8:	fef80000 	.word	0xfef80000

000124cc <radio_pkt_rx_set>:
   124cc:	4b01      	ldr	r3, [pc, #4]	; (124d4 <radio_pkt_rx_set+0x8>)
   124ce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   124d2:	4770      	bx	lr
   124d4:	40001000 	.word	0x40001000

000124d8 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   124d8:	4b01      	ldr	r3, [pc, #4]	; (124e0 <radio_pkt_tx_set+0x8>)
   124da:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   124de:	4770      	bx	lr
   124e0:	40001000 	.word	0x40001000

000124e4 <radio_tx_ready_delay_get>:
	switch (phy) {
   124e4:	2802      	cmp	r0, #2
}
   124e6:	bf0c      	ite	eq
   124e8:	2028      	moveq	r0, #40	; 0x28
   124ea:	2029      	movne	r0, #41	; 0x29
   124ec:	4770      	bx	lr

000124ee <radio_tx_chain_delay_get>:
}
   124ee:	2001      	movs	r0, #1
   124f0:	4770      	bx	lr

000124f2 <radio_rx_ready_delay_get>:
}
   124f2:	2029      	movs	r0, #41	; 0x29
   124f4:	4770      	bx	lr

000124f6 <radio_rx_chain_delay_get>:
	switch (phy) {
   124f6:	2802      	cmp	r0, #2
}
   124f8:	bf0c      	ite	eq
   124fa:	2006      	moveq	r0, #6
   124fc:	200a      	movne	r0, #10
   124fe:	4770      	bx	lr

00012500 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   12500:	4b01      	ldr	r3, [pc, #4]	; (12508 <radio_rx_enable+0x8>)
   12502:	2201      	movs	r2, #1
   12504:	605a      	str	r2, [r3, #4]
   12506:	4770      	bx	lr
   12508:	40001000 	.word	0x40001000

0001250c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   1250c:	4b01      	ldr	r3, [pc, #4]	; (12514 <radio_tx_enable+0x8>)
   1250e:	2201      	movs	r2, #1
   12510:	601a      	str	r2, [r3, #0]
   12512:	4770      	bx	lr
   12514:	40001000 	.word	0x40001000

00012518 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12518:	4a07      	ldr	r2, [pc, #28]	; (12538 <radio_disable+0x20>)
   1251a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1251e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12522:	2301      	movs	r3, #1
   12524:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12526:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12528:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1252c:	2100      	movs	r1, #0
   1252e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12532:	6113      	str	r3, [r2, #16]
   12534:	4770      	bx	lr
   12536:	bf00      	nop
   12538:	4001f000 	.word	0x4001f000

0001253c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1253c:	4b04      	ldr	r3, [pc, #16]	; (12550 <radio_status_reset+0x14>)
   1253e:	2200      	movs	r2, #0
   12540:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12544:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12548:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1254c:	4770      	bx	lr
   1254e:	bf00      	nop
   12550:	40001000 	.word	0x40001000

00012554 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12554:	4b03      	ldr	r3, [pc, #12]	; (12564 <radio_is_ready+0x10>)
   12556:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1255a:	3000      	adds	r0, #0
   1255c:	bf18      	it	ne
   1255e:	2001      	movne	r0, #1
   12560:	4770      	bx	lr
   12562:	bf00      	nop
   12564:	40001000 	.word	0x40001000

00012568 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12568:	4b03      	ldr	r3, [pc, #12]	; (12578 <radio_is_done+0x10>)
   1256a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1256e:	3000      	adds	r0, #0
   12570:	bf18      	it	ne
   12572:	2001      	movne	r0, #1
   12574:	4770      	bx	lr
   12576:	bf00      	nop
   12578:	40001000 	.word	0x40001000

0001257c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1257c:	4b03      	ldr	r3, [pc, #12]	; (1258c <radio_is_idle+0x10>)
   1257e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   12582:	fab0 f080 	clz	r0, r0
   12586:	0940      	lsrs	r0, r0, #5
   12588:	4770      	bx	lr
   1258a:	bf00      	nop
   1258c:	40001000 	.word	0x40001000

00012590 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   12590:	4b04      	ldr	r3, [pc, #16]	; (125a4 <radio_crc_configure+0x14>)
   12592:	f240 1203 	movw	r2, #259	; 0x103
   12596:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1259a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1259e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   125a2:	4770      	bx	lr
   125a4:	40001000 	.word	0x40001000

000125a8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   125a8:	4b03      	ldr	r3, [pc, #12]	; (125b8 <radio_crc_is_valid+0x10>)
   125aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   125ae:	3000      	adds	r0, #0
   125b0:	bf18      	it	ne
   125b2:	2001      	movne	r0, #1
   125b4:	4770      	bx	lr
   125b6:	bf00      	nop
   125b8:	40001000 	.word	0x40001000

000125bc <radio_pkt_empty_get>:
}
   125bc:	4800      	ldr	r0, [pc, #0]	; (125c0 <radio_pkt_empty_get+0x4>)
   125be:	4770      	bx	lr
   125c0:	200015dc 	.word	0x200015dc

000125c4 <radio_pkt_scratch_get>:
}
   125c4:	4800      	ldr	r0, [pc, #0]	; (125c8 <radio_pkt_scratch_get+0x4>)
   125c6:	4770      	bx	lr
   125c8:	200015e0 	.word	0x200015e0

000125cc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   125cc:	4b04      	ldr	r3, [pc, #16]	; (125e0 <radio_switch_complete_and_rx+0x14>)
   125ce:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   125d0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   125d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   125d6:	4602      	mov	r2, r0
   125d8:	4608      	mov	r0, r1
   125da:	f7ff be47 	b.w	1226c <sw_switch.isra.9>
   125de:	bf00      	nop
   125e0:	40001000 	.word	0x40001000

000125e4 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   125e4:	4b03      	ldr	r3, [pc, #12]	; (125f4 <radio_switch_complete_and_tx+0x10>)
   125e6:	2103      	movs	r1, #3
   125e8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   125ec:	4601      	mov	r1, r0
   125ee:	2001      	movs	r0, #1
   125f0:	f7ff be3c 	b.w	1226c <sw_switch.isra.9>
   125f4:	40001000 	.word	0x40001000

000125f8 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   125f8:	4b05      	ldr	r3, [pc, #20]	; (12610 <radio_switch_complete_and_disable+0x18>)
   125fa:	2203      	movs	r2, #3
   125fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12600:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12604:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12608:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1260c:	4770      	bx	lr
   1260e:	bf00      	nop
   12610:	40001000 	.word	0x40001000

00012614 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12614:	4a03      	ldr	r2, [pc, #12]	; (12624 <radio_rssi_measure+0x10>)
   12616:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1261a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1261e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12622:	4770      	bx	lr
   12624:	40001000 	.word	0x40001000

00012628 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12628:	4b01      	ldr	r3, [pc, #4]	; (12630 <radio_rssi_get+0x8>)
   1262a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1262e:	4770      	bx	lr
   12630:	40001000 	.word	0x40001000

00012634 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12634:	4b02      	ldr	r3, [pc, #8]	; (12640 <radio_rssi_status_reset+0xc>)
   12636:	2200      	movs	r2, #0
   12638:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1263c:	4770      	bx	lr
   1263e:	bf00      	nop
   12640:	40001000 	.word	0x40001000

00012644 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12644:	4b03      	ldr	r3, [pc, #12]	; (12654 <radio_rssi_is_ready+0x10>)
   12646:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1264a:	3000      	adds	r0, #0
   1264c:	bf18      	it	ne
   1264e:	2001      	movne	r0, #1
   12650:	4770      	bx	lr
   12652:	bf00      	nop
   12654:	40001000 	.word	0x40001000

00012658 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12658:	b530      	push	{r4, r5, lr}
   1265a:	2400      	movs	r4, #0
   1265c:	00a3      	lsls	r3, r4, #2
   1265e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12666:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12668:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   1266c:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   1266e:	8895      	ldrh	r5, [r2, #4]
   12670:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12674:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12676:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1267a:	d1ef      	bne.n	1265c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   1267c:	4b02      	ldr	r3, [pc, #8]	; (12688 <radio_filter_configure+0x30>)
   1267e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12682:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12686:	bd30      	pop	{r4, r5, pc}
   12688:	40001000 	.word	0x40001000

0001268c <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1268c:	4a03      	ldr	r2, [pc, #12]	; (1269c <radio_filter_disable+0x10>)
   1268e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12696:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1269a:	4770      	bx	lr
   1269c:	40001000 	.word	0x40001000

000126a0 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   126a0:	4b02      	ldr	r3, [pc, #8]	; (126ac <radio_filter_status_reset+0xc>)
   126a2:	2200      	movs	r2, #0
   126a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   126a8:	4770      	bx	lr
   126aa:	bf00      	nop
   126ac:	40001000 	.word	0x40001000

000126b0 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   126b0:	4b03      	ldr	r3, [pc, #12]	; (126c0 <radio_filter_has_match+0x10>)
   126b2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   126b6:	3000      	adds	r0, #0
   126b8:	bf18      	it	ne
   126ba:	2001      	movne	r0, #1
   126bc:	4770      	bx	lr
   126be:	bf00      	nop
   126c0:	40001000 	.word	0x40001000

000126c4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   126c4:	4b01      	ldr	r3, [pc, #4]	; (126cc <radio_filter_match_get+0x8>)
   126c6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   126ca:	4770      	bx	lr
   126cc:	40001000 	.word	0x40001000

000126d0 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   126d0:	4b04      	ldr	r3, [pc, #16]	; (126e4 <radio_bc_configure+0x14>)
   126d2:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   126d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   126da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   126de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   126e2:	4770      	bx	lr
   126e4:	40001000 	.word	0x40001000

000126e8 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   126e8:	4b05      	ldr	r3, [pc, #20]	; (12700 <radio_tmr_status_reset+0x18>)
   126ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   126ee:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   126f2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   126f6:	227f      	movs	r2, #127	; 0x7f
   126f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   126fc:	4770      	bx	lr
   126fe:	bf00      	nop
   12700:	4000b000 	.word	0x4000b000

00012704 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12704:	4b03      	ldr	r3, [pc, #12]	; (12714 <radio_tmr_tifs_set+0x10>)
   12706:	4a04      	ldr	r2, [pc, #16]	; (12718 <radio_tmr_tifs_set+0x14>)
   12708:	781b      	ldrb	r3, [r3, #0]
   1270a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1270e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12712:	4770      	bx	lr
   12714:	200016ec 	.word	0x200016ec
   12718:	40009000 	.word	0x40009000

0001271c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   1271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12720:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12724:	4c30      	ldr	r4, [pc, #192]	; (127e8 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   12726:	4d31      	ldr	r5, [pc, #196]	; (127ec <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12728:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1272c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   1272e:	bf88      	it	hi
   12730:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   12734:	4b2e      	ldr	r3, [pc, #184]	; (127f0 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12736:	4c2f      	ldr	r4, [pc, #188]	; (127f4 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   12738:	bf82      	ittt	hi
   1273a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1273e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12742:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12746:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12748:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   1274c:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1274e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12750:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12754:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12756:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1275a:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1275e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   12762:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   12766:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1276a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1276e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   12772:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   12776:	4920      	ldr	r1, [pc, #128]	; (127f8 <radio_tmr_start+0xdc>)
   12778:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   1277c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   12780:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12784:	f7ff fd5a 	bl	1223c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   12788:	4b1c      	ldr	r3, [pc, #112]	; (127fc <radio_tmr_start+0xe0>)
   1278a:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1278c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12790:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12794:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   12798:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1279a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1279e:	3b74      	subs	r3, #116	; 0x74
   127a0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   127a4:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   127a8:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   127ac:	f503 739a 	add.w	r3, r3, #308	; 0x134
   127b0:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   127b4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   127b8:	33c4      	adds	r3, #196	; 0xc4
   127ba:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   127be:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   127c2:	3bc0      	subs	r3, #192	; 0xc0
   127c4:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   127c8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   127cc:	33c8      	adds	r3, #200	; 0xc8
   127ce:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   127d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
   127d6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   127da:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   127de:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   127e2:	4628      	mov	r0, r5
   127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127e8:	7ff0bdbf 	.word	0x7ff0bdbf
   127ec:	000f4240 	.word	0x000f4240
   127f0:	40008000 	.word	0x40008000
   127f4:	4000b000 	.word	0x4000b000
   127f8:	4000b148 	.word	0x4000b148
   127fc:	40009000 	.word	0x40009000

00012800 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12800:	4a04      	ldr	r2, [pc, #16]	; (12814 <radio_tmr_stop+0x14>)
   12802:	2301      	movs	r3, #1
   12804:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   12806:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12808:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1280c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   1280e:	6113      	str	r3, [r2, #16]
   12810:	4770      	bx	lr
   12812:	bf00      	nop
   12814:	40008000 	.word	0x40008000

00012818 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12818:	4b0c      	ldr	r3, [pc, #48]	; (1284c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1281a:	4a0d      	ldr	r2, [pc, #52]	; (12850 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   1281c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12820:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12824:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12828:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1282c:	3240      	adds	r2, #64	; 0x40
   1282e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   12832:	f502 7280 	add.w	r2, r2, #256	; 0x100
   12836:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1283a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1283e:	3a34      	subs	r2, #52	; 0x34
   12840:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12844:	2218      	movs	r2, #24
   12846:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1284a:	4770      	bx	lr
   1284c:	40008000 	.word	0x40008000
   12850:	40001104 	.word	0x40001104

00012854 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12854:	4b0b      	ldr	r3, [pc, #44]	; (12884 <radio_tmr_aa_capture+0x30>)
   12856:	4a0c      	ldr	r2, [pc, #48]	; (12888 <radio_tmr_aa_capture+0x34>)
   12858:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   1285c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12860:	3240      	adds	r2, #64	; 0x40
   12862:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12866:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1286a:	3a3c      	subs	r2, #60	; 0x3c
   1286c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12870:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12874:	3240      	adds	r2, #64	; 0x40
   12876:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1287a:	220c      	movs	r2, #12
   1287c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12880:	4770      	bx	lr
   12882:	bf00      	nop
   12884:	4001f000 	.word	0x4001f000
   12888:	40001100 	.word	0x40001100

0001288c <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1288c:	4b01      	ldr	r3, [pc, #4]	; (12894 <radio_tmr_aa_get+0x8>)
   1288e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12892:	4770      	bx	lr
   12894:	40008000 	.word	0x40008000

00012898 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   12898:	4b01      	ldr	r3, [pc, #4]	; (128a0 <radio_tmr_aa_save+0x8>)
   1289a:	6018      	str	r0, [r3, #0]
   1289c:	4770      	bx	lr
   1289e:	bf00      	nop
   128a0:	200016e4 	.word	0x200016e4

000128a4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   128a4:	4b01      	ldr	r3, [pc, #4]	; (128ac <radio_tmr_aa_restore+0x8>)
   128a6:	6818      	ldr	r0, [r3, #0]
   128a8:	4770      	bx	lr
   128aa:	bf00      	nop
   128ac:	200016e4 	.word	0x200016e4

000128b0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   128b0:	4b01      	ldr	r3, [pc, #4]	; (128b8 <radio_tmr_ready_get+0x8>)
   128b2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   128b6:	4770      	bx	lr
   128b8:	40008000 	.word	0x40008000

000128bc <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   128bc:	4b06      	ldr	r3, [pc, #24]	; (128d8 <radio_tmr_end_capture+0x1c>)
   128be:	4a07      	ldr	r2, [pc, #28]	; (128dc <radio_tmr_end_capture+0x20>)
   128c0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   128c4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   128c8:	323c      	adds	r2, #60	; 0x3c
   128ca:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   128ce:	2220      	movs	r2, #32
   128d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   128d4:	4770      	bx	lr
   128d6:	bf00      	nop
   128d8:	4001f000 	.word	0x4001f000
   128dc:	4000110c 	.word	0x4000110c

000128e0 <radio_tmr_end_get>:
   128e0:	4b01      	ldr	r3, [pc, #4]	; (128e8 <radio_tmr_end_get+0x8>)
   128e2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   128e6:	4770      	bx	lr
   128e8:	40008000 	.word	0x40008000

000128ec <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   128ec:	4b01      	ldr	r3, [pc, #4]	; (128f4 <radio_tmr_tifs_base_get+0x8>)
   128ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   128f2:	4770      	bx	lr
   128f4:	40008000 	.word	0x40008000

000128f8 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   128f8:	4b16      	ldr	r3, [pc, #88]	; (12954 <radio_ccm_rx_pkt_set+0x5c>)
{
   128fa:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   128fc:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   128fe:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12900:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12904:	4e14      	ldr	r6, [pc, #80]	; (12958 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12906:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1290a:	4d14      	ldr	r5, [pc, #80]	; (1295c <radio_ccm_rx_pkt_set+0x64>)
   1290c:	2902      	cmp	r1, #2
   1290e:	bf0c      	ite	eq
   12910:	4629      	moveq	r1, r5
   12912:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12914:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12918:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1291c:	4810      	ldr	r0, [pc, #64]	; (12960 <radio_ccm_rx_pkt_set+0x68>)
   1291e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   12922:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12926:	4a0f      	ldr	r2, [pc, #60]	; (12964 <radio_ccm_rx_pkt_set+0x6c>)
   12928:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1292c:	490e      	ldr	r1, [pc, #56]	; (12968 <radio_ccm_rx_pkt_set+0x70>)
   1292e:	4a0f      	ldr	r2, [pc, #60]	; (1296c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   12930:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12934:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12938:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   1293c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12940:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12944:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   12948:	2140      	movs	r1, #64	; 0x40
   1294a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   1294e:	2201      	movs	r2, #1
   12950:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12952:	bd70      	pop	{r4, r5, r6, pc}
   12954:	4000f000 	.word	0x4000f000
   12958:	01000001 	.word	0x01000001
   1295c:	01010001 	.word	0x01010001
   12960:	200015e0 	.word	0x200015e0
   12964:	200014d0 	.word	0x200014d0
   12968:	40001104 	.word	0x40001104
   1296c:	4001f000 	.word	0x4001f000

00012970 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12970:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12972:	4b0e      	ldr	r3, [pc, #56]	; (129ac <radio_ccm_tx_pkt_set+0x3c>)
   12974:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12976:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12978:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1297c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12980:	4c0b      	ldr	r4, [pc, #44]	; (129b0 <radio_ccm_tx_pkt_set+0x40>)
   12982:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12986:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1298a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1298e:	4809      	ldr	r0, [pc, #36]	; (129b4 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12990:	4909      	ldr	r1, [pc, #36]	; (129b8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12992:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12996:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1299a:	2101      	movs	r1, #1
   1299c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   129a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   129a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   129a8:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   129aa:	bd10      	pop	{r4, pc}
   129ac:	4000f000 	.word	0x4000f000
   129b0:	01010000 	.word	0x01010000
   129b4:	200015e0 	.word	0x200015e0
   129b8:	200014d0 	.word	0x200014d0

000129bc <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   129bc:	4b0c      	ldr	r3, [pc, #48]	; (129f0 <radio_ccm_is_done+0x34>)
   129be:	2202      	movs	r2, #2
   129c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   129c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   129c8:	b16a      	cbz	r2, 129e6 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   129ca:	2202      	movs	r2, #2
   129cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   129d0:	4a08      	ldr	r2, [pc, #32]	; (129f4 <radio_ccm_is_done+0x38>)
   129d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   129d6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   129da:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   129de:	fab0 f080 	clz	r0, r0
   129e2:	0940      	lsrs	r0, r0, #5
   129e4:	4770      	bx	lr
		__WFE();
   129e6:	bf20      	wfe
		__SEV();
   129e8:	bf40      	sev
		__WFE();
   129ea:	bf20      	wfe
   129ec:	e7ea      	b.n	129c4 <radio_ccm_is_done+0x8>
   129ee:	bf00      	nop
   129f0:	4000f000 	.word	0x4000f000
   129f4:	e000e100 	.word	0xe000e100

000129f8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   129f8:	4b03      	ldr	r3, [pc, #12]	; (12a08 <radio_ccm_mic_is_valid+0x10>)
   129fa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   129fe:	3000      	adds	r0, #0
   12a00:	bf18      	it	ne
   12a02:	2001      	movne	r0, #1
   12a04:	4770      	bx	lr
   12a06:	bf00      	nop
   12a08:	4000f000 	.word	0x4000f000

00012a0c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12a0c:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12a0e:	4c13      	ldr	r4, [pc, #76]	; (12a5c <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12a10:	4d13      	ldr	r5, [pc, #76]	; (12a60 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12a12:	2303      	movs	r3, #3
   12a14:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12a18:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12a1c:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12a20:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12a24:	3b01      	subs	r3, #1
   12a26:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12a2a:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12a2c:	4b0d      	ldr	r3, [pc, #52]	; (12a64 <radio_ar_configure+0x58>)
   12a2e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   12a32:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12a34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12a38:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12a3c:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12a40:	f7ff fe46 	bl	126d0 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12a44:	4b08      	ldr	r3, [pc, #32]	; (12a68 <radio_ar_configure+0x5c>)
   12a46:	4a09      	ldr	r2, [pc, #36]	; (12a6c <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12a48:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12a4c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12a50:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12a52:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12a56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12a5a:	bd38      	pop	{r3, r4, r5, pc}
   12a5c:	4000f000 	.word	0x4000f000
   12a60:	40001000 	.word	0x40001000
   12a64:	200014cc 	.word	0x200014cc
   12a68:	4001f000 	.word	0x4001f000
   12a6c:	40001128 	.word	0x40001128

00012a70 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12a70:	4b01      	ldr	r3, [pc, #4]	; (12a78 <radio_ar_match_get+0x8>)
   12a72:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12a76:	4770      	bx	lr
   12a78:	4000f000 	.word	0x4000f000

00012a7c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12a7c:	4a04      	ldr	r2, [pc, #16]	; (12a90 <radio_ar_status_reset+0x14>)
   12a7e:	2300      	movs	r3, #0
   12a80:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12a84:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   12a88:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12a8c:	4770      	bx	lr
   12a8e:	bf00      	nop
   12a90:	40001000 	.word	0x40001000

00012a94 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12a94:	4b08      	ldr	r3, [pc, #32]	; (12ab8 <radio_ar_has_match+0x24>)
   12a96:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   12a9a:	b160      	cbz	r0, 12ab6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12a9c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12aa0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12aa4:	b138      	cbz	r0, 12ab6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   12aa6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12aaa:	b120      	cbz	r0, 12ab6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12aac:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12ab0:	fab0 f080 	clz	r0, r0
   12ab4:	0940      	lsrs	r0, r0, #5
}
   12ab6:	4770      	bx	lr
   12ab8:	40001000 	.word	0x40001000

00012abc <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12abc:	2901      	cmp	r1, #1
{
   12abe:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12ac0:	d00f      	beq.n	12ae2 <mayfly_enable_cb+0x26>
   12ac2:	4b0e      	ldr	r3, [pc, #56]	; (12afc <mayfly_enable_cb+0x40>)
   12ac4:	9301      	str	r3, [sp, #4]
   12ac6:	9300      	str	r3, [sp, #0]
   12ac8:	4b0d      	ldr	r3, [pc, #52]	; (12b00 <mayfly_enable_cb+0x44>)
   12aca:	4a0e      	ldr	r2, [pc, #56]	; (12b04 <mayfly_enable_cb+0x48>)
   12acc:	681c      	ldr	r4, [r3, #0]
   12ace:	490e      	ldr	r1, [pc, #56]	; (12b08 <mayfly_enable_cb+0x4c>)
   12ad0:	4b0e      	ldr	r3, [pc, #56]	; (12b0c <mayfly_enable_cb+0x50>)
   12ad2:	480f      	ldr	r0, [pc, #60]	; (12b10 <mayfly_enable_cb+0x54>)
   12ad4:	47a0      	blx	r4
   12ad6:	4040      	eors	r0, r0
   12ad8:	f380 8811 	msr	BASEPRI, r0
   12adc:	f04f 0004 	mov.w	r0, #4
   12ae0:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12ae2:	2018      	movs	r0, #24
	if (enable) {
   12ae4:	b122      	cbz	r2, 12af0 <mayfly_enable_cb+0x34>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   12ae6:	b002      	add	sp, #8
   12ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
   12aec:	f7ee beba 	b.w	1864 <_arch_irq_enable>
}
   12af0:	b002      	add	sp, #8
   12af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
   12af6:	f7ee bec5 	b.w	1884 <_arch_irq_disable>
   12afa:	bf00      	nop
   12afc:	00014c55 	.word	0x00014c55
   12b00:	20003aa4 	.word	0x20003aa4
   12b04:	000159c3 	.word	0x000159c3
   12b08:	00015a12 	.word	0x00015a12
   12b0c:	00018324 	.word	0x00018324
   12b10:	00018353 	.word	0x00018353

00012b14 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   12b14:	b513      	push	{r0, r1, r4, lr}
	(void)caller_id;

	switch (callee_id) {
   12b16:	b189      	cbz	r1, 12b3c <mayfly_is_enabled+0x28>
   12b18:	2901      	cmp	r1, #1
   12b1a:	d015      	beq.n	12b48 <mayfly_is_enabled+0x34>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12b1c:	4b0b      	ldr	r3, [pc, #44]	; (12b4c <mayfly_is_enabled+0x38>)
   12b1e:	9301      	str	r3, [sp, #4]
   12b20:	9300      	str	r3, [sp, #0]
   12b22:	4b0b      	ldr	r3, [pc, #44]	; (12b50 <mayfly_is_enabled+0x3c>)
   12b24:	4a0b      	ldr	r2, [pc, #44]	; (12b54 <mayfly_is_enabled+0x40>)
   12b26:	681c      	ldr	r4, [r3, #0]
   12b28:	490b      	ldr	r1, [pc, #44]	; (12b58 <mayfly_is_enabled+0x44>)
   12b2a:	4b0c      	ldr	r3, [pc, #48]	; (12b5c <mayfly_is_enabled+0x48>)
   12b2c:	480c      	ldr	r0, [pc, #48]	; (12b60 <mayfly_is_enabled+0x4c>)
   12b2e:	47a0      	blx	r4
   12b30:	4040      	eors	r0, r0
   12b32:	f380 8811 	msr	BASEPRI, r0
   12b36:	f04f 0004 	mov.w	r0, #4
   12b3a:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   12b3c:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   12b3e:	b002      	add	sp, #8
   12b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return irq_is_enabled(SWI4_IRQn);
   12b44:	f7ee beb2 	b.w	18ac <_arch_irq_is_enabled>
   12b48:	2018      	movs	r0, #24
   12b4a:	e7f8      	b.n	12b3e <mayfly_is_enabled+0x2a>
   12b4c:	00014c55 	.word	0x00014c55
   12b50:	20003aa4 	.word	0x20003aa4
   12b54:	000159c3 	.word	0x000159c3
   12b58:	00015a12 	.word	0x00015a12
   12b5c:	00018335 	.word	0x00018335
   12b60:	00015962 	.word	0x00015962

00012b64 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12b64:	4288      	cmp	r0, r1
   12b66:	d00a      	beq.n	12b7e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   12b68:	b918      	cbnz	r0, 12b72 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12b6a:	1e4b      	subs	r3, r1, #1
   12b6c:	4258      	negs	r0, r3
   12b6e:	4158      	adcs	r0, r3
   12b70:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12b72:	2801      	cmp	r0, #1
   12b74:	d105      	bne.n	12b82 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12b76:	fab1 f081 	clz	r0, r1
   12b7a:	0940      	lsrs	r0, r0, #5
   12b7c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12b7e:	2001      	movs	r0, #1
   12b80:	4770      	bx	lr
   12b82:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   12b84:	4770      	bx	lr
	...

00012b88 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   12b88:	b513      	push	{r0, r1, r4, lr}
   12b8a:	4b0e      	ldr	r3, [pc, #56]	; (12bc4 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   12b8c:	b189      	cbz	r1, 12bb2 <mayfly_pend+0x2a>
   12b8e:	2901      	cmp	r1, #1
   12b90:	d015      	beq.n	12bbe <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   12b92:	4b0d      	ldr	r3, [pc, #52]	; (12bc8 <mayfly_pend+0x40>)
   12b94:	9301      	str	r3, [sp, #4]
   12b96:	9300      	str	r3, [sp, #0]
   12b98:	4b0c      	ldr	r3, [pc, #48]	; (12bcc <mayfly_pend+0x44>)
   12b9a:	4a0d      	ldr	r2, [pc, #52]	; (12bd0 <mayfly_pend+0x48>)
   12b9c:	681c      	ldr	r4, [r3, #0]
   12b9e:	490d      	ldr	r1, [pc, #52]	; (12bd4 <mayfly_pend+0x4c>)
   12ba0:	4b0d      	ldr	r3, [pc, #52]	; (12bd8 <mayfly_pend+0x50>)
   12ba2:	480e      	ldr	r0, [pc, #56]	; (12bdc <mayfly_pend+0x54>)
   12ba4:	47a0      	blx	r4
   12ba6:	4040      	eors	r0, r0
   12ba8:	f380 8811 	msr	BASEPRI, r0
   12bac:	f04f 0004 	mov.w	r0, #4
   12bb0:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   12bba:	b002      	add	sp, #8
   12bbc:	bd10      	pop	{r4, pc}
   12bbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12bc2:	e7f8      	b.n	12bb6 <mayfly_pend+0x2e>
   12bc4:	e000e100 	.word	0xe000e100
   12bc8:	00014c55 	.word	0x00014c55
   12bcc:	20003aa4 	.word	0x20003aa4
   12bd0:	000159c3 	.word	0x000159c3
   12bd4:	00015a12 	.word	0x00015a12
   12bd8:	00018347 	.word	0x00018347
   12bdc:	00015962 	.word	0x00015962

00012be0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12be0:	2803      	cmp	r0, #3
{
   12be2:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   12be4:	d90f      	bls.n	12c06 <hal_ticker_instance0_caller_id_get+0x26>
   12be6:	4b0f      	ldr	r3, [pc, #60]	; (12c24 <hal_ticker_instance0_caller_id_get+0x44>)
   12be8:	9301      	str	r3, [sp, #4]
   12bea:	9300      	str	r3, [sp, #0]
   12bec:	4b0e      	ldr	r3, [pc, #56]	; (12c28 <hal_ticker_instance0_caller_id_get+0x48>)
   12bee:	4a0f      	ldr	r2, [pc, #60]	; (12c2c <hal_ticker_instance0_caller_id_get+0x4c>)
   12bf0:	681c      	ldr	r4, [r3, #0]
   12bf2:	490f      	ldr	r1, [pc, #60]	; (12c30 <hal_ticker_instance0_caller_id_get+0x50>)
   12bf4:	4b0f      	ldr	r3, [pc, #60]	; (12c34 <hal_ticker_instance0_caller_id_get+0x54>)
   12bf6:	4810      	ldr	r0, [pc, #64]	; (12c38 <hal_ticker_instance0_caller_id_get+0x58>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12bf8:	47a0      	blx	r4
   12bfa:	4040      	eors	r0, r0
   12bfc:	f380 8811 	msr	BASEPRI, r0
   12c00:	f04f 0004 	mov.w	r0, #4
   12c04:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   12c06:	4b0d      	ldr	r3, [pc, #52]	; (12c3c <hal_ticker_instance0_caller_id_get+0x5c>)
   12c08:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   12c0a:	b948      	cbnz	r0, 12c20 <hal_ticker_instance0_caller_id_get+0x40>
   12c0c:	4b05      	ldr	r3, [pc, #20]	; (12c24 <hal_ticker_instance0_caller_id_get+0x44>)
   12c0e:	9301      	str	r3, [sp, #4]
   12c10:	9300      	str	r3, [sp, #0]
   12c12:	4b05      	ldr	r3, [pc, #20]	; (12c28 <hal_ticker_instance0_caller_id_get+0x48>)
   12c14:	4a05      	ldr	r2, [pc, #20]	; (12c2c <hal_ticker_instance0_caller_id_get+0x4c>)
   12c16:	681c      	ldr	r4, [r3, #0]
   12c18:	4905      	ldr	r1, [pc, #20]	; (12c30 <hal_ticker_instance0_caller_id_get+0x50>)
   12c1a:	4b06      	ldr	r3, [pc, #24]	; (12c34 <hal_ticker_instance0_caller_id_get+0x54>)
   12c1c:	4808      	ldr	r0, [pc, #32]	; (12c40 <hal_ticker_instance0_caller_id_get+0x60>)
   12c1e:	e7eb      	b.n	12bf8 <hal_ticker_instance0_caller_id_get+0x18>

	return caller_id;
}
   12c20:	b002      	add	sp, #8
   12c22:	bd10      	pop	{r4, pc}
   12c24:	00014c55 	.word	0x00014c55
   12c28:	20003aa4 	.word	0x20003aa4
   12c2c:	000159c3 	.word	0x000159c3
   12c30:	00015a12 	.word	0x00015a12
   12c34:	00018383 	.word	0x00018383
   12c38:	000183c5 	.word	0x000183c5
   12c3c:	000183c1 	.word	0x000183c1
   12c40:	00018406 	.word	0x00018406

00012c44 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   12c44:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   12c46:	3802      	subs	r0, #2
{
   12c48:	461c      	mov	r4, r3
	switch (caller_id) {
   12c4a:	2803      	cmp	r0, #3
   12c4c:	d818      	bhi.n	12c80 <hal_ticker_instance0_sched+0x3c>
   12c4e:	e8df f000 	tbb	[pc, r0]
   12c52:	0d02      	.short	0x0d02
   12c54:	3013      	.short	0x3013
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   12c56:	2903      	cmp	r1, #3
   12c58:	d112      	bne.n	12c80 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   12c5a:	4b19      	ldr	r3, [pc, #100]	; (12cc0 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   12c5c:	2100      	movs	r1, #0
			m.param = instance;
   12c5e:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12c60:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   12c62:	b002      	add	sp, #8
   12c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12c68:	f7f4 b998 	b.w	6f9c <mayfly_enqueue>
		switch (callee_id) {
   12c6c:	2904      	cmp	r1, #4
   12c6e:	d107      	bne.n	12c80 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12c70:	4b14      	ldr	r3, [pc, #80]	; (12cc4 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   12c72:	2101      	movs	r1, #1
			m.param = instance;
   12c74:	609c      	str	r4, [r3, #8]
   12c76:	e7f3      	b.n	12c60 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   12c78:	2903      	cmp	r1, #3
   12c7a:	d011      	beq.n	12ca0 <hal_ticker_instance0_sched+0x5c>
   12c7c:	2904      	cmp	r1, #4
   12c7e:	d014      	beq.n	12caa <hal_ticker_instance0_sched+0x66>
		LL_ASSERT(0);
   12c80:	4b11      	ldr	r3, [pc, #68]	; (12cc8 <hal_ticker_instance0_sched+0x84>)
   12c82:	9301      	str	r3, [sp, #4]
   12c84:	9300      	str	r3, [sp, #0]
   12c86:	4b11      	ldr	r3, [pc, #68]	; (12ccc <hal_ticker_instance0_sched+0x88>)
   12c88:	4a11      	ldr	r2, [pc, #68]	; (12cd0 <hal_ticker_instance0_sched+0x8c>)
   12c8a:	681c      	ldr	r4, [r3, #0]
   12c8c:	4911      	ldr	r1, [pc, #68]	; (12cd4 <hal_ticker_instance0_sched+0x90>)
   12c8e:	4b12      	ldr	r3, [pc, #72]	; (12cd8 <hal_ticker_instance0_sched+0x94>)
   12c90:	4812      	ldr	r0, [pc, #72]	; (12cdc <hal_ticker_instance0_sched+0x98>)
   12c92:	47a0      	blx	r4
   12c94:	4040      	eors	r0, r0
   12c96:	f380 8811 	msr	BASEPRI, r0
   12c9a:	f04f 0004 	mov.w	r0, #4
   12c9e:	df02      	svc	2
			m.param = instance;
   12ca0:	4b0f      	ldr	r3, [pc, #60]	; (12ce0 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12ca2:	2100      	movs	r1, #0
			m.param = instance;
   12ca4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12ca6:	2001      	movs	r0, #1
   12ca8:	e7db      	b.n	12c62 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   12caa:	4b0e      	ldr	r3, [pc, #56]	; (12ce4 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   12cac:	2101      	movs	r1, #1
			m.param = instance;
   12cae:	609c      	str	r4, [r3, #8]
   12cb0:	e7f9      	b.n	12ca6 <hal_ticker_instance0_sched+0x62>
		switch (callee_id) {
   12cb2:	2904      	cmp	r1, #4
   12cb4:	d1e4      	bne.n	12c80 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   12cb6:	4b0c      	ldr	r3, [pc, #48]	; (12ce8 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12cb8:	2101      	movs	r1, #1
			m.param = instance;
   12cba:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   12cbc:	2003      	movs	r0, #3
   12cbe:	e7d0      	b.n	12c62 <hal_ticker_instance0_sched+0x1e>
   12cc0:	20003e68 	.word	0x20003e68
   12cc4:	20003e78 	.word	0x20003e78
   12cc8:	00014c55 	.word	0x00014c55
   12ccc:	20003aa4 	.word	0x20003aa4
   12cd0:	000159c3 	.word	0x000159c3
   12cd4:	00015a12 	.word	0x00015a12
   12cd8:	000183a6 	.word	0x000183a6
   12cdc:	00015962 	.word	0x00015962
   12ce0:	20003e88 	.word	0x20003e88
   12ce4:	20003e98 	.word	0x20003e98
   12ce8:	20003ea8 	.word	0x20003ea8

00012cec <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   12cec:	4601      	mov	r1, r0
   12cee:	2000      	movs	r0, #0
   12cf0:	f7ff ba54 	b.w	1219c <cntr_cmp_set>

00012cf4 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   12cf4:	4770      	bx	lr
	...

00012cf8 <net_buf_pool_get>:
}
   12cf8:	4b02      	ldr	r3, [pc, #8]	; (12d04 <net_buf_pool_get+0xc>)
   12cfa:	2224      	movs	r2, #36	; 0x24
   12cfc:	fb02 3000 	mla	r0, r2, r0, r3
   12d00:	4770      	bx	lr
   12d02:	bf00      	nop
   12d04:	20003fa8 	.word	0x20003fa8

00012d08 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12d08:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   12d0a:	4a05      	ldr	r2, [pc, #20]	; (12d20 <net_buf_id+0x18>)
   12d0c:	2124      	movs	r1, #36	; 0x24
   12d0e:	fb01 2303 	mla	r3, r1, r3, r2
   12d12:	6a1b      	ldr	r3, [r3, #32]
   12d14:	1ac0      	subs	r0, r0, r3
}
   12d16:	4b03      	ldr	r3, [pc, #12]	; (12d24 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   12d18:	10c0      	asrs	r0, r0, #3
}
   12d1a:	4358      	muls	r0, r3
   12d1c:	4770      	bx	lr
   12d1e:	bf00      	nop
   12d20:	20003fa8 	.word	0x20003fa8
   12d24:	aaaaaaab 	.word	0xaaaaaaab

00012d28 <fixed_data_alloc>:
{
   12d28:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12d2a:	4a0a      	ldr	r2, [pc, #40]	; (12d54 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12d2c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12d2e:	2424      	movs	r4, #36	; 0x24
   12d30:	fb04 2303 	mla	r3, r4, r3, r2
	*size = min(fixed->data_size, *size);
   12d34:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12d36:	69db      	ldr	r3, [r3, #28]
   12d38:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   12d3a:	6823      	ldr	r3, [r4, #0]
   12d3c:	429a      	cmp	r2, r3
   12d3e:	bf94      	ite	ls
   12d40:	600a      	strls	r2, [r1, #0]
   12d42:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   12d44:	f7ff ffe0 	bl	12d08 <net_buf_id>
   12d48:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   12d4c:	fb02 3000 	mla	r0, r2, r0, r3
   12d50:	bd10      	pop	{r4, pc}
   12d52:	bf00      	nop
   12d54:	20003fa8 	.word	0x20003fa8

00012d58 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   12d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12d5c:	4605      	mov	r5, r0
   12d5e:	9101      	str	r1, [sp, #4]
   12d60:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12d62:	f001 f9dd 	bl	14120 <_impl_k_uptime_get_32>
   12d66:	4607      	mov	r7, r0
	__asm__ volatile(
   12d68:	f04f 0320 	mov.w	r3, #32
   12d6c:	f3ef 8811 	mrs	r8, BASEPRI
   12d70:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   12d74:	8aeb      	ldrh	r3, [r5, #22]
   12d76:	2b00      	cmp	r3, #0
   12d78:	d042      	beq.n	12e00 <net_buf_alloc_len+0xa8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   12d7a:	8aaa      	ldrh	r2, [r5, #20]
   12d7c:	429a      	cmp	r2, r3
   12d7e:	d92d      	bls.n	12ddc <net_buf_alloc_len+0x84>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12d80:	2100      	movs	r1, #0
   12d82:	4628      	mov	r0, r5
   12d84:	f000 febe 	bl	13b04 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   12d88:	b340      	cbz	r0, 12ddc <net_buf_alloc_len+0x84>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   12d8a:	f388 8811 	msr	BASEPRI, r8
   12d8e:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   12d90:	9b01      	ldr	r3, [sp, #4]
   12d92:	2b00      	cmp	r3, #0
   12d94:	d041      	beq.n	12e1a <net_buf_alloc_len+0xc2>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   12d96:	1c73      	adds	r3, r6, #1
   12d98:	2b01      	cmp	r3, #1
   12d9a:	d906      	bls.n	12daa <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   12d9c:	f001 f9c0 	bl	14120 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   12da0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   12da2:	42b0      	cmp	r0, r6
   12da4:	bf94      	ite	ls
   12da6:	1a36      	subls	r6, r6, r0
   12da8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12daa:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   12dac:	4f21      	ldr	r7, [pc, #132]	; (12e34 <net_buf_alloc_len+0xdc>)
   12dae:	2224      	movs	r2, #36	; 0x24
   12db0:	fb02 7303 	mla	r3, r2, r3, r7
   12db4:	a901      	add	r1, sp, #4
   12db6:	69db      	ldr	r3, [r3, #28]
   12db8:	681b      	ldr	r3, [r3, #0]
   12dba:	4632      	mov	r2, r6
   12dbc:	681b      	ldr	r3, [r3, #0]
   12dbe:	4620      	mov	r0, r4
   12dc0:	4798      	blx	r3
   12dc2:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   12dc4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   12dc6:	bb48      	cbnz	r0, 12e1c <net_buf_alloc_len+0xc4>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   12dc8:	79a0      	ldrb	r0, [r4, #6]
   12dca:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   12dce:	4621      	mov	r1, r4
   12dd0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   12dd4:	f000 fe77 	bl	13ac6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   12dd8:	462c      	mov	r4, r5
   12dda:	e01a      	b.n	12e12 <net_buf_alloc_len+0xba>
		uninit_count = pool->uninit_count--;
   12ddc:	8ae8      	ldrh	r0, [r5, #22]
   12dde:	1e43      	subs	r3, r0, #1
   12de0:	82eb      	strh	r3, [r5, #22]
   12de2:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   12de6:	8aac      	ldrh	r4, [r5, #20]
   12de8:	1a24      	subs	r4, r4, r0
   12dea:	6a28      	ldr	r0, [r5, #32]
   12dec:	2318      	movs	r3, #24
   12dee:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   12df2:	4b10      	ldr	r3, [pc, #64]	; (12e34 <net_buf_alloc_len+0xdc>)
   12df4:	1aed      	subs	r5, r5, r3
   12df6:	4b10      	ldr	r3, [pc, #64]	; (12e38 <net_buf_alloc_len+0xe0>)
   12df8:	10ad      	asrs	r5, r5, #2
   12dfa:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   12dfc:	71a5      	strb	r5, [r4, #6]
		goto success;
   12dfe:	e7c7      	b.n	12d90 <net_buf_alloc_len+0x38>
   12e00:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   12e04:	4631      	mov	r1, r6
   12e06:	4628      	mov	r0, r5
   12e08:	f000 fe7c 	bl	13b04 <_impl_k_queue_get>
		return NULL;
   12e0c:	4604      	mov	r4, r0
	if (!buf) {
   12e0e:	2800      	cmp	r0, #0
   12e10:	d1be      	bne.n	12d90 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   12e12:	4620      	mov	r0, r4
   12e14:	b002      	add	sp, #8
   12e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   12e1a:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   12e1c:	2301      	movs	r3, #1
   12e1e:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   12e20:	2300      	movs	r3, #0
	buf->frags = NULL;
   12e22:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   12e24:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   12e26:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   12e28:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   12e2a:	6923      	ldr	r3, [r4, #16]
   12e2c:	81e2      	strh	r2, [r4, #14]
   12e2e:	60a3      	str	r3, [r4, #8]
	return buf;
   12e30:	e7ef      	b.n	12e12 <net_buf_alloc_len+0xba>
   12e32:	bf00      	nop
   12e34:	20003fa8 	.word	0x20003fa8
   12e38:	38e38e39 	.word	0x38e38e39

00012e3c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   12e3c:	69c3      	ldr	r3, [r0, #28]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   12e3e:	685b      	ldr	r3, [r3, #4]
   12e40:	460a      	mov	r2, r1
   12e42:	6819      	ldr	r1, [r3, #0]
   12e44:	f7ff bf88 	b.w	12d58 <net_buf_alloc_len>

00012e48 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12e48:	b570      	push	{r4, r5, r6, lr}
   12e4a:	4606      	mov	r6, r0
   12e4c:	f000 fe5a 	bl	13b04 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   12e50:	4605      	mov	r5, r0
   12e52:	b128      	cbz	r0, 12e60 <net_buf_get+0x18>
   12e54:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12e56:	7963      	ldrb	r3, [r4, #5]
   12e58:	f013 0301 	ands.w	r3, r3, #1
   12e5c:	d102      	bne.n	12e64 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12e5e:	6023      	str	r3, [r4, #0]

	return buf;
}
   12e60:	4628      	mov	r0, r5
   12e62:	bd70      	pop	{r4, r5, r6, pc}
   12e64:	2100      	movs	r1, #0
   12e66:	4630      	mov	r0, r6
   12e68:	f000 fe4c 	bl	13b04 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   12e6c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12e6e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   12e70:	f023 0301 	bic.w	r3, r3, #1
   12e74:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12e76:	4604      	mov	r4, r0
   12e78:	e7ed      	b.n	12e56 <net_buf_get+0xe>

00012e7a <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12e7a:	6883      	ldr	r3, [r0, #8]
   12e7c:	4419      	add	r1, r3
   12e7e:	6001      	str	r1, [r0, #0]
   12e80:	4770      	bx	lr

00012e82 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   12e82:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   12e84:	460a      	mov	r2, r1
   12e86:	6814      	ldr	r4, [r2, #0]
   12e88:	b914      	cbnz	r4, 12e90 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   12e8a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   12e8c:	f000 be20 	b.w	13ad0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   12e90:	7953      	ldrb	r3, [r2, #5]
   12e92:	f043 0301 	orr.w	r3, r3, #1
   12e96:	7153      	strb	r3, [r2, #5]
   12e98:	4622      	mov	r2, r4
   12e9a:	e7f4      	b.n	12e86 <net_buf_put+0x4>

00012e9c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   12e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ea0:	4d17      	ldr	r5, [pc, #92]	; (12f00 <net_buf_unref+0x64>)
   12ea2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   12ea4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   12ea6:	2724      	movs	r7, #36	; 0x24
	while (buf) {
   12ea8:	b90c      	cbnz	r4, 12eae <net_buf_unref+0x12>
   12eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   12eae:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   12eb0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   12eb4:	3b01      	subs	r3, #1
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	7123      	strb	r3, [r4, #4]
   12eba:	2b00      	cmp	r3, #0
   12ebc:	d1f5      	bne.n	12eaa <net_buf_unref+0xe>
		if (buf->__buf) {
   12ebe:	6921      	ldr	r1, [r4, #16]
   12ec0:	b159      	cbz	r1, 12eda <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   12ec2:	7963      	ldrb	r3, [r4, #5]
   12ec4:	079b      	lsls	r3, r3, #30
   12ec6:	d407      	bmi.n	12ed8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12ec8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   12eca:	fb07 5303 	mla	r3, r7, r3, r5
   12ece:	4620      	mov	r0, r4
   12ed0:	69db      	ldr	r3, [r3, #28]
   12ed2:	681b      	ldr	r3, [r3, #0]
   12ed4:	689b      	ldr	r3, [r3, #8]
   12ed6:	4798      	blx	r3
			buf->__buf = NULL;
   12ed8:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   12eda:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   12edc:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   12ede:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   12ee2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   12ee4:	699b      	ldr	r3, [r3, #24]
   12ee6:	b11b      	cbz	r3, 12ef0 <net_buf_unref+0x54>
			pool->destroy(buf);
   12ee8:	4620      	mov	r0, r4
   12eea:	4798      	blx	r3
{
   12eec:	4644      	mov	r4, r8
   12eee:	e7db      	b.n	12ea8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   12ef0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   12ef4:	4621      	mov	r1, r4
   12ef6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   12efa:	f000 fde4 	bl	13ac6 <k_queue_prepend>
   12efe:	e7f5      	b.n	12eec <net_buf_unref+0x50>
   12f00:	20003fa8 	.word	0x20003fa8

00012f04 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   12f04:	7903      	ldrb	r3, [r0, #4]
   12f06:	3301      	adds	r3, #1
   12f08:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12f0a:	4770      	bx	lr

00012f0c <net_buf_simple_add>:
	return buf->data + buf->len;
   12f0c:	8883      	ldrh	r3, [r0, #4]
   12f0e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12f10:	4419      	add	r1, r3
   12f12:	8081      	strh	r1, [r0, #4]
	return tail;
}
   12f14:	18d0      	adds	r0, r2, r3
   12f16:	4770      	bx	lr

00012f18 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12f18:	b430      	push	{r4, r5}
   12f1a:	8883      	ldrh	r3, [r0, #4]
   12f1c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   12f1e:	189d      	adds	r5, r3, r2
   12f20:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12f22:	18e0      	adds	r0, r4, r3
}
   12f24:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12f26:	f7ee be7b 	b.w	1c20 <memcpy>

00012f2a <net_buf_simple_add_u8>:
   12f2a:	8883      	ldrh	r3, [r0, #4]
   12f2c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   12f2e:	b510      	push	{r4, lr}
	buf->len += len;
   12f30:	1c5c      	adds	r4, r3, #1
   12f32:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12f34:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   12f36:	18d0      	adds	r0, r2, r3
   12f38:	bd10      	pop	{r4, pc}

00012f3a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12f3a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12f3c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   12f3e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   12f40:	4411      	add	r1, r2
	buf->data -= len;
   12f42:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12f44:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12f46:	4618      	mov	r0, r3
   12f48:	4770      	bx	lr

00012f4a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12f4a:	8883      	ldrh	r3, [r0, #4]
   12f4c:	1a5b      	subs	r3, r3, r1
   12f4e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   12f50:	6803      	ldr	r3, [r0, #0]
   12f52:	4419      	add	r1, r3
   12f54:	6001      	str	r1, [r0, #0]
}
   12f56:	4608      	mov	r0, r1
   12f58:	4770      	bx	lr

00012f5a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12f5a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   12f5c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   12f5e:	2101      	movs	r1, #1
	val = buf->data[0];
   12f60:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   12f62:	f7ff fff2 	bl	12f4a <net_buf_simple_pull>

	return val;
}
   12f66:	4610      	mov	r0, r2
   12f68:	bd08      	pop	{r3, pc}

00012f6a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12f6a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12f6c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12f6e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   12f70:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   12f72:	f7ff ffea 	bl	12f4a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12f76:	4610      	mov	r0, r2
   12f78:	bd08      	pop	{r3, pc}

00012f7a <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12f7a:	6802      	ldr	r2, [r0, #0]
   12f7c:	6880      	ldr	r0, [r0, #8]
}
   12f7e:	1a10      	subs	r0, r2, r0
   12f80:	4770      	bx	lr

00012f82 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   12f82:	6802      	ldr	r2, [r0, #0]
   12f84:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12f86:	88c3      	ldrh	r3, [r0, #6]
   12f88:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   12f8a:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12f8c:	1a9b      	subs	r3, r3, r2
}
   12f8e:	1a18      	subs	r0, r3, r0
   12f90:	4770      	bx	lr

00012f92 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12f92:	6800      	ldr	r0, [r0, #0]
   12f94:	6880      	ldr	r0, [r0, #8]
   12f96:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12f98:	b941      	cbnz	r1, 12fac <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
   12f9a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
   12f9e:	fa21 f202 	lsr.w	r2, r1, r2
   12fa2:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
   12fa6:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
   12fa8:	2000      	movs	r0, #0
   12faa:	4770      	bx	lr
		*value = gpio->IN;
   12fac:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   12fb0:	e7f9      	b.n	12fa6 <gpio_nrf5_read+0x14>

00012fb2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   12fb2:	6800      	ldr	r0, [r0, #0]
   12fb4:	6880      	ldr	r0, [r0, #8]
   12fb6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
   12fb8:	b949      	cbnz	r1, 12fce <gpio_nrf5_write+0x1c>
   12fba:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
   12fbc:	4091      	lsls	r1, r2
		if (value) { /* 1 */
   12fbe:	b11b      	cbz	r3, 12fc8 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
   12fc0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
   12fc4:	2000      	movs	r0, #0
   12fc6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
   12fc8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
   12fcc:	e7fa      	b.n	12fc4 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
   12fce:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
   12fd2:	e7f7      	b.n	12fc4 <gpio_nrf5_write+0x12>

00012fd4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   12fd4:	6883      	ldr	r3, [r0, #8]
   12fd6:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
   12fd8:	b172      	cbz	r2, 12ff8 <gpio_nrf5_manage_callback+0x24>
	parent->next = child;
   12fda:	6008      	str	r0, [r1, #0]
Z_GENLIST_PREPEND(slist, snode);
   12fdc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   12fde:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
   12fe0:	b902      	cbnz	r2, 12fe4 <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
   12fe2:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
   12fe4:	2000      	movs	r0, #0
   12fe6:	4770      	bx	lr
	parent->next = child;
   12fe8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode);
   12fea:	6858      	ldr	r0, [r3, #4]
   12fec:	4281      	cmp	r1, r0
	list->tail = node;
   12fee:	bf08      	it	eq
   12ff0:	605a      	streq	r2, [r3, #4]
   12ff2:	e00d      	b.n	13010 <gpio_nrf5_manage_callback+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode);
   12ff4:	4602      	mov	r2, r0
   12ff6:	6800      	ldr	r0, [r0, #0]
   12ff8:	2800      	cmp	r0, #0
   12ffa:	d0f3      	beq.n	12fe4 <gpio_nrf5_manage_callback+0x10>
   12ffc:	4281      	cmp	r1, r0
   12ffe:	d1f9      	bne.n	12ff4 <gpio_nrf5_manage_callback+0x20>
   13000:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
   13002:	2a00      	cmp	r2, #0
   13004:	d1f0      	bne.n	12fe8 <gpio_nrf5_manage_callback+0x14>
   13006:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   13008:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
   1300a:	4291      	cmp	r1, r2
   1300c:	d100      	bne.n	13010 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
   1300e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   13010:	2300      	movs	r3, #0
   13012:	600b      	str	r3, [r1, #0]
   13014:	e7e6      	b.n	12fe4 <gpio_nrf5_manage_callback+0x10>
	...

00013018 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
   13018:	4b0c      	ldr	r3, [pc, #48]	; (1304c <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
   1301a:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1301c:	4d0c      	ldr	r5, [pc, #48]	; (13050 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
   1301e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13020:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
   13022:	fa24 f203 	lsr.w	r2, r4, r3
   13026:	07d2      	lsls	r2, r2, #31
   13028:	d508      	bpl.n	1303c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1302a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1302e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   13032:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
   13036:	4282      	cmp	r2, r0
   13038:	d100      	bne.n	1303c <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
   1303a:	b121      	cbz	r1, 13046 <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1303c:	3301      	adds	r3, #1
   1303e:	2b08      	cmp	r3, #8
   13040:	d1ef      	bne.n	13022 <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
   13042:	f06f 0312 	mvn.w	r3, #18
}
   13046:	4618      	mov	r0, r3
   13048:	bd30      	pop	{r4, r5, pc}
   1304a:	bf00      	nop
   1304c:	20001724 	.word	0x20001724
   13050:	40006000 	.word	0x40006000

00013054 <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
   13054:	b570      	push	{r4, r5, r6, lr}
   13056:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   13058:	460d      	mov	r5, r1
   1305a:	b9c9      	cbnz	r1, 13090 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   1305c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   1305e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   13060:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   13062:	4610      	mov	r0, r2
   13064:	7919      	ldrb	r1, [r3, #4]
   13066:	f7ff ffd7 	bl	13018 <gpiote_find_channel.isra.4>
		if (i < 0) {
   1306a:	2800      	cmp	r0, #0
   1306c:	db12      	blt.n	13094 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
   1306e:	68b2      	ldr	r2, [r6, #8]
   13070:	2301      	movs	r3, #1
   13072:	fa03 f404 	lsl.w	r4, r3, r4
   13076:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
   13078:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1307c:	4a06      	ldr	r2, [pc, #24]	; (13098 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
   1307e:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
   13080:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
   13084:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
   13088:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
   1308c:	4628      	mov	r0, r5
   1308e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   13090:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   13094:	bd70      	pop	{r4, r5, r6, pc}
   13096:	bf00      	nop
   13098:	40006000 	.word	0x40006000

0001309c <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
   1309c:	b570      	push	{r4, r5, r6, lr}
   1309e:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
   130a0:	460d      	mov	r5, r1
   130a2:	b9b1      	cbnz	r1, 130d2 <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
   130a4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
   130a6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
   130a8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
   130aa:	4610      	mov	r0, r2
   130ac:	7919      	ldrb	r1, [r3, #4]
   130ae:	f7ff ffb3 	bl	13018 <gpiote_find_channel.isra.4>
		if (i < 0) {
   130b2:	2800      	cmp	r0, #0
   130b4:	db0f      	blt.n	130d6 <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
   130b6:	68b2      	ldr	r2, [r6, #8]
   130b8:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
   130ba:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
   130be:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
   130c2:	4b05      	ldr	r3, [pc, #20]	; (130d8 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
   130c4:	ea22 0404 	bic.w	r4, r2, r4
   130c8:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
   130ca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
   130ce:	4628      	mov	r0, r5
   130d0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   130d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   130d6:	bd70      	pop	{r4, r5, r6, pc}
   130d8:	40006000 	.word	0x40006000

000130dc <gpio_nrf5_config>:
{
   130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   130e0:	6806      	ldr	r6, [r0, #0]
{
   130e2:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
   130e4:	68b2      	ldr	r2, [r6, #8]
   130e6:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
   130e8:	b119      	cbz	r1, 130f2 <gpio_nrf5_config+0x16>
		return -ENOTSUP;
   130ea:	f06f 0022 	mvn.w	r0, #34	; 0x22
   130ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   130f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
   130f6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
   130fa:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
   130fe:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
   13102:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   13106:	d058      	beq.n	131ba <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
   13108:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1310c:	bf0c      	ite	eq
   1310e:	2204      	moveq	r2, #4
   13110:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
   13112:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   13116:	bf08      	it	eq
   13118:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
   1311a:	f013 0f01 	tst.w	r3, #1
   1311e:	ea4f 0180 	mov.w	r1, r0, lsl #2
   13122:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 131f0 <gpio_nrf5_config+0x114>
   13126:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   1312a:	d04f      	beq.n	131cc <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
   1312c:	2a0c      	cmp	r2, #12
   1312e:	d146      	bne.n	131be <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
   13130:	2701      	movs	r7, #1
   13132:	40a7      	lsls	r7, r4
   13134:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
   13138:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
   1313a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   1313e:	f041 0103 	orr.w	r1, r1, #3
   13142:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
   13144:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
   13148:	f013 0002 	ands.w	r0, r3, #2
   1314c:	d049      	beq.n	131e2 <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
   1314e:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
   13150:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
   13152:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
   13156:	d5c8      	bpl.n	130ea <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
   13158:	065a      	lsls	r2, r3, #25
   1315a:	d43d      	bmi.n	131d8 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
   1315c:	f013 0f04 	tst.w	r3, #4
   13160:	bf14      	ite	ne
   13162:	f44f 3580 	movne.w	r5, #65536	; 0x10000
   13166:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
   1316a:	4e1f      	ldr	r6, [pc, #124]	; (131e8 <gpio_nrf5_config+0x10c>)
   1316c:	6837      	ldr	r7, [r6, #0]
   1316e:	4638      	mov	r0, r7
   13170:	f7ed f868 	bl	244 <__popcountsi2>
   13174:	2808      	cmp	r0, #8
   13176:	d032      	beq.n	131de <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
   13178:	4641      	mov	r1, r8
   1317a:	4620      	mov	r0, r4
   1317c:	f7ff ff4c 	bl	13018 <gpiote_find_channel.isra.4>
		if (i < 0) {
   13180:	2800      	cmp	r0, #0
   13182:	da08      	bge.n	13196 <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
   13184:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
   13186:	fa93 f0a3 	rbit	r0, r3
   1318a:	2b00      	cmp	r3, #0
   1318c:	fab0 f080 	clz	r0, r0
   13190:	bf08      	it	eq
   13192:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
   13196:	2301      	movs	r3, #1
   13198:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
   1319a:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
   1319c:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
   1319e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
   131a2:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
   131a4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   131a8:	4b10      	ldr	r3, [pc, #64]	; (131ec <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
   131aa:	f044 0401 	orr.w	r4, r4, #1
   131ae:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
   131b0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
   131b4:	2000      	movs	r0, #0
   131b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
   131ba:	220c      	movs	r2, #12
   131bc:	e7a9      	b.n	13112 <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
   131be:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
   131c0:	bf02      	ittt	eq
   131c2:	2701      	moveq	r7, #1
   131c4:	40a7      	lsleq	r7, r4
   131c6:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
   131ca:	e7b5      	b.n	13138 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
   131cc:	4461      	add	r1, ip
   131ce:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   131d2:	430a      	orrs	r2, r1
   131d4:	433a      	orrs	r2, r7
   131d6:	e7b5      	b.n	13144 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
   131d8:	f44f 3540 	mov.w	r5, #196608	; 0x30000
   131dc:	e7c5      	b.n	1316a <gpio_nrf5_config+0x8e>
			return -EIO;
   131de:	f06f 0004 	mvn.w	r0, #4
}
   131e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131e6:	bf00      	nop
   131e8:	20001724 	.word	0x20001724
   131ec:	40006000 	.word	0x40006000
   131f0:	00018444 	.word	0x00018444

000131f4 <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
   131f4:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
   131f6:	2200      	movs	r2, #0
   131f8:	2105      	movs	r1, #5
   131fa:	2006      	movs	r0, #6
   131fc:	f7ee fb64 	bl	18c8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
   13200:	2006      	movs	r0, #6
   13202:	f7ee fb2f 	bl	1864 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
   13206:	2000      	movs	r0, #0
   13208:	bd08      	pop	{r3, pc}
	...

0001320c <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   1320c:	2100      	movs	r1, #0
{
   1320e:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
   13210:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
   13212:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
   13214:	2501      	movs	r5, #1
   13216:	008b      	lsls	r3, r1, #2
   13218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1321c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
   13220:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
   13224:	b140      	cbz	r0, 13238 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   13226:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
   1322a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
   1322e:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
   13232:	fa05 f303 	lsl.w	r3, r5, r3
   13236:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
   13238:	3101      	adds	r1, #1
   1323a:	2908      	cmp	r1, #8
   1323c:	d1eb      	bne.n	13216 <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
   1323e:	4e08      	ldr	r6, [pc, #32]	; (13260 <gpio_nrf5_port_isr+0x54>)
   13240:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
   13242:	689d      	ldr	r5, [r3, #8]
   13244:	681c      	ldr	r4, [r3, #0]
   13246:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
   13248:	b14c      	cbz	r4, 1325e <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
   1324a:	68a3      	ldr	r3, [r4, #8]
   1324c:	421d      	tst	r5, r3
   1324e:	d004      	beq.n	1325a <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
   13250:	6863      	ldr	r3, [r4, #4]
   13252:	462a      	mov	r2, r5
   13254:	4621      	mov	r1, r4
   13256:	4630      	mov	r0, r6
   13258:	4798      	blx	r3
	return node->next;
   1325a:	6824      	ldr	r4, [r4, #0]
   1325c:	e7f4      	b.n	13248 <gpio_nrf5_port_isr+0x3c>
   1325e:	bd70      	pop	{r4, r5, r6, pc}
   13260:	20003f48 	.word	0x20003f48

00013264 <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13264:	4b03      	ldr	r3, [pc, #12]	; (13274 <uart_nrfx_err_check+0x10>)
   13266:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
   13268:	b118      	cbz	r0, 13272 <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1326a:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
   1326e:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
   13272:	4770      	bx	lr
   13274:	40002124 	.word	0x40002124

00013278 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13278:	4b07      	ldr	r3, [pc, #28]	; (13298 <uart_nrfx_poll_out+0x20>)
   1327a:	2200      	movs	r2, #0
   1327c:	601a      	str	r2, [r3, #0]
{
   1327e:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13280:	681a      	ldr	r2, [r3, #0]
   13282:	9201      	str	r2, [sp, #4]
    (void)dummy;
   13284:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
   13286:	4a05      	ldr	r2, [pc, #20]	; (1329c <uart_nrfx_poll_out+0x24>)
   13288:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1328c:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
   1328e:	2a00      	cmp	r2, #0
   13290:	d0fc      	beq.n	1328c <uart_nrfx_poll_out+0x14>
}
   13292:	4608      	mov	r0, r1
   13294:	b002      	add	sp, #8
   13296:	4770      	bx	lr
   13298:	4000211c 	.word	0x4000211c
   1329c:	40002000 	.word	0x40002000

000132a0 <uart_nrfx_poll_in>:
   132a0:	4b08      	ldr	r3, [pc, #32]	; (132c4 <uart_nrfx_poll_in+0x24>)
   132a2:	681a      	ldr	r2, [r3, #0]
{
   132a4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
   132a6:	b152      	cbz	r2, 132be <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132a8:	2000      	movs	r0, #0
   132aa:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   132ac:	681b      	ldr	r3, [r3, #0]
   132ae:	9301      	str	r3, [sp, #4]
    (void)dummy;
   132b0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   132b2:	4b05      	ldr	r3, [pc, #20]	; (132c8 <uart_nrfx_poll_in+0x28>)
   132b4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   132b8:	700b      	strb	r3, [r1, #0]
}
   132ba:	b002      	add	sp, #8
   132bc:	4770      	bx	lr
		return -1;
   132be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   132c2:	e7fa      	b.n	132ba <uart_nrfx_poll_in+0x1a>
   132c4:	40002108 	.word	0x40002108
   132c8:	40002000 	.word	0x40002000

000132cc <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   132cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
   132ce:	4819      	ldr	r0, [pc, #100]	; (13334 <uart_nrfx_init+0x68>)
   132d0:	f000 f98c 	bl	135ec <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
   132d4:	6843      	ldr	r3, [r0, #4]
   132d6:	4604      	mov	r4, r0
   132d8:	681d      	ldr	r5, [r3, #0]
   132da:	2206      	movs	r2, #6
   132dc:	f240 1301 	movw	r3, #257	; 0x101
   132e0:	2100      	movs	r1, #0
   132e2:	47a8      	blx	r5
   132e4:	6863      	ldr	r3, [r4, #4]
   132e6:	681d      	ldr	r5, [r3, #0]
   132e8:	2300      	movs	r3, #0
   132ea:	4619      	mov	r1, r3
   132ec:	2208      	movs	r2, #8
   132ee:	4620      	mov	r0, r4
   132f0:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
   132f2:	4b11      	ldr	r3, [pc, #68]	; (13338 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   132f4:	4911      	ldr	r1, [pc, #68]	; (1333c <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
   132f6:	2208      	movs	r2, #8
   132f8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   132fc:	2206      	movs	r2, #6
   132fe:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13302:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13304:	4a0e      	ldr	r2, [pc, #56]	; (13340 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   13306:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
   1330a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1330e:	2204      	movs	r2, #4
   13310:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13314:	4a0b      	ldr	r2, [pc, #44]	; (13344 <uart_nrfx_init+0x78>)
   13316:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13318:	6812      	ldr	r2, [r2, #0]
   1331a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1331c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1331e:	4a0a      	ldr	r2, [pc, #40]	; (13348 <uart_nrfx_init+0x7c>)
   13320:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   13322:	6812      	ldr	r2, [r2, #0]
   13324:	9200      	str	r2, [sp, #0]
    (void)dummy;
   13326:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13328:	2201      	movs	r2, #1
   1332a:	600a      	str	r2, [r1, #0]
   1332c:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
   1332e:	b003      	add	sp, #12
   13330:	bd30      	pop	{r4, r5, pc}
   13332:	bf00      	nop
   13334:	000184a8 	.word	0x000184a8
   13338:	40002000 	.word	0x40002000
   1333c:	40002008 	.word	0x40002008
   13340:	01d7e000 	.word	0x01d7e000
   13344:	4000211c 	.word	0x4000211c
   13348:	40002108 	.word	0x40002108

0001334c <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
   1334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
   13350:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
   13352:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
   13354:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
   13356:	42a3      	cmp	r3, r4
	d = &rand[octets];
   13358:	440a      	add	r2, r1
	s = &rng->rand[first];
   1335a:	4406      	add	r6, r0
	if (first <= last) {
   1335c:	d81f      	bhi.n	1339e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
   1335e:	1ae4      	subs	r4, r4, r3
   13360:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   13362:	42a1      	cmp	r1, r4
			remaining = avail - octets;
   13364:	bf3e      	ittt	cc
   13366:	1a64      	subcc	r4, r4, r1
   13368:	b2e7      	uxtbcc	r7, r4
   1336a:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
   1336c:	4423      	add	r3, r4
		octets -= avail;
   1336e:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
   13372:	bf28      	it	cs
   13374:	2700      	movcs	r7, #0
		first += avail;
   13376:	b2db      	uxtb	r3, r3
		octets -= avail;
   13378:	b2c9      	uxtb	r1, r1
   1337a:	4434      	add	r4, r6

		while (avail--) {
   1337c:	42a6      	cmp	r6, r4
   1337e:	d109      	bne.n	13394 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
   13380:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
   13382:	7843      	ldrb	r3, [r0, #1]
   13384:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
   13386:	bf82      	ittt	hi
   13388:	4b20      	ldrhi	r3, [pc, #128]	; (1340c <get+0xc0>)
   1338a:	2201      	movhi	r2, #1
   1338c:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
   1338e:	4608      	mov	r0, r1
   13390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   13394:	f816 5b01 	ldrb.w	r5, [r6], #1
   13398:	f802 5d01 	strb.w	r5, [r2, #-1]!
   1339c:	e7ee      	b.n	1337c <get+0x30>
		avail = rng->count - first;
   1339e:	7805      	ldrb	r5, [r0, #0]
   133a0:	1aed      	subs	r5, r5, r3
   133a2:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   133a4:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
   133a6:	bf3f      	itttt	cc
   133a8:	1a67      	subcc	r7, r4, r1
   133aa:	19ed      	addcc	r5, r5, r7
   133ac:	b2ef      	uxtbcc	r7, r5
   133ae:	460d      	movcc	r5, r1
			first += avail;
   133b0:	bf38      	it	cc
   133b2:	185b      	addcc	r3, r3, r1
		octets -= avail;
   133b4:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
   133b8:	bf32      	itee	cc
   133ba:	b2db      	uxtbcc	r3, r3
   133bc:	4627      	movcs	r7, r4
			first = 0;
   133be:	2300      	movcs	r3, #0
		octets -= avail;
   133c0:	b2c9      	uxtb	r1, r1
   133c2:	4696      	mov	lr, r2
   133c4:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
   133c8:	4566      	cmp	r6, ip
   133ca:	d119      	bne.n	13400 <get+0xb4>
   133cc:	1b52      	subs	r2, r2, r5
		if (octets && last) {
   133ce:	2900      	cmp	r1, #0
   133d0:	d0d6      	beq.n	13380 <get+0x34>
   133d2:	2c00      	cmp	r4, #0
   133d4:	d0d4      	beq.n	13380 <get+0x34>
			if (octets < last) {
   133d6:	428c      	cmp	r4, r1
   133d8:	bf8a      	itet	hi
   133da:	460b      	movhi	r3, r1
   133dc:	4623      	movls	r3, r4
				remaining = last - octets;
   133de:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
   133e0:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
   133e4:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
   133e8:	bf8c      	ite	hi
   133ea:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
   133ec:	2700      	movls	r7, #0
			octets -= last;
   133ee:	b2c9      	uxtb	r1, r1
   133f0:	18f4      	adds	r4, r6, r3
			while (last--) {
   133f2:	42a6      	cmp	r6, r4
   133f4:	d0c4      	beq.n	13380 <get+0x34>
				*(--d) = *s++;
   133f6:	f816 5b01 	ldrb.w	r5, [r6], #1
   133fa:	f802 5d01 	strb.w	r5, [r2, #-1]!
   133fe:	e7f8      	b.n	133f2 <get+0xa6>
			*(--d) = *s++;
   13400:	f816 8b01 	ldrb.w	r8, [r6], #1
   13404:	f80e 8d01 	strb.w	r8, [lr, #-1]!
   13408:	e7de      	b.n	133c8 <get+0x7c>
   1340a:	bf00      	nop
   1340c:	4000d000 	.word	0x4000d000

00013410 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
   13410:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   13412:	b1d0      	cbz	r0, 1344a <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   13414:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   13416:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   13418:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   1341a:	1c53      	adds	r3, r2, #1
   1341c:	b2db      	uxtb	r3, r3
		last = 0;
   1341e:	42ab      	cmp	r3, r5
   13420:	bf08      	it	eq
   13422:	2300      	moveq	r3, #0
	if (last == rng->first) {
   13424:	42a3      	cmp	r3, r4
   13426:	d010      	beq.n	1344a <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   13428:	b161      	cbz	r1, 13444 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   1342a:	490a      	ldr	r1, [pc, #40]	; (13454 <isr+0x44>)
   1342c:	4402      	add	r2, r0
   1342e:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   13432:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   13434:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   13436:	3301      	adds	r3, #1
   13438:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   1343a:	429d      	cmp	r5, r3
   1343c:	bf08      	it	eq
   1343e:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   13440:	42a3      	cmp	r3, r4
   13442:	d005      	beq.n	13450 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   13444:	f06f 000f 	mvn.w	r0, #15
   13448:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1344a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1344e:	bd30      	pop	{r4, r5, pc}
		return 0;
   13450:	2000      	movs	r0, #0
}
   13452:	bd30      	pop	{r4, r5, pc}
   13454:	4000d000 	.word	0x4000d000

00013458 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
   13458:	07db      	lsls	r3, r3, #31
{
   1345a:	b570      	push	{r4, r5, r6, lr}
   1345c:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
   1345e:	d507      	bpl.n	13470 <entropy_nrf5_get_entropy_isr+0x18>
   13460:	4613      	mov	r3, r2
   13462:	4a0d      	ldr	r2, [pc, #52]	; (13498 <entropy_nrf5_get_entropy_isr+0x40>)
   13464:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
   13466:	2500      	movs	r5, #0
	while (len) {
   13468:	b94b      	cbnz	r3, 1347e <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
   1346a:	6050      	str	r0, [r2, #4]

	return cnt;
   1346c:	4620      	mov	r0, r4
}
   1346e:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
   13470:	6880      	ldr	r0, [r0, #8]
   13472:	460a      	mov	r2, r1
   13474:	3044      	adds	r0, #68	; 0x44
   13476:	b2e1      	uxtb	r1, r4
   13478:	f7ff ff68 	bl	1334c <get>
   1347c:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
   1347e:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
   13482:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
   13484:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
   13488:	2e00      	cmp	r6, #0
   1348a:	d0fb      	beq.n	13484 <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
   1348c:	3b01      	subs	r3, #1
   1348e:	b29b      	uxth	r3, r3
   13490:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
   13494:	54ce      	strb	r6, [r1, r3]
   13496:	e7e7      	b.n	13468 <entropy_nrf5_get_entropy_isr+0x10>
   13498:	4000d000 	.word	0x4000d000

0001349c <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1349c:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1349e:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   134a0:	2201      	movs	r2, #1
   134a2:	4611      	mov	r1, r2
   134a4:	4620      	mov	r0, r4
   134a6:	f000 fddf 	bl	14068 <_impl_k_sem_init>
   134aa:	f104 001c 	add.w	r0, r4, #28
   134ae:	2201      	movs	r2, #1
   134b0:	2100      	movs	r1, #0
   134b2:	f000 fdd9 	bl	14068 <_impl_k_sem_init>
	rng->threshold = threshold;
   134b6:	2304      	movs	r3, #4
   134b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   134bc:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
   134be:	2500      	movs	r5, #0
	rng->threshold = threshold;
   134c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	rng->count = len;
   134c4:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   134c6:	4b11      	ldr	r3, [pc, #68]	; (1350c <entropy_nrf5_init+0x70>)
	rng->count = len;
   134c8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
   134cc:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
   134ce:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
   134d2:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	rng->count = len;
   134d6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
	rng->first = rng->last = 0;
   134da:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
   134de:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   134e2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   134e6:	f042 0201 	orr.w	r2, r2, #1
   134ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   134ee:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
   134f0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   134f4:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   134f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
   134fa:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
   134fc:	462a      	mov	r2, r5
   134fe:	f7ee f9e3 	bl	18c8 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
   13502:	4630      	mov	r0, r6
   13504:	f7ee f9ae 	bl	1864 <_arch_irq_enable>

	return 0;
}
   13508:	4628      	mov	r0, r5
   1350a:	bd70      	pop	{r4, r5, r6, pc}
   1350c:	4000d000 	.word	0x4000d000

00013510 <isr_rand>:
{
   13510:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
   13512:	4b12      	ldr	r3, [pc, #72]	; (1355c <isr_rand+0x4c>)
   13514:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   13518:	b1fb      	cbz	r3, 1355a <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   1351a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
   1351c:	2101      	movs	r1, #1
   1351e:	f105 0044 	add.w	r0, r5, #68	; 0x44
   13522:	f7ff ff75 	bl	13410 <isr>
		if (ret != -EBUSY) {
   13526:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
   1352a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
   1352c:	d00d      	beq.n	1354a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
   1352e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
   13532:	bf14      	ite	ne
   13534:	2100      	movne	r1, #0
   13536:	2101      	moveq	r1, #1
   13538:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1353c:	f7ff ff68 	bl	13410 <isr>
   13540:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   13542:	f105 001c 	add.w	r0, r5, #28
   13546:	f000 fda7 	bl	14098 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
   1354a:	4b04      	ldr	r3, [pc, #16]	; (1355c <isr_rand+0x4c>)
   1354c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
   1354e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   13550:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   13554:	bf1c      	itt	ne
   13556:	2201      	movne	r2, #1
   13558:	605a      	strne	r2, [r3, #4]
   1355a:	bd38      	pop	{r3, r4, r5, pc}
   1355c:	4000d000 	.word	0x4000d000

00013560 <entropy_nrf5_get_entropy>:
{
   13560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
   13564:	6885      	ldr	r5, [r0, #8]
{
   13566:	460f      	mov	r7, r1
   13568:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
   1356a:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   1356e:	b914      	cbnz	r4, 13576 <entropy_nrf5_get_entropy+0x16>
}
   13570:	4620      	mov	r0, r4
   13572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13576:	2cff      	cmp	r4, #255	; 0xff
   13578:	4623      	mov	r3, r4
   1357a:	bf28      	it	cs
   1357c:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
   1357e:	1ae4      	subs	r4, r4, r3
   13580:	b2de      	uxtb	r6, r3
   13582:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
   13584:	f105 0938 	add.w	r9, r5, #56	; 0x38
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   13588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1358c:	4628      	mov	r0, r5
   1358e:	f000 fdab 	bl	140e8 <_impl_k_sem_take>
   13592:	4631      	mov	r1, r6
   13594:	463a      	mov	r2, r7
   13596:	4648      	mov	r0, r9
   13598:	f7ff fed8 	bl	1334c <get>
   1359c:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1359e:	4628      	mov	r0, r5
   135a0:	f000 fd7a 	bl	14098 <_impl_k_sem_give>
			if (len8) {
   135a4:	2e00      	cmp	r6, #0
   135a6:	d0e2      	beq.n	1356e <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   135a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   135ac:	4640      	mov	r0, r8
   135ae:	f000 fd9b 	bl	140e8 <_impl_k_sem_take>
   135b2:	e7e9      	b.n	13588 <entropy_nrf5_get_entropy+0x28>

000135b4 <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
   135b4:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
   135b6:	4802      	ldr	r0, [pc, #8]	; (135c0 <entropy_nrf_get_entropy_isr+0xc>)
   135b8:	460a      	mov	r2, r1
   135ba:	4619      	mov	r1, r3
   135bc:	f7ff bec6 	b.w	1334c <get>
   135c0:	2000176c 	.word	0x2000176c

000135c4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   135c4:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   135c6:	4b08      	ldr	r3, [pc, #32]	; (135e8 <_sys_device_do_config_level+0x24>)
   135c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   135cc:	3001      	adds	r0, #1
   135ce:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   135d2:	4620      	mov	r0, r4
   135d4:	42a8      	cmp	r0, r5
   135d6:	f104 040c 	add.w	r4, r4, #12
   135da:	d300      	bcc.n	135de <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   135dc:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   135de:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   135e2:	685b      	ldr	r3, [r3, #4]
   135e4:	4798      	blx	r3
   135e6:	e7f4      	b.n	135d2 <_sys_device_do_config_level+0xe>
   135e8:	000184c4 	.word	0x000184c4

000135ec <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   135ec:	4b10      	ldr	r3, [pc, #64]	; (13630 <device_get_binding+0x44>)
{
   135ee:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   135f0:	4c10      	ldr	r4, [pc, #64]	; (13634 <device_get_binding+0x48>)
{
   135f2:	4605      	mov	r5, r0
   135f4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   135f6:	429c      	cmp	r4, r3
   135f8:	d104      	bne.n	13604 <device_get_binding+0x18>
   135fa:	4c0e      	ldr	r4, [pc, #56]	; (13634 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   135fc:	42b4      	cmp	r4, r6
   135fe:	d109      	bne.n	13614 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   13600:	2400      	movs	r4, #0
   13602:	e012      	b.n	1362a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   13604:	6862      	ldr	r2, [r4, #4]
   13606:	b11a      	cbz	r2, 13610 <device_get_binding+0x24>
   13608:	6822      	ldr	r2, [r4, #0]
   1360a:	6812      	ldr	r2, [r2, #0]
   1360c:	42aa      	cmp	r2, r5
   1360e:	d00c      	beq.n	1362a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13610:	340c      	adds	r4, #12
   13612:	e7f0      	b.n	135f6 <device_get_binding+0xa>
		if (!info->driver_api) {
   13614:	6863      	ldr	r3, [r4, #4]
   13616:	b90b      	cbnz	r3, 1361c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   13618:	340c      	adds	r4, #12
   1361a:	e7ef      	b.n	135fc <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   1361c:	6823      	ldr	r3, [r4, #0]
   1361e:	4628      	mov	r0, r5
   13620:	6819      	ldr	r1, [r3, #0]
   13622:	f7ee fadb 	bl	1bdc <strcmp>
   13626:	2800      	cmp	r0, #0
   13628:	d1f6      	bne.n	13618 <device_get_binding+0x2c>
}
   1362a:	4620      	mov	r0, r4
   1362c:	bd70      	pop	{r4, r5, r6, pc}
   1362e:	bf00      	nop
   13630:	20003f78 	.word	0x20003f78
   13634:	20003ec4 	.word	0x20003ec4

00013638 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   13638:	1c43      	adds	r3, r0, #1
   1363a:	d003      	beq.n	13644 <_sys_power_save_idle_exit+0xc>
   1363c:	4b03      	ldr	r3, [pc, #12]	; (1364c <_sys_power_save_idle_exit+0x14>)
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	4298      	cmp	r0, r3
   13642:	db01      	blt.n	13648 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   13644:	f7ed bed2 	b.w	13ec <_timer_idle_exit>
   13648:	4770      	bx	lr
   1364a:	bf00      	nop
   1364c:	20003eb8 	.word	0x20003eb8

00013650 <idle>:
	return list->head == list;
   13650:	4d0f      	ldr	r5, [pc, #60]	; (13690 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   13652:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   13654:	4f0f      	ldr	r7, [pc, #60]	; (13694 <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13656:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   1365a:	f04f 0220 	mov.w	r2, #32
   1365e:	f3ef 8311 	mrs	r3, BASEPRI
   13662:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13666:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13668:	42b3      	cmp	r3, r6
   1366a:	d00a      	beq.n	13682 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   1366c:	b14b      	cbz	r3, 13682 <idle+0x32>
   1366e:	691c      	ldr	r4, [r3, #16]
   13670:	1c63      	adds	r3, r4, #1
   13672:	d008      	beq.n	13686 <idle+0x36>
   13674:	683b      	ldr	r3, [r7, #0]
   13676:	42a3      	cmp	r3, r4
   13678:	dd05      	ble.n	13686 <idle+0x36>
	_kernel.idle = ticks;
   1367a:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
   1367c:	f7ee f97c 	bl	1978 <k_cpu_idle>
   13680:	e7eb      	b.n	1365a <idle+0xa>
   13682:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   13686:	4620      	mov	r0, r4
   13688:	f7ed fe92 	bl	13b0 <_timer_idle_enter>
   1368c:	e7f5      	b.n	1367a <idle+0x2a>
   1368e:	bf00      	nop
   13690:	20001988 	.word	0x20001988
   13694:	20003eb8 	.word	0x20003eb8

00013698 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13698:	4802      	ldr	r0, [pc, #8]	; (136a4 <_bss_zero+0xc>)
   1369a:	4a03      	ldr	r2, [pc, #12]	; (136a8 <_bss_zero+0x10>)
   1369c:	2100      	movs	r1, #0
   1369e:	1a12      	subs	r2, r2, r0
   136a0:	f7ee baea 	b.w	1c78 <memset>
   136a4:	20000000 	.word	0x20000000
   136a8:	20001a4c 	.word	0x20001a4c

000136ac <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   136ac:	4802      	ldr	r0, [pc, #8]	; (136b8 <_data_copy+0xc>)
   136ae:	4a03      	ldr	r2, [pc, #12]	; (136bc <_data_copy+0x10>)
   136b0:	4903      	ldr	r1, [pc, #12]	; (136c0 <_data_copy+0x14>)
   136b2:	1a12      	subs	r2, r2, r0
   136b4:	f7ee bab4 	b.w	1c20 <memcpy>
   136b8:	20003a68 	.word	0x20003a68
   136bc:	20004038 	.word	0x20004038
   136c0:	00018514 	.word	0x00018514

000136c4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   136c4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   136c6:	2002      	movs	r0, #2
   136c8:	f7ff ff7c 	bl	135c4 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   136cc:	4807      	ldr	r0, [pc, #28]	; (136ec <bg_thread_main+0x28>)
   136ce:	f7ed fc5d 	bl	f8c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   136d2:	2003      	movs	r0, #3
   136d4:	f7ff ff76 	bl	135c4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   136d8:	f000 ff2e 	bl	14538 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   136dc:	f7ec fff0 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   136e0:	4a03      	ldr	r2, [pc, #12]	; (136f0 <bg_thread_main+0x2c>)
   136e2:	7a13      	ldrb	r3, [r2, #8]
   136e4:	f023 0301 	bic.w	r3, r3, #1
   136e8:	7213      	strb	r3, [r2, #8]
   136ea:	bd08      	pop	{r3, pc}
   136ec:	000184e0 	.word	0x000184e0
   136f0:	200017f0 	.word	0x200017f0

000136f4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   136f4:	b580      	push	{r7, lr}
   136f6:	b086      	sub	sp, #24
   136f8:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   136fa:	f7ed feff 	bl	14fc <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   136fe:	4b30      	ldr	r3, [pc, #192]	; (137c0 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13700:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13704:	4b2f      	ldr	r3, [pc, #188]	; (137c4 <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
   13706:	4d30      	ldr	r5, [pc, #192]	; (137c8 <_Cstart+0xd4>)
   13708:	4e30      	ldr	r6, [pc, #192]	; (137cc <_Cstart+0xd8>)
   1370a:	2400      	movs	r4, #0
   1370c:	22e0      	movs	r2, #224	; 0xe0
   1370e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13712:	77dc      	strb	r4, [r3, #31]
   13714:	761c      	strb	r4, [r3, #24]
   13716:	765c      	strb	r4, [r3, #25]
   13718:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1371a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1371c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   13720:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13722:	f7ee f897 	bl	1854 <_FaultInit>
	_CpuIdleInit();
   13726:	f7ee f921 	bl	196c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1372a:	4620      	mov	r0, r4
   1372c:	f7ff ff4a 	bl	135c4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13730:	2001      	movs	r0, #1
   13732:	f7ff ff47 	bl	135c4 <_sys_device_do_config_level>
	_sched_init();
   13736:	f000 fc43 	bl	13fc0 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
   1373a:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
   1373c:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
   1373e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13742:	9304      	str	r3, [sp, #16]
   13744:	9403      	str	r4, [sp, #12]
   13746:	9402      	str	r4, [sp, #8]
   13748:	9401      	str	r4, [sp, #4]
   1374a:	9400      	str	r4, [sp, #0]
   1374c:	4b20      	ldr	r3, [pc, #128]	; (137d0 <_Cstart+0xdc>)
   1374e:	4921      	ldr	r1, [pc, #132]	; (137d4 <_Cstart+0xe0>)
   13750:	4628      	mov	r0, r5
   13752:	f000 fe99 	bl	14488 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13756:	7a6b      	ldrb	r3, [r5, #9]
   13758:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1375c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13760:	726a      	strb	r2, [r5, #9]
   13762:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
   13764:	d102      	bne.n	1376c <_Cstart+0x78>
   13766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13768:	3301      	adds	r3, #1
   1376a:	d024      	beq.n	137b6 <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
   1376c:	2301      	movs	r3, #1
   1376e:	4e1a      	ldr	r6, [pc, #104]	; (137d8 <_Cstart+0xe4>)
   13770:	9304      	str	r3, [sp, #16]
   13772:	230f      	movs	r3, #15
   13774:	9303      	str	r3, [sp, #12]
   13776:	2300      	movs	r3, #0
   13778:	9302      	str	r3, [sp, #8]
   1377a:	9301      	str	r3, [sp, #4]
   1377c:	9300      	str	r3, [sp, #0]
   1377e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13782:	4b16      	ldr	r3, [pc, #88]	; (137dc <_Cstart+0xe8>)
   13784:	4916      	ldr	r1, [pc, #88]	; (137e0 <_Cstart+0xec>)
   13786:	4630      	mov	r0, r6
   13788:	f000 fe7e 	bl	14488 <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1378c:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
   1378e:	60e6      	str	r6, [r4, #12]
   13790:	f023 0304 	bic.w	r3, r3, #4
   13794:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
   13796:	4b13      	ldr	r3, [pc, #76]	; (137e4 <_Cstart+0xf0>)
   13798:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   1379a:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1379c:	4b12      	ldr	r3, [pc, #72]	; (137e8 <_Cstart+0xf4>)

	_current = main_thread;
   1379e:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   137a0:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
   137a4:	4c11      	ldr	r4, [pc, #68]	; (137ec <_Cstart+0xf8>)
   137a6:	4a0a      	ldr	r2, [pc, #40]	; (137d0 <_Cstart+0xdc>)
   137a8:	f383 8809 	msr	PSP, r3
   137ac:	2100      	movs	r1, #0
   137ae:	f381 8811 	msr	BASEPRI, r1
   137b2:	4610      	mov	r0, r2
   137b4:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   137b6:	4628      	mov	r0, r5
   137b8:	f000 fb02 	bl	13dc0 <_add_thread_to_ready_q>
   137bc:	e7d6      	b.n	1376c <_Cstart+0x78>
   137be:	bf00      	nop
   137c0:	20003668 	.word	0x20003668
   137c4:	e000ed00 	.word	0xe000ed00
   137c8:	200017f0 	.word	0x200017f0
   137cc:	20001988 	.word	0x20001988
   137d0:	000136c5 	.word	0x000136c5
   137d4:	20002928 	.word	0x20002928
   137d8:	20001780 	.word	0x20001780
   137dc:	00013651 	.word	0x00013651
   137e0:	20002d28 	.word	0x20002d28
   137e4:	2000199c 	.word	0x2000199c
   137e8:	20002d28 	.word	0x20002d28
   137ec:	00000899 	.word	0x00000899

000137f0 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   137f0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   137f2:	4c07      	ldr	r4, [pc, #28]	; (13810 <init_static_pools+0x20>)
   137f4:	4d07      	ldr	r5, [pc, #28]	; (13814 <init_static_pools+0x24>)
   137f6:	42ac      	cmp	r4, r5
   137f8:	d301      	bcc.n	137fe <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   137fa:	2000      	movs	r0, #0
   137fc:	bd38      	pop	{r3, r4, r5, pc}
   137fe:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
   13802:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
   13804:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
   13806:	4620      	mov	r0, r4
   13808:	f7ed f881 	bl	90e <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   1380c:	341c      	adds	r4, #28
   1380e:	e7f2      	b.n	137f6 <init_static_pools+0x6>
   13810:	20003f78 	.word	0x20003f78
   13814:	20003f78 	.word	0x20003f78

00013818 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   13818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
   1381c:	1e1d      	subs	r5, r3, #0
{
   1381e:	b085      	sub	sp, #20
   13820:	4607      	mov	r7, r0
   13822:	460c      	mov	r4, r1
   13824:	4692      	mov	sl, r2
	if (timeout > 0) {
   13826:	dd4c      	ble.n	138c2 <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
   13828:	f000 fc84 	bl	14134 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1382c:	f105 0309 	add.w	r3, r5, #9
   13830:	220a      	movs	r2, #10
   13832:	fbb3 f3f2 	udiv	r3, r3, r2
   13836:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
   1383a:	4b23      	ldr	r3, [pc, #140]	; (138c8 <k_mem_pool_alloc+0xb0>)
   1383c:	4e23      	ldr	r6, [pc, #140]	; (138cc <k_mem_pool_alloc+0xb4>)
   1383e:	1afb      	subs	r3, r7, r3
   13840:	109b      	asrs	r3, r3, #2
   13842:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
   13844:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   13846:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1384a:	9400      	str	r4, [sp, #0]
   1384c:	ab03      	add	r3, sp, #12
   1384e:	aa02      	add	r2, sp, #8
   13850:	4651      	mov	r1, sl
   13852:	4638      	mov	r0, r7
   13854:	f7ed f8a6 	bl	9a4 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
   13858:	f110 0f0b 	cmn.w	r0, #11
   1385c:	d10b      	bne.n	13876 <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
   1385e:	9400      	str	r4, [sp, #0]
   13860:	ab03      	add	r3, sp, #12
   13862:	aa02      	add	r2, sp, #8
   13864:	4651      	mov	r1, sl
   13866:	4638      	mov	r0, r7
   13868:	f7ed f89c 	bl	9a4 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
   1386c:	f110 0f0b 	cmn.w	r0, #11
   13870:	bf08      	it	eq
   13872:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
   13876:	7963      	ldrb	r3, [r4, #5]
   13878:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   1387a:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
   1387c:	f362 0303 	bfi	r3, r2, #0, #4
   13880:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
   13882:	6863      	ldr	r3, [r4, #4]
   13884:	9a03      	ldr	r2, [sp, #12]
   13886:	f362 331f 	bfi	r3, r2, #12, #20
   1388a:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   1388c:	b1b0      	cbz	r0, 138bc <k_mem_pool_alloc+0xa4>
   1388e:	b1ad      	cbz	r5, 138bc <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
   13890:	f110 0f0c 	cmn.w	r0, #12
   13894:	d112      	bne.n	138bc <k_mem_pool_alloc+0xa4>
   13896:	f04f 0320 	mov.w	r3, #32
   1389a:	f3ef 8011 	mrs	r0, BASEPRI
   1389e:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
   138a2:	462a      	mov	r2, r5
   138a4:	4659      	mov	r1, fp
   138a6:	f000 fb39 	bl	13f1c <_pend_current_thread>

		if (timeout != K_FOREVER) {
   138aa:	1c6b      	adds	r3, r5, #1
   138ac:	d0cd      	beq.n	1384a <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
   138ae:	f000 fc41 	bl	14134 <_tick_get>

			if (timeout < 0) {
   138b2:	ebb8 0500 	subs.w	r5, r8, r0
   138b6:	d5c8      	bpl.n	1384a <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
   138b8:	f06f 000a 	mvn.w	r0, #10
}
   138bc:	b005      	add	sp, #20
   138be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
   138c2:	f04f 0800 	mov.w	r8, #0
   138c6:	e7b8      	b.n	1383a <k_mem_pool_alloc+0x22>
   138c8:	20003f78 	.word	0x20003f78
   138cc:	b6db6db7 	.word	0xb6db6db7

000138d0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   138d0:	b570      	push	{r4, r5, r6, lr}
   138d2:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
   138d4:	6802      	ldr	r2, [r0, #0]
   138d6:	7841      	ldrb	r1, [r0, #1]
   138d8:	4e13      	ldr	r6, [pc, #76]	; (13928 <k_mem_pool_free_id+0x58>)
   138da:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   138de:	00a4      	lsls	r4, r4, #2
   138e0:	0b12      	lsrs	r2, r2, #12
   138e2:	f001 010f 	and.w	r1, r1, #15
   138e6:	1930      	adds	r0, r6, r4
   138e8:	f7ed f90e 	bl	b08 <_sys_mem_pool_block_free>
   138ec:	f04f 0320 	mov.w	r3, #32
   138f0:	f3ef 8511 	mrs	r5, BASEPRI
   138f4:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
   138f8:	f104 0014 	add.w	r0, r4, #20
   138fc:	4430      	add	r0, r6
   138fe:	f000 fb4f 	bl	13fa0 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
   13902:	b140      	cbz	r0, 13916 <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13904:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13908:	2b0d      	cmp	r3, #13
   1390a:	d804      	bhi.n	13916 <k_mem_pool_free_id+0x46>
   1390c:	b133      	cbz	r3, 1391c <k_mem_pool_free_id+0x4c>
   1390e:	4b07      	ldr	r3, [pc, #28]	; (1392c <k_mem_pool_free_id+0x5c>)
   13910:	685b      	ldr	r3, [r3, #4]
   13912:	051b      	lsls	r3, r3, #20
   13914:	d402      	bmi.n	1391c <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13916:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
   1391a:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
   1391c:	4628      	mov	r0, r5
}
   1391e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
   13922:	f000 b9fb 	b.w	13d1c <_reschedule>
   13926:	bf00      	nop
   13928:	20003f78 	.word	0x20003f78
   1392c:	e000ed00 	.word	0xe000ed00

00013930 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
   13930:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   13932:	1d0a      	adds	r2, r1, #4
   13934:	d204      	bcs.n	13940 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   13936:	2300      	movs	r3, #0
   13938:	4669      	mov	r1, sp
   1393a:	f7ff ff6d 	bl	13818 <k_mem_pool_alloc>
   1393e:	b118      	cbz	r0, 13948 <k_mem_pool_malloc+0x18>
		return NULL;
   13940:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
   13942:	b003      	add	sp, #12
   13944:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   13948:	2204      	movs	r2, #4
   1394a:	eb0d 0102 	add.w	r1, sp, r2
   1394e:	9800      	ldr	r0, [sp, #0]
   13950:	f7ee f966 	bl	1c20 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   13954:	9800      	ldr	r0, [sp, #0]
   13956:	3004      	adds	r0, #4
   13958:	e7f3      	b.n	13942 <k_mem_pool_malloc+0x12>

0001395a <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
   1395a:	b110      	cbz	r0, 13962 <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
   1395c:	3804      	subs	r0, #4
   1395e:	f7ff bfb7 	b.w	138d0 <k_mem_pool_free_id>
   13962:	4770      	bx	lr

00013964 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
   13964:	4b03      	ldr	r3, [pc, #12]	; (13974 <z_thread_malloc+0x10>)
   13966:	689b      	ldr	r3, [r3, #8]
{
   13968:	4601      	mov	r1, r0
	if (_current->resource_pool) {
   1396a:	6e58      	ldr	r0, [r3, #100]	; 0x64
   1396c:	b108      	cbz	r0, 13972 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   1396e:	f7ff bfdf 	b.w	13930 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   13972:	4770      	bx	lr
   13974:	20001988 	.word	0x20001988

00013978 <init_mutex_module>:

/*
 * Complete initialization of statically defined mutexes.
 */
static int init_mutex_module(struct device *dev)
{
   13978:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mutex *mutex;

	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   1397a:	4b0a      	ldr	r3, [pc, #40]	; (139a4 <init_mutex_module+0x2c>)
   1397c:	490a      	ldr	r1, [pc, #40]	; (139a8 <init_mutex_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   1397e:	4a0b      	ldr	r2, [pc, #44]	; (139ac <init_mutex_module+0x34>)
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   13980:	428b      	cmp	r3, r1
   13982:	d301      	bcc.n	13988 <init_mutex_module+0x10>
	}
	return 0;
}
   13984:	2000      	movs	r0, #0
   13986:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   13988:	f04f 0420 	mov.w	r4, #32
   1398c:	f3ef 8011 	mrs	r0, BASEPRI
   13990:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_mutex, mutex);
   13994:	6814      	ldr	r4, [r2, #0]
   13996:	615c      	str	r4, [r3, #20]
   13998:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1399a:	f380 8811 	msr	BASEPRI, r0
	for (mutex = _k_mutex_list_start; mutex < _k_mutex_list_end; mutex++) {
   1399e:	3318      	adds	r3, #24
   139a0:	e7ee      	b.n	13980 <init_mutex_module+0x8>
   139a2:	bf00      	nop
   139a4:	20003f94 	.word	0x20003f94
   139a8:	20003f94 	.word	0x20003f94
   139ac:	20001980 	.word	0x20001980

000139b0 <init_queue_module>:

/*
 * Complete initialization of statically defined queues.
 */
static int init_queue_module(struct device *dev)
{
   139b0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_queue *queue;

	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   139b2:	4b0a      	ldr	r3, [pc, #40]	; (139dc <init_queue_module+0x2c>)
   139b4:	490a      	ldr	r1, [pc, #40]	; (139e0 <init_queue_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   139b6:	4a0b      	ldr	r2, [pc, #44]	; (139e4 <init_queue_module+0x34>)
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   139b8:	428b      	cmp	r3, r1
   139ba:	d301      	bcc.n	139c0 <init_queue_module+0x10>
	}
	return 0;
}
   139bc:	2000      	movs	r0, #0
   139be:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   139c0:	f04f 0420 	mov.w	r4, #32
   139c4:	f3ef 8011 	mrs	r0, BASEPRI
   139c8:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_queue, queue);
   139cc:	6814      	ldr	r4, [r2, #0]
   139ce:	611c      	str	r4, [r3, #16]
   139d0:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   139d2:	f380 8811 	msr	BASEPRI, r0
	for (queue = _k_queue_list_start; queue < _k_queue_list_end; queue++) {
   139d6:	3314      	adds	r3, #20
   139d8:	e7ee      	b.n	139b8 <init_queue_module+0x8>
   139da:	bf00      	nop
   139dc:	20003f94 	.word	0x20003f94
   139e0:	20003fa8 	.word	0x20003fa8
   139e4:	20001984 	.word	0x20001984

000139e8 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
   139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139ea:	4605      	mov	r5, r0
   139ec:	460f      	mov	r7, r1
   139ee:	4614      	mov	r4, r2
	__asm__ volatile(
   139f0:	f04f 0220 	mov.w	r2, #32
   139f4:	f3ef 8611 	mrs	r6, BASEPRI
   139f8:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   139fc:	b1a3      	cbz	r3, 13a28 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   139fe:	2008      	movs	r0, #8
   13a00:	f7ff ffb0 	bl	13964 <z_thread_malloc>
		if (!anode) {
   13a04:	2800      	cmp	r0, #0
   13a06:	d034      	beq.n	13a72 <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
   13a08:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
   13a0a:	6044      	str	r4, [r0, #4]
   13a0c:	6003      	str	r3, [r0, #0]
   13a0e:	4604      	mov	r4, r0
   13a10:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
   13a12:	b95f      	cbnz	r7, 13a2c <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a14:	682a      	ldr	r2, [r5, #0]
   13a16:	f003 0303 	and.w	r3, r3, #3
   13a1a:	4313      	orrs	r3, r2
   13a1c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13a1e:	686b      	ldr	r3, [r5, #4]
	list->head = node;
   13a20:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
   13a22:	b973      	cbnz	r3, 13a42 <queue_insert+0x5a>
	list->tail = node;
   13a24:	606c      	str	r4, [r5, #4]
   13a26:	e00c      	b.n	13a42 <queue_insert+0x5a>
	node->next_and_flags = flags;
   13a28:	6023      	str	r3, [r4, #0]
   13a2a:	e7f1      	b.n	13a10 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13a2c:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
   13a2e:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a32:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
   13a36:	d114      	bne.n	13a62 <queue_insert+0x7a>
   13a38:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a3a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
   13a3c:	b95a      	cbnz	r2, 13a56 <queue_insert+0x6e>
	list->tail = node;
   13a3e:	606c      	str	r4, [r5, #4]
	list->head = node;
   13a40:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
   13a42:	2104      	movs	r1, #4
   13a44:	f105 0008 	add.w	r0, r5, #8
   13a48:	f001 f800 	bl	14a4c <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
   13a4c:	4630      	mov	r0, r6
   13a4e:	f000 f965 	bl	13d1c <_reschedule>
	return 0;
   13a52:	2000      	movs	r0, #0
   13a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a56:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a58:	f003 0303 	and.w	r3, r3, #3
   13a5c:	4323      	orrs	r3, r4
   13a5e:	6013      	str	r3, [r2, #0]
   13a60:	e7e0      	b.n	13a24 <queue_insert+0x3c>
   13a62:	4313      	orrs	r3, r2
   13a64:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a66:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a68:	f002 0203 	and.w	r2, r2, #3
   13a6c:	4314      	orrs	r4, r2
   13a6e:	603c      	str	r4, [r7, #0]
   13a70:	e7e7      	b.n	13a42 <queue_insert+0x5a>
			return -ENOMEM;
   13a72:	f06f 000b 	mvn.w	r0, #11
}
   13a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a78 <z_queue_node_peek>:
{
   13a78:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
   13a7a:	4604      	mov	r4, r0
   13a7c:	b130      	cbz	r0, 13a8c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a7e:	6802      	ldr	r2, [r0, #0]
   13a80:	0793      	lsls	r3, r2, #30
   13a82:	d003      	beq.n	13a8c <z_queue_node_peek+0x14>
		ret = anode->data;
   13a84:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13a86:	b109      	cbz	r1, 13a8c <z_queue_node_peek+0x14>
			k_free(anode);
   13a88:	f7ff ff67 	bl	1395a <k_free>
}
   13a8c:	4620      	mov	r0, r4
   13a8e:	bd10      	pop	{r4, pc}

00013a90 <_impl_k_queue_init>:
	list->head = NULL;
   13a90:	2300      	movs	r3, #0
   13a92:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   13a94:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   13a96:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   13a9a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   13a9c:	60c3      	str	r3, [r0, #12]
   13a9e:	f04f 0320 	mov.w	r3, #32
   13aa2:	f3ef 8211 	mrs	r2, BASEPRI
   13aa6:	f383 8811 	msr	BASEPRI, r3
	SYS_TRACING_OBJ_INIT(k_queue, queue);
   13aaa:	4b03      	ldr	r3, [pc, #12]	; (13ab8 <_impl_k_queue_init+0x28>)
   13aac:	6819      	ldr	r1, [r3, #0]
   13aae:	6101      	str	r1, [r0, #16]
   13ab0:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ab2:	f382 8811 	msr	BASEPRI, r2
   13ab6:	4770      	bx	lr
   13ab8:	20001984 	.word	0x20001984

00013abc <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
   13abc:	460a      	mov	r2, r1
   13abe:	2300      	movs	r3, #0
   13ac0:	6841      	ldr	r1, [r0, #4]
   13ac2:	f7ff bf91 	b.w	139e8 <queue_insert>

00013ac6 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
   13ac6:	2300      	movs	r3, #0
   13ac8:	460a      	mov	r2, r1
   13aca:	4619      	mov	r1, r3
   13acc:	f7ff bf8c 	b.w	139e8 <queue_insert>

00013ad0 <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13ad0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13ad2:	f04f 0320 	mov.w	r3, #32
   13ad6:	f3ef 8511 	mrs	r5, BASEPRI
   13ada:	f383 8811 	msr	BASEPRI, r3
   13ade:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
   13ae0:	b953      	cbnz	r3, 13af8 <k_queue_append_list+0x28>
	list->head = node;
   13ae2:	6001      	str	r1, [r0, #0]
	list->tail = node;
   13ae4:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
   13ae6:	2104      	movs	r1, #4
   13ae8:	3008      	adds	r0, #8
   13aea:	f000 ffaf 	bl	14a4c <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
   13aee:	4628      	mov	r0, r5
}
   13af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
   13af4:	f000 b912 	b.w	13d1c <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13af8:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   13afa:	f004 0403 	and.w	r4, r4, #3
   13afe:	4321      	orrs	r1, r4
   13b00:	6019      	str	r1, [r3, #0]
   13b02:	e7ef      	b.n	13ae4 <k_queue_append_list+0x14>

00013b04 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   13b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b08:	4604      	mov	r4, r0
   13b0a:	b086      	sub	sp, #24
   13b0c:	460d      	mov	r5, r1
   13b0e:	f04f 0320 	mov.w	r3, #32
   13b12:	f3ef 8711 	mrs	r7, BASEPRI
   13b16:	f383 8811 	msr	BASEPRI, r3
   13b1a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   13b1c:	b182      	cbz	r2, 13b40 <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b1e:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b20:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b22:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b26:	428a      	cmp	r2, r1
	list->head = node;
   13b28:	6003      	str	r3, [r0, #0]
	list->tail = node;
   13b2a:	bf08      	it	eq
   13b2c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   13b2e:	2101      	movs	r1, #1
   13b30:	4610      	mov	r0, r2
   13b32:	f7ff ffa1 	bl	13a78 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13b36:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13b3a:	b006      	add	sp, #24
   13b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
   13b40:	b919      	cbnz	r1, 13b4a <_impl_k_queue_get+0x46>
   13b42:	f387 8811 	msr	BASEPRI, r7
			return NULL;
   13b46:	2000      	movs	r0, #0
   13b48:	e7f7      	b.n	13b3a <_impl_k_queue_get+0x36>
   13b4a:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13b4e:	2104      	movs	r1, #4
   13b50:	4603      	mov	r3, r0
   13b52:	eb0d 0001 	add.w	r0, sp, r1
   13b56:	f000 fee2 	bl	1491e <k_poll_event_init>
	if (timeout != K_FOREVER) {
   13b5a:	1c6a      	adds	r2, r5, #1
   13b5c:	d002      	beq.n	13b64 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13b5e:	f000 fadf 	bl	14120 <_impl_k_uptime_get_32>
   13b62:	4606      	mov	r6, r0
{
   13b64:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
   13b66:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
   13b6a:	1bea      	subs	r2, r5, r7
   13b6c:	f36f 1307 	bfc	r3, #4, #4
   13b70:	2101      	movs	r1, #1
   13b72:	a801      	add	r0, sp, #4
   13b74:	f88d 3011 	strb.w	r3, [sp, #17]
   13b78:	f000 fee4 	bl	14944 <_impl_k_poll>
		if (err && err != -EAGAIN) {
   13b7c:	b108      	cbz	r0, 13b82 <_impl_k_queue_get+0x7e>
   13b7e:	300b      	adds	r0, #11
   13b80:	d1e1      	bne.n	13b46 <_impl_k_queue_get+0x42>
	__asm__ volatile(
   13b82:	f04f 0320 	mov.w	r3, #32
   13b86:	f3ef 8811 	mrs	r8, BASEPRI
   13b8a:	f383 8811 	msr	BASEPRI, r3
   13b8e:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
   13b90:	b138      	cbz	r0, 13ba2 <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b92:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b94:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13b96:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
   13b9a:	4290      	cmp	r0, r2
	list->head = node;
   13b9c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   13b9e:	bf08      	it	eq
   13ba0:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   13ba2:	2101      	movs	r1, #1
   13ba4:	f7ff ff68 	bl	13a78 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ba8:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
   13bac:	2800      	cmp	r0, #0
   13bae:	d1c4      	bne.n	13b3a <_impl_k_queue_get+0x36>
   13bb0:	1c6b      	adds	r3, r5, #1
   13bb2:	d0d8      	beq.n	13b66 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   13bb4:	f000 fab4 	bl	14120 <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
   13bb8:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
   13bba:	42bd      	cmp	r5, r7
   13bbc:	dad3      	bge.n	13b66 <_impl_k_queue_get+0x62>
   13bbe:	e7c2      	b.n	13b46 <_impl_k_queue_get+0x42>

00013bc0 <sys_dlist_remove>:
	node->prev->next = node->next;
   13bc0:	e890 000c 	ldmia.w	r0, {r2, r3}
   13bc4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13bc6:	6802      	ldr	r2, [r0, #0]
   13bc8:	6053      	str	r3, [r2, #4]
   13bca:	4770      	bx	lr

00013bcc <_abort_timeout>:
{
   13bcc:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13bce:	6900      	ldr	r0, [r0, #16]
{
   13bd0:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13bd2:	1c43      	adds	r3, r0, #1
   13bd4:	d00e      	beq.n	13bf4 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13bd6:	4b08      	ldr	r3, [pc, #32]	; (13bf8 <_abort_timeout+0x2c>)
   13bd8:	699b      	ldr	r3, [r3, #24]
   13bda:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
   13bdc:	bf1f      	itttt	ne
   13bde:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13be0:	6913      	ldrne	r3, [r2, #16]
   13be2:	18c0      	addne	r0, r0, r3
   13be4:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
   13be6:	4608      	mov	r0, r1
   13be8:	f7ff ffea 	bl	13bc0 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   13bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bf0:	610b      	str	r3, [r1, #16]
	return 0;
   13bf2:	2000      	movs	r0, #0
}
   13bf4:	bd08      	pop	{r3, pc}
   13bf6:	bf00      	nop
   13bf8:	20001988 	.word	0x20001988

00013bfc <_Swap>:
{
   13bfc:	b510      	push	{r4, lr}
   13bfe:	4604      	mov	r4, r0
	_check_stack_sentinel();
   13c00:	f000 fc14 	bl	1442c <_check_stack_sentinel>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13c04:	4b03      	ldr	r3, [pc, #12]	; (13c14 <_Swap+0x18>)
   13c06:	2200      	movs	r2, #0
	return __swap(key);
   13c08:	4620      	mov	r0, r4
}
   13c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13c0e:	601a      	str	r2, [r3, #0]
	return __swap(key);
   13c10:	f7ed bc80 	b.w	1514 <__swap>
   13c14:	200019bc 	.word	0x200019bc

00013c18 <k_spin_lock.isra.11>:
	__asm__ volatile(
   13c18:	f04f 0320 	mov.w	r3, #32
   13c1c:	f3ef 8011 	mrs	r0, BASEPRI
   13c20:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
   13c24:	4770      	bx	lr
	...

00013c28 <update_cache>:
	return list->head == list;
   13c28:	4b0d      	ldr	r3, [pc, #52]	; (13c60 <update_cache+0x38>)
   13c2a:	4619      	mov	r1, r3
   13c2c:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c30:	428a      	cmp	r2, r1
   13c32:	d000      	beq.n	13c36 <update_cache+0xe>
	return th ? th : _current_cpu->idle_thread;
   13c34:	b902      	cbnz	r2, 13c38 <update_cache+0x10>
   13c36:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
   13c38:	b970      	cbnz	r0, 13c58 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
   13c3a:	6899      	ldr	r1, [r3, #8]
   13c3c:	b161      	cbz	r1, 13c58 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
   13c3e:	7a48      	ldrb	r0, [r1, #9]
   13c40:	06c0      	lsls	r0, r0, #27
   13c42:	d109      	bne.n	13c58 <update_cache+0x30>
   13c44:	6a48      	ldr	r0, [r1, #36]	; 0x24
   13c46:	3001      	adds	r0, #1
   13c48:	d106      	bne.n	13c58 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
   13c4a:	8948      	ldrh	r0, [r1, #10]
   13c4c:	287f      	cmp	r0, #127	; 0x7f
   13c4e:	d903      	bls.n	13c58 <update_cache+0x30>
	return thread == _idle_thread;
   13c50:	4804      	ldr	r0, [pc, #16]	; (13c64 <update_cache+0x3c>)
	if (_is_idle(_current)) {
   13c52:	6800      	ldr	r0, [r0, #0]
   13c54:	4281      	cmp	r1, r0
   13c56:	d101      	bne.n	13c5c <update_cache+0x34>
		_kernel.ready_q.cache = th;
   13c58:	621a      	str	r2, [r3, #32]
   13c5a:	4770      	bx	lr
		_kernel.ready_q.cache = _current;
   13c5c:	6219      	str	r1, [r3, #32]
}
   13c5e:	4770      	bx	lr
   13c60:	20001988 	.word	0x20001988
   13c64:	000184dc 	.word	0x000184dc

00013c68 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   13c68:	f990 000a 	ldrsb.w	r0, [r0, #10]
   13c6c:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
   13c70:	4298      	cmp	r0, r3
   13c72:	bfac      	ite	ge
   13c74:	2000      	movge	r0, #0
   13c76:	2001      	movlt	r0, #1
   13c78:	4770      	bx	lr
	...

00013c7c <_remove_thread_from_ready_q>:
{
   13c7c:	b510      	push	{r4, lr}
   13c7e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13c80:	f7ff ffca 	bl	13c18 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
   13c84:	7a4b      	ldrb	r3, [r1, #9]
   13c86:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
   13c88:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
   13c8a:	d50d      	bpl.n	13ca8 <_remove_thread_from_ready_q+0x2c>
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c8c:	4608      	mov	r0, r1
   13c8e:	f7ff ff97 	bl	13bc0 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
   13c92:	7a4b      	ldrb	r3, [r1, #9]
   13c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13c98:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
   13c9a:	4b05      	ldr	r3, [pc, #20]	; (13cb0 <_remove_thread_from_ready_q+0x34>)
   13c9c:	6898      	ldr	r0, [r3, #8]
   13c9e:	1a43      	subs	r3, r0, r1
   13ca0:	4258      	negs	r0, r3
   13ca2:	4158      	adcs	r0, r3
   13ca4:	f7ff ffc0 	bl	13c28 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13ca8:	f384 8811 	msr	BASEPRI, r4
   13cac:	bd10      	pop	{r4, pc}
   13cae:	bf00      	nop
   13cb0:	20001988 	.word	0x20001988

00013cb4 <_find_first_thread_to_unpend>:
{
   13cb4:	b508      	push	{r3, lr}
   13cb6:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
   13cb8:	f7ff ffae 	bl	13c18 <k_spin_lock.isra.11>
	return list->head == list;
   13cbc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13cbe:	429a      	cmp	r2, r3
   13cc0:	bf08      	it	eq
   13cc2:	2300      	moveq	r3, #0
   13cc4:	f380 8811 	msr	BASEPRI, r0
}
   13cc8:	4618      	mov	r0, r3
   13cca:	bd08      	pop	{r3, pc}

00013ccc <_unpend_thread_no_timeout>:
{
   13ccc:	b510      	push	{r4, lr}
   13cce:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
   13cd0:	f7ff ffa2 	bl	13c18 <k_spin_lock.isra.11>
   13cd4:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13cd6:	4608      	mov	r0, r1
   13cd8:	f7ff ff72 	bl	13bc0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13cdc:	7a4b      	ldrb	r3, [r1, #9]
   13cde:	f023 0302 	bic.w	r3, r3, #2
   13ce2:	724b      	strb	r3, [r1, #9]
   13ce4:	f384 8811 	msr	BASEPRI, r4
   13ce8:	bd10      	pop	{r4, pc}

00013cea <_unpend_first_thread>:
{
   13cea:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
   13cec:	2100      	movs	r1, #0
   13cee:	f7ff ffe1 	bl	13cb4 <_find_first_thread_to_unpend>

	if (thread) {
   13cf2:	4604      	mov	r4, r0
   13cf4:	b128      	cbz	r0, 13d02 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
   13cf6:	f7ff ffe9 	bl	13ccc <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
   13cfa:	f104 0014 	add.w	r0, r4, #20
   13cfe:	f7ff ff65 	bl	13bcc <_abort_timeout>
}
   13d02:	4620      	mov	r0, r4
   13d04:	bd10      	pop	{r4, pc}

00013d06 <_unpend_thread>:
{
   13d06:	b510      	push	{r4, lr}
   13d08:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
   13d0a:	f7ff ffdf 	bl	13ccc <_unpend_thread_no_timeout>
   13d0e:	f104 0014 	add.w	r0, r4, #20
}
   13d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d16:	f7ff bf59 	b.w	13bcc <_abort_timeout>
	...

00013d1c <_reschedule>:
   13d1c:	f3ef 8305 	mrs	r3, IPSR
   13d20:	2b0d      	cmp	r3, #13
   13d22:	d809      	bhi.n	13d38 <_reschedule+0x1c>
   13d24:	b11b      	cbz	r3, 13d2e <_reschedule+0x12>
   13d26:	4b07      	ldr	r3, [pc, #28]	; (13d44 <_reschedule+0x28>)
   13d28:	685b      	ldr	r3, [r3, #4]
   13d2a:	051b      	lsls	r3, r3, #20
   13d2c:	d504      	bpl.n	13d38 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
   13d2e:	4b06      	ldr	r3, [pc, #24]	; (13d48 <_reschedule+0x2c>)
   13d30:	689a      	ldr	r2, [r3, #8]
   13d32:	6a1b      	ldr	r3, [r3, #32]
   13d34:	429a      	cmp	r2, r3
   13d36:	d103      	bne.n	13d40 <_reschedule+0x24>
   13d38:	f380 8811 	msr	BASEPRI, r0
}
   13d3c:	2000      	movs	r0, #0
   13d3e:	4770      	bx	lr
		return _Swap(key);
   13d40:	f7ff bf5c 	b.w	13bfc <_Swap>
   13d44:	e000ed00 	.word	0xe000ed00
   13d48:	20001988 	.word	0x20001988

00013d4c <k_sched_unlock>:
{
   13d4c:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
   13d4e:	f7ff ff63 	bl	13c18 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
   13d52:	4b0a      	ldr	r3, [pc, #40]	; (13d7c <k_sched_unlock+0x30>)
   13d54:	689a      	ldr	r2, [r3, #8]
   13d56:	7ad3      	ldrb	r3, [r2, #11]
   13d58:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
   13d5a:	4604      	mov	r4, r0
		++_current->base.sched_locked;
   13d5c:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
   13d5e:	2001      	movs	r0, #1
   13d60:	f7ff ff62 	bl	13c28 <update_cache>
   13d64:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
   13d68:	f04f 0320 	mov.w	r3, #32
   13d6c:	f3ef 8011 	mrs	r0, BASEPRI
   13d70:	f383 8811 	msr	BASEPRI, r3
}
   13d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
   13d78:	f7ff bfd0 	b.w	13d1c <_reschedule>
   13d7c:	20001988 	.word	0x20001988

00013d80 <_priq_dumb_add>:
{
   13d80:	b510      	push	{r4, lr}
	return list->head == list;
   13d82:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13d84:	4298      	cmp	r0, r3
   13d86:	bf08      	it	eq
   13d88:	2300      	moveq	r3, #0
   13d8a:	b193      	cbz	r3, 13db2 <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
   13d8c:	f991 400a 	ldrsb.w	r4, [r1, #10]
   13d90:	f993 200a 	ldrsb.w	r2, [r3, #10]
   13d94:	4294      	cmp	r4, r2
   13d96:	da06      	bge.n	13da6 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
   13d98:	685a      	ldr	r2, [r3, #4]
   13d9a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13d9c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13d9e:	685a      	ldr	r2, [r3, #4]
   13da0:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13da2:	6059      	str	r1, [r3, #4]
   13da4:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
   13da6:	6842      	ldr	r2, [r0, #4]
   13da8:	4293      	cmp	r3, r2
   13daa:	d002      	beq.n	13db2 <_priq_dumb_add+0x32>
   13dac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13dae:	2b00      	cmp	r3, #0
   13db0:	d1eb      	bne.n	13d8a <_priq_dumb_add+0xa>
	node->next = list;
   13db2:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13db4:	6843      	ldr	r3, [r0, #4]
   13db6:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13db8:	6843      	ldr	r3, [r0, #4]
   13dba:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13dbc:	6041      	str	r1, [r0, #4]
   13dbe:	bd10      	pop	{r4, pc}

00013dc0 <_add_thread_to_ready_q>:
{
   13dc0:	b538      	push	{r3, r4, r5, lr}
   13dc2:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13dc4:	f7ff ff28 	bl	13c18 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13dc8:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
   13dca:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13dcc:	4806      	ldr	r0, [pc, #24]	; (13de8 <_add_thread_to_ready_q+0x28>)
   13dce:	f7ff ffd7 	bl	13d80 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13dd2:	7a63      	ldrb	r3, [r4, #9]
   13dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dd8:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13dda:	2000      	movs	r0, #0
   13ddc:	f7ff ff24 	bl	13c28 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13de0:	f385 8811 	msr	BASEPRI, r5
   13de4:	bd38      	pop	{r3, r4, r5, pc}
   13de6:	bf00      	nop
   13de8:	200019ac 	.word	0x200019ac

00013dec <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   13dec:	7a42      	ldrb	r2, [r0, #9]
   13dee:	06d2      	lsls	r2, r2, #27
   13df0:	d104      	bne.n	13dfc <_ready_thread+0x10>
   13df2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13df4:	3301      	adds	r3, #1
   13df6:	d101      	bne.n	13dfc <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   13df8:	f7ff bfe2 	b.w	13dc0 <_add_thread_to_ready_q>
   13dfc:	4770      	bx	lr
	...

00013e00 <_add_timeout>:
{
   13e00:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13e02:	610b      	str	r3, [r1, #16]
{
   13e04:	4604      	mov	r4, r0
   13e06:	461d      	mov	r5, r3
	timeout->thread = thread;
   13e08:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13e0a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   13e0c:	bb03      	cbnz	r3, 13e50 <_add_timeout+0x50>
	__asm__ volatile(
   13e0e:	f04f 0320 	mov.w	r3, #32
   13e12:	f3ef 8611 	mrs	r6, BASEPRI
   13e16:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   13e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e1e:	610b      	str	r3, [r1, #16]
	if (thread) {
   13e20:	b170      	cbz	r0, 13e40 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13e22:	68cb      	ldr	r3, [r1, #12]
   13e24:	b113      	cbz	r3, 13e2c <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
   13e26:	f7ff ff51 	bl	13ccc <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   13e2a:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e2c:	7a63      	ldrb	r3, [r4, #9]
   13e2e:	f023 0304 	bic.w	r3, r3, #4
   13e32:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
   13e34:	4620      	mov	r0, r4
   13e36:	f7ff ffd9 	bl	13dec <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e3a:	f386 8811 	msr	BASEPRI, r6
   13e3e:	bd70      	pop	{r4, r5, r6, pc}
   13e40:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   13e44:	694b      	ldr	r3, [r1, #20]
   13e46:	b32b      	cbz	r3, 13e94 <_add_timeout+0x94>
			timeout->func(timeout);
   13e48:	4608      	mov	r0, r1
}
   13e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13e4e:	4718      	bx	r3
	return list->head == list;
   13e50:	4a11      	ldr	r2, [pc, #68]	; (13e98 <_add_timeout+0x98>)
   13e52:	4610      	mov	r0, r2
   13e54:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e58:	4283      	cmp	r3, r0
   13e5a:	d10c      	bne.n	13e76 <_add_timeout+0x76>
	node->next = list;
   13e5c:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   13e5e:	6993      	ldr	r3, [r2, #24]
   13e60:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   13e62:	6993      	ldr	r3, [r2, #24]
   13e64:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13e66:	6191      	str	r1, [r2, #24]
   13e68:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   13e6a:	1b64      	subs	r4, r4, r5
   13e6c:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   13e6e:	6994      	ldr	r4, [r2, #24]
   13e70:	42a3      	cmp	r3, r4
   13e72:	d0f3      	beq.n	13e5c <_add_timeout+0x5c>
   13e74:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13e76:	2b00      	cmp	r3, #0
   13e78:	d0f0      	beq.n	13e5c <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   13e7a:	690c      	ldr	r4, [r1, #16]
   13e7c:	691d      	ldr	r5, [r3, #16]
   13e7e:	42ac      	cmp	r4, r5
   13e80:	dcf3      	bgt.n	13e6a <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   13e82:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13e84:	1b2c      	subs	r4, r5, r4
   13e86:	611c      	str	r4, [r3, #16]
   13e88:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   13e8a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   13e8c:	685a      	ldr	r2, [r3, #4]
   13e8e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13e90:	6059      	str	r1, [r3, #4]
   13e92:	bd70      	pop	{r4, r5, r6, pc}
   13e94:	bd70      	pop	{r4, r5, r6, pc}
   13e96:	bf00      	nop
   13e98:	20001988 	.word	0x20001988

00013e9c <_move_thread_to_end_of_prio_q>:
{
   13e9c:	b538      	push	{r3, r4, r5, lr}
   13e9e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
   13ea0:	f7ff feba 	bl	13c18 <k_spin_lock.isra.11>
   13ea4:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13ea6:	4620      	mov	r0, r4
   13ea8:	f7ff fe8a 	bl	13bc0 <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
   13eac:	4621      	mov	r1, r4
   13eae:	4806      	ldr	r0, [pc, #24]	; (13ec8 <_move_thread_to_end_of_prio_q+0x2c>)
   13eb0:	f7ff ff66 	bl	13d80 <_priq_dumb_add>
	thread->base.thread_state |= states;
   13eb4:	7a63      	ldrb	r3, [r4, #9]
   13eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13eba:	7263      	strb	r3, [r4, #9]
		update_cache(0);
   13ebc:	2000      	movs	r0, #0
   13ebe:	f7ff feb3 	bl	13c28 <update_cache>
   13ec2:	f385 8811 	msr	BASEPRI, r5
   13ec6:	bd38      	pop	{r3, r4, r5, pc}
   13ec8:	200019ac 	.word	0x200019ac

00013ecc <pend>:
{
   13ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ece:	4605      	mov	r5, r0
   13ed0:	4614      	mov	r4, r2
   13ed2:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
   13ed4:	f7ff fed2 	bl	13c7c <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   13ed8:	7a6b      	ldrb	r3, [r5, #9]
   13eda:	f043 0302 	orr.w	r3, r3, #2
   13ede:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
   13ee0:	1c63      	adds	r3, r4, #1
   13ee2:	d012      	beq.n	13f0a <pend+0x3e>
	__asm__ volatile(
   13ee4:	f04f 0320 	mov.w	r3, #32
   13ee8:	f3ef 8711 	mrs	r7, BASEPRI
   13eec:	f383 8811 	msr	BASEPRI, r3
   13ef0:	230a      	movs	r3, #10
   13ef2:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13ef4:	4632      	mov	r2, r6
   13ef6:	fbb4 f3f3 	udiv	r3, r4, r3
   13efa:	f105 0114 	add.w	r1, r5, #20
   13efe:	3301      	adds	r3, #1
   13f00:	4628      	mov	r0, r5
   13f02:	f7ff ff7d 	bl	13e00 <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f06:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
   13f0a:	b12e      	cbz	r6, 13f18 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
   13f0c:	4629      	mov	r1, r5
   13f0e:	4630      	mov	r0, r6
}
   13f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
   13f14:	f7ff bf34 	b.w	13d80 <_priq_dumb_add>
   13f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00013f1c <_pend_current_thread>:
{
   13f1c:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
   13f1e:	4b05      	ldr	r3, [pc, #20]	; (13f34 <_pend_current_thread+0x18>)
{
   13f20:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
   13f22:	6898      	ldr	r0, [r3, #8]
   13f24:	f7ff ffd2 	bl	13ecc <pend>
	return _Swap(key);
   13f28:	4620      	mov	r0, r4
}
   13f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _Swap(key);
   13f2e:	f7ff be65 	b.w	13bfc <_Swap>
   13f32:	bf00      	nop
   13f34:	20001988 	.word	0x20001988

00013f38 <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f38:	4b13      	ldr	r3, [pc, #76]	; (13f88 <_is_thread_time_slicing+0x50>)
   13f3a:	681b      	ldr	r3, [r3, #0]
   13f3c:	2b00      	cmp	r3, #0
{
   13f3e:	b510      	push	{r4, lr}
   13f40:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f42:	dd1f      	ble.n	13f84 <_is_thread_time_slicing+0x4c>
   13f44:	8943      	ldrh	r3, [r0, #10]
   13f46:	2b7f      	cmp	r3, #127	; 0x7f
   13f48:	d81c      	bhi.n	13f84 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13f4a:	4b10      	ldr	r3, [pc, #64]	; (13f8c <_is_thread_time_slicing+0x54>)
   13f4c:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
   13f50:	681b      	ldr	r3, [r3, #0]
   13f52:	4299      	cmp	r1, r3
   13f54:	db16      	blt.n	13f84 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
   13f56:	f7ff fe5f 	bl	13c18 <k_spin_lock.isra.11>
	return list->head == list;
   13f5a:	490d      	ldr	r1, [pc, #52]	; (13f90 <_is_thread_time_slicing+0x58>)
   13f5c:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f60:	428b      	cmp	r3, r1
   13f62:	4604      	mov	r4, r0
   13f64:	d00a      	beq.n	13f7c <_is_thread_time_slicing+0x44>
		if (next) {
   13f66:	b15b      	cbz	r3, 13f80 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
   13f68:	f992 000a 	ldrsb.w	r0, [r2, #10]
   13f6c:	f993 300a 	ldrsb.w	r3, [r3, #10]
   13f70:	1ac3      	subs	r3, r0, r3
   13f72:	4258      	negs	r0, r3
   13f74:	4158      	adcs	r0, r3
   13f76:	f384 8811 	msr	BASEPRI, r4
	return ret;
   13f7a:	bd10      	pop	{r4, pc}
   13f7c:	2000      	movs	r0, #0
   13f7e:	e7fa      	b.n	13f76 <_is_thread_time_slicing+0x3e>
   13f80:	4618      	mov	r0, r3
   13f82:	e7f8      	b.n	13f76 <_is_thread_time_slicing+0x3e>
		return 0;
   13f84:	2000      	movs	r0, #0
}
   13f86:	bd10      	pop	{r4, pc}
   13f88:	20001860 	.word	0x20001860
   13f8c:	20001864 	.word	0x20001864
   13f90:	20001988 	.word	0x20001988

00013f94 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13f94:	4b01      	ldr	r3, [pc, #4]	; (13f9c <_update_time_slice_before_swap+0x8>)
   13f96:	2200      	movs	r2, #0
   13f98:	601a      	str	r2, [r3, #0]
   13f9a:	4770      	bx	lr
   13f9c:	200019bc 	.word	0x200019bc

00013fa0 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
   13fa0:	b538      	push	{r3, r4, r5, lr}
   13fa2:	4605      	mov	r5, r0
	int need_sched = 0;
   13fa4:	2000      	movs	r0, #0
	return list->head == list;
   13fa6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13fa8:	42a5      	cmp	r5, r4
   13faa:	d000      	beq.n	13fae <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
   13fac:	b904      	cbnz	r4, 13fb0 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
   13fae:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
   13fb0:	4620      	mov	r0, r4
   13fb2:	f7ff fea8 	bl	13d06 <_unpend_thread>
		_ready_thread(th);
   13fb6:	4620      	mov	r0, r4
   13fb8:	f7ff ff18 	bl	13dec <_ready_thread>
		need_sched = 1;
   13fbc:	2001      	movs	r0, #1
   13fbe:	e7f2      	b.n	13fa6 <_unpend_all+0x6>

00013fc0 <_sched_init>:
	list->head = (sys_dnode_t *)list;
   13fc0:	4b02      	ldr	r3, [pc, #8]	; (13fcc <_sched_init+0xc>)
   13fc2:	f103 0224 	add.w	r2, r3, #36	; 0x24
   13fc6:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
   13fc8:	629a      	str	r2, [r3, #40]	; 0x28
   13fca:	4770      	bx	lr
   13fcc:	20001988 	.word	0x20001988

00013fd0 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
   13fd0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
   13fd2:	4c12      	ldr	r4, [pc, #72]	; (1401c <_impl_k_yield+0x4c>)
   13fd4:	4b12      	ldr	r3, [pc, #72]	; (14020 <_impl_k_yield+0x50>)
   13fd6:	68a2      	ldr	r2, [r4, #8]
   13fd8:	681b      	ldr	r3, [r3, #0]
   13fda:	429a      	cmp	r2, r3
   13fdc:	d00f      	beq.n	13ffe <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
   13fde:	f7ff fe1b 	bl	13c18 <k_spin_lock.isra.11>
   13fe2:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
   13fe4:	68a0      	ldr	r0, [r4, #8]
   13fe6:	f7ff fdeb 	bl	13bc0 <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13fea:	68a1      	ldr	r1, [r4, #8]
   13fec:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13ff0:	f7ff fec6 	bl	13d80 <_priq_dumb_add>
			update_cache(1);
   13ff4:	2001      	movs	r0, #1
   13ff6:	f7ff fe17 	bl	13c28 <update_cache>
   13ffa:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
   13ffe:	6a22      	ldr	r2, [r4, #32]
   14000:	68a3      	ldr	r3, [r4, #8]
   14002:	429a      	cmp	r2, r3
   14004:	d009      	beq.n	1401a <_impl_k_yield+0x4a>
	__asm__ volatile(
   14006:	f04f 0320 	mov.w	r3, #32
   1400a:	f3ef 8011 	mrs	r0, BASEPRI
   1400e:	f383 8811 	msr	BASEPRI, r3
		_Swap(irq_lock());
	}
#endif
}
   14012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		_Swap(irq_lock());
   14016:	f7ff bdf1 	b.w	13bfc <_Swap>
   1401a:	bd38      	pop	{r3, r4, r5, pc}
   1401c:	20001988 	.word	0x20001988
   14020:	000184dc 	.word	0x000184dc

00014024 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   14024:	4b01      	ldr	r3, [pc, #4]	; (1402c <_impl_k_current_get+0x8>)
   14026:	6898      	ldr	r0, [r3, #8]
   14028:	4770      	bx	lr
   1402a:	bf00      	nop
   1402c:	20001988 	.word	0x20001988

00014030 <init_sem_module>:

/*
 * Complete initialization of statically defined semaphores.
 */
static int init_sem_module(struct device *dev)
{
   14030:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_sem *sem;

	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14032:	4b0a      	ldr	r3, [pc, #40]	; (1405c <init_sem_module+0x2c>)
   14034:	490a      	ldr	r1, [pc, #40]	; (14060 <init_sem_module+0x30>)
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   14036:	4a0b      	ldr	r2, [pc, #44]	; (14064 <init_sem_module+0x34>)
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14038:	428b      	cmp	r3, r1
   1403a:	d301      	bcc.n	14040 <init_sem_module+0x10>
	}
	return 0;
}
   1403c:	2000      	movs	r0, #0
   1403e:	bd10      	pop	{r4, pc}
   14040:	f04f 0420 	mov.w	r4, #32
   14044:	f3ef 8011 	mrs	r0, BASEPRI
   14048:	f384 8811 	msr	BASEPRI, r4
		SYS_TRACING_OBJ_INIT(k_sem, sem);
   1404c:	6814      	ldr	r4, [r2, #0]
   1404e:	619c      	str	r4, [r3, #24]
   14050:	6013      	str	r3, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14052:	f380 8811 	msr	BASEPRI, r0
	for (sem = _k_sem_list_start; sem < _k_sem_list_end; sem++) {
   14056:	331c      	adds	r3, #28
   14058:	e7ee      	b.n	14038 <init_sem_module+0x8>
   1405a:	bf00      	nop
   1405c:	20003f78 	.word	0x20003f78
   14060:	20003f94 	.word	0x20003f94
   14064:	200019b4 	.word	0x200019b4

00014068 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   14068:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1406c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1406e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   14070:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   14072:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   14074:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   14076:	6143      	str	r3, [r0, #20]
	__asm__ volatile(
   14078:	f04f 0320 	mov.w	r3, #32
   1407c:	f3ef 8211 	mrs	r2, BASEPRI
   14080:	f383 8811 	msr	BASEPRI, r3
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);
   14084:	4b03      	ldr	r3, [pc, #12]	; (14094 <_impl_k_sem_init+0x2c>)
   14086:	6819      	ldr	r1, [r3, #0]
   14088:	6181      	str	r1, [r0, #24]
   1408a:	6018      	str	r0, [r3, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1408c:	f382 8811 	msr	BASEPRI, r2
   14090:	4770      	bx	lr
   14092:	bf00      	nop
   14094:	200019b4 	.word	0x200019b4

00014098 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   14098:	b570      	push	{r4, r5, r6, lr}
   1409a:	4604      	mov	r4, r0
	__asm__ volatile(
   1409c:	f04f 0320 	mov.w	r3, #32
   140a0:	f3ef 8611 	mrs	r6, BASEPRI
   140a4:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   140a8:	f7ff fe1f 	bl	13cea <_unpend_first_thread>
	if (thread) {
   140ac:	4605      	mov	r5, r0
   140ae:	b160      	cbz	r0, 140ca <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
   140b0:	7a43      	ldrb	r3, [r0, #9]
   140b2:	06db      	lsls	r3, r3, #27
   140b4:	d102      	bne.n	140bc <_impl_k_sem_give+0x24>
   140b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   140b8:	3301      	adds	r3, #1
   140ba:	d012      	beq.n	140e2 <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   140bc:	2300      	movs	r3, #0
   140be:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
   140c0:	4630      	mov	r0, r6
}
   140c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
   140c6:	f7ff be29 	b.w	13d1c <_reschedule>
	sem->count += (sem->count != sem->limit);
   140ca:	68a3      	ldr	r3, [r4, #8]
   140cc:	68e2      	ldr	r2, [r4, #12]
   140ce:	429a      	cmp	r2, r3
   140d0:	bf18      	it	ne
   140d2:	3301      	addne	r3, #1
   140d4:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   140d6:	2102      	movs	r1, #2
   140d8:	f104 0010 	add.w	r0, r4, #16
   140dc:	f000 fcb6 	bl	14a4c <_handle_obj_poll_events>
   140e0:	e7ee      	b.n	140c0 <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
   140e2:	f7ff fe6d 	bl	13dc0 <_add_thread_to_ready_q>
   140e6:	e7e9      	b.n	140bc <_impl_k_sem_give+0x24>

000140e8 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   140e8:	b410      	push	{r4}
   140ea:	460a      	mov	r2, r1
   140ec:	4604      	mov	r4, r0
   140ee:	f04f 0320 	mov.w	r3, #32
   140f2:	f3ef 8011 	mrs	r0, BASEPRI
   140f6:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   140fa:	68a3      	ldr	r3, [r4, #8]
   140fc:	b133      	cbz	r3, 1410c <_impl_k_sem_take+0x24>
		sem->count--;
   140fe:	3b01      	subs	r3, #1
   14100:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14102:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
   14106:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
   14108:	bc10      	pop	{r4}
   1410a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
   1410c:	b921      	cbnz	r1, 14118 <_impl_k_sem_take+0x30>
   1410e:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
   14112:	f06f 000f 	mvn.w	r0, #15
   14116:	e7f7      	b.n	14108 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
   14118:	4621      	mov	r1, r4
}
   1411a:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
   1411c:	f7ff befe 	b.w	13f1c <_pend_current_thread>

00014120 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   14120:	4b03      	ldr	r3, [pc, #12]	; (14130 <_impl_k_uptime_get_32+0x10>)
   14122:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   14126:	230a      	movs	r3, #10
   14128:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   1412c:	4770      	bx	lr
   1412e:	bf00      	nop
   14130:	200019c0 	.word	0x200019c0

00014134 <_tick_get>:
	__asm__ volatile(
   14134:	f04f 0220 	mov.w	r2, #32
   14138:	f3ef 8311 	mrs	r3, BASEPRI
   1413c:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   14140:	4a02      	ldr	r2, [pc, #8]	; (1414c <_tick_get+0x18>)
   14142:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14146:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   1414a:	4770      	bx	lr
   1414c:	200019c0 	.word	0x200019c0

00014150 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   14150:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   14152:	f7ff ffef 	bl	14134 <_tick_get>
   14156:	240a      	movs	r4, #10
   14158:	fba0 2304 	umull	r2, r3, r0, r4
   1415c:	fb04 3301 	mla	r3, r4, r1, r3
}
   14160:	4610      	mov	r0, r2
   14162:	4619      	mov	r1, r3
   14164:	bd10      	pop	{r4, pc}
	...

00014168 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   14168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1416c:	4607      	mov	r7, r0
   1416e:	b085      	sub	sp, #20
	__asm__ volatile(
   14170:	f04f 0320 	mov.w	r3, #32
   14174:	f3ef 8011 	mrs	r0, BASEPRI
   14178:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   1417c:	4961      	ldr	r1, [pc, #388]	; (14304 <_nano_sys_clock_tick_announce+0x19c>)
   1417e:	e9d1 4500 	ldrd	r4, r5, [r1]
   14182:	19e2      	adds	r2, r4, r7
   14184:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   14188:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1418c:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   14190:	ae02      	add	r6, sp, #8
   14192:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   14194:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
   14196:	f04f 0320 	mov.w	r3, #32
   1419a:	f3ef 8011 	mrs	r0, BASEPRI
   1419e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   141a2:	4c59      	ldr	r4, [pc, #356]	; (14308 <_nano_sys_clock_tick_announce+0x1a0>)
   141a4:	4621      	mov	r1, r4
   141a6:	4602      	mov	r2, r0
   141a8:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   141ac:	428b      	cmp	r3, r1
   141ae:	d000      	beq.n	141b2 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
   141b0:	b9fb      	cbnz	r3, 141f2 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141b2:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   141b6:	68a0      	ldr	r0, [r4, #8]
   141b8:	f7ff febe 	bl	13f38 <_is_thread_time_slicing>
   141bc:	b1b0      	cbz	r0, 141ec <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   141be:	4a53      	ldr	r2, [pc, #332]	; (1430c <_nano_sys_clock_tick_announce+0x1a4>)
   141c0:	6811      	ldr	r1, [r2, #0]
   141c2:	230a      	movs	r3, #10
   141c4:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   141c8:	4b51      	ldr	r3, [pc, #324]	; (14310 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   141ca:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   141cc:	681b      	ldr	r3, [r3, #0]
   141ce:	429f      	cmp	r7, r3
   141d0:	db0c      	blt.n	141ec <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
   141d2:	2300      	movs	r3, #0
   141d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   141d6:	f04f 0320 	mov.w	r3, #32
   141da:	f3ef 8511 	mrs	r5, BASEPRI
   141de:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   141e2:	68a0      	ldr	r0, [r4, #8]
   141e4:	f7ff fe5a 	bl	13e9c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   141e8:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   141ec:	b005      	add	sp, #20
   141ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   141f2:	4d48      	ldr	r5, [pc, #288]	; (14314 <_nano_sys_clock_tick_announce+0x1ac>)
   141f4:	9501      	str	r5, [sp, #4]
   141f6:	2101      	movs	r1, #1
   141f8:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
   141fa:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
   141fe:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
   14200:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   14204:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   14206:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   14208:	bfaa      	itet	ge
   1420a:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   1420e:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   14212:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   14216:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   14218:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
   1421a:	691d      	ldr	r5, [r3, #16]
   1421c:	4298      	cmp	r0, r3
   1421e:	bf14      	ite	ne
   14220:	6818      	ldrne	r0, [r3, #0]
   14222:	2000      	moveq	r0, #0
   14224:	b9d5      	cbnz	r5, 1425c <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
   14226:	e893 0220 	ldmia.w	r3, {r5, r9}
   1422a:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   1422e:	681d      	ldr	r5, [r3, #0]
   14230:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   14234:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
   14236:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   1423a:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
   1423c:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
   1423e:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   14240:	f8c3 c010 	str.w	ip, [r3, #16]
   14244:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14248:	f04f 0320 	mov.w	r3, #32
   1424c:	f3ef 8211 	mrs	r2, BASEPRI
   14250:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   14254:	4603      	mov	r3, r0
   14256:	2800      	cmp	r0, #0
   14258:	d1d4      	bne.n	14204 <_nano_sys_clock_tick_announce+0x9c>
   1425a:	e001      	b.n	14260 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
   1425c:	2900      	cmp	r1, #0
   1425e:	dcf1      	bgt.n	14244 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14260:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   14264:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14266:	42b0      	cmp	r0, r6
   14268:	d103      	bne.n	14272 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
   1426a:	9a01      	ldr	r2, [sp, #4]
   1426c:	2300      	movs	r3, #0
   1426e:	6013      	str	r3, [r2, #0]
   14270:	e7a1      	b.n	141b6 <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   14272:	2800      	cmp	r0, #0
   14274:	d0f9      	beq.n	1426a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   14276:	9b03      	ldr	r3, [sp, #12]
   14278:	4298      	cmp	r0, r3
   1427a:	d102      	bne.n	14282 <_nano_sys_clock_tick_announce+0x11a>
   1427c:	f04f 0b00 	mov.w	fp, #0
   14280:	e001      	b.n	14286 <_nano_sys_clock_tick_announce+0x11e>
   14282:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14286:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   1428a:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
   1428e:	e890 000c 	ldmia.w	r0, {r2, r3}
   14292:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14294:	6802      	ldr	r2, [r0, #0]
   14296:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   14298:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
   1429a:	f04f 0320 	mov.w	r3, #32
   1429e:	f3ef 8811 	mrs	r8, BASEPRI
   142a2:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   142a6:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
   142aa:	b1d6      	cbz	r6, 142e2 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
   142ac:	68c3      	ldr	r3, [r0, #12]
   142ae:	b123      	cbz	r3, 142ba <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
   142b0:	4630      	mov	r0, r6
   142b2:	f7ff fd0b 	bl	13ccc <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
   142b6:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   142ba:	7a73      	ldrb	r3, [r6, #9]
   142bc:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   142c0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   142c4:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   142c6:	d102      	bne.n	142ce <_nano_sys_clock_tick_announce+0x166>
   142c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   142ca:	3301      	adds	r3, #1
   142cc:	d015      	beq.n	142fa <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   142ce:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   142d2:	f1bb 0f00 	cmp.w	fp, #0
   142d6:	d0c8      	beq.n	1426a <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
   142d8:	9b03      	ldr	r3, [sp, #12]
   142da:	455b      	cmp	r3, fp
   142dc:	d108      	bne.n	142f0 <_nano_sys_clock_tick_announce+0x188>
   142de:	2300      	movs	r3, #0
   142e0:	e008      	b.n	142f4 <_nano_sys_clock_tick_announce+0x18c>
   142e2:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
   142e6:	6943      	ldr	r3, [r0, #20]
   142e8:	2b00      	cmp	r3, #0
   142ea:	d0f2      	beq.n	142d2 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
   142ec:	4798      	blx	r3
   142ee:	e7f0      	b.n	142d2 <_nano_sys_clock_tick_announce+0x16a>
   142f0:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   142f4:	4658      	mov	r0, fp
   142f6:	469b      	mov	fp, r3
   142f8:	e7c9      	b.n	1428e <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
   142fa:	4630      	mov	r0, r6
   142fc:	f7ff fd60 	bl	13dc0 <_add_thread_to_ready_q>
   14300:	e7e5      	b.n	142ce <_nano_sys_clock_tick_announce+0x166>
   14302:	bf00      	nop
   14304:	200019c0 	.word	0x200019c0
   14308:	20001988 	.word	0x20001988
   1430c:	200019bc 	.word	0x200019bc
   14310:	20001860 	.word	0x20001860
   14314:	200019b8 	.word	0x200019b8

00014318 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   14318:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1431a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1431e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14322:	4903      	ldr	r1, [pc, #12]	; (14330 <k_sys_work_q_init+0x18>)
   14324:	4803      	ldr	r0, [pc, #12]	; (14334 <k_sys_work_q_init+0x1c>)
   14326:	f000 f999 	bl	1465c <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   1432a:	2000      	movs	r0, #0
   1432c:	bd08      	pop	{r3, pc}
   1432e:	bf00      	nop
   14330:	20003668 	.word	0x20003668
   14334:	200019c8 	.word	0x200019c8

00014338 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14338:	6903      	ldr	r3, [r0, #16]
   1433a:	1c5a      	adds	r2, r3, #1
   1433c:	d011      	beq.n	14362 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1433e:	4a0a      	ldr	r2, [pc, #40]	; (14368 <_abort_timeout+0x30>)
   14340:	6992      	ldr	r2, [r2, #24]
   14342:	4290      	cmp	r0, r2
   14344:	bf1f      	itttt	ne
   14346:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14348:	690a      	ldrne	r2, [r1, #16]
   1434a:	189b      	addne	r3, r3, r2
   1434c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   1434e:	e890 000c 	ldmia.w	r0, {r2, r3}
   14352:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14354:	6802      	ldr	r2, [r0, #0]
   14356:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1435c:	6103      	str	r3, [r0, #16]
	return 0;
   1435e:	2000      	movs	r0, #0
   14360:	4770      	bx	lr
		return _INACTIVE;
   14362:	4618      	mov	r0, r3
}
   14364:	4770      	bx	lr
   14366:	bf00      	nop
   14368:	20001988 	.word	0x20001988

0001436c <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
   1436c:	7a42      	ldrb	r2, [r0, #9]
   1436e:	06d2      	lsls	r2, r2, #27
   14370:	d104      	bne.n	1437c <_ready_thread+0x10>
   14372:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14374:	3301      	adds	r3, #1
   14376:	d101      	bne.n	1437c <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
   14378:	f7ff bd22 	b.w	13dc0 <_add_thread_to_ready_q>
   1437c:	4770      	bx	lr
	...

00014380 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   14380:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   14382:	f04f 0320 	mov.w	r3, #32
   14386:	f3ef 8611 	mrs	r6, BASEPRI
   1438a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1438e:	4a19      	ldr	r2, [pc, #100]	; (143f4 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
   14390:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14392:	230a      	movs	r3, #10
   14394:	3109      	adds	r1, #9
   14396:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   1439a:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1439c:	6241      	str	r1, [r0, #36]	; 0x24
   1439e:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   143a0:	2300      	movs	r3, #0
   143a2:	6203      	str	r3, [r0, #32]
   143a4:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   143a8:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   143aa:	f100 0514 	add.w	r5, r0, #20
   143ae:	d108      	bne.n	143c2 <schedule_new_thread.part.11+0x42>
	node->next = list;
   143b0:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
   143b2:	6993      	ldr	r3, [r2, #24]
   143b4:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
   143b6:	6993      	ldr	r3, [r2, #24]
   143b8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   143ba:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   143bc:	f386 8811 	msr	BASEPRI, r6
   143c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   143c2:	2b00      	cmp	r3, #0
   143c4:	d0f4      	beq.n	143b0 <schedule_new_thread.part.11+0x30>
   143c6:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   143ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
   143cc:	691f      	ldr	r7, [r3, #16]
   143ce:	42bc      	cmp	r4, r7
   143d0:	dc08      	bgt.n	143e4 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
   143d2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   143d4:	1b3c      	subs	r4, r7, r4
   143d6:	611c      	str	r4, [r3, #16]
   143d8:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
   143da:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
   143dc:	685a      	ldr	r2, [r3, #4]
   143de:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   143e0:	605d      	str	r5, [r3, #4]
   143e2:	e7eb      	b.n	143bc <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   143e4:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   143e6:	4573      	cmp	r3, lr
   143e8:	6244      	str	r4, [r0, #36]	; 0x24
   143ea:	d0e1      	beq.n	143b0 <schedule_new_thread.part.11+0x30>
   143ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   143ee:	2b00      	cmp	r3, #0
   143f0:	d1eb      	bne.n	143ca <schedule_new_thread.part.11+0x4a>
   143f2:	e7dd      	b.n	143b0 <schedule_new_thread.part.11+0x30>
   143f4:	20001988 	.word	0x20001988

000143f8 <k_thread_foreach>:
void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data) { }
   143f8:	4770      	bx	lr
	...

000143fc <k_is_in_isr>:
   143fc:	f3ef 8005 	mrs	r0, IPSR
   14400:	280d      	cmp	r0, #13
   14402:	d807      	bhi.n	14414 <k_is_in_isr+0x18>
   14404:	b138      	cbz	r0, 14416 <k_is_in_isr+0x1a>
   14406:	4b04      	ldr	r3, [pc, #16]	; (14418 <k_is_in_isr+0x1c>)
   14408:	6858      	ldr	r0, [r3, #4]
   1440a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   1440e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   14412:	4770      	bx	lr
   14414:	2001      	movs	r0, #1
}
   14416:	4770      	bx	lr
   14418:	e000ed00 	.word	0xe000ed00

0001441c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   1441c:	4b02      	ldr	r3, [pc, #8]	; (14428 <_is_thread_essential+0xc>)
   1441e:	689b      	ldr	r3, [r3, #8]
   14420:	7a18      	ldrb	r0, [r3, #8]
}
   14422:	f000 0001 	and.w	r0, r0, #1
   14426:	4770      	bx	lr
   14428:	20001988 	.word	0x20001988

0001442c <_check_stack_sentinel>:
	if (_current->base.thread_state & _THREAD_DUMMY) {
   1442c:	4b09      	ldr	r3, [pc, #36]	; (14454 <_check_stack_sentinel+0x28>)
   1442e:	689b      	ldr	r3, [r3, #8]
   14430:	7a5a      	ldrb	r2, [r3, #9]
   14432:	07d2      	lsls	r2, r2, #31
   14434:	d40d      	bmi.n	14452 <_check_stack_sentinel+0x26>
	stack = (u32_t *)_current->stack_info.start;
   14436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	if (*stack != STACK_SENTINEL) {
   14438:	681a      	ldr	r2, [r3, #0]
   1443a:	f1b2 3ff0 	cmp.w	r2, #4042322160	; 0xf0f0f0f0
   1443e:	d008      	beq.n	14452 <_check_stack_sentinel+0x26>
		*stack = STACK_SENTINEL;
   14440:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
   14444:	601a      	str	r2, [r3, #0]
		_k_except_reason(_NANO_ERR_STACK_CHK_FAIL);
   14446:	4040      	eors	r0, r0
   14448:	f380 8811 	msr	BASEPRI, r0
   1444c:	f04f 0002 	mov.w	r0, #2
   14450:	df02      	svc	2
   14452:	4770      	bx	lr
   14454:	20001988 	.word	0x20001988

00014458 <_impl_k_thread_start>:
{
   14458:	b510      	push	{r4, lr}
	__asm__ volatile(
   1445a:	f04f 0320 	mov.w	r3, #32
   1445e:	f3ef 8411 	mrs	r4, BASEPRI
   14462:	f383 8811 	msr	BASEPRI, r3
   14466:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14468:	0759      	lsls	r1, r3, #29
   1446a:	d402      	bmi.n	14472 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1446c:	f384 8811 	msr	BASEPRI, r4
   14470:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14472:	f023 0304 	bic.w	r3, r3, #4
   14476:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
   14478:	f7ff ff78 	bl	1436c <_ready_thread>
	_reschedule(key);
   1447c:	4620      	mov	r0, r4
}
   1447e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
   14482:	f7ff bc4b 	b.w	13d1c <_reschedule>
	...

00014488 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14488:	b530      	push	{r4, r5, lr}
   1448a:	b087      	sub	sp, #28
   1448c:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1448e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14490:	9504      	str	r5, [sp, #16]
   14492:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14494:	9503      	str	r5, [sp, #12]
   14496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14498:	9502      	str	r5, [sp, #8]
   1449a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1449c:	9501      	str	r5, [sp, #4]
   1449e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   144a0:	9500      	str	r5, [sp, #0]
   144a2:	f7ed fa39 	bl	1918 <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   144a6:	4b04      	ldr	r3, [pc, #16]	; (144b8 <_setup_new_thread+0x30>)
   144a8:	689b      	ldr	r3, [r3, #8]
   144aa:	b913      	cbnz	r3, 144b2 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   144ac:	6663      	str	r3, [r4, #100]	; 0x64
}
   144ae:	b007      	add	sp, #28
   144b0:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
   144b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   144b4:	e7fa      	b.n	144ac <_setup_new_thread+0x24>
   144b6:	bf00      	nop
   144b8:	20001988 	.word	0x20001988

000144bc <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   144bc:	b570      	push	{r4, r5, r6, lr}
   144be:	b086      	sub	sp, #24
   144c0:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   144c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   144c4:	9604      	str	r6, [sp, #16]
   144c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   144c8:	9603      	str	r6, [sp, #12]
   144ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   144cc:	9602      	str	r6, [sp, #8]
   144ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   144d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   144d2:	9601      	str	r6, [sp, #4]
   144d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   144d6:	9600      	str	r6, [sp, #0]
   144d8:	f7ff ffd6 	bl	14488 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   144dc:	1c6b      	adds	r3, r5, #1
   144de:	d003      	beq.n	144e8 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   144e0:	b92d      	cbnz	r5, 144ee <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   144e2:	4620      	mov	r0, r4
   144e4:	f7ff ffb8 	bl	14458 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   144e8:	4620      	mov	r0, r4
   144ea:	b006      	add	sp, #24
   144ec:	bd70      	pop	{r4, r5, r6, pc}
   144ee:	4629      	mov	r1, r5
   144f0:	4620      	mov	r0, r4
   144f2:	f7ff ff45 	bl	14380 <schedule_new_thread.part.11>
   144f6:	e7f7      	b.n	144e8 <_impl_k_thread_create+0x2c>

000144f8 <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   144f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   144fa:	b510      	push	{r4, lr}
   144fc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   144fe:	b103      	cbz	r3, 14502 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   14500:	4798      	blx	r3
   14502:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   14504:	06da      	lsls	r2, r3, #27
   14506:	d106      	bne.n	14516 <_k_thread_single_abort+0x1e>
   14508:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1450a:	3201      	adds	r2, #1
   1450c:	d103      	bne.n	14516 <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   1450e:	4620      	mov	r0, r4
   14510:	f7ff fbb4 	bl	13c7c <_remove_thread_from_ready_q>
   14514:	e00b      	b.n	1452e <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
   14516:	079b      	lsls	r3, r3, #30
   14518:	d502      	bpl.n	14520 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
   1451a:	4620      	mov	r0, r4
   1451c:	f7ff fbd6 	bl	13ccc <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
   14520:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14522:	3301      	adds	r3, #1
   14524:	d003      	beq.n	1452e <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
   14526:	f104 0014 	add.w	r0, r4, #20
   1452a:	f7ff ff05 	bl	14338 <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   1452e:	7a63      	ldrb	r3, [r4, #9]
   14530:	f043 0308 	orr.w	r3, r3, #8
   14534:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
   14536:	bd10      	pop	{r4, pc}

00014538 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   14538:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   1453a:	4f21      	ldr	r7, [pc, #132]	; (145c0 <_init_static_threads+0x88>)
   1453c:	4d21      	ldr	r5, [pc, #132]	; (145c4 <_init_static_threads+0x8c>)
{
   1453e:	b087      	sub	sp, #28
   14540:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   14542:	42bd      	cmp	r5, r7
   14544:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   14548:	d314      	bcc.n	14574 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   1454a:	4b1f      	ldr	r3, [pc, #124]	; (145c8 <_init_static_threads+0x90>)
   1454c:	689a      	ldr	r2, [r3, #8]
   1454e:	7ad3      	ldrb	r3, [r2, #11]
   14550:	3b01      	subs	r3, #1
   14552:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14554:	f04f 0320 	mov.w	r3, #32
   14558:	f3ef 8511 	mrs	r5, BASEPRI
   1455c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14560:	4c18      	ldr	r4, [pc, #96]	; (145c4 <_init_static_threads+0x8c>)
   14562:	42b4      	cmp	r4, r6
   14564:	d31f      	bcc.n	145a6 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14566:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   1456a:	b007      	add	sp, #28
   1456c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14570:	f7ff bbec 	b.w	13d4c <k_sched_unlock>
		_setup_new_thread(
   14574:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14578:	9304      	str	r3, [sp, #16]
   1457a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1457e:	9303      	str	r3, [sp, #12]
   14580:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14584:	9302      	str	r3, [sp, #8]
   14586:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1458a:	9301      	str	r3, [sp, #4]
   1458c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14590:	9300      	str	r3, [sp, #0]
   14592:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14596:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14598:	f7ff ff76 	bl	14488 <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1459c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   145a0:	651d      	str	r5, [r3, #80]	; 0x50
   145a2:	4625      	mov	r5, r4
   145a4:	e7cd      	b.n	14542 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   145a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   145a8:	1c4b      	adds	r3, r1, #1
   145aa:	d003      	beq.n	145b4 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   145ac:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   145ae:	b919      	cbnz	r1, 145b8 <_init_static_threads+0x80>
   145b0:	f7ff ff52 	bl	14458 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   145b4:	342c      	adds	r4, #44	; 0x2c
   145b6:	e7d4      	b.n	14562 <_init_static_threads+0x2a>
   145b8:	f7ff fee2 	bl	14380 <schedule_new_thread.part.11>
   145bc:	e7fa      	b.n	145b4 <_init_static_threads+0x7c>
   145be:	bf00      	nop
   145c0:	20003f78 	.word	0x20003f78
   145c4:	20003f78 	.word	0x20003f78
   145c8:	20001988 	.word	0x20001988

000145cc <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   145cc:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   145ce:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   145d0:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   145d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   145d6:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   145d8:	72c3      	strb	r3, [r0, #11]
   145da:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
   145dc:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
   145de:	61c3      	str	r3, [r0, #28]
	t->func = func;
   145e0:	6283      	str	r3, [r0, #40]	; 0x28
   145e2:	4770      	bx	lr

000145e4 <k_work_submit_to_queue>:
{
   145e4:	b500      	push	{lr}
   145e6:	f101 0308 	add.w	r3, r1, #8
   145ea:	f3bf 8f5b 	dmb	ish
   145ee:	e853 2f00 	ldrex	r2, [r3]
   145f2:	f042 0e01 	orr.w	lr, r2, #1
   145f6:	e843 ec00 	strex	ip, lr, [r3]
   145fa:	f1bc 0f00 	cmp.w	ip, #0
   145fe:	d1f6      	bne.n	145ee <k_work_submit_to_queue+0xa>
   14600:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14604:	07d3      	lsls	r3, r2, #31
   14606:	d403      	bmi.n	14610 <k_work_submit_to_queue+0x2c>
}
   14608:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1460c:	f7ff ba56 	b.w	13abc <k_queue_append>
   14610:	f85d fb04 	ldr.w	pc, [sp], #4

00014614 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   14614:	f1a0 010c 	sub.w	r1, r0, #12
   14618:	6980      	ldr	r0, [r0, #24]
   1461a:	f7ff bfe3 	b.w	145e4 <k_work_submit_to_queue>

0001461e <work_q_main>:
{
   1461e:	b510      	push	{r4, lr}
   14620:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
   14622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14626:	4620      	mov	r0, r4
   14628:	f7ff fa6c 	bl	13b04 <_impl_k_queue_get>
		if (!work) {
   1462c:	4603      	mov	r3, r0
   1462e:	2800      	cmp	r0, #0
   14630:	d0f7      	beq.n	14622 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14632:	3308      	adds	r3, #8
		handler = work->handler;
   14634:	6842      	ldr	r2, [r0, #4]
   14636:	f3bf 8f5b 	dmb	ish
   1463a:	e853 1f00 	ldrex	r1, [r3]
   1463e:	f021 0e01 	bic.w	lr, r1, #1
   14642:	e843 ec00 	strex	ip, lr, [r3]
   14646:	f1bc 0f00 	cmp.w	ip, #0
   1464a:	d1f6      	bne.n	1463a <work_q_main+0x1c>
   1464c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14650:	07cb      	lsls	r3, r1, #31
   14652:	d500      	bpl.n	14656 <work_q_main+0x38>
			handler(work);
   14654:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14656:	f7ff fcbb 	bl	13fd0 <_impl_k_yield>
   1465a:	e7e2      	b.n	14622 <work_q_main+0x4>

0001465c <k_work_q_start>:
{
   1465c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1465e:	b087      	sub	sp, #28
   14660:	4604      	mov	r4, r0
   14662:	461f      	mov	r7, r3
   14664:	460d      	mov	r5, r1
   14666:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
   14668:	f7ff fa12 	bl	13a90 <_impl_k_queue_init>

   1466c:	2000      	movs	r0, #0
   1466e:	9005      	str	r0, [sp, #20]
   14670:	9004      	str	r0, [sp, #16]
   14672:	9002      	str	r0, [sp, #8]
   14674:	9001      	str	r0, [sp, #4]
   14676:	9703      	str	r7, [sp, #12]
   14678:	9400      	str	r4, [sp, #0]
   1467a:	4b04      	ldr	r3, [pc, #16]	; (1468c <k_work_q_start+0x30>)
   1467c:	4632      	mov	r2, r6
   1467e:	4629      	mov	r1, r5
   14680:	f104 0014 	add.w	r0, r4, #20
   14684:	f7ff ff1a 	bl	144bc <_impl_k_thread_create>
}
   14688:	b007      	add	sp, #28
   1468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1468c:	0001461f 	.word	0x0001461f

00014690 <k_delayed_work_init>:
	t->delta_ticks_from_prev = _INACTIVE;
   14690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	*work = (struct k_work)_K_WORK_INITIALIZER(handler);
   14694:	2300      	movs	r3, #0
   14696:	61c2      	str	r2, [r0, #28]
	t->func = func;
   14698:	4a04      	ldr	r2, [pc, #16]	; (146ac <k_delayed_work_init+0x1c>)
   1469a:	6003      	str	r3, [r0, #0]
   1469c:	6041      	str	r1, [r0, #4]
   1469e:	6083      	str	r3, [r0, #8]
	t->wait_q = NULL;
   146a0:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   146a2:	6143      	str	r3, [r0, #20]
	t->func = func;
   146a4:	6202      	str	r2, [r0, #32]

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   146a6:	6243      	str	r3, [r0, #36]	; 0x24
   146a8:	4770      	bx	lr
   146aa:	bf00      	nop
   146ac:	00014615 	.word	0x00014615

000146b0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   146b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   146b2:	f04f 0320 	mov.w	r3, #32
   146b6:	f3ef 8411 	mrs	r4, BASEPRI
   146ba:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   146be:	6a43      	ldr	r3, [r0, #36]	; 0x24
   146c0:	b923      	cbnz	r3, 146cc <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146c2:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   146c6:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   146ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146cc:	f3bf 8f5b 	dmb	ish
   146d0:	6883      	ldr	r3, [r0, #8]
   146d2:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   146d6:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   146d8:	f100 0508 	add.w	r5, r0, #8
   146dc:	d533      	bpl.n	14746 <k_delayed_work_cancel+0x96>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   146de:	6a42      	ldr	r2, [r0, #36]	; 0x24
   146e0:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   146e2:	2100      	movs	r1, #0
   146e4:	2b00      	cmp	r3, #0
   146e6:	d0ec      	beq.n	146c2 <k_delayed_work_cancel+0x12>
   146e8:	4298      	cmp	r0, r3
   146ea:	d127      	bne.n	1473c <k_delayed_work_cancel+0x8c>
   146ec:	6803      	ldr	r3, [r0, #0]
   146ee:	6857      	ldr	r7, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   146f0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode);
   146f4:	b9c9      	cbnz	r1, 1472a <k_delayed_work_cancel+0x7a>
   146f6:	42b8      	cmp	r0, r7
	list->head = node;
   146f8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode);
   146fa:	d100      	bne.n	146fe <k_delayed_work_cancel+0x4e>
	list->tail = node;
   146fc:	6053      	str	r3, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   146fe:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14700:	f003 0303 	and.w	r3, r3, #3
   14704:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   14706:	2300      	movs	r3, #0
   14708:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1470a:	f3bf 8f5b 	dmb	ish
   1470e:	e855 2f00 	ldrex	r2, [r5]
   14712:	f022 0201 	bic.w	r2, r2, #1
   14716:	e845 2100 	strex	r1, r2, [r5]
   1471a:	2900      	cmp	r1, #0
   1471c:	d1f7      	bne.n	1470e <k_delayed_work_cancel+0x5e>
   1471e:	f3bf 8f5b 	dmb	ish
   14722:	f384 8811 	msr	BASEPRI, r4
	return 0;
   14726:	4618      	mov	r0, r3
   14728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1472a:	680e      	ldr	r6, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1472c:	f006 0603 	and.w	r6, r6, #3
   14730:	4333      	orrs	r3, r6
Z_GENLIST_REMOVE(sflist, sfnode);
   14732:	42b8      	cmp	r0, r7
	parent->next_and_flags = cur_flags | (unative_t)child;
   14734:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14736:	bf08      	it	eq
   14738:	6051      	streq	r1, [r2, #4]
   1473a:	e7e0      	b.n	146fe <k_delayed_work_cancel+0x4e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1473c:	681e      	ldr	r6, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode);
   1473e:	4619      	mov	r1, r3
   14740:	f026 0303 	bic.w	r3, r6, #3
   14744:	e7ce      	b.n	146e4 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   14746:	69c1      	ldr	r1, [r0, #28]
   14748:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   1474a:	f100 020c 	add.w	r2, r0, #12
   1474e:	d0da      	beq.n	14706 <k_delayed_work_cancel+0x56>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14750:	4b08      	ldr	r3, [pc, #32]	; (14774 <k_delayed_work_cancel+0xc4>)
   14752:	699b      	ldr	r3, [r3, #24]
   14754:	429a      	cmp	r2, r3
   14756:	bf1f      	itttt	ne
   14758:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1475a:	6913      	ldrne	r3, [r2, #16]
   1475c:	185b      	addne	r3, r3, r1
   1475e:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14760:	6903      	ldr	r3, [r0, #16]
   14762:	68c2      	ldr	r2, [r0, #12]
   14764:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   14766:	68c2      	ldr	r2, [r0, #12]
   14768:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   1476a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1476e:	61c3      	str	r3, [r0, #28]
   14770:	e7c9      	b.n	14706 <k_delayed_work_cancel+0x56>
   14772:	bf00      	nop
   14774:	20001988 	.word	0x20001988

00014778 <k_delayed_work_submit_to_queue>:
{
   14778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1477a:	4607      	mov	r7, r0
   1477c:	460c      	mov	r4, r1
   1477e:	4615      	mov	r5, r2
	__asm__ volatile(
   14780:	f04f 0320 	mov.w	r3, #32
   14784:	f3ef 8611 	mrs	r6, BASEPRI
   14788:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   1478c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1478e:	b123      	cbz	r3, 1479a <k_delayed_work_submit_to_queue+0x22>
   14790:	4283      	cmp	r3, r0
   14792:	d00b      	beq.n	147ac <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   14794:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14798:	e00d      	b.n	147b6 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   1479a:	b138      	cbz	r0, 147ac <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   1479c:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   1479e:	b96d      	cbnz	r5, 147bc <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   147a0:	4621      	mov	r1, r4
   147a2:	4638      	mov	r0, r7
   147a4:	f7ff ff1e 	bl	145e4 <k_work_submit_to_queue>
	err = 0;
   147a8:	2000      	movs	r0, #0
   147aa:	e004      	b.n	147b6 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   147ac:	4620      	mov	r0, r4
   147ae:	f7ff ff7f 	bl	146b0 <k_delayed_work_cancel>
		if (err < 0) {
   147b2:	2800      	cmp	r0, #0
   147b4:	daf2      	bge.n	1479c <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147b6:	f386 8811 	msr	BASEPRI, r6
}
   147ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   147bc:	220a      	movs	r2, #10
   147be:	3509      	adds	r5, #9
   147c0:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   147c4:	4a16      	ldr	r2, [pc, #88]	; (14820 <k_delayed_work_submit_to_queue+0xa8>)
	timeout->thread = thread;
   147c6:	2300      	movs	r3, #0
   147c8:	4611      	mov	r1, r2
   147ca:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   147cc:	61a3      	str	r3, [r4, #24]
   147ce:	f851 3f14 	ldr.w	r3, [r1, #20]!
		_add_timeout(NULL, &work->timeout, NULL,
   147d2:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   147d4:	428b      	cmp	r3, r1
   147d6:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   147da:	61e5      	str	r5, [r4, #28]
   147dc:	d106      	bne.n	147ec <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   147de:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   147e0:	6993      	ldr	r3, [r2, #24]
   147e2:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   147e4:	6993      	ldr	r3, [r2, #24]
   147e6:	601f      	str	r7, [r3, #0]
	list->tail = node;
   147e8:	6197      	str	r7, [r2, #24]
   147ea:	e7dd      	b.n	147a8 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   147ec:	2b00      	cmp	r3, #0
   147ee:	d0f6      	beq.n	147de <k_delayed_work_submit_to_queue+0x66>
   147f0:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
   147f4:	69e0      	ldr	r0, [r4, #28]
   147f6:	691d      	ldr	r5, [r3, #16]
   147f8:	42a8      	cmp	r0, r5
   147fa:	dc08      	bgt.n	1480e <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   147fc:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   147fe:	1a28      	subs	r0, r5, r0
   14800:	6118      	str	r0, [r3, #16]
   14802:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   14804:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   14806:	685a      	ldr	r2, [r3, #4]
   14808:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   1480a:	605f      	str	r7, [r3, #4]
   1480c:	e7cc      	b.n	147a8 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   1480e:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   14810:	4573      	cmp	r3, lr
   14812:	61e0      	str	r0, [r4, #28]
   14814:	d0e3      	beq.n	147de <k_delayed_work_submit_to_queue+0x66>
   14816:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14818:	2b00      	cmp	r3, #0
   1481a:	d1eb      	bne.n	147f4 <k_delayed_work_submit_to_queue+0x7c>
   1481c:	e7df      	b.n	147de <k_delayed_work_submit_to_queue+0x66>
   1481e:	bf00      	nop
   14820:	20001988 	.word	0x20001988

00014824 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   14824:	2314      	movs	r3, #20
   14826:	b530      	push	{r4, r5, lr}
   14828:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1482c:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
   1482e:	2900      	cmp	r1, #0
   14830:	da00      	bge.n	14834 <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   14832:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14834:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
   14836:	6084      	str	r4, [r0, #8]
	switch (event->type) {
   14838:	f003 030f 	and.w	r3, r3, #15
   1483c:	2b02      	cmp	r3, #2
   1483e:	d003      	beq.n	14848 <clear_event_registrations+0x24>
   14840:	2b04      	cmp	r3, #4
   14842:	d001      	beq.n	14848 <clear_event_registrations+0x24>
   14844:	2b01      	cmp	r3, #1
   14846:	d104      	bne.n	14852 <clear_event_registrations+0x2e>
	node->prev->next = node->next;
   14848:	6843      	ldr	r3, [r0, #4]
   1484a:	6805      	ldr	r5, [r0, #0]
   1484c:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
   1484e:	6805      	ldr	r5, [r0, #0]
   14850:	606b      	str	r3, [r5, #4]
   14852:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   14856:	f04f 0320 	mov.w	r3, #32
   1485a:	f3ef 8211 	mrs	r2, BASEPRI
   1485e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   14862:	3901      	subs	r1, #1
   14864:	3814      	subs	r0, #20
   14866:	e7e2      	b.n	1482e <clear_event_registrations+0xa>

00014868 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
   14868:	6883      	ldr	r3, [r0, #8]
{
   1486a:	b570      	push	{r4, r5, r6, lr}
   1486c:	4605      	mov	r5, r0
   1486e:	460e      	mov	r6, r1
	if (!event->poller) {
   14870:	b1d3      	cbz	r3, 148a8 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
   14872:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
   14874:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
   14876:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
   14878:	7a63      	ldrb	r3, [r4, #9]
   1487a:	079a      	lsls	r2, r3, #30
   1487c:	d514      	bpl.n	148a8 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   1487e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14880:	3302      	adds	r3, #2
   14882:	d01a      	beq.n	148ba <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
   14884:	4620      	mov	r0, r4
   14886:	f7ff fa3e 	bl	13d06 <_unpend_thread>
	_set_thread_return_value(thread,
   1488a:	2e00      	cmp	r6, #0
   1488c:	bf0c      	ite	eq
   1488e:	f06f 0303 	mvneq.w	r3, #3
   14892:	2300      	movne	r3, #0
   14894:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
   14896:	7a63      	ldrb	r3, [r4, #9]
   14898:	06db      	lsls	r3, r3, #27
   1489a:	d105      	bne.n	148a8 <signal_poll_event+0x40>
   1489c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1489e:	3301      	adds	r3, #1
   148a0:	d102      	bne.n	148a8 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
   148a2:	4620      	mov	r0, r4
   148a4:	f7ff fa8c 	bl	13dc0 <_add_thread_to_ready_q>
	event->state |= state;
   148a8:	7b6b      	ldrb	r3, [r5, #13]
   148aa:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   148ae:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   148b2:	2000      	movs	r0, #0
	event->state |= state;
   148b4:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   148b6:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
   148b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   148ba:	f06f 000a 	mvn.w	r0, #10
}
   148be:	bd70      	pop	{r4, r5, r6, pc}

000148c0 <add_event>:
{
   148c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   148c2:	6803      	ldr	r3, [r0, #0]
   148c4:	4298      	cmp	r0, r3
   148c6:	4604      	mov	r4, r0
   148c8:	460e      	mov	r6, r1
   148ca:	4617      	mov	r7, r2
   148cc:	d106      	bne.n	148dc <add_event+0x1c>
	node->next = list;
   148ce:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
   148d0:	6863      	ldr	r3, [r4, #4]
   148d2:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
   148d4:	6863      	ldr	r3, [r4, #4]
   148d6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   148d8:	6066      	str	r6, [r4, #4]
   148da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   148dc:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   148de:	2b00      	cmp	r3, #0
   148e0:	d0f5      	beq.n	148ce <add_event+0xe>
   148e2:	689b      	ldr	r3, [r3, #8]
   148e4:	6811      	ldr	r1, [r2, #0]
   148e6:	6818      	ldr	r0, [r3, #0]
   148e8:	f7ff f9be 	bl	13c68 <_is_t1_higher_prio_than_t2>
   148ec:	2800      	cmp	r0, #0
   148ee:	d1ee      	bne.n	148ce <add_event+0xe>
	return list->head == list;
   148f0:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   148f2:	42ac      	cmp	r4, r5
   148f4:	d0eb      	beq.n	148ce <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   148f6:	2d00      	cmp	r5, #0
   148f8:	d0e9      	beq.n	148ce <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
   148fa:	68ab      	ldr	r3, [r5, #8]
   148fc:	6838      	ldr	r0, [r7, #0]
   148fe:	6819      	ldr	r1, [r3, #0]
   14900:	f7ff f9b2 	bl	13c68 <_is_t1_higher_prio_than_t2>
   14904:	b130      	cbz	r0, 14914 <add_event+0x54>
		node->prev = insert_point->prev;
   14906:	686b      	ldr	r3, [r5, #4]
   14908:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
   1490a:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
   1490c:	686b      	ldr	r3, [r5, #4]
   1490e:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
   14910:	606e      	str	r6, [r5, #4]
   14912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14914:	6863      	ldr	r3, [r4, #4]
   14916:	429d      	cmp	r5, r3
   14918:	d0d9      	beq.n	148ce <add_event+0xe>
   1491a:	682d      	ldr	r5, [r5, #0]
   1491c:	e7eb      	b.n	148f6 <add_event+0x36>

0001491e <k_poll_event_init>:
{
   1491e:	b530      	push	{r4, r5, lr}
	event->type = type;
   14920:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   14922:	6103      	str	r3, [r0, #16]
	event->type = type;
   14924:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   14928:	7b81      	ldrb	r1, [r0, #14]
   1492a:	f362 0100 	bfi	r1, r2, #0, #1
   1492e:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   14930:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   14932:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   14934:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   14938:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   1493c:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   1493e:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   14940:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14942:	bd30      	pop	{r4, r5, pc}

00014944 <_impl_k_poll>:
{
   14944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14948:	4b3f      	ldr	r3, [pc, #252]	; (14a48 <_impl_k_poll+0x104>)
{
   1494a:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1494c:	689b      	ldr	r3, [r3, #8]
   1494e:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
   14950:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   14952:	2301      	movs	r3, #1
{
   14954:	4607      	mov	r7, r0
   14956:	468a      	mov	sl, r1
   14958:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
   1495a:	9301      	str	r3, [sp, #4]
   1495c:	4604      	mov	r4, r0
	int last_registered = -1, rc;
   1495e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
   14962:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
   14964:	4556      	cmp	r6, sl
   14966:	db10      	blt.n	1498a <_impl_k_poll+0x46>
   14968:	f04f 0320 	mov.w	r3, #32
   1496c:	f3ef 8611 	mrs	r6, BASEPRI
   14970:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
   14974:	9c01      	ldr	r4, [sp, #4]
   14976:	2c00      	cmp	r4, #0
   14978:	d13f      	bne.n	149fa <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
   1497a:	4632      	mov	r2, r6
   1497c:	4629      	mov	r1, r5
   1497e:	4638      	mov	r0, r7
   14980:	f7ff ff50 	bl	14824 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14984:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
   14988:	e040      	b.n	14a0c <_impl_k_poll+0xc8>
	__asm__ volatile(
   1498a:	f04f 0320 	mov.w	r3, #32
   1498e:	f3ef 8b11 	mrs	fp, BASEPRI
   14992:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
   14996:	7b62      	ldrb	r2, [r4, #13]
   14998:	f002 030f 	and.w	r3, r2, #15
   1499c:	2b02      	cmp	r3, #2
   1499e:	d003      	beq.n	149a8 <_impl_k_poll+0x64>
   149a0:	2b04      	cmp	r3, #4
   149a2:	d004      	beq.n	149ae <_impl_k_poll+0x6a>
   149a4:	2b01      	cmp	r3, #1
   149a6:	d106      	bne.n	149b6 <_impl_k_poll+0x72>
		if (event->signal->signaled) {
   149a8:	6921      	ldr	r1, [r4, #16]
   149aa:	6889      	ldr	r1, [r1, #8]
   149ac:	e001      	b.n	149b2 <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
   149ae:	6921      	ldr	r1, [r4, #16]
   149b0:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
   149b2:	2900      	cmp	r1, #0
   149b4:	d13d      	bne.n	14a32 <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
   149b6:	f1b8 0f00 	cmp.w	r8, #0
   149ba:	d014      	beq.n	149e6 <_impl_k_poll+0xa2>
   149bc:	9a01      	ldr	r2, [sp, #4]
   149be:	b192      	cbz	r2, 149e6 <_impl_k_poll+0xa2>
	switch (event->type) {
   149c0:	2b02      	cmp	r3, #2
   149c2:	d007      	beq.n	149d4 <_impl_k_poll+0x90>
   149c4:	2b04      	cmp	r3, #4
   149c6:	d013      	beq.n	149f0 <_impl_k_poll+0xac>
   149c8:	2b01      	cmp	r3, #1
   149ca:	d109      	bne.n	149e0 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
   149cc:	466a      	mov	r2, sp
   149ce:	4621      	mov	r1, r4
   149d0:	6920      	ldr	r0, [r4, #16]
   149d2:	e003      	b.n	149dc <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
   149d4:	6920      	ldr	r0, [r4, #16]
   149d6:	466a      	mov	r2, sp
   149d8:	4621      	mov	r1, r4
   149da:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   149dc:	f7ff ff70 	bl	148c0 <add_event>
	event->poller = poller;
   149e0:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
   149e4:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   149e6:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   149ea:	3601      	adds	r6, #1
   149ec:	3414      	adds	r4, #20
   149ee:	e7b9      	b.n	14964 <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
   149f0:	6920      	ldr	r0, [r4, #16]
   149f2:	466a      	mov	r2, sp
   149f4:	4621      	mov	r1, r4
   149f6:	3008      	adds	r0, #8
   149f8:	e7f0      	b.n	149dc <_impl_k_poll+0x98>
	poller.is_polling = 0;
   149fa:	2300      	movs	r3, #0
   149fc:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
   149fe:	f1b8 0f00 	cmp.w	r8, #0
   14a02:	d107      	bne.n	14a14 <_impl_k_poll+0xd0>
   14a04:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
   14a08:	f06f 040a 	mvn.w	r4, #10
}
   14a0c:	4620      	mov	r0, r4
   14a0e:	b005      	add	sp, #20
   14a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14a14:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14a16:	4642      	mov	r2, r8
   14a18:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14a1a:	9102      	str	r1, [sp, #8]
   14a1c:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
   14a1e:	f7ff fa7d 	bl	13f1c <_pend_current_thread>
   14a22:	4604      	mov	r4, r0
	__asm__ volatile(
   14a24:	f04f 0320 	mov.w	r3, #32
   14a28:	f3ef 8611 	mrs	r6, BASEPRI
   14a2c:	f383 8811 	msr	BASEPRI, r3
   14a30:	e7a3      	b.n	1497a <_impl_k_poll+0x36>
	event->state |= state;
   14a32:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
   14a36:	f363 1207 	bfi	r2, r3, #4, #4
   14a3a:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
   14a3c:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
   14a40:	f8cd 9004 	str.w	r9, [sp, #4]
   14a44:	e7cf      	b.n	149e6 <_impl_k_poll+0xa2>
   14a46:	bf00      	nop
   14a48:	20001988 	.word	0x20001988

00014a4c <_handle_obj_poll_events>:
	return list->head == list;
   14a4c:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   14a4e:	4298      	cmp	r0, r3
   14a50:	d007      	beq.n	14a62 <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
   14a52:	e893 0005 	ldmia.w	r3, {r0, r2}
   14a56:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14a58:	6818      	ldr	r0, [r3, #0]
   14a5a:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
   14a5c:	4618      	mov	r0, r3
   14a5e:	f7ff bf03 	b.w	14868 <signal_poll_event>
   14a62:	4770      	bx	lr

00014a64 <_impl_k_poll_signal>:
	return 0;
}
#endif

int _impl_k_poll_signal(struct k_poll_signal *signal, int result)
{
   14a64:	b538      	push	{r3, r4, r5, lr}
   14a66:	f04f 0320 	mov.w	r3, #32
   14a6a:	f3ef 8511 	mrs	r5, BASEPRI
   14a6e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   14a72:	6803      	ldr	r3, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;

	signal->result = result;
   14a74:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   14a76:	4298      	cmp	r0, r3
	signal->signaled = 1;
   14a78:	f04f 0101 	mov.w	r1, #1
   14a7c:	6081      	str	r1, [r0, #8]
   14a7e:	d00d      	beq.n	14a9c <_impl_k_poll_signal+0x38>
	node->prev->next = node->next;
   14a80:	e893 0005 	ldmia.w	r3, {r0, r2}
   14a84:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   14a86:	6818      	ldr	r0, [r3, #0]
   14a88:	6042      	str	r2, [r0, #4]
	if (!poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   14a8a:	4618      	mov	r0, r3
   14a8c:	f7ff feec 	bl	14868 <signal_poll_event>
   14a90:	4604      	mov	r4, r0

	_reschedule(key);
   14a92:	4628      	mov	r0, r5
   14a94:	f7ff f942 	bl	13d1c <_reschedule>
	return rc;
}
   14a98:	4620      	mov	r0, r4
   14a9a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14a9c:	f385 8811 	msr	BASEPRI, r5
		return 0;
   14aa0:	2400      	movs	r4, #0
   14aa2:	e7f9      	b.n	14a98 <_impl_k_poll_signal+0x34>

00014aa4 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   14aa4:	4770      	bx	lr
