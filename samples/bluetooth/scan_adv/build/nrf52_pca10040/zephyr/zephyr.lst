
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20002460 	.word	0x20002460

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	000019bd 	.word	0x000019bd
       8:	00001a11 	.word	0x00001a11
       c:	00001855 	.word	0x00001855
      10:	00001855 	.word	0x00001855
      14:	00001855 	.word	0x00001855
      18:	00001855 	.word	0x00001855
      1c:	00001855 	.word	0x00001855
      20:	00001855 	.word	0x00001855
      24:	00001855 	.word	0x00001855
      28:	00001855 	.word	0x00001855
      2c:	0000145d 	.word	0x0000145d
      30:	00001855 	.word	0x00001855
      34:	00001855 	.word	0x00001855
      38:	00001419 	.word	0x00001419
      3c:	00001855 	.word	0x00001855

00000040 <_irq_vector_table>:
      40:	00001981 00009cc7 00001981 00001981     ................
      50:	00001981 00001981 00001981 00001981     ................
      60:	00001981 00001981 00001981 00001981     ................
      70:	00001981 00001981 00001981 00001981     ................
      80:	00001981 00001981 00001981 00001981     ................
      90:	00001981 00001981 00001981 00001981     ................
      a0:	00001981 00001981 00001981 00001981     ................
      b0:	00001981 00001981 00001981 00001981     ................
      c0:	00001981 00001981 00001981 00001981     ................
      d0:	00001981 00001981 00001981              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00001155 00000000 000017cd     ....U...........
      ec:	00000000 000017cd 00000000 000017cd     ................
      fc:	00000000 000017cd 00000000 000017cd     ................
     10c:	00000000 0000b485 00000000 000017cd     ................
     11c:	00000000 000017cd 00000000 000017cd     ................
     12c:	00000000 000017cd 00000000 00009c8d     ................
     13c:	00000000 000017cd 20003458 0000b789     ........X4. ....
     14c:	00000000 000017cd 00000000 000017cd     ................
     15c:	00000000 000017cd 00000000 0000127d     ............}...
     16c:	00000000 000017cd 00000000 000017cd     ................
     17c:	00000000 000017cd 00000000 000017cd     ................
     18c:	00000000 000017cd 00000000 000017cd     ................
     19c:	00000000 00009cc1 00000000 000017cd     ................
     1ac:	00000000 000017cd 00000000 000017cd     ................
     1bc:	00000000 000017cd 00000000 000017cd     ................
     1cc:	00000000 000017cd 00000000 000017cd     ................
     1dc:	00000000 000017cd 00000000 000017cd     ................
     1ec:	00000000 000017cd 00000000 000017cd     ................
     1fc:	00000000 000017cd 00000000 000017cd     ................
     20c:	00000000 000017cd                       ........

00000214 <__aeabi_uldivmod>:
     214:	b953      	cbnz	r3, 22c <__aeabi_uldivmod+0x18>
     216:	b94a      	cbnz	r2, 22c <__aeabi_uldivmod+0x18>
     218:	2900      	cmp	r1, #0
     21a:	bf08      	it	eq
     21c:	2800      	cmpeq	r0, #0
     21e:	bf1c      	itt	ne
     220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     228:	f000 b98e 	b.w	548 <__aeabi_idiv0>
     22c:	f1ad 0c08 	sub.w	ip, sp, #8
     230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     234:	f000 f81a 	bl	26c <__udivmoddi4>
     238:	f8dd e004 	ldr.w	lr, [sp, #4]
     23c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     240:	b004      	add	sp, #16
     242:	4770      	bx	lr

00000244 <__popcountsi2>:
     244:	0843      	lsrs	r3, r0, #1
     246:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     24a:	1ac0      	subs	r0, r0, r3
     24c:	0883      	lsrs	r3, r0, #2
     24e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     252:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     256:	4418      	add	r0, r3
     258:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     25c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     260:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     264:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     268:	0e00      	lsrs	r0, r0, #24
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	468c      	mov	ip, r1
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	9e08      	ldr	r6, [sp, #32]
     278:	2b00      	cmp	r3, #0
     27a:	d151      	bne.n	320 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa0>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d96d      	bls.n	35e <CONFIG_BT_HCI_TX_STACK_SIZE+0xde>
     282:	fab2 fe82 	clz	lr, r2
     286:	f1be 0f00 	cmp.w	lr, #0
     28a:	d00b      	beq.n	2a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     28c:	f1ce 0c20 	rsb	ip, lr, #32
     290:	fa01 f50e 	lsl.w	r5, r1, lr
     294:	fa20 fc0c 	lsr.w	ip, r0, ip
     298:	fa02 f70e 	lsl.w	r7, r2, lr
     29c:	ea4c 0c05 	orr.w	ip, ip, r5
     2a0:	fa00 f40e 	lsl.w	r4, r0, lr
     2a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2a8:	0c25      	lsrs	r5, r4, #16
     2aa:	fbbc f8fa 	udiv	r8, ip, sl
     2ae:	fa1f f987 	uxth.w	r9, r7
     2b2:	fb0a cc18 	mls	ip, sl, r8, ip
     2b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ba:	fb08 f309 	mul.w	r3, r8, r9
     2be:	42ab      	cmp	r3, r5
     2c0:	d90a      	bls.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     2c2:	19ed      	adds	r5, r5, r7
     2c4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2c8:	f080 8123 	bcs.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2cc:	42ab      	cmp	r3, r5
     2ce:	f240 8120 	bls.w	512 <CONFIG_BT_RX_STACK_SIZE+0x112>
     2d2:	f1a8 0802 	sub.w	r8, r8, #2
     2d6:	443d      	add	r5, r7
     2d8:	1aed      	subs	r5, r5, r3
     2da:	b2a4      	uxth	r4, r4
     2dc:	fbb5 f0fa 	udiv	r0, r5, sl
     2e0:	fb0a 5510 	mls	r5, sl, r0, r5
     2e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2e8:	fb00 f909 	mul.w	r9, r0, r9
     2ec:	45a1      	cmp	r9, r4
     2ee:	d909      	bls.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     2f0:	19e4      	adds	r4, r4, r7
     2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2f6:	f080 810a 	bcs.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     2fa:	45a1      	cmp	r9, r4
     2fc:	f240 8107 	bls.w	50e <CONFIG_BT_RX_STACK_SIZE+0x10e>
     300:	3802      	subs	r0, #2
     302:	443c      	add	r4, r7
     304:	eba4 0409 	sub.w	r4, r4, r9
     308:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     30c:	2100      	movs	r1, #0
     30e:	2e00      	cmp	r6, #0
     310:	d061      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     312:	fa24 f40e 	lsr.w	r4, r4, lr
     316:	2300      	movs	r3, #0
     318:	6034      	str	r4, [r6, #0]
     31a:	6073      	str	r3, [r6, #4]
     31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     320:	428b      	cmp	r3, r1
     322:	d907      	bls.n	334 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb4>
     324:	2e00      	cmp	r6, #0
     326:	d054      	beq.n	3d2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x152>
     328:	2100      	movs	r1, #0
     32a:	e886 0021 	stmia.w	r6, {r0, r5}
     32e:	4608      	mov	r0, r1
     330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     334:	fab3 f183 	clz	r1, r3
     338:	2900      	cmp	r1, #0
     33a:	f040 808e 	bne.w	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     33e:	42ab      	cmp	r3, r5
     340:	d302      	bcc.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     342:	4282      	cmp	r2, r0
     344:	f200 80fa 	bhi.w	53c <CONFIG_BT_RX_STACK_SIZE+0x13c>
     348:	1a84      	subs	r4, r0, r2
     34a:	eb65 0503 	sbc.w	r5, r5, r3
     34e:	2001      	movs	r0, #1
     350:	46ac      	mov	ip, r5
     352:	2e00      	cmp	r6, #0
     354:	d03f      	beq.n	3d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     356:	e886 1010 	stmia.w	r6, {r4, ip}
     35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     35e:	b912      	cbnz	r2, 366 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe6>
     360:	2701      	movs	r7, #1
     362:	fbb7 f7f2 	udiv	r7, r7, r2
     366:	fab7 fe87 	clz	lr, r7
     36a:	f1be 0f00 	cmp.w	lr, #0
     36e:	d134      	bne.n	3da <CONFIG_BT_HCI_TX_STACK_SIZE+0x15a>
     370:	1beb      	subs	r3, r5, r7
     372:	0c3a      	lsrs	r2, r7, #16
     374:	fa1f fc87 	uxth.w	ip, r7
     378:	2101      	movs	r1, #1
     37a:	fbb3 f8f2 	udiv	r8, r3, r2
     37e:	0c25      	lsrs	r5, r4, #16
     380:	fb02 3318 	mls	r3, r2, r8, r3
     384:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     388:	fb0c f308 	mul.w	r3, ip, r8
     38c:	42ab      	cmp	r3, r5
     38e:	d907      	bls.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>
     390:	19ed      	adds	r5, r5, r7
     392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     396:	d202      	bcs.n	39e <CONFIG_BT_HCI_TX_STACK_SIZE+0x11e>
     398:	42ab      	cmp	r3, r5
     39a:	f200 80d1 	bhi.w	540 <CONFIG_BT_RX_STACK_SIZE+0x140>
     39e:	4680      	mov	r8, r0
     3a0:	1aed      	subs	r5, r5, r3
     3a2:	b2a3      	uxth	r3, r4
     3a4:	fbb5 f0f2 	udiv	r0, r5, r2
     3a8:	fb02 5510 	mls	r5, r2, r0, r5
     3ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3b0:	fb0c fc00 	mul.w	ip, ip, r0
     3b4:	45a4      	cmp	ip, r4
     3b6:	d907      	bls.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     3b8:	19e4      	adds	r4, r4, r7
     3ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3be:	d202      	bcs.n	3c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     3c0:	45a4      	cmp	ip, r4
     3c2:	f200 80b8 	bhi.w	536 <CONFIG_BT_RX_STACK_SIZE+0x136>
     3c6:	4618      	mov	r0, r3
     3c8:	eba4 040c 	sub.w	r4, r4, ip
     3cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3d0:	e79d      	b.n	30e <CONFIG_BT_HCI_TX_STACK_SIZE+0x8e>
     3d2:	4631      	mov	r1, r6
     3d4:	4630      	mov	r0, r6
     3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3da:	f1ce 0420 	rsb	r4, lr, #32
     3de:	fa05 f30e 	lsl.w	r3, r5, lr
     3e2:	fa07 f70e 	lsl.w	r7, r7, lr
     3e6:	fa20 f804 	lsr.w	r8, r0, r4
     3ea:	0c3a      	lsrs	r2, r7, #16
     3ec:	fa25 f404 	lsr.w	r4, r5, r4
     3f0:	ea48 0803 	orr.w	r8, r8, r3
     3f4:	fbb4 f1f2 	udiv	r1, r4, r2
     3f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
     3fc:	fb02 4411 	mls	r4, r2, r1, r4
     400:	fa1f fc87 	uxth.w	ip, r7
     404:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     408:	fb01 f30c 	mul.w	r3, r1, ip
     40c:	42ab      	cmp	r3, r5
     40e:	fa00 f40e 	lsl.w	r4, r0, lr
     412:	d909      	bls.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     414:	19ed      	adds	r5, r5, r7
     416:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     41a:	f080 808a 	bcs.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     41e:	42ab      	cmp	r3, r5
     420:	f240 8087 	bls.w	532 <CONFIG_BT_RX_STACK_SIZE+0x132>
     424:	3902      	subs	r1, #2
     426:	443d      	add	r5, r7
     428:	1aeb      	subs	r3, r5, r3
     42a:	fa1f f588 	uxth.w	r5, r8
     42e:	fbb3 f0f2 	udiv	r0, r3, r2
     432:	fb02 3310 	mls	r3, r2, r0, r3
     436:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     43a:	fb00 f30c 	mul.w	r3, r0, ip
     43e:	42ab      	cmp	r3, r5
     440:	d907      	bls.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     442:	19ed      	adds	r5, r5, r7
     444:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     448:	d26f      	bcs.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44a:	42ab      	cmp	r3, r5
     44c:	d96d      	bls.n	52a <CONFIG_BT_RX_STACK_SIZE+0x12a>
     44e:	3802      	subs	r0, #2
     450:	443d      	add	r5, r7
     452:	1aeb      	subs	r3, r5, r3
     454:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     458:	e78f      	b.n	37a <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     45a:	f1c1 0720 	rsb	r7, r1, #32
     45e:	fa22 f807 	lsr.w	r8, r2, r7
     462:	408b      	lsls	r3, r1
     464:	fa05 f401 	lsl.w	r4, r5, r1
     468:	ea48 0303 	orr.w	r3, r8, r3
     46c:	fa20 fe07 	lsr.w	lr, r0, r7
     470:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     474:	40fd      	lsrs	r5, r7
     476:	ea4e 0e04 	orr.w	lr, lr, r4
     47a:	fbb5 f9fc 	udiv	r9, r5, ip
     47e:	ea4f 441e 	mov.w	r4, lr, lsr #16
     482:	fb0c 5519 	mls	r5, ip, r9, r5
     486:	fa1f f883 	uxth.w	r8, r3
     48a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     48e:	fb09 f408 	mul.w	r4, r9, r8
     492:	42ac      	cmp	r4, r5
     494:	fa02 f201 	lsl.w	r2, r2, r1
     498:	fa00 fa01 	lsl.w	sl, r0, r1
     49c:	d908      	bls.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     49e:	18ed      	adds	r5, r5, r3
     4a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4a4:	d243      	bcs.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4a6:	42ac      	cmp	r4, r5
     4a8:	d941      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     4aa:	f1a9 0902 	sub.w	r9, r9, #2
     4ae:	441d      	add	r5, r3
     4b0:	1b2d      	subs	r5, r5, r4
     4b2:	fa1f fe8e 	uxth.w	lr, lr
     4b6:	fbb5 f0fc 	udiv	r0, r5, ip
     4ba:	fb0c 5510 	mls	r5, ip, r0, r5
     4be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4c2:	fb00 f808 	mul.w	r8, r0, r8
     4c6:	45a0      	cmp	r8, r4
     4c8:	d907      	bls.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     4ca:	18e4      	adds	r4, r4, r3
     4cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4d0:	d229      	bcs.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d2:	45a0      	cmp	r8, r4
     4d4:	d927      	bls.n	526 <CONFIG_BT_RX_STACK_SIZE+0x126>
     4d6:	3802      	subs	r0, #2
     4d8:	441c      	add	r4, r3
     4da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4de:	eba4 0408 	sub.w	r4, r4, r8
     4e2:	fba0 8902 	umull	r8, r9, r0, r2
     4e6:	454c      	cmp	r4, r9
     4e8:	46c6      	mov	lr, r8
     4ea:	464d      	mov	r5, r9
     4ec:	d315      	bcc.n	51a <CONFIG_BT_RX_STACK_SIZE+0x11a>
     4ee:	d012      	beq.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     4f0:	b156      	cbz	r6, 508 <CONFIG_BT_RX_STACK_SIZE+0x108>
     4f2:	ebba 030e 	subs.w	r3, sl, lr
     4f6:	eb64 0405 	sbc.w	r4, r4, r5
     4fa:	fa04 f707 	lsl.w	r7, r4, r7
     4fe:	40cb      	lsrs	r3, r1
     500:	431f      	orrs	r7, r3
     502:	40cc      	lsrs	r4, r1
     504:	6037      	str	r7, [r6, #0]
     506:	6074      	str	r4, [r6, #4]
     508:	2100      	movs	r1, #0
     50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     50e:	4618      	mov	r0, r3
     510:	e6f8      	b.n	304 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     512:	4690      	mov	r8, r2
     514:	e6e0      	b.n	2d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x58>
     516:	45c2      	cmp	sl, r8
     518:	d2ea      	bcs.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     51a:	ebb8 0e02 	subs.w	lr, r8, r2
     51e:	eb69 0503 	sbc.w	r5, r9, r3
     522:	3801      	subs	r0, #1
     524:	e7e4      	b.n	4f0 <CONFIG_BT_RX_STACK_SIZE+0xf0>
     526:	4628      	mov	r0, r5
     528:	e7d7      	b.n	4da <CONFIG_BT_RX_STACK_SIZE+0xda>
     52a:	4640      	mov	r0, r8
     52c:	e791      	b.n	452 <CONFIG_BT_RX_STACK_SIZE+0x52>
     52e:	4681      	mov	r9, r0
     530:	e7be      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     532:	4601      	mov	r1, r0
     534:	e778      	b.n	428 <CONFIG_BT_RX_STACK_SIZE+0x28>
     536:	3802      	subs	r0, #2
     538:	443c      	add	r4, r7
     53a:	e745      	b.n	3c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x148>
     53c:	4608      	mov	r0, r1
     53e:	e708      	b.n	352 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd2>
     540:	f1a8 0802 	sub.w	r8, r8, #2
     544:	443d      	add	r5, r7
     546:	e72b      	b.n	3a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x120>

00000548 <__aeabi_idiv0>:
     548:	4770      	bx	lr
     54a:	bf00      	nop

0000054c <scan_cb>:
};

static void scan_cb(const bt_addr_le_t *addr, s8_t rssi, u8_t adv_type,
		    struct net_buf_simple *buf)
{
	mfg_data[2]++;
     54c:	4a02      	ldr	r2, [pc, #8]	; (558 <scan_cb+0xc>)
     54e:	7893      	ldrb	r3, [r2, #2]
     550:	3301      	adds	r3, #1
     552:	7093      	strb	r3, [r2, #2]
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	200031a0 	.word	0x200031a0

0000055c <main>:
}

void main(void)
{
     55c:	b530      	push	{r4, r5, lr}
	struct bt_le_scan_param scan_param = {
     55e:	4c20      	ldr	r4, [pc, #128]	; (5e0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x4>)
{
     560:	b087      	sub	sp, #28
	struct bt_le_scan_param scan_param = {
     562:	6820      	ldr	r0, [r4, #0]
     564:	88a3      	ldrh	r3, [r4, #4]
     566:	9002      	str	r0, [sp, #8]
		.interval   = 0x0010,
		.window     = 0x0010,
	};
	int err;

	printk("Starting Scanner/Advertiser Demo\n");
     568:	481e      	ldr	r0, [pc, #120]	; (5e4 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x8>)
	struct bt_le_scan_param scan_param = {
     56a:	f8ad 300c 	strh.w	r3, [sp, #12]
	printk("Starting Scanner/Advertiser Demo\n");
     56e:	f000 fc7d 	bl	e6c <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
     572:	2000      	movs	r0, #0
     574:	f002 fb38 	bl	2be8 <bt_enable>
	if (err) {
     578:	4601      	mov	r1, r0
     57a:	b120      	cbz	r0, 586 <main+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
     57c:	481a      	ldr	r0, [pc, #104]	; (5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>)

		k_sleep(K_MSEC(400));

		err = bt_le_adv_stop();
		if (err) {
			printk("Advertising failed to stop (err %d)\n", err);
     57e:	f000 fc75 	bl	e6c <printk>
			return;
		}
	} while (1);
}
     582:	b007      	add	sp, #28
     584:	bd30      	pop	{r4, r5, pc}
	printk("Bluetooth initialized\n");
     586:	4819      	ldr	r0, [pc, #100]	; (5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>)
     588:	f000 fc70 	bl	e6c <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
     58c:	4918      	ldr	r1, [pc, #96]	; (5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>)
     58e:	a802      	add	r0, sp, #8
     590:	f002 fc8e 	bl	2eb0 <bt_le_scan_start>
	if (err) {
     594:	4601      	mov	r1, r0
     596:	b9a8      	cbnz	r0, 5c4 <main+0x68>
		err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     598:	4d16      	ldr	r5, [pc, #88]	; (5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>)
     59a:	3406      	adds	r4, #6

K_SYSCALL_DECLARE1(K_SYSCALL_K_OBJECT_ALLOC, k_object_alloc, void *, enum k_objects, otype);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     59c:	f44f 70c8 	mov.w	r0, #400	; 0x190
     5a0:	f00b fe38 	bl	c214 <_impl_k_sleep>
     5a4:	88a3      	ldrh	r3, [r4, #4]
     5a6:	6820      	ldr	r0, [r4, #0]
     5a8:	f8ad 3014 	strh.w	r3, [sp, #20]
     5ac:	2300      	movs	r3, #0
     5ae:	9004      	str	r0, [sp, #16]
     5b0:	4629      	mov	r1, r5
     5b2:	9300      	str	r3, [sp, #0]
     5b4:	2201      	movs	r2, #1
     5b6:	a804      	add	r0, sp, #16
     5b8:	f002 fb8c 	bl	2cd4 <bt_le_adv_start>
		if (err) {
     5bc:	4601      	mov	r1, r0
     5be:	b118      	cbz	r0, 5c8 <main+0x6c>
			printk("Advertising failed to start (err %d)\n", err);
     5c0:	480d      	ldr	r0, [pc, #52]	; (5f8 <CONFIG_BT_CTLR_COMPANY_ID+0x7>)
     5c2:	e7dc      	b.n	57e <main+0x22>
		printk("Starting scanning failed (err %d)\n", err);
     5c4:	480d      	ldr	r0, [pc, #52]	; (5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>)
     5c6:	e7da      	b.n	57e <main+0x22>
     5c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
     5cc:	f00b fe22 	bl	c214 <_impl_k_sleep>
		err = bt_le_adv_stop();
     5d0:	f002 fc36 	bl	2e40 <bt_le_adv_stop>
		if (err) {
     5d4:	4601      	mov	r1, r0
     5d6:	2800      	cmp	r0, #0
     5d8:	d0e0      	beq.n	59c <main+0x40>
			printk("Advertising failed to stop (err %d)\n", err);
     5da:	4809      	ldr	r0, [pc, #36]	; (600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>)
     5dc:	e7cf      	b.n	57e <main+0x22>
     5de:	bf00      	nop
     5e0:	0000cad8 	.word	0x0000cad8
     5e4:	0000cb38 	.word	0x0000cb38
     5e8:	0000cb5a 	.word	0x0000cb5a
     5ec:	0000cb7a 	.word	0x0000cb7a
     5f0:	0000054d 	.word	0x0000054d
     5f4:	0000cb30 	.word	0x0000cb30
     5f8:	0000cbb4 	.word	0x0000cbb4
     5fc:	0000cb91 	.word	0x0000cb91
     600:	0000cbda 	.word	0x0000cbda

00000604 <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     604:	4b0c      	ldr	r3, [pc, #48]	; (638 <ftpan_32+0x34>)
     606:	781b      	ldrb	r3, [r3, #0]
     608:	2b06      	cmp	r3, #6
     60a:	d112      	bne.n	632 <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <ftpan_32+0x38>)
     60e:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     610:	f010 000f 	ands.w	r0, r0, #15
     614:	d10d      	bne.n	632 <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     616:	3304      	adds	r3, #4
     618:	681b      	ldr	r3, [r3, #0]
     61a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     61e:	2b30      	cmp	r3, #48	; 0x30
     620:	d108      	bne.n	634 <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     622:	4b07      	ldr	r3, [pc, #28]	; (640 <ftpan_32+0x3c>)
     624:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     626:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     62a:	bf0c      	ite	eq
     62c:	2001      	moveq	r0, #1
     62e:	2000      	movne	r0, #0
     630:	4770      	bx	lr
			return true;
		}
	}

	return false;
     632:	2000      	movs	r0, #0
}
     634:	4770      	bx	lr
     636:	bf00      	nop
     638:	f0000fe0 	.word	0xf0000fe0
     63c:	f0000fe4 	.word	0xf0000fe4
     640:	f0000fec 	.word	0xf0000fec

00000644 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     644:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     646:	f04f 0320 	mov.w	r3, #32
     64a:	f3ef 8111 	mrs	r1, BASEPRI
     64e:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     652:	f7ff ffd7 	bl	604 <ftpan_32>
     656:	b120      	cbz	r0, 662 <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     658:	4a3d      	ldr	r2, [pc, #244]	; (750 <nordicsemi_nrf52_init+0x10c>)
     65a:	68d3      	ldr	r3, [r2, #12]
     65c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     660:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     662:	f7ff ffcf 	bl	604 <ftpan_32>
     666:	b110      	cbz	r0, 66e <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     668:	4b3a      	ldr	r3, [pc, #232]	; (754 <nordicsemi_nrf52_init+0x110>)
     66a:	2203      	movs	r2, #3
     66c:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     66e:	f7ff ffc9 	bl	604 <ftpan_32>
     672:	b130      	cbz	r0, 682 <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     678:	2200      	movs	r2, #0
     67a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     67e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     682:	4b35      	ldr	r3, [pc, #212]	; (758 <nordicsemi_nrf52_init+0x114>)
     684:	781b      	ldrb	r3, [r3, #0]
     686:	2b06      	cmp	r3, #6
     688:	d117      	bne.n	6ba <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     68a:	4b34      	ldr	r3, [pc, #208]	; (75c <nordicsemi_nrf52_init+0x118>)
     68c:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     68e:	0718      	lsls	r0, r3, #28
     690:	d113      	bne.n	6ba <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     692:	4b33      	ldr	r3, [pc, #204]	; (760 <nordicsemi_nrf52_init+0x11c>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     69a:	2a30      	cmp	r2, #48	; 0x30
     69c:	d003      	beq.n	6a6 <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     69e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     6a2:	2b40      	cmp	r3, #64	; 0x40
     6a4:	d109      	bne.n	6ba <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     6aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     6ae:	07d2      	lsls	r2, r2, #31
     6b0:	d503      	bpl.n	6ba <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     6b2:	f06f 0201 	mvn.w	r2, #1
     6b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     6ba:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     6be:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     6c2:	2b00      	cmp	r3, #0
     6c4:	4b27      	ldr	r3, [pc, #156]	; (764 <nordicsemi_nrf52_init+0x120>)
     6c6:	db03      	blt.n	6d0 <nordicsemi_nrf52_init+0x8c>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     6c8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     6cc:	2a00      	cmp	r2, #0
     6ce:	da2f      	bge.n	730 <nordicsemi_nrf52_init+0xec>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     6d0:	2201      	movs	r2, #1
     6d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     6d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     6da:	2a00      	cmp	r2, #0
     6dc:	d0fb      	beq.n	6d6 <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     6de:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     6e2:	2215      	movs	r2, #21
     6e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     6e8:	4a1e      	ldr	r2, [pc, #120]	; (764 <nordicsemi_nrf52_init+0x120>)
     6ea:	4613      	mov	r3, r2
     6ec:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     6f0:	2900      	cmp	r1, #0
     6f2:	d0fb      	beq.n	6ec <nordicsemi_nrf52_init+0xa8>
		NRF_UICR->PSELRESET[1] = 21;
     6f4:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     6f8:	2115      	movs	r1, #21
     6fa:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     6fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     702:	2a00      	cmp	r2, #0
     704:	d0fb      	beq.n	6fe <nordicsemi_nrf52_init+0xba>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     706:	2200      	movs	r2, #0
     708:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     70c:	4a15      	ldr	r2, [pc, #84]	; (764 <nordicsemi_nrf52_init+0x120>)
     70e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     712:	2b00      	cmp	r3, #0
     714:	d0fb      	beq.n	70e <nordicsemi_nrf52_init+0xca>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     716:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     71a:	4913      	ldr	r1, [pc, #76]	; (768 <nordicsemi_nrf52_init+0x124>)
     71c:	4b13      	ldr	r3, [pc, #76]	; (76c <nordicsemi_nrf52_init+0x128>)
     71e:	68ca      	ldr	r2, [r1, #12]
     720:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     724:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     726:	60cb      	str	r3, [r1, #12]
     728:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     72c:	bf00      	nop
     72e:	e7fd      	b.n	72c <nordicsemi_nrf52_init+0xe8>
	nordicsemi_nrf52840_init();
#endif

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     730:	2201      	movs	r2, #1
     732:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     736:	4b0c      	ldr	r3, [pc, #48]	; (768 <nordicsemi_nrf52_init+0x124>)
     738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     73c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     73e:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     740:	4b0b      	ldr	r3, [pc, #44]	; (770 <nordicsemi_nrf52_init+0x12c>)
     742:	4a0c      	ldr	r2, [pc, #48]	; (774 <nordicsemi_nrf52_init+0x130>)
     744:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     746:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     74a:	2000      	movs	r0, #0
     74c:	bd08      	pop	{r3, pc}
     74e:	bf00      	nop
     750:	e000edf0 	.word	0xe000edf0
     754:	400005a0 	.word	0x400005a0
     758:	f0000fe0 	.word	0xf0000fe0
     75c:	f0000fe4 	.word	0xf0000fe4
     760:	f0000fe8 	.word	0xf0000fe8
     764:	4001e000 	.word	0x4001e000
     768:	e000ed00 	.word	0xe000ed00
     76c:	05fa0004 	.word	0x05fa0004
     770:	200031c4 	.word	0x200031c4
     774:	03d09000 	.word	0x03d09000

00000778 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
     778:	b508      	push	{r3, lr}
     77a:	4604      	mov	r4, r0
     77c:	4608      	mov	r0, r1
     77e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
     780:	461a      	mov	r2, r3
     782:	47a0      	blx	r4

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     784:	f00b fd6e 	bl	c264 <_impl_k_current_get>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     788:	f001 f8d4 	bl	1934 <_impl_k_thread_abort>

0000078c <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
     78c:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
     78e:	7ac4      	ldrb	r4, [r0, #11]
     790:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
     792:	428c      	cmp	r4, r1
     794:	f04f 040c 	mov.w	r4, #12
     798:	bfb6      	itet	lt
     79a:	4361      	mullt	r1, r4
     79c:	fb04 0101 	mlage	r1, r4, r1, r0
     7a0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
     7a2:	2420      	movs	r4, #32
     7a4:	fb92 f4f4 	sdiv	r4, r2, r4
     7a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     7ac:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
     7ae:	f002 001f 	and.w	r0, r2, #31
     7b2:	bd10      	pop	{r4, pc}

000007b4 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     7b4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     7b6:	ab01      	add	r3, sp, #4
     7b8:	f7ff ffe8 	bl	78c <get_bit_ptr>

	*word |= (1<<bit);
     7bc:	9a01      	ldr	r2, [sp, #4]
     7be:	2301      	movs	r3, #1
     7c0:	fa03 f000 	lsl.w	r0, r3, r0
     7c4:	6813      	ldr	r3, [r2, #0]
     7c6:	4303      	orrs	r3, r0
     7c8:	6013      	str	r3, [r2, #0]
}
     7ca:	b003      	add	sp, #12
     7cc:	f85d fb04 	ldr.w	pc, [sp], #4

000007d0 <clear_free_bit>:

static void clear_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
     7d0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
     7d2:	ab01      	add	r3, sp, #4
     7d4:	f7ff ffda 	bl	78c <get_bit_ptr>

	*word &= ~(1<<bit);
     7d8:	9a01      	ldr	r2, [sp, #4]
     7da:	2301      	movs	r3, #1
     7dc:	fa03 f000 	lsl.w	r0, r3, r0
     7e0:	6813      	ldr	r3, [r2, #0]
     7e2:	ea23 0300 	bic.w	r3, r3, r0
     7e6:	6013      	str	r3, [r2, #0]
}
     7e8:	b003      	add	sp, #12
     7ea:	f85d fb04 	ldr.w	pc, [sp], #4

000007ee <_sys_mem_pool_base_init>:
{
	return (block + bsz - 1 - p->buf) < buf_size(p);
}

void _sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
     7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     7f2:	6843      	ldr	r3, [r0, #4]
     7f4:	8905      	ldrh	r5, [r0, #8]
{
     7f6:	4604      	mov	r4, r0
	u32_t *bits = p->buf + buflen;
     7f8:	6800      	ldr	r0, [r0, #0]

	for (i = 0; i < p->n_levels; i++) {
     7fa:	7aa7      	ldrb	r7, [r4, #10]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
     7fc:	435d      	muls	r5, r3
	u32_t *bits = p->buf + buflen;
     7fe:	4428      	add	r0, r5
	for (i = 0; i < p->n_levels; i++) {
     800:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
     802:	f04f 0e0c 	mov.w	lr, #12

		if (nblocks < 32) {
			p->max_inline_level = i;
		} else {
			p->levels[i].bits_p = bits;
			bits += (nblocks + 31)/32;
     806:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
     80a:	42b9      	cmp	r1, r7
     80c:	db05      	blt.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     80e:	2500      	movs	r5, #0
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
     810:	8923      	ldrh	r3, [r4, #8]
     812:	429d      	cmp	r5, r3
     814:	db23      	blt.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
     816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sys_dlist_init(&p->levels[i].free_list);
     81a:	f8d4 900c 	ldr.w	r9, [r4, #12]
		int nblocks = buflen / sz;
     81e:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
     822:	fb0e f801 	mul.w	r8, lr, r1
		if (nblocks < 32) {
     826:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
     828:	eb09 0608 	add.w	r6, r9, r8
		sz = _ALIGN4(sz / 4);
     82c:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
     830:	f106 0a04 	add.w	sl, r6, #4
			bits += (nblocks + 31)/32;
     834:	bfc8      	it	gt
     836:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
     838:	f103 0303 	add.w	r3, r3, #3
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
     83c:	f8c6 a004 	str.w	sl, [r6, #4]
	list->tail = (sys_dnode_t *)list;
     840:	f8c6 a008 	str.w	sl, [r6, #8]
			bits += (nblocks + 31)/32;
     844:	bfca      	itet	gt
     846:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
     84a:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
     84c:	f849 0008 	strgt.w	r0, [r9, r8]
		sz = _ALIGN4(sz / 4);
     850:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
     854:	bfc8      	it	gt
     856:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
     85a:	3101      	adds	r1, #1
     85c:	e7d5      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
	return p->buf + lsz * block;
     85e:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
     860:	68e3      	ldr	r3, [r4, #12]
	return p->buf + lsz * block;
     862:	6820      	ldr	r0, [r4, #0]
     864:	436a      	muls	r2, r5
		sys_dlist_append(&p->levels[0].free_list, block);
     866:	1d1e      	adds	r6, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
     868:	5086      	str	r6, [r0, r2]
	return p->buf + lsz * block;
     86a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
     86c:	689a      	ldr	r2, [r3, #8]
     86e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
     870:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
     872:	4620      	mov	r0, r4
     874:	6011      	str	r1, [r2, #0]
	list->tail = node;
     876:	6099      	str	r1, [r3, #8]
     878:	462a      	mov	r2, r5
     87a:	2100      	movs	r1, #0
     87c:	f7ff ff9a 	bl	7b4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
     880:	3501      	adds	r5, #1
     882:	e7c5      	b.n	810 <CONFIG_ISR_STACK_SIZE+0x10>

00000884 <_sys_mem_pool_block_alloc>:
	return block;
}

int _sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
     884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     888:	b08b      	sub	sp, #44	; 0x2c
	int i, from_l;
	int alloc_l = -1, free_l = -1;
	void *data;
	size_t lsizes[p->n_levels];
     88a:	7a86      	ldrb	r6, [r0, #10]
{
     88c:	af00      	add	r7, sp, #0
     88e:	4604      	mov	r4, r0
     890:	60fb      	str	r3, [r7, #12]
	size_t lsizes[p->n_levels];
     892:	00b3      	lsls	r3, r6, #2
     894:	330a      	adds	r3, #10
     896:	f023 0307 	bic.w	r3, r3, #7
     89a:	ebad 0d03 	sub.w	sp, sp, r3
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     89e:	6843      	ldr	r3, [r0, #4]
{
     8a0:	613a      	str	r2, [r7, #16]
	lsizes[0] = _ALIGN4(p->max_sz);
     8a2:	3303      	adds	r3, #3
     8a4:	466a      	mov	r2, sp
     8a6:	f023 0303 	bic.w	r3, r3, #3
     8aa:	f842 3904 	str.w	r3, [r2], #-4
	size_t lsizes[p->n_levels];
     8ae:	46e9      	mov	r9, sp
	int alloc_l = -1, free_l = -1;
     8b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
     8b4:	2300      	movs	r3, #0
	return sys_dlist_is_empty(&p->levels[l].free_list);
     8b6:	f04f 0e0c 	mov.w	lr, #12
     8ba:	1e58      	subs	r0, r3, #1
	for (i = 0; i < p->n_levels; i++) {
     8bc:	42b3      	cmp	r3, r6
     8be:	6278      	str	r0, [r7, #36]	; 0x24
     8c0:	da09      	bge.n	8d6 <_sys_mem_pool_block_alloc+0x52>
		if (i > 0) {
     8c2:	b12b      	cbz	r3, 8d0 <_sys_mem_pool_block_alloc+0x4c>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     8c4:	6810      	ldr	r0, [r2, #0]
     8c6:	0880      	lsrs	r0, r0, #2
     8c8:	3003      	adds	r0, #3
     8ca:	f020 0003 	bic.w	r0, r0, #3
     8ce:	6050      	str	r0, [r2, #4]
		}

		if (lsizes[i] < size) {
     8d0:	6850      	ldr	r0, [r2, #4]
     8d2:	4288      	cmp	r0, r1
     8d4:	d20b      	bcs.n	8ee <_sys_mem_pool_block_alloc+0x6a>
		if (!level_empty(p, i)) {
			free_l = i;
		}
	}

	if (alloc_l < 0 || free_l < 0) {
     8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8d8:	3301      	adds	r3, #1
     8da:	d114      	bne.n	906 <_sys_mem_pool_block_alloc+0x82>
		*data_p = NULL;
     8dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     8de:	2300      	movs	r3, #0
     8e0:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
     8e2:	f06f 000b 	mvn.w	r0, #11
	*level_p = alloc_l;
	*block_p = block_num(p, data, lsizes[alloc_l]);
	*data_p = data;

	return 0;
}
     8e6:	372c      	adds	r7, #44	; 0x2c
     8e8:	46bd      	mov	sp, r7
     8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return sys_dlist_is_empty(&p->levels[l].free_list);
     8ee:	68e0      	ldr	r0, [r4, #12]
     8f0:	fb0e 0003 	mla	r0, lr, r3, r0
     8f4:	f100 0c04 	add.w	ip, r0, #4
		if (!level_empty(p, i)) {
     8f8:	6840      	ldr	r0, [r0, #4]
     8fa:	3204      	adds	r2, #4
     8fc:	4560      	cmp	r0, ip
     8fe:	bf18      	it	ne
     900:	461d      	movne	r5, r3
	for (i = 0; i < p->n_levels; i++) {
     902:	3301      	adds	r3, #1
     904:	e7d9      	b.n	8ba <_sys_mem_pool_block_alloc+0x36>
	if (alloc_l < 0 || free_l < 0) {
     906:	1c6b      	adds	r3, r5, #1
     908:	d0e8      	beq.n	8dc <_sys_mem_pool_block_alloc+0x58>
	block = sys_dlist_get(&p->levels[l].free_list);
     90a:	68e1      	ldr	r1, [r4, #12]
	data = block_alloc(p, free_l, lsizes[free_l]);
     90c:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
	return list->head == list;
     910:	230c      	movs	r3, #12
     912:	fb03 1305 	mla	r3, r3, r5, r1
     916:	f853 6f04 	ldr.w	r6, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
     91a:	429e      	cmp	r6, r3
     91c:	d061      	beq.n	9e2 <_sys_mem_pool_block_alloc+0x15e>
	node->prev->next = node->next;
     91e:	e896 000a 	ldmia.w	r6, {r1, r3}
     922:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
     924:	6831      	ldr	r1, [r6, #0]
     926:	604b      	str	r3, [r1, #4]
	return (block - p->buf) / sz;
     928:	6823      	ldr	r3, [r4, #0]
		clear_free_bit(p, l, block_num(p, block, lsz));
     92a:	4629      	mov	r1, r5
	return (block - p->buf) / sz;
     92c:	1af3      	subs	r3, r6, r3
		clear_free_bit(p, l, block_num(p, block, lsz));
     92e:	4620      	mov	r0, r4
     930:	fb93 f2f2 	sdiv	r2, r3, r2
     934:	f7ff ff4c 	bl	7d0 <clear_free_bit>
     938:	eba9 0389 	sub.w	r3, r9, r9, lsl #2
     93c:	eb09 0a85 	add.w	sl, r9, r5, lsl #2
     940:	61bb      	str	r3, [r7, #24]
	for (from_l = free_l; from_l < alloc_l; from_l++) {
     942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     944:	429d      	cmp	r5, r3
     946:	6823      	ldr	r3, [r4, #0]
     948:	db0e      	blt.n	968 <_sys_mem_pool_block_alloc+0xe4>
	*level_p = alloc_l;
     94a:	693a      	ldr	r2, [r7, #16]
     94c:	4611      	mov	r1, r2
     94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     950:	600a      	str	r2, [r1, #0]
	return (block - p->buf) / sz;
     952:	1af3      	subs	r3, r6, r3
     954:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
     958:	fb93 f3f2 	sdiv	r3, r3, r2
	*block_p = block_num(p, data, lsizes[alloc_l]);
     95c:	68fa      	ldr	r2, [r7, #12]
     95e:	6013      	str	r3, [r2, #0]
	*data_p = data;
     960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	return 0;
     962:	2000      	movs	r0, #0
	*data_p = data;
     964:	601e      	str	r6, [r3, #0]
	return 0;
     966:	e7be      	b.n	8e6 <_sys_mem_pool_block_alloc+0x62>
	bn = block_num(p, block, lsizes[l]);
     968:	f85a 2b04 	ldr.w	r2, [sl], #4
	return (block - p->buf) / sz;
     96c:	1af3      	subs	r3, r6, r3
     96e:	fb93 f3f2 	sdiv	r3, r3, r2
     972:	69ba      	ldr	r2, [r7, #24]
		int lbn = 4*bn + i;
     974:	009b      	lsls	r3, r3, #2
     976:	617b      	str	r3, [r7, #20]
     978:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     97c:	4413      	add	r3, r2
	for (i = 1; i < 4; i++) {
     97e:	f04f 0b01 	mov.w	fp, #1
     982:	61fb      	str	r3, [r7, #28]
		set_free_bit(p, l + 1, lbn);
     984:	eb05 030b 	add.w	r3, r5, fp
     988:	60bb      	str	r3, [r7, #8]
		int lsz = lsizes[l + 1];
     98a:	f8da 8000 	ldr.w	r8, [sl]
		set_free_bit(p, l + 1, lbn);
     98e:	68b9      	ldr	r1, [r7, #8]
		void *block2 = (lsz * i) + (char *)block;
     990:	fb0b f308 	mul.w	r3, fp, r8
     994:	623b      	str	r3, [r7, #32]
     996:	18f3      	adds	r3, r6, r3
     998:	607b      	str	r3, [r7, #4]
		set_free_bit(p, l + 1, lbn);
     99a:	697b      	ldr	r3, [r7, #20]
     99c:	4620      	mov	r0, r4
     99e:	eb0b 0203 	add.w	r2, fp, r3
     9a2:	f7ff ff07 	bl	7b4 <set_free_bit>
	return (block + bsz - 1 - p->buf) < buf_size(p);
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	6822      	ldr	r2, [r4, #0]
	return p->n_max * p->max_sz;
     9aa:	8921      	ldrh	r1, [r4, #8]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     9ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     9b0:	4498      	add	r8, r3
     9b2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     9b6:	6862      	ldr	r2, [r4, #4]
     9b8:	434a      	muls	r2, r1
		if (block_fits(p, block2, lsz)) {
     9ba:	4590      	cmp	r8, r2
     9bc:	d20a      	bcs.n	9d4 <_sys_mem_pool_block_alloc+0x150>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
     9be:	68e2      	ldr	r2, [r4, #12]
     9c0:	69f9      	ldr	r1, [r7, #28]
	node->next = list;
     9c2:	6a38      	ldr	r0, [r7, #32]
     9c4:	440a      	add	r2, r1
     9c6:	1d11      	adds	r1, r2, #4
     9c8:	5031      	str	r1, [r6, r0]
	node->prev = list->tail;
     9ca:	6891      	ldr	r1, [r2, #8]
     9cc:	6059      	str	r1, [r3, #4]
	list->tail->next = node;
     9ce:	6891      	ldr	r1, [r2, #8]
     9d0:	600b      	str	r3, [r1, #0]
	list->tail = node;
     9d2:	6093      	str	r3, [r2, #8]
	for (i = 1; i < 4; i++) {
     9d4:	f10b 0b01 	add.w	fp, fp, #1
     9d8:	f1bb 0f04 	cmp.w	fp, #4
     9dc:	d1d5      	bne.n	98a <_sys_mem_pool_block_alloc+0x106>
     9de:	3501      	adds	r5, #1
     9e0:	e7af      	b.n	942 <_sys_mem_pool_block_alloc+0xbe>
		return -EAGAIN;
     9e2:	f06f 000a 	mvn.w	r0, #10
     9e6:	e77e      	b.n	8e6 <_sys_mem_pool_block_alloc+0x62>

000009e8 <_sys_mem_pool_block_free>:

void _sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
     9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9ec:	b085      	sub	sp, #20
	size_t lsizes[p->n_levels];
     9ee:	7a83      	ldrb	r3, [r0, #10]
     9f0:	009b      	lsls	r3, r3, #2
     9f2:	330a      	adds	r3, #10
     9f4:	f023 0307 	bic.w	r3, r3, #7
{
     9f8:	af00      	add	r7, sp, #0
	size_t lsizes[p->n_levels];
     9fa:	ebad 0d03 	sub.w	sp, sp, r3
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
     9fe:	6843      	ldr	r3, [r0, #4]
     a00:	3303      	adds	r3, #3
     a02:	f023 0303 	bic.w	r3, r3, #3
{
     a06:	4605      	mov	r5, r0
	size_t lsizes[p->n_levels];
     a08:	46ea      	mov	sl, sp
	lsizes[0] = _ALIGN4(p->max_sz);
     a0a:	9300      	str	r3, [sp, #0]
     a0c:	466c      	mov	r4, sp
	for (i = 1; i <= level; i++) {
     a0e:	2001      	movs	r0, #1
     a10:	4281      	cmp	r1, r0
     a12:	d24c      	bcs.n	aae <_sys_mem_pool_block_free+0xc6>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
     a14:	460c      	mov	r4, r1
     a16:	4616      	mov	r6, r2
	set_free_bit(p, level, bn);
     a18:	4632      	mov	r2, r6
     a1a:	4621      	mov	r1, r4
     a1c:	4628      	mov	r0, r5
	int i, key, lsz = lsizes[level];
     a1e:	f85a 8024 	ldr.w	r8, [sl, r4, lsl #2]
     a22:	f8d5 9000 	ldr.w	r9, [r5]
	set_free_bit(p, level, bn);
     a26:	f7ff fec5 	bl	7b4 <set_free_bit>
	if (level && partner_bits(p, level, bn) == 0xf) {
     a2a:	2c00      	cmp	r4, #0
     a2c:	d048      	beq.n	ac0 <_sys_mem_pool_block_free+0xd8>
	int bit = get_bit_ptr(p, level, bn, &word);
     a2e:	f107 030c 	add.w	r3, r7, #12
     a32:	4632      	mov	r2, r6
     a34:	4621      	mov	r1, r4
     a36:	4628      	mov	r0, r5
     a38:	f7ff fea8 	bl	78c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
     a3c:	68fa      	ldr	r2, [r7, #12]
     a3e:	2304      	movs	r3, #4
     a40:	fb90 f0f3 	sdiv	r0, r0, r3
     a44:	0083      	lsls	r3, r0, #2
     a46:	6810      	ldr	r0, [r2, #0]
     a48:	40d8      	lsrs	r0, r3
     a4a:	f000 000f 	and.w	r0, r0, #15
	if (level && partner_bits(p, level, bn) == 0xf) {
     a4e:	280f      	cmp	r0, #15
     a50:	d136      	bne.n	ac0 <_sys_mem_pool_block_free+0xd8>
			int b = (bn & ~3) + i;
     a52:	f026 0303 	bic.w	r3, r6, #3
	if (level && partner_bits(p, level, bn) == 0xf) {
     a56:	f04f 0900 	mov.w	r9, #0
			int b = (bn & ~3) + i;
     a5a:	607b      	str	r3, [r7, #4]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     a5c:	f108 3bff 	add.w	fp, r8, #4294967295	; 0xffffffff
			int b = (bn & ~3) + i;
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	444b      	add	r3, r9
			clear_free_bit(p, level, b);
     a64:	461a      	mov	r2, r3
     a66:	4621      	mov	r1, r4
     a68:	4628      	mov	r0, r5
     a6a:	603b      	str	r3, [r7, #0]
     a6c:	f7ff feb0 	bl	7d0 <clear_free_bit>
			if (b != bn &&
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	429e      	cmp	r6, r3
     a74:	d012      	beq.n	a9c <_sys_mem_pool_block_free+0xb4>
	return p->buf + lsz * block;
     a76:	fb08 f203 	mul.w	r2, r8, r3
	return p->n_max * p->max_sz;
     a7a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
     a7e:	686b      	ldr	r3, [r5, #4]
     a80:	6829      	ldr	r1, [r5, #0]
	return (block + bsz - 1 - p->buf) < buf_size(p);
     a82:	eb02 0e0b 	add.w	lr, r2, fp
	return p->n_max * p->max_sz;
     a86:	fb03 f30c 	mul.w	r3, r3, ip
			if (b != bn &&
     a8a:	459e      	cmp	lr, r3
	return (block + bsz - 1 - p->buf) < buf_size(p);
     a8c:	eb01 0002 	add.w	r0, r1, r2
			if (b != bn &&
     a90:	d204      	bcs.n	a9c <_sys_mem_pool_block_free+0xb4>
	node->prev->next = node->next;
     a92:	6840      	ldr	r0, [r0, #4]
     a94:	588b      	ldr	r3, [r1, r2]
     a96:	6003      	str	r3, [r0, #0]
	node->next->prev = node->prev;
     a98:	588b      	ldr	r3, [r1, r2]
     a9a:	6058      	str	r0, [r3, #4]
		for (i = 0; i < 4; i++) {
     a9c:	f109 0901 	add.w	r9, r9, #1
     aa0:	f1b9 0f04 	cmp.w	r9, #4
     aa4:	d1dc      	bne.n	a60 <_sys_mem_pool_block_free+0x78>
		block_free(p, level-1, lsizes, bn / 4);
     aa6:	fb96 f6f9 	sdiv	r6, r6, r9
     aaa:	3c01      	subs	r4, #1
     aac:	e7b4      	b.n	a18 <_sys_mem_pool_block_free+0x30>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
     aae:	6823      	ldr	r3, [r4, #0]
     ab0:	089b      	lsrs	r3, r3, #2
     ab2:	3303      	adds	r3, #3
     ab4:	f023 0303 	bic.w	r3, r3, #3
     ab8:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
     abc:	3001      	adds	r0, #1
     abe:	e7a7      	b.n	a10 <_sys_mem_pool_block_free+0x28>
	return p->buf + lsz * block;
     ac0:	fb08 f606 	mul.w	r6, r8, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     ac4:	682a      	ldr	r2, [r5, #0]
	return p->n_max * p->max_sz;
     ac6:	6869      	ldr	r1, [r5, #4]
	return p->buf + lsz * block;
     ac8:	eb09 0306 	add.w	r3, r9, r6
	return (block + bsz - 1 - p->buf) < buf_size(p);
     acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
     ad0:	4498      	add	r8, r3
     ad2:	eba8 0802 	sub.w	r8, r8, r2
	return p->n_max * p->max_sz;
     ad6:	892a      	ldrh	r2, [r5, #8]
     ad8:	4351      	muls	r1, r2
	if (block_fits(p, block, lsz)) {
     ada:	4588      	cmp	r8, r1
     adc:	d20b      	bcs.n	af6 <_sys_mem_pool_block_free+0x10e>
		sys_dlist_append(&p->levels[level].free_list, block);
     ade:	68e9      	ldr	r1, [r5, #12]
     ae0:	220c      	movs	r2, #12
     ae2:	fb02 1404 	mla	r4, r2, r4, r1
     ae6:	1d22      	adds	r2, r4, #4
	node->next = list;
     ae8:	f849 2006 	str.w	r2, [r9, r6]
	node->prev = list->tail;
     aec:	68a2      	ldr	r2, [r4, #8]
     aee:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
     af0:	68a2      	ldr	r2, [r4, #8]
     af2:	6013      	str	r3, [r2, #0]
	list->tail = node;
     af4:	60a3      	str	r3, [r4, #8]
}
     af6:	3714      	adds	r7, #20
     af8:	46bd      	mov	sp, r7
     afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000afe <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     afe:	2000      	movs	r0, #0
     b00:	4770      	bx	lr
	...

00000b04 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     b04:	680b      	ldr	r3, [r1, #0]
     b06:	3301      	adds	r3, #1
     b08:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     b0a:	4b01      	ldr	r3, [pc, #4]	; (b10 <char_out+0xc>)
     b0c:	681b      	ldr	r3, [r3, #0]
     b0e:	4718      	bx	r3
     b10:	200031c8 	.word	0x200031c8

00000b14 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b18:	b085      	sub	sp, #20
     b1a:	469b      	mov	fp, r3
     b1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     b1e:	f8df a090 	ldr.w	sl, [pc, #144]	; bb0 <_printk_dec_ulong+0x9c>
     b22:	2c01      	cmp	r4, #1
     b24:	bfb8      	it	lt
     b26:	2401      	movlt	r4, #1
     b28:	2b01      	cmp	r3, #1
     b2a:	bf0c      	ite	eq
     b2c:	2330      	moveq	r3, #48	; 0x30
     b2e:	2320      	movne	r3, #32
     b30:	4615      	mov	r5, r2
     b32:	4680      	mov	r8, r0
     b34:	4689      	mov	r9, r1
     b36:	9401      	str	r4, [sp, #4]
     b38:	9302      	str	r3, [sp, #8]
     b3a:	2601      	movs	r6, #1
     b3c:	270a      	movs	r7, #10
     b3e:	2200      	movs	r2, #0
     b40:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     b44:	b90a      	cbnz	r2, b4a <_printk_dec_ulong+0x36>
     b46:	45aa      	cmp	sl, r5
     b48:	d21f      	bcs.n	b8a <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     b4a:	fbb5 f0f4 	udiv	r0, r5, r4
     b4e:	4649      	mov	r1, r9
     b50:	3030      	adds	r0, #48	; 0x30
     b52:	47c0      	blx	r8
			digits++;
     b54:	3601      	adds	r6, #1
			found_largest_digit = 1;
     b56:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     b58:	3f01      	subs	r7, #1
	while (pos >= 9) {
     b5a:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     b5c:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     b60:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     b64:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     b68:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     b6c:	d1e8      	bne.n	b40 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     b6e:	4649      	mov	r1, r9
     b70:	f105 0030 	add.w	r0, r5, #48	; 0x30
     b74:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     b76:	f1bb 0f03 	cmp.w	fp, #3
     b7a:	d103      	bne.n	b84 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     b7c:	9b01      	ldr	r3, [sp, #4]
     b7e:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     b80:	2c00      	cmp	r4, #0
     b82:	dc0f      	bgt.n	ba4 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     b84:	b005      	add	sp, #20
     b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     b8a:	9b01      	ldr	r3, [sp, #4]
     b8c:	42bb      	cmp	r3, r7
     b8e:	dbe3      	blt.n	b58 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     b90:	f1bb 0f02 	cmp.w	fp, #2
     b94:	d8e0      	bhi.n	b58 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b96:	4649      	mov	r1, r9
     b98:	9802      	ldr	r0, [sp, #8]
     b9a:	9203      	str	r2, [sp, #12]
			digits++;
     b9c:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     b9e:	47c0      	blx	r8
			digits++;
     ba0:	9a03      	ldr	r2, [sp, #12]
     ba2:	e7d9      	b.n	b58 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     ba4:	4649      	mov	r1, r9
     ba6:	2020      	movs	r0, #32
     ba8:	47c0      	blx	r8
     baa:	3c01      	subs	r4, #1
     bac:	e7e8      	b.n	b80 <_printk_dec_ulong+0x6c>
     bae:	bf00      	nop
     bb0:	3b9ac9ff 	.word	0x3b9ac9ff

00000bb4 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
     bb4:	680a      	ldr	r2, [r1, #0]
     bb6:	688b      	ldr	r3, [r1, #8]
{
     bb8:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     bba:	b112      	cbz	r2, bc2 <str_out+0xe>
     bbc:	684c      	ldr	r4, [r1, #4]
     bbe:	42a3      	cmp	r3, r4
     bc0:	db02      	blt.n	bc8 <str_out+0x14>
		ctx->count++;
     bc2:	3301      	adds	r3, #1
     bc4:	608b      	str	r3, [r1, #8]
		return c;
     bc6:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
     bc8:	1e65      	subs	r5, r4, #1
     bca:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     bcc:	bf0b      	itete	eq
     bce:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     bd0:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
     bd2:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
     bd4:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
     bd6:	bf0c      	ite	eq
     bd8:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
     bda:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     bdc:	bd30      	pop	{r4, r5, pc}
	...

00000be0 <__printk_hook_install>:
	_char_out = fn;
     be0:	4b01      	ldr	r3, [pc, #4]	; (be8 <__printk_hook_install+0x8>)
     be2:	6018      	str	r0, [r3, #0]
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	200031c8 	.word	0x200031c8

00000bec <_vprintk>:
{
     bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bf0:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
     bf2:	f04f 0a00 	mov.w	sl, #0
{
     bf6:	4606      	mov	r6, r0
     bf8:	460f      	mov	r7, r1
     bfa:	9204      	str	r2, [sp, #16]
     bfc:	461c      	mov	r4, r3
	int min_width = -1;
     bfe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     c02:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
     c04:	4655      	mov	r5, sl
	while (*fmt) {
     c06:	9b04      	ldr	r3, [sp, #16]
     c08:	7818      	ldrb	r0, [r3, #0]
     c0a:	b910      	cbnz	r0, c12 <_vprintk+0x26>
}
     c0c:	b009      	add	sp, #36	; 0x24
     c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
     c12:	b945      	cbnz	r5, c26 <_vprintk+0x3a>
			if (*fmt != '%') {
     c14:	2825      	cmp	r0, #37	; 0x25
     c16:	f000 810c 	beq.w	e32 <_vprintk+0x246>
				out((int)*fmt, ctx);
     c1a:	4639      	mov	r1, r7
     c1c:	47b0      	blx	r6
		++fmt;
     c1e:	9b04      	ldr	r3, [sp, #16]
     c20:	3301      	adds	r3, #1
     c22:	9304      	str	r3, [sp, #16]
     c24:	e7ef      	b.n	c06 <_vprintk+0x1a>
			switch (*fmt) {
     c26:	2864      	cmp	r0, #100	; 0x64
     c28:	d061      	beq.n	cee <_vprintk+0x102>
     c2a:	d819      	bhi.n	c60 <_vprintk+0x74>
     c2c:	2839      	cmp	r0, #57	; 0x39
     c2e:	d80a      	bhi.n	c46 <_vprintk+0x5a>
     c30:	2831      	cmp	r0, #49	; 0x31
     c32:	d250      	bcs.n	cd6 <_vprintk+0xea>
     c34:	282d      	cmp	r0, #45	; 0x2d
     c36:	d03c      	beq.n	cb2 <_vprintk+0xc6>
     c38:	2830      	cmp	r0, #48	; 0x30
     c3a:	d03d      	beq.n	cb8 <_vprintk+0xcc>
     c3c:	2825      	cmp	r0, #37	; 0x25
     c3e:	d108      	bne.n	c52 <_vprintk+0x66>
				out((int)'%', ctx);
     c40:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
     c42:	47b0      	blx	r6
     c44:	e06f      	b.n	d26 <_vprintk+0x13a>
			switch (*fmt) {
     c46:	2858      	cmp	r0, #88	; 0x58
     c48:	f000 8089 	beq.w	d5e <_vprintk+0x172>
     c4c:	2863      	cmp	r0, #99	; 0x63
     c4e:	f000 80ea 	beq.w	e26 <_vprintk+0x23a>
				out((int)'%', ctx);
     c52:	4639      	mov	r1, r7
     c54:	2025      	movs	r0, #37	; 0x25
     c56:	47b0      	blx	r6
				out((int)*fmt, ctx);
     c58:	9b04      	ldr	r3, [sp, #16]
     c5a:	4639      	mov	r1, r7
     c5c:	7818      	ldrb	r0, [r3, #0]
     c5e:	e7f0      	b.n	c42 <_vprintk+0x56>
			switch (*fmt) {
     c60:	2870      	cmp	r0, #112	; 0x70
     c62:	d072      	beq.n	d4a <_vprintk+0x15e>
     c64:	d806      	bhi.n	c74 <_vprintk+0x88>
     c66:	2869      	cmp	r0, #105	; 0x69
     c68:	d041      	beq.n	cee <_vprintk+0x102>
     c6a:	286c      	cmp	r0, #108	; 0x6c
     c6c:	d03c      	beq.n	ce8 <_vprintk+0xfc>
     c6e:	2868      	cmp	r0, #104	; 0x68
     c70:	d0d5      	beq.n	c1e <_vprintk+0x32>
     c72:	e7ee      	b.n	c52 <_vprintk+0x66>
     c74:	2875      	cmp	r0, #117	; 0x75
     c76:	d058      	beq.n	d2a <_vprintk+0x13e>
     c78:	d817      	bhi.n	caa <_vprintk+0xbe>
     c7a:	2873      	cmp	r0, #115	; 0x73
     c7c:	d1e9      	bne.n	c52 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
     c7e:	6823      	ldr	r3, [r4, #0]
     c80:	f104 0b04 	add.w	fp, r4, #4
     c84:	461c      	mov	r4, r3
				while (*s)
     c86:	4625      	mov	r5, r4
     c88:	f815 0b01 	ldrb.w	r0, [r5], #1
     c8c:	2800      	cmp	r0, #0
     c8e:	f040 80bf 	bne.w	e10 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
     c92:	f1b8 0f03 	cmp.w	r8, #3
     c96:	f040 80d5 	bne.w	e44 <_vprintk+0x258>
					int remaining = min_width - (s - start);
     c9a:	1ae4      	subs	r4, r4, r3
     c9c:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	f300 80bb 	bgt.w	e1c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
     ca6:	465c      	mov	r4, fp
     ca8:	e03d      	b.n	d26 <_vprintk+0x13a>
			switch (*fmt) {
     caa:	2878      	cmp	r0, #120	; 0x78
     cac:	d057      	beq.n	d5e <_vprintk+0x172>
     cae:	287a      	cmp	r0, #122	; 0x7a
     cb0:	e7de      	b.n	c70 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
     cb2:	f04f 0803 	mov.w	r8, #3
     cb6:	e7b2      	b.n	c1e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
     cb8:	f1b9 0f00 	cmp.w	r9, #0
     cbc:	da0e      	bge.n	cdc <_vprintk+0xf0>
     cbe:	f1b8 0f00 	cmp.w	r8, #0
     cc2:	f000 80bc 	beq.w	e3e <_vprintk+0x252>
					min_width = *fmt - '0';
     cc6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     cca:	f1b8 0f00 	cmp.w	r8, #0
     cce:	bf08      	it	eq
     cd0:	f04f 0802 	moveq.w	r8, #2
     cd4:	e7a3      	b.n	c1e <_vprintk+0x32>
				if (min_width < 0) {
     cd6:	f1b9 0f00 	cmp.w	r9, #0
     cda:	dbf4      	blt.n	cc6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
     cdc:	230a      	movs	r3, #10
     cde:	fb03 0909 	mla	r9, r3, r9, r0
     ce2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     ce6:	e7f0      	b.n	cca <_vprintk+0xde>
				long_ctr++;
     ce8:	f10a 0a01 	add.w	sl, sl, #1
     cec:	e797      	b.n	c1e <_vprintk+0x32>
				if (long_ctr < 2) {
     cee:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
     cf2:	bfc5      	ittet	gt
     cf4:	3407      	addgt	r4, #7
     cf6:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
     cfa:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
     cfc:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
     cfe:	bfd4      	ite	le
     d00:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
     d02:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
     d06:	2d00      	cmp	r5, #0
     d08:	da05      	bge.n	d16 <_vprintk+0x12a>
					out((int)'-', ctx);
     d0a:	4639      	mov	r1, r7
     d0c:	202d      	movs	r0, #45	; 0x2d
     d0e:	47b0      	blx	r6
					d = -d;
     d10:	426d      	negs	r5, r5
					min_width--;
     d12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     d16:	f8cd 9000 	str.w	r9, [sp]
     d1a:	4643      	mov	r3, r8
     d1c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
     d1e:	4639      	mov	r1, r7
     d20:	4630      	mov	r0, r6
     d22:	f7ff fef7 	bl	b14 <_printk_dec_ulong>
			might_format = 0;
     d26:	2500      	movs	r5, #0
				break;
     d28:	e779      	b.n	c1e <_vprintk+0x32>
				if (long_ctr < 2) {
     d2a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
     d2e:	bfc5      	ittet	gt
     d30:	3407      	addgt	r4, #7
     d32:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
     d36:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
     d38:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
     d3a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
     d3e:	bfcc      	ite	gt
     d40:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
     d44:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
     d46:	4643      	mov	r3, r8
     d48:	e7e9      	b.n	d1e <_vprintk+0x132>
				  out('0', ctx);
     d4a:	4639      	mov	r1, r7
     d4c:	2030      	movs	r0, #48	; 0x30
     d4e:	47b0      	blx	r6
				  out('x', ctx);
     d50:	4639      	mov	r1, r7
     d52:	2078      	movs	r0, #120	; 0x78
     d54:	47b0      	blx	r6
				  min_width = 8;
     d56:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
     d5a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
     d5e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
     d62:	bfc7      	ittee	gt
     d64:	3407      	addgt	r4, #7
     d66:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
     d6a:	6823      	ldrle	r3, [r4, #0]
     d6c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
     d6e:	bfc2      	ittt	gt
     d70:	f103 0408 	addgt.w	r4, r3, #8
     d74:	681b      	ldrgt	r3, [r3, #0]
     d76:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
     d78:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
     d7c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
     d80:	bfd8      	it	le
     d82:	3404      	addle	r4, #4
	int digits = 0;
     d84:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
     d86:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
     d88:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
     d8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     d8e:	9b05      	ldr	r3, [sp, #20]
     d90:	ea4f 008b 	mov.w	r0, fp, lsl #2
     d94:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
     d98:	f010 000f 	ands.w	r0, r0, #15
     d9c:	d109      	bne.n	db2 <_vprintk+0x1c6>
     d9e:	9b07      	ldr	r3, [sp, #28]
     da0:	b913      	cbnz	r3, da8 <_vprintk+0x1bc>
     da2:	f1bb 0f00 	cmp.w	fp, #0
     da6:	d122      	bne.n	dee <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
     da8:	f04f 0e30 	mov.w	lr, #48	; 0x30
     dac:	e007      	b.n	dbe <_vprintk+0x1d2>
	for (; size; size--) {
     dae:	9a06      	ldr	r2, [sp, #24]
     db0:	e7eb      	b.n	d8a <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
     db2:	2809      	cmp	r0, #9
     db4:	bf8c      	ite	hi
     db6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
     dba:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
     dbe:	4639      	mov	r1, r7
     dc0:	4470      	add	r0, lr
     dc2:	9206      	str	r2, [sp, #24]
     dc4:	47b0      	blx	r6
			digits++;
     dc6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
     dc8:	9507      	str	r5, [sp, #28]
			digits++;
     dca:	3301      	adds	r3, #1
     dcc:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
     dce:	f1bb 0f00 	cmp.w	fp, #0
     dd2:	d1ec      	bne.n	dae <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
     dd4:	f1b8 0f03 	cmp.w	r8, #3
     dd8:	d1a5      	bne.n	d26 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
     dda:	9b03      	ldr	r3, [sp, #12]
     ddc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
     de0:	2d00      	cmp	r5, #0
     de2:	dda0      	ble.n	d26 <_vprintk+0x13a>
			out(' ', ctx);
     de4:	4639      	mov	r1, r7
     de6:	2020      	movs	r0, #32
     de8:	47b0      	blx	r6
     dea:	3d01      	subs	r5, #1
     dec:	e7f8      	b.n	de0 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
     dee:	1e53      	subs	r3, r2, #1
     df0:	4591      	cmp	r9, r2
     df2:	9306      	str	r3, [sp, #24]
     df4:	dbeb      	blt.n	dce <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
     df6:	f1b8 0f01 	cmp.w	r8, #1
     dfa:	d103      	bne.n	e04 <_vprintk+0x218>
				out('0', ctx);
     dfc:	4639      	mov	r1, r7
     dfe:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
     e00:	47b0      	blx	r6
     e02:	e7e4      	b.n	dce <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
     e04:	f1b8 0f02 	cmp.w	r8, #2
     e08:	d1e1      	bne.n	dce <_vprintk+0x1e2>
				out(' ', ctx);
     e0a:	4639      	mov	r1, r7
     e0c:	2020      	movs	r0, #32
     e0e:	e7f7      	b.n	e00 <_vprintk+0x214>
					out((int)(*s++), ctx);
     e10:	4639      	mov	r1, r7
     e12:	9303      	str	r3, [sp, #12]
     e14:	462c      	mov	r4, r5
     e16:	47b0      	blx	r6
     e18:	9b03      	ldr	r3, [sp, #12]
     e1a:	e734      	b.n	c86 <_vprintk+0x9a>
						out(' ', ctx);
     e1c:	4639      	mov	r1, r7
     e1e:	2020      	movs	r0, #32
     e20:	47b0      	blx	r6
     e22:	3c01      	subs	r4, #1
     e24:	e73c      	b.n	ca0 <_vprintk+0xb4>
				out(c, ctx);
     e26:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
     e28:	1d25      	adds	r5, r4, #4
				out(c, ctx);
     e2a:	4639      	mov	r1, r7
     e2c:	47b0      	blx	r6
				int c = va_arg(ap, int);
     e2e:	462c      	mov	r4, r5
     e30:	e779      	b.n	d26 <_vprintk+0x13a>
				long_ctr = 0;
     e32:	46aa      	mov	sl, r5
				padding = PAD_NONE;
     e34:	46a8      	mov	r8, r5
				min_width = -1;
     e36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     e3a:	2501      	movs	r5, #1
     e3c:	e6ef      	b.n	c1e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
     e3e:	f04f 0801 	mov.w	r8, #1
     e42:	e6ec      	b.n	c1e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
     e44:	465c      	mov	r4, fp
			might_format = 0;
     e46:	4605      	mov	r5, r0
     e48:	e6e9      	b.n	c1e <_vprintk+0x32>
	...

00000e4c <vprintk>:
{
     e4c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     e4e:	ac02      	add	r4, sp, #8
     e50:	2300      	movs	r3, #0
     e52:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
     e56:	4602      	mov	r2, r0
     e58:	460b      	mov	r3, r1
     e5a:	4803      	ldr	r0, [pc, #12]	; (e68 <vprintk+0x1c>)
     e5c:	4621      	mov	r1, r4
     e5e:	f7ff fec5 	bl	bec <_vprintk>
}
     e62:	9801      	ldr	r0, [sp, #4]
     e64:	b002      	add	sp, #8
     e66:	bd10      	pop	{r4, pc}
     e68:	00000b05 	.word	0x00000b05

00000e6c <printk>:
{
     e6c:	b40f      	push	{r0, r1, r2, r3}
     e6e:	b507      	push	{r0, r1, r2, lr}
     e70:	a904      	add	r1, sp, #16
     e72:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
     e76:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
     e78:	f7ff ffe8 	bl	e4c <vprintk>
}
     e7c:	b003      	add	sp, #12
     e7e:	f85d eb04 	ldr.w	lr, [sp], #4
     e82:	b004      	add	sp, #16
     e84:	4770      	bx	lr
	...

00000e88 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
     e88:	b40c      	push	{r2, r3}
     e8a:	b530      	push	{r4, r5, lr}
     e8c:	b085      	sub	sp, #20
     e8e:	ab08      	add	r3, sp, #32
     e90:	4604      	mov	r4, r0
     e92:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
     e96:	9001      	str	r0, [sp, #4]
     e98:	9102      	str	r1, [sp, #8]
     e9a:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     e9c:	a901      	add	r1, sp, #4
     e9e:	4807      	ldr	r0, [pc, #28]	; (ebc <snprintk+0x34>)
	va_start(ap, fmt);
     ea0:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
     ea2:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
     ea4:	f7ff fea2 	bl	bec <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
     ea8:	9803      	ldr	r0, [sp, #12]
     eaa:	9b02      	ldr	r3, [sp, #8]
     eac:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     eae:	bfb8      	it	lt
     eb0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     eb2:	b005      	add	sp, #20
     eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     eb8:	b002      	add	sp, #8
     eba:	4770      	bx	lr
     ebc:	00000bb5 	.word	0x00000bb5

00000ec0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_LIBMETAL_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_OPENAMP_SRC_PATH, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
     ec0:	4770      	bx	lr
	...

00000ec4 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     ec4:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     ec6:	4c11      	ldr	r4, [pc, #68]	; (f0c <sys_rand32_get+0x48>)
     ec8:	f3bf 8f5b 	dmb	ish
     ecc:	6820      	ldr	r0, [r4, #0]
     ece:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     ed2:	b960      	cbnz	r0, eee <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     ed4:	480e      	ldr	r0, [pc, #56]	; (f10 <sys_rand32_get+0x4c>)
     ed6:	f00a fcc5 	bl	b864 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     eda:	f3bf 8f5b 	dmb	ish
     ede:	e854 3f00 	ldrex	r3, [r4]
     ee2:	e844 0200 	strex	r2, r0, [r4]
     ee6:	2a00      	cmp	r2, #0
     ee8:	d1f9      	bne.n	ede <sys_rand32_get+0x1a>
     eea:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
     eee:	6843      	ldr	r3, [r0, #4]
     ef0:	2204      	movs	r2, #4
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	eb0d 0102 	add.w	r1, sp, r2
     ef8:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
     efa:	2800      	cmp	r0, #0
     efc:	da02      	bge.n	f04 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
     efe:	f000 fa37 	bl	1370 <_timer_cycle_get_32>
     f02:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
     f04:	9801      	ldr	r0, [sp, #4]
     f06:	b002      	add	sp, #8
     f08:	bd10      	pop	{r4, pc}
     f0a:	bf00      	nop
     f0c:	20000000 	.word	0x20000000
     f10:	0000cc0e 	.word	0x0000cc0e

00000f14 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     f14:	280a      	cmp	r0, #10
{
     f16:	b538      	push	{r3, r4, r5, lr}
     f18:	4604      	mov	r4, r0
     f1a:	4d07      	ldr	r5, [pc, #28]	; (f38 <console_out+0x24>)
	if ('\n' == c) {
     f1c:	d104      	bne.n	f28 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     f1e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	return api->poll_out(dev, out_char);
     f20:	6843      	ldr	r3, [r0, #4]
     f22:	210d      	movs	r1, #13
     f24:	685b      	ldr	r3, [r3, #4]
     f26:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     f28:	6828      	ldr	r0, [r5, #0]
     f2a:	6843      	ldr	r3, [r0, #4]
     f2c:	b2e1      	uxtb	r1, r4
     f2e:	685b      	ldr	r3, [r3, #4]
     f30:	4798      	blx	r3

	return c;
}
     f32:	4620      	mov	r0, r4
     f34:	bd38      	pop	{r3, r4, r5, pc}
     f36:	bf00      	nop
     f38:	20000004 	.word	0x20000004

00000f3c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     f3c:	4801      	ldr	r0, [pc, #4]	; (f44 <uart_console_hook_install+0x8>)
     f3e:	f7ff be4f 	b.w	be0 <__printk_hook_install>
     f42:	bf00      	nop
     f44:	00000f15 	.word	0x00000f15

00000f48 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     f48:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     f4a:	4804      	ldr	r0, [pc, #16]	; (f5c <uart_console_init+0x14>)
     f4c:	f00a fc8a 	bl	b864 <device_get_binding>
     f50:	4b03      	ldr	r3, [pc, #12]	; (f60 <uart_console_init+0x18>)
     f52:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     f54:	f7ff fff2 	bl	f3c <uart_console_hook_install>

	return 0;
}
     f58:	2000      	movs	r0, #0
     f5a:	bd08      	pop	{r3, pc}
     f5c:	0000cc18 	.word	0x0000cc18
     f60:	20000004 	.word	0x20000004

00000f64 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     f64:	b510      	push	{r4, lr}
	__asm__ volatile(
     f66:	f04f 0320 	mov.w	r3, #32
     f6a:	f3ef 8211 	mrs	r2, BASEPRI
     f6e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     f72:	4c11      	ldr	r4, [pc, #68]	; (fb8 <_m16src_stop+0x54>)
     f74:	7823      	ldrb	r3, [r4, #0]
     f76:	b923      	cbnz	r3, f82 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     f78:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
     f7c:	f06f 0044 	mvn.w	r0, #68	; 0x44
     f80:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
     f82:	3b01      	subs	r3, #1
     f84:	b2db      	uxtb	r3, r3
     f86:	7023      	strb	r3, [r4, #0]
     f88:	b123      	cbz	r3, f94 <_m16src_stop+0x30>
     f8a:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
     f8e:	f06f 000f 	mvn.w	r0, #15
     f92:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
     f94:	4b09      	ldr	r3, [pc, #36]	; (fbc <_m16src_stop+0x58>)
     f96:	7818      	ldrb	r0, [r3, #0]
     f98:	2101      	movs	r1, #1
     f9a:	b128      	cbz	r0, fa8 <_m16src_stop+0x44>
		m16src_ref++;
     f9c:	7021      	strb	r1, [r4, #0]
     f9e:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
     fa2:	f06f 000a 	mvn.w	r0, #10
     fa6:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
     fa8:	7019      	strb	r1, [r3, #0]
     faa:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     fb2:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
     fb4:	7018      	strb	r0, [r3, #0]

	return 0;
}
     fb6:	bd10      	pop	{r4, pc}
     fb8:	2000000a 	.word	0x2000000a
     fbc:	20000009 	.word	0x20000009

00000fc0 <_clock_control_init>:
	}
#endif
}

static int _clock_control_init(struct device *dev)
{
     fc0:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     fc2:	2200      	movs	r2, #0
     fc4:	4610      	mov	r0, r2
     fc6:	2101      	movs	r1, #1
     fc8:	f000 fbe8 	bl	179c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
     fcc:	2000      	movs	r0, #0
     fce:	f000 fbb3 	bl	1738 <_arch_irq_enable>

	return 0;
}
     fd2:	2000      	movs	r0, #0
     fd4:	bd08      	pop	{r3, pc}
	...

00000fd8 <_m16src_start>:
{
     fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
     fda:	f04f 0220 	mov.w	r2, #32
     fde:	f3ef 8311 	mrs	r3, BASEPRI
     fe2:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
     fe6:	4a25      	ldr	r2, [pc, #148]	; (107c <_m16src_start+0xa4>)
     fe8:	7810      	ldrb	r0, [r2, #0]
     fea:	1c44      	adds	r4, r0, #1
     fec:	7014      	strb	r4, [r2, #0]
     fee:	b160      	cbz	r0, 100a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ff0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ff8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
     ffc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1000:	bf14      	ite	ne
    1002:	2000      	movne	r0, #0
    1004:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    100a:	4d1d      	ldr	r5, [pc, #116]	; (1080 <_m16src_start+0xa8>)
    100c:	782f      	ldrb	r7, [r5, #0]
    100e:	b12f      	cbz	r7, 101c <_m16src_start+0x44>
		m16src_ref--;
    1010:	7010      	strb	r0, [r2, #0]
    1012:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1016:	f06f 000a 	mvn.w	r0, #10
    101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    101c:	2601      	movs	r6, #1
    101e:	702e      	strb	r6, [r5, #0]
    1020:	f383 8811 	msr	BASEPRI, r3
    1024:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1028:	b319      	cbz	r1, 1072 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    102a:	4638      	mov	r0, r7
    102c:	f000 fb94 	bl	1758 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1030:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1034:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1038:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    103c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    103e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1042:	b192      	cbz	r2, 106a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1044:	2200      	movs	r2, #0
    1046:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    104a:	4a0e      	ldr	r2, [pc, #56]	; (1084 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    104c:	f013 0f01 	tst.w	r3, #1
    1050:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1054:	bf08      	it	eq
    1056:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    105a:	2000      	movs	r0, #0
    105c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1060:	f000 fb6a 	bl	1738 <_arch_irq_enable>
	m16src_grd = 0;
    1064:	2300      	movs	r3, #0
    1066:	702b      	strb	r3, [r5, #0]
    1068:	e7c4      	b.n	ff4 <_m16src_start+0x1c>
			__WFE();
    106a:	bf20      	wfe
			__SEV();
    106c:	bf40      	sev
			__WFE();
    106e:	bf20      	wfe
    1070:	e7e5      	b.n	103e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1072:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1076:	6026      	str	r6, [r4, #0]
    1078:	e7f4      	b.n	1064 <_m16src_start+0x8c>
    107a:	bf00      	nop
    107c:	2000000a 	.word	0x2000000a
    1080:	20000009 	.word	0x20000009
    1084:	e000e100 	.word	0xe000e100

00001088 <_k32src_start>:
{
    1088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    108a:	4606      	mov	r6, r0
    108c:	460c      	mov	r4, r1
	__asm__ volatile(
    108e:	f04f 0220 	mov.w	r2, #32
    1092:	f3ef 8311 	mrs	r3, BASEPRI
    1096:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    109a:	4a2c      	ldr	r2, [pc, #176]	; (114c <_k32src_start+0xc4>)
    109c:	7815      	ldrb	r5, [r2, #0]
    109e:	b165      	cbz	r5, 10ba <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    10a0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    10a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10a8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    10ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    10b0:	bf0c      	ite	eq
    10b2:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    10b6:	2000      	movne	r0, #0
    10b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    10ba:	2701      	movs	r7, #1
    10bc:	7017      	strb	r7, [r2, #0]
    10be:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    10c2:	4628      	mov	r0, r5
    10c4:	f000 fb48 	bl	1758 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    10c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    10cc:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    10ce:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    10d2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    10d6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    10da:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    10de:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    10e0:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    10e4:	b371      	cbz	r1, 1144 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    10e6:	0792      	lsls	r2, r2, #30
    10e8:	4f19      	ldr	r7, [pc, #100]	; (1150 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    10ea:	bf58      	it	pl
    10ec:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    10ee:	f04f 0100 	mov.w	r1, #0
    10f2:	f04f 0501 	mov.w	r5, #1
    10f6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    10fa:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    10fe:	bf58      	it	pl
    1100:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1104:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1108:	f000 fb16 	bl	1738 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    110c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1110:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1112:	2218      	movs	r2, #24
    1114:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1118:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    111c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1120:	f014 0103 	ands.w	r1, r4, #3
    1124:	d1be      	bne.n	10a4 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1126:	2010      	movs	r0, #16
    1128:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    112c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1130:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1132:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1136:	f7ff ff4f 	bl	fd8 <_m16src_start>
		if (!err) {
    113a:	2800      	cmp	r0, #0
    113c:	d1b2      	bne.n	10a4 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    113e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1142:	e7af      	b.n	10a4 <_k32src_start+0x1c>
		__WFE();
    1144:	bf20      	wfe
		__SEV();
    1146:	bf40      	sev
		__WFE();
    1148:	bf20      	wfe
    114a:	e7c9      	b.n	10e0 <_k32src_start+0x58>
    114c:	20000008 	.word	0x20000008
    1150:	e000e100 	.word	0xe000e100

00001154 <_power_clock_isr>:
{
    1154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    115a:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    115c:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1160:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1164:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1168:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    116c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1170:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1174:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1178:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    117c:	f1be 0f00 	cmp.w	lr, #0
    1180:	d003      	beq.n	118a <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1182:	f04f 0e00 	mov.w	lr, #0
    1186:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    118a:	b127      	cbz	r7, 1196 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    118c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1190:	2700      	movs	r7, #0
    1192:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1196:	b13a      	cbz	r2, 11a8 <_power_clock_isr+0x54>
    1198:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    119a:	bf41      	itttt	mi
    119c:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    11a0:	2201      	movmi	r2, #1
    11a2:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    11a6:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    11a8:	b120      	cbz	r0, 11b4 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11ae:	2200      	movs	r2, #0
    11b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    11b4:	b149      	cbz	r1, 11ca <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    11b6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    11ba:	2100      	movs	r1, #0
    11bc:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    11c0:	4628      	mov	r0, r5
    11c2:	f7ff fecf 	bl	f64 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    11c6:	2301      	movs	r3, #1
    11c8:	6163      	str	r3, [r4, #20]
	if (ctto) {
    11ca:	b176      	cbz	r6, 11ea <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    11cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11d0:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11d2:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    11d4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    11d8:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11da:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    11de:	f7ff fefb 	bl	fd8 <_m16src_start>
		if (!err) {
    11e2:	b910      	cbnz	r0, 11ea <_power_clock_isr+0x96>
    11e4:	4b01      	ldr	r3, [pc, #4]	; (11ec <_power_clock_isr+0x98>)
    11e6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    11ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11ec:	e000e100 	.word	0xe000e100

000011f0 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <rtc_compare_set+0x24>)
    11f2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    11f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    11fa:	1ac0      	subs	r0, r0, r3
    11fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1200:	4b05      	ldr	r3, [pc, #20]	; (1218 <rtc_compare_set+0x28>)
    1202:	3802      	subs	r0, #2
    1204:	4298      	cmp	r0, r3
    1206:	bf82      	ittt	hi
    1208:	4b04      	ldrhi	r3, [pc, #16]	; (121c <rtc_compare_set+0x2c>)
    120a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    120e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1212:	4770      	bx	lr
    1214:	40011000 	.word	0x40011000
    1218:	007ffffd 	.word	0x007ffffd
    121c:	e000e100 	.word	0xe000e100

00001220 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1220:	b538      	push	{r3, r4, r5, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1222:	4b11      	ldr	r3, [pc, #68]	; (1268 <rtc_announce_set_next+0x48>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1224:	4c11      	ldr	r4, [pc, #68]	; (126c <rtc_announce_set_next+0x4c>)
	rtc_now = RTC_COUNTER;
    1226:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    122a:	6822      	ldr	r2, [r4, #0]

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    122c:	4d10      	ldr	r5, [pc, #64]	; (1270 <rtc_announce_set_next+0x50>)
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    122e:	1a80      	subs	r0, r0, r2
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1230:	682b      	ldr	r3, [r5, #0]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (rtc_elapsed >= sys_clock_hw_cycles_per_tick) {
    1236:	4298      	cmp	r0, r3
    1238:	d30f      	bcc.n	125a <rtc_announce_set_next+0x3a>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / sys_clock_hw_cycles_per_tick;
    123a:	fbb0 f0f3 	udiv	r0, r0, r3

		if (sys_elapsed > expected_sys_ticks) {
    123e:	490d      	ldr	r1, [pc, #52]	; (1274 <rtc_announce_set_next+0x54>)
    1240:	6809      	ldr	r1, [r1, #0]
    1242:	4288      	cmp	r0, r1
    1244:	bf28      	it	cs
    1246:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1248:	fb00 2303 	mla	r3, r0, r3, r2
				(sys_elapsed * sys_clock_hw_cycles_per_tick)
			   ) & RTC_MASK;
    124c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1250:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1252:	4b09      	ldr	r3, [pc, #36]	; (1278 <rtc_announce_set_next+0x58>)
    1254:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1256:	f00b f871 	bl	c33c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    125a:	6820      	ldr	r0, [r4, #0]
    125c:	682b      	ldr	r3, [r5, #0]
    125e:	4418      	add	r0, r3
}
    1260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	rtc_compare_set(rtc_past + sys_clock_hw_cycles_per_tick);
    1264:	f7ff bfc4 	b.w	11f0 <rtc_compare_set>
    1268:	40011000 	.word	0x40011000
    126c:	20000010 	.word	0x20000010
    1270:	20003418 	.word	0x20003418
    1274:	2000000c 	.word	0x2000000c
    1278:	20003414 	.word	0x20003414

0000127c <rtc1_nrf5_isr>:
 */
void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    127c:	4b02      	ldr	r3, [pc, #8]	; (1288 <rtc1_nrf5_isr+0xc>)
    127e:	2200      	movs	r2, #0
    1280:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1284:	f7ff bfcc 	b.w	1220 <rtc_announce_set_next>
    1288:	40011000 	.word	0x40011000

0000128c <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    128c:	1e03      	subs	r3, r0, #0
    128e:	4a0a      	ldr	r2, [pc, #40]	; (12b8 <_timer_idle_enter+0x2c>)
    1290:	480a      	ldr	r0, [pc, #40]	; (12bc <_timer_idle_enter+0x30>)
    1292:	db04      	blt.n	129e <_timer_idle_enter+0x12>
		(sys_ticks > (RTC_HALF / sys_clock_hw_cycles_per_tick))) {
    1294:	6811      	ldr	r1, [r2, #0]
    1296:	fb90 f1f1 	sdiv	r1, r0, r1
	if ((sys_ticks < 0) ||
    129a:	428b      	cmp	r3, r1
    129c:	dd02      	ble.n	12a4 <_timer_idle_enter+0x18>
		sys_ticks = RTC_HALF / sys_clock_hw_cycles_per_tick;
    129e:	6813      	ldr	r3, [r2, #0]
    12a0:	fb90 f3f3 	sdiv	r3, r0, r3
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    12a4:	6810      	ldr	r0, [r2, #0]
    12a6:	4a06      	ldr	r2, [pc, #24]	; (12c0 <_timer_idle_enter+0x34>)
	expected_sys_ticks = sys_ticks;
    12a8:	4906      	ldr	r1, [pc, #24]	; (12c4 <_timer_idle_enter+0x38>)
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    12aa:	6812      	ldr	r2, [r2, #0]
	expected_sys_ticks = sys_ticks;
    12ac:	600b      	str	r3, [r1, #0]
	rtc_compare_set(rtc_past + (sys_ticks * sys_clock_hw_cycles_per_tick));
    12ae:	fb00 2003 	mla	r0, r0, r3, r2
    12b2:	f7ff bf9d 	b.w	11f0 <rtc_compare_set>
    12b6:	bf00      	nop
    12b8:	20003418 	.word	0x20003418
    12bc:	007fffff 	.word	0x007fffff
    12c0:	20000010 	.word	0x20000010
    12c4:	2000000c 	.word	0x2000000c

000012c8 <_timer_idle_exit>:
{
    12c8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    12ca:	4b07      	ldr	r3, [pc, #28]	; (12e8 <_timer_idle_exit+0x20>)
    12cc:	2200      	movs	r2, #0
    12ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12d2:	4b06      	ldr	r3, [pc, #24]	; (12ec <_timer_idle_exit+0x24>)
    12d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    12d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    12dc:	f7ff ffa0 	bl	1220 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    12e0:	4b03      	ldr	r3, [pc, #12]	; (12f0 <_timer_idle_exit+0x28>)
    12e2:	2201      	movs	r2, #1
    12e4:	601a      	str	r2, [r3, #0]
    12e6:	bd08      	pop	{r3, pc}
    12e8:	40011000 	.word	0x40011000
    12ec:	e000e100 	.word	0xe000e100
    12f0:	2000000c 	.word	0x2000000c

000012f4 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    12f4:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    12f6:	4818      	ldr	r0, [pc, #96]	; (1358 <_sys_clock_driver_init+0x64>)
    12f8:	f00a fab4 	bl	b864 <device_get_binding>
	if (!clock) {
    12fc:	b348      	cbz	r0, 1352 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    12fe:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1300:	4d16      	ldr	r5, [pc, #88]	; (135c <_sys_clock_driver_init+0x68>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	2101      	movs	r1, #1
    1306:	4798      	blx	r3
	rtc_past = 0;
    1308:	4b15      	ldr	r3, [pc, #84]	; (1360 <_sys_clock_driver_init+0x6c>)
    130a:	2400      	movs	r4, #0
    130c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <_sys_clock_driver_init+0x70>)
    1310:	2601      	movs	r6, #1
    1312:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    1314:	4b14      	ldr	r3, [pc, #80]	; (1368 <_sys_clock_driver_init+0x74>)
	SYS_CLOCK_RTC->PRESCALER = 0;
    1316:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = sys_clock_hw_cycles_per_tick;
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1324:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1328:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    132c:	4b0f      	ldr	r3, [pc, #60]	; (136c <_sys_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    132e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1336:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    133a:	4631      	mov	r1, r6
    133c:	4622      	mov	r2, r4
    133e:	2011      	movs	r0, #17
    1340:	f000 fa2c 	bl	179c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1344:	2011      	movs	r0, #17
    1346:	f000 f9f7 	bl	1738 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    134a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    134c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    134e:	602e      	str	r6, [r5, #0]
	return 0;
    1350:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1356:	bd70      	pop	{r4, r5, r6, pc}
    1358:	0000cc38 	.word	0x0000cc38
    135c:	40011000 	.word	0x40011000
    1360:	20000010 	.word	0x20000010
    1364:	2000000c 	.word	0x2000000c
    1368:	20003418 	.word	0x20003418
    136c:	e000e100 	.word	0xe000e100

00001370 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1370:	4a0a      	ldr	r2, [pc, #40]	; (139c <_timer_cycle_get_32+0x2c>)
{
    1372:	b530      	push	{r4, r5, lr}
	rtc_now = RTC_COUNTER;
    1374:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1378:	4d09      	ldr	r5, [pc, #36]	; (13a0 <_timer_cycle_get_32+0x30>)
    137a:	e9d5 0100 	ldrd	r0, r1, [r5]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     sys_clock_hw_cycles_per_tick)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    137e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1382:	42a3      	cmp	r3, r4
    1384:	d107      	bne.n	1396 <_timer_cycle_get_32+0x26>
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1386:	4a07      	ldr	r2, [pc, #28]	; (13a4 <_timer_cycle_get_32+0x34>)
    1388:	6812      	ldr	r2, [r2, #0]
    138a:	4350      	muls	r0, r2
    138c:	1a1b      	subs	r3, r3, r0
    138e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
	       elapsed_cycles;
}
    1392:	4418      	add	r0, r3
    1394:	bd30      	pop	{r4, r5, pc}
    1396:	4623      	mov	r3, r4
    1398:	e7ef      	b.n	137a <_timer_cycle_get_32+0xa>
    139a:	bf00      	nop
    139c:	40011000 	.word	0x40011000
    13a0:	20001218 	.word	0x20001218
    13a4:	20003418 	.word	0x20003418

000013a8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    13a8:	4807      	ldr	r0, [pc, #28]	; (13c8 <_EXIT_EXC+0x4>)

    ldr r1, [r0, #_kernel_offset_to_current]
    13aa:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    13ac:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
    13ae:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    13b0:	d008      	beq.n	13c4 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    13b2:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    13b4:	f00a fee0 	bl	c178 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    13b8:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    13bc:	4903      	ldr	r1, [pc, #12]	; (13cc <_EXIT_EXC+0x8>)
    ldr r2, =_SCS_ICSR_PENDSV
    13be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    13c2:	600a      	str	r2, [r1, #0]

000013c4 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    13c4:	4770      	bx	lr
    13c6:	0000      	.short	0x0000
    ldr r0, =_kernel
    13c8:	200011e0 	.word	0x200011e0
    ldr r1, =_SCS_ICSR
    13cc:	e000ed04 	.word	0xe000ed04

000013d0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13d0:	4804      	ldr	r0, [pc, #16]	; (13e4 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    13d2:	2300      	movs	r3, #0
    13d4:	2120      	movs	r1, #32
    13d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    13d8:	3301      	adds	r3, #1
    13da:	2b27      	cmp	r3, #39	; 0x27
    13dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    13e0:	d1f9      	bne.n	13d6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    13e2:	4770      	bx	lr
    13e4:	e000e100 	.word	0xe000e100

000013e8 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    13e8:	4a08      	ldr	r2, [pc, #32]	; (140c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    13ea:	4909      	ldr	r1, [pc, #36]	; (1410 <__swap+0x28>)
	_current->arch.basepri = key;
    13ec:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    13ee:	6809      	ldr	r1, [r1, #0]
    13f0:	66d9      	str	r1, [r3, #108]	; 0x6c

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13f2:	4908      	ldr	r1, [pc, #32]	; (1414 <__swap+0x2c>)
	_current->arch.basepri = key;
    13f4:	6698      	str	r0, [r3, #104]	; 0x68
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13f6:	684b      	ldr	r3, [r1, #4]
    13f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    13fc:	604b      	str	r3, [r1, #4]
    13fe:	2300      	movs	r3, #0
    1400:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1404:	6893      	ldr	r3, [r2, #8]
}
    1406:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    1408:	4770      	bx	lr
    140a:	bf00      	nop
    140c:	200011e0 	.word	0x200011e0
    1410:	0000ed98 	.word	0x0000ed98
    1414:	e000ed00 	.word	0xe000ed00

00001418 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1418:	2020      	movs	r0, #32
    msr BASEPRI, r0
    141a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    141e:	490d      	ldr	r1, [pc, #52]	; (1454 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1420:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1422:	202c      	movs	r0, #44	; 0x2c
    add r0, r2
    1424:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    1426:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    142a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    142e:	4f0a      	ldr	r7, [pc, #40]	; (1458 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1430:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    1434:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    1436:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    1438:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    143a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    movs.n r3, #0
    143c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    143e:	6693      	str	r3, [r2, #104]	; 0x68
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1440:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1444:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    ldmia r0, {v1-v8, ip}
    1448:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    144c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    1450:	4770      	bx	lr
    1452:	0000      	.short	0x0000
    ldr r1, =_kernel
    1454:	200011e0 	.word	0x200011e0
    ldr v4, =_SCS_ICSR
    1458:	e000ed04 	.word	0xe000ed04

0000145c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    145c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1460:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1462:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1466:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    146a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    146c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    1470:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    1474:	2902      	cmp	r1, #2
    beq _oops
    1476:	d0ff      	beq.n	1478 <_oops>

00001478 <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {lr}
    1478:	b500      	push	{lr}
    blx _do_kernel_oops
    147a:	f000 fa2b 	bl	18d4 <_do_kernel_oops>
    pop {pc}
    147e:	bd00      	pop	{pc}

00001480 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    1480:	b510      	push	{r4, lr}
    1482:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    1484:	f00a feee 	bl	c264 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    1488:	6822      	ldr	r2, [r4, #0]
    148a:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    148c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    1490:	4801      	ldr	r0, [pc, #4]	; (1498 <_FaultThreadShow.isra.2+0x18>)
    1492:	f7ff bceb 	b.w	e6c <printk>
    1496:	bf00      	nop
    1498:	0000cd91 	.word	0x0000cd91

0000149c <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    149c:	b538      	push	{r3, r4, r5, lr}
    149e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** MPU FAULT *****\n");
    14a0:	481a      	ldr	r0, [pc, #104]	; (150c <_MpuFault+0x70>)
{
    14a2:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    14a4:	f7ff fce2 	bl	e6c <printk>

	_FaultThreadShow(esf);
    14a8:	f104 0018 	add.w	r0, r4, #24

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    14ac:	4c18      	ldr	r4, [pc, #96]	; (1510 <_MpuFault+0x74>)
	_FaultThreadShow(esf);
    14ae:	f7ff ffe7 	bl	1480 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    14b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14b4:	06d9      	lsls	r1, r3, #27
    14b6:	d502      	bpl.n	14be <_MpuFault+0x22>
		PR_EXC("  Stacking error\n");
    14b8:	4816      	ldr	r0, [pc, #88]	; (1514 <_MpuFault+0x78>)
    14ba:	f7ff fcd7 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    14be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14c0:	071a      	lsls	r2, r3, #28
    14c2:	d502      	bpl.n	14ca <_MpuFault+0x2e>
		PR_EXC("  Unstacking error\n");
    14c4:	4814      	ldr	r0, [pc, #80]	; (1518 <_MpuFault+0x7c>)
    14c6:	f7ff fcd1 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    14ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14cc:	079b      	lsls	r3, r3, #30
    14ce:	d50e      	bpl.n	14ee <_MpuFault+0x52>
		PR_EXC("  Data Access Violation\n");
    14d0:	4812      	ldr	r0, [pc, #72]	; (151c <_MpuFault+0x80>)
    14d2:	f7ff fccb 	bl	e6c <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		u32_t mmfar = SCB->MMFAR;
    14d6:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    14d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14da:	0618      	lsls	r0, r3, #24
    14dc:	d507      	bpl.n	14ee <_MpuFault+0x52>
			PR_EXC("  Address: 0x%x\n", mmfar);
    14de:	4810      	ldr	r0, [pc, #64]	; (1520 <_MpuFault+0x84>)
    14e0:	f7ff fcc4 	bl	e6c <printk>
			if (fromHardFault) {
    14e4:	b11d      	cbz	r5, 14ee <_MpuFault+0x52>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    14e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    14ec:	62a3      	str	r3, [r4, #40]	; 0x28
#else
		(void)mmfar;
#endif /* CONFIG_HW_STACK_PROTECTION */
		}
	}
	if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    14ee:	4c08      	ldr	r4, [pc, #32]	; (1510 <_MpuFault+0x74>)
    14f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    14f2:	07d2      	lsls	r2, r2, #31
    14f4:	d502      	bpl.n	14fc <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    14f6:	480b      	ldr	r0, [pc, #44]	; (1524 <_MpuFault+0x88>)
    14f8:	f7ff fcb8 	bl	e6c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    14fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    14fe:	069b      	lsls	r3, r3, #26
    1500:	d502      	bpl.n	1508 <_MpuFault+0x6c>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1502:	4809      	ldr	r0, [pc, #36]	; (1528 <_MpuFault+0x8c>)
    1504:	f7ff fcb2 	bl	e6c <printk>
	}
#endif /* !defined(CONFIG_ARMV7_M_ARMV8_M_FP) */

	return reason;
}
    1508:	2000      	movs	r0, #0
    150a:	bd38      	pop	{r3, r4, r5, pc}
    150c:	0000cddb 	.word	0x0000cddb
    1510:	e000ed00 	.word	0xe000ed00
    1514:	0000cdf2 	.word	0x0000cdf2
    1518:	0000ce04 	.word	0x0000ce04
    151c:	0000ce18 	.word	0x0000ce18
    1520:	0000ce31 	.word	0x0000ce31
    1524:	0000ce42 	.word	0x0000ce42
    1528:	0000ce62 	.word	0x0000ce62

0000152c <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t _UsageFault(const NANO_ESF *esf)
{
    152c:	b510      	push	{r4, lr}
    152e:	4604      	mov	r4, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_EXC("***** USAGE FAULT *****\n");
    1530:	481a      	ldr	r0, [pc, #104]	; (159c <_UsageFault+0x70>)
    1532:	f7ff fc9b 	bl	e6c <printk>

	_FaultThreadShow(esf);
    1536:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    153a:	4c19      	ldr	r4, [pc, #100]	; (15a0 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    153c:	f7ff ffa0 	bl	1480 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1542:	019a      	lsls	r2, r3, #6
    1544:	d502      	bpl.n	154c <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    1546:	4817      	ldr	r0, [pc, #92]	; (15a4 <_UsageFault+0x78>)
    1548:	f7ff fc90 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    154c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    154e:	01db      	lsls	r3, r3, #7
    1550:	d502      	bpl.n	1558 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1552:	4815      	ldr	r0, [pc, #84]	; (15a8 <_UsageFault+0x7c>)
    1554:	f7ff fc8a 	bl	e6c <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_HW_STACK_PROTECTION */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    155a:	0318      	lsls	r0, r3, #12
    155c:	d502      	bpl.n	1564 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    155e:	4813      	ldr	r0, [pc, #76]	; (15ac <_UsageFault+0x80>)
    1560:	f7ff fc84 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1564:	4c0e      	ldr	r4, [pc, #56]	; (15a0 <_UsageFault+0x74>)
    1566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1568:	0359      	lsls	r1, r3, #13
    156a:	d502      	bpl.n	1572 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    156c:	4810      	ldr	r0, [pc, #64]	; (15b0 <_UsageFault+0x84>)
    156e:	f7ff fc7d 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1574:	039a      	lsls	r2, r3, #14
    1576:	d502      	bpl.n	157e <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1578:	480e      	ldr	r0, [pc, #56]	; (15b4 <_UsageFault+0x88>)
    157a:	f7ff fc77 	bl	e6c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    157e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1580:	03db      	lsls	r3, r3, #15
    1582:	d502      	bpl.n	158a <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    1584:	480c      	ldr	r0, [pc, #48]	; (15b8 <_UsageFault+0x8c>)
    1586:	f7ff fc71 	bl	e6c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    158a:	4a05      	ldr	r2, [pc, #20]	; (15a0 <_UsageFault+0x74>)
    158c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    158e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1592:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1596:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1598:	2000      	movs	r0, #0
    159a:	bd10      	pop	{r4, pc}
    159c:	0000ce92 	.word	0x0000ce92
    15a0:	e000ed00 	.word	0xe000ed00
    15a4:	0000ceab 	.word	0x0000ceab
    15a8:	0000cebf 	.word	0x0000cebf
    15ac:	0000ceda 	.word	0x0000ceda
    15b0:	0000cef9 	.word	0x0000cef9
    15b4:	0000cf1f 	.word	0x0000cf1f
    15b8:	0000cf3a 	.word	0x0000cf3a

000015bc <_BusFault>:
{
    15bc:	b538      	push	{r3, r4, r5, lr}
    15be:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    15c0:	481d      	ldr	r0, [pc, #116]	; (1638 <_BusFault+0x7c>)
{
    15c2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    15c4:	f7ff fc52 	bl	e6c <printk>
	_FaultThreadShow(esf);
    15c8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15cc:	4c1b      	ldr	r4, [pc, #108]	; (163c <_BusFault+0x80>)
	_FaultThreadShow(esf);
    15ce:	f7ff ff57 	bl	1480 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d4:	04d8      	lsls	r0, r3, #19
    15d6:	d504      	bpl.n	15e2 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    15d8:	4819      	ldr	r0, [pc, #100]	; (1640 <_BusFault+0x84>)
}
    15da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    15de:	f7ff bc45 	b.w	e6c <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e4:	0519      	lsls	r1, r3, #20
    15e6:	d501      	bpl.n	15ec <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    15e8:	4816      	ldr	r0, [pc, #88]	; (1644 <_BusFault+0x88>)
    15ea:	e7f6      	b.n	15da <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15ee:	059a      	lsls	r2, r3, #22
    15f0:	d514      	bpl.n	161c <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    15f2:	4815      	ldr	r0, [pc, #84]	; (1648 <_BusFault+0x8c>)
    15f4:	f7ff fc3a 	bl	e6c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    15f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    15fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fc:	041b      	lsls	r3, r3, #16
    15fe:	d507      	bpl.n	1610 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1600:	4812      	ldr	r0, [pc, #72]	; (164c <_BusFault+0x90>)
    1602:	f7ff fc33 	bl	e6c <printk>
			if (fromHardFault) {
    1606:	b11d      	cbz	r5, 1610 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    160e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1610:	4b0a      	ldr	r3, [pc, #40]	; (163c <_BusFault+0x80>)
    1612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1614:	0558      	lsls	r0, r3, #21
    1616:	d50e      	bpl.n	1636 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1618:	480d      	ldr	r0, [pc, #52]	; (1650 <_BusFault+0x94>)
    161a:	e7de      	b.n	15da <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    161c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    161e:	0559      	lsls	r1, r3, #21
    1620:	d4fa      	bmi.n	1618 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1624:	05da      	lsls	r2, r3, #23
    1626:	d501      	bpl.n	162c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1628:	480a      	ldr	r0, [pc, #40]	; (1654 <_BusFault+0x98>)
    162a:	e7d6      	b.n	15da <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    162c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    162e:	049b      	lsls	r3, r3, #18
    1630:	d501      	bpl.n	1636 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1632:	4809      	ldr	r0, [pc, #36]	; (1658 <_BusFault+0x9c>)
    1634:	e7d1      	b.n	15da <_BusFault+0x1e>
    1636:	bd38      	pop	{r3, r4, r5, pc}
    1638:	0000cc58 	.word	0x0000cc58
    163c:	e000ed00 	.word	0xe000ed00
    1640:	0000cdf2 	.word	0x0000cdf2
    1644:	0000ce04 	.word	0x0000ce04
    1648:	0000cc6f 	.word	0x0000cc6f
    164c:	0000ce31 	.word	0x0000ce31
    1650:	0000cc89 	.word	0x0000cc89
    1654:	0000cca5 	.word	0x0000cca5
    1658:	0000ce62 	.word	0x0000ce62

0000165c <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * building Secure Firmware.
 */
void _Fault(const NANO_ESF *esf, u32_t exc_return)
{
    165c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    165e:	4c27      	ldr	r4, [pc, #156]	; (16fc <_Fault+0xa0>)
    1660:	6863      	ldr	r3, [r4, #4]
    1662:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1666:	1eda      	subs	r2, r3, #3
{
    1668:	4605      	mov	r5, r0
	switch (fault) {
    166a:	2a09      	cmp	r2, #9
    166c:	d83b      	bhi.n	16e6 <_Fault+0x8a>
    166e:	e8df f002 	tbb	[pc, r2]
    1672:	3405      	.short	0x3405
    1674:	3a3a3036 	.word	0x3a3a3036
    1678:	383a3a3a 	.word	0x383a3a3a
	PR_EXC("***** HARD FAULT *****\n");
    167c:	4820      	ldr	r0, [pc, #128]	; (1700 <_Fault+0xa4>)
    167e:	f7ff fbf5 	bl	e6c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1684:	079a      	lsls	r2, r3, #30
    1686:	d503      	bpl.n	1690 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1688:	481e      	ldr	r0, [pc, #120]	; (1704 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    168a:	f7ff fbef 	bl	e6c <printk>
    168e:	e002      	b.n	1696 <_Fault+0x3a>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1690:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1692:	005b      	lsls	r3, r3, #1
    1694:	d401      	bmi.n	169a <_Fault+0x3e>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    1696:	2000      	movs	r0, #0
    1698:	e009      	b.n	16ae <_Fault+0x52>
		PR_EXC("  Fault escalation (see below)\n");
    169a:	481b      	ldr	r0, [pc, #108]	; (1708 <_Fault+0xac>)
    169c:	f7ff fbe6 	bl	e6c <printk>
		if (SCB_MMFSR) {
    16a0:	4b1a      	ldr	r3, [pc, #104]	; (170c <_Fault+0xb0>)
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	b143      	cbz	r3, 16b8 <_Fault+0x5c>
			reason = _MpuFault(esf, 1);
    16a6:	2101      	movs	r1, #1
		reason = _MpuFault(esf, 0);
    16a8:	4628      	mov	r0, r5
    16aa:	f7ff fef7 	bl	149c <_MpuFault>
#else
	(void) exc_return;
	FAULT_DUMP(reason, esf, fault);
#endif /* CONFIG_ARM_SECURE_FIRMWARE*/

	_SysFatalErrorHandler(reason, esf);
    16ae:	4629      	mov	r1, r5
}
    16b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, esf);
    16b4:	f000 b912 	b.w	18dc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    16b8:	4b15      	ldr	r3, [pc, #84]	; (1710 <_Fault+0xb4>)
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	b123      	cbz	r3, 16c8 <_Fault+0x6c>
			_BusFault(esf, 1);
    16be:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    16c0:	4628      	mov	r0, r5
    16c2:	f7ff ff7b 	bl	15bc <_BusFault>
    16c6:	e7e6      	b.n	1696 <_Fault+0x3a>
		} else if (SCB_UFSR) {
    16c8:	4b12      	ldr	r3, [pc, #72]	; (1714 <_Fault+0xb8>)
    16ca:	881b      	ldrh	r3, [r3, #0]
    16cc:	b29b      	uxth	r3, r3
    16ce:	2b00      	cmp	r3, #0
    16d0:	d0e1      	beq.n	1696 <_Fault+0x3a>
		reason = _UsageFault(esf);
    16d2:	4628      	mov	r0, r5
    16d4:	f7ff ff2a 	bl	152c <_UsageFault>
    16d8:	e7e9      	b.n	16ae <_Fault+0x52>
		reason = _MpuFault(esf, 0);
    16da:	2100      	movs	r1, #0
    16dc:	e7e4      	b.n	16a8 <_Fault+0x4c>
		_BusFault(esf, 0);
    16de:	2100      	movs	r1, #0
    16e0:	e7ee      	b.n	16c0 <_Fault+0x64>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    16e2:	480d      	ldr	r0, [pc, #52]	; (1718 <_Fault+0xbc>)
    16e4:	e7d1      	b.n	168a <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    16e6:	480d      	ldr	r0, [pc, #52]	; (171c <_Fault+0xc0>)
    16e8:	490d      	ldr	r1, [pc, #52]	; (1720 <_Fault+0xc4>)
    16ea:	f1a3 0210 	sub.w	r2, r3, #16
    16ee:	2b0f      	cmp	r3, #15
    16f0:	bfd8      	it	le
    16f2:	4601      	movle	r1, r0
    16f4:	480b      	ldr	r0, [pc, #44]	; (1724 <_Fault+0xc8>)
    16f6:	f7ff fbb9 	bl	e6c <printk>
    16fa:	e7cc      	b.n	1696 <_Fault+0x3a>
    16fc:	e000ed00 	.word	0xe000ed00
    1700:	0000ccec 	.word	0x0000ccec
    1704:	0000cd04 	.word	0x0000cd04
    1708:	0000cd26 	.word	0x0000cd26
    170c:	e000ed28 	.word	0xe000ed28
    1710:	e000ed29 	.word	0xe000ed29
    1714:	e000ed2a 	.word	0xe000ed2a
    1718:	0000cd46 	.word	0x0000cd46
    171c:	0000ccbe 	.word	0x0000ccbe
    1720:	0000ccd3 	.word	0x0000ccd3
    1724:	0000cd7d 	.word	0x0000cd7d

00001728 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1728:	4a02      	ldr	r2, [pc, #8]	; (1734 <_FaultInit+0xc>)
    172a:	6953      	ldr	r3, [r2, #20]
    172c:	f043 0310 	orr.w	r3, r3, #16
    1730:	6153      	str	r3, [r2, #20]
    1732:	4770      	bx	lr
    1734:	e000ed00 	.word	0xe000ed00

00001738 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1738:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    173a:	2b00      	cmp	r3, #0
    173c:	db08      	blt.n	1750 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    173e:	2201      	movs	r2, #1
    1740:	f000 001f 	and.w	r0, r0, #31
    1744:	fa02 f000 	lsl.w	r0, r2, r0
    1748:	095b      	lsrs	r3, r3, #5
    174a:	4a02      	ldr	r2, [pc, #8]	; (1754 <_arch_irq_enable+0x1c>)
    174c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1750:	4770      	bx	lr
    1752:	bf00      	nop
    1754:	e000e100 	.word	0xe000e100

00001758 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1758:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    175a:	2b00      	cmp	r3, #0
    175c:	db0d      	blt.n	177a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    175e:	2201      	movs	r2, #1
    1760:	095b      	lsrs	r3, r3, #5
    1762:	f000 001f 	and.w	r0, r0, #31
    1766:	fa02 f000 	lsl.w	r0, r2, r0
    176a:	3320      	adds	r3, #32
    176c:	4a03      	ldr	r2, [pc, #12]	; (177c <_arch_irq_disable+0x24>)
    176e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1776:	f3bf 8f6f 	isb	sy
    177a:	4770      	bx	lr
    177c:	e000e100 	.word	0xe000e100

00001780 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1780:	0942      	lsrs	r2, r0, #5
    1782:	4b05      	ldr	r3, [pc, #20]	; (1798 <_arch_irq_is_enabled+0x18>)
    1784:	f000 001f 	and.w	r0, r0, #31
    1788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    178c:	2301      	movs	r3, #1
    178e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1792:	4010      	ands	r0, r2
    1794:	4770      	bx	lr
    1796:	bf00      	nop
    1798:	e000e100 	.word	0xe000e100

0000179c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    179c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    179e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17a0:	bfa8      	it	ge
    17a2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    17a6:	f101 0101 	add.w	r1, r1, #1
    17aa:	ea4f 1141 	mov.w	r1, r1, lsl #5
    17ae:	bfad      	iteet	ge
    17b0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17b4:	f000 000f 	andlt.w	r0, r0, #15
    17b8:	4b03      	ldrlt	r3, [pc, #12]	; (17c8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17ba:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17bc:	bfb6      	itet	lt
    17be:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17c0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17c4:	5419      	strblt	r1, [r3, r0]
    17c6:	4770      	bx	lr
    17c8:	e000ed14 	.word	0xe000ed14

000017cc <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    17cc:	f000 b842 	b.w	1854 <__bus_fault>

000017d0 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    17d0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    17d2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <_arch_isr_direct_pm+0x18>)
    17d6:	69d8      	ldr	r0, [r3, #28]
    17d8:	b118      	cbz	r0, 17e2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    17da:	2200      	movs	r2, #0
    17dc:	61da      	str	r2, [r3, #28]
		_sys_power_save_idle_exit(idle_val);
    17de:	f00a f867 	bl	b8b0 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    17e2:	b662      	cpsie	i
    17e4:	bd08      	pop	{r3, pc}
    17e6:	bf00      	nop
    17e8:	200011e0 	.word	0x200011e0

000017ec <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    17ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ee:	460c      	mov	r4, r1
    17f0:	4616      	mov	r6, r2
    17f2:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    17f4:	2204      	movs	r2, #4
    17f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    17fa:	4605      	mov	r5, r0
    17fc:	f00a ffb8 	bl	c770 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1800:	f1a6 0120 	sub.w	r1, r6, #32
    1804:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1806:	4a0c      	ldr	r2, [pc, #48]	; (1838 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1808:	65ec      	str	r4, [r5, #92]	; 0x5c
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    180a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    180e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1810:	f022 0201 	bic.w	r2, r2, #1
    1814:	652b      	str	r3, [r5, #80]	; 0x50
	thread->fn_abort = NULL;
    1816:	656b      	str	r3, [r5, #84]	; 0x54
	thread->stack_info.size = (u32_t)stackSize;
    1818:	662e      	str	r6, [r5, #96]	; 0x60
    181a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    181c:	9a06      	ldr	r2, [sp, #24]
    181e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1820:	9a07      	ldr	r2, [sp, #28]
    1822:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1824:	9a08      	ldr	r2, [sp, #32]
    1826:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1828:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    182a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    182e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1830:	64e9      	str	r1, [r5, #76]	; 0x4c
	thread->arch.basepri = 0;
    1832:	66ab      	str	r3, [r5, #104]	; 0x68
    1834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1836:	bf00      	nop
    1838:	00000779 	.word	0x00000779

0000183c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    183c:	4901      	ldr	r1, [pc, #4]	; (1844 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    183e:	2210      	movs	r2, #16
	str r2, [r1]
    1840:	600a      	str	r2, [r1, #0]
	bx lr
    1842:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1844:	e000ed10 	.word	0xe000ed10

00001848 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1848:	4040      	eors	r0, r0
	msr BASEPRI, r0
    184a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    184e:	bf30      	wfi

	bx lr
    1850:	4770      	bx	lr
    1852:	bf00      	nop

00001854 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1854:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1856:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    185a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1878 <__bus_fault+0x24>
	ldr ip, [ip]
    185e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1862:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1866:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1868:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    186c:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	push {lr}
    1870:	b500      	push	{lr}
	bl _Fault
    1872:	f7ff fef3 	bl	165c <_Fault>

	pop {pc}
    1876:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1878:	e000ed04 	.word	0xe000ed04

0000187c <_NanoFatalErrorHandler>:
 * @return This function does not return.
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    187c:	2804      	cmp	r0, #4
{
    187e:	b538      	push	{r3, r4, r5, lr}
    1880:	4604      	mov	r4, r0
    1882:	460d      	mov	r5, r1
	switch (reason) {
    1884:	d013      	beq.n	18ae <_NanoFatalErrorHandler+0x32>
    1886:	2805      	cmp	r0, #5
    1888:	d013      	beq.n	18b2 <_NanoFatalErrorHandler+0x36>
    188a:	2803      	cmp	r0, #3
    188c:	d113      	bne.n	18b6 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    188e:	480c      	ldr	r0, [pc, #48]	; (18c0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1890:	f7ff faec 	bl	e6c <printk>
    1894:	f00a fce6 	bl	c264 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1898:	69aa      	ldr	r2, [r5, #24]
    189a:	4601      	mov	r1, r0
    189c:	4809      	ldr	r0, [pc, #36]	; (18c4 <_NanoFatalErrorHandler+0x48>)
    189e:	f7ff fae5 	bl	e6c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    18a2:	4629      	mov	r1, r5
    18a4:	4620      	mov	r0, r4
}
    18a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    18aa:	f000 b817 	b.w	18dc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    18ae:	4806      	ldr	r0, [pc, #24]	; (18c8 <_NanoFatalErrorHandler+0x4c>)
    18b0:	e7ee      	b.n	1890 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    18b2:	4806      	ldr	r0, [pc, #24]	; (18cc <_NanoFatalErrorHandler+0x50>)
    18b4:	e7ec      	b.n	1890 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    18b6:	4601      	mov	r1, r0
    18b8:	4805      	ldr	r0, [pc, #20]	; (18d0 <_NanoFatalErrorHandler+0x54>)
    18ba:	f7ff fad7 	bl	e6c <printk>
		break;
    18be:	e7e9      	b.n	1894 <_NanoFatalErrorHandler+0x18>
    18c0:	0000cf66 	.word	0x0000cf66
    18c4:	0000cfe4 	.word	0x0000cfe4
    18c8:	0000cf8c 	.word	0x0000cf8c
    18cc:	0000cfa6 	.word	0x0000cfa6
    18d0:	0000cfc1 	.word	0x0000cfc1

000018d4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    18d4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    18d6:	6800      	ldr	r0, [r0, #0]
    18d8:	f7ff bfd0 	b.w	187c <_NanoFatalErrorHandler>

000018dc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    18dc:	2805      	cmp	r0, #5
{
    18de:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    18e0:	d00c      	beq.n	18fc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    18e2:	f00a fe73 	bl	c5cc <k_is_in_isr>
    18e6:	b160      	cbz	r0, 1902 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    18e8:	f00a fe70 	bl	c5cc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    18ec:	4b0c      	ldr	r3, [pc, #48]	; (1920 <_SysFatalErrorHandler+0x44>)
    18ee:	490d      	ldr	r1, [pc, #52]	; (1924 <_SysFatalErrorHandler+0x48>)
    18f0:	2800      	cmp	r0, #0
    18f2:	bf08      	it	eq
    18f4:	4619      	moveq	r1, r3
    18f6:	480c      	ldr	r0, [pc, #48]	; (1928 <_SysFatalErrorHandler+0x4c>)
    18f8:	f7ff fab8 	bl	e6c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    18fc:	f7ff ffa4 	bl	1848 <k_cpu_idle>
    1900:	e7fc      	b.n	18fc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1902:	f00a fe73 	bl	c5ec <_is_thread_essential>
    1906:	2800      	cmp	r0, #0
    1908:	d1ee      	bne.n	18e8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    190a:	4c08      	ldr	r4, [pc, #32]	; (192c <_SysFatalErrorHandler+0x50>)
    190c:	4808      	ldr	r0, [pc, #32]	; (1930 <_SysFatalErrorHandler+0x54>)
    190e:	68a1      	ldr	r1, [r4, #8]
    1910:	f7ff faac 	bl	e6c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1914:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    191a:	f000 b80b 	b.w	1934 <_impl_k_thread_abort>
    191e:	bf00      	nop
    1920:	0000d024 	.word	0x0000d024
    1924:	0000d020 	.word	0x0000d020
    1928:	0000d035 	.word	0x0000d035
    192c:	200011e0 	.word	0x200011e0
    1930:	0000d055 	.word	0x0000d055

00001934 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1934:	b538      	push	{r3, r4, r5, lr}
    1936:	4605      	mov	r5, r0
	__asm__ volatile(
    1938:	f04f 0320 	mov.w	r3, #32
    193c:	f3ef 8411 	mrs	r4, BASEPRI
    1940:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1944:	f00a feaa 	bl	c69c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1948:	4b0b      	ldr	r3, [pc, #44]	; (1978 <_impl_k_thread_abort+0x44>)
    194a:	689b      	ldr	r3, [r3, #8]
    194c:	429d      	cmp	r5, r3
    194e:	d10d      	bne.n	196c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <_impl_k_thread_abort+0x48>)
    1952:	685a      	ldr	r2, [r3, #4]
    1954:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1958:	b922      	cbnz	r2, 1964 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    195a:	f00a fc0d 	bl	c178 <_update_time_slice_before_swap>

	return __swap(key);
    195e:	4620      	mov	r0, r4
    1960:	f7ff fd42 	bl	13e8 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1964:	685a      	ldr	r2, [r3, #4]
    1966:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    196a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule(key);
    196c:	4620      	mov	r0, r4
}
    196e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    1972:	f00a babb 	b.w	beec <_reschedule>
    1976:	bf00      	nop
    1978:	200011e0 	.word	0x200011e0
    197c:	e000ed00 	.word	0xe000ed00

00001980 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1980:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1982:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1984:	4a0b      	ldr	r2, [pc, #44]	; (19b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1986:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    1988:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    198a:	bf1e      	ittt	ne
	movne	r1, #0
    198c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    198e:	61d1      	strne	r1, [r2, #28]
		blxne	_sys_power_save_idle_exit
    1990:	f009 ff8e 	blne	b8b0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1994:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1996:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    199a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    199e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    19a2:	4905      	ldr	r1, [pc, #20]	; (19b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    19a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    19a6:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    19a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    19aa:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    19ae:	f7ff bcfb 	b.w	13a8 <_ExcExit>
    19b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    19b4:	200011e0 	.word	0x200011e0
	ldr r1, =_sw_isr_table
    19b8:	000000dc 	.word	0x000000dc

000019bc <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19bc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19be:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    19c2:	4806      	ldr	r0, [pc, #24]	; (19dc <__reset+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    19c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    19c8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19ca:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    19ce:	2002      	movs	r0, #2
    msr CONTROL, r0
    19d0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
    */
    isb
    19d4:	f3bf 8f6f 	isb	sy

    b _PrepC
    19d8:	f000 b806 	b.w	19e8 <_PrepC>
    ldr r0, =_interrupt_stack
    19dc:	200025a0 	.word	0x200025a0

000019e0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    19e0:	bf30      	wfi
    b _SysNmiOnReset
    19e2:	f7ff bffd 	b.w	19e0 <_SysNmiOnReset>
    19e6:	bf00      	nop

000019e8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    19e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    19ea:	4b07      	ldr	r3, [pc, #28]	; (1a08 <_PrepC+0x20>)
    19ec:	4a07      	ldr	r2, [pc, #28]	; (1a0c <_PrepC+0x24>)
    19ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    19f2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    19f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19f8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    19fc:	f009 ff88 	bl	b910 <_bss_zero>
	_data_copy();
    1a00:	f009 ff90 	bl	b924 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1a04:	f009 ffb2 	bl	b96c <_Cstart>
    1a08:	00000000 	.word	0x00000000
    1a0c:	e000ed00 	.word	0xe000ed00

00001a10 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1a10:	b508      	push	{r3, lr}
	handler();
    1a12:	f7ff ffe5 	bl	19e0 <_SysNmiOnReset>
	_ExcExit();
}
    1a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1a1a:	f7ff bcc5 	b.w	13a8 <_ExcExit>
	...

00001a20 <arm_mpu_init>:
 */
static void _arm_mpu_config(void)
{
	u32_t r_index;

	if (mpu_config.num_regions > _get_num_regions()) {
    1a20:	4912      	ldr	r1, [pc, #72]	; (1a6c <arm_mpu_init+0x4c>)
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1a22:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1a24:	680d      	ldr	r5, [r1, #0]
    1a26:	2d08      	cmp	r5, #8
    1a28:	d80d      	bhi.n	1a46 <arm_mpu_init+0x26>
	ARM_MPU_DEV->ctrl = 0;
    1a2a:	4a11      	ldr	r2, [pc, #68]	; (1a70 <arm_mpu_init+0x50>)
    1a2c:	6848      	ldr	r0, [r1, #4]
    1a2e:	2300      	movs	r3, #0
    1a30:	6053      	str	r3, [r2, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1a32:	429d      	cmp	r5, r3
    1a34:	f100 000c 	add.w	r0, r0, #12
    1a38:	d107      	bne.n	1a4a <arm_mpu_init+0x2a>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1a3a:	2305      	movs	r3, #5
    1a3c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a42:	f3bf 8f6f 	isb	sy
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT((ARM_MPU_DEV->type & 0xFF00) >> 8 == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
}
    1a46:	2000      	movs	r0, #0
    1a48:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1a4a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1a4e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1a52:	6093      	str	r3, [r2, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1a54:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1a58:	f041 0110 	orr.w	r1, r1, #16
    1a5c:	4319      	orrs	r1, r3
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1a5e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1a62:	60d1      	str	r1, [r2, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1a64:	3301      	adds	r3, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1a66:	6114      	str	r4, [r2, #16]
    1a68:	e7e3      	b.n	1a32 <arm_mpu_init+0x12>
    1a6a:	bf00      	nop
    1a6c:	200031a4 	.word	0x200031a4
    1a70:	e000ed90 	.word	0xe000ed90

00001a74 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
    1a74:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
    1a76:	4603      	mov	r3, r0
    1a78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1a7c:	b90a      	cbnz	r2, 1a82 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    1a7e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    1a80:	4770      	bx	lr
		*d = *s;
    1a82:	f803 2b01 	strb.w	r2, [r3], #1
    1a86:	e7f7      	b.n	1a78 <strcpy+0x4>

00001a88 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    1a88:	3801      	subs	r0, #1
    1a8a:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    1a8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    1a90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1a94:	4293      	cmp	r3, r2
    1a96:	d102      	bne.n	1a9e <strcmp+0x16>
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d1f7      	bne.n	1a8c <strcmp+0x4>
    1a9c:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    1a9e:	1a98      	subs	r0, r3, r2
    1aa0:	4770      	bx	lr

00001aa2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1aa2:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    1aa4:	b182      	cbz	r2, 1ac8 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1aa6:	3a01      	subs	r2, #1
    1aa8:	460c      	mov	r4, r1
    1aaa:	4603      	mov	r3, r0
    1aac:	d103      	bne.n	1ab6 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1aae:	781a      	ldrb	r2, [r3, #0]
    1ab0:	7820      	ldrb	r0, [r4, #0]
    1ab2:	1a10      	subs	r0, r2, r0
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
    1ab6:	781e      	ldrb	r6, [r3, #0]
    1ab8:	7825      	ldrb	r5, [r4, #0]
    1aba:	42ae      	cmp	r6, r5
    1abc:	f100 0001 	add.w	r0, r0, #1
    1ac0:	f101 0101 	add.w	r1, r1, #1
    1ac4:	d0ef      	beq.n	1aa6 <memcmp+0x4>
    1ac6:	e7f2      	b.n	1aae <memcmp+0xc>
		return 0;
    1ac8:	4610      	mov	r0, r2
}
    1aca:	bd70      	pop	{r4, r5, r6, pc}

00001acc <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1acc:	ea81 0300 	eor.w	r3, r1, r0
    1ad0:	f013 0f03 	tst.w	r3, #3
{
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1ad8:	d00b      	beq.n	1af2 <memcpy+0x26>
    1ada:	3b01      	subs	r3, #1
    1adc:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    1ade:	4291      	cmp	r1, r2
    1ae0:	d11b      	bne.n	1b1a <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    1ae2:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
    1ae4:	2a00      	cmp	r2, #0
    1ae6:	d0fc      	beq.n	1ae2 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
    1ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
    1aec:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    1af0:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
    1af2:	079c      	lsls	r4, r3, #30
    1af4:	d1f6      	bne.n	1ae4 <memcpy+0x18>
    1af6:	1f1e      	subs	r6, r3, #4
    1af8:	460d      	mov	r5, r1
    1afa:	1b54      	subs	r4, r2, r5
    1afc:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
    1afe:	2c03      	cmp	r4, #3
    1b00:	d806      	bhi.n	1b10 <memcpy+0x44>
    1b02:	f022 0403 	bic.w	r4, r2, #3
    1b06:	4421      	add	r1, r4
    1b08:	4423      	add	r3, r4
    1b0a:	f002 0203 	and.w	r2, r2, #3
    1b0e:	e7e4      	b.n	1ada <memcpy+0xe>
			*(d_word++) = *(s_word++);
    1b10:	f855 4b04 	ldr.w	r4, [r5], #4
    1b14:	f846 4f04 	str.w	r4, [r6, #4]!
    1b18:	e7ef      	b.n	1afa <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    1b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1b22:	e7dc      	b.n	1ade <memcpy+0x12>

00001b24 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    1b24:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    1b26:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    1b28:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
    1b2a:	079c      	lsls	r4, r3, #30
    1b2c:	d111      	bne.n	1b52 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    1b2e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    1b32:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
    1b36:	461e      	mov	r6, r3
    1b38:	1b95      	subs	r5, r2, r6
    1b3a:	441d      	add	r5, r3
    1b3c:	2d03      	cmp	r5, #3
    1b3e:	d80e      	bhi.n	1b5e <memset+0x3a>
    1b40:	f022 0403 	bic.w	r4, r2, #3
    1b44:	4423      	add	r3, r4
    1b46:	f002 0203 	and.w	r2, r2, #3
    1b4a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    1b4c:	4293      	cmp	r3, r2
    1b4e:	d109      	bne.n	1b64 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    1b50:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    1b52:	2a00      	cmp	r2, #0
    1b54:	d0fc      	beq.n	1b50 <memset+0x2c>
		*(d_byte++) = c_byte;
    1b56:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    1b5a:	3a01      	subs	r2, #1
    1b5c:	e7e5      	b.n	1b2a <memset+0x6>
		*(d_word++) = c_word;
    1b5e:	f846 4b04 	str.w	r4, [r6], #4
    1b62:	e7e9      	b.n	1b38 <memset+0x14>
		*(d_byte++) = c_byte;
    1b64:	f803 1b01 	strb.w	r1, [r3], #1
    1b68:	e7f0      	b.n	1b4c <memset+0x28>
	...

00001b6c <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	f04f 0320 	mov.w	r3, #32
    1b72:	f3ef 8511 	mrs	r5, BASEPRI
    1b76:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1b7a:	4c14      	ldr	r4, [pc, #80]	; (1bcc <bt_hex+0x60>)
    1b7c:	4e14      	ldr	r6, [pc, #80]	; (1bd0 <bt_hex+0x64>)
    1b7e:	7823      	ldrb	r3, [r4, #0]
    1b80:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1b84:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1b86:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1b8a:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1b8c:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1b8e:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1b92:	2940      	cmp	r1, #64	; 0x40
    1b94:	bf28      	it	cs
    1b96:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1b98:	4d0e      	ldr	r5, [pc, #56]	; (1bd4 <bt_hex+0x68>)
    1b9a:	3801      	subs	r0, #1
    1b9c:	4613      	mov	r3, r2
    1b9e:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1ba2:	42b3      	cmp	r3, r6
    1ba4:	d104      	bne.n	1bb0 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1ba6:	2300      	movs	r3, #0
    1ba8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1bac:	4610      	mov	r0, r2
    1bae:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1bb0:	7844      	ldrb	r4, [r0, #1]
    1bb2:	0924      	lsrs	r4, r4, #4
    1bb4:	3302      	adds	r3, #2
    1bb6:	5d2c      	ldrb	r4, [r5, r4]
    1bb8:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1bbc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1bc0:	f004 040f 	and.w	r4, r4, #15
    1bc4:	5d2c      	ldrb	r4, [r5, r4]
    1bc6:	f803 4c01 	strb.w	r4, [r3, #-1]
    1bca:	e7ea      	b.n	1ba2 <bt_hex+0x36>
    1bcc:	20000070 	.word	0x20000070
    1bd0:	20000071 	.word	0x20000071
    1bd4:	0000d0e4 	.word	0x0000d0e4

00001bd8 <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1bd8:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1bda:	4a0f      	ldr	r2, [pc, #60]	; (1c18 <bt_addr_str+0x40>)
    1bdc:	4c0f      	ldr	r4, [pc, #60]	; (1c1c <bt_addr_str+0x44>)
    1bde:	7813      	ldrb	r3, [r2, #0]
    1be0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1be4:	3301      	adds	r3, #1
{
    1be6:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1be8:	f003 0301 	and.w	r3, r3, #1
    1bec:	7013      	strb	r3, [r2, #0]
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    1bee:	7802      	ldrb	r2, [r0, #0]
    1bf0:	7943      	ldrb	r3, [r0, #5]
    1bf2:	9204      	str	r2, [sp, #16]
    1bf4:	7842      	ldrb	r2, [r0, #1]
    1bf6:	9203      	str	r2, [sp, #12]
    1bf8:	7882      	ldrb	r2, [r0, #2]
    1bfa:	9202      	str	r2, [sp, #8]
    1bfc:	78c2      	ldrb	r2, [r0, #3]
    1bfe:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    1c00:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    1c04:	7902      	ldrb	r2, [r0, #4]
    1c06:	9200      	str	r2, [sp, #0]
    1c08:	2112      	movs	r1, #18
    1c0a:	4a05      	ldr	r2, [pc, #20]	; (1c20 <bt_addr_str+0x48>)
    1c0c:	4620      	mov	r0, r4
    1c0e:	f7ff f93b 	bl	e88 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1c12:	4620      	mov	r0, r4
    1c14:	b006      	add	sp, #24
    1c16:	bd10      	pop	{r4, pc}
    1c18:	2000006e 	.word	0x2000006e
    1c1c:	20000014 	.word	0x20000014
    1c20:	0000d0c6 	.word	0x0000d0c6

00001c24 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1c26:	4a1d      	ldr	r2, [pc, #116]	; (1c9c <bt_addr_le_str+0x78>)
    1c28:	491d      	ldr	r1, [pc, #116]	; (1ca0 <bt_addr_le_str+0x7c>)
    1c2a:	7813      	ldrb	r3, [r2, #0]
    1c2c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1c30:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1c32:	f003 0301 	and.w	r3, r3, #1
    1c36:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1c38:	7803      	ldrb	r3, [r0, #0]
{
    1c3a:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1c3c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1c40:	4604      	mov	r4, r0
	str = bufs[cur++];
    1c42:	440e      	add	r6, r1
    1c44:	ad07      	add	r5, sp, #28
    1c46:	2b03      	cmp	r3, #3
    1c48:	d821      	bhi.n	1c8e <bt_addr_le_str+0x6a>
    1c4a:	e8df f003 	tbb	[pc, r3]
    1c4e:	1a02      	.short	0x1a02
    1c50:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1c52:	4914      	ldr	r1, [pc, #80]	; (1ca4 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1c54:	4628      	mov	r0, r5
    1c56:	f7ff ff0d 	bl	1a74 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1c5a:	7862      	ldrb	r2, [r4, #1]
    1c5c:	9204      	str	r2, [sp, #16]
    1c5e:	78a2      	ldrb	r2, [r4, #2]
    1c60:	9203      	str	r2, [sp, #12]
    1c62:	78e2      	ldrb	r2, [r4, #3]
    1c64:	9202      	str	r2, [sp, #8]
    1c66:	7922      	ldrb	r2, [r4, #4]
    1c68:	9201      	str	r2, [sp, #4]
    1c6a:	7962      	ldrb	r2, [r4, #5]
    1c6c:	9200      	str	r2, [sp, #0]
    1c6e:	79a3      	ldrb	r3, [r4, #6]
    1c70:	9505      	str	r5, [sp, #20]
    1c72:	4a0d      	ldr	r2, [pc, #52]	; (1ca8 <bt_addr_le_str+0x84>)
    1c74:	211b      	movs	r1, #27
    1c76:	4630      	mov	r0, r6
    1c78:	f7ff f906 	bl	e88 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1c7c:	4630      	mov	r0, r6
    1c7e:	b00a      	add	sp, #40	; 0x28
    1c80:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1c82:	490a      	ldr	r1, [pc, #40]	; (1cac <bt_addr_le_str+0x88>)
    1c84:	e7e6      	b.n	1c54 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1c86:	490a      	ldr	r1, [pc, #40]	; (1cb0 <bt_addr_le_str+0x8c>)
    1c88:	e7e4      	b.n	1c54 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1c8a:	490a      	ldr	r1, [pc, #40]	; (1cb4 <bt_addr_le_str+0x90>)
    1c8c:	e7e2      	b.n	1c54 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1c8e:	4a0a      	ldr	r2, [pc, #40]	; (1cb8 <bt_addr_le_str+0x94>)
    1c90:	210a      	movs	r1, #10
    1c92:	4628      	mov	r0, r5
    1c94:	f7ff f8f8 	bl	e88 <snprintk>
    1c98:	e7df      	b.n	1c5a <bt_addr_le_str+0x36>
    1c9a:	bf00      	nop
    1c9c:	2000006f 	.word	0x2000006f
    1ca0:	20000038 	.word	0x20000038
    1ca4:	0000d07a 	.word	0x0000d07a
    1ca8:	0000d0a3 	.word	0x0000d0a3
    1cac:	0000d081 	.word	0x0000d081
    1cb0:	0000d088 	.word	0x0000d088
    1cb4:	0000d092 	.word	0x0000d092
    1cb8:	0000d09c 	.word	0x0000d09c

00001cbc <ver_str>:
	}
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    1cbc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    1cbe:	4d0b      	ldr	r5, [pc, #44]	; (1cec <ver_str+0x30>)
{
    1cc0:	4606      	mov	r6, r0
	const char * const str[] = {
    1cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    1cc4:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1cc6:	466c      	mov	r4, sp
    1cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1cce:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1cd2:	2e09      	cmp	r6, #9
	const char * const str[] = {
    1cd4:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    1cd8:	bf9b      	ittet	ls
    1cda:	ab0a      	addls	r3, sp, #40	; 0x28
    1cdc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1ce0:	4803      	ldrhi	r0, [pc, #12]	; (1cf0 <ver_str+0x34>)
		return str[ver];
    1ce2:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    1ce6:	b00a      	add	sp, #40	; 0x28
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
    1cea:	bf00      	nop
    1cec:	0000cae4 	.word	0x0000cae4
    1cf0:	0000d9b4 	.word	0x0000d9b4

00001cf4 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1cf4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1cf6:	f3bf 8f5b 	dmb	ish
    1cfa:	e850 3f00 	ldrex	r3, [r0]
    1cfe:	ea43 0201 	orr.w	r2, r3, r1
    1d02:	e840 2e00 	strex	lr, r2, [r0]
    1d06:	f1be 0f00 	cmp.w	lr, #0
    1d0a:	d1f6      	bne.n	1cfa <atomic_or+0x6>
    1d0c:	f3bf 8f5b 	dmb	ish
    1d10:	4618      	mov	r0, r3
    1d12:	f85d fb04 	ldr.w	pc, [sp], #4

00001d16 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1d16:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1d18:	f3bf 8f5b 	dmb	ish
    1d1c:	e850 3f00 	ldrex	r3, [r0]
    1d20:	ea03 0201 	and.w	r2, r3, r1
    1d24:	e840 2e00 	strex	lr, r2, [r0]
    1d28:	f1be 0f00 	cmp.w	lr, #0
    1d2c:	d1f6      	bne.n	1d1c <atomic_and+0x6>
    1d2e:	f3bf 8f5b 	dmb	ish
    1d32:	4618      	mov	r0, r3
    1d34:	f85d fb04 	ldr.w	pc, [sp], #4

00001d38 <hci_cmd_done>:
{
    1d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d3c:	4606      	mov	r6, r0
    1d3e:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d40:	7990      	ldrb	r0, [r2, #6]
    1d42:	4f26      	ldr	r7, [pc, #152]	; (1ddc <hci_cmd_done+0xa4>)
{
    1d44:	4688      	mov	r8, r1
    1d46:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d48:	f009 f93e 	bl	afc8 <net_buf_pool_get>
    1d4c:	4287      	cmp	r7, r0
    1d4e:	d013      	beq.n	1d78 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    1d50:	79ac      	ldrb	r4, [r5, #6]
    1d52:	4620      	mov	r0, r4
    1d54:	f009 f938 	bl	afc8 <net_buf_pool_get>
    1d58:	4b21      	ldr	r3, [pc, #132]	; (1de0 <hci_cmd_done+0xa8>)
    1d5a:	9305      	str	r3, [sp, #20]
    1d5c:	9003      	str	r0, [sp, #12]
    1d5e:	e88d 0048 	stmia.w	sp, {r3, r6}
    1d62:	9704      	str	r7, [sp, #16]
    1d64:	9402      	str	r4, [sp, #8]
    1d66:	4b1f      	ldr	r3, [pc, #124]	; (1de4 <hci_cmd_done+0xac>)
    1d68:	4a1f      	ldr	r2, [pc, #124]	; (1de8 <hci_cmd_done+0xb0>)
    1d6a:	4920      	ldr	r1, [pc, #128]	; (1dec <hci_cmd_done+0xb4>)
    1d6c:	4820      	ldr	r0, [pc, #128]	; (1df0 <hci_cmd_done+0xb8>)
    1d6e:	f7ff f87d 	bl	e6c <printk>
}
    1d72:	b006      	add	sp, #24
    1d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    1d78:	4628      	mov	r0, r5
    1d7a:	f009 f92b 	bl	afd4 <net_buf_id>
    1d7e:	4c1d      	ldr	r4, [pc, #116]	; (1df4 <hci_cmd_done+0xbc>)
    1d80:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1d84:	8843      	ldrh	r3, [r0, #2]
    1d86:	42b3      	cmp	r3, r6
    1d88:	d010      	beq.n	1dac <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    1d8a:	4628      	mov	r0, r5
    1d8c:	f009 f922 	bl	afd4 <net_buf_id>
    1d90:	4b13      	ldr	r3, [pc, #76]	; (1de0 <hci_cmd_done+0xa8>)
    1d92:	9303      	str	r3, [sp, #12]
    1d94:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1d98:	4914      	ldr	r1, [pc, #80]	; (1dec <hci_cmd_done+0xb4>)
    1d9a:	8842      	ldrh	r2, [r0, #2]
    1d9c:	9202      	str	r2, [sp, #8]
    1d9e:	e88d 0048 	stmia.w	sp, {r3, r6}
    1da2:	4a11      	ldr	r2, [pc, #68]	; (1de8 <hci_cmd_done+0xb0>)
    1da4:	4b0f      	ldr	r3, [pc, #60]	; (1de4 <hci_cmd_done+0xac>)
    1da6:	4814      	ldr	r0, [pc, #80]	; (1df8 <hci_cmd_done+0xc0>)
    1da8:	f7ff f860 	bl	e6c <printk>
	if (cmd(buf)->sync) {
    1dac:	4628      	mov	r0, r5
    1dae:	f009 f911 	bl	afd4 <net_buf_id>
    1db2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1db6:	6843      	ldr	r3, [r0, #4]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d0da      	beq.n	1d72 <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    1dbc:	4628      	mov	r0, r5
    1dbe:	f009 f909 	bl	afd4 <net_buf_id>
    1dc2:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1dc6:	4628      	mov	r0, r5
    1dc8:	f009 f904 	bl	afd4 <net_buf_id>
    1dcc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1dd0:	6840      	ldr	r0, [r0, #4]
}
    1dd2:	b006      	add	sp, #24
    1dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1dd8:	f00a ba53 	b.w	c282 <_impl_k_sem_give>
    1ddc:	200034d4 	.word	0x200034d4
    1de0:	0000cbb3 	.word	0x0000cbb3
    1de4:	0000d105 	.word	0x0000d105
    1de8:	0000d4e3 	.word	0x0000d4e3
    1dec:	0000d4ea 	.word	0x0000d4ea
    1df0:	0000d4ed 	.word	0x0000d4ed
    1df4:	20000278 	.word	0x20000278
    1df8:	0000d532 	.word	0x0000d532

00001dfc <atomic_test_bit.constprop.24>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1dfc:	4b07      	ldr	r3, [pc, #28]	; (1e1c <atomic_test_bit.constprop.24+0x20>)
    1dfe:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1e02:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e04:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1e08:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1e0e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1e12:	fa43 f000 	asr.w	r0, r3, r0
}
    1e16:	f000 0001 	and.w	r0, r0, #1
    1e1a:	4770      	bx	lr
    1e1c:	200031d0 	.word	0x200031d0

00001e20 <bt_hci_cmd_create>:
{
    1e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e24:	4680      	mov	r8, r0
    1e26:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e28:	4813      	ldr	r0, [pc, #76]	; (1e78 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1e2a:	4d14      	ldr	r5, [pc, #80]	; (1e7c <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e30:	f009 f95e 	bl	b0f0 <net_buf_alloc_fixed>
    1e34:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1e36:	f100 0608 	add.w	r6, r0, #8
    1e3a:	2100      	movs	r1, #0
    1e3c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1e3e:	2700      	movs	r7, #0
    1e40:	f009 f975 	bl	b12e <net_buf_simple_reserve>
    1e44:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1e46:	4620      	mov	r0, r4
    1e48:	f009 f8c4 	bl	afd4 <net_buf_id>
    1e4c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1e50:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1e54:	4620      	mov	r0, r4
    1e56:	f009 f8bd 	bl	afd4 <net_buf_id>
    1e5a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e5e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1e60:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e62:	4630      	mov	r0, r6
    1e64:	f009 f9a6 	bl	b1b4 <net_buf_simple_add>
	hdr->param_len = param_len;
    1e68:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1e6c:	f8a0 8000 	strh.w	r8, [r0]
}
    1e70:	4620      	mov	r0, r4
    1e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e76:	bf00      	nop
    1e78:	200034d4 	.word	0x200034d4
    1e7c:	20000278 	.word	0x20000278

00001e80 <bt_hci_cmd_send_sync>:
{
    1e80:	b570      	push	{r4, r5, r6, lr}
    1e82:	4615      	mov	r5, r2
    1e84:	b086      	sub	sp, #24
	if (!buf) {
    1e86:	460c      	mov	r4, r1
    1e88:	b919      	cbnz	r1, 1e92 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1e8a:	f7ff ffc9 	bl	1e20 <bt_hci_cmd_create>
		if (!buf) {
    1e8e:	4604      	mov	r4, r0
    1e90:	b368      	cbz	r0, 1eee <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1e92:	2201      	movs	r2, #1
    1e94:	2100      	movs	r1, #0
    1e96:	4668      	mov	r0, sp
    1e98:	f00a f9ea 	bl	c270 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1e9c:	4620      	mov	r0, r4
    1e9e:	f009 f899 	bl	afd4 <net_buf_id>
    1ea2:	4e14      	ldr	r6, [pc, #80]	; (1ef4 <bt_hci_cmd_send_sync+0x74>)
    1ea4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1ea8:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1eac:	4620      	mov	r0, r4
    1eae:	f009 f97d 	bl	b1ac <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1eb2:	4621      	mov	r1, r4
    1eb4:	4810      	ldr	r0, [pc, #64]	; (1ef8 <bt_hci_cmd_send_sync+0x78>)
    1eb6:	f009 f93e 	bl	b136 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1eba:	f242 7110 	movw	r1, #10000	; 0x2710
    1ebe:	4668      	mov	r0, sp
    1ec0:	f00a fa07 	bl	c2d2 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1ec4:	4620      	mov	r0, r4
    1ec6:	f009 f885 	bl	afd4 <net_buf_id>
    1eca:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1ece:	b130      	cbz	r0, 1ede <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1ed0:	4620      	mov	r0, r4
    1ed2:	f009 f93d 	bl	b150 <net_buf_unref>
		err = -EIO;
    1ed6:	f06f 0004 	mvn.w	r0, #4
}
    1eda:	b006      	add	sp, #24
    1edc:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1ede:	b10d      	cbz	r5, 1ee4 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1ee0:	602c      	str	r4, [r5, #0]
    1ee2:	e7fa      	b.n	1eda <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1ee4:	4620      	mov	r0, r4
    1ee6:	f009 f933 	bl	b150 <net_buf_unref>
		err = 0;
    1eea:	4628      	mov	r0, r5
    1eec:	e7f5      	b.n	1eda <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1eee:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1ef2:	e7f2      	b.n	1eda <bt_hci_cmd_send_sync+0x5a>
    1ef4:	20000278 	.word	0x20000278
    1ef8:	20003274 	.word	0x20003274

00001efc <set_le_scan_enable>:
{
    1efc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1efe:	2102      	movs	r1, #2
{
    1f00:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1f02:	f242 000c 	movw	r0, #8204	; 0x200c
    1f06:	f7ff ff8b 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    1f0a:	4604      	mov	r4, r0
    1f0c:	b328      	cbz	r0, 1f5a <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    1f0e:	2102      	movs	r1, #2
    1f10:	3008      	adds	r0, #8
    1f12:	f009 f94f 	bl	b1b4 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f16:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1f18:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f1a:	d115      	bne.n	1f48 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1f1c:	200b      	movs	r0, #11
    1f1e:	f7ff ff6d 	bl	1dfc <atomic_test_bit.constprop.24>
    1f22:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    1f24:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1f26:	2200      	movs	r2, #0
    1f28:	4621      	mov	r1, r4
    1f2a:	f242 000c 	movw	r0, #8204	; 0x200c
    1f2e:	f7ff ffa7 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    1f32:	4604      	mov	r4, r0
    1f34:	b930      	cbnz	r0, 1f44 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1f36:	2d01      	cmp	r5, #1
    1f38:	d109      	bne.n	1f4e <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
    1f3e:	4808      	ldr	r0, [pc, #32]	; (1f60 <set_le_scan_enable+0x64>)
    1f40:	f7ff fed8 	bl	1cf4 <atomic_or>
}
    1f44:	4620      	mov	r0, r4
    1f46:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1f48:	2300      	movs	r3, #0
    1f4a:	7043      	strb	r3, [r0, #1]
    1f4c:	e7ea      	b.n	1f24 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f4e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    1f52:	4803      	ldr	r0, [pc, #12]	; (1f60 <set_le_scan_enable+0x64>)
    1f54:	f7ff fedf 	bl	1d16 <atomic_and>
    1f58:	e7f4      	b.n	1f44 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    1f5a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1f5e:	e7f1      	b.n	1f44 <set_le_scan_enable+0x48>
    1f60:	20003240 	.word	0x20003240

00001f64 <set_random_address>:
{
    1f64:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1f66:	4d15      	ldr	r5, [pc, #84]	; (1fbc <set_random_address+0x58>)
    1f68:	2206      	movs	r2, #6
    1f6a:	f105 0108 	add.w	r1, r5, #8
    1f6e:	4606      	mov	r6, r0
    1f70:	f7ff fd97 	bl	1aa2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1f74:	4604      	mov	r4, r0
    1f76:	b1d8      	cbz	r0, 1fb0 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1f78:	2106      	movs	r1, #6
    1f7a:	f242 0005 	movw	r0, #8197	; 0x2005
    1f7e:	f7ff ff4f 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    1f82:	4604      	mov	r4, r0
    1f84:	b1b0      	cbz	r0, 1fb4 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    1f86:	2206      	movs	r2, #6
    1f88:	4631      	mov	r1, r6
    1f8a:	3008      	adds	r0, #8
    1f8c:	f009 f918 	bl	b1c0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1f90:	4621      	mov	r1, r4
    1f92:	2200      	movs	r2, #0
    1f94:	f242 0005 	movw	r0, #8197	; 0x2005
    1f98:	f7ff ff72 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    1f9c:	4604      	mov	r4, r0
    1f9e:	b938      	cbnz	r0, 1fb0 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1fa0:	2206      	movs	r2, #6
    1fa2:	4631      	mov	r1, r6
    1fa4:	f105 0008 	add.w	r0, r5, #8
    1fa8:	f7ff fd90 	bl	1acc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1fac:	2301      	movs	r3, #1
    1fae:	71eb      	strb	r3, [r5, #7]
}
    1fb0:	4620      	mov	r0, r4
    1fb2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    1fb4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1fb8:	e7fa      	b.n	1fb0 <set_random_address+0x4c>
    1fba:	bf00      	nop
    1fbc:	200031d0 	.word	0x200031d0

00001fc0 <le_set_private_addr>:
{
    1fc0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1fc2:	2106      	movs	r1, #6
    1fc4:	4668      	mov	r0, sp
    1fc6:	f002 f88b 	bl	40e0 <bt_rand>
	if (err) {
    1fca:	b940      	cbnz	r0, 1fde <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    1fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    1fd0:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    1fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1fd6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    1fda:	f7ff ffc3 	bl	1f64 <set_random_address>
}
    1fde:	b003      	add	sp, #12
    1fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fe4 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fe8:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1fea:	2120      	movs	r1, #32
{
    1fec:	4607      	mov	r7, r0
    1fee:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1ff0:	f7ff ff16 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    1ff4:	4606      	mov	r6, r0
    1ff6:	2800      	cmp	r0, #0
    1ff8:	d03c      	beq.n	2074 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1ffa:	2120      	movs	r1, #32
    1ffc:	3008      	adds	r0, #8
    1ffe:	f009 f8d9 	bl	b1b4 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    2002:	2220      	movs	r2, #32
    2004:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2006:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2008:	f7ff fd8c 	bl	1b24 <memset>

	for (i = 0; i < ad_len; i++) {
    200c:	f04f 0900 	mov.w	r9, #0
    2010:	45c1      	cmp	r9, r8
    2012:	d106      	bne.n	2022 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2014:	4631      	mov	r1, r6
    2016:	4638      	mov	r0, r7
    2018:	2200      	movs	r2, #0
}
    201a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    201e:	f7ff bf2f 	b.w	1e80 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    2022:	7862      	ldrb	r2, [r4, #1]
    2024:	782b      	ldrb	r3, [r5, #0]
    2026:	18d1      	adds	r1, r2, r3
    2028:	3102      	adds	r1, #2
    202a:	291f      	cmp	r1, #31
    202c:	f104 0408 	add.w	r4, r4, #8
    2030:	dd06      	ble.n	2040 <set_ad+0x5c>
			net_buf_unref(buf);
    2032:	4630      	mov	r0, r6
    2034:	f009 f88c 	bl	b150 <net_buf_unref>
			return -EINVAL;
    2038:	f06f 0015 	mvn.w	r0, #21
    203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    2040:	18e9      	adds	r1, r5, r3
    2042:	1c50      	adds	r0, r2, #1
    2044:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    2046:	1c98      	adds	r0, r3, #2
    2048:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    204a:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    204c:	7028      	strb	r0, [r5, #0]
    204e:	fa55 f383 	uxtab	r3, r5, r3
    2052:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    2056:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    2058:	3001      	adds	r0, #1
    205a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    205e:	4428      	add	r0, r5
    2060:	f7ff fd34 	bl	1acc <memcpy>
		set_data->len += ad[i].data_len;
    2064:	782b      	ldrb	r3, [r5, #0]
    2066:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    206a:	4413      	add	r3, r2
    206c:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    206e:	f109 0901 	add.w	r9, r9, #1
    2072:	e7cd      	b.n	2010 <set_ad+0x2c>
		return -ENOBUFS;
    2074:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000207c <bt_le_scan_update>:
{
    207c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    207e:	2009      	movs	r0, #9
    2080:	f7ff febc 	bl	1dfc <atomic_test_bit.constprop.24>
    2084:	4601      	mov	r1, r0
    2086:	b940      	cbnz	r0, 209a <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2088:	2008      	movs	r0, #8
    208a:	f7ff feb7 	bl	1dfc <atomic_test_bit.constprop.24>
    208e:	b120      	cbz	r0, 209a <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2090:	4608      	mov	r0, r1
}
    2092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2096:	f7ff bf31 	b.w	1efc <set_le_scan_enable>
}
    209a:	2000      	movs	r0, #0
    209c:	bd08      	pop	{r3, pc}

0000209e <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    209e:	2301      	movs	r3, #1
{
    20a0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    20a2:	2106      	movs	r1, #6
{
    20a4:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    20a6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    20aa:	f002 f819 	bl	40e0 <bt_rand>
	if (err) {
    20ae:	b918      	cbnz	r0, 20b8 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    20b0:	79a3      	ldrb	r3, [r4, #6]
    20b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    20b6:	71a3      	strb	r3, [r4, #6]
}
    20b8:	bd10      	pop	{r4, pc}
	...

000020bc <bt_set_static_addr>:
{
    20bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    20be:	4c11      	ldr	r4, [pc, #68]	; (2104 <bt_set_static_addr+0x48>)
    20c0:	7823      	ldrb	r3, [r4, #0]
    20c2:	2b01      	cmp	r3, #1
    20c4:	d104      	bne.n	20d0 <bt_set_static_addr+0x14>
    20c6:	79a3      	ldrb	r3, [r4, #6]
    20c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    20cc:	2bc0      	cmp	r3, #192	; 0xc0
    20ce:	d00d      	beq.n	20ec <bt_set_static_addr+0x30>
		BT_ERR("Only static random address supported as identity");
    20d0:	4b0d      	ldr	r3, [pc, #52]	; (2108 <bt_set_static_addr+0x4c>)
    20d2:	9301      	str	r3, [sp, #4]
    20d4:	9300      	str	r3, [sp, #0]
    20d6:	4a0d      	ldr	r2, [pc, #52]	; (210c <bt_set_static_addr+0x50>)
    20d8:	4b0d      	ldr	r3, [pc, #52]	; (2110 <bt_set_static_addr+0x54>)
    20da:	490e      	ldr	r1, [pc, #56]	; (2114 <bt_set_static_addr+0x58>)
    20dc:	480e      	ldr	r0, [pc, #56]	; (2118 <bt_set_static_addr+0x5c>)
    20de:	f7fe fec5 	bl	e6c <printk>
    20e2:	f06f 0515 	mvn.w	r5, #21
}
    20e6:	4628      	mov	r0, r5
    20e8:	b003      	add	sp, #12
    20ea:	bd30      	pop	{r4, r5, pc}
	err = set_random_address(&bt_dev.id_addr.a);
    20ec:	1c60      	adds	r0, r4, #1
    20ee:	f7ff ff39 	bl	1f64 <set_random_address>
	if (err) {
    20f2:	4605      	mov	r5, r0
    20f4:	2800      	cmp	r0, #0
    20f6:	d1f6      	bne.n	20e6 <bt_set_static_addr+0x2a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    20f8:	2104      	movs	r1, #4
    20fa:	f104 0070 	add.w	r0, r4, #112	; 0x70
    20fe:	f7ff fdf9 	bl	1cf4 <atomic_or>
	return 0;
    2102:	e7f0      	b.n	20e6 <bt_set_static_addr+0x2a>
    2104:	200031d0 	.word	0x200031d0
    2108:	0000cbb3 	.word	0x0000cbb3
    210c:	0000d49b 	.word	0x0000d49b
    2110:	0000d15c 	.word	0x0000d15c
    2114:	0000d4ea 	.word	0x0000d4ea
    2118:	0000d4a2 	.word	0x0000d4a2

0000211c <bt_dev_show_info>:
{
    211c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2120:	4d1d      	ldr	r5, [pc, #116]	; (2198 <bt_dev_show_info+0x7c>)
    2122:	f8df 8090 	ldr.w	r8, [pc, #144]	; 21b4 <bt_dev_show_info+0x98>
    2126:	4f1d      	ldr	r7, [pc, #116]	; (219c <bt_dev_show_info+0x80>)
    2128:	4e1d      	ldr	r6, [pc, #116]	; (21a0 <bt_dev_show_info+0x84>)
    212a:	4c1e      	ldr	r4, [pc, #120]	; (21a4 <bt_dev_show_info+0x88>)
{
    212c:	b087      	sub	sp, #28
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    212e:	4628      	mov	r0, r5
    2130:	f7ff fd78 	bl	1c24 <bt_addr_le_str>
    2134:	4643      	mov	r3, r8
    2136:	463a      	mov	r2, r7
    2138:	4631      	mov	r1, r6
    213a:	9001      	str	r0, [sp, #4]
    213c:	9402      	str	r4, [sp, #8]
    213e:	9400      	str	r4, [sp, #0]
    2140:	4819      	ldr	r0, [pc, #100]	; (21a8 <bt_dev_show_info+0x8c>)
    2142:	f7fe fe93 	bl	e6c <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2146:	f895 900e 	ldrb.w	r9, [r5, #14]
    214a:	4648      	mov	r0, r9
    214c:	f7ff fdb6 	bl	1cbc <ver_str>
    2150:	8aab      	ldrh	r3, [r5, #20]
    2152:	9304      	str	r3, [sp, #16]
    2154:	8a2b      	ldrh	r3, [r5, #16]
    2156:	9303      	str	r3, [sp, #12]
    2158:	463a      	mov	r2, r7
    215a:	4643      	mov	r3, r8
    215c:	4631      	mov	r1, r6
    215e:	f8cd 9008 	str.w	r9, [sp, #8]
    2162:	9001      	str	r0, [sp, #4]
    2164:	9405      	str	r4, [sp, #20]
    2166:	9400      	str	r4, [sp, #0]
    2168:	4810      	ldr	r0, [pc, #64]	; (21ac <bt_dev_show_info+0x90>)
    216a:	f7fe fe7f 	bl	e6c <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    216e:	f895 900f 	ldrb.w	r9, [r5, #15]
    2172:	4648      	mov	r0, r9
    2174:	f7ff fda2 	bl	1cbc <ver_str>
    2178:	8a6b      	ldrh	r3, [r5, #18]
    217a:	9303      	str	r3, [sp, #12]
    217c:	9001      	str	r0, [sp, #4]
    217e:	9404      	str	r4, [sp, #16]
    2180:	f8cd 9008 	str.w	r9, [sp, #8]
    2184:	9400      	str	r4, [sp, #0]
    2186:	4643      	mov	r3, r8
    2188:	463a      	mov	r2, r7
    218a:	4631      	mov	r1, r6
    218c:	4808      	ldr	r0, [pc, #32]	; (21b0 <bt_dev_show_info+0x94>)
    218e:	f7fe fe6d 	bl	e6c <printk>
}
    2192:	b007      	add	sp, #28
    2194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2198:	200031d0 	.word	0x200031d0
    219c:	0000d1c2 	.word	0x0000d1c2
    21a0:	0000d4ea 	.word	0x0000d4ea
    21a4:	0000cbb3 	.word	0x0000cbb3
    21a8:	0000d1c9 	.word	0x0000d1c9
    21ac:	0000d1e6 	.word	0x0000d1e6
    21b0:	0000d234 	.word	0x0000d234
    21b4:	0000d17d 	.word	0x0000d17d

000021b8 <hci_init>:
{
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    21ba:	4eab      	ldr	r6, [pc, #684]	; (2468 <hci_init+0x2b0>)
    21bc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    21c0:	6899      	ldr	r1, [r3, #8]
    21c2:	f011 0101 	ands.w	r1, r1, #1
{
    21c6:	b08f      	sub	sp, #60	; 0x3c
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    21c8:	d124      	bne.n	2214 <hci_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    21ca:	aa0c      	add	r2, sp, #48	; 0x30
    21cc:	f640 4003 	movw	r0, #3075	; 0xc03
    21d0:	f7ff fe56 	bl	1e80 <bt_hci_cmd_send_sync>
		if (err) {
    21d4:	4604      	mov	r4, r0
    21d6:	2800      	cmp	r0, #0
    21d8:	f040 8086 	bne.w	22e8 <hci_init+0x130>
	u8_t status = buf->data[0];
    21dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    21de:	689b      	ldr	r3, [r3, #8]
	if (status) {
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	b9a3      	cbnz	r3, 220e <hci_init+0x56>
	scan_dev_found_cb = NULL;
    21e4:	4aa1      	ldr	r2, [pc, #644]	; (246c <hci_init+0x2b4>)
    21e6:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    21e8:	4633      	mov	r3, r6
    21ea:	f3bf 8f5b 	dmb	ish
    21ee:	f853 2f70 	ldr.w	r2, [r3, #112]!
    21f2:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    21f6:	f002 020d 	and.w	r2, r2, #13
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    21fa:	f3bf 8f5b 	dmb	ish
    21fe:	e853 1f00 	ldrex	r1, [r3]
    2202:	e843 2000 	strex	r0, r2, [r3]
    2206:	2800      	cmp	r0, #0
    2208:	d1f9      	bne.n	21fe <hci_init+0x46>
    220a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    220e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2210:	f008 ff9e 	bl	b150 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2214:	aa0c      	add	r2, sp, #48	; 0x30
    2216:	2100      	movs	r1, #0
    2218:	f241 0003 	movw	r0, #4099	; 0x1003
    221c:	f7ff fe30 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2220:	4604      	mov	r4, r0
    2222:	2800      	cmp	r0, #0
    2224:	d160      	bne.n	22e8 <hci_init+0x130>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2228:	4891      	ldr	r0, [pc, #580]	; (2470 <hci_init+0x2b8>)
    222a:	6899      	ldr	r1, [r3, #8]
    222c:	2208      	movs	r2, #8
    222e:	3101      	adds	r1, #1
    2230:	f7ff fc4c 	bl	1acc <memcpy>
	net_buf_unref(rsp);
    2234:	980c      	ldr	r0, [sp, #48]	; 0x30
    2236:	f008 ff8b 	bl	b150 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    223a:	4621      	mov	r1, r4
    223c:	aa0c      	add	r2, sp, #48	; 0x30
    223e:	f241 0001 	movw	r0, #4097	; 0x1001
    2242:	f7ff fe1d 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2246:	4604      	mov	r4, r0
    2248:	2800      	cmp	r0, #0
    224a:	d14d      	bne.n	22e8 <hci_init+0x130>
	read_local_ver_complete(rsp);
    224c:	980c      	ldr	r0, [sp, #48]	; 0x30
    224e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2250:	785a      	ldrb	r2, [r3, #1]
    2252:	73b2      	strb	r2, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2254:	78d9      	ldrb	r1, [r3, #3]
    2256:	789a      	ldrb	r2, [r3, #2]
    2258:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    225c:	8232      	strh	r2, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    225e:	791a      	ldrb	r2, [r3, #4]
    2260:	73f2      	strb	r2, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2262:	7a19      	ldrb	r1, [r3, #8]
    2264:	79da      	ldrb	r2, [r3, #7]
    2266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    226a:	8272      	strh	r2, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    226c:	795a      	ldrb	r2, [r3, #5]
    226e:	799b      	ldrb	r3, [r3, #6]
    2270:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2274:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2276:	f008 ff6b 	bl	b150 <net_buf_unref>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_USER_ID_ADDR)) {
    227a:	2003      	movs	r0, #3
    227c:	f7ff fdbe 	bl	1dfc <atomic_test_bit.constprop.24>
    2280:	4601      	mov	r1, r0
    2282:	b988      	cbnz	r0, 22a8 <hci_init+0xf0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2284:	aa0c      	add	r2, sp, #48	; 0x30
    2286:	f241 0009 	movw	r0, #4105	; 0x1009
    228a:	f7ff fdf9 	bl	1e80 <bt_hci_cmd_send_sync>
		if (err) {
    228e:	4604      	mov	r4, r0
    2290:	bb50      	cbnz	r0, 22e8 <hci_init+0x130>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2294:	4877      	ldr	r0, [pc, #476]	; (2474 <hci_init+0x2bc>)
    2296:	6899      	ldr	r1, [r3, #8]
    2298:	2206      	movs	r2, #6
    229a:	3101      	adds	r1, #1
    229c:	f7ff fc16 	bl	1acc <memcpy>
		net_buf_unref(rsp);
    22a0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    22a2:	7034      	strb	r4, [r6, #0]
		net_buf_unref(rsp);
    22a4:	f008 ff54 	bl	b150 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    22a8:	aa0c      	add	r2, sp, #48	; 0x30
    22aa:	2100      	movs	r1, #0
    22ac:	f241 0002 	movw	r0, #4098	; 0x1002
    22b0:	f7ff fde6 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    22b4:	4604      	mov	r4, r0
    22b6:	b9b8      	cbnz	r0, 22e8 <hci_init+0x130>
	memcpy(bt_dev.supported_commands, rp->commands,
    22b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    22ba:	486f      	ldr	r0, [pc, #444]	; (2478 <hci_init+0x2c0>)
    22bc:	6899      	ldr	r1, [r3, #8]
    22be:	2240      	movs	r2, #64	; 0x40
    22c0:	3101      	adds	r1, #1
    22c2:	f7ff fc03 	bl	1acc <memcpy>
	net_buf_unref(rsp);
    22c6:	980c      	ldr	r0, [sp, #48]	; 0x30
    22c8:	f008 ff42 	bl	b150 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    22cc:	7eb3      	ldrb	r3, [r6, #26]
    22ce:	0658      	lsls	r0, r3, #25
    22d0:	d40d      	bmi.n	22ee <hci_init+0x136>
		BT_ERR("Non-LE capable controller detected!");
    22d2:	4b6a      	ldr	r3, [pc, #424]	; (247c <hci_init+0x2c4>)
    22d4:	9301      	str	r3, [sp, #4]
    22d6:	9300      	str	r3, [sp, #0]
    22d8:	4a69      	ldr	r2, [pc, #420]	; (2480 <hci_init+0x2c8>)
    22da:	4b6a      	ldr	r3, [pc, #424]	; (2484 <hci_init+0x2cc>)
    22dc:	496a      	ldr	r1, [pc, #424]	; (2488 <hci_init+0x2d0>)
    22de:	486b      	ldr	r0, [pc, #428]	; (248c <hci_init+0x2d4>)
    22e0:	f7fe fdc4 	bl	e6c <printk>
		return -ENODEV;
    22e4:	f06f 0412 	mvn.w	r4, #18
}
    22e8:	4620      	mov	r0, r4
    22ea:	b00f      	add	sp, #60	; 0x3c
    22ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    22ee:	4621      	mov	r1, r4
    22f0:	aa0c      	add	r2, sp, #48	; 0x30
    22f2:	f242 0003 	movw	r0, #8195	; 0x2003
    22f6:	f7ff fdc3 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    22fa:	4604      	mov	r4, r0
    22fc:	2800      	cmp	r0, #0
    22fe:	d1f3      	bne.n	22e8 <hci_init+0x130>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2302:	4863      	ldr	r0, [pc, #396]	; (2490 <hci_init+0x2d8>)
    2304:	6899      	ldr	r1, [r3, #8]
    2306:	2208      	movs	r2, #8
    2308:	3101      	adds	r1, #1
    230a:	f7ff fbdf 	bl	1acc <memcpy>
	net_buf_unref(rsp);
    230e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2310:	f008 ff1e 	bl	b150 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2314:	7eb3      	ldrb	r3, [r6, #26]
    2316:	0699      	lsls	r1, r3, #26
    2318:	d574      	bpl.n	2404 <hci_init+0x24c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    231a:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    231e:	071a      	lsls	r2, r3, #28
    2320:	f100 808c 	bmi.w	243c <hci_init+0x284>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2324:	2108      	movs	r1, #8
    2326:	f242 0001 	movw	r0, #8193	; 0x2001
    232a:	f7ff fd79 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    232e:	4604      	mov	r4, r0
    2330:	2800      	cmp	r0, #0
    2332:	d06e      	beq.n	2412 <hci_init+0x25a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2334:	2108      	movs	r1, #8
    2336:	4408      	add	r0, r1
    2338:	f008 ff3c 	bl	b1b4 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    233c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    2340:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2344:	2b06      	cmp	r3, #6
    2346:	bf14      	ite	ne
    2348:	2302      	movne	r3, #2
    234a:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    234e:	2200      	movs	r2, #0
    2350:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2352:	0a1b      	lsrs	r3, r3, #8
    2354:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2356:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2358:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    235a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    235c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    235e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2360:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2362:	4621      	mov	r1, r4
    2364:	f242 0001 	movw	r0, #8193	; 0x2001
    2368:	f7ff fd8a 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    236c:	4604      	mov	r4, r0
    236e:	2800      	cmp	r0, #0
    2370:	d1ba      	bne.n	22e8 <hci_init+0x130>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2372:	2108      	movs	r1, #8
    2374:	f640 4001 	movw	r0, #3073	; 0xc01
    2378:	f7ff fd52 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    237c:	4605      	mov	r5, r0
    237e:	2800      	cmp	r0, #0
    2380:	d047      	beq.n	2412 <hci_init+0x25a>
	ev = net_buf_add(buf, sizeof(*ev));
    2382:	2108      	movs	r1, #8
    2384:	4408      	add	r0, r1
    2386:	f008 ff15 	bl	b1b4 <net_buf_simple_add>
    238a:	2380      	movs	r3, #128	; 0x80
    238c:	7043      	strb	r3, [r0, #1]
    238e:	2302      	movs	r3, #2
    2390:	70c3      	strb	r3, [r0, #3]
    2392:	2320      	movs	r3, #32
	dst[0] = val;
    2394:	7004      	strb	r4, [r0, #0]
    2396:	7084      	strb	r4, [r0, #2]
    2398:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    239a:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    239c:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    239e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    23a0:	4622      	mov	r2, r4
    23a2:	4629      	mov	r1, r5
    23a4:	f640 4001 	movw	r0, #3073	; 0xc01
    23a8:	f7ff fd6a 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    23ac:	4604      	mov	r4, r0
    23ae:	2800      	cmp	r0, #0
    23b0:	d19a      	bne.n	22e8 <hci_init+0x130>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    23b2:	4601      	mov	r1, r0
    23b4:	aa0c      	add	r2, sp, #48	; 0x30
    23b6:	f64f 4001 	movw	r0, #64513	; 0xfc01
    23ba:	f7ff fd61 	bl	1e80 <bt_hci_cmd_send_sync>
    23be:	4d2f      	ldr	r5, [pc, #188]	; (247c <hci_init+0x2c4>)
	if (err) {
    23c0:	2800      	cmp	r0, #0
    23c2:	d071      	beq.n	24a8 <hci_init+0x2f0>
		BT_WARN("Vendor HCI extensions not available");
    23c4:	4b33      	ldr	r3, [pc, #204]	; (2494 <hci_init+0x2dc>)
    23c6:	4a34      	ldr	r2, [pc, #208]	; (2498 <hci_init+0x2e0>)
    23c8:	492f      	ldr	r1, [pc, #188]	; (2488 <hci_init+0x2d0>)
    23ca:	4834      	ldr	r0, [pc, #208]	; (249c <hci_init+0x2e4>)
    23cc:	9501      	str	r5, [sp, #4]
    23ce:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    23d0:	f7fe fd4c 	bl	e6c <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    23d4:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    23d6:	2207      	movs	r2, #7
    23d8:	a90a      	add	r1, sp, #40	; 0x28
    23da:	4823      	ldr	r0, [pc, #140]	; (2468 <hci_init+0x2b0>)
    23dc:	930a      	str	r3, [sp, #40]	; 0x28
    23de:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
    23e2:	f7ff fb5e 	bl	1aa2 <memcmp>
    23e6:	2800      	cmp	r0, #0
    23e8:	f040 80d8 	bne.w	259c <hci_init+0x3e4>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    23ec:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    23f0:	07db      	lsls	r3, r3, #31
    23f2:	f100 80e7 	bmi.w	25c4 <hci_init+0x40c>
		BT_WARN("Read Static Addresses command not available");
    23f6:	9501      	str	r5, [sp, #4]
    23f8:	9500      	str	r5, [sp, #0]
    23fa:	4b29      	ldr	r3, [pc, #164]	; (24a0 <hci_init+0x2e8>)
    23fc:	4a26      	ldr	r2, [pc, #152]	; (2498 <hci_init+0x2e0>)
    23fe:	4922      	ldr	r1, [pc, #136]	; (2488 <hci_init+0x2d0>)
    2400:	4828      	ldr	r0, [pc, #160]	; (24a4 <hci_init+0x2ec>)
    2402:	e0ec      	b.n	25de <hci_init+0x426>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2404:	2102      	movs	r1, #2
    2406:	f640 406d 	movw	r0, #3181	; 0xc6d
    240a:	f7ff fd09 	bl	1e20 <bt_hci_cmd_create>
		if (!buf) {
    240e:	4605      	mov	r5, r0
    2410:	b910      	cbnz	r0, 2418 <hci_init+0x260>
		return -ENOBUFS;
    2412:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2416:	e767      	b.n	22e8 <hci_init+0x130>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2418:	2102      	movs	r1, #2
    241a:	3008      	adds	r0, #8
    241c:	f008 feca 	bl	b1b4 <net_buf_simple_add>
		cp_le->le = 0x01;
    2420:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2422:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2424:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2426:	4622      	mov	r2, r4
    2428:	4629      	mov	r1, r5
    242a:	f640 406d 	movw	r0, #3181	; 0xc6d
    242e:	f7ff fd27 	bl	1e80 <bt_hci_cmd_send_sync>
		if (err) {
    2432:	4604      	mov	r4, r0
    2434:	2800      	cmp	r0, #0
    2436:	f43f af70 	beq.w	231a <hci_init+0x162>
    243a:	e755      	b.n	22e8 <hci_init+0x130>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    243c:	aa0c      	add	r2, sp, #48	; 0x30
    243e:	2100      	movs	r1, #0
    2440:	f242 001c 	movw	r0, #8220	; 0x201c
    2444:	f7ff fd1c 	bl	1e80 <bt_hci_cmd_send_sync>
		if (err) {
    2448:	4604      	mov	r4, r0
    244a:	2800      	cmp	r0, #0
    244c:	f47f af4c 	bne.w	22e8 <hci_init+0x130>
		le_read_supp_states_complete(rsp);
    2450:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2452:	6883      	ldr	r3, [r0, #8]
    2454:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2458:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    245a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    245e:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    2462:	f008 fe75 	bl	b150 <net_buf_unref>
    2466:	e75d      	b.n	2324 <hci_init+0x16c>
    2468:	200031d0 	.word	0x200031d0
    246c:	200002d4 	.word	0x200002d4
    2470:	200031e6 	.word	0x200031e6
    2474:	200031d1 	.word	0x200031d1
    2478:	200031ee 	.word	0x200031ee
    247c:	0000cbb3 	.word	0x0000cbb3
    2480:	0000d49b 	.word	0x0000d49b
    2484:	0000d154 	.word	0x0000d154
    2488:	0000d4ea 	.word	0x0000d4ea
    248c:	0000d575 	.word	0x0000d575
    2490:	20003248 	.word	0x20003248
    2494:	0000d18e 	.word	0x0000d18e
    2498:	0000d4e3 	.word	0x0000d4e3
    249c:	0000d5a9 	.word	0x0000d5a9
    24a0:	0000d16f 	.word	0x0000d16f
    24a4:	0000d746 	.word	0x0000d746
	rp.info = (void *)rsp->data;
    24a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    24aa:	496c      	ldr	r1, [pc, #432]	; (265c <hci_init+0x4a4>)
	rp.info = (void *)rsp->data;
    24ac:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    24ae:	486c      	ldr	r0, [pc, #432]	; (2660 <hci_init+0x4a8>)
    24b0:	f8b7 3001 	ldrh.w	r3, [r7, #1]
    24b4:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    24b6:	2b03      	cmp	r3, #3
		return plat_str[platform];
    24b8:	bf96      	itet	ls
    24ba:	4a6a      	ldrls	r2, [pc, #424]	; (2664 <hci_init+0x4ac>)
	return "unknown";
    24bc:	4a6a      	ldrhi	r2, [pc, #424]	; (2668 <hci_init+0x4b0>)
		return plat_str[platform];
    24be:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    24c2:	9201      	str	r2, [sp, #4]
    24c4:	4b69      	ldr	r3, [pc, #420]	; (266c <hci_init+0x4b4>)
    24c6:	4a6a      	ldr	r2, [pc, #424]	; (2670 <hci_init+0x4b8>)
    24c8:	9503      	str	r5, [sp, #12]
    24ca:	9500      	str	r5, [sp, #0]
    24cc:	f7fe fcce 	bl	e6c <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    24d0:	f8b7 3001 	ldrh.w	r3, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    24d4:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    24d8:	2b02      	cmp	r3, #2
    24da:	d13a      	bne.n	2552 <hci_init+0x39a>
	if (variant < ARRAY_SIZE(nordic_str)) {
    24dc:	2a02      	cmp	r2, #2
    24de:	d838      	bhi.n	2552 <hci_init+0x39a>
		return nordic_str[variant];
    24e0:	4b64      	ldr	r3, [pc, #400]	; (2674 <hci_init+0x4bc>)
    24e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    24e6:	9202      	str	r2, [sp, #8]
    24e8:	9301      	str	r3, [sp, #4]
    24ea:	4a61      	ldr	r2, [pc, #388]	; (2670 <hci_init+0x4b8>)
    24ec:	4b5f      	ldr	r3, [pc, #380]	; (266c <hci_init+0x4b4>)
    24ee:	495b      	ldr	r1, [pc, #364]	; (265c <hci_init+0x4a4>)
    24f0:	9503      	str	r5, [sp, #12]
    24f2:	9500      	str	r5, [sp, #0]
    24f4:	4860      	ldr	r0, [pc, #384]	; (2678 <hci_init+0x4c0>)
    24f6:	f7fe fcb9 	bl	e6c <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    24fa:	797b      	ldrb	r3, [r7, #5]
    24fc:	9506      	str	r5, [sp, #24]
    24fe:	f8d7 1009 	ldr.w	r1, [r7, #9]
    2502:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    2504:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2506:	f8b7 1007 	ldrh.w	r1, [r7, #7]
		return var_str[variant];
    250a:	bf98      	it	ls
    250c:	4a5b      	ldrls	r2, [pc, #364]	; (267c <hci_init+0x4c4>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    250e:	9104      	str	r1, [sp, #16]
    2510:	79b9      	ldrb	r1, [r7, #6]
		return var_str[variant];
    2512:	bf94      	ite	ls
    2514:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2518:	4a53      	ldrhi	r2, [pc, #332]	; (2668 <hci_init+0x4b0>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    251a:	9103      	str	r1, [sp, #12]
    251c:	9302      	str	r3, [sp, #8]
    251e:	494f      	ldr	r1, [pc, #316]	; (265c <hci_init+0x4a4>)
    2520:	4b52      	ldr	r3, [pc, #328]	; (266c <hci_init+0x4b4>)
    2522:	9201      	str	r2, [sp, #4]
    2524:	9500      	str	r5, [sp, #0]
    2526:	4a52      	ldr	r2, [pc, #328]	; (2670 <hci_init+0x4b8>)
    2528:	4855      	ldr	r0, [pc, #340]	; (2680 <hci_init+0x4c8>)
    252a:	f7fe fc9f 	bl	e6c <printk>
	net_buf_unref(rsp);
    252e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2530:	f008 fe0e 	bl	b150 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2534:	aa0c      	add	r2, sp, #48	; 0x30
    2536:	2100      	movs	r1, #0
    2538:	f64f 4002 	movw	r0, #64514	; 0xfc02
    253c:	f7ff fca0 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2540:	4607      	mov	r7, r0
    2542:	b140      	cbz	r0, 2556 <hci_init+0x39e>
		BT_WARN("Failed to read supported vendor features");
    2544:	9501      	str	r5, [sp, #4]
    2546:	9500      	str	r5, [sp, #0]
    2548:	4b48      	ldr	r3, [pc, #288]	; (266c <hci_init+0x4b4>)
    254a:	4a4e      	ldr	r2, [pc, #312]	; (2684 <hci_init+0x4cc>)
    254c:	4943      	ldr	r1, [pc, #268]	; (265c <hci_init+0x4a4>)
    254e:	484e      	ldr	r0, [pc, #312]	; (2688 <hci_init+0x4d0>)
    2550:	e73e      	b.n	23d0 <hci_init+0x218>
		return "unknown";
    2552:	4b45      	ldr	r3, [pc, #276]	; (2668 <hci_init+0x4b0>)
    2554:	e7c7      	b.n	24e6 <hci_init+0x32e>
	rp.cmds = (void *)rsp->data;
    2556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2558:	484c      	ldr	r0, [pc, #304]	; (268c <hci_init+0x4d4>)
    255a:	6899      	ldr	r1, [r3, #8]
    255c:	2202      	movs	r2, #2
    255e:	3101      	adds	r1, #1
    2560:	f7ff fab4 	bl	1acc <memcpy>
	net_buf_unref(rsp);
    2564:	980c      	ldr	r0, [sp, #48]	; 0x30
    2566:	f008 fdf3 	bl	b150 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    256a:	aa0c      	add	r2, sp, #48	; 0x30
    256c:	4639      	mov	r1, r7
    256e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2572:	f7ff fc85 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2576:	b130      	cbz	r0, 2586 <hci_init+0x3ce>
		BT_WARN("Failed to read supported vendor commands");
    2578:	9501      	str	r5, [sp, #4]
    257a:	9500      	str	r5, [sp, #0]
    257c:	4b3b      	ldr	r3, [pc, #236]	; (266c <hci_init+0x4b4>)
    257e:	4a41      	ldr	r2, [pc, #260]	; (2684 <hci_init+0x4cc>)
    2580:	4936      	ldr	r1, [pc, #216]	; (265c <hci_init+0x4a4>)
    2582:	4843      	ldr	r0, [pc, #268]	; (2690 <hci_init+0x4d8>)
    2584:	e724      	b.n	23d0 <hci_init+0x218>
	rp.feat = (void *)rsp->data;
    2586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2588:	4842      	ldr	r0, [pc, #264]	; (2694 <hci_init+0x4dc>)
    258a:	6899      	ldr	r1, [r3, #8]
    258c:	2201      	movs	r2, #1
    258e:	4411      	add	r1, r2
    2590:	f7ff fa9c 	bl	1acc <memcpy>
	net_buf_unref(rsp);
    2594:	980c      	ldr	r0, [sp, #48]	; 0x30
    2596:	f008 fddb 	bl	b150 <net_buf_unref>
    259a:	e71b      	b.n	23d4 <hci_init+0x21c>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    259c:	4b3e      	ldr	r3, [pc, #248]	; (2698 <hci_init+0x4e0>)
    259e:	6818      	ldr	r0, [r3, #0]
    25a0:	889a      	ldrh	r2, [r3, #4]
    25a2:	900c      	str	r0, [sp, #48]	; 0x30
    25a4:	799b      	ldrb	r3, [r3, #6]
    25a6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    25aa:	a90c      	add	r1, sp, #48	; 0x30
    25ac:	2207      	movs	r2, #7
    25ae:	483b      	ldr	r0, [pc, #236]	; (269c <hci_init+0x4e4>)
    25b0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    25b4:	f7ff fa75 	bl	1aa2 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    25b8:	2800      	cmp	r0, #0
    25ba:	f43f af17 	beq.w	23ec <hci_init+0x234>
		bt_dev_show_info();
    25be:	f7ff fdad 	bl	211c <bt_dev_show_info>
	return 0;
    25c2:	e691      	b.n	22e8 <hci_init+0x130>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    25c4:	aa09      	add	r2, sp, #36	; 0x24
    25c6:	2100      	movs	r1, #0
    25c8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    25cc:	f7ff fc58 	bl	1e80 <bt_hci_cmd_send_sync>
		if (err) {
    25d0:	b140      	cbz	r0, 25e4 <hci_init+0x42c>
			BT_WARN("Failed to read static addresses");
    25d2:	4b33      	ldr	r3, [pc, #204]	; (26a0 <hci_init+0x4e8>)
    25d4:	4a2b      	ldr	r2, [pc, #172]	; (2684 <hci_init+0x4cc>)
    25d6:	4921      	ldr	r1, [pc, #132]	; (265c <hci_init+0x4a4>)
    25d8:	4832      	ldr	r0, [pc, #200]	; (26a4 <hci_init+0x4ec>)
    25da:	9501      	str	r5, [sp, #4]
    25dc:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    25de:	f7fe fc45 	bl	e6c <printk>
    25e2:	e027      	b.n	2634 <hci_init+0x47c>
		rp = (void *)rsp->data;
    25e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25e6:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    25e8:	784b      	ldrb	r3, [r1, #1]
    25ea:	b1c3      	cbz	r3, 261e <hci_init+0x466>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    25ec:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    25ee:	2206      	movs	r2, #6
    25f0:	3102      	adds	r1, #2
    25f2:	482d      	ldr	r0, [pc, #180]	; (26a8 <hci_init+0x4f0>)
    25f4:	7033      	strb	r3, [r6, #0]
    25f6:	f7ff fa69 	bl	1acc <memcpy>
			net_buf_unref(rsp);
    25fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    25fc:	f008 fda8 	bl	b150 <net_buf_unref>
		return bt_set_static_addr();
    2600:	f7ff fd5c 	bl	20bc <bt_set_static_addr>
    2604:	4606      	mov	r6, r0
		if (err) {
    2606:	2800      	cmp	r0, #0
    2608:	d0d9      	beq.n	25be <hci_init+0x406>
			BT_ERR("Unable to set identity address");
    260a:	9501      	str	r5, [sp, #4]
    260c:	9500      	str	r5, [sp, #0]
    260e:	4b27      	ldr	r3, [pc, #156]	; (26ac <hci_init+0x4f4>)
    2610:	4a27      	ldr	r2, [pc, #156]	; (26b0 <hci_init+0x4f8>)
    2612:	4912      	ldr	r1, [pc, #72]	; (265c <hci_init+0x4a4>)
    2614:	4827      	ldr	r0, [pc, #156]	; (26b4 <hci_init+0x4fc>)
    2616:	f7fe fc29 	bl	e6c <printk>
			return err;
    261a:	4634      	mov	r4, r6
    261c:	e664      	b.n	22e8 <hci_init+0x130>
		BT_WARN("No static addresses stored in controller");
    261e:	9501      	str	r5, [sp, #4]
    2620:	9500      	str	r5, [sp, #0]
    2622:	4b1f      	ldr	r3, [pc, #124]	; (26a0 <hci_init+0x4e8>)
    2624:	4a17      	ldr	r2, [pc, #92]	; (2684 <hci_init+0x4cc>)
    2626:	490d      	ldr	r1, [pc, #52]	; (265c <hci_init+0x4a4>)
    2628:	4823      	ldr	r0, [pc, #140]	; (26b8 <hci_init+0x500>)
    262a:	f7fe fc1f 	bl	e6c <printk>
		net_buf_unref(rsp);
    262e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2630:	f008 fd8e 	bl	b150 <net_buf_unref>
		err = bt_addr_le_create_static(&bt_dev.id_addr);
    2634:	4819      	ldr	r0, [pc, #100]	; (269c <hci_init+0x4e4>)
    2636:	f7ff fd32 	bl	209e <bt_addr_le_create_static>
		if (err) {
    263a:	4606      	mov	r6, r0
    263c:	2800      	cmp	r0, #0
    263e:	d1e4      	bne.n	260a <hci_init+0x452>
		BT_WARN("Using temporary static random address %s",
    2640:	4819      	ldr	r0, [pc, #100]	; (26a8 <hci_init+0x4f0>)
    2642:	f7ff fac9 	bl	1bd8 <bt_addr_str>
    2646:	9502      	str	r5, [sp, #8]
    2648:	9001      	str	r0, [sp, #4]
    264a:	9500      	str	r5, [sp, #0]
    264c:	4b14      	ldr	r3, [pc, #80]	; (26a0 <hci_init+0x4e8>)
    264e:	4a0d      	ldr	r2, [pc, #52]	; (2684 <hci_init+0x4cc>)
    2650:	4902      	ldr	r1, [pc, #8]	; (265c <hci_init+0x4a4>)
    2652:	481a      	ldr	r0, [pc, #104]	; (26bc <hci_init+0x504>)
    2654:	f7fe fc0a 	bl	e6c <printk>
    2658:	e7d2      	b.n	2600 <hci_init+0x448>
    265a:	bf00      	nop
    265c:	0000d4ea 	.word	0x0000d4ea
    2660:	0000d5dd 	.word	0x0000d5dd
    2664:	0000d8c4 	.word	0x0000d8c4
    2668:	0000d9b4 	.word	0x0000d9b4
    266c:	0000d18e 	.word	0x0000d18e
    2670:	0000d1c2 	.word	0x0000d1c2
    2674:	0000d8b8 	.word	0x0000d8b8
    2678:	0000d606 	.word	0x0000d606
    267c:	0000d9a4 	.word	0x0000d9a4
    2680:	0000d62e 	.word	0x0000d62e
    2684:	0000d4e3 	.word	0x0000d4e3
    2688:	0000d66b 	.word	0x0000d66b
    268c:	2000322f 	.word	0x2000322f
    2690:	0000d6a4 	.word	0x0000d6a4
    2694:	2000322e 	.word	0x2000322e
    2698:	0000cb0c 	.word	0x0000cb0c
    269c:	200031d0 	.word	0x200031d0
    26a0:	0000d16f 	.word	0x0000d16f
    26a4:	0000d6dd 	.word	0x0000d6dd
    26a8:	200031d1 	.word	0x200031d1
    26ac:	0000d19a 	.word	0x0000d19a
    26b0:	0000d49b 	.word	0x0000d49b
    26b4:	0000d7bb 	.word	0x0000d7bb
    26b8:	0000d70d 	.word	0x0000d70d
    26bc:	0000d782 	.word	0x0000d782

000026c0 <init_work>:
{
    26c0:	b510      	push	{r4, lr}
	err = hci_init();
    26c2:	f7ff fd79 	bl	21b8 <hci_init>
	if (err) {
    26c6:	4604      	mov	r4, r0
    26c8:	b930      	cbnz	r0, 26d8 <init_work+0x18>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    26ca:	2102      	movs	r1, #2
    26cc:	4806      	ldr	r0, [pc, #24]	; (26e8 <init_work+0x28>)
    26ce:	f7ff fb11 	bl	1cf4 <atomic_or>
	bt_le_scan_update(false);
    26d2:	4620      	mov	r0, r4
    26d4:	f7ff fcd2 	bl	207c <bt_le_scan_update>
	if (ready_cb) {
    26d8:	4b04      	ldr	r3, [pc, #16]	; (26ec <init_work+0x2c>)
    26da:	681b      	ldr	r3, [r3, #0]
    26dc:	b11b      	cbz	r3, 26e6 <init_work+0x26>
		ready_cb(err);
    26de:	4620      	mov	r0, r4
}
    26e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    26e4:	4718      	bx	r3
    26e6:	bd10      	pop	{r4, pc}
    26e8:	20003240 	.word	0x20003240
    26ec:	200002d0 	.word	0x200002d0

000026f0 <bt_send>:
	return bt_dev.drv->send(buf);
    26f0:	4b02      	ldr	r3, [pc, #8]	; (26fc <bt_send+0xc>)
    26f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    26f6:	691b      	ldr	r3, [r3, #16]
    26f8:	4718      	bx	r3
    26fa:	bf00      	nop
    26fc:	200031d0 	.word	0x200031d0

00002700 <bt_hci_cmd_send>:
{
    2700:	b530      	push	{r4, r5, lr}
    2702:	4604      	mov	r4, r0
    2704:	b085      	sub	sp, #20
	if (!buf) {
    2706:	460d      	mov	r5, r1
    2708:	b919      	cbnz	r1, 2712 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    270a:	f7ff fb89 	bl	1e20 <bt_hci_cmd_create>
		if (!buf) {
    270e:	4605      	mov	r5, r0
    2710:	b1f0      	cbz	r0, 2750 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2712:	f640 4335 	movw	r3, #3125	; 0xc35
    2716:	429c      	cmp	r4, r3
    2718:	d114      	bne.n	2744 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    271a:	4628      	mov	r0, r5
    271c:	f7ff ffe8 	bl	26f0 <bt_send>
		if (err) {
    2720:	4604      	mov	r4, r0
    2722:	b160      	cbz	r0, 273e <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    2724:	4b0c      	ldr	r3, [pc, #48]	; (2758 <bt_hci_cmd_send+0x58>)
    2726:	9302      	str	r3, [sp, #8]
    2728:	e88d 0018 	stmia.w	sp, {r3, r4}
    272c:	4a0b      	ldr	r2, [pc, #44]	; (275c <bt_hci_cmd_send+0x5c>)
    272e:	4b0c      	ldr	r3, [pc, #48]	; (2760 <bt_hci_cmd_send+0x60>)
    2730:	490c      	ldr	r1, [pc, #48]	; (2764 <bt_hci_cmd_send+0x64>)
    2732:	480d      	ldr	r0, [pc, #52]	; (2768 <bt_hci_cmd_send+0x68>)
    2734:	f7fe fb9a 	bl	e6c <printk>
			net_buf_unref(buf);
    2738:	4628      	mov	r0, r5
    273a:	f008 fd09 	bl	b150 <net_buf_unref>
}
    273e:	4620      	mov	r0, r4
    2740:	b005      	add	sp, #20
    2742:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2744:	4629      	mov	r1, r5
    2746:	4809      	ldr	r0, [pc, #36]	; (276c <bt_hci_cmd_send+0x6c>)
    2748:	f008 fcf5 	bl	b136 <net_buf_put>
	return 0;
    274c:	2400      	movs	r4, #0
    274e:	e7f6      	b.n	273e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    2750:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2754:	e7f3      	b.n	273e <bt_hci_cmd_send+0x3e>
    2756:	bf00      	nop
    2758:	0000cbb3 	.word	0x0000cbb3
    275c:	0000d49b 	.word	0x0000d49b
    2760:	0000d0f5 	.word	0x0000d0f5
    2764:	0000d4ea 	.word	0x0000d4ea
    2768:	0000d2c0 	.word	0x0000d2c0
    276c:	20003274 	.word	0x20003274

00002770 <hci_tx_thread>:
{
    2770:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2774:	4c44      	ldr	r4, [pc, #272]	; (2888 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2776:	4e45      	ldr	r6, [pc, #276]	; (288c <hci_tx_thread+0x11c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2778:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
		events[0].state = K_POLL_STATE_NOT_READY;
    277c:	7b73      	ldrb	r3, [r6, #13]

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_PUT, k_pipe_put, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_write, size_t *, bytes_written, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE6(K_SYSCALL_K_PIPE_GET, k_pipe_get, int, struct k_pipe *, pipe, void *, data, size_t, bytes_to_read, size_t *, bytes_read, size_t, min_xfer, s32_t, timeout);

K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    277e:	4843      	ldr	r0, [pc, #268]	; (288c <hci_tx_thread+0x11c>)
    2780:	f36f 1307 	bfc	r3, #4, #4
    2784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2788:	2101      	movs	r1, #1
    278a:	7373      	strb	r3, [r6, #13]
    278c:	f00a f8c6 	bl	c91c <_impl_k_poll>
		BT_ASSERT(err == 0);
    2790:	2800      	cmp	r0, #0
    2792:	d161      	bne.n	2858 <hci_tx_thread+0xe8>
		switch (ev->state) {
    2794:	7b73      	ldrb	r3, [r6, #13]
    2796:	091b      	lsrs	r3, r3, #4
    2798:	2b01      	cmp	r3, #1
    279a:	d90b      	bls.n	27b4 <hci_tx_thread+0x44>
    279c:	2b04      	cmp	r3, #4
    279e:	d00c      	beq.n	27ba <hci_tx_thread+0x4a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    27a0:	4a3b      	ldr	r2, [pc, #236]	; (2890 <hci_tx_thread+0x120>)
    27a2:	9202      	str	r2, [sp, #8]
    27a4:	e88d 000c 	stmia.w	sp, {r2, r3}
    27a8:	493a      	ldr	r1, [pc, #232]	; (2894 <hci_tx_thread+0x124>)
    27aa:	4b3b      	ldr	r3, [pc, #236]	; (2898 <hci_tx_thread+0x128>)
    27ac:	4a3b      	ldr	r2, [pc, #236]	; (289c <hci_tx_thread+0x12c>)
    27ae:	483c      	ldr	r0, [pc, #240]	; (28a0 <hci_tx_thread+0x130>)
    27b0:	f7fe fb5c 	bl	e6c <printk>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    27b4:	f009 fcfe 	bl	c1b4 <_impl_k_yield>
    27b8:	e7e0      	b.n	277c <hci_tx_thread+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    27ba:	7b37      	ldrb	r7, [r6, #12]
    27bc:	2f00      	cmp	r7, #0
    27be:	d1f9      	bne.n	27b4 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    27c0:	4639      	mov	r1, r7
    27c2:	4640      	mov	r0, r8
    27c4:	f008 fc9a 	bl	b0fc <net_buf_get>
	BT_ASSERT(buf);
    27c8:	4605      	mov	r5, r0
    27ca:	2800      	cmp	r0, #0
    27cc:	d053      	beq.n	2876 <hci_tx_thread+0x106>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    27ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    27d2:	4834      	ldr	r0, [pc, #208]	; (28a4 <hci_tx_thread+0x134>)
    27d4:	f009 fd7d 	bl	c2d2 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    27d8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    27dc:	bb63      	cbnz	r3, 2838 <hci_tx_thread+0xc8>
	bt_dev.sent_cmd = net_buf_ref(buf);
    27de:	4628      	mov	r0, r5
    27e0:	f008 fce4 	bl	b1ac <net_buf_ref>
    27e4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    27e8:	4628      	mov	r0, r5
    27ea:	f7ff ff81 	bl	26f0 <bt_send>
	if (err) {
    27ee:	2800      	cmp	r0, #0
    27f0:	d0e0      	beq.n	27b4 <hci_tx_thread+0x44>
		BT_ERR("Unable to send to driver (err %d)", err);
    27f2:	4b27      	ldr	r3, [pc, #156]	; (2890 <hci_tx_thread+0x120>)
    27f4:	4a2c      	ldr	r2, [pc, #176]	; (28a8 <hci_tx_thread+0x138>)
    27f6:	4927      	ldr	r1, [pc, #156]	; (2894 <hci_tx_thread+0x124>)
    27f8:	9302      	str	r3, [sp, #8]
    27fa:	9001      	str	r0, [sp, #4]
    27fc:	9300      	str	r3, [sp, #0]
    27fe:	482b      	ldr	r0, [pc, #172]	; (28ac <hci_tx_thread+0x13c>)
    2800:	4b2b      	ldr	r3, [pc, #172]	; (28b0 <hci_tx_thread+0x140>)
    2802:	f7fe fb33 	bl	e6c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2806:	4827      	ldr	r0, [pc, #156]	; (28a4 <hci_tx_thread+0x134>)
    2808:	f009 fd3b 	bl	c282 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    280c:	4628      	mov	r0, r5
    280e:	f008 fbe1 	bl	afd4 <net_buf_id>
    2812:	4b28      	ldr	r3, [pc, #160]	; (28b4 <hci_tx_thread+0x144>)
    2814:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2818:	2200      	movs	r2, #0
    281a:	211f      	movs	r1, #31
    281c:	8840      	ldrh	r0, [r0, #2]
    281e:	f7ff fa8b 	bl	1d38 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2822:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2826:	f008 fc93 	bl	b150 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    282a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    282c:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    282e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    2832:	f008 fc8d 	bl	b150 <net_buf_unref>
    2836:	e7bd      	b.n	27b4 <hci_tx_thread+0x44>
		BT_ERR("Uncleared pending sent_cmd");
    2838:	4b15      	ldr	r3, [pc, #84]	; (2890 <hci_tx_thread+0x120>)
    283a:	9301      	str	r3, [sp, #4]
    283c:	9300      	str	r3, [sp, #0]
    283e:	4a1a      	ldr	r2, [pc, #104]	; (28a8 <hci_tx_thread+0x138>)
    2840:	4b1b      	ldr	r3, [pc, #108]	; (28b0 <hci_tx_thread+0x140>)
    2842:	4914      	ldr	r1, [pc, #80]	; (2894 <hci_tx_thread+0x124>)
    2844:	481c      	ldr	r0, [pc, #112]	; (28b8 <hci_tx_thread+0x148>)
    2846:	f7fe fb11 	bl	e6c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    284a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    284e:	f008 fc7f 	bl	b150 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2852:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    2856:	e7c2      	b.n	27de <hci_tx_thread+0x6e>
		BT_ASSERT(err == 0);
    2858:	4b0d      	ldr	r3, [pc, #52]	; (2890 <hci_tx_thread+0x120>)
    285a:	9301      	str	r3, [sp, #4]
    285c:	9300      	str	r3, [sp, #0]
    285e:	4a12      	ldr	r2, [pc, #72]	; (28a8 <hci_tx_thread+0x138>)
    2860:	4b16      	ldr	r3, [pc, #88]	; (28bc <hci_tx_thread+0x14c>)
    2862:	490c      	ldr	r1, [pc, #48]	; (2894 <hci_tx_thread+0x124>)
    2864:	4816      	ldr	r0, [pc, #88]	; (28c0 <hci_tx_thread+0x150>)
	BT_ASSERT(buf);
    2866:	f7fe fb01 	bl	e6c <printk>
    286a:	4040      	eors	r0, r0
    286c:	f380 8811 	msr	BASEPRI, r0
    2870:	f04f 0004 	mov.w	r0, #4
    2874:	df02      	svc	2
    2876:	4b06      	ldr	r3, [pc, #24]	; (2890 <hci_tx_thread+0x120>)
    2878:	9301      	str	r3, [sp, #4]
    287a:	9300      	str	r3, [sp, #0]
    287c:	4a0a      	ldr	r2, [pc, #40]	; (28a8 <hci_tx_thread+0x138>)
    287e:	4b0c      	ldr	r3, [pc, #48]	; (28b0 <hci_tx_thread+0x140>)
    2880:	4904      	ldr	r1, [pc, #16]	; (2894 <hci_tx_thread+0x124>)
    2882:	4810      	ldr	r0, [pc, #64]	; (28c4 <hci_tx_thread+0x154>)
    2884:	e7ef      	b.n	2866 <hci_tx_thread+0xf6>
    2886:	bf00      	nop
    2888:	200031d0 	.word	0x200031d0
    288c:	20003288 	.word	0x20003288
    2890:	0000cbb3 	.word	0x0000cbb3
    2894:	0000d4ea 	.word	0x0000d4ea
    2898:	0000d137 	.word	0x0000d137
    289c:	0000d4e3 	.word	0x0000d4e3
    28a0:	0000d7ea 	.word	0x0000d7ea
    28a4:	20003258 	.word	0x20003258
    28a8:	0000d49b 	.word	0x0000d49b
    28ac:	0000d2c0 	.word	0x0000d2c0
    28b0:	0000d12e 	.word	0x0000d12e
    28b4:	20000278 	.word	0x20000278
    28b8:	0000d81b 	.word	0x0000d81b
    28bc:	0000d146 	.word	0x0000d146
    28c0:	0000d846 	.word	0x0000d846
    28c4:	0000d870 	.word	0x0000d870

000028c8 <bt_recv>:
{
    28c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    28cc:	7d06      	ldrb	r6, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    28ce:	2e01      	cmp	r6, #1
{
    28d0:	b08b      	sub	sp, #44	; 0x2c
    28d2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    28d4:	d16b      	bne.n	29ae <bt_recv+0xe6>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    28d6:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    28d8:	783b      	ldrb	r3, [r7, #0]
    28da:	3b0e      	subs	r3, #14
    28dc:	2b01      	cmp	r3, #1
    28de:	d876      	bhi.n	29ce <bt_recv+0x106>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    28e0:	4b68      	ldr	r3, [pc, #416]	; (2a84 <bt_recv+0x1bc>)
    28e2:	9301      	str	r3, [sp, #4]
    28e4:	9300      	str	r3, [sp, #0]
    28e6:	4a68      	ldr	r2, [pc, #416]	; (2a88 <bt_recv+0x1c0>)
    28e8:	4b68      	ldr	r3, [pc, #416]	; (2a8c <bt_recv+0x1c4>)
    28ea:	4969      	ldr	r1, [pc, #420]	; (2a90 <bt_recv+0x1c8>)
    28ec:	4869      	ldr	r0, [pc, #420]	; (2a94 <bt_recv+0x1cc>)
    28ee:	f7fe fabd 	bl	e6c <printk>
    28f2:	4040      	eors	r0, r0
    28f4:	f380 8811 	msr	BASEPRI, r0
    28f8:	f04f 0004 	mov.w	r0, #4
    28fc:	df02      	svc	2
    28fe:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2900:	4865      	ldr	r0, [pc, #404]	; (2a98 <bt_recv+0x1d0>)
    2902:	f06f 0120 	mvn.w	r1, #32
    2906:	f7ff fa06 	bl	1d16 <atomic_and>
	if (!evt->status) {
    290a:	7833      	ldrb	r3, [r6, #0]
    290c:	b943      	cbnz	r3, 2920 <bt_recv+0x58>
		memcpy(pub_key, evt->key, 64);
    290e:	1c71      	adds	r1, r6, #1
    2910:	2240      	movs	r2, #64	; 0x40
    2912:	4862      	ldr	r0, [pc, #392]	; (2a9c <bt_recv+0x1d4>)
    2914:	f7ff f8da 	bl	1acc <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2918:	2110      	movs	r1, #16
    291a:	485f      	ldr	r0, [pc, #380]	; (2a98 <bt_recv+0x1d0>)
    291c:	f7ff f9ea 	bl	1cf4 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2920:	4b5f      	ldr	r3, [pc, #380]	; (2aa0 <bt_recv+0x1d8>)
    2922:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2924:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2926:	b935      	cbnz	r5, 2936 <bt_recv+0x6e>
	net_buf_unref(buf);
    2928:	4620      	mov	r0, r4
    292a:	f008 fc11 	bl	b150 <net_buf_unref>
		return 0;
    292e:	2000      	movs	r0, #0
}
    2930:	b00b      	add	sp, #44	; 0x2c
    2932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2936:	7832      	ldrb	r2, [r6, #0]
    2938:	682b      	ldr	r3, [r5, #0]
    293a:	2a00      	cmp	r2, #0
    293c:	bf0c      	ite	eq
    293e:	4638      	moveq	r0, r7
    2940:	2000      	movne	r0, #0
    2942:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2944:	686d      	ldr	r5, [r5, #4]
    2946:	e7ee      	b.n	2926 <bt_recv+0x5e>
	if (dh_key_cb) {
    2948:	4d56      	ldr	r5, [pc, #344]	; (2aa4 <bt_recv+0x1dc>)
    294a:	68a0      	ldr	r0, [r4, #8]
    294c:	682a      	ldr	r2, [r5, #0]
    294e:	2a00      	cmp	r2, #0
    2950:	d0ea      	beq.n	2928 <bt_recv+0x60>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2952:	7803      	ldrb	r3, [r0, #0]
    2954:	b923      	cbnz	r3, 2960 <bt_recv+0x98>
    2956:	3001      	adds	r0, #1
    2958:	4790      	blx	r2
		dh_key_cb = NULL;
    295a:	2300      	movs	r3, #0
    295c:	602b      	str	r3, [r5, #0]
    295e:	e7e3      	b.n	2928 <bt_recv+0x60>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2960:	2000      	movs	r0, #0
    2962:	e7f9      	b.n	2958 <bt_recv+0x90>
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2964:	f7ff f8b2 	bl	1acc <memcpy>
    2968:	e067      	b.n	2a3a <bt_recv+0x172>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    296a:	89a5      	ldrh	r5, [r4, #12]
    296c:	68a0      	ldr	r0, [r4, #8]
    296e:	4629      	mov	r1, r5
    2970:	f7ff f8fc 	bl	1b6c <bt_hex>
    2974:	4b43      	ldr	r3, [pc, #268]	; (2a84 <bt_recv+0x1bc>)
    2976:	9304      	str	r3, [sp, #16]
    2978:	9003      	str	r0, [sp, #12]
    297a:	e88d 0048 	stmia.w	sp, {r3, r6}
    297e:	4a4a      	ldr	r2, [pc, #296]	; (2aa8 <bt_recv+0x1e0>)
    2980:	4b4a      	ldr	r3, [pc, #296]	; (2aac <bt_recv+0x1e4>)
    2982:	4943      	ldr	r1, [pc, #268]	; (2a90 <bt_recv+0x1c8>)
    2984:	484a      	ldr	r0, [pc, #296]	; (2ab0 <bt_recv+0x1e8>)
    2986:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    2988:	f7fe fa70 	bl	e6c <printk>
    298c:	e7cc      	b.n	2928 <bt_recv+0x60>
    298e:	89a5      	ldrh	r5, [r4, #12]
    2990:	68a0      	ldr	r0, [r4, #8]
    2992:	4629      	mov	r1, r5
    2994:	f7ff f8ea 	bl	1b6c <bt_hex>
    2998:	4b3a      	ldr	r3, [pc, #232]	; (2a84 <bt_recv+0x1bc>)
    299a:	9304      	str	r3, [sp, #16]
    299c:	9003      	str	r0, [sp, #12]
    299e:	e88d 0088 	stmia.w	sp, {r3, r7}
    29a2:	9502      	str	r5, [sp, #8]
    29a4:	4b39      	ldr	r3, [pc, #228]	; (2a8c <bt_recv+0x1c4>)
    29a6:	4a40      	ldr	r2, [pc, #256]	; (2aa8 <bt_recv+0x1e0>)
    29a8:	4939      	ldr	r1, [pc, #228]	; (2a90 <bt_recv+0x1c8>)
    29aa:	4842      	ldr	r0, [pc, #264]	; (2ab4 <bt_recv+0x1ec>)
    29ac:	e7ec      	b.n	2988 <bt_recv+0xc0>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    29ae:	4b35      	ldr	r3, [pc, #212]	; (2a84 <bt_recv+0x1bc>)
    29b0:	9302      	str	r3, [sp, #8]
    29b2:	e88d 0048 	stmia.w	sp, {r3, r6}
    29b6:	4a34      	ldr	r2, [pc, #208]	; (2a88 <bt_recv+0x1c0>)
    29b8:	4b3f      	ldr	r3, [pc, #252]	; (2ab8 <bt_recv+0x1f0>)
    29ba:	4935      	ldr	r1, [pc, #212]	; (2a90 <bt_recv+0x1c8>)
    29bc:	483f      	ldr	r0, [pc, #252]	; (2abc <bt_recv+0x1f4>)
    29be:	f7fe fa55 	bl	e6c <printk>
		net_buf_unref(buf);
    29c2:	4620      	mov	r0, r4
    29c4:	f008 fbc4 	bl	b150 <net_buf_unref>
		return -EINVAL;
    29c8:	f06f 0015 	mvn.w	r0, #21
    29cc:	e7b0      	b.n	2930 <bt_recv+0x68>
	net_buf_pull(buf, sizeof(*hdr));
    29ce:	f100 0508 	add.w	r5, r0, #8
    29d2:	2102      	movs	r1, #2
    29d4:	4628      	mov	r0, r5
    29d6:	f008 fc04 	bl	b1e2 <net_buf_simple_pull>
	switch (hdr->evt) {
    29da:	783f      	ldrb	r7, [r7, #0]
    29dc:	2f3e      	cmp	r7, #62	; 0x3e
    29de:	d1d6      	bne.n	298e <bt_recv+0xc6>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    29e0:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    29e2:	4631      	mov	r1, r6
    29e4:	4628      	mov	r0, r5
    29e6:	f008 fbfc 	bl	b1e2 <net_buf_simple_pull>
	switch (evt->subevent) {
    29ea:	783e      	ldrb	r6, [r7, #0]
    29ec:	2e08      	cmp	r6, #8
    29ee:	d086      	beq.n	28fe <bt_recv+0x36>
    29f0:	2e09      	cmp	r6, #9
    29f2:	d0a9      	beq.n	2948 <bt_recv+0x80>
    29f4:	2e02      	cmp	r6, #2
    29f6:	d1b8      	bne.n	296a <bt_recv+0xa2>
	u8_t num_reports = net_buf_pull_u8(buf);
    29f8:	4628      	mov	r0, r5
    29fa:	f008 fbfa 	bl	b1f2 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    29fe:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2ac0 <bt_recv+0x1f8>
	u8_t num_reports = net_buf_pull_u8(buf);
    2a02:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    2a04:	9b07      	ldr	r3, [sp, #28]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d08e      	beq.n	2928 <bt_recv+0x60>
		info = (void *)buf->data;
    2a0a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2a0c:	2109      	movs	r1, #9
    2a0e:	4628      	mov	r0, r5
    2a10:	f008 fbe7 	bl	b1e2 <net_buf_simple_pull>
		rssi = info->data[info->length];
    2a14:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2a16:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    2a18:	4433      	add	r3, r6
    2a1a:	2207      	movs	r2, #7
    2a1c:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2a20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2a24:	3b02      	subs	r3, #2
    2a26:	2b01      	cmp	r3, #1
    2a28:	a808      	add	r0, sp, #32
    2a2a:	d89b      	bhi.n	2964 <bt_recv+0x9c>
    2a2c:	f7ff f84e 	bl	1acc <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2a30:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2a34:	3b02      	subs	r3, #2
    2a36:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    2a3a:	f8da 3000 	ldr.w	r3, [sl]
    2a3e:	b1ab      	cbz	r3, 2a6c <bt_recv+0x1a4>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2a40:	4628      	mov	r0, r5
    2a42:	f008 fbde 	bl	b202 <net_buf_simple_headroom>
			buf->len = info->length;
    2a46:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    2a48:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    2a4c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2a4e:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2a50:	462b      	mov	r3, r5
    2a52:	7832      	ldrb	r2, [r6, #0]
    2a54:	f8da 7000 	ldr.w	r7, [sl]
    2a58:	fa4f f18b 	sxtb.w	r1, fp
    2a5c:	a808      	add	r0, sp, #32
    2a5e:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2a60:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2a62:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    2a66:	fa13 f389 	uxtah	r3, r3, r9
    2a6a:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2a6c:	7a31      	ldrb	r1, [r6, #8]
    2a6e:	4628      	mov	r0, r5
    2a70:	3101      	adds	r1, #1
    2a72:	f008 fbb6 	bl	b1e2 <net_buf_simple_pull>
    2a76:	9b07      	ldr	r3, [sp, #28]
    2a78:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2a7c:	fa5f f388 	uxtb.w	r3, r8
    2a80:	9307      	str	r3, [sp, #28]
    2a82:	e7bf      	b.n	2a04 <bt_recv+0x13c>
    2a84:	0000cbb3 	.word	0x0000cbb3
    2a88:	0000d49b 	.word	0x0000d49b
    2a8c:	0000d124 	.word	0x0000d124
    2a90:	0000d4ea 	.word	0x0000d4ea
    2a94:	0000d37d 	.word	0x0000d37d
    2a98:	20003240 	.word	0x20003240
    2a9c:	2000028c 	.word	0x2000028c
    2aa0:	200002cc 	.word	0x200002cc
    2aa4:	20000288 	.word	0x20000288
    2aa8:	0000d4e3 	.word	0x0000d4e3
    2aac:	0000d112 	.word	0x0000d112
    2ab0:	0000d2f2 	.word	0x0000d2f2
    2ab4:	0000d327 	.word	0x0000d327
    2ab8:	0000d1a3 	.word	0x0000d1a3
    2abc:	0000d359 	.word	0x0000d359
    2ac0:	200002d4 	.word	0x200002d4

00002ac4 <bt_recv_prio>:
{
    2ac4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2ac8:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2aca:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2acc:	2b01      	cmp	r3, #1
{
    2ace:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2ad0:	d00e      	beq.n	2af0 <bt_recv_prio+0x2c>
    2ad2:	4b32      	ldr	r3, [pc, #200]	; (2b9c <bt_recv_prio+0xd8>)
    2ad4:	9301      	str	r3, [sp, #4]
    2ad6:	9300      	str	r3, [sp, #0]
    2ad8:	4a31      	ldr	r2, [pc, #196]	; (2ba0 <bt_recv_prio+0xdc>)
    2ada:	4b32      	ldr	r3, [pc, #200]	; (2ba4 <bt_recv_prio+0xe0>)
    2adc:	4932      	ldr	r1, [pc, #200]	; (2ba8 <bt_recv_prio+0xe4>)
    2ade:	4833      	ldr	r0, [pc, #204]	; (2bac <bt_recv_prio+0xe8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2ae0:	f7fe f9c4 	bl	e6c <printk>
    2ae4:	4040      	eors	r0, r0
    2ae6:	f380 8811 	msr	BASEPRI, r0
    2aea:	f04f 0004 	mov.w	r0, #4
    2aee:	df02      	svc	2
    2af0:	8983      	ldrh	r3, [r0, #12]
    2af2:	2b01      	cmp	r3, #1
    2af4:	d807      	bhi.n	2b06 <bt_recv_prio+0x42>
    2af6:	4b29      	ldr	r3, [pc, #164]	; (2b9c <bt_recv_prio+0xd8>)
    2af8:	9301      	str	r3, [sp, #4]
    2afa:	9300      	str	r3, [sp, #0]
    2afc:	4a28      	ldr	r2, [pc, #160]	; (2ba0 <bt_recv_prio+0xdc>)
    2afe:	4b29      	ldr	r3, [pc, #164]	; (2ba4 <bt_recv_prio+0xe0>)
    2b00:	4929      	ldr	r1, [pc, #164]	; (2ba8 <bt_recv_prio+0xe4>)
    2b02:	482b      	ldr	r0, [pc, #172]	; (2bb0 <bt_recv_prio+0xec>)
    2b04:	e7ec      	b.n	2ae0 <bt_recv_prio+0x1c>
    2b06:	7833      	ldrb	r3, [r6, #0]
    2b08:	3b0e      	subs	r3, #14
    2b0a:	2b01      	cmp	r3, #1
    2b0c:	d83e      	bhi.n	2b8c <bt_recv_prio+0xc8>
	net_buf_pull(buf, sizeof(*hdr));
    2b0e:	f100 0508 	add.w	r5, r0, #8
    2b12:	2102      	movs	r1, #2
    2b14:	4628      	mov	r0, r5
    2b16:	f008 fb64 	bl	b1e2 <net_buf_simple_pull>
	switch (hdr->evt) {
    2b1a:	7833      	ldrb	r3, [r6, #0]
    2b1c:	2b0e      	cmp	r3, #14
    2b1e:	d00c      	beq.n	2b3a <bt_recv_prio+0x76>
    2b20:	2b0f      	cmp	r3, #15
    2b22:	d023      	beq.n	2b6c <bt_recv_prio+0xa8>
		net_buf_unref(buf);
    2b24:	4620      	mov	r0, r4
    2b26:	f008 fb13 	bl	b150 <net_buf_unref>
		BT_ASSERT(0);
    2b2a:	4b1c      	ldr	r3, [pc, #112]	; (2b9c <bt_recv_prio+0xd8>)
    2b2c:	9301      	str	r3, [sp, #4]
    2b2e:	9300      	str	r3, [sp, #0]
    2b30:	4a1b      	ldr	r2, [pc, #108]	; (2ba0 <bt_recv_prio+0xdc>)
    2b32:	4b1c      	ldr	r3, [pc, #112]	; (2ba4 <bt_recv_prio+0xe0>)
    2b34:	491c      	ldr	r1, [pc, #112]	; (2ba8 <bt_recv_prio+0xe4>)
    2b36:	481f      	ldr	r0, [pc, #124]	; (2bb4 <bt_recv_prio+0xf0>)
    2b38:	e7d2      	b.n	2ae0 <bt_recv_prio+0x1c>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    2b3a:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2b3c:	2103      	movs	r1, #3
    2b3e:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2b40:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    2b44:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2b46:	f008 fb4c 	bl	b1e2 <net_buf_simple_pull>
	status = buf->data[0];
    2b4a:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    2b4c:	4622      	mov	r2, r4
    2b4e:	7819      	ldrb	r1, [r3, #0]
    2b50:	4638      	mov	r0, r7
    2b52:	f7ff f8f1 	bl	1d38 <hci_cmd_done>
	if (ncmd) {
    2b56:	b116      	cbz	r6, 2b5e <bt_recv_prio+0x9a>
    2b58:	4817      	ldr	r0, [pc, #92]	; (2bb8 <bt_recv_prio+0xf4>)
    2b5a:	f009 fb92 	bl	c282 <_impl_k_sem_give>
	net_buf_unref(buf);
    2b5e:	4620      	mov	r0, r4
    2b60:	f008 faf6 	bl	b150 <net_buf_unref>
}
    2b64:	2000      	movs	r0, #0
    2b66:	b002      	add	sp, #8
    2b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2b6c:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2b6e:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    2b72:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    2b74:	2104      	movs	r1, #4
    2b76:	4628      	mov	r0, r5
    2b78:	f008 fb33 	bl	b1e2 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    2b7c:	4622      	mov	r2, r4
    2b7e:	7831      	ldrb	r1, [r6, #0]
    2b80:	4640      	mov	r0, r8
    2b82:	f7ff f8d9 	bl	1d38 <hci_cmd_done>
	if (ncmd) {
    2b86:	2f00      	cmp	r7, #0
    2b88:	d0e9      	beq.n	2b5e <bt_recv_prio+0x9a>
    2b8a:	e7e5      	b.n	2b58 <bt_recv_prio+0x94>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2b8c:	4b03      	ldr	r3, [pc, #12]	; (2b9c <bt_recv_prio+0xd8>)
    2b8e:	9301      	str	r3, [sp, #4]
    2b90:	9300      	str	r3, [sp, #0]
    2b92:	4a03      	ldr	r2, [pc, #12]	; (2ba0 <bt_recv_prio+0xdc>)
    2b94:	4b03      	ldr	r3, [pc, #12]	; (2ba4 <bt_recv_prio+0xe0>)
    2b96:	4904      	ldr	r1, [pc, #16]	; (2ba8 <bt_recv_prio+0xe4>)
    2b98:	4808      	ldr	r0, [pc, #32]	; (2bbc <bt_recv_prio+0xf8>)
    2b9a:	e7a1      	b.n	2ae0 <bt_recv_prio+0x1c>
    2b9c:	0000cbb3 	.word	0x0000cbb3
    2ba0:	0000d49b 	.word	0x0000d49b
    2ba4:	0000d1ab 	.word	0x0000d1ab
    2ba8:	0000d4ea 	.word	0x0000d4ea
    2bac:	0000d3bc 	.word	0x0000d3bc
    2bb0:	0000d400 	.word	0x0000d400
    2bb4:	0000d43a 	.word	0x0000d43a
    2bb8:	20003258 	.word	0x20003258
    2bbc:	0000d45d 	.word	0x0000d45d

00002bc0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2bc0:	4a08      	ldr	r2, [pc, #32]	; (2be4 <bt_hci_driver_register+0x24>)
    2bc2:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    2bc6:	b93b      	cbnz	r3, 2bd8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2bc8:	68c1      	ldr	r1, [r0, #12]
    2bca:	b141      	cbz	r1, 2bde <bt_hci_driver_register+0x1e>
    2bcc:	6901      	ldr	r1, [r0, #16]
    2bce:	b131      	cbz	r1, 2bde <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2bd0:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
	return 0;
    2bd4:	4618      	mov	r0, r3
    2bd6:	4770      	bx	lr
		return -EALREADY;
    2bd8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2bdc:	4770      	bx	lr
		return -EINVAL;
    2bde:	f06f 0015 	mvn.w	r0, #21
}
    2be2:	4770      	bx	lr
    2be4:	200031d0 	.word	0x200031d0

00002be8 <bt_enable>:
{
    2be8:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    2bea:	4d2e      	ldr	r5, [pc, #184]	; (2ca4 <bt_enable+0xbc>)
    2bec:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
{
    2bf0:	b086      	sub	sp, #24
    2bf2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    2bf4:	b96b      	cbnz	r3, 2c12 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    2bf6:	4b2c      	ldr	r3, [pc, #176]	; (2ca8 <bt_enable+0xc0>)
    2bf8:	9301      	str	r3, [sp, #4]
    2bfa:	9300      	str	r3, [sp, #0]
    2bfc:	4a2b      	ldr	r2, [pc, #172]	; (2cac <bt_enable+0xc4>)
    2bfe:	4b2c      	ldr	r3, [pc, #176]	; (2cb0 <bt_enable+0xc8>)
    2c00:	492c      	ldr	r1, [pc, #176]	; (2cb4 <bt_enable+0xcc>)
    2c02:	482d      	ldr	r0, [pc, #180]	; (2cb8 <bt_enable+0xd0>)
    2c04:	f7fe f932 	bl	e6c <printk>
		return -ENODEV;
    2c08:	f06f 0412 	mvn.w	r4, #18
}
    2c0c:	4620      	mov	r0, r4
    2c0e:	b006      	add	sp, #24
    2c10:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c12:	2101      	movs	r1, #1
    2c14:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2c18:	f7ff f86c 	bl	1cf4 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    2c1c:	f010 0001 	ands.w	r0, r0, #1
    2c20:	d13d      	bne.n	2c9e <bt_enable+0xb6>
	ready_cb = cb;
    2c22:	4b26      	ldr	r3, [pc, #152]	; (2cbc <bt_enable+0xd4>)

    2c24:	4926      	ldr	r1, [pc, #152]	; (2cc0 <bt_enable+0xd8>)
    2c26:	601e      	str	r6, [r3, #0]
    2c28:	f06f 0308 	mvn.w	r3, #8
    2c2c:	9005      	str	r0, [sp, #20]
    2c2e:	9004      	str	r0, [sp, #16]
    2c30:	9303      	str	r3, [sp, #12]
    2c32:	9002      	str	r0, [sp, #8]
    2c34:	9001      	str	r0, [sp, #4]
    2c36:	9000      	str	r0, [sp, #0]
    2c38:	4b22      	ldr	r3, [pc, #136]	; (2cc4 <bt_enable+0xdc>)
    2c3a:	4823      	ldr	r0, [pc, #140]	; (2cc8 <bt_enable+0xe0>)
    2c3c:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    2c40:	f009 fd0e 	bl	c660 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    2c44:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    2c48:	68db      	ldr	r3, [r3, #12]
    2c4a:	4798      	blx	r3
	if (err) {
    2c4c:	4604      	mov	r4, r0
    2c4e:	b150      	cbz	r0, 2c66 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    2c50:	4b15      	ldr	r3, [pc, #84]	; (2ca8 <bt_enable+0xc0>)
    2c52:	9302      	str	r3, [sp, #8]
    2c54:	e88d 0018 	stmia.w	sp, {r3, r4}
    2c58:	4a14      	ldr	r2, [pc, #80]	; (2cac <bt_enable+0xc4>)
    2c5a:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <bt_enable+0xc8>)
    2c5c:	4915      	ldr	r1, [pc, #84]	; (2cb4 <bt_enable+0xcc>)
    2c5e:	481b      	ldr	r0, [pc, #108]	; (2ccc <bt_enable+0xe4>)
    2c60:	f7fe f904 	bl	e6c <printk>
		return err;
    2c64:	e7d2      	b.n	2c0c <bt_enable+0x24>
	if (!cb) {
    2c66:	b96e      	cbnz	r6, 2c84 <bt_enable+0x9c>
	err = hci_init();
    2c68:	f7ff faa6 	bl	21b8 <hci_init>
	if (err) {
    2c6c:	4604      	mov	r4, r0
    2c6e:	2800      	cmp	r0, #0
    2c70:	d1cc      	bne.n	2c0c <bt_enable+0x24>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c72:	2102      	movs	r1, #2
    2c74:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2c78:	f7ff f83c 	bl	1cf4 <atomic_or>
	bt_le_scan_update(false);
    2c7c:	4620      	mov	r0, r4
    2c7e:	f7ff f9fd 	bl	207c <bt_le_scan_update>
    2c82:	e7c3      	b.n	2c0c <bt_enable+0x24>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c84:	2101      	movs	r1, #1
    2c86:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2c8a:	f7ff f833 	bl	1cf4 <atomic_or>
 * @req K-WORK-001
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2c8e:	07c3      	lsls	r3, r0, #31
    2c90:	d4bc      	bmi.n	2c0c <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    2c92:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2c96:	480e      	ldr	r0, [pc, #56]	; (2cd0 <bt_enable+0xe8>)
    2c98:	f009 f806 	bl	bca8 <k_queue_append>
    2c9c:	e7b6      	b.n	2c0c <bt_enable+0x24>
		return -EALREADY;
    2c9e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2ca2:	e7b3      	b.n	2c0c <bt_enable+0x24>
    2ca4:	200031d0 	.word	0x200031d0
    2ca8:	0000cbb3 	.word	0x0000cbb3
    2cac:	0000d49b 	.word	0x0000d49b
    2cb0:	0000d1b8 	.word	0x0000d1b8
    2cb4:	0000d4ea 	.word	0x0000d4ea
    2cb8:	0000d26b 	.word	0x0000d26b
    2cbc:	200002d0 	.word	0x200002d0
    2cc0:	200012a0 	.word	0x200012a0
    2cc4:	00002771 	.word	0x00002771
    2cc8:	200002d8 	.word	0x200002d8
    2ccc:	0000d294 	.word	0x0000d294
    2cd0:	20001220 	.word	0x20001220

00002cd4 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    2cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2cd6:	461e      	mov	r6, r3
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2cd8:	7803      	ldrb	r3, [r0, #0]
    2cda:	f013 0f01 	tst.w	r3, #1
{
    2cde:	4605      	mov	r5, r0
    2ce0:	4614      	mov	r4, r2
    2ce2:	8843      	ldrh	r3, [r0, #2]
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2ce4:	d105      	bne.n	2cf2 <bt_le_adv_start+0x1e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2ce6:	4a53      	ldr	r2, [pc, #332]	; (2e34 <bt_le_adv_start+0x160>)
    2ce8:	7b92      	ldrb	r2, [r2, #14]
    2cea:	2a08      	cmp	r2, #8
    2cec:	d801      	bhi.n	2cf2 <bt_le_adv_start+0x1e>
    2cee:	2b9f      	cmp	r3, #159	; 0x9f
    2cf0:	d908      	bls.n	2d04 <bt_le_adv_start+0x30>
	if (param->interval_min > param->interval_max ||
    2cf2:	88a8      	ldrh	r0, [r5, #4]
    2cf4:	4283      	cmp	r3, r0
    2cf6:	d805      	bhi.n	2d04 <bt_le_adv_start+0x30>
    2cf8:	2b1f      	cmp	r3, #31
    2cfa:	d903      	bls.n	2d04 <bt_le_adv_start+0x30>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2cfc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    2d00:	f240 808e 	bls.w	2e20 <bt_le_adv_start+0x14c>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    2d04:	f06f 0415 	mvn.w	r4, #21
    2d08:	e03d      	b.n	2d86 <bt_le_adv_start+0xb2>

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    2d0a:	4622      	mov	r2, r4
    2d0c:	f242 0008 	movw	r0, #8200	; 0x2008
    2d10:	f7ff f968 	bl	1fe4 <set_ad>
	if (err) {
    2d14:	4604      	mov	r4, r0
    2d16:	2800      	cmp	r0, #0
    2d18:	d135      	bne.n	2d86 <bt_le_adv_start+0xb2>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2d1a:	bb5e      	cbnz	r6, 2d74 <bt_le_adv_start+0xa0>
    2d1c:	782b      	ldrb	r3, [r5, #0]
    2d1e:	07d8      	lsls	r0, r3, #31
    2d20:	d428      	bmi.n	2d74 <bt_le_adv_start+0xa0>
		if (err) {
			return err;
		}
	}

	memset(&set_param, 0, sizeof(set_param));
    2d22:	2100      	movs	r1, #0
    2d24:	220f      	movs	r2, #15
    2d26:	4668      	mov	r0, sp
    2d28:	f7fe fefc 	bl	1b24 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    2d2c:	886b      	ldrh	r3, [r5, #2]
    2d2e:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    2d32:	88ab      	ldrh	r3, [r5, #4]
    2d34:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    2d38:	2307      	movs	r3, #7
    2d3a:	f88d 300d 	strb.w	r3, [sp, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    2d3e:	782b      	ldrb	r3, [r5, #0]
    2d40:	07d9      	lsls	r1, r3, #31
    2d42:	d523      	bpl.n	2d8c <bt_le_adv_start+0xb8>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (atomic_test_bit(bt_dev.flags,
    2d44:	2002      	movs	r0, #2
    2d46:	f7ff f859 	bl	1dfc <atomic_test_bit.constprop.24>
    2d4a:	b110      	cbz	r0, 2d52 <bt_le_adv_start+0x7e>
					    BT_DEV_ID_STATIC_RANDOM)) {
				set_random_address(&bt_dev.id_addr.a);
    2d4c:	483a      	ldr	r0, [pc, #232]	; (2e38 <bt_le_adv_start+0x164>)
    2d4e:	f7ff f909 	bl	1f64 <set_random_address>
			}

			set_param.own_addr_type = bt_dev.id_addr.type;
    2d52:	4b38      	ldr	r3, [pc, #224]	; (2e34 <bt_le_adv_start+0x160>)
    2d54:	781b      	ldrb	r3, [r3, #0]
    2d56:	f88d 3005 	strb.w	r3, [sp, #5]
		}

		set_param.type = BT_LE_ADV_IND;
    2d5a:	2300      	movs	r3, #0
		} else {
			set_param.type = BT_LE_ADV_NONCONN_IND;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    2d5c:	210f      	movs	r1, #15
    2d5e:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    2d62:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    2d66:	f7ff f85b 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    2d6a:	4604      	mov	r4, r0
    2d6c:	bb48      	cbnz	r0, 2dc2 <bt_le_adv_start+0xee>
		return -ENOBUFS;
    2d6e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2d72:	e008      	b.n	2d86 <bt_le_adv_start+0xb2>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    2d74:	9a08      	ldr	r2, [sp, #32]
    2d76:	4631      	mov	r1, r6
    2d78:	f242 0009 	movw	r0, #8201	; 0x2009
    2d7c:	f7ff f932 	bl	1fe4 <set_ad>
		if (err) {
    2d80:	4604      	mov	r4, r0
    2d82:	2800      	cmp	r0, #0
    2d84:	d0cd      	beq.n	2d22 <bt_le_adv_start+0x4e>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    2d86:	4620      	mov	r0, r4
    2d88:	b004      	add	sp, #16
    2d8a:	bd70      	pop	{r4, r5, r6, pc}
		if (param->options & BT_LE_ADV_OPT_USE_IDENTITY) {
    2d8c:	075a      	lsls	r2, r3, #29
    2d8e:	d511      	bpl.n	2db4 <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    2d90:	2002      	movs	r0, #2
    2d92:	f7ff f833 	bl	1dfc <atomic_test_bit.constprop.24>
    2d96:	4604      	mov	r4, r0
    2d98:	b118      	cbz	r0, 2da2 <bt_le_adv_start+0xce>
				err = set_random_address(&bt_dev.id_addr.a);
    2d9a:	4827      	ldr	r0, [pc, #156]	; (2e38 <bt_le_adv_start+0x164>)
    2d9c:	f7ff f8e2 	bl	1f64 <set_random_address>
    2da0:	4604      	mov	r4, r0
			set_param.own_addr_type = bt_dev.id_addr.type;
    2da2:	4b24      	ldr	r3, [pc, #144]	; (2e34 <bt_le_adv_start+0x160>)
    2da4:	781b      	ldrb	r3, [r3, #0]
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    2da6:	f88d 3005 	strb.w	r3, [sp, #5]
		if (err) {
    2daa:	2c00      	cmp	r4, #0
    2dac:	d1eb      	bne.n	2d86 <bt_le_adv_start+0xb2>
		if (sd) {
    2dae:	b136      	cbz	r6, 2dbe <bt_le_adv_start+0xea>
			set_param.type = BT_LE_ADV_SCAN_IND;
    2db0:	2302      	movs	r3, #2
    2db2:	e7d3      	b.n	2d5c <bt_le_adv_start+0x88>
			err = le_set_private_addr();
    2db4:	f7ff f904 	bl	1fc0 <le_set_private_addr>
			set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    2db8:	2301      	movs	r3, #1
			err = le_set_private_addr();
    2dba:	4604      	mov	r4, r0
    2dbc:	e7f3      	b.n	2da6 <bt_le_adv_start+0xd2>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    2dbe:	2303      	movs	r3, #3
    2dc0:	e7cc      	b.n	2d5c <bt_le_adv_start+0x88>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2dc2:	220f      	movs	r2, #15
    2dc4:	4669      	mov	r1, sp
    2dc6:	3008      	adds	r0, #8
    2dc8:	f008 f9fa 	bl	b1c0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    2dcc:	4621      	mov	r1, r4
    2dce:	2200      	movs	r2, #0
    2dd0:	f242 0006 	movw	r0, #8198	; 0x2006
    2dd4:	f7ff f854 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2dd8:	4604      	mov	r4, r0
    2dda:	2800      	cmp	r0, #0
    2ddc:	d1d3      	bne.n	2d86 <bt_le_adv_start+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2dde:	2101      	movs	r1, #1
    2de0:	f242 000a 	movw	r0, #8202	; 0x200a
    2de4:	f7ff f81c 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    2de8:	4606      	mov	r6, r0
    2dea:	2800      	cmp	r0, #0
    2dec:	d0bf      	beq.n	2d6e <bt_le_adv_start+0x9a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2dee:	2101      	movs	r1, #1
    2df0:	3008      	adds	r0, #8
    2df2:	f008 f9ee 	bl	b1d2 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2df6:	4622      	mov	r2, r4
    2df8:	4631      	mov	r1, r6
    2dfa:	f242 000a 	movw	r0, #8202	; 0x200a
    2dfe:	f7ff f83f 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2e02:	4604      	mov	r4, r0
    2e04:	2800      	cmp	r0, #0
    2e06:	d1be      	bne.n	2d86 <bt_le_adv_start+0xb2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e08:	2140      	movs	r1, #64	; 0x40
    2e0a:	480c      	ldr	r0, [pc, #48]	; (2e3c <bt_le_adv_start+0x168>)
    2e0c:	f7fe ff72 	bl	1cf4 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    2e10:	782b      	ldrb	r3, [r5, #0]
    2e12:	079b      	lsls	r3, r3, #30
    2e14:	d4b7      	bmi.n	2d86 <bt_le_adv_start+0xb2>
    2e16:	2180      	movs	r1, #128	; 0x80
    2e18:	4808      	ldr	r0, [pc, #32]	; (2e3c <bt_le_adv_start+0x168>)
    2e1a:	f7fe ff6b 	bl	1cf4 <atomic_or>
    2e1e:	e7b2      	b.n	2d86 <bt_le_adv_start+0xb2>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2e20:	2006      	movs	r0, #6
    2e22:	f7fe ffeb 	bl	1dfc <atomic_test_bit.constprop.24>
    2e26:	2800      	cmp	r0, #0
    2e28:	f43f af6f 	beq.w	2d0a <bt_le_adv_start+0x36>
		return -EALREADY;
    2e2c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2e30:	e7a9      	b.n	2d86 <bt_le_adv_start+0xb2>
    2e32:	bf00      	nop
    2e34:	200031d0 	.word	0x200031d0
    2e38:	200031d1 	.word	0x200031d1
    2e3c:	20003240 	.word	0x20003240

00002e40 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    2e40:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e42:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2e46:	4819      	ldr	r0, [pc, #100]	; (2eac <bt_le_adv_stop+0x6c>)
    2e48:	f7fe ff65 	bl	1d16 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2e4c:	2006      	movs	r0, #6
    2e4e:	f7fe ffd5 	bl	1dfc <atomic_test_bit.constprop.24>
    2e52:	b910      	cbnz	r0, 2e5a <bt_le_adv_stop+0x1a>
		return 0;
    2e54:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    2e56:	4620      	mov	r0, r4
    2e58:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2e5a:	2101      	movs	r1, #1
    2e5c:	f242 000a 	movw	r0, #8202	; 0x200a
    2e60:	f7fe ffde 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    2e64:	4604      	mov	r4, r0
    2e66:	b1f0      	cbz	r0, 2ea6 <bt_le_adv_stop+0x66>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2e68:	2100      	movs	r1, #0
    2e6a:	3008      	adds	r0, #8
    2e6c:	f008 f9b1 	bl	b1d2 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2e70:	4621      	mov	r1, r4
    2e72:	2200      	movs	r2, #0
    2e74:	f242 000a 	movw	r0, #8202	; 0x200a
    2e78:	f7ff f802 	bl	1e80 <bt_hci_cmd_send_sync>
	if (err) {
    2e7c:	4604      	mov	r4, r0
    2e7e:	2800      	cmp	r0, #0
    2e80:	d1e9      	bne.n	2e56 <bt_le_adv_stop+0x16>
    2e82:	f06f 0140 	mvn.w	r1, #64	; 0x40
    2e86:	4809      	ldr	r0, [pc, #36]	; (2eac <bt_le_adv_stop+0x6c>)
    2e88:	f7fe ff45 	bl	1d16 <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2e8c:	2008      	movs	r0, #8
    2e8e:	f7fe ffb5 	bl	1dfc <atomic_test_bit.constprop.24>
    2e92:	2800      	cmp	r0, #0
    2e94:	d0de      	beq.n	2e54 <bt_le_adv_stop+0x14>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    2e96:	200a      	movs	r0, #10
    2e98:	f7fe ffb0 	bl	1dfc <atomic_test_bit.constprop.24>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    2e9c:	2800      	cmp	r0, #0
    2e9e:	d0d9      	beq.n	2e54 <bt_le_adv_stop+0x14>
			le_set_private_addr();
    2ea0:	f7ff f88e 	bl	1fc0 <le_set_private_addr>
    2ea4:	e7d7      	b.n	2e56 <bt_le_adv_stop+0x16>
		return -ENOBUFS;
    2ea6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2eaa:	e7d4      	b.n	2e56 <bt_le_adv_stop+0x16>
    2eac:	20003240 	.word	0x20003240

00002eb0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    2eb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    2eb4:	7803      	ldrb	r3, [r0, #0]
    2eb6:	2b01      	cmp	r3, #1
{
    2eb8:	4605      	mov	r5, r0
    2eba:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    2ebc:	d810      	bhi.n	2ee0 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    2ebe:	7843      	ldrb	r3, [r0, #1]
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	d80d      	bhi.n	2ee0 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    2ec4:	8841      	ldrh	r1, [r0, #2]
    2ec6:	1f0b      	subs	r3, r1, #4
    2ec8:	b29b      	uxth	r3, r3
    2eca:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    2ece:	4283      	cmp	r3, r0
    2ed0:	d806      	bhi.n	2ee0 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
    2ed2:	88aa      	ldrh	r2, [r5, #4]
    2ed4:	1f13      	subs	r3, r2, #4
    2ed6:	b29b      	uxth	r3, r3
    2ed8:	4283      	cmp	r3, r0
    2eda:	d801      	bhi.n	2ee0 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
    2edc:	4291      	cmp	r1, r2
    2ede:	d26c      	bcs.n	2fba <bt_le_scan_start+0x10a>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    2ee0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    2ee4:	4620      	mov	r0, r4
    2ee6:	b002      	add	sp, #8
    2ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2eec:	2008      	movs	r0, #8
    2eee:	f7fe ff85 	bl	1dfc <atomic_test_bit.constprop.24>
    2ef2:	b150      	cbz	r0, 2f0a <bt_le_scan_start+0x5a>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2ef4:	4608      	mov	r0, r1
    2ef6:	f7ff f801 	bl	1efc <set_le_scan_enable>
		if (err) {
    2efa:	4604      	mov	r4, r0
    2efc:	b128      	cbz	r0, 2f0a <bt_le_scan_start+0x5a>
    2efe:	f46f 7100 	mvn.w	r1, #512	; 0x200
    2f02:	4835      	ldr	r0, [pc, #212]	; (2fd8 <bt_le_scan_start+0x128>)
    2f04:	f7fe ff07 	bl	1d16 <atomic_and>
		return err;
    2f08:	e7ec      	b.n	2ee4 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
    2f0a:	786b      	ldrb	r3, [r5, #1]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d048      	beq.n	2fa2 <bt_le_scan_start+0xf2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2f14:	4830      	ldr	r0, [pc, #192]	; (2fd8 <bt_le_scan_start+0x128>)
    2f16:	f7fe feed 	bl	1cf4 <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
    2f1a:	2207      	movs	r2, #7
    2f1c:	2100      	movs	r1, #0
    2f1e:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    2f20:	782e      	ldrb	r6, [r5, #0]
    2f22:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    2f26:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
    2f28:	f7fe fdfc 	bl	1b24 <memset>
	set_param.filter_policy = 0x00;
    2f2c:	2300      	movs	r3, #0
    2f2e:	f88d 3006 	strb.w	r3, [sp, #6]
		set_param.addr_type =  bt_dev.id_addr.type;
    2f32:	4b2a      	ldr	r3, [pc, #168]	; (2fdc <bt_le_scan_start+0x12c>)
	set_param.scan_type = scan_type;
    2f34:	f88d 6000 	strb.w	r6, [sp]
		set_param.addr_type =  bt_dev.id_addr.type;
    2f38:	781b      	ldrb	r3, [r3, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2f3a:	f8ad 8001 	strh.w	r8, [sp, #1]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2f3e:	2e01      	cmp	r6, #1
	set_param.window = sys_cpu_to_le16(window);
    2f40:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2f44:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2f48:	d10a      	bne.n	2f60 <bt_le_scan_start+0xb0>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2f4a:	2006      	movs	r0, #6
    2f4c:	f7fe ff56 	bl	1dfc <atomic_test_bit.constprop.24>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2f50:	b930      	cbnz	r0, 2f60 <bt_le_scan_start+0xb0>
			err = le_set_private_addr();
    2f52:	f7ff f835 	bl	1fc0 <le_set_private_addr>
			if (err) {
    2f56:	4604      	mov	r4, r0
    2f58:	2800      	cmp	r0, #0
    2f5a:	d1d0      	bne.n	2efe <bt_le_scan_start+0x4e>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2f5c:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2f60:	2107      	movs	r1, #7
    2f62:	f242 000b 	movw	r0, #8203	; 0x200b
    2f66:	f7fe ff5b 	bl	1e20 <bt_hci_cmd_create>
	if (!buf) {
    2f6a:	4604      	mov	r4, r0
    2f6c:	b380      	cbz	r0, 2fd0 <bt_le_scan_start+0x120>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2f6e:	2207      	movs	r2, #7
    2f70:	4669      	mov	r1, sp
    2f72:	3008      	adds	r0, #8
    2f74:	f008 f924 	bl	b1c0 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2f78:	4621      	mov	r1, r4
    2f7a:	f242 000b 	movw	r0, #8203	; 0x200b
    2f7e:	f7ff fbbf 	bl	2700 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2f82:	2001      	movs	r0, #1
    2f84:	f7fe ffba 	bl	1efc <set_le_scan_enable>
	if (err) {
    2f88:	4604      	mov	r4, r0
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d1b7      	bne.n	2efe <bt_le_scan_start+0x4e>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2f8e:	2e01      	cmp	r6, #1
    2f90:	d10d      	bne.n	2fae <bt_le_scan_start+0xfe>
    2f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2f96:	4810      	ldr	r0, [pc, #64]	; (2fd8 <bt_le_scan_start+0x128>)
    2f98:	f7fe feac 	bl	1cf4 <atomic_or>
	scan_dev_found_cb = cb;
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <bt_le_scan_start+0x130>)
    2f9e:	601f      	str	r7, [r3, #0]
	return 0;
    2fa0:	e7a0      	b.n	2ee4 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2fa2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    2fa6:	480c      	ldr	r0, [pc, #48]	; (2fd8 <bt_le_scan_start+0x128>)
    2fa8:	f7fe feb5 	bl	1d16 <atomic_and>
    2fac:	e7b5      	b.n	2f1a <bt_le_scan_start+0x6a>
    2fae:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2fb2:	4809      	ldr	r0, [pc, #36]	; (2fd8 <bt_le_scan_start+0x128>)
    2fb4:	f7fe feaf 	bl	1d16 <atomic_and>
    2fb8:	e7f0      	b.n	2f9c <bt_le_scan_start+0xec>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2fba:	f44f 7100 	mov.w	r1, #512	; 0x200
    2fbe:	4806      	ldr	r0, [pc, #24]	; (2fd8 <bt_le_scan_start+0x128>)
    2fc0:	f7fe fe98 	bl	1cf4 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2fc4:	f410 7100 	ands.w	r1, r0, #512	; 0x200
    2fc8:	d090      	beq.n	2eec <bt_le_scan_start+0x3c>
		return -EALREADY;
    2fca:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2fce:	e789      	b.n	2ee4 <bt_le_scan_start+0x34>
		return -ENOBUFS;
    2fd0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2fd4:	e793      	b.n	2efe <bt_le_scan_start+0x4e>
    2fd6:	bf00      	nop
    2fd8:	20003240 	.word	0x20003240
    2fdc:	200031d0 	.word	0x200031d0
    2fe0:	200002d4 	.word	0x200002d4

00002fe4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2fe4:	b538      	push	{r3, r4, r5, lr}
    2fe6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2fe8:	4805      	ldr	r0, [pc, #20]	; (3000 <bt_buf_get_rx+0x1c>)
    2fea:	f008 f881 	bl	b0f0 <net_buf_alloc_fixed>
#endif

	if (buf) {
    2fee:	4604      	mov	r4, r0
    2ff0:	b120      	cbz	r0, 2ffc <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2ff2:	2100      	movs	r1, #0
    2ff4:	3008      	adds	r0, #8
    2ff6:	f008 f89a 	bl	b12e <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    2ffa:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2ffc:	4620      	mov	r0, r4
    2ffe:	bd38      	pop	{r3, r4, r5, pc}
    3000:	200034f4 	.word	0x200034f4

00003004 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3004:	b510      	push	{r4, lr}
    3006:	4601      	mov	r1, r0
	__asm__ volatile(
    3008:	f04f 0320 	mov.w	r3, #32
    300c:	f3ef 8011 	mrs	r0, BASEPRI
    3010:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3014:	4a0b      	ldr	r2, [pc, #44]	; (3044 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    3016:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3018:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    301c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3020:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3024:	b924      	cbnz	r4, 3030 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3026:	2001      	movs	r0, #1
}
    3028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    302c:	f7ff bfda 	b.w	2fe4 <bt_buf_get_rx>
    3030:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3032:	f104 0008 	add.w	r0, r4, #8
    3036:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3038:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    303a:	4619      	mov	r1, r3
    303c:	f008 f877 	bl	b12e <net_buf_simple_reserve>
}
    3040:	4620      	mov	r0, r4
    3042:	bd10      	pop	{r4, pc}
    3044:	200031d0 	.word	0x200031d0

00003048 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    304a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    304c:	1dc3      	adds	r3, r0, #7
{
    304e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3050:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3054:	1e50      	subs	r0, r2, #1
{
    3056:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3058:	b280      	uxth	r0, r0
{
    305a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    305c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    305e:	2100      	movs	r1, #0
    3060:	2204      	movs	r2, #4
    3062:	fb06 5000 	mla	r0, r6, r0, r5
    3066:	f7fe fd5d 	bl	1b24 <memset>
    306a:	3c02      	subs	r4, #2
    306c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    306e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3072:	42bc      	cmp	r4, r7
    3074:	d101      	bne.n	307a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    3076:	b003      	add	sp, #12
    3078:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    307a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    307e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3080:	2204      	movs	r2, #4
    3082:	1b80      	subs	r0, r0, r6
    3084:	eb0d 0102 	add.w	r1, sp, r2
    3088:	4428      	add	r0, r5
    308a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    308c:	9301      	str	r3, [sp, #4]
    308e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3090:	f7fe fd1c 	bl	1acc <memcpy>
    3094:	e7ed      	b.n	3072 <mem_init+0x2a>

00003096 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    3096:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    3098:	6805      	ldr	r5, [r0, #0]
{
    309a:	4606      	mov	r6, r0
	if (*mem_head) {
    309c:	b195      	cbz	r5, 30c4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    309e:	1deb      	adds	r3, r5, #7
    30a0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    30a4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    30a6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    30a8:	4629      	mov	r1, r5
    30aa:	eb0d 0002 	add.w	r0, sp, r2
    30ae:	f7fe fd0d 	bl	1acc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    30b2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    30b4:	3c01      	subs	r4, #1
    30b6:	b2a4      	uxth	r4, r4
		if (head) {
    30b8:	b11b      	cbz	r3, 30c2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    30ba:	1dda      	adds	r2, r3, #7
    30bc:	f022 0203 	bic.w	r2, r2, #3
    30c0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    30c2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    30c4:	4628      	mov	r0, r5
    30c6:	b002      	add	sp, #8
    30c8:	bd70      	pop	{r4, r5, r6, pc}

000030ca <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    30ca:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    30cc:	680c      	ldr	r4, [r1, #0]
{
    30ce:	4606      	mov	r6, r0
    30d0:	460d      	mov	r5, r1
	if (*mem_head) {
    30d2:	b11c      	cbz	r4, 30dc <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    30d4:	1de3      	adds	r3, r4, #7
    30d6:	f023 0303 	bic.w	r3, r3, #3
    30da:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    30dc:	2204      	movs	r2, #4
    30de:	4629      	mov	r1, r5
    30e0:	4630      	mov	r0, r6
    30e2:	f7fe fcf3 	bl	1acc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    30e6:	1df2      	adds	r2, r6, #7
    30e8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    30ec:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    30ee:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    30f0:	602e      	str	r6, [r5, #0]
    30f2:	bd70      	pop	{r4, r5, r6, pc}

000030f4 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    30f4:	fb02 0001 	mla	r0, r2, r1, r0
    30f8:	4770      	bx	lr

000030fa <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    30fa:	1a40      	subs	r0, r0, r1
    30fc:	b280      	uxth	r0, r0
}
    30fe:	fbb0 f0f2 	udiv	r0, r0, r2
    3102:	4770      	bx	lr

00003104 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    3104:	b510      	push	{r4, lr}
	src += len;
    3106:	4411      	add	r1, r2
    3108:	3801      	subs	r0, #1
	while (len--) {
    310a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    310e:	3a01      	subs	r2, #1
    3110:	b292      	uxth	r2, r2
    3112:	429a      	cmp	r2, r3
    3114:	d100      	bne.n	3118 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3116:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3118:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    311c:	f800 4f01 	strb.w	r4, [r0, #1]!
    3120:	e7f5      	b.n	310e <mem_rcopy+0xa>

00003122 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    3122:	6010      	str	r0, [r2, #0]
    3124:	6008      	str	r0, [r1, #0]

	return link;
}
    3126:	4770      	bx	lr

00003128 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3128:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    312a:	6814      	ldr	r4, [r2, #0]
    312c:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    312e:	6814      	ldr	r4, [r2, #0]
    3130:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    3132:	6010      	str	r0, [r2, #0]

	return link;
}
    3134:	bd10      	pop	{r4, pc}

00003136 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3136:	4288      	cmp	r0, r1
    3138:	d003      	beq.n	3142 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    313a:	b11a      	cbz	r2, 3144 <memq_peek+0xe>
		*mem = head->mem;
    313c:	6843      	ldr	r3, [r0, #4]
    313e:	6013      	str	r3, [r2, #0]
    3140:	4770      	bx	lr
		return NULL;
    3142:	2000      	movs	r0, #0
	}

	return head;
}
    3144:	4770      	bx	lr

00003146 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3146:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3148:	4283      	cmp	r3, r0
    314a:	d009      	beq.n	3160 <memq_dequeue+0x1a>
	if (mem) {
    314c:	b122      	cbz	r2, 3158 <memq_dequeue+0x12>
		*mem = head->mem;
    314e:	6858      	ldr	r0, [r3, #4]
    3150:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3152:	681a      	ldr	r2, [r3, #0]
    3154:	600a      	str	r2, [r1, #0]

	return link;
    3156:	e001      	b.n	315c <memq_dequeue+0x16>
	if (!link) {
    3158:	2b00      	cmp	r3, #0
    315a:	d1fa      	bne.n	3152 <memq_dequeue+0xc>
}
    315c:	4618      	mov	r0, r3
    315e:	4770      	bx	lr
		return NULL;
    3160:	2300      	movs	r3, #0
    3162:	e7fb      	b.n	315c <memq_dequeue+0x16>

00003164 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    3164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3168:	4f11      	ldr	r7, [pc, #68]	; (31b0 <mayfly_init+0x4c>)
    316a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 31b4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    316e:	2604      	movs	r6, #4
	while (callee_id--) {
    3170:	3e01      	subs	r6, #1
    3172:	b2f6      	uxtb	r6, r6
    3174:	2eff      	cmp	r6, #255	; 0xff
    3176:	d019      	beq.n	31ac <mayfly_init+0x48>
    3178:	b233      	sxth	r3, r6
    317a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    317e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3182:	011d      	lsls	r5, r3, #4
    3184:	2404      	movs	r4, #4
    3186:	f04f 0a0c 	mov.w	sl, #12
    318a:	e00a      	b.n	31a2 <mayfly_init+0x3e>
    318c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    3190:	1d0a      	adds	r2, r1, #4
    3192:	eb04 0008 	add.w	r0, r4, r8
    3196:	443a      	add	r2, r7
    3198:	4439      	add	r1, r7
    319a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    319e:	f7ff ffc0 	bl	3122 <memq_init>
		while (caller_id--) {
    31a2:	3c01      	subs	r4, #1
    31a4:	b2e4      	uxtb	r4, r4
    31a6:	2cff      	cmp	r4, #255	; 0xff
    31a8:	d1f0      	bne.n	318c <mayfly_init+0x28>
    31aa:	e7e1      	b.n	3170 <mayfly_init+0xc>
    31ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31b0:	200003c8 	.word	0x200003c8
    31b4:	20000348 	.word	0x20000348

000031b8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    31b8:	b4f0      	push	{r4, r5, r6, r7}
    31ba:	4b12      	ldr	r3, [pc, #72]	; (3204 <mayfly_enable+0x4c>)
    31bc:	4605      	mov	r5, r0
    31be:	460f      	mov	r7, r1
    31c0:	260c      	movs	r6, #12
    31c2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    31c4:	b172      	cbz	r2, 31e4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    31c6:	4361      	muls	r1, r4
    31c8:	fb06 1400 	mla	r4, r6, r0, r1
    31cc:	4423      	add	r3, r4
    31ce:	7a59      	ldrb	r1, [r3, #9]
    31d0:	7a18      	ldrb	r0, [r3, #8]
    31d2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    31d4:	bf04      	itt	eq
    31d6:	3101      	addeq	r1, #1
    31d8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    31da:	4628      	mov	r0, r5
    31dc:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    31de:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    31e0:	f007 bde2 	b.w	ada8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    31e4:	434c      	muls	r4, r1
    31e6:	fb06 4400 	mla	r4, r6, r0, r4
    31ea:	4423      	add	r3, r4
    31ec:	7a9c      	ldrb	r4, [r3, #10]
    31ee:	7ada      	ldrb	r2, [r3, #11]
    31f0:	42a2      	cmp	r2, r4
    31f2:	d104      	bne.n	31fe <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    31f4:	3201      	adds	r2, #1
    31f6:	729a      	strb	r2, [r3, #10]
}
    31f8:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    31fa:	f007 be35 	b.w	ae68 <mayfly_pend>
}
    31fe:	bcf0      	pop	{r4, r5, r6, r7}
    3200:	4770      	bx	lr
    3202:	bf00      	nop
    3204:	200003c8 	.word	0x200003c8

00003208 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    320a:	4605      	mov	r5, r0
    320c:	460e      	mov	r6, r1
    320e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3210:	b18a      	cbz	r2, 3236 <mayfly_enqueue+0x2e>
    3212:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3214:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3216:	7820      	ldrb	r0, [r4, #0]
    3218:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    321a:	f010 0703 	ands.w	r7, r0, #3
    321e:	d029      	beq.n	3274 <mayfly_enqueue+0x6c>
		if (chain) {
    3220:	b303      	cbz	r3, 3264 <mayfly_enqueue+0x5c>
			if (state != 1) {
    3222:	2f01      	cmp	r7, #1
    3224:	d039      	beq.n	329a <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3226:	3201      	adds	r2, #1
    3228:	b2d2      	uxtb	r2, r2
    322a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    322c:	4631      	mov	r1, r6
    322e:	4628      	mov	r0, r5
    3230:	f007 fe1a 	bl	ae68 <mayfly_pend>
    3234:	e01c      	b.n	3270 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3236:	f007 fe05 	bl	ae44 <mayfly_prio_is_equal>
    323a:	2800      	cmp	r0, #0
    323c:	d0e9      	beq.n	3212 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    323e:	4631      	mov	r1, r6
    3240:	4628      	mov	r0, r5
    3242:	f007 fdd9 	bl	adf8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3246:	2800      	cmp	r0, #0
    3248:	d0e3      	beq.n	3212 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    324a:	2330      	movs	r3, #48	; 0x30
    324c:	220c      	movs	r2, #12
    324e:	4373      	muls	r3, r6
    3250:	fb02 3305 	mla	r3, r2, r5, r3
    3254:	4a12      	ldr	r2, [pc, #72]	; (32a0 <mayfly_enqueue+0x98>)
    3256:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3258:	7a93      	ldrb	r3, [r2, #10]
    325a:	7ad2      	ldrb	r2, [r2, #11]
    325c:	1a9b      	subs	r3, r3, r2
    325e:	bf18      	it	ne
    3260:	2301      	movne	r3, #1
    3262:	e7d7      	b.n	3214 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3264:	3202      	adds	r2, #2
    3266:	b2d2      	uxtb	r2, r2
    3268:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    326a:	68e3      	ldr	r3, [r4, #12]
    326c:	68a0      	ldr	r0, [r4, #8]
    326e:	4798      	blx	r3
		return 0;
    3270:	2000      	movs	r0, #0
    3272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    3274:	2b00      	cmp	r3, #0
    3276:	d0f8      	beq.n	326a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3278:	3201      	adds	r2, #1
    327a:	b2d2      	uxtb	r2, r2
    327c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    327e:	2304      	movs	r3, #4
    3280:	2230      	movs	r2, #48	; 0x30
    3282:	fb12 3206 	smlabb	r2, r2, r6, r3
    3286:	230c      	movs	r3, #12
    3288:	fb13 2305 	smlabb	r3, r3, r5, r2
    328c:	4a04      	ldr	r2, [pc, #16]	; (32a0 <mayfly_enqueue+0x98>)
    328e:	6860      	ldr	r0, [r4, #4]
    3290:	441a      	add	r2, r3
    3292:	4621      	mov	r1, r4
    3294:	f7ff ff48 	bl	3128 <memq_enqueue>
    3298:	e7c8      	b.n	322c <mayfly_enqueue+0x24>
			return 1;
    329a:	4638      	mov	r0, r7

	return 0;
}
    329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    329e:	bf00      	nop
    32a0:	200003c8 	.word	0x200003c8

000032a4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    32a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32a8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    32ac:	b089      	sub	sp, #36	; 0x24
    32ae:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    32b0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    32b4:	4e43      	ldr	r6, [pc, #268]	; (33c4 <mayfly_run+0x120>)
    32b6:	9304      	str	r3, [sp, #16]
{
    32b8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    32ba:	2404      	movs	r4, #4
	u8_t disable = 0;
    32bc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    32c0:	3c01      	subs	r4, #1
    32c2:	b2e4      	uxtb	r4, r4
    32c4:	2cff      	cmp	r4, #255	; 0xff
    32c6:	d10b      	bne.n	32e0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    32c8:	9b01      	ldr	r3, [sp, #4]
    32ca:	2b00      	cmp	r3, #0
    32cc:	d076      	beq.n	33bc <mayfly_run+0x118>
    32ce:	f1b8 0f00 	cmp.w	r8, #0
    32d2:	d173      	bne.n	33bc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    32d4:	4642      	mov	r2, r8
    32d6:	4629      	mov	r1, r5
    32d8:	4628      	mov	r0, r5
    32da:	f007 fd65 	bl	ada8 <mayfly_enable_cb>
    32de:	e06d      	b.n	33bc <mayfly_run+0x118>
		struct mayfly *m = 0;
    32e0:	f10d 0b20 	add.w	fp, sp, #32
    32e4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    32e6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    32e8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    32ec:	f04f 0930 	mov.w	r9, #48	; 0x30
    32f0:	fb07 f304 	mul.w	r3, r7, r4
    32f4:	fb09 3005 	mla	r0, r9, r5, r3
    32f8:	1831      	adds	r1, r6, r0
    32fa:	465a      	mov	r2, fp
    32fc:	6849      	ldr	r1, [r1, #4]
    32fe:	5830      	ldr	r0, [r6, r0]
    3300:	9302      	str	r3, [sp, #8]
    3302:	f7ff ff18 	bl	3136 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3306:	9b04      	ldr	r3, [sp, #16]
    3308:	fb17 3704 	smlabb	r7, r7, r4, r3
    330c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    330e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    3310:	9303      	str	r3, [sp, #12]
		while (link) {
    3312:	f1ba 0f00 	cmp.w	sl, #0
    3316:	d119      	bne.n	334c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    3318:	2230      	movs	r2, #48	; 0x30
    331a:	230c      	movs	r3, #12
    331c:	436a      	muls	r2, r5
    331e:	fb03 2204 	mla	r2, r3, r4, r2
    3322:	4432      	add	r2, r6
    3324:	7a91      	ldrb	r1, [r2, #10]
    3326:	7ad0      	ldrb	r0, [r2, #11]
    3328:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    332a:	bf1e      	ittt	ne
    332c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    332e:	2201      	movne	r2, #1
    3330:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    3332:	2230      	movs	r2, #48	; 0x30
    3334:	436a      	muls	r2, r5
    3336:	fb03 2304 	mla	r3, r3, r4, r2
    333a:	4433      	add	r3, r6
    333c:	7a1a      	ldrb	r2, [r3, #8]
    333e:	7a59      	ldrb	r1, [r3, #9]
    3340:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3342:	bf1c      	itt	ne
    3344:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    3346:	f04f 0801 	movne.w	r8, #1
    334a:	e7b9      	b.n	32c0 <mayfly_run+0x1c>
			req = m->_req;
    334c:	9b07      	ldr	r3, [sp, #28]
    334e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3350:	785a      	ldrb	r2, [r3, #1]
    3352:	1abf      	subs	r7, r7, r2
    3354:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    3358:	2f01      	cmp	r7, #1
    335a:	d104      	bne.n	3366 <mayfly_run+0xc2>
				m->_ack--;
    335c:	3a01      	subs	r2, #1
    335e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3360:	6898      	ldr	r0, [r3, #8]
    3362:	68da      	ldr	r2, [r3, #12]
    3364:	4790      	blx	r2
			req = m->_req;
    3366:	9a07      	ldr	r2, [sp, #28]
    3368:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    336a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    336c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    336e:	1a9a      	subs	r2, r3, r2
    3370:	f002 0203 	and.w	r2, r2, #3
    3374:	2a01      	cmp	r2, #1
    3376:	9305      	str	r3, [sp, #20]
    3378:	d00d      	beq.n	3396 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    337a:	9b02      	ldr	r3, [sp, #8]
    337c:	9903      	ldr	r1, [sp, #12]
    337e:	fb09 3005 	mla	r0, r9, r5, r3
    3382:	4430      	add	r0, r6
    3384:	2200      	movs	r2, #0
    3386:	6840      	ldr	r0, [r0, #4]
    3388:	f7ff fedd 	bl	3146 <memq_dequeue>
				m->_link = link;
    338c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    338e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    3390:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    3394:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    3396:	9b02      	ldr	r3, [sp, #8]
    3398:	fb09 3305 	mla	r3, r9, r5, r3
    339c:	18f1      	adds	r1, r6, r3
    339e:	465a      	mov	r2, fp
    33a0:	6849      	ldr	r1, [r1, #4]
    33a2:	58f0      	ldr	r0, [r6, r3]
    33a4:	f7ff fec7 	bl	3136 <memq_peek>
			if (state == 1) {
    33a8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    33aa:	4682      	mov	sl, r0
			if (state == 1) {
    33ac:	d1b1      	bne.n	3312 <mayfly_run+0x6e>
				if (caller_id || link) {
    33ae:	b90c      	cbnz	r4, 33b4 <mayfly_run+0x110>
    33b0:	2800      	cmp	r0, #0
    33b2:	d0b1      	beq.n	3318 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    33b4:	4629      	mov	r1, r5
    33b6:	4628      	mov	r0, r5
    33b8:	f007 fd56 	bl	ae68 <mayfly_pend>
	}
}
    33bc:	b009      	add	sp, #36	; 0x24
    33be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33c2:	bf00      	nop
    33c4:	200003c8 	.word	0x200003c8

000033c8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    33c8:	b510      	push	{r4, lr}
    33ca:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    33cc:	2000      	movs	r0, #0

	while (octets_len--) {
    33ce:	3901      	subs	r1, #1
    33d0:	b2c9      	uxtb	r1, r1
    33d2:	29ff      	cmp	r1, #255	; 0xff
    33d4:	d100      	bne.n	33d8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    33d6:	bd10      	pop	{r4, pc}
		bite = *octets;
    33d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    33dc:	2b00      	cmp	r3, #0
    33de:	d0f6      	beq.n	33ce <util_ones_count_get+0x6>
			bite &= (bite - 1);
    33e0:	1e5c      	subs	r4, r3, #1
			one_count++;
    33e2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    33e4:	4023      	ands	r3, r4
			one_count++;
    33e6:	b2c0      	uxtb	r0, r0
    33e8:	e7f8      	b.n	33dc <util_ones_count_get+0x14>

000033ea <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    33ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    33ec:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    33ee:	6805      	ldr	r5, [r0, #0]
	current = previous;
    33f0:	461a      	mov	r2, r3
	total = 0;
    33f2:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    33f4:	2aff      	cmp	r2, #255	; 0xff
    33f6:	d101      	bne.n	33fc <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    33f8:	2000      	movs	r0, #0
    33fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    33fc:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    3400:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    3402:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    3406:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    340a:	d004      	beq.n	3416 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    340c:	68b3      	ldr	r3, [r6, #8]
    340e:	441c      	add	r4, r3
		current = ticker_current->next;
    3410:	4613      	mov	r3, r2
    3412:	463a      	mov	r2, r7
    3414:	e7ee      	b.n	33f4 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    3416:	4293      	cmp	r3, r2
    3418:	d100      	bne.n	341c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    341a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    341c:	b21b      	sxth	r3, r3
    341e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3422:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    3424:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    3426:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    342a:	7833      	ldrb	r3, [r6, #0]
    342c:	2bff      	cmp	r3, #255	; 0xff
    342e:	d006      	beq.n	343e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    3430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3434:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3438:	689a      	ldr	r2, [r3, #8]
    343a:	4402      	add	r2, r0
    343c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    343e:	4420      	add	r0, r4
    3440:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003442 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3442:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3444:	1a55      	subs	r5, r2, r1
    3446:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    344a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    344c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    344e:	d109      	bne.n	3464 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3450:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    3454:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    3456:	42a2      	cmp	r2, r4
    3458:	d90e      	bls.n	3478 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    345a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    345c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    345e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3460:	6144      	str	r4, [r0, #20]
    3462:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3464:	1a8a      	subs	r2, r1, r2
    3466:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    346a:	4293      	cmp	r3, r2
    346c:	d901      	bls.n	3472 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    346e:	1a9a      	subs	r2, r3, r2
    3470:	e7f1      	b.n	3456 <ticks_to_expire_prep+0x14>
    3472:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3474:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    3476:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    3478:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    347a:	2200      	movs	r2, #0
    347c:	e7ef      	b.n	345e <ticks_to_expire_prep+0x1c>

0000347e <ticker_job_op_cb>:
{
    347e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3480:	2200      	movs	r2, #0
    3482:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    3486:	6259      	str	r1, [r3, #36]	; 0x24
{
    3488:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    348a:	b10a      	cbz	r2, 3490 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    348c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    348e:	4710      	bx	r2
    3490:	4770      	bx	lr

00003492 <ticker_worker>:
{
    3492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    3496:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    3498:	2301      	movs	r3, #1
{
    349a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    349c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    349e:	2d00      	cmp	r5, #0
    34a0:	d14c      	bne.n	353c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    34a2:	7f43      	ldrb	r3, [r0, #29]
    34a4:	2bff      	cmp	r3, #255	; 0xff
    34a6:	d102      	bne.n	34ae <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    34a8:	77c5      	strb	r5, [r0, #31]
		return;
    34aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    34ae:	f007 f823 	bl	a4f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    34b2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    34b4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    34b6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    34ba:	1bc7      	subs	r7, r0, r7
    34bc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    34c0:	2eff      	cmp	r6, #255	; 0xff
    34c2:	d006      	beq.n	34d2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    34c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    34c8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    34cc:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    34ce:	429f      	cmp	r7, r3
    34d0:	d218      	bcs.n	3504 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    34d2:	7aa2      	ldrb	r2, [r4, #10]
    34d4:	7ae3      	ldrb	r3, [r4, #11]
    34d6:	4293      	cmp	r3, r2
    34d8:	d105      	bne.n	34e6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    34da:	3301      	adds	r3, #1
    34dc:	b2db      	uxtb	r3, r3
			last = 0;
    34de:	2b02      	cmp	r3, #2
    34e0:	bf08      	it	eq
    34e2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    34e4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    34e6:	7ae3      	ldrb	r3, [r4, #11]
    34e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    34ec:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    34ee:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    34f0:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    34f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    34f4:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    34f6:	46ac      	mov	ip, r5
    34f8:	4623      	mov	r3, r4
    34fa:	2104      	movs	r1, #4
    34fc:	2003      	movs	r0, #3
}
    34fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3502:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3504:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3506:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3508:	788a      	ldrb	r2, [r1, #2]
    350a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    350c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3510:	1a9b      	subs	r3, r3, r2
    3512:	b2db      	uxtb	r3, r3
    3514:	2b01      	cmp	r3, #1
    3516:	d1d3      	bne.n	34c0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3518:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    351c:	3a01      	subs	r2, #1
    351e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3520:	f1b9 0f00 	cmp.w	r9, #0
    3524:	d0cc      	beq.n	34c0 <ticker_worker+0x2e>
					   ticks_expired -
    3526:	6948      	ldr	r0, [r1, #20]
    3528:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    352a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    352c:	1a28      	subs	r0, r5, r0
    352e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3530:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3534:	690b      	ldr	r3, [r1, #16]
    3536:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3538:	47c8      	blx	r9
    353a:	e7c1      	b.n	34c0 <ticker_worker+0x2e>
    353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003540 <ticker_job>:
{
    3540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3544:	7fc2      	ldrb	r2, [r0, #31]
{
    3546:	b095      	sub	sp, #84	; 0x54
    3548:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    354a:	2a00      	cmp	r2, #0
    354c:	f040 83be 	bne.w	3ccc <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    3550:	6943      	ldr	r3, [r0, #20]
    3552:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    3554:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3556:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3558:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    355a:	7ac0      	ldrb	r0, [r0, #11]
    355c:	4298      	cmp	r0, r3
    355e:	f000 808f 	beq.w	3680 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3562:	440b      	add	r3, r1
    3564:	b2db      	uxtb	r3, r3
			first = 0;
    3566:	2b02      	cmp	r3, #2
    3568:	bf08      	it	eq
    356a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    356c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3570:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3574:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    3576:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    357a:	9b07      	ldr	r3, [sp, #28]
    357c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    357e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3582:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3586:	f89b 301d 	ldrb.w	r3, [fp, #29]
    358a:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    358c:	f8db 3000 	ldr.w	r3, [fp]
    3590:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    3592:	f8db 3004 	ldr.w	r3, [fp, #4]
    3596:	930d      	str	r3, [sp, #52]	; 0x34
    3598:	f89b 3009 	ldrb.w	r3, [fp, #9]
    359c:	3b01      	subs	r3, #1
    359e:	b2db      	uxtb	r3, r3
    35a0:	9304      	str	r3, [sp, #16]
	pending = 0;
    35a2:	2300      	movs	r3, #0
    35a4:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    35a6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    35aa:	9b04      	ldr	r3, [sp, #16]
    35ac:	2bff      	cmp	r3, #255	; 0xff
    35ae:	d16a      	bne.n	3686 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    35b0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    35b4:	9a05      	ldr	r2, [sp, #20]
    35b6:	1a9b      	subs	r3, r3, r2
    35b8:	bf18      	it	ne
    35ba:	2301      	movne	r3, #1
    35bc:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    35be:	9b03      	ldr	r3, [sp, #12]
    35c0:	b1e3      	cbz	r3, 35fc <ticker_job+0xbc>
	node = &instance->node[0];
    35c2:	f8db 3000 	ldr.w	r3, [fp]
    35c6:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    35c8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    35cc:	f89b 601d 	ldrb.w	r6, [fp, #29]
    35d0:	2eff      	cmp	r6, #255	; 0xff
    35d2:	d00c      	beq.n	35ee <ticker_job+0xae>
		ticker = &node[id_expired];
    35d4:	b237      	sxth	r7, r6
    35d6:	9b06      	ldr	r3, [sp, #24]
    35d8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    35dc:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    35e0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    35e2:	4545      	cmp	r5, r8
    35e4:	f240 8136 	bls.w	3854 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    35e8:	eba5 0508 	sub.w	r5, r5, r8
    35ec:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    35ee:	9b04      	ldr	r3, [sp, #16]
    35f0:	9a03      	ldr	r2, [sp, #12]
    35f2:	9905      	ldr	r1, [sp, #20]
    35f4:	42b1      	cmp	r1, r6
    35f6:	bf18      	it	ne
    35f8:	4613      	movne	r3, r2
    35fa:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    35fc:	f8db 3000 	ldr.w	r3, [fp]
    3600:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    3602:	f8db 3004 	ldr.w	r3, [fp, #4]
    3606:	9312      	str	r3, [sp, #72]	; 0x48
    3608:	f89b 3009 	ldrb.w	r3, [fp, #9]
    360c:	3b01      	subs	r3, #1
    360e:	b2db      	uxtb	r3, r3
    3610:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    3612:	9b03      	ldr	r3, [sp, #12]
    3614:	2bff      	cmp	r3, #255	; 0xff
    3616:	f040 8170 	bne.w	38fa <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    361a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    361e:	9a05      	ldr	r2, [sp, #20]
    3620:	4293      	cmp	r3, r2
	if (!pending) {
    3622:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    3624:	f040 8349 	bne.w	3cba <ticker_job+0x77a>
	if (!pending) {
    3628:	b95b      	cbnz	r3, 3642 <ticker_job+0x102>
    362a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    362e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3632:	9303      	str	r3, [sp, #12]
    3634:	3c01      	subs	r4, #1
    3636:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3638:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    363c:	2cff      	cmp	r4, #255	; 0xff
    363e:	f040 82a0 	bne.w	3b82 <ticker_job+0x642>
	instance->job_guard = 0;
    3642:	2300      	movs	r3, #0
    3644:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3648:	9b04      	ldr	r3, [sp, #16]
    364a:	b14b      	cbz	r3, 3660 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    364c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3650:	2bff      	cmp	r3, #255	; 0xff
    3652:	f040 82e9 	bne.w	3c28 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3656:	f006 ff21 	bl	a49c <cntr_stop>
    365a:	b908      	cbnz	r0, 3660 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    365c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    3660:	f89b 301f 	ldrb.w	r3, [fp, #31]
    3664:	2b00      	cmp	r3, #0
    3666:	f000 8331 	beq.w	3ccc <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    366a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    366e:	465b      	mov	r3, fp
    3670:	2201      	movs	r2, #1
    3672:	2103      	movs	r1, #3
    3674:	2004      	movs	r0, #4
    3676:	46a4      	mov	ip, r4
}
    3678:	b015      	add	sp, #84	; 0x54
    367a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    367e:	4760      	bx	ip
		flag_elapsed = 0;
    3680:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    3682:	4690      	mov	r8, r2
    3684:	e77f      	b.n	3586 <ticker_job+0x46>
		user = &users[count_user];
    3686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3688:	9a04      	ldr	r2, [sp, #16]
    368a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    368e:	687b      	ldr	r3, [r7, #4]
    3690:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    3692:	78f9      	ldrb	r1, [r7, #3]
    3694:	78be      	ldrb	r6, [r7, #2]
    3696:	428e      	cmp	r6, r1
    3698:	f000 80d7 	beq.w	384a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    369c:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    369e:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    36a0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    36a4:	0112      	lsls	r2, r2, #4
    36a6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    36a8:	1c73      	adds	r3, r6, #1
    36aa:	b2db      	uxtb	r3, r3
				middle = 0;
    36ac:	4298      	cmp	r0, r3
    36ae:	bf08      	it	eq
    36b0:	2300      	moveq	r3, #0
			user->middle = middle;
    36b2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    36b4:	9b08      	ldr	r3, [sp, #32]
    36b6:	5c9a      	ldrb	r2, [r3, r2]
    36b8:	2a03      	cmp	r2, #3
    36ba:	d9eb      	bls.n	3694 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    36bc:	2a05      	cmp	r2, #5
    36be:	d817      	bhi.n	36f0 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    36c0:	7869      	ldrb	r1, [r5, #1]
    36c2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    36c6:	930c      	str	r3, [sp, #48]	; 0x30
    36c8:	980c      	ldr	r0, [sp, #48]	; 0x30
    36ca:	9b06      	ldr	r3, [sp, #24]
    36cc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    36d0:	7863      	ldrb	r3, [r4, #1]
    36d2:	78a0      	ldrb	r0, [r4, #2]
    36d4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    36d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    36da:	d009      	beq.n	36f0 <ticker_job+0x1b0>
			    (state == 0) ||
    36dc:	2a04      	cmp	r2, #4
    36de:	d10c      	bne.n	36fa <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    36e0:	686a      	ldr	r2, [r5, #4]
    36e2:	b952      	cbnz	r2, 36fa <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    36e4:	68aa      	ldr	r2, [r5, #8]
    36e6:	b942      	cbnz	r2, 36fa <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    36e8:	68ea      	ldr	r2, [r5, #12]
    36ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    36ee:	d104      	bne.n	36fa <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    36f0:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    36f2:	4628      	mov	r0, r5
    36f4:	f7ff fec3 	bl	347e <ticker_job_op_cb>
    36f8:	e7cb      	b.n	3692 <ticker_job+0x152>
			if (state == 1) {
    36fa:	2b01      	cmp	r3, #1
    36fc:	f040 809b 	bne.w	3836 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3700:	4658      	mov	r0, fp
    3702:	f7ff fe72 	bl	33ea <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3706:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3708:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    370a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    370c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    370e:	f040 8084 	bne.w	381a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    3712:	f8db 3014 	ldr.w	r3, [fp, #20]
    3716:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    3718:	f006 feee 	bl	a4f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    371c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    371e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3720:	1ac3      	subs	r3, r0, r3
    3722:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3726:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    3728:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    372a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    372c:	bf9e      	ittt	ls
    372e:	6962      	ldrls	r2, [r4, #20]
    3730:	1b92      	subls	r2, r2, r6
    3732:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    3734:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3736:	bf96      	itet	ls
    3738:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    373a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    373c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    373e:	b18a      	cbz	r2, 3764 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    3740:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    3742:	b179      	cbz	r1, 3764 <ticker_job+0x224>
		user_op->params.update.lazy--;
    3744:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    3748:	fa1f fe8e 	uxth.w	lr, lr
    374c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3750:	429a      	cmp	r2, r3
    3752:	d32b      	bcc.n	37ac <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    3754:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3a7c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    3758:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    375c:	45e6      	cmp	lr, ip
    375e:	d847      	bhi.n	37f0 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    3760:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    3764:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3766:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    3768:	4413      	add	r3, r2
    376a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    376c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    376e:	6963      	ldr	r3, [r4, #20]
    3770:	4413      	add	r3, r2
    3772:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3776:	4620      	mov	r0, r4
    3778:	f7ff fe63 	bl	3442 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    377c:	69a2      	ldr	r2, [r4, #24]
    377e:	892b      	ldrh	r3, [r5, #8]
    3780:	4413      	add	r3, r2
    3782:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3784:	896a      	ldrh	r2, [r5, #10]
    3786:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    3788:	bf8c      	ite	hi
    378a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    378c:	2300      	movls	r3, #0
    378e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    3790:	7bab      	ldrb	r3, [r5, #14]
    3792:	b103      	cbz	r3, 3796 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    3794:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    3796:	9b06      	ldr	r3, [sp, #24]
    3798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    379a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    379e:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    37a0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    37a4:	3301      	adds	r3, #1
    37a6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    37a8:	2100      	movs	r1, #0
    37aa:	e7a2      	b.n	36f2 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    37ac:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    37b0:	45e6      	cmp	lr, ip
    37b2:	d2cf      	bcs.n	3754 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    37b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    37b6:	4eaf      	ldr	r6, [pc, #700]	; (3a74 <ticker_job+0x534>)
    37b8:	48af      	ldr	r0, [pc, #700]	; (3a78 <ticker_job+0x538>)
    37ba:	198e      	adds	r6, r1, r6
    37bc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    37be:	bf81      	itttt	hi
    37c0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    37c4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    37c8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    37cc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    37ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    37d0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    37d2:	bf8c      	ite	hi
    37d4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    37d8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    37dc:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    37de:	4491      	add	r9, r2
			ticker->lazy_current--;
    37e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    37e4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    37e6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    37ea:	f8a4 c01e 	strh.w	ip, [r4, #30]
    37ee:	e7af      	b.n	3750 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    37f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    37f2:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    37f4:	48a0      	ldr	r0, [pc, #640]	; (3a78 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    37f6:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    37f8:	499e      	ldr	r1, [pc, #632]	; (3a74 <ticker_job+0x534>)
    37fa:	1871      	adds	r1, r6, r1
    37fc:	4281      	cmp	r1, r0
	return 0;
    37fe:	bf8e      	itee	hi
    3800:	2100      	movhi	r1, #0
		return 1;
    3802:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    3804:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    3806:	4411      	add	r1, r2
			ticker->lazy_current++;
    3808:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    380c:	bf8c      	ite	hi
    380e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3810:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    3812:	440b      	add	r3, r1
			ticker->lazy_current++;
    3814:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3818:	e79e      	b.n	3758 <ticker_job+0x218>
		ticker->req = ticker->ack;
    381a:	78a3      	ldrb	r3, [r4, #2]
    381c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    381e:	786b      	ldrb	r3, [r5, #1]
    3820:	f89b 201c 	ldrb.w	r2, [fp, #28]
    3824:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3826:	bf01      	itttt	eq
    3828:	23ff      	moveq	r3, #255	; 0xff
    382a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    382e:	2300      	moveq	r3, #0
    3830:	f8cb 3018 	streq.w	r3, [fp, #24]
    3834:	e7b8      	b.n	37a8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3836:	2104      	movs	r1, #4
    3838:	465b      	mov	r3, fp
    383a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    383e:	2201      	movs	r2, #1
    3840:	4608      	mov	r0, r1
    3842:	47a0      	blx	r4
				pending = 1;
    3844:	2301      	movs	r3, #1
				user->middle = prev;
    3846:	70be      	strb	r6, [r7, #2]
				pending = 1;
    3848:	9309      	str	r3, [sp, #36]	; 0x24
    384a:	9b04      	ldr	r3, [sp, #16]
    384c:	3b01      	subs	r3, #1
    384e:	b2db      	uxtb	r3, r3
    3850:	9304      	str	r3, [sp, #16]
    3852:	e6aa      	b.n	35aa <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3854:	f8db 3018 	ldr.w	r3, [fp, #24]
    3858:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    385a:	bf29      	itett	cs
    385c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    385e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    3860:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    3864:	2300      	movcs	r3, #0
    3866:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    386a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    386c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    386e:	b11b      	cbz	r3, 3878 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    3870:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3874:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    3878:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    387a:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    387c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    387e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    3882:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    3886:	f8d4 e004 	ldr.w	lr, [r4, #4]
    388a:	f1be 0f00 	cmp.w	lr, #0
    388e:	d030      	beq.n	38f2 <ticker_job+0x3b2>
    3890:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    3892:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 3a78 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    3896:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3898:	6a21      	ldr	r1, [r4, #32]
    389a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    389c:	4975      	ldr	r1, [pc, #468]	; (3a74 <ticker_job+0x534>)
    389e:	1859      	adds	r1, r3, r1
    38a0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    38a2:	bf9f      	itttt	ls
    38a4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    38a8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    38ac:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    38b0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    38b2:	bf92      	itee	ls
    38b4:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    38b6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    38b8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    38ba:	4473      	add	r3, lr
			while (count--) {
    38bc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    38c0:	441a      	add	r2, r3
			while (count--) {
    38c2:	d2e8      	bcs.n	3896 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    38c4:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    38c6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    38c8:	f8db 1014 	ldr.w	r1, [fp, #20]
    38cc:	eb03 0209 	add.w	r2, r3, r9
    38d0:	4620      	mov	r0, r4
    38d2:	f7ff fdb6 	bl	3442 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    38d6:	8ba3      	ldrh	r3, [r4, #28]
    38d8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    38da:	2300      	movs	r3, #0
    38dc:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    38de:	9b06      	ldr	r3, [sp, #24]
    38e0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    38e4:	7863      	ldrb	r3, [r4, #1]
    38e6:	3301      	adds	r3, #1
    38e8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    38ea:	eba8 0805 	sub.w	r8, r8, r5
    38ee:	46b2      	mov	sl, r6
    38f0:	e66c      	b.n	35cc <ticker_job+0x8c>
			ticker->req = ticker->ack;
    38f2:	78a3      	ldrb	r3, [r4, #2]
    38f4:	7063      	strb	r3, [r4, #1]
    38f6:	4656      	mov	r6, sl
    38f8:	e7f7      	b.n	38ea <ticker_job+0x3aa>
		user = &users[count_user];
    38fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38fc:	9a03      	ldr	r2, [sp, #12]
    38fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3902:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    3904:	685b      	ldr	r3, [r3, #4]
    3906:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    3908:	9b06      	ldr	r3, [sp, #24]
    390a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    390e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3912:	f000 808e 	beq.w	3a32 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    3916:	fa0f f38a 	sxth.w	r3, sl
    391a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    391e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    3920:	46d0      	mov	r8, sl
    3922:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    3926:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    392a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    392c:	f8db 3000 	ldr.w	r3, [fp]
    3930:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    3932:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3934:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    3936:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3938:	8be3      	ldrh	r3, [r4, #30]
    393a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    393c:	bf86      	itte	hi
    393e:	1a9b      	subhi	r3, r3, r2
    3940:	b29b      	uxthhi	r3, r3
		skip = 0;
    3942:	2300      	movls	r3, #0
    3944:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    3946:	fa0f f388 	sxth.w	r3, r8
    394a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    394e:	00db      	lsls	r3, r3, #3
    3950:	9313      	str	r3, [sp, #76]	; 0x4c
    3952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    3954:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3958:	f8db 0018 	ldr.w	r0, [fp, #24]
    395c:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    395e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3962:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3964:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3968:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    396c:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    396e:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    3970:	2bff      	cmp	r3, #255	; 0xff
    3972:	d007      	beq.n	3984 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3974:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    3978:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    397c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    397e:	4281      	cmp	r1, r0
    3980:	f200 80a9 	bhi.w	3ad6 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    3984:	f8de 0018 	ldr.w	r0, [lr, #24]
    3988:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    398a:	eb01 0c00 	add.w	ip, r1, r0
    398e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    3990:	2eff      	cmp	r6, #255	; 0xff
    3992:	f040 80ae 	bne.w	3af2 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    3996:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3998:	b130      	cbz	r0, 39a8 <ticker_job+0x468>
    399a:	9807      	ldr	r0, [sp, #28]
    399c:	4281      	cmp	r1, r0
    399e:	f0c0 80bf 	bcc.w	3b20 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    39a2:	2eff      	cmp	r6, #255	; 0xff
    39a4:	f040 818e 	bne.w	3cc4 <ticker_job+0x784>
		if (previous == current) {
    39a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    39aa:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    39ae:	4283      	cmp	r3, r0
			node[previous].next = id;
    39b0:	bf18      	it	ne
    39b2:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    39b6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    39ba:	bf16      	itet	ne
    39bc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    39c0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    39c4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    39c8:	2bff      	cmp	r3, #255	; 0xff
    39ca:	d006      	beq.n	39da <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    39cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    39d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    39d4:	689a      	ldr	r2, [r3, #8]
    39d6:	1a51      	subs	r1, r2, r1
    39d8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    39da:	78a3      	ldrb	r3, [r4, #2]
    39dc:	3301      	adds	r3, #1
    39de:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    39e0:	2100      	movs	r1, #0
			if (user_op) {
    39e2:	2d00      	cmp	r5, #0
    39e4:	d093      	beq.n	390e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    39e6:	4628      	mov	r0, r5
    39e8:	f7ff fd49 	bl	347e <ticker_job_op_cb>
    39ec:	e78f      	b.n	390e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    39ee:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    39f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39f4:	011b      	lsls	r3, r3, #4
    39f6:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    39f8:	f109 0201 	add.w	r2, r9, #1
    39fc:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    3a00:	9a06      	ldr	r2, [sp, #24]
    3a02:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3a04:	454a      	cmp	r2, r9
    3a06:	bf08      	it	eq
    3a08:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    3a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a0e:	5cd3      	ldrb	r3, [r2, r3]
    3a10:	2b03      	cmp	r3, #3
    3a12:	d10e      	bne.n	3a32 <ticker_job+0x4f2>
				id_insert = user_op->id;
    3a14:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    3a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a1a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    3a1e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3a22:	7862      	ldrb	r2, [r4, #1]
    3a24:	78a3      	ldrb	r3, [r4, #2]
    3a26:	429a      	cmp	r2, r3
    3a28:	d009      	beq.n	3a3e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    3a2a:	2101      	movs	r1, #1
    3a2c:	4628      	mov	r0, r5
    3a2e:	f7ff fd26 	bl	347e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    3a32:	9b06      	ldr	r3, [sp, #24]
    3a34:	789b      	ldrb	r3, [r3, #2]
    3a36:	454b      	cmp	r3, r9
    3a38:	d1d9      	bne.n	39ee <ticker_job+0x4ae>
    3a3a:	9b03      	ldr	r3, [sp, #12]
    3a3c:	e5e6      	b.n	360c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    3a3e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    3a40:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    3a44:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3a46:	692b      	ldr	r3, [r5, #16]
    3a48:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    3a4a:	8aab      	ldrh	r3, [r5, #20]
    3a4c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    3a4e:	69ab      	ldr	r3, [r5, #24]
    3a50:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3a52:	69eb      	ldr	r3, [r5, #28]
    3a54:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    3a56:	6a2b      	ldr	r3, [r5, #32]
    3a58:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    3a5a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    3a5c:	68ab      	ldr	r3, [r5, #8]
    3a5e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    3a60:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    3a62:	686a      	ldr	r2, [r5, #4]
    3a64:	4620      	mov	r0, r4
    3a66:	f7ff fcec 	bl	3442 <ticks_to_expire_prep>
	ticker->force = 1;
    3a6a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3a6c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3a6e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    3a70:	70e3      	strb	r3, [r4, #3]
    3a72:	e75b      	b.n	392c <ticker_job+0x3ec>
    3a74:	ff172b5a 	.word	0xff172b5a
    3a78:	7f172b59 	.word	0x7f172b59
    3a7c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3a80:	6860      	ldr	r0, [r4, #4]
    3a82:	2800      	cmp	r0, #0
    3a84:	d07b      	beq.n	3b7e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    3a86:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3a88:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3a8a:	4b92      	ldr	r3, [pc, #584]	; (3cd4 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    3a8c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3a8e:	4992      	ldr	r1, [pc, #584]	; (3cd8 <ticker_job+0x798>)
    3a90:	18d3      	adds	r3, r2, r3
    3a92:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    3a94:	bf9c      	itt	ls
    3a96:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    3a9a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3a9e:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    3aa0:	bf8b      	itete	hi
    3aa2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3aa4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    3aa8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    3aaa:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3aac:	4403      	add	r3, r0
		return 1;
    3aae:	bf98      	it	ls
    3ab0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3ab2:	4413      	add	r3, r2
			ticker->lazy_current++;
    3ab4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3ab6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3ab8:	3201      	adds	r2, #1
    3aba:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3abc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    3abe:	4293      	cmp	r3, r2
    3ac0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3ac4:	bf89      	itett	hi
    3ac6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    3ac8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    3aca:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3acc:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    3ace:	bf9c      	itt	ls
    3ad0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    3ad2:	60a1      	strls	r1, [r4, #8]
    3ad4:	e73d      	b.n	3952 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    3ad6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    3ad8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    3ada:	b946      	cbnz	r6, 3aee <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3adc:	9f07      	ldr	r7, [sp, #28]
    3ade:	42b8      	cmp	r0, r7
    3ae0:	d200      	bcs.n	3ae4 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    3ae2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3ae4:	930b      	str	r3, [sp, #44]	; 0x2c
    3ae6:	9607      	str	r6, [sp, #28]
    3ae8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    3aec:	e740      	b.n	3970 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    3aee:	9308      	str	r3, [sp, #32]
    3af0:	e7f8      	b.n	3ae4 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    3af2:	b230      	sxth	r0, r6
    3af4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3af8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3afc:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    3afe:	68bf      	ldr	r7, [r7, #8]
    3b00:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    3b02:	4567      	cmp	r7, ip
    3b04:	d20a      	bcs.n	3b1c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    3b06:	9f10      	ldr	r7, [sp, #64]	; 0x40
    3b08:	69bf      	ldr	r7, [r7, #24]
    3b0a:	2f00      	cmp	r7, #0
    3b0c:	f47f af43 	bne.w	3996 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    3b10:	9e11      	ldr	r6, [sp, #68]	; 0x44
    3b12:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    3b16:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3b1a:	e739      	b.n	3990 <ticker_job+0x450>
			return TICKER_NULL;
    3b1c:	26ff      	movs	r6, #255	; 0xff
    3b1e:	e73a      	b.n	3996 <ticker_job+0x456>
	while (id_insert !=
    3b20:	9b08      	ldr	r3, [sp, #32]
    3b22:	4598      	cmp	r8, r3
    3b24:	f43f af59 	beq.w	39da <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    3b28:	9b08      	ldr	r3, [sp, #32]
    3b2a:	2bff      	cmp	r3, #255	; 0xff
    3b2c:	d0a8      	beq.n	3a80 <ticker_job+0x540>
    3b2e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3b30:	b233      	sxth	r3, r6
    3b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b36:	9307      	str	r3, [sp, #28]
    3b38:	9a07      	ldr	r2, [sp, #28]
    3b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3b3c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    3b40:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    3b42:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    3b44:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3b46:	bf88      	it	hi
    3b48:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3b4a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3b4c:	bf8c      	ite	hi
    3b4e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    3b50:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3b52:	2a00      	cmp	r2, #0
    3b54:	d094      	beq.n	3a80 <ticker_job+0x540>
    3b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3b58:	4293      	cmp	r3, r2
    3b5a:	d891      	bhi.n	3a80 <ticker_job+0x540>
			    skip_collide <= skip &&
    3b5c:	78fa      	ldrb	r2, [r7, #3]
    3b5e:	78e3      	ldrb	r3, [r4, #3]
    3b60:	429a      	cmp	r2, r3
    3b62:	d28d      	bcs.n	3a80 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    3b64:	4631      	mov	r1, r6
    3b66:	4658      	mov	r0, fp
    3b68:	f7ff fc3f 	bl	33ea <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3b6c:	78bb      	ldrb	r3, [r7, #2]
    3b6e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3b70:	9a07      	ldr	r2, [sp, #28]
    3b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    3b74:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3b76:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3b7a:	46b2      	mov	sl, r6
    3b7c:	e6e9      	b.n	3952 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    3b7e:	2101      	movs	r1, #1
    3b80:	e72f      	b.n	39e2 <ticker_job+0x4a2>
		user = &users[count_user];
    3b82:	9b03      	ldr	r3, [sp, #12]
    3b84:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    3b88:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    3b8a:	786b      	ldrb	r3, [r5, #1]
    3b8c:	78ea      	ldrb	r2, [r5, #3]
    3b8e:	429a      	cmp	r2, r3
    3b90:	d102      	bne.n	3b98 <ticker_job+0x658>
    3b92:	3c01      	subs	r4, #1
    3b94:	b2e4      	uxtb	r4, r4
    3b96:	e551      	b.n	363c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b9c:	011b      	lsls	r3, r3, #4
    3b9e:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    3ba0:	5cf3      	ldrb	r3, [r6, r3]
    3ba2:	2b01      	cmp	r3, #1
    3ba4:	d025      	beq.n	3bf2 <ticker_job+0x6b2>
    3ba6:	2b02      	cmp	r3, #2
    3ba8:	d12a      	bne.n	3c00 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    3baa:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3bae:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    3bb0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    3bb4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    3bb8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    3bbc:	28ff      	cmp	r0, #255	; 0xff
    3bbe:	d004      	beq.n	3bca <ticker_job+0x68a>
    3bc0:	6819      	ldr	r1, [r3, #0]
    3bc2:	f8db 7014 	ldr.w	r7, [fp, #20]
    3bc6:	42b9      	cmp	r1, r7
    3bc8:	d023      	beq.n	3c12 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    3bca:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    3bce:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    3bd2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    3bd4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3bd6:	29ff      	cmp	r1, #255	; 0xff
    3bd8:	d007      	beq.n	3bea <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3bda:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    3bde:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    3be2:	6987      	ldr	r7, [r0, #24]
    3be4:	6880      	ldr	r0, [r0, #8]
    3be6:	b1df      	cbz	r7, 3c20 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    3be8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    3bea:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    3bee:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    3bf2:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3bf4:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    3bf8:	b113      	cbz	r3, 3c00 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    3bfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3bfc:	2000      	movs	r0, #0
    3bfe:	4798      	blx	r3
			first = user->first + 1;
    3c00:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    3c02:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3c04:	3301      	adds	r3, #1
    3c06:	b2db      	uxtb	r3, r3
				first = 0;
    3c08:	429a      	cmp	r2, r3
    3c0a:	bf08      	it	eq
    3c0c:	2300      	moveq	r3, #0
			user->first = first;
    3c0e:	706b      	strb	r3, [r5, #1]
    3c10:	e7bb      	b.n	3b8a <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    3c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3c16:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    3c1a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    3c1e:	e7da      	b.n	3bd6 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    3c20:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    3c22:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    3c26:	e7d6      	b.n	3bd6 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    3c28:	9b05      	ldr	r3, [sp, #20]
    3c2a:	2bff      	cmp	r3, #255	; 0xff
    3c2c:	d107      	bne.n	3c3e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    3c2e:	f006 fc63 	bl	a4f8 <cntr_cnt_get>
    3c32:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    3c34:	f006 fc24 	bl	a480 <cntr_start>
    3c38:	b908      	cbnz	r0, 3c3e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    3c3a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    3c3e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    3c42:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    3c46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    3c4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3c4e:	260a      	movs	r6, #10
    3c50:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3c52:	f006 fc51 	bl	a4f8 <cntr_cnt_get>
		cc = instance->ticks_current;
    3c56:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3c5a:	1b03      	subs	r3, r0, r4
    3c5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    3c60:	3303      	adds	r3, #3
		cc += max(ticks_elapsed, ticks_to_expire);
    3c62:	42ab      	cmp	r3, r5
    3c64:	bf2c      	ite	cs
    3c66:	18e4      	addcs	r4, r4, r3
    3c68:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    3c6a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    3c6e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3c70:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3c74:	4620      	mov	r0, r4
    3c76:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3c78:	f006 fc3e 	bl	a4f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3c7c:	1bc0      	subs	r0, r0, r7
    3c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c82:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3c84:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3c86:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3c8a:	42a0      	cmp	r0, r4
    3c8c:	f67f ace8 	bls.w	3660 <ticker_job+0x120>
		LL_ASSERT(i);
    3c90:	3e01      	subs	r6, #1
    3c92:	d1de      	bne.n	3c52 <ticker_job+0x712>
    3c94:	4b11      	ldr	r3, [pc, #68]	; (3cdc <ticker_job+0x79c>)
    3c96:	9301      	str	r3, [sp, #4]
    3c98:	9300      	str	r3, [sp, #0]
    3c9a:	4a11      	ldr	r2, [pc, #68]	; (3ce0 <ticker_job+0x7a0>)
    3c9c:	4b11      	ldr	r3, [pc, #68]	; (3ce4 <ticker_job+0x7a4>)
    3c9e:	4912      	ldr	r1, [pc, #72]	; (3ce8 <ticker_job+0x7a8>)
    3ca0:	4812      	ldr	r0, [pc, #72]	; (3cec <ticker_job+0x7ac>)
    3ca2:	f7fd f8e3 	bl	e6c <printk>
    3ca6:	4040      	eors	r0, r0
    3ca8:	f380 8811 	msr	BASEPRI, r0
    3cac:	f04f 0004 	mov.w	r0, #4
    3cb0:	df02      	svc	2
	instance->job_guard = 0;
    3cb2:	2300      	movs	r3, #0
    3cb4:	f88b 301e 	strb.w	r3, [fp, #30]
    3cb8:	e4c8      	b.n	364c <ticker_job+0x10c>
	if (!pending) {
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d1f9      	bne.n	3cb2 <ticker_job+0x772>
		flag_compare_update = 1;
    3cbe:	2301      	movs	r3, #1
    3cc0:	9304      	str	r3, [sp, #16]
    3cc2:	e4b2      	b.n	362a <ticker_job+0xea>
	while (id_insert !=
    3cc4:	45b0      	cmp	r8, r6
    3cc6:	f47f af33 	bne.w	3b30 <ticker_job+0x5f0>
    3cca:	e686      	b.n	39da <ticker_job+0x49a>
}
    3ccc:	b015      	add	sp, #84	; 0x54
    3cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cd2:	bf00      	nop
    3cd4:	ff172b5a 	.word	0xff172b5a
    3cd8:	7f172b59 	.word	0x7f172b59
    3cdc:	0000cbb3 	.word	0x0000cbb3
    3ce0:	0000d49b 	.word	0x0000d49b
    3ce4:	0000d9bc 	.word	0x0000d9bc
    3ce8:	0000d4ea 	.word	0x0000d4ea
    3cec:	0000d9d6 	.word	0x0000d9d6

00003cf0 <ticker_init>:
{
    3cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    3cf2:	4d1a      	ldr	r5, [pc, #104]	; (3d5c <ticker_init+0x6c>)
{
    3cf4:	9f05      	ldr	r7, [sp, #20]
    3cf6:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    3cfa:	262c      	movs	r6, #44	; 0x2c
    3cfc:	4346      	muls	r6, r0
    3cfe:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    3d02:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    3d04:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    3d08:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    3d0a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    3d0e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    3d12:	3b01      	subs	r3, #1
    3d14:	b2db      	uxtb	r3, r3
    3d16:	2bff      	cmp	r3, #255	; 0xff
    3d18:	d111      	bne.n	3d3e <ticker_init+0x4e>
	if (count_op) {
    3d1a:	b9ec      	cbnz	r4, 3d58 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    3d1c:	222c      	movs	r2, #44	; 0x2c
    3d1e:	fb02 5200 	mla	r2, r2, r0, r5
    3d22:	9908      	ldr	r1, [sp, #32]
    3d24:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    3d26:	9909      	ldr	r1, [sp, #36]	; 0x24
    3d28:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d2c:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    3d2e:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    3d30:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    3d32:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    3d34:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    3d36:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    3d38:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    3d3a:	4620      	mov	r0, r4
    3d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    3d3e:	b21a      	sxth	r2, r3
    3d40:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    3d44:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    3d46:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    3d4a:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    3d4e:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    3d50:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    3d54:	b2e4      	uxtb	r4, r4
    3d56:	e7dc      	b.n	3d12 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    3d58:	2001      	movs	r0, #1
}
    3d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d5c:	20000488 	.word	0x20000488

00003d60 <ticker_trigger>:
	instance = &_instance[instance_index];
    3d60:	4a07      	ldr	r2, [pc, #28]	; (3d80 <ticker_trigger+0x20>)
    3d62:	212c      	movs	r1, #44	; 0x2c
    3d64:	fb00 2301 	mla	r3, r0, r1, r2
{
    3d68:	b410      	push	{r4}
	if (instance->sched_cb) {
    3d6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3d6c:	b12c      	cbz	r4, 3d7a <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3d6e:	46a4      	mov	ip, r4
    3d70:	2201      	movs	r2, #1
    3d72:	2103      	movs	r1, #3
    3d74:	2002      	movs	r0, #2
}
    3d76:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3d78:	4760      	bx	ip
}
    3d7a:	bc10      	pop	{r4}
    3d7c:	4770      	bx	lr
    3d7e:	bf00      	nop
    3d80:	20000488 	.word	0x20000488

00003d84 <ticker_start>:
{
    3d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3d88:	4f25      	ldr	r7, [pc, #148]	; (3e20 <ticker_start+0x9c>)
    3d8a:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    3d8e:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3d90:	fb08 7000 	mla	r0, r8, r0, r7
    3d94:	fa0f fc81 	sxth.w	ip, r1
    3d98:	f8d0 e004 	ldr.w	lr, [r0, #4]
    3d9c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    3da0:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    3da4:	78f4      	ldrb	r4, [r6, #3]
    3da6:	1c65      	adds	r5, r4, #1
    3da8:	b2ed      	uxtb	r5, r5
		last = 0;
    3daa:	45ae      	cmp	lr, r5
    3dac:	bf98      	it	ls
    3dae:	2500      	movls	r5, #0
	if (last == user->first) {
    3db0:	f896 e001 	ldrb.w	lr, [r6, #1]
    3db4:	45ae      	cmp	lr, r5
    3db6:	d02f      	beq.n	3e18 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    3db8:	f8d6 c004 	ldr.w	ip, [r6, #4]
    3dbc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3dc0:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    3dc4:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    3dc8:	f04f 0a03 	mov.w	sl, #3
    3dcc:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3dd0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    3dd2:	9b08      	ldr	r3, [sp, #32]
    3dd4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3dd8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ddc:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    3dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3de0:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3de2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3de6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3dea:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3dee:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3df0:	2302      	movs	r3, #2
    3df2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3df6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    3dfa:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3dfe:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3e00:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3e02:	6a03      	ldr	r3, [r0, #32]
    3e04:	4608      	mov	r0, r1
    3e06:	4798      	blx	r3
    3e08:	fb09 7308 	mla	r3, r9, r8, r7
    3e0c:	2200      	movs	r2, #0
    3e0e:	2104      	movs	r1, #4
    3e10:	47a8      	blx	r5
	return user_op->status;
    3e12:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3e18:	2001      	movs	r0, #1
}
    3e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e1e:	bf00      	nop
    3e20:	20000488 	.word	0x20000488

00003e24 <ticker_update>:
{
    3e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3e28:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3ebc <ticker_update+0x98>
    3e2c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3e30:	fb0a 8e00 	mla	lr, sl, r0, r8
    3e34:	b20f      	sxth	r7, r1
    3e36:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    3e3a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3e3c:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    3e40:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    3e44:	78c4      	ldrb	r4, [r0, #3]
    3e46:	1c66      	adds	r6, r4, #1
    3e48:	b2f6      	uxtb	r6, r6
		last = 0;
    3e4a:	42b5      	cmp	r5, r6
    3e4c:	bf98      	it	ls
    3e4e:	2600      	movls	r6, #0
	if (last == user->first) {
    3e50:	7845      	ldrb	r5, [r0, #1]
    3e52:	42b5      	cmp	r5, r6
    3e54:	d02f      	beq.n	3eb6 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    3e56:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3e5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3e5e:	0125      	lsls	r5, r4, #4
    3e60:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3e64:	2704      	movs	r7, #4
    3e66:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    3e6a:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3e6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3e70:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    3e72:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3e76:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    3e78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3e7c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    3e7e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3e82:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    3e84:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3e88:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3e8a:	2302      	movs	r3, #2
    3e8c:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e90:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3e94:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3e96:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3e98:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3e9a:	f8de 3020 	ldr.w	r3, [lr, #32]
    3e9e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    3ea2:	4608      	mov	r0, r1
    3ea4:	4798      	blx	r3
    3ea6:	fb09 830a 	mla	r3, r9, sl, r8
    3eaa:	2200      	movs	r2, #0
    3eac:	4639      	mov	r1, r7
    3eae:	47a8      	blx	r5
	return user_op->status;
    3eb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3eb6:	2001      	movs	r0, #1
}
    3eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ebc:	20000488 	.word	0x20000488

00003ec0 <ticker_stop>:
{
    3ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3ec4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3f34 <ticker_stop+0x74>
    3ec8:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3ecc:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3ed0:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3ed2:	f8de 0004 	ldr.w	r0, [lr, #4]
    3ed6:	b20e      	sxth	r6, r1
    3ed8:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3edc:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3ee0:	78fc      	ldrb	r4, [r7, #3]
    3ee2:	1c65      	adds	r5, r4, #1
    3ee4:	b2ed      	uxtb	r5, r5
		last = 0;
    3ee6:	42a8      	cmp	r0, r5
    3ee8:	bf98      	it	ls
    3eea:	2500      	movls	r5, #0
	if (last == user->first) {
    3eec:	7878      	ldrb	r0, [r7, #1]
    3eee:	42a8      	cmp	r0, r5
    3ef0:	d01d      	beq.n	3f2e <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    3ef2:	6878      	ldr	r0, [r7, #4]
    3ef4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3ef8:	0124      	lsls	r4, r4, #4
    3efa:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3efc:	f04f 0c05 	mov.w	ip, #5
    3f00:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3f04:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    3f06:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    3f08:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    3f0a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3f0c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    3f0e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3f10:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3f12:	f8de 3020 	ldr.w	r3, [lr, #32]
    3f16:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3f1a:	4608      	mov	r0, r1
    3f1c:	4798      	blx	r3
    3f1e:	fb08 930a 	mla	r3, r8, sl, r9
    3f22:	2200      	movs	r2, #0
    3f24:	2104      	movs	r1, #4
    3f26:	47a0      	blx	r4
	return user_op->status;
    3f28:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3f2e:	2001      	movs	r0, #1
}
    3f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f34:	20000488 	.word	0x20000488

00003f38 <ticker_next_slot_get>:
{
    3f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3f3c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3fb8 <ticker_next_slot_get+0x80>
    3f40:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3f44:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3f46:	fb0a 8000 	mla	r0, sl, r0, r8
    3f4a:	fa0f fe81 	sxth.w	lr, r1
    3f4e:	6845      	ldr	r5, [r0, #4]
    3f50:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    3f54:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    3f58:	78fc      	ldrb	r4, [r7, #3]
    3f5a:	1c66      	adds	r6, r4, #1
    3f5c:	b2f6      	uxtb	r6, r6
		last = 0;
    3f5e:	42b5      	cmp	r5, r6
    3f60:	bf98      	it	ls
    3f62:	2600      	movls	r6, #0
	if (last == user->first) {
    3f64:	787d      	ldrb	r5, [r7, #1]
    3f66:	42b5      	cmp	r5, r6
    3f68:	d023      	beq.n	3fb2 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    3f6a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    3f6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3f72:	0125      	lsls	r5, r4, #4
    3f74:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    3f78:	f04f 0e02 	mov.w	lr, #2
    3f7c:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    3f80:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    3f82:	9b08      	ldr	r3, [sp, #32]
    3f84:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    3f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f88:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    3f8a:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    3f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    3f8e:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    3f90:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3f92:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3f96:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3f98:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3f9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3f9c:	6a03      	ldr	r3, [r0, #32]
    3f9e:	4608      	mov	r0, r1
    3fa0:	4798      	blx	r3
    3fa2:	fb09 830a 	mla	r3, r9, sl, r8
    3fa6:	2200      	movs	r2, #0
    3fa8:	2104      	movs	r1, #4
    3faa:	47a8      	blx	r5
	return user_op->status;
    3fac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3fb2:	2001      	movs	r0, #1
}
    3fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fb8:	20000488 	.word	0x20000488

00003fbc <ticker_job_idle_get>:
{
    3fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3fc0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4030 <ticker_job_idle_get+0x74>
    3fc4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3fc8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3fcc:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3fce:	f8de 0004 	ldr.w	r0, [lr, #4]
    3fd2:	b20e      	sxth	r6, r1
    3fd4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3fd8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3fdc:	78fc      	ldrb	r4, [r7, #3]
    3fde:	1c65      	adds	r5, r4, #1
    3fe0:	b2ed      	uxtb	r5, r5
		last = 0;
    3fe2:	42a8      	cmp	r0, r5
    3fe4:	bf98      	it	ls
    3fe6:	2500      	movls	r5, #0
	if (last == user->first) {
    3fe8:	7878      	ldrb	r0, [r7, #1]
    3fea:	42a8      	cmp	r0, r5
    3fec:	d01d      	beq.n	402a <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    3fee:	6878      	ldr	r0, [r7, #4]
    3ff0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3ff4:	0124      	lsls	r4, r4, #4
    3ff6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3ff8:	f04f 0c01 	mov.w	ip, #1
    3ffc:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    4000:	20ff      	movs	r0, #255	; 0xff
    4002:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4004:	2002      	movs	r0, #2
    4006:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4008:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    400a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    400c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    400e:	f8de 3020 	ldr.w	r3, [lr, #32]
    4012:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4016:	4608      	mov	r0, r1
    4018:	4798      	blx	r3
    401a:	fb08 930a 	mla	r3, r8, sl, r9
    401e:	2200      	movs	r2, #0
    4020:	2104      	movs	r1, #4
    4022:	47a0      	blx	r4
	return user_op->status;
    4024:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    402a:	2001      	movs	r0, #1
}
    402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4030:	20000488 	.word	0x20000488

00004034 <ticker_job_sched>:
{
    4034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4038:	4c08      	ldr	r4, [pc, #32]	; (405c <ticker_job_sched+0x28>)
    403a:	252c      	movs	r5, #44	; 0x2c
    403c:	fb05 4300 	mla	r3, r5, r0, r4
{
    4040:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4042:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    4044:	6a1b      	ldr	r3, [r3, #32]
    4046:	4608      	mov	r0, r1
    4048:	4798      	blx	r3
    404a:	fb06 4305 	mla	r3, r6, r5, r4
    404e:	46bc      	mov	ip, r7
    4050:	2200      	movs	r2, #0
    4052:	2104      	movs	r1, #4
}
    4054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4058:	4760      	bx	ip
    405a:	bf00      	nop
    405c:	20000488 	.word	0x20000488

00004060 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4060:	f006 ba4a 	b.w	a4f8 <cntr_cnt_get>

00004064 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4064:	1a40      	subs	r0, r0, r1
}
    4066:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    406a:	4770      	bx	lr

0000406c <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    406c:	b508      	push	{r3, lr}
    406e:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4070:	2b01      	cmp	r3, #1
{
    4072:	4608      	mov	r0, r1
	if (addr_type > 1) {
    4074:	d80e      	bhi.n	4094 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    4076:	b133      	cbz	r3, 4086 <ll_addr_get+0x1a>
		if (bdaddr) {
    4078:	b119      	cbz	r1, 4082 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    407a:	2206      	movs	r2, #6
    407c:	4906      	ldr	r1, [pc, #24]	; (4098 <ll_addr_get+0x2c>)
    407e:	f7fd fd25 	bl	1acc <memcpy>
		}

		return rnd_addr;
    4082:	4805      	ldr	r0, [pc, #20]	; (4098 <ll_addr_get+0x2c>)
    4084:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    4086:	b119      	cbz	r1, 4090 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    4088:	2206      	movs	r2, #6
    408a:	4904      	ldr	r1, [pc, #16]	; (409c <ll_addr_get+0x30>)
    408c:	f7fd fd1e 	bl	1acc <memcpy>
	}

	return pub_addr;
    4090:	4802      	ldr	r0, [pc, #8]	; (409c <ll_addr_get+0x30>)
}
    4092:	bd08      	pop	{r3, pc}
		return NULL;
    4094:	2000      	movs	r0, #0
    4096:	bd08      	pop	{r3, pc}
    4098:	200004e6 	.word	0x200004e6
    409c:	200004e0 	.word	0x200004e0

000040a0 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    40a0:	b570      	push	{r4, r5, r6, lr}
    40a2:	4606      	mov	r6, r0
    40a4:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    40a6:	f005 f97f 	bl	93a8 <ll_adv_is_enabled>
    40aa:	4604      	mov	r4, r0
    40ac:	b110      	cbz	r0, 40b4 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    40ae:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    40b0:	4620      	mov	r0, r4
    40b2:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    40b4:	f005 f98c 	bl	93d0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    40b8:	f010 0f06 	tst.w	r0, #6
    40bc:	d1f7      	bne.n	40ae <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    40be:	2206      	movs	r2, #6
    40c0:	4629      	mov	r1, r5
	if (addr_type) {
    40c2:	b11e      	cbz	r6, 40cc <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    40c4:	4802      	ldr	r0, [pc, #8]	; (40d0 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    40c6:	f7fd fd01 	bl	1acc <memcpy>
    40ca:	e7f1      	b.n	40b0 <ll_addr_set+0x10>
    40cc:	4801      	ldr	r0, [pc, #4]	; (40d4 <ll_addr_set+0x34>)
    40ce:	e7fa      	b.n	40c6 <ll_addr_set+0x26>
    40d0:	200004e6 	.word	0x200004e6
    40d4:	200004e0 	.word	0x200004e0

000040d8 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    40d8:	2300      	movs	r3, #0
    40da:	7003      	strb	r3, [r0, #0]
	*max = 0;
    40dc:	700b      	strb	r3, [r1, #0]
    40de:	4770      	bx	lr

000040e0 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    40e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40e2:	4607      	mov	r7, r0
    40e4:	460e      	mov	r6, r1
	while (len) {
    40e6:	460c      	mov	r4, r1
    40e8:	1b35      	subs	r5, r6, r4
    40ea:	443d      	add	r5, r7
    40ec:	b18c      	cbz	r4, 4112 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    40ee:	f7fc fee9 	bl	ec4 <sys_rand32_get>

		if (len >= sizeof(v)) {
    40f2:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    40f4:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    40f6:	d907      	bls.n	4108 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    40f8:	2204      	movs	r2, #4
    40fa:	eb0d 0102 	add.w	r1, sp, r2
    40fe:	4628      	mov	r0, r5
    4100:	f7fd fce4 	bl	1acc <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    4104:	3c04      	subs	r4, #4
    4106:	e7ef      	b.n	40e8 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    4108:	4622      	mov	r2, r4
    410a:	a901      	add	r1, sp, #4
    410c:	4628      	mov	r0, r5
    410e:	f7fd fcdd 	bl	1acc <memcpy>
			break;
		}
	}

	return 0;
}
    4112:	2000      	movs	r0, #0
    4114:	b003      	add	sp, #12
    4116:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004118 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4118:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    411a:	4802      	ldr	r0, [pc, #8]	; (4124 <_hci_driver_init+0xc>)
    411c:	f7fe fd50 	bl	2bc0 <bt_hci_driver_register>

	return 0;
}
    4120:	2000      	movs	r0, #0
    4122:	bd08      	pop	{r3, pc}
    4124:	0000da28 	.word	0x0000da28

00004128 <recv_thread>:
{
    4128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    412a:	4d21      	ldr	r5, [pc, #132]	; (41b0 <recv_thread+0x88>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    412c:	2600      	movs	r6, #0
    412e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4132:	4628      	mov	r0, r5
    4134:	f007 fddc 	bl	bcf0 <_impl_k_queue_get>
		if (node_rx && !buf) {
    4138:	4604      	mov	r4, r0
    413a:	b318      	cbz	r0, 4184 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    413c:	f000 fee4 	bl	4f08 <hci_get_class>
	switch (class) {
    4140:	2802      	cmp	r0, #2
    4142:	9403      	str	r4, [sp, #12]
    4144:	d821      	bhi.n	418a <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4146:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4148:	bf0e      	itee	eq
    414a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    414c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4150:	2001      	movne	r0, #1
    4152:	f7fe ff47 	bl	2fe4 <bt_buf_get_rx>
    4156:	4604      	mov	r4, r0
		if (buf) {
    4158:	b118      	cbz	r0, 4162 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    415a:	4601      	mov	r1, r0
    415c:	9803      	ldr	r0, [sp, #12]
    415e:	f000 fd45 	bl	4bec <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4162:	9b03      	ldr	r3, [sp, #12]
    4164:	2100      	movs	r1, #0
    4166:	88d8      	ldrh	r0, [r3, #6]
    4168:	f005 fa0c 	bl	9584 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    416c:	a804      	add	r0, sp, #16
    416e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4172:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4174:	f005 f992 	bl	949c <ll_rx_mem_release>
		if (buf) {
    4178:	b124      	cbz	r4, 4184 <recv_thread+0x5c>
			if (buf->len) {
    417a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    417c:	4620      	mov	r0, r4
			if (buf->len) {
    417e:	b19b      	cbz	r3, 41a8 <recv_thread+0x80>
				bt_recv(buf);
    4180:	f7fe fba2 	bl	28c8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4184:	f008 f816 	bl	c1b4 <_impl_k_yield>
    4188:	e7d1      	b.n	412e <recv_thread+0x6>
		LL_ASSERT(0);
    418a:	4b0a      	ldr	r3, [pc, #40]	; (41b4 <recv_thread+0x8c>)
    418c:	9301      	str	r3, [sp, #4]
    418e:	9300      	str	r3, [sp, #0]
    4190:	4a09      	ldr	r2, [pc, #36]	; (41b8 <recv_thread+0x90>)
    4192:	4b0a      	ldr	r3, [pc, #40]	; (41bc <recv_thread+0x94>)
    4194:	490a      	ldr	r1, [pc, #40]	; (41c0 <recv_thread+0x98>)
    4196:	480b      	ldr	r0, [pc, #44]	; (41c4 <recv_thread+0x9c>)
    4198:	f7fc fe68 	bl	e6c <printk>
    419c:	4040      	eors	r0, r0
    419e:	f380 8811 	msr	BASEPRI, r0
    41a2:	f04f 0004 	mov.w	r0, #4
    41a6:	df02      	svc	2
				net_buf_unref(buf);
    41a8:	f006 ffd2 	bl	b150 <net_buf_unref>
    41ac:	e7ea      	b.n	4184 <recv_thread+0x5c>
    41ae:	bf00      	nop
    41b0:	200034c4 	.word	0x200034c4
    41b4:	0000cbb3 	.word	0x0000cbb3
    41b8:	0000d49b 	.word	0x0000d49b
    41bc:	0000d9f9 	.word	0x0000d9f9
    41c0:	0000d4ea 	.word	0x0000d4ea
    41c4:	0000d43a 	.word	0x0000d43a

000041c8 <hci_driver_send>:
{
    41c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!buf->len) {
    41ca:	8983      	ldrh	r3, [r0, #12]
{
    41cc:	4604      	mov	r4, r0
	if (!buf->len) {
    41ce:	b95b      	cbnz	r3, 41e8 <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    41d0:	4b15      	ldr	r3, [pc, #84]	; (4228 <hci_driver_send+0x60>)
    41d2:	9301      	str	r3, [sp, #4]
    41d4:	9300      	str	r3, [sp, #0]
    41d6:	4a15      	ldr	r2, [pc, #84]	; (422c <hci_driver_send+0x64>)
    41d8:	4b15      	ldr	r3, [pc, #84]	; (4230 <hci_driver_send+0x68>)
    41da:	4916      	ldr	r1, [pc, #88]	; (4234 <hci_driver_send+0x6c>)
    41dc:	4816      	ldr	r0, [pc, #88]	; (4238 <hci_driver_send+0x70>)
    41de:	f7fc fe45 	bl	e6c <printk>
		return -EINVAL;
    41e2:	f06f 0015 	mvn.w	r0, #21
    41e6:	e00f      	b.n	4208 <hci_driver_send+0x40>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    41e8:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
    41ea:	b992      	cbnz	r2, 4212 <hci_driver_send+0x4a>
	evt = hci_cmd_handle(buf);
    41ec:	f000 f9c8 	bl	4580 <hci_cmd_handle>
	if (evt) {
    41f0:	b130      	cbz	r0, 4200 <hci_driver_send+0x38>
		if (unlikely(!bt_hci_evt_is_prio(hdr->evt))) {
    41f2:	6883      	ldr	r3, [r0, #8]
    41f4:	781b      	ldrb	r3, [r3, #0]
    41f6:	3b0e      	subs	r3, #14
    41f8:	2b01      	cmp	r3, #1
    41fa:	d907      	bls.n	420c <hci_driver_send+0x44>
			bt_recv(evt);
    41fc:	f7fe fb64 	bl	28c8 <bt_recv>
		net_buf_unref(buf);
    4200:	4620      	mov	r0, r4
    4202:	f006 ffa5 	bl	b150 <net_buf_unref>
	return err;
    4206:	2000      	movs	r0, #0
}
    4208:	b004      	add	sp, #16
    420a:	bd10      	pop	{r4, pc}
			bt_recv_prio(evt);
    420c:	f7fe fc5a 	bl	2ac4 <bt_recv_prio>
    4210:	e7f6      	b.n	4200 <hci_driver_send+0x38>
		BT_ERR("Unknown HCI type %u", type);
    4212:	4b05      	ldr	r3, [pc, #20]	; (4228 <hci_driver_send+0x60>)
    4214:	9302      	str	r3, [sp, #8]
	switch (type) {
    4216:	9201      	str	r2, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    4218:	9300      	str	r3, [sp, #0]
    421a:	4a04      	ldr	r2, [pc, #16]	; (422c <hci_driver_send+0x64>)
    421c:	4b04      	ldr	r3, [pc, #16]	; (4230 <hci_driver_send+0x68>)
    421e:	4905      	ldr	r1, [pc, #20]	; (4234 <hci_driver_send+0x6c>)
    4220:	4806      	ldr	r0, [pc, #24]	; (423c <hci_driver_send+0x74>)
    4222:	f7fc fe23 	bl	e6c <printk>
    4226:	e7dc      	b.n	41e2 <hci_driver_send+0x1a>
    4228:	0000cbb3 	.word	0x0000cbb3
    422c:	0000d49b 	.word	0x0000d49b
    4230:	0000da05 	.word	0x0000da05
    4234:	0000d4ea 	.word	0x0000d4ea
    4238:	0000da69 	.word	0x0000da69
    423c:	0000da8a 	.word	0x0000da8a

00004240 <prio_recv_thread>:
{
    4240:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4242:	4c0c      	ldr	r4, [pc, #48]	; (4274 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    4244:	4d0c      	ldr	r5, [pc, #48]	; (4278 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    4246:	f10d 0102 	add.w	r1, sp, #2
    424a:	a801      	add	r0, sp, #4
    424c:	f005 f8ee 	bl	942c <ll_rx_get>
    4250:	2800      	cmp	r0, #0
    4252:	d1f8      	bne.n	4246 <prio_recv_thread+0x6>
		if (node_rx) {
    4254:	9b01      	ldr	r3, [sp, #4]
    4256:	b133      	cbz	r3, 4266 <prio_recv_thread+0x26>
			ll_rx_dequeue();
    4258:	f005 fc6e 	bl	9b38 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    425c:	9901      	ldr	r1, [sp, #4]
    425e:	4628      	mov	r0, r5
    4260:	f007 fd22 	bl	bca8 <k_queue_append>
    4264:	e7ef      	b.n	4246 <prio_recv_thread+0x6>
    4266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    426a:	4620      	mov	r0, r4
    426c:	f008 f831 	bl	c2d2 <_impl_k_sem_take>
    4270:	e7e9      	b.n	4246 <prio_recv_thread+0x6>
    4272:	bf00      	nop
    4274:	200034ac 	.word	0x200034ac
    4278:	200034c4 	.word	0x200034c4

0000427c <hci_driver_open>:
{
    427c:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    427e:	481a      	ldr	r0, [pc, #104]	; (42e8 <hci_driver_open+0x6c>)
{
    4280:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4282:	f005 fd37 	bl	9cf4 <ll_init>
	if (err) {
    4286:	4604      	mov	r4, r0
    4288:	b160      	cbz	r0, 42a4 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    428a:	4b18      	ldr	r3, [pc, #96]	; (42ec <hci_driver_open+0x70>)
    428c:	9302      	str	r3, [sp, #8]
    428e:	e88d 0018 	stmia.w	sp, {r3, r4}
    4292:	4a17      	ldr	r2, [pc, #92]	; (42f0 <hci_driver_open+0x74>)
    4294:	4b17      	ldr	r3, [pc, #92]	; (42f4 <hci_driver_open+0x78>)
    4296:	4918      	ldr	r1, [pc, #96]	; (42f8 <hci_driver_open+0x7c>)
    4298:	4818      	ldr	r0, [pc, #96]	; (42fc <hci_driver_open+0x80>)
    429a:	f7fc fde7 	bl	e6c <printk>
}
    429e:	4620      	mov	r0, r4
    42a0:	b006      	add	sp, #24
    42a2:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    42a4:	f000 fe50 	bl	4f48 <hci_init>

    42a8:	f06f 0309 	mvn.w	r3, #9
    42ac:	9303      	str	r3, [sp, #12]
    42ae:	9405      	str	r4, [sp, #20]
    42b0:	9404      	str	r4, [sp, #16]
    42b2:	9402      	str	r4, [sp, #8]
    42b4:	9401      	str	r4, [sp, #4]
    42b6:	9400      	str	r4, [sp, #0]
    42b8:	4b11      	ldr	r3, [pc, #68]	; (4300 <hci_driver_open+0x84>)
    42ba:	4912      	ldr	r1, [pc, #72]	; (4304 <hci_driver_open+0x88>)
    42bc:	4812      	ldr	r0, [pc, #72]	; (4308 <hci_driver_open+0x8c>)
    42be:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    42c2:	f008 f9cd 	bl	c660 <_impl_k_thread_create>
    42c6:	f06f 0307 	mvn.w	r3, #7
    42ca:	9303      	str	r3, [sp, #12]
    42cc:	9405      	str	r4, [sp, #20]
    42ce:	9404      	str	r4, [sp, #16]
    42d0:	9402      	str	r4, [sp, #8]
    42d2:	9401      	str	r4, [sp, #4]
    42d4:	9400      	str	r4, [sp, #0]
    42d6:	4b0d      	ldr	r3, [pc, #52]	; (430c <hci_driver_open+0x90>)
    42d8:	490d      	ldr	r1, [pc, #52]	; (4310 <hci_driver_open+0x94>)
    42da:	480e      	ldr	r0, [pc, #56]	; (4314 <hci_driver_open+0x98>)
    42dc:	f240 522c 	movw	r2, #1324	; 0x52c
    42e0:	f008 f9be 	bl	c660 <_impl_k_thread_create>
    42e4:	e7db      	b.n	429e <hci_driver_open+0x22>
    42e6:	bf00      	nop
    42e8:	200034ac 	.word	0x200034ac
    42ec:	0000cbb3 	.word	0x0000cbb3
    42f0:	0000d49b 	.word	0x0000d49b
    42f4:	0000da15 	.word	0x0000da15
    42f8:	0000d4ea 	.word	0x0000d4ea
    42fc:	0000da3c 	.word	0x0000da3c
    4300:	00004241 	.word	0x00004241
    4304:	20001840 	.word	0x20001840
    4308:	2000116c 	.word	0x2000116c
    430c:	00004129 	.word	0x00004129
    4310:	20001b30 	.word	0x20001b30
    4314:	200010fc 	.word	0x200010fc

00004318 <sys_put_le32>:
	dst[1] = val >> 8;
    4318:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    431c:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    431e:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    4320:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    4322:	0a00      	lsrs	r0, r0, #8
    4324:	704b      	strb	r3, [r1, #1]
    4326:	70c8      	strb	r0, [r1, #3]
    4328:	4770      	bx	lr

0000432a <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    432a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    432c:	3008      	adds	r0, #8
{
    432e:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    4330:	2102      	movs	r1, #2
{
    4332:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    4334:	f006 ff3e 	bl	b1b4 <net_buf_simple_add>
	hdr->evt = evt;
    4338:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    433a:	7044      	strb	r4, [r0, #1]
    433c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004340 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    4340:	b538      	push	{r3, r4, r5, lr}
    4342:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    4348:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    434a:	f7fe fe5b 	bl	3004 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    434e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4350:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4352:	b2d2      	uxtb	r2, r2
    4354:	210e      	movs	r1, #14
    4356:	f7ff ffe8 	bl	432a <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    435a:	6820      	ldr	r0, [r4, #0]
    435c:	2103      	movs	r1, #3
    435e:	3008      	adds	r0, #8
    4360:	f006 ff28 	bl	b1b4 <net_buf_simple_add>
	cc->ncmd = 1;
    4364:	2301      	movs	r3, #1
    4366:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    4368:	4b05      	ldr	r3, [pc, #20]	; (4380 <cmd_complete+0x40>)
    436a:	881b      	ldrh	r3, [r3, #0]
    436c:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4370:	6820      	ldr	r0, [r4, #0]
    4372:	4629      	mov	r1, r5
    4374:	3008      	adds	r0, #8
}
    4376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    437a:	f006 bf1b 	b.w	b1b4 <net_buf_simple_add>
    437e:	bf00      	nop
    4380:	200004ec 	.word	0x200004ec

00004384 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4384:	b570      	push	{r4, r5, r6, lr}
    4386:	4604      	mov	r4, r0
    4388:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    438a:	3201      	adds	r2, #1
{
    438c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    438e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4390:	b2d2      	uxtb	r2, r2
    4392:	213e      	movs	r1, #62	; 0x3e
    4394:	f7ff ffc9 	bl	432a <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    4398:	2101      	movs	r1, #1
    439a:	4620      	mov	r0, r4
    439c:	f006 ff0a 	bl	b1b4 <net_buf_simple_add>
	me->subevent = subevt;
    43a0:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    43a2:	4629      	mov	r1, r5
    43a4:	4620      	mov	r0, r4
}
    43a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    43aa:	f006 bf03 	b.w	b1b4 <net_buf_simple_add>
	...

000043b0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    43b0:	b570      	push	{r4, r5, r6, lr}
    43b2:	4604      	mov	r4, r0
    43b4:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    43b6:	4b13      	ldr	r3, [pc, #76]	; (4404 <le_remote_feat_complete+0x54>)
{
    43b8:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    43ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    43be:	2200      	movs	r2, #0
    43c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    43c4:	4313      	orrs	r3, r2
{
    43c6:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    43c8:	d01b      	beq.n	4402 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    43ca:	4b0f      	ldr	r3, [pc, #60]	; (4408 <le_remote_feat_complete+0x58>)
    43cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    43d0:	2300      	movs	r3, #0
    43d2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    43d6:	4313      	orrs	r3, r2
    43d8:	d013      	beq.n	4402 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    43da:	220b      	movs	r2, #11
    43dc:	2104      	movs	r1, #4
    43de:	f7ff ffd1 	bl	4384 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    43e2:	2208      	movs	r2, #8
	sep->status = status;
    43e4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    43e6:	f8a0 6001 	strh.w	r6, [r0, #1]
    43ea:	3003      	adds	r0, #3
	if (!status) {
    43ec:	b924      	cbnz	r4, 43f8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    43ee:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    43f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    43f4:	f7fd bb6a 	b.w	1acc <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    43f8:	2100      	movs	r1, #0
}
    43fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    43fe:	f7fd bb91 	b.w	1b24 <memset>
    4402:	bd70      	pop	{r4, r5, r6, pc}
    4404:	200032a0 	.word	0x200032a0
    4408:	200032a8 	.word	0x200032a8

0000440c <bt_addr_le_to_str.constprop.43>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    440c:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    440e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4410:	b08a      	sub	sp, #40	; 0x28
    4412:	4604      	mov	r4, r0
    4414:	460e      	mov	r6, r1
    4416:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    4418:	2b03      	cmp	r3, #3
    441a:	d820      	bhi.n	445e <bt_addr_le_to_str.constprop.43+0x52>
    441c:	e8df f003 	tbb	[pc, r3]
    4420:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    4424:	4911      	ldr	r1, [pc, #68]	; (446c <bt_addr_le_to_str.constprop.43+0x60>)
		strcpy(type, "random");
    4426:	4628      	mov	r0, r5
    4428:	f7fd fb24 	bl	1a74 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    442c:	7862      	ldrb	r2, [r4, #1]
    442e:	9204      	str	r2, [sp, #16]
    4430:	78a2      	ldrb	r2, [r4, #2]
    4432:	9203      	str	r2, [sp, #12]
    4434:	78e2      	ldrb	r2, [r4, #3]
    4436:	9202      	str	r2, [sp, #8]
    4438:	7922      	ldrb	r2, [r4, #4]
    443a:	9201      	str	r2, [sp, #4]
    443c:	7962      	ldrb	r2, [r4, #5]
    443e:	9200      	str	r2, [sp, #0]
    4440:	79a3      	ldrb	r3, [r4, #6]
    4442:	9505      	str	r5, [sp, #20]
    4444:	4a0a      	ldr	r2, [pc, #40]	; (4470 <bt_addr_le_to_str.constprop.43+0x64>)
    4446:	211b      	movs	r1, #27
    4448:	4630      	mov	r0, r6
    444a:	f7fc fd1d 	bl	e88 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    444e:	b00a      	add	sp, #40	; 0x28
    4450:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4452:	4908      	ldr	r1, [pc, #32]	; (4474 <bt_addr_le_to_str.constprop.43+0x68>)
    4454:	e7e7      	b.n	4426 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "public id");
    4456:	4908      	ldr	r1, [pc, #32]	; (4478 <bt_addr_le_to_str.constprop.43+0x6c>)
    4458:	e7e5      	b.n	4426 <bt_addr_le_to_str.constprop.43+0x1a>
		strcpy(type, "random id");
    445a:	4908      	ldr	r1, [pc, #32]	; (447c <bt_addr_le_to_str.constprop.43+0x70>)
    445c:	e7e3      	b.n	4426 <bt_addr_le_to_str.constprop.43+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    445e:	4a08      	ldr	r2, [pc, #32]	; (4480 <bt_addr_le_to_str.constprop.43+0x74>)
    4460:	210a      	movs	r1, #10
    4462:	4628      	mov	r0, r5
    4464:	f7fc fd10 	bl	e88 <snprintk>
    4468:	e7e0      	b.n	442c <bt_addr_le_to_str.constprop.43+0x20>
    446a:	bf00      	nop
    446c:	0000d07a 	.word	0x0000d07a
    4470:	0000d0a3 	.word	0x0000d0a3
    4474:	0000d081 	.word	0x0000d081
    4478:	0000d088 	.word	0x0000d088
    447c:	0000d092 	.word	0x0000d092
    4480:	0000d09c 	.word	0x0000d09c

00004484 <le_adv_ext_report.isra.39>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4488:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    448a:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    448c:	4d32      	ldr	r5, [pc, #200]	; (4558 <le_adv_ext_report.isra.39+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    448e:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4490:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4492:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4494:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4496:	9003      	str	r0, [sp, #12]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4498:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    449a:	b25b      	sxtb	r3, r3
    449c:	9306      	str	r3, [sp, #24]
    449e:	7823      	ldrb	r3, [r4, #0]
    44a0:	9201      	str	r2, [sp, #4]
    44a2:	09d9      	lsrs	r1, r3, #7
    44a4:	9105      	str	r1, [sp, #20]
    44a6:	f3c3 1180 	ubfx	r1, r3, #6, #1
    44aa:	f003 030f 	and.w	r3, r3, #15
    44ae:	9104      	str	r1, [sp, #16]
    44b0:	9302      	str	r3, [sp, #8]
    44b2:	9500      	str	r5, [sp, #0]
    44b4:	4b29      	ldr	r3, [pc, #164]	; (455c <le_adv_ext_report.isra.39+0xd8>)
    44b6:	4a2a      	ldr	r2, [pc, #168]	; (4560 <le_adv_ext_report.isra.39+0xdc>)
    44b8:	492a      	ldr	r1, [pc, #168]	; (4564 <le_adv_ext_report.isra.39+0xe0>)
    44ba:	482b      	ldr	r0, [pc, #172]	; (4568 <le_adv_ext_report.isra.39+0xe4>)
    44bc:	f7fc fcd6 	bl	e6c <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    44c0:	7823      	ldrb	r3, [r4, #0]
    44c2:	f003 030f 	and.w	r3, r3, #15
    44c6:	2b07      	cmp	r3, #7
    44c8:	d143      	bne.n	4552 <le_adv_ext_report.isra.39+0xce>
    44ca:	7863      	ldrb	r3, [r4, #1]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d040      	beq.n	4552 <le_adv_ext_report.isra.39+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    44d0:	78a3      	ldrb	r3, [r4, #2]
    44d2:	4924      	ldr	r1, [pc, #144]	; (4564 <le_adv_ext_report.isra.39+0xe0>)
    44d4:	9503      	str	r5, [sp, #12]
    44d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    44da:	099b      	lsrs	r3, r3, #6
    44dc:	9202      	str	r2, [sp, #8]
    44de:	9301      	str	r3, [sp, #4]
    44e0:	9500      	str	r5, [sp, #0]
    44e2:	4b1e      	ldr	r3, [pc, #120]	; (455c <le_adv_ext_report.isra.39+0xd8>)
    44e4:	4a1e      	ldr	r2, [pc, #120]	; (4560 <le_adv_ext_report.isra.39+0xdc>)
    44e6:	4821      	ldr	r0, [pc, #132]	; (456c <le_adv_ext_report.isra.39+0xe8>)
    44e8:	f7fc fcc0 	bl	e6c <printk>
		if (!p->ext_hdr_len) {
    44ec:	78a3      	ldrb	r3, [r4, #2]
    44ee:	0699      	lsls	r1, r3, #26
    44f0:	d02f      	beq.n	4552 <le_adv_ext_report.isra.39+0xce>
		if (h->adv_addr) {
    44f2:	78e3      	ldrb	r3, [r4, #3]
    44f4:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    44f6:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    44fa:	d51c      	bpl.n	4536 <le_adv_ext_report.isra.39+0xb2>
			addr.type = adv->tx_addr;
    44fc:	7823      	ldrb	r3, [r4, #0]
    44fe:	af12      	add	r7, sp, #72	; 0x48
    4500:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4504:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4508:	2206      	movs	r2, #6
    450a:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    450c:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4510:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    4514:	f7fd fada 	bl	1acc <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4518:	4641      	mov	r1, r8
    451a:	4638      	mov	r0, r7
    451c:	f7ff ff76 	bl	440c <bt_addr_le_to_str.constprop.43>
			BT_WARN("AdvA: %s", addr_str);
    4520:	9502      	str	r5, [sp, #8]
    4522:	e88d 0120 	stmia.w	sp, {r5, r8}
    4526:	4b0d      	ldr	r3, [pc, #52]	; (455c <le_adv_ext_report.isra.39+0xd8>)
    4528:	4a0d      	ldr	r2, [pc, #52]	; (4560 <le_adv_ext_report.isra.39+0xdc>)
    452a:	490e      	ldr	r1, [pc, #56]	; (4564 <le_adv_ext_report.isra.39+0xe0>)
    452c:	4810      	ldr	r0, [pc, #64]	; (4570 <le_adv_ext_report.isra.39+0xec>)
			ptr += BDADDR_SIZE;
    452e:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    4532:	f7fc fc9b 	bl	e6c <printk>
		if (h->tx_pwr) {
    4536:	78e3      	ldrb	r3, [r4, #3]
    4538:	065b      	lsls	r3, r3, #25
    453a:	d50a      	bpl.n	4552 <le_adv_ext_report.isra.39+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    453c:	9502      	str	r5, [sp, #8]
    453e:	f996 3000 	ldrsb.w	r3, [r6]
    4542:	9301      	str	r3, [sp, #4]
    4544:	9500      	str	r5, [sp, #0]
    4546:	4b05      	ldr	r3, [pc, #20]	; (455c <le_adv_ext_report.isra.39+0xd8>)
    4548:	4a05      	ldr	r2, [pc, #20]	; (4560 <le_adv_ext_report.isra.39+0xdc>)
    454a:	4906      	ldr	r1, [pc, #24]	; (4564 <le_adv_ext_report.isra.39+0xe0>)
    454c:	4809      	ldr	r0, [pc, #36]	; (4574 <le_adv_ext_report.isra.39+0xf0>)
    454e:	f7fc fc8d 	bl	e6c <printk>
}
    4552:	b012      	add	sp, #72	; 0x48
    4554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4558:	0000cbb3 	.word	0x0000cbb3
    455c:	0000dac8 	.word	0x0000dac8
    4560:	0000d4e3 	.word	0x0000d4e3
    4564:	0000d4ea 	.word	0x0000d4ea
    4568:	0000dbea 	.word	0x0000dbea
    456c:	0000dc37 	.word	0x0000dc37
    4570:	0000dc68 	.word	0x0000dc68
    4574:	0000dc81 	.word	0x0000dc81

00004578 <sys_get_le64>:
{
    4578:	4603      	mov	r3, r0
}
    457a:	6800      	ldr	r0, [r0, #0]
    457c:	6859      	ldr	r1, [r3, #4]
    457e:	4770      	bx	lr

00004580 <hci_cmd_handle>:
{
    4580:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    4582:	8981      	ldrh	r1, [r0, #12]
{
    4584:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    4586:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
    4588:	2902      	cmp	r1, #2
{
    458a:	4605      	mov	r5, r0
	struct net_buf *evt = NULL;
    458c:	940d      	str	r4, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    458e:	d80b      	bhi.n	45a8 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    4590:	4bbb      	ldr	r3, [pc, #748]	; (4880 <hci_cmd_handle+0x300>)
    4592:	9301      	str	r3, [sp, #4]
    4594:	9300      	str	r3, [sp, #0]
    4596:	4abb      	ldr	r2, [pc, #748]	; (4884 <hci_cmd_handle+0x304>)
    4598:	4bbb      	ldr	r3, [pc, #748]	; (4888 <hci_cmd_handle+0x308>)
    459a:	49bc      	ldr	r1, [pc, #752]	; (488c <hci_cmd_handle+0x30c>)
    459c:	48bc      	ldr	r0, [pc, #752]	; (4890 <hci_cmd_handle+0x310>)
		BT_ERR("Invalid HCI CMD packet length");
    459e:	f7fc fc65 	bl	e6c <printk>
		return NULL;
    45a2:	4620      	mov	r0, r4
}
    45a4:	b019      	add	sp, #100	; 0x64
    45a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    45a8:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    45aa:	4eba      	ldr	r6, [pc, #744]	; (4894 <hci_cmd_handle+0x314>)
    45ac:	781a      	ldrb	r2, [r3, #0]
    45ae:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    45b0:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    45b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    45b6:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    45b8:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    45ba:	d907      	bls.n	45cc <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    45bc:	4bb0      	ldr	r3, [pc, #704]	; (4880 <hci_cmd_handle+0x300>)
    45be:	9301      	str	r3, [sp, #4]
    45c0:	9300      	str	r3, [sp, #0]
    45c2:	4ab0      	ldr	r2, [pc, #704]	; (4884 <hci_cmd_handle+0x304>)
    45c4:	4bb0      	ldr	r3, [pc, #704]	; (4888 <hci_cmd_handle+0x308>)
    45c6:	49b1      	ldr	r1, [pc, #708]	; (488c <hci_cmd_handle+0x30c>)
    45c8:	48b3      	ldr	r0, [pc, #716]	; (4898 <hci_cmd_handle+0x318>)
    45ca:	e7e8      	b.n	459e <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    45cc:	2103      	movs	r1, #3
    45ce:	f105 0008 	add.w	r0, r5, #8
    45d2:	f006 fe06 	bl	b1e2 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    45d6:	8833      	ldrh	r3, [r6, #0]
    45d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    45dc:	0a9b      	lsrs	r3, r3, #10
    45de:	2b04      	cmp	r3, #4
    45e0:	d068      	beq.n	46b4 <hci_cmd_handle+0x134>
    45e2:	d807      	bhi.n	45f4 <hci_cmd_handle+0x74>
    45e4:	2b03      	cmp	r3, #3
    45e6:	d025      	beq.n	4634 <hci_cmd_handle+0xb4>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    45e8:	2101      	movs	r1, #1
    45ea:	a80d      	add	r0, sp, #52	; 0x34
    45ec:	f7ff fea8 	bl	4340 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    45f0:	2301      	movs	r3, #1
    45f2:	e11f      	b.n	4834 <hci_cmd_handle+0x2b4>
	switch (BT_OGF(_opcode)) {
    45f4:	2b08      	cmp	r3, #8
    45f6:	f000 80de 	beq.w	47b6 <hci_cmd_handle+0x236>
    45fa:	2b3f      	cmp	r3, #63	; 0x3f
    45fc:	d1f4      	bne.n	45e8 <hci_cmd_handle+0x68>
	switch (ocf) {
    45fe:	3a01      	subs	r2, #1
    4600:	2a09      	cmp	r2, #9
    4602:	d8f1      	bhi.n	45e8 <hci_cmd_handle+0x68>
    4604:	a301      	add	r3, pc, #4	; (adr r3, 460c <hci_cmd_handle+0x8c>)
    4606:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    460a:	bf00      	nop
    460c:	00004a0d 	.word	0x00004a0d
    4610:	00004a3b 	.word	0x00004a3b
    4614:	00004a63 	.word	0x00004a63
    4618:	000045e9 	.word	0x000045e9
    461c:	000045e9 	.word	0x000045e9
    4620:	00004aa7 	.word	0x00004aa7
    4624:	000045e9 	.word	0x000045e9
    4628:	00004a79 	.word	0x00004a79
    462c:	00004ab1 	.word	0x00004ab1
    4630:	00004b1d 	.word	0x00004b1d
	switch (ocf) {
    4634:	2a03      	cmp	r2, #3
    4636:	d013      	beq.n	4660 <hci_cmd_handle+0xe0>
    4638:	d808      	bhi.n	464c <hci_cmd_handle+0xcc>
    463a:	2a01      	cmp	r2, #1
    463c:	d1d4      	bne.n	45e8 <hci_cmd_handle+0x68>
	event_mask = sys_get_le64(cmd->events);
    463e:	68a8      	ldr	r0, [r5, #8]
    4640:	f7ff ff9a 	bl	4578 <sys_get_le64>
    4644:	4b95      	ldr	r3, [pc, #596]	; (489c <hci_cmd_handle+0x31c>)
    4646:	e9c3 0100 	strd	r0, r1, [r3]
    464a:	e003      	b.n	4654 <hci_cmd_handle+0xd4>
	switch (ocf) {
    464c:	2a2d      	cmp	r2, #45	; 0x2d
    464e:	d01a      	beq.n	4686 <hci_cmd_handle+0x106>
    4650:	2a63      	cmp	r2, #99	; 0x63
    4652:	d1c9      	bne.n	45e8 <hci_cmd_handle+0x68>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4654:	2101      	movs	r1, #1
    4656:	a80d      	add	r0, sp, #52	; 0x34
    4658:	f7ff fe72 	bl	4340 <cmd_complete>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    465c:	7004      	strb	r4, [r0, #0]
    465e:	e027      	b.n	46b0 <hci_cmd_handle+0x130>
	dup_count = -1;
    4660:	4b8f      	ldr	r3, [pc, #572]	; (48a0 <hci_cmd_handle+0x320>)
    4662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4666:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    4668:	4b8c      	ldr	r3, [pc, #560]	; (489c <hci_cmd_handle+0x31c>)
    466a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    466e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4672:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4676:	4b8b      	ldr	r3, [pc, #556]	; (48a4 <hci_cmd_handle+0x324>)
    4678:	201f      	movs	r0, #31
    467a:	2100      	movs	r1, #0
    467c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    4680:	f004 fe3a 	bl	92f8 <ll_reset>
    4684:	e7e6      	b.n	4654 <hci_cmd_handle+0xd4>
    4686:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    4688:	2104      	movs	r1, #4
    468a:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    468c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    468e:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    4690:	f7ff fe56 	bl	4340 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    4694:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    4696:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    4698:	1cc2      	adds	r2, r0, #3
    469a:	4639      	mov	r1, r7
    469c:	4630      	mov	r0, r6
    469e:	f004 febb 	bl	9418 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    46a2:	2800      	cmp	r0, #0
    46a4:	bf14      	ite	ne
    46a6:	2302      	movne	r3, #2
    46a8:	2300      	moveq	r3, #0
    46aa:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    46ac:	f8a4 5001 	strh.w	r5, [r4, #1]
	return evt;
    46b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    46b2:	e777      	b.n	45a4 <hci_cmd_handle+0x24>
	switch (ocf) {
    46b4:	3a01      	subs	r2, #1
    46b6:	2a08      	cmp	r2, #8
    46b8:	d896      	bhi.n	45e8 <hci_cmd_handle+0x68>
    46ba:	a301      	add	r3, pc, #4	; (adr r3, 46c0 <hci_cmd_handle+0x140>)
    46bc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    46c0:	000046e5 	.word	0x000046e5
    46c4:	0000470f 	.word	0x0000470f
    46c8:	00004783 	.word	0x00004783
    46cc:	000045e9 	.word	0x000045e9
    46d0:	000045e9 	.word	0x000045e9
    46d4:	000045e9 	.word	0x000045e9
    46d8:	000045e9 	.word	0x000045e9
    46dc:	000045e9 	.word	0x000045e9
    46e0:	0000479f 	.word	0x0000479f
	rp = cmd_complete(evt, sizeof(*rp));
    46e4:	2109      	movs	r1, #9
    46e6:	a80d      	add	r0, sp, #52	; 0x34
    46e8:	f7ff fe2a 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    46ec:	2300      	movs	r3, #0
    46ee:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    46f0:	7083      	strb	r3, [r0, #2]
    46f2:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    46f4:	f06f 030e 	mvn.w	r3, #14
    46f8:	7143      	strb	r3, [r0, #5]
    46fa:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    46fc:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    46fe:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    4704:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    4706:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4708:	71c3      	strb	r3, [r0, #7]
    470a:	7203      	strb	r3, [r0, #8]
    470c:	e7d0      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    470e:	2141      	movs	r1, #65	; 0x41
    4710:	a80d      	add	r0, sp, #52	; 0x34
    4712:	f7ff fe15 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4716:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4718:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    471a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    471c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4720:	f7fd fa00 	bl	1b24 <memset>
	rp->commands[2] |= BIT(7);
    4724:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    4726:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    4728:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    472a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    472e:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    4730:	79a3      	ldrb	r3, [r4, #6]
    4732:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4736:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    4738:	7ae3      	ldrb	r3, [r4, #11]
    473a:	f043 0304 	orr.w	r3, r3, #4
    473e:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    4740:	7be3      	ldrb	r3, [r4, #15]
    4742:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    4746:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    4748:	7c23      	ldrb	r3, [r4, #16]
    474a:	f043 0302 	orr.w	r3, r3, #2
    474e:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    4750:	7de3      	ldrb	r3, [r4, #23]
    4752:	f043 0304 	orr.w	r3, r3, #4
    4756:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    4758:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    475a:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(2) | BIT(3);
    475e:	f063 0330 	orn	r3, r3, #48	; 0x30
	rp->commands[27] |= BIT(6) | BIT(7);
    4762:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(2) | BIT(3);
    4764:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    4766:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    4768:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    476c:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4770:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    4774:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    4778:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    477a:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    477c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    4780:	e796      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4782:	2109      	movs	r1, #9
    4784:	a80d      	add	r0, sp, #52	; 0x34
    4786:	f7ff fddb 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    478a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    478c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    478e:	2208      	movs	r2, #8
	rp->status = 0x00;
    4790:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4794:	f7fd f9c6 	bl	1b24 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4798:	2360      	movs	r3, #96	; 0x60
    479a:	7163      	strb	r3, [r4, #5]
    479c:	e788      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    479e:	2107      	movs	r1, #7
    47a0:	a80d      	add	r0, sp, #52	; 0x34
    47a2:	f7ff fdcd 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    47a6:	4601      	mov	r1, r0
    47a8:	2300      	movs	r3, #0
    47aa:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    47ae:	4618      	mov	r0, r3
    47b0:	f7ff fc5c 	bl	406c <ll_addr_get>
    47b4:	e77c      	b.n	46b0 <hci_cmd_handle+0x130>
	switch (ocf) {
    47b6:	2a0b      	cmp	r2, #11
    47b8:	f000 8119 	beq.w	49ee <hci_cmd_handle+0x46e>
    47bc:	d83c      	bhi.n	4838 <hci_cmd_handle+0x2b8>
    47be:	2a06      	cmp	r2, #6
    47c0:	f000 80f1 	beq.w	49a6 <hci_cmd_handle+0x426>
    47c4:	d81e      	bhi.n	4804 <hci_cmd_handle+0x284>
    47c6:	2a02      	cmp	r2, #2
    47c8:	f000 809a 	beq.w	4900 <hci_cmd_handle+0x380>
    47cc:	d80e      	bhi.n	47ec <hci_cmd_handle+0x26c>
    47ce:	2a01      	cmp	r2, #1
    47d0:	f47f af0a 	bne.w	45e8 <hci_cmd_handle+0x68>
	le_event_mask = sys_get_le64(cmd->events);
    47d4:	68a8      	ldr	r0, [r5, #8]
    47d6:	f7ff fecf 	bl	4578 <sys_get_le64>
    47da:	4b32      	ldr	r3, [pc, #200]	; (48a4 <hci_cmd_handle+0x324>)
    47dc:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    47e0:	2101      	movs	r1, #1
    47e2:	a80d      	add	r0, sp, #52	; 0x34
    47e4:	f7ff fdac 	bl	4340 <cmd_complete>
	ccst->status = 0x00;
    47e8:	2300      	movs	r3, #0
    47ea:	e023      	b.n	4834 <hci_cmd_handle+0x2b4>
	switch (ocf) {
    47ec:	2a03      	cmp	r2, #3
    47ee:	f000 8093 	beq.w	4918 <hci_cmd_handle+0x398>
    47f2:	2a05      	cmp	r2, #5
    47f4:	f47f aef8 	bne.w	45e8 <hci_cmd_handle+0x68>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    47f8:	68a9      	ldr	r1, [r5, #8]
    47fa:	2001      	movs	r0, #1
    47fc:	f7ff fc50 	bl	40a0 <ll_addr_set>
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    4800:	4604      	mov	r4, r0
    4802:	e727      	b.n	4654 <hci_cmd_handle+0xd4>
	switch (ocf) {
    4804:	2a08      	cmp	r2, #8
    4806:	f000 80e6 	beq.w	49d6 <hci_cmd_handle+0x456>
    480a:	f0c0 817f 	bcc.w	4b0c <hci_cmd_handle+0x58c>
    480e:	2a09      	cmp	r2, #9
    4810:	f000 80e7 	beq.w	49e2 <hci_cmd_handle+0x462>
    4814:	2a0a      	cmp	r2, #10
    4816:	f47f aee7 	bne.w	45e8 <hci_cmd_handle+0x68>
	status = ll_adv_enable(cmd->enable);
    481a:	68ab      	ldr	r3, [r5, #8]
    481c:	7818      	ldrb	r0, [r3, #0]
    481e:	f005 fcb3 	bl	a188 <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
    4822:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4824:	2101      	movs	r1, #1
    4826:	a80d      	add	r0, sp, #52	; 0x34
    4828:	f7ff fd8a 	bl	4340 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    482c:	2c00      	cmp	r4, #0
    482e:	bf14      	ite	ne
    4830:	230c      	movne	r3, #12
    4832:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4834:	7003      	strb	r3, [r0, #0]
    4836:	e73b      	b.n	46b0 <hci_cmd_handle+0x130>
	switch (ocf) {
    4838:	2a12      	cmp	r2, #18
    483a:	f000 8093 	beq.w	4964 <hci_cmd_handle+0x3e4>
    483e:	d835      	bhi.n	48ac <hci_cmd_handle+0x32c>
    4840:	2a0f      	cmp	r2, #15
    4842:	d07b      	beq.n	493c <hci_cmd_handle+0x3bc>
    4844:	d813      	bhi.n	486e <hci_cmd_handle+0x2ee>
    4846:	2a0c      	cmp	r2, #12
    4848:	f47f aece 	bne.w	45e8 <hci_cmd_handle+0x68>
    484c:	68aa      	ldr	r2, [r5, #8]
    484e:	4b14      	ldr	r3, [pc, #80]	; (48a0 <hci_cmd_handle+0x320>)
	if (cmd->enable && cmd->filter_dup) {
    4850:	7810      	ldrb	r0, [r2, #0]
    4852:	2800      	cmp	r0, #0
    4854:	f000 80d7 	beq.w	4a06 <hci_cmd_handle+0x486>
    4858:	7852      	ldrb	r2, [r2, #1]
    485a:	2a00      	cmp	r2, #0
    485c:	f000 80d3 	beq.w	4a06 <hci_cmd_handle+0x486>
		dup_count = 0;
    4860:	2200      	movs	r2, #0
    4862:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    4864:	4b10      	ldr	r3, [pc, #64]	; (48a8 <hci_cmd_handle+0x328>)
		dup_count = -1;
    4866:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    4868:	f005 fd0e 	bl	a288 <ll_scan_enable>
    486c:	e7d9      	b.n	4822 <hci_cmd_handle+0x2a2>
	switch (ocf) {
    486e:	2a10      	cmp	r2, #16
    4870:	d06f      	beq.n	4952 <hci_cmd_handle+0x3d2>
    4872:	2a11      	cmp	r2, #17
    4874:	f47f aeb8 	bne.w	45e8 <hci_cmd_handle+0x68>
	status = ll_wl_add(&cmd->addr);
    4878:	68a8      	ldr	r0, [r5, #8]
    487a:	f005 fd69 	bl	a350 <ll_wl_add>
    487e:	e7bf      	b.n	4800 <hci_cmd_handle+0x280>
    4880:	0000cbb3 	.word	0x0000cbb3
    4884:	0000d49b 	.word	0x0000d49b
    4888:	0000dab9 	.word	0x0000dab9
    488c:	0000d4ea 	.word	0x0000d4ea
    4890:	0000db1e 	.word	0x0000db1e
    4894:	200004ec 	.word	0x200004ec
    4898:	0000db44 	.word	0x0000db44
    489c:	200032a0 	.word	0x200032a0
    48a0:	200004f0 	.word	0x200004f0
    48a4:	200032a8 	.word	0x200032a8
    48a8:	200004f4 	.word	0x200004f4
	switch (ocf) {
    48ac:	2a18      	cmp	r2, #24
    48ae:	d05d      	beq.n	496c <hci_cmd_handle+0x3ec>
    48b0:	d815      	bhi.n	48de <hci_cmd_handle+0x35e>
    48b2:	2a17      	cmp	r2, #23
    48b4:	f47f ae98 	bne.w	45e8 <hci_cmd_handle+0x68>
    48b8:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    48ba:	2300      	movs	r3, #0
    48bc:	aa0e      	add	r2, sp, #56	; 0x38
    48be:	f100 0110 	add.w	r1, r0, #16
    48c2:	f005 fe4d 	bl	a560 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    48c6:	2111      	movs	r1, #17
    48c8:	a80d      	add	r0, sp, #52	; 0x34
    48ca:	f7ff fd39 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    48ce:	2300      	movs	r3, #0
    48d0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    48d4:	2210      	movs	r2, #16
    48d6:	a90e      	add	r1, sp, #56	; 0x38
	memcpy(rp->info, build_info, sizeof(build_info));
    48d8:	f7fd f8f8 	bl	1acc <memcpy>
    48dc:	e6e8      	b.n	46b0 <hci_cmd_handle+0x130>
	switch (ocf) {
    48de:	2a1c      	cmp	r2, #28
    48e0:	d04f      	beq.n	4982 <hci_cmd_handle+0x402>
    48e2:	2a4b      	cmp	r2, #75	; 0x4b
    48e4:	f47f ae80 	bne.w	45e8 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    48e8:	2103      	movs	r1, #3
    48ea:	a80d      	add	r0, sp, #52	; 0x34
    48ec:	f7ff fd28 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    48f0:	4601      	mov	r1, r0
    48f2:	2300      	movs	r3, #0
    48f4:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    48f8:	3001      	adds	r0, #1
    48fa:	f7ff fbed 	bl	40d8 <ll_tx_pwr_get>
    48fe:	e6d7      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4900:	2104      	movs	r1, #4
    4902:	a80d      	add	r0, sp, #52	; 0x34
    4904:	f7ff fd1c 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4908:	2300      	movs	r3, #0
    490a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    490c:	221b      	movs	r2, #27
    490e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4910:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4912:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4914:	70c3      	strb	r3, [r0, #3]
    4916:	e6cb      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4918:	2109      	movs	r1, #9
    491a:	a80d      	add	r0, sp, #52	; 0x34
    491c:	f7ff fd10 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4920:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4922:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4924:	2208      	movs	r2, #8
	rp->status = 0x00;
    4926:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    492a:	f7fd f8fb 	bl	1b24 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    492e:	230c      	movs	r3, #12
    4930:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    4932:	2340      	movs	r3, #64	; 0x40
    4934:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    4936:	2301      	movs	r3, #1
    4938:	70e3      	strb	r3, [r4, #3]
    493a:	e6b9      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    493c:	2102      	movs	r1, #2
    493e:	a80d      	add	r0, sp, #52	; 0x34
    4940:	f7ff fcfe 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4944:	2300      	movs	r3, #0
    4946:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    4948:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    494a:	f005 fce9 	bl	a320 <ll_wl_size_get>
    494e:	7060      	strb	r0, [r4, #1]
    4950:	e6ae      	b.n	46b0 <hci_cmd_handle+0x130>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4952:	2101      	movs	r1, #1
    4954:	a80d      	add	r0, sp, #52	; 0x34
    4956:	f7ff fcf3 	bl	4340 <cmd_complete>
    495a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    495c:	f005 fce2 	bl	a324 <ll_wl_clear>
    4960:	7020      	strb	r0, [r4, #0]
    4962:	e6a5      	b.n	46b0 <hci_cmd_handle+0x130>
	status = ll_wl_remove(&cmd->addr);
    4964:	68a8      	ldr	r0, [r5, #8]
    4966:	f005 fd2b 	bl	a3c0 <ll_wl_remove>
    496a:	e749      	b.n	4800 <hci_cmd_handle+0x280>
	rp = cmd_complete(evt, sizeof(*rp));
    496c:	2109      	movs	r1, #9
    496e:	a80d      	add	r0, sp, #52	; 0x34
    4970:	f7ff fce6 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4974:	2300      	movs	r3, #0
    4976:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    497a:	2108      	movs	r1, #8
    497c:	f7ff fbb0 	bl	40e0 <bt_rand>
    4980:	e696      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4982:	2109      	movs	r1, #9
    4984:	a80d      	add	r0, sp, #52	; 0x34
    4986:	f7ff fcdb 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    498a:	4601      	mov	r1, r0
    498c:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    498e:	4604      	mov	r4, r0
	rp->status = 0x00;
    4990:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    4994:	f243 3033 	movw	r0, #13107	; 0x3333
    4998:	f7ff fcbe 	bl	4318 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    499c:	1d61      	adds	r1, r4, #5
    499e:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    49a0:	f7ff fcba 	bl	4318 <sys_put_le32>
    49a4:	e684      	b.n	46b0 <hci_cmd_handle+0x130>
    49a6:	68a9      	ldr	r1, [r5, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    49a8:	790b      	ldrb	r3, [r1, #4]
    49aa:	880a      	ldrh	r2, [r1, #0]
    49ac:	940a      	str	r4, [sp, #40]	; 0x28
    49ae:	9409      	str	r4, [sp, #36]	; 0x24
    49b0:	9408      	str	r4, [sp, #32]
    49b2:	9407      	str	r4, [sp, #28]
    49b4:	9406      	str	r4, [sp, #24]
    49b6:	9405      	str	r4, [sp, #20]
    49b8:	7b88      	ldrb	r0, [r1, #14]
    49ba:	9004      	str	r0, [sp, #16]
    49bc:	7b48      	ldrb	r0, [r1, #13]
    49be:	9003      	str	r0, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    49c0:	1dc8      	adds	r0, r1, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    49c2:	9002      	str	r0, [sp, #8]
    49c4:	7988      	ldrb	r0, [r1, #6]
    49c6:	9001      	str	r0, [sp, #4]
    49c8:	7949      	ldrb	r1, [r1, #5]
    49ca:	9100      	str	r1, [sp, #0]
    49cc:	4620      	mov	r0, r4
    49ce:	4621      	mov	r1, r4
    49d0:	f005 fa38 	bl	9e44 <ll_adv_params_set>
    49d4:	e714      	b.n	4800 <hci_cmd_handle+0x280>
    49d6:	68ab      	ldr	r3, [r5, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    49d8:	1c59      	adds	r1, r3, #1
    49da:	7818      	ldrb	r0, [r3, #0]
    49dc:	f005 fb36 	bl	a04c <ll_adv_data_set>
    49e0:	e6fe      	b.n	47e0 <hci_cmd_handle+0x260>
    49e2:	68ab      	ldr	r3, [r5, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    49e4:	1c59      	adds	r1, r3, #1
    49e6:	7818      	ldrb	r0, [r3, #0]
    49e8:	f005 fb88 	bl	a0fc <ll_scan_data_set>
    49ec:	e6f8      	b.n	47e0 <hci_cmd_handle+0x260>
    49ee:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    49f0:	7963      	ldrb	r3, [r4, #5]
    49f2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    49f6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    49fa:	7820      	ldrb	r0, [r4, #0]
    49fc:	79a4      	ldrb	r4, [r4, #6]
    49fe:	9400      	str	r4, [sp, #0]
    4a00:	f005 fc22 	bl	a248 <ll_scan_params_set>
    4a04:	e70d      	b.n	4822 <hci_cmd_handle+0x2a2>
		dup_count = -1;
    4a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a0a:	e72c      	b.n	4866 <hci_cmd_handle+0x2e6>
	rp = cmd_complete(evt, sizeof(*rp));
    4a0c:	210d      	movs	r1, #13
    4a0e:	a80d      	add	r0, sp, #52	; 0x34
    4a10:	f7ff fc96 	bl	4340 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4a14:	2202      	movs	r2, #2
    4a16:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4a18:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    4a1a:	2201      	movs	r2, #1
    4a1c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a1e:	220c      	movs	r2, #12
	rp->status = 0x00;
    4a20:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a22:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4a24:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    4a26:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4a28:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4a2a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    4a2c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a2e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4a30:	7242      	strb	r2, [r0, #9]
    4a32:	7283      	strb	r3, [r0, #10]
    4a34:	72c3      	strb	r3, [r0, #11]
    4a36:	7303      	strb	r3, [r0, #12]
    4a38:	e63a      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4a3a:	2141      	movs	r1, #65	; 0x41
    4a3c:	a80d      	add	r0, sp, #52	; 0x34
    4a3e:	f7ff fc7f 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4a42:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4a44:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4a46:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4a48:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4a4c:	f7fd f86a 	bl	1b24 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4a50:	7863      	ldrb	r3, [r4, #1]
    4a52:	f063 0358 	orn	r3, r3, #88	; 0x58
    4a56:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    4a58:	78a3      	ldrb	r3, [r4, #2]
    4a5a:	f043 0303 	orr.w	r3, r3, #3
    4a5e:	70a3      	strb	r3, [r4, #2]
    4a60:	e626      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4a62:	2109      	movs	r1, #9
    4a64:	a80d      	add	r0, sp, #52	; 0x34
    4a66:	f7ff fc6b 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4a6a:	2100      	movs	r1, #0
    4a6c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4a70:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    4a72:	f7fd f857 	bl	1b24 <memset>
    4a76:	e61b      	b.n	46b0 <hci_cmd_handle+0x130>
	const char build_info[] = HCI_VS_BUILD_INFO;
    4a78:	4b5b      	ldr	r3, [pc, #364]	; (4be8 <hci_cmd_handle+0x668>)
    4a7a:	aa0e      	add	r2, sp, #56	; 0x38
    4a7c:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4a80:	4615      	mov	r5, r2
    4a82:	6818      	ldr	r0, [r3, #0]
    4a84:	6859      	ldr	r1, [r3, #4]
    4a86:	4614      	mov	r4, r2
    4a88:	c403      	stmia	r4!, {r0, r1}
    4a8a:	3308      	adds	r3, #8
    4a8c:	42b3      	cmp	r3, r6
    4a8e:	4622      	mov	r2, r4
    4a90:	d1f7      	bne.n	4a82 <hci_cmd_handle+0x502>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    4a92:	2129      	movs	r1, #41	; 0x29
    4a94:	a80d      	add	r0, sp, #52	; 0x34
    4a96:	f7ff fc53 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4a9a:	2300      	movs	r3, #0
    4a9c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    4aa0:	2228      	movs	r2, #40	; 0x28
    4aa2:	4629      	mov	r1, r5
    4aa4:	e718      	b.n	48d8 <hci_cmd_handle+0x358>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    4aa6:	68a9      	ldr	r1, [r5, #8]
    4aa8:	2000      	movs	r0, #0
    4aaa:	f7ff faf9 	bl	40a0 <ll_addr_set>
    4aae:	e697      	b.n	47e0 <hci_cmd_handle+0x260>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4ab0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4ab4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    4ab8:	3201      	adds	r2, #1
    4aba:	d106      	bne.n	4aca <hci_cmd_handle+0x54a>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4ac4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4ac6:	4293      	cmp	r3, r2
    4ac8:	d020      	beq.n	4b0c <hci_cmd_handle+0x58c>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    4aca:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4ace:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4ad2:	07db      	lsls	r3, r3, #31
    4ad4:	d51a      	bpl.n	4b0c <hci_cmd_handle+0x58c>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4ad6:	2118      	movs	r1, #24
    4ad8:	a80d      	add	r0, sp, #52	; 0x34
    4ada:	f7ff fc31 	bl	4340 <cmd_complete>
		rp->status = 0x00;
    4ade:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    4ae0:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4ae2:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    4ae4:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    4ae6:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    4ae8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    4aec:	1ca1      	adds	r1, r4, #2
    4aee:	f7ff fc13 	bl	4318 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4af2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4af6:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    4af8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    4afc:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4b00:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4b02:	2210      	movs	r2, #16
    4b04:	4631      	mov	r1, r6
    4b06:	f104 0008 	add.w	r0, r4, #8
    4b0a:	e7b2      	b.n	4a72 <hci_cmd_handle+0x4f2>
	rp = cmd_complete(evt, sizeof(*rp));
    4b0c:	2102      	movs	r1, #2
    4b0e:	a80d      	add	r0, sp, #52	; 0x34
    4b10:	f7ff fc16 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4b14:	2300      	movs	r3, #0
    4b16:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    4b18:	7043      	strb	r3, [r0, #1]
    4b1a:	e5c9      	b.n	46b0 <hci_cmd_handle+0x130>
	rp = cmd_complete(evt, sizeof(*rp));
    4b1c:	2121      	movs	r1, #33	; 0x21
    4b1e:	a80d      	add	r0, sp, #52	; 0x34
    4b20:	f7ff fc0e 	bl	4340 <cmd_complete>
	rp->status = 0x00;
    4b24:	4603      	mov	r3, r0
    4b26:	2200      	movs	r2, #0
    4b28:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    4b30:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b32:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    4b36:	3101      	adds	r1, #1
    4b38:	d04b      	beq.n	4bd2 <hci_cmd_handle+0x652>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4b3a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b3e:	3101      	adds	r1, #1
    4b40:	d047      	beq.n	4bd2 <hci_cmd_handle+0x652>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4b42:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4b46:	3101      	adds	r1, #1
    4b48:	d043      	beq.n	4bd2 <hci_cmd_handle+0x652>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    4b4a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4b4e:	3101      	adds	r1, #1
    4b50:	d03f      	beq.n	4bd2 <hci_cmd_handle+0x652>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4b52:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    4b56:	4619      	mov	r1, r3
    4b58:	f7ff fbde 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    4b5c:	1d61      	adds	r1, r4, #5
    4b5e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    4b62:	f7ff fbd9 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4b66:	f104 0109 	add.w	r1, r4, #9
    4b6a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4b6e:	f7ff fbd3 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4b72:	f104 010d 	add.w	r1, r4, #13
    4b76:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4b7a:	f7ff fbcd 	bl	4318 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b82:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4b86:	3301      	adds	r3, #1
    4b88:	f104 0311 	add.w	r3, r4, #17
    4b8c:	d027      	beq.n	4bde <hci_cmd_handle+0x65e>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4b8e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4b92:	3101      	adds	r1, #1
    4b94:	d023      	beq.n	4bde <hci_cmd_handle+0x65e>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4b96:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4b9a:	3101      	adds	r1, #1
    4b9c:	d01f      	beq.n	4bde <hci_cmd_handle+0x65e>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4b9e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4ba2:	3101      	adds	r1, #1
    4ba4:	d01b      	beq.n	4bde <hci_cmd_handle+0x65e>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    4ba6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    4baa:	4619      	mov	r1, r3
    4bac:	f7ff fbb4 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4bb0:	f104 0115 	add.w	r1, r4, #21
    4bb4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    4bb8:	f7ff fbae 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4bbc:	f104 0119 	add.w	r1, r4, #25
    4bc0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    4bc4:	f7ff fba8 	bl	4318 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    4bc8:	f104 011d 	add.w	r1, r4, #29
    4bcc:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    4bd0:	e6e6      	b.n	49a0 <hci_cmd_handle+0x420>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    4bd2:	2210      	movs	r2, #16
    4bd4:	2100      	movs	r1, #0
    4bd6:	4618      	mov	r0, r3
    4bd8:	f7fc ffa4 	bl	1b24 <memset>
    4bdc:	e7cf      	b.n	4b7e <hci_cmd_handle+0x5fe>
		memset(rp->er, 0x00, sizeof(rp->er));
    4bde:	2210      	movs	r2, #16
    4be0:	2100      	movs	r1, #0
    4be2:	4618      	mov	r0, r3
    4be4:	e745      	b.n	4a72 <hci_cmd_handle+0x4f2>
    4be6:	bf00      	nop
    4be8:	0000db72 	.word	0x0000db72

00004bec <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4bf0:	7903      	ldrb	r3, [r0, #4]
    4bf2:	2b01      	cmp	r3, #1
{
    4bf4:	b090      	sub	sp, #64	; 0x40
    4bf6:	4604      	mov	r4, r0
    4bf8:	4689      	mov	r9, r1
	pdu_data = (void *)node_rx->pdu_data;
    4bfa:	f100 0708 	add.w	r7, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4bfe:	f000 811a 	beq.w	4e36 <hci_evt_encode+0x24a>
	switch (node_rx->hdr.type) {
    4c02:	3b02      	subs	r3, #2
    4c04:	2b03      	cmp	r3, #3
    4c06:	f200 8107 	bhi.w	4e18 <hci_evt_encode+0x22c>
    4c0a:	e8df f003 	tbb	[pc, r3]
    4c0e:	b602      	.short	0xb602
    4c10:	bebc      	.short	0xbebc
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4c12:	2301      	movs	r3, #1
    4c14:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    4c18:	2303      	movs	r3, #3
    4c1a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    4c1e:	23ff      	movs	r3, #255	; 0xff
    4c20:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    4c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    4c28:	2302      	movs	r3, #2
    4c2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4c2e:	4ba5      	ldr	r3, [pc, #660]	; (4ec4 <hci_evt_encode+0x2d8>)
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4c30:	2204      	movs	r2, #4
    4c32:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4c36:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c3a:	2200      	movs	r2, #0
    4c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4c40:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4c42:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4c44:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4c48:	f000 8094 	beq.w	4d74 <hci_evt_encode+0x188>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4c4c:	4b9e      	ldr	r3, [pc, #632]	; (4ec8 <hci_evt_encode+0x2dc>)
    4c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c52:	2300      	movs	r3, #0
    4c54:	f002 0202 	and.w	r2, r2, #2
    4c58:	4313      	orrs	r3, r2
    4c5a:	f000 808b 	beq.w	4d74 <hci_evt_encode+0x188>
	if (dup_count >= 0) {
    4c5e:	4e9b      	ldr	r6, [pc, #620]	; (4ecc <hci_evt_encode+0x2e0>)
    4c60:	6833      	ldr	r3, [r6, #0]
    4c62:	42ab      	cmp	r3, r5
    4c64:	f100 080a 	add.w	r8, r0, #10
    4c68:	db49      	blt.n	4cfe <hci_evt_encode+0x112>
    4c6a:	f8df a298 	ldr.w	sl, [pc, #664]	; 4f04 <hci_evt_encode+0x318>
		for (i = 0; i < dup_count; i++) {
    4c6e:	6833      	ldr	r3, [r6, #0]
    4c70:	429d      	cmp	r5, r3
    4c72:	db27      	blt.n	4cc4 <hci_evt_encode+0xd8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    4c74:	4d96      	ldr	r5, [pc, #600]	; (4ed0 <hci_evt_encode+0x2e4>)
    4c76:	f8df a25c 	ldr.w	sl, [pc, #604]	; 4ed4 <hci_evt_encode+0x2e8>
    4c7a:	6828      	ldr	r0, [r5, #0]
    4c7c:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    4c80:	2206      	movs	r2, #6
    4c82:	4641      	mov	r1, r8
    4c84:	3002      	adds	r0, #2
    4c86:	f7fc ff21 	bl	1acc <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    4c8a:	682b      	ldr	r3, [r5, #0]
    4c8c:	7a22      	ldrb	r2, [r4, #8]
    4c8e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
    4c92:	f3c2 1280 	ubfx	r2, r2, #6, #1
    4c96:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    4c98:	7a22      	ldrb	r2, [r4, #8]
    4c9a:	f002 010f 	and.w	r1, r2, #15
    4c9e:	2201      	movs	r2, #1
    4ca0:	408a      	lsls	r2, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    4ca2:	6831      	ldr	r1, [r6, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    4ca4:	f80a 2033 	strb.w	r2, [sl, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    4ca8:	290f      	cmp	r1, #15
			dup_count++;
    4caa:	bfd5      	itete	le
    4cac:	3101      	addle	r1, #1
			dup_curr++;
    4cae:	3301      	addgt	r3, #1
			dup_curr = dup_count;
    4cb0:	6029      	strle	r1, [r5, #0]
			dup_curr++;
    4cb2:	602b      	strgt	r3, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    4cb4:	682b      	ldr	r3, [r5, #0]
			dup_count++;
    4cb6:	bfd8      	it	le
    4cb8:	6031      	strle	r1, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    4cba:	2b10      	cmp	r3, #16
    4cbc:	d11f      	bne.n	4cfe <hci_evt_encode+0x112>
			dup_curr = 0;
    4cbe:	2300      	movs	r3, #0
    4cc0:	602b      	str	r3, [r5, #0]
    4cc2:	e01c      	b.n	4cfe <hci_evt_encode+0x112>
			if (!memcmp(&adv->adv_ind.addr[0],
    4cc4:	2206      	movs	r2, #6
    4cc6:	4651      	mov	r1, sl
    4cc8:	4640      	mov	r0, r8
    4cca:	f7fc feea 	bl	1aa2 <memcmp>
    4cce:	b9f0      	cbnz	r0, 4d0e <hci_evt_encode+0x122>
			    adv->tx_addr == dup_filter[i].addr.type) {
    4cd0:	7a23      	ldrb	r3, [r4, #8]
    4cd2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    4cd6:	461a      	mov	r2, r3
    4cd8:	f3c3 1380 	ubfx	r3, r3, #6, #1
				    sizeof(bt_addr_t)) &&
    4cdc:	428b      	cmp	r3, r1
    4cde:	d116      	bne.n	4d0e <hci_evt_encode+0x122>
				if (dup_filter[i].mask & BIT(adv->type)) {
    4ce0:	487c      	ldr	r0, [pc, #496]	; (4ed4 <hci_evt_encode+0x2e8>)
    4ce2:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
    4ce6:	f002 020f 	and.w	r2, r2, #15
    4cea:	fa23 f102 	lsr.w	r1, r3, r2
    4cee:	07c9      	lsls	r1, r1, #31
    4cf0:	d440      	bmi.n	4d74 <hci_evt_encode+0x188>
				dup_filter[i].mask |= BIT(adv->type);
    4cf2:	2101      	movs	r1, #1
    4cf4:	fa01 f202 	lsl.w	r2, r1, r2
    4cf8:	4313      	orrs	r3, r2
    4cfa:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    4cfe:	7a23      	ldrb	r3, [r4, #8]
    4d00:	f003 030f 	and.w	r3, r3, #15
    4d04:	2b01      	cmp	r3, #1
    4d06:	7a63      	ldrb	r3, [r4, #9]
    4d08:	d105      	bne.n	4d16 <hci_evt_encode+0x12a>
		data_len = 0;
    4d0a:	2600      	movs	r6, #0
    4d0c:	e005      	b.n	4d1a <hci_evt_encode+0x12e>
		for (i = 0; i < dup_count; i++) {
    4d0e:	3501      	adds	r5, #1
    4d10:	f10a 0a08 	add.w	sl, sl, #8
    4d14:	e7ab      	b.n	4c6e <hci_evt_encode+0x82>
		data_len = (adv->len - BDADDR_SIZE);
    4d16:	1f9e      	subs	r6, r3, #6
    4d18:	b2f6      	uxtb	r6, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d1a:	4423      	add	r3, r4
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4d1c:	f106 020b 	add.w	r2, r6, #11
    4d20:	b2d2      	uxtb	r2, r2
    4d22:	2102      	movs	r1, #2
    4d24:	4648      	mov	r0, r9
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d26:	f893 a00a 	ldrb.w	sl, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4d2a:	f7ff fb2b 	bl	4384 <meta_evt>
	sep->num_reports = 1;
    4d2e:	2301      	movs	r3, #1
    4d30:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    4d32:	7a23      	ldrb	r3, [r4, #8]
    4d34:	aa10      	add	r2, sp, #64	; 0x40
    4d36:	f003 030f 	and.w	r3, r3, #15
    4d3a:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4d3c:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    4d3e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    4d42:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4d44:	7a23      	ldrb	r3, [r4, #8]
    4d46:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4d4a:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4d4c:	2206      	movs	r2, #6
    4d4e:	4641      	mov	r1, r8
    4d50:	3003      	adds	r0, #3
    4d52:	f7fc febb 	bl	1acc <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4d56:	350a      	adds	r5, #10
	adv_info->length = data_len;
    4d58:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d5c:	f1ca 0a00 	rsb	sl, sl, #0
    4d60:	fa4f fa8a 	sxtb.w	sl, sl
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4d64:	4632      	mov	r2, r6
    4d66:	f107 0108 	add.w	r1, r7, #8
    4d6a:	4628      	mov	r0, r5
    4d6c:	f7fc feae 	bl	1acc <memcpy>
	*prssi = rssi;
    4d70:	f805 a006 	strb.w	sl, [r5, r6]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4d74:	b010      	add	sp, #64	; 0x40
    4d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    4d7a:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    4d7c:	4621      	mov	r1, r4
    4d7e:	4638      	mov	r0, r7
    4d80:	f7ff fb80 	bl	4484 <le_adv_ext_report.isra.39>
    4d84:	e7f6      	b.n	4d74 <hci_evt_encode+0x188>
    4d86:	2204      	movs	r2, #4
    4d88:	e7f8      	b.n	4d7c <hci_evt_encode+0x190>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4d8a:	4b4e      	ldr	r3, [pc, #312]	; (4ec4 <hci_evt_encode+0x2d8>)
    4d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d90:	2200      	movs	r2, #0
    4d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4d96:	4313      	orrs	r3, r2
    4d98:	f100 060a 	add.w	r6, r0, #10
    4d9c:	d007      	beq.n	4dae <hci_evt_encode+0x1c2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    4d9e:	4b4a      	ldr	r3, [pc, #296]	; (4ec8 <hci_evt_encode+0x2dc>)
    4da0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4da4:	2300      	movs	r3, #0
    4da6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4daa:	4313      	orrs	r3, r2
    4dac:	d123      	bne.n	4df6 <hci_evt_encode+0x20a>
		addr.type = adv->tx_addr;
    4dae:	7a23      	ldrb	r3, [r4, #8]
    4db0:	ad10      	add	r5, sp, #64	; 0x40
    4db2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4db6:	2206      	movs	r2, #6
    4db8:	4631      	mov	r1, r6
    4dba:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    4dbe:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4dc2:	f7fc fe83 	bl	1acc <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    4dc6:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dc8:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4dca:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dcc:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4dce:	4631      	mov	r1, r6
    4dd0:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dd2:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4dd4:	f7ff fb1a 	bl	440c <bt_addr_le_to_str.constprop.43>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dd8:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    4dda:	4b3f      	ldr	r3, [pc, #252]	; (4ed8 <hci_evt_encode+0x2ec>)
    4ddc:	9304      	str	r3, [sp, #16]
    4dde:	2200      	movs	r2, #0
    4de0:	9201      	str	r2, [sp, #4]
    4de2:	9300      	str	r3, [sp, #0]
    4de4:	9403      	str	r4, [sp, #12]
    4de6:	9602      	str	r6, [sp, #8]
    4de8:	4b3c      	ldr	r3, [pc, #240]	; (4edc <hci_evt_encode+0x2f0>)
    4dea:	4a3d      	ldr	r2, [pc, #244]	; (4ee0 <hci_evt_encode+0x2f4>)
    4dec:	493d      	ldr	r1, [pc, #244]	; (4ee4 <hci_evt_encode+0x2f8>)
    4dee:	483e      	ldr	r0, [pc, #248]	; (4ee8 <hci_evt_encode+0x2fc>)
    4df0:	f7fc f83c 	bl	e6c <printk>
    4df4:	e7be      	b.n	4d74 <hci_evt_encode+0x188>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4df6:	2208      	movs	r2, #8
    4df8:	2113      	movs	r1, #19
    4dfa:	4648      	mov	r0, r9
    4dfc:	f7ff fac2 	bl	4384 <meta_evt>
	sep->handle = 0;
    4e00:	2300      	movs	r3, #0
    4e02:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    4e04:	7a23      	ldrb	r3, [r4, #8]
    4e06:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4e0a:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4e0c:	2206      	movs	r2, #6
    4e0e:	4631      	mov	r1, r6
    4e10:	3002      	adds	r0, #2
    4e12:	f7fc fe5b 	bl	1acc <memcpy>
    4e16:	e7ad      	b.n	4d74 <hci_evt_encode+0x188>
		LL_ASSERT(0);
    4e18:	4b2f      	ldr	r3, [pc, #188]	; (4ed8 <hci_evt_encode+0x2ec>)
    4e1a:	9301      	str	r3, [sp, #4]
    4e1c:	9300      	str	r3, [sp, #0]
    4e1e:	4b33      	ldr	r3, [pc, #204]	; (4eec <hci_evt_encode+0x300>)
		LL_ASSERT(0);
    4e20:	4a33      	ldr	r2, [pc, #204]	; (4ef0 <hci_evt_encode+0x304>)
    4e22:	4930      	ldr	r1, [pc, #192]	; (4ee4 <hci_evt_encode+0x2f8>)
    4e24:	4833      	ldr	r0, [pc, #204]	; (4ef4 <hci_evt_encode+0x308>)
    4e26:	f7fc f821 	bl	e6c <printk>
    4e2a:	4040      	eors	r0, r0
    4e2c:	f380 8811 	msr	BASEPRI, r0
    4e30:	f04f 0004 	mov.w	r0, #4
    4e34:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    4e36:	7ac1      	ldrb	r1, [r0, #11]
    4e38:	88c5      	ldrh	r5, [r0, #6]
    4e3a:	2909      	cmp	r1, #9
    4e3c:	d00b      	beq.n	4e56 <hci_evt_encode+0x26a>
    4e3e:	290c      	cmp	r1, #12
    4e40:	d010      	beq.n	4e64 <hci_evt_encode+0x278>
    4e42:	2907      	cmp	r1, #7
    4e44:	d138      	bne.n	4eb8 <hci_evt_encode+0x2cc>
    4e46:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4e48:	2a0e      	cmp	r2, #14
    4e4a:	d12a      	bne.n	4ea2 <hci_evt_encode+0x2b6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4e4c:	464b      	mov	r3, r9
    4e4e:	462a      	mov	r2, r5
    4e50:	2100      	movs	r1, #0
    4e52:	201a      	movs	r0, #26
    4e54:	e003      	b.n	4e5e <hci_evt_encode+0x272>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    4e56:	464b      	mov	r3, r9
    4e58:	462a      	mov	r2, r5
    4e5a:	4639      	mov	r1, r7
    4e5c:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4e5e:	f7ff faa7 	bl	43b0 <le_remote_feat_complete>
    4e62:	e787      	b.n	4d74 <hci_evt_encode+0x188>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4e64:	4b17      	ldr	r3, [pc, #92]	; (4ec4 <hci_evt_encode+0x2d8>)
    4e66:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e6a:	2300      	movs	r3, #0
    4e6c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    4e70:	4313      	orrs	r3, r2
    4e72:	f43f af7f 	beq.w	4d74 <hci_evt_encode+0x188>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    4e76:	2208      	movs	r2, #8
    4e78:	4648      	mov	r0, r9
    4e7a:	f7ff fa56 	bl	432a <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4e7e:	2108      	movs	r1, #8
    4e80:	eb09 0001 	add.w	r0, r9, r1
    4e84:	f006 f996 	bl	b1b4 <net_buf_simple_add>
	ep->status = 0x00;
    4e88:	2300      	movs	r3, #0
    4e8a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    4e8c:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->version = ver_ind->version_number;
    4e90:	7b23      	ldrb	r3, [r4, #12]
    4e92:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4e94:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4e98:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4e9a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4e9e:	80c3      	strh	r3, [r0, #6]
    4ea0:	e768      	b.n	4d74 <hci_evt_encode+0x188>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    4ea2:	4b0d      	ldr	r3, [pc, #52]	; (4ed8 <hci_evt_encode+0x2ec>)
    4ea4:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4ea6:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    4ea8:	9300      	str	r3, [sp, #0]
    4eaa:	4a0d      	ldr	r2, [pc, #52]	; (4ee0 <hci_evt_encode+0x2f4>)
    4eac:	4b12      	ldr	r3, [pc, #72]	; (4ef8 <hci_evt_encode+0x30c>)
    4eae:	490d      	ldr	r1, [pc, #52]	; (4ee4 <hci_evt_encode+0x2f8>)
    4eb0:	4812      	ldr	r0, [pc, #72]	; (4efc <hci_evt_encode+0x310>)
    4eb2:	f7fb ffdb 	bl	e6c <printk>
    4eb6:	e75d      	b.n	4d74 <hci_evt_encode+0x188>
		LL_ASSERT(0);
    4eb8:	4b07      	ldr	r3, [pc, #28]	; (4ed8 <hci_evt_encode+0x2ec>)
    4eba:	9301      	str	r3, [sp, #4]
    4ebc:	9300      	str	r3, [sp, #0]
    4ebe:	4b10      	ldr	r3, [pc, #64]	; (4f00 <hci_evt_encode+0x314>)
    4ec0:	e7ae      	b.n	4e20 <hci_evt_encode+0x234>
    4ec2:	bf00      	nop
    4ec4:	200032a0 	.word	0x200032a0
    4ec8:	200032a8 	.word	0x200032a8
    4ecc:	200004f0 	.word	0x200004f0
    4ed0:	200004f4 	.word	0x200004f4
    4ed4:	200004f8 	.word	0x200004f8
    4ed8:	0000cbb3 	.word	0x0000cbb3
    4edc:	0000dada 	.word	0x0000dada
    4ee0:	0000d4e3 	.word	0x0000d4e3
    4ee4:	0000d4ea 	.word	0x0000d4ea
    4ee8:	0000db9a 	.word	0x0000db9a
    4eec:	0000daef 	.word	0x0000daef
    4ef0:	0000d49b 	.word	0x0000d49b
    4ef4:	0000d43a 	.word	0x0000d43a
    4ef8:	0000dafe 	.word	0x0000dafe
    4efc:	0000dbcd 	.word	0x0000dbcd
    4f00:	0000db0d 	.word	0x0000db0d
    4f04:	200004fa 	.word	0x200004fa

00004f08 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4f08:	7903      	ldrb	r3, [r0, #4]
    4f0a:	2b01      	cmp	r3, #1
    4f0c:	d00f      	beq.n	4f2e <hci_get_class+0x26>
    4f0e:	2b0a      	cmp	r3, #10
    4f10:	d815      	bhi.n	4f3e <hci_get_class+0x36>
    4f12:	2001      	movs	r0, #1
    4f14:	fa00 f303 	lsl.w	r3, r0, r3
    4f18:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4f1c:	d112      	bne.n	4f44 <hci_get_class+0x3c>
    4f1e:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    4f22:	d110      	bne.n	4f46 <hci_get_class+0x3e>
    4f24:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    4f28:	f343 1080 	sbfx	r0, r3, #6, #1
    4f2c:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4f2e:	7a03      	ldrb	r3, [r0, #8]
    4f30:	f003 0303 	and.w	r3, r3, #3
    4f34:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4f36:	bf0c      	ite	eq
    4f38:	2002      	moveq	r0, #2
    4f3a:	2003      	movne	r0, #3
    4f3c:	4770      	bx	lr
			return -1;
    4f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f42:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    4f44:	2002      	movs	r0, #2
	}
}
    4f46:	4770      	bx	lr

00004f48 <hci_init>:
	dup_count = -1;
    4f48:	4b08      	ldr	r3, [pc, #32]	; (4f6c <hci_init+0x24>)
    4f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f4e:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    4f50:	4b07      	ldr	r3, [pc, #28]	; (4f70 <hci_init+0x28>)
    4f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f56:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4f5a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4f5e:	4b05      	ldr	r3, [pc, #20]	; (4f74 <hci_init+0x2c>)
    4f60:	201f      	movs	r0, #31
    4f62:	2100      	movs	r1, #0
    4f64:	e9c3 0100 	strd	r0, r1, [r3]
    4f68:	4770      	bx	lr
    4f6a:	bf00      	nop
    4f6c:	200004f0 	.word	0x200004f0
    4f70:	200032a0 	.word	0x200032a0
    4f74:	200032a8 	.word	0x200032a8

00004f78 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4f78:	bf20      	wfe
	__SEV();
    4f7a:	bf40      	sev
	__WFE();
    4f7c:	bf20      	wfe
    4f7e:	4770      	bx	lr

00004f80 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4f80:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    4f82:	4b0d      	ldr	r3, [pc, #52]	; (4fb8 <pdu_len_cmp+0x38>)
{
    4f84:	b089      	sub	sp, #36	; 0x24
    4f86:	4605      	mov	r5, r0
    4f88:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    4f8a:	aa01      	add	r2, sp, #4
    4f8c:	f103 0718 	add.w	r7, r3, #24
    4f90:	6818      	ldr	r0, [r3, #0]
    4f92:	6859      	ldr	r1, [r3, #4]
    4f94:	4614      	mov	r4, r2
    4f96:	c403      	stmia	r4!, {r0, r1}
    4f98:	3308      	adds	r3, #8
    4f9a:	42bb      	cmp	r3, r7
    4f9c:	4622      	mov	r2, r4
    4f9e:	d1f7      	bne.n	4f90 <pdu_len_cmp+0x10>
    4fa0:	881b      	ldrh	r3, [r3, #0]
    4fa2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    4fa4:	ab08      	add	r3, sp, #32
    4fa6:	441d      	add	r5, r3
    4fa8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    4fac:	1b83      	subs	r3, r0, r6
    4fae:	4258      	negs	r0, r3
    4fb0:	4158      	adcs	r0, r3
    4fb2:	b009      	add	sp, #36	; 0x24
    4fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fb6:	bf00      	nop
    4fb8:	0000cb13 	.word	0x0000cb13

00004fbc <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4fbc:	6008      	str	r0, [r1, #0]
    4fbe:	4770      	bx	lr

00004fc0 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4fc0:	b918      	cbnz	r0, 4fca <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4fc2:	680b      	ldr	r3, [r1, #0]
    4fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4fc8:	600b      	str	r3, [r1, #0]
    4fca:	4770      	bx	lr

00004fcc <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4fcc:	b918      	cbnz	r0, 4fd6 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4fce:	680b      	ldr	r3, [r1, #0]
    4fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4fd4:	600b      	str	r3, [r1, #0]
    4fd6:	4770      	bx	lr

00004fd8 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    4fd8:	b570      	push	{r4, r5, r6, lr}
    4fda:	1d03      	adds	r3, r0, #4
    4fdc:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    4fde:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    4fe0:	429d      	cmp	r5, r3
    4fe2:	d101      	bne.n	4fe8 <chan_sel_remap+0x10>
    4fe4:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    4fe6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4fe8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4fec:	2200      	movs	r2, #0
    4fee:	18a0      	adds	r0, r4, r2
    4ff0:	2a08      	cmp	r2, #8
    4ff2:	b2c0      	uxtb	r0, r0
    4ff4:	d101      	bne.n	4ffa <chan_sel_remap+0x22>
    4ff6:	4604      	mov	r4, r0
    4ff8:	e7f2      	b.n	4fe0 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4ffa:	f016 0f01 	tst.w	r6, #1
    4ffe:	d003      	beq.n	5008 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    5000:	2900      	cmp	r1, #0
    5002:	d0f0      	beq.n	4fe6 <chan_sel_remap+0xe>
				chan_index--;
    5004:	3901      	subs	r1, #1
    5006:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    5008:	0876      	lsrs	r6, r6, #1
    500a:	3201      	adds	r2, #1
    500c:	e7ef      	b.n	4fee <chan_sel_remap+0x16>
	...

00005010 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    5010:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    5012:	4a0c      	ldr	r2, [pc, #48]	; (5044 <packet_rx_reserve_get+0x34>)
    5014:	f892 313a 	ldrb.w	r3, [r2, #314]	; 0x13a
	    _radio.packet_rx_last) {
    5018:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    501c:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    501e:	bf38      	it	cc
    5020:	f892 4138 	ldrbcc.w	r4, [r2, #312]	; 0x138
			_radio.packet_rx_last);
    5024:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
			_radio.packet_rx_last +
    5028:	bf38      	it	cc
    502a:	191b      	addcc	r3, r3, r4
    502c:	1a5b      	subs	r3, r3, r1
    502e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    5030:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    5032:	bf9d      	ittte	ls
    5034:	f892 1139 	ldrbls.w	r1, [r2, #313]	; 0x139
    5038:	f8d2 3134 	ldrls.w	r3, [r2, #308]	; 0x134
    503c:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    5040:	2000      	movhi	r0, #0
}
    5042:	bd10      	pop	{r4, pc}
    5044:	20000578 	.word	0x20000578

00005048 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    5048:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    504a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    504e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    5052:	4299      	cmp	r1, r3
    5054:	d128      	bne.n	50a8 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    5056:	f990 301d 	ldrsb.w	r3, [r0, #29]
    505a:	2b00      	cmp	r3, #0
    505c:	db26      	blt.n	50ac <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    505e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5060:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    5062:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    5066:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5068:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    506c:	4354      	muls	r4, r2
					      conn->supervision_reload *
    506e:	227d      	movs	r2, #125	; 0x7d
    5070:	4362      	muls	r2, r4
					      125 / 1000;
    5072:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    5076:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    507a:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    507e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    5082:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5084:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    5088:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    508a:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    508c:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    5090:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    5092:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    5096:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    5098:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    509c:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    50a0:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    50a4:	4618      	mov	r0, r3
    50a6:	bd30      	pop	{r4, r5, pc}
		return 1;
    50a8:	2001      	movs	r0, #1
    50aa:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    50ac:	2002      	movs	r0, #2
}
    50ae:	bd30      	pop	{r4, r5, pc}

000050b0 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    50b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    50b4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    50b6:	4294      	cmp	r4, r2
{
    50b8:	4681      	mov	r9, r0
    50ba:	460f      	mov	r7, r1
    50bc:	4690      	mov	r8, r2
	if (_first == last) {
    50be:	d03d      	beq.n	513c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    50c0:	4e1f      	ldr	r6, [pc, #124]	; (5140 <tx_cmplt_get+0x90>)
    50c2:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    50c6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    50ca:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    50cc:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    50ce:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    50d2:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    50d6:	b222      	sxth	r2, r4
    50d8:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    50dc:	f8b9 e000 	ldrh.w	lr, [r9]
    50e0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    50e4:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    50e8:	4596      	cmp	lr, r2
    50ea:	d120      	bne.n	512e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    50ec:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    50ee:	2801      	cmp	r0, #1
    50f0:	f020 0303 	bic.w	r3, r0, #3
    50f4:	d90a      	bls.n	510c <tx_cmplt_get+0x5c>
    50f6:	b1f3      	cbz	r3, 5136 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    50f8:	1d02      	adds	r2, r0, #4
    50fa:	d01c      	beq.n	5136 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    50fc:	7942      	ldrb	r2, [r0, #5]
    50fe:	b1d2      	cbz	r2, 5136 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5100:	7902      	ldrb	r2, [r0, #4]
    5102:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5106:	3a01      	subs	r2, #1
    5108:	2a01      	cmp	r2, #1
    510a:	d814      	bhi.n	5136 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    510c:	2201      	movs	r2, #1
			cmplt++;
    510e:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5110:	604a      	str	r2, [r1, #4]
			cmplt++;
    5112:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    5114:	b113      	cbz	r3, 511c <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5116:	4651      	mov	r1, sl
    5118:	f7fd ffd7 	bl	30ca <mem_release>
		}

		_first = _first + 1;
    511c:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    511e:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    5122:	b2e4      	uxtb	r4, r4
			_first = 0;
    5124:	42a2      	cmp	r2, r4
    5126:	bf08      	it	eq
    5128:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    512a:	4544      	cmp	r4, r8
    512c:	d1d3      	bne.n	50d6 <tx_cmplt_get+0x26>

	*first = _first;
    512e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    5130:	4628      	mov	r0, r5
    5132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    5136:	f8c1 b004 	str.w	fp, [r1, #4]
    513a:	e7eb      	b.n	5114 <tx_cmplt_get+0x64>
		return 0;
    513c:	2500      	movs	r5, #0
    513e:	e7f7      	b.n	5130 <tx_cmplt_get+0x80>
    5140:	20000578 	.word	0x20000578

00005144 <connection_get>:
{
    5144:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    5146:	4b09      	ldr	r3, [pc, #36]	; (516c <connection_get+0x28>)
    5148:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    514c:	4282      	cmp	r2, r0
{
    514e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    5150:	d90a      	bls.n	5168 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    5152:	4602      	mov	r2, r0
    5154:	f44f 7182 	mov.w	r1, #260	; 0x104
    5158:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    515c:	f7fd ffca 	bl	30f4 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5160:	b110      	cbz	r0, 5168 <connection_get+0x24>
    5162:	8c03      	ldrh	r3, [r0, #32]
    5164:	42a3      	cmp	r3, r4
    5166:	d000      	beq.n	516a <connection_get+0x26>
	return 0;
    5168:	2000      	movs	r0, #0
}
    516a:	bd10      	pop	{r4, pc}
    516c:	20000578 	.word	0x20000578

00005170 <role_disable>:
{
    5170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5174:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5176:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    5178:	2805      	cmp	r0, #5
{
    517a:	4605      	mov	r5, r0
    517c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    517e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    5180:	d00c      	beq.n	519c <role_disable+0x2c>
    5182:	2806      	cmp	r0, #6
    5184:	d040      	beq.n	5208 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5186:	d945      	bls.n	5214 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    5188:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    518a:	b280      	uxth	r0, r0
    518c:	f7ff ffda 	bl	5144 <connection_get>
			if (!conn) {
    5190:	2800      	cmp	r0, #0
    5192:	f000 8123 	beq.w	53dc <role_disable+0x26c>
			ticks_active_to_start =
    5196:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    519a:	e00f      	b.n	51bc <role_disable+0x4c>
		ticks_xtal_to_start =
    519c:	4b90      	ldr	r3, [pc, #576]	; (53e0 <role_disable+0x270>)
    519e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    51a0:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    51a4:	ab02      	add	r3, sp, #8
    51a6:	9300      	str	r3, [sp, #0]
    51a8:	460a      	mov	r2, r1
    51aa:	4b8e      	ldr	r3, [pc, #568]	; (53e4 <role_disable+0x274>)
    51ac:	2103      	movs	r1, #3
    51ae:	2000      	movs	r0, #0
    51b0:	f7fe fe86 	bl	3ec0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    51b4:	2802      	cmp	r0, #2
    51b6:	d011      	beq.n	51dc <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    51b8:	9b02      	ldr	r3, [sp, #8]
    51ba:	b99b      	cbnz	r3, 51e4 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    51bc:	4c88      	ldr	r4, [pc, #544]	; (53e0 <role_disable+0x270>)
    51be:	7ca3      	ldrb	r3, [r4, #18]
    51c0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    51c4:	2b00      	cmp	r3, #0
    51c6:	d02d      	beq.n	5224 <role_disable+0xb4>
    51c8:	4b87      	ldr	r3, [pc, #540]	; (53e8 <role_disable+0x278>)
    51ca:	9301      	str	r3, [sp, #4]
    51cc:	9300      	str	r3, [sp, #0]
    51ce:	4a87      	ldr	r2, [pc, #540]	; (53ec <role_disable+0x27c>)
    51d0:	4b87      	ldr	r3, [pc, #540]	; (53f0 <role_disable+0x280>)
    51d2:	4988      	ldr	r1, [pc, #544]	; (53f4 <role_disable+0x284>)
    51d4:	4888      	ldr	r0, [pc, #544]	; (53f8 <role_disable+0x288>)
    51d6:	e00f      	b.n	51f8 <role_disable+0x88>
				cpu_sleep();
    51d8:	f7ff fece 	bl	4f78 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    51dc:	9b02      	ldr	r3, [sp, #8]
    51de:	2b02      	cmp	r3, #2
    51e0:	d0fa      	beq.n	51d8 <role_disable+0x68>
    51e2:	e7e9      	b.n	51b8 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    51e4:	9b02      	ldr	r3, [sp, #8]
    51e6:	2b01      	cmp	r3, #1
    51e8:	d0e8      	beq.n	51bc <role_disable+0x4c>
    51ea:	4b7f      	ldr	r3, [pc, #508]	; (53e8 <role_disable+0x278>)
    51ec:	9301      	str	r3, [sp, #4]
    51ee:	9300      	str	r3, [sp, #0]
    51f0:	4a7e      	ldr	r2, [pc, #504]	; (53ec <role_disable+0x27c>)
    51f2:	4b7f      	ldr	r3, [pc, #508]	; (53f0 <role_disable+0x280>)
    51f4:	497f      	ldr	r1, [pc, #508]	; (53f4 <role_disable+0x284>)
    51f6:	4881      	ldr	r0, [pc, #516]	; (53fc <role_disable+0x28c>)
			LL_ASSERT(0);
    51f8:	f7fb fe38 	bl	e6c <printk>
    51fc:	4040      	eors	r0, r0
    51fe:	f380 8811 	msr	BASEPRI, r0
    5202:	f04f 0004 	mov.w	r0, #4
    5206:	df02      	svc	2
		ticks_xtal_to_start =
    5208:	4b75      	ldr	r3, [pc, #468]	; (53e0 <role_disable+0x270>)
    520a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	; 0xd0
		ticks_active_to_start =
    520e:	f8d3 80d4 	ldr.w	r8, [r3, #212]	; 0xd4
		break;
    5212:	e7d3      	b.n	51bc <role_disable+0x4c>
			LL_ASSERT(0);
    5214:	4b74      	ldr	r3, [pc, #464]	; (53e8 <role_disable+0x278>)
    5216:	9301      	str	r3, [sp, #4]
    5218:	9300      	str	r3, [sp, #0]
    521a:	4b75      	ldr	r3, [pc, #468]	; (53f0 <role_disable+0x280>)
    521c:	4a73      	ldr	r2, [pc, #460]	; (53ec <role_disable+0x27c>)
    521e:	4975      	ldr	r1, [pc, #468]	; (53f4 <role_disable+0x284>)
    5220:	4877      	ldr	r0, [pc, #476]	; (5400 <role_disable+0x290>)
    5222:	e7e9      	b.n	51f8 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    5224:	ab06      	add	r3, sp, #24
    5226:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    5228:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    522a:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    522e:	2103      	movs	r1, #3
    5230:	9300      	str	r3, [sp, #0]
    5232:	462a      	mov	r2, r5
    5234:	4b6b      	ldr	r3, [pc, #428]	; (53e4 <role_disable+0x274>)
    5236:	f7fe fe43 	bl	3ec0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    523a:	2802      	cmp	r0, #2
    523c:	d025      	beq.n	528a <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    523e:	9b02      	ldr	r3, [sp, #8]
    5240:	2b00      	cmp	r3, #0
    5242:	d169      	bne.n	5318 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    5244:	7c23      	ldrb	r3, [r4, #16]
    5246:	429d      	cmp	r5, r3
    5248:	d002      	beq.n	5250 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    524a:	7c63      	ldrb	r3, [r4, #17]
    524c:	429d      	cmp	r5, r3
    524e:	d15f      	bne.n	5310 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5250:	ab06      	add	r3, sp, #24
    5252:	2202      	movs	r2, #2
    5254:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5258:	2200      	movs	r2, #0
    525a:	9300      	str	r3, [sp, #0]
    525c:	2103      	movs	r1, #3
    525e:	4b61      	ldr	r3, [pc, #388]	; (53e4 <role_disable+0x274>)
    5260:	4610      	mov	r0, r2
    5262:	f7fe fe2d 	bl	3ec0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5266:	2802      	cmp	r0, #2
    5268:	d11d      	bne.n	52a6 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    526a:	2201      	movs	r2, #1
    526c:	4611      	mov	r1, r2
    526e:	2003      	movs	r0, #3
    5270:	f7fd ffa2 	bl	31b8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5274:	9b03      	ldr	r3, [sp, #12]
    5276:	2b02      	cmp	r3, #2
    5278:	d115      	bne.n	52a6 <role_disable+0x136>
    527a:	4b5b      	ldr	r3, [pc, #364]	; (53e8 <role_disable+0x278>)
    527c:	9301      	str	r3, [sp, #4]
    527e:	9300      	str	r3, [sp, #0]
    5280:	4a5a      	ldr	r2, [pc, #360]	; (53ec <role_disable+0x27c>)
    5282:	4b60      	ldr	r3, [pc, #384]	; (5404 <role_disable+0x294>)
    5284:	495b      	ldr	r1, [pc, #364]	; (53f4 <role_disable+0x284>)
    5286:	4860      	ldr	r0, [pc, #384]	; (5408 <role_disable+0x298>)
    5288:	e7b6      	b.n	51f8 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    528a:	7c63      	ldrb	r3, [r4, #17]
    528c:	429d      	cmp	r5, r3
    528e:	d104      	bne.n	529a <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5290:	2201      	movs	r2, #1
    5292:	4611      	mov	r1, r2
    5294:	2003      	movs	r0, #3
    5296:	f7fd ff8f 	bl	31b8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    529a:	9b02      	ldr	r3, [sp, #8]
    529c:	2b02      	cmp	r3, #2
    529e:	d1ce      	bne.n	523e <role_disable+0xce>
			cpu_sleep();
    52a0:	f7ff fe6a 	bl	4f78 <cpu_sleep>
    52a4:	e7f9      	b.n	529a <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    52a6:	9803      	ldr	r0, [sp, #12]
    52a8:	2800      	cmp	r0, #0
    52aa:	d150      	bne.n	534e <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    52ac:	2302      	movs	r3, #2
    52ae:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    52b0:	7c23      	ldrb	r3, [r4, #16]
    52b2:	b93b      	cbnz	r3, 52c4 <role_disable+0x154>
    52b4:	4b4c      	ldr	r3, [pc, #304]	; (53e8 <role_disable+0x278>)
    52b6:	9301      	str	r3, [sp, #4]
    52b8:	9300      	str	r3, [sp, #0]
    52ba:	4a4c      	ldr	r2, [pc, #304]	; (53ec <role_disable+0x27c>)
    52bc:	4b51      	ldr	r3, [pc, #324]	; (5404 <role_disable+0x294>)
    52be:	494d      	ldr	r1, [pc, #308]	; (53f4 <role_disable+0x284>)
    52c0:	4852      	ldr	r0, [pc, #328]	; (540c <role_disable+0x29c>)
    52c2:	e799      	b.n	51f8 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    52c4:	ab04      	add	r3, sp, #16
    52c6:	9300      	str	r3, [sp, #0]
    52c8:	2201      	movs	r2, #1
    52ca:	4b46      	ldr	r3, [pc, #280]	; (53e4 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    52cc:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    52ce:	2103      	movs	r1, #3
    52d0:	f7fe fdf6 	bl	3ec0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    52d4:	2802      	cmp	r0, #2
    52d6:	d10f      	bne.n	52f8 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    52d8:	2201      	movs	r2, #1
    52da:	4611      	mov	r1, r2
    52dc:	2003      	movs	r0, #3
    52de:	f7fd ff6b 	bl	31b8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    52e2:	9b04      	ldr	r3, [sp, #16]
    52e4:	2b02      	cmp	r3, #2
    52e6:	d107      	bne.n	52f8 <role_disable+0x188>
    52e8:	4b3f      	ldr	r3, [pc, #252]	; (53e8 <role_disable+0x278>)
    52ea:	9301      	str	r3, [sp, #4]
    52ec:	9300      	str	r3, [sp, #0]
    52ee:	4a3f      	ldr	r2, [pc, #252]	; (53ec <role_disable+0x27c>)
    52f0:	4b44      	ldr	r3, [pc, #272]	; (5404 <role_disable+0x294>)
    52f2:	4940      	ldr	r1, [pc, #256]	; (53f4 <role_disable+0x284>)
    52f4:	4846      	ldr	r0, [pc, #280]	; (5410 <role_disable+0x2a0>)
    52f6:	e77f      	b.n	51f8 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    52f8:	9a04      	ldr	r2, [sp, #16]
    52fa:	b99a      	cbnz	r2, 5324 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    52fc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5300:	45b0      	cmp	r8, r6
    5302:	d922      	bls.n	534a <role_disable+0x1da>
				ret = mayfly_enqueue(
    5304:	4b43      	ldr	r3, [pc, #268]	; (5414 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5306:	4611      	mov	r1, r2
    5308:	2003      	movs	r0, #3
    530a:	f7fd ff7d 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    530e:	b9a0      	cbnz	r0, 533a <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    5310:	7ca3      	ldrb	r3, [r4, #18]
    5312:	b90b      	cbnz	r3, 5318 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    5314:	2301      	movs	r3, #1
    5316:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    5318:	2300      	movs	r3, #0
    531a:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    531c:	9802      	ldr	r0, [sp, #8]
}
    531e:	b006      	add	sp, #24
    5320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5324:	9b04      	ldr	r3, [sp, #16]
    5326:	2b01      	cmp	r3, #1
    5328:	d153      	bne.n	53d2 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    532a:	2200      	movs	r2, #0
    532c:	4611      	mov	r1, r2
    532e:	4b39      	ldr	r3, [pc, #228]	; (5414 <role_disable+0x2a4>)
    5330:	2003      	movs	r0, #3
    5332:	f7fd ff69 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5336:	4602      	mov	r2, r0
    5338:	b138      	cbz	r0, 534a <role_disable+0x1da>
			LL_ASSERT(!ret);
    533a:	4b2b      	ldr	r3, [pc, #172]	; (53e8 <role_disable+0x278>)
    533c:	9301      	str	r3, [sp, #4]
    533e:	9300      	str	r3, [sp, #0]
    5340:	4a2a      	ldr	r2, [pc, #168]	; (53ec <role_disable+0x27c>)
    5342:	4b30      	ldr	r3, [pc, #192]	; (5404 <role_disable+0x294>)
    5344:	492b      	ldr	r1, [pc, #172]	; (53f4 <role_disable+0x284>)
    5346:	4834      	ldr	r0, [pc, #208]	; (5418 <role_disable+0x2a8>)
    5348:	e756      	b.n	51f8 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    534a:	4b34      	ldr	r3, [pc, #208]	; (541c <role_disable+0x2ac>)
    534c:	e7db      	b.n	5306 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    534e:	9d03      	ldr	r5, [sp, #12]
    5350:	2d01      	cmp	r5, #1
    5352:	d13e      	bne.n	53d2 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    5354:	2fff      	cmp	r7, #255	; 0xff
    5356:	d029      	beq.n	53ac <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5358:	ab06      	add	r3, sp, #24
    535a:	2202      	movs	r2, #2
    535c:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5360:	2103      	movs	r1, #3
    5362:	9300      	str	r3, [sp, #0]
    5364:	463a      	mov	r2, r7
    5366:	4b1f      	ldr	r3, [pc, #124]	; (53e4 <role_disable+0x274>)
    5368:	2000      	movs	r0, #0
    536a:	f7fe fda9 	bl	3ec0 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    536e:	2802      	cmp	r0, #2
    5370:	d10f      	bne.n	5392 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5372:	462a      	mov	r2, r5
    5374:	4629      	mov	r1, r5
    5376:	2003      	movs	r0, #3
    5378:	f7fd ff1e 	bl	31b8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    537c:	9b05      	ldr	r3, [sp, #20]
    537e:	2b02      	cmp	r3, #2
    5380:	d107      	bne.n	5392 <role_disable+0x222>
    5382:	4b19      	ldr	r3, [pc, #100]	; (53e8 <role_disable+0x278>)
    5384:	9301      	str	r3, [sp, #4]
    5386:	9300      	str	r3, [sp, #0]
    5388:	4a18      	ldr	r2, [pc, #96]	; (53ec <role_disable+0x27c>)
    538a:	4b1e      	ldr	r3, [pc, #120]	; (5404 <role_disable+0x294>)
    538c:	4919      	ldr	r1, [pc, #100]	; (53f4 <role_disable+0x284>)
    538e:	4824      	ldr	r0, [pc, #144]	; (5420 <role_disable+0x2b0>)
    5390:	e732      	b.n	51f8 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5392:	9b05      	ldr	r3, [sp, #20]
    5394:	b153      	cbz	r3, 53ac <role_disable+0x23c>
    5396:	9b05      	ldr	r3, [sp, #20]
    5398:	2b01      	cmp	r3, #1
    539a:	d007      	beq.n	53ac <role_disable+0x23c>
    539c:	4b12      	ldr	r3, [pc, #72]	; (53e8 <role_disable+0x278>)
    539e:	9301      	str	r3, [sp, #4]
    53a0:	9300      	str	r3, [sp, #0]
    53a2:	4a12      	ldr	r2, [pc, #72]	; (53ec <role_disable+0x27c>)
    53a4:	4b17      	ldr	r3, [pc, #92]	; (5404 <role_disable+0x294>)
    53a6:	4913      	ldr	r1, [pc, #76]	; (53f4 <role_disable+0x284>)
    53a8:	481e      	ldr	r0, [pc, #120]	; (5424 <role_disable+0x2b4>)
    53aa:	e725      	b.n	51f8 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    53ac:	7ce3      	ldrb	r3, [r4, #19]
    53ae:	2b00      	cmp	r3, #0
    53b0:	d0ae      	beq.n	5310 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    53b2:	4b1d      	ldr	r3, [pc, #116]	; (5428 <role_disable+0x2b8>)
    53b4:	2204      	movs	r2, #4
    53b6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    53b8:	2200      	movs	r2, #0
    53ba:	4611      	mov	r1, r2
    53bc:	2003      	movs	r0, #3
    53be:	f7fd ff23 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    53c2:	2800      	cmp	r0, #0
    53c4:	d1b9      	bne.n	533a <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    53c6:	7ce3      	ldrb	r3, [r4, #19]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d0a1      	beq.n	5310 <role_disable+0x1a0>
				cpu_sleep();
    53cc:	f7ff fdd4 	bl	4f78 <cpu_sleep>
    53d0:	e7f9      	b.n	53c6 <role_disable+0x256>
		LL_ASSERT(0);
    53d2:	4b05      	ldr	r3, [pc, #20]	; (53e8 <role_disable+0x278>)
    53d4:	9301      	str	r3, [sp, #4]
    53d6:	9300      	str	r3, [sp, #0]
    53d8:	4b0a      	ldr	r3, [pc, #40]	; (5404 <role_disable+0x294>)
    53da:	e71f      	b.n	521c <role_disable+0xac>
				return 1;
    53dc:	2001      	movs	r0, #1
    53de:	e79e      	b.n	531e <role_disable+0x1ae>
    53e0:	20000578 	.word	0x20000578
    53e4:	00004fbd 	.word	0x00004fbd
    53e8:	0000cbb3 	.word	0x0000cbb3
    53ec:	0000d49b 	.word	0x0000d49b
    53f0:	0000e048 	.word	0x0000e048
    53f4:	0000d4ea 	.word	0x0000d4ea
    53f8:	0000e751 	.word	0x0000e751
    53fc:	0000e711 	.word	0x0000e711
    5400:	0000d43a 	.word	0x0000d43a
    5404:	0000e034 	.word	0x0000e034
    5408:	0000e789 	.word	0x0000e789
    540c:	0000e7ba 	.word	0x0000e7ba
    5410:	0000e7f4 	.word	0x0000e7f4
    5414:	200032f0 	.word	0x200032f0
    5418:	0000e824 	.word	0x0000e824
    541c:	200033a0 	.word	0x200033a0
    5420:	0000e84a 	.word	0x0000e84a
    5424:	0000e87c 	.word	0x0000e87c
    5428:	20003320 	.word	0x20003320

0000542c <mayfly_xtal_retain>:
{
    542c:	b513      	push	{r0, r1, r4, lr}
    542e:	4b1d      	ldr	r3, [pc, #116]	; (54a4 <mayfly_xtal_retain+0x78>)
    5430:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    5432:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    5434:	b301      	cbz	r1, 5478 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    5436:	2a00      	cmp	r2, #0
    5438:	d132      	bne.n	54a0 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    543a:	2801      	cmp	r0, #1
    543c:	d00e      	beq.n	545c <mayfly_xtal_retain+0x30>
    543e:	4b1a      	ldr	r3, [pc, #104]	; (54a8 <mayfly_xtal_retain+0x7c>)
    5440:	9301      	str	r3, [sp, #4]
    5442:	9300      	str	r3, [sp, #0]
    5444:	4a19      	ldr	r2, [pc, #100]	; (54ac <mayfly_xtal_retain+0x80>)
    5446:	4b1a      	ldr	r3, [pc, #104]	; (54b0 <mayfly_xtal_retain+0x84>)
    5448:	491a      	ldr	r1, [pc, #104]	; (54b4 <mayfly_xtal_retain+0x88>)
    544a:	481b      	ldr	r0, [pc, #108]	; (54b8 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    544c:	f7fb fd0e 	bl	e6c <printk>
    5450:	4040      	eors	r0, r0
    5452:	f380 8811 	msr	BASEPRI, r0
    5456:	f04f 0004 	mov.w	r0, #4
    545a:	df02      	svc	2
			s_xtal_retained = 1;
    545c:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    545e:	4b17      	ldr	r3, [pc, #92]	; (54bc <mayfly_xtal_retain+0x90>)
    5460:	4611      	mov	r1, r2
    5462:	f7fd fed1 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!retval);
    5466:	b1d8      	cbz	r0, 54a0 <mayfly_xtal_retain+0x74>
    5468:	4b0f      	ldr	r3, [pc, #60]	; (54a8 <mayfly_xtal_retain+0x7c>)
    546a:	9301      	str	r3, [sp, #4]
    546c:	9300      	str	r3, [sp, #0]
    546e:	4a0f      	ldr	r2, [pc, #60]	; (54ac <mayfly_xtal_retain+0x80>)
    5470:	4b0f      	ldr	r3, [pc, #60]	; (54b0 <mayfly_xtal_retain+0x84>)
    5472:	4910      	ldr	r1, [pc, #64]	; (54b4 <mayfly_xtal_retain+0x88>)
    5474:	4812      	ldr	r0, [pc, #72]	; (54c0 <mayfly_xtal_retain+0x94>)
    5476:	e7e9      	b.n	544c <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    5478:	b192      	cbz	r2, 54a0 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    547a:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    547c:	b170      	cbz	r0, 549c <mayfly_xtal_retain+0x70>
    547e:	2801      	cmp	r0, #1
    5480:	d104      	bne.n	548c <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    5482:	4b10      	ldr	r3, [pc, #64]	; (54c4 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    5484:	2200      	movs	r2, #0
    5486:	4611      	mov	r1, r2
    5488:	4620      	mov	r0, r4
    548a:	e7ea      	b.n	5462 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    548c:	4b06      	ldr	r3, [pc, #24]	; (54a8 <mayfly_xtal_retain+0x7c>)
    548e:	9301      	str	r3, [sp, #4]
    5490:	9300      	str	r3, [sp, #0]
    5492:	4a06      	ldr	r2, [pc, #24]	; (54ac <mayfly_xtal_retain+0x80>)
    5494:	4b06      	ldr	r3, [pc, #24]	; (54b0 <mayfly_xtal_retain+0x84>)
    5496:	4907      	ldr	r1, [pc, #28]	; (54b4 <mayfly_xtal_retain+0x88>)
    5498:	480b      	ldr	r0, [pc, #44]	; (54c8 <mayfly_xtal_retain+0x9c>)
    549a:	e7d7      	b.n	544c <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    549c:	4b0b      	ldr	r3, [pc, #44]	; (54cc <mayfly_xtal_retain+0xa0>)
    549e:	e7f1      	b.n	5484 <mayfly_xtal_retain+0x58>
}
    54a0:	b002      	add	sp, #8
    54a2:	bd10      	pop	{r4, pc}
    54a4:	20000788 	.word	0x20000788
    54a8:	0000cbb3 	.word	0x0000cbb3
    54ac:	0000d49b 	.word	0x0000d49b
    54b0:	0000de16 	.word	0x0000de16
    54b4:	0000d4ea 	.word	0x0000d4ea
    54b8:	0000e56b 	.word	0x0000e56b
    54bc:	20003360 	.word	0x20003360
    54c0:	0000e59b 	.word	0x0000e59b
    54c4:	20003380 	.word	0x20003380
    54c8:	0000d43a 	.word	0x0000d43a
    54cc:	20003370 	.word	0x20003370

000054d0 <sched_after_mstr_free_slot_get>:
{
    54d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    54d6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    54d8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    54da:	f8df 9140 	ldr.w	r9, [pc, #320]	; 561c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    54de:	f88d 501f 	strb.w	r5, [sp, #31]
{
    54e2:	4680      	mov	r8, r0
    54e4:	4693      	mov	fp, r2
    54e6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    54e8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    54ec:	601c      	str	r4, [r3, #0]
    54ee:	9408      	str	r4, [sp, #32]
    54f0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    54f2:	2302      	movs	r3, #2
    54f4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    54f6:	ab09      	add	r3, sp, #36	; 0x24
    54f8:	9302      	str	r3, [sp, #8]
    54fa:	4b41      	ldr	r3, [pc, #260]	; (5600 <sched_after_mstr_free_slot_get+0x130>)
    54fc:	9301      	str	r3, [sp, #4]
    54fe:	ab08      	add	r3, sp, #32
    5500:	9300      	str	r3, [sp, #0]
    5502:	f10d 021f 	add.w	r2, sp, #31
    5506:	465b      	mov	r3, fp
    5508:	4641      	mov	r1, r8
    550a:	2000      	movs	r0, #0
    550c:	f7fe fd14 	bl	3f38 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5510:	2802      	cmp	r0, #2
    5512:	d014      	beq.n	553e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5514:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5516:	b1b3      	cbz	r3, 5546 <sched_after_mstr_free_slot_get+0x76>
    5518:	4b3a      	ldr	r3, [pc, #232]	; (5604 <sched_after_mstr_free_slot_get+0x134>)
    551a:	9301      	str	r3, [sp, #4]
    551c:	9300      	str	r3, [sp, #0]
    551e:	4a3a      	ldr	r2, [pc, #232]	; (5608 <sched_after_mstr_free_slot_get+0x138>)
    5520:	4b3a      	ldr	r3, [pc, #232]	; (560c <sched_after_mstr_free_slot_get+0x13c>)
    5522:	493b      	ldr	r1, [pc, #236]	; (5610 <sched_after_mstr_free_slot_get+0x140>)
    5524:	483b      	ldr	r0, [pc, #236]	; (5614 <sched_after_mstr_free_slot_get+0x144>)
    5526:	f7fb fca1 	bl	e6c <printk>
    552a:	4040      	eors	r0, r0
    552c:	f380 8811 	msr	BASEPRI, r0
    5530:	f04f 0004 	mov.w	r0, #4
    5534:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5536:	4641      	mov	r1, r8
    5538:	2000      	movs	r0, #0
    553a:	f7fe fd7b 	bl	4034 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5540:	2b02      	cmp	r3, #2
    5542:	d0f8      	beq.n	5536 <sched_after_mstr_free_slot_get+0x66>
    5544:	e7e6      	b.n	5514 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    5546:	f89d 201f 	ldrb.w	r2, [sp, #31]
    554a:	2aff      	cmp	r2, #255	; 0xff
    554c:	d04e      	beq.n	55ec <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    554e:	2a06      	cmp	r2, #6
    5550:	d9cf      	bls.n	54f2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5552:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    5556:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5558:	429a      	cmp	r2, r3
    555a:	daca      	bge.n	54f2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    555c:	3a07      	subs	r2, #7
    555e:	b292      	uxth	r2, r2
    5560:	f44f 7182 	mov.w	r1, #260	; 0x104
    5564:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    5568:	f7fd fdc4 	bl	30f4 <mem_get>
		if (conn && !conn->role) {
    556c:	2800      	cmp	r0, #0
    556e:	d0c0      	beq.n	54f2 <sched_after_mstr_free_slot_get+0x22>
    5570:	f990 301d 	ldrsb.w	r3, [r0, #29]
    5574:	2b00      	cmp	r3, #0
    5576:	dbbc      	blt.n	54f2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5578:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    557a:	9a08      	ldr	r2, [sp, #32]
    557c:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5580:	2b00      	cmp	r3, #0
    5582:	da12      	bge.n	55aa <sched_after_mstr_free_slot_get+0xda>
    5584:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    5586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    558a:	4571      	cmp	r1, lr
    558c:	bf2c      	ite	cs
    558e:	1852      	addcs	r2, r2, r1
    5590:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    5592:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    5594:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    5596:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    5598:	f101 0104 	add.w	r1, r1, #4
    559c:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    559e:	d108      	bne.n	55b2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    55a0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    55a4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    55a6:	4616      	mov	r6, r2
    55a8:	e7a3      	b.n	54f2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    55aa:	4573      	cmp	r3, lr
    55ac:	bf38      	it	cc
    55ae:	4673      	movcc	r3, lr
    55b0:	e7f0      	b.n	5594 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    55b2:	4631      	mov	r1, r6
    55b4:	4610      	mov	r0, r2
    55b6:	9305      	str	r3, [sp, #20]
    55b8:	9204      	str	r2, [sp, #16]
    55ba:	f7fe fd53 	bl	4064 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    55be:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    55c2:	4288      	cmp	r0, r1
    55c4:	9a04      	ldr	r2, [sp, #16]
    55c6:	9b05      	ldr	r3, [sp, #20]
    55c8:	d9ea      	bls.n	55a0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    55ca:	4813      	ldr	r0, [pc, #76]	; (5618 <sched_after_mstr_free_slot_get+0x148>)
    55cc:	4434      	add	r4, r6
    55ce:	fba4 0100 	umull	r0, r1, r4, r0
    55d2:	2307      	movs	r3, #7
    55d4:	fb03 1104 	mla	r1, r3, r4, r1
    55d8:	a307      	add	r3, pc, #28	; (adr r3, 55f8 <sched_after_mstr_free_slot_get+0x128>)
    55da:	e9d3 2300 	ldrd	r2, r3, [r3]
    55de:	f7fa fe19 	bl	214 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    55e2:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    55e4:	6038      	str	r0, [r7, #0]
}
    55e6:	b00b      	add	sp, #44	; 0x2c
    55e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    55ec:	2dff      	cmp	r5, #255	; 0xff
    55ee:	d1ec      	bne.n	55ca <sched_after_mstr_free_slot_get+0xfa>
    55f0:	e7f9      	b.n	55e6 <sched_after_mstr_free_slot_get+0x116>
    55f2:	bf00      	nop
    55f4:	f3af 8000 	nop.w
    55f8:	3b9aca00 	.word	0x3b9aca00
    55fc:	00000000 	.word	0x00000000
    5600:	00004fbd 	.word	0x00004fbd
    5604:	0000cbb3 	.word	0x0000cbb3
    5608:	0000d49b 	.word	0x0000d49b
    560c:	0000de52 	.word	0x0000de52
    5610:	0000d4ea 	.word	0x0000d4ea
    5614:	0000e91f 	.word	0x0000e91f
    5618:	1afd498d 	.word	0x1afd498d
    561c:	20000578 	.word	0x20000578

00005620 <isr_adv_ci_adva_check>:
{
    5620:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    5622:	7804      	ldrb	r4, [r0, #0]
    5624:	780a      	ldrb	r2, [r1, #0]
    5626:	f3c4 1380 	ubfx	r3, r4, #6, #1
    562a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    562e:	d119      	bne.n	5664 <isr_adv_ci_adva_check+0x44>
    5630:	f004 040f 	and.w	r4, r4, #15
    5634:	2c01      	cmp	r4, #1
    5636:	f101 0608 	add.w	r6, r1, #8
    563a:	f100 0502 	add.w	r5, r0, #2
    563e:	d008      	beq.n	5652 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    5640:	2206      	movs	r2, #6
    5642:	4631      	mov	r1, r6
    5644:	4628      	mov	r0, r5
    5646:	f7fc fa2c 	bl	1aa2 <memcmp>
			 BDADDR_SIZE)) ||
    564a:	fab0 f080 	clz	r0, r0
    564e:	0940      	lsrs	r0, r0, #5
    5650:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    5652:	2206      	movs	r2, #6
    5654:	4631      	mov	r1, r6
    5656:	4628      	mov	r0, r5
    5658:	f7fc fa23 	bl	1aa2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    565c:	2800      	cmp	r0, #0
    565e:	d1ef      	bne.n	5640 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    5660:	4620      	mov	r0, r4
    5662:	bd70      	pop	{r4, r5, r6, pc}
    5664:	2000      	movs	r0, #0
}
    5666:	bd70      	pop	{r4, r5, r6, pc}

00005668 <packet_rx_enqueue>:
{
    5668:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    566a:	4a1e      	ldr	r2, [pc, #120]	; (56e4 <packet_rx_enqueue+0x7c>)
    566c:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
    5670:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
    5674:	4299      	cmp	r1, r3
    5676:	d10e      	bne.n	5696 <packet_rx_enqueue+0x2e>
    5678:	4b1b      	ldr	r3, [pc, #108]	; (56e8 <packet_rx_enqueue+0x80>)
    567a:	9301      	str	r3, [sp, #4]
    567c:	9300      	str	r3, [sp, #0]
    567e:	4a1b      	ldr	r2, [pc, #108]	; (56ec <packet_rx_enqueue+0x84>)
    5680:	4b1b      	ldr	r3, [pc, #108]	; (56f0 <packet_rx_enqueue+0x88>)
    5682:	491c      	ldr	r1, [pc, #112]	; (56f4 <packet_rx_enqueue+0x8c>)
    5684:	481c      	ldr	r0, [pc, #112]	; (56f8 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    5686:	f7fb fbf1 	bl	e6c <printk>
    568a:	4040      	eors	r0, r0
    568c:	f380 8811 	msr	BASEPRI, r0
    5690:	f04f 0004 	mov.w	r0, #4
    5694:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5696:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    569a:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
    569e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    56a2:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.onion.link;
    56a6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    56a8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    56aa:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    56ae:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    56b2:	3301      	adds	r3, #1
    56b4:	b2db      	uxtb	r3, r3
		last = 0;
    56b6:	429c      	cmp	r4, r3
    56b8:	bf08      	it	eq
    56ba:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    56bc:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    56c0:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    56c4:	f7fd fd30 	bl	3128 <memq_enqueue>
	LL_ASSERT(link);
    56c8:	b938      	cbnz	r0, 56da <packet_rx_enqueue+0x72>
    56ca:	4b07      	ldr	r3, [pc, #28]	; (56e8 <packet_rx_enqueue+0x80>)
    56cc:	9301      	str	r3, [sp, #4]
    56ce:	9300      	str	r3, [sp, #0]
    56d0:	4a06      	ldr	r2, [pc, #24]	; (56ec <packet_rx_enqueue+0x84>)
    56d2:	4b07      	ldr	r3, [pc, #28]	; (56f0 <packet_rx_enqueue+0x88>)
    56d4:	4907      	ldr	r1, [pc, #28]	; (56f4 <packet_rx_enqueue+0x8c>)
    56d6:	4809      	ldr	r0, [pc, #36]	; (56fc <packet_rx_enqueue+0x94>)
    56d8:	e7d5      	b.n	5686 <packet_rx_enqueue+0x1e>
}
    56da:	b002      	add	sp, #8
    56dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    56e0:	f004 bb02 	b.w	9ce8 <radio_event_callback>
    56e4:	20000578 	.word	0x20000578
    56e8:	0000cbb3 	.word	0x0000cbb3
    56ec:	0000d49b 	.word	0x0000d49b
    56f0:	0000dfc6 	.word	0x0000dfc6
    56f4:	0000d4ea 	.word	0x0000d4ea
    56f8:	0000e618 	.word	0x0000e618
    56fc:	0000e66b 	.word	0x0000e66b

00005700 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    5700:	4a0b      	ldr	r2, [pc, #44]	; (5730 <rx_fc_lock+0x30>)
    5702:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    5706:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
    570a:	4299      	cmp	r1, r3
    570c:	d10e      	bne.n	572c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    570e:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    5712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5716:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
    571a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    571e:	3301      	adds	r3, #1
    5720:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5722:	2b03      	cmp	r3, #3
    5724:	bf08      	it	eq
    5726:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    5728:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	20000578 	.word	0x20000578

00005734 <ticker_success_assert>:
{
    5734:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5736:	b170      	cbz	r0, 5756 <ticker_success_assert+0x22>
    5738:	4b08      	ldr	r3, [pc, #32]	; (575c <ticker_success_assert+0x28>)
    573a:	9301      	str	r3, [sp, #4]
    573c:	9300      	str	r3, [sp, #0]
    573e:	4a08      	ldr	r2, [pc, #32]	; (5760 <ticker_success_assert+0x2c>)
    5740:	4b08      	ldr	r3, [pc, #32]	; (5764 <ticker_success_assert+0x30>)
    5742:	4909      	ldr	r1, [pc, #36]	; (5768 <ticker_success_assert+0x34>)
    5744:	4809      	ldr	r0, [pc, #36]	; (576c <ticker_success_assert+0x38>)
    5746:	f7fb fb91 	bl	e6c <printk>
    574a:	4040      	eors	r0, r0
    574c:	f380 8811 	msr	BASEPRI, r0
    5750:	f04f 0004 	mov.w	r0, #4
    5754:	df02      	svc	2
}
    5756:	b003      	add	sp, #12
    5758:	f85d fb04 	ldr.w	pc, [sp], #4
    575c:	0000cbb3 	.word	0x0000cbb3
    5760:	0000d49b 	.word	0x0000d49b
    5764:	0000dd62 	.word	0x0000dd62
    5768:	0000d4ea 	.word	0x0000d4ea
    576c:	0000ea3f 	.word	0x0000ea3f

00005770 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5770:	2801      	cmp	r0, #1
{
    5772:	b507      	push	{r0, r1, r2, lr}
    5774:	4b11      	ldr	r3, [pc, #68]	; (57bc <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    5776:	d116      	bne.n	57a6 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5778:	7c9a      	ldrb	r2, [r3, #18]
    577a:	2a05      	cmp	r2, #5
    577c:	d104      	bne.n	5788 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    577e:	2200      	movs	r2, #0
    5780:	749a      	strb	r2, [r3, #18]
}
    5782:	b003      	add	sp, #12
    5784:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    5788:	4b0d      	ldr	r3, [pc, #52]	; (57c0 <ticker_stop_adv_assert+0x50>)
    578a:	9301      	str	r3, [sp, #4]
    578c:	9300      	str	r3, [sp, #0]
    578e:	4a0d      	ldr	r2, [pc, #52]	; (57c4 <ticker_stop_adv_assert+0x54>)
    5790:	4b0d      	ldr	r3, [pc, #52]	; (57c8 <ticker_stop_adv_assert+0x58>)
    5792:	490e      	ldr	r1, [pc, #56]	; (57cc <ticker_stop_adv_assert+0x5c>)
    5794:	480e      	ldr	r0, [pc, #56]	; (57d0 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    5796:	f7fb fb69 	bl	e6c <printk>
    579a:	4040      	eors	r0, r0
    579c:	f380 8811 	msr	BASEPRI, r0
    57a0:	f04f 0004 	mov.w	r0, #4
    57a4:	df02      	svc	2
    57a6:	7c1b      	ldrb	r3, [r3, #16]
    57a8:	2b05      	cmp	r3, #5
    57aa:	d1ea      	bne.n	5782 <ticker_stop_adv_assert+0x12>
    57ac:	4b04      	ldr	r3, [pc, #16]	; (57c0 <ticker_stop_adv_assert+0x50>)
    57ae:	9301      	str	r3, [sp, #4]
    57b0:	9300      	str	r3, [sp, #0]
    57b2:	4a04      	ldr	r2, [pc, #16]	; (57c4 <ticker_stop_adv_assert+0x54>)
    57b4:	4b04      	ldr	r3, [pc, #16]	; (57c8 <ticker_stop_adv_assert+0x58>)
    57b6:	4905      	ldr	r1, [pc, #20]	; (57cc <ticker_stop_adv_assert+0x5c>)
    57b8:	4806      	ldr	r0, [pc, #24]	; (57d4 <ticker_stop_adv_assert+0x64>)
    57ba:	e7ec      	b.n	5796 <ticker_stop_adv_assert+0x26>
    57bc:	20000578 	.word	0x20000578
    57c0:	0000cbb3 	.word	0x0000cbb3
    57c4:	0000d49b 	.word	0x0000d49b
    57c8:	0000dd78 	.word	0x0000dd78
    57cc:	0000d4ea 	.word	0x0000d4ea
    57d0:	0000d43a 	.word	0x0000d43a
    57d4:	0000e985 	.word	0x0000e985

000057d8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    57d8:	2801      	cmp	r0, #1
{
    57da:	b507      	push	{r0, r1, r2, lr}
    57dc:	4b11      	ldr	r3, [pc, #68]	; (5824 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    57de:	d116      	bne.n	580e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    57e0:	7c9a      	ldrb	r2, [r3, #18]
    57e2:	2a06      	cmp	r2, #6
    57e4:	d104      	bne.n	57f0 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    57e6:	2200      	movs	r2, #0
    57e8:	749a      	strb	r2, [r3, #18]
}
    57ea:	b003      	add	sp, #12
    57ec:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    57f0:	4b0d      	ldr	r3, [pc, #52]	; (5828 <ticker_stop_scan_assert+0x50>)
    57f2:	9301      	str	r3, [sp, #4]
    57f4:	9300      	str	r3, [sp, #0]
    57f6:	4a0d      	ldr	r2, [pc, #52]	; (582c <ticker_stop_scan_assert+0x54>)
    57f8:	4b0d      	ldr	r3, [pc, #52]	; (5830 <ticker_stop_scan_assert+0x58>)
    57fa:	490e      	ldr	r1, [pc, #56]	; (5834 <ticker_stop_scan_assert+0x5c>)
    57fc:	480e      	ldr	r0, [pc, #56]	; (5838 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    57fe:	f7fb fb35 	bl	e6c <printk>
    5802:	4040      	eors	r0, r0
    5804:	f380 8811 	msr	BASEPRI, r0
    5808:	f04f 0004 	mov.w	r0, #4
    580c:	df02      	svc	2
    580e:	7c1b      	ldrb	r3, [r3, #16]
    5810:	2b06      	cmp	r3, #6
    5812:	d1ea      	bne.n	57ea <ticker_stop_scan_assert+0x12>
    5814:	4b04      	ldr	r3, [pc, #16]	; (5828 <ticker_stop_scan_assert+0x50>)
    5816:	9301      	str	r3, [sp, #4]
    5818:	9300      	str	r3, [sp, #0]
    581a:	4a04      	ldr	r2, [pc, #16]	; (582c <ticker_stop_scan_assert+0x54>)
    581c:	4b04      	ldr	r3, [pc, #16]	; (5830 <ticker_stop_scan_assert+0x58>)
    581e:	4905      	ldr	r1, [pc, #20]	; (5834 <ticker_stop_scan_assert+0x5c>)
    5820:	4806      	ldr	r0, [pc, #24]	; (583c <ticker_stop_scan_assert+0x64>)
    5822:	e7ec      	b.n	57fe <ticker_stop_scan_assert+0x26>
    5824:	20000578 	.word	0x20000578
    5828:	0000cbb3 	.word	0x0000cbb3
    582c:	0000d49b 	.word	0x0000d49b
    5830:	0000dd8f 	.word	0x0000dd8f
    5834:	0000d4ea 	.word	0x0000d4ea
    5838:	0000d43a 	.word	0x0000d43a
    583c:	0000ea00 	.word	0x0000ea00

00005840 <ticker_update_adv_assert>:
{
    5840:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5842:	b190      	cbz	r0, 586a <ticker_update_adv_assert+0x2a>
    5844:	4b0a      	ldr	r3, [pc, #40]	; (5870 <ticker_update_adv_assert+0x30>)
    5846:	7c9b      	ldrb	r3, [r3, #18]
    5848:	2b05      	cmp	r3, #5
    584a:	d00e      	beq.n	586a <ticker_update_adv_assert+0x2a>
    584c:	4b09      	ldr	r3, [pc, #36]	; (5874 <ticker_update_adv_assert+0x34>)
    584e:	9301      	str	r3, [sp, #4]
    5850:	9300      	str	r3, [sp, #0]
    5852:	4a09      	ldr	r2, [pc, #36]	; (5878 <ticker_update_adv_assert+0x38>)
    5854:	4b09      	ldr	r3, [pc, #36]	; (587c <ticker_update_adv_assert+0x3c>)
    5856:	490a      	ldr	r1, [pc, #40]	; (5880 <ticker_update_adv_assert+0x40>)
    5858:	480a      	ldr	r0, [pc, #40]	; (5884 <ticker_update_adv_assert+0x44>)
    585a:	f7fb fb07 	bl	e6c <printk>
    585e:	4040      	eors	r0, r0
    5860:	f380 8811 	msr	BASEPRI, r0
    5864:	f04f 0004 	mov.w	r0, #4
    5868:	df02      	svc	2
}
    586a:	b003      	add	sp, #12
    586c:	f85d fb04 	ldr.w	pc, [sp], #4
    5870:	20000578 	.word	0x20000578
    5874:	0000cbb3 	.word	0x0000cbb3
    5878:	0000d49b 	.word	0x0000d49b
    587c:	0000dda7 	.word	0x0000dda7
    5880:	0000d4ea 	.word	0x0000d4ea
    5884:	0000ea6c 	.word	0x0000ea6c

00005888 <ticker_update_slave_assert>:
{
    5888:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    588a:	b198      	cbz	r0, 58b4 <ticker_update_slave_assert+0x2c>
    588c:	4b0b      	ldr	r3, [pc, #44]	; (58bc <ticker_update_slave_assert+0x34>)
    588e:	7c9b      	ldrb	r3, [r3, #18]
    5890:	b2c9      	uxtb	r1, r1
    5892:	4299      	cmp	r1, r3
    5894:	d00e      	beq.n	58b4 <ticker_update_slave_assert+0x2c>
    5896:	4b0a      	ldr	r3, [pc, #40]	; (58c0 <ticker_update_slave_assert+0x38>)
    5898:	9301      	str	r3, [sp, #4]
    589a:	9300      	str	r3, [sp, #0]
    589c:	4a09      	ldr	r2, [pc, #36]	; (58c4 <ticker_update_slave_assert+0x3c>)
    589e:	4b0a      	ldr	r3, [pc, #40]	; (58c8 <ticker_update_slave_assert+0x40>)
    58a0:	490a      	ldr	r1, [pc, #40]	; (58cc <ticker_update_slave_assert+0x44>)
    58a2:	480b      	ldr	r0, [pc, #44]	; (58d0 <ticker_update_slave_assert+0x48>)
    58a4:	f7fb fae2 	bl	e6c <printk>
    58a8:	4040      	eors	r0, r0
    58aa:	f380 8811 	msr	BASEPRI, r0
    58ae:	f04f 0004 	mov.w	r0, #4
    58b2:	df02      	svc	2
}
    58b4:	b003      	add	sp, #12
    58b6:	f85d fb04 	ldr.w	pc, [sp], #4
    58ba:	bf00      	nop
    58bc:	20000578 	.word	0x20000578
    58c0:	0000cbb3 	.word	0x0000cbb3
    58c4:	0000d49b 	.word	0x0000d49b
    58c8:	0000ddc0 	.word	0x0000ddc0
    58cc:	0000d4ea 	.word	0x0000d4ea
    58d0:	0000eabb 	.word	0x0000eabb

000058d4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    58d4:	4b04      	ldr	r3, [pc, #16]	; (58e8 <ticker_job_disable+0x14>)
    58d6:	7d1b      	ldrb	r3, [r3, #20]
    58d8:	b123      	cbz	r3, 58e4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    58da:	2101      	movs	r1, #1
    58dc:	2200      	movs	r2, #0
    58de:	4608      	mov	r0, r1
    58e0:	f7fd bc6a 	b.w	31b8 <mayfly_enable>
    58e4:	4770      	bx	lr
    58e6:	bf00      	nop
    58e8:	20000578 	.word	0x20000578

000058ec <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    58ec:	2806      	cmp	r0, #6
{
    58ee:	b510      	push	{r4, lr}
    58f0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    58f2:	d90a      	bls.n	590a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    58f4:	4b09      	ldr	r3, [pc, #36]	; (591c <hdr_conn_get+0x30>)
    58f6:	1fc2      	subs	r2, r0, #7
    58f8:	b292      	uxth	r2, r2
    58fa:	f44f 7182 	mov.w	r1, #260	; 0x104
    58fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    5902:	f7fd fbf7 	bl	30f4 <mem_get>
    5906:	6020      	str	r0, [r4, #0]
    5908:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    590a:	2805      	cmp	r0, #5
    590c:	d004      	beq.n	5918 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    590e:	2806      	cmp	r0, #6
	return NULL;
    5910:	4803      	ldr	r0, [pc, #12]	; (5920 <hdr_conn_get+0x34>)
    5912:	bf18      	it	ne
    5914:	2000      	movne	r0, #0
    5916:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    5918:	4802      	ldr	r0, [pc, #8]	; (5924 <hdr_conn_get+0x38>)
}
    591a:	bd10      	pop	{r4, pc}
    591c:	20000578 	.word	0x20000578
    5920:	20000648 	.word	0x20000648
    5924:	20000590 	.word	0x20000590

00005928 <event_stop.part.12>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5928:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    592a:	4b07      	ldr	r3, [pc, #28]	; (5948 <event_stop.part.12+0x20>)
    592c:	9301      	str	r3, [sp, #4]
    592e:	9300      	str	r3, [sp, #0]
    5930:	4a06      	ldr	r2, [pc, #24]	; (594c <event_stop.part.12+0x24>)
    5932:	4b07      	ldr	r3, [pc, #28]	; (5950 <event_stop.part.12+0x28>)
    5934:	4907      	ldr	r1, [pc, #28]	; (5954 <event_stop.part.12+0x2c>)
    5936:	4808      	ldr	r0, [pc, #32]	; (5958 <event_stop.part.12+0x30>)
    5938:	f7fb fa98 	bl	e6c <printk>
    593c:	4040      	eors	r0, r0
    593e:	f380 8811 	msr	BASEPRI, r0
    5942:	f04f 0004 	mov.w	r0, #4
    5946:	df02      	svc	2
    5948:	0000cbb3 	.word	0x0000cbb3
    594c:	0000d49b 	.word	0x0000d49b
    5950:	0000dea4 	.word	0x0000dea4
    5954:	0000d4ea 	.word	0x0000d4ea
    5958:	0000e59b 	.word	0x0000e59b

0000595c <event_stop>:
	s_mfy_radio_stop.param = context;
    595c:	4a06      	ldr	r2, [pc, #24]	; (5978 <event_stop+0x1c>)
{
    595e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5960:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5962:	4613      	mov	r3, r2
    5964:	2200      	movs	r2, #0
    5966:	4611      	mov	r1, r2
    5968:	4610      	mov	r0, r2
    596a:	f7fd fc4d 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    596e:	b108      	cbz	r0, 5974 <event_stop+0x18>
    5970:	f7ff ffda 	bl	5928 <event_stop.part.12>
    5974:	bd08      	pop	{r3, pc}
    5976:	bf00      	nop
    5978:	20003300 	.word	0x20003300

0000597c <event_active>:
{
    597c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    597e:	2200      	movs	r2, #0
    5980:	4b0b      	ldr	r3, [pc, #44]	; (59b0 <event_active+0x34>)
    5982:	4611      	mov	r1, r2
    5984:	4610      	mov	r0, r2
    5986:	f7fd fc3f 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    598a:	b170      	cbz	r0, 59aa <event_active+0x2e>
    598c:	4b09      	ldr	r3, [pc, #36]	; (59b4 <event_active+0x38>)
    598e:	9301      	str	r3, [sp, #4]
    5990:	9300      	str	r3, [sp, #0]
    5992:	4a09      	ldr	r2, [pc, #36]	; (59b8 <event_active+0x3c>)
    5994:	4b09      	ldr	r3, [pc, #36]	; (59bc <event_active+0x40>)
    5996:	490a      	ldr	r1, [pc, #40]	; (59c0 <event_active+0x44>)
    5998:	480a      	ldr	r0, [pc, #40]	; (59c4 <event_active+0x48>)
    599a:	f7fb fa67 	bl	e6c <printk>
    599e:	4040      	eors	r0, r0
    59a0:	f380 8811 	msr	BASEPRI, r0
    59a4:	f04f 0004 	mov.w	r0, #4
    59a8:	df02      	svc	2
}
    59aa:	b003      	add	sp, #12
    59ac:	f85d fb04 	ldr.w	pc, [sp], #4
    59b0:	200032c0 	.word	0x200032c0
    59b4:	0000cbb3 	.word	0x0000cbb3
    59b8:	0000d49b 	.word	0x0000d49b
    59bc:	0000ddef 	.word	0x0000ddef
    59c0:	0000d4ea 	.word	0x0000d4ea
    59c4:	0000e59b 	.word	0x0000e59b

000059c8 <event_xtal>:
{
    59c8:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    59ca:	2200      	movs	r2, #0
    59cc:	4b0b      	ldr	r3, [pc, #44]	; (59fc <event_xtal+0x34>)
    59ce:	4611      	mov	r1, r2
    59d0:	4610      	mov	r0, r2
    59d2:	f7fd fc19 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    59d6:	b170      	cbz	r0, 59f6 <event_xtal+0x2e>
    59d8:	4b09      	ldr	r3, [pc, #36]	; (5a00 <event_xtal+0x38>)
    59da:	9301      	str	r3, [sp, #4]
    59dc:	9300      	str	r3, [sp, #0]
    59de:	4a09      	ldr	r2, [pc, #36]	; (5a04 <event_xtal+0x3c>)
    59e0:	4b09      	ldr	r3, [pc, #36]	; (5a08 <event_xtal+0x40>)
    59e2:	490a      	ldr	r1, [pc, #40]	; (5a0c <event_xtal+0x44>)
    59e4:	480a      	ldr	r0, [pc, #40]	; (5a10 <event_xtal+0x48>)
    59e6:	f7fb fa41 	bl	e6c <printk>
    59ea:	4040      	eors	r0, r0
    59ec:	f380 8811 	msr	BASEPRI, r0
    59f0:	f04f 0004 	mov.w	r0, #4
    59f4:	df02      	svc	2
}
    59f6:	b003      	add	sp, #12
    59f8:	f85d fb04 	ldr.w	pc, [sp], #4
    59fc:	20003350 	.word	0x20003350
    5a00:	0000cbb3 	.word	0x0000cbb3
    5a04:	0000d49b 	.word	0x0000d49b
    5a08:	0000de0b 	.word	0x0000de0b
    5a0c:	0000d4ea 	.word	0x0000d4ea
    5a10:	0000e59b 	.word	0x0000e59b

00005a14 <mayfly_radio_active>:
{
    5a14:	b507      	push	{r0, r1, r2, lr}
    5a16:	4a12      	ldr	r2, [pc, #72]	; (5a60 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    5a18:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    5a1a:	b140      	cbz	r0, 5a2e <mayfly_radio_active+0x1a>
		if (s_active++) {
    5a1c:	1c59      	adds	r1, r3, #1
    5a1e:	7011      	strb	r1, [r2, #0]
    5a20:	b9d3      	cbnz	r3, 5a58 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    5a22:	2001      	movs	r0, #1
}
    5a24:	b003      	add	sp, #12
    5a26:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    5a2a:	f004 b95b 	b.w	9ce4 <radio_active_callback>
		LL_ASSERT(s_active);
    5a2e:	b973      	cbnz	r3, 5a4e <mayfly_radio_active+0x3a>
    5a30:	4b0c      	ldr	r3, [pc, #48]	; (5a64 <mayfly_radio_active+0x50>)
    5a32:	9301      	str	r3, [sp, #4]
    5a34:	9300      	str	r3, [sp, #0]
    5a36:	4a0c      	ldr	r2, [pc, #48]	; (5a68 <mayfly_radio_active+0x54>)
    5a38:	4b0c      	ldr	r3, [pc, #48]	; (5a6c <mayfly_radio_active+0x58>)
    5a3a:	490d      	ldr	r1, [pc, #52]	; (5a70 <mayfly_radio_active+0x5c>)
    5a3c:	480d      	ldr	r0, [pc, #52]	; (5a74 <mayfly_radio_active+0x60>)
    5a3e:	f7fb fa15 	bl	e6c <printk>
    5a42:	4040      	eors	r0, r0
    5a44:	f380 8811 	msr	BASEPRI, r0
    5a48:	f04f 0004 	mov.w	r0, #4
    5a4c:	df02      	svc	2
		if (--s_active) {
    5a4e:	3b01      	subs	r3, #1
    5a50:	b2db      	uxtb	r3, r3
    5a52:	7013      	strb	r3, [r2, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d0e5      	beq.n	5a24 <mayfly_radio_active+0x10>
}
    5a58:	b003      	add	sp, #12
    5a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5a5e:	bf00      	nop
    5a60:	2000072c 	.word	0x2000072c
    5a64:	0000cbb3 	.word	0x0000cbb3
    5a68:	0000d49b 	.word	0x0000d49b
    5a6c:	0000dddb 	.word	0x0000dddb
    5a70:	0000d4ea 	.word	0x0000d4ea
    5a74:	0000e4f0 	.word	0x0000e4f0

00005a78 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    5a78:	2000      	movs	r0, #0
    5a7a:	f7ff bfcb 	b.w	5a14 <mayfly_radio_active>
	...

00005a80 <mayfly_radio_stop>:
{
    5a80:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    5a82:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    5a84:	1f03      	subs	r3, r0, #4
    5a86:	2b01      	cmp	r3, #1
    5a88:	d90e      	bls.n	5aa8 <mayfly_radio_stop+0x28>
    5a8a:	4b11      	ldr	r3, [pc, #68]	; (5ad0 <mayfly_radio_stop+0x50>)
    5a8c:	9301      	str	r3, [sp, #4]
    5a8e:	9300      	str	r3, [sp, #0]
    5a90:	4a10      	ldr	r2, [pc, #64]	; (5ad4 <mayfly_radio_stop+0x54>)
    5a92:	4b11      	ldr	r3, [pc, #68]	; (5ad8 <mayfly_radio_stop+0x58>)
    5a94:	4911      	ldr	r1, [pc, #68]	; (5adc <mayfly_radio_stop+0x5c>)
    5a96:	4812      	ldr	r0, [pc, #72]	; (5ae0 <mayfly_radio_stop+0x60>)
    5a98:	f7fb f9e8 	bl	e6c <printk>
    5a9c:	4040      	eors	r0, r0
    5a9e:	f380 8811 	msr	BASEPRI, r0
    5aa2:	f04f 0004 	mov.w	r0, #4
    5aa6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    5aa8:	4a0e      	ldr	r2, [pc, #56]	; (5ae4 <mayfly_radio_stop+0x64>)
    5aaa:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    5aac:	b143      	cbz	r3, 5ac0 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    5aae:	3b04      	subs	r3, #4
    5ab0:	2b01      	cmp	r3, #1
    5ab2:	d905      	bls.n	5ac0 <mayfly_radio_stop+0x40>
			_radio.state = state;
    5ab4:	7510      	strb	r0, [r2, #20]
}
    5ab6:	b003      	add	sp, #12
    5ab8:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    5abc:	f004 bee0 	b.w	a880 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    5ac0:	f004 ff10 	bl	a8e4 <radio_is_idle>
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d0f6      	beq.n	5ab6 <mayfly_radio_stop+0x36>
}
    5ac8:	b003      	add	sp, #12
    5aca:	f85d fb04 	ldr.w	pc, [sp], #4
    5ace:	bf00      	nop
    5ad0:	0000cbb3 	.word	0x0000cbb3
    5ad4:	0000d49b 	.word	0x0000d49b
    5ad8:	0000de92 	.word	0x0000de92
    5adc:	0000d4ea 	.word	0x0000d4ea
    5ae0:	0000e51a 	.word	0x0000e51a
    5ae4:	20000578 	.word	0x20000578

00005ae8 <rx_packet_set>:
{
    5ae8:	b538      	push	{r3, r4, r5, lr}
    5aea:	4605      	mov	r5, r0
    5aec:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    5aee:	2100      	movs	r1, #0
    5af0:	4608      	mov	r0, r1
    5af2:	f004 fe2b 	bl	a74c <radio_phy_set>
	if (conn->enc_rx) {
    5af6:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5afa:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    5afc:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    5b00:	d50d      	bpl.n	5b1e <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    5b02:	211f      	movs	r1, #31
    5b04:	2008      	movs	r0, #8
    5b06:	f004 fe67 	bl	a7d8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    5b0a:	4622      	mov	r2, r4
    5b0c:	2100      	movs	r1, #0
    5b0e:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    5b12:	f005 f899 	bl	ac48 <radio_ccm_rx_pkt_set>
}
    5b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    5b1a:	f004 be8b 	b.w	a834 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    5b1e:	2008      	movs	r0, #8
    5b20:	211b      	movs	r1, #27
    5b22:	f004 fe59 	bl	a7d8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    5b26:	4620      	mov	r0, r4
    5b28:	e7f5      	b.n	5b16 <rx_packet_set+0x2e>
	...

00005b2c <pdu_node_tx_release>:
{
    5b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    5b2e:	4a17      	ldr	r2, [pc, #92]	; (5b8c <pdu_node_tx_release+0x60>)
    5b30:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    5b34:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    5b38:	3301      	adds	r3, #1
    5b3a:	b2db      	uxtb	r3, r3
		last = 0;
    5b3c:	429c      	cmp	r4, r3
    5b3e:	bf08      	it	eq
    5b40:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    5b42:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
    5b46:	429c      	cmp	r4, r3
    5b48:	d10e      	bne.n	5b68 <pdu_node_tx_release+0x3c>
    5b4a:	4b11      	ldr	r3, [pc, #68]	; (5b90 <pdu_node_tx_release+0x64>)
    5b4c:	9301      	str	r3, [sp, #4]
    5b4e:	9300      	str	r3, [sp, #0]
    5b50:	4a10      	ldr	r2, [pc, #64]	; (5b94 <pdu_node_tx_release+0x68>)
    5b52:	4b11      	ldr	r3, [pc, #68]	; (5b98 <pdu_node_tx_release+0x6c>)
    5b54:	4911      	ldr	r1, [pc, #68]	; (5b9c <pdu_node_tx_release+0x70>)
    5b56:	4812      	ldr	r0, [pc, #72]	; (5ba0 <pdu_node_tx_release+0x74>)
    5b58:	f7fb f988 	bl	e6c <printk>
    5b5c:	4040      	eors	r0, r0
    5b5e:	f380 8811 	msr	BASEPRI, r0
    5b62:	f04f 0004 	mov.w	r0, #4
    5b66:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    5b68:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
    5b6c:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
    5b70:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    5b74:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
    5b78:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    5b7c:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    5b7e:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
    5b82:	b003      	add	sp, #12
    5b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    5b88:	f004 b8ae 	b.w	9ce8 <radio_event_callback>
    5b8c:	20000578 	.word	0x20000578
    5b90:	0000cbb3 	.word	0x0000cbb3
    5b94:	0000d49b 	.word	0x0000d49b
    5b98:	0000dfd8 	.word	0x0000dfd8
    5b9c:	0000d4ea 	.word	0x0000d4ea
    5ba0:	0000e691 	.word	0x0000e691

00005ba4 <packet_tx_enqueue>:
{
    5ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5ba8:	4c24      	ldr	r4, [pc, #144]	; (5c3c <packet_tx_enqueue+0x98>)
{
    5baa:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    5bac:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5bae:	b12e      	cbz	r6, 5bbc <packet_tx_enqueue+0x18>
    5bb0:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
    5bb4:	f894 216e 	ldrb.w	r2, [r4, #366]	; 0x16e
    5bb8:	429a      	cmp	r2, r3
    5bba:	d101      	bne.n	5bc0 <packet_tx_enqueue+0x1c>
    5bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5bc0:	f894 816d 	ldrb.w	r8, [r4, #365]	; 0x16d
    5bc4:	f8d4 9164 	ldr.w	r9, [r4, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5bc8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    5bcc:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5bd0:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5bd4:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    5bd8:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    5bda:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5bdc:	f7fd fa8a 	bl	30f4 <mem_get>
    5be0:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    5be2:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    5be6:	8c1a      	ldrh	r2, [r3, #32]
    5be8:	4282      	cmp	r2, r0
    5bea:	d11f      	bne.n	5c2c <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    5bec:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    5bf0:	b942      	cbnz	r2, 5c04 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    5bf2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    5bf6:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    5bfa:	b91a      	cbnz	r2, 5c04 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    5bfc:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    5c00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    5c04:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    5c08:	b102      	cbz	r2, 5c0c <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    5c0a:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5c0c:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    5c10:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    5c14:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    5c18:	3301      	adds	r3, #1
    5c1a:	b2db      	uxtb	r3, r3
			first = 0;
    5c1c:	429a      	cmp	r2, r3
    5c1e:	bf08      	it	eq
    5c20:	2300      	moveq	r3, #0
    5c22:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    5c24:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
    5c28:	b2f6      	uxtb	r6, r6
    5c2a:	e7c0      	b.n	5bae <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5c2c:	792b      	ldrb	r3, [r5, #4]
    5c2e:	f367 0301 	bfi	r3, r7, #0, #2
    5c32:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    5c34:	4629      	mov	r1, r5
    5c36:	f7ff ff79 	bl	5b2c <pdu_node_tx_release>
    5c3a:	e7e9      	b.n	5c10 <packet_tx_enqueue+0x6c>
    5c3c:	20000578 	.word	0x20000578

00005c40 <connection_release>:
{
    5c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5c42:	2201      	movs	r2, #1
{
    5c44:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5c46:	4611      	mov	r1, r2
    5c48:	2000      	movs	r0, #0
    5c4a:	f7fd fab5 	bl	31b8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c4e:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    5c52:	2100      	movs	r1, #0
    5c54:	f242 23ea 	movw	r3, #8938	; 0x22ea
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c58:	3207      	adds	r2, #7
	ticker_status =
    5c5a:	9300      	str	r3, [sp, #0]
    5c5c:	4608      	mov	r0, r1
    5c5e:	4b3e      	ldr	r3, [pc, #248]	; (5d58 <connection_release+0x118>)
    5c60:	b2d2      	uxtb	r2, r2
    5c62:	f7fe f92d 	bl	3ec0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c66:	f030 0102 	bics.w	r1, r0, #2
    5c6a:	d00e      	beq.n	5c8a <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c6c:	4b3b      	ldr	r3, [pc, #236]	; (5d5c <connection_release+0x11c>)
    5c6e:	9301      	str	r3, [sp, #4]
    5c70:	9300      	str	r3, [sp, #0]
    5c72:	4a3b      	ldr	r2, [pc, #236]	; (5d60 <connection_release+0x120>)
    5c74:	4b3b      	ldr	r3, [pc, #236]	; (5d64 <connection_release+0x124>)
    5c76:	493c      	ldr	r1, [pc, #240]	; (5d68 <connection_release+0x128>)
    5c78:	483c      	ldr	r0, [pc, #240]	; (5d6c <connection_release+0x12c>)
    5c7a:	f7fb f8f7 	bl	e6c <printk>
    5c7e:	4040      	eors	r0, r0
    5c80:	f380 8811 	msr	BASEPRI, r0
    5c84:	f04f 0004 	mov.w	r0, #4
    5c88:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    5c8a:	4b39      	ldr	r3, [pc, #228]	; (5d70 <connection_release+0x130>)
    5c8c:	7d1a      	ldrb	r2, [r3, #20]
    5c8e:	2a05      	cmp	r2, #5
    5c90:	461d      	mov	r5, r3
    5c92:	d11b      	bne.n	5ccc <connection_release+0x8c>
					  conn->handle))) {
    5c94:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    5c96:	7c18      	ldrb	r0, [r3, #16]
    5c98:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    5c9a:	4290      	cmp	r0, r2
    5c9c:	d116      	bne.n	5ccc <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    5c9e:	7419      	strb	r1, [r3, #16]
		ticker_status =
    5ca0:	f242 23fb 	movw	r3, #8955	; 0x22fb
    5ca4:	9300      	str	r3, [sp, #0]
    5ca6:	2201      	movs	r2, #1
    5ca8:	4b2b      	ldr	r3, [pc, #172]	; (5d58 <connection_release+0x118>)
    5caa:	4608      	mov	r0, r1
    5cac:	f7fe f908 	bl	3ec0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5cb0:	f030 0202 	bics.w	r2, r0, #2
    5cb4:	d1da      	bne.n	5c6c <connection_release+0x2c>
		ticker_status =
    5cb6:	f242 3302 	movw	r3, #8962	; 0x2302
    5cba:	9300      	str	r3, [sp, #0]
    5cbc:	4611      	mov	r1, r2
    5cbe:	4b26      	ldr	r3, [pc, #152]	; (5d58 <connection_release+0x118>)
    5cc0:	4610      	mov	r0, r2
    5cc2:	f7fe f8fd 	bl	3ec0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5cc6:	f030 0302 	bics.w	r3, r0, #2
    5cca:	d1cf      	bne.n	5c6c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5ccc:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5cd0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5cd4:	4299      	cmp	r1, r3
    5cd6:	d003      	beq.n	5ce0 <connection_release+0xa0>
    5cd8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5cdc:	4299      	cmp	r1, r3
    5cde:	d101      	bne.n	5ce4 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5ce0:	4e24      	ldr	r6, [pc, #144]	; (5d74 <connection_release+0x134>)
    5ce2:	e012      	b.n	5d0a <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5ce4:	790b      	ldrb	r3, [r1, #4]
    5ce6:	f36f 0301 	bfc	r3, #0, #2
    5cea:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5cec:	680b      	ldr	r3, [r1, #0]
    5cee:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    5cf2:	8c20      	ldrh	r0, [r4, #32]
    5cf4:	f7ff ff1a 	bl	5b2c <pdu_node_tx_release>
    5cf8:	e7e8      	b.n	5ccc <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5cfa:	6803      	ldr	r3, [r0, #0]
    5cfc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5d00:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5d04:	4631      	mov	r1, r6
    5d06:	f7fd f9e0 	bl	30ca <mem_release>
	while ((conn->pkt_tx_head) &&
    5d0a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5d0e:	b118      	cbz	r0, 5d18 <connection_release+0xd8>
    5d10:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5d14:	4298      	cmp	r0, r3
    5d16:	d1f0      	bne.n	5cfa <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    5d18:	2300      	movs	r3, #0
    5d1a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    5d1e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    5d22:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5d26:	b951      	cbnz	r1, 5d3e <connection_release+0xfe>
	conn->handle = 0xffff;
    5d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5d2c:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5d2e:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    5d32:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    5d34:	bf08      	it	eq
    5d36:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
    5d3a:	b002      	add	sp, #8
    5d3c:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5d3e:	790b      	ldrb	r3, [r1, #4]
    5d40:	f36f 0301 	bfc	r3, #0, #2
    5d44:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5d46:	680b      	ldr	r3, [r1, #0]
    5d48:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5d4c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    5d50:	8c20      	ldrh	r0, [r4, #32]
    5d52:	f7ff feeb 	bl	5b2c <pdu_node_tx_release>
    5d56:	e7e4      	b.n	5d22 <connection_release+0xe2>
    5d58:	00005735 	.word	0x00005735
    5d5c:	0000cbb3 	.word	0x0000cbb3
    5d60:	0000d49b 	.word	0x0000d49b
    5d64:	0000dfec 	.word	0x0000dfec
    5d68:	0000d4ea 	.word	0x0000d4ea
    5d6c:	0000e075 	.word	0x0000e075
    5d70:	20000578 	.word	0x20000578
    5d74:	200006cc 	.word	0x200006cc

00005d78 <tx_packet_set>:
{
    5d78:	b538      	push	{r3, r4, r5, lr}
    5d7a:	4605      	mov	r5, r0
    5d7c:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    5d7e:	2100      	movs	r1, #0
    5d80:	4608      	mov	r0, r1
    5d82:	f004 fce3 	bl	a74c <radio_phy_set>
	if (conn->enc_tx) {
    5d86:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5d8a:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5d8c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    5d90:	d50c      	bpl.n	5dac <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5d92:	211f      	movs	r1, #31
    5d94:	2008      	movs	r0, #8
    5d96:	f004 fd1f 	bl	a7d8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5d9a:	4621      	mov	r1, r4
    5d9c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    5da0:	f004 ff8e 	bl	acc0 <radio_ccm_tx_pkt_set>
}
    5da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    5da8:	f004 bd4a 	b.w	a840 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    5dac:	2008      	movs	r0, #8
    5dae:	211b      	movs	r1, #27
    5db0:	f004 fd12 	bl	a7d8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    5db4:	4620      	mov	r0, r4
    5db6:	e7f5      	b.n	5da4 <tx_packet_set+0x2c>

00005db8 <chan_set>:
	switch (chan) {
    5db8:	2826      	cmp	r0, #38	; 0x26
{
    5dba:	b513      	push	{r0, r1, r4, lr}
    5dbc:	4604      	mov	r4, r0
	switch (chan) {
    5dbe:	d00c      	beq.n	5dda <chan_set+0x22>
    5dc0:	2827      	cmp	r0, #39	; 0x27
    5dc2:	d00c      	beq.n	5dde <chan_set+0x26>
    5dc4:	2825      	cmp	r0, #37	; 0x25
    5dc6:	d10c      	bne.n	5de2 <chan_set+0x2a>
		radio_freq_chan_set(2);
    5dc8:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    5dca:	f004 fcd5 	bl	a778 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5dce:	4620      	mov	r0, r4
}
    5dd0:	b002      	add	sp, #8
    5dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    5dd6:	f004 bcd5 	b.w	a784 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    5dda:	201a      	movs	r0, #26
    5ddc:	e7f5      	b.n	5dca <chan_set+0x12>
		radio_freq_chan_set(80);
    5dde:	2050      	movs	r0, #80	; 0x50
    5de0:	e7f3      	b.n	5dca <chan_set+0x12>
		if (chan < 11) {
    5de2:	280a      	cmp	r0, #10
    5de4:	d802      	bhi.n	5dec <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    5de6:	3002      	adds	r0, #2
    5de8:	0040      	lsls	r0, r0, #1
    5dea:	e7ee      	b.n	5dca <chan_set+0x12>
		} else if (chan < 40) {
    5dec:	2827      	cmp	r0, #39	; 0x27
    5dee:	d801      	bhi.n	5df4 <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    5df0:	3003      	adds	r0, #3
    5df2:	e7f9      	b.n	5de8 <chan_set+0x30>
			LL_ASSERT(0);
    5df4:	4b07      	ldr	r3, [pc, #28]	; (5e14 <chan_set+0x5c>)
    5df6:	9301      	str	r3, [sp, #4]
    5df8:	9300      	str	r3, [sp, #0]
    5dfa:	4a07      	ldr	r2, [pc, #28]	; (5e18 <chan_set+0x60>)
    5dfc:	4b07      	ldr	r3, [pc, #28]	; (5e1c <chan_set+0x64>)
    5dfe:	4908      	ldr	r1, [pc, #32]	; (5e20 <chan_set+0x68>)
    5e00:	4808      	ldr	r0, [pc, #32]	; (5e24 <chan_set+0x6c>)
    5e02:	f7fb f833 	bl	e6c <printk>
    5e06:	4040      	eors	r0, r0
    5e08:	f380 8811 	msr	BASEPRI, r0
    5e0c:	f04f 0004 	mov.w	r0, #4
    5e10:	df02      	svc	2
    5e12:	bf00      	nop
    5e14:	0000cbb3 	.word	0x0000cbb3
    5e18:	0000d49b 	.word	0x0000d49b
    5e1c:	0000dec4 	.word	0x0000dec4
    5e20:	0000d4ea 	.word	0x0000d4ea
    5e24:	0000d43a 	.word	0x0000d43a

00005e28 <adv_setup>:
{
    5e28:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    5e2a:	4c2a      	ldr	r4, [pc, #168]	; (5ed4 <adv_setup+0xac>)
    5e2c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    5e30:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    5e34:	429a      	cmp	r2, r3
    5e36:	d006      	beq.n	5e46 <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    5e38:	3301      	adds	r3, #1
    5e3a:	b2db      	uxtb	r3, r3
			first = 0;
    5e3c:	2b02      	cmp	r3, #2
    5e3e:	bf08      	it	eq
    5e40:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5e42:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    5e46:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    5e4a:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    5e4e:	429a      	cmp	r2, r3
    5e50:	d006      	beq.n	5e60 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    5e52:	3301      	adds	r3, #1
    5e54:	b2db      	uxtb	r3, r3
			first = 0;
    5e56:	2b02      	cmp	r3, #2
    5e58:	bf08      	it	eq
    5e5a:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5e5c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    5e60:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    5e64:	232a      	movs	r3, #42	; 0x2a
    5e66:	2527      	movs	r5, #39	; 0x27
    5e68:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    5e6c:	1960      	adds	r0, r4, r5
    5e6e:	f004 fce7 	bl	a840 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5e72:	5d63      	ldrb	r3, [r4, r5]
    5e74:	f003 030f 	and.w	r3, r3, #15
    5e78:	2b02      	cmp	r3, #2
    5e7a:	d023      	beq.n	5ec4 <adv_setup+0x9c>
    5e7c:	2b07      	cmp	r3, #7
    5e7e:	d021      	beq.n	5ec4 <adv_setup+0x9c>
		_radio.state = STATE_TX;
    5e80:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    5e82:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    5e84:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    5e86:	f004 fde5 	bl	aa54 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    5e8a:	2000      	movs	r0, #0
    5e8c:	f004 fd52 	bl	a934 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    5e90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5e94:	f3c3 0202 	ubfx	r2, r3, #0, #3
    5e98:	b2d3      	uxtb	r3, r2
    5e9a:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    5e9c:	2000      	movs	r0, #0
    5e9e:	f011 0f01 	tst.w	r1, #1
    5ea2:	f100 0501 	add.w	r5, r0, #1
    5ea6:	d012      	beq.n	5ece <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    5ea8:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    5eaa:	4013      	ands	r3, r2
    5eac:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    5eb0:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    5eb2:	f363 0202 	bfi	r2, r3, #0, #3
    5eb6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    5eba:	3025      	adds	r0, #37	; 0x25
}
    5ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    5ec0:	f7ff bf7a 	b.w	5db8 <chan_set>
		_radio.state = STATE_CLOSE;
    5ec4:	2303      	movs	r3, #3
    5ec6:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    5ec8:	f004 fd4a 	bl	a960 <radio_switch_complete_and_disable>
    5ecc:	e7e0      	b.n	5e90 <adv_setup+0x68>
		bitmap >>= 1;
    5ece:	0849      	lsrs	r1, r1, #1
    5ed0:	4628      	mov	r0, r5
    5ed2:	e7e4      	b.n	5e9e <adv_setup+0x76>
    5ed4:	20000578 	.word	0x20000578

00005ed8 <sched_after_mstr_free_offset_get>:
{
    5ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5eda:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    5edc:	aa04      	add	r2, sp, #16
{
    5ede:	461c      	mov	r4, r3
    5ee0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    5ee2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5ee6:	3127      	adds	r1, #39	; 0x27
    5ee8:	2001      	movs	r0, #1
    5eea:	f7ff faf1 	bl	54d0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    5eee:	6823      	ldr	r3, [r4, #0]
    5ef0:	b363      	cbz	r3, 5f4c <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    5ef2:	9803      	ldr	r0, [sp, #12]
    5ef4:	1b83      	subs	r3, r0, r6
    5ef6:	021b      	lsls	r3, r3, #8
    5ef8:	d50e      	bpl.n	5f18 <sched_after_mstr_free_offset_get+0x40>
    5efa:	4b19      	ldr	r3, [pc, #100]	; (5f60 <sched_after_mstr_free_offset_get+0x88>)
    5efc:	9301      	str	r3, [sp, #4]
    5efe:	9300      	str	r3, [sp, #0]
    5f00:	4a18      	ldr	r2, [pc, #96]	; (5f64 <sched_after_mstr_free_offset_get+0x8c>)
    5f02:	4b19      	ldr	r3, [pc, #100]	; (5f68 <sched_after_mstr_free_offset_get+0x90>)
    5f04:	4919      	ldr	r1, [pc, #100]	; (5f6c <sched_after_mstr_free_offset_get+0x94>)
    5f06:	481a      	ldr	r0, [pc, #104]	; (5f70 <sched_after_mstr_free_offset_get+0x98>)
    5f08:	f7fa ffb0 	bl	e6c <printk>
    5f0c:	4040      	eors	r0, r0
    5f0e:	f380 8811 	msr	BASEPRI, r0
    5f12:	f04f 0004 	mov.w	r0, #4
    5f16:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5f18:	4631      	mov	r1, r6
    5f1a:	f7fe f8a3 	bl	4064 <ticker_ticks_diff_get>
    5f1e:	4602      	mov	r2, r0
    5f20:	4814      	ldr	r0, [pc, #80]	; (5f74 <sched_after_mstr_free_offset_get+0x9c>)
    5f22:	2307      	movs	r3, #7
    5f24:	fba2 0100 	umull	r0, r1, r2, r0
    5f28:	fb03 1102 	mla	r1, r3, r2, r1
    5f2c:	a30a      	add	r3, pc, #40	; (adr r3, 5f58 <sched_after_mstr_free_offset_get+0x80>)
    5f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f32:	f7fa f96f 	bl	214 <__aeabi_uldivmod>
    5f36:	6823      	ldr	r3, [r4, #0]
    5f38:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    5f3a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5f3c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    5f3e:	db05      	blt.n	5f4c <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    5f40:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5f44:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    5f46:	6823      	ldr	r3, [r4, #0]
    5f48:	4298      	cmp	r0, r3
    5f4a:	d301      	bcc.n	5f50 <sched_after_mstr_free_offset_get+0x78>
}
    5f4c:	b004      	add	sp, #16
    5f4e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    5f50:	1a1b      	subs	r3, r3, r0
    5f52:	6023      	str	r3, [r4, #0]
    5f54:	e7f7      	b.n	5f46 <sched_after_mstr_free_offset_get+0x6e>
    5f56:	bf00      	nop
    5f58:	3b9aca00 	.word	0x3b9aca00
    5f5c:	00000000 	.word	0x00000000
    5f60:	0000cbb3 	.word	0x0000cbb3
    5f64:	0000d49b 	.word	0x0000d49b
    5f68:	0000de71 	.word	0x0000de71
    5f6c:	0000d4ea 	.word	0x0000d4ea
    5f70:	0000e8c6 	.word	0x0000e8c6
    5f74:	1afd498d 	.word	0x1afd498d

00005f78 <mayfly_sched_win_offset_use>:
{
    5f78:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5f7a:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    5f7e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5f80:	6f82      	ldr	r2, [r0, #120]	; 0x78
    5f82:	68c1      	ldr	r1, [r0, #12]
    5f84:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5f86:	f7ff ffa7 	bl	5ed8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5f8a:	a902      	add	r1, sp, #8
    5f8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5f8e:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5f90:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5f94:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5f98:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5f9a:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5f9e:	f7fb fd95 	bl	1acc <memcpy>
}
    5fa2:	b002      	add	sp, #8
    5fa4:	bd10      	pop	{r4, pc}
	...

00005fa8 <mayfly_sched_after_mstr_free_offset_get>:
{
    5fa8:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    5faa:	4c05      	ldr	r4, [pc, #20]	; (5fc0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    5fac:	4602      	mov	r2, r0
    5fae:	f504 7382 	add.w	r3, r4, #260	; 0x104
    5fb2:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    5fb6:	f8b4 00f4 	ldrh.w	r0, [r4, #244]	; 0xf4
}
    5fba:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    5fbc:	f7ff bf8c 	b.w	5ed8 <sched_after_mstr_free_offset_get>
    5fc0:	20000578 	.word	0x20000578

00005fc4 <ticker_stop_adv_stop>:
{
    5fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5fc6:	4c52      	ldr	r4, [pc, #328]	; (6110 <ticker_stop_adv_stop+0x14c>)
	if (status != TICKER_STATUS_SUCCESS) {
    5fc8:	b190      	cbz	r0, 5ff0 <ticker_stop_adv_stop+0x2c>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    5fca:	7ca3      	ldrb	r3, [r4, #18]
    5fcc:	2b05      	cmp	r3, #5
    5fce:	f000 809c 	beq.w	610a <ticker_stop_adv_stop+0x146>
    5fd2:	4b50      	ldr	r3, [pc, #320]	; (6114 <ticker_stop_adv_stop+0x150>)
    5fd4:	9301      	str	r3, [sp, #4]
    5fd6:	9300      	str	r3, [sp, #0]
    5fd8:	4a4f      	ldr	r2, [pc, #316]	; (6118 <ticker_stop_adv_stop+0x154>)
    5fda:	4b50      	ldr	r3, [pc, #320]	; (611c <ticker_stop_adv_stop+0x158>)
    5fdc:	4950      	ldr	r1, [pc, #320]	; (6120 <ticker_stop_adv_stop+0x15c>)
    5fde:	4851      	ldr	r0, [pc, #324]	; (6124 <ticker_stop_adv_stop+0x160>)
		LL_ASSERT(_radio.ticker_id_prepare);
    5fe0:	f7fa ff44 	bl	e6c <printk>
    5fe4:	4040      	eors	r0, r0
    5fe6:	f380 8811 	msr	BASEPRI, r0
    5fea:	f04f 0004 	mov.w	r0, #4
    5fee:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    5ff0:	7c23      	ldrb	r3, [r4, #16]
    5ff2:	2b05      	cmp	r3, #5
    5ff4:	d002      	beq.n	5ffc <ticker_stop_adv_stop+0x38>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    5ff6:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    5ff8:	2b05      	cmp	r3, #5
    5ffa:	d16d      	bne.n	60d8 <ticker_stop_adv_stop+0x114>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5ffc:	ab04      	add	r3, sp, #16
    5ffe:	2202      	movs	r2, #2
    6000:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6004:	2200      	movs	r2, #0
    6006:	9300      	str	r3, [sp, #0]
    6008:	2101      	movs	r1, #1
    600a:	4b47      	ldr	r3, [pc, #284]	; (6128 <ticker_stop_adv_stop+0x164>)
    600c:	4610      	mov	r0, r2
    600e:	f7fd ff57 	bl	3ec0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6012:	2802      	cmp	r0, #2
    6014:	d00d      	beq.n	6032 <ticker_stop_adv_stop+0x6e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6016:	9802      	ldr	r0, [sp, #8]
    6018:	b1c0      	cbz	r0, 604c <ticker_stop_adv_stop+0x88>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    601a:	9802      	ldr	r0, [sp, #8]
    601c:	2801      	cmp	r0, #1
    601e:	d16c      	bne.n	60fa <ticker_stop_adv_stop+0x136>
		if (_radio.role != ROLE_NONE) {
    6020:	7ce3      	ldrb	r3, [r4, #19]
    6022:	2b00      	cmp	r3, #0
    6024:	d058      	beq.n	60d8 <ticker_stop_adv_stop+0x114>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6026:	4b41      	ldr	r3, [pc, #260]	; (612c <ticker_stop_adv_stop+0x168>)
    6028:	2204      	movs	r2, #4
    602a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    602c:	2200      	movs	r2, #0
    602e:	4611      	mov	r1, r2
    6030:	e04e      	b.n	60d0 <ticker_stop_adv_stop+0x10c>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6032:	2201      	movs	r2, #1
    6034:	4611      	mov	r1, r2
    6036:	4610      	mov	r0, r2
    6038:	f7fd f8be 	bl	31b8 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    603c:	9b02      	ldr	r3, [sp, #8]
    603e:	2b02      	cmp	r3, #2
    6040:	d1e9      	bne.n	6016 <ticker_stop_adv_stop+0x52>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6042:	2101      	movs	r1, #1
    6044:	2000      	movs	r0, #0
    6046:	f7fd fff5 	bl	4034 <ticker_job_sched>
    604a:	e7f7      	b.n	603c <ticker_stop_adv_stop+0x78>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    604c:	2302      	movs	r3, #2
    604e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    6050:	7c23      	ldrb	r3, [r4, #16]
    6052:	b93b      	cbnz	r3, 6064 <ticker_stop_adv_stop+0xa0>
    6054:	4b2f      	ldr	r3, [pc, #188]	; (6114 <ticker_stop_adv_stop+0x150>)
    6056:	9301      	str	r3, [sp, #4]
    6058:	9300      	str	r3, [sp, #0]
    605a:	4a2f      	ldr	r2, [pc, #188]	; (6118 <ticker_stop_adv_stop+0x154>)
    605c:	4b34      	ldr	r3, [pc, #208]	; (6130 <ticker_stop_adv_stop+0x16c>)
    605e:	4930      	ldr	r1, [pc, #192]	; (6120 <ticker_stop_adv_stop+0x15c>)
    6060:	4834      	ldr	r0, [pc, #208]	; (6134 <ticker_stop_adv_stop+0x170>)
    6062:	e7bd      	b.n	5fe0 <ticker_stop_adv_stop+0x1c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6064:	ab03      	add	r3, sp, #12
    6066:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    6068:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    606a:	4611      	mov	r1, r2
    606c:	9300      	str	r3, [sp, #0]
    606e:	4b2e      	ldr	r3, [pc, #184]	; (6128 <ticker_stop_adv_stop+0x164>)
    6070:	f7fd ff26 	bl	3ec0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6074:	2802      	cmp	r0, #2
    6076:	d015      	beq.n	60a4 <ticker_stop_adv_stop+0xe0>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    6078:	9a03      	ldr	r2, [sp, #12]
    607a:	b302      	cbz	r2, 60be <ticker_stop_adv_stop+0xfa>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    607c:	9c03      	ldr	r4, [sp, #12]
    607e:	2c01      	cmp	r4, #1
    6080:	d13b      	bne.n	60fa <ticker_stop_adv_stop+0x136>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6082:	2200      	movs	r2, #0
    6084:	4611      	mov	r1, r2
    6086:	4b2c      	ldr	r3, [pc, #176]	; (6138 <ticker_stop_adv_stop+0x174>)
    6088:	4620      	mov	r0, r4
    608a:	f7fd f8bd 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    608e:	4602      	mov	r2, r0
    6090:	2800      	cmp	r0, #0
    6092:	d030      	beq.n	60f6 <ticker_stop_adv_stop+0x132>
			LL_ASSERT(!ret);
    6094:	4b1f      	ldr	r3, [pc, #124]	; (6114 <ticker_stop_adv_stop+0x150>)
    6096:	9301      	str	r3, [sp, #4]
    6098:	9300      	str	r3, [sp, #0]
    609a:	4a1f      	ldr	r2, [pc, #124]	; (6118 <ticker_stop_adv_stop+0x154>)
    609c:	4b24      	ldr	r3, [pc, #144]	; (6130 <ticker_stop_adv_stop+0x16c>)
    609e:	4920      	ldr	r1, [pc, #128]	; (6120 <ticker_stop_adv_stop+0x15c>)
    60a0:	4826      	ldr	r0, [pc, #152]	; (613c <ticker_stop_adv_stop+0x178>)
    60a2:	e79d      	b.n	5fe0 <ticker_stop_adv_stop+0x1c>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    60a4:	2201      	movs	r2, #1
    60a6:	4611      	mov	r1, r2
    60a8:	4610      	mov	r0, r2
    60aa:	f7fd f885 	bl	31b8 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    60ae:	9b03      	ldr	r3, [sp, #12]
    60b0:	2b02      	cmp	r3, #2
    60b2:	d1e1      	bne.n	6078 <ticker_stop_adv_stop+0xb4>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    60b4:	2101      	movs	r1, #1
    60b6:	2000      	movs	r0, #0
    60b8:	f7fd ffbc 	bl	4034 <ticker_job_sched>
    60bc:	e7f7      	b.n	60ae <ticker_stop_adv_stop+0xea>
			u32_t ticks_xtal_to_start =
    60be:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    60c0:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    60c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    60c6:	428b      	cmp	r3, r1
    60c8:	d215      	bcs.n	60f6 <ticker_stop_adv_stop+0x132>
				ret = mayfly_enqueue(
    60ca:	4b1b      	ldr	r3, [pc, #108]	; (6138 <ticker_stop_adv_stop+0x174>)
				ret = mayfly_enqueue(
    60cc:	4611      	mov	r1, r2
    60ce:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    60d0:	f7fd f89a 	bl	3208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    60d4:	2800      	cmp	r0, #0
    60d6:	d1dd      	bne.n	6094 <ticker_stop_adv_stop+0xd0>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    60d8:	2200      	movs	r2, #0
    60da:	4b19      	ldr	r3, [pc, #100]	; (6140 <ticker_stop_adv_stop+0x17c>)
    60dc:	4611      	mov	r1, r2
    60de:	2001      	movs	r0, #1
    60e0:	f7fd f892 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    60e4:	b188      	cbz	r0, 610a <ticker_stop_adv_stop+0x146>
    60e6:	4b0b      	ldr	r3, [pc, #44]	; (6114 <ticker_stop_adv_stop+0x150>)
    60e8:	9301      	str	r3, [sp, #4]
    60ea:	9300      	str	r3, [sp, #0]
    60ec:	4a0a      	ldr	r2, [pc, #40]	; (6118 <ticker_stop_adv_stop+0x154>)
    60ee:	4b0b      	ldr	r3, [pc, #44]	; (611c <ticker_stop_adv_stop+0x158>)
    60f0:	490b      	ldr	r1, [pc, #44]	; (6120 <ticker_stop_adv_stop+0x15c>)
    60f2:	4814      	ldr	r0, [pc, #80]	; (6144 <ticker_stop_adv_stop+0x180>)
    60f4:	e774      	b.n	5fe0 <ticker_stop_adv_stop+0x1c>
				ret = mayfly_enqueue(
    60f6:	4b14      	ldr	r3, [pc, #80]	; (6148 <ticker_stop_adv_stop+0x184>)
    60f8:	e7e8      	b.n	60cc <ticker_stop_adv_stop+0x108>
		LL_ASSERT(0);
    60fa:	4b06      	ldr	r3, [pc, #24]	; (6114 <ticker_stop_adv_stop+0x150>)
    60fc:	9301      	str	r3, [sp, #4]
    60fe:	9300      	str	r3, [sp, #0]
    6100:	4a05      	ldr	r2, [pc, #20]	; (6118 <ticker_stop_adv_stop+0x154>)
    6102:	4b0b      	ldr	r3, [pc, #44]	; (6130 <ticker_stop_adv_stop+0x16c>)
    6104:	4906      	ldr	r1, [pc, #24]	; (6120 <ticker_stop_adv_stop+0x15c>)
    6106:	4811      	ldr	r0, [pc, #68]	; (614c <ticker_stop_adv_stop+0x188>)
    6108:	e76a      	b.n	5fe0 <ticker_stop_adv_stop+0x1c>
}
    610a:	b004      	add	sp, #16
    610c:	bd10      	pop	{r4, pc}
    610e:	bf00      	nop
    6110:	20000578 	.word	0x20000578
    6114:	0000cbb3 	.word	0x0000cbb3
    6118:	0000d49b 	.word	0x0000d49b
    611c:	0000df1b 	.word	0x0000df1b
    6120:	0000d4ea 	.word	0x0000d4ea
    6124:	0000e9c4 	.word	0x0000e9c4
    6128:	00004fbd 	.word	0x00004fbd
    612c:	20003310 	.word	0x20003310
    6130:	0000deff 	.word	0x0000deff
    6134:	0000e7ba 	.word	0x0000e7ba
    6138:	200032e0 	.word	0x200032e0
    613c:	0000e824 	.word	0x0000e824
    6140:	200032b0 	.word	0x200032b0
    6144:	0000e59b 	.word	0x0000e59b
    6148:	20003390 	.word	0x20003390
    614c:	0000d43a 	.word	0x0000d43a

00006150 <isr_scan_tgta_check.isra.29>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6150:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6152:	4c16      	ldr	r4, [pc, #88]	; (61ac <isr_scan_tgta_check.isra.29+0x5c>)
    6154:	7803      	ldrb	r3, [r0, #0]
    6156:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    615a:	09db      	lsrs	r3, r3, #7
    615c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6160:	4605      	mov	r5, r0
    6162:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6164:	d007      	beq.n	6176 <isr_scan_tgta_check.isra.29+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6166:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
    616a:	f3c0 1001 	ubfx	r0, r0, #4, #2
    616e:	f010 0002 	ands.w	r0, r0, #2
    6172:	d10b      	bne.n	618c <isr_scan_tgta_check.isra.29+0x3c>
    6174:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6176:	f100 0108 	add.w	r1, r0, #8
    617a:	2206      	movs	r2, #6
    617c:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    6180:	f7fb fc8f 	bl	1aa2 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6184:	2800      	cmp	r0, #0
    6186:	d1ee      	bne.n	6166 <isr_scan_tgta_check.isra.29+0x16>
			BDADDR_SIZE) == 0))) ||
    6188:	2001      	movs	r0, #1
    618a:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    618c:	f995 3000 	ldrsb.w	r3, [r5]
    6190:	2b00      	cmp	r3, #0
    6192:	da09      	bge.n	61a8 <isr_scan_tgta_check.isra.29+0x58>
	    (pdu->rx_addr != 0) &&
    6194:	7b6b      	ldrb	r3, [r5, #13]
    6196:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    619a:	2b40      	cmp	r3, #64	; 0x40
    619c:	d104      	bne.n	61a8 <isr_scan_tgta_check.isra.29+0x58>
		if (dir_report) {
    619e:	2e00      	cmp	r6, #0
    61a0:	d0f2      	beq.n	6188 <isr_scan_tgta_check.isra.29+0x38>
			*dir_report = true;
    61a2:	2001      	movs	r0, #1
    61a4:	7030      	strb	r0, [r6, #0]
    61a6:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    61a8:	2000      	movs	r0, #0
}
    61aa:	bd70      	pop	{r4, r5, r6, pc}
    61ac:	20000578 	.word	0x20000578

000061b0 <mayfly_adv_stop>:
{
    61b0:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
    61b2:	2001      	movs	r0, #1
    61b4:	f7fe ff2c 	bl	5010 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    61b8:	4604      	mov	r4, r0
    61ba:	b970      	cbnz	r0, 61da <mayfly_adv_stop+0x2a>
    61bc:	4b0f      	ldr	r3, [pc, #60]	; (61fc <mayfly_adv_stop+0x4c>)
    61be:	9301      	str	r3, [sp, #4]
    61c0:	9300      	str	r3, [sp, #0]
    61c2:	4a0f      	ldr	r2, [pc, #60]	; (6200 <mayfly_adv_stop+0x50>)
    61c4:	4b0f      	ldr	r3, [pc, #60]	; (6204 <mayfly_adv_stop+0x54>)
    61c6:	4910      	ldr	r1, [pc, #64]	; (6208 <mayfly_adv_stop+0x58>)
    61c8:	4810      	ldr	r0, [pc, #64]	; (620c <mayfly_adv_stop+0x5c>)
    61ca:	f7fa fe4f 	bl	e6c <printk>
    61ce:	4040      	eors	r0, r0
    61d0:	f380 8811 	msr	BASEPRI, r0
    61d4:	f04f 0004 	mov.w	r0, #4
    61d8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    61da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    61de:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    61e0:	2306      	movs	r3, #6
    61e2:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    61e4:	2210      	movs	r2, #16
    61e6:	2100      	movs	r1, #0
    61e8:	300b      	adds	r0, #11
    61ea:	f7fb fc9b 	bl	1b24 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    61ee:	233c      	movs	r3, #60	; 0x3c
    61f0:	72e3      	strb	r3, [r4, #11]
}
    61f2:	b002      	add	sp, #8
    61f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    61f8:	f7ff ba36 	b.w	5668 <packet_rx_enqueue>
    61fc:	0000cbb3 	.word	0x0000cbb3
    6200:	0000d49b 	.word	0x0000d49b
    6204:	0000deef 	.word	0x0000deef
    6208:	0000d4ea 	.word	0x0000d4ea
    620c:	0000e4c7 	.word	0x0000e4c7

00006210 <terminate_ind_rx_enqueue>:
{
    6210:	b513      	push	{r0, r1, r4, lr}
    6212:	4603      	mov	r3, r0
    6214:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6216:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    621a:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    621e:	b970      	cbnz	r0, 623e <terminate_ind_rx_enqueue+0x2e>
    6220:	4b16      	ldr	r3, [pc, #88]	; (627c <terminate_ind_rx_enqueue+0x6c>)
    6222:	9301      	str	r3, [sp, #4]
    6224:	9300      	str	r3, [sp, #0]
    6226:	4a16      	ldr	r2, [pc, #88]	; (6280 <terminate_ind_rx_enqueue+0x70>)
    6228:	4b16      	ldr	r3, [pc, #88]	; (6284 <terminate_ind_rx_enqueue+0x74>)
    622a:	4917      	ldr	r1, [pc, #92]	; (6288 <terminate_ind_rx_enqueue+0x78>)
    622c:	4817      	ldr	r0, [pc, #92]	; (628c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    622e:	f7fa fe1d 	bl	e6c <printk>
    6232:	4040      	eors	r0, r0
    6234:	f380 8811 	msr	BASEPRI, r0
    6238:	f04f 0004 	mov.w	r0, #4
    623c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    623e:	8c1c      	ldrh	r4, [r3, #32]
    6240:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6244:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6248:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    624a:	4a11      	ldr	r2, [pc, #68]	; (6290 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    624c:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6250:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
    6254:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6258:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    625c:	f7fc ff64 	bl	3128 <memq_enqueue>
	LL_ASSERT(link);
    6260:	b938      	cbnz	r0, 6272 <terminate_ind_rx_enqueue+0x62>
    6262:	4b06      	ldr	r3, [pc, #24]	; (627c <terminate_ind_rx_enqueue+0x6c>)
    6264:	9301      	str	r3, [sp, #4]
    6266:	9300      	str	r3, [sp, #0]
    6268:	4a05      	ldr	r2, [pc, #20]	; (6280 <terminate_ind_rx_enqueue+0x70>)
    626a:	4b06      	ldr	r3, [pc, #24]	; (6284 <terminate_ind_rx_enqueue+0x74>)
    626c:	4906      	ldr	r1, [pc, #24]	; (6288 <terminate_ind_rx_enqueue+0x78>)
    626e:	4809      	ldr	r0, [pc, #36]	; (6294 <terminate_ind_rx_enqueue+0x84>)
    6270:	e7dd      	b.n	622e <terminate_ind_rx_enqueue+0x1e>
}
    6272:	b002      	add	sp, #8
    6274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6278:	f003 bd36 	b.w	9ce8 <radio_event_callback>
    627c:	0000cbb3 	.word	0x0000cbb3
    6280:	0000d49b 	.word	0x0000d49b
    6284:	0000dfff 	.word	0x0000dfff
    6288:	0000d4ea 	.word	0x0000d4ea
    628c:	0000e94c 	.word	0x0000e94c
    6290:	20000578 	.word	0x20000578
    6294:	0000e66b 	.word	0x0000e66b

00006298 <isr_rx_scan_report.isra.35>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6298:	b573      	push	{r0, r1, r4, r5, r6, lr}
    629a:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    629c:	2003      	movs	r0, #3
    629e:	f7fe feb7 	bl	5010 <packet_rx_reserve_get>
	if (node_rx == 0) {
    62a2:	2800      	cmp	r0, #0
    62a4:	d032      	beq.n	630c <isr_rx_scan_report.isra.35+0x74>
	node_rx->hdr.handle = 0xffff;
    62a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    62aa:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    62ac:	4b18      	ldr	r3, [pc, #96]	; (6310 <isr_rx_scan_report.isra.35+0x78>)
    62ae:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    62b2:	075a      	lsls	r2, r3, #29
    62b4:	d026      	beq.n	6304 <isr_rx_scan_report.isra.35+0x6c>
		switch (_radio.scanner.phy) {
    62b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    62ba:	b2da      	uxtb	r2, r3
    62bc:	2a01      	cmp	r2, #1
    62be:	d010      	beq.n	62e2 <isr_rx_scan_report.isra.35+0x4a>
    62c0:	2a04      	cmp	r2, #4
    62c2:	d00f      	beq.n	62e4 <isr_rx_scan_report.isra.35+0x4c>
			LL_ASSERT(0);
    62c4:	4b13      	ldr	r3, [pc, #76]	; (6314 <isr_rx_scan_report.isra.35+0x7c>)
    62c6:	9301      	str	r3, [sp, #4]
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	4a13      	ldr	r2, [pc, #76]	; (6318 <isr_rx_scan_report.isra.35+0x80>)
    62cc:	4b13      	ldr	r3, [pc, #76]	; (631c <isr_rx_scan_report.isra.35+0x84>)
    62ce:	4914      	ldr	r1, [pc, #80]	; (6320 <isr_rx_scan_report.isra.35+0x88>)
    62d0:	4814      	ldr	r0, [pc, #80]	; (6324 <isr_rx_scan_report.isra.35+0x8c>)
    62d2:	f7fa fdcb 	bl	e6c <printk>
    62d6:	4040      	eors	r0, r0
    62d8:	f380 8811 	msr	BASEPRI, r0
    62dc:	f04f 0004 	mov.w	r0, #4
    62e0:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    62e2:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    62e4:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    62e6:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    62e8:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    62ec:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    62ee:	b15e      	cbz	r6, 6308 <isr_rx_scan_report.isra.35+0x70>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    62f0:	f004 fb4e 	bl	a990 <radio_rssi_get>
			     pdu_adv_rx->len] =
    62f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    62f8:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    62fa:	f7ff f9b5 	bl	5668 <packet_rx_enqueue>
	return 0;
    62fe:	2000      	movs	r0, #0
}
    6300:	b002      	add	sp, #8
    6302:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6304:	2302      	movs	r3, #2
    6306:	e7ed      	b.n	62e4 <isr_rx_scan_report.isra.35+0x4c>
			     pdu_adv_rx->len] =
    6308:	207f      	movs	r0, #127	; 0x7f
    630a:	e7f5      	b.n	62f8 <isr_rx_scan_report.isra.35+0x60>
		return 1;
    630c:	2001      	movs	r0, #1
    630e:	e7f7      	b.n	6300 <isr_rx_scan_report.isra.35+0x68>
    6310:	20000578 	.word	0x20000578
    6314:	0000cbb3 	.word	0x0000cbb3
    6318:	0000d49b 	.word	0x0000d49b
    631c:	0000dcc9 	.word	0x0000dcc9
    6320:	0000d4ea 	.word	0x0000d4ea
    6324:	0000d43a 	.word	0x0000d43a

00006328 <prepare_normal_set>:
{
    6328:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    632a:	6804      	ldr	r4, [r0, #0]
    632c:	2c00      	cmp	r4, #0
{
    632e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6330:	da26      	bge.n	6380 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    6332:	6843      	ldr	r3, [r0, #4]
    6334:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    6336:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6338:	429d      	cmp	r5, r3
    633a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    633e:	bf34      	ite	cc
    6340:	1ae4      	subcc	r4, r4, r3
    6342:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6344:	4b0f      	ldr	r3, [pc, #60]	; (6384 <prepare_normal_set+0x5c>)
    6346:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6348:	b2a4      	uxth	r4, r4
		ticker_status =
    634a:	2300      	movs	r3, #0
    634c:	9304      	str	r3, [sp, #16]
    634e:	9303      	str	r3, [sp, #12]
    6350:	9302      	str	r3, [sp, #8]
    6352:	4618      	mov	r0, r3
    6354:	9401      	str	r4, [sp, #4]
    6356:	9400      	str	r4, [sp, #0]
    6358:	f7fd fd64 	bl	3e24 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    635c:	f030 0302 	bics.w	r3, r0, #2
    6360:	d00e      	beq.n	6380 <prepare_normal_set+0x58>
    6362:	4b09      	ldr	r3, [pc, #36]	; (6388 <prepare_normal_set+0x60>)
    6364:	9301      	str	r3, [sp, #4]
    6366:	9300      	str	r3, [sp, #0]
    6368:	4a08      	ldr	r2, [pc, #32]	; (638c <prepare_normal_set+0x64>)
    636a:	4b09      	ldr	r3, [pc, #36]	; (6390 <prepare_normal_set+0x68>)
    636c:	4909      	ldr	r1, [pc, #36]	; (6394 <prepare_normal_set+0x6c>)
    636e:	480a      	ldr	r0, [pc, #40]	; (6398 <prepare_normal_set+0x70>)
    6370:	f7fa fd7c 	bl	e6c <printk>
    6374:	4040      	eors	r0, r0
    6376:	f380 8811 	msr	BASEPRI, r0
    637a:	f04f 0004 	mov.w	r0, #4
    637e:	df02      	svc	2
}
    6380:	b009      	add	sp, #36	; 0x24
    6382:	bd30      	pop	{r4, r5, pc}
    6384:	00004fcd 	.word	0x00004fcd
    6388:	0000cbb3 	.word	0x0000cbb3
    638c:	0000d49b 	.word	0x0000d49b
    6390:	0000de29 	.word	0x0000de29
    6394:	0000d4ea 	.word	0x0000d4ea
    6398:	0000e075 	.word	0x0000e075
    639c:	00000000 	.word	0x00000000

000063a0 <mayfly_xtal_stop_calc>:
{
    63a0:	b570      	push	{r4, r5, r6, lr}
    63a2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    63a4:	2302      	movs	r3, #2
    63a6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    63a8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    63aa:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    63ac:	4e7e      	ldr	r6, [pc, #504]	; (65a8 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    63ae:	4d7f      	ldr	r5, [pc, #508]	; (65ac <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    63b0:	930a      	str	r3, [sp, #40]	; 0x28
{
    63b2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    63b4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    63b6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    63ba:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    63bc:	ab09      	add	r3, sp, #36	; 0x24
    63be:	9302      	str	r3, [sp, #8]
    63c0:	ab0c      	add	r3, sp, #48	; 0x30
    63c2:	9300      	str	r3, [sp, #0]
    63c4:	9601      	str	r6, [sp, #4]
    63c6:	ab0d      	add	r3, sp, #52	; 0x34
    63c8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    63cc:	2101      	movs	r1, #1
    63ce:	2000      	movs	r0, #0
    63d0:	f7fd fdb2 	bl	3f38 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    63d4:	2802      	cmp	r0, #2
    63d6:	d014      	beq.n	6402 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    63d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    63da:	b1b3      	cbz	r3, 640a <mayfly_xtal_stop_calc+0x6a>
    63dc:	4b74      	ldr	r3, [pc, #464]	; (65b0 <mayfly_xtal_stop_calc+0x210>)
    63de:	9301      	str	r3, [sp, #4]
    63e0:	9300      	str	r3, [sp, #0]
    63e2:	4a74      	ldr	r2, [pc, #464]	; (65b4 <mayfly_xtal_stop_calc+0x214>)
    63e4:	4b74      	ldr	r3, [pc, #464]	; (65b8 <mayfly_xtal_stop_calc+0x218>)
    63e6:	4975      	ldr	r1, [pc, #468]	; (65bc <mayfly_xtal_stop_calc+0x21c>)
    63e8:	4875      	ldr	r0, [pc, #468]	; (65c0 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    63ea:	f7fa fd3f 	bl	e6c <printk>
    63ee:	4040      	eors	r0, r0
    63f0:	f380 8811 	msr	BASEPRI, r0
    63f4:	f04f 0004 	mov.w	r0, #4
    63f8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    63fa:	2101      	movs	r1, #1
    63fc:	2000      	movs	r0, #0
    63fe:	f7fd fe19 	bl	4034 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    6402:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6404:	2b02      	cmp	r3, #2
    6406:	d0f8      	beq.n	63fa <mayfly_xtal_stop_calc+0x5a>
    6408:	e7e6      	b.n	63d8 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    640a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    640e:	2bff      	cmp	r3, #255	; 0xff
    6410:	d004      	beq.n	641c <mayfly_xtal_stop_calc+0x7c>
    6412:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6416:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    6418:	4293      	cmp	r3, r2
    641a:	dacf      	bge.n	63bc <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    641c:	1f5a      	subs	r2, r3, #5
    641e:	b2d2      	uxtb	r2, r2
    6420:	2af9      	cmp	r2, #249	; 0xf9
    6422:	d805      	bhi.n	6430 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    6424:	4a61      	ldr	r2, [pc, #388]	; (65ac <mayfly_xtal_stop_calc+0x20c>)
    6426:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    642a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    642c:	4293      	cmp	r3, r2
    642e:	db05      	blt.n	643c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    6430:	2100      	movs	r1, #0
    6432:	2001      	movs	r0, #1
    6434:	f7fe fffa 	bl	542c <mayfly_xtal_retain>
}
    6438:	b00e      	add	sp, #56	; 0x38
    643a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    643c:	a90a      	add	r1, sp, #40	; 0x28
    643e:	b2e0      	uxtb	r0, r4
    6440:	f7ff fa54 	bl	58ec <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    6444:	b938      	cbnz	r0, 6456 <mayfly_xtal_stop_calc+0xb6>
    6446:	4b5a      	ldr	r3, [pc, #360]	; (65b0 <mayfly_xtal_stop_calc+0x210>)
    6448:	9301      	str	r3, [sp, #4]
    644a:	9300      	str	r3, [sp, #0]
    644c:	4a59      	ldr	r2, [pc, #356]	; (65b4 <mayfly_xtal_stop_calc+0x214>)
    644e:	4b5a      	ldr	r3, [pc, #360]	; (65b8 <mayfly_xtal_stop_calc+0x218>)
    6450:	495a      	ldr	r1, [pc, #360]	; (65bc <mayfly_xtal_stop_calc+0x21c>)
    6452:	485c      	ldr	r0, [pc, #368]	; (65c4 <mayfly_xtal_stop_calc+0x224>)
    6454:	e7c9      	b.n	63ea <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    6456:	6803      	ldr	r3, [r0, #0]
    6458:	6844      	ldr	r4, [r0, #4]
    645a:	2b00      	cmp	r3, #0
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    645c:	bfb8      	it	lt
    645e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = max(hdr_curr->ticks_active_to_start,
    6460:	429c      	cmp	r4, r3
    6462:	bf38      	it	cc
    6464:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    6466:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6468:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    646c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    646e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6470:	f7ff fa3c 	bl	58ec <hdr_conn_get>
	LL_ASSERT(hdr_next);
    6474:	4605      	mov	r5, r0
    6476:	b938      	cbnz	r0, 6488 <mayfly_xtal_stop_calc+0xe8>
    6478:	4b4d      	ldr	r3, [pc, #308]	; (65b0 <mayfly_xtal_stop_calc+0x210>)
    647a:	9301      	str	r3, [sp, #4]
    647c:	9300      	str	r3, [sp, #0]
    647e:	4a4d      	ldr	r2, [pc, #308]	; (65b4 <mayfly_xtal_stop_calc+0x214>)
    6480:	4b4d      	ldr	r3, [pc, #308]	; (65b8 <mayfly_xtal_stop_calc+0x218>)
    6482:	494e      	ldr	r1, [pc, #312]	; (65bc <mayfly_xtal_stop_calc+0x21c>)
    6484:	4850      	ldr	r0, [pc, #320]	; (65c8 <mayfly_xtal_stop_calc+0x228>)
    6486:	e7b0      	b.n	63ea <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next =
    6488:	6886      	ldr	r6, [r0, #8]
    648a:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    648c:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next =
    648e:	429e      	cmp	r6, r3
    6490:	bf38      	it	cc
    6492:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6494:	2a00      	cmp	r2, #0
    6496:	da05      	bge.n	64a4 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    6498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    649a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    649e:	4433      	add	r3, r6
    64a0:	1a9b      	subs	r3, r3, r2
    64a2:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    64a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    64a6:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    64aa:	4293      	cmp	r3, r2
    64ac:	d20a      	bcs.n	64c4 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    64ae:	2100      	movs	r1, #0
    64b0:	2001      	movs	r0, #1
    64b2:	f7fe ffbb 	bl	542c <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    64b6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    64ba:	2101      	movs	r1, #1
    64bc:	4628      	mov	r0, r5
    64be:	f7ff ff33 	bl	6328 <prepare_normal_set>
    64c2:	e7b9      	b.n	6438 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    64c4:	2101      	movs	r1, #1
    64c6:	4608      	mov	r0, r1
    64c8:	f7fe ffb0 	bl	542c <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    64cc:	682b      	ldr	r3, [r5, #0]
    64ce:	2b00      	cmp	r3, #0
    64d0:	db1c      	blt.n	650c <mayfly_xtal_stop_calc+0x16c>
    64d2:	429e      	cmp	r6, r3
    64d4:	d21a      	bcs.n	650c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    64d6:	1b9b      	subs	r3, r3, r6
			ticker_status =
    64d8:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    64da:	b29b      	uxth	r3, r3
			ticker_status =
    64dc:	493b      	ldr	r1, [pc, #236]	; (65cc <mayfly_xtal_stop_calc+0x22c>)
    64de:	9105      	str	r1, [sp, #20]
    64e0:	9302      	str	r3, [sp, #8]
    64e2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    64e6:	9506      	str	r5, [sp, #24]
    64e8:	9004      	str	r0, [sp, #16]
    64ea:	9003      	str	r0, [sp, #12]
    64ec:	9001      	str	r0, [sp, #4]
    64ee:	9000      	str	r0, [sp, #0]
    64f0:	2101      	movs	r1, #1
    64f2:	f7fd fc97 	bl	3e24 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    64f6:	f030 0302 	bics.w	r3, r0, #2
    64fa:	d007      	beq.n	650c <mayfly_xtal_stop_calc+0x16c>
    64fc:	4b2c      	ldr	r3, [pc, #176]	; (65b0 <mayfly_xtal_stop_calc+0x210>)
    64fe:	9301      	str	r3, [sp, #4]
    6500:	9300      	str	r3, [sp, #0]
    6502:	4a2c      	ldr	r2, [pc, #176]	; (65b4 <mayfly_xtal_stop_calc+0x214>)
    6504:	4b2c      	ldr	r3, [pc, #176]	; (65b8 <mayfly_xtal_stop_calc+0x218>)
    6506:	492d      	ldr	r1, [pc, #180]	; (65bc <mayfly_xtal_stop_calc+0x21c>)
    6508:	4831      	ldr	r0, [pc, #196]	; (65d0 <mayfly_xtal_stop_calc+0x230>)
    650a:	e76e      	b.n	63ea <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    650c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    650e:	2e00      	cmp	r6, #0
    6510:	d092      	beq.n	6438 <mayfly_xtal_stop_calc+0x98>
    6512:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6514:	2d00      	cmp	r5, #0
    6516:	d08f      	beq.n	6438 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    6518:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    651a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    651c:	429a      	cmp	r2, r3
    651e:	d18b      	bne.n	6438 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    6520:	482c      	ldr	r0, [pc, #176]	; (65d4 <mayfly_xtal_stop_calc+0x234>)
    6522:	b292      	uxth	r2, r2
    6524:	fba2 0100 	umull	r0, r1, r2, r0
    6528:	f240 1323 	movw	r3, #291	; 0x123
    652c:	fb03 1102 	mla	r1, r3, r2, r1
    6530:	a31b      	add	r3, pc, #108	; (adr r3, 65a0 <mayfly_xtal_stop_calc+0x200>)
    6532:	e9d3 2300 	ldrd	r2, r3, [r3]
    6536:	f7f9 fe6d 	bl	214 <__aeabi_uldivmod>
    653a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    653c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    6540:	2200      	movs	r2, #0
    6542:	4298      	cmp	r0, r3
    6544:	d318      	bcc.n	6578 <mayfly_xtal_stop_calc+0x1d8>
    6546:	b102      	cbz	r2, 654a <mayfly_xtal_stop_calc+0x1aa>
    6548:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    654a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    654e:	2a00      	cmp	r2, #0
    6550:	f995 201d 	ldrsb.w	r2, [r5, #29]
    6554:	da13      	bge.n	657e <mayfly_xtal_stop_calc+0x1de>
    6556:	2a00      	cmp	r2, #0
    6558:	f6ff af6e 	blt.w	6438 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    655c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    655e:	429c      	cmp	r4, r3
    6560:	f67f af6a 	bls.w	6438 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    6564:	4630      	mov	r0, r6
    6566:	f7fe fd6f 	bl	5048 <conn_update_req>
				if (status == 2) {
    656a:	2802      	cmp	r0, #2
    656c:	f47f af64 	bne.w	6438 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    6570:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    6572:	f7fe fd69 	bl	5048 <conn_update_req>
    6576:	e75f      	b.n	6438 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    6578:	1a1b      	subs	r3, r3, r0
    657a:	2201      	movs	r2, #1
    657c:	e7e1      	b.n	6542 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    657e:	2a00      	cmp	r2, #0
    6580:	f6bf af5a 	bge.w	6438 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    6584:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    6586:	429c      	cmp	r4, r3
    6588:	f67f af56 	bls.w	6438 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    658c:	4628      	mov	r0, r5
    658e:	f7fe fd5b 	bl	5048 <conn_update_req>
				if (status == 2) {
    6592:	2802      	cmp	r0, #2
    6594:	f47f af50 	bne.w	6438 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    6598:	980a      	ldr	r0, [sp, #40]	; 0x28
    659a:	e7ea      	b.n	6572 <mayfly_xtal_stop_calc+0x1d2>
    659c:	f3af 8000 	nop.w
    65a0:	1afd498d 	.word	0x1afd498d
    65a4:	00000007 	.word	0x00000007
    65a8:	00004fbd 	.word	0x00004fbd
    65ac:	20000578 	.word	0x20000578
    65b0:	0000cbb3 	.word	0x0000cbb3
    65b4:	0000d49b 	.word	0x0000d49b
    65b8:	0000de3c 	.word	0x0000de3c
    65bc:	0000d4ea 	.word	0x0000d4ea
    65c0:	0000e91f 	.word	0x0000e91f
    65c4:	0000e5c4 	.word	0x0000e5c4
    65c8:	0000e5ee 	.word	0x0000e5ee
    65cc:	00004fc1 	.word	0x00004fc1
    65d0:	0000e075 	.word	0x0000e075
    65d4:	09ce5400 	.word	0x09ce5400

000065d8 <preempt_calc>:
{
    65d8:	b570      	push	{r4, r5, r6, lr}
    65da:	4614      	mov	r4, r2
    65dc:	460e      	mov	r6, r1
    65de:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    65e0:	f7fd fd3e 	bl	4060 <ticker_ticks_now_get>
	u32_t diff =
    65e4:	4621      	mov	r1, r4
    65e6:	f7fd fd3d 	bl	4064 <ticker_ticks_diff_get>
	diff += 3;
    65ea:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    65ec:	2c09      	cmp	r4, #9
    65ee:	d90f      	bls.n	6610 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    65f0:	2100      	movs	r1, #0
    65f2:	4608      	mov	r0, r1
    65f4:	f7fe ff1a 	bl	542c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    65f8:	4632      	mov	r2, r6
    65fa:	2100      	movs	r1, #0
    65fc:	4628      	mov	r0, r5
    65fe:	f7ff fe93 	bl	6328 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6602:	68ab      	ldr	r3, [r5, #8]
    6604:	441c      	add	r4, r3
		if (diff <
    6606:	2c26      	cmp	r4, #38	; 0x26
    6608:	d800      	bhi.n	660c <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    660a:	60ac      	str	r4, [r5, #8]
		return 1;
    660c:	2001      	movs	r0, #1
}
    660e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    6610:	2000      	movs	r0, #0
    6612:	bd70      	pop	{r4, r5, r6, pc}

00006614 <adv_scan_configure.constprop.45>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6614:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6616:	ad02      	add	r5, sp, #8
    6618:	4b10      	ldr	r3, [pc, #64]	; (665c <adv_scan_configure.constprop.45+0x48>)
    661a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    661e:	4604      	mov	r4, r0
	radio_reset();
    6620:	f004 f87a 	bl	a718 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    6624:	2000      	movs	r0, #0
    6626:	f004 f8a1 	bl	a76c <radio_tx_power_set>
	radio_isr_set(isr);
    662a:	480d      	ldr	r0, [pc, #52]	; (6660 <adv_scan_configure.constprop.45+0x4c>)
    662c:	f004 f83e 	bl	a6ac <radio_isr_set>
	radio_phy_set(phy, flags);
    6630:	2101      	movs	r1, #1
    6632:	4620      	mov	r0, r4
    6634:	f004 f88a 	bl	a74c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6638:	4628      	mov	r0, r5
    663a:	f004 f8b5 	bl	a7a8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    663e:	0062      	lsls	r2, r4, #1
    6640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6644:	2125      	movs	r1, #37	; 0x25
    6646:	2008      	movs	r0, #8
    6648:	f004 f8c6 	bl	a7d8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    664c:	4905      	ldr	r1, [pc, #20]	; (6664 <adv_scan_configure.constprop.45+0x50>)
    664e:	f240 605b 	movw	r0, #1627	; 0x65b
    6652:	f004 f951 	bl	a8f8 <radio_crc_configure>
}
    6656:	b003      	add	sp, #12
    6658:	bd30      	pop	{r4, r5, pc}
    665a:	bf00      	nop
    665c:	8e89bed6 	.word	0x8e89bed6
    6660:	00007991 	.word	0x00007991
    6664:	00555555 	.word	0x00555555

00006668 <event_scan>:
{
    6668:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    666a:	4b57      	ldr	r3, [pc, #348]	; (67c8 <event_scan+0x160>)
    666c:	7cda      	ldrb	r2, [r3, #19]
{
    666e:	b08a      	sub	sp, #40	; 0x28
    6670:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6672:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    6676:	461c      	mov	r4, r3
    6678:	b172      	cbz	r2, 6698 <event_scan+0x30>
    667a:	4b54      	ldr	r3, [pc, #336]	; (67cc <event_scan+0x164>)
    667c:	9301      	str	r3, [sp, #4]
    667e:	9300      	str	r3, [sp, #0]
    6680:	4a53      	ldr	r2, [pc, #332]	; (67d0 <event_scan+0x168>)
    6682:	4b54      	ldr	r3, [pc, #336]	; (67d4 <event_scan+0x16c>)
    6684:	4954      	ldr	r1, [pc, #336]	; (67d8 <event_scan+0x170>)
    6686:	4855      	ldr	r0, [pc, #340]	; (67dc <event_scan+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    6688:	f7fa fbf0 	bl	e6c <printk>
    668c:	4040      	eors	r0, r0
    668e:	f380 8811 	msr	BASEPRI, r0
    6692:	f04f 0004 	mov.w	r0, #4
    6696:	df02      	svc	2
    6698:	7c1b      	ldrb	r3, [r3, #16]
    669a:	b2db      	uxtb	r3, r3
    669c:	2b06      	cmp	r3, #6
    669e:	d007      	beq.n	66b0 <event_scan+0x48>
    66a0:	4b4a      	ldr	r3, [pc, #296]	; (67cc <event_scan+0x164>)
    66a2:	9301      	str	r3, [sp, #4]
    66a4:	9300      	str	r3, [sp, #0]
    66a6:	4a4a      	ldr	r2, [pc, #296]	; (67d0 <event_scan+0x168>)
    66a8:	4b4a      	ldr	r3, [pc, #296]	; (67d4 <event_scan+0x16c>)
    66aa:	494b      	ldr	r1, [pc, #300]	; (67d8 <event_scan+0x170>)
    66ac:	484c      	ldr	r0, [pc, #304]	; (67e0 <event_scan+0x178>)
    66ae:	e7eb      	b.n	6688 <event_scan+0x20>
	_radio.role = ROLE_SCAN;
    66b0:	2202      	movs	r2, #2
    66b2:	74e2      	strb	r2, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    66b4:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    66b6:	7426      	strb	r6, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    66b8:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    66bc:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    66be:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.state = STATE_RX;
    66c2:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
    66c4:	f366 0341 	bfi	r3, r6, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    66c8:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    66cc:	7522      	strb	r2, [r4, #20]
	_radio.scanner.state = 0;
    66ce:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    66d2:	f7ff ff9f 	bl	6614 <adv_scan_configure.constprop.45>
	chan_set(37 + _radio.scanner.chan++);
    66d6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    66da:	f3c3 0081 	ubfx	r0, r3, #2, #2
    66de:	1c42      	adds	r2, r0, #1
    66e0:	f362 0383 	bfi	r3, r2, #2, #2
    66e4:	3025      	adds	r0, #37	; 0x25
    66e6:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    66ea:	f7ff fb65 	bl	5db8 <chan_set>
	if (_radio.scanner.chan == 3) {
    66ee:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    66f2:	f003 020c 	and.w	r2, r3, #12
    66f6:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
    66f8:	bf08      	it	eq
    66fa:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
    66fe:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
    6702:	bf08      	it	eq
    6704:	f884 30e0 	strbeq.w	r3, [r4, #224]	; 0xe0
	radio_tmr_tifs_set(RADIO_TIFS);
    6708:	f004 f9a4 	bl	aa54 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    670c:	2300      	movs	r3, #0
    670e:	4619      	mov	r1, r3
    6710:	461a      	mov	r2, r3
    6712:	4618      	mov	r0, r3
    6714:	f004 f91a 	bl	a94c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6718:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    671c:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
    6720:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6724:	3008      	adds	r0, #8
    6726:	f004 f885 	bl	a834 <radio_pkt_rx_set>
	radio_rssi_measure();
    672a:	f004 f927 	bl	a97c <radio_rssi_measure>
	if (_radio.scanner.filter_policy) {
    672e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    6732:	f013 0f30 	tst.w	r3, #48	; 0x30
    6736:	d007      	beq.n	6748 <event_scan+0xe0>
		struct ll_filter *wl = ctrl_filter_get(true);
    6738:	2001      	movs	r0, #1
    673a:	f003 fdcf 	bl	a2dc <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    673e:	1c82      	adds	r2, r0, #2
    6740:	7841      	ldrb	r1, [r0, #1]
    6742:	7800      	ldrb	r0, [r0, #0]
    6744:	f004 f93c 	bl	a9c0 <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6748:	68e2      	ldr	r2, [r4, #12]
    674a:	f105 0109 	add.w	r1, r5, #9
    674e:	2000      	movs	r0, #0
    6750:	f004 f98c 	bl	aa6c <radio_tmr_start>
	radio_tmr_end_capture();
    6754:	f004 fa5a 	bl	ac0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    6758:	2106      	movs	r1, #6
    675a:	462a      	mov	r2, r5
    675c:	4821      	ldr	r0, [pc, #132]	; (67e4 <event_scan+0x17c>)
    675e:	f7ff ff3b 	bl	65d8 <preempt_calc>
    6762:	4601      	mov	r1, r0
    6764:	b130      	cbz	r0, 6774 <event_scan+0x10c>
		_radio.state = STATE_STOP;
    6766:	2304      	movs	r3, #4
    6768:	7523      	strb	r3, [r4, #20]
}
    676a:	b00a      	add	sp, #40	; 0x28
    676c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6770:	f004 b886 	b.w	a880 <radio_disable>
		ret = ticker_start(
    6774:	f641 1336 	movw	r3, #6454	; 0x1936
    6778:	9308      	str	r3, [sp, #32]
    677a:	4b1b      	ldr	r3, [pc, #108]	; (67e8 <event_scan+0x180>)
    677c:	9307      	str	r3, [sp, #28]
    677e:	2204      	movs	r2, #4
    6780:	4b1a      	ldr	r3, [pc, #104]	; (67ec <event_scan+0x184>)
    6782:	9206      	str	r2, [sp, #24]
    6784:	9305      	str	r3, [sp, #20]
    6786:	9004      	str	r0, [sp, #16]
    6788:	9003      	str	r0, [sp, #12]
    678a:	9002      	str	r0, [sp, #8]
    678c:	9001      	str	r0, [sp, #4]
    678e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    6792:	3309      	adds	r3, #9
    6794:	9300      	str	r3, [sp, #0]
    6796:	462b      	mov	r3, r5
    6798:	f7fd faf4 	bl	3d84 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    679c:	f030 0302 	bics.w	r3, r0, #2
    67a0:	d007      	beq.n	67b2 <event_scan+0x14a>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    67a2:	4b0a      	ldr	r3, [pc, #40]	; (67cc <event_scan+0x164>)
    67a4:	9301      	str	r3, [sp, #4]
    67a6:	9300      	str	r3, [sp, #0]
    67a8:	4a09      	ldr	r2, [pc, #36]	; (67d0 <event_scan+0x168>)
    67aa:	4b0a      	ldr	r3, [pc, #40]	; (67d4 <event_scan+0x16c>)
    67ac:	490a      	ldr	r1, [pc, #40]	; (67d8 <event_scan+0x170>)
    67ae:	4810      	ldr	r0, [pc, #64]	; (67f0 <event_scan+0x188>)
    67b0:	e76a      	b.n	6688 <event_scan+0x20>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    67b2:	4619      	mov	r1, r3
    67b4:	4618      	mov	r0, r3
    67b6:	4a0f      	ldr	r2, [pc, #60]	; (67f4 <event_scan+0x18c>)
    67b8:	f7fd fc00 	bl	3fbc <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    67bc:	f030 0302 	bics.w	r3, r0, #2
    67c0:	d1ef      	bne.n	67a2 <event_scan+0x13a>
}
    67c2:	b00a      	add	sp, #40	; 0x28
    67c4:	bd70      	pop	{r4, r5, r6, pc}
    67c6:	bf00      	nop
    67c8:	20000578 	.word	0x20000578
    67cc:	0000cbb3 	.word	0x0000cbb3
    67d0:	0000d49b 	.word	0x0000d49b
    67d4:	0000df52 	.word	0x0000df52
    67d8:	0000d4ea 	.word	0x0000d4ea
    67dc:	0000e102 	.word	0x0000e102
    67e0:	0000e13c 	.word	0x0000e13c
    67e4:	20000648 	.word	0x20000648
    67e8:	00005735 	.word	0x00005735
    67ec:	0000595d 	.word	0x0000595d
    67f0:	0000e17b 	.word	0x0000e17b
    67f4:	000058d5 	.word	0x000058d5

000067f8 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    67f8:	4b36      	ldr	r3, [pc, #216]	; (68d4 <event_adv+0xdc>)
    67fa:	7cda      	ldrb	r2, [r3, #19]
{
    67fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    67fe:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6800:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6804:	461c      	mov	r4, r3
    6806:	b172      	cbz	r2, 6826 <event_adv+0x2e>
    6808:	4b33      	ldr	r3, [pc, #204]	; (68d8 <event_adv+0xe0>)
    680a:	9301      	str	r3, [sp, #4]
    680c:	9300      	str	r3, [sp, #0]
    680e:	4a33      	ldr	r2, [pc, #204]	; (68dc <event_adv+0xe4>)
    6810:	4b33      	ldr	r3, [pc, #204]	; (68e0 <event_adv+0xe8>)
    6812:	4934      	ldr	r1, [pc, #208]	; (68e4 <event_adv+0xec>)
    6814:	4834      	ldr	r0, [pc, #208]	; (68e8 <event_adv+0xf0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6816:	f7fa fb29 	bl	e6c <printk>
    681a:	4040      	eors	r0, r0
    681c:	f380 8811 	msr	BASEPRI, r0
    6820:	f04f 0004 	mov.w	r0, #4
    6824:	df02      	svc	2
    6826:	7c1b      	ldrb	r3, [r3, #16]
    6828:	b2db      	uxtb	r3, r3
    682a:	2b05      	cmp	r3, #5
    682c:	d007      	beq.n	683e <event_adv+0x46>
    682e:	4b2a      	ldr	r3, [pc, #168]	; (68d8 <event_adv+0xe0>)
    6830:	9301      	str	r3, [sp, #4]
    6832:	9300      	str	r3, [sp, #0]
    6834:	4a29      	ldr	r2, [pc, #164]	; (68dc <event_adv+0xe4>)
    6836:	4b2a      	ldr	r3, [pc, #168]	; (68e0 <event_adv+0xe8>)
    6838:	492a      	ldr	r1, [pc, #168]	; (68e4 <event_adv+0xec>)
    683a:	482c      	ldr	r0, [pc, #176]	; (68ec <event_adv+0xf4>)
    683c:	e7eb      	b.n	6816 <event_adv+0x1e>
	_radio.ticks_anchor = ticks_at_expire;
    683e:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6840:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    6844:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6846:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    684a:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    684c:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    684e:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6850:	f7ff fee0 	bl	6614 <adv_scan_configure.constprop.45>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6854:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6858:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    685c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    6860:	f363 0202 	bfi	r2, r3, #0, #3
    6864:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6868:	f7ff fade 	bl	5e28 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    686c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6870:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6874:	d007      	beq.n	6886 <event_adv+0x8e>
		struct ll_filter *wl = ctrl_filter_get(true);
    6876:	4630      	mov	r0, r6
    6878:	f003 fd30 	bl	a2dc <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    687c:	1c82      	adds	r2, r0, #2
    687e:	7841      	ldrb	r1, [r0, #1]
    6880:	7800      	ldrb	r0, [r0, #0]
    6882:	f004 f89d 	bl	a9c0 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6886:	68e2      	ldr	r2, [r4, #12]
    6888:	f105 0109 	add.w	r1, r5, #9
    688c:	2001      	movs	r0, #1
    688e:	f004 f8ed 	bl	aa6c <radio_tmr_start>
	radio_tmr_end_capture();
    6892:	f004 f9bb 	bl	ac0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6896:	462a      	mov	r2, r5
    6898:	2105      	movs	r1, #5
    689a:	4815      	ldr	r0, [pc, #84]	; (68f0 <event_adv+0xf8>)
    689c:	f7ff fe9c 	bl	65d8 <preempt_calc>
    68a0:	4603      	mov	r3, r0
    68a2:	b130      	cbz	r0, 68b2 <event_adv+0xba>
		_radio.state = STATE_STOP;
    68a4:	2304      	movs	r3, #4
    68a6:	7523      	strb	r3, [r4, #20]
}
    68a8:	b002      	add	sp, #8
    68aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    68ae:	f003 bfe7 	b.w	a880 <radio_disable>
		ticker_status =
    68b2:	4a10      	ldr	r2, [pc, #64]	; (68f4 <event_adv+0xfc>)
    68b4:	4601      	mov	r1, r0
    68b6:	f7fd fb81 	bl	3fbc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    68ba:	f030 0302 	bics.w	r3, r0, #2
    68be:	d007      	beq.n	68d0 <event_adv+0xd8>
    68c0:	4b05      	ldr	r3, [pc, #20]	; (68d8 <event_adv+0xe0>)
    68c2:	9301      	str	r3, [sp, #4]
    68c4:	9300      	str	r3, [sp, #0]
    68c6:	4a05      	ldr	r2, [pc, #20]	; (68dc <event_adv+0xe4>)
    68c8:	4b05      	ldr	r3, [pc, #20]	; (68e0 <event_adv+0xe8>)
    68ca:	4906      	ldr	r1, [pc, #24]	; (68e4 <event_adv+0xec>)
    68cc:	480a      	ldr	r0, [pc, #40]	; (68f8 <event_adv+0x100>)
    68ce:	e7a2      	b.n	6816 <event_adv+0x1e>
}
    68d0:	b002      	add	sp, #8
    68d2:	bd70      	pop	{r4, r5, r6, pc}
    68d4:	20000578 	.word	0x20000578
    68d8:	0000cbb3 	.word	0x0000cbb3
    68dc:	0000d49b 	.word	0x0000d49b
    68e0:	0000dee5 	.word	0x0000dee5
    68e4:	0000d4ea 	.word	0x0000d4ea
    68e8:	0000e102 	.word	0x0000e102
    68ec:	0000e0c3 	.word	0x0000e0c3
    68f0:	20000590 	.word	0x20000590
    68f4:	000058d5 	.word	0x000058d5
    68f8:	0000e075 	.word	0x0000e075

000068fc <event_stop.constprop.46>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    68fc:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    68fe:	4b05      	ldr	r3, [pc, #20]	; (6914 <event_stop.constprop.46+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6900:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    6902:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6904:	4611      	mov	r1, r2
    6906:	4610      	mov	r0, r2
    6908:	f7fc fc7e 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    690c:	b108      	cbz	r0, 6912 <event_stop.constprop.46+0x16>
    690e:	f7ff f80b 	bl	5928 <event_stop.part.12>
    6912:	bd08      	pop	{r3, pc}
    6914:	20003300 	.word	0x20003300

00006918 <event_common_prepare>:
{
    6918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    691c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    691e:	681d      	ldr	r5, [r3, #0]
{
    6920:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6922:	2c00      	cmp	r4, #0
{
    6924:	4681      	mov	r9, r0
    6926:	910b      	str	r1, [sp, #44]	; 0x2c
    6928:	4690      	mov	r8, r2
    692a:	469b      	mov	fp, r3
    692c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6930:	da03      	bge.n	693a <event_common_prepare+0x22>
		_ticks_xtal_to_start = max(_ticks_active_to_start,
    6932:	9c16      	ldr	r4, [sp, #88]	; 0x58
    6934:	42ac      	cmp	r4, r5
    6936:	bf38      	it	cc
    6938:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    693a:	42ac      	cmp	r4, r5
    693c:	4f56      	ldr	r7, [pc, #344]	; (6a98 <event_common_prepare+0x180>)
    693e:	d924      	bls.n	698a <event_common_prepare+0x72>
		ticker_status =
    6940:	f241 5374 	movw	r3, #5492	; 0x1574
    6944:	9308      	str	r3, [sp, #32]
    6946:	4b55      	ldr	r3, [pc, #340]	; (6a9c <event_common_prepare+0x184>)
    6948:	9305      	str	r3, [sp, #20]
    694a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    694c:	1b63      	subs	r3, r4, r5
		ticker_status =
    694e:	9300      	str	r3, [sp, #0]
    6950:	9707      	str	r7, [sp, #28]
    6952:	464b      	mov	r3, r9
    6954:	9106      	str	r1, [sp, #24]
    6956:	9104      	str	r1, [sp, #16]
    6958:	9103      	str	r1, [sp, #12]
    695a:	9102      	str	r1, [sp, #8]
    695c:	9101      	str	r1, [sp, #4]
    695e:	2201      	movs	r2, #1
    6960:	4608      	mov	r0, r1
    6962:	f7fd fa0f 	bl	3d84 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6966:	f030 0302 	bics.w	r3, r0, #2
    696a:	d034      	beq.n	69d6 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    696c:	4b4c      	ldr	r3, [pc, #304]	; (6aa0 <event_common_prepare+0x188>)
    696e:	9301      	str	r3, [sp, #4]
    6970:	9300      	str	r3, [sp, #0]
    6972:	4a4c      	ldr	r2, [pc, #304]	; (6aa4 <event_common_prepare+0x18c>)
    6974:	4b4c      	ldr	r3, [pc, #304]	; (6aa8 <event_common_prepare+0x190>)
    6976:	494d      	ldr	r1, [pc, #308]	; (6aac <event_common_prepare+0x194>)
    6978:	484d      	ldr	r0, [pc, #308]	; (6ab0 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    697a:	f7fa fa77 	bl	e6c <printk>
    697e:	4040      	eors	r0, r0
    6980:	f380 8811 	msr	BASEPRI, r0
    6984:	f04f 0004 	mov.w	r0, #4
    6988:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    698a:	d21d      	bcs.n	69c8 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    698c:	2300      	movs	r3, #0
    698e:	461a      	mov	r2, r3
    6990:	4619      	mov	r1, r3
    6992:	4618      	mov	r0, r3
    6994:	f7fe fff2 	bl	597c <event_active>
		ticker_status =
    6998:	f241 5389 	movw	r3, #5513	; 0x1589
    699c:	2100      	movs	r1, #0
    699e:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    69a0:	1b2c      	subs	r4, r5, r4
		ticker_status =
    69a2:	4b44      	ldr	r3, [pc, #272]	; (6ab4 <event_common_prepare+0x19c>)
    69a4:	9305      	str	r3, [sp, #20]
    69a6:	9707      	str	r7, [sp, #28]
    69a8:	464b      	mov	r3, r9
    69aa:	9106      	str	r1, [sp, #24]
    69ac:	9104      	str	r1, [sp, #16]
    69ae:	9103      	str	r1, [sp, #12]
    69b0:	9102      	str	r1, [sp, #8]
    69b2:	9101      	str	r1, [sp, #4]
    69b4:	9400      	str	r4, [sp, #0]
    69b6:	2201      	movs	r2, #1
    69b8:	4608      	mov	r0, r1
    69ba:	f7fd f9e3 	bl	3d84 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    69be:	f030 0302 	bics.w	r3, r0, #2
    69c2:	d1d3      	bne.n	696c <event_common_prepare+0x54>
    69c4:	462c      	mov	r4, r5
    69c6:	e00b      	b.n	69e0 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    69c8:	2300      	movs	r3, #0
    69ca:	461a      	mov	r2, r3
    69cc:	4619      	mov	r1, r3
    69ce:	4618      	mov	r0, r3
    69d0:	f7fe ffd4 	bl	597c <event_active>
		event_xtal(0, 0, 0, NULL);
    69d4:	2300      	movs	r3, #0
    69d6:	461a      	mov	r2, r3
    69d8:	4619      	mov	r1, r3
    69da:	4618      	mov	r0, r3
    69dc:	f7fe fff4 	bl	59c8 <event_xtal>
	_radio.remainder_anchor = remainder;
    69e0:	4e35      	ldr	r6, [pc, #212]	; (6ab8 <event_common_prepare+0x1a0>)
    69e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    69e4:	60f3      	str	r3, [r6, #12]
	ticker_status =
    69e6:	f241 53a1 	movw	r3, #5537	; 0x15a1
    69ea:	9308      	str	r3, [sp, #32]
    69ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    69ee:	9306      	str	r3, [sp, #24]
    69f0:	2200      	movs	r2, #0
    69f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    69f4:	9305      	str	r3, [sp, #20]
    69f6:	9707      	str	r7, [sp, #28]
    69f8:	464b      	mov	r3, r9
    69fa:	9204      	str	r2, [sp, #16]
    69fc:	9203      	str	r2, [sp, #12]
    69fe:	9202      	str	r2, [sp, #8]
    6a00:	9201      	str	r2, [sp, #4]
    6a02:	9400      	str	r4, [sp, #0]
    6a04:	4611      	mov	r1, r2
    6a06:	4610      	mov	r0, r2
    6a08:	f7fd f9bc 	bl	3d84 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6a0c:	f030 0302 	bics.w	r3, r0, #2
    6a10:	d1ac      	bne.n	696c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    6a12:	2005      	movs	r0, #5
    6a14:	f7ff ff72 	bl	68fc <event_stop.constprop.46>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    6a18:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    6a1c:	429d      	cmp	r5, r3
    6a1e:	d023      	beq.n	6a68 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    6a20:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    6a24:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    6a28:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    6a2a:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    6a2c:	bfbc      	itt	lt
    6a2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    6a32:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = max(_radio.ticks_active_to_start,
    6a36:	f8d8 2000 	ldr.w	r2, [r8]
    6a3a:	f8d6 117c 	ldr.w	r1, [r6, #380]	; 0x17c
    6a3e:	428a      	cmp	r2, r1
    6a40:	bf38      	it	cc
    6a42:	460a      	movcc	r2, r1
		ticker_status =
    6a44:	f241 51cf 	movw	r1, #5583	; 0x15cf
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a48:	b2a3      	uxth	r3, r4
    6a4a:	b292      	uxth	r2, r2
		ticker_status =
    6a4c:	9106      	str	r1, [sp, #24]
    6a4e:	2100      	movs	r1, #0
    6a50:	9302      	str	r3, [sp, #8]
    6a52:	9201      	str	r2, [sp, #4]
    6a54:	9200      	str	r2, [sp, #0]
    6a56:	9104      	str	r1, [sp, #16]
    6a58:	9103      	str	r1, [sp, #12]
    6a5a:	4652      	mov	r2, sl
    6a5c:	4608      	mov	r0, r1
    6a5e:	f7fd f9e1 	bl	3e24 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6a62:	f030 0302 	bics.w	r3, r0, #2
    6a66:	d181      	bne.n	696c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    6a68:	20ff      	movs	r0, #255	; 0xff
    6a6a:	f7ff f89b 	bl	5ba4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    6a6e:	4b13      	ldr	r3, [pc, #76]	; (6abc <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6a70:	2201      	movs	r2, #1
    6a72:	4611      	mov	r1, r2
    6a74:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    6a76:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6a7a:	f7fc fbc5 	bl	3208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    6a7e:	b138      	cbz	r0, 6a90 <event_common_prepare+0x178>
    6a80:	4b07      	ldr	r3, [pc, #28]	; (6aa0 <event_common_prepare+0x188>)
    6a82:	9301      	str	r3, [sp, #4]
    6a84:	9300      	str	r3, [sp, #0]
    6a86:	4a07      	ldr	r2, [pc, #28]	; (6aa4 <event_common_prepare+0x18c>)
    6a88:	4b07      	ldr	r3, [pc, #28]	; (6aa8 <event_common_prepare+0x190>)
    6a8a:	4908      	ldr	r1, [pc, #32]	; (6aac <event_common_prepare+0x194>)
    6a8c:	480c      	ldr	r0, [pc, #48]	; (6ac0 <event_common_prepare+0x1a8>)
    6a8e:	e774      	b.n	697a <event_common_prepare+0x62>
}
    6a90:	b00d      	add	sp, #52	; 0x34
    6a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a96:	bf00      	nop
    6a98:	00005735 	.word	0x00005735
    6a9c:	0000597d 	.word	0x0000597d
    6aa0:	0000cbb3 	.word	0x0000cbb3
    6aa4:	0000d49b 	.word	0x0000d49b
    6aa8:	0000deaf 	.word	0x0000deaf
    6aac:	0000d4ea 	.word	0x0000d4ea
    6ab0:	0000e075 	.word	0x0000e075
    6ab4:	000059c9 	.word	0x000059c9
    6ab8:	20000578 	.word	0x20000578
    6abc:	200033b0 	.word	0x200033b0
    6ac0:	0000e59b 	.word	0x0000e59b

00006ac4 <radio_event_adv_prepare>:
{
    6ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6ac6:	4a11      	ldr	r2, [pc, #68]	; (6b0c <radio_event_adv_prepare+0x48>)
    6ac8:	7c13      	ldrb	r3, [r2, #16]
    6aca:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    6ace:	b173      	cbz	r3, 6aee <radio_event_adv_prepare+0x2a>
    6ad0:	4b0f      	ldr	r3, [pc, #60]	; (6b10 <radio_event_adv_prepare+0x4c>)
    6ad2:	9301      	str	r3, [sp, #4]
    6ad4:	9300      	str	r3, [sp, #0]
    6ad6:	4a0f      	ldr	r2, [pc, #60]	; (6b14 <radio_event_adv_prepare+0x50>)
    6ad8:	4b0f      	ldr	r3, [pc, #60]	; (6b18 <radio_event_adv_prepare+0x54>)
    6ada:	4910      	ldr	r1, [pc, #64]	; (6b1c <radio_event_adv_prepare+0x58>)
    6adc:	4810      	ldr	r0, [pc, #64]	; (6b20 <radio_event_adv_prepare+0x5c>)
    6ade:	f7fa f9c5 	bl	e6c <printk>
    6ae2:	4040      	eors	r0, r0
    6ae4:	f380 8811 	msr	BASEPRI, r0
    6ae8:	f04f 0004 	mov.w	r0, #4
    6aec:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6aee:	2305      	movs	r3, #5
    6af0:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    6af2:	9403      	str	r4, [sp, #12]
    6af4:	4c0b      	ldr	r4, [pc, #44]	; (6b24 <radio_event_adv_prepare+0x60>)
    6af6:	9402      	str	r4, [sp, #8]
    6af8:	9301      	str	r3, [sp, #4]
    6afa:	6a13      	ldr	r3, [r2, #32]
    6afc:	9300      	str	r3, [sp, #0]
    6afe:	f102 031c 	add.w	r3, r2, #28
    6b02:	3218      	adds	r2, #24
    6b04:	f7ff ff08 	bl	6918 <event_common_prepare>
}
    6b08:	b004      	add	sp, #16
    6b0a:	bd10      	pop	{r4, pc}
    6b0c:	20000578 	.word	0x20000578
    6b10:	0000cbb3 	.word	0x0000cbb3
    6b14:	0000d49b 	.word	0x0000d49b
    6b18:	0000decd 	.word	0x0000decd
    6b1c:	0000d4ea 	.word	0x0000d4ea
    6b20:	0000e6d6 	.word	0x0000e6d6
    6b24:	000067f9 	.word	0x000067f9

00006b28 <event_scan_prepare>:
{
    6b28:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6b2a:	4c25      	ldr	r4, [pc, #148]	; (6bc0 <event_scan_prepare+0x98>)
    6b2c:	7c23      	ldrb	r3, [r4, #16]
{
    6b2e:	b085      	sub	sp, #20
    6b30:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    6b32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6b36:	b173      	cbz	r3, 6b56 <event_scan_prepare+0x2e>
    6b38:	4b22      	ldr	r3, [pc, #136]	; (6bc4 <event_scan_prepare+0x9c>)
    6b3a:	9301      	str	r3, [sp, #4]
    6b3c:	9300      	str	r3, [sp, #0]
    6b3e:	4a22      	ldr	r2, [pc, #136]	; (6bc8 <event_scan_prepare+0xa0>)
    6b40:	4b22      	ldr	r3, [pc, #136]	; (6bcc <event_scan_prepare+0xa4>)
    6b42:	4923      	ldr	r1, [pc, #140]	; (6bd0 <event_scan_prepare+0xa8>)
    6b44:	4823      	ldr	r0, [pc, #140]	; (6bd4 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    6b46:	f7fa f991 	bl	e6c <printk>
    6b4a:	4040      	eors	r0, r0
    6b4c:	f380 8811 	msr	BASEPRI, r0
    6b50:	f04f 0004 	mov.w	r0, #4
    6b54:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    6b56:	2306      	movs	r3, #6
    6b58:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    6b5a:	9203      	str	r2, [sp, #12]
    6b5c:	9301      	str	r3, [sp, #4]
    6b5e:	4a1e      	ldr	r2, [pc, #120]	; (6bd8 <event_scan_prepare+0xb0>)
    6b60:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    6b64:	9202      	str	r2, [sp, #8]
    6b66:	9300      	str	r3, [sp, #0]
    6b68:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    6b6c:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
    6b70:	f7ff fed2 	bl	6918 <event_common_prepare>
	if (_radio.scanner.conn) {
    6b74:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    6b78:	b303      	cbz	r3, 6bbc <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    6b7a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    6b7e:	2b00      	cmp	r3, #0
    6b80:	da0c      	bge.n	6b9c <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    6b82:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    6b86:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
				(_radio.scanner.hdr.ticks_xtal_to_start &
    6b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    6b8e:	4291      	cmp	r1, r2
    6b90:	bf2c      	ite	cs
    6b92:	ebc3 0301 	rsbcs	r3, r3, r1
    6b96:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    6b9a:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    6b9c:	4b0f      	ldr	r3, [pc, #60]	; (6bdc <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6b9e:	2201      	movs	r2, #1
    6ba0:	4611      	mov	r1, r2
    6ba2:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    6ba4:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6ba6:	f7fc fb2f 	bl	3208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    6baa:	b138      	cbz	r0, 6bbc <event_scan_prepare+0x94>
    6bac:	4b05      	ldr	r3, [pc, #20]	; (6bc4 <event_scan_prepare+0x9c>)
    6bae:	9301      	str	r3, [sp, #4]
    6bb0:	9300      	str	r3, [sp, #0]
    6bb2:	4a05      	ldr	r2, [pc, #20]	; (6bc8 <event_scan_prepare+0xa0>)
    6bb4:	4b05      	ldr	r3, [pc, #20]	; (6bcc <event_scan_prepare+0xa4>)
    6bb6:	4906      	ldr	r1, [pc, #24]	; (6bd0 <event_scan_prepare+0xa8>)
    6bb8:	4809      	ldr	r0, [pc, #36]	; (6be0 <event_scan_prepare+0xb8>)
    6bba:	e7c4      	b.n	6b46 <event_scan_prepare+0x1e>
}
    6bbc:	b005      	add	sp, #20
    6bbe:	bd30      	pop	{r4, r5, pc}
    6bc0:	20000578 	.word	0x20000578
    6bc4:	0000cbb3 	.word	0x0000cbb3
    6bc8:	0000d49b 	.word	0x0000d49b
    6bcc:	0000df3f 	.word	0x0000df3f
    6bd0:	0000d4ea 	.word	0x0000d4ea
    6bd4:	0000e6d6 	.word	0x0000e6d6
    6bd8:	00006669 	.word	0x00006669
    6bdc:	20003330 	.word	0x20003330
    6be0:	0000e59b 	.word	0x0000e59b

00006be4 <event_adv_stop>:
{
    6be4:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    6be6:	2005      	movs	r0, #5
    6be8:	f7ff fe88 	bl	68fc <event_stop.constprop.46>
	ticker_status =
    6bec:	f641 0393 	movw	r3, #6291	; 0x1893
    6bf0:	2100      	movs	r1, #0
    6bf2:	9300      	str	r3, [sp, #0]
    6bf4:	2205      	movs	r2, #5
    6bf6:	4b0c      	ldr	r3, [pc, #48]	; (6c28 <event_adv_stop+0x44>)
    6bf8:	4608      	mov	r0, r1
    6bfa:	f7fd f961 	bl	3ec0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6bfe:	f030 0302 	bics.w	r3, r0, #2
    6c02:	d00e      	beq.n	6c22 <event_adv_stop+0x3e>
    6c04:	4b09      	ldr	r3, [pc, #36]	; (6c2c <event_adv_stop+0x48>)
    6c06:	9301      	str	r3, [sp, #4]
    6c08:	9300      	str	r3, [sp, #0]
    6c0a:	4a09      	ldr	r2, [pc, #36]	; (6c30 <event_adv_stop+0x4c>)
    6c0c:	4b09      	ldr	r3, [pc, #36]	; (6c34 <event_adv_stop+0x50>)
    6c0e:	490a      	ldr	r1, [pc, #40]	; (6c38 <event_adv_stop+0x54>)
    6c10:	480a      	ldr	r0, [pc, #40]	; (6c3c <event_adv_stop+0x58>)
    6c12:	f7fa f92b 	bl	e6c <printk>
    6c16:	4040      	eors	r0, r0
    6c18:	f380 8811 	msr	BASEPRI, r0
    6c1c:	f04f 0004 	mov.w	r0, #4
    6c20:	df02      	svc	2
}
    6c22:	b003      	add	sp, #12
    6c24:	f85d fb04 	ldr.w	pc, [sp], #4
    6c28:	00005fc5 	.word	0x00005fc5
    6c2c:	0000cbb3 	.word	0x0000cbb3
    6c30:	0000d49b 	.word	0x0000d49b
    6c34:	0000df30 	.word	0x0000df30
    6c38:	0000d4ea 	.word	0x0000d4ea
    6c3c:	0000e075 	.word	0x0000e075

00006c40 <packet_rx_allocate.constprop.47>:
static void packet_rx_allocate(u8_t max)
    6c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    6c44:	4d21      	ldr	r5, [pc, #132]	; (6ccc <packet_rx_allocate.constprop.47+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    6c46:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    6c4a:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    6c4e:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    6c52:	3401      	adds	r4, #1
    6c54:	b2e4      	uxtb	r4, r4
		acquire = 0;
    6c56:	42a3      	cmp	r3, r4
    6c58:	bf08      	it	eq
    6c5a:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    6c5c:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    6c60:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    6c64:	f1b9 0f00 	cmp.w	r9, #0
    6c68:	d003      	beq.n	6c72 <packet_rx_allocate.constprop.47+0x32>
    6c6a:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    6c6e:	429c      	cmp	r4, r3
    6c70:	d101      	bne.n	6c76 <packet_rx_allocate.constprop.47+0x36>
    6c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    6c76:	4638      	mov	r0, r7
    6c78:	f7fc fa0d 	bl	3096 <mem_acquire>
		if (!link) {
    6c7c:	4606      	mov	r6, r0
    6c7e:	2800      	cmp	r0, #0
    6c80:	d0f7      	beq.n	6c72 <packet_rx_allocate.constprop.47+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    6c82:	4640      	mov	r0, r8
    6c84:	f7fc fa07 	bl	3096 <mem_acquire>
		if (!node_rx) {
    6c88:	b928      	cbnz	r0, 6c96 <packet_rx_allocate.constprop.47+0x56>
			mem_release(link, &_radio.link_rx_free);
    6c8a:	4630      	mov	r0, r6
    6c8c:	4910      	ldr	r1, [pc, #64]	; (6cd0 <packet_rx_allocate.constprop.47+0x90>)
}
    6c8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    6c92:	f7fc ba1a 	b.w	30ca <mem_release>
		node_rx->hdr.onion.link = link;
    6c96:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    6c98:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    6c9c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    6ca0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    6ca4:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    6ca8:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    6cac:	3401      	adds	r4, #1
    6cae:	b2e4      	uxtb	r4, r4
			acquire = 0;
    6cb0:	42a3      	cmp	r3, r4
    6cb2:	bf08      	it	eq
    6cb4:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    6cb6:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    6cba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    6cbe:	3b01      	subs	r3, #1
    6cc0:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    6cc4:	fa5f f989 	uxtb.w	r9, r9
    6cc8:	e7cc      	b.n	6c64 <packet_rx_allocate.constprop.47+0x24>
    6cca:	bf00      	nop
    6ccc:	20000578 	.word	0x20000578
    6cd0:	200006b8 	.word	0x200006b8

00006cd4 <common_init>:
{
    6cd4:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    6cd6:	4c33      	ldr	r4, [pc, #204]	; (6da4 <common_init+0xd0>)
    6cd8:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    6cdc:	2a00      	cmp	r2, #0
    6cde:	d040      	beq.n	6d62 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    6ce0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    6ce4:	f44f 7182 	mov.w	r1, #260	; 0x104
    6ce8:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    6cec:	f7fc f9ac 	bl	3048 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    6cf0:	4b2d      	ldr	r3, [pc, #180]	; (6da8 <common_init+0xd4>)
    6cf2:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    6cf6:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    6cfa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    6cfe:	f7fc f9a3 	bl	3048 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    6d02:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    6d06:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    6d0a:	4b28      	ldr	r3, [pc, #160]	; (6dac <common_init+0xd8>)
    6d0c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    6d10:	440a      	add	r2, r1
    6d12:	2108      	movs	r1, #8
    6d14:	f7fc f998 	bl	3048 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    6d18:	4b25      	ldr	r3, [pc, #148]	; (6db0 <common_init+0xdc>)
    6d1a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    6d1e:	2202      	movs	r2, #2
    6d20:	2124      	movs	r1, #36	; 0x24
    6d22:	f7fc f991 	bl	3048 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    6d26:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    6d2a:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    6d2e:	4b21      	ldr	r3, [pc, #132]	; (6db4 <common_init+0xe0>)
    6d30:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    6d34:	3a01      	subs	r2, #1
    6d36:	b292      	uxth	r2, r2
    6d38:	f7fc f986 	bl	3048 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    6d3c:	481b      	ldr	r0, [pc, #108]	; (6dac <common_init+0xd8>)
    6d3e:	f7fc f9aa 	bl	3096 <mem_acquire>
	LL_ASSERT(link);
    6d42:	b988      	cbnz	r0, 6d68 <common_init+0x94>
    6d44:	4b1c      	ldr	r3, [pc, #112]	; (6db8 <common_init+0xe4>)
    6d46:	9301      	str	r3, [sp, #4]
    6d48:	9300      	str	r3, [sp, #0]
    6d4a:	4a1c      	ldr	r2, [pc, #112]	; (6dbc <common_init+0xe8>)
    6d4c:	4b1c      	ldr	r3, [pc, #112]	; (6dc0 <common_init+0xec>)
    6d4e:	491d      	ldr	r1, [pc, #116]	; (6dc4 <common_init+0xf0>)
    6d50:	481d      	ldr	r0, [pc, #116]	; (6dc8 <common_init+0xf4>)
    6d52:	f7fa f88b 	bl	e6c <printk>
    6d56:	4040      	eors	r0, r0
    6d58:	f380 8811 	msr	BASEPRI, r0
    6d5c:	f04f 0004 	mov.w	r0, #4
    6d60:	df02      	svc	2
		_radio.conn_free = NULL;
    6d62:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    6d66:	e7c3      	b.n	6cf0 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    6d68:	4a18      	ldr	r2, [pc, #96]	; (6dcc <common_init+0xf8>)
    6d6a:	1f11      	subs	r1, r2, #4
    6d6c:	f7fc f9d9 	bl	3122 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    6d70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6d74:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    6d78:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    6d7c:	23ff      	movs	r3, #255	; 0xff
    6d7e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    6d82:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
	_radio.data_chan_map[2] = 0xFF;
    6d86:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    6d8a:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
	_radio.data_chan_map[4] = 0x1F;
    6d8e:	231f      	movs	r3, #31
    6d90:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	_radio.data_chan_count = 37;
    6d94:	2325      	movs	r3, #37	; 0x25
    6d96:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
}
    6d9a:	b002      	add	sp, #8
    6d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    6da0:	f7ff bf4e 	b.w	6c40 <packet_rx_allocate.constprop.47>
    6da4:	20000578 	.word	0x20000578
    6da8:	200006a0 	.word	0x200006a0
    6dac:	200006b8 	.word	0x200006b8
    6db0:	200006cc 	.word	0x200006cc
    6db4:	200006d4 	.word	0x200006d4
    6db8:	0000cbb3 	.word	0x0000cbb3
    6dbc:	0000d49b 	.word	0x0000d49b
    6dc0:	0000dc9f 	.word	0x0000dc9f
    6dc4:	0000d4ea 	.word	0x0000d4ea
    6dc8:	0000e66b 	.word	0x0000e66b
    6dcc:	200006c0 	.word	0x200006c0

00006dd0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    6dd0:	4b02      	ldr	r3, [pc, #8]	; (6ddc <mayfly_xtal_start+0xc>)
    6dd2:	6818      	ldr	r0, [r3, #0]
    6dd4:	6843      	ldr	r3, [r0, #4]
    6dd6:	2100      	movs	r1, #0
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	4718      	bx	r3
    6ddc:	20000578 	.word	0x20000578

00006de0 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    6de0:	4b02      	ldr	r3, [pc, #8]	; (6dec <mayfly_xtal_stop+0xc>)
    6de2:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    6de4:	6843      	ldr	r3, [r0, #4]
    6de6:	2100      	movs	r1, #0
    6de8:	685b      	ldr	r3, [r3, #4]
    6dea:	4718      	bx	r3
    6dec:	20000578 	.word	0x20000578

00006df0 <chan_sel_2>:
{
    6df0:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    6df2:	4048      	eors	r0, r1
    6df4:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6df6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    6dfa:	2608      	movs	r6, #8
	o = 0;
    6dfc:	2400      	movs	r4, #0
		o |= (i & 1);
    6dfe:	f00e 0501 	and.w	r5, lr, #1
    6e02:	3e01      	subs	r6, #1
    6e04:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    6e08:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    6e0c:	b2ec      	uxtb	r4, r5
		i >>= 1;
    6e0e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6e12:	d1f4      	bne.n	6dfe <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6e14:	0225      	lsls	r5, r4, #8
    6e16:	b22d      	sxth	r5, r5
    6e18:	b2c0      	uxtb	r0, r0
    6e1a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    6e1e:	4634      	mov	r4, r6
		o |= (i & 1);
    6e20:	f000 0601 	and.w	r6, r0, #1
    6e24:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    6e28:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    6e2c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    6e30:	b2e4      	uxtb	r4, r4
		i >>= 1;
    6e32:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6e36:	d1f3      	bne.n	6e20 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6e38:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6e3a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    6e3e:	3f01      	subs	r7, #1
    6e40:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    6e42:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6e46:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    6e48:	d1d5      	bne.n	6df6 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    6e4a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    6e4c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    6e4e:	fbb1 f0f4 	udiv	r0, r1, r4
    6e52:	fb04 1010 	mls	r0, r4, r0, r1
    6e56:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6e58:	08c4      	lsrs	r4, r0, #3
    6e5a:	f000 0507 	and.w	r5, r0, #7
    6e5e:	5d14      	ldrb	r4, [r2, r4]
    6e60:	412c      	asrs	r4, r5
    6e62:	07e4      	lsls	r4, r4, #31
    6e64:	d407      	bmi.n	6e76 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6e66:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    6e68:	f3c1 4107 	ubfx	r1, r1, #16, #8
    6e6c:	4610      	mov	r0, r2
}
    6e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    6e72:	f7fe b8b1 	b.w	4fd8 <chan_sel_remap>
}
    6e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006e78 <ctrl_tx_enqueue>:
{
    6e78:	b510      	push	{r4, lr}
	    !conn->empty &&
    6e7a:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    6e7e:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    6e82:	f014 0f80 	tst.w	r4, #128	; 0x80
    6e86:	d118      	bne.n	6eba <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6e88:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    6e8c:	b1ab      	cbz	r3, 6eba <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6e8e:	0724      	lsls	r4, r4, #28
    6e90:	d413      	bmi.n	6eba <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6e92:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    6e96:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6e98:	bf04      	itt	eq
    6e9a:	681c      	ldreq	r4, [r3, #0]
    6e9c:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    6ea0:	b992      	cbnz	r2, 6ec8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    6ea2:	681a      	ldr	r2, [r3, #0]
    6ea4:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    6ea6:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    6ea8:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    6eac:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    6eb0:	680b      	ldr	r3, [r1, #0]
    6eb2:	b90b      	cbnz	r3, 6eb8 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    6eb4:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    6eb8:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    6eba:	b92a      	cbnz	r2, 6ec8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    6ebc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    6ec0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    6ec2:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    6ec6:	e7ef      	b.n	6ea8 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    6ec8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6ecc:	681a      	ldr	r2, [r3, #0]
    6ece:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    6ed0:	6019      	str	r1, [r3, #0]
    6ed2:	e7eb      	b.n	6eac <ctrl_tx_enqueue+0x34>

00006ed4 <ctrl_tx_sec_enqueue>:
{
    6ed4:	b410      	push	{r4}
	if (conn->pause_tx) {
    6ed6:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    6eda:	0724      	lsls	r4, r4, #28
{
    6edc:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    6ede:	d50f      	bpl.n	6f00 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    6ee0:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    6ee4:	b931      	cbnz	r1, 6ef4 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    6ee6:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    6eea:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    6eec:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    6ef0:	bc10      	pop	{r4}
    6ef2:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    6ef4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6ef8:	6819      	ldr	r1, [r3, #0]
    6efa:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    6efc:	601a      	str	r2, [r3, #0]
    6efe:	e7f7      	b.n	6ef0 <ctrl_tx_sec_enqueue+0x1c>
}
    6f00:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    6f02:	f7ff bfb9 	b.w	6e78 <ctrl_tx_enqueue>
	...

00006f08 <feature_rsp_send>:
{
    6f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f0a:	4f21      	ldr	r7, [pc, #132]	; (6f90 <feature_rsp_send+0x88>)
{
    6f0c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f0e:	f507 70aa 	add.w	r0, r7, #340	; 0x154
{
    6f12:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f14:	f7fc f8bf 	bl	3096 <mem_acquire>
	if (!node_tx) {
    6f18:	4604      	mov	r4, r0
    6f1a:	b3b0      	cbz	r0, 6f8a <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6f1c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    6f1e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6f20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6f28:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6f2c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    6f30:	f043 0310 	orr.w	r3, r3, #16
    6f34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6f38:	79b1      	ldrb	r1, [r6, #6]
    6f3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6f3e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6f42:	f3c1 0110 	ubfx	r1, r1, #0, #17
    6f46:	400b      	ands	r3, r1
    6f48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    6f4c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    6f50:	f043 0320 	orr.w	r3, r3, #32
    6f54:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f58:	7903      	ldrb	r3, [r0, #4]
    6f5a:	f043 0303 	orr.w	r3, r3, #3
    6f5e:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6f60:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    6f62:	2309      	movs	r3, #9
    6f64:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6f66:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6f68:	2100      	movs	r1, #0
    6f6a:	4410      	add	r0, r2
    6f6c:	f7fa fdda 	bl	1b24 <memset>
		conn->llcp_features & 0xFF;
    6f70:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6f74:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    6f76:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    6f78:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    6f7a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6f7c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    6f7e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    6f80:	4621      	mov	r1, r4
    6f82:	f7ff ffa7 	bl	6ed4 <ctrl_tx_sec_enqueue>
	return 0;
    6f86:	2000      	movs	r0, #0
    6f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    6f8a:	2001      	movs	r0, #1
}
    6f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f8e:	bf00      	nop
    6f90:	20000578 	.word	0x20000578
    6f94:	00000000 	.word	0x00000000

00006f98 <event_connection_prepare>:
{
    6f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6f9c:	4d76      	ldr	r5, [pc, #472]	; (7178 <event_connection_prepare+0x1e0>)
{
    6f9e:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    6fa0:	7c2b      	ldrb	r3, [r5, #16]
{
    6fa2:	b08f      	sub	sp, #60	; 0x3c
    6fa4:	4680      	mov	r8, r0
    6fa6:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    6fa8:	b173      	cbz	r3, 6fc8 <event_connection_prepare+0x30>
    6faa:	4b74      	ldr	r3, [pc, #464]	; (717c <event_connection_prepare+0x1e4>)
    6fac:	9301      	str	r3, [sp, #4]
    6fae:	9300      	str	r3, [sp, #0]
    6fb0:	4a73      	ldr	r2, [pc, #460]	; (7180 <event_connection_prepare+0x1e8>)
    6fb2:	4b74      	ldr	r3, [pc, #464]	; (7184 <event_connection_prepare+0x1ec>)
    6fb4:	4974      	ldr	r1, [pc, #464]	; (7188 <event_connection_prepare+0x1f0>)
    6fb6:	4875      	ldr	r0, [pc, #468]	; (718c <event_connection_prepare+0x1f4>)
		LL_ASSERT(!retval);
    6fb8:	f7f9 ff58 	bl	e6c <printk>
    6fbc:	4040      	eors	r0, r0
    6fbe:	f380 8811 	msr	BASEPRI, r0
    6fc2:	f04f 0004 	mov.w	r0, #4
    6fc6:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    6fc8:	f894 3020 	ldrb.w	r3, [r4, #32]
    6fcc:	3307      	adds	r3, #7
    6fce:	b2db      	uxtb	r3, r3
    6fd0:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    6fd2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6fd6:	2b00      	cmp	r3, #0
    6fd8:	da09      	bge.n	6fee <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    6fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    6fdc:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    6fde:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    6fe2:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    6fe4:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    6fe6:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    6fe8:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    6fea:	bf88      	it	hi
    6fec:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    6fee:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    6ff0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    6ff4:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    6ff6:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    6ff8:	b292      	uxth	r2, r2
    6ffa:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    6ffc:	4432      	add	r2, r6
    6ffe:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    7000:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7004:	429a      	cmp	r2, r3
    7006:	f000 8240 	beq.w	748a <event_connection_prepare+0x4f2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    700a:	2005      	movs	r0, #5
    700c:	f7ff fc76 	bl	68fc <event_stop.constprop.46>
		switch (conn->llcp_type) {
    7010:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    7014:	3b01      	subs	r3, #1
    7016:	2b03      	cmp	r3, #3
    7018:	f200 8341 	bhi.w	769e <event_connection_prepare+0x706>
    701c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7020:	020d0004 	.word	0x020d0004
    7024:	02e802ba 	.word	0x02e802ba
	if (!conn_upd) {
    7028:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    702c:	b90b      	cbnz	r3, 7032 <event_connection_prepare+0x9a>
		_radio.conn_upd = conn;
    702e:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    7032:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7036:	f013 0303 	ands.w	r3, r3, #3
    703a:	d065      	beq.n	7108 <event_connection_prepare+0x170>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    703c:	4854      	ldr	r0, [pc, #336]	; (7190 <event_connection_prepare+0x1f8>)
    703e:	f7fc f82a 	bl	3096 <mem_acquire>
		if (!node_tx) {
    7042:	4605      	mov	r5, r0
    7044:	2800      	cmp	r0, #0
    7046:	f000 8220 	beq.w	748a <event_connection_prepare+0x4f2>
		switch (conn->llcp.conn_upd.state) {
    704a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    704e:	f003 0203 	and.w	r2, r3, #3
    7052:	2a01      	cmp	r2, #1
    7054:	d150      	bne.n	70f8 <event_connection_prepare+0x160>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7056:	f36f 0301 	bfc	r3, #0, #2
    705a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    705e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7060:	3306      	adds	r3, #6
    7062:	4433      	add	r3, r6
    7064:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    7066:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    706a:	7902      	ldrb	r2, [r0, #4]
    706c:	f042 0203 	orr.w	r2, r2, #3
    7070:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    7072:	220c      	movs	r2, #12
    7074:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    7076:	2200      	movs	r2, #0
    7078:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    707a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    707e:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7080:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7082:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7086:	fbb2 f2f1 	udiv	r2, r2, r1
    708a:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    708e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    7092:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    7096:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    709a:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    709e:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    70a2:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    70a6:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    70aa:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    70ac:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    70b0:	2a00      	cmp	r2, #0
    70b2:	da0a      	bge.n	70ca <event_connection_prepare+0x132>
			u32_t ticks_prepare_to_start =
    70b4:	68a3      	ldr	r3, [r4, #8]
    70b6:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    70b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    70bc:	428b      	cmp	r3, r1
    70be:	bf2c      	ite	cs
    70c0:	4443      	addcs	r3, r8
    70c2:	eb08 0301 	addcc.w	r3, r8, r1
    70c6:	1a9b      	subs	r3, r3, r2
    70c8:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    70ca:	f105 0309 	add.w	r3, r5, #9
    70ce:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    70d0:	4b30      	ldr	r3, [pc, #192]	; (7194 <event_connection_prepare+0x1fc>)
    70d2:	4a31      	ldr	r2, [pc, #196]	; (7198 <event_connection_prepare+0x200>)
    70d4:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    70d6:	2201      	movs	r2, #1
    70d8:	4611      	mov	r1, r2
    70da:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    70dc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    70de:	f7fc f893 	bl	3208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    70e2:	2800      	cmp	r0, #0
    70e4:	f000 81cd 	beq.w	7482 <event_connection_prepare+0x4ea>
    70e8:	4b24      	ldr	r3, [pc, #144]	; (717c <event_connection_prepare+0x1e4>)
    70ea:	9301      	str	r3, [sp, #4]
    70ec:	9300      	str	r3, [sp, #0]
    70ee:	4a24      	ldr	r2, [pc, #144]	; (7180 <event_connection_prepare+0x1e8>)
    70f0:	4b2a      	ldr	r3, [pc, #168]	; (719c <event_connection_prepare+0x204>)
    70f2:	4925      	ldr	r1, [pc, #148]	; (7188 <event_connection_prepare+0x1f0>)
    70f4:	482a      	ldr	r0, [pc, #168]	; (71a0 <event_connection_prepare+0x208>)
    70f6:	e75f      	b.n	6fb8 <event_connection_prepare+0x20>
			LL_ASSERT(0);
    70f8:	4b20      	ldr	r3, [pc, #128]	; (717c <event_connection_prepare+0x1e4>)
    70fa:	9301      	str	r3, [sp, #4]
    70fc:	9300      	str	r3, [sp, #0]
    70fe:	4b29      	ldr	r3, [pc, #164]	; (71a4 <event_connection_prepare+0x20c>)
			LL_ASSERT(0);
    7100:	4a1f      	ldr	r2, [pc, #124]	; (7180 <event_connection_prepare+0x1e8>)
    7102:	4921      	ldr	r1, [pc, #132]	; (7188 <event_connection_prepare+0x1f0>)
    7104:	4828      	ldr	r0, [pc, #160]	; (71a8 <event_connection_prepare+0x210>)
    7106:	e757      	b.n	6fb8 <event_connection_prepare+0x20>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    7108:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    710c:	1bf7      	subs	r7, r6, r7
    710e:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    7110:	0438      	lsls	r0, r7, #16
    7112:	f100 81ba 	bmi.w	748a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    7116:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    711a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    711e:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0;
    7122:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    7124:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    7126:	bf08      	it	eq
    7128:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		if ((conn->llcp.conn_upd.interval !=
    712c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    7130:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    7132:	429a      	cmp	r2, r3
    7134:	d114      	bne.n	7160 <event_connection_prepare+0x1c8>
		     conn->conn_interval) ||
    7136:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    713a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    713c:	4299      	cmp	r1, r3
    713e:	d10f      	bne.n	7160 <event_connection_prepare+0x1c8>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    7140:	f240 43e2 	movw	r3, #1250	; 0x4e2
    7144:	435a      	muls	r2, r3
    7146:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    714a:	f242 7110 	movw	r1, #10000	; 0x2710
    714e:	fb01 2303 	mla	r3, r1, r3, r2
    7152:	3b01      	subs	r3, #1
    7154:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7158:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    715a:	b29b      	uxth	r3, r3
    715c:	429a      	cmp	r2, r3
    715e:	d038      	beq.n	71d2 <event_connection_prepare+0x23a>
			node_rx = packet_rx_reserve_get(2);
    7160:	2002      	movs	r0, #2
    7162:	f7fd ff55 	bl	5010 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7166:	bb18      	cbnz	r0, 71b0 <event_connection_prepare+0x218>
    7168:	4b04      	ldr	r3, [pc, #16]	; (717c <event_connection_prepare+0x1e4>)
    716a:	9301      	str	r3, [sp, #4]
    716c:	9300      	str	r3, [sp, #0]
    716e:	4b0d      	ldr	r3, [pc, #52]	; (71a4 <event_connection_prepare+0x20c>)
		LL_ASSERT(node_rx);
    7170:	4a03      	ldr	r2, [pc, #12]	; (7180 <event_connection_prepare+0x1e8>)
    7172:	4905      	ldr	r1, [pc, #20]	; (7188 <event_connection_prepare+0x1f0>)
    7174:	480d      	ldr	r0, [pc, #52]	; (71ac <event_connection_prepare+0x214>)
    7176:	e71f      	b.n	6fb8 <event_connection_prepare+0x20>
    7178:	20000578 	.word	0x20000578
    717c:	0000cbb3 	.word	0x0000cbb3
    7180:	0000d49b 	.word	0x0000d49b
    7184:	0000df94 	.word	0x0000df94
    7188:	0000d4ea 	.word	0x0000d4ea
    718c:	0000e6d6 	.word	0x0000e6d6
    7190:	200006cc 	.word	0x200006cc
    7194:	20003340 	.word	0x20003340
    7198:	00005f79 	.word	0x00005f79
    719c:	0000df5d 	.word	0x0000df5d
    71a0:	0000e59b 	.word	0x0000e59b
    71a4:	0000df71 	.word	0x0000df71
    71a8:	0000d43a 	.word	0x0000d43a
    71ac:	0000e4c7 	.word	0x0000e4c7
			node_rx->hdr.handle = conn->handle;
    71b0:	8c23      	ldrh	r3, [r4, #32]
    71b2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    71b4:	2308      	movs	r3, #8
    71b6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    71b8:	2300      	movs	r3, #0
    71ba:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    71bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    71c0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    71c2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    71c6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    71c8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    71cc:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    71ce:	f7fe fa4b 	bl	5668 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    71d2:	6823      	ldr	r3, [r4, #0]
    71d4:	6866      	ldr	r6, [r4, #4]
    71d6:	2b00      	cmp	r3, #0
    71d8:	da09      	bge.n	71ee <event_connection_prepare+0x256>
			u32_t ticks_prepare_to_start =
    71da:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    71dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    71e0:	42b0      	cmp	r0, r6
    71e2:	bf2c      	ite	cs
    71e4:	4480      	addcs	r8, r0
    71e6:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    71e8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    71ea:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    71ee:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    71f0:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    71f4:	49c8      	ldr	r1, [pc, #800]	; (7518 <event_connection_prepare+0x580>)
		conn_interval_old = instant_latency * conn->conn_interval;
    71f6:	fb13 f307 	smulbb	r3, r3, r7
    71fa:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    71fc:	fbb3 f2fa 	udiv	r2, r3, sl
    7200:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    7204:	fb1a f009 	smulbb	r0, sl, r9
    7208:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    720a:	4283      	cmp	r3, r0
    720c:	f080 80a8 	bcs.w	7360 <event_connection_prepare+0x3c8>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7210:	1ac0      	subs	r0, r0, r3
    7212:	f240 1223 	movw	r2, #291	; 0x123
    7216:	4342      	muls	r2, r0
    7218:	17c3      	asrs	r3, r0, #31
    721a:	fb01 2303 	mla	r3, r1, r3, r2
    721e:	fba0 0101 	umull	r0, r1, r0, r1
    7222:	4419      	add	r1, r3
    7224:	a3ba      	add	r3, pc, #744	; (adr r3, 7510 <event_connection_prepare+0x578>)
    7226:	e9d3 2300 	ldrd	r2, r3, [r3]
    722a:	f7f8 fff3 	bl	214 <__aeabi_uldivmod>
    722e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7232:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7236:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    7238:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    723a:	f8df b31c 	ldr.w	fp, [pc, #796]	; 7558 <event_connection_prepare+0x5c0>
    723e:	1bdb      	subs	r3, r3, r7
    7240:	444b      	add	r3, r9
    7242:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    7244:	6823      	ldr	r3, [r4, #0]
    7246:	42b3      	cmp	r3, r6
    7248:	bf38      	it	cc
    724a:	4633      	movcc	r3, r6
    724c:	930d      	str	r3, [sp, #52]	; 0x34
		if (conn->role) {
    724e:	f994 301d 	ldrsb.w	r3, [r4, #29]
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7252:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7256:	2b00      	cmp	r3, #0
    7258:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    725a:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    725c:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    7260:	f280 808f 	bge.w	7382 <event_connection_prepare+0x3ea>
				conn->slave.window_widening_periodic_us *
    7264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7266:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7268:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    726c:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    7270:	4aaa      	ldr	r2, [pc, #680]	; (751c <event_connection_prepare+0x584>)
    7272:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7276:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    727a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    727e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7282:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7286:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7288:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    728a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    728e:	4ba4      	ldr	r3, [pc, #656]	; (7520 <event_connection_prepare+0x588>)
				conn->llcp.conn_upd.win_size * 1250;
    7290:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7294:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7298:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    729c:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    729e:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    72a2:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    72a4:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    72a6:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    72a8:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    72aa:	429f      	cmp	r7, r3
    72ac:	bf94      	ite	ls
    72ae:	6467      	strls	r7, [r4, #68]	; 0x44
    72b0:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    72b2:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    72b4:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    72b6:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    72b8:	fba0 010b 	umull	r0, r1, r0, fp
    72bc:	a394      	add	r3, pc, #592	; (adr r3, 7510 <event_connection_prepare+0x578>)
    72be:	e9d3 2300 	ldrd	r2, r3, [r3]
    72c2:	f7f8 ffa7 	bl	214 <__aeabi_uldivmod>
    72c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72c8:	1a1b      	subs	r3, r3, r0
    72ca:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    72cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    72ce:	fbb3 f0f8 	udiv	r0, r3, r8
    72d2:	fb08 f000 	mul.w	r0, r8, r0
    72d6:	a38e      	add	r3, pc, #568	; (adr r3, 7510 <event_connection_prepare+0x578>)
    72d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    72dc:	fba0 010b 	umull	r0, r1, r0, fp
    72e0:	f7f8 ff98 	bl	214 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    72e4:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    72e6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    72ea:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    72ee:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    72f0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    72f4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    72f8:	f242 7210 	movw	r2, #10000	; 0x2710
    72fc:	fb02 6303 	mla	r3, r2, r3, r6
    7300:	3b01      	subs	r3, #1
    7302:	fbb3 f3f6 	udiv	r3, r3, r6
    7306:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7308:	4b86      	ldr	r3, [pc, #536]	; (7524 <event_connection_prepare+0x58c>)
    730a:	4433      	add	r3, r6
    730c:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    7310:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7314:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    7316:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    731a:	bf08      	it	eq
    731c:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    731e:	2101      	movs	r1, #1
    7320:	2000      	movs	r0, #0
    7322:	f003 fd69 	bl	adf8 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7326:	2200      	movs	r2, #0
    7328:	2101      	movs	r1, #1
		mayfly_was_enabled =
    732a:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    732c:	4610      	mov	r0, r2
    732e:	f7fb ff43 	bl	31b8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7332:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7336:	f641 2385 	movw	r3, #6789	; 0x1a85
    733a:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    733c:	3207      	adds	r2, #7
		ticker_status =
    733e:	9300      	str	r3, [sp, #0]
    7340:	b2d2      	uxtb	r2, r2
    7342:	4b79      	ldr	r3, [pc, #484]	; (7528 <event_connection_prepare+0x590>)
    7344:	4608      	mov	r0, r1
    7346:	f7fc fdbb 	bl	3ec0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    734a:	f030 0802 	bics.w	r8, r0, #2
    734e:	d025      	beq.n	739c <event_connection_prepare+0x404>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7350:	4b76      	ldr	r3, [pc, #472]	; (752c <event_connection_prepare+0x594>)
    7352:	9301      	str	r3, [sp, #4]
    7354:	9300      	str	r3, [sp, #0]
    7356:	4a76      	ldr	r2, [pc, #472]	; (7530 <event_connection_prepare+0x598>)
    7358:	4b76      	ldr	r3, [pc, #472]	; (7534 <event_connection_prepare+0x59c>)
    735a:	4977      	ldr	r1, [pc, #476]	; (7538 <event_connection_prepare+0x5a0>)
    735c:	4877      	ldr	r0, [pc, #476]	; (753c <event_connection_prepare+0x5a4>)
    735e:	e62b      	b.n	6fb8 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7360:	fb0a 3212 	mls	r2, sl, r2, r3
    7364:	b292      	uxth	r2, r2
    7366:	fba2 0101 	umull	r0, r1, r2, r1
    736a:	f240 1323 	movw	r3, #291	; 0x123
    736e:	fb03 1102 	mla	r1, r3, r2, r1
    7372:	a367      	add	r3, pc, #412	; (adr r3, 7510 <event_connection_prepare+0x578>)
    7374:	e9d3 2300 	ldrd	r2, r3, [r3]
    7378:	f7f8 ff4c 	bl	214 <__aeabi_uldivmod>
    737c:	eba8 0300 	sub.w	r3, r8, r0
    7380:	e759      	b.n	7236 <event_connection_prepare+0x29e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7382:	990c      	ldr	r1, [sp, #48]	; 0x30
    7384:	a362      	add	r3, pc, #392	; (adr r3, 7510 <event_connection_prepare+0x578>)
    7386:	e9d3 2300 	ldrd	r2, r3, [r3]
    738a:	fba1 010b 	umull	r0, r1, r1, fp
    738e:	f7f8 ff41 	bl	214 <__aeabi_uldivmod>
    7392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7396:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7398:	4635      	mov	r5, r6
    739a:	e7a6      	b.n	72ea <event_connection_prepare+0x352>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    739c:	fba5 ab0b 	umull	sl, fp, r5, fp
    73a0:	a35b      	add	r3, pc, #364	; (adr r3, 7510 <event_connection_prepare+0x578>)
    73a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    73a6:	4650      	mov	r0, sl
    73a8:	4659      	mov	r1, fp
    73aa:	f7f8 ff33 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    73ae:	4a64      	ldr	r2, [pc, #400]	; (7540 <event_connection_prepare+0x5a8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    73b0:	f894 6020 	ldrb.w	r6, [r4, #32]
    73b4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    73b8:	2307      	movs	r3, #7
    73ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    73be:	2100      	movs	r1, #0
    73c0:	4343      	muls	r3, r0
    73c2:	fb02 3301 	mla	r3, r2, r1, r3
    73c6:	fba0 0102 	umull	r0, r1, r0, r2
    73ca:	ebba 0000 	subs.w	r0, sl, r0
    73ce:	4419      	add	r1, r3
    73d0:	eb6b 0101 	sbc.w	r1, fp, r1
    73d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73d8:	2300      	movs	r3, #0
    73da:	f7f8 ff1b 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    73de:	68e3      	ldr	r3, [r4, #12]
    73e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    73e2:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    73e6:	4957      	ldr	r1, [pc, #348]	; (7544 <event_connection_prepare+0x5ac>)
		ticker_status =
    73e8:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    73ea:	441a      	add	r2, r3
    73ec:	4613      	mov	r3, r2
    73ee:	4a56      	ldr	r2, [pc, #344]	; (7548 <event_connection_prepare+0x5b0>)
		ticker_status =
    73f0:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    73f2:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    73f6:	bf38      	it	cc
    73f8:	460a      	movcc	r2, r1
    73fa:	3607      	adds	r6, #7
		ticker_status =
    73fc:	f641 2195 	movw	r1, #6805	; 0x1a95
    7400:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7402:	b2f6      	uxtb	r6, r6
		ticker_status =
    7404:	4948      	ldr	r1, [pc, #288]	; (7528 <event_connection_prepare+0x590>)
    7406:	9107      	str	r1, [sp, #28]
    7408:	9205      	str	r2, [sp, #20]
    740a:	9406      	str	r4, [sp, #24]
    740c:	f8cd 800c 	str.w	r8, [sp, #12]
    7410:	9501      	str	r5, [sp, #4]
    7412:	9700      	str	r7, [sp, #0]
    7414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7416:	4632      	mov	r2, r6
    7418:	4641      	mov	r1, r8
    741a:	4640      	mov	r0, r8
    741c:	f7fc fcb2 	bl	3d84 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7420:	f030 0002 	bics.w	r0, r0, #2
    7424:	d194      	bne.n	7350 <event_connection_prepare+0x3b8>
		if (mayfly_was_enabled) {
    7426:	f1b9 0f00 	cmp.w	r9, #0
    742a:	d06b      	beq.n	7504 <event_connection_prepare+0x56c>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    742c:	2201      	movs	r2, #1
    742e:	4611      	mov	r1, r2
}
    7430:	b00f      	add	sp, #60	; 0x3c
    7432:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7436:	f7fb bebf 	b.w	31b8 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    743a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    743e:	2b00      	cmp	r3, #0
    7440:	f000 808c 	beq.w	755c <event_connection_prepare+0x5c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7444:	4841      	ldr	r0, [pc, #260]	; (754c <event_connection_prepare+0x5b4>)
    7446:	f7fb fe26 	bl	3096 <mem_acquire>
		if (node_tx) {
    744a:	4605      	mov	r5, r0
    744c:	b1e8      	cbz	r0, 748a <event_connection_prepare+0x4f2>
			conn->llcp.chan_map.initiate = 0;
    744e:	2300      	movs	r3, #0
    7450:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    7454:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7456:	3306      	adds	r3, #6
    7458:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    745a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    745e:	7903      	ldrb	r3, [r0, #4]
    7460:	f043 0303 	orr.w	r3, r3, #3
    7464:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7466:	2308      	movs	r3, #8
    7468:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    746a:	2301      	movs	r3, #1
    746c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    746e:	2205      	movs	r2, #5
    7470:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7474:	3008      	adds	r0, #8
    7476:	f7fa fb29 	bl	1acc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    747a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    747e:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    7482:	4629      	mov	r1, r5
    7484:	4620      	mov	r0, r4
    7486:	f7ff fcf7 	bl	6e78 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    748a:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    748e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7492:	429a      	cmp	r2, r3
    7494:	d01d      	beq.n	74d2 <event_connection_prepare+0x53a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7496:	2005      	movs	r0, #5
    7498:	f7ff fa30 	bl	68fc <event_stop.constprop.46>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    749c:	482b      	ldr	r0, [pc, #172]	; (754c <event_connection_prepare+0x5b4>)
    749e:	f7fb fdfa 	bl	3096 <mem_acquire>
		if (node_tx) {
    74a2:	4601      	mov	r1, r0
    74a4:	b1a8      	cbz	r0, 74d2 <event_connection_prepare+0x53a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    74a6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    74aa:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    74ae:	7903      	ldrb	r3, [r0, #4]
    74b0:	f043 0303 	orr.w	r3, r3, #3
    74b4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    74b6:	2302      	movs	r3, #2
    74b8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    74ba:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    74bc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    74c0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    74c2:	4620      	mov	r0, r4
    74c4:	f7ff fcd8 	bl	6e78 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    74c8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    74ca:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    74cc:	bf98      	it	ls
    74ce:	3301      	addls	r3, #1
    74d0:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    74d2:	f894 3020 	ldrb.w	r3, [r4, #32]
    74d6:	f994 501d 	ldrsb.w	r5, [r4, #29]
    74da:	481d      	ldr	r0, [pc, #116]	; (7550 <event_connection_prepare+0x5b8>)
    74dc:	491d      	ldr	r1, [pc, #116]	; (7554 <event_connection_prepare+0x5bc>)
    74de:	68a2      	ldr	r2, [r4, #8]
    74e0:	9403      	str	r4, [sp, #12]
    74e2:	3307      	adds	r3, #7
    74e4:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    74e8:	bf38      	it	cc
    74ea:	4601      	movcc	r1, r0
    74ec:	b2db      	uxtb	r3, r3
    74ee:	e88d 000c 	stmia.w	sp, {r2, r3}
    74f2:	9102      	str	r1, [sp, #8]
    74f4:	1d23      	adds	r3, r4, #4
    74f6:	4622      	mov	r2, r4
    74f8:	4649      	mov	r1, r9
    74fa:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    74fc:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    74fe:	f7ff fa0b 	bl	6918 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    7502:	8466      	strh	r6, [r4, #34]	; 0x22
}
    7504:	b00f      	add	sp, #60	; 0x3c
    7506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    750a:	bf00      	nop
    750c:	f3af 8000 	nop.w
    7510:	1afd498d 	.word	0x1afd498d
    7514:	00000007 	.word	0x00000007
    7518:	09ce5400 	.word	0x09ce5400
    751c:	0000e206 	.word	0x0000e206
    7520:	000f4240 	.word	0x000f4240
    7524:	026259ff 	.word	0x026259ff
    7528:	00005735 	.word	0x00005735
    752c:	0000cbb3 	.word	0x0000cbb3
    7530:	0000d49b 	.word	0x0000d49b
    7534:	0000df71 	.word	0x0000df71
    7538:	0000d4ea 	.word	0x0000d4ea
    753c:	0000e075 	.word	0x0000e075
    7540:	1afd498d 	.word	0x1afd498d
    7544:	000076bd 	.word	0x000076bd
    7548:	000076c1 	.word	0x000076c1
    754c:	200006cc 	.word	0x200006cc
    7550:	0000907d 	.word	0x0000907d
    7554:	00007701 	.word	0x00007701
    7558:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    755c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7560:	1af3      	subs	r3, r6, r3
    7562:	0419      	lsls	r1, r3, #16
    7564:	d491      	bmi.n	748a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    7566:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    756a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    756e:	f104 0517 	add.w	r5, r4, #23
    7572:	2205      	movs	r2, #5
    7574:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7578:	4628      	mov	r0, r5
    757a:	f7fa faa7 	bl	1acc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    757e:	2105      	movs	r1, #5
    7580:	4628      	mov	r0, r5
    7582:	f7fb ff21 	bl	33c8 <util_ones_count_get>
		conn->data_chan_count =
    7586:	7f63      	ldrb	r3, [r4, #29]
    7588:	f360 0305 	bfi	r3, r0, #0, #6
    758c:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    758e:	2301      	movs	r3, #1
    7590:	7723      	strb	r3, [r4, #28]
    7592:	e77a      	b.n	748a <event_connection_prepare+0x4f2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7594:	4844      	ldr	r0, [pc, #272]	; (76a8 <event_connection_prepare+0x710>)
    7596:	f7fb fd7e 	bl	3096 <mem_acquire>
	if (node_tx) {
    759a:	4605      	mov	r5, r0
    759c:	2800      	cmp	r0, #0
    759e:	f43f af74 	beq.w	748a <event_connection_prepare+0x4f2>
		conn->llcp_ack = conn->llcp_req;
    75a2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    75a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    75aa:	4b40      	ldr	r3, [pc, #256]	; (76ac <event_connection_prepare+0x714>)
    75ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    75b0:	7903      	ldrb	r3, [r0, #4]
    75b2:	f043 0303 	orr.w	r3, r3, #3
    75b6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    75b8:	2309      	movs	r3, #9
    75ba:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    75bc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    75c0:	2b00      	cmp	r3, #0
    75c2:	bfac      	ite	ge
    75c4:	2308      	movge	r3, #8
    75c6:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    75c8:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    75ca:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    75cc:	2100      	movs	r1, #0
    75ce:	4410      	add	r0, r2
    75d0:	f7fa faa8 	bl	1b24 <memset>
			conn->llcp_features & 0xFF;
    75d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    75d8:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    75da:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    75dc:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    75de:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    75e0:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    75e2:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    75e4:	4620      	mov	r0, r4
    75e6:	f7ff fc47 	bl	6e78 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    75ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    75ec:	86a3      	strh	r3, [r4, #52]	; 0x34
    75ee:	e74c      	b.n	748a <event_connection_prepare+0x4f2>
	if (conn->llcp_version.tx == 0) {
    75f0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    75f4:	07da      	lsls	r2, r3, #31
    75f6:	d424      	bmi.n	7642 <event_connection_prepare+0x6aa>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    75f8:	482b      	ldr	r0, [pc, #172]	; (76a8 <event_connection_prepare+0x710>)
    75fa:	f7fb fd4c 	bl	3096 <mem_acquire>
		if (node_tx) {
    75fe:	4601      	mov	r1, r0
    7600:	2800      	cmp	r0, #0
    7602:	f43f af42 	beq.w	748a <event_connection_prepare+0x4f2>
			conn->llcp_ack = conn->llcp_req;
    7606:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    760a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    760e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7612:	f043 0301 	orr.w	r3, r3, #1
    7616:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    761a:	7903      	ldrb	r3, [r0, #4]
    761c:	f043 0303 	orr.w	r3, r3, #3
    7620:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7622:	2306      	movs	r3, #6
    7624:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7626:	230c      	movs	r3, #12
    7628:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    762a:	2309      	movs	r3, #9
    762c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    762e:	f06f 030e 	mvn.w	r3, #14
    7632:	7243      	strb	r3, [r0, #9]
    7634:	2305      	movs	r3, #5
    7636:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    763c:	72c3      	strb	r3, [r0, #11]
    763e:	7303      	strb	r3, [r0, #12]
    7640:	e7d0      	b.n	75e4 <event_connection_prepare+0x64c>
	} else if (conn->llcp_version.rx != 0) {
    7642:	079b      	lsls	r3, r3, #30
    7644:	d526      	bpl.n	7694 <event_connection_prepare+0x6fc>
		conn->llcp_ack = conn->llcp_req;
    7646:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    764a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    764e:	2002      	movs	r0, #2
    7650:	f7fd fcde 	bl	5010 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7654:	b920      	cbnz	r0, 7660 <event_connection_prepare+0x6c8>
    7656:	4b16      	ldr	r3, [pc, #88]	; (76b0 <event_connection_prepare+0x718>)
    7658:	9301      	str	r3, [sp, #4]
    765a:	9300      	str	r3, [sp, #0]
    765c:	4b15      	ldr	r3, [pc, #84]	; (76b4 <event_connection_prepare+0x71c>)
    765e:	e587      	b.n	7170 <event_connection_prepare+0x1d8>
		node_rx->hdr.handle = conn->handle;
    7660:	8c23      	ldrh	r3, [r4, #32]
    7662:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7664:	2301      	movs	r3, #1
    7666:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7668:	7a03      	ldrb	r3, [r0, #8]
    766a:	f043 0303 	orr.w	r3, r3, #3
    766e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7670:	2306      	movs	r3, #6
    7672:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7674:	230c      	movs	r3, #12
    7676:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7678:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    767c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    767e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    7682:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7686:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    768a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    768e:	f7fd ffeb 	bl	5668 <packet_rx_enqueue>
    7692:	e6fa      	b.n	748a <event_connection_prepare+0x4f2>
		LL_ASSERT(0);
    7694:	4b06      	ldr	r3, [pc, #24]	; (76b0 <event_connection_prepare+0x718>)
    7696:	9301      	str	r3, [sp, #4]
    7698:	9300      	str	r3, [sp, #0]
    769a:	4b06      	ldr	r3, [pc, #24]	; (76b4 <event_connection_prepare+0x71c>)
    769c:	e530      	b.n	7100 <event_connection_prepare+0x168>
			LL_ASSERT(0);
    769e:	4b04      	ldr	r3, [pc, #16]	; (76b0 <event_connection_prepare+0x718>)
    76a0:	9301      	str	r3, [sp, #4]
    76a2:	9300      	str	r3, [sp, #0]
    76a4:	4b04      	ldr	r3, [pc, #16]	; (76b8 <event_connection_prepare+0x720>)
    76a6:	e52b      	b.n	7100 <event_connection_prepare+0x168>
    76a8:	200006cc 	.word	0x200006cc
    76ac:	0001400c 	.word	0x0001400c
    76b0:	0000cbb3 	.word	0x0000cbb3
    76b4:	0000df85 	.word	0x0000df85
    76b8:	0000df94 	.word	0x0000df94

000076bc <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    76bc:	f7ff bc6c 	b.w	6f98 <event_connection_prepare>

000076c0 <event_slave_prepare>:
    76c0:	f7ff bc6a 	b.w	6f98 <event_connection_prepare>

000076c4 <connection_configure>:
{
    76c4:	b510      	push	{r4, lr}
    76c6:	4604      	mov	r4, r0
	radio_reset();
    76c8:	f003 f826 	bl	a718 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    76cc:	2000      	movs	r0, #0
    76ce:	f003 f84d 	bl	a76c <radio_tx_power_set>
	radio_isr_set(isr);
    76d2:	480a      	ldr	r0, [pc, #40]	; (76fc <connection_configure+0x38>)
    76d4:	f002 ffea 	bl	a6ac <radio_isr_set>
	radio_aa_set(conn->access_addr);
    76d8:	f104 0010 	add.w	r0, r4, #16
    76dc:	f003 f864 	bl	a7a8 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    76e0:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    76e2:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    76e4:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    76e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    76ea:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    76ec:	f240 605b 	movw	r0, #1627	; 0x65b
    76f0:	4319      	orrs	r1, r3
}
    76f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    76f6:	f003 b8ff 	b.w	a8f8 <radio_crc_configure>
    76fa:	bf00      	nop
    76fc:	00007991 	.word	0x00007991

00007700 <event_slave>:
{
    7700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7704:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7706:	4b66      	ldr	r3, [pc, #408]	; (78a0 <event_slave+0x1a0>)
    7708:	7cda      	ldrb	r2, [r3, #19]
{
    770a:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    770c:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7710:	461d      	mov	r5, r3
    7712:	b172      	cbz	r2, 7732 <event_slave+0x32>
    7714:	4b63      	ldr	r3, [pc, #396]	; (78a4 <event_slave+0x1a4>)
    7716:	9301      	str	r3, [sp, #4]
    7718:	9300      	str	r3, [sp, #0]
    771a:	4a63      	ldr	r2, [pc, #396]	; (78a8 <event_slave+0x1a8>)
    771c:	4b63      	ldr	r3, [pc, #396]	; (78ac <event_slave+0x1ac>)
    771e:	4964      	ldr	r1, [pc, #400]	; (78b0 <event_slave+0x1b0>)
    7720:	4864      	ldr	r0, [pc, #400]	; (78b4 <event_slave+0x1b4>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    7722:	f7f9 fba3 	bl	e6c <printk>
    7726:	4040      	eors	r0, r0
    7728:	f380 8811 	msr	BASEPRI, r0
    772c:	f04f 0004 	mov.w	r0, #4
    7730:	df02      	svc	2
    7732:	7c1a      	ldrb	r2, [r3, #16]
    7734:	8c23      	ldrh	r3, [r4, #32]
    7736:	b2d2      	uxtb	r2, r2
    7738:	3307      	adds	r3, #7
    773a:	429a      	cmp	r2, r3
    773c:	d007      	beq.n	774e <event_slave+0x4e>
    773e:	4b59      	ldr	r3, [pc, #356]	; (78a4 <event_slave+0x1a4>)
    7740:	9301      	str	r3, [sp, #4]
    7742:	9300      	str	r3, [sp, #0]
    7744:	4a58      	ldr	r2, [pc, #352]	; (78a8 <event_slave+0x1a8>)
    7746:	4b59      	ldr	r3, [pc, #356]	; (78ac <event_slave+0x1ac>)
    7748:	4959      	ldr	r1, [pc, #356]	; (78b0 <event_slave+0x1b0>)
    774a:	485b      	ldr	r0, [pc, #364]	; (78b8 <event_slave+0x1b8>)
    774c:	e7e9      	b.n	7722 <event_slave+0x22>
	_radio.role = ROLE_SLAVE;
    774e:	2303      	movs	r3, #3
    7750:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    7752:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    7756:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	_radio.state = STATE_RX;
    775a:	2301      	movs	r3, #1
    775c:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    775e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7760:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7764:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    7766:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    7768:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    776a:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    776c:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    776e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7770:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    7772:	f7ff ffa7 	bl	76c4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7776:	2096      	movs	r0, #150	; 0x96
    7778:	f003 f96c 	bl	aa54 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    777c:	4633      	mov	r3, r6
    777e:	4632      	mov	r2, r6
    7780:	4631      	mov	r1, r6
    7782:	4630      	mov	r0, r6
    7784:	f003 f8e2 	bl	a94c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7788:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
    778c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    7790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    7794:	4620      	mov	r0, r4
    7796:	3108      	adds	r1, #8
    7798:	f7fe f9a6 	bl	5ae8 <rx_packet_set>
	if (conn->data_chan_sel) {
    779c:	7f63      	ldrb	r3, [r4, #29]
    779e:	f013 0f40 	tst.w	r3, #64	; 0x40
    77a2:	f104 0217 	add.w	r2, r4, #23
    77a6:	d04b      	beq.n	7840 <event_slave+0x140>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    77a8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    77aa:	8be1      	ldrh	r1, [r4, #30]
    77ac:	3801      	subs	r0, #1
    77ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77b2:	b280      	uxth	r0, r0
    77b4:	f7ff fb1c 	bl	6df0 <chan_sel_2>
	chan_set(data_chan_use);
    77b8:	f7fe fafe 	bl	5db8 <chan_set>
	conn->slave.window_widening_event_us +=
    77bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    77be:	6c62      	ldr	r2, [r4, #68]	; 0x44
    77c0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    77c2:	2200      	movs	r2, #0
    77c4:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    77c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    77c8:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    77ca:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    77cc:	bf88      	it	hi
    77ce:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    77d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    77d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    77d4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    77d6:	4413      	add	r3, r2
    77d8:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    77da:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    77dc:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    77de:	f107 0109 	add.w	r1, r7, #9
    77e2:	4630      	mov	r0, r6
    77e4:	f003 f942 	bl	aa6c <radio_tmr_start>
    77e8:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    77ea:	f003 f9db 	bl	aba4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    77ee:	4630      	mov	r0, r6
    77f0:	f003 f9fa 	bl	abe8 <radio_tmr_aa_save>
    77f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    77f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    77f8:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    77fa:	4631      	mov	r1, r6
    77fc:	4630      	mov	r0, r6
    77fe:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    7802:	f003 f82a 	bl	a85a <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    7806:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    7808:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    780a:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    780c:	4630      	mov	r0, r6
    780e:	f003 f826 	bl	a85e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    7812:	4440      	add	r0, r8
    7814:	f003 f9a8 	bl	ab68 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7818:	f894 1020 	ldrb.w	r1, [r4, #32]
    781c:	3107      	adds	r1, #7
    781e:	463a      	mov	r2, r7
    7820:	b2c9      	uxtb	r1, r1
    7822:	4620      	mov	r0, r4
    7824:	f7fe fed8 	bl	65d8 <preempt_calc>
    7828:	4603      	mov	r3, r0
    782a:	b348      	cbz	r0, 7880 <event_slave+0x180>
		_radio.state = STATE_STOP;
    782c:	2304      	movs	r3, #4
    782e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    7830:	f003 f826 	bl	a880 <radio_disable>
	packet_tx_enqueue(2);
    7834:	2002      	movs	r0, #2
}
    7836:	b003      	add	sp, #12
    7838:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    783c:	f7fe b9b2 	b.w	5ba4 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7840:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    7842:	7fa6      	ldrb	r6, [r4, #30]
    7844:	fb01 6606 	mla	r6, r1, r6, r6
    7848:	7fe1      	ldrb	r1, [r4, #31]
    784a:	2025      	movs	r0, #37	; 0x25
    784c:	440e      	add	r6, r1
    784e:	fb96 f1f0 	sdiv	r1, r6, r0
    7852:	fb00 6611 	mls	r6, r0, r1, r6
    7856:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7858:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    785a:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    785c:	5c51      	ldrb	r1, [r2, r1]
    785e:	f006 0607 	and.w	r6, r6, #7
    7862:	fa41 f606 	asr.w	r6, r1, r6
    7866:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    7868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    786c:	d4a4      	bmi.n	77b8 <event_slave+0xb8>
		chan_index = chan_next % chan_count;
    786e:	fbb0 f1f3 	udiv	r1, r0, r3
    7872:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    7876:	b2c9      	uxtb	r1, r1
    7878:	4610      	mov	r0, r2
    787a:	f7fd fbad 	bl	4fd8 <chan_sel_remap>
    787e:	e79b      	b.n	77b8 <event_slave+0xb8>
		ticker_status =
    7880:	4a0e      	ldr	r2, [pc, #56]	; (78bc <event_slave+0x1bc>)
    7882:	4601      	mov	r1, r0
    7884:	f7fc fb9a 	bl	3fbc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7888:	f030 0302 	bics.w	r3, r0, #2
    788c:	d0d2      	beq.n	7834 <event_slave+0x134>
    788e:	4b05      	ldr	r3, [pc, #20]	; (78a4 <event_slave+0x1a4>)
    7890:	9301      	str	r3, [sp, #4]
    7892:	9300      	str	r3, [sp, #0]
    7894:	4a04      	ldr	r2, [pc, #16]	; (78a8 <event_slave+0x1a8>)
    7896:	4b05      	ldr	r3, [pc, #20]	; (78ac <event_slave+0x1ac>)
    7898:	4905      	ldr	r1, [pc, #20]	; (78b0 <event_slave+0x1b0>)
    789a:	4809      	ldr	r0, [pc, #36]	; (78c0 <event_slave+0x1c0>)
    789c:	e741      	b.n	7722 <event_slave+0x22>
    789e:	bf00      	nop
    78a0:	20000578 	.word	0x20000578
    78a4:	0000cbb3 	.word	0x0000cbb3
    78a8:	0000d49b 	.word	0x0000d49b
    78ac:	0000dfad 	.word	0x0000dfad
    78b0:	0000d4ea 	.word	0x0000d4ea
    78b4:	0000e102 	.word	0x0000e102
    78b8:	0000e1b5 	.word	0x0000e1b5
    78bc:	000058d5 	.word	0x000058d5
    78c0:	0000e075 	.word	0x0000e075

000078c4 <prepare_pdu_data_tx>:
{
    78c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    78c6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    78ca:	061a      	lsls	r2, r3, #24
{
    78cc:	4604      	mov	r4, r0
    78ce:	460f      	mov	r7, r1
	if (/* empty packet */
    78d0:	d409      	bmi.n	78e6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    78d2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    78d6:	b135      	cbz	r5, 78e6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    78d8:	f013 0f08 	tst.w	r3, #8
    78dc:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    78e0:	d022      	beq.n	7928 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    78e2:	4575      	cmp	r5, lr
    78e4:	d020      	beq.n	7928 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    78e6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    78ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    78ee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    78f2:	f003 f817 	bl	a924 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    78f6:	7803      	ldrb	r3, [r0, #0]
    78f8:	2201      	movs	r2, #1
    78fa:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    78fe:	2200      	movs	r2, #0
    7900:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    7902:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7906:	7003      	strb	r3, [r0, #0]
    7908:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    790a:	b152      	cbz	r2, 7922 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    790c:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    7910:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    7912:	7803      	ldrb	r3, [r0, #0]
    7914:	f36f 1347 	bfc	r3, #5, #3
    7918:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    791a:	2300      	movs	r3, #0
    791c:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    791e:	6038      	str	r0, [r7, #0]
    7920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    7922:	f362 1304 	bfi	r3, r2, #4, #1
    7926:	e7f3      	b.n	7910 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    7928:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    792c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    7930:	1d2a      	adds	r2, r5, #4
    7932:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    7934:	b911      	cbnz	r1, 793c <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    7936:	7841      	ldrb	r1, [r0, #1]
    7938:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    793c:	b123      	cbz	r3, 7948 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    793e:	5cd1      	ldrb	r1, [r2, r3]
    7940:	2601      	movs	r6, #1
    7942:	f366 0101 	bfi	r1, r6, #0, #2
    7946:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    7948:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    794c:	1af6      	subs	r6, r6, r3
    794e:	b2f6      	uxtb	r6, r6
    7950:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    7952:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    7954:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    7956:	f36f 1104 	bfc	r1, #4, #1
    795a:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    795c:	d905      	bls.n	796a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    795e:	211b      	movs	r1, #27
    7960:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    7962:	5cd1      	ldrb	r1, [r2, r3]
    7964:	f041 0110 	orr.w	r1, r1, #16
    7968:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    796a:	6829      	ldr	r1, [r5, #0]
    796c:	b119      	cbz	r1, 7976 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    796e:	5cd1      	ldrb	r1, [r2, r3]
    7970:	f041 0110 	orr.w	r1, r1, #16
    7974:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    7976:	f1be 0f00 	cmp.w	lr, #0
    797a:	d1ca      	bne.n	7912 <prepare_pdu_data_tx+0x4e>
    797c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    7980:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    7982:	bf1c      	itt	ne
    7984:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    7988:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    798c:	e7c1      	b.n	7912 <prepare_pdu_data_tx+0x4e>
	...

00007990 <isr>:
{
    7990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7994:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    7996:	f002 ff9b 	bl	a8d0 <radio_is_done>
    799a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    799c:	b336      	cbz	r6, 79ec <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    799e:	f002 ffb7 	bl	a910 <radio_crc_is_valid>
    79a2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    79a4:	f003 f838 	bl	aa18 <radio_filter_has_match>
    79a8:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    79aa:	f003 f83f 	bl	aa2c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    79ae:	f003 f9e7 	bl	ad80 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    79b2:	f003 f9d3 	bl	ad5c <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    79b6:	f002 fff9 	bl	a9ac <radio_rssi_is_ready>
    79ba:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    79bc:	f002 ff72 	bl	a8a4 <radio_status_reset>
	radio_tmr_status_reset();
    79c0:	f003 f83a 	bl	aa38 <radio_tmr_status_reset>
	radio_filter_status_reset();
    79c4:	f003 f820 	bl	aa08 <radio_filter_status_reset>
	radio_ar_status_reset();
    79c8:	f003 f9ce 	bl	ad68 <radio_ar_status_reset>
	radio_rssi_status_reset();
    79cc:	f002 ffe6 	bl	a99c <radio_rssi_status_reset>
	switch (_radio.state) {
    79d0:	4874      	ldr	r0, [pc, #464]	; (7ba4 <isr+0x214>)
    79d2:	7d03      	ldrb	r3, [r0, #20]
    79d4:	4683      	mov	fp, r0
    79d6:	2b05      	cmp	r3, #5
    79d8:	f201 8327 	bhi.w	902a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102a>
    79dc:	e8df f013 	tbh	[pc, r3, lsl #1]
    79e0:	00910061 	.word	0x00910061
    79e4:	094a000a 	.word	0x094a000a
    79e8:	094a094a 	.word	0x094a094a
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    79ec:	4635      	mov	r5, r6
    79ee:	4634      	mov	r4, r6
    79f0:	4637      	mov	r7, r6
    79f2:	e7e3      	b.n	79bc <isr+0x2c>
	_radio.state = STATE_RX;
    79f4:	2301      	movs	r3, #1
    79f6:	7503      	strb	r3, [r0, #20]
	hcto = radio_tmr_tifs_base_get()
    79f8:	f003 f920 	bl	ac3c <radio_tmr_tifs_base_get>
    79fc:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    79fe:	2096      	movs	r0, #150	; 0x96
    7a00:	f003 f828 	bl	aa54 <radio_tmr_tifs_set>
	switch (_radio.role) {
    7a04:	f89b 3013 	ldrb.w	r3, [fp, #19]
    7a08:	3b01      	subs	r3, #1
    7a0a:	34c3      	adds	r4, #195	; 0xc3
    7a0c:	2b03      	cmp	r3, #3
    7a0e:	d870      	bhi.n	7af2 <isr+0x162>
    7a10:	e8df f003 	tbb	[pc, r3]
    7a14:	4a4a2602 	.word	0x4a4a2602
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7a18:	2300      	movs	r3, #0
    7a1a:	461a      	mov	r2, r3
    7a1c:	4619      	mov	r1, r3
    7a1e:	4618      	mov	r0, r3
    7a20:	f002 ff94 	bl	a94c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    7a24:	f002 ff82 	bl	a92c <radio_pkt_scratch_get>
    7a28:	f002 ff04 	bl	a834 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    7a2c:	f002 ff46 	bl	a8bc <radio_is_ready>
    7a30:	4605      	mov	r5, r0
    7a32:	b138      	cbz	r0, 7a44 <isr+0xb4>
		LL_ASSERT(!radio_is_ready());
    7a34:	4b5c      	ldr	r3, [pc, #368]	; (7ba8 <isr+0x218>)
    7a36:	9301      	str	r3, [sp, #4]
    7a38:	9300      	str	r3, [sp, #0]
    7a3a:	4b5c      	ldr	r3, [pc, #368]	; (7bac <isr+0x21c>)
	LL_ASSERT(!radio_is_ready());
    7a3c:	4a5c      	ldr	r2, [pc, #368]	; (7bb0 <isr+0x220>)
    7a3e:	495d      	ldr	r1, [pc, #372]	; (7bb4 <isr+0x224>)
    7a40:	485d      	ldr	r0, [pc, #372]	; (7bb8 <isr+0x228>)
    7a42:	e185      	b.n	7d50 <isr+0x3c0>
		hcto += radio_rx_chain_delay_get(0, 0);
    7a44:	4601      	mov	r1, r0
    7a46:	f002 ff0a 	bl	a85e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7a4a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    7a4c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7a4e:	4628      	mov	r0, r5
    7a50:	f002 ff01 	bl	a856 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    7a54:	1a20      	subs	r0, r4, r0
    7a56:	f003 f887 	bl	ab68 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    7a5a:	f003 f8d7 	bl	ac0c <radio_tmr_end_capture>
    7a5e:	e020      	b.n	7aa2 <isr+0x112>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7a60:	2300      	movs	r3, #0
    7a62:	4619      	mov	r1, r3
    7a64:	461a      	mov	r2, r3
    7a66:	4618      	mov	r0, r3
    7a68:	f002 ff70 	bl	a94c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    7a6c:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    7a70:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    7a74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7a78:	3008      	adds	r0, #8
    7a7a:	f002 fedb 	bl	a834 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    7a7e:	f002 ff1d 	bl	a8bc <radio_is_ready>
    7a82:	4605      	mov	r5, r0
    7a84:	2800      	cmp	r0, #0
    7a86:	d1d5      	bne.n	7a34 <isr+0xa4>
		hcto += radio_rx_chain_delay_get(0, 0);
    7a88:	4601      	mov	r1, r0
    7a8a:	f002 fee8 	bl	a85e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7a8e:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    7a90:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7a92:	4628      	mov	r0, r5
    7a94:	f002 fedf 	bl	a856 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    7a98:	1a20      	subs	r0, r4, r0
    7a9a:	f003 f865 	bl	ab68 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    7a9e:	f002 ff6d 	bl	a97c <radio_rssi_measure>
}
    7aa2:	b00f      	add	sp, #60	; 0x3c
    7aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7aa8:	2300      	movs	r3, #0
    7aaa:	461a      	mov	r2, r3
    7aac:	4619      	mov	r1, r3
    7aae:	4618      	mov	r0, r3
    7ab0:	f002 ff4c 	bl	a94c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7ab4:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    7ab8:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
    7abc:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    7ac4:	3108      	adds	r1, #8
    7ac6:	f7fe f80f 	bl	5ae8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    7aca:	f002 fef7 	bl	a8bc <radio_is_ready>
    7ace:	4605      	mov	r5, r0
    7ad0:	2800      	cmp	r0, #0
    7ad2:	d1af      	bne.n	7a34 <isr+0xa4>
		hcto += radio_rx_chain_delay_get(0, 0);
    7ad4:	4601      	mov	r1, r0
    7ad6:	f002 fec2 	bl	a85e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7ada:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    7adc:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7ade:	4628      	mov	r0, r5
    7ae0:	f002 feb9 	bl	a856 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    7ae4:	1a20      	subs	r0, r4, r0
    7ae6:	f003 f83f 	bl	ab68 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    7aea:	2001      	movs	r0, #1
    7aec:	f7fe f85a 	bl	5ba4 <packet_tx_enqueue>
    7af0:	e7d7      	b.n	7aa2 <isr+0x112>
		LL_ASSERT(0);
    7af2:	4b2d      	ldr	r3, [pc, #180]	; (7ba8 <isr+0x218>)
    7af4:	9301      	str	r3, [sp, #4]
    7af6:	9300      	str	r3, [sp, #0]
    7af8:	4b2c      	ldr	r3, [pc, #176]	; (7bac <isr+0x21c>)
		LL_ASSERT(0);
    7afa:	4a2d      	ldr	r2, [pc, #180]	; (7bb0 <isr+0x220>)
    7afc:	492d      	ldr	r1, [pc, #180]	; (7bb4 <isr+0x224>)
    7afe:	482f      	ldr	r0, [pc, #188]	; (7bbc <isr+0x22c>)
    7b00:	e126      	b.n	7d50 <isr+0x3c0>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    7b02:	b92e      	cbnz	r6, 7b10 <isr+0x180>
		_radio.state = STATE_CLOSE;
    7b04:	2303      	movs	r3, #3
    7b06:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    7b0a:	f002 feb9 	bl	a880 <radio_disable>
    7b0e:	e7c8      	b.n	7aa2 <isr+0x112>
	switch (_radio.role) {
    7b10:	7cc3      	ldrb	r3, [r0, #19]
    7b12:	3b01      	subs	r3, #1
    7b14:	2b03      	cmp	r3, #3
    7b16:	f201 80a7 	bhi.w	8c68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc68>
    7b1a:	e8df f013 	tbh	[pc, r3, lsl #1]
    7b1e:	0004      	.short	0x0004
    7b20:	04ae0239 	.word	0x04ae0239
    7b24:	04ae      	.short	0x04ae
		if (crc_ok) {
    7b26:	2f00      	cmp	r7, #0
    7b28:	d0ec      	beq.n	7b04 <isr+0x174>
	pdu_adv = (void *)radio_pkt_scratch_get();
    7b2a:	f002 feff 	bl	a92c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7b2e:	f89b 2078 	ldrb.w	r2, [fp, #120]	; 0x78
    7b32:	232a      	movs	r3, #42	; 0x2a
    7b34:	f04f 0927 	mov.w	r9, #39	; 0x27
    7b38:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    7b3c:	7802      	ldrb	r2, [r0, #0]
    7b3e:	f002 030f 	and.w	r3, r2, #15
    7b42:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    7b44:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    7b46:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    7b4a:	d13b      	bne.n	7bc4 <isr+0x234>
    7b4c:	7843      	ldrb	r3, [r0, #1]
    7b4e:	2b0c      	cmp	r3, #12
    7b50:	d138      	bne.n	7bc4 <isr+0x234>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    7b52:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    7b56:	065b      	lsls	r3, r3, #25
    7b58:	d500      	bpl.n	7b5c <isr+0x1cc>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    7b5a:	b39c      	cbz	r4, 7bc4 <isr+0x234>
	return (adv->tx_addr == sr->rx_addr) &&
    7b5c:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7b60:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7b64:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    7b68:	d12c      	bne.n	7bc4 <isr+0x234>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    7b6a:	2206      	movs	r2, #6
    7b6c:	f107 0108 	add.w	r1, r7, #8
    7b70:	1ca8      	adds	r0, r5, #2
    7b72:	f7f9 ff96 	bl	1aa2 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    7b76:	bb28      	cbnz	r0, 7bc4 <isr+0x234>
		_radio.state = STATE_CLOSE;
    7b78:	2303      	movs	r3, #3
    7b7a:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    7b7e:	f002 feef 	bl	a960 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    7b82:	f89b 00c8 	ldrb.w	r0, [fp, #200]	; 0xc8
    7b86:	2327      	movs	r3, #39	; 0x27
    7b88:	fb03 b000 	mla	r0, r3, r0, fp
    7b8c:	307a      	adds	r0, #122	; 0x7a
    7b8e:	f002 fe57 	bl	a840 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    7b92:	f002 fe93 	bl	a8bc <radio_is_ready>
    7b96:	2800      	cmp	r0, #0
    7b98:	d083      	beq.n	7aa2 <isr+0x112>
    7b9a:	4b03      	ldr	r3, [pc, #12]	; (7ba8 <isr+0x218>)
    7b9c:	9301      	str	r3, [sp, #4]
    7b9e:	9300      	str	r3, [sp, #0]
    7ba0:	4b07      	ldr	r3, [pc, #28]	; (7bc0 <isr+0x230>)
    7ba2:	e74b      	b.n	7a3c <isr+0xac>
    7ba4:	20000578 	.word	0x20000578
    7ba8:	0000cbb3 	.word	0x0000cbb3
    7bac:	0000dcab 	.word	0x0000dcab
    7bb0:	0000d49b 	.word	0x0000d49b
    7bb4:	0000d4ea 	.word	0x0000d4ea
    7bb8:	0000e216 	.word	0x0000e216
    7bbc:	0000d43a 	.word	0x0000d43a
    7bc0:	0000dcbe 	.word	0x0000dcbe
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    7bc4:	783b      	ldrb	r3, [r7, #0]
    7bc6:	f003 030f 	and.w	r3, r3, #15
    7bca:	2b05      	cmp	r3, #5
    7bcc:	d19a      	bne.n	7b04 <isr+0x174>
    7bce:	787b      	ldrb	r3, [r7, #1]
    7bd0:	2b22      	cmp	r3, #34	; 0x22
    7bd2:	d197      	bne.n	7b04 <isr+0x174>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7bd4:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7bd8:	f003 030f 	and.w	r3, r3, #15
    7bdc:	2b01      	cmp	r3, #1
    7bde:	f040 80c1 	bne.w	7d64 <isr+0x3d4>
		       isr_adv_ci_adva_check(adv, ci) &&
    7be2:	4639      	mov	r1, r7
    7be4:	4628      	mov	r0, r5
    7be6:	f7fd fd1b 	bl	5620 <isr_adv_ci_adva_check>
    7bea:	b188      	cbz	r0, 7c10 <isr+0x280>
	return (adv->rx_addr == ci->tx_addr) &&
    7bec:	783b      	ldrb	r3, [r7, #0]
    7bee:	f81b 2009 	ldrb.w	r2, [fp, r9]
    7bf2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7bf6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    7bfa:	f040 80b1 	bne.w	7d60 <isr+0x3d0>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    7bfe:	2206      	movs	r2, #6
    7c00:	1cb9      	adds	r1, r7, #2
    7c02:	f105 0008 	add.w	r0, r5, #8
    7c06:	f7f9 ff4c 	bl	1aa2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    7c0a:	fab0 f080 	clz	r0, r0
    7c0e:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    7c10:	2800      	cmp	r0, #0
    7c12:	f43f af77 	beq.w	7b04 <isr+0x174>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    7c16:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    7c1a:	b133      	cbz	r3, 7c2a <isr+0x29a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7c1c:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    7c20:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    7c24:	429a      	cmp	r2, r3
    7c26:	f47f af6d 	bne.w	7b04 <isr+0x174>
    7c2a:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
    7c2e:	2b00      	cmp	r3, #0
    7c30:	f43f af68 	beq.w	7b04 <isr+0x174>
			node_rx = packet_rx_reserve_get(4);
    7c34:	2004      	movs	r0, #4
    7c36:	f7fd f9eb 	bl	5010 <packet_rx_reserve_get>
		if (!node_rx) {
    7c3a:	4605      	mov	r5, r0
    7c3c:	2800      	cmp	r0, #0
    7c3e:	f43f af61 	beq.w	7b04 <isr+0x174>
		_radio.state = STATE_STOP;
    7c42:	f04f 0a04 	mov.w	sl, #4
    7c46:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    7c4a:	f002 fe19 	bl	a880 <radio_disable>
		conn = _radio.advertiser.conn;
    7c4e:	f8db 40cc 	ldr.w	r4, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7c52:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    7c56:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7c5a:	f44f 7282 	mov.w	r2, #260	; 0x104
    7c5e:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    7c60:	f8cb 80cc 	str.w	r8, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7c64:	f7fb fa49 	bl	30fa <mem_index_get>
		memcpy(&conn->crc_init[0],
    7c68:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7c6a:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    7c6c:	f107 0112 	add.w	r1, r7, #18
    7c70:	f104 0014 	add.w	r0, r4, #20
    7c74:	f7f9 ff2a 	bl	1acc <memcpy>
		memcpy(&conn->access_addr[0],
    7c78:	f104 0310 	add.w	r3, r4, #16
    7c7c:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    7c7e:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    7c82:	4652      	mov	r2, sl
    7c84:	f107 010e 	add.w	r1, r7, #14
    7c88:	930a      	str	r3, [sp, #40]	; 0x28
    7c8a:	f7f9 ff1f 	bl	1acc <memcpy>
		memcpy(&conn->data_chan_map[0],
    7c8e:	2205      	movs	r2, #5
    7c90:	f107 011e 	add.w	r1, r7, #30
    7c94:	4630      	mov	r0, r6
    7c96:	f7f9 ff19 	bl	1acc <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7c9a:	2105      	movs	r1, #5
    7c9c:	4630      	mov	r0, r6
    7c9e:	f7fb fb93 	bl	33c8 <util_ones_count_get>
		conn->data_chan_count =
    7ca2:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    7ca6:	f360 0205 	bfi	r2, r0, #0, #6
    7caa:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    7cac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    7cb0:	f3c2 0204 	ubfx	r2, r2, #0, #5
    7cb4:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    7cb6:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    7cb8:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    7cba:	f240 46e2 	movw	r6, #1250	; 0x4e2
    7cbe:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    7cc0:	7ef9      	ldrb	r1, [r7, #27]
    7cc2:	7eba      	ldrb	r2, [r7, #26]
    7cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7cc8:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7cca:	4619      	mov	r1, r3
    7ccc:	4652      	mov	r2, sl
    7cce:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7cd2:	f7f9 fefb 	bl	1acc <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    7cd6:	8bbb      	ldrh	r3, [r7, #28]
    7cd8:	f242 7210 	movw	r2, #10000	; 0x2710
    7cdc:	fb02 6303 	mla	r3, r2, r3, r6
    7ce0:	3b01      	subs	r3, #1
    7ce2:	fbb3 f3f6 	udiv	r3, r3, r6
    7ce6:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7ce8:	4b9b      	ldr	r3, [pc, #620]	; (7f58 <isr+0x5c8>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7cea:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7cec:	4433      	add	r3, r6
    7cee:	fbb3 f3f6 	udiv	r3, r3, r6
    7cf2:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    7cf4:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    7cf6:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    7cfa:	f04f 0801 	mov.w	r8, #1
    7cfe:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    7d02:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7d04:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7d08:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7d0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7d0e:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7d10:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7d12:	f105 000e 	add.w	r0, r5, #14
    7d16:	f7f9 fed9 	bl	1acc <memcpy>
			pdu_adv->connect_ind.interval;
    7d1a:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    7d1c:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    7d1e:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    7d20:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    7d22:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    7d24:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    7d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7d2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    7d2e:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    7d30:	8c20      	ldrh	r0, [r4, #32]
    7d32:	f7fd fce5 	bl	5700 <rx_fc_lock>
		packet_rx_enqueue();
    7d36:	f7fd fc97 	bl	5668 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    7d3a:	2003      	movs	r0, #3
    7d3c:	f7fd f968 	bl	5010 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7d40:	b9f0      	cbnz	r0, 7d80 <isr+0x3f0>
    7d42:	4b86      	ldr	r3, [pc, #536]	; (7f5c <isr+0x5cc>)
    7d44:	9301      	str	r3, [sp, #4]
    7d46:	9300      	str	r3, [sp, #0]
    7d48:	4b85      	ldr	r3, [pc, #532]	; (7f60 <isr+0x5d0>)
			LL_ASSERT(node_rx);
    7d4a:	4a86      	ldr	r2, [pc, #536]	; (7f64 <isr+0x5d4>)
    7d4c:	4986      	ldr	r1, [pc, #536]	; (7f68 <isr+0x5d8>)
    7d4e:	4887      	ldr	r0, [pc, #540]	; (7f6c <isr+0x5dc>)
		LL_ASSERT(0);
    7d50:	f7f9 f88c 	bl	e6c <printk>
    7d54:	4040      	eors	r0, r0
    7d56:	f380 8811 	msr	BASEPRI, r0
    7d5a:	f04f 0004 	mov.w	r0, #4
    7d5e:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    7d60:	2000      	movs	r0, #0
    7d62:	e755      	b.n	7c10 <isr+0x280>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7d64:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    7d68:	09db      	lsrs	r3, r3, #7
    7d6a:	d000      	beq.n	7d6e <isr+0x3de>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7d6c:	b134      	cbz	r4, 7d7c <isr+0x3ec>
	       isr_adv_ci_adva_check(adv, ci);
    7d6e:	4639      	mov	r1, r7
    7d70:	4628      	mov	r0, r5
    7d72:	f7fd fc55 	bl	5620 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    7d76:	f000 0001 	and.w	r0, r0, #1
    7d7a:	e749      	b.n	7c10 <isr+0x280>
    7d7c:	4620      	mov	r0, r4
    7d7e:	e7fa      	b.n	7d76 <isr+0x3e6>
			node_rx->hdr.handle = conn->handle;
    7d80:	8c23      	ldrh	r3, [r4, #32]
    7d82:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7d84:	230a      	movs	r3, #10
    7d86:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    7d88:	783b      	ldrb	r3, [r7, #0]
    7d8a:	f013 0320 	ands.w	r3, r3, #32
    7d8e:	f000 80dc 	beq.w	7f4a <isr+0x5ba>
					((u16_t)conn->access_addr[1] << 8) |
    7d92:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    7d94:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    7d96:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    7d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7d9c:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    7d9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7da2:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7da4:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7da6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    7daa:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7dac:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    7dae:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    7db2:	f7fd fc59 	bl	5668 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7db6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    7dba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    7dbe:	496c      	ldr	r1, [pc, #432]	; (7f70 <isr+0x5e0>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7dc0:	0952      	lsrs	r2, r2, #5
    7dc2:	f362 0384 	bfi	r3, r2, #2, #3
    7dc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    7dca:	f89b 3120 	ldrb.w	r3, [fp, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    7dce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    7dd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7dd6:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    7dd8:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7dda:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    7dde:	4a65      	ldr	r2, [pc, #404]	; (7f74 <isr+0x5e4>)
    7de0:	f203 233f 	addw	r3, r3, #575	; 0x23f
    7de4:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    7de8:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    7dea:	0873      	lsrs	r3, r6, #1
    7dec:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    7dee:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    7df0:	7d7b      	ldrb	r3, [r7, #21]
    7df2:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    7df6:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    7dfa:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    7dfe:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7e00:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    7e02:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7e06:	4640      	mov	r0, r8
    7e08:	f002 fd27 	bl	a85a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7e0c:	495a      	ldr	r1, [pc, #360]	; (7f78 <isr+0x5e8>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7e0e:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7e10:	f200 4052 	addw	r0, r0, #1106	; 0x452
    7e14:	a34e      	add	r3, pc, #312	; (adr r3, 7f50 <isr+0x5c0>)
    7e16:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e1a:	fba0 0101 	umull	r0, r1, r0, r1
    7e1e:	f7f8 f9f9 	bl	214 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7e22:	f8db 517c 	ldr.w	r5, [fp, #380]	; 0x17c
    7e26:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    7e28:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    7e2a:	429d      	cmp	r5, r3
    7e2c:	bf38      	it	cc
    7e2e:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7e30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    7e34:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    7e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    7e38:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    7e3a:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    7e3e:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    7e40:	f002 fef6 	bl	ac30 <radio_tmr_end_get>
    7e44:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    7e46:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7e48:	4641      	mov	r1, r8
		conn_offset_us +=
    7e4a:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7e4e:	4640      	mov	r0, r8
    7e50:	f002 fd01 	bl	a856 <radio_tx_chain_delay_get>
    7e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7e56:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    7e5a:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    7e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e5e:	ebaa 0a00 	sub.w	sl, sl, r0
    7e62:	ebaa 0303 	sub.w	r3, sl, r3
    7e66:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7e68:	f240 4383 	movw	r3, #1155	; 0x483
    7e6c:	9300      	str	r3, [sp, #0]
    7e6e:	2205      	movs	r2, #5
    7e70:	4b42      	ldr	r3, [pc, #264]	; (7f7c <isr+0x5ec>)
    7e72:	f8df a104 	ldr.w	sl, [pc, #260]	; 7f78 <isr+0x5e8>
    7e76:	4641      	mov	r1, r8
    7e78:	4640      	mov	r0, r8
    7e7a:	f7fc f821 	bl	3ec0 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    7e7e:	f240 4184 	movw	r1, #1156	; 0x484
    7e82:	f7fd fc75 	bl	5770 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7e86:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7e8a:	f003 030f 	and.w	r3, r3, #15
    7e8e:	2b01      	cmp	r3, #1
    7e90:	d107      	bne.n	7ea2 <isr+0x512>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7e92:	f8cd 8000 	str.w	r8, [sp]
    7e96:	4643      	mov	r3, r8
    7e98:	2203      	movs	r2, #3
    7e9a:	4641      	mov	r1, r8
    7e9c:	4640      	mov	r0, r8
    7e9e:	f7fc f80f 	bl	3ec0 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7ea2:	fba6 670a 	umull	r6, r7, r6, sl
    7ea6:	a32a      	add	r3, pc, #168	; (adr r3, 7f50 <isr+0x5c0>)
    7ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
    7eac:	4630      	mov	r0, r6
    7eae:	4639      	mov	r1, r7
    7eb0:	f7f8 f9b0 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7eb4:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7eb8:	4a31      	ldr	r2, [pc, #196]	; (7f80 <isr+0x5f0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7eba:	eba3 0b05 	sub.w	fp, r3, r5
    7ebe:	f894 3020 	ldrb.w	r3, [r4, #32]
    7ec2:	9406      	str	r4, [sp, #24]
    7ec4:	3307      	adds	r3, #7
    7ec6:	b2db      	uxtb	r3, r3
    7ec8:	930b      	str	r3, [sp, #44]	; 0x2c
    7eca:	f240 439b 	movw	r3, #1179	; 0x49b
    7ece:	9308      	str	r3, [sp, #32]
    7ed0:	4b2c      	ldr	r3, [pc, #176]	; (7f84 <isr+0x5f4>)
    7ed2:	9307      	str	r3, [sp, #28]
    7ed4:	4b2c      	ldr	r3, [pc, #176]	; (7f88 <isr+0x5f8>)
    7ed6:	9305      	str	r3, [sp, #20]
    7ed8:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7eda:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7edc:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ee2:	2307      	movs	r3, #7
    7ee4:	2100      	movs	r1, #0
    7ee6:	4343      	muls	r3, r0
    7ee8:	fb02 3301 	mla	r3, r2, r1, r3
    7eec:	fba0 0102 	umull	r0, r1, r0, r2
    7ef0:	1a30      	subs	r0, r6, r0
    7ef2:	4419      	add	r1, r3
    7ef4:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7ef8:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7efe:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f00:	9504      	str	r5, [sp, #16]
    7f02:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7f04:	f7f8 f986 	bl	214 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7f08:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f0a:	9002      	str	r0, [sp, #8]
    7f0c:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    7f10:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7f12:	fba1 010a 	umull	r0, r1, r1, sl
    7f16:	a30e      	add	r3, pc, #56	; (adr r3, 7f50 <isr+0x5c0>)
    7f18:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f1c:	f7f8 f97a 	bl	214 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7f24:	9000      	str	r0, [sp, #0]
    7f26:	465b      	mov	r3, fp
    7f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f2a:	4621      	mov	r1, r4
    7f2c:	4620      	mov	r0, r4
    7f2e:	f7fb ff29 	bl	3d84 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7f32:	f030 0302 	bics.w	r3, r0, #2
    7f36:	f43f adb4 	beq.w	7aa2 <isr+0x112>
    7f3a:	4b08      	ldr	r3, [pc, #32]	; (7f5c <isr+0x5cc>)
    7f3c:	9301      	str	r3, [sp, #4]
    7f3e:	9300      	str	r3, [sp, #0]
    7f40:	4b07      	ldr	r3, [pc, #28]	; (7f60 <isr+0x5d0>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7f42:	4a08      	ldr	r2, [pc, #32]	; (7f64 <isr+0x5d4>)
    7f44:	4908      	ldr	r1, [pc, #32]	; (7f68 <isr+0x5d8>)
    7f46:	4811      	ldr	r0, [pc, #68]	; (7f8c <isr+0x5fc>)
    7f48:	e702      	b.n	7d50 <isr+0x3c0>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    7f4a:	72c3      	strb	r3, [r0, #11]
    7f4c:	e731      	b.n	7db2 <isr+0x422>
    7f4e:	bf00      	nop
    7f50:	1afd498d 	.word	0x1afd498d
    7f54:	00000007 	.word	0x00000007
    7f58:	026259ff 	.word	0x026259ff
    7f5c:	0000cbb3 	.word	0x0000cbb3
    7f60:	0000dcbe 	.word	0x0000dcbe
    7f64:	0000d49b 	.word	0x0000d49b
    7f68:	0000d4ea 	.word	0x0000d4ea
    7f6c:	0000e4c7 	.word	0x0000e4c7
    7f70:	0000e206 	.word	0x0000e206
    7f74:	000f4240 	.word	0x000f4240
    7f78:	3b9aca00 	.word	0x3b9aca00
    7f7c:	00005771 	.word	0x00005771
    7f80:	1afd498d 	.word	0x1afd498d
    7f84:	00005735 	.word	0x00005735
    7f88:	000076c1 	.word	0x000076c1
    7f8c:	0000e075 	.word	0x0000e075
		if (crc_ok &&
    7f90:	2f00      	cmp	r7, #0
    7f92:	f000 822e 	beq.w	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7f96:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
    7f9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
    7f9e:	b113      	cbz	r3, 7fa6 <isr+0x616>
		if (crc_ok &&
    7fa0:	2c00      	cmp	r4, #0
    7fa2:	f000 8226 	beq.w	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
	bool dir_report = false;
    7fa6:	2200      	movs	r2, #0
    7fa8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7fac:	f89b 1139 	ldrb.w	r1, [fp, #313]	; 0x139
    7fb0:	f8db 2134 	ldr.w	r2, [fp, #308]	; 0x134
    7fb4:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7fb8:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7fbc:	f107 0408 	add.w	r4, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7fc0:	2a00      	cmp	r2, #0
    7fc2:	f000 80d3 	beq.w	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    7fc6:	f89b 217a 	ldrb.w	r2, [fp, #378]	; 0x17a
    7fca:	b132      	cbz	r2, 7fda <isr+0x64a>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7fcc:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7fd0:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    7fd4:	4291      	cmp	r1, r2
    7fd6:	f040 80c9 	bne.w	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7fda:	2b00      	cmp	r3, #0
    7fdc:	f000 80b4 	beq.w	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7fe0:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7fe2:	f013 030f 	ands.w	r3, r3, #15
    7fe6:	f040 8115 	bne.w	8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7fea:	f002 fe21 	bl	ac30 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7fee:	f8db 30dc 	ldr.w	r3, [fp, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7ff2:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7ff6:	48b4      	ldr	r0, [pc, #720]	; (82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>)
    7ff8:	2207      	movs	r2, #7
    7ffa:	fba3 0100 	umull	r0, r1, r3, r0
    7ffe:	fb02 1103 	mla	r1, r2, r3, r1
    8002:	a3af      	add	r3, pc, #700	; (adr r3, 82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>)
    8004:	e9d3 2300 	ldrd	r2, r3, [r3]
    8008:	f7f8 f904 	bl	214 <__aeabi_uldivmod>
    800c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8010:	4286      	cmp	r6, r0
    8012:	f080 80ab 	bcs.w	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
			node_rx = packet_rx_reserve_get(4);
    8016:	2004      	movs	r0, #4
    8018:	f7fc fffa 	bl	5010 <packet_rx_reserve_get>
		if (node_rx == 0) {
    801c:	4682      	mov	sl, r0
    801e:	2800      	cmp	r0, #0
    8020:	f000 81e7 	beq.w	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		_radio.state = STATE_STOP;
    8024:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    8026:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    8028:	f8db 4100 	ldr.w	r4, [fp, #256]	; 0x100
		_radio.state = STATE_STOP;
    802c:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    8030:	f8cb 3100 	str.w	r3, [fp, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8034:	f002 fc7a 	bl	a92c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    8038:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    803a:	49a4      	ldr	r1, [pc, #656]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
			pdu_adv_tx->chan_sel = 1;
    803c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    8040:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    8044:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8046:	7a3a      	ldrb	r2, [r7, #8]
    8048:	b2db      	uxtb	r3, r3
    804a:	f3c2 1280 	ubfx	r2, r2, #6, #1
    804e:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    8052:	2222      	movs	r2, #34	; 0x22
    8054:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8056:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    805a:	09d2      	lsrs	r2, r2, #7
    805c:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8060:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8062:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8064:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8068:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    806c:	f7f9 fd2e 	bl	1acc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8070:	2206      	movs	r2, #6
    8072:	f107 010a 	add.w	r1, r7, #10
    8076:	4648      	mov	r0, r9
    8078:	f7f9 fd28 	bl	1acc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    807c:	4632      	mov	r2, r6
    807e:	f104 0110 	add.w	r1, r4, #16
    8082:	f105 000e 	add.w	r0, r5, #14
    8086:	f7f9 fd21 	bl	1acc <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    808a:	2203      	movs	r2, #3
    808c:	f104 0114 	add.w	r1, r4, #20
    8090:	f105 0012 	add.w	r0, r5, #18
    8094:	f7f9 fd1a 	bl	1acc <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    8098:	2301      	movs	r3, #1
    809a:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    809c:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
		conn_interval_us =
    80a0:	f240 46e2 	movw	r6, #1250	; 0x4e2
    80a4:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    80a6:	f002 fdc3 	bl	ac30 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    80aa:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    80ae:	f8db 8104 	ldr.w	r8, [fp, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    80b2:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    80b4:	bfcc      	ite	gt
    80b6:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    80ba:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    80be:	f1b8 0f00 	cmp.w	r8, #0
    80c2:	f040 80b1 	bne.w	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
			pdu_adv_tx->connect_ind.win_offset = 0;
    80c6:	f885 8016 	strb.w	r8, [r5, #22]
    80ca:	f885 8017 	strb.w	r8, [r5, #23]
    80ce:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    80d0:	2100      	movs	r1, #0
    80d2:	4608      	mov	r0, r1
    80d4:	f002 fbba 	bl	a84c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    80d8:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    80da:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    80de:	4608      	mov	r0, r1
    80e0:	f002 fbb9 	bl	a856 <radio_tx_chain_delay_get>
    80e4:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    80e8:	f100 031e 	add.w	r3, r0, #30
    80ec:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    80ee:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    80f2:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    80f4:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    80f8:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    80fa:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    80fe:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8100:	f104 0117 	add.w	r1, r4, #23
    8104:	2205      	movs	r2, #5
    8106:	f105 001e 	add.w	r0, r5, #30
    810a:	f7f9 fcdf 	bl	1acc <memcpy>
		pdu_adv_tx->connect_ind.hop =
    810e:	7fa2      	ldrb	r2, [r4, #30]
    8110:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8114:	f362 0304 	bfi	r3, r2, #0, #5
    8118:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    811c:	f89b 2120 	ldrb.w	r2, [fp, #288]	; 0x120
    8120:	f362 1347 	bfi	r3, r2, #5, #3
    8124:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    8128:	f002 fc1a 	bl	a960 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    812c:	4628      	mov	r0, r5
    812e:	f002 fb87 	bl	a840 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8132:	f002 fbc3 	bl	a8bc <radio_is_ready>
    8136:	4680      	mov	r8, r0
    8138:	2800      	cmp	r0, #0
    813a:	f000 8085 	beq.w	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
		LL_ASSERT(!radio_is_ready());
    813e:	4b64      	ldr	r3, [pc, #400]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    8140:	9301      	str	r3, [sp, #4]
    8142:	9300      	str	r3, [sp, #0]
    8144:	4b63      	ldr	r3, [pc, #396]	; (82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>)
    8146:	e479      	b.n	7a3c <isr+0xac>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    8148:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    814c:	7a3b      	ldrb	r3, [r7, #8]
    814e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8152:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8156:	429a      	cmp	r2, r3
    8158:	d108      	bne.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
		(memcmp(&_radio.scanner.adv_addr[0],
    815a:	2206      	movs	r2, #6
    815c:	f107 010a 	add.w	r1, r7, #10
    8160:	485d      	ldr	r0, [pc, #372]	; (82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>)
    8162:	f7f9 fc9e 	bl	1aa2 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    8166:	2800      	cmp	r0, #0
    8168:	f43f af3a 	beq.w	7fe0 <isr+0x650>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    816c:	7a3b      	ldrb	r3, [r7, #8]
    816e:	f013 030f 	ands.w	r3, r3, #15
    8172:	d002      	beq.n	817a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a>
    8174:	2b06      	cmp	r3, #6
    8176:	f040 8149 	bne.w	840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>
		 (_radio.scanner.type != 0) &&
    817a:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    817e:	0716      	lsls	r6, r2, #28
    8180:	f140 8133 	bpl.w	83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
		 (_radio.scanner.type != 0) &&
    8184:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
    8188:	2a00      	cmp	r2, #0
    818a:	f040 812e 	bne.w	83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
		err = isr_rx_scan_report(rssi_ready,
    818e:	4628      	mov	r0, r5
    8190:	f7fe f882 	bl	6298 <isr_rx_scan_report.isra.35>
		if (err) {
    8194:	4605      	mov	r5, r0
    8196:	2800      	cmp	r0, #0
    8198:	f040 812b 	bne.w	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    819c:	f002 fbc6 	bl	a92c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    81a0:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    81a2:	494a      	ldr	r1, [pc, #296]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    81a4:	2203      	movs	r2, #3
    81a6:	f362 0303 	bfi	r3, r2, #0, #4
    81aa:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    81ac:	7a3a      	ldrb	r2, [r7, #8]
    81ae:	b2db      	uxtb	r3, r3
    81b0:	f3c2 1280 	ubfx	r2, r2, #6, #1
    81b4:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    81b8:	220c      	movs	r2, #12
    81ba:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    81bc:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    81c0:	09d2      	lsrs	r2, r2, #7
    81c2:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    81c6:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    81c8:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    81ca:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    81ce:	f7f9 fc7d 	bl	1acc <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    81d2:	2206      	movs	r2, #6
    81d4:	f107 010a 	add.w	r1, r7, #10
    81d8:	f104 0008 	add.w	r0, r4, #8
    81dc:	f7f9 fc76 	bl	1acc <memcpy>
		_radio.scanner.state = 1;
    81e0:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    81e4:	f043 0302 	orr.w	r3, r3, #2
    81e8:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    81ec:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    81ee:	2302      	movs	r3, #2
    81f0:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    81f4:	f002 fc2e 	bl	aa54 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    81f8:	4628      	mov	r0, r5
    81fa:	f002 fb9b 	bl	a934 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    81fe:	4620      	mov	r0, r4
    8200:	f002 fb1e 	bl	a840 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    8204:	f002 fd02 	bl	ac0c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    8208:	f002 fb58 	bl	a8bc <radio_is_ready>
    820c:	2800      	cmp	r0, #0
    820e:	f43f ac48 	beq.w	7aa2 <isr+0x112>
    8212:	e794      	b.n	813e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8214:	2b01      	cmp	r3, #1
    8216:	d1ad      	bne.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8218:	2100      	movs	r1, #0
    821a:	4620      	mov	r0, r4
    821c:	f7fd ff98 	bl	6150 <isr_scan_tgta_check.isra.29>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8220:	2800      	cmp	r0, #0
    8222:	d0a3      	beq.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    8224:	e6e1      	b.n	7fea <isr+0x65a>
				conn_space_us += conn_interval_us;
    8226:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    8228:	f1b8 0f00 	cmp.w	r8, #0
    822c:	dbfb      	blt.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
    822e:	4580      	cmp	r8, r0
    8230:	d3f9      	bcc.n	8226 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x226>
			pdu_adv_tx->connect_ind.win_offset =
    8232:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    8236:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    823a:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    823e:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    8240:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    8242:	3301      	adds	r3, #1
    8244:	756b      	strb	r3, [r5, #21]
    8246:	e743      	b.n	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8248:	f44f 7282 	mov.w	r2, #260	; 0x104
    824c:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
    8250:	4620      	mov	r0, r4
    8252:	f7fa ff52 	bl	30fa <mem_index_get>
    8256:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8258:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    825c:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    8260:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    8262:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8266:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    8268:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    826c:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8270:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    8272:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8276:	f10a 000e 	add.w	r0, sl, #14
    827a:	f7f9 fc27 	bl	1acc <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    827e:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    8282:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8286:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    828a:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    828e:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    8292:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    8296:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    829a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    829e:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    82a2:	8c20      	ldrh	r0, [r4, #32]
    82a4:	f7fd fa2c 	bl	5700 <rx_fc_lock>
		packet_rx_enqueue();
    82a8:	f7fd f9de 	bl	5668 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    82ac:	2003      	movs	r0, #3
    82ae:	f7fc feaf 	bl	5010 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    82b2:	b998      	cbnz	r0, 82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    82b4:	4b06      	ldr	r3, [pc, #24]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    82b6:	9301      	str	r3, [sp, #4]
    82b8:	9300      	str	r3, [sp, #0]
    82ba:	4b06      	ldr	r3, [pc, #24]	; (82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>)
    82bc:	e545      	b.n	7d4a <isr+0x3ba>
    82be:	bf00      	nop
    82c0:	3b9aca00 	.word	0x3b9aca00
    82c4:	00000000 	.word	0x00000000
    82c8:	1afd498d 	.word	0x1afd498d
    82cc:	2000065a 	.word	0x2000065a
    82d0:	0000cbb3 	.word	0x0000cbb3
    82d4:	0000dcdc 	.word	0x0000dcdc
    82d8:	20000660 	.word	0x20000660
			node_rx->hdr.handle = conn->handle;
    82dc:	8c23      	ldrh	r3, [r4, #32]
    82de:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    82e0:	230a      	movs	r3, #10
    82e2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    82e4:	7a3b      	ldrb	r3, [r7, #8]
    82e6:	f013 0320 	ands.w	r3, r3, #32
    82ea:	d00e      	beq.n	830a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30a>
					((u16_t)conn->access_addr[1] << 8) |
    82ec:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    82ee:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    82f0:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    82f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    82f6:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    82f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    82fc:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    82fe:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8300:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    8304:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    8306:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8308:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    830a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    830c:	f7fd f9ac 	bl	5668 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8310:	f8db 317c 	ldr.w	r3, [fp, #380]	; 0x17c
    8314:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    8316:	2b27      	cmp	r3, #39	; 0x27
    8318:	bf38      	it	cc
    831a:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    831c:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    831e:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8320:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = max(conn->hdr.ticks_active_to_start,
    8322:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    8324:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
    8328:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    832a:	f44f 63c7 	mov.w	r3, #1592	; 0x638
    832e:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8330:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8332:	4629      	mov	r1, r5
    8334:	9300      	str	r3, [sp, #0]
    8336:	4628      	mov	r0, r5
    8338:	4bb9      	ldr	r3, [pc, #740]	; (8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    833a:	f8df a300 	ldr.w	sl, [pc, #768]	; 863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    833e:	f7fb fdbf 	bl	3ec0 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    8342:	f240 6139 	movw	r1, #1593	; 0x639
    8346:	f7fd fa47 	bl	57d8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    834a:	462b      	mov	r3, r5
    834c:	2204      	movs	r2, #4
    834e:	4629      	mov	r1, r5
    8350:	9500      	str	r5, [sp, #0]
    8352:	4628      	mov	r0, r5
    8354:	f7fb fdb4 	bl	3ec0 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8358:	f8db 3008 	ldr.w	r3, [fp, #8]
    835c:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    8360:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8362:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8366:	f44f 63ca 	mov.w	r3, #1616	; 0x650
    836a:	9308      	str	r3, [sp, #32]
    836c:	4bad      	ldr	r3, [pc, #692]	; (8624 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x624>)
    836e:	9307      	str	r3, [sp, #28]
    8370:	4bad      	ldr	r3, [pc, #692]	; (8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>)
    8372:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8374:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    8376:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8378:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    837c:	4443      	add	r3, r8
		ticker_status =
    837e:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8380:	4630      	mov	r0, r6
    8382:	a3a5      	add	r3, pc, #660	; (adr r3, 8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    8384:	e9d3 2300 	ldrd	r2, r3, [r3]
    8388:	4639      	mov	r1, r7
    838a:	f7f7 ff43 	bl	214 <__aeabi_uldivmod>
    838e:	4610      	mov	r0, r2
    8390:	4619      	mov	r1, r3
    8392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8396:	2300      	movs	r3, #0
    8398:	f7f7 ff3c 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    839c:	a39e      	add	r3, pc, #632	; (adr r3, 8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    839e:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    83a2:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    83a4:	4639      	mov	r1, r7
    83a6:	4630      	mov	r0, r6
    83a8:	f7f7 ff34 	bl	214 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    83ac:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    83ae:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    83b0:	a399      	add	r3, pc, #612	; (adr r3, 8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>)
    83b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    83b6:	fba1 010a 	umull	r0, r1, r1, sl
    83ba:	f7f7 ff2b 	bl	214 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    83be:	f109 0907 	add.w	r9, r9, #7
    83c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    83c6:	fa5f f989 	uxtb.w	r9, r9
    83ca:	9000      	str	r0, [sp, #0]
    83cc:	465b      	mov	r3, fp
    83ce:	464a      	mov	r2, r9
    83d0:	4629      	mov	r1, r5
    83d2:	4628      	mov	r0, r5
    83d4:	f7fb fcd6 	bl	3d84 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    83d8:	f030 0302 	bics.w	r3, r0, #2
    83dc:	f43f ab61 	beq.w	7aa2 <isr+0x112>
    83e0:	4b92      	ldr	r3, [pc, #584]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    83e2:	9301      	str	r3, [sp, #4]
    83e4:	9300      	str	r3, [sp, #0]
    83e6:	4b92      	ldr	r3, [pc, #584]	; (8630 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x630>)
    83e8:	e5ab      	b.n	7f42 <isr+0x5b2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    83ea:	b97b      	cbnz	r3, 840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    83ec:	7a7b      	ldrb	r3, [r7, #9]
    83ee:	2b00      	cmp	r3, #0
    83f0:	d13b      	bne.n	846a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46a>
			_radio.state = STATE_CLOSE;
    83f2:	2303      	movs	r3, #3
    83f4:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    83f8:	f002 fa42 	bl	a880 <radio_disable>
			_radio.scanner.state = 0;
    83fc:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    8400:	f36f 0341 	bfc	r3, #1, #1
    8404:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
    8408:	f7ff bb4b 	b.w	7aa2 <isr+0x112>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    840c:	2b01      	cmp	r3, #1
    840e:	d00d      	beq.n	842c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8410:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    8412:	f003 020b 	and.w	r2, r3, #11
    8416:	2a02      	cmp	r2, #2
    8418:	d0e8      	beq.n	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    841a:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    841e:	2b07      	cmp	r3, #7
    8420:	d10b      	bne.n	843a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    8422:	f89b 30e1 	ldrb.w	r3, [fp, #225]	; 0xe1
    8426:	075c      	lsls	r4, r3, #29
    8428:	d1e0      	bne.n	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    842a:	e7e2      	b.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    842c:	a90d      	add	r1, sp, #52	; 0x34
    842e:	4620      	mov	r0, r4
    8430:	f7fd fe8e 	bl	6150 <isr_scan_tgta_check.isra.29>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8434:	2800      	cmp	r0, #0
    8436:	d1d9      	bne.n	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    8438:	e7ea      	b.n	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
		   (_radio.scanner.phy)) ||
    843a:	2b04      	cmp	r3, #4
    843c:	d1d9      	bne.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		   (_radio.scanner.state != 0) &&
    843e:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    8442:	0798      	lsls	r0, r3, #30
    8444:	d5d5      	bpl.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    8446:	f002 fa71 	bl	a92c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    844a:	7a3b      	ldrb	r3, [r7, #8]
    844c:	7802      	ldrb	r2, [r0, #0]
    844e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8452:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8456:	d1cc      	bne.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8458:	2206      	movs	r2, #6
    845a:	f107 010a 	add.w	r1, r7, #10
    845e:	3008      	adds	r0, #8
    8460:	f7f9 fb1f 	bl	1aa2 <memcmp>
		   (_radio.scanner.state != 0) &&
    8464:	2800      	cmp	r0, #0
    8466:	d0c1      	beq.n	83ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ec>
    8468:	e7c3      	b.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    846a:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    846e:	2b00      	cmp	r3, #0
    8470:	d1bf      	bne.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
		err = isr_rx_scan_report(rssi_ready,
    8472:	4628      	mov	r0, r5
    8474:	f7fd ff10 	bl	6298 <isr_rx_scan_report.isra.35>
    8478:	e7bb      	b.n	83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
	_radio.packet_counter++;
    847a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    847e:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
	_radio.packet_counter++;
    8482:	3301      	adds	r3, #1
    8484:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8488:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    848c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8490:	2301      	movs	r3, #1
    8492:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    8494:	2f00      	cmp	r7, #0
    8496:	f000 83a7 	beq.w	8be8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe8>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    849a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    849e:	7a30      	ldrb	r0, [r6, #8]
    84a0:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    84a4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    84a8:	f002 0101 	and.w	r1, r2, #1
    84ac:	4288      	cmp	r0, r1
    84ae:	f000 80cb 	beq.w	8648 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x648>
		_radio.conn_curr->sn++;
    84b2:	f081 0101 	eor.w	r1, r1, #1
    84b6:	f361 0200 	bfi	r2, r1, #0, #1
    84ba:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    84be:	f89b 2013 	ldrb.w	r2, [fp, #19]
    84c2:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    84c4:	bf02      	ittt	eq
    84c6:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    84ca:	f042 0201 	orreq.w	r2, r2, #1
    84ce:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    84d2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    84d6:	0611      	lsls	r1, r2, #24
    84d8:	f100 80b2 	bmi.w	8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>
			node_tx = _radio.conn_curr->pkt_tx_head;
    84dc:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    84e0:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    84e4:	f108 0c04 	add.w	ip, r8, #4
    84e8:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    84ec:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    84ee:	b90c      	cbnz	r4, 84f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f4>
	u8_t terminate = 0;
    84f0:	2500      	movs	r5, #0
    84f2:	e02b      	b.n	854c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54c>
				if (_radio.conn_curr->enc_tx) {
    84f4:	0692      	lsls	r2, r2, #26
    84f6:	d50a      	bpl.n	850e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50e>
					_radio.conn_curr->ccm_tx.counter++;
    84f8:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    84fc:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    8500:	3001      	adds	r0, #1
    8502:	f141 0100 	adc.w	r1, r1, #0
    8506:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    850a:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    850e:	f81c 300e 	ldrb.w	r3, [ip, lr]
    8512:	f003 0303 	and.w	r3, r3, #3
    8516:	2b03      	cmp	r3, #3
    8518:	d1ea      	bne.n	84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
	switch (pdu_data_tx->llctrl.opcode) {
    851a:	78ea      	ldrb	r2, [r5, #3]
    851c:	2a02      	cmp	r2, #2
    851e:	d1e7      	bne.n	84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
		_radio.state = STATE_CLOSE;
    8520:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    8524:	f002 f9ac 	bl	a880 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    8528:	f002 f9c8 	bl	a8bc <radio_is_ready>
    852c:	b128      	cbz	r0, 853a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53a>
    852e:	4b3f      	ldr	r3, [pc, #252]	; (862c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62c>)
    8530:	9301      	str	r3, [sp, #4]
    8532:	9300      	str	r3, [sp, #0]
    8534:	4b3f      	ldr	r3, [pc, #252]	; (8634 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x634>)
    8536:	f7ff ba81 	b.w	7a3c <isr+0xac>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    853a:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    853c:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8540:	2913      	cmp	r1, #19
    8542:	bf08      	it	eq
    8544:	2116      	moveq	r1, #22
    8546:	f7fd fe63 	bl	6210 <terminate_ind_rx_enqueue>
		terminate = 1;
    854a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    854c:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8550:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8554:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8558:	4422      	add	r2, r4
    855a:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    855c:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    855e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8562:	d11e      	bne.n	85a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a2>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8564:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    8568:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    856c:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    856e:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    8570:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    8574:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8578:	d116      	bne.n	85a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a8>
		if (node_tx) {
    857a:	f1b8 0f00 	cmp.w	r8, #0
    857e:	d010      	beq.n	85a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a2>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8580:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8584:	6814      	ldr	r4, [r2, #0]
    8586:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    858a:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    858c:	bf06      	itte	eq
    858e:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    8592:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8596:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    859a:	4927      	ldr	r1, [pc, #156]	; (8638 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x638>)
    859c:	4640      	mov	r0, r8
    859e:	f7fa fd94 	bl	30ca <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    85a2:	f04f 0800 	mov.w	r8, #0
    85a6:	e008      	b.n	85ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ba>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    85a8:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    85ac:	428a      	cmp	r2, r1
    85ae:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    85b0:	bf08      	it	eq
    85b2:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    85b6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    85ba:	2d00      	cmp	r5, #0
    85bc:	d046      	beq.n	864c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64c>
		connection_release(_radio.conn_curr);
    85be:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    85c2:	f7fd fb3d 	bl	5c40 <connection_release>
		_radio.conn_curr = NULL;
    85c6:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    85c8:	f8cb 5114 	str.w	r5, [fp, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    85cc:	f002 fb12 	bl	abf4 <radio_tmr_aa_restore>
    85d0:	b918      	cbnz	r0, 85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
		radio_tmr_aa_save(radio_tmr_aa_get());
    85d2:	f002 fb03 	bl	abdc <radio_tmr_aa_get>
    85d6:	f002 fb07 	bl	abe8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    85da:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    85de:	2b00      	cmp	r3, #0
    85e0:	f43f aa5f 	beq.w	7aa2 <isr+0x112>
	if (tx_release) {
    85e4:	f1b8 0f00 	cmp.w	r8, #0
    85e8:	d003      	beq.n	85f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f2>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    85ea:	4641      	mov	r1, r8
    85ec:	8c18      	ldrh	r0, [r3, #32]
    85ee:	f7fd fa9d 	bl	5b2c <pdu_node_tx_release>
	if (rx_enqueue) {
    85f2:	2d00      	cmp	r5, #0
    85f4:	f43f aa55 	beq.w	7aa2 <isr+0x112>
		rx_fc_lock(_radio.conn_curr->handle);
    85f8:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    85fc:	8c18      	ldrh	r0, [r3, #32]
    85fe:	f7fd f87f 	bl	5700 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    8602:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8606:	8c1b      	ldrh	r3, [r3, #32]
    8608:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    860a:	f7fd f82d 	bl	5668 <packet_rx_enqueue>
    860e:	f7ff ba48 	b.w	7aa2 <isr+0x112>
    8612:	bf00      	nop
    8614:	f3af 8000 	nop.w
    8618:	1afd498d 	.word	0x1afd498d
    861c:	00000007 	.word	0x00000007
    8620:	000057d9 	.word	0x000057d9
    8624:	00005735 	.word	0x00005735
    8628:	000076bd 	.word	0x000076bd
    862c:	0000cbb3 	.word	0x0000cbb3
    8630:	0000dcdc 	.word	0x0000dcdc
    8634:	0000dce8 	.word	0x0000dce8
    8638:	200006cc 	.word	0x200006cc
    863c:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->empty = 0;
    8640:	f36f 12c7 	bfc	r2, #7, #1
    8644:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8648:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    864c:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8650:	7a32      	ldrb	r2, [r6, #8]
    8652:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8656:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    865a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    865e:	429a      	cmp	r2, r3
    8660:	d03c      	beq.n	86dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6dc>
	u8_t rx_enqueue = 0;
    8662:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    8664:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		_radio.crc_expire = 0;
    8668:	2400      	movs	r4, #0
    866a:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0;
    866e:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8670:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8674:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8676:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    867a:	f7ff f923 	bl	78c4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    867e:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8682:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8684:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8688:	d013      	beq.n	86b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b2>
    868a:	2c00      	cmp	r4, #0
    868c:	f040 82c5 	bne.w	8c1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1a>
    8690:	b13f      	cbz	r7, 86a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8692:	7a33      	ldrb	r3, [r6, #8]
    8694:	06df      	lsls	r7, r3, #27
    8696:	d404      	bmi.n	86a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a2>
			 (pdu_data_tx->len == 0)) ||
    8698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    869a:	785b      	ldrb	r3, [r3, #1]
    869c:	2b00      	cmp	r3, #0
    869e:	f000 82bc 	beq.w	8c1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1a>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    86a2:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    86a6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    86aa:	2b00      	cmp	r3, #0
    86ac:	bf0c      	ite	eq
    86ae:	2302      	moveq	r3, #2
    86b0:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    86b2:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    86b4:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    86b8:	f040 82cd 	bne.w	8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
		if (_radio.role == ROLE_MASTER) {
    86bc:	f89b 3013 	ldrb.w	r3, [fp, #19]
    86c0:	2b04      	cmp	r3, #4
    86c2:	f040 82ac 	bne.w	8c1e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1e>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    86c6:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    86ca:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    86ce:	f369 12c7 	bfi	r2, r9, #7, #1
    86d2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    86d6:	f002 f8d3 	bl	a880 <radio_disable>
    86da:	e777      	b.n	85cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5cc>
	    (packet_rx_reserve_get(3) != 0) &&
    86dc:	2003      	movs	r0, #3
    86de:	f7fc fc97 	bl	5010 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    86e2:	2800      	cmp	r0, #0
    86e4:	d0bd      	beq.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
	    (packet_rx_reserve_get(3) != 0) &&
    86e6:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    86ea:	b373      	cbz	r3, 874a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74a>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    86ec:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
    86f0:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    86f4:	4293      	cmp	r3, r2
    86f6:	d105      	bne.n	8704 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x704>
	      (_radio.fc_req == _radio.fc_ack)) ||
    86f8:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    86fc:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    8700:	4291      	cmp	r1, r2
    8702:	d022      	beq.n	874a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74a>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8704:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    8708:	4293      	cmp	r3, r2
    870a:	d0aa      	beq.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
	      (_radio.fc_req != _radio.fc_ack) &&
    870c:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8710:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    8714:	429a      	cmp	r2, r3
    8716:	d0a4      	beq.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
		(((_radio.fc_req == 0) &&
    8718:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
	      (_radio.fc_req != _radio.fc_ack) &&
    871c:	b933      	cbnz	r3, 872c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72c>
		   _radio.conn_curr->handle)) ||
    871e:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		(((_radio.fc_req == 0) &&
    8722:	f8bb 2176 	ldrh.w	r2, [fp, #374]	; 0x176
    8726:	8c1b      	ldrh	r3, [r3, #32]
    8728:	429a      	cmp	r2, r3
    872a:	d00e      	beq.n	874a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74a>
		 ((_radio.fc_req != 0) &&
    872c:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    8730:	2b00      	cmp	r3, #0
    8732:	d096      	beq.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8734:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
		   _radio.conn_curr->handle)))))) {
    8738:	f8db 1114 	ldr.w	r1, [fp, #276]	; 0x114
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    873c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    8740:	f8b3 2170 	ldrh.w	r2, [r3, #368]	; 0x170
    8744:	8c0b      	ldrh	r3, [r1, #32]
    8746:	429a      	cmp	r2, r3
    8748:	d18b      	bne.n	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
		if (pdu_data_rx->len != 0) {
    874a:	f896 9009 	ldrb.w	r9, [r6, #9]
    874e:	f1b9 0f00 	cmp.w	r9, #0
    8752:	f000 8206 	beq.w	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
			if (_radio.conn_curr->enc_rx) {
    8756:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    875a:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    875e:	f019 0910 	ands.w	r9, r9, #16
    8762:	d00d      	beq.n	8780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x780>
				done = radio_ccm_is_done();
    8764:	f002 fad2 	bl	ad0c <radio_ccm_is_done>
				LL_ASSERT(done);
    8768:	b940      	cbnz	r0, 877c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x77c>
    876a:	4bac      	ldr	r3, [pc, #688]	; (8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>)
    876c:	9301      	str	r3, [sp, #4]
    876e:	9300      	str	r3, [sp, #0]
    8770:	4aab      	ldr	r2, [pc, #684]	; (8a20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa20>)
    8772:	4bac      	ldr	r3, [pc, #688]	; (8a24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa24>)
    8774:	49ac      	ldr	r1, [pc, #688]	; (8a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa28>)
    8776:	48ad      	ldr	r0, [pc, #692]	; (8a2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2c>)
    8778:	f7ff baea 	b.w	7d50 <isr+0x3c0>
				ccm_rx_increment = 1;
    877c:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    8780:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8784:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8788:	06dc      	lsls	r4, r3, #27
    878a:	d40f      	bmi.n	87ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ac>
			    (_radio.conn_curr->pause_rx &&
    878c:	f8db 4114 	ldr.w	r4, [fp, #276]	; 0x114
    8790:	7a33      	ldrb	r3, [r6, #8]
    8792:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    8796:	f012 0f04 	tst.w	r2, #4
    879a:	d11a      	bne.n	87d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7d2>
			switch (pdu_data_rx->ll_id) {
    879c:	f013 0303 	ands.w	r3, r3, #3
    87a0:	f000 81df 	beq.w	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
    87a4:	2b02      	cmp	r3, #2
    87a6:	d84b      	bhi.n	8840 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x840>
				*rx_enqueue = 1;
    87a8:	2501      	movs	r5, #1
    87aa:	e0bf      	b.n	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
			     !radio_ccm_mic_is_valid()) ||
    87ac:	f002 facc 	bl	ad48 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    87b0:	2800      	cmp	r0, #0
    87b2:	d1eb      	bne.n	878c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78c>
				_radio.state = STATE_CLOSE;
    87b4:	2303      	movs	r3, #3
    87b6:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    87ba:	f002 f861 	bl	a880 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    87be:	f002 f87d 	bl	a8bc <radio_is_ready>
    87c2:	4605      	mov	r5, r0
    87c4:	b390      	cbz	r0, 882c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82c>
    87c6:	4b95      	ldr	r3, [pc, #596]	; (8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>)
    87c8:	9301      	str	r3, [sp, #4]
    87ca:	9300      	str	r3, [sp, #0]
    87cc:	4b95      	ldr	r3, [pc, #596]	; (8a24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa24>)
    87ce:	f7ff b935 	b.w	7a3c <isr+0xac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    87d2:	f003 0103 	and.w	r1, r3, #3
    87d6:	2903      	cmp	r1, #3
    87d8:	d1ec      	bne.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    87da:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    87de:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    87e0:	2800      	cmp	r0, #0
    87e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
    87e6:	db15      	blt.n	8814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x814>
	       (!conn->role &&
    87e8:	b922      	cbnz	r2, 87f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f4>
		((!conn->refresh &&
    87ea:	2902      	cmp	r1, #2
    87ec:	d0d6      	beq.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    87ee:	2911      	cmp	r1, #17
    87f0:	d8e0      	bhi.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    87f2:	e009      	b.n	8808 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x808>
		 (conn->refresh &&
    87f4:	1e8a      	subs	r2, r1, #2
    87f6:	b2d2      	uxtb	r2, r2
    87f8:	2a09      	cmp	r2, #9
    87fa:	d8f8      	bhi.n	87ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ee>
    87fc:	f240 2005 	movw	r0, #517	; 0x205
    8800:	fa20 f202 	lsr.w	r2, r0, r2
    8804:	07d0      	lsls	r0, r2, #31
    8806:	d4c9      	bmi.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8808:	4a89      	ldr	r2, [pc, #548]	; (8a30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa30>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    880a:	fa22 f101 	lsr.w	r1, r2, r1
    880e:	07c9      	lsls	r1, r1, #31
    8810:	d5d0      	bpl.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    8812:	e7c3      	b.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
	       (conn->role &&
    8814:	b92a      	cbnz	r2, 8822 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x822>
		((!conn->refresh &&
    8816:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8818:	d0c0      	beq.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    881a:	2911      	cmp	r1, #17
    881c:	d8ca      	bhi.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    881e:	4a85      	ldr	r2, [pc, #532]	; (8a34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa34>)
    8820:	e7f3      	b.n	880a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80a>
		 (conn->refresh &&
    8822:	1e8a      	subs	r2, r1, #2
    8824:	2a01      	cmp	r2, #1
    8826:	d9b9      	bls.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8828:	290b      	cmp	r1, #11
    882a:	e7f5      	b.n	8818 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x818>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    882c:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8830:	213d      	movs	r1, #61	; 0x3d
    8832:	f7fd fced 	bl	6210 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    8836:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    883a:	f7fd fa01 	bl	5c40 <connection_release>
    883e:	e6c3      	b.n	85c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c8>
	switch (pdu_data_rx->llctrl.opcode) {
    8840:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    8842:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    8846:	2d19      	cmp	r5, #25
    8848:	f200 8193 	bhi.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
    884c:	e8df f015 	tbh	[pc, r5, lsl #1]
    8850:	0086001a 	.word	0x0086001a
    8854:	019100bd 	.word	0x019100bd
    8858:	01910191 	.word	0x01910191
    885c:	018b0191 	.word	0x018b0191
    8860:	00fa00c8 	.word	0x00fa00c8
    8864:	01910191 	.word	0x01910191
    8868:	01910120 	.word	0x01910120
    886c:	019100dd 	.word	0x019100dd
    8870:	01840191 	.word	0x01840191
    8874:	01910191 	.word	0x01910191
    8878:	01910191 	.word	0x01910191
    887c:	01910191 	.word	0x01910191
    8880:	01a50191 	.word	0x01a50191
		if (!_radio.conn_curr->role ||
    8884:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8888:	2b00      	cmp	r3, #0
    888a:	f280 8172 	bge.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    888e:	7a71      	ldrb	r1, [r6, #9]
    8890:	2000      	movs	r0, #0
    8892:	f7fc fb75 	bl	4f80 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8896:	2800      	cmp	r0, #0
    8898:	f000 816b 	beq.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    889c:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    88a0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    88a2:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    88a4:	041a      	lsls	r2, r3, #16
    88a6:	f100 83c6 	bmi.w	9036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1036>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    88aa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    88ae:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    88b2:	429a      	cmp	r2, r3
    88b4:	d008      	beq.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
    88b6:	4b59      	ldr	r3, [pc, #356]	; (8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>)
    88b8:	9301      	str	r3, [sp, #4]
    88ba:	9300      	str	r3, [sp, #0]
    88bc:	4b5e      	ldr	r3, [pc, #376]	; (8a38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa38>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    88be:	4a58      	ldr	r2, [pc, #352]	; (8a20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa20>)
    88c0:	4959      	ldr	r1, [pc, #356]	; (8a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa28>)
    88c2:	485e      	ldr	r0, [pc, #376]	; (8a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3c>)
    88c4:	f7ff ba44 	b.w	7d50 <isr+0x3c0>
	if (_radio.conn_upd == 0) {
    88c8:	f8db 2180 	ldr.w	r2, [fp, #384]	; 0x180
    88cc:	b90a      	cbnz	r2, 88d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d2>
		_radio.conn_upd = conn;
    88ce:	f8cb 4180 	str.w	r4, [fp, #384]	; 0x180
	conn->llcp.conn_upd.win_size =
    88d2:	7b32      	ldrb	r2, [r6, #12]
    88d4:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    88d8:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    88dc:	f240 42e2 	movw	r2, #1250	; 0x4e2
    88e0:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    88e2:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    88e4:	7c30      	ldrb	r0, [r6, #16]
    88e6:	7bf2      	ldrb	r2, [r6, #15]
    88e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    88ec:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    88f0:	7cb0      	ldrb	r0, [r6, #18]
    88f2:	7c72      	ldrb	r2, [r6, #17]
    88f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    88f8:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    88fc:	7cf2      	ldrb	r2, [r6, #19]
    88fe:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    8900:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8904:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    8908:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    890c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    8910:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    8914:	f36f 0282 	bfc	r2, #2, #1
    8918:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    891c:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    891e:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    8920:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    8922:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    8926:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    892a:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    892c:	f8db 1114 	ldr.w	r1, [fp, #276]	; 0x114
    8930:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    8934:	f083 0302 	eor.w	r3, r3, #2
    8938:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    893c:	f1b9 0f00 	cmp.w	r9, #0
    8940:	f43f ae90 	beq.w	8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>
				_radio.conn_curr->ccm_rx.counter++;
    8944:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    8948:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    894c:	3201      	adds	r2, #1
    894e:	f143 0300 	adc.w	r3, r3, #0
    8952:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    8956:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    895a:	e683      	b.n	8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>
		if (!_radio.conn_curr->role ||
    895c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8960:	2b00      	cmp	r3, #0
    8962:	f280 8106 	bge.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    8966:	7a71      	ldrb	r1, [r6, #9]
    8968:	2001      	movs	r0, #1
    896a:	f7fc fb09 	bl	4f80 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    896e:	2800      	cmp	r0, #0
    8970:	f000 80ff 	beq.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8974:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    8978:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    897a:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    897c:	041b      	lsls	r3, r3, #16
    897e:	f100 835a 	bmi.w	9036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1036>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8982:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    8986:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    898a:	429a      	cmp	r2, r3
    898c:	d004      	beq.n	8998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x998>
    898e:	4b23      	ldr	r3, [pc, #140]	; (8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>)
    8990:	9301      	str	r3, [sp, #4]
    8992:	9300      	str	r3, [sp, #0]
    8994:	4b2a      	ldr	r3, [pc, #168]	; (8a40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa40>)
    8996:	e792      	b.n	88be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8be>
	memcpy(&conn->llcp.chan_map.chm[0],
    8998:	2205      	movs	r2, #5
    899a:	f106 010c 	add.w	r1, r6, #12
    899e:	f104 0061 	add.w	r0, r4, #97	; 0x61
    89a2:	f7f9 f893 	bl	1acc <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    89a6:	7c73      	ldrb	r3, [r6, #17]
    89a8:	7cb2      	ldrb	r2, [r6, #18]
    89aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    89ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    89b2:	2302      	movs	r3, #2
    89b4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    89b8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    89bc:	2500      	movs	r5, #0
	conn->llcp_ack--;
    89be:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    89c0:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    89c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    89c8:	e7b0      	b.n	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    89ca:	7a71      	ldrb	r1, [r6, #9]
    89cc:	2002      	movs	r0, #2
    89ce:	f7fc fad7 	bl	4f80 <pdu_len_cmp>
    89d2:	2800      	cmp	r0, #0
    89d4:	f000 80cd 	beq.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		_radio.conn_curr->llcp_terminate.reason_peer =
    89d8:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    89da:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    89de:	e0c0      	b.n	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
		if (!_radio.conn_curr->role ||
    89e0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    89e4:	2b00      	cmp	r3, #0
    89e6:	f280 80c4 	bge.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    89ea:	7a71      	ldrb	r1, [r6, #9]
    89ec:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    89ee:	f7fc fac7 	bl	4f80 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    89f2:	2800      	cmp	r0, #0
    89f4:	f000 80bd 	beq.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    89f8:	4651      	mov	r1, sl
    89fa:	4620      	mov	r0, r4
    89fc:	f7fe fa84 	bl	6f08 <feature_rsp_send>
    8a00:	4605      	mov	r5, r0
		if (!nack) {
    8a02:	2800      	cmp	r0, #0
    8a04:	f47f ae2d 	bne.w	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
    8a08:	e790      	b.n	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
		if (_radio.conn_curr->role ||
    8a0a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8a0e:	2b00      	cmp	r3, #0
    8a10:	f2c0 80af 	blt.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    8a14:	7a71      	ldrb	r1, [r6, #9]
    8a16:	200e      	movs	r0, #14
    8a18:	e7e9      	b.n	89ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ee>
    8a1a:	bf00      	nop
    8a1c:	0000cbb3 	.word	0x0000cbb3
    8a20:	0000d49b 	.word	0x0000d49b
    8a24:	0000dcfc 	.word	0x0000dcfc
    8a28:	0000d4ea 	.word	0x0000d4ea
    8a2c:	0000e249 	.word	0x0000e249
    8a30:	00022060 	.word	0x00022060
    8a34:	00022040 	.word	0x00022040
    8a38:	0000e018 	.word	0x0000e018
    8a3c:	0000e26f 	.word	0x0000e26f
    8a40:	0000e024 	.word	0x0000e024
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    8a44:	7a71      	ldrb	r1, [r6, #9]
    8a46:	2009      	movs	r0, #9
    8a48:	f7fc fa9a 	bl	4f80 <pdu_len_cmp>
    8a4c:	2800      	cmp	r0, #0
    8a4e:	f000 8090 	beq.w	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8a52:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    8a54:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    8a5a:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    8a5e:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    8a62:	f043 0310 	orr.w	r3, r3, #16
    8a66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    8a6a:	7bb2      	ldrb	r2, [r6, #14]
    8a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8a70:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    8a74:	f3c2 0210 	ubfx	r2, r2, #0, #17
    8a78:	4013      	ands	r3, r2
    8a7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    8a7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    8a82:	f043 0320 	orr.w	r3, r3, #32
    8a86:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    8a8a:	2300      	movs	r3, #0
    8a8c:	86a3      	strh	r3, [r4, #52]	; 0x34
    8a8e:	e68b      	b.n	87a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    8a90:	7a71      	ldrb	r1, [r6, #9]
    8a92:	200c      	movs	r0, #12
    8a94:	f7fc fa74 	bl	4f80 <pdu_len_cmp>
    8a98:	2800      	cmp	r0, #0
    8a9a:	d06a      	beq.n	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
	if (!conn->llcp_version.tx) {
    8a9c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    8aa0:	f013 0501 	ands.w	r5, r3, #1
    8aa4:	d152      	bne.n	8b4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8aa6:	48b4      	ldr	r0, [pc, #720]	; (8d78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd78>)
    8aa8:	f7fa faf5 	bl	3096 <mem_acquire>
		if (!node_tx) {
    8aac:	4601      	mov	r1, r0
    8aae:	2800      	cmp	r0, #0
    8ab0:	f43f add7 	beq.w	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
		conn->llcp_version.tx = 1;
    8ab4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    8ab8:	f043 0301 	orr.w	r3, r3, #1
    8abc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8ac0:	7903      	ldrb	r3, [r0, #4]
    8ac2:	f043 0303 	orr.w	r3, r3, #3
    8ac6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    8ac8:	2306      	movs	r3, #6
    8aca:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    8acc:	230c      	movs	r3, #12
    8ace:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    8ad0:	2309      	movs	r3, #9
    8ad2:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    8ad4:	f06f 030e 	mvn.w	r3, #14
    8ad8:	7243      	strb	r3, [r0, #9]
    8ada:	2305      	movs	r3, #5
    8adc:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    8ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8ae2:	72c3      	strb	r3, [r0, #11]
    8ae4:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    8ae6:	4620      	mov	r0, r4
    8ae8:	f7fe f9f4 	bl	6ed4 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    8aec:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    8af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8af4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    8af8:	f001 ff14 	bl	a924 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8afc:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    8afe:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8b00:	2201      	movs	r2, #1
    8b02:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    8b06:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8b0a:	7003      	strb	r3, [r0, #0]
    8b0c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    8b0e:	b1c2      	cbz	r2, 8b42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb42>
		pdu_data_tx->md = 1;
    8b10:	f043 0310 	orr.w	r3, r3, #16
    8b14:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    8b16:	7b33      	ldrb	r3, [r6, #12]
    8b18:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    8b1c:	7bb2      	ldrb	r2, [r6, #14]
    8b1e:	7b73      	ldrb	r3, [r6, #13]
    8b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b24:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    8b28:	7bf3      	ldrb	r3, [r6, #15]
    8b2a:	7c32      	ldrb	r2, [r6, #16]
    8b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b30:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    8b34:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    8b38:	f043 0302 	orr.w	r3, r3, #2
    8b3c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    8b40:	e6f4      	b.n	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
		pdu_data_tx->md = 0;
    8b42:	f362 1304 	bfi	r3, r2, #4, #1
    8b46:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    8b48:	4615      	mov	r5, r2
    8b4a:	e7e4      	b.n	8b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb16>
	} else if (!conn->llcp_version.rx) {
    8b4c:	f013 0302 	ands.w	r3, r3, #2
    8b50:	d107      	bne.n	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
		conn->procedure_expire = 0;
    8b52:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    8b54:	2501      	movs	r5, #1
    8b56:	e7de      	b.n	8b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    8b58:	7a71      	ldrb	r1, [r6, #9]
    8b5a:	2011      	movs	r0, #17
    8b5c:	f7fc fa10 	bl	4f80 <pdu_len_cmp>
    8b60:	b138      	cbz	r0, 8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
	u8_t rx_enqueue = 0;
    8b62:	2500      	movs	r5, #0
    8b64:	e6e2      	b.n	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    8b66:	7a71      	ldrb	r1, [r6, #9]
    8b68:	2007      	movs	r0, #7
    8b6a:	f7fc fa09 	bl	4f80 <pdu_len_cmp>
    8b6e:	2800      	cmp	r0, #0
    8b70:	d18b      	bne.n	8a8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8b72:	4881      	ldr	r0, [pc, #516]	; (8d78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd78>)
    8b74:	f7fa fa8f 	bl	3096 <mem_acquire>
	if (!node_tx) {
    8b78:	4601      	mov	r1, r0
    8b7a:	2800      	cmp	r0, #0
    8b7c:	f43f ad71 	beq.w	8662 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x662>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8b80:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    8b82:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8b84:	f043 0303 	orr.w	r3, r3, #3
    8b88:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    8b8a:	2302      	movs	r3, #2
    8b8c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    8b8e:	2307      	movs	r3, #7
    8b90:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    8b92:	4620      	mov	r0, r4
    8b94:	f7fe f970 	bl	6e78 <ctrl_tx_enqueue>
    8b98:	e7e3      	b.n	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
		if (_radio.conn_curr->role ||
    8b9a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	dbe7      	blt.n	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    8ba2:	7a71      	ldrb	r1, [r6, #9]
    8ba4:	2019      	movs	r0, #25
    8ba6:	f7fc f9eb 	bl	4f80 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    8baa:	2800      	cmp	r0, #0
    8bac:	d0e1      	beq.n	8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
			if (!(p->phys & 0x01)) {
    8bae:	7b35      	ldrb	r5, [r6, #12]
    8bb0:	f015 0501 	ands.w	r5, r5, #1
    8bb4:	f43f aeba 	beq.w	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
			if (conn->llcp_req != conn->llcp_ack) {
    8bb8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    8bbc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8bc0:	429a      	cmp	r2, r3
    8bc2:	d1ce      	bne.n	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
			memcpy(&conn->llcp.chan_map.chm[0],
    8bc4:	2205      	movs	r2, #5
    8bc6:	496d      	ldr	r1, [pc, #436]	; (8d7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd7c>)
    8bc8:	f104 0061 	add.w	r0, r4, #97	; 0x61
    8bcc:	f7f8 ff7e 	bl	1acc <memcpy>
			conn->llcp.chan_map.initiate = 1;
    8bd0:	2301      	movs	r3, #1
    8bd2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    8bd6:	2302      	movs	r3, #2
    8bd8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    8bdc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8be0:	3b01      	subs	r3, #1
    8be2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    8be6:	e7bc      	b.n	8b62 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb62>
		if (_radio.crc_expire == 0) {
    8be8:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
    8bec:	b913      	cbnz	r3, 8bf4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf4>
			_radio.crc_expire = 2;
    8bee:	2302      	movs	r3, #2
    8bf0:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
		_radio.crc_expire--;
    8bf4:	f89b 4119 	ldrb.w	r4, [fp, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    8bf8:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		_radio.crc_expire--;
    8bfc:	3c01      	subs	r4, #1
    8bfe:	b2e4      	uxtb	r4, r4
    8c00:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    8c04:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    8c06:	fab4 f484 	clz	r4, r4
    8c0a:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    8c0c:	b91d      	cbnz	r5, 8c16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc16>
			_radio.conn_curr->supervision_expire =
    8c0e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    8c10:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    8c12:	46a8      	mov	r8, r5
    8c14:	e52c      	b.n	8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>
	u8_t rx_enqueue = 0;
    8c16:	2500      	movs	r5, #0
    8c18:	e7fb      	b.n	8c12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc12>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8c1a:	2303      	movs	r3, #3
    8c1c:	e549      	b.n	86b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b2>
			radio_switch_complete_and_disable();
    8c1e:	f001 fe9f 	bl	a960 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    8c22:	990d      	ldr	r1, [sp, #52]	; 0x34
    8c24:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8c28:	780b      	ldrb	r3, [r1, #0]
    8c2a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    8c2e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    8c32:	f3c2 0240 	ubfx	r2, r2, #1, #1
    8c36:	f362 0382 	bfi	r3, r2, #2, #1
    8c3a:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    8c3c:	f7fd f89c 	bl	5d78 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    8c40:	f001 fe3c 	bl	a8bc <radio_is_ready>
    8c44:	2800      	cmp	r0, #0
    8c46:	f43f acc1 	beq.w	85cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5cc>
    8c4a:	4b4d      	ldr	r3, [pc, #308]	; (8d80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd80>)
    8c4c:	9301      	str	r3, [sp, #4]
    8c4e:	9300      	str	r3, [sp, #0]
    8c50:	4b4c      	ldr	r3, [pc, #304]	; (8d84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd84>)
    8c52:	f7fe bef3 	b.w	7a3c <isr+0xac>
		radio_tmr_tifs_set(RADIO_TIFS);
    8c56:	2096      	movs	r0, #150	; 0x96
    8c58:	f001 fefc 	bl	aa54 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8c5c:	2000      	movs	r0, #0
    8c5e:	f001 fe69 	bl	a934 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    8c62:	f001 ffd3 	bl	ac0c <radio_tmr_end_capture>
    8c66:	e7dc      	b.n	8c22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc22>
		LL_ASSERT(0);
    8c68:	4b45      	ldr	r3, [pc, #276]	; (8d80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd80>)
    8c6a:	9301      	str	r3, [sp, #4]
    8c6c:	9300      	str	r3, [sp, #0]
    8c6e:	4b46      	ldr	r3, [pc, #280]	; (8d88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd88>)
    8c70:	f7fe bf43 	b.w	7afa <isr+0x16a>
	switch (_radio.role) {
    8c74:	7cc2      	ldrb	r2, [r0, #19]
    8c76:	2a04      	cmp	r2, #4
    8c78:	f200 81c4 	bhi.w	9004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1004>
    8c7c:	e8df f012 	tbh	[pc, r2, lsl #1]
    8c80:	000501b2 	.word	0x000501b2
    8c84:	00bb005b 	.word	0x00bb005b
    8c88:	00bb      	.short	0x00bb
	if ((_radio.state == STATE_CLOSE) &&
    8c8a:	2b03      	cmp	r3, #3
    8c8c:	d109      	bne.n	8ca2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca2>
	    (_radio.advertiser.chan_map_current != 0)) {
    8c8e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    8c92:	075d      	lsls	r5, r3, #29
    8c94:	d005      	beq.n	8ca2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca2>
		adv_setup();
    8c96:	f7fd f8c7 	bl	5e28 <adv_setup>
		radio_tx_enable();
    8c9a:	f001 fdeb 	bl	a874 <radio_tx_enable>
    8c9e:	f7fe bedc 	b.w	7a5a <isr+0xca>
		radio_filter_disable();
    8ca2:	f001 fea7 	bl	a9f4 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    8ca6:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8caa:	2b03      	cmp	r3, #3
    8cac:	f040 8087 	bne.w	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
		    (!_radio.advertiser.is_hdcd)) {
    8cb0:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    8cb4:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    8cb8:	f040 8081 	bne.w	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
			entropy_nrf_get_entropy_isr(_radio.entropy,
    8cbc:	2201      	movs	r2, #1
    8cbe:	a90d      	add	r1, sp, #52	; 0x34
    8cc0:	f8db 0004 	ldr.w	r0, [fp, #4]
    8cc4:	f002 fdb2 	bl	b82c <entropy_nrf_get_entropy_isr>
			random_delay %= 10;
    8cc8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    8ccc:	482f      	ldr	r0, [pc, #188]	; (8d8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8c>)
			random_delay %= 10;
    8cce:	230a      	movs	r3, #10
    8cd0:	fbb1 f2f3 	udiv	r2, r1, r3
    8cd4:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    8cd8:	3201      	adds	r2, #1
    8cda:	b2d2      	uxtb	r2, r2
    8cdc:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    8ce0:	b2d2      	uxtb	r2, r2
    8ce2:	fba2 0100 	umull	r0, r1, r2, r0
    8ce6:	23e8      	movs	r3, #232	; 0xe8
    8ce8:	fb03 1102 	mla	r1, r3, r2, r1
    8cec:	a320      	add	r3, pc, #128	; (adr r3, 8d70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd70>)
    8cee:	e9d3 2300 	ldrd	r2, r3, [r3]
    8cf2:	f7f7 fa8f 	bl	214 <__aeabi_uldivmod>
			ticker_status =
    8cf6:	f640 734b 	movw	r3, #3915	; 0xf4b
    8cfa:	9306      	str	r3, [sp, #24]
    8cfc:	4b24      	ldr	r3, [pc, #144]	; (8d90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd90>)
    8cfe:	9305      	str	r3, [sp, #20]
    8d00:	9404      	str	r4, [sp, #16]
    8d02:	b283      	uxth	r3, r0
    8d04:	9403      	str	r4, [sp, #12]
    8d06:	9402      	str	r4, [sp, #8]
    8d08:	9401      	str	r4, [sp, #4]
    8d0a:	9400      	str	r4, [sp, #0]
    8d0c:	2205      	movs	r2, #5
    8d0e:	4621      	mov	r1, r4
    8d10:	4620      	mov	r0, r4
    8d12:	f7fb f887 	bl	3e24 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8d16:	f030 0302 	bics.w	r3, r0, #2
    8d1a:	d050      	beq.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
    8d1c:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8d20:	2b05      	cmp	r3, #5
    8d22:	d04c      	beq.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
    8d24:	4b16      	ldr	r3, [pc, #88]	; (8d80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd80>)
    8d26:	9301      	str	r3, [sp, #4]
    8d28:	9300      	str	r3, [sp, #0]
    8d2a:	4a1a      	ldr	r2, [pc, #104]	; (8d94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd94>)
    8d2c:	4b1a      	ldr	r3, [pc, #104]	; (8d98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd98>)
    8d2e:	491b      	ldr	r1, [pc, #108]	; (8d9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd9c>)
    8d30:	481b      	ldr	r0, [pc, #108]	; (8da0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda0>)
    8d32:	f7ff b80d 	b.w	7d50 <isr+0x3c0>
	if (_radio.state == STATE_CLOSE) {
    8d36:	2b03      	cmp	r3, #3
    8d38:	d134      	bne.n	8da4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda4>
		radio_tmr_tifs_set(RADIO_TIFS);
    8d3a:	2096      	movs	r0, #150	; 0x96
    8d3c:	f001 fe8a 	bl	aa54 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8d40:	2300      	movs	r3, #0
    8d42:	4619      	mov	r1, r3
    8d44:	461a      	mov	r2, r3
    8d46:	4618      	mov	r0, r3
    8d48:	f001 fe00 	bl	a94c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8d4c:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
    8d50:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    8d54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8d58:	3008      	adds	r0, #8
    8d5a:	f001 fd6b 	bl	a834 <radio_pkt_rx_set>
		radio_rssi_measure();
    8d5e:	f001 fe0d 	bl	a97c <radio_rssi_measure>
		_radio.state = STATE_RX;
    8d62:	2301      	movs	r3, #1
    8d64:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    8d68:	f001 fd7e 	bl	a868 <radio_rx_enable>
    8d6c:	f7fe be75 	b.w	7a5a <isr+0xca>
    8d70:	1afd498d 	.word	0x1afd498d
    8d74:	00000007 	.word	0x00000007
    8d78:	200006cc 	.word	0x200006cc
    8d7c:	20000692 	.word	0x20000692
    8d80:	0000cbb3 	.word	0x0000cbb3
    8d84:	0000dd0c 	.word	0x0000dd0c
    8d88:	0000dd18 	.word	0x0000dd18
    8d8c:	d4a51000 	.word	0xd4a51000
    8d90:	00005841 	.word	0x00005841
    8d94:	0000d49b 	.word	0x0000d49b
    8d98:	0000dd2b 	.word	0x0000dd2b
    8d9c:	0000d4ea 	.word	0x0000d4ea
    8da0:	0000e2b1 	.word	0x0000e2b1
		radio_filter_disable();
    8da4:	f001 fe26 	bl	a9f4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    8da8:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8dac:	2b05      	cmp	r3, #5
    8dae:	d106      	bne.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8db0:	2300      	movs	r3, #0
    8db2:	9300      	str	r3, [sp, #0]
    8db4:	2204      	movs	r2, #4
    8db6:	4619      	mov	r1, r3
    8db8:	4618      	mov	r0, r3
    8dba:	f7fb f881 	bl	3ec0 <ticker_stop>
	_radio.role = ROLE_NONE;
    8dbe:	2400      	movs	r4, #0
    8dc0:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    8dc4:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    8dc8:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    8dcc:	f001 fec0 	bl	ab50 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8dd0:	4622      	mov	r2, r4
    8dd2:	4621      	mov	r1, r4
    8dd4:	4620      	mov	r0, r4
    8dd6:	4b9c      	ldr	r3, [pc, #624]	; (9048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1048>)
    8dd8:	f7fa fa16 	bl	3208 <mayfly_enqueue>
	LL_ASSERT(!retval);
    8ddc:	4604      	mov	r4, r0
    8dde:	2800      	cmp	r0, #0
    8de0:	f000 8116 	beq.w	9010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1010>
    8de4:	4b99      	ldr	r3, [pc, #612]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8de6:	9301      	str	r3, [sp, #4]
    8de8:	9300      	str	r3, [sp, #0]
    8dea:	4a99      	ldr	r2, [pc, #612]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8dec:	4b99      	ldr	r3, [pc, #612]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8dee:	499a      	ldr	r1, [pc, #616]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8df0:	489a      	ldr	r0, [pc, #616]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8df2:	f7fe bfad 	b.w	7d50 <isr+0x3c0>
	if (_radio.conn_curr == 0) {
    8df6:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    8dfa:	2800      	cmp	r0, #0
    8dfc:	d0df      	beq.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    8dfe:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    8e02:	b189      	cbz	r1, 8e28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe28>
    8e04:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8e08:	2b03      	cmp	r3, #3
    8e0a:	d003      	beq.n	8e14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe14>
    8e0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8e10:	07dc      	lsls	r4, r3, #31
    8e12:	d509      	bpl.n	8e28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe28>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8e14:	f7fd f9fc 	bl	6210 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8e18:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8e1c:	f7fc ff10 	bl	5c40 <connection_release>
			_radio.conn_curr = NULL;
    8e20:	2300      	movs	r3, #0
    8e22:	f8cb 3114 	str.w	r3, [fp, #276]	; 0x114
    8e26:	e7ca      	b.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
	latency_event = _radio.conn_curr->latency_event;
    8e28:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    8e2a:	f89b 7118 	ldrb.w	r7, [fp, #280]	; 0x118
	elapsed_event = latency_event + 1;
    8e2e:	1c75      	adds	r5, r6, #1
    8e30:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    8e32:	2f00      	cmp	r7, #0
    8e34:	d06d      	beq.n	8f12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf12>
		if (_radio.role == ROLE_SLAVE) {
    8e36:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8e3a:	2b03      	cmp	r3, #3
    8e3c:	d15d      	bne.n	8efa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xefa>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8e3e:	f001 fed9 	bl	abf4 <radio_tmr_aa_restore>
    8e42:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    8e44:	f001 fedc 	bl	ac00 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    8e48:	f8db 7114 	ldr.w	r7, [fp, #276]	; 0x114
    8e4c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 9078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1078>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8e50:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    8e54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    8e56:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    8e5a:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8e5c:	a378      	add	r3, pc, #480	; (adr r3, 9040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1040>)
    8e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    8e62:	d83d      	bhi.n	8ee0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8e64:	fba0 0109 	umull	r0, r1, r0, r9
    8e68:	f7f7 f9d4 	bl	214 <__aeabi_uldivmod>
    8e6c:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8e6e:	ebaa 0008 	sub.w	r0, sl, r8
    8e72:	a373      	add	r3, pc, #460	; (adr r3, 9040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1040>)
    8e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    8e78:	fba0 0109 	umull	r0, r1, r0, r9
    8e7c:	f7f7 f9ca 	bl	214 <__aeabi_uldivmod>
    8e80:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    8e82:	2200      	movs	r2, #0
    8e84:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    8e86:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    8e88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    8e8c:	b37a      	cbz	r2, 8eee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeee>
				if (pdu_data_tx->len ||
    8e8e:	7952      	ldrb	r2, [r2, #5]
    8e90:	b912      	cbnz	r2, 8e98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe98>
    8e92:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    8e96:	b10a      	cbz	r2, 8e9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe9c>
					_radio.conn_curr->latency_event = 0;
    8e98:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    8e9a:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    8e9c:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    8ea0:	2100      	movs	r1, #0
    8ea2:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    8ea4:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8ea8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    8eaa:	b1ba      	cbz	r2, 8edc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xedc>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    8eac:	4295      	cmp	r5, r2
    8eae:	f080 8091 	bcs.w	8fd4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfd4>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8eb2:	1b52      	subs	r2, r2, r5
    8eb4:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    8eb6:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    8eb8:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8eba:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    8ebc:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    8ebe:	f240 808b 	bls.w	8fd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfd8>
			else if (_radio.role == ROLE_SLAVE) {
    8ec2:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8ec6:	2a03      	cmp	r2, #3
    8ec8:	d108      	bne.n	8edc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xedc>
				if (latency_event != 0) {
    8eca:	2e00      	cmp	r6, #0
    8ecc:	f040 8084 	bne.w	8fd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfd8>
					force = _radio.conn_curr->slave.force & 0x01;
    8ed0:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    8ed2:	087a      	lsrs	r2, r7, #1
					if (force) {
    8ed4:	f017 0701 	ands.w	r7, r7, #1
    8ed8:	d135      	bne.n	8f46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf46>
					_radio.conn_curr->slave.force >>= 1;
    8eda:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    8edc:	2700      	movs	r7, #0
    8ede:	e035      	b.n	8f4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8ee0:	fba8 0109 	umull	r0, r1, r8, r9
    8ee4:	f7f7 f996 	bl	214 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8ee8:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8eea:	b284      	uxth	r4, r0
    8eec:	e7c9      	b.n	8e82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe82>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    8eee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    8ef2:	07d2      	lsls	r2, r2, #31
    8ef4:	d5d2      	bpl.n	8e9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe9c>
				_radio.conn_curr->latency_event =
    8ef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8ef8:	e7cf      	b.n	8e9a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe9a>
		} else if (reason_peer) {
    8efa:	b141      	cbz	r1, 8f0e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0e>
			_radio.conn_curr->master.terminate_ack = 1;
    8efc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8f00:	f043 0301 	orr.w	r3, r3, #1
    8f04:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    8f08:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    8f0a:	461c      	mov	r4, r3
    8f0c:	e7c6      	b.n	8e9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe9c>
	ticks_drift_minus = 0;
    8f0e:	460b      	mov	r3, r1
    8f10:	e7fb      	b.n	8f0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0a>
	else if (_radio.conn_curr->connect_expire) {
    8f12:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    8f14:	b184      	cbz	r4, 8f38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf38>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    8f16:	42a5      	cmp	r5, r4
    8f18:	d204      	bcs.n	8f24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf24>
			_radio.conn_curr->connect_expire -= elapsed_event;
    8f1a:	1b64      	subs	r4, r4, r5
    8f1c:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    8f1e:	463c      	mov	r4, r7
    8f20:	4623      	mov	r3, r4
    8f22:	e7bf      	b.n	8ea4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8f24:	213e      	movs	r1, #62	; 0x3e
    8f26:	f7fd f973 	bl	6210 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8f2a:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8f2e:	f7fc fe87 	bl	5c40 <connection_release>
			_radio.conn_curr = NULL;
    8f32:	f8cb 7114 	str.w	r7, [fp, #276]	; 0x114
    8f36:	e742      	b.n	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
		if (!_radio.conn_curr->supervision_expire) {
    8f38:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d1f0      	bne.n	8f20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf20>
			_radio.conn_curr->supervision_expire =
    8f3e:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    8f40:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    8f42:	461c      	mov	r4, r3
    8f44:	e7ae      	b.n	8ea4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea4>
						_radio.conn_curr->slave.force |=
    8f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8f4a:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    8f4c:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    8f4e:	b11a      	cbz	r2, 8f58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf58>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    8f50:	4295      	cmp	r5, r2
    8f52:	d243      	bcs.n	8fdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfdc>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    8f54:	1b55      	subs	r5, r2, r5
    8f56:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8f58:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    8f5c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    8f60:	4291      	cmp	r1, r2
    8f62:	d006      	beq.n	8f72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf72>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    8f64:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8f68:	3a01      	subs	r2, #1
    8f6a:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    8f6c:	bf9c      	itt	ls
    8f6e:	2200      	movls	r2, #0
    8f70:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    8f72:	b917      	cbnz	r7, 8f7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf7a>
    8f74:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    8f76:	42b2      	cmp	r2, r6
    8f78:	d032      	beq.n	8fe0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfe0>
		lazy = _radio.conn_curr->latency_event + 1;
    8f7a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    8f7c:	3101      	adds	r1, #1
    8f7e:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    8f80:	b924      	cbnz	r4, 8f8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8c>
    8f82:	b91b      	cbnz	r3, 8f8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8c>
    8f84:	b911      	cbnz	r1, 8f8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8c>
	    (lazy != 0) || (force != 0)) {
    8f86:	2f00      	cmp	r7, #0
    8f88:	f43f af19 	beq.w	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8f8c:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    8f90:	4a33      	ldr	r2, [pc, #204]	; (9060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1060>)
    8f92:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8f94:	3507      	adds	r5, #7
		ticker_status =
    8f96:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8f98:	b2ed      	uxtb	r5, r5
		ticker_status =
    8f9a:	9205      	str	r2, [sp, #20]
    8f9c:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    8f9e:	9506      	str	r5, [sp, #24]
		ticker_status =
    8fa0:	4623      	mov	r3, r4
    8fa2:	9704      	str	r7, [sp, #16]
    8fa4:	9102      	str	r1, [sp, #8]
    8fa6:	9101      	str	r1, [sp, #4]
    8fa8:	462a      	mov	r2, r5
    8faa:	4608      	mov	r0, r1
    8fac:	f7fa ff3a 	bl	3e24 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8fb0:	f030 0302 	bics.w	r3, r0, #2
    8fb4:	f43f af03 	beq.w	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
    8fb8:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8fbc:	429d      	cmp	r5, r3
    8fbe:	f43f aefe 	beq.w	8dbe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbe>
    8fc2:	4b22      	ldr	r3, [pc, #136]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8fc4:	9301      	str	r3, [sp, #4]
    8fc6:	9300      	str	r3, [sp, #0]
    8fc8:	4a21      	ldr	r2, [pc, #132]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8fca:	4b26      	ldr	r3, [pc, #152]	; (9064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1064>)
    8fcc:	4922      	ldr	r1, [pc, #136]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8fce:	4826      	ldr	r0, [pc, #152]	; (9068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1068>)
    8fd0:	f7fe bebe 	b.w	7d50 <isr+0x3c0>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8fd4:	2108      	movs	r1, #8
    8fd6:	e71d      	b.n	8e14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe14>
				force = 1;
    8fd8:	2701      	movs	r7, #1
    8fda:	e7b7      	b.n	8f4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8fdc:	2122      	movs	r1, #34	; 0x22
    8fde:	e719      	b.n	8e14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe14>
	lazy = 0;
    8fe0:	4639      	mov	r1, r7
    8fe2:	e7cd      	b.n	8f80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf80>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    8fe4:	3b04      	subs	r3, #4
    8fe6:	2b01      	cmp	r3, #1
    8fe8:	d908      	bls.n	8ffc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xffc>
    8fea:	4b18      	ldr	r3, [pc, #96]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8fec:	9301      	str	r3, [sp, #4]
    8fee:	9300      	str	r3, [sp, #0]
    8ff0:	4a17      	ldr	r2, [pc, #92]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8ff2:	4b1e      	ldr	r3, [pc, #120]	; (906c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106c>)
    8ff4:	4918      	ldr	r1, [pc, #96]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8ff6:	481e      	ldr	r0, [pc, #120]	; (9070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1070>)
    8ff8:	f7fe beaa 	b.w	7d50 <isr+0x3c0>
		_radio.state = STATE_NONE;
    8ffc:	2300      	movs	r3, #0
    8ffe:	7503      	strb	r3, [r0, #20]
    9000:	f7fe bd4f 	b.w	7aa2 <isr+0x112>
		LL_ASSERT(0);
    9004:	4b11      	ldr	r3, [pc, #68]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    9006:	9301      	str	r3, [sp, #4]
    9008:	9300      	str	r3, [sp, #0]
    900a:	4b18      	ldr	r3, [pc, #96]	; (906c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106c>)
    900c:	f7fe bd75 	b.w	7afa <isr+0x16a>
	clock_control_off(_radio.hf_clock, NULL);
    9010:	f8db 0000 	ldr.w	r0, [fp]
    9014:	6843      	ldr	r3, [r0, #4]
    9016:	4621      	mov	r1, r4
    9018:	685b      	ldr	r3, [r3, #4]
    901a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    901c:	2201      	movs	r2, #1
    901e:	4611      	mov	r1, r2
    9020:	4620      	mov	r0, r4
    9022:	f7fa f8c9 	bl	31b8 <mayfly_enable>
    9026:	f7fe bd3c 	b.w	7aa2 <isr+0x112>
		LL_ASSERT(0);
    902a:	4b08      	ldr	r3, [pc, #32]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    902c:	9301      	str	r3, [sp, #4]
    902e:	9300      	str	r3, [sp, #0]
    9030:	4b10      	ldr	r3, [pc, #64]	; (9074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1074>)
    9032:	f7fe bd62 	b.w	7afa <isr+0x16a>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9036:	2328      	movs	r3, #40	; 0x28
    9038:	e4cf      	b.n	89da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9da>
    903a:	bf00      	nop
    903c:	f3af 8000 	nop.w
    9040:	1afd498d 	.word	0x1afd498d
    9044:	00000007 	.word	0x00000007
    9048:	200032d0 	.word	0x200032d0
    904c:	0000cbb3 	.word	0x0000cbb3
    9050:	0000d49b 	.word	0x0000d49b
    9054:	0000ddfc 	.word	0x0000ddfc
    9058:	0000d4ea 	.word	0x0000d4ea
    905c:	0000e59b 	.word	0x0000e59b
    9060:	00005889 	.word	0x00005889
    9064:	0000dd39 	.word	0x0000dd39
    9068:	0000e31f 	.word	0x0000e31f
    906c:	0000dd48 	.word	0x0000dd48
    9070:	0000e395 	.word	0x0000e395
    9074:	0000dd5e 	.word	0x0000dd5e
    9078:	3b9aca00 	.word	0x3b9aca00

0000907c <event_master>:
{
    907c:	b5f0      	push	{r4, r5, r6, r7, lr}
    907e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    9080:	4b55      	ldr	r3, [pc, #340]	; (91d8 <event_master+0x15c>)
    9082:	7cda      	ldrb	r2, [r3, #19]
{
    9084:	b085      	sub	sp, #20
    9086:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    9088:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    908c:	461d      	mov	r5, r3
    908e:	b172      	cbz	r2, 90ae <event_master+0x32>
    9090:	4b52      	ldr	r3, [pc, #328]	; (91dc <event_master+0x160>)
    9092:	9301      	str	r3, [sp, #4]
    9094:	9300      	str	r3, [sp, #0]
    9096:	4a52      	ldr	r2, [pc, #328]	; (91e0 <event_master+0x164>)
    9098:	4b52      	ldr	r3, [pc, #328]	; (91e4 <event_master+0x168>)
    909a:	4953      	ldr	r1, [pc, #332]	; (91e8 <event_master+0x16c>)
    909c:	4853      	ldr	r0, [pc, #332]	; (91ec <event_master+0x170>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    909e:	f7f7 fee5 	bl	e6c <printk>
    90a2:	4040      	eors	r0, r0
    90a4:	f380 8811 	msr	BASEPRI, r0
    90a8:	f04f 0004 	mov.w	r0, #4
    90ac:	df02      	svc	2
    90ae:	7c1b      	ldrb	r3, [r3, #16]
    90b0:	8c22      	ldrh	r2, [r4, #32]
    90b2:	b2db      	uxtb	r3, r3
    90b4:	3207      	adds	r2, #7
    90b6:	4293      	cmp	r3, r2
    90b8:	d007      	beq.n	90ca <event_master+0x4e>
    90ba:	4b48      	ldr	r3, [pc, #288]	; (91dc <event_master+0x160>)
    90bc:	9301      	str	r3, [sp, #4]
    90be:	9300      	str	r3, [sp, #0]
    90c0:	4a47      	ldr	r2, [pc, #284]	; (91e0 <event_master+0x164>)
    90c2:	4b48      	ldr	r3, [pc, #288]	; (91e4 <event_master+0x168>)
    90c4:	4948      	ldr	r1, [pc, #288]	; (91e8 <event_master+0x16c>)
    90c6:	484a      	ldr	r0, [pc, #296]	; (91f0 <event_master+0x174>)
    90c8:	e7e9      	b.n	909e <event_master+0x22>
	_radio.role = ROLE_MASTER;
    90ca:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    90cc:	f885 6118 	strb.w	r6, [r5, #280]	; 0x118
	_radio.crc_expire = 0;
    90d0:	f885 6119 	strb.w	r6, [r5, #281]	; 0x119
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    90d4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    90d6:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    90d8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    90da:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    90dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    90de:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    90e2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    90e4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    90e6:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    90e8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    90ea:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    90ec:	f7fc fd5a 	bl	5ba4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    90f0:	a903      	add	r1, sp, #12
    90f2:	4620      	mov	r0, r4
    90f4:	f7fe fbe6 	bl	78c4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    90f8:	9903      	ldr	r1, [sp, #12]
    90fa:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    90fe:	780b      	ldrb	r3, [r1, #0]
    9100:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    9104:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9108:	f362 0382 	bfi	r3, r2, #2, #1
    910c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    910e:	4620      	mov	r0, r4
    9110:	f7fe fad8 	bl	76c4 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    9114:	2096      	movs	r0, #150	; 0x96
    9116:	f001 fc9d 	bl	aa54 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    911a:	4630      	mov	r0, r6
    911c:	f001 fc0a 	bl	a934 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    9120:	9903      	ldr	r1, [sp, #12]
    9122:	4620      	mov	r0, r4
    9124:	f7fc fe28 	bl	5d78 <tx_packet_set>
	if (conn->data_chan_sel) {
    9128:	7f63      	ldrb	r3, [r4, #29]
    912a:	f013 0f40 	tst.w	r3, #64	; 0x40
    912e:	f104 0217 	add.w	r2, r4, #23
    9132:	d021      	beq.n	9178 <event_master+0xfc>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    9134:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9136:	8be1      	ldrh	r1, [r4, #30]
    9138:	3801      	subs	r0, #1
    913a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    913e:	b280      	uxth	r0, r0
    9140:	f7fd fe56 	bl	6df0 <chan_sel_2>
	chan_set(data_chan_use);
    9144:	f7fc fe38 	bl	5db8 <chan_set>
		remainder_us = radio_tmr_start(1,
    9148:	68ea      	ldr	r2, [r5, #12]
    914a:	f107 0109 	add.w	r1, r7, #9
    914e:	2001      	movs	r0, #1
    9150:	f001 fc8c 	bl	aa6c <radio_tmr_start>
		radio_tmr_end_capture();
    9154:	f001 fd5a 	bl	ac0c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    9158:	f894 1020 	ldrb.w	r1, [r4, #32]
    915c:	3107      	adds	r1, #7
    915e:	463a      	mov	r2, r7
    9160:	b2c9      	uxtb	r1, r1
    9162:	4620      	mov	r0, r4
    9164:	f7fd fa38 	bl	65d8 <preempt_calc>
	if (0 !=
    9168:	4603      	mov	r3, r0
    916a:	b328      	cbz	r0, 91b8 <event_master+0x13c>
		_radio.state = STATE_STOP;
    916c:	2304      	movs	r3, #4
    916e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    9170:	f001 fb86 	bl	a880 <radio_disable>
}
    9174:	b005      	add	sp, #20
    9176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    9178:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    917a:	7fa6      	ldrb	r6, [r4, #30]
    917c:	fb01 6606 	mla	r6, r1, r6, r6
    9180:	7fe1      	ldrb	r1, [r4, #31]
    9182:	2025      	movs	r0, #37	; 0x25
    9184:	440e      	add	r6, r1
    9186:	fb96 f1f0 	sdiv	r1, r6, r0
    918a:	fb00 6611 	mls	r6, r0, r1, r6
    918e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9190:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    9192:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9194:	5c51      	ldrb	r1, [r2, r1]
    9196:	f006 0607 	and.w	r6, r6, #7
    919a:	fa41 f606 	asr.w	r6, r1, r6
    919e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    91a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    91a4:	d4ce      	bmi.n	9144 <event_master+0xc8>
		chan_index = chan_next % chan_count;
    91a6:	fbb0 f1f3 	udiv	r1, r0, r3
    91aa:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    91ae:	b2c9      	uxtb	r1, r1
    91b0:	4610      	mov	r0, r2
    91b2:	f7fb ff11 	bl	4fd8 <chan_sel_remap>
    91b6:	e7c5      	b.n	9144 <event_master+0xc8>
		ticker_status =
    91b8:	4a0e      	ldr	r2, [pc, #56]	; (91f4 <event_master+0x178>)
    91ba:	4601      	mov	r1, r0
    91bc:	f7fa fefe 	bl	3fbc <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    91c0:	f030 0302 	bics.w	r3, r0, #2
    91c4:	d0d6      	beq.n	9174 <event_master+0xf8>
    91c6:	4b05      	ldr	r3, [pc, #20]	; (91dc <event_master+0x160>)
    91c8:	9301      	str	r3, [sp, #4]
    91ca:	9300      	str	r3, [sp, #0]
    91cc:	4a04      	ldr	r2, [pc, #16]	; (91e0 <event_master+0x164>)
    91ce:	4b05      	ldr	r3, [pc, #20]	; (91e4 <event_master+0x168>)
    91d0:	4905      	ldr	r1, [pc, #20]	; (91e8 <event_master+0x16c>)
    91d2:	4809      	ldr	r0, [pc, #36]	; (91f8 <event_master+0x17c>)
    91d4:	e763      	b.n	909e <event_master+0x22>
    91d6:	bf00      	nop
    91d8:	20000578 	.word	0x20000578
    91dc:	0000cbb3 	.word	0x0000cbb3
    91e0:	0000d49b 	.word	0x0000d49b
    91e4:	0000dfb9 	.word	0x0000dfb9
    91e8:	0000d4ea 	.word	0x0000d4ea
    91ec:	0000e102 	.word	0x0000e102
    91f0:	0000e1b5 	.word	0x0000e1b5
    91f4:	000058d5 	.word	0x000058d5
    91f8:	0000e075 	.word	0x0000e075

000091fc <radio_init>:
{
    91fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_radio.hf_clock = hf_clock;
    9200:	4e3c      	ldr	r6, [pc, #240]	; (92f4 <radio_init+0xf8>)
{
    9202:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9204:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
    9208:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    920c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
    9210:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9212:	f44f 7082 	mov.w	r0, #260	; 0x104
    9216:	fb00 4003 	mla	r0, r0, r3, r4
{
    921a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	_radio.sca = sca;
    921e:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    9222:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    9226:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    9228:	f10c 0401 	add.w	r4, ip, #1
    922c:	b2e7      	uxtb	r7, r4
	    (offsetof(struct pdu_data, lldata) +
    922e:	f108 0403 	add.w	r4, r8, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    9232:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    9234:	f109 0e03 	add.w	lr, r9, #3
    9238:	fa5f fe8e 	uxtb.w	lr, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
    923c:	f8a6 812c 	strh.w	r8, [r6, #300]	; 0x12c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    9240:	bf88      	it	hi
    9242:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    9246:	f886 e14c 	strb.w	lr, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    924a:	bf8c      	ite	hi
    924c:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9250:	eb0e 0e4e 	addls.w	lr, lr, lr, lsl #1
	_radio.entropy = entropy;
    9254:	6072      	str	r2, [r6, #4]
	_radio.packet_tx_count = (tx_count_max + 1);
    9256:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    925a:	f109 0204 	add.w	r2, r9, #4
    925e:	b2d2      	uxtb	r2, r2
		_radio.packet_rx_data_pool_size =
    9260:	bf8c      	ite	hi
    9262:	fb18 fe0e 	smulbbhi	lr, r8, lr
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9266:	ea4f 1e0e 	movls.w	lr, lr, lsl #4
	_radio.packet_tx_count = (tx_count_max + 1);
    926a:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    926e:	f8a6 e12e 	strh.w	lr, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    9272:	f886 c16c 	strb.w	ip, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    9276:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    927a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    927e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9282:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    9286:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    928a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    928c:	f04f 0e30 	mov.w	lr, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    9290:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9294:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9296:	f8a6 e130 	strh.w	lr, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    929a:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    929e:	fbb4 fefe 	udiv	lr, r4, lr
	mem_radio += _radio.packet_rx_data_pool_size;
    92a2:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92a4:	18d4      	adds	r4, r2, r3
	_radio.link_rx_pool = mem_radio;
    92a6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    92aa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92ae:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
	_radio.pkt_tx_ctrl_pool = mem_radio;
    92b2:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92b6:	340a      	adds	r4, #10
    92b8:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    92bc:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    92be:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    92c0:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    92c4:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    92c8:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    92ca:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    92ce:	f886 2138 	strb.w	r2, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    92d2:	f886 e132 	strb.w	lr, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    92d6:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    92da:	d003      	beq.n	92e4 <radio_init+0xe8>
		return (retcode + mem_size);
    92dc:	442c      	add	r4, r5
}
    92de:	4620      	mov	r0, r4
    92e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_radio.fc_ena = 1;
    92e4:	2301      	movs	r3, #1
    92e6:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    92ea:	f7fd fcf3 	bl	6cd4 <common_init>
	radio_setup();
    92ee:	f001 f9f1 	bl	a6d4 <radio_setup>
	return retcode;
    92f2:	e7f4      	b.n	92de <radio_init+0xe2>
    92f4:	20000578 	.word	0x20000578

000092f8 <ll_reset>:
{
    92f8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    92fa:	2103      	movs	r1, #3
    92fc:	2005      	movs	r0, #5
    92fe:	f7fb ff37 	bl	5170 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    9302:	2104      	movs	r1, #4
    9304:	2006      	movs	r0, #6
    9306:	f7fb ff33 	bl	5170 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    930a:	4c22      	ldr	r4, [pc, #136]	; (9394 <ll_reset+0x9c>)
    930c:	2500      	movs	r5, #0
    930e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    9312:	b2ab      	uxth	r3, r5
    9314:	429a      	cmp	r2, r3
    9316:	f105 0501 	add.w	r5, r5, #1
    931a:	d834      	bhi.n	9386 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
    931c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9320:	f36f 13c7 	bfc	r3, #7, #1
    9324:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    9328:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    932c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    932e:	f360 0300 	bfi	r3, r0, #0, #1
    9332:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9336:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9338:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    933c:	fbb3 f3f2 	udiv	r3, r3, r2
    9340:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9344:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0;
    9348:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    934c:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    934e:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0;
    9352:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9356:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    935a:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    935e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    9362:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9366:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0;
    936a:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0;
    936e:	f884 016e 	strb.w	r0, [r4, #366]	; 0x16e
	_radio.packet_release_first = 0;
    9372:	f884 016f 	strb.w	r0, [r4, #367]	; 0x16f
	_radio.fc_ack = _radio.fc_req;
    9376:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    937a:	f001 f867 	bl	a44c <ll_filter_reset>
}
    937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    9382:	f7fd bca7 	b.w	6cd4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9386:	1da8      	adds	r0, r5, #6
    9388:	21ff      	movs	r1, #255	; 0xff
    938a:	b2c0      	uxtb	r0, r0
    938c:	f7fb fef0 	bl	5170 <role_disable>
    9390:	e7bd      	b.n	930e <ll_reset+0x16>
    9392:	bf00      	nop
    9394:	20000578 	.word	0x20000578

00009398 <radio_adv_data_get>:
}
    9398:	4800      	ldr	r0, [pc, #0]	; (939c <radio_adv_data_get+0x4>)
    939a:	4770      	bx	lr
    939c:	200005a2 	.word	0x200005a2

000093a0 <radio_scan_data_get>:
}
    93a0:	4800      	ldr	r0, [pc, #0]	; (93a4 <radio_scan_data_get+0x4>)
    93a2:	4770      	bx	lr
    93a4:	200005f2 	.word	0x200005f2

000093a8 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    93a8:	4b02      	ldr	r3, [pc, #8]	; (93b4 <ll_adv_is_enabled+0xc>)
    93aa:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    93ae:	09c0      	lsrs	r0, r0, #7
    93b0:	4770      	bx	lr
    93b2:	bf00      	nop
    93b4:	20000578 	.word	0x20000578

000093b8 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    93b8:	4b04      	ldr	r3, [pc, #16]	; (93cc <radio_adv_filter_pol_get+0x14>)
    93ba:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    93be:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    93c0:	bfba      	itte	lt
    93c2:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    93c6:	0980      	lsrlt	r0, r0, #6
    93c8:	2000      	movge	r0, #0
}
    93ca:	4770      	bx	lr
    93cc:	20000578 	.word	0x20000578

000093d0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    93d0:	4a09      	ldr	r2, [pc, #36]	; (93f8 <ll_scan_is_enabled+0x28>)
    93d2:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    93d6:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    93da:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    93de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    93e2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    93e4:	f003 0301 	and.w	r3, r3, #1
    93e8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    93ec:	bf14      	ite	ne
    93ee:	2004      	movne	r0, #4
    93f0:	2000      	moveq	r0, #0
}
    93f2:	4318      	orrs	r0, r3
    93f4:	4770      	bx	lr
    93f6:	bf00      	nop
    93f8:	20000578 	.word	0x20000578

000093fc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    93fc:	4b05      	ldr	r3, [pc, #20]	; (9414 <radio_scan_filter_pol_get+0x18>)
    93fe:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    9402:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    9406:	bf1c      	itt	ne
    9408:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    940c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    9410:	4770      	bx	lr
    9412:	bf00      	nop
    9414:	20000578 	.word	0x20000578

00009418 <ll_tx_pwr_lvl_get>:
{
    9418:	b510      	push	{r4, lr}
    941a:	4614      	mov	r4, r2
	conn = connection_get(handle);
    941c:	f7fb fe92 	bl	5144 <connection_get>
	if (!conn) {
    9420:	b110      	cbz	r0, 9428 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    9422:	2000      	movs	r0, #0
    9424:	7020      	strb	r0, [r4, #0]
	return 0;
    9426:	bd10      	pop	{r4, pc}
		return 1;
    9428:	2001      	movs	r0, #1
}
    942a:	bd10      	pop	{r4, pc}

0000942c <ll_rx_get>:
{
    942c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9430:	4605      	mov	r5, r0
    9432:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9434:	4918      	ldr	r1, [pc, #96]	; (9498 <ll_rx_get+0x6c>)
    9436:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    943a:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    943e:	4293      	cmp	r3, r2
    9440:	460f      	mov	r7, r1
    9442:	d01f      	beq.n	9484 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    9444:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9448:	f201 116f 	addw	r1, r1, #367	; 0x16f
    944c:	f898 2000 	ldrb.w	r2, [r8]
    9450:	f7fb fe2e 	bl	50b0 <tx_cmplt_get>
		if (!cmplt) {
    9454:	4604      	mov	r4, r0
    9456:	b9e0      	cbnz	r0, 9492 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    9458:	ae02      	add	r6, sp, #8
    945a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    945e:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    9462:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    9466:	4631      	mov	r1, r6
    9468:	f10d 0006 	add.w	r0, sp, #6
    946c:	f7fb fe20 	bl	50b0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    9470:	b934      	cbnz	r4, 9480 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    9472:	b928      	cbnz	r0, 9480 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9474:	f8c5 8000 	str.w	r8, [r5]
}
    9478:	4620      	mov	r0, r4
    947a:	b002      	add	sp, #8
    947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9480:	4604      	mov	r4, r0
    9482:	e7ee      	b.n	9462 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9484:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    9488:	f201 116f 	addw	r1, r1, #367	; 0x16f
    948c:	f7fb fe10 	bl	50b0 <tx_cmplt_get>
    9490:	4604      	mov	r4, r0
		*node_rx = NULL;
    9492:	2300      	movs	r3, #0
    9494:	602b      	str	r3, [r5, #0]
    9496:	e7ef      	b.n	9478 <ll_rx_get+0x4c>
    9498:	20000578 	.word	0x20000578

0000949c <ll_rx_mem_release>:
{
    949c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    94a0:	4c1b      	ldr	r4, [pc, #108]	; (9510 <ll_rx_mem_release+0x74>)
{
    94a2:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    94a4:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    94a6:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
    94aa:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    94ae:	b928      	cbnz	r0, 94bc <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    94b0:	6028      	str	r0, [r5, #0]
}
    94b2:	b002      	add	sp, #8
    94b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    94b8:	f7fd bbc2 	b.w	6c40 <packet_rx_allocate.constprop.47>
		switch (_node_rx_free->hdr.type) {
    94bc:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    94be:	f8d0 8000 	ldr.w	r8, [r0]
    94c2:	2a0a      	cmp	r2, #10
    94c4:	d807      	bhi.n	94d6 <ll_rx_mem_release+0x3a>
    94c6:	2301      	movs	r3, #1
    94c8:	4093      	lsls	r3, r2
    94ca:	f240 727e 	movw	r2, #1918	; 0x77e
    94ce:	4213      	tst	r3, r2
    94d0:	d110      	bne.n	94f4 <ll_rx_mem_release+0x58>
    94d2:	061b      	lsls	r3, r3, #24
    94d4:	d413      	bmi.n	94fe <ll_rx_mem_release+0x62>
			LL_ASSERT(0);
    94d6:	4b0f      	ldr	r3, [pc, #60]	; (9514 <ll_rx_mem_release+0x78>)
    94d8:	9301      	str	r3, [sp, #4]
    94da:	9300      	str	r3, [sp, #0]
    94dc:	4a0e      	ldr	r2, [pc, #56]	; (9518 <ll_rx_mem_release+0x7c>)
    94de:	4b0f      	ldr	r3, [pc, #60]	; (951c <ll_rx_mem_release+0x80>)
    94e0:	490f      	ldr	r1, [pc, #60]	; (9520 <ll_rx_mem_release+0x84>)
    94e2:	4810      	ldr	r0, [pc, #64]	; (9524 <ll_rx_mem_release+0x88>)
    94e4:	f7f7 fcc2 	bl	e6c <printk>
    94e8:	4040      	eors	r0, r0
    94ea:	f380 8811 	msr	BASEPRI, r0
    94ee:	f04f 0004 	mov.w	r0, #4
    94f2:	df02      	svc	2
			mem_release(_node_rx_free,
    94f4:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    94f6:	f7f9 fde8 	bl	30ca <mem_release>
{
    94fa:	4640      	mov	r0, r8
    94fc:	e7d7      	b.n	94ae <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    94fe:	88c2      	ldrh	r2, [r0, #6]
    9500:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    9504:	f44f 7182 	mov.w	r1, #260	; 0x104
    9508:	f7f9 fdf4 	bl	30f4 <mem_get>
			mem_release(conn, &_radio.conn_free);
    950c:	4639      	mov	r1, r7
    950e:	e7f2      	b.n	94f6 <ll_rx_mem_release+0x5a>
    9510:	200006a0 	.word	0x200006a0
    9514:	0000cbb3 	.word	0x0000cbb3
    9518:	0000d49b 	.word	0x0000d49b
    951c:	0000e063 	.word	0x0000e063
    9520:	0000d4ea 	.word	0x0000d4ea
    9524:	0000d43a 	.word	0x0000d43a

00009528 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    9528:	4291      	cmp	r1, r2
{
    952a:	b510      	push	{r4, lr}
    952c:	4b14      	ldr	r3, [pc, #80]	; (9580 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    952e:	d119      	bne.n	9564 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9530:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9534:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    9538:	4294      	cmp	r4, r2
    953a:	d111      	bne.n	9560 <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    953c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    953e:	bf14      	ite	ne
    9540:	460a      	movne	r2, r1
    9542:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    9544:	3a01      	subs	r2, #1
    9546:	b2d2      	uxtb	r2, r2
    9548:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    954c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    9550:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    9554:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
			if (req != _radio.fc_req) {
    9558:	4291      	cmp	r1, r2
    955a:	d00f      	beq.n	957c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    955c:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179

				return 1;
			}
		} else {
			return 1;
    9560:	2001      	movs	r0, #1
    9562:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    9564:	b929      	cbnz	r1, 9572 <do_radio_rx_fc_set+0x4a>
    9566:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
				return 1;
    956a:	1a18      	subs	r0, r3, r0
    956c:	bf18      	it	ne
    956e:	2001      	movne	r0, #1
    9570:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9572:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9576:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
    957a:	e7f6      	b.n	956a <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    957c:	2000      	movs	r0, #0
}
    957e:	bd10      	pop	{r4, pc}
    9580:	20000578 	.word	0x20000578

00009584 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9584:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9586:	4b14      	ldr	r3, [pc, #80]	; (95d8 <radio_rx_fc_set+0x54>)
    9588:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
{
    958c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    958e:	b302      	cbz	r2, 95d2 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    9590:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
    9594:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9596:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179

		if (fc) {
    959a:	b135      	cbz	r5, 95aa <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    959c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    95a0:	4298      	cmp	r0, r3
    95a2:	d016      	beq.n	95d2 <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    95a4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    95a6:	f7ff bfbf 	b.w	9528 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    95aa:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    95ae:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    95b2:	42a0      	cmp	r0, r4
    95b4:	d10d      	bne.n	95d2 <radio_rx_fc_set+0x4e>
    95b6:	4291      	cmp	r1, r2
    95b8:	d00b      	beq.n	95d2 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95ba:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    95be:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95c2:	42a0      	cmp	r0, r4
    95c4:	d005      	beq.n	95d2 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    95c6:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    95ca:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    95cc:	bf08      	it	eq
    95ce:	f883 2179 	strbeq.w	r2, [r3, #377]	; 0x179
}
    95d2:	2000      	movs	r0, #0
    95d4:	bc30      	pop	{r4, r5}
    95d6:	4770      	bx	lr
    95d8:	20000578 	.word	0x20000578

000095dc <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    95dc:	4770      	bx	lr
	...

000095e0 <radio_adv_enable>:
{
    95e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    95e4:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 98d0 <radio_adv_enable+0x2f0>
{
    95e8:	b08f      	sub	sp, #60	; 0x3c
    95ea:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    95ec:	2302      	movs	r3, #2
    95ee:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    95f0:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
{
    95f4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    95f8:	2b00      	cmp	r3, #0
{
    95fa:	4682      	mov	sl, r0
    95fc:	4688      	mov	r8, r1
    95fe:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
    9600:	da01      	bge.n	9606 <radio_adv_enable+0x26>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9602:	200c      	movs	r0, #12
    9604:	e14e      	b.n	98a4 <radio_adv_enable+0x2c4>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9606:	f89b 2079 	ldrb.w	r2, [fp, #121]	; 0x79
    960a:	232a      	movs	r3, #42	; 0x2a
    960c:	2727      	movs	r7, #39	; 0x27
    960e:	fb17 3702 	smlabb	r7, r7, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9612:	f81b 3007 	ldrb.w	r3, [fp, r7]
    9616:	f003 030f 	and.w	r3, r3, #15
    961a:	2b01      	cmp	r3, #1
    961c:	f200 80f8 	bhi.w	9810 <radio_adv_enable+0x230>
		if (_radio.advertiser.conn) {
    9620:	f8db 60cc 	ldr.w	r6, [fp, #204]	; 0xcc
    9624:	2e00      	cmp	r6, #0
    9626:	d1ec      	bne.n	9602 <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
    9628:	f50b 70a0 	add.w	r0, fp, #320	; 0x140
    962c:	f7f9 fd33 	bl	3096 <mem_acquire>
		if (!link) {
    9630:	900a      	str	r0, [sp, #40]	; 0x28
    9632:	b158      	cbz	r0, 964c <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    9634:	f50b 7086 	add.w	r0, fp, #268	; 0x10c
    9638:	f7f9 fd2d 	bl	3096 <mem_acquire>
		if (!conn) {
    963c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    963e:	4604      	mov	r4, r0
    9640:	b930      	cbnz	r0, 9650 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
    9642:	f50b 71a0 	add.w	r1, fp, #320	; 0x140
    9646:	4610      	mov	r0, r2
    9648:	f7f9 fd3f 	bl	30ca <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    964c:	2007      	movs	r0, #7
    964e:	e129      	b.n	98a4 <radio_adv_enable+0x2c4>
		conn->handle = 0xFFFF;
    9650:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9654:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9656:	4b98      	ldr	r3, [pc, #608]	; (98b8 <radio_adv_enable+0x2d8>)
    9658:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    965c:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    965e:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    9660:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    9664:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9668:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    966a:	2306      	movs	r3, #6
    966c:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    966e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    9672:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    9674:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    9678:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    967c:	f366 0341 	bfi	r3, r6, #1, #1
    9680:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    9684:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    9688:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    968a:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
    968e:	f366 0341 	bfi	r3, r6, #1, #1
    9692:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0;
    9696:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_event = 0;
    969a:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->sn = 0;
    969c:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
    96a0:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
    96a4:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
    96a8:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
    96ac:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
    96b0:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
    96b4:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
    96b8:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->slave.window_widening_prepare_us = 0;
    96bc:	6446      	str	r6, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    96be:	6486      	str	r6, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    96c0:	6586      	str	r6, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    96c2:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    96c4:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    96c6:	f880 605c 	strb.w	r6, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    96ca:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0;
    96ce:	f880 6098 	strb.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    96d2:	f880 6099 	strb.w	r6, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    96d6:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    96da:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->empty = 0;
    96de:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    96e2:	f8c0 60ec 	str.w	r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    96e6:	f8c0 60f0 	str.w	r6, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    96ea:	f8c0 60f4 	str.w	r6, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    96ee:	f8c0 60f8 	str.w	r6, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    96f2:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    96f6:	f880 6100 	strb.w	r6, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    96fa:	f880 6101 	strb.w	r6, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    96fe:	f8cb 00cc 	str.w	r0, [fp, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    9702:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    9704:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    9708:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    970c:	f36a 0302 	bfi	r3, sl, #0, #3
	_radio.advertiser.chan_map = chan_map;
    9710:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    9714:	f369 1387 	bfi	r3, r9, #6, #2
    9718:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    971c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    9720:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9722:	2327      	movs	r3, #39	; 0x27
    9724:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9726:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9728:	2300      	movs	r3, #0
    972a:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    972c:	f7f9 fe4c 	bl	33c8 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9730:	f81b 6007 	ldrb.w	r6, [fp, r7]
    9734:	f006 060f 	and.w	r6, r6, #15
    9738:	2e01      	cmp	r6, #1
    973a:	d16b      	bne.n	9814 <radio_adv_enable+0x234>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    973c:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9740:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    9742:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9746:	495d      	ldr	r1, [pc, #372]	; (98bc <radio_adv_enable+0x2dc>)
    9748:	a359      	add	r3, pc, #356	; (adr r3, 98b0 <radio_adv_enable+0x2d0>)
    974a:	e9d3 2300 	ldrd	r2, r3, [r3]
    974e:	fba0 0101 	umull	r0, r1, r0, r1
    9752:	f7f6 fd5f 	bl	214 <__aeabi_uldivmod>
	ticks_slot_offset =
    9756:	69af      	ldr	r7, [r5, #24]
    9758:	69eb      	ldr	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    975a:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    975c:	429f      	cmp	r7, r3
    975e:	bf38      	it	cc
    9760:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    9762:	f1b8 0f00 	cmp.w	r8, #0
    9766:	d15d      	bne.n	9824 <radio_adv_enable+0x244>
    9768:	1e72      	subs	r2, r6, #1
    976a:	4253      	negs	r3, r2
    976c:	4153      	adcs	r3, r2
    976e:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    9772:	f8df 9160 	ldr.w	r9, [pc, #352]	; 98d4 <radio_adv_enable+0x2f4>
    9776:	f8df b160 	ldr.w	fp, [pc, #352]	; 98d8 <radio_adv_enable+0x2f8>
    977a:	f363 1686 	bfi	r6, r3, #6, #1
    977e:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    9782:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    9786:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    978a:	d053      	beq.n	9834 <radio_adv_enable+0x254>
		u32_t ticks_now = ticker_ticks_now_get();
    978c:	f7fa fc68 	bl	4060 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9790:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9792:	f8cd a020 	str.w	sl, [sp, #32]
    9796:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
    9798:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    979a:	2000      	movs	r0, #0
    979c:	f8cd 901c 	str.w	r9, [sp, #28]
    97a0:	9006      	str	r0, [sp, #24]
    97a2:	f8cd b014 	str.w	fp, [sp, #20]
    97a6:	9704      	str	r7, [sp, #16]
    97a8:	9003      	str	r0, [sp, #12]
    97aa:	9002      	str	r0, [sp, #8]
    97ac:	e88d 0081 	stmia.w	sp, {r0, r7}
    97b0:	4633      	mov	r3, r6
    97b2:	2205      	movs	r2, #5
    97b4:	2103      	movs	r1, #3
    97b6:	f7fa fae5 	bl	3d84 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    97ba:	2802      	cmp	r0, #2
    97bc:	d036      	beq.n	982c <radio_adv_enable+0x24c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    97be:	980d      	ldr	r0, [sp, #52]	; 0x34
    97c0:	b9c8      	cbnz	r0, 97f6 <radio_adv_enable+0x216>
		ret_cb = TICKER_STATUS_BUSY;
    97c2:	2302      	movs	r3, #2
    97c4:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    97c6:	4b3e      	ldr	r3, [pc, #248]	; (98c0 <radio_adv_enable+0x2e0>)
    97c8:	9305      	str	r3, [sp, #20]
    97ca:	2203      	movs	r2, #3
    97cc:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    97d0:	9300      	str	r3, [sp, #0]
    97d2:	f8cd a020 	str.w	sl, [sp, #32]
    97d6:	f8cd 901c 	str.w	r9, [sp, #28]
    97da:	9006      	str	r0, [sp, #24]
    97dc:	9004      	str	r0, [sp, #16]
    97de:	9003      	str	r0, [sp, #12]
    97e0:	9002      	str	r0, [sp, #8]
    97e2:	9001      	str	r0, [sp, #4]
    97e4:	4633      	mov	r3, r6
    97e6:	4611      	mov	r1, r2
		ret =
    97e8:	f7fa facc 	bl	3d84 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    97ec:	2802      	cmp	r0, #2
    97ee:	d046      	beq.n	987e <radio_adv_enable+0x29e>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    97f0:	980d      	ldr	r0, [sp, #52]	; 0x34
    97f2:	2800      	cmp	r0, #0
    97f4:	d047      	beq.n	9886 <radio_adv_enable+0x2a6>
	if (conn) {
    97f6:	2c00      	cmp	r4, #0
    97f8:	f43f af03 	beq.w	9602 <radio_adv_enable+0x22>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    97fc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    9800:	4930      	ldr	r1, [pc, #192]	; (98c4 <radio_adv_enable+0x2e4>)
    9802:	f7f9 fc62 	bl	30ca <mem_release>
		mem_release(conn, &_radio.conn_free);
    9806:	4930      	ldr	r1, [pc, #192]	; (98c8 <radio_adv_enable+0x2e8>)
    9808:	4620      	mov	r0, r4
    980a:	f7f9 fc5e 	bl	30ca <mem_release>
    980e:	e6f8      	b.n	9602 <radio_adv_enable+0x22>
		conn = NULL;
    9810:	2400      	movs	r4, #0
    9812:	e776      	b.n	9702 <radio_adv_enable+0x122>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9814:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9816:	bf0c      	ite	eq
    9818:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    981c:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    9820:	4358      	muls	r0, r3
    9822:	e790      	b.n	9746 <radio_adv_enable+0x166>
    9824:	2300      	movs	r3, #0
    9826:	e7a2      	b.n	976e <radio_adv_enable+0x18e>
				cpu_sleep();
    9828:	f7fb fba6 	bl	4f78 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    982c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    982e:	2b02      	cmp	r3, #2
    9830:	d0fa      	beq.n	9828 <radio_adv_enable+0x248>
    9832:	e7c4      	b.n	97be <radio_adv_enable+0x1de>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9834:	f7fa fc14 	bl	4060 <ticker_ticks_now_get>
		ret =
    9838:	f8cd a020 	str.w	sl, [sp, #32]
    983c:	f8cd 901c 	str.w	r9, [sp, #28]
    9840:	9606      	str	r6, [sp, #24]
    9842:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9848:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    984a:	4820      	ldr	r0, [pc, #128]	; (98cc <radio_adv_enable+0x2ec>)
		ret =
    984c:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    984e:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9852:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    9854:	fba8 0100 	umull	r0, r1, r8, r0
    9858:	2391      	movs	r3, #145	; 0x91
    985a:	fb03 1108 	mla	r1, r3, r8, r1
    985e:	a314      	add	r3, pc, #80	; (adr r3, 98b0 <radio_adv_enable+0x2d0>)
    9860:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    9864:	9704      	str	r7, [sp, #16]
    9866:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    9868:	f7f6 fcd4 	bl	214 <__aeabi_uldivmod>
		ret =
    986c:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    986e:	9001      	str	r0, [sp, #4]
		ret =
    9870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9872:	2205      	movs	r2, #5
    9874:	2103      	movs	r1, #3
    9876:	4630      	mov	r0, r6
    9878:	e7b6      	b.n	97e8 <radio_adv_enable+0x208>
			cpu_sleep();
    987a:	f7fb fb7d 	bl	4f78 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    987e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9880:	2b02      	cmp	r3, #2
    9882:	d0fa      	beq.n	987a <radio_adv_enable+0x29a>
    9884:	e7b4      	b.n	97f0 <radio_adv_enable+0x210>
		_radio.advertiser.is_enabled = 1;
    9886:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    988a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    988e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    9892:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    9896:	f013 0401 	ands.w	r4, r3, #1
    989a:	d103      	bne.n	98a4 <radio_adv_enable+0x2c4>
			ll_adv_scan_state_cb(BIT(0));
    989c:	2001      	movs	r0, #1
    989e:	f7ff fe9d 	bl	95dc <ll_adv_scan_state_cb>
		return 0;
    98a2:	4620      	mov	r0, r4
}
    98a4:	b00f      	add	sp, #60	; 0x3c
    98a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98aa:	bf00      	nop
    98ac:	f3af 8000 	nop.w
    98b0:	1afd498d 	.word	0x1afd498d
    98b4:	00000007 	.word	0x00000007
    98b8:	0001400c 	.word	0x0001400c
    98bc:	3b9aca00 	.word	0x3b9aca00
    98c0:	00006be5 	.word	0x00006be5
    98c4:	200006b8 	.word	0x200006b8
    98c8:	20000684 	.word	0x20000684
    98cc:	84e72a00 	.word	0x84e72a00
    98d0:	20000578 	.word	0x20000578
    98d4:	00004fbd 	.word	0x00004fbd
    98d8:	00006ac5 	.word	0x00006ac5

000098dc <radio_adv_disable>:
{
    98dc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    98de:	2103      	movs	r1, #3
    98e0:	2005      	movs	r0, #5
    98e2:	f7fb fc45 	bl	5170 <role_disable>
	if (!status) {
    98e6:	4605      	mov	r5, r0
    98e8:	b9e8      	cbnz	r0, 9926 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    98ea:	4c10      	ldr	r4, [pc, #64]	; (992c <radio_adv_disable+0x50>)
    98ec:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    98f0:	f360 12c7 	bfi	r2, r0, #7, #1
    98f4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    98f8:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    98fc:	07d3      	lsls	r3, r2, #31
    98fe:	d401      	bmi.n	9904 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    9900:	f7ff fe6c 	bl	95dc <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    9904:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
    9908:	b15e      	cbz	r6, 9922 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    990a:	2300      	movs	r3, #0
    990c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9910:	4907      	ldr	r1, [pc, #28]	; (9930 <radio_adv_disable+0x54>)
    9912:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    9916:	f7f9 fbd8 	bl	30ca <mem_release>
			mem_release(conn, &_radio.conn_free);
    991a:	4906      	ldr	r1, [pc, #24]	; (9934 <radio_adv_disable+0x58>)
    991c:	4630      	mov	r0, r6
    991e:	f7f9 fbd4 	bl	30ca <mem_release>
}
    9922:	4628      	mov	r0, r5
    9924:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9926:	250c      	movs	r5, #12
    9928:	e7fb      	b.n	9922 <radio_adv_disable+0x46>
    992a:	bf00      	nop
    992c:	20000578 	.word	0x20000578
    9930:	200006b8 	.word	0x200006b8
    9934:	20000684 	.word	0x20000684

00009938 <radio_scan_enable>:
{
    9938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    993c:	4c62      	ldr	r4, [pc, #392]	; (9ac8 <radio_scan_enable+0x190>)
    993e:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
{
    9942:	b08e      	sub	sp, #56	; 0x38
    9944:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
    9946:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    994a:	f04f 0302 	mov.w	r3, #2
{
    994e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9950:	930b      	str	r3, [sp, #44]	; 0x2c
{
    9952:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    9954:	d003      	beq.n	995e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9956:	200c      	movs	r0, #12
}
    9958:	b00e      	add	sp, #56	; 0x38
    995a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    995e:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9962:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
    9966:	0840      	lsrs	r0, r0, #1
    9968:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.init_addr_type = init_addr_type;
    996c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    9970:	2206      	movs	r2, #6
    9972:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
	_radio.scanner.init_addr_type = init_addr_type;
    9976:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    997a:	4e54      	ldr	r6, [pc, #336]	; (9acc <radio_scan_enable+0x194>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    997c:	f7f8 f8a6 	bl	1acc <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    9980:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    9984:	f04f 0991 	mov.w	r9, #145	; 0x91
    9988:	fba2 0106 	umull	r0, r1, r2, r6
    998c:	fb09 1102 	mla	r1, r9, r2, r1
    9990:	a34b      	add	r3, pc, #300	; (adr r3, 9ac0 <radio_scan_enable+0x188>)
    9992:	e9d3 2300 	ldrd	r2, r3, [r3]
    9996:	f7f6 fc3d 	bl	214 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    999a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    999e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
		_radio.ticks_active_to_start;
    99a2:	f8d4 817c 	ldr.w	r8, [r4, #380]	; 0x17c
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    99a6:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	_radio.scanner.filter_policy = filter_policy;
    99aa:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    99ae:	b2ba      	uxth	r2, r7
    99b0:	fba2 6706 	umull	r6, r7, r2, r6
    99b4:	fb09 7702 	mla	r7, r9, r2, r7
	_radio.scanner.filter_policy = filter_policy;
    99b8:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	_radio.scanner.hdr.ticks_xtal_to_start =
    99bc:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
    99be:	f100 0a09 	add.w	sl, r0, #9
	_radio.scanner.hdr.ticks_active_to_start =
    99c2:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	_radio.scanner.hdr.ticks_xtal_to_start =
    99c6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_preempt_to_start =
    99ca:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    99ce:	a33c      	add	r3, pc, #240	; (adr r3, 9ac0 <radio_scan_enable+0x188>)
    99d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    99d4:	4630      	mov	r0, r6
    99d6:	4639      	mov	r1, r7
    99d8:	f7f6 fc1c 	bl	214 <__aeabi_uldivmod>
	    (ticks_interval -
    99dc:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
    99e0:	459a      	cmp	sl, r3
    99e2:	bf94      	ite	ls
    99e4:	f8c4 a0dc 	strls.w	sl, [r4, #220]	; 0xdc
    99e8:	f8c4 30dc 	strhi.w	r3, [r4, #220]	; 0xdc
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    99ec:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    99f0:	4681      	mov	r9, r0
	ticks_slot_offset = max(_radio.scanner.hdr.ticks_active_to_start,
    99f2:	bf38      	it	cc
    99f4:	f04f 0827 	movcc.w	r8, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
    99f8:	f7fa fb32 	bl	4060 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    99fc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	ticks_anchor = ticker_ticks_now_get();
    9a00:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    9a02:	2b00      	cmp	r3, #0
    9a04:	d045      	beq.n	9a92 <radio_scan_enable+0x15a>
		us_offset = 0;
    9a06:	950c      	str	r5, [sp, #48]	; 0x30
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    9a08:	980c      	ldr	r0, [sp, #48]	; 0x30
    9a0a:	4931      	ldr	r1, [pc, #196]	; (9ad0 <radio_scan_enable+0x198>)
    9a0c:	a32c      	add	r3, pc, #176	; (adr r3, 9ac0 <radio_scan_enable+0x188>)
    9a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a12:	fba0 0101 	umull	r0, r1, r0, r1
    9a16:	f7f6 fbfd 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9a1a:	ab0b      	add	r3, sp, #44	; 0x2c
    9a1c:	9308      	str	r3, [sp, #32]
    9a1e:	4b2d      	ldr	r3, [pc, #180]	; (9ad4 <radio_scan_enable+0x19c>)
    9a20:	9307      	str	r3, [sp, #28]
    9a22:	4b2d      	ldr	r3, [pc, #180]	; (9ad8 <radio_scan_enable+0x1a0>)
    9a24:	9305      	str	r3, [sp, #20]
    9a26:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    9a2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9a2e:	4443      	add	r3, r8
    9a30:	2500      	movs	r5, #0
    9a32:	4482      	add	sl, r0
    9a34:	9304      	str	r3, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    9a36:	4630      	mov	r0, r6
    9a38:	a321      	add	r3, pc, #132	; (adr r3, 9ac0 <radio_scan_enable+0x188>)
    9a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a3e:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9a40:	9506      	str	r5, [sp, #24]
    9a42:	9503      	str	r5, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    9a44:	f7f6 fbe6 	bl	214 <__aeabi_uldivmod>
    9a48:	4610      	mov	r0, r2
    9a4a:	4619      	mov	r1, r3
    9a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9a50:	2300      	movs	r3, #0
    9a52:	f7f6 fbdf 	bl	214 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9a56:	e88d 0220 	stmia.w	sp, {r5, r9}
    9a5a:	9002      	str	r0, [sp, #8]
    9a5c:	4653      	mov	r3, sl
    9a5e:	2206      	movs	r2, #6
    9a60:	2103      	movs	r1, #3
    9a62:	4628      	mov	r0, r5
    9a64:	f7fa f98e 	bl	3d84 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    9a68:	2802      	cmp	r0, #2
    9a6a:	d023      	beq.n	9ab4 <radio_scan_enable+0x17c>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    9a6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9a6e:	2d00      	cmp	r5, #0
    9a70:	f47f af71 	bne.w	9956 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    9a74:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9a78:	f043 0301 	orr.w	r3, r3, #1
    9a7c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	if (!_radio.advertiser.is_enabled) {
    9a80:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    9a84:	2b00      	cmp	r3, #0
    9a86:	db02      	blt.n	9a8e <radio_scan_enable+0x156>
		ll_adv_scan_state_cb(BIT(1));
    9a88:	2002      	movs	r0, #2
    9a8a:	f7ff fda7 	bl	95dc <ll_adv_scan_state_cb>
	return 0;
    9a8e:	4628      	mov	r0, r5
    9a90:	e762      	b.n	9958 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    9a92:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
		u32_t ticks_ref = 0;
    9a96:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    9a98:	aa0d      	add	r2, sp, #52	; 0x34
    9a9a:	ab0c      	add	r3, sp, #48	; 0x30
    9a9c:	4441      	add	r1, r8
    9a9e:	2003      	movs	r0, #3
    9aa0:	f7fb fd16 	bl	54d0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    9aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d0ae      	beq.n	9a08 <radio_scan_enable+0xd0>
			ticks_anchor = ticks_ref;
    9aaa:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    9aae:	e7ab      	b.n	9a08 <radio_scan_enable+0xd0>
			cpu_sleep();
    9ab0:	f7fb fa62 	bl	4f78 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    9ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ab6:	2b02      	cmp	r3, #2
    9ab8:	d0fa      	beq.n	9ab0 <radio_scan_enable+0x178>
    9aba:	e7d7      	b.n	9a6c <radio_scan_enable+0x134>
    9abc:	f3af 8000 	nop.w
    9ac0:	1afd498d 	.word	0x1afd498d
    9ac4:	00000007 	.word	0x00000007
    9ac8:	20000578 	.word	0x20000578
    9acc:	84e72a00 	.word	0x84e72a00
    9ad0:	3b9aca00 	.word	0x3b9aca00
    9ad4:	00004fbd 	.word	0x00004fbd
    9ad8:	00006b29 	.word	0x00006b29

00009adc <radio_scan_disable>:
{
    9adc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    9ade:	2104      	movs	r1, #4
    9ae0:	2006      	movs	r0, #6
    9ae2:	f7fb fb45 	bl	5170 <role_disable>
	if (!status) {
    9ae6:	4605      	mov	r5, r0
    9ae8:	b9e8      	cbnz	r0, 9b26 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    9aea:	4c10      	ldr	r4, [pc, #64]	; (9b2c <radio_scan_disable+0x50>)
    9aec:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    9af0:	f360 0200 	bfi	r2, r0, #0, #1
    9af4:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
		if (!_radio.advertiser.is_enabled) {
    9af8:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    9afc:	2a00      	cmp	r2, #0
    9afe:	db01      	blt.n	9b04 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    9b00:	f7ff fd6c 	bl	95dc <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    9b04:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
		if (conn) {
    9b08:	b15e      	cbz	r6, 9b22 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    9b0a:	2300      	movs	r3, #0
    9b0c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			mem_release(conn->llcp_terminate.
    9b10:	4907      	ldr	r1, [pc, #28]	; (9b30 <radio_scan_disable+0x54>)
    9b12:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    9b16:	f7f9 fad8 	bl	30ca <mem_release>
			mem_release(conn, &_radio.conn_free);
    9b1a:	4906      	ldr	r1, [pc, #24]	; (9b34 <radio_scan_disable+0x58>)
    9b1c:	4630      	mov	r0, r6
    9b1e:	f7f9 fad4 	bl	30ca <mem_release>
}
    9b22:	4628      	mov	r0, r5
    9b24:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9b26:	250c      	movs	r5, #12
    9b28:	e7fb      	b.n	9b22 <radio_scan_disable+0x46>
    9b2a:	bf00      	nop
    9b2c:	20000578 	.word	0x20000578
    9b30:	200006b8 	.word	0x200006b8
    9b34:	20000684 	.word	0x20000684

00009b38 <ll_rx_dequeue>:
{
    9b38:	b530      	push	{r4, r5, lr}
    9b3a:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9b3c:	4d47      	ldr	r5, [pc, #284]	; (9c5c <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
    9b3e:	aa04      	add	r2, sp, #16
    9b40:	2300      	movs	r3, #0
    9b42:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9b46:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
    9b4a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    9b4e:	f7f9 fafa 	bl	3146 <memq_dequeue>
    9b52:	462c      	mov	r4, r5
	LL_ASSERT(link);
    9b54:	b970      	cbnz	r0, 9b74 <ll_rx_dequeue+0x3c>
    9b56:	4b42      	ldr	r3, [pc, #264]	; (9c60 <ll_rx_dequeue+0x128>)
    9b58:	9301      	str	r3, [sp, #4]
    9b5a:	9300      	str	r3, [sp, #0]
    9b5c:	4a41      	ldr	r2, [pc, #260]	; (9c64 <ll_rx_dequeue+0x12c>)
    9b5e:	4b42      	ldr	r3, [pc, #264]	; (9c68 <ll_rx_dequeue+0x130>)
    9b60:	4942      	ldr	r1, [pc, #264]	; (9c6c <ll_rx_dequeue+0x134>)
    9b62:	4843      	ldr	r0, [pc, #268]	; (9c70 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
    9b64:	f7f7 f982 	bl	e6c <printk>
    9b68:	4040      	eors	r0, r0
    9b6a:	f380 8811 	msr	BASEPRI, r0
    9b6e:	f04f 0004 	mov.w	r0, #4
    9b72:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    9b74:	f505 71a0 	add.w	r1, r5, #320	; 0x140
    9b78:	f7f9 faa7 	bl	30ca <mem_release>
	switch (node_rx->hdr.type) {
    9b7c:	9a03      	ldr	r2, [sp, #12]
    9b7e:	7911      	ldrb	r1, [r2, #4]
    9b80:	290a      	cmp	r1, #10
    9b82:	d807      	bhi.n	9b94 <ll_rx_dequeue+0x5c>
    9b84:	2301      	movs	r3, #1
    9b86:	408b      	lsls	r3, r1
    9b88:	f240 707e 	movw	r0, #1918	; 0x77e
    9b8c:	4203      	tst	r3, r0
    9b8e:	d109      	bne.n	9ba4 <ll_rx_dequeue+0x6c>
    9b90:	0618      	lsls	r0, r3, #24
    9b92:	d419      	bmi.n	9bc8 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
    9b94:	4b32      	ldr	r3, [pc, #200]	; (9c60 <ll_rx_dequeue+0x128>)
    9b96:	9301      	str	r3, [sp, #4]
    9b98:	9300      	str	r3, [sp, #0]
    9b9a:	4a32      	ldr	r2, [pc, #200]	; (9c64 <ll_rx_dequeue+0x12c>)
    9b9c:	4b32      	ldr	r3, [pc, #200]	; (9c68 <ll_rx_dequeue+0x130>)
    9b9e:	4933      	ldr	r1, [pc, #204]	; (9c6c <ll_rx_dequeue+0x134>)
    9ba0:	4834      	ldr	r0, [pc, #208]	; (9c74 <ll_rx_dequeue+0x13c>)
    9ba2:	e7df      	b.n	9b64 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
    9ba4:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
    9ba8:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    9bac:	3801      	subs	r0, #1
    9bae:	4283      	cmp	r3, r0
    9bb0:	db07      	blt.n	9bc2 <ll_rx_dequeue+0x8a>
    9bb2:	4b2b      	ldr	r3, [pc, #172]	; (9c60 <ll_rx_dequeue+0x128>)
    9bb4:	9301      	str	r3, [sp, #4]
    9bb6:	9300      	str	r3, [sp, #0]
    9bb8:	4a2a      	ldr	r2, [pc, #168]	; (9c64 <ll_rx_dequeue+0x12c>)
    9bba:	4b2b      	ldr	r3, [pc, #172]	; (9c68 <ll_rx_dequeue+0x130>)
    9bbc:	492b      	ldr	r1, [pc, #172]	; (9c6c <ll_rx_dequeue+0x134>)
    9bbe:	482e      	ldr	r0, [pc, #184]	; (9c78 <ll_rx_dequeue+0x140>)
    9bc0:	e7d0      	b.n	9b64 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
    9bc2:	3301      	adds	r3, #1
    9bc4:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    9bc8:	2906      	cmp	r1, #6
    9bca:	d136      	bne.n	9c3a <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    9bcc:	7ad3      	ldrb	r3, [r2, #11]
    9bce:	2b3c      	cmp	r3, #60	; 0x3c
    9bd0:	d00d      	beq.n	9bee <ll_rx_dequeue+0xb6>
    9bd2:	7b12      	ldrb	r2, [r2, #12]
    9bd4:	b9e2      	cbnz	r2, 9c10 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
    9bd6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9bda:	07d9      	lsls	r1, r3, #31
    9bdc:	d42f      	bmi.n	9c3e <ll_rx_dequeue+0x106>
    9bde:	4b20      	ldr	r3, [pc, #128]	; (9c60 <ll_rx_dequeue+0x128>)
    9be0:	9301      	str	r3, [sp, #4]
    9be2:	9300      	str	r3, [sp, #0]
    9be4:	4a1f      	ldr	r2, [pc, #124]	; (9c64 <ll_rx_dequeue+0x12c>)
    9be6:	4b20      	ldr	r3, [pc, #128]	; (9c68 <ll_rx_dequeue+0x130>)
    9be8:	4920      	ldr	r1, [pc, #128]	; (9c6c <ll_rx_dequeue+0x134>)
    9bea:	4824      	ldr	r0, [pc, #144]	; (9c7c <ll_rx_dequeue+0x144>)
    9bec:	e7ba      	b.n	9b64 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
    9bee:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    9bf0:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    9bf4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    9bf8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	db09      	blt.n	9c14 <ll_rx_dequeue+0xdc>
    9c00:	4b17      	ldr	r3, [pc, #92]	; (9c60 <ll_rx_dequeue+0x128>)
    9c02:	9301      	str	r3, [sp, #4]
    9c04:	9300      	str	r3, [sp, #0]
    9c06:	4a17      	ldr	r2, [pc, #92]	; (9c64 <ll_rx_dequeue+0x12c>)
    9c08:	4b17      	ldr	r3, [pc, #92]	; (9c68 <ll_rx_dequeue+0x130>)
    9c0a:	4918      	ldr	r1, [pc, #96]	; (9c6c <ll_rx_dequeue+0x134>)
    9c0c:	481c      	ldr	r0, [pc, #112]	; (9c80 <ll_rx_dequeue+0x148>)
    9c0e:	e7a9      	b.n	9b64 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
    9c10:	2500      	movs	r5, #0
    9c12:	e7f1      	b.n	9bf8 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
    9c14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9c18:	f36f 13c7 	bfc	r3, #7, #1
    9c1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    9c20:	b995      	cbnz	r5, 9c48 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    9c22:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
		     _radio.advertiser.is_enabled;
    9c26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    9c2a:	f000 0001 	and.w	r0, r0, #1
    9c2e:	0040      	lsls	r0, r0, #1
		if (!bm) {
    9c30:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    9c34:	d101      	bne.n	9c3a <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
    9c36:	f7ff fcd1 	bl	95dc <ll_adv_scan_state_cb>
}
    9c3a:	b005      	add	sp, #20
    9c3c:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    9c3e:	f362 0300 	bfi	r3, r2, #0, #1
    9c42:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    9c46:	e7ec      	b.n	9c22 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
    9c48:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    9c4c:	490d      	ldr	r1, [pc, #52]	; (9c84 <ll_rx_dequeue+0x14c>)
    9c4e:	f7f9 fa3c 	bl	30ca <mem_release>
			mem_release(conn, &_radio.conn_free);
    9c52:	490d      	ldr	r1, [pc, #52]	; (9c88 <ll_rx_dequeue+0x150>)
    9c54:	4628      	mov	r0, r5
    9c56:	f7f9 fa38 	bl	30ca <mem_release>
    9c5a:	e7e2      	b.n	9c22 <ll_rx_dequeue+0xea>
    9c5c:	20000578 	.word	0x20000578
    9c60:	0000cbb3 	.word	0x0000cbb3
    9c64:	0000d49b 	.word	0x0000d49b
    9c68:	0000e055 	.word	0x0000e055
    9c6c:	0000d4ea 	.word	0x0000d4ea
    9c70:	0000e66b 	.word	0x0000e66b
    9c74:	0000d43a 	.word	0x0000d43a
    9c78:	0000e3f4 	.word	0x0000e3f4
    9c7c:	0000e48c 	.word	0x0000e48c
    9c80:	0000e44e 	.word	0x0000e44e
    9c84:	200006b8 	.word	0x200006b8
    9c88:	20000684 	.word	0x20000684

00009c8c <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    9c8c:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    9c8e:	4c0b      	ldr	r4, [pc, #44]	; (9cbc <rtc0_nrf5_isr+0x30>)
    9c90:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    9c94:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    9c98:	b122      	cbz	r2, 9ca4 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    9c9a:	2000      	movs	r0, #0
    9c9c:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    9ca0:	f7fa f85e 	bl	3d60 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    9ca4:	b12d      	cbz	r5, 9cb2 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    9ca6:	2300      	movs	r3, #0
    9ca8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    9cac:	2001      	movs	r0, #1
    9cae:	f7fa f857 	bl	3d60 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    9cb2:	2000      	movs	r0, #0
}
    9cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    9cb8:	f7f9 baf4 	b.w	32a4 <mayfly_run>
    9cbc:	4000b000 	.word	0x4000b000

00009cc0 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    9cc0:	2001      	movs	r0, #1
    9cc2:	f7f9 baef 	b.w	32a4 <mayfly_run>

00009cc6 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9cc6:	4668      	mov	r0, sp
    9cc8:	f020 0107 	bic.w	r1, r0, #7
    9ccc:	468d      	mov	sp, r1
    9cce:	b501      	push	{r0, lr}
	isr_radio();
    9cd0:	f000 fce4 	bl	a69c <isr_radio>
	ISR_DIRECT_PM();
    9cd4:	f7f7 fd7c 	bl	17d0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    9cd8:	f7f7 fb66 	bl	13a8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9cdc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    9ce0:	4685      	mov	sp, r0
    9ce2:	4770      	bx	lr

00009ce4 <radio_active_callback>:
{
    9ce4:	4770      	bx	lr
	...

00009ce8 <radio_event_callback>:
	k_sem_give(sem_recv);
    9ce8:	4b01      	ldr	r3, [pc, #4]	; (9cf0 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9cea:	6818      	ldr	r0, [r3, #0]
    9cec:	f002 bac9 	b.w	c282 <_impl_k_sem_give>
    9cf0:	20000d24 	.word	0x20000d24

00009cf4 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    9cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    9cf6:	4b42      	ldr	r3, [pc, #264]	; (9e00 <ll_init+0x10c>)
{
    9cf8:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    9cfa:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    9cfc:	4841      	ldr	r0, [pc, #260]	; (9e04 <ll_init+0x110>)
    9cfe:	f001 fdb1 	bl	b864 <device_get_binding>
	if (!clk_k32) {
    9d02:	b918      	cbnz	r0, 9d0c <ll_init+0x18>
		return -ENODEV;
    9d04:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    9d08:	b007      	add	sp, #28
    9d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
    9d0c:	6843      	ldr	r3, [r0, #4]
    9d0e:	2101      	movs	r1, #1
    9d10:	681b      	ldr	r3, [r3, #0]
    9d12:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    9d14:	483c      	ldr	r0, [pc, #240]	; (9e08 <ll_init+0x114>)
    9d16:	f001 fda5 	bl	b864 <device_get_binding>
	if (!entropy) {
    9d1a:	4604      	mov	r4, r0
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d0f1      	beq.n	9d04 <ll_init+0x10>
	cntr_init();
    9d20:	f000 fba0 	bl	a464 <cntr_init>
	mayfly_init();
    9d24:	f7f9 fa1e 	bl	3164 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    9d28:	4b38      	ldr	r3, [pc, #224]	; (9e0c <ll_init+0x118>)
    9d2a:	2208      	movs	r2, #8
    9d2c:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    9d2e:	2203      	movs	r2, #3
    9d30:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    9d32:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d34:	4a36      	ldr	r2, [pc, #216]	; (9e10 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    9d36:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    9d38:	2502      	movs	r5, #2
    9d3a:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9d3c:	9205      	str	r2, [sp, #20]
    9d3e:	4a35      	ldr	r2, [pc, #212]	; (9e14 <ll_init+0x120>)
    9d40:	9204      	str	r2, [sp, #16]
    9d42:	4a35      	ldr	r2, [pc, #212]	; (9e18 <ll_init+0x124>)
    9d44:	9203      	str	r2, [sp, #12]
    9d46:	4a35      	ldr	r2, [pc, #212]	; (9e1c <ll_init+0x128>)
    9d48:	9202      	str	r2, [sp, #8]
    9d4a:	220d      	movs	r2, #13
    9d4c:	9201      	str	r2, [sp, #4]
    9d4e:	9300      	str	r3, [sp, #0]
    9d50:	4a33      	ldr	r2, [pc, #204]	; (9e20 <ll_init+0x12c>)
    9d52:	2304      	movs	r3, #4
    9d54:	2107      	movs	r1, #7
    9d56:	f7f9 ffcb 	bl	3cf0 <ticker_init>
	LL_ASSERT(!err);
    9d5a:	4607      	mov	r7, r0
    9d5c:	b170      	cbz	r0, 9d7c <ll_init+0x88>
    9d5e:	4b31      	ldr	r3, [pc, #196]	; (9e24 <ll_init+0x130>)
    9d60:	9301      	str	r3, [sp, #4]
    9d62:	9300      	str	r3, [sp, #0]
    9d64:	4a30      	ldr	r2, [pc, #192]	; (9e28 <ll_init+0x134>)
    9d66:	4b31      	ldr	r3, [pc, #196]	; (9e2c <ll_init+0x138>)
    9d68:	4931      	ldr	r1, [pc, #196]	; (9e30 <ll_init+0x13c>)
    9d6a:	4832      	ldr	r0, [pc, #200]	; (9e34 <ll_init+0x140>)
    9d6c:	f7f7 f87e 	bl	e6c <printk>
    9d70:	4040      	eors	r0, r0
    9d72:	f380 8811 	msr	BASEPRI, r0
    9d76:	f04f 0004 	mov.w	r0, #4
    9d7a:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    9d7c:	482e      	ldr	r0, [pc, #184]	; (9e38 <ll_init+0x144>)
    9d7e:	f001 fd71 	bl	b864 <device_get_binding>
	if (!clk_m16) {
    9d82:	2800      	cmp	r0, #0
    9d84:	d0be      	beq.n	9d04 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    9d86:	4b2d      	ldr	r3, [pc, #180]	; (9e3c <ll_init+0x148>)
    9d88:	9304      	str	r3, [sp, #16]
    9d8a:	9501      	str	r5, [sp, #4]
    9d8c:	231b      	movs	r3, #27
    9d8e:	f44f 76f8 	mov.w	r6, #496	; 0x1f0
    9d92:	2501      	movs	r5, #1
    9d94:	9303      	str	r3, [sp, #12]
    9d96:	9302      	str	r3, [sp, #8]
    9d98:	4622      	mov	r2, r4
    9d9a:	9605      	str	r6, [sp, #20]
    9d9c:	9500      	str	r5, [sp, #0]
    9d9e:	463b      	mov	r3, r7
    9da0:	2107      	movs	r1, #7
    9da2:	f7ff fa2b 	bl	91fc <radio_init>
	if (err) {
    9da6:	4604      	mov	r4, r0
    9da8:	b160      	cbz	r0, 9dc4 <ll_init+0xd0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    9daa:	4b1e      	ldr	r3, [pc, #120]	; (9e24 <ll_init+0x130>)
    9dac:	9303      	str	r3, [sp, #12]
    9dae:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
    9db2:	4a1d      	ldr	r2, [pc, #116]	; (9e28 <ll_init+0x134>)
    9db4:	4b1d      	ldr	r3, [pc, #116]	; (9e2c <ll_init+0x138>)
    9db6:	491e      	ldr	r1, [pc, #120]	; (9e30 <ll_init+0x13c>)
    9db8:	4821      	ldr	r0, [pc, #132]	; (9e40 <ll_init+0x14c>)
    9dba:	f7f7 f857 	bl	e6c <printk>
		return -ENOMEM;
    9dbe:	f06f 000b 	mvn.w	r0, #11
    9dc2:	e7a1      	b.n	9d08 <ll_init+0x14>
	ll_filter_reset(true);
    9dc4:	4628      	mov	r0, r5
    9dc6:	f000 fb41 	bl	a44c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9dca:	4622      	mov	r2, r4
    9dcc:	4621      	mov	r1, r4
    9dce:	4628      	mov	r0, r5
    9dd0:	f7f7 fce4 	bl	179c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9dd4:	4622      	mov	r2, r4
    9dd6:	4621      	mov	r1, r4
    9dd8:	200b      	movs	r0, #11
    9dda:	f7f7 fcdf 	bl	179c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    9dde:	4622      	mov	r2, r4
    9de0:	4621      	mov	r1, r4
    9de2:	2018      	movs	r0, #24
    9de4:	f7f7 fcda 	bl	179c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    9de8:	4628      	mov	r0, r5
    9dea:	f7f7 fca5 	bl	1738 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    9dee:	200b      	movs	r0, #11
    9df0:	f7f7 fca2 	bl	1738 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    9df4:	2018      	movs	r0, #24
    9df6:	f7f7 fc9f 	bl	1738 <_arch_irq_enable>
	return 0;
    9dfa:	4620      	mov	r0, r4
    9dfc:	e784      	b.n	9d08 <ll_init+0x14>
    9dfe:	bf00      	nop
    9e00:	20000d24 	.word	0x20000d24
    9e04:	0000cc38 	.word	0x0000cc38
    9e08:	0000cc0e 	.word	0x0000cc0e
    9e0c:	20000d04 	.word	0x20000d04
    9e10:	0000afbd 	.word	0x0000afbd
    9e14:	0000af19 	.word	0x0000af19
    9e18:	0000aebd 	.word	0x0000aebd
    9e1c:	20000a94 	.word	0x20000a94
    9e20:	2000097c 	.word	0x2000097c
    9e24:	0000cbb3 	.word	0x0000cbb3
    9e28:	0000d49b 	.word	0x0000d49b
    9e2c:	0000eb12 	.word	0x0000eb12
    9e30:	0000d4ea 	.word	0x0000d4ea
    9e34:	0000eb1a 	.word	0x0000eb1a
    9e38:	0000cc43 	.word	0x0000cc43
    9e3c:	2000078c 	.word	0x2000078c
    9e40:	0000eb40 	.word	0x0000eb40

00009e44 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    9e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e48:	b085      	sub	sp, #20
    9e4a:	4699      	mov	r9, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9e4c:	2300      	movs	r3, #0
    9e4e:	f88d 3008 	strb.w	r3, [sp, #8]
    9e52:	2306      	movs	r3, #6
    9e54:	f04f 0a01 	mov.w	sl, #1
    9e58:	f88d 300a 	strb.w	r3, [sp, #10]
    9e5c:	f04f 0b02 	mov.w	fp, #2
    9e60:	2307      	movs	r3, #7
{
    9e62:	460d      	mov	r5, r1
    9e64:	4614      	mov	r4, r2
    9e66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    9e68:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9e6c:	f88d a009 	strb.w	sl, [sp, #9]
    9e70:	f88d b00b 	strb.w	fp, [sp, #11]
    9e74:	f88d a00c 	strb.w	sl, [sp, #12]
    9e78:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    9e7c:	f7ff fa94 	bl	93a8 <ll_adv_is_enabled>
    9e80:	4680      	mov	r8, r0
    9e82:	2800      	cmp	r0, #0
    9e84:	f040 80d9 	bne.w	a03a <ll_adv_params_set+0x1f6>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    9e88:	496f      	ldr	r1, [pc, #444]	; (a048 <ll_adv_params_set+0x204>)
    9e8a:	780b      	ldrb	r3, [r1, #0]

	/* extended */
	if (adv_type > 0x04) {
    9e8c:	f1b9 0f04 	cmp.w	r9, #4
	ll_adv.phy_p = BIT(0);
    9e90:	f36a 1347 	bfi	r3, sl, #5, #3
    9e94:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    9e96:	d96c      	bls.n	9f72 <ll_adv_params_set+0x12e>
		/* legacy */
		if (evt_prop & BIT(4)) {
    9e98:	f015 0f10 	tst.w	r5, #16
    9e9c:	f005 0303 	and.w	r3, r5, #3
    9ea0:	d013      	beq.n	9eca <ll_adv_params_set+0x86>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    9ea2:	2203      	movs	r2, #3
    9ea4:	f88d 2004 	strb.w	r2, [sp, #4]
    9ea8:	2204      	movs	r2, #4
    9eaa:	f88d 2005 	strb.w	r2, [sp, #5]

			adv_type = leg_adv_type[evt_prop & 0x03];
    9eae:	aa04      	add	r2, sp, #16
    9eb0:	4413      	add	r3, r2
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    9eb2:	f88d b006 	strb.w	fp, [sp, #6]
    9eb6:	f88d 0007 	strb.w	r0, [sp, #7]
			adv_type = leg_adv_type[evt_prop & 0x03];
    9eba:	f813 9c0c 	ldrb.w	r9, [r3, #-12]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    9ebe:	072b      	lsls	r3, r5, #28
    9ec0:	d557      	bpl.n	9f72 <ll_adv_params_set+0x12e>
				adv_type = 0x01;
    9ec2:	46d1      	mov	r9, sl
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    9ec4:	2300      	movs	r3, #0
    9ec6:	604b      	str	r3, [r1, #4]
    9ec8:	e00e      	b.n	9ee8 <ll_adv_params_set+0xa4>
			if (((evt_prop & 0x03) == 0x03) ||
    9eca:	2b03      	cmp	r3, #3
    9ecc:	f000 80b8 	beq.w	a040 <ll_adv_params_set+0x1fc>
    9ed0:	f005 030c 	and.w	r3, r5, #12
    9ed4:	2b0c      	cmp	r3, #12
    9ed6:	f000 80b3 	beq.w	a040 <ll_adv_params_set+0x1fc>
			ll_adv.phy_p = phy_p;
    9eda:	780b      	ldrb	r3, [r1, #0]
    9edc:	f367 1347 	bfi	r3, r7, #5, #3
    9ee0:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    9ee2:	f04f 0905 	mov.w	r9, #5
		ll_adv.interval = interval;
    9ee6:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    9ee8:	780b      	ldrb	r3, [r1, #0]
    9eea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    9eee:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    9ef2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    9ef6:	f362 03c4 	bfi	r3, r2, #3, #2
    9efa:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    9efc:	f7ff fa4c 	bl	9398 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9f00:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    9f04:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    9f08:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    9f0c:	ab04      	add	r3, sp, #16
    9f0e:	4499      	add	r9, r3
    9f10:	5c83      	ldrb	r3, [r0, r2]
    9f12:	f819 1c08 	ldrb.w	r1, [r9, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    9f16:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	pdu->type = pdu_adv_type[adv_type];
    9f1a:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    9f1e:	f36f 1304 	bfc	r3, #4, #1
    9f22:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    9f24:	b2db      	uxtb	r3, r3
    9f26:	f003 010f 	and.w	r1, r3, #15
    9f2a:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    9f2c:	bf94      	ite	ls
    9f2e:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    9f32:	f36f 1345 	bfchi	r3, #5, #1
    9f36:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    9f38:	5c83      	ldrb	r3, [r0, r2]
    9f3a:	f009 0901 	and.w	r9, r9, #1
    9f3e:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    9f42:	f36f 13c7 	bfc	r3, #7, #1
    9f46:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9f48:	b2db      	uxtb	r3, r3
    9f4a:	f003 010f 	and.w	r1, r3, #15
    9f4e:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9f50:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9f54:	d111      	bne.n	9f7a <ll_adv_params_set+0x136>
		pdu->rx_addr = direct_addr_type;
    9f56:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    9f5a:	f361 13c7 	bfi	r3, r1, #7, #1
    9f5e:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9f60:	9910      	ldr	r1, [sp, #64]	; 0x40
    9f62:	2206      	movs	r2, #6
    9f64:	f104 0008 	add.w	r0, r4, #8
    9f68:	f7f7 fdb0 	bl	1acc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    9f6c:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    9f6e:	7063      	strb	r3, [r4, #1]
    9f70:	e040      	b.n	9ff4 <ll_adv_params_set+0x1b0>
	if (adv_type != 0x01) {
    9f72:	f1b9 0f01 	cmp.w	r9, #1
    9f76:	d1b6      	bne.n	9ee6 <ll_adv_params_set+0xa2>
    9f78:	e7a4      	b.n	9ec4 <ll_adv_params_set+0x80>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    9f7a:	2907      	cmp	r1, #7
    9f7c:	d158      	bne.n	a030 <ll_adv_params_set+0x1ec>
		p->ext_hdr_len = 0;
    9f7e:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
    9f80:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    9f84:	f365 1187 	bfi	r1, r5, #6, #2
    9f88:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    9f8a:	06a8      	lsls	r0, r5, #26
		*(u8_t *)h = 0;
    9f8c:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    9f90:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    9f94:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
    9f98:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    9f9a:	d409      	bmi.n	9fb0 <ll_adv_params_set+0x16c>
    9f9c:	78a1      	ldrb	r1, [r4, #2]
    9f9e:	f011 0fc0 	tst.w	r1, #192	; 0xc0
    9fa2:	d105      	bne.n	9fb0 <ll_adv_params_set+0x16c>
    9fa4:	2f04      	cmp	r7, #4
			h->adv_addr = 1;
    9fa6:	bf1e      	ittt	ne
    9fa8:	2201      	movne	r2, #1
    9faa:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    9fac:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
    9fb0:	0669      	lsls	r1, r5, #25
			h->tx_pwr = 1;
    9fb2:	bf44      	itt	mi
    9fb4:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
    9fb6:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
    9fb8:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
    9fbc:	bf48      	it	mi
    9fbe:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
    9fc2:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
    9fc4:	bf48      	it	mi
    9fc6:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    9fc8:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    9fca:	bf8a      	itet	hi
    9fcc:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9fce:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    9fd0:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9fd4:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    9fd6:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    9fd8:	bf84      	itt	hi
    9fda:	f360 0105 	bfihi	r1, r0, #0, #6
    9fde:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
    9fe0:	065b      	lsls	r3, r3, #25
    9fe2:	d507      	bpl.n	9ff4 <ll_adv_params_set+0x1b0>
			if (tx_pwr) {
    9fe4:	b316      	cbz	r6, a02c <ll_adv_params_set+0x1e8>
				if (*tx_pwr != 0x7F) {
    9fe6:	7833      	ldrb	r3, [r6, #0]
    9fe8:	2b7f      	cmp	r3, #127	; 0x7f
    9fea:	d101      	bne.n	9ff0 <ll_adv_params_set+0x1ac>
					*tx_pwr = _tx_pwr;
    9fec:	2300      	movs	r3, #0
    9fee:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    9ff0:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    9ff4:	f7ff f9d4 	bl	93a0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9ff8:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    9ffc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    a000:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a004:	2404      	movs	r4, #4
    a006:	5c83      	ldrb	r3, [r0, r2]
    a008:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    a00c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    a010:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    a014:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a018:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    a01a:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    a01c:	784b      	ldrb	r3, [r1, #1]
    a01e:	b90b      	cbnz	r3, a024 <ll_adv_params_set+0x1e0>
		pdu->len = BDADDR_SIZE;
    a020:	2306      	movs	r3, #6
    a022:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    a024:	4640      	mov	r0, r8
    a026:	b005      	add	sp, #20
    a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_tx_pwr = 0;
    a02c:	4633      	mov	r3, r6
    a02e:	e7df      	b.n	9ff0 <ll_adv_params_set+0x1ac>
	} else if (pdu->len == 0) {
    a030:	7863      	ldrb	r3, [r4, #1]
    a032:	2b00      	cmp	r3, #0
    a034:	d1de      	bne.n	9ff4 <ll_adv_params_set+0x1b0>
		pdu->len = BDADDR_SIZE;
    a036:	2306      	movs	r3, #6
    a038:	e799      	b.n	9f6e <ll_adv_params_set+0x12a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a03a:	f04f 080c 	mov.w	r8, #12
    a03e:	e7f1      	b.n	a024 <ll_adv_params_set+0x1e0>
				return 0x12; /* invalid HCI cmd param */
    a040:	f04f 0812 	mov.w	r8, #18
    a044:	e7ee      	b.n	a024 <ll_adv_params_set+0x1e0>
    a046:	bf00      	nop
    a048:	20000d28 	.word	0x20000d28

0000a04c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    a04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a050:	460f      	mov	r7, r1
    a052:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    a054:	f7ff f9a0 	bl	9398 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a058:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    a05c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    a060:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    a064:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a066:	f810 e002 	ldrb.w	lr, [r0, r2]
    a06a:	f00e 030f 	and.w	r3, lr, #15
    a06e:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a070:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a074:	d040      	beq.n	a0f8 <ll_adv_data_set+0xac>
    a076:	2b07      	cmp	r3, #7
    a078:	d03e      	beq.n	a0f8 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    a07a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    a07e:	42ab      	cmp	r3, r5
    a080:	d104      	bne.n	a08c <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    a082:	3501      	adds	r5, #1
    a084:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    a086:	2d02      	cmp	r5, #2
    a088:	bf08      	it	eq
    a08a:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    a08c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a090:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    a094:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    a098:	5ce0      	ldrb	r0, [r4, r3]
    a09a:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
    a09e:	f36f 1004 	bfc	r0, #4, #1
    a0a2:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    a0a4:	5ca0      	ldrb	r0, [r4, r2]
    a0a6:	f814 e003 	ldrb.w	lr, [r4, r3]
    a0aa:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a0ae:	f360 1e45 	bfi	lr, r0, #5, #1
    a0b2:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    a0b6:	5ca0      	ldrb	r0, [r4, r2]
    a0b8:	fa5f fe8e 	uxtb.w	lr, lr
    a0bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a0c0:	f360 1e86 	bfi	lr, r0, #6, #1
    a0c4:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    a0c8:	5ca2      	ldrb	r2, [r4, r2]
    a0ca:	fa5f f08e 	uxtb.w	r0, lr
    a0ce:	09d2      	lsrs	r2, r2, #7
    a0d0:	f362 10c7 	bfi	r0, r2, #7, #1
    a0d4:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a0d6:	2206      	movs	r2, #6
    a0d8:	3102      	adds	r1, #2
    a0da:	f108 0002 	add.w	r0, r8, #2
    a0de:	f7f7 fcf5 	bl	1acc <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    a0e2:	4632      	mov	r2, r6
    a0e4:	4639      	mov	r1, r7
    a0e6:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    a0ea:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    a0ec:	f7f7 fcee 	bl	1acc <memcpy>
	pdu->len = BDADDR_SIZE + len;
    a0f0:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    a0f4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
    a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a0fc <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a100:	4606      	mov	r6, r0
    a102:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    a104:	f7ff f94c 	bl	93a0 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    a108:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    a10c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    a110:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    a112:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    a114:	d136      	bne.n	a184 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
    a116:	1c5d      	adds	r5, r3, #1
    a118:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    a11a:	2d02      	cmp	r5, #2
			last = 0;
    a11c:	bf08      	it	eq
    a11e:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    a120:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    a124:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a128:	b22b      	sxth	r3, r5
    a12a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    a12e:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a132:	f04f 0e04 	mov.w	lr, #4
    a136:	5ce0      	ldrb	r0, [r4, r3]
    a138:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    a13c:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    a140:	f36f 1045 	bfc	r0, #5, #1
    a144:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    a146:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    a148:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    a14a:	5ce2      	ldrb	r2, [r4, r3]
    a14c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a150:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a154:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    a158:	f36f 12c7 	bfc	r2, #7, #1
    a15c:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    a15e:	1db3      	adds	r3, r6, #6
    a160:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a164:	2206      	movs	r2, #6
    a166:	3102      	adds	r1, #2
    a168:	f108 0002 	add.w	r0, r8, #2
    a16c:	f7f7 fcae 	bl	1acc <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    a170:	4632      	mov	r2, r6
    a172:	4639      	mov	r1, r7
    a174:	f108 0008 	add.w	r0, r8, #8
    a178:	f7f7 fca8 	bl	1acc <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    a17c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
    a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a184:	461d      	mov	r5, r3
    a186:	e7cb      	b.n	a120 <ll_scan_data_set+0x24>

0000a188 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    a188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    a18c:	b920      	cbnz	r0, a198 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    a18e:	b003      	add	sp, #12
    a190:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    a194:	f7ff bba2 	b.w	98dc <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    a198:	f7ff f906 	bl	93a8 <ll_adv_is_enabled>
    a19c:	4607      	mov	r7, r0
    a19e:	2800      	cmp	r0, #0
    a1a0:	d14e      	bne.n	a240 <ll_adv_enable+0xb8>
	radio_adv_data = radio_adv_data_get();
    a1a2:	f7ff f8f9 	bl	9398 <radio_adv_data_get>
    a1a6:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    a1a8:	f7ff f8fa 	bl	93a0 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a1ac:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    a1b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a1b4:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    a1b8:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a1ba:	f818 0004 	ldrb.w	r0, [r8, r4]
    a1be:	f000 030f 	and.w	r3, r0, #15
    a1c2:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a1c4:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a1c8:	d11d      	bne.n	a206 <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    a1ca:	f899 3003 	ldrb.w	r3, [r9, #3]
    a1ce:	07db      	lsls	r3, r3, #31
    a1d0:	d50a      	bpl.n	a1e8 <ll_adv_enable+0x60>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    a1d2:	4639      	mov	r1, r7
    a1d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a1d8:	f7f9 ff48 	bl	406c <ll_addr_get>
    a1dc:	2206      	movs	r2, #6
    a1de:	4601      	mov	r1, r0
    a1e0:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a1e4:	f7f7 fc72 	bl	1acc <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    a1e8:	4b16      	ldr	r3, [pc, #88]	; (a244 <ll_adv_enable+0xbc>)
    a1ea:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    a1ec:	8899      	ldrh	r1, [r3, #4]
    a1ee:	23ff      	movs	r3, #255	; 0xff
    a1f0:	9300      	str	r3, [sp, #0]
    a1f2:	f000 0207 	and.w	r2, r0, #7
    a1f6:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    a1fa:	0940      	lsrs	r0, r0, #5
    a1fc:	f7ff f9f0 	bl	95e0 <radio_adv_enable>
}
    a200:	b003      	add	sp, #12
    a202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a206:	4639      	mov	r1, r7
    a208:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    a20c:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a210:	f7f9 ff2c 	bl	406c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    a214:	2206      	movs	r2, #6
    a216:	4601      	mov	r1, r0
    a218:	f109 0002 	add.w	r0, r9, #2
    a21c:	f7f7 fc56 	bl	1acc <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a220:	f818 0004 	ldrb.w	r0, [r8, r4]
    a224:	4639      	mov	r1, r7
    a226:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a22a:	f7f9 ff1f 	bl	406c <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    a22e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    a232:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    a236:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a238:	4601      	mov	r1, r0
    a23a:	2206      	movs	r2, #6
    a23c:	1ca8      	adds	r0, r5, #2
    a23e:	e7d1      	b.n	a1e4 <ll_adv_enable+0x5c>
		return 0;
    a240:	2000      	movs	r0, #0
    a242:	e7dd      	b.n	a200 <ll_adv_enable+0x78>
    a244:	20000d28 	.word	0x20000d28

0000a248 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a24c:	4681      	mov	r9, r0
    a24e:	4688      	mov	r8, r1
    a250:	4617      	mov	r7, r2
    a252:	461e      	mov	r6, r3
	if (ll_scan_is_enabled()) {
    a254:	f7ff f8bc 	bl	93d0 <ll_scan_is_enabled>
    a258:	b988      	cbnz	r0, a27e <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
    a25a:	4d0a      	ldr	r5, [pc, #40]	; (a284 <ll_scan_params_set+0x3c>)
    a25c:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    a25e:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
    a262:	f369 0403 	bfi	r4, r9, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    a266:	4622      	mov	r2, r4
    a268:	f366 1205 	bfi	r2, r6, #4, #2
	ll_scan.filter_policy = filter_policy;
    a26c:	4613      	mov	r3, r2
    a26e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    a272:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    a274:	f362 1387 	bfi	r3, r2, #6, #2
    a278:	712b      	strb	r3, [r5, #4]

	return 0;
    a27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a27e:	200c      	movs	r0, #12
}
    a280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a284:	20000d30 	.word	0x20000d30

0000a288 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    a288:	b5f0      	push	{r4, r5, r6, r7, lr}
    a28a:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    a28c:	b920      	cbnz	r0, a298 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    a28e:	b005      	add	sp, #20
    a290:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    a294:	f7ff bc22 	b.w	9adc <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    a298:	f7ff f89a 	bl	93d0 <ll_scan_is_enabled>
    a29c:	4606      	mov	r6, r0
    a29e:	b9c8      	cbnz	r0, a2d4 <ll_scan_enable+0x4c>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    a2a0:	4d0d      	ldr	r5, [pc, #52]	; (a2d8 <ll_scan_enable+0x50>)
    a2a2:	792c      	ldrb	r4, [r5, #4]
    a2a4:	f004 070f 	and.w	r7, r4, #15
    a2a8:	f3c4 1400 	ubfx	r4, r4, #4, #1
    a2ac:	4601      	mov	r1, r0
    a2ae:	4620      	mov	r0, r4
    a2b0:	f7f9 fedc 	bl	406c <ll_addr_get>
    a2b4:	22ff      	movs	r2, #255	; 0xff
    a2b6:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    a2b8:	792a      	ldrb	r2, [r5, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    a2ba:	882b      	ldrh	r3, [r5, #0]
    a2bc:	9602      	str	r6, [sp, #8]
    a2be:	0992      	lsrs	r2, r2, #6
    a2c0:	9201      	str	r2, [sp, #4]
    a2c2:	886a      	ldrh	r2, [r5, #2]
    a2c4:	9200      	str	r2, [sp, #0]
    a2c6:	4621      	mov	r1, r4
    a2c8:	4602      	mov	r2, r0
    a2ca:	4638      	mov	r0, r7
    a2cc:	f7ff fb34 	bl	9938 <radio_scan_enable>
}
    a2d0:	b005      	add	sp, #20
    a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    a2d4:	2000      	movs	r0, #0
    a2d6:	e7fb      	b.n	a2d0 <ll_scan_enable+0x48>
    a2d8:	20000d30 	.word	0x20000d30

0000a2dc <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    a2dc:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    a2de:	b970      	cbnz	r0, a2fe <ctrl_filter_get+0x22>
    a2e0:	4b09      	ldr	r3, [pc, #36]	; (a308 <ctrl_filter_get+0x2c>)
    a2e2:	9301      	str	r3, [sp, #4]
    a2e4:	9300      	str	r3, [sp, #0]
    a2e6:	4a09      	ldr	r2, [pc, #36]	; (a30c <ctrl_filter_get+0x30>)
    a2e8:	4b09      	ldr	r3, [pc, #36]	; (a310 <ctrl_filter_get+0x34>)
    a2ea:	490a      	ldr	r1, [pc, #40]	; (a314 <ctrl_filter_get+0x38>)
    a2ec:	480a      	ldr	r0, [pc, #40]	; (a318 <ctrl_filter_get+0x3c>)
    a2ee:	f7f6 fdbd 	bl	e6c <printk>
    a2f2:	4040      	eors	r0, r0
    a2f4:	f380 8811 	msr	BASEPRI, r0
    a2f8:	f04f 0004 	mov.w	r0, #4
    a2fc:	df02      	svc	2
	return &wl_filter;
#endif
}
    a2fe:	4807      	ldr	r0, [pc, #28]	; (a31c <ctrl_filter_get+0x40>)
    a300:	b003      	add	sp, #12
    a302:	f85d fb04 	ldr.w	pc, [sp], #4
    a306:	bf00      	nop
    a308:	0000cbb3 	.word	0x0000cbb3
    a30c:	0000d49b 	.word	0x0000d49b
    a310:	0000eb75 	.word	0x0000eb75
    a314:	0000d4ea 	.word	0x0000d4ea
    a318:	0000eb85 	.word	0x0000eb85
    a31c:	20000d36 	.word	0x20000d36

0000a320 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    a320:	2008      	movs	r0, #8
    a322:	4770      	bx	lr

0000a324 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    a324:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a326:	f7ff f847 	bl	93b8 <radio_adv_filter_pol_get>
    a32a:	4604      	mov	r4, r0
    a32c:	b110      	cbz	r0, a334 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a32e:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    a330:	4620      	mov	r0, r4
    a332:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a334:	f7ff f862 	bl	93fc <radio_scan_filter_pol_get>
    a338:	07c3      	lsls	r3, r0, #31
    a33a:	d4f8      	bmi.n	a32e <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    a33c:	4b02      	ldr	r3, [pc, #8]	; (a348 <ll_wl_clear+0x24>)
    a33e:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    a340:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    a342:	4b02      	ldr	r3, [pc, #8]	; (a34c <ll_wl_clear+0x28>)
    a344:	701c      	strb	r4, [r3, #0]
	return 0;
    a346:	e7f3      	b.n	a330 <ll_wl_clear+0xc>
    a348:	20000d36 	.word	0x20000d36
    a34c:	200011dc 	.word	0x200011dc

0000a350 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    a350:	b570      	push	{r4, r5, r6, lr}
    a352:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a354:	f7ff f830 	bl	93b8 <radio_adv_filter_pol_get>
    a358:	4605      	mov	r5, r0
    a35a:	b110      	cbz	r0, a362 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a35c:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    a35e:	4628      	mov	r0, r5
    a360:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a362:	f7ff f84b 	bl	93fc <radio_scan_filter_pol_get>
    a366:	07c3      	lsls	r3, r0, #31
    a368:	d4f8      	bmi.n	a35c <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    a36a:	7823      	ldrb	r3, [r4, #0]
    a36c:	2bff      	cmp	r3, #255	; 0xff
    a36e:	d103      	bne.n	a378 <ll_wl_add+0x28>
		wl_anon = 1;
    a370:	4b11      	ldr	r3, [pc, #68]	; (a3b8 <ll_wl_add+0x68>)
    a372:	2201      	movs	r2, #1
    a374:	701a      	strb	r2, [r3, #0]
		return 0;
    a376:	e7f2      	b.n	a35e <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    a378:	4910      	ldr	r1, [pc, #64]	; (a3bc <ll_wl_add+0x6c>)
    a37a:	780a      	ldrb	r2, [r1, #0]
    a37c:	2aff      	cmp	r2, #255	; 0xff
    a37e:	d018      	beq.n	a3b2 <ll_wl_add+0x62>
    a380:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    a382:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    a386:	07f6      	lsls	r6, r6, #31
    a388:	d411      	bmi.n	a3ae <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    a38a:	2601      	movs	r6, #1
    a38c:	4086      	lsls	r6, r0
    a38e:	4332      	orrs	r2, r6
    a390:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    a392:	f003 0301 	and.w	r3, r3, #1
    a396:	784a      	ldrb	r2, [r1, #1]
    a398:	4083      	lsls	r3, r0
    a39a:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    a39c:	2206      	movs	r2, #6
    a39e:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    a3a2:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    a3a4:	3002      	adds	r0, #2
    a3a6:	1c61      	adds	r1, r4, #1
    a3a8:	f7f7 fb90 	bl	1acc <memcpy>
    a3ac:	e7d7      	b.n	a35e <ll_wl_add+0xe>
	     index++) {
    a3ae:	3001      	adds	r0, #1
    a3b0:	e7e7      	b.n	a382 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    a3b2:	2507      	movs	r5, #7
    a3b4:	e7d3      	b.n	a35e <ll_wl_add+0xe>
    a3b6:	bf00      	nop
    a3b8:	200011dc 	.word	0x200011dc
    a3bc:	20000d36 	.word	0x20000d36

0000a3c0 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a3c4:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a3c6:	f7fe fff7 	bl	93b8 <radio_adv_filter_pol_get>
    a3ca:	4606      	mov	r6, r0
    a3cc:	b118      	cbz	r0, a3d6 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a3ce:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    a3d0:	4630      	mov	r0, r6
    a3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    a3d6:	f7ff f811 	bl	93fc <radio_scan_filter_pol_get>
    a3da:	07c1      	lsls	r1, r0, #31
    a3dc:	d4f7      	bmi.n	a3ce <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    a3de:	f897 8000 	ldrb.w	r8, [r7]
    a3e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a3e6:	d102      	bne.n	a3ee <ll_wl_remove+0x2e>
		wl_anon = 0;
    a3e8:	4b16      	ldr	r3, [pc, #88]	; (a444 <ll_wl_remove+0x84>)
    a3ea:	701e      	strb	r6, [r3, #0]
		return 0;
    a3ec:	e7f0      	b.n	a3d0 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    a3ee:	4c16      	ldr	r4, [pc, #88]	; (a448 <ll_wl_remove+0x88>)
    a3f0:	7823      	ldrb	r3, [r4, #0]
    a3f2:	b133      	cbz	r3, a402 <ll_wl_remove+0x42>
    a3f4:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    a3f6:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    a3f8:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    a3fc:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    a400:	d201      	bcs.n	a406 <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    a402:	2612      	movs	r6, #18
    a404:	e7e4      	b.n	a3d0 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    a406:	7823      	ldrb	r3, [r4, #0]
    a408:	40eb      	lsrs	r3, r5
    a40a:	07da      	lsls	r2, r3, #31
    a40c:	d5f6      	bpl.n	a3fc <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    a40e:	7863      	ldrb	r3, [r4, #1]
    a410:	412b      	asrs	r3, r5
    a412:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    a416:	07db      	lsls	r3, r3, #31
    a418:	d4f0      	bmi.n	a3fc <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    a41a:	fb09 4005 	mla	r0, r9, r5, r4
    a41e:	2206      	movs	r2, #6
    a420:	4639      	mov	r1, r7
    a422:	3002      	adds	r0, #2
    a424:	f7f7 fb3d 	bl	1aa2 <memcmp>
		     (addr_type & 0x01)) &&
    a428:	2800      	cmp	r0, #0
    a42a:	d1e7      	bne.n	a3fc <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    a42c:	2301      	movs	r3, #1
    a42e:	40ab      	lsls	r3, r5
    a430:	7822      	ldrb	r2, [r4, #0]
    a432:	43db      	mvns	r3, r3
    a434:	b2db      	uxtb	r3, r3
    a436:	401a      	ands	r2, r3
    a438:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    a43a:	7862      	ldrb	r2, [r4, #1]
    a43c:	4013      	ands	r3, r2
    a43e:	7063      	strb	r3, [r4, #1]
    a440:	e7c6      	b.n	a3d0 <ll_wl_remove+0x10>
    a442:	bf00      	nop
    a444:	200011dc 	.word	0x200011dc
    a448:	20000d36 	.word	0x20000d36

0000a44c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    a44c:	4a03      	ldr	r2, [pc, #12]	; (a45c <ll_filter_reset+0x10>)
    a44e:	2300      	movs	r3, #0
    a450:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    a452:	4a03      	ldr	r2, [pc, #12]	; (a460 <ll_filter_reset+0x14>)
    a454:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    a456:	7053      	strb	r3, [r2, #1]
    a458:	4770      	bx	lr
    a45a:	bf00      	nop
    a45c:	200011dc 	.word	0x200011dc
    a460:	20000d36 	.word	0x20000d36

0000a464 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    a464:	4b05      	ldr	r3, [pc, #20]	; (a47c <cntr_init+0x18>)
    a466:	2200      	movs	r2, #0
    a468:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    a46c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    a470:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    a474:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    a478:	4770      	bx	lr
    a47a:	bf00      	nop
    a47c:	4000b000 	.word	0x4000b000

0000a480 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    a480:	4a04      	ldr	r2, [pc, #16]	; (a494 <cntr_start+0x14>)
    a482:	7813      	ldrb	r3, [r2, #0]
    a484:	1c59      	adds	r1, r3, #1
    a486:	7011      	strb	r1, [r2, #0]
    a488:	2001      	movs	r0, #1
    a48a:	b913      	cbnz	r3, a492 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    a48c:	4a02      	ldr	r2, [pc, #8]	; (a498 <cntr_start+0x18>)
    a48e:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    a490:	4618      	mov	r0, r3
}
    a492:	4770      	bx	lr
    a494:	20000d68 	.word	0x20000d68
    a498:	4000b000 	.word	0x4000b000

0000a49c <cntr_stop>:

u32_t cntr_stop(void)
{
    a49c:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    a49e:	4b0f      	ldr	r3, [pc, #60]	; (a4dc <cntr_stop+0x40>)
    a4a0:	7818      	ldrb	r0, [r3, #0]
    a4a2:	b970      	cbnz	r0, a4c2 <cntr_stop+0x26>
    a4a4:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <cntr_stop+0x44>)
    a4a6:	9301      	str	r3, [sp, #4]
    a4a8:	9300      	str	r3, [sp, #0]
    a4aa:	4a0e      	ldr	r2, [pc, #56]	; (a4e4 <cntr_stop+0x48>)
    a4ac:	4b0e      	ldr	r3, [pc, #56]	; (a4e8 <cntr_stop+0x4c>)
    a4ae:	490f      	ldr	r1, [pc, #60]	; (a4ec <cntr_stop+0x50>)
    a4b0:	480f      	ldr	r0, [pc, #60]	; (a4f0 <cntr_stop+0x54>)
    a4b2:	f7f6 fcdb 	bl	e6c <printk>
    a4b6:	4040      	eors	r0, r0
    a4b8:	f380 8811 	msr	BASEPRI, r0
    a4bc:	f04f 0004 	mov.w	r0, #4
    a4c0:	df02      	svc	2

	if (--_refcount) {
    a4c2:	3801      	subs	r0, #1
    a4c4:	b2c0      	uxtb	r0, r0
    a4c6:	7018      	strb	r0, [r3, #0]
    a4c8:	2301      	movs	r3, #1
    a4ca:	b920      	cbnz	r0, a4d6 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    a4cc:	4a09      	ldr	r2, [pc, #36]	; (a4f4 <cntr_stop+0x58>)
    a4ce:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
    a4d0:	b003      	add	sp, #12
    a4d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
    a4d6:	4618      	mov	r0, r3
    a4d8:	e7fa      	b.n	a4d0 <cntr_stop+0x34>
    a4da:	bf00      	nop
    a4dc:	20000d68 	.word	0x20000d68
    a4e0:	0000cbb3 	.word	0x0000cbb3
    a4e4:	0000d49b 	.word	0x0000d49b
    a4e8:	0000ebb0 	.word	0x0000ebb0
    a4ec:	0000d4ea 	.word	0x0000d4ea
    a4f0:	0000ebba 	.word	0x0000ebba
    a4f4:	4000b000 	.word	0x4000b000

0000a4f8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    a4f8:	4b01      	ldr	r3, [pc, #4]	; (a500 <cntr_cnt_get+0x8>)
    a4fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    a4fe:	4770      	bx	lr
    a500:	4000b000 	.word	0x4000b000

0000a504 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    a504:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    a508:	4b01      	ldr	r3, [pc, #4]	; (a510 <cntr_cmp_set+0xc>)
    a50a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    a50e:	4770      	bx	lr
    a510:	4000b000 	.word	0x4000b000

0000a514 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    a514:	4b11      	ldr	r3, [pc, #68]	; (a55c <do_ecb+0x48>)
{
    a516:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    a518:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    a51a:	2500      	movs	r5, #0
    a51c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    a51e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    a520:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    a524:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    a528:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    a52c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a52e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    a532:	b934      	cbnz	r4, a542 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a534:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a538:	b91c      	cbnz	r4, a542 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    a53a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a53e:	2c00      	cmp	r4, #0
    a540:	d1f5      	bne.n	a52e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    a542:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    a544:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    a548:	2c00      	cmp	r4, #0
    a54a:	d1e8      	bne.n	a51e <do_ecb+0xa>
    a54c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    a550:	2e00      	cmp	r6, #0
    a552:	d0e4      	beq.n	a51e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    a554:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    a558:	bd70      	pop	{r4, r5, r6, pc}
    a55a:	bf00      	nop
    a55c:	4000e000 	.word	0x4000e000

0000a560 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a560:	b570      	push	{r4, r5, r6, lr}
    a562:	b08c      	sub	sp, #48	; 0x30
    a564:	460e      	mov	r6, r1
    a566:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a568:	4601      	mov	r1, r0
    a56a:	2210      	movs	r2, #16
    a56c:	4668      	mov	r0, sp
{
    a56e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a570:	f7f8 fdc8 	bl	3104 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    a574:	2210      	movs	r2, #16
    a576:	eb0d 0002 	add.w	r0, sp, r2
    a57a:	4631      	mov	r1, r6
    a57c:	f7f8 fdc2 	bl	3104 <mem_rcopy>

	do_ecb(&ecb);
    a580:	4668      	mov	r0, sp
    a582:	f7ff ffc7 	bl	a514 <do_ecb>

	if (cipher_text_le) {
    a586:	b125      	cbz	r5, a592 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    a588:	2210      	movs	r2, #16
    a58a:	a908      	add	r1, sp, #32
    a58c:	4628      	mov	r0, r5
    a58e:	f7f8 fdb9 	bl	3104 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    a592:	b124      	cbz	r4, a59e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    a594:	2210      	movs	r2, #16
    a596:	a908      	add	r1, sp, #32
    a598:	4620      	mov	r0, r4
    a59a:	f7f7 fa97 	bl	1acc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    a59e:	b00c      	add	sp, #48	; 0x30
    a5a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a5a4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    a5a4:	4b07      	ldr	r3, [pc, #28]	; (a5c4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    a5a6:	4a08      	ldr	r2, [pc, #32]	; (a5c8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    a5a8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    a5ac:	4907      	ldr	r1, [pc, #28]	; (a5cc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    a5ae:	4a08      	ldr	r2, [pc, #32]	; (a5d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    a5b0:	2800      	cmp	r0, #0
    a5b2:	bf14      	ite	ne
    a5b4:	4610      	movne	r0, r2
    a5b6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    a5b8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    a5ba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    a5be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    a5c2:	4770      	bx	lr
    a5c4:	4001f000 	.word	0x4001f000
    a5c8:	40008140 	.word	0x40008140
    a5cc:	40001004 	.word	0x40001004
    a5d0:	40001000 	.word	0x40001000

0000a5d4 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    a5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a5d6:	4e2c      	ldr	r6, [pc, #176]	; (a688 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    a5d8:	4f2c      	ldr	r7, [pc, #176]	; (a68c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a5da:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    a5dc:	4b2c      	ldr	r3, [pc, #176]	; (a690 <sw_switch.isra.9+0xbc>)
    a5de:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    a5e2:	b22b      	sxth	r3, r5
    a5e4:	00dc      	lsls	r4, r3, #3
    a5e6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    a5ea:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    a5ee:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    a5f2:	f105 040b 	add.w	r4, r5, #11
    a5f6:	b2e4      	uxtb	r4, r4
    a5f8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    a5fa:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    a5fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    a602:	3fc0      	subs	r7, #192	; 0xc0
    a604:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    a608:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    a60c:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    a610:	2800      	cmp	r0, #0
    a612:	d034      	beq.n	a67e <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
    a614:	f24a 075a 	movw	r7, #41050	; 0xa05a
    a618:	f649 4040 	movw	r0, #40000	; 0x9c40
    a61c:	2a02      	cmp	r2, #2
    a61e:	bf0c      	ite	eq
    a620:	4602      	moveq	r2, r0
    a622:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
    a624:	f242 47b8 	movw	r7, #9400	; 0x24b8
    a628:	f241 504a 	movw	r0, #5450	; 0x154a
    a62c:	2902      	cmp	r1, #2
    a62e:	bf18      	it	ne
    a630:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    a632:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    a636:	4401      	add	r1, r0
    a638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a63c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    a640:	4a14      	ldr	r2, [pc, #80]	; (a694 <sw_switch.isra.9+0xc0>)
    a642:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    a646:	009b      	lsls	r3, r3, #2
    a648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a64c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    a650:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    a654:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a656:	bf8b      	itete	hi
    a658:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    a65c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a65e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    a660:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a664:	bf88      	it	hi
    a666:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    a66a:	4b08      	ldr	r3, [pc, #32]	; (a68c <sw_switch.isra.9+0xb8>)
    a66c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a670:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    a674:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    a676:	f003 0301 	and.w	r3, r3, #1
    a67a:	7033      	strb	r3, [r6, #0]
    a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    a67e:	4a06      	ldr	r2, [pc, #24]	; (a698 <sw_switch.isra.9+0xc4>)
    a680:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    a684:	212d      	movs	r1, #45	; 0x2d
    a686:	e7de      	b.n	a646 <sw_switch.isra.9+0x72>
    a688:	20000f88 	.word	0x20000f88
    a68c:	4001f000 	.word	0x4001f000
    a690:	4000110c 	.word	0x4000110c
    a694:	40001000 	.word	0x40001000
    a698:	40001004 	.word	0x40001004

0000a69c <isr_radio>:
	if (sfp_radio_isr) {
    a69c:	4b02      	ldr	r3, [pc, #8]	; (a6a8 <isr_radio+0xc>)
    a69e:	681b      	ldr	r3, [r3, #0]
    a6a0:	b103      	cbz	r3, a6a4 <isr_radio+0x8>
		sfp_radio_isr();
    a6a2:	4718      	bx	r3
    a6a4:	4770      	bx	lr
    a6a6:	bf00      	nop
    a6a8:	20000f84 	.word	0x20000f84

0000a6ac <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a6ac:	4b06      	ldr	r3, [pc, #24]	; (a6c8 <radio_isr_set+0x1c>)
    a6ae:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    a6b0:	4b06      	ldr	r3, [pc, #24]	; (a6cc <radio_isr_set+0x20>)
    a6b2:	2210      	movs	r2, #16
    a6b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a6b8:	4b05      	ldr	r3, [pc, #20]	; (a6d0 <radio_isr_set+0x24>)
    a6ba:	2202      	movs	r2, #2
    a6bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    a6c0:	2001      	movs	r0, #1
    a6c2:	f7f7 b839 	b.w	1738 <_arch_irq_enable>
    a6c6:	bf00      	nop
    a6c8:	20000f84 	.word	0x20000f84
    a6cc:	40001000 	.word	0x40001000
    a6d0:	e000e100 	.word	0xe000e100

0000a6d4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a6d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a6dc:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a6de:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    a6e2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a6e6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    a6ea:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    a6ee:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    a6f2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    a6f6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    a6fa:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    a6fe:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    a702:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    a706:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    a70a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    a70e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    a712:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    a716:	4770      	bx	lr

0000a718 <radio_reset>:
{
    a718:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    a71a:	2001      	movs	r0, #1
    a71c:	f7f7 f81c 	bl	1758 <_arch_irq_disable>
	NRF_RADIO->POWER =
    a720:	4b08      	ldr	r3, [pc, #32]	; (a744 <radio_reset+0x2c>)
    a722:	2200      	movs	r2, #0
    a724:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    a728:	2201      	movs	r2, #1
    a72a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a72e:	4a06      	ldr	r2, [pc, #24]	; (a748 <radio_reset+0x30>)
    a730:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    a732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    a736:	f023 0301 	bic.w	r3, r3, #1
    a73a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a73e:	6013      	str	r3, [r2, #0]
    a740:	bd08      	pop	{r3, pc}
    a742:	bf00      	nop
    a744:	40001000 	.word	0x40001000
    a748:	40001774 	.word	0x40001774

0000a74c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    a74c:	4b06      	ldr	r3, [pc, #24]	; (a768 <radio_phy_set+0x1c>)
	switch (phy) {
    a74e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    a750:	bf0c      	ite	eq
    a752:	2204      	moveq	r2, #4
    a754:	2203      	movne	r2, #3
    a756:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    a75a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    a75e:	f042 0201 	orr.w	r2, r2, #1
    a762:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    a766:	4770      	bx	lr
    a768:	40001000 	.word	0x40001000

0000a76c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    a76c:	4b01      	ldr	r3, [pc, #4]	; (a774 <radio_tx_power_set+0x8>)
    a76e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    a772:	4770      	bx	lr
    a774:	40001000 	.word	0x40001000

0000a778 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    a778:	4b01      	ldr	r3, [pc, #4]	; (a780 <radio_freq_chan_set+0x8>)
    a77a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    a77e:	4770      	bx	lr
    a780:	40001000 	.word	0x40001000

0000a784 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    a784:	4b07      	ldr	r3, [pc, #28]	; (a7a4 <radio_whiten_iv_set+0x20>)
    a786:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    a78a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a78e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    a792:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    a796:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a79a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    a79e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    a7a2:	4770      	bx	lr
    a7a4:	40001000 	.word	0x40001000

0000a7a8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    a7a8:	4a0a      	ldr	r2, [pc, #40]	; (a7d4 <radio_aa_set+0x2c>)
    a7aa:	2300      	movs	r3, #0
    a7ac:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    a7b0:	2301      	movs	r3, #1
    a7b2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    a7b6:	78c3      	ldrb	r3, [r0, #3]
    a7b8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    a7bc:	7843      	ldrb	r3, [r0, #1]
    a7be:	7881      	ldrb	r1, [r0, #2]
    a7c0:	041b      	lsls	r3, r3, #16
    a7c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    a7c6:	7801      	ldrb	r1, [r0, #0]
    a7c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a7cc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    a7d0:	4770      	bx	lr
    a7d2:	bf00      	nop
    a7d4:	40001000 	.word	0x40001000

0000a7d8 <radio_pkt_configure>:
	switch (phy) {
    a7d8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a7dc:	2b02      	cmp	r3, #2
{
    a7de:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a7e0:	bf0c      	ite	eq
    a7e2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    a7e6:	2400      	movne	r4, #0
	if (dc) {
    a7e8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a7ea:	f1c0 0308 	rsb	r3, r0, #8
    a7ee:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    a7f2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    a7f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a7fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a7fe:	4a0b      	ldr	r2, [pc, #44]	; (a82c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    a800:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    a804:	bf48      	it	mi
    a806:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    a80a:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a80c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    a810:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    a814:	4b06      	ldr	r3, [pc, #24]	; (a830 <radio_pkt_configure+0x58>)
    a816:	4003      	ands	r3, r0
    a818:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    a81c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    a820:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    a824:	4319      	orrs	r1, r3
    a826:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    a82a:	bd10      	pop	{r4, pc}
    a82c:	40001000 	.word	0x40001000
    a830:	fef80000 	.word	0xfef80000

0000a834 <radio_pkt_rx_set>:
    a834:	4b01      	ldr	r3, [pc, #4]	; (a83c <radio_pkt_rx_set+0x8>)
    a836:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    a83a:	4770      	bx	lr
    a83c:	40001000 	.word	0x40001000

0000a840 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    a840:	4b01      	ldr	r3, [pc, #4]	; (a848 <radio_pkt_tx_set+0x8>)
    a842:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    a846:	4770      	bx	lr
    a848:	40001000 	.word	0x40001000

0000a84c <radio_tx_ready_delay_get>:
	switch (phy) {
    a84c:	2802      	cmp	r0, #2
}
    a84e:	bf0c      	ite	eq
    a850:	2028      	moveq	r0, #40	; 0x28
    a852:	2029      	movne	r0, #41	; 0x29
    a854:	4770      	bx	lr

0000a856 <radio_tx_chain_delay_get>:
}
    a856:	2001      	movs	r0, #1
    a858:	4770      	bx	lr

0000a85a <radio_rx_ready_delay_get>:
}
    a85a:	2029      	movs	r0, #41	; 0x29
    a85c:	4770      	bx	lr

0000a85e <radio_rx_chain_delay_get>:
	switch (phy) {
    a85e:	2802      	cmp	r0, #2
}
    a860:	bf0c      	ite	eq
    a862:	2006      	moveq	r0, #6
    a864:	200a      	movne	r0, #10
    a866:	4770      	bx	lr

0000a868 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    a868:	4b01      	ldr	r3, [pc, #4]	; (a870 <radio_rx_enable+0x8>)
    a86a:	2201      	movs	r2, #1
    a86c:	605a      	str	r2, [r3, #4]
    a86e:	4770      	bx	lr
    a870:	40001000 	.word	0x40001000

0000a874 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    a874:	4b01      	ldr	r3, [pc, #4]	; (a87c <radio_tx_enable+0x8>)
    a876:	2201      	movs	r2, #1
    a878:	601a      	str	r2, [r3, #0]
    a87a:	4770      	bx	lr
    a87c:	40001000 	.word	0x40001000

0000a880 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a880:	4a07      	ldr	r2, [pc, #28]	; (a8a0 <radio_disable+0x20>)
    a882:	f44f 6390 	mov.w	r3, #1152	; 0x480
    a886:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    a88a:	2301      	movs	r3, #1
    a88c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    a88e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    a890:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    a894:	2100      	movs	r1, #0
    a896:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    a89a:	6113      	str	r3, [r2, #16]
    a89c:	4770      	bx	lr
    a89e:	bf00      	nop
    a8a0:	4001f000 	.word	0x4001f000

0000a8a4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    a8a4:	4b04      	ldr	r3, [pc, #16]	; (a8b8 <radio_status_reset+0x14>)
    a8a6:	2200      	movs	r2, #0
    a8a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    a8ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    a8b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    a8b4:	4770      	bx	lr
    a8b6:	bf00      	nop
    a8b8:	40001000 	.word	0x40001000

0000a8bc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    a8bc:	4b03      	ldr	r3, [pc, #12]	; (a8cc <radio_is_ready+0x10>)
    a8be:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    a8c2:	3000      	adds	r0, #0
    a8c4:	bf18      	it	ne
    a8c6:	2001      	movne	r0, #1
    a8c8:	4770      	bx	lr
    a8ca:	bf00      	nop
    a8cc:	40001000 	.word	0x40001000

0000a8d0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    a8d0:	4b03      	ldr	r3, [pc, #12]	; (a8e0 <radio_is_done+0x10>)
    a8d2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    a8d6:	3000      	adds	r0, #0
    a8d8:	bf18      	it	ne
    a8da:	2001      	movne	r0, #1
    a8dc:	4770      	bx	lr
    a8de:	bf00      	nop
    a8e0:	40001000 	.word	0x40001000

0000a8e4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    a8e4:	4b03      	ldr	r3, [pc, #12]	; (a8f4 <radio_is_idle+0x10>)
    a8e6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    a8ea:	fab0 f080 	clz	r0, r0
    a8ee:	0940      	lsrs	r0, r0, #5
    a8f0:	4770      	bx	lr
    a8f2:	bf00      	nop
    a8f4:	40001000 	.word	0x40001000

0000a8f8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    a8f8:	4b04      	ldr	r3, [pc, #16]	; (a90c <radio_crc_configure+0x14>)
    a8fa:	f240 1203 	movw	r2, #259	; 0x103
    a8fe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    a902:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    a906:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    a90a:	4770      	bx	lr
    a90c:	40001000 	.word	0x40001000

0000a910 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    a910:	4b03      	ldr	r3, [pc, #12]	; (a920 <radio_crc_is_valid+0x10>)
    a912:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a916:	3000      	adds	r0, #0
    a918:	bf18      	it	ne
    a91a:	2001      	movne	r0, #1
    a91c:	4770      	bx	lr
    a91e:	bf00      	nop
    a920:	40001000 	.word	0x40001000

0000a924 <radio_pkt_empty_get>:
}
    a924:	4800      	ldr	r0, [pc, #0]	; (a928 <radio_pkt_empty_get+0x4>)
    a926:	4770      	bx	lr
    a928:	20000e78 	.word	0x20000e78

0000a92c <radio_pkt_scratch_get>:
}
    a92c:	4800      	ldr	r0, [pc, #0]	; (a930 <radio_pkt_scratch_get+0x4>)
    a92e:	4770      	bx	lr
    a930:	20000e7c 	.word	0x20000e7c

0000a934 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a934:	4b04      	ldr	r3, [pc, #16]	; (a948 <radio_switch_complete_and_rx+0x14>)
    a936:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    a938:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a93a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    a93e:	4602      	mov	r2, r0
    a940:	4608      	mov	r0, r1
    a942:	f7ff be47 	b.w	a5d4 <sw_switch.isra.9>
    a946:	bf00      	nop
    a948:	40001000 	.word	0x40001000

0000a94c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a94c:	4b03      	ldr	r3, [pc, #12]	; (a95c <radio_switch_complete_and_tx+0x10>)
    a94e:	2103      	movs	r1, #3
    a950:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    a954:	4601      	mov	r1, r0
    a956:	2001      	movs	r0, #1
    a958:	f7ff be3c 	b.w	a5d4 <sw_switch.isra.9>
    a95c:	40001000 	.word	0x40001000

0000a960 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    a960:	4b05      	ldr	r3, [pc, #20]	; (a978 <radio_switch_complete_and_disable+0x18>)
    a962:	2203      	movs	r2, #3
    a964:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a968:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    a96c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a970:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    a974:	4770      	bx	lr
    a976:	bf00      	nop
    a978:	40001000 	.word	0x40001000

0000a97c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    a97c:	4a03      	ldr	r2, [pc, #12]	; (a98c <radio_rssi_measure+0x10>)
    a97e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a982:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    a986:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    a98a:	4770      	bx	lr
    a98c:	40001000 	.word	0x40001000

0000a990 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    a990:	4b01      	ldr	r3, [pc, #4]	; (a998 <radio_rssi_get+0x8>)
    a992:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    a996:	4770      	bx	lr
    a998:	40001000 	.word	0x40001000

0000a99c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    a99c:	4b02      	ldr	r3, [pc, #8]	; (a9a8 <radio_rssi_status_reset+0xc>)
    a99e:	2200      	movs	r2, #0
    a9a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    a9a4:	4770      	bx	lr
    a9a6:	bf00      	nop
    a9a8:	40001000 	.word	0x40001000

0000a9ac <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    a9ac:	4b03      	ldr	r3, [pc, #12]	; (a9bc <radio_rssi_is_ready+0x10>)
    a9ae:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    a9b2:	3000      	adds	r0, #0
    a9b4:	bf18      	it	ne
    a9b6:	2001      	movne	r0, #1
    a9b8:	4770      	bx	lr
    a9ba:	bf00      	nop
    a9bc:	40001000 	.word	0x40001000

0000a9c0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a9c0:	b530      	push	{r4, r5, lr}
    a9c2:	2400      	movs	r4, #0
    a9c4:	00a3      	lsls	r3, r4, #2
    a9c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a9ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    a9ce:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a9d0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    a9d4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a9d6:	8895      	ldrh	r5, [r2, #4]
    a9d8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    a9dc:	2c08      	cmp	r4, #8
		bdaddr += 6;
    a9de:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    a9e2:	d1ef      	bne.n	a9c4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    a9e4:	4b02      	ldr	r3, [pc, #8]	; (a9f0 <radio_filter_configure+0x30>)
    a9e6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    a9ea:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    a9ee:	bd30      	pop	{r4, r5, pc}
    a9f0:	40001000 	.word	0x40001000

0000a9f4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    a9f4:	4a03      	ldr	r2, [pc, #12]	; (aa04 <radio_filter_disable+0x10>)
    a9f6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    a9fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a9fe:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    aa02:	4770      	bx	lr
    aa04:	40001000 	.word	0x40001000

0000aa08 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    aa08:	4b02      	ldr	r3, [pc, #8]	; (aa14 <radio_filter_status_reset+0xc>)
    aa0a:	2200      	movs	r2, #0
    aa0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    aa10:	4770      	bx	lr
    aa12:	bf00      	nop
    aa14:	40001000 	.word	0x40001000

0000aa18 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    aa18:	4b03      	ldr	r3, [pc, #12]	; (aa28 <radio_filter_has_match+0x10>)
    aa1a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    aa1e:	3000      	adds	r0, #0
    aa20:	bf18      	it	ne
    aa22:	2001      	movne	r0, #1
    aa24:	4770      	bx	lr
    aa26:	bf00      	nop
    aa28:	40001000 	.word	0x40001000

0000aa2c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    aa2c:	4b01      	ldr	r3, [pc, #4]	; (aa34 <radio_filter_match_get+0x8>)
    aa2e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    aa32:	4770      	bx	lr
    aa34:	40001000 	.word	0x40001000

0000aa38 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    aa38:	4b05      	ldr	r3, [pc, #20]	; (aa50 <radio_tmr_status_reset+0x18>)
    aa3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    aa3e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    aa42:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    aa46:	227f      	movs	r2, #127	; 0x7f
    aa48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    aa4c:	4770      	bx	lr
    aa4e:	bf00      	nop
    aa50:	4000b000 	.word	0x4000b000

0000aa54 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    aa54:	4b03      	ldr	r3, [pc, #12]	; (aa64 <radio_tmr_tifs_set+0x10>)
    aa56:	4a04      	ldr	r2, [pc, #16]	; (aa68 <radio_tmr_tifs_set+0x14>)
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    aa5e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    aa62:	4770      	bx	lr
    aa64:	20000f88 	.word	0x20000f88
    aa68:	40009000 	.word	0x40009000

0000aa6c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    aa70:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    aa74:	4c30      	ldr	r4, [pc, #192]	; (ab38 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    aa76:	4d31      	ldr	r5, [pc, #196]	; (ab3c <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    aa78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    aa7c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    aa7e:	bf88      	it	hi
    aa80:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    aa84:	4b2e      	ldr	r3, [pc, #184]	; (ab40 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    aa86:	4c2f      	ldr	r4, [pc, #188]	; (ab44 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    aa88:	bf82      	ittt	hi
    aa8a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    aa8e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    aa92:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    aa96:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    aa98:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    aa9c:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    aa9e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    aaa0:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    aaa4:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    aaa6:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    aaaa:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    aaae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    aab2:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    aab6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    aaba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    aabe:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    aac2:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    aac6:	4920      	ldr	r1, [pc, #128]	; (ab48 <radio_tmr_start+0xdc>)
    aac8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    aacc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    aad0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    aad4:	f7ff fd66 	bl	a5a4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    aad8:	4b1c      	ldr	r3, [pc, #112]	; (ab4c <radio_tmr_start+0xe0>)
    aada:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    aadc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    aae0:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    aae4:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    aae8:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    aaea:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    aaee:	3b74      	subs	r3, #116	; 0x74
    aaf0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    aaf4:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    aaf8:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    aafc:	f503 739a 	add.w	r3, r3, #308	; 0x134
    ab00:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    ab04:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    ab08:	33c4      	adds	r3, #196	; 0xc4
    ab0a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    ab0e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    ab12:	3bc0      	subs	r3, #192	; 0xc0
    ab14:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    ab18:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    ab1c:	33c8      	adds	r3, #200	; 0xc8
    ab1e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    ab22:	f44f 6310 	mov.w	r3, #2304	; 0x900
    ab26:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    ab2a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    ab2e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    ab32:	4628      	mov	r0, r5
    ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab38:	7ff0bdbf 	.word	0x7ff0bdbf
    ab3c:	000f4240 	.word	0x000f4240
    ab40:	40008000 	.word	0x40008000
    ab44:	4000b000 	.word	0x4000b000
    ab48:	4000b148 	.word	0x4000b148
    ab4c:	40009000 	.word	0x40009000

0000ab50 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    ab50:	4a04      	ldr	r2, [pc, #16]	; (ab64 <radio_tmr_stop+0x14>)
    ab52:	2301      	movs	r3, #1
    ab54:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    ab56:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    ab58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    ab5c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    ab5e:	6113      	str	r3, [r2, #16]
    ab60:	4770      	bx	lr
    ab62:	bf00      	nop
    ab64:	40008000 	.word	0x40008000

0000ab68 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    ab68:	4b0c      	ldr	r3, [pc, #48]	; (ab9c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    ab6a:	4a0d      	ldr	r2, [pc, #52]	; (aba0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    ab6c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    ab70:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    ab74:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    ab78:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ab7c:	3240      	adds	r2, #64	; 0x40
    ab7e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    ab82:	f502 7280 	add.w	r2, r2, #256	; 0x100
    ab86:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    ab8a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    ab8e:	3a34      	subs	r2, #52	; 0x34
    ab90:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    ab94:	2218      	movs	r2, #24
    ab96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ab9a:	4770      	bx	lr
    ab9c:	40008000 	.word	0x40008000
    aba0:	40001104 	.word	0x40001104

0000aba4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    aba4:	4b0b      	ldr	r3, [pc, #44]	; (abd4 <radio_tmr_aa_capture+0x30>)
    aba6:	4a0c      	ldr	r2, [pc, #48]	; (abd8 <radio_tmr_aa_capture+0x34>)
    aba8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    abac:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    abb0:	3240      	adds	r2, #64	; 0x40
    abb2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    abb6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    abba:	3a3c      	subs	r2, #60	; 0x3c
    abbc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    abc0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    abc4:	3240      	adds	r2, #64	; 0x40
    abc6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    abca:	220c      	movs	r2, #12
    abcc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    abd0:	4770      	bx	lr
    abd2:	bf00      	nop
    abd4:	4001f000 	.word	0x4001f000
    abd8:	40001100 	.word	0x40001100

0000abdc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    abdc:	4b01      	ldr	r3, [pc, #4]	; (abe4 <radio_tmr_aa_get+0x8>)
    abde:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    abe2:	4770      	bx	lr
    abe4:	40008000 	.word	0x40008000

0000abe8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    abe8:	4b01      	ldr	r3, [pc, #4]	; (abf0 <radio_tmr_aa_save+0x8>)
    abea:	6018      	str	r0, [r3, #0]
    abec:	4770      	bx	lr
    abee:	bf00      	nop
    abf0:	20000f80 	.word	0x20000f80

0000abf4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    abf4:	4b01      	ldr	r3, [pc, #4]	; (abfc <radio_tmr_aa_restore+0x8>)
    abf6:	6818      	ldr	r0, [r3, #0]
    abf8:	4770      	bx	lr
    abfa:	bf00      	nop
    abfc:	20000f80 	.word	0x20000f80

0000ac00 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    ac00:	4b01      	ldr	r3, [pc, #4]	; (ac08 <radio_tmr_ready_get+0x8>)
    ac02:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    ac06:	4770      	bx	lr
    ac08:	40008000 	.word	0x40008000

0000ac0c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    ac0c:	4b06      	ldr	r3, [pc, #24]	; (ac28 <radio_tmr_end_capture+0x1c>)
    ac0e:	4a07      	ldr	r2, [pc, #28]	; (ac2c <radio_tmr_end_capture+0x20>)
    ac10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    ac14:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ac18:	323c      	adds	r2, #60	; 0x3c
    ac1a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    ac1e:	2220      	movs	r2, #32
    ac20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ac24:	4770      	bx	lr
    ac26:	bf00      	nop
    ac28:	4001f000 	.word	0x4001f000
    ac2c:	4000110c 	.word	0x4000110c

0000ac30 <radio_tmr_end_get>:
    ac30:	4b01      	ldr	r3, [pc, #4]	; (ac38 <radio_tmr_end_get+0x8>)
    ac32:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    ac36:	4770      	bx	lr
    ac38:	40008000 	.word	0x40008000

0000ac3c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    ac3c:	4b01      	ldr	r3, [pc, #4]	; (ac44 <radio_tmr_tifs_base_get+0x8>)
    ac3e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    ac42:	4770      	bx	lr
    ac44:	40008000 	.word	0x40008000

0000ac48 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ac48:	4b16      	ldr	r3, [pc, #88]	; (aca4 <radio_ccm_rx_pkt_set+0x5c>)
{
    ac4a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ac4c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ac4e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ac50:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    ac54:	4e14      	ldr	r6, [pc, #80]	; (aca8 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ac56:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    ac5a:	4d14      	ldr	r5, [pc, #80]	; (acac <radio_ccm_rx_pkt_set+0x64>)
    ac5c:	2902      	cmp	r1, #2
    ac5e:	bf0c      	ite	eq
    ac60:	4629      	moveq	r1, r5
    ac62:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    ac64:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ac68:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    ac6c:	4810      	ldr	r0, [pc, #64]	; (acb0 <radio_ccm_rx_pkt_set+0x68>)
    ac6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    ac72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ac76:	4a0f      	ldr	r2, [pc, #60]	; (acb4 <radio_ccm_rx_pkt_set+0x6c>)
    ac78:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    ac7c:	490e      	ldr	r1, [pc, #56]	; (acb8 <radio_ccm_rx_pkt_set+0x70>)
    ac7e:	4a0f      	ldr	r2, [pc, #60]	; (acbc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    ac80:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ac84:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ac88:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    ac8c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    ac90:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    ac94:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    ac98:	2140      	movs	r1, #64	; 0x40
    ac9a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    ac9e:	2201      	movs	r2, #1
    aca0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    aca2:	bd70      	pop	{r4, r5, r6, pc}
    aca4:	4000f000 	.word	0x4000f000
    aca8:	01000001 	.word	0x01000001
    acac:	01010001 	.word	0x01010001
    acb0:	20000e7c 	.word	0x20000e7c
    acb4:	20000d6c 	.word	0x20000d6c
    acb8:	40001104 	.word	0x40001104
    acbc:	4001f000 	.word	0x4001f000

0000acc0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    acc0:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    acc2:	4b0e      	ldr	r3, [pc, #56]	; (acfc <radio_ccm_tx_pkt_set+0x3c>)
    acc4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    acc6:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    acc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    accc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    acd0:	4c0b      	ldr	r4, [pc, #44]	; (ad00 <radio_ccm_tx_pkt_set+0x40>)
    acd2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    acd6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    acda:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    acde:	4809      	ldr	r0, [pc, #36]	; (ad04 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ace0:	4909      	ldr	r1, [pc, #36]	; (ad08 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    ace2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ace6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    acea:	2101      	movs	r1, #1
    acec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    acf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    acf4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    acf8:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    acfa:	bd10      	pop	{r4, pc}
    acfc:	4000f000 	.word	0x4000f000
    ad00:	01010000 	.word	0x01010000
    ad04:	20000e7c 	.word	0x20000e7c
    ad08:	20000d6c 	.word	0x20000d6c

0000ad0c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    ad0c:	4b0c      	ldr	r3, [pc, #48]	; (ad40 <radio_ccm_is_done+0x34>)
    ad0e:	2202      	movs	r2, #2
    ad10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    ad14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    ad18:	b16a      	cbz	r2, ad36 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    ad1a:	2202      	movs	r2, #2
    ad1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    ad20:	4a08      	ldr	r2, [pc, #32]	; (ad44 <radio_ccm_is_done+0x38>)
    ad22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ad26:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    ad2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    ad2e:	fab0 f080 	clz	r0, r0
    ad32:	0940      	lsrs	r0, r0, #5
    ad34:	4770      	bx	lr
		__WFE();
    ad36:	bf20      	wfe
		__SEV();
    ad38:	bf40      	sev
		__WFE();
    ad3a:	bf20      	wfe
    ad3c:	e7ea      	b.n	ad14 <radio_ccm_is_done+0x8>
    ad3e:	bf00      	nop
    ad40:	4000f000 	.word	0x4000f000
    ad44:	e000e100 	.word	0xe000e100

0000ad48 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    ad48:	4b03      	ldr	r3, [pc, #12]	; (ad58 <radio_ccm_mic_is_valid+0x10>)
    ad4a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ad4e:	3000      	adds	r0, #0
    ad50:	bf18      	it	ne
    ad52:	2001      	movne	r0, #1
    ad54:	4770      	bx	lr
    ad56:	bf00      	nop
    ad58:	4000f000 	.word	0x4000f000

0000ad5c <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    ad5c:	4b01      	ldr	r3, [pc, #4]	; (ad64 <radio_ar_match_get+0x8>)
    ad5e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ad62:	4770      	bx	lr
    ad64:	4000f000 	.word	0x4000f000

0000ad68 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ad68:	4a04      	ldr	r2, [pc, #16]	; (ad7c <radio_ar_status_reset+0x14>)
    ad6a:	2300      	movs	r3, #0
    ad6c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    ad70:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    ad74:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    ad78:	4770      	bx	lr
    ad7a:	bf00      	nop
    ad7c:	40001000 	.word	0x40001000

0000ad80 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    ad80:	4b08      	ldr	r3, [pc, #32]	; (ada4 <radio_ar_has_match+0x24>)
    ad82:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    ad86:	b160      	cbz	r0, ada2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    ad88:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    ad8c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    ad90:	b138      	cbz	r0, ada2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    ad92:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    ad96:	b120      	cbz	r0, ada2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    ad98:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    ad9c:	fab0 f080 	clz	r0, r0
    ada0:	0940      	lsrs	r0, r0, #5
}
    ada2:	4770      	bx	lr
    ada4:	40001000 	.word	0x40001000

0000ada8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    ada8:	2901      	cmp	r1, #1
{
    adaa:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    adac:	d00e      	beq.n	adcc <mayfly_enable_cb+0x24>
    adae:	4b0d      	ldr	r3, [pc, #52]	; (ade4 <mayfly_enable_cb+0x3c>)
    adb0:	9301      	str	r3, [sp, #4]
    adb2:	9300      	str	r3, [sp, #0]
    adb4:	4a0c      	ldr	r2, [pc, #48]	; (ade8 <mayfly_enable_cb+0x40>)
    adb6:	4b0d      	ldr	r3, [pc, #52]	; (adec <mayfly_enable_cb+0x44>)
    adb8:	490d      	ldr	r1, [pc, #52]	; (adf0 <mayfly_enable_cb+0x48>)
    adba:	480e      	ldr	r0, [pc, #56]	; (adf4 <mayfly_enable_cb+0x4c>)
    adbc:	f7f6 f856 	bl	e6c <printk>
    adc0:	4040      	eors	r0, r0
    adc2:	f380 8811 	msr	BASEPRI, r0
    adc6:	f04f 0004 	mov.w	r0, #4
    adca:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    adcc:	2018      	movs	r0, #24
	if (enable) {
    adce:	b122      	cbz	r2, adda <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    add0:	b003      	add	sp, #12
    add2:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
    add6:	f7f6 bcaf 	b.w	1738 <_arch_irq_enable>
}
    adda:	b003      	add	sp, #12
    addc:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
    ade0:	f7f6 bcba 	b.w	1758 <_arch_irq_disable>
    ade4:	0000cbb3 	.word	0x0000cbb3
    ade8:	0000d49b 	.word	0x0000d49b
    adec:	0000ebe5 	.word	0x0000ebe5
    adf0:	0000d4ea 	.word	0x0000d4ea
    adf4:	0000ec14 	.word	0x0000ec14

0000adf8 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    adf8:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
    adfa:	b181      	cbz	r1, ae1e <mayfly_is_enabled+0x26>
    adfc:	2901      	cmp	r1, #1
    adfe:	d014      	beq.n	ae2a <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    ae00:	4b0b      	ldr	r3, [pc, #44]	; (ae30 <mayfly_is_enabled+0x38>)
    ae02:	9301      	str	r3, [sp, #4]
    ae04:	9300      	str	r3, [sp, #0]
    ae06:	4a0b      	ldr	r2, [pc, #44]	; (ae34 <mayfly_is_enabled+0x3c>)
    ae08:	4b0b      	ldr	r3, [pc, #44]	; (ae38 <mayfly_is_enabled+0x40>)
    ae0a:	490c      	ldr	r1, [pc, #48]	; (ae3c <mayfly_is_enabled+0x44>)
    ae0c:	480c      	ldr	r0, [pc, #48]	; (ae40 <mayfly_is_enabled+0x48>)
    ae0e:	f7f6 f82d 	bl	e6c <printk>
    ae12:	4040      	eors	r0, r0
    ae14:	f380 8811 	msr	BASEPRI, r0
    ae18:	f04f 0004 	mov.w	r0, #4
    ae1c:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    ae1e:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    ae20:	b003      	add	sp, #12
    ae22:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
    ae26:	f7f6 bcab 	b.w	1780 <_arch_irq_is_enabled>
    ae2a:	2018      	movs	r0, #24
    ae2c:	e7f8      	b.n	ae20 <mayfly_is_enabled+0x28>
    ae2e:	bf00      	nop
    ae30:	0000cbb3 	.word	0x0000cbb3
    ae34:	0000d49b 	.word	0x0000d49b
    ae38:	0000ebf6 	.word	0x0000ebf6
    ae3c:	0000d4ea 	.word	0x0000d4ea
    ae40:	0000d43a 	.word	0x0000d43a

0000ae44 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ae44:	4288      	cmp	r0, r1
    ae46:	d00a      	beq.n	ae5e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    ae48:	b918      	cbnz	r0, ae52 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    ae4a:	1e4b      	subs	r3, r1, #1
    ae4c:	4258      	negs	r0, r3
    ae4e:	4158      	adcs	r0, r3
    ae50:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ae52:	2801      	cmp	r0, #1
    ae54:	d105      	bne.n	ae62 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    ae56:	fab1 f081 	clz	r0, r1
    ae5a:	0940      	lsrs	r0, r0, #5
    ae5c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ae5e:	2001      	movs	r0, #1
    ae60:	4770      	bx	lr
    ae62:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    ae64:	4770      	bx	lr
	...

0000ae68 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    ae68:	b507      	push	{r0, r1, r2, lr}
    ae6a:	4b0e      	ldr	r3, [pc, #56]	; (aea4 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
    ae6c:	b181      	cbz	r1, ae90 <mayfly_pend+0x28>
    ae6e:	2901      	cmp	r1, #1
    ae70:	d015      	beq.n	ae9e <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    ae72:	4b0d      	ldr	r3, [pc, #52]	; (aea8 <mayfly_pend+0x40>)
    ae74:	9301      	str	r3, [sp, #4]
    ae76:	9300      	str	r3, [sp, #0]
    ae78:	4a0c      	ldr	r2, [pc, #48]	; (aeac <mayfly_pend+0x44>)
    ae7a:	4b0d      	ldr	r3, [pc, #52]	; (aeb0 <mayfly_pend+0x48>)
    ae7c:	490d      	ldr	r1, [pc, #52]	; (aeb4 <mayfly_pend+0x4c>)
    ae7e:	480e      	ldr	r0, [pc, #56]	; (aeb8 <mayfly_pend+0x50>)
    ae80:	f7f5 fff4 	bl	e6c <printk>
    ae84:	4040      	eors	r0, r0
    ae86:	f380 8811 	msr	BASEPRI, r0
    ae8a:	f04f 0004 	mov.w	r0, #4
    ae8e:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ae90:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ae94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    ae98:	b003      	add	sp, #12
    ae9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    aea2:	e7f7      	b.n	ae94 <mayfly_pend+0x2c>
    aea4:	e000e100 	.word	0xe000e100
    aea8:	0000cbb3 	.word	0x0000cbb3
    aeac:	0000d49b 	.word	0x0000d49b
    aeb0:	0000ec08 	.word	0x0000ec08
    aeb4:	0000d4ea 	.word	0x0000d4ea
    aeb8:	0000d43a 	.word	0x0000d43a

0000aebc <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    aebc:	2803      	cmp	r0, #3
{
    aebe:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    aec0:	d90e      	bls.n	aee0 <hal_ticker_instance0_caller_id_get+0x24>
    aec2:	4b0e      	ldr	r3, [pc, #56]	; (aefc <hal_ticker_instance0_caller_id_get+0x40>)
    aec4:	9301      	str	r3, [sp, #4]
    aec6:	9300      	str	r3, [sp, #0]
    aec8:	4a0d      	ldr	r2, [pc, #52]	; (af00 <hal_ticker_instance0_caller_id_get+0x44>)
    aeca:	4b0e      	ldr	r3, [pc, #56]	; (af04 <hal_ticker_instance0_caller_id_get+0x48>)
    aecc:	490e      	ldr	r1, [pc, #56]	; (af08 <hal_ticker_instance0_caller_id_get+0x4c>)
    aece:	480f      	ldr	r0, [pc, #60]	; (af0c <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    aed0:	f7f5 ffcc 	bl	e6c <printk>
    aed4:	4040      	eors	r0, r0
    aed6:	f380 8811 	msr	BASEPRI, r0
    aeda:	f04f 0004 	mov.w	r0, #4
    aede:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    aee0:	4b0b      	ldr	r3, [pc, #44]	; (af10 <hal_ticker_instance0_caller_id_get+0x54>)
    aee2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    aee4:	b938      	cbnz	r0, aef6 <hal_ticker_instance0_caller_id_get+0x3a>
    aee6:	4b05      	ldr	r3, [pc, #20]	; (aefc <hal_ticker_instance0_caller_id_get+0x40>)
    aee8:	9301      	str	r3, [sp, #4]
    aeea:	9300      	str	r3, [sp, #0]
    aeec:	4a04      	ldr	r2, [pc, #16]	; (af00 <hal_ticker_instance0_caller_id_get+0x44>)
    aeee:	4b05      	ldr	r3, [pc, #20]	; (af04 <hal_ticker_instance0_caller_id_get+0x48>)
    aef0:	4905      	ldr	r1, [pc, #20]	; (af08 <hal_ticker_instance0_caller_id_get+0x4c>)
    aef2:	4808      	ldr	r0, [pc, #32]	; (af14 <hal_ticker_instance0_caller_id_get+0x58>)
    aef4:	e7ec      	b.n	aed0 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
    aef6:	b003      	add	sp, #12
    aef8:	f85d fb04 	ldr.w	pc, [sp], #4
    aefc:	0000cbb3 	.word	0x0000cbb3
    af00:	0000d49b 	.word	0x0000d49b
    af04:	0000ec44 	.word	0x0000ec44
    af08:	0000d4ea 	.word	0x0000d4ea
    af0c:	0000ec86 	.word	0x0000ec86
    af10:	0000ec82 	.word	0x0000ec82
    af14:	0000ecc7 	.word	0x0000ecc7

0000af18 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
    af18:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    af1a:	3802      	subs	r0, #2
{
    af1c:	461c      	mov	r4, r3
	switch (caller_id) {
    af1e:	2803      	cmp	r0, #3
    af20:	d818      	bhi.n	af54 <hal_ticker_instance0_sched+0x3c>
    af22:	e8df f000 	tbb	[pc, r0]
    af26:	0d02      	.short	0x0d02
    af28:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    af2a:	2903      	cmp	r1, #3
    af2c:	d112      	bne.n	af54 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    af2e:	4b19      	ldr	r3, [pc, #100]	; (af94 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    af30:	2100      	movs	r1, #0
			m.param = instance;
    af32:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    af34:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    af36:	b002      	add	sp, #8
    af38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    af3c:	f7f8 b964 	b.w	3208 <mayfly_enqueue>
		switch (callee_id) {
    af40:	2904      	cmp	r1, #4
    af42:	d107      	bne.n	af54 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    af44:	4b14      	ldr	r3, [pc, #80]	; (af98 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    af46:	2101      	movs	r1, #1
			m.param = instance;
    af48:	609c      	str	r4, [r3, #8]
    af4a:	e7f3      	b.n	af34 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    af4c:	2903      	cmp	r1, #3
    af4e:	d010      	beq.n	af72 <hal_ticker_instance0_sched+0x5a>
    af50:	2904      	cmp	r1, #4
    af52:	d013      	beq.n	af7c <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
    af54:	4b11      	ldr	r3, [pc, #68]	; (af9c <hal_ticker_instance0_sched+0x84>)
    af56:	9301      	str	r3, [sp, #4]
    af58:	9300      	str	r3, [sp, #0]
    af5a:	4a11      	ldr	r2, [pc, #68]	; (afa0 <hal_ticker_instance0_sched+0x88>)
    af5c:	4b11      	ldr	r3, [pc, #68]	; (afa4 <hal_ticker_instance0_sched+0x8c>)
    af5e:	4912      	ldr	r1, [pc, #72]	; (afa8 <hal_ticker_instance0_sched+0x90>)
    af60:	4812      	ldr	r0, [pc, #72]	; (afac <hal_ticker_instance0_sched+0x94>)
    af62:	f7f5 ff83 	bl	e6c <printk>
    af66:	4040      	eors	r0, r0
    af68:	f380 8811 	msr	BASEPRI, r0
    af6c:	f04f 0004 	mov.w	r0, #4
    af70:	df02      	svc	2
			m.param = instance;
    af72:	4b0f      	ldr	r3, [pc, #60]	; (afb0 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    af74:	2100      	movs	r1, #0
			m.param = instance;
    af76:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    af78:	2001      	movs	r0, #1
    af7a:	e7dc      	b.n	af36 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    af7c:	4b0d      	ldr	r3, [pc, #52]	; (afb4 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    af7e:	2101      	movs	r1, #1
			m.param = instance;
    af80:	609c      	str	r4, [r3, #8]
    af82:	e7f9      	b.n	af78 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
    af84:	2904      	cmp	r1, #4
    af86:	d1e5      	bne.n	af54 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    af88:	4b0b      	ldr	r3, [pc, #44]	; (afb8 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    af8a:	2101      	movs	r1, #1
			m.param = instance;
    af8c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    af8e:	2003      	movs	r0, #3
    af90:	e7d1      	b.n	af36 <hal_ticker_instance0_sched+0x1e>
    af92:	bf00      	nop
    af94:	200033c0 	.word	0x200033c0
    af98:	200033d0 	.word	0x200033d0
    af9c:	0000cbb3 	.word	0x0000cbb3
    afa0:	0000d49b 	.word	0x0000d49b
    afa4:	0000ec67 	.word	0x0000ec67
    afa8:	0000d4ea 	.word	0x0000d4ea
    afac:	0000d43a 	.word	0x0000d43a
    afb0:	200033e0 	.word	0x200033e0
    afb4:	200033f0 	.word	0x200033f0
    afb8:	20003400 	.word	0x20003400

0000afbc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    afbc:	4601      	mov	r1, r0
    afbe:	2000      	movs	r0, #0
    afc0:	f7ff baa0 	b.w	a504 <cntr_cmp_set>

0000afc4 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    afc4:	4770      	bx	lr
	...

0000afc8 <net_buf_pool_get>:
}
    afc8:	4b01      	ldr	r3, [pc, #4]	; (afd0 <net_buf_pool_get+0x8>)
    afca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    afce:	4770      	bx	lr
    afd0:	200034d4 	.word	0x200034d4

0000afd4 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    afd4:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    afd6:	4b04      	ldr	r3, [pc, #16]	; (afe8 <net_buf_id+0x14>)
    afd8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    afdc:	69db      	ldr	r3, [r3, #28]
    afde:	1ac0      	subs	r0, r0, r3
}
    afe0:	4b02      	ldr	r3, [pc, #8]	; (afec <net_buf_id+0x18>)
	return buf - pool->__bufs;
    afe2:	10c0      	asrs	r0, r0, #3
}
    afe4:	4358      	muls	r0, r3
    afe6:	4770      	bx	lr
    afe8:	200034d4 	.word	0x200034d4
    afec:	aaaaaaab 	.word	0xaaaaaaab

0000aff0 <fixed_data_alloc>:
{
    aff0:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    aff2:	4b09      	ldr	r3, [pc, #36]	; (b018 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    aff4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    aff6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    affa:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    affc:	699b      	ldr	r3, [r3, #24]
    affe:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    b000:	6823      	ldr	r3, [r4, #0]
    b002:	429a      	cmp	r2, r3
    b004:	bf94      	ite	ls
    b006:	600a      	strls	r2, [r1, #0]
    b008:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b00a:	f7ff ffe3 	bl	afd4 <net_buf_id>
    b00e:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    b012:	fb02 3000 	mla	r0, r2, r0, r3
    b016:	bd10      	pop	{r4, pc}
    b018:	200034d4 	.word	0x200034d4

0000b01c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b020:	4605      	mov	r5, r0
    b022:	9101      	str	r1, [sp, #4]
    b024:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b026:	f001 f971 	bl	c30c <_impl_k_uptime_get_32>
    b02a:	4607      	mov	r7, r0
	__asm__ volatile(
    b02c:	f04f 0320 	mov.w	r3, #32
    b030:	f3ef 8811 	mrs	r8, BASEPRI
    b034:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b038:	8a6b      	ldrh	r3, [r5, #18]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d03d      	beq.n	b0ba <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b03e:	8a2a      	ldrh	r2, [r5, #16]
    b040:	429a      	cmp	r2, r3
    b042:	d92a      	bls.n	b09a <net_buf_alloc_len+0x7e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    b044:	2100      	movs	r1, #0
    b046:	4628      	mov	r0, r5
    b048:	f000 fe52 	bl	bcf0 <_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    b04c:	b328      	cbz	r0, b09a <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b04e:	f388 8811 	msr	BASEPRI, r8
    b052:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b054:	9b01      	ldr	r3, [sp, #4]
    b056:	2b00      	cmp	r3, #0
    b058:	d03c      	beq.n	b0d4 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b05a:	1c73      	adds	r3, r6, #1
    b05c:	2b01      	cmp	r3, #1
    b05e:	d906      	bls.n	b06e <net_buf_alloc_len+0x52>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b060:	f001 f954 	bl	c30c <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b064:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    b066:	42b0      	cmp	r0, r6
    b068:	bf94      	ite	ls
    b06a:	1a36      	subls	r6, r6, r0
    b06c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b06e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b070:	4f1e      	ldr	r7, [pc, #120]	; (b0ec <net_buf_alloc_len+0xd0>)
    b072:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b076:	4632      	mov	r2, r6
    b078:	699b      	ldr	r3, [r3, #24]
    b07a:	681b      	ldr	r3, [r3, #0]
    b07c:	a901      	add	r1, sp, #4
    b07e:	681b      	ldr	r3, [r3, #0]
    b080:	4620      	mov	r0, r4
    b082:	4798      	blx	r3
    b084:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b086:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b088:	bb28      	cbnz	r0, b0d6 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b08a:	79a0      	ldrb	r0, [r4, #6]
    b08c:	4621      	mov	r1, r4
    b08e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b092:	f000 fe0e 	bl	bcb2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b096:	462c      	mov	r4, r5
    b098:	e018      	b.n	b0cc <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    b09a:	8a68      	ldrh	r0, [r5, #18]
    b09c:	1e43      	subs	r3, r0, #1
    b09e:	826b      	strh	r3, [r5, #18]
    b0a0:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b0a4:	8a2c      	ldrh	r4, [r5, #16]
    b0a6:	1a24      	subs	r4, r4, r0
    b0a8:	69e8      	ldr	r0, [r5, #28]
    b0aa:	2318      	movs	r3, #24
    b0ac:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
    b0b0:	4b0e      	ldr	r3, [pc, #56]	; (b0ec <net_buf_alloc_len+0xd0>)
    b0b2:	1aed      	subs	r5, r5, r3
    b0b4:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b0b6:	71a5      	strb	r5, [r4, #6]
		goto success;
    b0b8:	e7cc      	b.n	b054 <net_buf_alloc_len+0x38>
    b0ba:	f388 8811 	msr	BASEPRI, r8
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    b0be:	4631      	mov	r1, r6
    b0c0:	4628      	mov	r0, r5
    b0c2:	f000 fe15 	bl	bcf0 <_impl_k_queue_get>
		return NULL;
    b0c6:	4604      	mov	r4, r0
	if (!buf) {
    b0c8:	2800      	cmp	r0, #0
    b0ca:	d1c3      	bne.n	b054 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b0cc:	4620      	mov	r0, r4
    b0ce:	b002      	add	sp, #8
    b0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b0d4:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    b0d6:	2301      	movs	r3, #1
    b0d8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    b0da:	2300      	movs	r3, #0
	buf->frags = NULL;
    b0dc:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    b0de:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    b0e0:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    b0e2:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b0e4:	6923      	ldr	r3, [r4, #16]
    b0e6:	81e2      	strh	r2, [r4, #14]
    b0e8:	60a3      	str	r3, [r4, #8]
	return buf;
    b0ea:	e7ef      	b.n	b0cc <net_buf_alloc_len+0xb0>
    b0ec:	200034d4 	.word	0x200034d4

0000b0f0 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b0f0:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    b0f2:	685b      	ldr	r3, [r3, #4]
    b0f4:	460a      	mov	r2, r1
    b0f6:	6819      	ldr	r1, [r3, #0]
    b0f8:	f7ff bf90 	b.w	b01c <net_buf_alloc_len>

0000b0fc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    b0fc:	b570      	push	{r4, r5, r6, lr}
    b0fe:	4606      	mov	r6, r0
    b100:	f000 fdf6 	bl	bcf0 <_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
    b104:	4605      	mov	r5, r0
    b106:	b128      	cbz	r0, b114 <net_buf_get+0x18>
    b108:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b10a:	7963      	ldrb	r3, [r4, #5]
    b10c:	f013 0301 	ands.w	r3, r3, #1
    b110:	d102      	bne.n	b118 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b112:	6023      	str	r3, [r4, #0]

	return buf;
}
    b114:	4628      	mov	r0, r5
    b116:	bd70      	pop	{r4, r5, r6, pc}
    b118:	2100      	movs	r1, #0
    b11a:	4630      	mov	r0, r6
    b11c:	f000 fde8 	bl	bcf0 <_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    b120:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b122:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    b124:	f023 0301 	bic.w	r3, r3, #1
    b128:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b12a:	4604      	mov	r4, r0
    b12c:	e7ed      	b.n	b10a <net_buf_get+0xe>

0000b12e <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b12e:	6883      	ldr	r3, [r0, #8]
    b130:	4419      	add	r1, r3
    b132:	6001      	str	r1, [r0, #0]
    b134:	4770      	bx	lr

0000b136 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    b136:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    b138:	460a      	mov	r2, r1
    b13a:	6814      	ldr	r4, [r2, #0]
    b13c:	b914      	cbnz	r4, b144 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    b13e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    b140:	f000 bdbc 	b.w	bcbc <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    b144:	7953      	ldrb	r3, [r2, #5]
    b146:	f043 0301 	orr.w	r3, r3, #1
    b14a:	7153      	strb	r3, [r2, #5]
    b14c:	4622      	mov	r2, r4
    b14e:	e7f4      	b.n	b13a <net_buf_put+0x4>

0000b150 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b152:	4d15      	ldr	r5, [pc, #84]	; (b1a8 <net_buf_unref+0x58>)
    b154:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b156:	2600      	movs	r6, #0
	while (buf) {
    b158:	b904      	cbnz	r4, b15c <net_buf_unref+0xc>
    b15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b15c:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b15e:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b160:	3b01      	subs	r3, #1
    b162:	b2db      	uxtb	r3, r3
    b164:	7123      	strb	r3, [r4, #4]
    b166:	2b00      	cmp	r3, #0
    b168:	d1f7      	bne.n	b15a <net_buf_unref+0xa>
		if (buf->__buf) {
    b16a:	6921      	ldr	r1, [r4, #16]
    b16c:	b159      	cbz	r1, b186 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b16e:	7963      	ldrb	r3, [r4, #5]
    b170:	079b      	lsls	r3, r3, #30
    b172:	d407      	bmi.n	b184 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b174:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    b176:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b17a:	4620      	mov	r0, r4
    b17c:	699b      	ldr	r3, [r3, #24]
    b17e:	681b      	ldr	r3, [r3, #0]
    b180:	689b      	ldr	r3, [r3, #8]
    b182:	4798      	blx	r3
			buf->__buf = NULL;
    b184:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    b186:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b188:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    b18a:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b18e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b190:	695b      	ldr	r3, [r3, #20]
    b192:	b11b      	cbz	r3, b19c <net_buf_unref+0x4c>
			pool->destroy(buf);
    b194:	4620      	mov	r0, r4
    b196:	4798      	blx	r3
{
    b198:	463c      	mov	r4, r7
    b19a:	e7dd      	b.n	b158 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b19c:	4621      	mov	r1, r4
    b19e:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b1a2:	f000 fd86 	bl	bcb2 <k_queue_prepend>
    b1a6:	e7f7      	b.n	b198 <net_buf_unref+0x48>
    b1a8:	200034d4 	.word	0x200034d4

0000b1ac <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    b1ac:	7903      	ldrb	r3, [r0, #4]
    b1ae:	3301      	adds	r3, #1
    b1b0:	7103      	strb	r3, [r0, #4]
	return buf;
}
    b1b2:	4770      	bx	lr

0000b1b4 <net_buf_simple_add>:
	return buf->data + buf->len;
    b1b4:	8883      	ldrh	r3, [r0, #4]
    b1b6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    b1b8:	4419      	add	r1, r3
    b1ba:	8081      	strh	r1, [r0, #4]
	return tail;
}
    b1bc:	18d0      	adds	r0, r2, r3
    b1be:	4770      	bx	lr

0000b1c0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    b1c0:	b430      	push	{r4, r5}
    b1c2:	8883      	ldrh	r3, [r0, #4]
    b1c4:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    b1c6:	189d      	adds	r5, r3, r2
    b1c8:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b1ca:	18e0      	adds	r0, r4, r3
}
    b1cc:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b1ce:	f7f6 bc7d 	b.w	1acc <memcpy>

0000b1d2 <net_buf_simple_add_u8>:
    b1d2:	8883      	ldrh	r3, [r0, #4]
    b1d4:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    b1d6:	b510      	push	{r4, lr}
	buf->len += len;
    b1d8:	1c5c      	adds	r4, r3, #1
    b1da:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    b1dc:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    b1de:	18d0      	adds	r0, r2, r3
    b1e0:	bd10      	pop	{r4, pc}

0000b1e2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    b1e2:	8883      	ldrh	r3, [r0, #4]
    b1e4:	1a5b      	subs	r3, r3, r1
    b1e6:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    b1e8:	6803      	ldr	r3, [r0, #0]
    b1ea:	4419      	add	r1, r3
    b1ec:	6001      	str	r1, [r0, #0]
}
    b1ee:	4608      	mov	r0, r1
    b1f0:	4770      	bx	lr

0000b1f2 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    b1f2:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    b1f4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    b1f6:	2101      	movs	r1, #1
	val = buf->data[0];
    b1f8:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    b1fa:	f7ff fff2 	bl	b1e2 <net_buf_simple_pull>

	return val;
}
    b1fe:	4610      	mov	r0, r2
    b200:	bd08      	pop	{r3, pc}

0000b202 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    b202:	6802      	ldr	r2, [r0, #0]
    b204:	6880      	ldr	r0, [r0, #8]
}
    b206:	1a10      	subs	r0, r2, r0
    b208:	4770      	bx	lr

0000b20a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    b20a:	6800      	ldr	r0, [r0, #0]
    b20c:	6880      	ldr	r0, [r0, #8]
    b20e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    b210:	b941      	cbnz	r1, b224 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    b212:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    b216:	fa21 f202 	lsr.w	r2, r1, r2
    b21a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    b21e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    b220:	2000      	movs	r0, #0
    b222:	4770      	bx	lr
		*value = gpio->IN;
    b224:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    b228:	e7f9      	b.n	b21e <gpio_nrf5_read+0x14>

0000b22a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    b22a:	6800      	ldr	r0, [r0, #0]
    b22c:	6880      	ldr	r0, [r0, #8]
    b22e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    b230:	b949      	cbnz	r1, b246 <gpio_nrf5_write+0x1c>
    b232:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    b234:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    b236:	b11b      	cbz	r3, b240 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    b238:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    b23c:	2000      	movs	r0, #0
    b23e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    b240:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    b244:	e7fa      	b.n	b23c <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    b246:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    b24a:	e7f7      	b.n	b23c <gpio_nrf5_write+0x12>

0000b24c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    b24c:	6883      	ldr	r3, [r0, #8]
    b24e:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    b250:	b172      	cbz	r2, b270 <gpio_nrf5_manage_callback+0x24>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    b252:	6008      	str	r0, [r1, #0]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node);

Z_GENLIST_PREPEND(slist, snode);
    b254:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    b256:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode);
    b258:	b902      	cbnz	r2, b25c <gpio_nrf5_manage_callback+0x10>
	list->tail = node;
    b25a:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    b25c:	2000      	movs	r0, #0
    b25e:	4770      	bx	lr
	parent->next = child;
    b260:	6010      	str	r0, [r2, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode);
    b262:	6858      	ldr	r0, [r3, #4]
    b264:	4281      	cmp	r1, r0
	list->tail = node;
    b266:	bf08      	it	eq
    b268:	605a      	streq	r2, [r3, #4]
    b26a:	e00d      	b.n	b288 <gpio_nrf5_manage_callback+0x3c>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode);
    b26c:	4602      	mov	r2, r0
    b26e:	6800      	ldr	r0, [r0, #0]
    b270:	2800      	cmp	r0, #0
    b272:	d0f3      	beq.n	b25c <gpio_nrf5_manage_callback+0x10>
    b274:	4281      	cmp	r1, r0
    b276:	d1f9      	bne.n	b26c <gpio_nrf5_manage_callback+0x20>
    b278:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode);
    b27a:	2a00      	cmp	r2, #0
    b27c:	d1f0      	bne.n	b260 <gpio_nrf5_manage_callback+0x14>
    b27e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    b280:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode);
    b282:	4291      	cmp	r1, r2
    b284:	d100      	bne.n	b288 <gpio_nrf5_manage_callback+0x3c>
	list->tail = node;
    b286:	6058      	str	r0, [r3, #4]
	parent->next = child;
    b288:	2300      	movs	r3, #0
    b28a:	600b      	str	r3, [r1, #0]
    b28c:	e7e6      	b.n	b25c <gpio_nrf5_manage_callback+0x10>
	...

0000b290 <gpiote_find_channel.isra.4>:
		if ((gpiote_chan_mask & BIT(i)) &&
    b290:	4b0c      	ldr	r3, [pc, #48]	; (b2c4 <gpiote_find_channel.isra.4+0x34>)
static int gpiote_find_channel(struct device *dev, u32_t pin, u32_t port)
    b292:	b530      	push	{r4, r5, lr}
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    b294:	4d0c      	ldr	r5, [pc, #48]	; (b2c8 <gpiote_find_channel.isra.4+0x38>)
		if ((gpiote_chan_mask & BIT(i)) &&
    b296:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    b298:	2300      	movs	r3, #0
		if ((gpiote_chan_mask & BIT(i)) &&
    b29a:	fa24 f203 	lsr.w	r2, r4, r3
    b29e:	07d2      	lsls	r2, r2, #31
    b2a0:	d508      	bpl.n	b2b4 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    b2a2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    b2a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    b2aa:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((gpiote_chan_mask & BIT(i)) &&
    b2ae:	4282      	cmp	r2, r0
    b2b0:	d100      	bne.n	b2b4 <gpiote_find_channel.isra.4+0x24>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin) &&
    b2b2:	b121      	cbz	r1, b2be <gpiote_find_channel.isra.4+0x2e>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    b2b4:	3301      	adds	r3, #1
    b2b6:	2b08      	cmp	r3, #8
    b2b8:	d1ef      	bne.n	b29a <gpiote_find_channel.isra.4+0xa>
	return -ENODEV;
    b2ba:	f06f 0312 	mvn.w	r3, #18
}
    b2be:	4618      	mov	r0, r3
    b2c0:	bd30      	pop	{r4, r5, pc}
    b2c2:	bf00      	nop
    b2c4:	20000fc0 	.word	0x20000fc0
    b2c8:	40006000 	.word	0x40006000

0000b2cc <gpio_nrf5_enable_callback>:

static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    b2cc:	b570      	push	{r4, r5, r6, lr}
    b2ce:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    b2d0:	460d      	mov	r5, r1
    b2d2:	b9c9      	cbnz	r1, b308 <gpio_nrf5_enable_callback+0x3c>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    b2d4:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    b2d6:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    b2d8:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    b2da:	4610      	mov	r0, r2
    b2dc:	7919      	ldrb	r1, [r3, #4]
    b2de:	f7ff ffd7 	bl	b290 <gpiote_find_channel.isra.4>
		if (i < 0) {
    b2e2:	2800      	cmp	r0, #0
    b2e4:	db12      	blt.n	b30c <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    b2e6:	68b2      	ldr	r2, [r6, #8]
    b2e8:	2301      	movs	r3, #1
    b2ea:	fa03 f404 	lsl.w	r4, r3, r4
    b2ee:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    b2f0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b2f4:	4a06      	ldr	r2, [pc, #24]	; (b310 <gpio_nrf5_enable_callback+0x44>)
		data->pin_callback_enables |= BIT(pin);
    b2f6:	60b4      	str	r4, [r6, #8]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    b2f8:	fa03 f000 	lsl.w	r0, r3, r0
		gpiote->EVENTS_IN[i] = 0;
    b2fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
		gpiote->INTENSET = BIT(i);
    b300:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    b304:	4628      	mov	r0, r5
    b306:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    b308:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    b30c:	bd70      	pop	{r4, r5, r6, pc}
    b30e:	bf00      	nop
    b310:	40006000 	.word	0x40006000

0000b314 <gpio_nrf5_disable_callback>:

static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    b314:	b570      	push	{r4, r5, r6, lr}
    b316:	4614      	mov	r4, r2
	if (access_op == GPIO_ACCESS_BY_PIN) {
    b318:	460d      	mov	r5, r1
    b31a:	b9b1      	cbnz	r1, b34a <gpio_nrf5_disable_callback+0x36>
		volatile struct _gpiote *gpiote = (void *)NRF_GPIOTE_BASE;
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
		int port = GPIO_PORT(dev);
    b31c:	6803      	ldr	r3, [r0, #0]
		struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    b31e:	6886      	ldr	r6, [r0, #8]
		int port = GPIO_PORT(dev);
    b320:	689b      	ldr	r3, [r3, #8]
		int i;

		i = gpiote_find_channel(dev, pin, port);
    b322:	4610      	mov	r0, r2
    b324:	7919      	ldrb	r1, [r3, #4]
    b326:	f7ff ffb3 	bl	b290 <gpiote_find_channel.isra.4>
		if (i < 0) {
    b32a:	2800      	cmp	r0, #0
    b32c:	db0f      	blt.n	b34e <gpio_nrf5_disable_callback+0x3a>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    b32e:	68b2      	ldr	r2, [r6, #8]
    b330:	2301      	movs	r3, #1
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    b332:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    b336:	fa03 f404 	lsl.w	r4, r3, r4
		gpiote->INTENCLR = BIT(i);
    b33a:	4b05      	ldr	r3, [pc, #20]	; (b350 <gpio_nrf5_disable_callback+0x3c>)
		data->pin_callback_enables &= ~(BIT(pin));
    b33c:	ea22 0404 	bic.w	r4, r2, r4
    b340:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    b342:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    b346:	4628      	mov	r0, r5
    b348:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    b34a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    b34e:	bd70      	pop	{r4, r5, r6, pc}
    b350:	40006000 	.word	0x40006000

0000b354 <gpio_nrf5_config>:
{
    b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    b358:	6806      	ldr	r6, [r0, #0]
{
    b35a:	4614      	mov	r4, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    b35c:	68b2      	ldr	r2, [r6, #8]
    b35e:	6815      	ldr	r5, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    b360:	b119      	cbz	r1, b36a <gpio_nrf5_config+0x16>
		return -ENOTSUP;
    b362:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    b36a:	f403 7240 	and.w	r2, r3, #768	; 0x300
    b36e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    b372:	f3c3 3001 	ubfx	r0, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    b376:	f3c3 3c81 	ubfx	ip, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    b37a:	f403 3740 	and.w	r7, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    b37e:	d058      	beq.n	b432 <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
    b380:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    b384:	bf0c      	ite	eq
    b386:	2204      	moveq	r2, #4
    b388:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    b38a:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    b38e:	bf08      	it	eq
    b390:	2700      	moveq	r7, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    b392:	f013 0f01 	tst.w	r3, #1
    b396:	ea4f 0180 	mov.w	r1, r0, lsl #2
    b39a:	f8df e0cc 	ldr.w	lr, [pc, #204]	; b468 <gpio_nrf5_config+0x114>
    b39e:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
    b3a2:	d04f      	beq.n	b444 <gpio_nrf5_config+0xf0>
			if (pull == GPIO_PULL_UP) {
    b3a4:	2a0c      	cmp	r2, #12
    b3a6:	d146      	bne.n	b436 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
    b3a8:	2701      	movs	r7, #1
    b3aa:	40a7      	lsls	r7, r4
    b3ac:	f8c5 7508 	str.w	r7, [r5, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    b3b0:	4461      	add	r1, ip
					      GPIO_INPUT_DISCONNECT |
    b3b2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    b3b6:	f041 0103 	orr.w	r1, r1, #3
    b3ba:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    b3bc:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
	if (flags & GPIO_INT) {
    b3c0:	f013 0002 	ands.w	r0, r3, #2
    b3c4:	d049      	beq.n	b45a <gpio_nrf5_config+0x106>
		u32_t port = GPIO_PORT(dev);
    b3c6:	68b2      	ldr	r2, [r6, #8]
		if (flags & GPIO_INT_EDGE) {
    b3c8:	0699      	lsls	r1, r3, #26
		u32_t port = GPIO_PORT(dev);
    b3ca:	f892 8004 	ldrb.w	r8, [r2, #4]
		if (flags & GPIO_INT_EDGE) {
    b3ce:	d5c8      	bpl.n	b362 <gpio_nrf5_config+0xe>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    b3d0:	065a      	lsls	r2, r3, #25
    b3d2:	d43d      	bmi.n	b450 <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_H2L;
    b3d4:	f013 0f04 	tst.w	r3, #4
    b3d8:	bf14      	ite	ne
    b3da:	f44f 3580 	movne.w	r5, #65536	; 0x10000
    b3de:	f44f 3500 	moveq.w	r5, #131072	; 0x20000
		if (popcount(gpiote_chan_mask) == GPIOTE_CHAN_COUNT) {
    b3e2:	4e1f      	ldr	r6, [pc, #124]	; (b460 <gpio_nrf5_config+0x10c>)
    b3e4:	6837      	ldr	r7, [r6, #0]
    b3e6:	4638      	mov	r0, r7
    b3e8:	f7f4 ff2c 	bl	244 <__popcountsi2>
    b3ec:	2808      	cmp	r0, #8
    b3ee:	d032      	beq.n	b456 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin, port);
    b3f0:	4641      	mov	r1, r8
    b3f2:	4620      	mov	r0, r4
    b3f4:	f7ff ff4c 	bl	b290 <gpiote_find_channel.isra.4>
		if (i < 0) {
    b3f8:	2800      	cmp	r0, #0
    b3fa:	da08      	bge.n	b40e <gpio_nrf5_config+0xba>
			i = find_lsb_set(~gpiote_chan_mask) - 1;
    b3fc:	43fb      	mvns	r3, r7
	return __builtin_ffs(op);
    b3fe:	fa93 f0a3 	rbit	r0, r3
    b402:	2b00      	cmp	r3, #0
    b404:	fab0 f080 	clz	r0, r0
    b408:	bf08      	it	eq
    b40a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		gpiote_chan_mask |= BIT(i);
    b40e:	2301      	movs	r3, #1
    b410:	4083      	lsls	r3, r0
		config |= GPIOTE_CFG_PIN(pin);
    b412:	0224      	lsls	r4, r4, #8
		gpiote_chan_mask |= BIT(i);
    b414:	433b      	orrs	r3, r7
		config |= GPIOTE_CFG_PIN(pin);
    b416:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		gpiote_chan_mask |= BIT(i);
    b41a:	6033      	str	r3, [r6, #0]
		gpiote->CONFIG[i] = config;
    b41c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    b420:	4b10      	ldr	r3, [pc, #64]	; (b464 <gpio_nrf5_config+0x110>)
		config |= GPIOTE_CFG_PIN(pin);
    b422:	f044 0401 	orr.w	r4, r4, #1
    b426:	432c      	orrs	r4, r5
		gpiote->CONFIG[i] = config;
    b428:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
	return 0;
    b42c:	2000      	movs	r0, #0
    b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pull = GPIO_PULL_UP;
    b432:	220c      	movs	r2, #12
    b434:	e7a9      	b.n	b38a <gpio_nrf5_config+0x36>
			} else if (pull == GPIO_PULL_DOWN) {
    b436:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    b438:	bf02      	ittt	eq
    b43a:	2701      	moveq	r7, #1
    b43c:	40a7      	lsleq	r7, r4
    b43e:	f8c5 750c 	streq.w	r7, [r5, #1292]	; 0x50c
    b442:	e7b5      	b.n	b3b0 <gpio_nrf5_config+0x5c>
					      drive_strength[ds_low][ds_high] |
    b444:	4461      	add	r1, ip
    b446:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    b44a:	430a      	orrs	r2, r1
    b44c:	433a      	orrs	r2, r7
    b44e:	e7b5      	b.n	b3bc <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
    b450:	f44f 3540 	mov.w	r5, #196608	; 0x30000
    b454:	e7c5      	b.n	b3e2 <gpio_nrf5_config+0x8e>
			return -EIO;
    b456:	f06f 0004 	mvn.w	r0, #4
}
    b45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b45e:	bf00      	nop
    b460:	20000fc0 	.word	0x20000fc0
    b464:	40006000 	.word	0x40006000
    b468:	0000ed04 	.word	0x0000ed04

0000b46c <gpio_nrf5_P0_init>:
}

/* Initialization for GPIO Port 0 */
#ifdef CONFIG_GPIO_NRF5_P0
static int gpio_nrf5_P0_init(struct device *dev)
{
    b46c:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIOTE_NRF5_PRI,
    b46e:	2200      	movs	r2, #0
    b470:	2105      	movs	r1, #5
    b472:	2006      	movs	r0, #6
    b474:	f7f6 f992 	bl	179c <_irq_priority_set>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    b478:	2006      	movs	r0, #6
    b47a:	f7f6 f95d 	bl	1738 <_arch_irq_enable>
	gpio_nrf5_init(dev);

	return 0;
}
    b47e:	2000      	movs	r0, #0
    b480:	bd08      	pop	{r3, pc}
	...

0000b484 <gpio_nrf5_port_isr>:
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    b484:	2100      	movs	r1, #0
{
    b486:	b570      	push	{r4, r5, r6, lr}
	u32_t int_status_p0 = 0;
    b488:	460a      	mov	r2, r1
			gpiote->EVENTS_IN[i] = 0;
    b48a:	460c      	mov	r4, r1
				int_status_p0 |= BIT(pin);
    b48c:	2501      	movs	r5, #1
    b48e:	008b      	lsls	r3, r1, #2
    b490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b494:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
		if (gpiote->EVENTS_IN[i]) {
    b498:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    b49c:	b140      	cbz	r0, b4b0 <gpio_nrf5_port_isr+0x2c>
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    b49e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
			gpiote->EVENTS_IN[i] = 0;
    b4a2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
			int pin = GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]);
    b4a6:	f3c0 2304 	ubfx	r3, r0, #8, #5
				int_status_p0 |= BIT(pin);
    b4aa:	fa05 f303 	lsl.w	r3, r5, r3
    b4ae:	431a      	orrs	r2, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    b4b0:	3101      	adds	r1, #1
    b4b2:	2908      	cmp	r1, #8
    b4b4:	d1eb      	bne.n	b48e <gpio_nrf5_port_isr+0xa>
	data = DEV_GPIO_DATA(dev);
    b4b6:	4e08      	ldr	r6, [pc, #32]	; (b4d8 <gpio_nrf5_port_isr+0x54>)
    b4b8:	68b3      	ldr	r3, [r6, #8]
	enabled_int = int_status_p0 & data->pin_callback_enables;
    b4ba:	689d      	ldr	r5, [r3, #8]
    b4bc:	681c      	ldr	r4, [r3, #0]
    b4be:	4015      	ands	r5, r2
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    b4c0:	b14c      	cbz	r4, b4d6 <gpio_nrf5_port_isr+0x52>
		if (cb->pin_mask & pins) {
    b4c2:	68a3      	ldr	r3, [r4, #8]
    b4c4:	421d      	tst	r5, r3
    b4c6:	d004      	beq.n	b4d2 <gpio_nrf5_port_isr+0x4e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    b4c8:	6863      	ldr	r3, [r4, #4]
    b4ca:	462a      	mov	r2, r5
    b4cc:	4621      	mov	r1, r4
    b4ce:	4630      	mov	r0, r6
    b4d0:	4798      	blx	r3
	return node->next;
    b4d2:	6824      	ldr	r4, [r4, #0]
    b4d4:	e7f4      	b.n	b4c0 <gpio_nrf5_port_isr+0x3c>
    b4d6:	bd70      	pop	{r4, r5, r6, pc}
    b4d8:	2000347c 	.word	0x2000347c

0000b4dc <uart_nrfx_err_check>:

}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4dc:	4b03      	ldr	r3, [pc, #12]	; (b4ec <uart_nrfx_err_check+0x10>)
    b4de:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0;

	if (nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_ERROR)) {
    b4e0:	b118      	cbz	r0, b4ea <uart_nrfx_err_check+0xe>
    p_reg->INTENCLR = int_mask;
}

__STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b4e2:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
    p_reg->ERRORSRC = errsrc_mask;
    b4e6:	f8c3 035c 	str.w	r0, [r3, #860]	; 0x35c
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(NRF_UART0);
	}

	return error;
}
    b4ea:	4770      	bx	lr
    b4ec:	40002124 	.word	0x40002124

0000b4f0 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b4f0:	4b07      	ldr	r3, [pc, #28]	; (b510 <uart_nrfx_poll_out+0x20>)
    b4f2:	2200      	movs	r2, #0
    b4f4:	601a      	str	r2, [r3, #0]
{
    b4f6:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b4f8:	681a      	ldr	r2, [r3, #0]
    b4fa:	9201      	str	r2, [sp, #4]
    (void)dummy;
    b4fc:	9a01      	ldr	r2, [sp, #4]
    return p_reg->RXD;
}

__STATIC_INLINE void nrf_uart_txd_set(NRF_UART_Type * p_reg, uint8_t txd)
{
    p_reg->TXD = txd;
    b4fe:	4a05      	ldr	r2, [pc, #20]	; (b514 <uart_nrfx_poll_out+0x24>)
    b500:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b504:	681a      	ldr	r2, [r3, #0]
	while (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_TXDRDY)) {
    b506:	2a00      	cmp	r2, #0
    b508:	d0fc      	beq.n	b504 <uart_nrfx_poll_out+0x14>
}
    b50a:	4608      	mov	r0, r1
    b50c:	b002      	add	sp, #8
    b50e:	4770      	bx	lr
    b510:	4000211c 	.word	0x4000211c
    b514:	40002000 	.word	0x40002000

0000b518 <uart_nrfx_poll_in>:
    b518:	4b08      	ldr	r3, [pc, #32]	; (b53c <uart_nrfx_poll_in+0x24>)
    b51a:	681a      	ldr	r2, [r3, #0]
{
    b51c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(NRF_UART0, NRF_UART_EVENT_RXDRDY)) {
    b51e:	b152      	cbz	r2, b536 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b520:	2000      	movs	r0, #0
    b522:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b524:	681b      	ldr	r3, [r3, #0]
    b526:	9301      	str	r3, [sp, #4]
    (void)dummy;
    b528:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    b52a:	4b05      	ldr	r3, [pc, #20]	; (b540 <uart_nrfx_poll_in+0x28>)
    b52c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    b530:	700b      	strb	r3, [r1, #0]
}
    b532:	b002      	add	sp, #8
    b534:	4770      	bx	lr
		return -1;
    b536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b53a:	e7fa      	b.n	b532 <uart_nrfx_poll_in+0x1a>
    b53c:	40002108 	.word	0x40002108
    b540:	40002000 	.word	0x40002000

0000b544 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    b544:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    b546:	4819      	ldr	r0, [pc, #100]	; (b5ac <uart_nrfx_init+0x68>)
    b548:	f000 f98c 	bl	b864 <device_get_binding>
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    b54c:	6843      	ldr	r3, [r0, #4]
    b54e:	4604      	mov	r4, r0
    b550:	681d      	ldr	r5, [r3, #0]
    b552:	2206      	movs	r2, #6
    b554:	f240 1301 	movw	r3, #257	; 0x101
    b558:	2100      	movs	r1, #0
    b55a:	47a8      	blx	r5
    b55c:	6863      	ldr	r3, [r4, #4]
    b55e:	681d      	ldr	r5, [r3, #0]
    b560:	2300      	movs	r3, #0
    b562:	4619      	mov	r1, r3
    b564:	2208      	movs	r2, #8
    b566:	4620      	mov	r0, r4
    b568:	47a8      	blx	r5
    p_reg->PSELRXD = pselrxd;
    b56a:	4b11      	ldr	r3, [pc, #68]	; (b5b0 <uart_nrfx_init+0x6c>)
}

__STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b56c:	4911      	ldr	r1, [pc, #68]	; (b5b4 <uart_nrfx_init+0x70>)
    p_reg->PSELRXD = pselrxd;
    b56e:	2208      	movs	r2, #8
    b570:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    b574:	2206      	movs	r2, #6
    b576:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

__STATIC_INLINE void nrf_uart_configure(NRF_UART_Type   * p_reg,
                                            nrf_uart_parity_t parity,
                                            nrf_uart_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    b57a:	2000      	movs	r0, #0
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    b57c:	4a0e      	ldr	r2, [pc, #56]	; (b5b8 <uart_nrfx_init+0x74>)
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    b57e:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->BAUDRATE = baudrate;
    b582:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    b586:	2204      	movs	r2, #4
    b588:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b58c:	4a0b      	ldr	r2, [pc, #44]	; (b5bc <uart_nrfx_init+0x78>)
    b58e:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b590:	6812      	ldr	r2, [r2, #0]
    b592:	9201      	str	r2, [sp, #4]
    (void)dummy;
    b594:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b596:	4a0a      	ldr	r2, [pc, #40]	; (b5c0 <uart_nrfx_init+0x7c>)
    b598:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b59a:	6812      	ldr	r2, [r2, #0]
    b59c:	9200      	str	r2, [sp, #0]
    (void)dummy;
    b59e:	9a00      	ldr	r2, [sp, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5a0:	2201      	movs	r2, #1
    b5a2:	600a      	str	r2, [r1, #0]
    b5a4:	601a      	str	r2, [r3, #0]
		    0);
	irq_enable(NRFX_IRQ_NUMBER_GET(NRF_UART0));
#endif

	return 0;
}
    b5a6:	b003      	add	sp, #12
    b5a8:	bd30      	pop	{r4, r5, pc}
    b5aa:	bf00      	nop
    b5ac:	0000ed68 	.word	0x0000ed68
    b5b0:	40002000 	.word	0x40002000
    b5b4:	40002008 	.word	0x40002008
    b5b8:	01d7e000 	.word	0x01d7e000
    b5bc:	4000211c 	.word	0x4000211c
    b5c0:	40002108 	.word	0x40002108

0000b5c4 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    b5c8:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    b5ca:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    b5cc:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    b5ce:	42a3      	cmp	r3, r4
	d = &rand[octets];
    b5d0:	440a      	add	r2, r1
	s = &rng->rand[first];
    b5d2:	4406      	add	r6, r0
	if (first <= last) {
    b5d4:	d81f      	bhi.n	b616 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    b5d6:	1ae4      	subs	r4, r4, r3
    b5d8:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    b5da:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    b5dc:	bf3e      	ittt	cc
    b5de:	1a64      	subcc	r4, r4, r1
    b5e0:	b2e7      	uxtbcc	r7, r4
    b5e2:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    b5e4:	4423      	add	r3, r4
		octets -= avail;
    b5e6:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    b5ea:	bf28      	it	cs
    b5ec:	2700      	movcs	r7, #0
		first += avail;
    b5ee:	b2db      	uxtb	r3, r3
		octets -= avail;
    b5f0:	b2c9      	uxtb	r1, r1
    b5f2:	4434      	add	r4, r6

		while (avail--) {
    b5f4:	42a6      	cmp	r6, r4
    b5f6:	d109      	bne.n	b60c <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    b5f8:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    b5fa:	7843      	ldrb	r3, [r0, #1]
    b5fc:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    b5fe:	bf82      	ittt	hi
    b600:	4b20      	ldrhi	r3, [pc, #128]	; (b684 <get+0xc0>)
    b602:	2201      	movhi	r2, #1
    b604:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    b606:	4608      	mov	r0, r1
    b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    b60c:	f816 5b01 	ldrb.w	r5, [r6], #1
    b610:	f802 5d01 	strb.w	r5, [r2, #-1]!
    b614:	e7ee      	b.n	b5f4 <get+0x30>
		avail = rng->count - first;
    b616:	7805      	ldrb	r5, [r0, #0]
    b618:	1aed      	subs	r5, r5, r3
    b61a:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    b61c:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    b61e:	bf3f      	itttt	cc
    b620:	1a67      	subcc	r7, r4, r1
    b622:	19ed      	addcc	r5, r5, r7
    b624:	b2ef      	uxtbcc	r7, r5
    b626:	460d      	movcc	r5, r1
			first += avail;
    b628:	bf38      	it	cc
    b62a:	185b      	addcc	r3, r3, r1
		octets -= avail;
    b62c:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    b630:	bf32      	itee	cc
    b632:	b2db      	uxtbcc	r3, r3
    b634:	4627      	movcs	r7, r4
			first = 0;
    b636:	2300      	movcs	r3, #0
		octets -= avail;
    b638:	b2c9      	uxtb	r1, r1
    b63a:	4696      	mov	lr, r2
    b63c:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    b640:	4566      	cmp	r6, ip
    b642:	d119      	bne.n	b678 <get+0xb4>
    b644:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    b646:	2900      	cmp	r1, #0
    b648:	d0d6      	beq.n	b5f8 <get+0x34>
    b64a:	2c00      	cmp	r4, #0
    b64c:	d0d4      	beq.n	b5f8 <get+0x34>
			if (octets < last) {
    b64e:	428c      	cmp	r4, r1
    b650:	bf8a      	itet	hi
    b652:	460b      	movhi	r3, r1
    b654:	4623      	movls	r3, r4
				remaining = last - octets;
    b656:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    b658:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    b65c:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    b660:	bf8c      	ite	hi
    b662:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    b664:	2700      	movls	r7, #0
			octets -= last;
    b666:	b2c9      	uxtb	r1, r1
    b668:	18f4      	adds	r4, r6, r3
			while (last--) {
    b66a:	42a6      	cmp	r6, r4
    b66c:	d0c4      	beq.n	b5f8 <get+0x34>
				*(--d) = *s++;
    b66e:	f816 5b01 	ldrb.w	r5, [r6], #1
    b672:	f802 5d01 	strb.w	r5, [r2, #-1]!
    b676:	e7f8      	b.n	b66a <get+0xa6>
			*(--d) = *s++;
    b678:	f816 8b01 	ldrb.w	r8, [r6], #1
    b67c:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    b680:	e7de      	b.n	b640 <get+0x7c>
    b682:	bf00      	nop
    b684:	4000d000 	.word	0x4000d000

0000b688 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    b688:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    b68a:	b1d0      	cbz	r0, b6c2 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    b68c:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    b68e:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    b690:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    b692:	1c53      	adds	r3, r2, #1
    b694:	b2db      	uxtb	r3, r3
		last = 0;
    b696:	42ab      	cmp	r3, r5
    b698:	bf08      	it	eq
    b69a:	2300      	moveq	r3, #0
	if (last == rng->first) {
    b69c:	42a3      	cmp	r3, r4
    b69e:	d010      	beq.n	b6c2 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    b6a0:	b161      	cbz	r1, b6bc <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    b6a2:	490a      	ldr	r1, [pc, #40]	; (b6cc <isr+0x44>)
    b6a4:	4402      	add	r2, r0
    b6a6:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    b6aa:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    b6ac:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    b6ae:	3301      	adds	r3, #1
    b6b0:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    b6b2:	429d      	cmp	r5, r3
    b6b4:	bf08      	it	eq
    b6b6:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    b6b8:	42a3      	cmp	r3, r4
    b6ba:	d005      	beq.n	b6c8 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    b6bc:	f06f 000f 	mvn.w	r0, #15
    b6c0:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    b6c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    b6c6:	bd30      	pop	{r4, r5, pc}
		return 0;
    b6c8:	2000      	movs	r0, #0
}
    b6ca:	bd30      	pop	{r4, r5, pc}
    b6cc:	4000d000 	.word	0x4000d000

0000b6d0 <entropy_nrf5_get_entropy_isr>:
					u32_t flags)
{
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(dev);
	u16_t cnt = len;

	if (!(flags & ENTROPY_BUSYWAIT)) {
    b6d0:	07db      	lsls	r3, r3, #31
{
    b6d2:	b570      	push	{r4, r5, r6, lr}
    b6d4:	4614      	mov	r4, r2
	if (!(flags & ENTROPY_BUSYWAIT)) {
    b6d6:	d507      	bpl.n	b6e8 <entropy_nrf5_get_entropy_isr+0x18>
    b6d8:	4613      	mov	r3, r2
    b6da:	4a0d      	ldr	r2, [pc, #52]	; (b710 <entropy_nrf5_get_entropy_isr+0x40>)
    b6dc:	2001      	movs	r0, #1
		return get((struct rand *)dev_data->isr, len, buf);
	}

	while (len) {
		NRF_RNG->EVENTS_VALRDY = 0;
    b6de:	2500      	movs	r5, #0
	while (len) {
    b6e0:	b94b      	cbnz	r3, b6f6 <entropy_nrf5_get_entropy_isr+0x26>
		NRF_RNG->TASKS_START = 1;
		while (NRF_RNG->EVENTS_VALRDY == 0) {
		}
		buf[--len] = NRF_RNG->VALUE;
	}
	NRF_RNG->TASKS_STOP = 1;
    b6e2:	6050      	str	r0, [r2, #4]

	return cnt;
    b6e4:	4620      	mov	r0, r4
}
    b6e6:	bd70      	pop	{r4, r5, r6, pc}
		return get((struct rand *)dev_data->isr, len, buf);
    b6e8:	6880      	ldr	r0, [r0, #8]
    b6ea:	460a      	mov	r2, r1
    b6ec:	303c      	adds	r0, #60	; 0x3c
    b6ee:	b2e1      	uxtb	r1, r4
    b6f0:	f7ff ff68 	bl	b5c4 <get>
    b6f4:	bd70      	pop	{r4, r5, r6, pc}
		NRF_RNG->EVENTS_VALRDY = 0;
    b6f6:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
		NRF_RNG->TASKS_START = 1;
    b6fa:	6010      	str	r0, [r2, #0]
		while (NRF_RNG->EVENTS_VALRDY == 0) {
    b6fc:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
    b700:	2e00      	cmp	r6, #0
    b702:	d0fb      	beq.n	b6fc <entropy_nrf5_get_entropy_isr+0x2c>
		buf[--len] = NRF_RNG->VALUE;
    b704:	3b01      	subs	r3, #1
    b706:	b29b      	uxth	r3, r3
    b708:	f8d2 6508 	ldr.w	r6, [r2, #1288]	; 0x508
    b70c:	54ce      	strb	r6, [r1, r3]
    b70e:	e7e7      	b.n	b6e0 <entropy_nrf5_get_entropy_isr+0x10>
    b710:	4000d000 	.word	0x4000d000

0000b714 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    b714:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    b716:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    b718:	2201      	movs	r2, #1
    b71a:	4611      	mov	r1, r2
    b71c:	4620      	mov	r0, r4
    b71e:	f000 fda7 	bl	c270 <_impl_k_sem_init>
    b722:	f104 0018 	add.w	r0, r4, #24
    b726:	2201      	movs	r2, #1
    b728:	2100      	movs	r1, #0
    b72a:	f000 fda1 	bl	c270 <_impl_k_sem_init>
	rng->threshold = threshold;
    b72e:	2304      	movs	r3, #4
    b730:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    b734:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    b736:	2500      	movs	r5, #0
	rng->threshold = threshold;
    b738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    b73c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    b73e:	4b11      	ldr	r3, [pc, #68]	; (b784 <entropy_nrf5_init+0x70>)
	rng->count = len;
    b740:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    b744:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    b746:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    b74a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    b74e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    b752:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    b756:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    b75a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    b75e:	f042 0201 	orr.w	r2, r2, #1
    b762:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    b766:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    b768:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    b76c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    b76e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    b772:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    b774:	462a      	mov	r2, r5
    b776:	f7f6 f811 	bl	179c <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    b77a:	4630      	mov	r0, r6
    b77c:	f7f5 ffdc 	bl	1738 <_arch_irq_enable>

	return 0;
}
    b780:	4628      	mov	r0, r5
    b782:	bd70      	pop	{r4, r5, r6, pc}
    b784:	4000d000 	.word	0x4000d000

0000b788 <isr_rand>:
{
    b788:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    b78a:	4b12      	ldr	r3, [pc, #72]	; (b7d4 <isr_rand+0x4c>)
    b78c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b790:	b1fb      	cbz	r3, b7d2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    b792:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    b794:	2101      	movs	r1, #1
    b796:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    b79a:	f7ff ff75 	bl	b688 <isr>
		if (ret != -EBUSY) {
    b79e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    b7a2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    b7a4:	d00d      	beq.n	b7c2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    b7a6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    b7aa:	bf14      	ite	ne
    b7ac:	2100      	movne	r1, #0
    b7ae:	2101      	moveq	r1, #1
    b7b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    b7b4:	f7ff ff68 	bl	b688 <isr>
    b7b8:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    b7ba:	f105 0018 	add.w	r0, r5, #24
    b7be:	f000 fd60 	bl	c282 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    b7c2:	4b04      	ldr	r3, [pc, #16]	; (b7d4 <isr_rand+0x4c>)
    b7c4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    b7c6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    b7c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    b7cc:	bf1c      	itt	ne
    b7ce:	2201      	movne	r2, #1
    b7d0:	605a      	strne	r2, [r3, #4]
    b7d2:	bd38      	pop	{r3, r4, r5, pc}
    b7d4:	4000d000 	.word	0x4000d000

0000b7d8 <entropy_nrf5_get_entropy>:
{
    b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    b7dc:	6885      	ldr	r5, [r0, #8]
{
    b7de:	460f      	mov	r7, r1
    b7e0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    b7e2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    b7e6:	b914      	cbnz	r4, b7ee <entropy_nrf5_get_entropy+0x16>
}
    b7e8:	4620      	mov	r0, r4
    b7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b7ee:	2cff      	cmp	r4, #255	; 0xff
    b7f0:	4623      	mov	r3, r4
    b7f2:	bf28      	it	cs
    b7f4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    b7f6:	1ae4      	subs	r4, r4, r3
    b7f8:	b2de      	uxtb	r6, r3
    b7fa:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    b7fc:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    b800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b804:	4628      	mov	r0, r5
    b806:	f000 fd64 	bl	c2d2 <_impl_k_sem_take>
    b80a:	4631      	mov	r1, r6
    b80c:	463a      	mov	r2, r7
    b80e:	4648      	mov	r0, r9
    b810:	f7ff fed8 	bl	b5c4 <get>
    b814:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    b816:	4628      	mov	r0, r5
    b818:	f000 fd33 	bl	c282 <_impl_k_sem_give>
			if (len8) {
    b81c:	2e00      	cmp	r6, #0
    b81e:	d0e2      	beq.n	b7e6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    b820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b824:	4640      	mov	r0, r8
    b826:	f000 fd54 	bl	c2d2 <_impl_k_sem_take>
    b82a:	e7e9      	b.n	b800 <entropy_nrf5_get_entropy+0x28>

0000b82c <entropy_nrf_get_entropy_isr>:

u8_t entropy_nrf_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    b82c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    b82e:	4802      	ldr	r0, [pc, #8]	; (b838 <entropy_nrf_get_entropy_isr+0xc>)
    b830:	460a      	mov	r2, r1
    b832:	4619      	mov	r1, r3
    b834:	f7ff bec6 	b.w	b5c4 <get>
    b838:	20001000 	.word	0x20001000

0000b83c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    b83c:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    b83e:	4b08      	ldr	r3, [pc, #32]	; (b860 <_sys_device_do_config_level+0x24>)
    b840:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b844:	3001      	adds	r0, #1
    b846:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    b84a:	4620      	mov	r0, r4
    b84c:	42a8      	cmp	r0, r5
    b84e:	f104 040c 	add.w	r4, r4, #12
    b852:	d300      	bcc.n	b856 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    b854:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    b856:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b85a:	685b      	ldr	r3, [r3, #4]
    b85c:	4798      	blx	r3
    b85e:	e7f4      	b.n	b84a <_sys_device_do_config_level+0xe>
    b860:	0000ed84 	.word	0x0000ed84

0000b864 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    b864:	4b10      	ldr	r3, [pc, #64]	; (b8a8 <device_get_binding+0x44>)
{
    b866:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    b868:	4c10      	ldr	r4, [pc, #64]	; (b8ac <device_get_binding+0x48>)
{
    b86a:	4605      	mov	r5, r0
    b86c:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    b86e:	429c      	cmp	r4, r3
    b870:	d104      	bne.n	b87c <device_get_binding+0x18>
    b872:	4c0e      	ldr	r4, [pc, #56]	; (b8ac <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    b874:	42b4      	cmp	r4, r6
    b876:	d109      	bne.n	b88c <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    b878:	2400      	movs	r4, #0
    b87a:	e012      	b.n	b8a2 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    b87c:	6862      	ldr	r2, [r4, #4]
    b87e:	b11a      	cbz	r2, b888 <device_get_binding+0x24>
    b880:	6822      	ldr	r2, [r4, #0]
    b882:	6812      	ldr	r2, [r2, #0]
    b884:	42aa      	cmp	r2, r5
    b886:	d00c      	beq.n	b8a2 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b888:	340c      	adds	r4, #12
    b88a:	e7f0      	b.n	b86e <device_get_binding+0xa>
		if (!info->driver_api) {
    b88c:	6863      	ldr	r3, [r4, #4]
    b88e:	b90b      	cbnz	r3, b894 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b890:	340c      	adds	r4, #12
    b892:	e7ef      	b.n	b874 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    b894:	6823      	ldr	r3, [r4, #0]
    b896:	4628      	mov	r0, r5
    b898:	6819      	ldr	r1, [r3, #0]
    b89a:	f7f6 f8f5 	bl	1a88 <strcmp>
    b89e:	2800      	cmp	r0, #0
    b8a0:	d1f6      	bne.n	b890 <device_get_binding+0x2c>
}
    b8a2:	4620      	mov	r0, r4
    b8a4:	bd70      	pop	{r4, r5, r6, pc}
    b8a6:	bf00      	nop
    b8a8:	200034ac 	.word	0x200034ac
    b8ac:	2000341c 	.word	0x2000341c

0000b8b0 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    b8b0:	1c43      	adds	r3, r0, #1
    b8b2:	d003      	beq.n	b8bc <_sys_power_save_idle_exit+0xc>
    b8b4:	4b03      	ldr	r3, [pc, #12]	; (b8c4 <_sys_power_save_idle_exit+0x14>)
    b8b6:	681b      	ldr	r3, [r3, #0]
    b8b8:	4298      	cmp	r0, r3
    b8ba:	db01      	blt.n	b8c0 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    b8bc:	f7f5 bd04 	b.w	12c8 <_timer_idle_exit>
    b8c0:	4770      	bx	lr
    b8c2:	bf00      	nop
    b8c4:	20003410 	.word	0x20003410

0000b8c8 <idle>:
	return list->head == list;
    b8c8:	4d0f      	ldr	r5, [pc, #60]	; (b908 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    b8ca:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    b8cc:	4f0f      	ldr	r7, [pc, #60]	; (b90c <idle+0x44>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8ce:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
    b8d2:	f04f 0220 	mov.w	r2, #32
    b8d6:	f3ef 8311 	mrs	r3, BASEPRI
    b8da:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    b8de:	696b      	ldr	r3, [r5, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8e0:	42b3      	cmp	r3, r6
    b8e2:	d00a      	beq.n	b8fa <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    b8e4:	b14b      	cbz	r3, b8fa <idle+0x32>
    b8e6:	691c      	ldr	r4, [r3, #16]
    b8e8:	1c63      	adds	r3, r4, #1
    b8ea:	d008      	beq.n	b8fe <idle+0x36>
    b8ec:	683b      	ldr	r3, [r7, #0]
    b8ee:	42a3      	cmp	r3, r4
    b8f0:	dd05      	ble.n	b8fe <idle+0x36>
	_kernel.idle = ticks;
    b8f2:	61ec      	str	r4, [r5, #28]
	k_cpu_idle();
    b8f4:	f7f5 ffa8 	bl	1848 <k_cpu_idle>
    b8f8:	e7eb      	b.n	b8d2 <idle+0xa>
    b8fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    b8fe:	4620      	mov	r0, r4
    b900:	f7f5 fcc4 	bl	128c <_timer_idle_enter>
    b904:	e7f5      	b.n	b8f2 <idle+0x2a>
    b906:	bf00      	nop
    b908:	200011e0 	.word	0x200011e0
    b90c:	20003410 	.word	0x20003410

0000b910 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    b910:	4802      	ldr	r0, [pc, #8]	; (b91c <_bss_zero+0xc>)
    b912:	4a03      	ldr	r2, [pc, #12]	; (b920 <_bss_zero+0x10>)
    b914:	2100      	movs	r1, #0
    b916:	1a12      	subs	r2, r2, r0
    b918:	f7f6 b904 	b.w	1b24 <memset>
    b91c:	20000000 	.word	0x20000000
    b920:	200012a0 	.word	0x200012a0

0000b924 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    b924:	4802      	ldr	r0, [pc, #8]	; (b930 <_data_copy+0xc>)
    b926:	4a03      	ldr	r2, [pc, #12]	; (b934 <_data_copy+0x10>)
    b928:	4903      	ldr	r1, [pc, #12]	; (b938 <_data_copy+0x14>)
    b92a:	1a12      	subs	r2, r2, r0
    b92c:	f7f6 b8ce 	b.w	1acc <memcpy>
    b930:	200031a0 	.word	0x200031a0
    b934:	20003514 	.word	0x20003514
    b938:	0000edd4 	.word	0x0000edd4

0000b93c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    b93c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b93e:	2002      	movs	r0, #2
    b940:	f7ff ff7c 	bl	b83c <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    b944:	4807      	ldr	r0, [pc, #28]	; (b964 <bg_thread_main+0x28>)
    b946:	f7f5 fa91 	bl	e6c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    b94a:	2003      	movs	r0, #3
    b94c:	f7ff ff76 	bl	b83c <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    b950:	f000 fec4 	bl	c6dc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    b954:	f7f4 fe02 	bl	55c <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    b958:	4a03      	ldr	r2, [pc, #12]	; (b968 <bg_thread_main+0x2c>)
    b95a:	7a13      	ldrb	r3, [r2, #8]
    b95c:	f023 0301 	bic.w	r3, r3, #1
    b960:	7213      	strb	r3, [r2, #8]
    b962:	bd08      	pop	{r3, pc}
    b964:	0000eda0 	.word	0x0000eda0
    b968:	20001084 	.word	0x20001084

0000b96c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    b96c:	b580      	push	{r7, lr}
    b96e:	b086      	sub	sp, #24
    b970:	af06      	add	r7, sp, #24
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    b972:	f7f5 fd2d 	bl	13d0 <_IntLibInit>
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    b976:	4b30      	ldr	r3, [pc, #192]	; (ba38 <_Cstart+0xcc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b978:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b97c:	4b2f      	ldr	r3, [pc, #188]	; (ba3c <_Cstart+0xd0>)
	_ready_q.cache = _main_thread;
    b97e:	4d30      	ldr	r5, [pc, #192]	; (ba40 <_Cstart+0xd4>)
    b980:	4e30      	ldr	r6, [pc, #192]	; (ba44 <_Cstart+0xd8>)
    b982:	2400      	movs	r4, #0
    b984:	22e0      	movs	r2, #224	; 0xe0
    b986:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    b98a:	77dc      	strb	r4, [r3, #31]
    b98c:	761c      	strb	r4, [r3, #24]
    b98e:	765c      	strb	r4, [r3, #25]
    b990:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b994:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    b998:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    b99a:	f7f5 fec5 	bl	1728 <_FaultInit>
	_CpuIdleInit();
    b99e:	f7f5 ff4d 	bl	183c <_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b9a2:	4620      	mov	r0, r4
    b9a4:	f7ff ff4a 	bl	b83c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b9a8:	2001      	movs	r0, #1
    b9aa:	f7ff ff47 	bl	b83c <_sys_device_do_config_level>
	_sched_init();
    b9ae:	f000 fbf9 	bl	c1a4 <_sched_init>
	_setup_new_thread(_main_thread, _main_stack,
    b9b2:	2301      	movs	r3, #1
	_ready_q.cache = _main_thread;
    b9b4:	6235      	str	r5, [r6, #32]
	_setup_new_thread(_main_thread, _main_stack,
    b9b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b9ba:	9304      	str	r3, [sp, #16]
    b9bc:	9403      	str	r4, [sp, #12]
    b9be:	9402      	str	r4, [sp, #8]
    b9c0:	9401      	str	r4, [sp, #4]
    b9c2:	9400      	str	r4, [sp, #0]
    b9c4:	4b20      	ldr	r3, [pc, #128]	; (ba48 <_Cstart+0xdc>)
    b9c6:	4921      	ldr	r1, [pc, #132]	; (ba4c <_Cstart+0xe0>)
    b9c8:	4628      	mov	r0, r5
    b9ca:	f000 fe2f 	bl	c62c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b9ce:	7a6b      	ldrb	r3, [r5, #9]
    b9d0:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b9d4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b9d8:	726a      	strb	r2, [r5, #9]
    b9da:	4634      	mov	r4, r6
	return !(_is_thread_prevented_from_running(thread) ||
    b9dc:	d102      	bne.n	b9e4 <_Cstart+0x78>
    b9de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b9e0:	3301      	adds	r3, #1
    b9e2:	d024      	beq.n	ba2e <_Cstart+0xc2>
	_setup_new_thread(thr, stack,
    b9e4:	2301      	movs	r3, #1
    b9e6:	4e1a      	ldr	r6, [pc, #104]	; (ba50 <_Cstart+0xe4>)
    b9e8:	9304      	str	r3, [sp, #16]
    b9ea:	230f      	movs	r3, #15
    b9ec:	9303      	str	r3, [sp, #12]
    b9ee:	2300      	movs	r3, #0
    b9f0:	9302      	str	r3, [sp, #8]
    b9f2:	9301      	str	r3, [sp, #4]
    b9f4:	9300      	str	r3, [sp, #0]
    b9f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b9fa:	4b16      	ldr	r3, [pc, #88]	; (ba54 <_Cstart+0xe8>)
    b9fc:	4916      	ldr	r1, [pc, #88]	; (ba58 <_Cstart+0xec>)
    b9fe:	4630      	mov	r0, r6
    ba00:	f000 fe14 	bl	c62c <_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba04:	7a73      	ldrb	r3, [r6, #9]
	_kernel.cpus[0].idle_thread = _idle_thread;
    ba06:	60e6      	str	r6, [r4, #12]
    ba08:	f023 0304 	bic.w	r3, r3, #4
    ba0c:	7273      	strb	r3, [r6, #9]
	list->head = (sys_dnode_t *)list;
    ba0e:	4b13      	ldr	r3, [pc, #76]	; (ba5c <_Cstart+0xf0>)
    ba10:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
    ba12:	61a3      	str	r3, [r4, #24]
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba14:	4b12      	ldr	r3, [pc, #72]	; (ba60 <_Cstart+0xf4>)

	_current = main_thread;
    ba16:	60a5      	str	r5, [r4, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba18:	f023 0307 	bic.w	r3, r3, #7
#else
#error "Built-in PSP limit checks not supported by HW"
#endif
#endif /* CONFIG_BUILTIN_STACK_GUARD */

	__asm__ __volatile__(
    ba1c:	4c11      	ldr	r4, [pc, #68]	; (ba64 <_Cstart+0xf8>)
    ba1e:	4a0a      	ldr	r2, [pc, #40]	; (ba48 <_Cstart+0xdc>)
    ba20:	f383 8809 	msr	PSP, r3
    ba24:	2100      	movs	r1, #0
    ba26:	f381 8811 	msr	BASEPRI, r1
    ba2a:	4610      	mov	r0, r2
    ba2c:	4720      	bx	r4
}

static inline void _ready_thread(struct k_thread *thread)
{
	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    ba2e:	4628      	mov	r0, r5
    ba30:	f000 fab4 	bl	bf9c <_add_thread_to_ready_q>
    ba34:	e7d6      	b.n	b9e4 <_Cstart+0x78>
    ba36:	bf00      	nop
    ba38:	20002da0 	.word	0x20002da0
    ba3c:	e000ed00 	.word	0xe000ed00
    ba40:	20001084 	.word	0x20001084
    ba44:	200011e0 	.word	0x200011e0
    ba48:	0000b93d 	.word	0x0000b93d
    ba4c:	20002060 	.word	0x20002060
    ba50:	20001014 	.word	0x20001014
    ba54:	0000b8c9 	.word	0x0000b8c9
    ba58:	20002460 	.word	0x20002460
    ba5c:	200011f4 	.word	0x200011f4
    ba60:	20002460 	.word	0x20002460
    ba64:	00000779 	.word	0x00000779

0000ba68 <init_static_pools>:
	_waitq_init(&p->wait_q);
	_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    ba68:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ba6a:	4c07      	ldr	r4, [pc, #28]	; (ba88 <init_static_pools+0x20>)
    ba6c:	4d07      	ldr	r5, [pc, #28]	; (ba8c <init_static_pools+0x24>)
    ba6e:	42ac      	cmp	r4, r5
    ba70:	d301      	bcc.n	ba76 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    ba72:	2000      	movs	r0, #0
    ba74:	bd38      	pop	{r3, r4, r5, pc}
    ba76:	f104 0314 	add.w	r3, r4, #20
	list->head = (sys_dnode_t *)list;
    ba7a:	6163      	str	r3, [r4, #20]
	list->tail = (sys_dnode_t *)list;
    ba7c:	61a3      	str	r3, [r4, #24]
	_sys_mem_pool_base_init(&p->base);
    ba7e:	4620      	mov	r0, r4
    ba80:	f7f4 feb5 	bl	7ee <_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ba84:	341c      	adds	r4, #28
    ba86:	e7f2      	b.n	ba6e <init_static_pools+0x6>
    ba88:	200034ac 	.word	0x200034ac
    ba8c:	200034ac 	.word	0x200034ac

0000ba90 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;
	s64_t end = 0;

	__ASSERT(!(_is_in_isr() && timeout != K_NO_WAIT), "");

	if (timeout > 0) {
    ba94:	1e1d      	subs	r5, r3, #0
{
    ba96:	b085      	sub	sp, #20
    ba98:	4607      	mov	r7, r0
    ba9a:	460c      	mov	r4, r1
    ba9c:	4692      	mov	sl, r2
	if (timeout > 0) {
    ba9e:	dd4c      	ble.n	bb3a <k_mem_pool_alloc+0xaa>
		end = _tick_get() + _ms_to_ticks(timeout);
    baa0:	f000 fc3e 	bl	c320 <_tick_get>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    baa4:	f105 0309 	add.w	r3, r5, #9
    baa8:	220a      	movs	r2, #10
    baaa:	fbb3 f3f2 	udiv	r3, r3, r2
    baae:	eb10 0803 	adds.w	r8, r0, r3
	return pool - &_k_mem_pool_list_start[0];
    bab2:	4b23      	ldr	r3, [pc, #140]	; (bb40 <k_mem_pool_alloc+0xb0>)
    bab4:	4e23      	ldr	r6, [pc, #140]	; (bb44 <k_mem_pool_alloc+0xb4>)
    bab6:	1afb      	subs	r3, r7, r3
    bab8:	109b      	asrs	r3, r3, #2
    baba:	435e      	muls	r6, r3

		if (ret == -EAGAIN) {
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    babc:	b2f6      	uxtb	r6, r6
		if (ret == 0 || timeout == K_NO_WAIT ||
		    (ret && ret != -ENOMEM)) {
			return ret;
		}

		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    babe:	f107 0b14 	add.w	fp, r7, #20
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    bac2:	9400      	str	r4, [sp, #0]
    bac4:	ab03      	add	r3, sp, #12
    bac6:	aa02      	add	r2, sp, #8
    bac8:	4651      	mov	r1, sl
    baca:	4638      	mov	r0, r7
    bacc:	f7f4 feda 	bl	884 <_sys_mem_pool_block_alloc>
			if (ret != -EAGAIN) {
    bad0:	f110 0f0b 	cmn.w	r0, #11
    bad4:	d10b      	bne.n	baee <k_mem_pool_alloc+0x5e>
			ret = _sys_mem_pool_block_alloc(&p->base, size,
    bad6:	9400      	str	r4, [sp, #0]
    bad8:	ab03      	add	r3, sp, #12
    bada:	aa02      	add	r2, sp, #8
    badc:	4651      	mov	r1, sl
    bade:	4638      	mov	r0, r7
    bae0:	f7f4 fed0 	bl	884 <_sys_mem_pool_block_alloc>
			ret = -ENOMEM;
    bae4:	f110 0f0b 	cmn.w	r0, #11
    bae8:	bf08      	it	eq
    baea:	f06f 000b 	mvneq.w	r0, #11
		block->id.level = level_num;
    baee:	7963      	ldrb	r3, [r4, #5]
    baf0:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
    baf2:	7126      	strb	r6, [r4, #4]
		block->id.level = level_num;
    baf4:	f362 0303 	bfi	r3, r2, #0, #4
    baf8:	7163      	strb	r3, [r4, #5]
		block->id.block = block_num;
    bafa:	6863      	ldr	r3, [r4, #4]
    bafc:	9a03      	ldr	r2, [sp, #12]
    bafe:	f362 331f 	bfi	r3, r2, #12, #20
    bb02:	6063      	str	r3, [r4, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
    bb04:	b1b0      	cbz	r0, bb34 <k_mem_pool_alloc+0xa4>
    bb06:	b1ad      	cbz	r5, bb34 <k_mem_pool_alloc+0xa4>
		    (ret && ret != -ENOMEM)) {
    bb08:	f110 0f0c 	cmn.w	r0, #12
    bb0c:	d112      	bne.n	bb34 <k_mem_pool_alloc+0xa4>
    bb0e:	f04f 0320 	mov.w	r3, #32
    bb12:	f3ef 8011 	mrs	r0, BASEPRI
    bb16:	f383 8811 	msr	BASEPRI, r3
		_pend_current_thread(irq_lock(), &p->wait_q, timeout);
    bb1a:	462a      	mov	r2, r5
    bb1c:	4659      	mov	r1, fp
    bb1e:	f000 faeb 	bl	c0f8 <_pend_current_thread>

		if (timeout != K_FOREVER) {
    bb22:	1c6b      	adds	r3, r5, #1
    bb24:	d0cd      	beq.n	bac2 <k_mem_pool_alloc+0x32>
			timeout = end - _tick_get();
    bb26:	f000 fbfb 	bl	c320 <_tick_get>

			if (timeout < 0) {
    bb2a:	ebb8 0500 	subs.w	r5, r8, r0
    bb2e:	d5c8      	bpl.n	bac2 <k_mem_pool_alloc+0x32>
				break;
			}
		}
	}

	return -EAGAIN;
    bb30:	f06f 000a 	mvn.w	r0, #10
}
    bb34:	b005      	add	sp, #20
    bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s64_t end = 0;
    bb3a:	f04f 0800 	mov.w	r8, #0
    bb3e:	e7b8      	b.n	bab2 <k_mem_pool_alloc+0x22>
    bb40:	200034ac 	.word	0x200034ac
    bb44:	b6db6db7 	.word	0xb6db6db7

0000bb48 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    bb48:	b570      	push	{r4, r5, r6, lr}
    bb4a:	7804      	ldrb	r4, [r0, #0]
	int key, need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	_sys_mem_pool_block_free(&p->base, id->level, id->block);
    bb4c:	6802      	ldr	r2, [r0, #0]
    bb4e:	7841      	ldrb	r1, [r0, #1]
    bb50:	4e13      	ldr	r6, [pc, #76]	; (bba0 <k_mem_pool_free_id+0x58>)
    bb52:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    bb56:	00a4      	lsls	r4, r4, #2
    bb58:	0b12      	lsrs	r2, r2, #12
    bb5a:	f001 010f 	and.w	r1, r1, #15
    bb5e:	1930      	adds	r0, r6, r4
    bb60:	f7f4 ff42 	bl	9e8 <_sys_mem_pool_block_free>
    bb64:	f04f 0320 	mov.w	r3, #32
    bb68:	f3ef 8511 	mrs	r5, BASEPRI
    bb6c:	f383 8811 	msr	BASEPRI, r3
	/* Wake up anyone blocked on this pool and let them repeat
	 * their allocation attempts
	 */
	key = irq_lock();

	need_sched = _unpend_all(&p->wait_q);
    bb70:	f104 0014 	add.w	r0, r4, #20
    bb74:	4430      	add	r0, r6
    bb76:	f000 fb05 	bl	c184 <_unpend_all>

	if (need_sched && !_is_in_isr()) {
    bb7a:	b140      	cbz	r0, bb8e <k_mem_pool_free_id+0x46>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bb7c:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    bb80:	2b0d      	cmp	r3, #13
    bb82:	d804      	bhi.n	bb8e <k_mem_pool_free_id+0x46>
    bb84:	b133      	cbz	r3, bb94 <k_mem_pool_free_id+0x4c>
    bb86:	4b07      	ldr	r3, [pc, #28]	; (bba4 <k_mem_pool_free_id+0x5c>)
    bb88:	685b      	ldr	r3, [r3, #4]
    bb8a:	051b      	lsls	r3, r3, #20
    bb8c:	d402      	bmi.n	bb94 <k_mem_pool_free_id+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bb8e:	f385 8811 	msr	BASEPRI, r5
		_reschedule(key);
	} else {
		irq_unlock(key);
	}
}
    bb92:	bd70      	pop	{r4, r5, r6, pc}
		_reschedule(key);
    bb94:	4628      	mov	r0, r5
}
    bb96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_reschedule(key);
    bb9a:	f000 b9a7 	b.w	beec <_reschedule>
    bb9e:	bf00      	nop
    bba0:	200034ac 	.word	0x200034ac
    bba4:	e000ed00 	.word	0xe000ed00

0000bba8 <k_mem_pool_malloc>:
{
	k_mem_pool_free_id(&block->id);
}

void *k_mem_pool_malloc(struct k_mem_pool *pool, size_t size)
{
    bba8:	b507      	push	{r0, r1, r2, lr}

	/*
	 * get a block large enough to hold an initial (hidden) block
	 * descriptor, as well as the space the caller requested
	 */
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
    bbaa:	1d0a      	adds	r2, r1, #4
    bbac:	d204      	bcs.n	bbb8 <k_mem_pool_malloc+0x10>
				   &size)) {
		return NULL;
	}
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
    bbae:	2300      	movs	r3, #0
    bbb0:	4669      	mov	r1, sp
    bbb2:	f7ff ff6d 	bl	ba90 <k_mem_pool_alloc>
    bbb6:	b118      	cbz	r0, bbc0 <k_mem_pool_malloc+0x18>
		return NULL;
    bbb8:	2000      	movs	r0, #0
	/* save the block descriptor info at the start of the actual block */
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));

	/* return address of the user area part of the block to the caller */
	return (char *)block.data + sizeof(struct k_mem_block_id);
}
    bbba:	b003      	add	sp, #12
    bbbc:	f85d fb04 	ldr.w	pc, [sp], #4
	memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
    bbc0:	2204      	movs	r2, #4
    bbc2:	eb0d 0102 	add.w	r1, sp, r2
    bbc6:	9800      	ldr	r0, [sp, #0]
    bbc8:	f7f5 ff80 	bl	1acc <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
    bbcc:	9800      	ldr	r0, [sp, #0]
    bbce:	3004      	adds	r0, #4
    bbd0:	e7f3      	b.n	bbba <k_mem_pool_malloc+0x12>

0000bbd2 <k_free>:

void k_free(void *ptr)
{
	if (ptr != NULL) {
    bbd2:	b110      	cbz	r0, bbda <k_free+0x8>
		/* point to hidden block descriptor at start of block */
		ptr = (char *)ptr - sizeof(struct k_mem_block_id);

		/* return block to the heap memory pool */
		k_mem_pool_free_id(ptr);
    bbd4:	3804      	subs	r0, #4
    bbd6:	f7ff bfb7 	b.w	bb48 <k_mem_pool_free_id>
    bbda:	4770      	bx	lr

0000bbdc <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool) {
    bbdc:	4b03      	ldr	r3, [pc, #12]	; (bbec <z_thread_malloc+0x10>)
    bbde:	689b      	ldr	r3, [r3, #8]
{
    bbe0:	4601      	mov	r1, r0
	if (_current->resource_pool) {
    bbe2:	6e58      	ldr	r0, [r3, #100]	; 0x64
    bbe4:	b108      	cbz	r0, bbea <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    bbe6:	f7ff bfdf 	b.w	bba8 <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    bbea:	4770      	bx	lr
    bbec:	200011e0 	.word	0x200011e0

0000bbf0 <queue_insert>:
			       struct k_queue *);
#endif

static int queue_insert(struct k_queue *queue, void *prev, void *data,
			bool alloc)
{
    bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbf2:	4605      	mov	r5, r0
    bbf4:	460f      	mov	r7, r1
    bbf6:	4614      	mov	r4, r2
	__asm__ volatile(
    bbf8:	f04f 0220 	mov.w	r2, #32
    bbfc:	f3ef 8611 	mrs	r6, BASEPRI
    bc00:	f382 8811 	msr	BASEPRI, r2
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    bc04:	b1a3      	cbz	r3, bc30 <queue_insert+0x40>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    bc06:	2008      	movs	r0, #8
    bc08:	f7ff ffe8 	bl	bbdc <z_thread_malloc>
		if (!anode) {
    bc0c:	2800      	cmp	r0, #0
    bc0e:	d034      	beq.n	bc7a <queue_insert+0x8a>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT(!(flags & ~SYS_SFLIST_FLAGS_MASK), "flags too large");
	node->next_and_flags = flags;
    bc10:	2301      	movs	r3, #1
			return -ENOMEM;
		}
		anode->data = data;
    bc12:	6044      	str	r4, [r0, #4]
    bc14:	6003      	str	r3, [r0, #0]
    bc16:	4604      	mov	r4, r0
    bc18:	6823      	ldr	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode);
    bc1a:	b95f      	cbnz	r7, bc34 <queue_insert+0x44>
	parent->next_and_flags = cur_flags | (unative_t)child;
    bc1c:	682a      	ldr	r2, [r5, #0]
    bc1e:	f003 0303 	and.w	r3, r3, #3
    bc22:	4313      	orrs	r3, r2
    bc24:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
    bc26:	686b      	ldr	r3, [r5, #4]
	list->head = node;
    bc28:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(sflist, sfnode);
    bc2a:	b973      	cbnz	r3, bc4a <queue_insert+0x5a>
	list->tail = node;
    bc2c:	606c      	str	r4, [r5, #4]
    bc2e:	e00c      	b.n	bc4a <queue_insert+0x5a>
	node->next_and_flags = flags;
    bc30:	6023      	str	r3, [r4, #0]
    bc32:	e7f1      	b.n	bc18 <queue_insert+0x28>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bc34:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode);
    bc36:	f032 0203 	bics.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    bc3a:	f003 0303 	and.w	r3, r3, #3
Z_GENLIST_INSERT(sflist, sfnode);
    bc3e:	d114      	bne.n	bc6a <queue_insert+0x7a>
    bc40:	686a      	ldr	r2, [r5, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bc42:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(sflist, sfnode);
    bc44:	b95a      	cbnz	r2, bc5e <queue_insert+0x6e>
	list->tail = node;
    bc46:	606c      	str	r4, [r5, #4]
	list->head = node;
    bc48:	602c      	str	r4, [r5, #0]
	_handle_obj_poll_events(&queue->poll_events, state);
    bc4a:	2104      	movs	r1, #4
    bc4c:	f105 0008 	add.w	r0, r5, #8
    bc50:	f000 fee8 	bl	ca24 <_handle_obj_poll_events>

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	_reschedule(key);
    bc54:	4630      	mov	r0, r6
    bc56:	f000 f949 	bl	beec <_reschedule>
	return 0;
    bc5a:	2000      	movs	r0, #0
    bc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bc5e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bc60:	f003 0303 	and.w	r3, r3, #3
    bc64:	4323      	orrs	r3, r4
    bc66:	6013      	str	r3, [r2, #0]
    bc68:	e7e0      	b.n	bc2c <queue_insert+0x3c>
    bc6a:	4313      	orrs	r3, r2
    bc6c:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bc6e:	683a      	ldr	r2, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bc70:	f002 0203 	and.w	r2, r2, #3
    bc74:	4314      	orrs	r4, r2
    bc76:	603c      	str	r4, [r7, #0]
    bc78:	e7e7      	b.n	bc4a <queue_insert+0x5a>
			return -ENOMEM;
    bc7a:	f06f 000b 	mvn.w	r0, #11
}
    bc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bc80 <z_queue_node_peek>:
{
    bc80:	b510      	push	{r4, lr}
	if (node && sys_sfnode_flags_get(node)) {
    bc82:	4604      	mov	r4, r0
    bc84:	b130      	cbz	r0, bc94 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bc86:	6802      	ldr	r2, [r0, #0]
    bc88:	0793      	lsls	r3, r2, #30
    bc8a:	d003      	beq.n	bc94 <z_queue_node_peek+0x14>
		ret = anode->data;
    bc8c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    bc8e:	b109      	cbz	r1, bc94 <z_queue_node_peek+0x14>
			k_free(anode);
    bc90:	f7ff ff9f 	bl	bbd2 <k_free>
}
    bc94:	4620      	mov	r0, r4
    bc96:	bd10      	pop	{r4, pc}

0000bc98 <_impl_k_queue_init>:
	list->head = NULL;
    bc98:	2300      	movs	r3, #0
    bc9a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    bc9c:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
    bc9e:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    bca2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    bca4:	60c3      	str	r3, [r0, #12]
    bca6:	4770      	bx	lr

0000bca8 <k_queue_append>:
	queue_insert(queue, prev, data, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	queue_insert(queue, sys_sflist_peek_tail(&queue->data_q), data, false);
    bca8:	460a      	mov	r2, r1
    bcaa:	2300      	movs	r3, #0
    bcac:	6841      	ldr	r1, [r0, #4]
    bcae:	f7ff bf9f 	b.w	bbf0 <queue_insert>

0000bcb2 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	queue_insert(queue, NULL, data, false);
    bcb2:	2300      	movs	r3, #0
    bcb4:	460a      	mov	r2, r1
    bcb6:	4619      	mov	r1, r3
    bcb8:	f7ff bf9a 	b.w	bbf0 <queue_insert>

0000bcbc <k_queue_append_list>:
					   (void *)data);
}
#endif

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    bcbc:	b538      	push	{r3, r4, r5, lr}
    bcbe:	f04f 0320 	mov.w	r3, #32
    bcc2:	f3ef 8511 	mrs	r5, BASEPRI
    bcc6:	f383 8811 	msr	BASEPRI, r3
    bcca:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode);
    bccc:	b953      	cbnz	r3, bce4 <k_queue_append_list+0x28>
	list->head = node;
    bcce:	6001      	str	r1, [r0, #0]
	list->tail = node;
    bcd0:	6042      	str	r2, [r0, #4]
	_handle_obj_poll_events(&queue->poll_events, state);
    bcd2:	2104      	movs	r1, #4
    bcd4:	3008      	adds	r0, #8
    bcd6:	f000 fea5 	bl	ca24 <_handle_obj_poll_events>
#else
	sys_sflist_append_list(&queue->data_q, head, tail);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* !CONFIG_POLL */

	_reschedule(key);
    bcda:	4628      	mov	r0, r5
}
    bcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule(key);
    bce0:	f000 b904 	b.w	beec <_reschedule>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    bce4:	681c      	ldr	r4, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    bce6:	f004 0403 	and.w	r4, r4, #3
    bcea:	4321      	orrs	r1, r4
    bcec:	6019      	str	r1, [r3, #0]
    bcee:	e7ef      	b.n	bcd0 <k_queue_append_list+0x14>

0000bcf0 <_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcf4:	4604      	mov	r4, r0
    bcf6:	b086      	sub	sp, #24
    bcf8:	460d      	mov	r5, r1
    bcfa:	f04f 0320 	mov.w	r3, #32
    bcfe:	f3ef 8711 	mrs	r7, BASEPRI
    bd02:	f383 8811 	msr	BASEPRI, r3
    bd06:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    bd08:	b182      	cbz	r2, bd2c <_impl_k_queue_get+0x3c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bd0a:	6813      	ldr	r3, [r2, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    bd0c:	6841      	ldr	r1, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bd0e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    bd12:	428a      	cmp	r2, r1
	list->head = node;
    bd14:	6003      	str	r3, [r0, #0]
	list->tail = node;
    bd16:	bf08      	it	eq
    bd18:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    bd1a:	2101      	movs	r1, #1
    bd1c:	4610      	mov	r0, r2
    bd1e:	f7ff ffaf 	bl	bc80 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd22:	f387 8811 	msr	BASEPRI, r7
#else
	int ret = _pend_current_thread(key, &queue->wait_q, timeout);

	return ret ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    bd26:	b006      	add	sp, #24
    bd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (timeout == K_NO_WAIT) {
    bd2c:	b919      	cbnz	r1, bd36 <_impl_k_queue_get+0x46>
    bd2e:	f387 8811 	msr	BASEPRI, r7
			return NULL;
    bd32:	2000      	movs	r0, #0
    bd34:	e7f7      	b.n	bd26 <_impl_k_queue_get+0x36>
    bd36:	f387 8811 	msr	BASEPRI, r7
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    bd3a:	2104      	movs	r1, #4
    bd3c:	4603      	mov	r3, r0
    bd3e:	eb0d 0001 	add.w	r0, sp, r1
    bd42:	f000 fdd8 	bl	c8f6 <k_poll_event_init>
	if (timeout != K_FOREVER) {
    bd46:	1c6a      	adds	r2, r5, #1
    bd48:	d002      	beq.n	bd50 <_impl_k_queue_get+0x60>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    bd4a:	f000 fadf 	bl	c30c <_impl_k_uptime_get_32>
    bd4e:	4606      	mov	r6, r0
{
    bd50:	2700      	movs	r7, #0
		event.state = K_POLL_STATE_NOT_READY;
    bd52:	f89d 3011 	ldrb.w	r3, [sp, #17]
K_SYSCALL_DECLARE3(K_SYSCALL_K_POLL, k_poll, int, struct k_poll_event *, events, int, num_events, s32_t, timeout);
    bd56:	1bea      	subs	r2, r5, r7
    bd58:	f36f 1307 	bfc	r3, #4, #4
    bd5c:	2101      	movs	r1, #1
    bd5e:	a801      	add	r0, sp, #4
    bd60:	f88d 3011 	strb.w	r3, [sp, #17]
    bd64:	f000 fdda 	bl	c91c <_impl_k_poll>
		if (err && err != -EAGAIN) {
    bd68:	b108      	cbz	r0, bd6e <_impl_k_queue_get+0x7e>
    bd6a:	300b      	adds	r0, #11
    bd6c:	d1e1      	bne.n	bd32 <_impl_k_queue_get+0x42>
	__asm__ volatile(
    bd6e:	f04f 0320 	mov.w	r3, #32
    bd72:	f3ef 8811 	mrs	r8, BASEPRI
    bd76:	f383 8811 	msr	BASEPRI, r3
    bd7a:	6820      	ldr	r0, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode);
    bd7c:	b138      	cbz	r0, bd8e <_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bd7e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    bd80:	6862      	ldr	r2, [r4, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    bd82:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode);
    bd86:	4290      	cmp	r0, r2
	list->head = node;
    bd88:	6023      	str	r3, [r4, #0]
	list->tail = node;
    bd8a:	bf08      	it	eq
    bd8c:	6063      	streq	r3, [r4, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
    bd8e:	2101      	movs	r1, #1
    bd90:	f7ff ff76 	bl	bc80 <z_queue_node_peek>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd94:	f388 8811 	msr	BASEPRI, r8
		if (!val && timeout != K_FOREVER) {
    bd98:	2800      	cmp	r0, #0
    bd9a:	d1c4      	bne.n	bd26 <_impl_k_queue_get+0x36>
    bd9c:	1c6b      	adds	r3, r5, #1
    bd9e:	d0d8      	beq.n	bd52 <_impl_k_queue_get+0x62>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    bda0:	f000 fab4 	bl	c30c <_impl_k_uptime_get_32>
			elapsed = k_uptime_get_32() - start;
    bda4:	1b87      	subs	r7, r0, r6
	} while (!val && !done);
    bda6:	42bd      	cmp	r5, r7
    bda8:	dad3      	bge.n	bd52 <_impl_k_queue_get+0x62>
    bdaa:	e7c2      	b.n	bd32 <_impl_k_queue_get+0x42>

0000bdac <sys_dlist_remove>:
	node->prev->next = node->next;
    bdac:	e890 000c 	ldmia.w	r0, {r2, r3}
    bdb0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    bdb2:	6802      	ldr	r2, [r0, #0]
    bdb4:	6053      	str	r3, [r2, #4]
    bdb6:	4770      	bx	lr

0000bdb8 <_abort_timeout>:
{
    bdb8:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bdba:	6900      	ldr	r0, [r0, #16]
{
    bdbc:	b508      	push	{r3, lr}
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    bdbe:	1c43      	adds	r3, r0, #1
    bdc0:	d00e      	beq.n	bde0 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    bdc2:	4b08      	ldr	r3, [pc, #32]	; (bde4 <_abort_timeout+0x2c>)
    bdc4:	699b      	ldr	r3, [r3, #24]
    bdc6:	4299      	cmp	r1, r3
	return (node == list->tail) ? NULL : node->next;
    bdc8:	bf1f      	itttt	ne
    bdca:	680a      	ldrne	r2, [r1, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    bdcc:	6913      	ldrne	r3, [r2, #16]
    bdce:	18c0      	addne	r0, r0, r3
    bdd0:	6110      	strne	r0, [r2, #16]
	sys_dlist_remove(&timeout->node);
    bdd2:	4608      	mov	r0, r1
    bdd4:	f7ff ffea 	bl	bdac <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    bdd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bddc:	610b      	str	r3, [r1, #16]
	return 0;
    bdde:	2000      	movs	r0, #0
}
    bde0:	bd08      	pop	{r3, pc}
    bde2:	bf00      	nop
    bde4:	200011e0 	.word	0x200011e0

0000bde8 <k_spin_lock.isra.11>:
	__asm__ volatile(
    bde8:	f04f 0320 	mov.w	r3, #32
    bdec:	f3ef 8011 	mrs	r0, BASEPRI
    bdf0:	f383 8811 	msr	BASEPRI, r3
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

	return k;
}
    bdf4:	4770      	bx	lr
	...

0000bdf8 <update_cache>:
	return list->head == list;
    bdf8:	4b0d      	ldr	r3, [pc, #52]	; (be30 <update_cache+0x38>)
    bdfa:	4619      	mov	r1, r3
    bdfc:	f851 2f24 	ldr.w	r2, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be00:	428a      	cmp	r2, r1
    be02:	d000      	beq.n	be06 <update_cache+0xe>
	 * responsible for putting it back in _Swap and ISR return!),
	 * which makes this choice simple.
	 */
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);

	return th ? th : _current_cpu->idle_thread;
    be04:	b902      	cbnz	r2, be08 <update_cache+0x10>
    be06:	68da      	ldr	r2, [r3, #12]
	if (preempt_ok) {
    be08:	b970      	cbnz	r0, be28 <update_cache+0x30>
	if (!_current || !_is_thread_ready(_current)) {
    be0a:	6899      	ldr	r1, [r3, #8]
    be0c:	b161      	cbz	r1, be28 <update_cache+0x30>
	return !(_is_thread_prevented_from_running(thread) ||
    be0e:	7a48      	ldrb	r0, [r1, #9]
    be10:	06c0      	lsls	r0, r0, #27
    be12:	d109      	bne.n	be28 <update_cache+0x30>
    be14:	6a48      	ldr	r0, [r1, #36]	; 0x24
    be16:	3001      	adds	r0, #1
    be18:	d106      	bne.n	be28 <update_cache+0x30>
	if (_is_preempt(_current) || is_metairq(th)) {
    be1a:	8948      	ldrh	r0, [r1, #10]
    be1c:	287f      	cmp	r0, #127	; 0x7f
    be1e:	d903      	bls.n	be28 <update_cache+0x30>
	return thread == _idle_thread;
    be20:	4804      	ldr	r0, [pc, #16]	; (be34 <update_cache+0x3c>)
	if (_is_idle(_current)) {
    be22:	6800      	ldr	r0, [r0, #0]
    be24:	4281      	cmp	r1, r0
    be26:	d101      	bne.n	be2c <update_cache+0x34>
{
#ifndef CONFIG_SMP
	struct k_thread *th = next_up();

	if (should_preempt(th, preempt_ok)) {
		_kernel.ready_q.cache = th;
    be28:	621a      	str	r2, [r3, #32]
    be2a:	4770      	bx	lr
	} else {
		_kernel.ready_q.cache = _current;
    be2c:	6219      	str	r1, [r3, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    be2e:	4770      	bx	lr
    be30:	200011e0 	.word	0x200011e0
    be34:	0000ed9c 	.word	0x0000ed9c

0000be38 <_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
    be38:	f990 000a 	ldrsb.w	r0, [r0, #10]
    be3c:	f991 300a 	ldrsb.w	r3, [r1, #10]
}
    be40:	4298      	cmp	r0, r3
    be42:	bfac      	ite	ge
    be44:	2000      	movge	r0, #0
    be46:	2001      	movlt	r0, #1
    be48:	4770      	bx	lr
	...

0000be4c <_remove_thread_from_ready_q>:
		update_cache(0);
	}
}

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    be4c:	b510      	push	{r4, lr}
    be4e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    be50:	f7ff ffca 	bl	bde8 <k_spin_lock.isra.11>
		if (_is_thread_queued(thread)) {
    be54:	7a4b      	ldrb	r3, [r1, #9]
    be56:	065a      	lsls	r2, r3, #25
	LOCKED(&sched_lock) {
    be58:	4604      	mov	r4, r0
		if (_is_thread_queued(thread)) {
    be5a:	d50d      	bpl.n	be78 <_remove_thread_from_ready_q+0x2c>

void _priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!_is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    be5c:	4608      	mov	r0, r1
    be5e:	f7ff ffa5 	bl	bdac <sys_dlist_remove>
	thread->base.thread_state &= ~states;
    be62:	7a4b      	ldrb	r3, [r1, #9]
    be64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    be68:	724b      	strb	r3, [r1, #9]
			update_cache(thread == _current);
    be6a:	4b05      	ldr	r3, [pc, #20]	; (be80 <_remove_thread_from_ready_q+0x34>)
    be6c:	6898      	ldr	r0, [r3, #8]
    be6e:	1a43      	subs	r3, r0, r1
    be70:	4258      	negs	r0, r3
    be72:	4158      	adcs	r0, r3
    be74:	f7ff ffc0 	bl	bdf8 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    be78:	f384 8811 	msr	BASEPRI, r4
    be7c:	bd10      	pop	{r4, pc}
    be7e:	bf00      	nop
    be80:	200011e0 	.word	0x200011e0

0000be84 <_find_first_thread_to_unpend>:
{
    be84:	b508      	push	{r3, lr}
    be86:	4602      	mov	r2, r0
	LOCKED(&sched_lock) {
    be88:	f7ff ffae 	bl	bde8 <k_spin_lock.isra.11>
	return list->head == list;
    be8c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be8e:	429a      	cmp	r2, r3
    be90:	bf08      	it	eq
    be92:	2300      	moveq	r3, #0
    be94:	f380 8811 	msr	BASEPRI, r0
}
    be98:	4618      	mov	r0, r3
    be9a:	bd08      	pop	{r3, pc}

0000be9c <_unpend_thread_no_timeout>:
{
    be9c:	b510      	push	{r4, lr}
    be9e:	4601      	mov	r1, r0
	LOCKED(&sched_lock) {
    bea0:	f7ff ffa2 	bl	bde8 <k_spin_lock.isra.11>
    bea4:	4604      	mov	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    bea6:	4608      	mov	r0, r1
    bea8:	f7ff ff80 	bl	bdac <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    beac:	7a4b      	ldrb	r3, [r1, #9]
    beae:	f023 0302 	bic.w	r3, r3, #2
    beb2:	724b      	strb	r3, [r1, #9]
    beb4:	f384 8811 	msr	BASEPRI, r4
    beb8:	bd10      	pop	{r4, pc}

0000beba <_unpend_first_thread>:
{
    beba:	b510      	push	{r4, lr}
#endif
}

static inline struct k_thread *_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    bebc:	2100      	movs	r1, #0
    bebe:	f7ff ffe1 	bl	be84 <_find_first_thread_to_unpend>

	if (thread) {
    bec2:	4604      	mov	r4, r0
    bec4:	b128      	cbz	r0, bed2 <_unpend_first_thread+0x18>
		_unpend_thread_no_timeout(thread);
    bec6:	f7ff ffe9 	bl	be9c <_unpend_thread_no_timeout>
	return _abort_timeout(&thread->base.timeout);
    beca:	f104 0014 	add.w	r0, r4, #20
    bece:	f7ff ff73 	bl	bdb8 <_abort_timeout>
}
    bed2:	4620      	mov	r0, r4
    bed4:	bd10      	pop	{r4, pc}

0000bed6 <_unpend_thread>:
{
    bed6:	b510      	push	{r4, lr}
    bed8:	4604      	mov	r4, r0
	_unpend_thread_no_timeout(thread);
    beda:	f7ff ffdf 	bl	be9c <_unpend_thread_no_timeout>
    bede:	f104 0014 	add.w	r0, r4, #20
}
    bee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bee6:	f7ff bf67 	b.w	bdb8 <_abort_timeout>
	...

0000beec <_reschedule>:
    beec:	f3ef 8305 	mrs	r3, IPSR
    bef0:	2b0d      	cmp	r3, #13
    bef2:	d809      	bhi.n	bf08 <_reschedule+0x1c>
    bef4:	b11b      	cbz	r3, befe <_reschedule+0x12>
    bef6:	4b09      	ldr	r3, [pc, #36]	; (bf1c <_reschedule+0x30>)
    bef8:	685b      	ldr	r3, [r3, #4]
    befa:	051b      	lsls	r3, r3, #20
    befc:	d504      	bpl.n	bf08 <_reschedule+0x1c>
	if (_get_next_ready_thread() != _current) {
    befe:	4b08      	ldr	r3, [pc, #32]	; (bf20 <_reschedule+0x34>)
    bf00:	689a      	ldr	r2, [r3, #8]
    bf02:	6a1b      	ldr	r3, [r3, #32]
    bf04:	429a      	cmp	r2, r3
    bf06:	d103      	bne.n	bf10 <_reschedule+0x24>
    bf08:	f380 8811 	msr	BASEPRI, r0
}
    bf0c:	2000      	movs	r0, #0
    bf0e:	4770      	bx	lr
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    bf10:	4b04      	ldr	r3, [pc, #16]	; (bf24 <_reschedule+0x38>)
    bf12:	2200      	movs	r2, #0
    bf14:	601a      	str	r2, [r3, #0]
    bf16:	f7f5 ba67 	b.w	13e8 <__swap>
    bf1a:	bf00      	nop
    bf1c:	e000ed00 	.word	0xe000ed00
    bf20:	200011e0 	.word	0x200011e0
    bf24:	20001214 	.word	0x20001214

0000bf28 <k_sched_unlock>:
{
    bf28:	b510      	push	{r4, lr}
	LOCKED(&sched_lock) {
    bf2a:	f7ff ff5d 	bl	bde8 <k_spin_lock.isra.11>
		++_current->base.sched_locked;
    bf2e:	4b0a      	ldr	r3, [pc, #40]	; (bf58 <k_sched_unlock+0x30>)
    bf30:	689a      	ldr	r2, [r3, #8]
    bf32:	7ad3      	ldrb	r3, [r2, #11]
    bf34:	3301      	adds	r3, #1
	LOCKED(&sched_lock) {
    bf36:	4604      	mov	r4, r0
		++_current->base.sched_locked;
    bf38:	72d3      	strb	r3, [r2, #11]
		update_cache(1);
    bf3a:	2001      	movs	r0, #1
    bf3c:	f7ff ff5c 	bl	bdf8 <update_cache>
    bf40:	f384 8811 	msr	BASEPRI, r4
	__asm__ volatile(
    bf44:	f04f 0320 	mov.w	r3, #32
    bf48:	f3ef 8011 	mrs	r0, BASEPRI
    bf4c:	f383 8811 	msr	BASEPRI, r3
}
    bf50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(irq_lock());
    bf54:	f7ff bfca 	b.w	beec <_reschedule>
    bf58:	200011e0 	.word	0x200011e0

0000bf5c <_priq_dumb_add>:
{
    bf5c:	b510      	push	{r4, lr}
	return list->head == list;
    bf5e:	6803      	ldr	r3, [r0, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bf60:	4298      	cmp	r0, r3
    bf62:	bf08      	it	eq
    bf64:	2300      	moveq	r3, #0
    bf66:	b193      	cbz	r3, bf8e <_priq_dumb_add+0x32>
	if (t1->base.prio < t2->base.prio) {
    bf68:	f991 400a 	ldrsb.w	r4, [r1, #10]
    bf6c:	f993 200a 	ldrsb.w	r2, [r3, #10]
    bf70:	4294      	cmp	r4, r2
    bf72:	da06      	bge.n	bf82 <_priq_dumb_add+0x26>
		node->prev = insert_point->prev;
    bf74:	685a      	ldr	r2, [r3, #4]
    bf76:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    bf78:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    bf7a:	685a      	ldr	r2, [r3, #4]
    bf7c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    bf7e:	6059      	str	r1, [r3, #4]
    bf80:	bd10      	pop	{r4, pc}
	return (node == list->tail) ? NULL : node->next;
    bf82:	6842      	ldr	r2, [r0, #4]
    bf84:	4293      	cmp	r3, r2
    bf86:	d002      	beq.n	bf8e <_priq_dumb_add+0x32>
    bf88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bf8a:	2b00      	cmp	r3, #0
    bf8c:	d1eb      	bne.n	bf66 <_priq_dumb_add+0xa>
	node->next = list;
    bf8e:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    bf90:	6843      	ldr	r3, [r0, #4]
    bf92:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bf94:	6843      	ldr	r3, [r0, #4]
    bf96:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bf98:	6041      	str	r1, [r0, #4]
    bf9a:	bd10      	pop	{r4, pc}

0000bf9c <_add_thread_to_ready_q>:
{
    bf9c:	b538      	push	{r3, r4, r5, lr}
    bf9e:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    bfa0:	f7ff ff22 	bl	bde8 <k_spin_lock.isra.11>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    bfa4:	4621      	mov	r1, r4
	LOCKED(&sched_lock) {
    bfa6:	4605      	mov	r5, r0
		_priq_run_add(&_kernel.ready_q.runq, thread);
    bfa8:	4806      	ldr	r0, [pc, #24]	; (bfc4 <_add_thread_to_ready_q+0x28>)
    bfaa:	f7ff ffd7 	bl	bf5c <_priq_dumb_add>
	thread->base.thread_state |= states;
    bfae:	7a63      	ldrb	r3, [r4, #9]
    bfb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfb4:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    bfb6:	2000      	movs	r0, #0
    bfb8:	f7ff ff1e 	bl	bdf8 <update_cache>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bfbc:	f385 8811 	msr	BASEPRI, r5
    bfc0:	bd38      	pop	{r3, r4, r5, pc}
    bfc2:	bf00      	nop
    bfc4:	20001204 	.word	0x20001204

0000bfc8 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    bfc8:	7a42      	ldrb	r2, [r0, #9]
    bfca:	06d2      	lsls	r2, r2, #27
    bfcc:	d104      	bne.n	bfd8 <_ready_thread+0x10>
    bfce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bfd0:	3301      	adds	r3, #1
    bfd2:	d101      	bne.n	bfd8 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    bfd4:	f7ff bfe2 	b.w	bf9c <_add_thread_to_ready_q>
    bfd8:	4770      	bx	lr
	...

0000bfdc <_add_timeout>:
{
    bfdc:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    bfde:	610b      	str	r3, [r1, #16]
{
    bfe0:	4604      	mov	r4, r0
    bfe2:	461d      	mov	r5, r3
	timeout->thread = thread;
    bfe4:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    bfe6:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    bfe8:	bb03      	cbnz	r3, c02c <_add_timeout+0x50>
	__asm__ volatile(
    bfea:	f04f 0320 	mov.w	r3, #32
    bfee:	f3ef 8611 	mrs	r6, BASEPRI
    bff2:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    bff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bffa:	610b      	str	r3, [r1, #16]
	if (thread) {
    bffc:	b170      	cbz	r0, c01c <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    bffe:	68cb      	ldr	r3, [r1, #12]
    c000:	b113      	cbz	r3, c008 <_add_timeout+0x2c>
		_unpend_thread_no_timeout(thread);
    c002:	f7ff ff4b 	bl	be9c <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    c006:	6225      	str	r5, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c008:	7a63      	ldrb	r3, [r4, #9]
    c00a:	f023 0304 	bic.w	r3, r3, #4
    c00e:	7263      	strb	r3, [r4, #9]
		_ready_thread(thread);
    c010:	4620      	mov	r0, r4
    c012:	f7ff ffd9 	bl	bfc8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c016:	f386 8811 	msr	BASEPRI, r6
    c01a:	bd70      	pop	{r4, r5, r6, pc}
    c01c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
    c020:	694b      	ldr	r3, [r1, #20]
    c022:	b32b      	cbz	r3, c070 <_add_timeout+0x94>
			timeout->func(timeout);
    c024:	4608      	mov	r0, r1
}
    c026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    c02a:	4718      	bx	r3
	return list->head == list;
    c02c:	4a11      	ldr	r2, [pc, #68]	; (c074 <_add_timeout+0x98>)
    c02e:	4610      	mov	r0, r2
    c030:	f850 3f14 	ldr.w	r3, [r0, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c034:	4283      	cmp	r3, r0
    c036:	d10c      	bne.n	c052 <_add_timeout+0x76>
	node->next = list;
    c038:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    c03a:	6993      	ldr	r3, [r2, #24]
    c03c:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    c03e:	6993      	ldr	r3, [r2, #24]
    c040:	6019      	str	r1, [r3, #0]
	list->tail = node;
    c042:	6191      	str	r1, [r2, #24]
    c044:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    c046:	1b64      	subs	r4, r4, r5
    c048:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    c04a:	6994      	ldr	r4, [r2, #24]
    c04c:	42a3      	cmp	r3, r4
    c04e:	d0f3      	beq.n	c038 <_add_timeout+0x5c>
    c050:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c052:	2b00      	cmp	r3, #0
    c054:	d0f0      	beq.n	c038 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c056:	690c      	ldr	r4, [r1, #16]
    c058:	691d      	ldr	r5, [r3, #16]
    c05a:	42ac      	cmp	r4, r5
    c05c:	dcf3      	bgt.n	c046 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    c05e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c060:	1b2c      	subs	r4, r5, r4
    c062:	611c      	str	r4, [r3, #16]
    c064:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    c066:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    c068:	685a      	ldr	r2, [r3, #4]
    c06a:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    c06c:	6059      	str	r1, [r3, #4]
    c06e:	bd70      	pop	{r4, r5, r6, pc}
    c070:	bd70      	pop	{r4, r5, r6, pc}
    c072:	bf00      	nop
    c074:	200011e0 	.word	0x200011e0

0000c078 <_move_thread_to_end_of_prio_q>:
{
    c078:	b538      	push	{r3, r4, r5, lr}
    c07a:	4604      	mov	r4, r0
	LOCKED(&sched_lock) {
    c07c:	f7ff feb4 	bl	bde8 <k_spin_lock.isra.11>
    c080:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    c082:	4620      	mov	r0, r4
    c084:	f7ff fe92 	bl	bdac <sys_dlist_remove>
		_priq_run_add(&_kernel.ready_q.runq, thread);
    c088:	4621      	mov	r1, r4
    c08a:	4806      	ldr	r0, [pc, #24]	; (c0a4 <_move_thread_to_end_of_prio_q+0x2c>)
    c08c:	f7ff ff66 	bl	bf5c <_priq_dumb_add>
	thread->base.thread_state |= states;
    c090:	7a63      	ldrb	r3, [r4, #9]
    c092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c096:	7263      	strb	r3, [r4, #9]
		update_cache(0);
    c098:	2000      	movs	r0, #0
    c09a:	f7ff fead 	bl	bdf8 <update_cache>
    c09e:	f385 8811 	msr	BASEPRI, r5
    c0a2:	bd38      	pop	{r3, r4, r5, pc}
    c0a4:	20001204 	.word	0x20001204

0000c0a8 <pend>:
{
    c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0aa:	4605      	mov	r5, r0
    c0ac:	4614      	mov	r4, r2
    c0ae:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(thread);
    c0b0:	f7ff fecc 	bl	be4c <_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    c0b4:	7a6b      	ldrb	r3, [r5, #9]
    c0b6:	f043 0302 	orr.w	r3, r3, #2
    c0ba:	726b      	strb	r3, [r5, #9]
	if (timeout != K_FOREVER) {
    c0bc:	1c63      	adds	r3, r4, #1
    c0be:	d012      	beq.n	c0e6 <pend+0x3e>
	__asm__ volatile(
    c0c0:	f04f 0320 	mov.w	r3, #32
    c0c4:	f3ef 8711 	mrs	r7, BASEPRI
    c0c8:	f383 8811 	msr	BASEPRI, r3
    c0cc:	230a      	movs	r3, #10
    c0ce:	3409      	adds	r4, #9
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c0d0:	4632      	mov	r2, r6
    c0d2:	fbb4 f3f3 	udiv	r3, r4, r3
    c0d6:	f105 0114 	add.w	r1, r5, #20
    c0da:	3301      	adds	r3, #1
    c0dc:	4628      	mov	r0, r5
    c0de:	f7ff ff7d 	bl	bfdc <_add_timeout>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c0e2:	f387 8811 	msr	BASEPRI, r7
	if (wait_q) {
    c0e6:	b12e      	cbz	r6, c0f4 <pend+0x4c>
		_priq_wait_add(&wait_q->waitq, thread);
    c0e8:	4629      	mov	r1, r5
    c0ea:	4630      	mov	r0, r6
}
    c0ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		_priq_wait_add(&wait_q->waitq, thread);
    c0f0:	f7ff bf34 	b.w	bf5c <_priq_dumb_add>
    c0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c0f8 <_pend_current_thread>:
{
    c0f8:	b510      	push	{r4, lr}
	pend(_current, wait_q, timeout);
    c0fa:	4b06      	ldr	r3, [pc, #24]	; (c114 <_pend_current_thread+0x1c>)
{
    c0fc:	4604      	mov	r4, r0
	pend(_current, wait_q, timeout);
    c0fe:	6898      	ldr	r0, [r3, #8]
    c100:	f7ff ffd2 	bl	c0a8 <pend>
	_time_slice_elapsed = 0;
    c104:	4b04      	ldr	r3, [pc, #16]	; (c118 <_pend_current_thread+0x20>)
    c106:	2200      	movs	r2, #0
    c108:	4620      	mov	r0, r4
}
    c10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    c10e:	601a      	str	r2, [r3, #0]
    c110:	f7f5 b96a 	b.w	13e8 <__swap>
    c114:	200011e0 	.word	0x200011e0
    c118:	20001214 	.word	0x20001214

0000c11c <_is_thread_time_slicing>:
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    c11c:	4b13      	ldr	r3, [pc, #76]	; (c16c <_is_thread_time_slicing+0x50>)
    c11e:	681b      	ldr	r3, [r3, #0]
    c120:	2b00      	cmp	r3, #0
{
    c122:	b510      	push	{r4, lr}
    c124:	4602      	mov	r2, r0
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    c126:	dd1f      	ble.n	c168 <_is_thread_time_slicing+0x4c>
    c128:	8943      	ldrh	r3, [r0, #10]
    c12a:	2b7f      	cmp	r3, #127	; 0x7f
    c12c:	d81c      	bhi.n	c168 <_is_thread_time_slicing+0x4c>
	    _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c12e:	4b10      	ldr	r3, [pc, #64]	; (c170 <_is_thread_time_slicing+0x54>)
    c130:	f990 100a 	ldrsb.w	r1, [r0, #10]
	if (_time_slice_duration <= 0 || !_is_preempt(thread) ||
    c134:	681b      	ldr	r3, [r3, #0]
    c136:	4299      	cmp	r1, r3
    c138:	db16      	blt.n	c168 <_is_thread_time_slicing+0x4c>
	LOCKED(&sched_lock) {
    c13a:	f7ff fe55 	bl	bde8 <k_spin_lock.isra.11>
	return list->head == list;
    c13e:	490d      	ldr	r1, [pc, #52]	; (c174 <_is_thread_time_slicing+0x58>)
    c140:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c144:	428b      	cmp	r3, r1
    c146:	4604      	mov	r4, r0
    c148:	d00a      	beq.n	c160 <_is_thread_time_slicing+0x44>
		if (next) {
    c14a:	b15b      	cbz	r3, c164 <_is_thread_time_slicing+0x48>
			ret = thread->base.prio == next->base.prio;
    c14c:	f992 000a 	ldrsb.w	r0, [r2, #10]
    c150:	f993 300a 	ldrsb.w	r3, [r3, #10]
    c154:	1ac3      	subs	r3, r0, r3
    c156:	4258      	negs	r0, r3
    c158:	4158      	adcs	r0, r3
    c15a:	f384 8811 	msr	BASEPRI, r4
	return ret;
    c15e:	bd10      	pop	{r4, pc}
    c160:	2000      	movs	r0, #0
    c162:	e7fa      	b.n	c15a <_is_thread_time_slicing+0x3e>
    c164:	4618      	mov	r0, r3
    c166:	e7f8      	b.n	c15a <_is_thread_time_slicing+0x3e>
		return 0;
    c168:	2000      	movs	r0, #0
}
    c16a:	bd10      	pop	{r4, pc}
    c16c:	200010f4 	.word	0x200010f4
    c170:	200010f8 	.word	0x200010f8
    c174:	200011e0 	.word	0x200011e0

0000c178 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c178:	4b01      	ldr	r3, [pc, #4]	; (c180 <_update_time_slice_before_swap+0x8>)
    c17a:	2200      	movs	r2, #0
    c17c:	601a      	str	r2, [r3, #0]
    c17e:	4770      	bx	lr
    c180:	20001214 	.word	0x20001214

0000c184 <_unpend_all>:
}
#endif /* CONFIG_TIMESLICING */

int _unpend_all(_wait_q_t *waitq)
{
    c184:	b538      	push	{r3, r4, r5, lr}
    c186:	4605      	mov	r5, r0
	int need_sched = 0;
    c188:	2000      	movs	r0, #0
	return list->head == list;
    c18a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c18c:	42a5      	cmp	r5, r4
    c18e:	d000      	beq.n	c192 <_unpend_all+0xe>
	struct k_thread *th;

	while ((th = _waitq_head(waitq))) {
    c190:	b904      	cbnz	r4, c194 <_unpend_all+0x10>
		_ready_thread(th);
		need_sched = 1;
	}

	return need_sched;
}
    c192:	bd38      	pop	{r3, r4, r5, pc}
		_unpend_thread(th);
    c194:	4620      	mov	r0, r4
    c196:	f7ff fe9e 	bl	bed6 <_unpend_thread>
		_ready_thread(th);
    c19a:	4620      	mov	r0, r4
    c19c:	f7ff ff14 	bl	bfc8 <_ready_thread>
		need_sched = 1;
    c1a0:	2001      	movs	r0, #1
    c1a2:	e7f2      	b.n	c18a <_unpend_all+0x6>

0000c1a4 <_sched_init>:
	list->head = (sys_dnode_t *)list;
    c1a4:	4b02      	ldr	r3, [pc, #8]	; (c1b0 <_sched_init+0xc>)
    c1a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
    c1aa:	625a      	str	r2, [r3, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    c1ac:	629a      	str	r2, [r3, #40]	; 0x28
    c1ae:	4770      	bx	lr
    c1b0:	200011e0 	.word	0x200011e0

0000c1b4 <_impl_k_yield>:
}
#endif
#endif

void _impl_k_yield(void)
{
    c1b4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(!_is_in_isr(), "");

	if (!_is_idle(_current)) {
    c1b6:	4c14      	ldr	r4, [pc, #80]	; (c208 <_impl_k_yield+0x54>)
    c1b8:	4b14      	ldr	r3, [pc, #80]	; (c20c <_impl_k_yield+0x58>)
    c1ba:	68a2      	ldr	r2, [r4, #8]
    c1bc:	681b      	ldr	r3, [r3, #0]
    c1be:	429a      	cmp	r2, r3
    c1c0:	d00f      	beq.n	c1e2 <_impl_k_yield+0x2e>
		LOCKED(&sched_lock) {
    c1c2:	f7ff fe11 	bl	bde8 <k_spin_lock.isra.11>
    c1c6:	4605      	mov	r5, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
    c1c8:	68a0      	ldr	r0, [r4, #8]
    c1ca:	f7ff fdef 	bl	bdac <sys_dlist_remove>
			_priq_run_remove(&_kernel.ready_q.runq, _current);
			_priq_run_add(&_kernel.ready_q.runq, _current);
    c1ce:	68a1      	ldr	r1, [r4, #8]
    c1d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c1d4:	f7ff fec2 	bl	bf5c <_priq_dumb_add>
			update_cache(1);
    c1d8:	2001      	movs	r0, #1
    c1da:	f7ff fe0d 	bl	bdf8 <update_cache>
    c1de:	f385 8811 	msr	BASEPRI, r5
	}

#ifdef CONFIG_SMP
	_Swap(irq_lock());
#else
	if (_get_next_ready_thread() != _current) {
    c1e2:	6a22      	ldr	r2, [r4, #32]
    c1e4:	68a3      	ldr	r3, [r4, #8]
    c1e6:	429a      	cmp	r2, r3
    c1e8:	d00c      	beq.n	c204 <_impl_k_yield+0x50>
	__asm__ volatile(
    c1ea:	f04f 0320 	mov.w	r3, #32
    c1ee:	f3ef 8011 	mrs	r0, BASEPRI
    c1f2:	f383 8811 	msr	BASEPRI, r3
	_time_slice_elapsed = 0;
    c1f6:	4b06      	ldr	r3, [pc, #24]	; (c210 <_impl_k_yield+0x5c>)
    c1f8:	2200      	movs	r2, #0
    c1fa:	601a      	str	r2, [r3, #0]
		_Swap(irq_lock());
	}
#endif
}
    c1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c200:	f7f5 b8f2 	b.w	13e8 <__swap>
    c204:	bd38      	pop	{r3, r4, r5, pc}
    c206:	bf00      	nop
    c208:	200011e0 	.word	0x200011e0
    c20c:	0000ed9c 	.word	0x0000ed9c
    c210:	20001214 	.word	0x20001214

0000c214 <_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

void _impl_k_sleep(s32_t duration)
{
    c214:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    c216:	b918      	cbnz	r0, c220 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c218:	f7ff ffcc 	bl	c1b4 <_impl_k_yield>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
    c21c:	b003      	add	sp, #12
    c21e:	bd30      	pop	{r4, r5, pc}
    c220:	230a      	movs	r3, #10
    c222:	3009      	adds	r0, #9
    c224:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    c228:	3001      	adds	r0, #1
    c22a:	9001      	str	r0, [sp, #4]
    c22c:	f04f 0320 	mov.w	r3, #32
    c230:	f3ef 8511 	mrs	r5, BASEPRI
    c234:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    c238:	4c08      	ldr	r4, [pc, #32]	; (c25c <_impl_k_sleep+0x48>)
    c23a:	68a0      	ldr	r0, [r4, #8]
    c23c:	f7ff fe06 	bl	be4c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    c240:	68a0      	ldr	r0, [r4, #8]
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	f100 0114 	add.w	r1, r0, #20
    c248:	2200      	movs	r2, #0
    c24a:	f7ff fec7 	bl	bfdc <_add_timeout>
	_time_slice_elapsed = 0;
    c24e:	4b04      	ldr	r3, [pc, #16]	; (c260 <_impl_k_sleep+0x4c>)
    c250:	2200      	movs	r2, #0
    c252:	4628      	mov	r0, r5
    c254:	601a      	str	r2, [r3, #0]
    c256:	f7f5 f8c7 	bl	13e8 <__swap>
    c25a:	e7df      	b.n	c21c <_impl_k_sleep+0x8>
    c25c:	200011e0 	.word	0x200011e0
    c260:	20001214 	.word	0x20001214

0000c264 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
    c264:	4b01      	ldr	r3, [pc, #4]	; (c26c <_impl_k_current_get+0x8>)
    c266:	6898      	ldr	r0, [r3, #8]
    c268:	4770      	bx	lr
    c26a:	bf00      	nop
    c26c:	200011e0 	.word	0x200011e0

0000c270 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c270:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    c274:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c276:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c278:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c27a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c27c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c27e:	6143      	str	r3, [r0, #20]
    c280:	4770      	bx	lr

0000c282 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c282:	b570      	push	{r4, r5, r6, lr}
    c284:	4604      	mov	r4, r0
    c286:	f04f 0320 	mov.w	r3, #32
    c28a:	f3ef 8611 	mrs	r6, BASEPRI
    c28e:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c292:	f7ff fe12 	bl	beba <_unpend_first_thread>
	if (thread) {
    c296:	4605      	mov	r5, r0
    c298:	b160      	cbz	r0, c2b4 <_impl_k_sem_give+0x32>
	return !(_is_thread_prevented_from_running(thread) ||
    c29a:	7a43      	ldrb	r3, [r0, #9]
    c29c:	06db      	lsls	r3, r3, #27
    c29e:	d102      	bne.n	c2a6 <_impl_k_sem_give+0x24>
    c2a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c2a2:	3301      	adds	r3, #1
    c2a4:	d012      	beq.n	c2cc <_impl_k_sem_give+0x4a>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c2a6:	2300      	movs	r3, #0
    c2a8:	66eb      	str	r3, [r5, #108]	; 0x6c
	unsigned int key = irq_lock();

	do_sem_give(sem);
	_reschedule(key);
    c2aa:	4630      	mov	r0, r6
}
    c2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_reschedule(key);
    c2b0:	f7ff be1c 	b.w	beec <_reschedule>
	sem->count += (sem->count != sem->limit);
    c2b4:	68a3      	ldr	r3, [r4, #8]
    c2b6:	68e2      	ldr	r2, [r4, #12]
    c2b8:	429a      	cmp	r2, r3
    c2ba:	bf18      	it	ne
    c2bc:	3301      	addne	r3, #1
    c2be:	60a3      	str	r3, [r4, #8]
	_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    c2c0:	2102      	movs	r1, #2
    c2c2:	f104 0010 	add.w	r0, r4, #16
    c2c6:	f000 fbad 	bl	ca24 <_handle_obj_poll_events>
    c2ca:	e7ee      	b.n	c2aa <_impl_k_sem_give+0x28>
		_add_thread_to_ready_q(thread);
    c2cc:	f7ff fe66 	bl	bf9c <_add_thread_to_ready_q>
    c2d0:	e7e9      	b.n	c2a6 <_impl_k_sem_give+0x24>

0000c2d2 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c2d2:	b410      	push	{r4}
    c2d4:	460a      	mov	r2, r1
    c2d6:	4604      	mov	r4, r0
    c2d8:	f04f 0320 	mov.w	r3, #32
    c2dc:	f3ef 8011 	mrs	r0, BASEPRI
    c2e0:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c2e4:	68a3      	ldr	r3, [r4, #8]
    c2e6:	b133      	cbz	r3, c2f6 <_impl_k_sem_take+0x24>
		sem->count--;
    c2e8:	3b01      	subs	r3, #1
    c2ea:	60a3      	str	r3, [r4, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c2ec:	f380 8811 	msr	BASEPRI, r0
		irq_unlock(key);
		return 0;
    c2f0:	2000      	movs	r0, #0
		irq_unlock(key);
		return -EBUSY;
	}

	return _pend_current_thread(key, &sem->wait_q, timeout);
}
    c2f2:	bc10      	pop	{r4}
    c2f4:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    c2f6:	b921      	cbnz	r1, c302 <_impl_k_sem_take+0x30>
    c2f8:	f380 8811 	msr	BASEPRI, r0
		return -EBUSY;
    c2fc:	f06f 000f 	mvn.w	r0, #15
    c300:	e7f7      	b.n	c2f2 <_impl_k_sem_take+0x20>
	return _pend_current_thread(key, &sem->wait_q, timeout);
    c302:	4621      	mov	r1, r4
}
    c304:	bc10      	pop	{r4}
	return _pend_current_thread(key, &sem->wait_q, timeout);
    c306:	f7ff bef7 	b.w	c0f8 <_pend_current_thread>
	...

0000c30c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c30c:	4b03      	ldr	r3, [pc, #12]	; (c31c <_impl_k_uptime_get_32+0x10>)
    c30e:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    c312:	230a      	movs	r3, #10
    c314:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c318:	4770      	bx	lr
    c31a:	bf00      	nop
    c31c:	20001218 	.word	0x20001218

0000c320 <_tick_get>:
	__asm__ volatile(
    c320:	f04f 0220 	mov.w	r2, #32
    c324:	f3ef 8311 	mrs	r3, BASEPRI
    c328:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    c32c:	4a02      	ldr	r2, [pc, #8]	; (c338 <_tick_get+0x18>)
    c32e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c332:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    c336:	4770      	bx	lr
    c338:	20001218 	.word	0x20001218

0000c33c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c340:	4607      	mov	r7, r0
    c342:	b085      	sub	sp, #20
	__asm__ volatile(
    c344:	f04f 0320 	mov.w	r3, #32
    c348:	f3ef 8011 	mrs	r0, BASEPRI
    c34c:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c350:	4961      	ldr	r1, [pc, #388]	; (c4d8 <_nano_sys_clock_tick_announce+0x19c>)
    c352:	e9d1 4500 	ldrd	r4, r5, [r1]
    c356:	19e2      	adds	r2, r4, r7
    c358:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    c35c:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c360:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    c364:	ae02      	add	r6, sp, #8
    c366:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    c368:	9603      	str	r6, [sp, #12]
	__asm__ volatile(
    c36a:	f04f 0320 	mov.w	r3, #32
    c36e:	f3ef 8011 	mrs	r0, BASEPRI
    c372:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c376:	4c59      	ldr	r4, [pc, #356]	; (c4dc <_nano_sys_clock_tick_announce+0x1a0>)
    c378:	4621      	mov	r1, r4
    c37a:	4602      	mov	r2, r0
    c37c:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c380:	428b      	cmp	r3, r1
    c382:	d000      	beq.n	c386 <_nano_sys_clock_tick_announce+0x4a>
	if (!next) {
    c384:	b9fb      	cbnz	r3, c3c6 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c386:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    c38a:	68a0      	ldr	r0, [r4, #8]
    c38c:	f7ff fec6 	bl	c11c <_is_thread_time_slicing>
    c390:	b1b0      	cbz	r0, c3c0 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c392:	4a53      	ldr	r2, [pc, #332]	; (c4e0 <_nano_sys_clock_tick_announce+0x1a4>)
    c394:	6811      	ldr	r1, [r2, #0]
    c396:	230a      	movs	r3, #10
    c398:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    c39c:	4b51      	ldr	r3, [pc, #324]	; (c4e4 <_nano_sys_clock_tick_announce+0x1a8>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c39e:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c3a0:	681b      	ldr	r3, [r3, #0]
    c3a2:	429f      	cmp	r7, r3
    c3a4:	db0c      	blt.n	c3c0 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
    c3a6:	2300      	movs	r3, #0
    c3a8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c3aa:	f04f 0320 	mov.w	r3, #32
    c3ae:	f3ef 8511 	mrs	r5, BASEPRI
    c3b2:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    c3b6:	68a0      	ldr	r0, [r4, #8]
    c3b8:	f7ff fe5e 	bl	c078 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3bc:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c3c0:	b005      	add	sp, #20
    c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    c3c6:	4d48      	ldr	r5, [pc, #288]	; (c4e8 <_nano_sys_clock_tick_announce+0x1ac>)
    c3c8:	9501      	str	r5, [sp, #4]
    c3ca:	2101      	movs	r1, #1
    c3cc:	6029      	str	r1, [r5, #0]
			timeout->delta_ticks_from_prev = 0;
    c3ce:	f04f 0e00 	mov.w	lr, #0
	_handling_timeouts = 1;
    c3d2:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = _EXPIRED;
    c3d4:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    c3d8:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c3da:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    c3dc:	bfaa      	itet	ge
    c3de:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    c3e2:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    c3e6:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    c3ea:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c3ec:	69a0      	ldr	r0, [r4, #24]
		if (timeout->delta_ticks_from_prev == 0) {
    c3ee:	691d      	ldr	r5, [r3, #16]
    c3f0:	4298      	cmp	r0, r3
    c3f2:	bf14      	ite	ne
    c3f4:	6818      	ldrne	r0, [r3, #0]
    c3f6:	2000      	moveq	r0, #0
    c3f8:	b9d5      	cbnz	r5, c430 <_nano_sys_clock_tick_announce+0xf4>
	node->prev->next = node->next;
    c3fa:	e893 0220 	ldmia.w	r3, {r5, r9}
    c3fe:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    c402:	681d      	ldr	r5, [r3, #0]
    c404:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    c408:	9d02      	ldr	r5, [sp, #8]
	node->prev = list;
    c40a:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    c40e:	9d02      	ldr	r5, [sp, #8]
	list->head = node;
    c410:	9302      	str	r3, [sp, #8]
	list->head->prev = node;
    c412:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c414:	f8c3 c010 	str.w	ip, [r3, #16]
    c418:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c41c:	f04f 0320 	mov.w	r3, #32
    c420:	f3ef 8211 	mrs	r2, BASEPRI
    c424:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    c428:	4603      	mov	r3, r0
    c42a:	2800      	cmp	r0, #0
    c42c:	d1d4      	bne.n	c3d8 <_nano_sys_clock_tick_announce+0x9c>
    c42e:	e001      	b.n	c434 <_nano_sys_clock_tick_announce+0xf8>
		} else if (ticks <= 0) {
    c430:	2900      	cmp	r1, #0
    c432:	dcf1      	bgt.n	c418 <_nano_sys_clock_tick_announce+0xdc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c434:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    c438:	9802      	ldr	r0, [sp, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c43a:	42b0      	cmp	r0, r6
    c43c:	d103      	bne.n	c446 <_nano_sys_clock_tick_announce+0x10a>
	_handling_timeouts = 0;
    c43e:	9a01      	ldr	r2, [sp, #4]
    c440:	2300      	movs	r3, #0
    c442:	6013      	str	r3, [r2, #0]
    c444:	e7a1      	b.n	c38a <_nano_sys_clock_tick_announce+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c446:	2800      	cmp	r0, #0
    c448:	d0f9      	beq.n	c43e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
    c44a:	9b03      	ldr	r3, [sp, #12]
    c44c:	4298      	cmp	r0, r3
    c44e:	d102      	bne.n	c456 <_nano_sys_clock_tick_announce+0x11a>
    c450:	f04f 0b00 	mov.w	fp, #0
    c454:	e001      	b.n	c45a <_nano_sys_clock_tick_announce+0x11e>
    c456:	f8d0 b000 	ldr.w	fp, [r0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c45a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    c45e:	f04f 0a00 	mov.w	sl, #0
	node->prev->next = node->next;
    c462:	e890 000c 	ldmia.w	r0, {r2, r3}
    c466:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c468:	6802      	ldr	r2, [r0, #0]
    c46a:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    c46c:	6886      	ldr	r6, [r0, #8]
	__asm__ volatile(
    c46e:	f04f 0320 	mov.w	r3, #32
    c472:	f3ef 8811 	mrs	r8, BASEPRI
    c476:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
    c47a:	f8c0 9010 	str.w	r9, [r0, #16]
	if (thread) {
    c47e:	b1d6      	cbz	r6, c4b6 <_nano_sys_clock_tick_announce+0x17a>
	if (timeout_obj->wait_q) {
    c480:	68c3      	ldr	r3, [r0, #12]
    c482:	b123      	cbz	r3, c48e <_nano_sys_clock_tick_announce+0x152>
		_unpend_thread_no_timeout(thread);
    c484:	4630      	mov	r0, r6
    c486:	f7ff fd09 	bl	be9c <_unpend_thread_no_timeout>
		thread->base.timeout.wait_q = NULL;
    c48a:	f8c6 a020 	str.w	sl, [r6, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c48e:	7a73      	ldrb	r3, [r6, #9]
    c490:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c494:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c498:	7272      	strb	r2, [r6, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c49a:	d102      	bne.n	c4a2 <_nano_sys_clock_tick_announce+0x166>
    c49c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c49e:	3301      	adds	r3, #1
    c4a0:	d015      	beq.n	c4ce <_nano_sys_clock_tick_announce+0x192>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c4a2:	f388 8811 	msr	BASEPRI, r8
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c4a6:	f1bb 0f00 	cmp.w	fp, #0
    c4aa:	d0c8      	beq.n	c43e <_nano_sys_clock_tick_announce+0x102>
	return (node == list->tail) ? NULL : node->next;
    c4ac:	9b03      	ldr	r3, [sp, #12]
    c4ae:	455b      	cmp	r3, fp
    c4b0:	d108      	bne.n	c4c4 <_nano_sys_clock_tick_announce+0x188>
    c4b2:	2300      	movs	r3, #0
    c4b4:	e008      	b.n	c4c8 <_nano_sys_clock_tick_announce+0x18c>
    c4b6:	f388 8811 	msr	BASEPRI, r8
		if (timeout->func) {
    c4ba:	6943      	ldr	r3, [r0, #20]
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d0f2      	beq.n	c4a6 <_nano_sys_clock_tick_announce+0x16a>
			timeout->func(timeout);
    c4c0:	4798      	blx	r3
    c4c2:	e7f0      	b.n	c4a6 <_nano_sys_clock_tick_announce+0x16a>
    c4c4:	f8db 3000 	ldr.w	r3, [fp]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c4c8:	4658      	mov	r0, fp
    c4ca:	469b      	mov	fp, r3
    c4cc:	e7c9      	b.n	c462 <_nano_sys_clock_tick_announce+0x126>
		_add_thread_to_ready_q(thread);
    c4ce:	4630      	mov	r0, r6
    c4d0:	f7ff fd64 	bl	bf9c <_add_thread_to_ready_q>
    c4d4:	e7e5      	b.n	c4a2 <_nano_sys_clock_tick_announce+0x166>
    c4d6:	bf00      	nop
    c4d8:	20001218 	.word	0x20001218
    c4dc:	200011e0 	.word	0x200011e0
    c4e0:	20001214 	.word	0x20001214
    c4e4:	200010f4 	.word	0x200010f4
    c4e8:	20001210 	.word	0x20001210

0000c4ec <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    c4ec:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    c4ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c4f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c4f6:	4903      	ldr	r1, [pc, #12]	; (c504 <k_sys_work_q_init+0x18>)
    c4f8:	4803      	ldr	r0, [pc, #12]	; (c508 <k_sys_work_q_init+0x1c>)
    c4fa:	f000 f965 	bl	c7c8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    c4fe:	2000      	movs	r0, #0
    c500:	bd08      	pop	{r3, pc}
    c502:	bf00      	nop
    c504:	20002da0 	.word	0x20002da0
    c508:	20001220 	.word	0x20001220

0000c50c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c50c:	6903      	ldr	r3, [r0, #16]
    c50e:	1c5a      	adds	r2, r3, #1
    c510:	d011      	beq.n	c536 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c512:	4a0a      	ldr	r2, [pc, #40]	; (c53c <_abort_timeout+0x30>)
    c514:	6992      	ldr	r2, [r2, #24]
    c516:	4290      	cmp	r0, r2
    c518:	bf1f      	itttt	ne
    c51a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c51c:	690a      	ldrne	r2, [r1, #16]
    c51e:	189b      	addne	r3, r3, r2
    c520:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    c522:	e890 000c 	ldmia.w	r0, {r2, r3}
    c526:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c528:	6802      	ldr	r2, [r0, #0]
    c52a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c530:	6103      	str	r3, [r0, #16]
	return 0;
    c532:	2000      	movs	r0, #0
    c534:	4770      	bx	lr
		return _INACTIVE;
    c536:	4618      	mov	r0, r3
}
    c538:	4770      	bx	lr
    c53a:	bf00      	nop
    c53c:	200011e0 	.word	0x200011e0

0000c540 <_ready_thread>:
	return !(_is_thread_prevented_from_running(thread) ||
    c540:	7a42      	ldrb	r2, [r0, #9]
    c542:	06d2      	lsls	r2, r2, #27
    c544:	d104      	bne.n	c550 <_ready_thread+0x10>
    c546:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c548:	3301      	adds	r3, #1
    c54a:	d101      	bne.n	c550 <_ready_thread+0x10>
		_add_thread_to_ready_q(thread);
    c54c:	f7ff bd26 	b.w	bf9c <_add_thread_to_ready_q>
    c550:	4770      	bx	lr
	...

0000c554 <schedule_new_thread.part.11>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    c554:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    c556:	f04f 0320 	mov.w	r3, #32
    c55a:	f3ef 8611 	mrs	r6, BASEPRI
    c55e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c562:	4a19      	ldr	r2, [pc, #100]	; (c5c8 <schedule_new_thread.part.11+0x74>)
	timeout->thread = thread;
    c564:	61c0      	str	r0, [r0, #28]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c566:	230a      	movs	r3, #10
    c568:	3109      	adds	r1, #9
    c56a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    c56e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c570:	6241      	str	r1, [r0, #36]	; 0x24
    c572:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c574:	2300      	movs	r3, #0
    c576:	6203      	str	r3, [r0, #32]
    c578:	f851 3f14 	ldr.w	r3, [r1, #20]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c57c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c57e:	f100 0514 	add.w	r5, r0, #20
    c582:	d108      	bne.n	c596 <schedule_new_thread.part.11+0x42>
	node->next = list;
    c584:	6141      	str	r1, [r0, #20]
	node->prev = list->tail;
    c586:	6993      	ldr	r3, [r2, #24]
    c588:	6183      	str	r3, [r0, #24]
	list->tail->next = node;
    c58a:	6993      	ldr	r3, [r2, #24]
    c58c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c58e:	6195      	str	r5, [r2, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c590:	f386 8811 	msr	BASEPRI, r6
    c594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c596:	2b00      	cmp	r3, #0
    c598:	d0f4      	beq.n	c584 <schedule_new_thread.part.11+0x30>
    c59a:	f8d2 e018 	ldr.w	lr, [r2, #24]
		if (*delta <= in_q->delta_ticks_from_prev) {
    c59e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c5a0:	691f      	ldr	r7, [r3, #16]
    c5a2:	42bc      	cmp	r4, r7
    c5a4:	dc08      	bgt.n	c5b8 <schedule_new_thread.part.11+0x64>
		node->prev = insert_point->prev;
    c5a6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c5a8:	1b3c      	subs	r4, r7, r4
    c5aa:	611c      	str	r4, [r3, #16]
    c5ac:	6182      	str	r2, [r0, #24]
		node->next = insert_point;
    c5ae:	6143      	str	r3, [r0, #20]
		insert_point->prev->next = node;
    c5b0:	685a      	ldr	r2, [r3, #4]
    c5b2:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    c5b4:	605d      	str	r5, [r3, #4]
    c5b6:	e7eb      	b.n	c590 <schedule_new_thread.part.11+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    c5b8:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    c5ba:	4573      	cmp	r3, lr
    c5bc:	6244      	str	r4, [r0, #36]	; 0x24
    c5be:	d0e1      	beq.n	c584 <schedule_new_thread.part.11+0x30>
    c5c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d1eb      	bne.n	c59e <schedule_new_thread.part.11+0x4a>
    c5c6:	e7dd      	b.n	c584 <schedule_new_thread.part.11+0x30>
    c5c8:	200011e0 	.word	0x200011e0

0000c5cc <k_is_in_isr>:
    c5cc:	f3ef 8005 	mrs	r0, IPSR
    c5d0:	280d      	cmp	r0, #13
    c5d2:	d807      	bhi.n	c5e4 <k_is_in_isr+0x18>
    c5d4:	b138      	cbz	r0, c5e6 <k_is_in_isr+0x1a>
    c5d6:	4b04      	ldr	r3, [pc, #16]	; (c5e8 <k_is_in_isr+0x1c>)
    c5d8:	6858      	ldr	r0, [r3, #4]
    c5da:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    c5de:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    c5e2:	4770      	bx	lr
    c5e4:	2001      	movs	r0, #1
}
    c5e6:	4770      	bx	lr
    c5e8:	e000ed00 	.word	0xe000ed00

0000c5ec <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    c5ec:	4b02      	ldr	r3, [pc, #8]	; (c5f8 <_is_thread_essential+0xc>)
    c5ee:	689b      	ldr	r3, [r3, #8]
    c5f0:	7a18      	ldrb	r0, [r3, #8]
}
    c5f2:	f000 0001 	and.w	r0, r0, #1
    c5f6:	4770      	bx	lr
    c5f8:	200011e0 	.word	0x200011e0

0000c5fc <_impl_k_thread_start>:
{
    c5fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    c5fe:	f04f 0320 	mov.w	r3, #32
    c602:	f3ef 8411 	mrs	r4, BASEPRI
    c606:	f383 8811 	msr	BASEPRI, r3
    c60a:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    c60c:	0759      	lsls	r1, r3, #29
    c60e:	d402      	bmi.n	c616 <_impl_k_thread_start+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c610:	f384 8811 	msr	BASEPRI, r4
    c614:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c616:	f023 0304 	bic.w	r3, r3, #4
    c61a:	7243      	strb	r3, [r0, #9]
	_ready_thread(thread);
    c61c:	f7ff ff90 	bl	c540 <_ready_thread>
	_reschedule(key);
    c620:	4620      	mov	r0, r4
}
    c622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_reschedule(key);
    c626:	f7ff bc61 	b.w	beec <_reschedule>
	...

0000c62c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    c62c:	b530      	push	{r4, r5, lr}
    c62e:	b087      	sub	sp, #28
    c630:	4604      	mov	r4, r0
	stack_size = adjust_stack_size(stack_size);

	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c632:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    c634:	9504      	str	r5, [sp, #16]
    c636:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c638:	9503      	str	r5, [sp, #12]
    c63a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    c63c:	9502      	str	r5, [sp, #8]
    c63e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c640:	9501      	str	r5, [sp, #4]
    c642:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c644:	9500      	str	r5, [sp, #0]
    c646:	f7f5 f8d1 	bl	17ec <_new_thread>
	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    c64a:	4b04      	ldr	r3, [pc, #16]	; (c65c <_setup_new_thread+0x30>)
    c64c:	689b      	ldr	r3, [r3, #8]
    c64e:	b913      	cbnz	r3, c656 <_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    c650:	6663      	str	r3, [r4, #100]	; 0x64
}
    c652:	b007      	add	sp, #28
    c654:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    c656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c658:	e7fa      	b.n	c650 <_setup_new_thread+0x24>
    c65a:	bf00      	nop
    c65c:	200011e0 	.word	0x200011e0

0000c660 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    c660:	b570      	push	{r4, r5, r6, lr}
    c662:	b086      	sub	sp, #24
    c664:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c666:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c668:	9604      	str	r6, [sp, #16]
    c66a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c66c:	9603      	str	r6, [sp, #12]
    c66e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c670:	9602      	str	r6, [sp, #8]
    c672:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    c674:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c676:	9601      	str	r6, [sp, #4]
    c678:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c67a:	9600      	str	r6, [sp, #0]
    c67c:	f7ff ffd6 	bl	c62c <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
    c680:	1c6b      	adds	r3, r5, #1
    c682:	d003      	beq.n	c68c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    c684:	b92d      	cbnz	r5, c692 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    c686:	4620      	mov	r0, r4
    c688:	f7ff ffb8 	bl	c5fc <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    c68c:	4620      	mov	r0, r4
    c68e:	b006      	add	sp, #24
    c690:	bd70      	pop	{r4, r5, r6, pc}
    c692:	4629      	mov	r1, r5
    c694:	4620      	mov	r0, r4
    c696:	f7ff ff5d 	bl	c554 <schedule_new_thread.part.11>
    c69a:	e7f7      	b.n	c68c <_impl_k_thread_create+0x2c>

0000c69c <_k_thread_single_abort>:
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    c69c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    c69e:	b510      	push	{r4, lr}
    c6a0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    c6a2:	b103      	cbz	r3, c6a6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    c6a4:	4798      	blx	r3
    c6a6:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c6a8:	06da      	lsls	r2, r3, #27
    c6aa:	d106      	bne.n	c6ba <_k_thread_single_abort+0x1e>
    c6ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c6ae:	3201      	adds	r2, #1
    c6b0:	d103      	bne.n	c6ba <_k_thread_single_abort+0x1e>
	}

	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    c6b2:	4620      	mov	r0, r4
    c6b4:	f7ff fbca 	bl	be4c <_remove_thread_from_ready_q>
    c6b8:	e00b      	b.n	c6d2 <_k_thread_single_abort+0x36>
	} else {
		if (_is_thread_pending(thread)) {
    c6ba:	079b      	lsls	r3, r3, #30
    c6bc:	d502      	bpl.n	c6c4 <_k_thread_single_abort+0x28>
			_unpend_thread_no_timeout(thread);
    c6be:	4620      	mov	r0, r4
    c6c0:	f7ff fbec 	bl	be9c <_unpend_thread_no_timeout>
		}
		if (_is_thread_timeout_active(thread)) {
    c6c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c6c6:	3301      	adds	r3, #1
    c6c8:	d003      	beq.n	c6d2 <_k_thread_single_abort+0x36>
	return _abort_timeout(&thread->base.timeout);
    c6ca:	f104 0014 	add.w	r0, r4, #20
    c6ce:	f7ff ff1d 	bl	c50c <_abort_timeout>
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    c6d2:	7a63      	ldrb	r3, [r4, #9]
    c6d4:	f043 0308 	orr.w	r3, r3, #8
    c6d8:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    c6da:	bd10      	pop	{r4, pc}

0000c6dc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    c6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    c6de:	4f21      	ldr	r7, [pc, #132]	; (c764 <_init_static_threads+0x88>)
    c6e0:	4d21      	ldr	r5, [pc, #132]	; (c768 <_init_static_threads+0x8c>)
{
    c6e2:	b087      	sub	sp, #28
    c6e4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c6e6:	42bd      	cmp	r5, r7
    c6e8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    c6ec:	d314      	bcc.n	c718 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    c6ee:	4b1f      	ldr	r3, [pc, #124]	; (c76c <_init_static_threads+0x90>)
    c6f0:	689a      	ldr	r2, [r3, #8]
    c6f2:	7ad3      	ldrb	r3, [r2, #11]
    c6f4:	3b01      	subs	r3, #1
    c6f6:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    c6f8:	f04f 0320 	mov.w	r3, #32
    c6fc:	f3ef 8511 	mrs	r5, BASEPRI
    c700:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    c704:	4c18      	ldr	r4, [pc, #96]	; (c768 <_init_static_threads+0x8c>)
    c706:	42b4      	cmp	r4, r6
    c708:	d31f      	bcc.n	c74a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c70a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    c70e:	b007      	add	sp, #28
    c710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c714:	f7ff bc08 	b.w	bf28 <k_sched_unlock>
		_setup_new_thread(
    c718:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c71c:	9304      	str	r3, [sp, #16]
    c71e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c722:	9303      	str	r3, [sp, #12]
    c724:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c728:	9302      	str	r3, [sp, #8]
    c72a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c72e:	9301      	str	r3, [sp, #4]
    c730:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c734:	9300      	str	r3, [sp, #0]
    c736:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    c73a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    c73c:	f7ff ff76 	bl	c62c <_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c740:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c744:	651d      	str	r5, [r3, #80]	; 0x50
    c746:	4625      	mov	r5, r4
    c748:	e7cd      	b.n	c6e6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    c74a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c74c:	1c4b      	adds	r3, r1, #1
    c74e:	d003      	beq.n	c758 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    c750:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    c752:	b919      	cbnz	r1, c75c <_init_static_threads+0x80>
    c754:	f7ff ff52 	bl	c5fc <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c758:	342c      	adds	r4, #44	; 0x2c
    c75a:	e7d4      	b.n	c706 <_init_static_threads+0x2a>
    c75c:	f7ff fefa 	bl	c554 <schedule_new_thread.part.11>
    c760:	e7fa      	b.n	c758 <_init_static_threads+0x7c>
    c762:	bf00      	nop
    c764:	200034ac 	.word	0x200034ac
    c768:	200034ac 	.word	0x200034ac
    c76c:	200011e0 	.word	0x200011e0

0000c770 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    c770:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    c772:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    c774:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    c776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    c77a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    c77c:	72c3      	strb	r3, [r0, #11]
    c77e:	6242      	str	r2, [r0, #36]	; 0x24
	t->wait_q = NULL;
    c780:	6203      	str	r3, [r0, #32]
	t->thread = NULL;
    c782:	61c3      	str	r3, [r0, #28]
	t->func = func;
    c784:	6283      	str	r3, [r0, #40]	; 0x28
    c786:	4770      	bx	lr

0000c788 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    c788:	b510      	push	{r4, lr}
    c78a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout);
    c78c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c790:	4620      	mov	r0, r4
    c792:	f7ff faad 	bl	bcf0 <_impl_k_queue_get>
	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (!work) {
    c796:	4603      	mov	r3, r0
    c798:	2800      	cmp	r0, #0
    c79a:	d0f7      	beq.n	c78c <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c79c:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    c79e:	6842      	ldr	r2, [r0, #4]
    c7a0:	f3bf 8f5b 	dmb	ish
    c7a4:	e853 1f00 	ldrex	r1, [r3]
    c7a8:	f021 0e01 	bic.w	lr, r1, #1
    c7ac:	e843 ec00 	strex	ip, lr, [r3]
    c7b0:	f1bc 0f00 	cmp.w	ip, #0
    c7b4:	d1f6      	bne.n	c7a4 <work_q_main+0x1c>
    c7b6:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    c7ba:	07cb      	lsls	r3, r1, #31
    c7bc:	d500      	bpl.n	c7c0 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    c7be:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c7c0:	f7ff fcf8 	bl	c1b4 <_impl_k_yield>
    c7c4:	e7e2      	b.n	c78c <work_q_main+0x4>
	...

0000c7c8 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7ca:	b087      	sub	sp, #28
    c7cc:	4604      	mov	r4, r0
    c7ce:	461f      	mov	r7, r3
    c7d0:	460d      	mov	r5, r1
    c7d2:	4616      	mov	r6, r2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue);
    c7d4:	f7ff fa60 	bl	bc98 <_impl_k_queue_init>

    c7d8:	2000      	movs	r0, #0
    c7da:	9005      	str	r0, [sp, #20]
    c7dc:	9004      	str	r0, [sp, #16]
    c7de:	9002      	str	r0, [sp, #8]
    c7e0:	9001      	str	r0, [sp, #4]
    c7e2:	9703      	str	r7, [sp, #12]
    c7e4:	9400      	str	r4, [sp, #0]
    c7e6:	4b04      	ldr	r3, [pc, #16]	; (c7f8 <k_work_q_start+0x30>)
    c7e8:	4632      	mov	r2, r6
    c7ea:	4629      	mov	r1, r5
    c7ec:	f104 0010 	add.w	r0, r4, #16
    c7f0:	f7ff ff36 	bl	c660 <_impl_k_thread_create>
	k_queue_init(&work_q->queue);
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    c7f4:	b007      	add	sp, #28
    c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7f8:	0000c789 	.word	0x0000c789

0000c7fc <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c7fc:	2314      	movs	r3, #20
    c7fe:	b530      	push	{r4, r5, lr}
    c800:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    c804:	2400      	movs	r4, #0
	for (; last_registered >= 0; last_registered--) {
    c806:	2900      	cmp	r1, #0
    c808:	da00      	bge.n	c80c <clear_event_registrations+0x10>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c80a:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
    c80c:	7b43      	ldrb	r3, [r0, #13]
	event->poller = NULL;
    c80e:	6084      	str	r4, [r0, #8]
	switch (event->type) {
    c810:	f003 030f 	and.w	r3, r3, #15
    c814:	2b02      	cmp	r3, #2
    c816:	d003      	beq.n	c820 <clear_event_registrations+0x24>
    c818:	2b04      	cmp	r3, #4
    c81a:	d001      	beq.n	c820 <clear_event_registrations+0x24>
    c81c:	2b01      	cmp	r3, #1
    c81e:	d104      	bne.n	c82a <clear_event_registrations+0x2e>
	node->prev->next = node->next;
    c820:	6843      	ldr	r3, [r0, #4]
    c822:	6805      	ldr	r5, [r0, #0]
    c824:	601d      	str	r5, [r3, #0]
	node->next->prev = node->prev;
    c826:	6805      	ldr	r5, [r0, #0]
    c828:	606b      	str	r3, [r5, #4]
    c82a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c82e:	f04f 0320 	mov.w	r3, #32
    c832:	f3ef 8211 	mrs	r2, BASEPRI
    c836:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    c83a:	3901      	subs	r1, #1
    c83c:	3814      	subs	r0, #20
    c83e:	e7e2      	b.n	c806 <clear_event_registrations+0xa>

0000c840 <signal_poll_event>:
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
	if (!event->poller) {
    c840:	6883      	ldr	r3, [r0, #8]
{
    c842:	b570      	push	{r4, r5, r6, lr}
    c844:	4605      	mov	r5, r0
    c846:	460e      	mov	r6, r1
	if (!event->poller) {
    c848:	b1d3      	cbz	r3, c880 <signal_poll_event+0x40>

	struct k_thread *thread = event->poller->thread;

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	event->poller->is_polling = 0;
    c84a:	2200      	movs	r2, #0
	struct k_thread *thread = event->poller->thread;
    c84c:	681c      	ldr	r4, [r3, #0]
	event->poller->is_polling = 0;
    c84e:	605a      	str	r2, [r3, #4]

	if (!_is_thread_pending(thread)) {
    c850:	7a63      	ldrb	r3, [r4, #9]
    c852:	079a      	lsls	r2, r3, #30
    c854:	d514      	bpl.n	c880 <signal_poll_event+0x40>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c856:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c858:	3302      	adds	r3, #2
    c85a:	d01a      	beq.n	c892 <signal_poll_event+0x52>
		return -EAGAIN;
	}

	_unpend_thread(thread);
    c85c:	4620      	mov	r0, r4
    c85e:	f7ff fb3a 	bl	bed6 <_unpend_thread>
	_set_thread_return_value(thread,
    c862:	2e00      	cmp	r6, #0
    c864:	bf0c      	ite	eq
    c866:	f06f 0303 	mvneq.w	r3, #3
    c86a:	2300      	movne	r3, #0
    c86c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return !(_is_thread_prevented_from_running(thread) ||
    c86e:	7a63      	ldrb	r3, [r4, #9]
    c870:	06db      	lsls	r3, r3, #27
    c872:	d105      	bne.n	c880 <signal_poll_event+0x40>
    c874:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c876:	3301      	adds	r3, #1
    c878:	d102      	bne.n	c880 <signal_poll_event+0x40>
		_add_thread_to_ready_q(thread);
    c87a:	4620      	mov	r0, r4
    c87c:	f7ff fb8e 	bl	bf9c <_add_thread_to_ready_q>
	event->state |= state;
    c880:	7b6b      	ldrb	r3, [r5, #13]
    c882:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    c886:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    c88a:	2000      	movs	r0, #0
	event->state |= state;
    c88c:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    c88e:	60a8      	str	r0, [r5, #8]

	_ready_thread(thread);

ready_event:
	set_event_ready(event, state);
	return 0;
    c890:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    c892:	f06f 000a 	mvn.w	r0, #10
}
    c896:	bd70      	pop	{r4, r5, r6, pc}

0000c898 <add_event>:
{
    c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c89a:	6803      	ldr	r3, [r0, #0]
    c89c:	4298      	cmp	r0, r3
    c89e:	4604      	mov	r4, r0
    c8a0:	460e      	mov	r6, r1
    c8a2:	4617      	mov	r7, r2
    c8a4:	d106      	bne.n	c8b4 <add_event+0x1c>
	node->next = list;
    c8a6:	6034      	str	r4, [r6, #0]
	node->prev = list->tail;
    c8a8:	6863      	ldr	r3, [r4, #4]
    c8aa:	6073      	str	r3, [r6, #4]
	list->tail->next = node;
    c8ac:	6863      	ldr	r3, [r4, #4]
    c8ae:	601e      	str	r6, [r3, #0]
	list->tail = node;
    c8b0:	6066      	str	r6, [r4, #4]
    c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c8b4:	6843      	ldr	r3, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    c8b6:	2b00      	cmp	r3, #0
    c8b8:	d0f5      	beq.n	c8a6 <add_event+0xe>
    c8ba:	689b      	ldr	r3, [r3, #8]
    c8bc:	6811      	ldr	r1, [r2, #0]
    c8be:	6818      	ldr	r0, [r3, #0]
    c8c0:	f7ff faba 	bl	be38 <_is_t1_higher_prio_than_t2>
    c8c4:	2800      	cmp	r0, #0
    c8c6:	d1ee      	bne.n	c8a6 <add_event+0xe>
	return list->head == list;
    c8c8:	6825      	ldr	r5, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c8ca:	42ac      	cmp	r4, r5
    c8cc:	d0eb      	beq.n	c8a6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c8ce:	2d00      	cmp	r5, #0
    c8d0:	d0e9      	beq.n	c8a6 <add_event+0xe>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    c8d2:	68ab      	ldr	r3, [r5, #8]
    c8d4:	6838      	ldr	r0, [r7, #0]
    c8d6:	6819      	ldr	r1, [r3, #0]
    c8d8:	f7ff faae 	bl	be38 <_is_t1_higher_prio_than_t2>
    c8dc:	b130      	cbz	r0, c8ec <add_event+0x54>
		node->prev = insert_point->prev;
    c8de:	686b      	ldr	r3, [r5, #4]
    c8e0:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
    c8e2:	6035      	str	r5, [r6, #0]
		insert_point->prev->next = node;
    c8e4:	686b      	ldr	r3, [r5, #4]
    c8e6:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
    c8e8:	606e      	str	r6, [r5, #4]
    c8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    c8ec:	6863      	ldr	r3, [r4, #4]
    c8ee:	429d      	cmp	r5, r3
    c8f0:	d0d9      	beq.n	c8a6 <add_event+0xe>
    c8f2:	682d      	ldr	r5, [r5, #0]
    c8f4:	e7eb      	b.n	c8ce <add_event+0x36>

0000c8f6 <k_poll_event_init>:
{
    c8f6:	b530      	push	{r4, r5, lr}
	event->type = type;
    c8f8:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    c8fa:	6103      	str	r3, [r0, #16]
	event->type = type;
    c8fc:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    c900:	7b81      	ldrb	r1, [r0, #14]
    c902:	f362 0100 	bfi	r1, r2, #0, #1
    c906:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    c908:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    c90a:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    c90c:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    c910:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    c914:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    c916:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    c918:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    c91a:	bd30      	pop	{r4, r5, pc}

0000c91c <_impl_k_poll>:
{
    c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    c920:	4b3f      	ldr	r3, [pc, #252]	; (ca20 <_impl_k_poll+0x104>)
{
    c922:	b085      	sub	sp, #20
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    c924:	689b      	ldr	r3, [r3, #8]
    c926:	9300      	str	r3, [sp, #0]
	for (int ii = 0; ii < num_events; ii++) {
    c928:	2600      	movs	r6, #0
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    c92a:	2301      	movs	r3, #1
{
    c92c:	4607      	mov	r7, r0
    c92e:	468a      	mov	sl, r1
    c930:	4690      	mov	r8, r2
	struct _poller poller = { .thread = _current, .is_polling = 1, };
    c932:	9301      	str	r3, [sp, #4]
    c934:	4604      	mov	r4, r0
	int last_registered = -1, rc;
    c936:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	event->poller = NULL;
    c93a:	46b1      	mov	r9, r6
	for (int ii = 0; ii < num_events; ii++) {
    c93c:	4556      	cmp	r6, sl
    c93e:	db10      	blt.n	c962 <_impl_k_poll+0x46>
    c940:	f04f 0320 	mov.w	r3, #32
    c944:	f3ef 8611 	mrs	r6, BASEPRI
    c948:	f383 8811 	msr	BASEPRI, r3
	if (!poller.is_polling) {
    c94c:	9c01      	ldr	r4, [sp, #4]
    c94e:	2c00      	cmp	r4, #0
    c950:	d13f      	bne.n	c9d2 <_impl_k_poll+0xb6>
	clear_event_registrations(events, last_registered, key);
    c952:	4632      	mov	r2, r6
    c954:	4629      	mov	r1, r5
    c956:	4638      	mov	r0, r7
    c958:	f7ff ff50 	bl	c7fc <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c95c:	f386 8811 	msr	BASEPRI, r6
	return swap_rc;
    c960:	e040      	b.n	c9e4 <_impl_k_poll+0xc8>
	__asm__ volatile(
    c962:	f04f 0320 	mov.w	r3, #32
    c966:	f3ef 8b11 	mrs	fp, BASEPRI
    c96a:	f383 8811 	msr	BASEPRI, r3
	switch (event->type) {
    c96e:	7b62      	ldrb	r2, [r4, #13]
    c970:	f002 030f 	and.w	r3, r2, #15
    c974:	2b02      	cmp	r3, #2
    c976:	d003      	beq.n	c980 <_impl_k_poll+0x64>
    c978:	2b04      	cmp	r3, #4
    c97a:	d004      	beq.n	c986 <_impl_k_poll+0x6a>
    c97c:	2b01      	cmp	r3, #1
    c97e:	d106      	bne.n	c98e <_impl_k_poll+0x72>
		if (event->signal->signaled) {
    c980:	6921      	ldr	r1, [r4, #16]
    c982:	6889      	ldr	r1, [r1, #8]
    c984:	e001      	b.n	c98a <_impl_k_poll+0x6e>
		if (!k_queue_is_empty(event->queue)) {
    c986:	6921      	ldr	r1, [r4, #16]
    c988:	6809      	ldr	r1, [r1, #0]
		if (event->signal->signaled) {
    c98a:	2900      	cmp	r1, #0
    c98c:	d13d      	bne.n	ca0a <_impl_k_poll+0xee>
		} else if (timeout != K_NO_WAIT && poller.is_polling) {
    c98e:	f1b8 0f00 	cmp.w	r8, #0
    c992:	d014      	beq.n	c9be <_impl_k_poll+0xa2>
    c994:	9a01      	ldr	r2, [sp, #4]
    c996:	b192      	cbz	r2, c9be <_impl_k_poll+0xa2>
	switch (event->type) {
    c998:	2b02      	cmp	r3, #2
    c99a:	d007      	beq.n	c9ac <_impl_k_poll+0x90>
    c99c:	2b04      	cmp	r3, #4
    c99e:	d013      	beq.n	c9c8 <_impl_k_poll+0xac>
    c9a0:	2b01      	cmp	r3, #1
    c9a2:	d109      	bne.n	c9b8 <_impl_k_poll+0x9c>
		add_event(&event->signal->poll_events, event, poller);
    c9a4:	466a      	mov	r2, sp
    c9a6:	4621      	mov	r1, r4
    c9a8:	6920      	ldr	r0, [r4, #16]
    c9aa:	e003      	b.n	c9b4 <_impl_k_poll+0x98>
		add_event(&event->sem->poll_events, event, poller);
    c9ac:	6920      	ldr	r0, [r4, #16]
    c9ae:	466a      	mov	r2, sp
    c9b0:	4621      	mov	r1, r4
    c9b2:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    c9b4:	f7ff ff70 	bl	c898 <add_event>
	event->poller = poller;
    c9b8:	f8c4 d008 	str.w	sp, [r4, #8]
				++last_registered;
    c9bc:	3501      	adds	r5, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c9be:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    c9c2:	3601      	adds	r6, #1
    c9c4:	3414      	adds	r4, #20
    c9c6:	e7b9      	b.n	c93c <_impl_k_poll+0x20>
		add_event(&event->queue->poll_events, event, poller);
    c9c8:	6920      	ldr	r0, [r4, #16]
    c9ca:	466a      	mov	r2, sp
    c9cc:	4621      	mov	r1, r4
    c9ce:	3008      	adds	r0, #8
    c9d0:	e7f0      	b.n	c9b4 <_impl_k_poll+0x98>
	poller.is_polling = 0;
    c9d2:	2300      	movs	r3, #0
    c9d4:	9301      	str	r3, [sp, #4]
	if (timeout == K_NO_WAIT) {
    c9d6:	f1b8 0f00 	cmp.w	r8, #0
    c9da:	d107      	bne.n	c9ec <_impl_k_poll+0xd0>
    c9dc:	f386 8811 	msr	BASEPRI, r6
		return -EAGAIN;
    c9e0:	f06f 040a 	mvn.w	r4, #10
}
    c9e4:	4620      	mov	r0, r4
    c9e6:	b005      	add	sp, #20
    c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    c9ec:	a902      	add	r1, sp, #8
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    c9ee:	4642      	mov	r2, r8
    c9f0:	4630      	mov	r0, r6
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    c9f2:	9102      	str	r1, [sp, #8]
    c9f4:	9103      	str	r1, [sp, #12]
	int swap_rc = _pend_current_thread(key, &wait_q, timeout);
    c9f6:	f7ff fb7f 	bl	c0f8 <_pend_current_thread>
    c9fa:	4604      	mov	r4, r0
	__asm__ volatile(
    c9fc:	f04f 0320 	mov.w	r3, #32
    ca00:	f3ef 8611 	mrs	r6, BASEPRI
    ca04:	f383 8811 	msr	BASEPRI, r3
    ca08:	e7a3      	b.n	c952 <_impl_k_poll+0x36>
	event->state |= state;
    ca0a:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    ca0e:	f363 1207 	bfi	r2, r3, #4, #4
    ca12:	7362      	strb	r2, [r4, #13]
	event->poller = NULL;
    ca14:	f8c4 9008 	str.w	r9, [r4, #8]
			poller.is_polling = 0;
    ca18:	f8cd 9004 	str.w	r9, [sp, #4]
    ca1c:	e7cf      	b.n	c9be <_impl_k_poll+0xa2>
    ca1e:	bf00      	nop
    ca20:	200011e0 	.word	0x200011e0

0000ca24 <_handle_obj_poll_events>:
	return list->head == list;
    ca24:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
    ca26:	4298      	cmp	r0, r3
    ca28:	d007      	beq.n	ca3a <_handle_obj_poll_events+0x16>
	node->prev->next = node->next;
    ca2a:	e893 0005 	ldmia.w	r3, {r0, r2}
    ca2e:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
    ca30:	6818      	ldr	r0, [r3, #0]
    ca32:	6042      	str	r2, [r0, #4]
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event) {
		(void) signal_poll_event(poll_event, state);
    ca34:	4618      	mov	r0, r3
    ca36:	f7ff bf03 	b.w	c840 <signal_poll_event>
    ca3a:	4770      	bx	lr

0000ca3c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    ca3c:	4770      	bx	lr
